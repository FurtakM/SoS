// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10186 0 0
// PrepareAmerican ;
  19: CALL 228 0 0
// PrepareRussian ;
  23: CALL 1482 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6115 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := LoadVariable ( 12_SciDed_1 , false ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 12_SciDed_1
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// end ;
 112: LD_VAR 0 1
 116: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 117: LD_INT 22
 119: PUSH
 120: LD_INT 1
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 33
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 69
 145: PUSH
 146: LD_INT 15
 148: GREATEREQUAL
 149: IFFALSE 161
 151: GO 153
 153: DISABLE
// SetAchievement ( ACH_FORT ) ;
 154: LD_STRING ACH_FORT
 156: PPUSH
 157: CALL_OW 543
 161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 162: LD_INT 22
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 25
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PPUSH
 186: CALL_OW 69
 190: PUSH
 191: LD_INT 0
 193: EQUAL
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// SetAchievement ( ACH_APE ) ;
 199: LD_STRING ACH_APE
 201: PPUSH
 202: CALL_OW 543
 206: END
// every 0 0$1 trigger killCounter >= 20 do
 207: LD_EXP 5
 211: PUSH
 212: LD_INT 20
 214: GREATEREQUAL
 215: IFFALSE 227
 217: GO 219
 219: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 220: LD_STRING ACH_DOUBLE
 222: PPUSH
 223: CALL_OW 543
 227: END
// export JMM , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 228: LD_INT 0
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 251: LD_INT 48
 253: PPUSH
 254: LD_STRING deltakappa
 256: PPUSH
 257: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 261: LD_INT 48
 263: PPUSH
 264: CALL_OW 274
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 2000
 274: PUSH
 275: LD_INT 1600
 277: PUSH
 278: LD_INT 1200
 280: PUSH
 281: LD_INT 900
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: PPUSH
 296: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 300: LD_INT 48
 302: PPUSH
 303: CALL_OW 274
 307: PPUSH
 308: LD_INT 2
 310: PPUSH
 311: LD_INT 20
 313: PPUSH
 314: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 318: LD_INT 48
 320: PPUSH
 321: CALL_OW 274
 325: PPUSH
 326: LD_INT 3
 328: PPUSH
 329: LD_INT 100
 331: PPUSH
 332: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 336: LD_ADDR_EXP 8
 340: PUSH
 341: LD_STRING JMM
 343: PPUSH
 344: LD_EXP 1
 348: NOT
 349: PPUSH
 350: LD_STRING 13f_
 352: PPUSH
 353: CALL 30825 0 3
 357: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 358: LD_EXP 8
 362: PPUSH
 363: LD_INT 1
 365: PPUSH
 366: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 370: LD_INT 5
 372: PUSH
 373: LD_INT 5
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 3
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_OWVAR 67
 392: ARRAY
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 9
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: LD_INT 5
 408: PUSH
 409: LD_INT 5
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: LD_INT 100
 426: PPUSH
 427: CALL 35842 0 5
// veh := CreateVehicle ;
 431: LD_ADDR_VAR 0 4
 435: PUSH
 436: CALL_OW 45
 440: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 441: LD_VAR 0 4
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 233
// PlaceUnitXY ( veh , 5 , 5 , false ) ;
 453: LD_VAR 0 4
 457: PPUSH
 458: LD_INT 5
 460: PPUSH
 461: LD_INT 5
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
 471: LD_EXP 8
 475: PPUSH
 476: LD_VAR 0 4
 480: PPUSH
 481: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 485: LD_VAR 0 4
 489: PPUSH
 490: LD_INT 1
 492: NEG
 493: PPUSH
 494: CALL_OW 242
// ComMoveXY ( veh , 21 , 8 ) ;
 498: LD_VAR 0 4
 502: PPUSH
 503: LD_INT 21
 505: PPUSH
 506: LD_INT 8
 508: PPUSH
 509: CALL_OW 111
// uc_side := 4 ;
 513: LD_ADDR_OWVAR 20
 517: PUSH
 518: LD_INT 4
 520: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 521: LD_ADDR_EXP 12
 525: PUSH
 526: LD_STRING Powell
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: LD_STRING 
 534: PPUSH
 535: CALL 30825 0 3
 539: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 540: LD_ADDR_EXP 9
 544: PUSH
 545: LD_STRING Joan
 547: PPUSH
 548: LD_EXP 1
 552: NOT
 553: PPUSH
 554: LD_STRING 10c_
 556: PPUSH
 557: CALL 30825 0 3
 561: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 562: LD_ADDR_EXP 10
 566: PUSH
 567: LD_STRING Lisa
 569: PPUSH
 570: LD_EXP 1
 574: NOT
 575: PPUSH
 576: LD_STRING 13s_
 578: PPUSH
 579: CALL 30825 0 3
 583: ST_TO_ADDR
// if Joan then
 584: LD_EXP 9
 588: IFFALSE 627
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 590: LD_EXP 9
 594: PPUSH
 595: LD_INT 4
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 605: LD_EXP 9
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: CALL_OW 336
// JMMGirl = 1 ;
 617: LD_ADDR_EXP 2
 621: PUSH
 622: LD_INT 1
 624: ST_TO_ADDR
// end else
 625: GO 718
// if Lisa then
 627: LD_EXP 10
 631: IFFALSE 670
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 633: LD_EXP 10
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 648: LD_EXP 10
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL_OW 336
// JMMGirl := 2 ;
 660: LD_ADDR_EXP 2
 664: PUSH
 665: LD_INT 2
 667: ST_TO_ADDR
// end else
 668: GO 718
// begin Connie := NewCharacter ( Coonie ) ;
 670: LD_ADDR_EXP 11
 674: PUSH
 675: LD_STRING Coonie
 677: PPUSH
 678: CALL_OW 25
 682: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 683: LD_EXP 11
 687: PPUSH
 688: LD_INT 4
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 698: LD_EXP 11
 702: PPUSH
 703: LD_INT 3
 705: PPUSH
 706: CALL_OW 336
// JMMGirl := 3 ;
 710: LD_ADDR_EXP 2
 714: PUSH
 715: LD_INT 3
 717: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: DOUBLE
 724: LD_INT 1
 726: DEC
 727: ST_TO_ADDR
 728: LD_INT 4
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 3
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: PUSH
 752: FOR_TO
 753: IFFALSE 907
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 2
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_VAR 0 2
 777: PUSH
 778: LD_INT 4
 780: MOD
 781: PUSH
 782: LD_INT 1
 784: PLUS
 785: ARRAY
 786: PPUSH
 787: LD_INT 1
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 9
 795: PUSH
 796: LD_INT 7
 798: PUSH
 799: LD_INT 4
 801: PUSH
 802: LD_INT 5
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: PUSH
 811: LD_VAR 0 2
 815: PUSH
 816: LD_INT 4
 818: MOD
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: PPUSH
 825: LD_INT 33
 827: PPUSH
 828: LD_INT 55
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL 35842 0 5
// veh := CreateVehicle ;
 840: LD_ADDR_VAR 0 4
 844: PUSH
 845: CALL_OW 45
 849: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: LD_INT 5
 860: PPUSH
 861: CALL_OW 12
 865: PPUSH
 866: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_INT 500
 877: PPUSH
 878: LD_INT 950
 880: PPUSH
 881: CALL_OW 12
 885: PPUSH
 886: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_INT 5
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 49
// end ;
 905: GO 752
 907: POP
 908: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: DOUBLE
 915: LD_INT 1
 917: DEC
 918: ST_TO_ADDR
 919: LD_INT 3
 921: PUSH
 922: LD_INT 3
 924: PUSH
 925: LD_INT 2
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_OWVAR 67
 941: ARRAY
 942: PUSH
 943: FOR_TO
 944: IFFALSE 1066
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 946: LD_INT 3
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 2
 963: MOD
 964: PUSH
 965: LD_INT 1
 967: PLUS
 968: ARRAY
 969: PPUSH
 970: LD_INT 1
 972: PPUSH
 973: LD_INT 3
 975: PPUSH
 976: LD_INT 9
 978: PUSH
 979: LD_INT 5
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_VAR 0 2
 990: PUSH
 991: LD_INT 2
 993: MOD
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL 35842 0 5
// veh := CreateVehicle ;
1007: LD_ADDR_VAR 0 4
1011: PUSH
1012: CALL_OW 45
1016: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1017: LD_VAR 0 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 5
1027: PPUSH
1028: CALL_OW 12
1032: PPUSH
1033: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1037: LD_VAR 0 4
1041: PPUSH
1042: LD_INT 1000
1044: PPUSH
1045: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1049: LD_VAR 0 4
1053: PPUSH
1054: LD_INT 17
1056: PPUSH
1057: LD_INT 0
1059: PPUSH
1060: CALL_OW 49
// end ;
1064: GO 943
1066: POP
1067: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1068: LD_ADDR_VAR 0 2
1072: PUSH
1073: DOUBLE
1074: LD_INT 1
1076: DEC
1077: ST_TO_ADDR
1078: LD_INT 3
1080: PUSH
1081: LD_INT 2
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: PUSH
1102: FOR_TO
1103: IFFALSE 1151
// begin PrepareApeman ( 1 ) ;
1105: LD_INT 1
1107: PPUSH
1108: CALL 64499 0 1
// uc_side := 4 ;
1112: LD_ADDR_OWVAR 20
1116: PUSH
1117: LD_INT 4
1119: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1120: LD_ADDR_OWVAR 28
1124: PUSH
1125: LD_INT 16
1127: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1128: CALL_OW 44
1132: PPUSH
1133: LD_INT 84
1135: PPUSH
1136: LD_INT 127
1138: PPUSH
1139: LD_INT 5
1141: PPUSH
1142: LD_INT 0
1144: PPUSH
1145: CALL_OW 50
// end ;
1149: GO 1102
1151: POP
1152: POP
// uc_side := 4 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 4
1160: ST_TO_ADDR
// uc_nation := 1 ;
1161: LD_ADDR_OWVAR 21
1165: PUSH
1166: LD_INT 1
1168: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 12
1180: PPUSH
1181: LD_INT 100
1183: PPUSH
1184: CALL 35842 0 5
// veh := CreateVehicle ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: CALL_OW 45
1197: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1198: LD_VAR 0 4
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL_OW 290
// SetLives ( veh , 450 ) ;
1213: LD_VAR 0 4
1217: PPUSH
1218: LD_INT 450
1220: PPUSH
1221: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1225: LD_VAR 0 4
1229: PPUSH
1230: LD_INT 122
1232: PPUSH
1233: LD_INT 118
1235: PPUSH
1236: LD_INT 4
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL 70368 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 2
1251: PPUSH
1252: LD_INT 0
1254: PPUSH
1255: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 124
1266: PPUSH
1267: LD_INT 120
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1277: LD_ADDR_VAR 0 5
1281: PUSH
1282: LD_INT 18
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 517
1292: ST_TO_ADDR
// for i := 1 to 4 do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: DOUBLE
1299: LD_INT 1
1301: DEC
1302: ST_TO_ADDR
1303: LD_INT 4
1305: PUSH
1306: FOR_TO
1307: IFFALSE 1415
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1309: LD_INT 1
1311: PPUSH
1312: LD_INT 1
1314: PUSH
1315: LD_INT 3
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: CALL_OW 12
1332: ARRAY
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 380
// un := CreateHuman ;
1341: LD_ADDR_VAR 0 3
1345: PUSH
1346: CALL_OW 44
1350: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1351: LD_VAR 0 3
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL_OW 12
1366: PPUSH
1367: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1371: LD_VAR 0 3
1375: PPUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_INT 1
1383: ARRAY
1384: PUSH
1385: LD_VAR 0 2
1389: ARRAY
1390: PPUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_INT 2
1398: ARRAY
1399: PUSH
1400: LD_VAR 0 2
1404: ARRAY
1405: PPUSH
1406: LD_INT 1
1408: PPUSH
1409: CALL_OW 601
// end ;
1413: GO 1306
1415: POP
1416: POP
// end ;
1417: LD_VAR 0 1
1421: RET
// export function ChangeSideKappaBase ; begin
1422: LD_INT 0
1424: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 60 ) ;
1425: LD_INT 70
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 60
1436: NEG
1437: PPUSH
1438: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1455: LD_INT 22
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: CALL_OW 235
// end ; end_of_file
1477: LD_VAR 0 1
1481: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1482: LD_INT 0
1484: PPUSH
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
// uc_side := 3 ;
1490: LD_ADDR_OWVAR 20
1494: PUSH
1495: LD_INT 3
1497: ST_TO_ADDR
// uc_nation := 3 ;
1498: LD_ADDR_OWVAR 21
1502: PUSH
1503: LD_INT 3
1505: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1506: LD_ADDR_EXP 14
1510: PUSH
1511: LD_INT 8
1513: PUSH
1514: LD_INT 11
1516: PUSH
1517: LD_INT 14
1519: PUSH
1520: LD_INT 17
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: ST_TO_ADDR
// ruMobile := [ ] ;
1535: LD_ADDR_EXP 15
1539: PUSH
1540: EMPTY
1541: ST_TO_ADDR
// ruBuildList := [ ] ;
1542: LD_ADDR_EXP 16
1546: PUSH
1547: EMPTY
1548: ST_TO_ADDR
// ruAttackers := [ ] ;
1549: LD_ADDR_EXP 17
1553: PUSH
1554: EMPTY
1555: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1556: LD_ADDR_EXP 18
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: LD_INT 1
1569: PPUSH
1570: CALL 30888 0 3
1574: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1575: LD_ADDR_VAR 0 6
1579: PUSH
1580: LD_INT 43
1582: PUSH
1583: LD_INT 46
1585: PUSH
1586: LD_INT 45
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1594: LD_ADDR_EXP 19
1598: PUSH
1599: LD_INT 46
1601: PUSH
1602: LD_INT 70
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 121
1611: PUSH
1612: LD_INT 95
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 68
1621: PUSH
1622: LD_INT 65
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: ST_TO_ADDR
// if not russianRocketsDisabled then
1634: LD_EXP 6
1638: NOT
1639: IFFALSE 1655
// weapons := weapons ^ ru_rocket ;
1641: LD_ADDR_VAR 0 6
1645: PUSH
1646: LD_VAR 0 6
1650: PUSH
1651: LD_INT 47
1653: ADD
1654: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1655: LD_ADDR_EXP 13
1659: PUSH
1660: LD_STRING Eisenstein
1662: PPUSH
1663: CALL_OW 25
1667: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1668: LD_EXP 13
1672: PPUSH
1673: LD_INT 22
1675: PPUSH
1676: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1000 , 2000 , 2500 , 3000 ] [ Difficulty ] ) ;
1680: LD_INT 22
1682: PPUSH
1683: CALL_OW 274
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: LD_INT 1000
1693: PUSH
1694: LD_INT 2000
1696: PUSH
1697: LD_INT 2500
1699: PUSH
1700: LD_INT 3000
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_OWVAR 67
1713: ARRAY
1714: PPUSH
1715: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1719: LD_INT 22
1721: PPUSH
1722: CALL_OW 274
1726: PPUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 600
1732: PPUSH
1733: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1737: LD_INT 22
1739: PPUSH
1740: CALL_OW 274
1744: PPUSH
1745: LD_INT 3
1747: PPUSH
1748: LD_INT 100
1750: PPUSH
1751: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1755: LD_INT 116
1757: PPUSH
1758: LD_INT 46
1760: PPUSH
1761: LD_INT 70
1763: PPUSH
1764: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1768: LD_ADDR_VAR 0 2
1772: PUSH
1773: LD_INT 22
1775: PUSH
1776: LD_INT 3
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 3
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PPUSH
1797: CALL_OW 69
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1825
// SetBLevel ( i , 6 + Difficulty ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_INT 6
1812: PUSH
1813: LD_OWVAR 67
1817: PLUS
1818: PPUSH
1819: CALL_OW 241
1823: GO 1802
1825: POP
1826: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1827: LD_ADDR_VAR 0 4
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 3
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 30
1847: PUSH
1848: LD_INT 32
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 30
1857: PUSH
1858: LD_INT 33
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: ST_TO_ADDR
// if russianRocketsDisabled then
1879: LD_EXP 6
1883: IFFALSE 1959
// begin ruTechList := ruTechList diff tech_advrocket ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_EXP 18
1894: PUSH
1895: LD_INT 71
1897: DIFF
1898: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_INT 35
1911: PUSH
1912: LD_INT 47
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PPUSH
1919: CALL_OW 72
1923: PUSH
1924: FOR_IN
1925: IFFALSE 1957
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_VAR 0 6
1936: PUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_VAR 0 6
1944: PPUSH
1945: CALL_OW 12
1949: ARRAY
1950: PPUSH
1951: CALL_OW 431
1955: GO 1924
1957: POP
1958: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1959: LD_ADDR_VAR 0 2
1963: PUSH
1964: LD_INT 22
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 30
1976: PUSH
1977: LD_INT 32
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PPUSH
1988: CALL_OW 69
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2043
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
1996: LD_INT 0
1998: PPUSH
1999: LD_INT 5
2001: PUSH
2002: LD_INT 6
2004: PUSH
2005: LD_INT 7
2007: PUSH
2008: LD_INT 8
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_OWVAR 67
2021: ARRAY
2022: PPUSH
2023: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2027: CALL_OW 44
2031: PPUSH
2032: LD_VAR 0 2
2036: PPUSH
2037: CALL_OW 52
// end ;
2041: GO 1993
2043: POP
2044: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 30
2062: PUSH
2063: LD_INT 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PUSH
2079: FOR_IN
2080: IFFALSE 2214
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2082: LD_ADDR_VAR 0 3
2086: PUSH
2087: DOUBLE
2088: LD_INT 1
2090: DEC
2091: ST_TO_ADDR
2092: LD_INT 2
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: LD_INT 3
2100: PUSH
2101: LD_INT 3
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PUSH
2110: LD_OWVAR 67
2114: ARRAY
2115: PUSH
2116: FOR_TO
2117: IFFALSE 2210
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2119: LD_INT 0
2121: PPUSH
2122: LD_INT 5
2124: PUSH
2125: LD_INT 6
2127: PUSH
2128: LD_INT 7
2130: PUSH
2131: LD_INT 8
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_OWVAR 67
2144: ARRAY
2145: PPUSH
2146: CALL_OW 381
// un := CreateHuman ;
2150: LD_ADDR_VAR 0 5
2154: PUSH
2155: CALL_OW 44
2159: ST_TO_ADDR
// SetDir ( un , class_bazooker ) ;
2160: LD_VAR 0 5
2164: PPUSH
2165: LD_INT 9
2167: PPUSH
2168: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2172: LD_VAR 0 5
2176: PPUSH
2177: LD_VAR 0 2
2181: PPUSH
2182: CALL_OW 52
// if j = 2 then
2186: LD_VAR 0 3
2190: PUSH
2191: LD_INT 2
2193: EQUAL
2194: IFFALSE 2208
// SetUnitAttackType ( un , 3 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 3
2203: PPUSH
2204: CALL_OW 603
// end ;
2208: GO 2116
2210: POP
2211: POP
// end ;
2212: GO 2079
2214: POP
2215: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_INT 5
2228: PUSH
2229: LD_INT 6
2231: PUSH
2232: LD_INT 6
2234: PUSH
2235: LD_INT 6
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: PUSH
2244: LD_OWVAR 67
2248: ARRAY
2249: PUSH
2250: FOR_TO
2251: IFFALSE 2298
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 6
2258: PUSH
2259: LD_INT 7
2261: PUSH
2262: LD_INT 9
2264: PUSH
2265: LD_INT 10
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: LD_OWVAR 67
2278: ARRAY
2279: PPUSH
2280: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2284: CALL_OW 44
2288: PPUSH
2289: LD_INT 22
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2250
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2394
// for j := 1 to 6 do
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: DOUBLE
2322: LD_INT 1
2324: DEC
2325: ST_TO_ADDR
2326: LD_INT 6
2328: PUSH
2329: FOR_TO
2330: IFFALSE 2390
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2332: LD_INT 0
2334: PPUSH
2335: LD_INT 6
2337: PUSH
2338: LD_INT 7
2340: PUSH
2341: LD_INT 9
2343: PUSH
2344: LD_INT 10
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_OWVAR 67
2357: ARRAY
2358: PPUSH
2359: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_INT 1
2370: PUSH
2371: LD_INT 40
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_VAR 0 2
2382: ARRAY
2383: PPUSH
2384: CALL_OW 52
// end ;
2388: GO 2329
2390: POP
2391: POP
2392: GO 2313
2394: POP
2395: POP
// for i := 1 to 6 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 6
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2457
// begin PrepareScientist ( false , 6 ) ;
2412: LD_INT 0
2414: PPUSH
2415: LD_INT 6
2417: PPUSH
2418: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2422: CALL_OW 44
2426: PPUSH
2427: LD_INT 14
2429: PUSH
2430: LD_INT 15
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: LD_VAR 0 2
2441: PUSH
2442: LD_INT 2
2444: MOD
2445: PUSH
2446: LD_INT 1
2448: PLUS
2449: ARRAY
2450: PPUSH
2451: CALL_OW 52
// end ;
2455: GO 2409
2457: POP
2458: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2459: LD_INT 22
2461: PPUSH
2462: LD_INT 3
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 51
2470: PPUSH
2471: LD_INT 100
2473: PPUSH
2474: CALL 35842 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2478: CALL_OW 45
2482: PPUSH
2483: LD_INT 116
2485: PPUSH
2486: LD_INT 58
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 50
// for i := 1 to 2 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_INT 1
2507: DEC
2508: ST_TO_ADDR
2509: LD_INT 2
2511: PUSH
2512: FOR_TO
2513: IFFALSE 2557
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2515: LD_INT 22
2517: PPUSH
2518: LD_INT 3
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: LD_INT 52
2526: PPUSH
2527: LD_INT 100
2529: PPUSH
2530: CALL 35842 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2534: CALL_OW 45
2538: PPUSH
2539: LD_INT 111
2541: PPUSH
2542: LD_INT 58
2544: PPUSH
2545: LD_INT 4
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 50
// end ;
2555: GO 2512
2557: POP
2558: POP
// for i := 1 to 4 do
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_INT 4
2571: PUSH
2572: FOR_TO
2573: IFFALSE 2602
// begin PrepareApemanEngineer ( ) ;
2575: CALL 64420 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2579: CALL_OW 44
2583: PPUSH
2584: LD_INT 118
2586: PPUSH
2587: LD_INT 50
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: LD_INT 0
2595: PPUSH
2596: CALL_OW 50
// end ;
2600: GO 2572
2602: POP
2603: POP
// end ;
2604: LD_VAR 0 1
2608: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2609: LD_EXP 18
2613: IFFALSE 2741
2615: GO 2617
2617: DISABLE
2618: LD_INT 0
2620: PPUSH
2621: PPUSH
2622: PPUSH
// begin enable ;
2623: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: LD_INT 14
2631: PUSH
2632: LD_INT 15
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: LD_INT 50
2641: PUSH
2642: EMPTY
2643: LIST
2644: PPUSH
2645: CALL_OW 72
2649: ST_TO_ADDR
// if not labs then
2650: LD_VAR 0 3
2654: NOT
2655: IFFALSE 2660
// begin disable ;
2657: DISABLE
// exit ;
2658: GO 2741
// end ; for i in labs do
2660: LD_ADDR_VAR 0 1
2664: PUSH
2665: LD_VAR 0 3
2669: PUSH
2670: FOR_IN
2671: IFFALSE 2739
// if BuildingStatus ( i ) = bs_idle then
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 461
2682: PUSH
2683: LD_INT 2
2685: EQUAL
2686: IFFALSE 2737
// for t in ruTechList do
2688: LD_ADDR_VAR 0 2
2692: PUSH
2693: LD_EXP 18
2697: PUSH
2698: FOR_IN
2699: IFFALSE 2735
// if CanBeResearched ( i , t ) then
2701: LD_VAR 0 1
2705: PPUSH
2706: LD_VAR 0 2
2710: PPUSH
2711: CALL_OW 430
2715: IFFALSE 2733
// begin ComResearch ( i , t ) ;
2717: LD_VAR 0 1
2721: PPUSH
2722: LD_VAR 0 2
2726: PPUSH
2727: CALL_OW 124
// break ;
2731: GO 2735
// end ;
2733: GO 2698
2735: POP
2736: POP
2737: GO 2670
2739: POP
2740: POP
// end ;
2741: PPOPN 3
2743: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2744: LD_INT 3
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 32
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PPUSH
2775: CALL_OW 69
2779: IFFALSE 2863
2781: GO 2783
2783: DISABLE
2784: LD_INT 0
2786: PPUSH
// begin enable ;
2787: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2788: LD_ADDR_VAR 0 1
2792: PUSH
2793: LD_INT 3
2795: PUSH
2796: LD_INT 22
2798: PUSH
2799: LD_INT 1
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 32
2812: PUSH
2813: LD_INT 1
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: FOR_IN
2830: IFFALSE 2861
// if GetFuel ( i ) < 3 then
2832: LD_VAR 0 1
2836: PPUSH
2837: CALL_OW 261
2841: PUSH
2842: LD_INT 3
2844: LESS
2845: IFFALSE 2859
// SetFuel ( i , 3 ) ;
2847: LD_VAR 0 1
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: CALL_OW 240
2859: GO 2829
2861: POP
2862: POP
// end ;
2863: PPOPN 1
2865: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) and ruAttackers < [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , chassis , weapon ;
2866: LD_INT 1
2868: PUSH
2869: LD_INT 40
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PPUSH
2876: LD_INT 50
2878: PUSH
2879: EMPTY
2880: LIST
2881: PPUSH
2882: CALL_OW 72
2886: PUSH
2887: LD_EXP 17
2891: PUSH
2892: LD_INT 5
2894: PUSH
2895: LD_INT 6
2897: PUSH
2898: LD_INT 7
2900: PUSH
2901: LD_INT 8
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: PUSH
2910: LD_OWVAR 67
2914: ARRAY
2915: LESS
2916: AND
2917: IFFALSE 3253
2919: GO 2921
2921: DISABLE
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
2926: PPUSH
// begin enable ;
2927: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2928: LD_ADDR_VAR 0 1
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: LD_INT 40
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PPUSH
2943: LD_INT 50
2945: PUSH
2946: EMPTY
2947: LIST
2948: PPUSH
2949: CALL_OW 72
2953: PUSH
2954: FOR_IN
2955: IFFALSE 3251
// begin if BuildingStatus ( i ) <> bs_idle then
2957: LD_VAR 0 1
2961: PPUSH
2962: CALL_OW 461
2966: PUSH
2967: LD_INT 2
2969: NONEQUAL
2970: IFFALSE 2974
// continue ;
2972: GO 2954
// if i = ruFac1 then
2974: LD_VAR 0 1
2978: PUSH
2979: LD_INT 1
2981: EQUAL
2982: IFFALSE 3025
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
2984: LD_ADDR_VAR 0 2
2988: PUSH
2989: LD_INT 21
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 23
2997: PUSH
2998: LD_INT 23
3000: PUSH
3001: LD_INT 24
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 5
3016: PPUSH
3017: CALL_OW 12
3021: ARRAY
3022: ST_TO_ADDR
3023: GO 3052
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 23
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: CALL_OW 12
3050: ARRAY
3051: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3052: LD_ADDR_VAR 0 3
3056: PUSH
3057: LD_INT 49
3059: PUSH
3060: LD_INT 44
3062: PUSH
3063: LD_INT 43
3065: PUSH
3066: LD_INT 46
3068: PUSH
3069: LD_INT 45
3071: PUSH
3072: LD_INT 46
3074: PUSH
3075: LD_INT 45
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: ST_TO_ADDR
// if not russianRocketsDisabled then
3087: LD_EXP 6
3091: NOT
3092: IFFALSE 3112
// weapon := Join ( weapon , ru_rocket ) ;
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: LD_VAR 0 3
3103: PPUSH
3104: LD_INT 47
3106: PPUSH
3107: CALL 68226 0 2
3111: ST_TO_ADDR
// weapon := weapon [ Difficulty + rand ( 0 , 3 ) ] ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: LD_VAR 0 3
3121: PUSH
3122: LD_OWVAR 67
3126: PUSH
3127: LD_INT 0
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: CALL_OW 12
3137: PLUS
3138: ARRAY
3139: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3140: LD_VAR 0 2
3144: PUSH
3145: LD_INT 21
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: IN
3155: PUSH
3156: LD_VAR 0 3
3160: PUSH
3161: LD_INT 46
3163: PUSH
3164: LD_INT 47
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: IN
3171: AND
3172: IFFALSE 3205
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: LD_INT 44
3181: PUSH
3182: LD_INT 45
3184: PUSH
3185: LD_INT 49
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 1
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3205: LD_VAR 0 1
3209: PPUSH
3210: LD_VAR 0 2
3214: PPUSH
3215: LD_INT 1
3217: PUSH
3218: LD_INT 3
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 1
3227: PPUSH
3228: LD_INT 2
3230: PPUSH
3231: CALL_OW 12
3235: ARRAY
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: CALL_OW 185
// end ;
3249: GO 2954
3251: POP
3252: POP
// end ;
3253: PPOPN 3
3255: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3256: LD_INT 22
3258: PPUSH
3259: CALL_OW 302
3263: IFFALSE 4120
3265: GO 3267
3267: DISABLE
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
3275: PPUSH
3276: PPUSH
3277: PPUSH
// begin enable ;
3278: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3279: LD_ADDR_VAR 0 3
3283: PUSH
3284: LD_INT 12
3286: PPUSH
3287: LD_INT 3
3289: PUSH
3290: LD_INT 24
3292: PUSH
3293: LD_INT 1000
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 21
3306: PUSH
3307: LD_INT 3
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 70
3322: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 22
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 69
3356: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3357: LD_ADDR_VAR 0 5
3361: PUSH
3362: LD_INT 22
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 34
3374: PUSH
3375: LD_INT 52
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PPUSH
3386: CALL_OW 69
3390: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3391: LD_ADDR_VAR 0 7
3395: PUSH
3396: LD_INT 22
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 25
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PPUSH
3420: CALL_OW 69
3424: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3425: LD_ADDR_VAR 0 8
3429: PUSH
3430: LD_INT 14
3432: PUSH
3433: LD_INT 15
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3440: LD_VAR 0 7
3444: PUSH
3445: LD_VAR 0 4
3449: PPUSH
3450: LD_INT 120
3452: PUSH
3453: LD_INT 2
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL_OW 72
3464: AND
3465: IFFALSE 3478
// ComExitAll ( sci ) else
3467: LD_VAR 0 7
3471: PPUSH
3472: CALL 68707 0 1
3476: GO 3560
// if sci then
3478: LD_VAR 0 7
3482: IFFALSE 3560
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3484: LD_VAR 0 7
3488: PPUSH
3489: LD_INT 3
3491: PUSH
3492: LD_INT 54
3494: PUSH
3495: EMPTY
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PPUSH
3502: CALL_OW 72
3506: PUSH
3507: LD_VAR 0 8
3511: AND
3512: IFFALSE 3560
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3514: LD_VAR 0 7
3518: PPUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 54
3524: PUSH
3525: EMPTY
3526: LIST
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 72
3536: PPUSH
3537: LD_VAR 0 8
3541: PUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_VAR 0 8
3549: PPUSH
3550: CALL_OW 12
3554: ARRAY
3555: PPUSH
3556: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3560: LD_VAR 0 5
3564: PPUSH
3565: LD_INT 50
3567: PUSH
3568: EMPTY
3569: LIST
3570: PPUSH
3571: CALL_OW 72
3575: PUSH
3576: LD_VAR 0 3
3580: AND
3581: IFFALSE 3622
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3583: LD_VAR 0 5
3587: PPUSH
3588: LD_INT 50
3590: PUSH
3591: EMPTY
3592: LIST
3593: PPUSH
3594: CALL_OW 72
3598: PPUSH
3599: LD_VAR 0 3
3603: PPUSH
3604: LD_VAR 0 5
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 130
// if eng then
3622: LD_VAR 0 4
3626: IFFALSE 4120
// begin for i in eng do
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: LD_VAR 0 4
3637: PUSH
3638: FOR_IN
3639: IFFALSE 4118
// begin tag := GetTag ( i ) ;
3641: LD_ADDR_VAR 0 6
3645: PUSH
3646: LD_VAR 0 1
3650: PPUSH
3651: CALL_OW 110
3655: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3656: LD_VAR 0 3
3660: NOT
3661: PUSH
3662: LD_EXP 16
3666: NOT
3667: AND
3668: PUSH
3669: LD_VAR 0 6
3673: PUSH
3674: LD_INT 1
3676: EQUAL
3677: AND
3678: IFFALSE 3704
// begin SetTag ( i , 0 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3692: LD_VAR 0 1
3696: PPUSH
3697: LD_INT 22
3699: PPUSH
3700: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3704: LD_VAR 0 3
3708: PUSH
3709: LD_EXP 16
3713: OR
3714: PUSH
3715: LD_VAR 0 6
3719: PUSH
3720: LD_INT 0
3722: EQUAL
3723: AND
3724: IFFALSE 3738
// SetTag ( i , 1 ) ;
3726: LD_VAR 0 1
3730: PPUSH
3731: LD_INT 1
3733: PPUSH
3734: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 310
3747: PUSH
3748: LD_VAR 0 6
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: AND
3757: IFFALSE 3768
// ComExit ( i ) ;
3759: LD_VAR 0 1
3763: PPUSH
3764: CALL 68624 0 1
// if GetLives ( i ) < 500 and tag = 1 then
3768: LD_VAR 0 1
3772: PPUSH
3773: CALL_OW 256
3777: PUSH
3778: LD_INT 500
3780: LESS
3781: PUSH
3782: LD_VAR 0 6
3786: PUSH
3787: LD_INT 1
3789: EQUAL
3790: AND
3791: IFFALSE 3805
// SetTag ( i , 2 ) ;
3793: LD_VAR 0 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 256
3814: PUSH
3815: LD_INT 1000
3817: EQUAL
3818: PUSH
3819: LD_VAR 0 6
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: AND
3828: IFFALSE 3842
// SetTag ( i , 1 ) ;
3830: LD_VAR 0 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// if tag = 2 then
3842: LD_VAR 0 6
3846: PUSH
3847: LD_INT 2
3849: EQUAL
3850: IFFALSE 3897
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
3852: LD_VAR 0 1
3856: PPUSH
3857: LD_INT 84
3859: PPUSH
3860: LD_INT 93
3862: PPUSH
3863: CALL_OW 297
3867: PUSH
3868: LD_INT 6
3870: GREATER
3871: IFFALSE 3897
// begin ComMoveXY ( i , 84 , 93 ) ;
3873: LD_VAR 0 1
3877: PPUSH
3878: LD_INT 84
3880: PPUSH
3881: LD_INT 93
3883: PPUSH
3884: CALL_OW 111
// AddComHold ( i ) ;
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_INT 11
3904: PPUSH
3905: CALL_OW 308
3909: IFFALSE 3923
// ComMoveToArea ( i , ruBaseArea ) ;
3911: LD_VAR 0 1
3915: PPUSH
3916: LD_INT 12
3918: PPUSH
3919: CALL_OW 113
// if tag = 1 then
3923: LD_VAR 0 6
3927: PUSH
3928: LD_INT 1
3930: EQUAL
3931: IFFALSE 4116
// begin if b then
3933: LD_VAR 0 3
3937: IFFALSE 3965
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
3939: LD_VAR 0 1
3943: PPUSH
3944: LD_VAR 0 3
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 74
3958: PPUSH
3959: CALL_OW 130
3963: GO 4116
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
3965: LD_EXP 16
3969: PUSH
3970: LD_INT 11
3972: PPUSH
3973: LD_INT 81
3975: PUSH
3976: LD_INT 3
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: LD_INT 0
3990: EQUAL
3991: AND
3992: PUSH
3993: LD_INT 22
3995: PPUSH
3996: LD_EXP 16
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PUSH
4005: LD_INT 1
4007: ARRAY
4008: PPUSH
4009: LD_EXP 16
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PUSH
4018: LD_INT 2
4020: ARRAY
4021: PPUSH
4022: LD_EXP 16
4026: PUSH
4027: LD_INT 1
4029: ARRAY
4030: PUSH
4031: LD_INT 3
4033: ARRAY
4034: PPUSH
4035: LD_EXP 16
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PUSH
4044: LD_INT 4
4046: ARRAY
4047: PPUSH
4048: CALL 44067 0 5
4052: AND
4053: IFFALSE 4116
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4055: LD_VAR 0 1
4059: PPUSH
4060: LD_EXP 16
4064: PUSH
4065: LD_INT 1
4067: ARRAY
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: PPUSH
4073: LD_EXP 16
4077: PUSH
4078: LD_INT 1
4080: ARRAY
4081: PUSH
4082: LD_INT 2
4084: ARRAY
4085: PPUSH
4086: LD_EXP 16
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PUSH
4095: LD_INT 3
4097: ARRAY
4098: PPUSH
4099: LD_EXP 16
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PUSH
4108: LD_INT 4
4110: ARRAY
4111: PPUSH
4112: CALL_OW 145
// end ; end ;
4116: GO 3638
4118: POP
4119: POP
// end ; end ;
4120: PPOPN 8
4122: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4123: LD_INT 22
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 3
4135: PUSH
4136: LD_INT 60
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 50
4148: PUSH
4149: EMPTY
4150: LIST
4151: PUSH
4152: LD_INT 25
4154: PUSH
4155: LD_INT 16
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 14
4175: PPUSH
4176: CALL_OW 435
4180: AND
4181: IFFALSE 4293
4183: GO 4185
4185: DISABLE
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
// begin enable ;
4190: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: LD_INT 14
4198: PPUSH
4199: CALL_OW 435
4203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4204: LD_ADDR_VAR 0 1
4208: PUSH
4209: LD_INT 22
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: LD_INT 60
4224: PUSH
4225: EMPTY
4226: LIST
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 50
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 16
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 69
4258: PUSH
4259: FOR_IN
4260: IFFALSE 4291
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_VAR 0 2
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_VAR 0 2
4280: PUSH
4281: LD_INT 2
4283: ARRAY
4284: PPUSH
4285: CALL_OW 117
4289: GO 4259
4291: POP
4292: POP
// end ;
4293: PPOPN 2
4295: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4296: LD_INT 22
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: LD_INT 60
4311: PUSH
4312: EMPTY
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 50
4321: PUSH
4322: EMPTY
4323: LIST
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 51
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PPUSH
4341: CALL_OW 69
4345: PUSH
4346: LD_INT 13
4348: PPUSH
4349: CALL_OW 435
4353: AND
4354: IFFALSE 4466
4356: GO 4358
4358: DISABLE
4359: LD_INT 0
4361: PPUSH
4362: PPUSH
// begin enable ;
4363: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4364: LD_ADDR_VAR 0 2
4368: PUSH
4369: LD_INT 13
4371: PPUSH
4372: CALL_OW 435
4376: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4377: LD_ADDR_VAR 0 1
4381: PUSH
4382: LD_INT 22
4384: PUSH
4385: LD_INT 3
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: LD_INT 3
4394: PUSH
4395: LD_INT 60
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 50
4407: PUSH
4408: EMPTY
4409: LIST
4410: PUSH
4411: LD_INT 34
4413: PUSH
4414: LD_INT 51
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 69
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4464
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_VAR 0 2
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: PPUSH
4449: LD_VAR 0 2
4453: PUSH
4454: LD_INT 2
4456: ARRAY
4457: PPUSH
4458: CALL_OW 117
4462: GO 4432
4464: POP
4465: POP
// end ;
4466: PPOPN 2
4468: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4469: LD_OWVAR 67
4473: PUSH
4474: LD_INT 1
4476: GREATER
4477: PUSH
4478: LD_INT 1
4480: PPUSH
4481: CALL_OW 302
4485: AND
4486: IFFALSE 4575
4488: GO 4490
4490: DISABLE
4491: LD_INT 0
4493: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_INT 3
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_OWVAR 67
4522: PUSH
4523: LD_INT 1
4525: MINUS
4526: ARRAY
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4573
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4531: LD_INT 1
4533: PUSH
4534: LD_INT 40
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_VAR 0 1
4545: PUSH
4546: LD_INT 2
4548: MOD
4549: PUSH
4550: LD_INT 1
4552: PLUS
4553: ARRAY
4554: PPUSH
4555: LD_INT 21
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 1
4563: PPUSH
4564: LD_INT 45
4566: PPUSH
4567: CALL_OW 185
// end ;
4571: GO 4528
4573: POP
4574: POP
// end ;
4575: PPOPN 1
4577: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4578: LD_EXP 15
4582: IFFALSE 5172
4584: GO 4586
4586: DISABLE
4587: LD_INT 0
4589: PPUSH
4590: PPUSH
4591: PPUSH
// begin enable ;
4592: ENABLE
// if not ruMobile then
4593: LD_EXP 15
4597: NOT
4598: IFFALSE 4602
// exit ;
4600: GO 5172
// for i in ruMobile do
4602: LD_ADDR_VAR 0 1
4606: PUSH
4607: LD_EXP 15
4611: PUSH
4612: FOR_IN
4613: IFFALSE 5170
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4615: LD_VAR 0 1
4619: PPUSH
4620: CALL_OW 302
4624: NOT
4625: PUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 255
4635: PUSH
4636: LD_INT 3
4638: NONEQUAL
4639: OR
4640: IFFALSE 4660
// begin ruMobile := ruMobile diff i ;
4642: LD_ADDR_EXP 15
4646: PUSH
4647: LD_EXP 15
4651: PUSH
4652: LD_VAR 0 1
4656: DIFF
4657: ST_TO_ADDR
// continue ;
4658: GO 4612
// end ; if GetTag ( i ) = 300 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 110
4669: PUSH
4670: LD_INT 300
4672: EQUAL
4673: IFFALSE 4803
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4675: LD_VAR 0 1
4679: PPUSH
4680: CALL_OW 261
4684: PUSH
4685: LD_INT 50
4687: LESS
4688: PUSH
4689: LD_VAR 0 1
4693: PPUSH
4694: CALL_OW 262
4698: PUSH
4699: LD_INT 1
4701: EQUAL
4702: AND
4703: IFFALSE 4762
// begin ComMoveXY ( i , 120 , 58 ) ;
4705: LD_VAR 0 1
4709: PPUSH
4710: LD_INT 120
4712: PPUSH
4713: LD_INT 58
4715: PPUSH
4716: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4720: LD_INT 35
4722: PPUSH
4723: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4727: LD_VAR 0 1
4731: PPUSH
4732: LD_INT 120
4734: PPUSH
4735: LD_INT 58
4737: PPUSH
4738: CALL_OW 297
4742: PUSH
4743: LD_INT 4
4745: LESS
4746: IFFALSE 4720
// SetFuel ( i , 100 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 100
4755: PPUSH
4756: CALL_OW 240
// end else
4760: GO 4803
// if not IsInArea ( i , ruParkingArea ) then
4762: LD_VAR 0 1
4766: PPUSH
4767: LD_INT 10
4769: PPUSH
4770: CALL_OW 308
4774: NOT
4775: IFFALSE 4791
// ComMoveToArea ( i , ruParkingArea ) else
4777: LD_VAR 0 1
4781: PPUSH
4782: LD_INT 10
4784: PPUSH
4785: CALL_OW 113
4789: GO 4803
// SetTag ( i , 301 ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 301
4798: PPUSH
4799: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 110
4812: PUSH
4813: LD_INT 301
4815: EQUAL
4816: IFFALSE 4946
// begin if GetLives ( i ) < 1000 then
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 256
4827: PUSH
4828: LD_INT 1000
4830: LESS
4831: IFFALSE 4923
// begin if not IsDrivenBy ( i ) then
4833: LD_VAR 0 1
4837: PPUSH
4838: CALL_OW 311
4842: NOT
4843: IFFALSE 4847
// continue ;
4845: GO 4612
// mech := IsDrivenBy ( i ) ;
4847: LD_ADDR_VAR 0 2
4851: PUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: CALL_OW 311
4861: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4862: LD_VAR 0 2
4866: PPUSH
4867: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4871: LD_VAR 0 2
4875: PPUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4885: LD_INT 35
4887: PPUSH
4888: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4892: LD_VAR 0 1
4896: PPUSH
4897: CALL_OW 256
4901: PUSH
4902: LD_INT 1000
4904: EQUAL
4905: IFFALSE 4885
// ComEnterUnit ( mech , i ) ;
4907: LD_VAR 0 2
4911: PPUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 120
// end else
4921: GO 4946
// if IsDrivenBy ( i ) then
4923: LD_VAR 0 1
4927: PPUSH
4928: CALL_OW 311
4932: IFFALSE 4946
// SetTag ( i , 0 ) ;
4934: LD_VAR 0 1
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
4946: LD_VAR 0 1
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 300
4958: LESS
4959: IFFALSE 5168
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: LD_INT 11
4968: PPUSH
4969: LD_INT 81
4971: PUSH
4972: LD_INT 3
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PPUSH
4979: CALL_OW 70
4983: ST_TO_ADDR
// if GetLives ( i ) < 650 then
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL_OW 256
4993: PUSH
4994: LD_INT 650
4996: LESS
4997: IFFALSE 5022
// begin ComStop ( i ) ;
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 141
// SetTag ( i , 300 ) ;
5008: LD_VAR 0 1
5012: PPUSH
5013: LD_INT 300
5015: PPUSH
5016: CALL_OW 109
// continue ;
5020: GO 4612
// end ; if enemy then
5022: LD_VAR 0 3
5026: IFFALSE 5066
// begin if not HasTask ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 314
5037: NOT
5038: IFFALSE 5064
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 74
5059: PPUSH
5060: CALL_OW 115
// end else
5064: GO 5168
// if ruMobile > 2 then
5066: LD_EXP 15
5070: PUSH
5071: LD_INT 2
5073: GREATER
5074: IFFALSE 5168
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5076: LD_ADDR_VAR 0 3
5080: PUSH
5081: LD_INT 81
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PPUSH
5091: CALL_OW 69
5095: ST_TO_ADDR
// if enemy then
5096: LD_VAR 0 3
5100: IFFALSE 5168
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5102: LD_VAR 0 1
5106: PPUSH
5107: LD_INT 113
5109: PUSH
5110: LD_INT 80
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 118
5119: PUSH
5120: LD_INT 100
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 107
5129: PUSH
5130: LD_INT 102
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 114
5139: PUSH
5140: LD_INT 120
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 86
5149: PUSH
5150: LD_INT 116
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL 70832 0 2
// end ; end ; end ;
5168: GO 4612
5170: POP
5171: POP
// end ;
5172: PPOPN 3
5174: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5175: LD_EXP 17
5179: IFFALSE 5225
5181: GO 5183
5183: DISABLE
5184: LD_INT 0
5186: PPUSH
// begin enable ;
5187: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5188: LD_ADDR_VAR 0 1
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: LD_INT 50
5200: PUSH
5201: EMPTY
5202: LIST
5203: PPUSH
5204: CALL_OW 72
5208: ST_TO_ADDR
// ruAttackers := [ ] ;
5209: LD_ADDR_EXP 17
5213: PUSH
5214: EMPTY
5215: ST_TO_ADDR
// SendAttack ( tmp ) ;
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL 5228 0 1
// end ;
5225: PPOPN 1
5227: END
// function SendAttack ( group ) ; var i , tmp ; begin
5228: LD_INT 0
5230: PPUSH
5231: PPUSH
5232: PPUSH
// for i in group do
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_VAR 0 1
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5310
// begin SetTag ( i , 0 ) ;
5246: LD_VAR 0 3
5250: PPUSH
5251: LD_INT 0
5253: PPUSH
5254: CALL_OW 109
// if Prob ( 30 ) then
5258: LD_INT 30
5260: PPUSH
5261: CALL_OW 13
5265: IFFALSE 5293
// begin SetTag ( i , 1 ) ;
5267: LD_VAR 0 3
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5279: LD_VAR 0 3
5283: PPUSH
5284: LD_INT 116
5286: PPUSH
5287: CALL_OW 120
// end else
5291: GO 5308
// ComAgressiveMove ( i , 118 , 93 ) ;
5293: LD_VAR 0 3
5297: PPUSH
5298: LD_INT 118
5300: PPUSH
5301: LD_INT 93
5303: PPUSH
5304: CALL_OW 114
// end ;
5308: GO 5243
5310: POP
5311: POP
// repeat wait ( 0 0$1 ) ;
5312: LD_INT 35
5314: PPUSH
5315: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5319: LD_ADDR_VAR 0 4
5323: PUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_INT 120
5331: PUSH
5332: LD_INT 0
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 72
5343: ST_TO_ADDR
// for i in tmp do
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_VAR 0 4
5353: PUSH
5354: FOR_IN
5355: IFFALSE 5502
// begin if not IsOk ( i ) then
5357: LD_VAR 0 3
5361: PPUSH
5362: CALL_OW 302
5366: NOT
5367: IFFALSE 5387
// begin tmp := tmp diff i ;
5369: LD_ADDR_VAR 0 4
5373: PUSH
5374: LD_VAR 0 4
5378: PUSH
5379: LD_VAR 0 3
5383: DIFF
5384: ST_TO_ADDR
// continue ;
5385: GO 5354
// end ; if GetDistUnits ( i , usDep ) < 8 then
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 48
5394: PPUSH
5395: CALL_OW 296
5399: PUSH
5400: LD_INT 8
5402: LESS
5403: IFFALSE 5419
// begin ComAttackUnit ( i , usDep ) ;
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_INT 48
5412: PPUSH
5413: CALL_OW 115
// continue ;
5417: GO 5354
// end ; if not See ( 1 , i ) then
5419: LD_INT 1
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 292
5431: NOT
5432: IFFALSE 5451
// ComAgressiveMove ( i , 86 , 116 ) else
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_INT 86
5441: PPUSH
5442: LD_INT 116
5444: PPUSH
5445: CALL_OW 114
5449: GO 5500
// if GetWeapon ( i ) <> ru_time_lapser then
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 264
5460: PUSH
5461: LD_INT 49
5463: NONEQUAL
5464: IFFALSE 5500
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5466: LD_VAR 0 3
5470: PPUSH
5471: LD_INT 81
5473: PUSH
5474: LD_INT 3
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PPUSH
5481: CALL_OW 69
5485: PPUSH
5486: LD_VAR 0 3
5490: PPUSH
5491: CALL_OW 74
5495: PPUSH
5496: CALL_OW 115
// end ;
5500: GO 5354
5502: POP
5503: POP
// until not tmp ;
5504: LD_VAR 0 4
5508: NOT
5509: IFFALSE 5312
// end ; end_of_file
5511: LD_VAR 0 2
5515: RET
// on UnitDestroyed ( unit ) do var i ;
5516: LD_INT 0
5518: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL 26514 0 1
// if unit = JMM then
5528: LD_VAR 0 1
5532: PUSH
5533: LD_EXP 8
5537: EQUAL
5538: IFFALSE 5547
// YouLost ( JMM ) ;
5540: LD_STRING JMM
5542: PPUSH
5543: CALL_OW 104
// if GetSide ( unit ) = 4 then
5547: LD_VAR 0 1
5551: PPUSH
5552: CALL_OW 255
5556: PUSH
5557: LD_INT 4
5559: EQUAL
5560: IFFALSE 5619
// begin if unit = Joan then
5562: LD_VAR 0 1
5566: PUSH
5567: LD_EXP 9
5571: EQUAL
5572: IFFALSE 5581
// YouLost ( Joan ) ;
5574: LD_STRING Joan
5576: PPUSH
5577: CALL_OW 104
// if unit = Connie then
5581: LD_VAR 0 1
5585: PUSH
5586: LD_EXP 11
5590: EQUAL
5591: IFFALSE 5600
// YouLost ( Connie ) ;
5593: LD_STRING Connie
5595: PPUSH
5596: CALL_OW 104
// if unit = Lisa then
5600: LD_VAR 0 1
5604: PUSH
5605: LD_EXP 10
5609: EQUAL
5610: IFFALSE 5619
// YouLost ( Lisa ) ;
5612: LD_STRING Lisa
5614: PPUSH
5615: CALL_OW 104
// end ; if unit in ruAttackers then
5619: LD_VAR 0 1
5623: PUSH
5624: LD_EXP 17
5628: IN
5629: IFFALSE 5647
// ruAttackers := ruAttackers diff unit ;
5631: LD_ADDR_EXP 17
5635: PUSH
5636: LD_EXP 17
5640: PUSH
5641: LD_VAR 0 1
5645: DIFF
5646: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5647: LD_VAR 0 1
5651: PPUSH
5652: CALL_OW 264
5656: PUSH
5657: LD_INT 51
5659: EQUAL
5660: PUSH
5661: LD_INT 40
5663: PPUSH
5664: CALL_OW 302
5668: AND
5669: IFFALSE 5709
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5671: LD_INT 40
5673: PPUSH
5674: LD_INT 21
5676: PPUSH
5677: LD_INT 1
5679: PUSH
5680: LD_INT 3
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 1
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: CALL_OW 12
5697: ARRAY
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_INT 51
5704: PPUSH
5705: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5709: LD_VAR 0 1
5713: PPUSH
5714: CALL_OW 264
5718: PUSH
5719: LD_INT 52
5721: EQUAL
5722: PUSH
5723: LD_INT 40
5725: PPUSH
5726: CALL_OW 302
5730: AND
5731: IFFALSE 5771
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5733: LD_INT 40
5735: PPUSH
5736: LD_INT 21
5738: PPUSH
5739: LD_INT 1
5741: PUSH
5742: LD_INT 3
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: CALL_OW 12
5759: ARRAY
5760: PPUSH
5761: LD_INT 3
5763: PPUSH
5764: LD_INT 52
5766: PPUSH
5767: CALL_OW 185
// if unit in ruMobile then
5771: LD_VAR 0 1
5775: PUSH
5776: LD_EXP 15
5780: IN
5781: IFFALSE 5799
// ruMobile := ruMobile diff i ;
5783: LD_ADDR_EXP 15
5787: PUSH
5788: LD_EXP 15
5792: PUSH
5793: LD_VAR 0 2
5797: DIFF
5798: ST_TO_ADDR
// end ;
5799: PPOPN 2
5801: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 255
5811: PUSH
5812: LD_INT 3
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( unit , 0 ) ;
5817: LD_VAR 0 2
5821: PPUSH
5822: LD_INT 0
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: PPOPN 2
5831: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
5832: LD_VAR 0 2
5836: PPUSH
5837: CALL_OW 255
5841: PUSH
5842: LD_INT 3
5844: EQUAL
5845: PUSH
5846: LD_VAR 0 1
5850: PUSH
5851: LD_EXP 18
5855: IN
5856: AND
5857: IFFALSE 5875
// ruTechList := ruTechList diff tech ;
5859: LD_ADDR_EXP 18
5863: PUSH
5864: LD_EXP 18
5868: PUSH
5869: LD_VAR 0 1
5873: DIFF
5874: ST_TO_ADDR
// end ;
5875: PPOPN 2
5877: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
5878: LD_VAR 0 1
5882: PPUSH
5883: LD_VAR 0 2
5887: PPUSH
5888: CALL 26636 0 2
// if GetSide ( vehicle ) <> 3 then
5892: LD_VAR 0 1
5896: PPUSH
5897: CALL_OW 255
5901: PUSH
5902: LD_INT 3
5904: NONEQUAL
5905: IFFALSE 5939
// begin if GetWeapon ( vehicle ) = us_double_laser then
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 264
5916: PUSH
5917: LD_INT 10
5919: EQUAL
5920: IFFALSE 5937
// amLaserCounter := Inc ( amLaserCounter ) ;
5922: LD_ADDR_EXP 7
5926: PUSH
5927: LD_EXP 7
5931: PPUSH
5932: CALL 69589 0 1
5936: ST_TO_ADDR
// exit ;
5937: GO 6033
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
5939: LD_VAR 0 1
5943: PPUSH
5944: CALL_OW 264
5948: PUSH
5949: LD_INT 51
5951: PUSH
5952: LD_INT 52
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: IN
5959: IFFALSE 5963
// exit ;
5961: GO 6033
// if GetControl ( vehicle ) = control_computer then
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 263
5972: PUSH
5973: LD_INT 3
5975: EQUAL
5976: IFFALSE 5998
// ruAttackers := Join ( ruAttackers , vehicle ) ;
5978: LD_ADDR_EXP 17
5982: PUSH
5983: LD_EXP 17
5987: PPUSH
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL 68226 0 2
5997: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
5998: LD_VAR 0 1
6002: PPUSH
6003: CALL_OW 263
6007: PUSH
6008: LD_INT 1
6010: EQUAL
6011: IFFALSE 6033
// ruMobile := Join ( ruMobile , vehicle ) ;
6013: LD_ADDR_EXP 15
6017: PUSH
6018: LD_EXP 15
6022: PPUSH
6023: LD_VAR 0 1
6027: PPUSH
6028: CALL 68226 0 2
6032: ST_TO_ADDR
// end ;
6033: PPOPN 2
6035: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) then
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 255
6045: PUSH
6046: LD_INT 3
6048: EQUAL
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 257
6059: PUSH
6060: LD_INT 3
6062: EQUAL
6063: AND
6064: PUSH
6065: LD_INT 1
6067: PPUSH
6068: CALL_OW 255
6072: PUSH
6073: LD_INT 3
6075: EQUAL
6076: AND
6077: PUSH
6078: LD_INT 1
6080: PPUSH
6081: CALL_OW 302
6085: AND
6086: IFFALSE 6100
// ComEnterUnit ( human , ruFac1 ) ;
6088: LD_VAR 0 1
6092: PPUSH
6093: LD_INT 1
6095: PPUSH
6096: CALL_OW 120
// end ;
6100: PPOPN 4
6102: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6103: LD_VAR 0 1
6107: PPUSH
6108: CALL 26620 0 1
// end ; end_of_file
6112: PPOPN 1
6114: END
// export function Action ; var dec1 , dec2 , veh ; begin
6115: LD_INT 0
6117: PPUSH
6118: PPUSH
6119: PPUSH
6120: PPUSH
// veh := IsInUnit ( JMM ) ;
6121: LD_ADDR_VAR 0 4
6125: PUSH
6126: LD_EXP 8
6130: PPUSH
6131: CALL_OW 310
6135: ST_TO_ADDR
// InGameOn ;
6136: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6140: LD_VAR 0 4
6144: PPUSH
6145: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6149: LD_VAR 0 4
6153: PPUSH
6154: LD_INT 30
6156: PPUSH
6157: LD_INT 11
6159: PPUSH
6160: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
6164: LD_INT 30
6166: PPUSH
6167: LD_INT 11
6169: PPUSH
6170: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
6174: LD_EXP 12
6178: PPUSH
6179: LD_STRING D1-Pow-1
6181: PPUSH
6182: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6186: LD_EXP 8
6190: PPUSH
6191: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
6195: LD_EXP 8
6199: PPUSH
6200: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6204: LD_EXP 8
6208: PPUSH
6209: LD_STRING D1-JMM-1
6211: PPUSH
6212: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6216: LD_EXP 12
6220: PPUSH
6221: LD_STRING D1-Pow-2
6223: PPUSH
6224: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6228: LD_EXP 8
6232: PPUSH
6233: LD_STRING D1-JMM-2
6235: PPUSH
6236: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6240: LD_EXP 8
6244: PPUSH
6245: LD_VAR 0 4
6249: PPUSH
6250: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6254: LD_STRING M1
6256: PPUSH
6257: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6261: LD_INT 16
6263: PPUSH
6264: LD_INT 1
6266: PPUSH
6267: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6271: LD_INT 35
6273: PPUSH
6274: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6278: LD_EXP 8
6282: PPUSH
6283: LD_VAR 0 4
6287: PPUSH
6288: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6292: LD_VAR 0 4
6296: PPUSH
6297: LD_INT 51
6299: PPUSH
6300: LD_INT 21
6302: PPUSH
6303: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6307: LD_VAR 0 4
6311: PPUSH
6312: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6316: LD_VAR 0 4
6320: PPUSH
6321: LD_INT 51
6323: PPUSH
6324: LD_INT 21
6326: PPUSH
6327: CALL_OW 297
6331: PUSH
6332: LD_INT 6
6334: LESS
6335: IFFALSE 6271
// if JMMGirl = 1 then
6337: LD_EXP 2
6341: PUSH
6342: LD_INT 1
6344: EQUAL
6345: IFFALSE 6635
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6347: LD_EXP 9
6351: PPUSH
6352: LD_STRING D2J-Joan-1
6354: PPUSH
6355: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_STRING Q1
6366: PPUSH
6367: CALL_OW 97
6371: ST_TO_ADDR
// if dec1 = 1 then
6372: LD_VAR 0 2
6376: PUSH
6377: LD_INT 1
6379: EQUAL
6380: IFFALSE 6626
// begin ComExitVehicle ( JMM ) ;
6382: LD_EXP 8
6386: PPUSH
6387: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
6391: LD_EXP 8
6395: PPUSH
6396: LD_STRING D2J-JMM-1
6398: PPUSH
6399: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6403: LD_EXP 9
6407: PPUSH
6408: LD_STRING D2J-Joan-2
6410: PPUSH
6411: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6415: LD_EXP 8
6419: PPUSH
6420: LD_STRING D2J-JMM-2
6422: PPUSH
6423: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6427: LD_EXP 9
6431: PPUSH
6432: LD_STRING D2J-Joan-3
6434: PPUSH
6435: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6439: LD_EXP 12
6443: PPUSH
6444: LD_STRING DPowell-Pow-1
6446: PPUSH
6447: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6451: LD_ADDR_VAR 0 3
6455: PUSH
6456: LD_STRING Q2J
6458: PPUSH
6459: CALL_OW 97
6463: ST_TO_ADDR
// if dec2 = 1 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 1
6471: EQUAL
6472: IFFALSE 6514
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6474: LD_EXP 8
6478: PPUSH
6479: LD_STRING D2Ja-JMM-1
6481: PPUSH
6482: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6486: LD_EXP 9
6490: PPUSH
6491: LD_STRING D2Ja-Joan-1
6493: PPUSH
6494: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6498: LD_EXP 8
6502: PPUSH
6503: LD_STRING D2Ja-JMM-2
6505: PPUSH
6506: CALL_OW 88
// InGameOff ;
6510: CALL_OW 9
// end ; if dec2 = 2 then
6514: LD_VAR 0 3
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6593
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6524: LD_EXP 8
6528: PPUSH
6529: LD_STRING D2Jb-JMM-1
6531: PPUSH
6532: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6536: LD_EXP 9
6540: PPUSH
6541: LD_STRING D2Jb-Joan-1
6543: PPUSH
6544: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6548: LD_EXP 8
6552: PPUSH
6553: LD_STRING D2Jb-JMM-2
6555: PPUSH
6556: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6560: LD_EXP 9
6564: PPUSH
6565: LD_STRING D2Jb-Joan-2
6567: PPUSH
6568: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6572: LD_EXP 8
6576: PPUSH
6577: LD_STRING D2Jb-JMM-3
6579: PPUSH
6580: CALL_OW 88
// FinishMission ( true ) ;
6584: LD_INT 1
6586: PPUSH
6587: CALL 9230 0 1
// exit ;
6591: GO 7157
// end ; if dec2 = 3 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 3
6600: EQUAL
6601: IFFALSE 6624
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
6603: LD_EXP 9
6607: PPUSH
6608: LD_STRING D2Jc-Joan-1
6610: PPUSH
6611: CALL_OW 94
// FinishMission ( true ) ;
6615: LD_INT 1
6617: PPUSH
6618: CALL 9230 0 1
// exit ;
6622: GO 7157
// end ; end else
6624: GO 6635
// begin FinishMission ( true ) ;
6626: LD_INT 1
6628: PPUSH
6629: CALL 9230 0 1
// exit ;
6633: GO 7157
// end ; end ; if JMMGirl = 2 then
6635: LD_EXP 2
6639: PUSH
6640: LD_INT 2
6642: EQUAL
6643: IFFALSE 6945
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6645: LD_EXP 10
6649: PPUSH
6650: LD_STRING D2L-Lisa-1
6652: PPUSH
6653: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: LD_STRING Q1
6664: PPUSH
6665: CALL_OW 97
6669: ST_TO_ADDR
// if dec1 = 1 then
6670: LD_VAR 0 2
6674: PUSH
6675: LD_INT 1
6677: EQUAL
6678: IFFALSE 6936
// begin ComExitVehicle ( JMM ) ;
6680: LD_EXP 8
6684: PPUSH
6685: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6689: LD_EXP 8
6693: PPUSH
6694: LD_STRING D2L-JMM-1
6696: PPUSH
6697: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6701: LD_EXP 10
6705: PPUSH
6706: LD_STRING D2L-Lisa-2
6708: PPUSH
6709: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6713: LD_EXP 8
6717: PPUSH
6718: LD_STRING D2L-JMM-2
6720: PPUSH
6721: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
6725: LD_EXP 10
6729: PPUSH
6730: LD_STRING DL-Lisa-3
6732: PPUSH
6733: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6737: LD_EXP 12
6741: PPUSH
6742: LD_STRING DPowell-Pow-1
6744: PPUSH
6745: CALL_OW 94
// dec2 := Query ( Q2L ) ;
6749: LD_ADDR_VAR 0 3
6753: PUSH
6754: LD_STRING Q2L
6756: PPUSH
6757: CALL_OW 97
6761: ST_TO_ADDR
// if dec2 = 1 then
6762: LD_VAR 0 3
6766: PUSH
6767: LD_INT 1
6769: EQUAL
6770: IFFALSE 6836
// begin Say ( JMM , D2La-JMM-1 ) ;
6772: LD_EXP 8
6776: PPUSH
6777: LD_STRING D2La-JMM-1
6779: PPUSH
6780: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6784: LD_EXP 10
6788: PPUSH
6789: LD_STRING D2La-Lisa-1
6791: PPUSH
6792: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6796: LD_EXP 8
6800: PPUSH
6801: LD_STRING D2La-JMM-2
6803: PPUSH
6804: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6808: LD_EXP 10
6812: PPUSH
6813: LD_STRING D2La-Lisa-2
6815: PPUSH
6816: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6820: LD_EXP 8
6824: PPUSH
6825: LD_STRING D2La-JMM-3
6827: PPUSH
6828: CALL_OW 88
// InGameOff ;
6832: CALL_OW 9
// end ; if dec2 = 2 then
6836: LD_VAR 0 3
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6903
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6846: LD_EXP 8
6850: PPUSH
6851: LD_STRING D2Lb-JMM-1
6853: PPUSH
6854: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6858: LD_EXP 10
6862: PPUSH
6863: LD_STRING D2Lb-Lisa-1
6865: PPUSH
6866: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6870: LD_EXP 8
6874: PPUSH
6875: LD_STRING D2Lb-JMM-2
6877: PPUSH
6878: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6882: LD_EXP 10
6886: PPUSH
6887: LD_STRING D2Lb-Lisa-2
6889: PPUSH
6890: CALL_OW 94
// FinishMission ( true ) ;
6894: LD_INT 1
6896: PPUSH
6897: CALL 9230 0 1
// exit ;
6901: GO 7157
// end ; if dec2 = 3 then
6903: LD_VAR 0 3
6907: PUSH
6908: LD_INT 3
6910: EQUAL
6911: IFFALSE 6934
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6913: LD_EXP 10
6917: PPUSH
6918: LD_STRING D2Lc-Lisa-1
6920: PPUSH
6921: CALL_OW 94
// FinishMission ( true ) ;
6925: LD_INT 1
6927: PPUSH
6928: CALL 9230 0 1
// exit ;
6932: GO 7157
// end ; end else
6934: GO 6945
// begin FinishMission ( true ) ;
6936: LD_INT 1
6938: PPUSH
6939: CALL 9230 0 1
// exit ;
6943: GO 7157
// end ; end ; if JMMGirl = 3 then
6945: LD_EXP 2
6949: PUSH
6950: LD_INT 3
6952: EQUAL
6953: IFFALSE 7157
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6955: LD_EXP 11
6959: PPUSH
6960: LD_STRING D2X-Con-1
6962: PPUSH
6963: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6967: LD_ADDR_VAR 0 2
6971: PUSH
6972: LD_STRING Q1
6974: PPUSH
6975: CALL_OW 97
6979: ST_TO_ADDR
// if dec1 = 1 then
6980: LD_VAR 0 2
6984: PUSH
6985: LD_INT 1
6987: EQUAL
6988: IFFALSE 7150
// begin ComExitVehicle ( JMM ) ;
6990: LD_EXP 8
6994: PPUSH
6995: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6999: LD_EXP 8
7003: PPUSH
7004: LD_STRING D2X-JMM-1
7006: PPUSH
7007: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7011: LD_EXP 11
7015: PPUSH
7016: LD_STRING D2X-Con-2
7018: PPUSH
7019: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7023: LD_EXP 12
7027: PPUSH
7028: LD_STRING DPowell-Pow-1
7030: PPUSH
7031: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_STRING Q2X
7042: PPUSH
7043: CALL_OW 97
7047: ST_TO_ADDR
// if dec2 = 1 then
7048: LD_VAR 0 3
7052: PUSH
7053: LD_INT 1
7055: EQUAL
7056: IFFALSE 7074
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7058: LD_EXP 8
7062: PPUSH
7063: LD_STRING D2Xa-JMM-1
7065: PPUSH
7066: CALL_OW 88
// InGameOff ;
7070: CALL_OW 9
// end ; if dec2 = 2 then
7074: LD_VAR 0 3
7078: PUSH
7079: LD_INT 2
7081: EQUAL
7082: IFFALSE 7117
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7084: LD_EXP 8
7088: PPUSH
7089: LD_STRING D2Xb-JMM-1
7091: PPUSH
7092: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7096: LD_EXP 11
7100: PPUSH
7101: LD_STRING D2Xb-Con-1
7103: PPUSH
7104: CALL_OW 94
// FinishMission ( true ) ;
7108: LD_INT 1
7110: PPUSH
7111: CALL 9230 0 1
// exit ;
7115: GO 7157
// end ; if dec2 = 3 then
7117: LD_VAR 0 3
7121: PUSH
7122: LD_INT 3
7124: EQUAL
7125: IFFALSE 7148
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7127: LD_EXP 11
7131: PPUSH
7132: LD_STRING D2Xc-Con-1
7134: PPUSH
7135: CALL_OW 94
// FinishMission ( true ) ;
7139: LD_INT 1
7141: PPUSH
7142: CALL 9230 0 1
// exit ;
7146: GO 7157
// end ; end else
7148: GO 7157
// begin FinishMission ( true ) ;
7150: LD_INT 1
7152: PPUSH
7153: CALL 9230 0 1
// end ; end ; end ;
7157: LD_VAR 0 1
7161: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7162: LD_EXP 8
7166: PPUSH
7167: LD_INT 15
7169: PPUSH
7170: CALL_OW 308
7174: IFFALSE 8204
7176: GO 7178
7178: DISABLE
7179: LD_INT 0
7181: PPUSH
// begin if tick < 5 5$00 then
7182: LD_OWVAR 1
7186: PUSH
7187: LD_INT 10500
7189: LESS
7190: IFFALSE 7442
// begin uc_side := 6 ;
7192: LD_ADDR_OWVAR 20
7196: PUSH
7197: LD_INT 6
7199: ST_TO_ADDR
// uc_nation := 3 ;
7200: LD_ADDR_OWVAR 21
7204: PUSH
7205: LD_INT 3
7207: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7208: LD_INT 1
7210: PPUSH
7211: LD_INT 105
7213: PPUSH
7214: LD_INT 97
7216: PPUSH
7217: CALL_OW 293
7221: NOT
7222: IFFALSE 7286
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7224: LD_INT 22
7226: PPUSH
7227: LD_INT 1
7229: PPUSH
7230: LD_INT 3
7232: PPUSH
7233: LD_INT 44
7235: PPUSH
7236: LD_INT 40
7238: PPUSH
7239: CALL 35842 0 5
// veh := CreateVehicle ;
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: CALL_OW 45
7252: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_INT 200
7260: PPUSH
7261: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7265: LD_VAR 0 1
7269: PPUSH
7270: LD_INT 105
7272: PPUSH
7273: LD_INT 97
7275: PPUSH
7276: LD_INT 3
7278: PPUSH
7279: LD_INT 0
7281: PPUSH
7282: CALL 70368 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7286: LD_INT 1
7288: PPUSH
7289: LD_INT 116
7291: PPUSH
7292: LD_INT 120
7294: PPUSH
7295: CALL_OW 293
7299: NOT
7300: IFFALSE 7364
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7302: LD_INT 22
7304: PPUSH
7305: LD_INT 1
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 45
7313: PPUSH
7314: LD_INT 40
7316: PPUSH
7317: CALL 35842 0 5
// veh := CreateVehicle ;
7321: LD_ADDR_VAR 0 1
7325: PUSH
7326: CALL_OW 45
7330: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_INT 200
7338: PPUSH
7339: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_INT 116
7350: PPUSH
7351: LD_INT 120
7353: PPUSH
7354: LD_INT 4
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL 70368 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 116
7369: PPUSH
7370: LD_INT 120
7372: PPUSH
7373: CALL_OW 293
7377: NOT
7378: IFFALSE 7442
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7380: LD_INT 24
7382: PPUSH
7383: LD_INT 1
7385: PPUSH
7386: LD_INT 3
7388: PPUSH
7389: LD_INT 45
7391: PPUSH
7392: LD_INT 30
7394: PPUSH
7395: CALL 35842 0 5
// veh := CreateVehicle ;
7399: LD_ADDR_VAR 0 1
7403: PUSH
7404: CALL_OW 45
7408: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7409: LD_VAR 0 1
7413: PPUSH
7414: LD_INT 200
7416: PPUSH
7417: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7421: LD_VAR 0 1
7425: PPUSH
7426: LD_INT 116
7428: PPUSH
7429: LD_INT 120
7431: PPUSH
7432: LD_INT 4
7434: PPUSH
7435: LD_INT 0
7437: PPUSH
7438: CALL 70368 0 5
// end ; end ; InGameOn ;
7442: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7446: LD_INT 35
7448: PPUSH
7449: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7453: LD_EXP 8
7457: PPUSH
7458: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
7462: LD_EXP 8
7466: PPUSH
7467: LD_INT 62
7469: PPUSH
7470: LD_INT 104
7472: PPUSH
7473: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 62 , 104 ) ;
7477: LD_EXP 9
7481: PUSH
7482: LD_EXP 10
7486: PUSH
7487: LD_EXP 11
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: PPUSH
7497: LD_INT 62
7499: PPUSH
7500: LD_INT 104
7502: PPUSH
7503: CALL_OW 111
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7507: LD_EXP 9
7511: PUSH
7512: LD_EXP 10
7516: PUSH
7517: LD_EXP 11
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PPUSH
7527: LD_INT 91
7529: PUSH
7530: LD_EXP 8
7534: PUSH
7535: LD_INT 6
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 72
7547: IFFALSE 7446
// case JMMGirl of 1 :
7549: LD_EXP 2
7553: PUSH
7554: LD_INT 1
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7744
7562: POP
// begin ChangeSideKappaBase ;
7563: CALL 1422 0 0
// ComTurnUnit ( Joan , JMM ) ;
7567: LD_EXP 9
7571: PPUSH
7572: LD_EXP 8
7576: PPUSH
7577: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
7581: LD_EXP 8
7585: PPUSH
7586: LD_EXP 9
7590: PPUSH
7591: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7595: LD_EXP 9
7599: PUSH
7600: LD_EXP 8
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PPUSH
7609: CALL_OW 87
// wait ( 0 0$1 ) ;
7613: LD_INT 35
7615: PPUSH
7616: CALL_OW 67
// DialogueOn ;
7620: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
7624: LD_EXP 9
7628: PPUSH
7629: LD_STRING D3J-Joan-1
7631: PPUSH
7632: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7636: LD_EXP 8
7640: PPUSH
7641: LD_STRING D3J-JMM-1
7643: PPUSH
7644: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
7648: LD_EXP 9
7652: PPUSH
7653: LD_STRING D3J-Joan-2
7655: PPUSH
7656: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_STRING D3J-JMM-2
7667: PPUSH
7668: CALL_OW 88
// wait ( 0 0$1 ) ;
7672: LD_INT 35
7674: PPUSH
7675: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7679: LD_EXP 8
7683: PPUSH
7684: LD_STRING D4-JMM-1
7686: PPUSH
7687: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
7691: LD_EXP 9
7695: PPUSH
7696: LD_STRING D4-Joan-1
7698: PPUSH
7699: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7703: LD_EXP 8
7707: PPUSH
7708: LD_STRING D4-JMM-2
7710: PPUSH
7711: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
7715: LD_EXP 9
7719: PPUSH
7720: LD_STRING D4-Joan-2
7722: PPUSH
7723: CALL_OW 88
// DialogueOff ;
7727: CALL_OW 7
// InGameOff ;
7731: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
7735: LD_STRING M2J
7737: PPUSH
7738: CALL_OW 337
// end ; 2 :
7742: GO 8101
7744: LD_INT 2
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7934
7752: POP
// begin ChangeSideKappaBase ;
7753: CALL 1422 0 0
// ComTurnUnit ( Lisa , JMM ) ;
7757: LD_EXP 10
7761: PPUSH
7762: LD_EXP 8
7766: PPUSH
7767: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
7771: LD_EXP 8
7775: PPUSH
7776: LD_EXP 10
7780: PPUSH
7781: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
7785: LD_EXP 10
7789: PUSH
7790: LD_EXP 8
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 87
// wait ( 0 0$1 ) ;
7803: LD_INT 35
7805: PPUSH
7806: CALL_OW 67
// DialogueOn ;
7810: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
7814: LD_EXP 10
7818: PPUSH
7819: LD_STRING D3L-Lisa-1
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7826: LD_EXP 8
7830: PPUSH
7831: LD_STRING D3L-JMM-1
7833: PPUSH
7834: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7838: LD_EXP 10
7842: PPUSH
7843: LD_STRING D3L-Lisa-2
7845: PPUSH
7846: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7850: LD_EXP 8
7854: PPUSH
7855: LD_STRING D3L-JMM-2
7857: PPUSH
7858: CALL_OW 88
// wait ( 0 0$1 ) ;
7862: LD_INT 35
7864: PPUSH
7865: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7869: LD_EXP 8
7873: PPUSH
7874: LD_STRING D4-JMM-1
7876: PPUSH
7877: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7881: LD_EXP 10
7885: PPUSH
7886: LD_STRING D4-Lisa-1
7888: PPUSH
7889: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7893: LD_EXP 8
7897: PPUSH
7898: LD_STRING D4-JMM-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7905: LD_EXP 10
7909: PPUSH
7910: LD_STRING D4-Lisa-2
7912: PPUSH
7913: CALL_OW 88
// DialogueOff ;
7917: CALL_OW 7
// InGameOff ;
7921: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7925: LD_STRING M2L
7927: PPUSH
7928: CALL_OW 337
// end ; 3 :
7932: GO 8101
7934: LD_INT 3
7936: DOUBLE
7937: EQUAL
7938: IFTRUE 7942
7940: GO 8100
7942: POP
// begin ChangeSideKappaBase ;
7943: CALL 1422 0 0
// ComTurnUnit ( Connie , JMM ) ;
7947: LD_EXP 11
7951: PPUSH
7952: LD_EXP 8
7956: PPUSH
7957: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7961: LD_EXP 8
7965: PPUSH
7966: LD_EXP 11
7970: PPUSH
7971: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7975: LD_EXP 9
7979: PUSH
7980: LD_EXP 8
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PPUSH
7989: CALL_OW 87
// wait ( 0 0$1 ) ;
7993: LD_INT 35
7995: PPUSH
7996: CALL_OW 67
// DialogueOn ;
8000: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8004: LD_EXP 11
8008: PPUSH
8009: LD_STRING D3X-Con-1
8011: PPUSH
8012: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8016: LD_EXP 8
8020: PPUSH
8021: LD_STRING D3J-JMM-1
8023: PPUSH
8024: CALL_OW 88
// wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8035: LD_EXP 8
8039: PPUSH
8040: LD_STRING D4-JMM-1
8042: PPUSH
8043: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8047: LD_EXP 11
8051: PPUSH
8052: LD_STRING D4-Con-1
8054: PPUSH
8055: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8059: LD_EXP 8
8063: PPUSH
8064: LD_STRING D4-JMM-2
8066: PPUSH
8067: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8071: LD_EXP 11
8075: PPUSH
8076: LD_STRING D4-Con-2
8078: PPUSH
8079: CALL_OW 88
// DialogueOff ;
8083: CALL_OW 7
// InGameOff ;
8087: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8091: LD_STRING M2X
8093: PPUSH
8094: CALL_OW 337
// end ; end ;
8098: GO 8101
8100: POP
// SaveForQuickRestart ;
8101: CALL_OW 22
// wait ( 12 12$00 ) ;
8105: LD_INT 25200
8107: PPUSH
8108: CALL_OW 67
// DialogueOn ;
8112: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
8116: LD_EXP 12
8120: PPUSH
8121: LD_STRING D7-Pow-1
8123: PPUSH
8124: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8128: LD_EXP 8
8132: PPUSH
8133: LD_STRING D7-JMM-1
8135: PPUSH
8136: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8140: LD_EXP 12
8144: PPUSH
8145: LD_STRING D7-Pow-2
8147: PPUSH
8148: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8152: LD_EXP 8
8156: PPUSH
8157: LD_STRING D7-JMM-2
8159: PPUSH
8160: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8164: LD_EXP 12
8168: PPUSH
8169: LD_STRING D7-Pow-3
8171: PPUSH
8172: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8176: LD_EXP 8
8180: PPUSH
8181: LD_STRING D7-JMM-3
8183: PPUSH
8184: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8188: LD_EXP 12
8192: PPUSH
8193: LD_STRING D7-Pow-4
8195: PPUSH
8196: CALL_OW 94
// DialogueOff ;
8200: CALL_OW 7
// end ;
8204: PPOPN 1
8206: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8207: LD_INT 32
8209: PPUSH
8210: CALL_OW 306
8214: IFFALSE 8539
8216: GO 8218
8218: DISABLE
// begin case JMMGirl of 1 :
8219: LD_EXP 2
8223: PUSH
8224: LD_INT 1
8226: DOUBLE
8227: EQUAL
8228: IFTRUE 8232
8230: GO 8346
8232: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8233: LD_EXP 8
8237: PPUSH
8238: LD_STRING D6J-JMM-1
8240: PPUSH
8241: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8245: LD_STRING 13f_Denis
8247: PPUSH
8248: CALL_OW 28
8252: PUSH
8253: LD_STRING 13s_Denis
8255: PPUSH
8256: CALL_OW 28
8260: OR
8261: IFFALSE 8301
// begin Say ( Joan , D6J-Joan-1 ) ;
8263: LD_EXP 9
8267: PPUSH
8268: LD_STRING D6J-Joan-1
8270: PPUSH
8271: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8275: LD_EXP 8
8279: PPUSH
8280: LD_STRING D6J-JMM-2
8282: PPUSH
8283: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8287: LD_EXP 9
8291: PPUSH
8292: LD_STRING D6J-Joan-2
8294: PPUSH
8295: CALL_OW 88
// end else
8299: GO 8313
// Say ( Joan , D6J-Joan-2a ) ;
8301: LD_EXP 9
8305: PPUSH
8306: LD_STRING D6J-Joan-2a
8308: PPUSH
8309: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8313: LD_EXP 8
8317: PPUSH
8318: LD_STRING D6J-JMM-3
8320: PPUSH
8321: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8325: LD_EXP 9
8329: PPUSH
8330: LD_STRING D6J-Joan-3
8332: PPUSH
8333: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8337: LD_STRING M3
8339: PPUSH
8340: CALL_OW 337
// end ; 2 :
8344: GO 8539
8346: LD_INT 2
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8412
8354: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
8355: LD_EXP 8
8359: PPUSH
8360: LD_STRING D6L-JMM-1
8362: PPUSH
8363: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
8367: LD_EXP 10
8371: PPUSH
8372: LD_STRING D6L-Lisa-1
8374: PPUSH
8375: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
8379: LD_EXP 8
8383: PPUSH
8384: LD_STRING D6L-JMM-2
8386: PPUSH
8387: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
8391: LD_EXP 10
8395: PPUSH
8396: LD_STRING D6L-Lisa-2
8398: PPUSH
8399: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8403: LD_STRING M3
8405: PPUSH
8406: CALL_OW 337
// end ; 3 :
8410: GO 8539
8412: LD_INT 3
8414: DOUBLE
8415: EQUAL
8416: IFTRUE 8420
8418: GO 8538
8420: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
8421: LD_EXP 8
8425: PPUSH
8426: LD_STRING D6X-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
8433: LD_EXP 11
8437: PPUSH
8438: LD_STRING D6X-Con-1
8440: PPUSH
8441: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
8445: LD_EXP 8
8449: PPUSH
8450: LD_STRING D6X-JMM-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
8457: LD_EXP 11
8461: PPUSH
8462: LD_STRING D6X-Con-2
8464: PPUSH
8465: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
8469: LD_EXP 8
8473: PPUSH
8474: LD_STRING D6X-JMM-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
8481: LD_EXP 11
8485: PPUSH
8486: LD_STRING D6X-Con-3
8488: PPUSH
8489: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
8493: LD_EXP 8
8497: PPUSH
8498: LD_STRING D6X-JMM-4
8500: PPUSH
8501: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
8505: LD_EXP 11
8509: PPUSH
8510: LD_STRING D6X-Con-4
8512: PPUSH
8513: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
8517: LD_EXP 8
8521: PPUSH
8522: LD_STRING D6X-JMM-5
8524: PPUSH
8525: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8529: LD_STRING M3
8531: PPUSH
8532: CALL_OW 337
// end ; end ;
8536: GO 8539
8538: POP
// end ;
8539: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
8540: LD_INT 22
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 33
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: PPUSH
8569: CALL_OW 306
8573: IFFALSE 8719
8575: GO 8577
8577: DISABLE
// begin case JMMGirl of 1 :
8578: LD_EXP 2
8582: PUSH
8583: LD_INT 1
8585: DOUBLE
8586: EQUAL
8587: IFTRUE 8591
8589: GO 8628
8591: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8592: LD_EXP 8
8596: PPUSH
8597: LD_STRING D5-JMM-1
8599: PPUSH
8600: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8604: LD_INT 77
8606: PPUSH
8607: LD_INT 87
8609: PPUSH
8610: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
8614: LD_EXP 9
8618: PPUSH
8619: LD_STRING D5-Joan-1
8621: PPUSH
8622: CALL_OW 88
// end ; 2 :
8626: GO 8719
8628: LD_INT 2
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8673
8636: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8637: LD_EXP 8
8641: PPUSH
8642: LD_STRING D5-JMM-1
8644: PPUSH
8645: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8649: LD_INT 77
8651: PPUSH
8652: LD_INT 87
8654: PPUSH
8655: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
8659: LD_EXP 10
8663: PPUSH
8664: LD_STRING D5-Lisa-1
8666: PPUSH
8667: CALL_OW 88
// end ; 3 :
8671: GO 8719
8673: LD_INT 3
8675: DOUBLE
8676: EQUAL
8677: IFTRUE 8681
8679: GO 8718
8681: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8682: LD_EXP 8
8686: PPUSH
8687: LD_STRING D5-JMM-1
8689: PPUSH
8690: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8694: LD_INT 77
8696: PPUSH
8697: LD_INT 87
8699: PPUSH
8700: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
8704: LD_EXP 11
8708: PPUSH
8709: LD_STRING D5-Con-1
8711: PPUSH
8712: CALL_OW 88
// end ; end ;
8716: GO 8719
8718: POP
// end ;
8719: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
8720: LD_EXP 8
8724: PPUSH
8725: CALL_OW 310
8729: PPUSH
8730: LD_INT 16
8732: PPUSH
8733: CALL_OW 308
8737: IFFALSE 9087
8739: GO 8741
8741: DISABLE
8742: LD_INT 0
8744: PPUSH
8745: PPUSH
// begin enable ;
8746: ENABLE
// if JMMGirl = 1 then
8747: LD_EXP 2
8751: PUSH
8752: LD_INT 1
8754: EQUAL
8755: IFFALSE 8772
// JMMGirlVeh := IsInUnit ( Joan ) ;
8757: LD_ADDR_VAR 0 1
8761: PUSH
8762: LD_EXP 9
8766: PPUSH
8767: CALL_OW 310
8771: ST_TO_ADDR
// if JMMGirl = 2 then
8772: LD_EXP 2
8776: PUSH
8777: LD_INT 2
8779: EQUAL
8780: IFFALSE 8797
// JMMGirlVeh := IsInUnit ( Lisa ) ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_EXP 10
8791: PPUSH
8792: CALL_OW 310
8796: ST_TO_ADDR
// if JMMGirl = 3 then
8797: LD_EXP 2
8801: PUSH
8802: LD_INT 3
8804: EQUAL
8805: IFFALSE 8822
// JMMGirlVeh := IsInUnit ( Connie ) ;
8807: LD_ADDR_VAR 0 1
8811: PUSH
8812: LD_EXP 11
8816: PPUSH
8817: CALL_OW 310
8821: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8822: LD_EXP 8
8826: PPUSH
8827: CALL_OW 310
8831: PPUSH
8832: LD_EXP 9
8836: PPUSH
8837: CALL_OW 310
8841: PPUSH
8842: CALL_OW 296
8846: PUSH
8847: LD_INT 10
8849: LESS
8850: PUSH
8851: LD_EXP 8
8855: PPUSH
8856: CALL_OW 310
8860: PPUSH
8861: LD_EXP 10
8865: PPUSH
8866: CALL_OW 310
8870: PPUSH
8871: CALL_OW 296
8875: PUSH
8876: LD_INT 10
8878: LESS
8879: OR
8880: PUSH
8881: LD_EXP 8
8885: PPUSH
8886: CALL_OW 310
8890: PPUSH
8891: LD_EXP 11
8895: PPUSH
8896: CALL_OW 310
8900: PPUSH
8901: CALL_OW 296
8905: PUSH
8906: LD_INT 10
8908: LESS
8909: OR
8910: IFFALSE 9007
// begin case Query ( Q3b ) of 1 :
8912: LD_STRING Q3b
8914: PPUSH
8915: CALL_OW 97
8919: PUSH
8920: LD_INT 1
8922: DOUBLE
8923: EQUAL
8924: IFTRUE 8928
8926: GO 9004
8928: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8929: LD_VAR 0 1
8933: PPUSH
8934: CALL_OW 265
8938: PUSH
8939: EMPTY
8940: LIST
8941: PUSH
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 262
8951: PUSH
8952: EMPTY
8953: LIST
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 263
8964: PUSH
8965: EMPTY
8966: LIST
8967: PUSH
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: EMPTY
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: PPUSH
8987: LD_STRING 14_JMMGirlVeh_1
8989: PPUSH
8990: CALL_OW 39
// FinishMission ( false ) ;
8994: LD_INT 0
8996: PPUSH
8997: CALL 9230 0 1
// disable ;
9001: DISABLE
// end ; end ;
9002: GO 9005
9004: POP
// end else
9005: GO 9087
// begin if JMMGirl = 1 then
9007: LD_EXP 2
9011: PUSH
9012: LD_INT 1
9014: EQUAL
9015: IFFALSE 9032
// dec := Query ( Q3bJ ) else
9017: LD_ADDR_VAR 0 2
9021: PUSH
9022: LD_STRING Q3bJ
9024: PPUSH
9025: CALL_OW 97
9029: ST_TO_ADDR
9030: GO 9070
// if JMMGirl = 2 then
9032: LD_EXP 2
9036: PUSH
9037: LD_INT 2
9039: EQUAL
9040: IFFALSE 9057
// dec := Query ( Q3bL ) else
9042: LD_ADDR_VAR 0 2
9046: PUSH
9047: LD_STRING Q3bL
9049: PPUSH
9050: CALL_OW 97
9054: ST_TO_ADDR
9055: GO 9070
// dec := Query ( Q3bX ) ;
9057: LD_ADDR_VAR 0 2
9061: PUSH
9062: LD_STRING Q3bX
9064: PPUSH
9065: CALL_OW 97
9069: ST_TO_ADDR
// if dec = 1 then
9070: LD_VAR 0 2
9074: PUSH
9075: LD_INT 1
9077: EQUAL
9078: IFFALSE 9087
// FinishMission ( false ) ;
9080: LD_INT 0
9082: PPUSH
9083: CALL 9230 0 1
// end ; end ;
9087: PPOPN 2
9089: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9090: LD_INT 22
9092: PUSH
9093: LD_INT 3
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 21
9102: PUSH
9103: LD_INT 1
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: CALL_OW 69
9118: PUSH
9119: LD_INT 0
9121: EQUAL
9122: IFFALSE 9229
9124: GO 9126
9126: DISABLE
// begin DialogueOn ;
9127: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9131: LD_EXP 8
9135: PPUSH
9136: LD_STRING DEnd-JMM-1
9138: PPUSH
9139: CALL_OW 88
// case JMMGirl of 1 :
9143: LD_EXP 2
9147: PUSH
9148: LD_INT 1
9150: DOUBLE
9151: EQUAL
9152: IFTRUE 9156
9154: GO 9171
9156: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9157: LD_EXP 9
9161: PPUSH
9162: LD_STRING DEnd-Joan-1
9164: PPUSH
9165: CALL_OW 88
9169: GO 9218
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9194
9179: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9180: LD_EXP 10
9184: PPUSH
9185: LD_STRING DEnd-Lisa-1
9187: PPUSH
9188: CALL_OW 88
9192: GO 9218
9194: LD_INT 3
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9217
9202: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9203: LD_EXP 11
9207: PPUSH
9208: LD_STRING DEnd-Con-1
9210: PPUSH
9211: CALL_OW 88
9215: GO 9218
9217: POP
// DialogueOff ;
9218: CALL_OW 7
// FinishMission ( false ) ;
9222: LD_INT 0
9224: PPUSH
9225: CALL 9230 0 1
// end ;
9229: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
// m1 := false ;
9238: LD_ADDR_VAR 0 4
9242: PUSH
9243: LD_INT 0
9245: ST_TO_ADDR
// m2 := false ;
9246: LD_ADDR_VAR 0 5
9250: PUSH
9251: LD_INT 0
9253: ST_TO_ADDR
// m3 := false ;
9254: LD_ADDR_VAR 0 6
9258: PUSH
9259: LD_INT 0
9261: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9262: LD_ADDR_VAR 0 7
9266: PUSH
9267: LD_INT 22
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 69
9295: PUSH
9296: LD_INT 0
9298: EQUAL
9299: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9300: LD_EXP 8
9304: PPUSH
9305: LD_STRING 14_JMM
9307: PPUSH
9308: CALL_OW 38
// if tick <= 50 50$00 then
9312: LD_OWVAR 1
9316: PUSH
9317: LD_INT 105000
9319: LESSEQUAL
9320: IFFALSE 9329
// SetAchievement ( ACH_ASPEED_14 ) ;
9322: LD_STRING ACH_ASPEED_14
9324: PPUSH
9325: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9329: LD_EXP 8
9333: PPUSH
9334: CALL_OW 310
9338: PUSH
9339: LD_EXP 8
9343: PPUSH
9344: CALL_OW 310
9348: PPUSH
9349: CALL_OW 247
9353: PUSH
9354: LD_INT 2
9356: EQUAL
9357: AND
9358: IFFALSE 9440
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9360: LD_ADDR_VAR 0 3
9364: PUSH
9365: LD_EXP 8
9369: PPUSH
9370: CALL_OW 310
9374: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9375: LD_VAR 0 3
9379: PPUSH
9380: CALL_OW 265
9384: PUSH
9385: EMPTY
9386: LIST
9387: PUSH
9388: LD_VAR 0 3
9392: PPUSH
9393: CALL_OW 262
9397: PUSH
9398: EMPTY
9399: LIST
9400: PUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: CALL_OW 263
9410: PUSH
9411: EMPTY
9412: LIST
9413: PUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: CALL_OW 264
9423: PUSH
9424: EMPTY
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PPUSH
9433: LD_STRING 14_JMMVeh_1
9435: PPUSH
9436: CALL_OW 39
// end ; if fastEnd then
9440: LD_VAR 0 1
9444: IFFALSE 9535
// begin AddMedal ( fastend , - 1 ) ;
9446: LD_STRING fastend
9448: PPUSH
9449: LD_INT 1
9451: NEG
9452: PPUSH
9453: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9457: LD_STRING fastend
9459: PPUSH
9460: LD_INT 1
9462: NEG
9463: PPUSH
9464: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9468: LD_STRING fastend
9470: PPUSH
9471: LD_INT 1
9473: NEG
9474: PPUSH
9475: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9479: LD_EXP 2
9483: PPUSH
9484: LD_STRING 14_JMMGirl_1
9486: PPUSH
9487: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9491: LD_INT 0
9493: PPUSH
9494: LD_STRING 14_JMMGirlStatus_1
9496: PPUSH
9497: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9501: LD_INT 0
9503: PPUSH
9504: LD_STRING 14_KappaStatus_1
9506: PPUSH
9507: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9511: LD_STRING Eliminate
9513: PPUSH
9514: CALL_OW 102
// RewardPeople ( JMM ) ;
9518: LD_EXP 8
9522: PPUSH
9523: CALL_OW 43
// YouWin ;
9527: CALL_OW 103
// exit ;
9531: GO 10181
// end else
9533: GO 10074
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9535: LD_EXP 2
9539: PPUSH
9540: LD_STRING 14_JMMGirl_1
9542: PPUSH
9543: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
9547: LD_VAR 0 7
9551: PPUSH
9552: LD_STRING 14_KappaStatus_1
9554: PPUSH
9555: CALL_OW 39
// case JMMGirl of 1 :
9559: LD_EXP 2
9563: PUSH
9564: LD_INT 1
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9700
9572: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9573: LD_EXP 9
9577: PPUSH
9578: CALL_OW 302
9582: PUSH
9583: LD_EXP 9
9587: PPUSH
9588: CALL_OW 255
9592: PUSH
9593: LD_INT 1
9595: EQUAL
9596: AND
9597: PUSH
9598: LD_VAR 0 7
9602: PUSH
9603: LD_EXP 8
9607: PPUSH
9608: CALL_OW 310
9612: PPUSH
9613: LD_EXP 9
9617: PPUSH
9618: CALL_OW 310
9622: PPUSH
9623: CALL_OW 296
9627: PUSH
9628: LD_INT 10
9630: LESS
9631: OR
9632: AND
9633: IFFALSE 9677
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9635: LD_INT 1
9637: PPUSH
9638: LD_STRING 14_JMMGirlStatus_1
9640: PPUSH
9641: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9645: LD_EXP 9
9649: PPUSH
9650: LD_STRING 14_Joan
9652: PPUSH
9653: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9657: LD_STRING protect
9659: PPUSH
9660: LD_INT 1
9662: PPUSH
9663: CALL_OW 101
// m1 := true ;
9667: LD_ADDR_VAR 0 4
9671: PUSH
9672: LD_INT 1
9674: ST_TO_ADDR
// end else
9675: GO 9698
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9677: LD_INT 0
9679: PPUSH
9680: LD_STRING 14_JMMGirlStatus_1
9682: PPUSH
9683: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9687: LD_STRING protect
9689: PPUSH
9690: LD_INT 1
9692: NEG
9693: PPUSH
9694: CALL_OW 101
// end ; end ; 2 :
9698: GO 9973
9700: LD_INT 2
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9836
9708: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9709: LD_EXP 10
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: LD_EXP 10
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_INT 1
9731: EQUAL
9732: AND
9733: PUSH
9734: LD_VAR 0 7
9738: PUSH
9739: LD_EXP 8
9743: PPUSH
9744: CALL_OW 310
9748: PPUSH
9749: LD_EXP 10
9753: PPUSH
9754: CALL_OW 310
9758: PPUSH
9759: CALL_OW 296
9763: PUSH
9764: LD_INT 10
9766: LESS
9767: OR
9768: AND
9769: IFFALSE 9813
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9771: LD_INT 1
9773: PPUSH
9774: LD_STRING 14_JMMGirlStatus_1
9776: PPUSH
9777: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9781: LD_EXP 10
9785: PPUSH
9786: LD_STRING 14_Lisa
9788: PPUSH
9789: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9793: LD_STRING protect
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 101
// m1 := true ;
9803: LD_ADDR_VAR 0 4
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// end else
9811: GO 9834
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9813: LD_INT 0
9815: PPUSH
9816: LD_STRING 14_JMMGirlStatus_1
9818: PPUSH
9819: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9823: LD_STRING protect
9825: PPUSH
9826: LD_INT 2
9828: NEG
9829: PPUSH
9830: CALL_OW 101
// end ; end ; 3 :
9834: GO 9973
9836: LD_INT 3
9838: DOUBLE
9839: EQUAL
9840: IFTRUE 9844
9842: GO 9972
9844: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9845: LD_EXP 11
9849: PPUSH
9850: CALL_OW 302
9854: PUSH
9855: LD_EXP 11
9859: PPUSH
9860: CALL_OW 255
9864: PUSH
9865: LD_INT 1
9867: EQUAL
9868: AND
9869: PUSH
9870: LD_VAR 0 7
9874: PUSH
9875: LD_EXP 8
9879: PPUSH
9880: CALL_OW 310
9884: PPUSH
9885: LD_EXP 11
9889: PPUSH
9890: CALL_OW 310
9894: PPUSH
9895: CALL_OW 296
9899: PUSH
9900: LD_INT 10
9902: LESS
9903: OR
9904: AND
9905: IFFALSE 9949
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9907: LD_INT 1
9909: PPUSH
9910: LD_STRING 14_JMMGirlStatus_1
9912: PPUSH
9913: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9917: LD_EXP 11
9921: PPUSH
9922: LD_STRING 14_Connie
9924: PPUSH
9925: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9929: LD_STRING protect
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 101
// m1 := true ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// end else
9947: GO 9970
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9949: LD_INT 0
9951: PPUSH
9952: LD_STRING 14_JMMGirlStatus_1
9954: PPUSH
9955: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
9959: LD_STRING protect
9961: PPUSH
9962: LD_INT 3
9964: NEG
9965: PPUSH
9966: CALL_OW 101
// end ; end ; end ;
9970: GO 9973
9972: POP
// if amLaserCounter >= 2 then
9973: LD_EXP 7
9977: PUSH
9978: LD_INT 2
9980: GREATEREQUAL
9981: IFFALSE 10003
// begin AddMedal ( double , 1 ) ;
9983: LD_STRING double
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 101
// m2 := true ;
9993: LD_ADDR_VAR 0 5
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// end else
10001: GO 10037
// begin if amLaserCounter = 1 then
10003: LD_EXP 7
10007: PUSH
10008: LD_INT 1
10010: EQUAL
10011: IFFALSE 10026
// AddMedal ( double , - 2 ) else
10013: LD_STRING double
10015: PPUSH
10016: LD_INT 2
10018: NEG
10019: PPUSH
10020: CALL_OW 101
10024: GO 10037
// AddMedal ( double , - 1 ) ;
10026: LD_STRING double
10028: PPUSH
10029: LD_INT 1
10031: NEG
10032: PPUSH
10033: CALL_OW 101
// end ; if ruEliminated then
10037: LD_VAR 0 7
10041: IFFALSE 10063
// begin AddMedal ( base , 1 ) ;
10043: LD_STRING base
10045: PPUSH
10046: LD_INT 1
10048: PPUSH
10049: CALL_OW 101
// m3 := true ;
10053: LD_ADDR_VAR 0 6
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// end else
10061: GO 10074
// AddMedal ( base , - 1 ) ;
10063: LD_STRING base
10065: PPUSH
10066: LD_INT 1
10068: NEG
10069: PPUSH
10070: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10074: LD_VAR 0 4
10078: PUSH
10079: LD_VAR 0 5
10083: AND
10084: PUSH
10085: LD_VAR 0 6
10089: AND
10090: PUSH
10091: LD_OWVAR 67
10095: PUSH
10096: LD_INT 3
10098: GREATEREQUAL
10099: AND
10100: IFFALSE 10112
// SetAchievementEX ( ACH_AMER , 14 ) ;
10102: LD_STRING ACH_AMER
10104: PPUSH
10105: LD_INT 14
10107: PPUSH
10108: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10112: LD_STRING Eliminate
10114: PPUSH
10115: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10119: LD_INT 22
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 25
10134: PUSH
10135: LD_INT 12
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 3
10148: PUSH
10149: LD_INT 25
10151: PUSH
10152: LD_INT 16
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 69
10172: PPUSH
10173: CALL_OW 43
// YouWin ;
10177: CALL_OW 103
// end ; end_of_file
10181: LD_VAR 0 2
10185: RET
// export function CreateNature ; var i , un ; begin
10186: LD_INT 0
10188: PPUSH
10189: PPUSH
10190: PPUSH
// PrepareEnchidna ;
10191: CALL 64668 0 0
// for i := 1 to 3 do
10195: LD_ADDR_VAR 0 2
10199: PUSH
10200: DOUBLE
10201: LD_INT 1
10203: DEC
10204: ST_TO_ADDR
10205: LD_INT 3
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10258
// begin un := CreateHuman ;
10211: LD_ADDR_VAR 0 3
10215: PUSH
10216: CALL_OW 44
10220: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10221: LD_VAR 0 3
10225: PPUSH
10226: LD_INT 0
10228: PPUSH
10229: LD_INT 5
10231: PPUSH
10232: CALL_OW 12
10236: PPUSH
10237: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_INT 9
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 49
// end ;
10256: GO 10208
10258: POP
10259: POP
// PrepareHorse ;
10260: CALL 64828 0 0
// for i := 1 to 2 do
10264: LD_ADDR_VAR 0 2
10268: PUSH
10269: DOUBLE
10270: LD_INT 1
10272: DEC
10273: ST_TO_ADDR
10274: LD_INT 2
10276: PUSH
10277: FOR_TO
10278: IFFALSE 10327
// begin un := CreateHuman ;
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: CALL_OW 44
10289: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 0
10297: PPUSH
10298: LD_INT 5
10300: PPUSH
10301: CALL_OW 12
10305: PPUSH
10306: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 9
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// end ;
10325: GO 10277
10327: POP
10328: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10329: LD_ADDR_VAR 0 2
10333: PUSH
10334: DOUBLE
10335: LD_INT 1
10337: DEC
10338: ST_TO_ADDR
10339: LD_INT 4
10341: PUSH
10342: LD_INT 5
10344: PUSH
10345: LD_INT 5
10347: PUSH
10348: LD_INT 5
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: PUSH
10357: LD_OWVAR 67
10361: ARRAY
10362: PUSH
10363: FOR_TO
10364: IFFALSE 10428
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
10366: LD_INT 0
10368: PPUSH
10369: LD_INT 5
10371: PPUSH
10372: CALL_OW 12
10376: PPUSH
10377: CALL 64499 0 1
// un := CreateHuman ;
10381: LD_ADDR_VAR 0 3
10385: PUSH
10386: CALL_OW 44
10390: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10391: LD_VAR 0 3
10395: PPUSH
10396: LD_INT 0
10398: PPUSH
10399: LD_INT 5
10401: PPUSH
10402: CALL_OW 12
10406: PPUSH
10407: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 8
10418: PPUSH
10419: LD_INT 0
10421: PPUSH
10422: CALL_OW 49
// end ;
10426: GO 10363
10428: POP
10429: POP
// PrepareFish ;
10430: CALL 64748 0 0
// for i := 1 to 2 do
10434: LD_ADDR_VAR 0 2
10438: PUSH
10439: DOUBLE
10440: LD_INT 1
10442: DEC
10443: ST_TO_ADDR
10444: LD_INT 2
10446: PUSH
10447: FOR_TO
10448: IFFALSE 10497
// begin un := CreateHuman ;
10450: LD_ADDR_VAR 0 3
10454: PUSH
10455: CALL_OW 44
10459: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 0
10467: PPUSH
10468: LD_INT 5
10470: PPUSH
10471: CALL_OW 12
10475: PPUSH
10476: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 6
10487: PPUSH
10488: LD_INT 0
10490: PPUSH
10491: CALL_OW 49
// end ;
10495: GO 10447
10497: POP
10498: POP
// PrepareFrog ;
10499: CALL 64708 0 0
// for i := 1 to 2 do
10503: LD_ADDR_VAR 0 2
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_INT 2
10515: PUSH
10516: FOR_TO
10517: IFFALSE 10566
// begin un := CreateHuman ;
10519: LD_ADDR_VAR 0 3
10523: PUSH
10524: CALL_OW 44
10528: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 0
10536: PPUSH
10537: LD_INT 5
10539: PPUSH
10540: CALL_OW 12
10544: PPUSH
10545: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
10549: LD_VAR 0 3
10553: PPUSH
10554: LD_INT 7
10556: PPUSH
10557: LD_INT 0
10559: PPUSH
10560: CALL_OW 49
// end ;
10564: GO 10516
10566: POP
10567: POP
// PrepareMastodont ;
10568: CALL 64868 0 0
// un := CreateVehicle ;
10572: LD_ADDR_VAR 0 3
10576: PUSH
10577: CALL_OW 45
10581: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 166
10589: PPUSH
10590: LD_INT 134
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: LD_INT 0
10598: PPUSH
10599: CALL 70368 0 5
// end ; end_of_file
10603: LD_VAR 0 1
10607: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
10608: LD_INT 14
10610: PPUSH
10611: CALL_OW 435
10615: PUSH
10616: LD_INT 20
10618: LESS
10619: IFFALSE 10661
10621: GO 10623
10623: DISABLE
// begin enable ;
10624: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
10625: LD_INT 35
10627: PPUSH
10628: LD_INT 735
10630: PPUSH
10631: CALL_OW 12
10635: PPUSH
10636: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
10640: LD_INT 1
10642: PPUSH
10643: LD_INT 5
10645: PPUSH
10646: CALL_OW 12
10650: PPUSH
10651: LD_INT 14
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 55
// end ;
10661: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
10662: LD_INT 13
10664: PPUSH
10665: CALL_OW 435
10669: PUSH
10670: LD_INT 30
10672: LESS
10673: IFFALSE 10715
10675: GO 10677
10677: DISABLE
// begin enable ;
10678: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
10679: LD_INT 35
10681: PPUSH
10682: LD_INT 735
10684: PPUSH
10685: CALL_OW 12
10689: PPUSH
10690: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
10694: LD_INT 1
10696: PPUSH
10697: LD_INT 5
10699: PPUSH
10700: CALL_OW 12
10704: PPUSH
10705: LD_INT 13
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 55
// end ;
10715: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
10716: LD_INT 13
10718: PPUSH
10719: CALL_OW 435
10723: PUSH
10724: LD_INT 30
10726: LESS
10727: IFFALSE 10760
10729: GO 10731
10731: DISABLE
// begin enable ;
10732: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
10733: LD_INT 1
10735: PPUSH
10736: LD_INT 5
10738: PPUSH
10739: CALL_OW 12
10743: PPUSH
10744: LD_INT 133
10746: PPUSH
10747: LD_INT 122
10749: PPUSH
10750: LD_INT 20
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 56
// end ; end_of_file
10760: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
10761: LD_INT 0
10763: PPUSH
// ar_miner := 81 ;
10764: LD_ADDR_EXP 27
10768: PUSH
10769: LD_INT 81
10771: ST_TO_ADDR
// ar_crane := 88 ;
10772: LD_ADDR_EXP 26
10776: PUSH
10777: LD_INT 88
10779: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10780: LD_ADDR_EXP 21
10784: PUSH
10785: LD_INT 89
10787: ST_TO_ADDR
// us_hack := 99 ;
10788: LD_ADDR_EXP 22
10792: PUSH
10793: LD_INT 99
10795: ST_TO_ADDR
// us_artillery := 97 ;
10796: LD_ADDR_EXP 23
10800: PUSH
10801: LD_INT 97
10803: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10804: LD_ADDR_EXP 24
10808: PUSH
10809: LD_INT 91
10811: ST_TO_ADDR
// ar_mortar := 92 ;
10812: LD_ADDR_EXP 25
10816: PUSH
10817: LD_INT 92
10819: ST_TO_ADDR
// ru_flamethrower := 93 ;
10820: LD_ADDR_EXP 28
10824: PUSH
10825: LD_INT 93
10827: ST_TO_ADDR
// ru_radar := 98 ;
10828: LD_ADDR_EXP 20
10832: PUSH
10833: LD_INT 98
10835: ST_TO_ADDR
// tech_Artillery := 80 ;
10836: LD_ADDR_EXP 29
10840: PUSH
10841: LD_INT 80
10843: ST_TO_ADDR
// tech_RadMat := 81 ;
10844: LD_ADDR_EXP 30
10848: PUSH
10849: LD_INT 81
10851: ST_TO_ADDR
// tech_BasicTools := 82 ;
10852: LD_ADDR_EXP 31
10856: PUSH
10857: LD_INT 82
10859: ST_TO_ADDR
// tech_Cargo := 83 ;
10860: LD_ADDR_EXP 32
10864: PUSH
10865: LD_INT 83
10867: ST_TO_ADDR
// tech_Track := 84 ;
10868: LD_ADDR_EXP 33
10872: PUSH
10873: LD_INT 84
10875: ST_TO_ADDR
// tech_Crane := 85 ;
10876: LD_ADDR_EXP 34
10880: PUSH
10881: LD_INT 85
10883: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10884: LD_ADDR_EXP 35
10888: PUSH
10889: LD_INT 86
10891: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10892: LD_ADDR_EXP 36
10896: PUSH
10897: LD_INT 87
10899: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10900: LD_ADDR_EXP 37
10904: PUSH
10905: LD_INT 88
10907: ST_TO_ADDR
// class_mastodont := 31 ;
10908: LD_ADDR_EXP 38
10912: PUSH
10913: LD_INT 31
10915: ST_TO_ADDR
// end ;
10916: LD_VAR 0 1
10920: RET
// every 1 do
10921: GO 10923
10923: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10924: CALL 10761 0 0
10928: END
// every 0 0$1 do
10929: GO 10931
10931: DISABLE
// begin enable ;
10932: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10933: LD_STRING updateTimer(
10935: PUSH
10936: LD_OWVAR 1
10940: STR
10941: PUSH
10942: LD_STRING );
10944: STR
10945: PPUSH
10946: CALL_OW 559
// end ;
10950: END
// export function SOS_MapStart ( ) ; begin
10951: LD_INT 0
10953: PPUSH
// if streamModeActive then
10954: LD_EXP 39
10958: IFFALSE 10967
// DefineStreamItems ( true ) ;
10960: LD_INT 1
10962: PPUSH
10963: CALL 12621 0 1
// UpdateFactoryWaypoints ( ) ;
10967: CALL 25482 0 0
// UpdateWarhouseGatheringPoints ( ) ;
10971: CALL 25735 0 0
// end ;
10975: LD_VAR 0 1
10979: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10980: LD_INT 0
10982: PPUSH
// if p2 = 100 then
10983: LD_VAR 0 2
10987: PUSH
10988: LD_INT 100
10990: EQUAL
10991: IFFALSE 11994
// begin if not StreamModeActive then
10993: LD_EXP 39
10997: NOT
10998: IFFALSE 11008
// StreamModeActive := true ;
11000: LD_ADDR_EXP 39
11004: PUSH
11005: LD_INT 1
11007: ST_TO_ADDR
// if p3 = 0 then
11008: LD_VAR 0 3
11012: PUSH
11013: LD_INT 0
11015: EQUAL
11016: IFFALSE 11022
// InitStreamMode ;
11018: CALL 12157 0 0
// if p3 = 1 then
11022: LD_VAR 0 3
11026: PUSH
11027: LD_INT 1
11029: EQUAL
11030: IFFALSE 11040
// sRocket := true ;
11032: LD_ADDR_EXP 44
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// if p3 = 2 then
11040: LD_VAR 0 3
11044: PUSH
11045: LD_INT 2
11047: EQUAL
11048: IFFALSE 11058
// sSpeed := true ;
11050: LD_ADDR_EXP 43
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// if p3 = 3 then
11058: LD_VAR 0 3
11062: PUSH
11063: LD_INT 3
11065: EQUAL
11066: IFFALSE 11076
// sEngine := true ;
11068: LD_ADDR_EXP 45
11072: PUSH
11073: LD_INT 1
11075: ST_TO_ADDR
// if p3 = 4 then
11076: LD_VAR 0 3
11080: PUSH
11081: LD_INT 4
11083: EQUAL
11084: IFFALSE 11094
// sSpec := true ;
11086: LD_ADDR_EXP 42
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// if p3 = 5 then
11094: LD_VAR 0 3
11098: PUSH
11099: LD_INT 5
11101: EQUAL
11102: IFFALSE 11112
// sLevel := true ;
11104: LD_ADDR_EXP 46
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
// if p3 = 6 then
11112: LD_VAR 0 3
11116: PUSH
11117: LD_INT 6
11119: EQUAL
11120: IFFALSE 11130
// sArmoury := true ;
11122: LD_ADDR_EXP 47
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// if p3 = 7 then
11130: LD_VAR 0 3
11134: PUSH
11135: LD_INT 7
11137: EQUAL
11138: IFFALSE 11148
// sRadar := true ;
11140: LD_ADDR_EXP 48
11144: PUSH
11145: LD_INT 1
11147: ST_TO_ADDR
// if p3 = 8 then
11148: LD_VAR 0 3
11152: PUSH
11153: LD_INT 8
11155: EQUAL
11156: IFFALSE 11166
// sBunker := true ;
11158: LD_ADDR_EXP 49
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// if p3 = 9 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_INT 9
11173: EQUAL
11174: IFFALSE 11184
// sHack := true ;
11176: LD_ADDR_EXP 50
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// if p3 = 10 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_INT 10
11191: EQUAL
11192: IFFALSE 11202
// sFire := true ;
11194: LD_ADDR_EXP 51
11198: PUSH
11199: LD_INT 1
11201: ST_TO_ADDR
// if p3 = 11 then
11202: LD_VAR 0 3
11206: PUSH
11207: LD_INT 11
11209: EQUAL
11210: IFFALSE 11220
// sRefresh := true ;
11212: LD_ADDR_EXP 52
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// if p3 = 12 then
11220: LD_VAR 0 3
11224: PUSH
11225: LD_INT 12
11227: EQUAL
11228: IFFALSE 11238
// sExp := true ;
11230: LD_ADDR_EXP 53
11234: PUSH
11235: LD_INT 1
11237: ST_TO_ADDR
// if p3 = 13 then
11238: LD_VAR 0 3
11242: PUSH
11243: LD_INT 13
11245: EQUAL
11246: IFFALSE 11256
// sDepot := true ;
11248: LD_ADDR_EXP 54
11252: PUSH
11253: LD_INT 1
11255: ST_TO_ADDR
// if p3 = 14 then
11256: LD_VAR 0 3
11260: PUSH
11261: LD_INT 14
11263: EQUAL
11264: IFFALSE 11274
// sFlag := true ;
11266: LD_ADDR_EXP 55
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// if p3 = 15 then
11274: LD_VAR 0 3
11278: PUSH
11279: LD_INT 15
11281: EQUAL
11282: IFFALSE 11292
// sKamikadze := true ;
11284: LD_ADDR_EXP 63
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// if p3 = 16 then
11292: LD_VAR 0 3
11296: PUSH
11297: LD_INT 16
11299: EQUAL
11300: IFFALSE 11310
// sTroll := true ;
11302: LD_ADDR_EXP 64
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// if p3 = 17 then
11310: LD_VAR 0 3
11314: PUSH
11315: LD_INT 17
11317: EQUAL
11318: IFFALSE 11328
// sSlow := true ;
11320: LD_ADDR_EXP 65
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// if p3 = 18 then
11328: LD_VAR 0 3
11332: PUSH
11333: LD_INT 18
11335: EQUAL
11336: IFFALSE 11346
// sLack := true ;
11338: LD_ADDR_EXP 66
11342: PUSH
11343: LD_INT 1
11345: ST_TO_ADDR
// if p3 = 19 then
11346: LD_VAR 0 3
11350: PUSH
11351: LD_INT 19
11353: EQUAL
11354: IFFALSE 11364
// sTank := true ;
11356: LD_ADDR_EXP 68
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// if p3 = 20 then
11364: LD_VAR 0 3
11368: PUSH
11369: LD_INT 20
11371: EQUAL
11372: IFFALSE 11382
// sRemote := true ;
11374: LD_ADDR_EXP 69
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// if p3 = 21 then
11382: LD_VAR 0 3
11386: PUSH
11387: LD_INT 21
11389: EQUAL
11390: IFFALSE 11400
// sPowell := true ;
11392: LD_ADDR_EXP 70
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// if p3 = 22 then
11400: LD_VAR 0 3
11404: PUSH
11405: LD_INT 22
11407: EQUAL
11408: IFFALSE 11418
// sTeleport := true ;
11410: LD_ADDR_EXP 73
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// if p3 = 23 then
11418: LD_VAR 0 3
11422: PUSH
11423: LD_INT 23
11425: EQUAL
11426: IFFALSE 11436
// sOilTower := true ;
11428: LD_ADDR_EXP 75
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// if p3 = 24 then
11436: LD_VAR 0 3
11440: PUSH
11441: LD_INT 24
11443: EQUAL
11444: IFFALSE 11454
// sShovel := true ;
11446: LD_ADDR_EXP 76
11450: PUSH
11451: LD_INT 1
11453: ST_TO_ADDR
// if p3 = 25 then
11454: LD_VAR 0 3
11458: PUSH
11459: LD_INT 25
11461: EQUAL
11462: IFFALSE 11472
// sSheik := true ;
11464: LD_ADDR_EXP 77
11468: PUSH
11469: LD_INT 1
11471: ST_TO_ADDR
// if p3 = 26 then
11472: LD_VAR 0 3
11476: PUSH
11477: LD_INT 26
11479: EQUAL
11480: IFFALSE 11490
// sEarthquake := true ;
11482: LD_ADDR_EXP 79
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
// if p3 = 27 then
11490: LD_VAR 0 3
11494: PUSH
11495: LD_INT 27
11497: EQUAL
11498: IFFALSE 11508
// sAI := true ;
11500: LD_ADDR_EXP 80
11504: PUSH
11505: LD_INT 1
11507: ST_TO_ADDR
// if p3 = 28 then
11508: LD_VAR 0 3
11512: PUSH
11513: LD_INT 28
11515: EQUAL
11516: IFFALSE 11526
// sCargo := true ;
11518: LD_ADDR_EXP 83
11522: PUSH
11523: LD_INT 1
11525: ST_TO_ADDR
// if p3 = 29 then
11526: LD_VAR 0 3
11530: PUSH
11531: LD_INT 29
11533: EQUAL
11534: IFFALSE 11544
// sDLaser := true ;
11536: LD_ADDR_EXP 84
11540: PUSH
11541: LD_INT 1
11543: ST_TO_ADDR
// if p3 = 30 then
11544: LD_VAR 0 3
11548: PUSH
11549: LD_INT 30
11551: EQUAL
11552: IFFALSE 11562
// sExchange := true ;
11554: LD_ADDR_EXP 85
11558: PUSH
11559: LD_INT 1
11561: ST_TO_ADDR
// if p3 = 31 then
11562: LD_VAR 0 3
11566: PUSH
11567: LD_INT 31
11569: EQUAL
11570: IFFALSE 11580
// sFac := true ;
11572: LD_ADDR_EXP 86
11576: PUSH
11577: LD_INT 1
11579: ST_TO_ADDR
// if p3 = 32 then
11580: LD_VAR 0 3
11584: PUSH
11585: LD_INT 32
11587: EQUAL
11588: IFFALSE 11598
// sPower := true ;
11590: LD_ADDR_EXP 87
11594: PUSH
11595: LD_INT 1
11597: ST_TO_ADDR
// if p3 = 33 then
11598: LD_VAR 0 3
11602: PUSH
11603: LD_INT 33
11605: EQUAL
11606: IFFALSE 11616
// sRandom := true ;
11608: LD_ADDR_EXP 88
11612: PUSH
11613: LD_INT 1
11615: ST_TO_ADDR
// if p3 = 34 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 34
11623: EQUAL
11624: IFFALSE 11634
// sShield := true ;
11626: LD_ADDR_EXP 89
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 35 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 35
11641: EQUAL
11642: IFFALSE 11652
// sTime := true ;
11644: LD_ADDR_EXP 90
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 36 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 36
11659: EQUAL
11660: IFFALSE 11670
// sTools := true ;
11662: LD_ADDR_EXP 91
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 101 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 101
11677: EQUAL
11678: IFFALSE 11688
// sSold := true ;
11680: LD_ADDR_EXP 56
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 102 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 102
11695: EQUAL
11696: IFFALSE 11706
// sDiff := true ;
11698: LD_ADDR_EXP 57
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 103 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 103
11713: EQUAL
11714: IFFALSE 11724
// sFog := true ;
11716: LD_ADDR_EXP 60
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 104 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 104
11731: EQUAL
11732: IFFALSE 11742
// sReset := true ;
11734: LD_ADDR_EXP 61
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 105 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 105
11749: EQUAL
11750: IFFALSE 11760
// sSun := true ;
11752: LD_ADDR_EXP 62
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 106 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 106
11767: EQUAL
11768: IFFALSE 11778
// sTiger := true ;
11770: LD_ADDR_EXP 58
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 107 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 107
11785: EQUAL
11786: IFFALSE 11796
// sBomb := true ;
11788: LD_ADDR_EXP 59
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 108 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 108
11803: EQUAL
11804: IFFALSE 11814
// sWound := true ;
11806: LD_ADDR_EXP 67
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 109 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 109
11821: EQUAL
11822: IFFALSE 11832
// sBetray := true ;
11824: LD_ADDR_EXP 71
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 110 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 110
11839: EQUAL
11840: IFFALSE 11850
// sContamin := true ;
11842: LD_ADDR_EXP 72
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 111 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 111
11857: EQUAL
11858: IFFALSE 11868
// sOil := true ;
11860: LD_ADDR_EXP 74
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 112 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 112
11875: EQUAL
11876: IFFALSE 11886
// sStu := true ;
11878: LD_ADDR_EXP 78
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 113 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 113
11893: EQUAL
11894: IFFALSE 11904
// sBazooka := true ;
11896: LD_ADDR_EXP 81
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 114 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 114
11911: EQUAL
11912: IFFALSE 11922
// sMortar := true ;
11914: LD_ADDR_EXP 82
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 115 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 115
11929: EQUAL
11930: IFFALSE 11940
// sRanger := true ;
11932: LD_ADDR_EXP 92
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 116 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 116
11947: EQUAL
11948: IFFALSE 11958
// sComputer := true ;
11950: LD_ADDR_EXP 93
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 117 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 117
11965: EQUAL
11966: IFFALSE 11976
// s30 := true ;
11968: LD_ADDR_EXP 94
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 118 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 118
11983: EQUAL
11984: IFFALSE 11994
// s60 := true ;
11986: LD_ADDR_EXP 95
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// end ; if p2 = 101 then
11994: LD_VAR 0 2
11998: PUSH
11999: LD_INT 101
12001: EQUAL
12002: IFFALSE 12130
// begin case p3 of 1 :
12004: LD_VAR 0 3
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// hHackUnlimitedResources ; 2 :
12018: CALL 24228 0 0
12022: GO 12130
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12039
12032: POP
// hHackSetLevel10 ; 3 :
12033: CALL 24361 0 0
12037: GO 12130
12039: LD_INT 3
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12054
12047: POP
// hHackSetLevel10YourUnits ; 4 :
12048: CALL 24446 0 0
12052: GO 12130
12054: LD_INT 4
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12069
12062: POP
// hHackInvincible ; 5 :
12063: CALL 24894 0 0
12067: GO 12130
12069: LD_INT 5
12071: DOUBLE
12072: EQUAL
12073: IFTRUE 12077
12075: GO 12084
12077: POP
// hHackInvisible ; 6 :
12078: CALL 25005 0 0
12082: GO 12130
12084: LD_INT 6
12086: DOUBLE
12087: EQUAL
12088: IFTRUE 12092
12090: GO 12099
12092: POP
// hHackChangeYourSide ; 7 :
12093: CALL 25062 0 0
12097: GO 12130
12099: LD_INT 7
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12114
12107: POP
// hHackChangeUnitSide ; 8 :
12108: CALL 25104 0 0
12112: GO 12130
12114: LD_INT 8
12116: DOUBLE
12117: EQUAL
12118: IFTRUE 12122
12120: GO 12129
12122: POP
// hHackFog ; end ;
12123: CALL 25205 0 0
12127: GO 12130
12129: POP
// end ; end ;
12130: LD_VAR 0 7
12134: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12135: GO 12137
12137: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12138: LD_STRING initStreamRollete();
12140: PPUSH
12141: CALL_OW 559
// InitStreamMode ;
12145: CALL 12157 0 0
// DefineStreamItems ( false ) ;
12149: LD_INT 0
12151: PPUSH
12152: CALL 12621 0 1
// end ;
12156: END
// function InitStreamMode ; begin
12157: LD_INT 0
12159: PPUSH
// streamModeActive := false ;
12160: LD_ADDR_EXP 39
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// normalCounter := 36 ;
12168: LD_ADDR_EXP 40
12172: PUSH
12173: LD_INT 36
12175: ST_TO_ADDR
// hardcoreCounter := 18 ;
12176: LD_ADDR_EXP 41
12180: PUSH
12181: LD_INT 18
12183: ST_TO_ADDR
// sRocket := false ;
12184: LD_ADDR_EXP 44
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// sSpeed := false ;
12192: LD_ADDR_EXP 43
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// sEngine := false ;
12200: LD_ADDR_EXP 45
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// sSpec := false ;
12208: LD_ADDR_EXP 42
12212: PUSH
12213: LD_INT 0
12215: ST_TO_ADDR
// sLevel := false ;
12216: LD_ADDR_EXP 46
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// sArmoury := false ;
12224: LD_ADDR_EXP 47
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// sRadar := false ;
12232: LD_ADDR_EXP 48
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// sBunker := false ;
12240: LD_ADDR_EXP 49
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// sHack := false ;
12248: LD_ADDR_EXP 50
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// sFire := false ;
12256: LD_ADDR_EXP 51
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sRefresh := false ;
12264: LD_ADDR_EXP 52
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sExp := false ;
12272: LD_ADDR_EXP 53
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sDepot := false ;
12280: LD_ADDR_EXP 54
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sFlag := false ;
12288: LD_ADDR_EXP 55
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sKamikadze := false ;
12296: LD_ADDR_EXP 63
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sTroll := false ;
12304: LD_ADDR_EXP 64
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sSlow := false ;
12312: LD_ADDR_EXP 65
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sLack := false ;
12320: LD_ADDR_EXP 66
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sTank := false ;
12328: LD_ADDR_EXP 68
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sRemote := false ;
12336: LD_ADDR_EXP 69
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sPowell := false ;
12344: LD_ADDR_EXP 70
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sTeleport := false ;
12352: LD_ADDR_EXP 73
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sOilTower := false ;
12360: LD_ADDR_EXP 75
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sShovel := false ;
12368: LD_ADDR_EXP 76
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sSheik := false ;
12376: LD_ADDR_EXP 77
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sEarthquake := false ;
12384: LD_ADDR_EXP 79
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sAI := false ;
12392: LD_ADDR_EXP 80
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sCargo := false ;
12400: LD_ADDR_EXP 83
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sDLaser := false ;
12408: LD_ADDR_EXP 84
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sExchange := false ;
12416: LD_ADDR_EXP 85
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sFac := false ;
12424: LD_ADDR_EXP 86
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sPower := false ;
12432: LD_ADDR_EXP 87
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sRandom := false ;
12440: LD_ADDR_EXP 88
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sShield := false ;
12448: LD_ADDR_EXP 89
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sTime := false ;
12456: LD_ADDR_EXP 90
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sTools := false ;
12464: LD_ADDR_EXP 91
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sSold := false ;
12472: LD_ADDR_EXP 56
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sDiff := false ;
12480: LD_ADDR_EXP 57
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sFog := false ;
12488: LD_ADDR_EXP 60
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sReset := false ;
12496: LD_ADDR_EXP 61
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sSun := false ;
12504: LD_ADDR_EXP 62
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sTiger := false ;
12512: LD_ADDR_EXP 58
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sBomb := false ;
12520: LD_ADDR_EXP 59
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sWound := false ;
12528: LD_ADDR_EXP 67
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sBetray := false ;
12536: LD_ADDR_EXP 71
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sContamin := false ;
12544: LD_ADDR_EXP 72
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sOil := false ;
12552: LD_ADDR_EXP 74
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sStu := false ;
12560: LD_ADDR_EXP 78
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sBazooka := false ;
12568: LD_ADDR_EXP 81
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sMortar := false ;
12576: LD_ADDR_EXP 82
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sRanger := false ;
12584: LD_ADDR_EXP 92
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sComputer := false ;
12592: LD_ADDR_EXP 93
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// s30 := false ;
12600: LD_ADDR_EXP 94
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// s60 := false ;
12608: LD_ADDR_EXP 95
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// end ;
12616: LD_VAR 0 1
12620: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12621: LD_INT 0
12623: PPUSH
12624: PPUSH
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
// result := [ ] ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: EMPTY
12636: ST_TO_ADDR
// if campaign_id = 1 then
12637: LD_OWVAR 69
12641: PUSH
12642: LD_INT 1
12644: EQUAL
12645: IFFALSE 15811
// begin case mission_number of 1 :
12647: LD_OWVAR 70
12651: PUSH
12652: LD_INT 1
12654: DOUBLE
12655: EQUAL
12656: IFTRUE 12660
12658: GO 12736
12660: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 4
12671: PUSH
12672: LD_INT 11
12674: PUSH
12675: LD_INT 12
12677: PUSH
12678: LD_INT 15
12680: PUSH
12681: LD_INT 16
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 23
12689: PUSH
12690: LD_INT 26
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 101
12706: PUSH
12707: LD_INT 102
12709: PUSH
12710: LD_INT 106
12712: PUSH
12713: LD_INT 116
12715: PUSH
12716: LD_INT 117
12718: PUSH
12719: LD_INT 118
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 15809
12736: LD_INT 2
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12828
12744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12745: LD_ADDR_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 11
12758: PUSH
12759: LD_INT 12
12761: PUSH
12762: LD_INT 15
12764: PUSH
12765: LD_INT 16
12767: PUSH
12768: LD_INT 22
12770: PUSH
12771: LD_INT 23
12773: PUSH
12774: LD_INT 26
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 101
12790: PUSH
12791: LD_INT 102
12793: PUSH
12794: LD_INT 105
12796: PUSH
12797: LD_INT 106
12799: PUSH
12800: LD_INT 108
12802: PUSH
12803: LD_INT 116
12805: PUSH
12806: LD_INT 117
12808: PUSH
12809: LD_INT 118
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: ST_TO_ADDR
12826: GO 15809
12828: LD_INT 3
12830: DOUBLE
12831: EQUAL
12832: IFTRUE 12836
12834: GO 12924
12836: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12837: LD_ADDR_VAR 0 2
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: LD_INT 5
12850: PUSH
12851: LD_INT 11
12853: PUSH
12854: LD_INT 12
12856: PUSH
12857: LD_INT 15
12859: PUSH
12860: LD_INT 16
12862: PUSH
12863: LD_INT 22
12865: PUSH
12866: LD_INT 26
12868: PUSH
12869: LD_INT 36
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 101
12886: PUSH
12887: LD_INT 102
12889: PUSH
12890: LD_INT 105
12892: PUSH
12893: LD_INT 106
12895: PUSH
12896: LD_INT 108
12898: PUSH
12899: LD_INT 116
12901: PUSH
12902: LD_INT 117
12904: PUSH
12905: LD_INT 118
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: ST_TO_ADDR
12922: GO 15809
12924: LD_INT 4
12926: DOUBLE
12927: EQUAL
12928: IFTRUE 12932
12930: GO 13028
12932: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12933: LD_ADDR_VAR 0 2
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: LD_INT 4
12943: PUSH
12944: LD_INT 5
12946: PUSH
12947: LD_INT 8
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 15
12958: PUSH
12959: LD_INT 16
12961: PUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 23
12967: PUSH
12968: LD_INT 26
12970: PUSH
12971: LD_INT 36
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 101
12990: PUSH
12991: LD_INT 102
12993: PUSH
12994: LD_INT 105
12996: PUSH
12997: LD_INT 106
12999: PUSH
13000: LD_INT 108
13002: PUSH
13003: LD_INT 116
13005: PUSH
13006: LD_INT 117
13008: PUSH
13009: LD_INT 118
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: ST_TO_ADDR
13026: GO 15809
13028: LD_INT 5
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13148
13036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13037: LD_ADDR_VAR 0 2
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: LD_INT 5
13050: PUSH
13051: LD_INT 6
13053: PUSH
13054: LD_INT 8
13056: PUSH
13057: LD_INT 11
13059: PUSH
13060: LD_INT 12
13062: PUSH
13063: LD_INT 15
13065: PUSH
13066: LD_INT 16
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_INT 23
13074: PUSH
13075: LD_INT 25
13077: PUSH
13078: LD_INT 26
13080: PUSH
13081: LD_INT 36
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 101
13102: PUSH
13103: LD_INT 102
13105: PUSH
13106: LD_INT 105
13108: PUSH
13109: LD_INT 106
13111: PUSH
13112: LD_INT 108
13114: PUSH
13115: LD_INT 109
13117: PUSH
13118: LD_INT 112
13120: PUSH
13121: LD_INT 116
13123: PUSH
13124: LD_INT 117
13126: PUSH
13127: LD_INT 118
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: ST_TO_ADDR
13146: GO 15809
13148: LD_INT 6
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13288
13156: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: LD_INT 4
13167: PUSH
13168: LD_INT 5
13170: PUSH
13171: LD_INT 6
13173: PUSH
13174: LD_INT 8
13176: PUSH
13177: LD_INT 11
13179: PUSH
13180: LD_INT 12
13182: PUSH
13183: LD_INT 15
13185: PUSH
13186: LD_INT 16
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_INT 23
13200: PUSH
13201: LD_INT 25
13203: PUSH
13204: LD_INT 26
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: LD_INT 32
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 101
13242: PUSH
13243: LD_INT 102
13245: PUSH
13246: LD_INT 105
13248: PUSH
13249: LD_INT 106
13251: PUSH
13252: LD_INT 108
13254: PUSH
13255: LD_INT 109
13257: PUSH
13258: LD_INT 112
13260: PUSH
13261: LD_INT 116
13263: PUSH
13264: LD_INT 117
13266: PUSH
13267: LD_INT 118
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: ST_TO_ADDR
13286: GO 15809
13288: LD_INT 7
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13408
13296: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13297: LD_ADDR_VAR 0 2
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 5
13310: PUSH
13311: LD_INT 7
13313: PUSH
13314: LD_INT 11
13316: PUSH
13317: LD_INT 12
13319: PUSH
13320: LD_INT 15
13322: PUSH
13323: LD_INT 16
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 26
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 101
13362: PUSH
13363: LD_INT 102
13365: PUSH
13366: LD_INT 103
13368: PUSH
13369: LD_INT 105
13371: PUSH
13372: LD_INT 106
13374: PUSH
13375: LD_INT 108
13377: PUSH
13378: LD_INT 112
13380: PUSH
13381: LD_INT 116
13383: PUSH
13384: LD_INT 117
13386: PUSH
13387: LD_INT 118
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 15809
13408: LD_INT 8
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13556
13416: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13417: LD_ADDR_VAR 0 2
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: LD_INT 4
13427: PUSH
13428: LD_INT 5
13430: PUSH
13431: LD_INT 6
13433: PUSH
13434: LD_INT 7
13436: PUSH
13437: LD_INT 8
13439: PUSH
13440: LD_INT 11
13442: PUSH
13443: LD_INT 12
13445: PUSH
13446: LD_INT 15
13448: PUSH
13449: LD_INT 16
13451: PUSH
13452: LD_INT 20
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 22
13460: PUSH
13461: LD_INT 23
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 26
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 31
13475: PUSH
13476: LD_INT 32
13478: PUSH
13479: LD_INT 36
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 101
13506: PUSH
13507: LD_INT 102
13509: PUSH
13510: LD_INT 103
13512: PUSH
13513: LD_INT 105
13515: PUSH
13516: LD_INT 106
13518: PUSH
13519: LD_INT 108
13521: PUSH
13522: LD_INT 109
13524: PUSH
13525: LD_INT 112
13527: PUSH
13528: LD_INT 116
13530: PUSH
13531: LD_INT 117
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 15809
13556: LD_INT 9
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13712
13564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: LD_INT 5
13578: PUSH
13579: LD_INT 6
13581: PUSH
13582: LD_INT 7
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: LD_INT 11
13590: PUSH
13591: LD_INT 12
13593: PUSH
13594: LD_INT 15
13596: PUSH
13597: LD_INT 16
13599: PUSH
13600: LD_INT 20
13602: PUSH
13603: LD_INT 21
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_INT 23
13611: PUSH
13612: LD_INT 25
13614: PUSH
13615: LD_INT 26
13617: PUSH
13618: LD_INT 28
13620: PUSH
13621: LD_INT 30
13623: PUSH
13624: LD_INT 31
13626: PUSH
13627: LD_INT 32
13629: PUSH
13630: LD_INT 36
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 103
13664: PUSH
13665: LD_INT 105
13667: PUSH
13668: LD_INT 106
13670: PUSH
13671: LD_INT 108
13673: PUSH
13674: LD_INT 109
13676: PUSH
13677: LD_INT 112
13679: PUSH
13680: LD_INT 114
13682: PUSH
13683: LD_INT 116
13685: PUSH
13686: LD_INT 117
13688: PUSH
13689: LD_INT 118
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: ST_TO_ADDR
13710: GO 15809
13712: LD_INT 10
13714: DOUBLE
13715: EQUAL
13716: IFTRUE 13720
13718: GO 13916
13720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13721: LD_ADDR_VAR 0 2
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 4
13731: PUSH
13732: LD_INT 5
13734: PUSH
13735: LD_INT 6
13737: PUSH
13738: LD_INT 7
13740: PUSH
13741: LD_INT 8
13743: PUSH
13744: LD_INT 9
13746: PUSH
13747: LD_INT 10
13749: PUSH
13750: LD_INT 11
13752: PUSH
13753: LD_INT 12
13755: PUSH
13756: LD_INT 13
13758: PUSH
13759: LD_INT 14
13761: PUSH
13762: LD_INT 15
13764: PUSH
13765: LD_INT 16
13767: PUSH
13768: LD_INT 17
13770: PUSH
13771: LD_INT 18
13773: PUSH
13774: LD_INT 19
13776: PUSH
13777: LD_INT 20
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_INT 23
13788: PUSH
13789: LD_INT 24
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 26
13797: PUSH
13798: LD_INT 28
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 31
13806: PUSH
13807: LD_INT 32
13809: PUSH
13810: LD_INT 36
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 101
13846: PUSH
13847: LD_INT 102
13849: PUSH
13850: LD_INT 103
13852: PUSH
13853: LD_INT 104
13855: PUSH
13856: LD_INT 105
13858: PUSH
13859: LD_INT 106
13861: PUSH
13862: LD_INT 107
13864: PUSH
13865: LD_INT 108
13867: PUSH
13868: LD_INT 109
13870: PUSH
13871: LD_INT 110
13873: PUSH
13874: LD_INT 111
13876: PUSH
13877: LD_INT 112
13879: PUSH
13880: LD_INT 114
13882: PUSH
13883: LD_INT 116
13885: PUSH
13886: LD_INT 117
13888: PUSH
13889: LD_INT 118
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: ST_TO_ADDR
13914: GO 15809
13916: LD_INT 11
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 14128
13924: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13925: LD_ADDR_VAR 0 2
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 3
13935: PUSH
13936: LD_INT 4
13938: PUSH
13939: LD_INT 5
13941: PUSH
13942: LD_INT 6
13944: PUSH
13945: LD_INT 7
13947: PUSH
13948: LD_INT 8
13950: PUSH
13951: LD_INT 9
13953: PUSH
13954: LD_INT 10
13956: PUSH
13957: LD_INT 11
13959: PUSH
13960: LD_INT 12
13962: PUSH
13963: LD_INT 13
13965: PUSH
13966: LD_INT 14
13968: PUSH
13969: LD_INT 15
13971: PUSH
13972: LD_INT 16
13974: PUSH
13975: LD_INT 17
13977: PUSH
13978: LD_INT 18
13980: PUSH
13981: LD_INT 19
13983: PUSH
13984: LD_INT 20
13986: PUSH
13987: LD_INT 21
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_INT 23
13995: PUSH
13996: LD_INT 24
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 26
14004: PUSH
14005: LD_INT 28
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 31
14013: PUSH
14014: LD_INT 32
14016: PUSH
14017: LD_INT 34
14019: PUSH
14020: LD_INT 36
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 101
14058: PUSH
14059: LD_INT 102
14061: PUSH
14062: LD_INT 103
14064: PUSH
14065: LD_INT 104
14067: PUSH
14068: LD_INT 105
14070: PUSH
14071: LD_INT 106
14073: PUSH
14074: LD_INT 107
14076: PUSH
14077: LD_INT 108
14079: PUSH
14080: LD_INT 109
14082: PUSH
14083: LD_INT 110
14085: PUSH
14086: LD_INT 111
14088: PUSH
14089: LD_INT 112
14091: PUSH
14092: LD_INT 114
14094: PUSH
14095: LD_INT 116
14097: PUSH
14098: LD_INT 117
14100: PUSH
14101: LD_INT 118
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
14126: GO 15809
14128: LD_INT 12
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14356
14136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 6
14159: PUSH
14160: LD_INT 7
14162: PUSH
14163: LD_INT 8
14165: PUSH
14166: LD_INT 9
14168: PUSH
14169: LD_INT 10
14171: PUSH
14172: LD_INT 11
14174: PUSH
14175: LD_INT 12
14177: PUSH
14178: LD_INT 13
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: LD_INT 15
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: LD_INT 17
14192: PUSH
14193: LD_INT 18
14195: PUSH
14196: LD_INT 19
14198: PUSH
14199: LD_INT 20
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 24
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 26
14219: PUSH
14220: LD_INT 27
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 31
14231: PUSH
14232: LD_INT 32
14234: PUSH
14235: LD_INT 33
14237: PUSH
14238: LD_INT 34
14240: PUSH
14241: LD_INT 36
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 101
14282: PUSH
14283: LD_INT 102
14285: PUSH
14286: LD_INT 103
14288: PUSH
14289: LD_INT 104
14291: PUSH
14292: LD_INT 105
14294: PUSH
14295: LD_INT 106
14297: PUSH
14298: LD_INT 107
14300: PUSH
14301: LD_INT 108
14303: PUSH
14304: LD_INT 109
14306: PUSH
14307: LD_INT 110
14309: PUSH
14310: LD_INT 111
14312: PUSH
14313: LD_INT 112
14315: PUSH
14316: LD_INT 113
14318: PUSH
14319: LD_INT 114
14321: PUSH
14322: LD_INT 116
14324: PUSH
14325: LD_INT 117
14327: PUSH
14328: LD_INT 118
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: ST_TO_ADDR
14354: GO 15809
14356: LD_INT 13
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14572
14364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: LD_INT 3
14378: PUSH
14379: LD_INT 4
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: LD_INT 8
14387: PUSH
14388: LD_INT 9
14390: PUSH
14391: LD_INT 10
14393: PUSH
14394: LD_INT 11
14396: PUSH
14397: LD_INT 12
14399: PUSH
14400: LD_INT 14
14402: PUSH
14403: LD_INT 15
14405: PUSH
14406: LD_INT 16
14408: PUSH
14409: LD_INT 17
14411: PUSH
14412: LD_INT 18
14414: PUSH
14415: LD_INT 19
14417: PUSH
14418: LD_INT 20
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: LD_INT 22
14426: PUSH
14427: LD_INT 23
14429: PUSH
14430: LD_INT 24
14432: PUSH
14433: LD_INT 25
14435: PUSH
14436: LD_INT 26
14438: PUSH
14439: LD_INT 27
14441: PUSH
14442: LD_INT 28
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 31
14450: PUSH
14451: LD_INT 32
14453: PUSH
14454: LD_INT 33
14456: PUSH
14457: LD_INT 34
14459: PUSH
14460: LD_INT 36
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 101
14498: PUSH
14499: LD_INT 102
14501: PUSH
14502: LD_INT 103
14504: PUSH
14505: LD_INT 104
14507: PUSH
14508: LD_INT 105
14510: PUSH
14511: LD_INT 106
14513: PUSH
14514: LD_INT 107
14516: PUSH
14517: LD_INT 108
14519: PUSH
14520: LD_INT 109
14522: PUSH
14523: LD_INT 110
14525: PUSH
14526: LD_INT 111
14528: PUSH
14529: LD_INT 112
14531: PUSH
14532: LD_INT 113
14534: PUSH
14535: LD_INT 114
14537: PUSH
14538: LD_INT 116
14540: PUSH
14541: LD_INT 117
14543: PUSH
14544: LD_INT 118
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: ST_TO_ADDR
14570: GO 15809
14572: LD_INT 14
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14580
14578: GO 14804
14580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_INT 1
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: LD_INT 3
14594: PUSH
14595: LD_INT 4
14597: PUSH
14598: LD_INT 5
14600: PUSH
14601: LD_INT 6
14603: PUSH
14604: LD_INT 7
14606: PUSH
14607: LD_INT 8
14609: PUSH
14610: LD_INT 9
14612: PUSH
14613: LD_INT 10
14615: PUSH
14616: LD_INT 11
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 13
14624: PUSH
14625: LD_INT 14
14627: PUSH
14628: LD_INT 15
14630: PUSH
14631: LD_INT 16
14633: PUSH
14634: LD_INT 17
14636: PUSH
14637: LD_INT 18
14639: PUSH
14640: LD_INT 19
14642: PUSH
14643: LD_INT 20
14645: PUSH
14646: LD_INT 21
14648: PUSH
14649: LD_INT 22
14651: PUSH
14652: LD_INT 23
14654: PUSH
14655: LD_INT 24
14657: PUSH
14658: LD_INT 25
14660: PUSH
14661: LD_INT 26
14663: PUSH
14664: LD_INT 27
14666: PUSH
14667: LD_INT 28
14669: PUSH
14670: LD_INT 29
14672: PUSH
14673: LD_INT 30
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 32
14681: PUSH
14682: LD_INT 33
14684: PUSH
14685: LD_INT 34
14687: PUSH
14688: LD_INT 36
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 101
14730: PUSH
14731: LD_INT 102
14733: PUSH
14734: LD_INT 103
14736: PUSH
14737: LD_INT 104
14739: PUSH
14740: LD_INT 105
14742: PUSH
14743: LD_INT 106
14745: PUSH
14746: LD_INT 107
14748: PUSH
14749: LD_INT 108
14751: PUSH
14752: LD_INT 109
14754: PUSH
14755: LD_INT 110
14757: PUSH
14758: LD_INT 111
14760: PUSH
14761: LD_INT 112
14763: PUSH
14764: LD_INT 113
14766: PUSH
14767: LD_INT 114
14769: PUSH
14770: LD_INT 116
14772: PUSH
14773: LD_INT 117
14775: PUSH
14776: LD_INT 118
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: ST_TO_ADDR
14802: GO 15809
14804: LD_INT 15
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 15036
14812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: LD_INT 2
14823: PUSH
14824: LD_INT 3
14826: PUSH
14827: LD_INT 4
14829: PUSH
14830: LD_INT 5
14832: PUSH
14833: LD_INT 6
14835: PUSH
14836: LD_INT 7
14838: PUSH
14839: LD_INT 8
14841: PUSH
14842: LD_INT 9
14844: PUSH
14845: LD_INT 10
14847: PUSH
14848: LD_INT 11
14850: PUSH
14851: LD_INT 12
14853: PUSH
14854: LD_INT 13
14856: PUSH
14857: LD_INT 14
14859: PUSH
14860: LD_INT 15
14862: PUSH
14863: LD_INT 16
14865: PUSH
14866: LD_INT 17
14868: PUSH
14869: LD_INT 18
14871: PUSH
14872: LD_INT 19
14874: PUSH
14875: LD_INT 20
14877: PUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_INT 23
14886: PUSH
14887: LD_INT 24
14889: PUSH
14890: LD_INT 25
14892: PUSH
14893: LD_INT 26
14895: PUSH
14896: LD_INT 27
14898: PUSH
14899: LD_INT 28
14901: PUSH
14902: LD_INT 29
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 31
14910: PUSH
14911: LD_INT 32
14913: PUSH
14914: LD_INT 33
14916: PUSH
14917: LD_INT 34
14919: PUSH
14920: LD_INT 36
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 101
14962: PUSH
14963: LD_INT 102
14965: PUSH
14966: LD_INT 103
14968: PUSH
14969: LD_INT 104
14971: PUSH
14972: LD_INT 105
14974: PUSH
14975: LD_INT 106
14977: PUSH
14978: LD_INT 107
14980: PUSH
14981: LD_INT 108
14983: PUSH
14984: LD_INT 109
14986: PUSH
14987: LD_INT 110
14989: PUSH
14990: LD_INT 111
14992: PUSH
14993: LD_INT 112
14995: PUSH
14996: LD_INT 113
14998: PUSH
14999: LD_INT 114
15001: PUSH
15002: LD_INT 116
15004: PUSH
15005: LD_INT 117
15007: PUSH
15008: LD_INT 118
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: ST_TO_ADDR
15034: GO 15809
15036: LD_INT 16
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15180
15044: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_INT 2
15052: PUSH
15053: LD_INT 4
15055: PUSH
15056: LD_INT 5
15058: PUSH
15059: LD_INT 7
15061: PUSH
15062: LD_INT 11
15064: PUSH
15065: LD_INT 12
15067: PUSH
15068: LD_INT 15
15070: PUSH
15071: LD_INT 16
15073: PUSH
15074: LD_INT 20
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 22
15082: PUSH
15083: LD_INT 23
15085: PUSH
15086: LD_INT 25
15088: PUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 30
15094: PUSH
15095: LD_INT 31
15097: PUSH
15098: LD_INT 32
15100: PUSH
15101: LD_INT 33
15103: PUSH
15104: LD_INT 34
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 101
15130: PUSH
15131: LD_INT 102
15133: PUSH
15134: LD_INT 103
15136: PUSH
15137: LD_INT 106
15139: PUSH
15140: LD_INT 108
15142: PUSH
15143: LD_INT 112
15145: PUSH
15146: LD_INT 113
15148: PUSH
15149: LD_INT 114
15151: PUSH
15152: LD_INT 116
15154: PUSH
15155: LD_INT 117
15157: PUSH
15158: LD_INT 118
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: ST_TO_ADDR
15178: GO 15809
15180: LD_INT 17
15182: DOUBLE
15183: EQUAL
15184: IFTRUE 15188
15186: GO 15412
15188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: LD_INT 2
15199: PUSH
15200: LD_INT 3
15202: PUSH
15203: LD_INT 4
15205: PUSH
15206: LD_INT 5
15208: PUSH
15209: LD_INT 6
15211: PUSH
15212: LD_INT 7
15214: PUSH
15215: LD_INT 8
15217: PUSH
15218: LD_INT 9
15220: PUSH
15221: LD_INT 10
15223: PUSH
15224: LD_INT 11
15226: PUSH
15227: LD_INT 12
15229: PUSH
15230: LD_INT 13
15232: PUSH
15233: LD_INT 14
15235: PUSH
15236: LD_INT 15
15238: PUSH
15239: LD_INT 16
15241: PUSH
15242: LD_INT 17
15244: PUSH
15245: LD_INT 18
15247: PUSH
15248: LD_INT 19
15250: PUSH
15251: LD_INT 20
15253: PUSH
15254: LD_INT 21
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_INT 23
15262: PUSH
15263: LD_INT 24
15265: PUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 26
15271: PUSH
15272: LD_INT 27
15274: PUSH
15275: LD_INT 28
15277: PUSH
15278: LD_INT 29
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 31
15286: PUSH
15287: LD_INT 32
15289: PUSH
15290: LD_INT 33
15292: PUSH
15293: LD_INT 34
15295: PUSH
15296: LD_INT 36
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 101
15338: PUSH
15339: LD_INT 102
15341: PUSH
15342: LD_INT 103
15344: PUSH
15345: LD_INT 104
15347: PUSH
15348: LD_INT 105
15350: PUSH
15351: LD_INT 106
15353: PUSH
15354: LD_INT 107
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 109
15362: PUSH
15363: LD_INT 110
15365: PUSH
15366: LD_INT 111
15368: PUSH
15369: LD_INT 112
15371: PUSH
15372: LD_INT 113
15374: PUSH
15375: LD_INT 114
15377: PUSH
15378: LD_INT 116
15380: PUSH
15381: LD_INT 117
15383: PUSH
15384: LD_INT 118
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: ST_TO_ADDR
15410: GO 15809
15412: LD_INT 18
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15568
15420: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 4
15431: PUSH
15432: LD_INT 5
15434: PUSH
15435: LD_INT 7
15437: PUSH
15438: LD_INT 11
15440: PUSH
15441: LD_INT 12
15443: PUSH
15444: LD_INT 15
15446: PUSH
15447: LD_INT 16
15449: PUSH
15450: LD_INT 20
15452: PUSH
15453: LD_INT 21
15455: PUSH
15456: LD_INT 22
15458: PUSH
15459: LD_INT 23
15461: PUSH
15462: LD_INT 25
15464: PUSH
15465: LD_INT 26
15467: PUSH
15468: LD_INT 30
15470: PUSH
15471: LD_INT 31
15473: PUSH
15474: LD_INT 32
15476: PUSH
15477: LD_INT 33
15479: PUSH
15480: LD_INT 34
15482: PUSH
15483: LD_INT 35
15485: PUSH
15486: LD_INT 36
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 101
15514: PUSH
15515: LD_INT 102
15517: PUSH
15518: LD_INT 103
15520: PUSH
15521: LD_INT 106
15523: PUSH
15524: LD_INT 108
15526: PUSH
15527: LD_INT 112
15529: PUSH
15530: LD_INT 113
15532: PUSH
15533: LD_INT 114
15535: PUSH
15536: LD_INT 115
15538: PUSH
15539: LD_INT 116
15541: PUSH
15542: LD_INT 117
15544: PUSH
15545: LD_INT 118
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: ST_TO_ADDR
15566: GO 15809
15568: LD_INT 19
15570: DOUBLE
15571: EQUAL
15572: IFTRUE 15576
15574: GO 15808
15576: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15577: LD_ADDR_VAR 0 2
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: LD_INT 2
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: LD_INT 4
15593: PUSH
15594: LD_INT 5
15596: PUSH
15597: LD_INT 6
15599: PUSH
15600: LD_INT 7
15602: PUSH
15603: LD_INT 8
15605: PUSH
15606: LD_INT 9
15608: PUSH
15609: LD_INT 10
15611: PUSH
15612: LD_INT 11
15614: PUSH
15615: LD_INT 12
15617: PUSH
15618: LD_INT 13
15620: PUSH
15621: LD_INT 14
15623: PUSH
15624: LD_INT 15
15626: PUSH
15627: LD_INT 16
15629: PUSH
15630: LD_INT 17
15632: PUSH
15633: LD_INT 18
15635: PUSH
15636: LD_INT 19
15638: PUSH
15639: LD_INT 20
15641: PUSH
15642: LD_INT 21
15644: PUSH
15645: LD_INT 22
15647: PUSH
15648: LD_INT 23
15650: PUSH
15651: LD_INT 24
15653: PUSH
15654: LD_INT 25
15656: PUSH
15657: LD_INT 26
15659: PUSH
15660: LD_INT 27
15662: PUSH
15663: LD_INT 28
15665: PUSH
15666: LD_INT 29
15668: PUSH
15669: LD_INT 30
15671: PUSH
15672: LD_INT 31
15674: PUSH
15675: LD_INT 32
15677: PUSH
15678: LD_INT 33
15680: PUSH
15681: LD_INT 34
15683: PUSH
15684: LD_INT 35
15686: PUSH
15687: LD_INT 36
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 101
15730: PUSH
15731: LD_INT 102
15733: PUSH
15734: LD_INT 103
15736: PUSH
15737: LD_INT 104
15739: PUSH
15740: LD_INT 105
15742: PUSH
15743: LD_INT 106
15745: PUSH
15746: LD_INT 107
15748: PUSH
15749: LD_INT 108
15751: PUSH
15752: LD_INT 109
15754: PUSH
15755: LD_INT 110
15757: PUSH
15758: LD_INT 111
15760: PUSH
15761: LD_INT 112
15763: PUSH
15764: LD_INT 113
15766: PUSH
15767: LD_INT 114
15769: PUSH
15770: LD_INT 115
15772: PUSH
15773: LD_INT 116
15775: PUSH
15776: LD_INT 117
15778: PUSH
15779: LD_INT 118
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: ST_TO_ADDR
15806: GO 15809
15808: POP
// end else
15809: GO 16040
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15811: LD_ADDR_VAR 0 2
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 4
15827: PUSH
15828: LD_INT 5
15830: PUSH
15831: LD_INT 6
15833: PUSH
15834: LD_INT 7
15836: PUSH
15837: LD_INT 8
15839: PUSH
15840: LD_INT 9
15842: PUSH
15843: LD_INT 10
15845: PUSH
15846: LD_INT 11
15848: PUSH
15849: LD_INT 12
15851: PUSH
15852: LD_INT 13
15854: PUSH
15855: LD_INT 14
15857: PUSH
15858: LD_INT 15
15860: PUSH
15861: LD_INT 16
15863: PUSH
15864: LD_INT 17
15866: PUSH
15867: LD_INT 18
15869: PUSH
15870: LD_INT 19
15872: PUSH
15873: LD_INT 20
15875: PUSH
15876: LD_INT 21
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_INT 23
15884: PUSH
15885: LD_INT 24
15887: PUSH
15888: LD_INT 25
15890: PUSH
15891: LD_INT 26
15893: PUSH
15894: LD_INT 27
15896: PUSH
15897: LD_INT 28
15899: PUSH
15900: LD_INT 29
15902: PUSH
15903: LD_INT 30
15905: PUSH
15906: LD_INT 31
15908: PUSH
15909: LD_INT 32
15911: PUSH
15912: LD_INT 33
15914: PUSH
15915: LD_INT 34
15917: PUSH
15918: LD_INT 35
15920: PUSH
15921: LD_INT 36
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 101
15964: PUSH
15965: LD_INT 102
15967: PUSH
15968: LD_INT 103
15970: PUSH
15971: LD_INT 104
15973: PUSH
15974: LD_INT 105
15976: PUSH
15977: LD_INT 106
15979: PUSH
15980: LD_INT 107
15982: PUSH
15983: LD_INT 108
15985: PUSH
15986: LD_INT 109
15988: PUSH
15989: LD_INT 110
15991: PUSH
15992: LD_INT 111
15994: PUSH
15995: LD_INT 112
15997: PUSH
15998: LD_INT 113
16000: PUSH
16001: LD_INT 114
16003: PUSH
16004: LD_INT 115
16006: PUSH
16007: LD_INT 116
16009: PUSH
16010: LD_INT 117
16012: PUSH
16013: LD_INT 118
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
// if result then
16040: LD_VAR 0 2
16044: IFFALSE 16830
// begin normal :=  ;
16046: LD_ADDR_VAR 0 5
16050: PUSH
16051: LD_STRING 
16053: ST_TO_ADDR
// hardcore :=  ;
16054: LD_ADDR_VAR 0 6
16058: PUSH
16059: LD_STRING 
16061: ST_TO_ADDR
// active :=  ;
16062: LD_ADDR_VAR 0 7
16066: PUSH
16067: LD_STRING 
16069: ST_TO_ADDR
// for i = 1 to normalCounter do
16070: LD_ADDR_VAR 0 8
16074: PUSH
16075: DOUBLE
16076: LD_INT 1
16078: DEC
16079: ST_TO_ADDR
16080: LD_EXP 40
16084: PUSH
16085: FOR_TO
16086: IFFALSE 16187
// begin tmp := 0 ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_STRING 0
16095: ST_TO_ADDR
// if result [ 1 ] then
16096: LD_VAR 0 2
16100: PUSH
16101: LD_INT 1
16103: ARRAY
16104: IFFALSE 16169
// if result [ 1 ] [ 1 ] = i then
16106: LD_VAR 0 2
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PUSH
16119: LD_VAR 0 8
16123: EQUAL
16124: IFFALSE 16169
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16126: LD_ADDR_VAR 0 2
16130: PUSH
16131: LD_VAR 0 2
16135: PPUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 2
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: LD_INT 1
16150: PPUSH
16151: CALL_OW 3
16155: PPUSH
16156: CALL_OW 1
16160: ST_TO_ADDR
// tmp := 1 ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_STRING 1
16168: ST_TO_ADDR
// end ; normal := normal & tmp ;
16169: LD_ADDR_VAR 0 5
16173: PUSH
16174: LD_VAR 0 5
16178: PUSH
16179: LD_VAR 0 3
16183: STR
16184: ST_TO_ADDR
// end ;
16185: GO 16085
16187: POP
16188: POP
// for i = 1 to hardcoreCounter do
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_EXP 41
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16310
// begin tmp := 0 ;
16207: LD_ADDR_VAR 0 3
16211: PUSH
16212: LD_STRING 0
16214: ST_TO_ADDR
// if result [ 2 ] then
16215: LD_VAR 0 2
16219: PUSH
16220: LD_INT 2
16222: ARRAY
16223: IFFALSE 16292
// if result [ 2 ] [ 1 ] = 100 + i then
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PUSH
16238: LD_INT 100
16240: PUSH
16241: LD_VAR 0 8
16245: PLUS
16246: EQUAL
16247: IFFALSE 16292
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16249: LD_ADDR_VAR 0 2
16253: PUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_VAR 0 2
16266: PUSH
16267: LD_INT 2
16269: ARRAY
16270: PPUSH
16271: LD_INT 1
16273: PPUSH
16274: CALL_OW 3
16278: PPUSH
16279: CALL_OW 1
16283: ST_TO_ADDR
// tmp := 1 ;
16284: LD_ADDR_VAR 0 3
16288: PUSH
16289: LD_STRING 1
16291: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16292: LD_ADDR_VAR 0 6
16296: PUSH
16297: LD_VAR 0 6
16301: PUSH
16302: LD_VAR 0 3
16306: STR
16307: ST_TO_ADDR
// end ;
16308: GO 16204
16310: POP
16311: POP
// if isGameLoad then
16312: LD_VAR 0 1
16316: IFFALSE 16791
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16318: LD_ADDR_VAR 0 4
16322: PUSH
16323: LD_EXP 44
16327: PUSH
16328: LD_EXP 43
16332: PUSH
16333: LD_EXP 45
16337: PUSH
16338: LD_EXP 42
16342: PUSH
16343: LD_EXP 46
16347: PUSH
16348: LD_EXP 47
16352: PUSH
16353: LD_EXP 48
16357: PUSH
16358: LD_EXP 49
16362: PUSH
16363: LD_EXP 50
16367: PUSH
16368: LD_EXP 51
16372: PUSH
16373: LD_EXP 52
16377: PUSH
16378: LD_EXP 53
16382: PUSH
16383: LD_EXP 54
16387: PUSH
16388: LD_EXP 55
16392: PUSH
16393: LD_EXP 63
16397: PUSH
16398: LD_EXP 64
16402: PUSH
16403: LD_EXP 65
16407: PUSH
16408: LD_EXP 66
16412: PUSH
16413: LD_EXP 68
16417: PUSH
16418: LD_EXP 69
16422: PUSH
16423: LD_EXP 70
16427: PUSH
16428: LD_EXP 73
16432: PUSH
16433: LD_EXP 75
16437: PUSH
16438: LD_EXP 76
16442: PUSH
16443: LD_EXP 77
16447: PUSH
16448: LD_EXP 79
16452: PUSH
16453: LD_EXP 80
16457: PUSH
16458: LD_EXP 83
16462: PUSH
16463: LD_EXP 84
16467: PUSH
16468: LD_EXP 85
16472: PUSH
16473: LD_EXP 86
16477: PUSH
16478: LD_EXP 87
16482: PUSH
16483: LD_EXP 88
16487: PUSH
16488: LD_EXP 89
16492: PUSH
16493: LD_EXP 90
16497: PUSH
16498: LD_EXP 91
16502: PUSH
16503: LD_EXP 56
16507: PUSH
16508: LD_EXP 57
16512: PUSH
16513: LD_EXP 60
16517: PUSH
16518: LD_EXP 61
16522: PUSH
16523: LD_EXP 62
16527: PUSH
16528: LD_EXP 58
16532: PUSH
16533: LD_EXP 59
16537: PUSH
16538: LD_EXP 67
16542: PUSH
16543: LD_EXP 71
16547: PUSH
16548: LD_EXP 72
16552: PUSH
16553: LD_EXP 74
16557: PUSH
16558: LD_EXP 78
16562: PUSH
16563: LD_EXP 81
16567: PUSH
16568: LD_EXP 82
16572: PUSH
16573: LD_EXP 92
16577: PUSH
16578: LD_EXP 93
16582: PUSH
16583: LD_EXP 94
16587: PUSH
16588: LD_EXP 95
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: ST_TO_ADDR
// tmp :=  ;
16649: LD_ADDR_VAR 0 3
16653: PUSH
16654: LD_STRING 
16656: ST_TO_ADDR
// for i = 1 to normalCounter do
16657: LD_ADDR_VAR 0 8
16661: PUSH
16662: DOUBLE
16663: LD_INT 1
16665: DEC
16666: ST_TO_ADDR
16667: LD_EXP 40
16671: PUSH
16672: FOR_TO
16673: IFFALSE 16709
// begin if flags [ i ] then
16675: LD_VAR 0 4
16679: PUSH
16680: LD_VAR 0 8
16684: ARRAY
16685: IFFALSE 16707
// tmp := tmp & i & ; ;
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_VAR 0 3
16696: PUSH
16697: LD_VAR 0 8
16701: STR
16702: PUSH
16703: LD_STRING ;
16705: STR
16706: ST_TO_ADDR
// end ;
16707: GO 16672
16709: POP
16710: POP
// for i = 1 to hardcoreCounter do
16711: LD_ADDR_VAR 0 8
16715: PUSH
16716: DOUBLE
16717: LD_INT 1
16719: DEC
16720: ST_TO_ADDR
16721: LD_EXP 41
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16773
// begin if flags [ normalCounter + i ] then
16729: LD_VAR 0 4
16733: PUSH
16734: LD_EXP 40
16738: PUSH
16739: LD_VAR 0 8
16743: PLUS
16744: ARRAY
16745: IFFALSE 16771
// tmp := tmp & ( 100 + i ) & ; ;
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_VAR 0 3
16756: PUSH
16757: LD_INT 100
16759: PUSH
16760: LD_VAR 0 8
16764: PLUS
16765: STR
16766: PUSH
16767: LD_STRING ;
16769: STR
16770: ST_TO_ADDR
// end ;
16771: GO 16726
16773: POP
16774: POP
// if tmp then
16775: LD_VAR 0 3
16779: IFFALSE 16791
// active := tmp ;
16781: LD_ADDR_VAR 0 7
16785: PUSH
16786: LD_VAR 0 3
16790: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16791: LD_STRING getStreamItemsFromMission("
16793: PUSH
16794: LD_VAR 0 5
16798: STR
16799: PUSH
16800: LD_STRING ","
16802: STR
16803: PUSH
16804: LD_VAR 0 6
16808: STR
16809: PUSH
16810: LD_STRING ","
16812: STR
16813: PUSH
16814: LD_VAR 0 7
16818: STR
16819: PUSH
16820: LD_STRING ")
16822: STR
16823: PPUSH
16824: CALL_OW 559
// end else
16828: GO 16837
// ToLua ( getStreamItemsFromMission("","","") ) ;
16830: LD_STRING getStreamItemsFromMission("","","")
16832: PPUSH
16833: CALL_OW 559
// end ;
16837: LD_VAR 0 2
16841: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16842: LD_EXP 39
16846: PUSH
16847: LD_EXP 44
16851: AND
16852: IFFALSE 16976
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// begin enable ;
16861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16862: LD_ADDR_VAR 0 2
16866: PUSH
16867: LD_INT 22
16869: PUSH
16870: LD_OWVAR 2
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: LD_INT 34
16884: PUSH
16885: LD_INT 7
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 34
16894: PUSH
16895: LD_INT 45
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 34
16904: PUSH
16905: LD_INT 28
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 34
16914: PUSH
16915: LD_INT 47
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PPUSH
16933: CALL_OW 69
16937: ST_TO_ADDR
// if not tmp then
16938: LD_VAR 0 2
16942: NOT
16943: IFFALSE 16947
// exit ;
16945: GO 16976
// for i in tmp do
16947: LD_ADDR_VAR 0 1
16951: PUSH
16952: LD_VAR 0 2
16956: PUSH
16957: FOR_IN
16958: IFFALSE 16974
// begin SetLives ( i , 0 ) ;
16960: LD_VAR 0 1
16964: PPUSH
16965: LD_INT 0
16967: PPUSH
16968: CALL_OW 234
// end ;
16972: GO 16957
16974: POP
16975: POP
// end ;
16976: PPOPN 2
16978: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16979: LD_EXP 39
16983: PUSH
16984: LD_EXP 45
16988: AND
16989: IFFALSE 17073
16991: GO 16993
16993: DISABLE
16994: LD_INT 0
16996: PPUSH
16997: PPUSH
// begin enable ;
16998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16999: LD_ADDR_VAR 0 2
17003: PUSH
17004: LD_INT 22
17006: PUSH
17007: LD_OWVAR 2
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 32
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PPUSH
17030: CALL_OW 69
17034: ST_TO_ADDR
// if not tmp then
17035: LD_VAR 0 2
17039: NOT
17040: IFFALSE 17044
// exit ;
17042: GO 17073
// for i in tmp do
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: LD_VAR 0 2
17053: PUSH
17054: FOR_IN
17055: IFFALSE 17071
// begin SetLives ( i , 0 ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_INT 0
17064: PPUSH
17065: CALL_OW 234
// end ;
17069: GO 17054
17071: POP
17072: POP
// end ;
17073: PPOPN 2
17075: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17076: LD_EXP 39
17080: PUSH
17081: LD_EXP 42
17085: AND
17086: IFFALSE 17179
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
// begin enable ;
17094: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_INT 22
17102: PUSH
17103: LD_OWVAR 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: LD_INT 25
17117: PUSH
17118: LD_INT 5
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 25
17127: PUSH
17128: LD_INT 9
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 25
17137: PUSH
17138: LD_INT 8
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: PUSH
17160: FOR_IN
17161: IFFALSE 17177
// begin SetClass ( i , 1 ) ;
17163: LD_VAR 0 1
17167: PPUSH
17168: LD_INT 1
17170: PPUSH
17171: CALL_OW 336
// end ;
17175: GO 17160
17177: POP
17178: POP
// end ;
17179: PPOPN 1
17181: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17182: LD_EXP 39
17186: PUSH
17187: LD_EXP 43
17191: AND
17192: PUSH
17193: LD_OWVAR 65
17197: PUSH
17198: LD_INT 7
17200: LESS
17201: AND
17202: IFFALSE 17216
17204: GO 17206
17206: DISABLE
// begin enable ;
17207: ENABLE
// game_speed := 7 ;
17208: LD_ADDR_OWVAR 65
17212: PUSH
17213: LD_INT 7
17215: ST_TO_ADDR
// end ;
17216: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17217: LD_EXP 39
17221: PUSH
17222: LD_EXP 46
17226: AND
17227: IFFALSE 17429
17229: GO 17231
17231: DISABLE
17232: LD_INT 0
17234: PPUSH
17235: PPUSH
17236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17237: LD_ADDR_VAR 0 3
17241: PUSH
17242: LD_INT 81
17244: PUSH
17245: LD_OWVAR 2
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 69
17272: ST_TO_ADDR
// if not tmp then
17273: LD_VAR 0 3
17277: NOT
17278: IFFALSE 17282
// exit ;
17280: GO 17429
// if tmp > 5 then
17282: LD_VAR 0 3
17286: PUSH
17287: LD_INT 5
17289: GREATER
17290: IFFALSE 17302
// k := 5 else
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: LD_INT 5
17299: ST_TO_ADDR
17300: GO 17312
// k := tmp ;
17302: LD_ADDR_VAR 0 2
17306: PUSH
17307: LD_VAR 0 3
17311: ST_TO_ADDR
// for i := 1 to k do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: DOUBLE
17318: LD_INT 1
17320: DEC
17321: ST_TO_ADDR
17322: LD_VAR 0 2
17326: PUSH
17327: FOR_TO
17328: IFFALSE 17427
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17330: LD_VAR 0 3
17334: PUSH
17335: LD_VAR 0 1
17339: ARRAY
17340: PPUSH
17341: LD_VAR 0 1
17345: PUSH
17346: LD_INT 4
17348: MOD
17349: PUSH
17350: LD_INT 1
17352: PLUS
17353: PPUSH
17354: CALL_OW 259
17358: PUSH
17359: LD_INT 10
17361: LESS
17362: IFFALSE 17425
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17364: LD_VAR 0 3
17368: PUSH
17369: LD_VAR 0 1
17373: ARRAY
17374: PPUSH
17375: LD_VAR 0 1
17379: PUSH
17380: LD_INT 4
17382: MOD
17383: PUSH
17384: LD_INT 1
17386: PLUS
17387: PPUSH
17388: LD_VAR 0 3
17392: PUSH
17393: LD_VAR 0 1
17397: ARRAY
17398: PPUSH
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 4
17406: MOD
17407: PUSH
17408: LD_INT 1
17410: PLUS
17411: PPUSH
17412: CALL_OW 259
17416: PUSH
17417: LD_INT 1
17419: PLUS
17420: PPUSH
17421: CALL_OW 237
17425: GO 17327
17427: POP
17428: POP
// end ;
17429: PPOPN 3
17431: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17432: LD_EXP 39
17436: PUSH
17437: LD_EXP 47
17441: AND
17442: IFFALSE 17462
17444: GO 17446
17446: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17447: LD_INT 4
17449: PPUSH
17450: LD_OWVAR 2
17454: PPUSH
17455: LD_INT 0
17457: PPUSH
17458: CALL_OW 324
17462: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17463: LD_EXP 39
17467: PUSH
17468: LD_EXP 76
17472: AND
17473: IFFALSE 17493
17475: GO 17477
17477: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17478: LD_INT 19
17480: PPUSH
17481: LD_OWVAR 2
17485: PPUSH
17486: LD_INT 0
17488: PPUSH
17489: CALL_OW 324
17493: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17494: LD_EXP 39
17498: PUSH
17499: LD_EXP 48
17503: AND
17504: IFFALSE 17606
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin enable ;
17513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 11
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 34
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PPUSH
17563: CALL_OW 69
17567: ST_TO_ADDR
// if not tmp then
17568: LD_VAR 0 2
17572: NOT
17573: IFFALSE 17577
// exit ;
17575: GO 17606
// for i in tmp do
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_VAR 0 2
17586: PUSH
17587: FOR_IN
17588: IFFALSE 17604
// begin SetLives ( i , 0 ) ;
17590: LD_VAR 0 1
17594: PPUSH
17595: LD_INT 0
17597: PPUSH
17598: CALL_OW 234
// end ;
17602: GO 17587
17604: POP
17605: POP
// end ;
17606: PPOPN 2
17608: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17609: LD_EXP 39
17613: PUSH
17614: LD_EXP 49
17618: AND
17619: IFFALSE 17639
17621: GO 17623
17623: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17624: LD_INT 32
17626: PPUSH
17627: LD_OWVAR 2
17631: PPUSH
17632: LD_INT 0
17634: PPUSH
17635: CALL_OW 324
17639: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17640: LD_EXP 39
17644: PUSH
17645: LD_EXP 50
17649: AND
17650: IFFALSE 17831
17652: GO 17654
17654: DISABLE
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
17659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: LD_INT 22
17667: PUSH
17668: LD_OWVAR 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 33
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PPUSH
17691: CALL_OW 69
17695: ST_TO_ADDR
// if not tmp then
17696: LD_VAR 0 2
17700: NOT
17701: IFFALSE 17705
// exit ;
17703: GO 17831
// side := 0 ;
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// for i := 1 to 8 do
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: DOUBLE
17719: LD_INT 1
17721: DEC
17722: ST_TO_ADDR
17723: LD_INT 8
17725: PUSH
17726: FOR_TO
17727: IFFALSE 17775
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17729: LD_OWVAR 2
17733: PUSH
17734: LD_VAR 0 1
17738: NONEQUAL
17739: PUSH
17740: LD_OWVAR 2
17744: PPUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 81
17754: PUSH
17755: LD_INT 2
17757: EQUAL
17758: AND
17759: IFFALSE 17773
// begin side := i ;
17761: LD_ADDR_VAR 0 3
17765: PUSH
17766: LD_VAR 0 1
17770: ST_TO_ADDR
// break ;
17771: GO 17775
// end ;
17773: GO 17726
17775: POP
17776: POP
// if not side then
17777: LD_VAR 0 3
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17831
// for i := 1 to tmp do
17786: LD_ADDR_VAR 0 1
17790: PUSH
17791: DOUBLE
17792: LD_INT 1
17794: DEC
17795: ST_TO_ADDR
17796: LD_VAR 0 2
17800: PUSH
17801: FOR_TO
17802: IFFALSE 17829
// if Prob ( 60 ) then
17804: LD_INT 60
17806: PPUSH
17807: CALL_OW 13
17811: IFFALSE 17827
// SetSide ( i , side ) ;
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: CALL_OW 235
17827: GO 17801
17829: POP
17830: POP
// end ;
17831: PPOPN 3
17833: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17834: LD_EXP 39
17838: PUSH
17839: LD_EXP 52
17843: AND
17844: IFFALSE 17963
17846: GO 17848
17848: DISABLE
17849: LD_INT 0
17851: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17852: LD_ADDR_VAR 0 1
17856: PUSH
17857: LD_INT 22
17859: PUSH
17860: LD_OWVAR 2
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 21
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: LD_INT 23
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17961
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 257
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 3
17927: PUSH
17928: LD_INT 4
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: IN
17937: IFFALSE 17959
// SetClass ( un , rand ( 1 , 4 ) ) ;
17939: LD_VAR 0 1
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: LD_INT 4
17949: PPUSH
17950: CALL_OW 12
17954: PPUSH
17955: CALL_OW 336
17959: GO 17906
17961: POP
17962: POP
// end ;
17963: PPOPN 1
17965: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17966: LD_EXP 39
17970: PUSH
17971: LD_EXP 51
17975: AND
17976: IFFALSE 18055
17978: GO 17980
17980: DISABLE
17981: LD_INT 0
17983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17984: LD_ADDR_VAR 0 1
17988: PUSH
17989: LD_INT 22
17991: PUSH
17992: LD_OWVAR 2
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PPUSH
18015: CALL_OW 69
18019: ST_TO_ADDR
// if not tmp then
18020: LD_VAR 0 1
18024: NOT
18025: IFFALSE 18029
// exit ;
18027: GO 18055
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 1
18036: PPUSH
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 12
18046: ARRAY
18047: PPUSH
18048: LD_INT 100
18050: PPUSH
18051: CALL_OW 234
// end ;
18055: PPOPN 1
18057: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18058: LD_EXP 39
18062: PUSH
18063: LD_EXP 53
18067: AND
18068: IFFALSE 18166
18070: GO 18072
18072: DISABLE
18073: LD_INT 0
18075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18076: LD_ADDR_VAR 0 1
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_OWVAR 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 21
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 1
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18166
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18121: LD_VAR 0 1
18125: PUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 12
18138: ARRAY
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: LD_INT 4
18145: PPUSH
18146: CALL_OW 12
18150: PPUSH
18151: LD_INT 3000
18153: PPUSH
18154: LD_INT 9000
18156: PPUSH
18157: CALL_OW 12
18161: PPUSH
18162: CALL_OW 492
// end ;
18166: PPOPN 1
18168: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18169: LD_EXP 39
18173: PUSH
18174: LD_EXP 54
18178: AND
18179: IFFALSE 18199
18181: GO 18183
18183: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18184: LD_INT 1
18186: PPUSH
18187: LD_OWVAR 2
18191: PPUSH
18192: LD_INT 0
18194: PPUSH
18195: CALL_OW 324
18199: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18200: LD_EXP 39
18204: PUSH
18205: LD_EXP 55
18209: AND
18210: IFFALSE 18293
18212: GO 18214
18214: DISABLE
18215: LD_INT 0
18217: PPUSH
18218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18219: LD_ADDR_VAR 0 2
18223: PUSH
18224: LD_INT 22
18226: PUSH
18227: LD_OWVAR 2
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 3
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: ST_TO_ADDR
// if not tmp then
18255: LD_VAR 0 2
18259: NOT
18260: IFFALSE 18264
// exit ;
18262: GO 18293
// for i in tmp do
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_VAR 0 2
18273: PUSH
18274: FOR_IN
18275: IFFALSE 18291
// SetBLevel ( i , 10 ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 10
18284: PPUSH
18285: CALL_OW 241
18289: GO 18274
18291: POP
18292: POP
// end ;
18293: PPOPN 2
18295: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18296: LD_EXP 39
18300: PUSH
18301: LD_EXP 56
18305: AND
18306: IFFALSE 18417
18308: GO 18310
18310: DISABLE
18311: LD_INT 0
18313: PPUSH
18314: PPUSH
18315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18316: LD_ADDR_VAR 0 3
18320: PUSH
18321: LD_INT 22
18323: PUSH
18324: LD_OWVAR 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 25
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PPUSH
18347: CALL_OW 69
18351: ST_TO_ADDR
// if not tmp then
18352: LD_VAR 0 3
18356: NOT
18357: IFFALSE 18361
// exit ;
18359: GO 18417
// un := tmp [ rand ( 1 , tmp ) ] ;
18361: LD_ADDR_VAR 0 2
18365: PUSH
18366: LD_VAR 0 3
18370: PUSH
18371: LD_INT 1
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: CALL_OW 12
18383: ARRAY
18384: ST_TO_ADDR
// if Crawls ( un ) then
18385: LD_VAR 0 2
18389: PPUSH
18390: CALL_OW 318
18394: IFFALSE 18405
// ComWalk ( un ) ;
18396: LD_VAR 0 2
18400: PPUSH
18401: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18405: LD_VAR 0 2
18409: PPUSH
18410: LD_INT 5
18412: PPUSH
18413: CALL_OW 336
// end ;
18417: PPOPN 3
18419: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18420: LD_EXP 39
18424: PUSH
18425: LD_EXP 57
18429: AND
18430: PUSH
18431: LD_OWVAR 67
18435: PUSH
18436: LD_INT 4
18438: LESS
18439: AND
18440: IFFALSE 18459
18442: GO 18444
18444: DISABLE
// begin Difficulty := Difficulty + 1 ;
18445: LD_ADDR_OWVAR 67
18449: PUSH
18450: LD_OWVAR 67
18454: PUSH
18455: LD_INT 1
18457: PLUS
18458: ST_TO_ADDR
// end ;
18459: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18460: LD_EXP 39
18464: PUSH
18465: LD_EXP 58
18469: AND
18470: IFFALSE 18573
18472: GO 18474
18474: DISABLE
18475: LD_INT 0
18477: PPUSH
// begin for i := 1 to 5 do
18478: LD_ADDR_VAR 0 1
18482: PUSH
18483: DOUBLE
18484: LD_INT 1
18486: DEC
18487: ST_TO_ADDR
18488: LD_INT 5
18490: PUSH
18491: FOR_TO
18492: IFFALSE 18571
// begin uc_nation := nation_nature ;
18494: LD_ADDR_OWVAR 21
18498: PUSH
18499: LD_INT 0
18501: ST_TO_ADDR
// uc_side := 0 ;
18502: LD_ADDR_OWVAR 20
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18510: LD_ADDR_OWVAR 29
18514: PUSH
18515: LD_INT 12
18517: PUSH
18518: LD_INT 12
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// hc_agressivity := 20 ;
18525: LD_ADDR_OWVAR 35
18529: PUSH
18530: LD_INT 20
18532: ST_TO_ADDR
// hc_class := class_tiger ;
18533: LD_ADDR_OWVAR 28
18537: PUSH
18538: LD_INT 14
18540: ST_TO_ADDR
// hc_gallery :=  ;
18541: LD_ADDR_OWVAR 33
18545: PUSH
18546: LD_STRING 
18548: ST_TO_ADDR
// hc_name :=  ;
18549: LD_ADDR_OWVAR 26
18553: PUSH
18554: LD_STRING 
18556: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18557: CALL_OW 44
18561: PPUSH
18562: LD_INT 0
18564: PPUSH
18565: CALL_OW 51
// end ;
18569: GO 18491
18571: POP
18572: POP
// end ;
18573: PPOPN 1
18575: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18576: LD_EXP 39
18580: PUSH
18581: LD_EXP 59
18585: AND
18586: IFFALSE 18595
18588: GO 18590
18590: DISABLE
// StreamSibBomb ;
18591: CALL 18596 0 0
18595: END
// export function StreamSibBomb ; var i , x , y ; begin
18596: LD_INT 0
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
// result := false ;
18602: LD_ADDR_VAR 0 1
18606: PUSH
18607: LD_INT 0
18609: ST_TO_ADDR
// for i := 1 to 16 do
18610: LD_ADDR_VAR 0 2
18614: PUSH
18615: DOUBLE
18616: LD_INT 1
18618: DEC
18619: ST_TO_ADDR
18620: LD_INT 16
18622: PUSH
18623: FOR_TO
18624: IFFALSE 18823
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18626: LD_ADDR_VAR 0 3
18630: PUSH
18631: LD_INT 10
18633: PUSH
18634: LD_INT 20
18636: PUSH
18637: LD_INT 30
18639: PUSH
18640: LD_INT 40
18642: PUSH
18643: LD_INT 50
18645: PUSH
18646: LD_INT 60
18648: PUSH
18649: LD_INT 70
18651: PUSH
18652: LD_INT 80
18654: PUSH
18655: LD_INT 90
18657: PUSH
18658: LD_INT 100
18660: PUSH
18661: LD_INT 110
18663: PUSH
18664: LD_INT 120
18666: PUSH
18667: LD_INT 130
18669: PUSH
18670: LD_INT 140
18672: PUSH
18673: LD_INT 150
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PPUSH
18696: LD_INT 15
18698: PPUSH
18699: CALL_OW 12
18703: ARRAY
18704: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18705: LD_ADDR_VAR 0 4
18709: PUSH
18710: LD_INT 10
18712: PUSH
18713: LD_INT 20
18715: PUSH
18716: LD_INT 30
18718: PUSH
18719: LD_INT 40
18721: PUSH
18722: LD_INT 50
18724: PUSH
18725: LD_INT 60
18727: PUSH
18728: LD_INT 70
18730: PUSH
18731: LD_INT 80
18733: PUSH
18734: LD_INT 90
18736: PUSH
18737: LD_INT 100
18739: PUSH
18740: LD_INT 110
18742: PUSH
18743: LD_INT 120
18745: PUSH
18746: LD_INT 130
18748: PUSH
18749: LD_INT 140
18751: PUSH
18752: LD_INT 150
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PPUSH
18775: LD_INT 15
18777: PPUSH
18778: CALL_OW 12
18782: ARRAY
18783: ST_TO_ADDR
// if ValidHex ( x , y ) then
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_VAR 0 4
18793: PPUSH
18794: CALL_OW 488
18798: IFFALSE 18821
// begin result := [ x , y ] ;
18800: LD_ADDR_VAR 0 1
18804: PUSH
18805: LD_VAR 0 3
18809: PUSH
18810: LD_VAR 0 4
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: ST_TO_ADDR
// break ;
18819: GO 18823
// end ; end ;
18821: GO 18623
18823: POP
18824: POP
// if result then
18825: LD_VAR 0 1
18829: IFFALSE 18889
// begin ToLua ( playSibBomb() ) ;
18831: LD_STRING playSibBomb()
18833: PPUSH
18834: CALL_OW 559
// wait ( 0 0$14 ) ;
18838: LD_INT 490
18840: PPUSH
18841: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 1
18852: ARRAY
18853: PPUSH
18854: LD_VAR 0 1
18858: PUSH
18859: LD_INT 2
18861: ARRAY
18862: PPUSH
18863: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18867: LD_VAR 0 1
18871: PUSH
18872: LD_INT 1
18874: ARRAY
18875: PPUSH
18876: LD_VAR 0 1
18880: PUSH
18881: LD_INT 2
18883: ARRAY
18884: PPUSH
18885: CALL_OW 429
// end ; end ;
18889: LD_VAR 0 1
18893: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18894: LD_EXP 39
18898: PUSH
18899: LD_EXP 61
18903: AND
18904: IFFALSE 18916
18906: GO 18908
18908: DISABLE
// YouLost (  ) ;
18909: LD_STRING 
18911: PPUSH
18912: CALL_OW 104
18916: END
// every 0 0$1 trigger StreamModeActive and sFog do
18917: LD_EXP 39
18921: PUSH
18922: LD_EXP 60
18926: AND
18927: IFFALSE 18941
18929: GO 18931
18931: DISABLE
// FogOff ( your_side ) ;
18932: LD_OWVAR 2
18936: PPUSH
18937: CALL_OW 344
18941: END
// every 0 0$1 trigger StreamModeActive and sSun do
18942: LD_EXP 39
18946: PUSH
18947: LD_EXP 62
18951: AND
18952: IFFALSE 18980
18954: GO 18956
18956: DISABLE
// begin solar_recharge_percent := 0 ;
18957: LD_ADDR_OWVAR 79
18961: PUSH
18962: LD_INT 0
18964: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18965: LD_INT 10500
18967: PPUSH
18968: CALL_OW 67
// solar_recharge_percent := 100 ;
18972: LD_ADDR_OWVAR 79
18976: PUSH
18977: LD_INT 100
18979: ST_TO_ADDR
// end ;
18980: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18981: LD_EXP 39
18985: PUSH
18986: LD_EXP 63
18990: AND
18991: IFFALSE 19230
18993: GO 18995
18995: DISABLE
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
// begin tmp := [ ] ;
19001: LD_ADDR_VAR 0 3
19005: PUSH
19006: EMPTY
19007: ST_TO_ADDR
// for i := 1 to 6 do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: DOUBLE
19014: LD_INT 1
19016: DEC
19017: ST_TO_ADDR
19018: LD_INT 6
19020: PUSH
19021: FOR_TO
19022: IFFALSE 19127
// begin uc_nation := nation_nature ;
19024: LD_ADDR_OWVAR 21
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// uc_side := 0 ;
19032: LD_ADDR_OWVAR 20
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19040: LD_ADDR_OWVAR 29
19044: PUSH
19045: LD_INT 12
19047: PUSH
19048: LD_INT 12
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: ST_TO_ADDR
// hc_agressivity := 20 ;
19055: LD_ADDR_OWVAR 35
19059: PUSH
19060: LD_INT 20
19062: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19063: LD_ADDR_OWVAR 28
19067: PUSH
19068: LD_INT 17
19070: ST_TO_ADDR
// hc_gallery :=  ;
19071: LD_ADDR_OWVAR 33
19075: PUSH
19076: LD_STRING 
19078: ST_TO_ADDR
// hc_name :=  ;
19079: LD_ADDR_OWVAR 26
19083: PUSH
19084: LD_STRING 
19086: ST_TO_ADDR
// un := CreateHuman ;
19087: LD_ADDR_VAR 0 2
19091: PUSH
19092: CALL_OW 44
19096: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19097: LD_VAR 0 2
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 51
// tmp := tmp ^ un ;
19109: LD_ADDR_VAR 0 3
19113: PUSH
19114: LD_VAR 0 3
19118: PUSH
19119: LD_VAR 0 2
19123: ADD
19124: ST_TO_ADDR
// end ;
19125: GO 19021
19127: POP
19128: POP
// repeat wait ( 0 0$1 ) ;
19129: LD_INT 35
19131: PPUSH
19132: CALL_OW 67
// for un in tmp do
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: LD_VAR 0 3
19145: PUSH
19146: FOR_IN
19147: IFFALSE 19221
// begin if IsDead ( un ) then
19149: LD_VAR 0 2
19153: PPUSH
19154: CALL_OW 301
19158: IFFALSE 19178
// begin tmp := tmp diff un ;
19160: LD_ADDR_VAR 0 3
19164: PUSH
19165: LD_VAR 0 3
19169: PUSH
19170: LD_VAR 0 2
19174: DIFF
19175: ST_TO_ADDR
// continue ;
19176: GO 19146
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19178: LD_VAR 0 2
19182: PPUSH
19183: LD_INT 3
19185: PUSH
19186: LD_INT 22
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PPUSH
19200: CALL_OW 69
19204: PPUSH
19205: LD_VAR 0 2
19209: PPUSH
19210: CALL_OW 74
19214: PPUSH
19215: CALL_OW 115
// end ;
19219: GO 19146
19221: POP
19222: POP
// until not tmp ;
19223: LD_VAR 0 3
19227: NOT
19228: IFFALSE 19129
// end ;
19230: PPOPN 3
19232: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19233: LD_EXP 39
19237: PUSH
19238: LD_EXP 64
19242: AND
19243: IFFALSE 19297
19245: GO 19247
19247: DISABLE
// begin ToLua ( displayTroll(); ) ;
19248: LD_STRING displayTroll();
19250: PPUSH
19251: CALL_OW 559
// wait ( 3 3$00 ) ;
19255: LD_INT 6300
19257: PPUSH
19258: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19262: LD_STRING hideTroll();
19264: PPUSH
19265: CALL_OW 559
// wait ( 1 1$00 ) ;
19269: LD_INT 2100
19271: PPUSH
19272: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19276: LD_STRING displayTroll();
19278: PPUSH
19279: CALL_OW 559
// wait ( 1 1$00 ) ;
19283: LD_INT 2100
19285: PPUSH
19286: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19290: LD_STRING hideTroll();
19292: PPUSH
19293: CALL_OW 559
// end ;
19297: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19298: LD_EXP 39
19302: PUSH
19303: LD_EXP 65
19307: AND
19308: IFFALSE 19371
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
// begin p := 0 ;
19316: LD_ADDR_VAR 0 1
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// repeat game_speed := 1 ;
19324: LD_ADDR_OWVAR 65
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19332: LD_INT 35
19334: PPUSH
19335: CALL_OW 67
// p := p + 1 ;
19339: LD_ADDR_VAR 0 1
19343: PUSH
19344: LD_VAR 0 1
19348: PUSH
19349: LD_INT 1
19351: PLUS
19352: ST_TO_ADDR
// until p >= 60 ;
19353: LD_VAR 0 1
19357: PUSH
19358: LD_INT 60
19360: GREATEREQUAL
19361: IFFALSE 19324
// game_speed := 4 ;
19363: LD_ADDR_OWVAR 65
19367: PUSH
19368: LD_INT 4
19370: ST_TO_ADDR
// end ;
19371: PPOPN 1
19373: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19374: LD_EXP 39
19378: PUSH
19379: LD_EXP 66
19383: AND
19384: IFFALSE 19530
19386: GO 19388
19388: DISABLE
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_OWVAR 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 30
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 30
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: ST_TO_ADDR
// if not depot then
19447: LD_VAR 0 1
19451: NOT
19452: IFFALSE 19456
// exit ;
19454: GO 19530
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_VAR 0 1
19465: PUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 12
19478: ARRAY
19479: PPUSH
19480: CALL_OW 274
19484: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19485: LD_VAR 0 2
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: LD_INT 0
19495: PPUSH
19496: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19500: LD_VAR 0 2
19504: PPUSH
19505: LD_INT 2
19507: PPUSH
19508: LD_INT 0
19510: PPUSH
19511: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19515: LD_VAR 0 2
19519: PPUSH
19520: LD_INT 3
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: CALL_OW 277
// end ;
19530: PPOPN 2
19532: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19533: LD_EXP 39
19537: PUSH
19538: LD_EXP 67
19542: AND
19543: IFFALSE 19640
19545: GO 19547
19547: DISABLE
19548: LD_INT 0
19550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 3
19580: PUSH
19581: LD_INT 23
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 69
19604: ST_TO_ADDR
// if not tmp then
19605: LD_VAR 0 1
19609: NOT
19610: IFFALSE 19614
// exit ;
19612: GO 19640
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19614: LD_VAR 0 1
19618: PUSH
19619: LD_INT 1
19621: PPUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 12
19631: ARRAY
19632: PPUSH
19633: LD_INT 200
19635: PPUSH
19636: CALL_OW 234
// end ;
19640: PPOPN 1
19642: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19643: LD_EXP 39
19647: PUSH
19648: LD_EXP 68
19652: AND
19653: IFFALSE 19732
19655: GO 19657
19657: DISABLE
19658: LD_INT 0
19660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19661: LD_ADDR_VAR 0 1
19665: PUSH
19666: LD_INT 22
19668: PUSH
19669: LD_OWVAR 2
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 21
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 69
19696: ST_TO_ADDR
// if not tmp then
19697: LD_VAR 0 1
19701: NOT
19702: IFFALSE 19706
// exit ;
19704: GO 19732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 1
19713: PPUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 12
19723: ARRAY
19724: PPUSH
19725: LD_INT 60
19727: PPUSH
19728: CALL_OW 234
// end ;
19732: PPOPN 1
19734: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19735: LD_EXP 39
19739: PUSH
19740: LD_EXP 69
19744: AND
19745: IFFALSE 19844
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin enable ;
19754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_OWVAR 2
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 61
19774: PUSH
19775: EMPTY
19776: LIST
19777: PUSH
19778: LD_INT 33
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: PPUSH
19793: CALL_OW 69
19797: ST_TO_ADDR
// if not tmp then
19798: LD_VAR 0 1
19802: NOT
19803: IFFALSE 19807
// exit ;
19805: GO 19844
// for i in tmp do
19807: LD_ADDR_VAR 0 2
19811: PUSH
19812: LD_VAR 0 1
19816: PUSH
19817: FOR_IN
19818: IFFALSE 19842
// if IsControledBy ( i ) then
19820: LD_VAR 0 2
19824: PPUSH
19825: CALL_OW 312
19829: IFFALSE 19840
// ComUnlink ( i ) ;
19831: LD_VAR 0 2
19835: PPUSH
19836: CALL_OW 136
19840: GO 19817
19842: POP
19843: POP
// end ;
19844: PPOPN 2
19846: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19847: LD_EXP 39
19851: PUSH
19852: LD_EXP 70
19856: AND
19857: IFFALSE 19997
19859: GO 19861
19861: DISABLE
19862: LD_INT 0
19864: PPUSH
19865: PPUSH
// begin ToLua ( displayPowell(); ) ;
19866: LD_STRING displayPowell();
19868: PPUSH
19869: CALL_OW 559
// uc_side := 0 ;
19873: LD_ADDR_OWVAR 20
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// uc_nation := 2 ;
19881: LD_ADDR_OWVAR 21
19885: PUSH
19886: LD_INT 2
19888: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19889: LD_ADDR_OWVAR 37
19893: PUSH
19894: LD_INT 14
19896: ST_TO_ADDR
// vc_engine := engine_siberite ;
19897: LD_ADDR_OWVAR 39
19901: PUSH
19902: LD_INT 3
19904: ST_TO_ADDR
// vc_control := control_apeman ;
19905: LD_ADDR_OWVAR 38
19909: PUSH
19910: LD_INT 5
19912: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19913: LD_ADDR_OWVAR 40
19917: PUSH
19918: LD_INT 29
19920: ST_TO_ADDR
// un := CreateVehicle ;
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: CALL_OW 45
19930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19943: LD_INT 35
19945: PPUSH
19946: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19950: LD_VAR 0 2
19954: PPUSH
19955: LD_INT 22
19957: PUSH
19958: LD_OWVAR 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PPUSH
19967: CALL_OW 69
19971: PPUSH
19972: LD_VAR 0 2
19976: PPUSH
19977: CALL_OW 74
19981: PPUSH
19982: CALL_OW 115
// until IsDead ( un ) ;
19986: LD_VAR 0 2
19990: PPUSH
19991: CALL_OW 301
19995: IFFALSE 19943
// end ;
19997: PPOPN 2
19999: END
// every 0 0$1 trigger StreamModeActive and sStu do
20000: LD_EXP 39
20004: PUSH
20005: LD_EXP 78
20009: AND
20010: IFFALSE 20026
20012: GO 20014
20014: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20015: LD_STRING displayStucuk();
20017: PPUSH
20018: CALL_OW 559
// ResetFog ;
20022: CALL_OW 335
// end ;
20026: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20027: LD_EXP 39
20031: PUSH
20032: LD_EXP 71
20036: AND
20037: IFFALSE 20178
20039: GO 20041
20041: DISABLE
20042: LD_INT 0
20044: PPUSH
20045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20046: LD_ADDR_VAR 0 2
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_OWVAR 2
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 21
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not tmp then
20082: LD_VAR 0 2
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20178
// un := tmp [ rand ( 1 , tmp ) ] ;
20091: LD_ADDR_VAR 0 1
20095: PUSH
20096: LD_VAR 0 2
20100: PUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_VAR 0 2
20108: PPUSH
20109: CALL_OW 12
20113: ARRAY
20114: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_INT 0
20122: PPUSH
20123: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_OWVAR 3
20136: PUSH
20137: LD_VAR 0 1
20141: DIFF
20142: PPUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 74
20152: PPUSH
20153: CALL_OW 115
// wait ( 0 0$20 ) ;
20157: LD_INT 700
20159: PPUSH
20160: CALL_OW 67
// SetSide ( un , your_side ) ;
20164: LD_VAR 0 1
20168: PPUSH
20169: LD_OWVAR 2
20173: PPUSH
20174: CALL_OW 235
// end ;
20178: PPOPN 2
20180: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20181: LD_EXP 39
20185: PUSH
20186: LD_EXP 72
20190: AND
20191: IFFALSE 20297
20193: GO 20195
20195: DISABLE
20196: LD_INT 0
20198: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20199: LD_ADDR_VAR 0 1
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: LD_INT 30
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 30
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PPUSH
20248: CALL_OW 69
20252: ST_TO_ADDR
// if not depot then
20253: LD_VAR 0 1
20257: NOT
20258: IFFALSE 20262
// exit ;
20260: GO 20297
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20262: LD_VAR 0 1
20266: PUSH
20267: LD_INT 1
20269: ARRAY
20270: PPUSH
20271: CALL_OW 250
20275: PPUSH
20276: LD_VAR 0 1
20280: PUSH
20281: LD_INT 1
20283: ARRAY
20284: PPUSH
20285: CALL_OW 251
20289: PPUSH
20290: LD_INT 70
20292: PPUSH
20293: CALL_OW 495
// end ;
20297: PPOPN 1
20299: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20300: LD_EXP 39
20304: PUSH
20305: LD_EXP 73
20309: AND
20310: IFFALSE 20521
20312: GO 20314
20314: DISABLE
20315: LD_INT 0
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20322: LD_ADDR_VAR 0 5
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_OWVAR 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PPUSH
20353: CALL_OW 69
20357: ST_TO_ADDR
// if not tmp then
20358: LD_VAR 0 5
20362: NOT
20363: IFFALSE 20367
// exit ;
20365: GO 20521
// for i in tmp do
20367: LD_ADDR_VAR 0 1
20371: PUSH
20372: LD_VAR 0 5
20376: PUSH
20377: FOR_IN
20378: IFFALSE 20519
// begin d := rand ( 0 , 5 ) ;
20380: LD_ADDR_VAR 0 4
20384: PUSH
20385: LD_INT 0
20387: PPUSH
20388: LD_INT 5
20390: PPUSH
20391: CALL_OW 12
20395: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20396: LD_ADDR_VAR 0 2
20400: PUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 250
20410: PPUSH
20411: LD_VAR 0 4
20415: PPUSH
20416: LD_INT 3
20418: PPUSH
20419: LD_INT 12
20421: PPUSH
20422: CALL_OW 12
20426: PPUSH
20427: CALL_OW 272
20431: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 251
20446: PPUSH
20447: LD_VAR 0 4
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: LD_INT 12
20457: PPUSH
20458: CALL_OW 12
20462: PPUSH
20463: CALL_OW 273
20467: ST_TO_ADDR
// if ValidHex ( x , y ) then
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 488
20482: IFFALSE 20517
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_VAR 0 2
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: LD_INT 3
20501: PPUSH
20502: LD_INT 6
20504: PPUSH
20505: CALL_OW 12
20509: PPUSH
20510: LD_INT 1
20512: PPUSH
20513: CALL_OW 483
// end ;
20517: GO 20377
20519: POP
20520: POP
// end ;
20521: PPOPN 5
20523: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20524: LD_EXP 39
20528: PUSH
20529: LD_EXP 74
20533: AND
20534: IFFALSE 20628
20536: GO 20538
20538: DISABLE
20539: LD_INT 0
20541: PPUSH
20542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20543: LD_ADDR_VAR 0 2
20547: PUSH
20548: LD_INT 22
20550: PUSH
20551: LD_OWVAR 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 32
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 69
20589: ST_TO_ADDR
// if not tmp then
20590: LD_VAR 0 2
20594: NOT
20595: IFFALSE 20599
// exit ;
20597: GO 20628
// for i in tmp do
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: LD_VAR 0 2
20608: PUSH
20609: FOR_IN
20610: IFFALSE 20626
// SetFuel ( i , 0 ) ;
20612: LD_VAR 0 1
20616: PPUSH
20617: LD_INT 0
20619: PPUSH
20620: CALL_OW 240
20624: GO 20609
20626: POP
20627: POP
// end ;
20628: PPOPN 2
20630: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20631: LD_EXP 39
20635: PUSH
20636: LD_EXP 75
20640: AND
20641: IFFALSE 20707
20643: GO 20645
20645: DISABLE
20646: LD_INT 0
20648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: LD_INT 22
20656: PUSH
20657: LD_OWVAR 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 30
20668: PUSH
20669: LD_INT 29
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PPUSH
20680: CALL_OW 69
20684: ST_TO_ADDR
// if not tmp then
20685: LD_VAR 0 1
20689: NOT
20690: IFFALSE 20694
// exit ;
20692: GO 20707
// DestroyUnit ( tmp [ 1 ] ) ;
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 1
20701: ARRAY
20702: PPUSH
20703: CALL_OW 65
// end ;
20707: PPOPN 1
20709: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20710: LD_EXP 39
20714: PUSH
20715: LD_EXP 77
20719: AND
20720: IFFALSE 20849
20722: GO 20724
20724: DISABLE
20725: LD_INT 0
20727: PPUSH
// begin uc_side := 0 ;
20728: LD_ADDR_OWVAR 20
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// uc_nation := nation_arabian ;
20736: LD_ADDR_OWVAR 21
20740: PUSH
20741: LD_INT 2
20743: ST_TO_ADDR
// hc_gallery :=  ;
20744: LD_ADDR_OWVAR 33
20748: PUSH
20749: LD_STRING 
20751: ST_TO_ADDR
// hc_name :=  ;
20752: LD_ADDR_OWVAR 26
20756: PUSH
20757: LD_STRING 
20759: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20760: LD_INT 1
20762: PPUSH
20763: LD_INT 11
20765: PPUSH
20766: LD_INT 10
20768: PPUSH
20769: CALL_OW 380
// un := CreateHuman ;
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: CALL_OW 44
20782: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20783: LD_VAR 0 1
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20795: LD_INT 35
20797: PPUSH
20798: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20802: LD_VAR 0 1
20806: PPUSH
20807: LD_INT 22
20809: PUSH
20810: LD_OWVAR 2
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: PPUSH
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 74
20833: PPUSH
20834: CALL_OW 115
// until IsDead ( un ) ;
20838: LD_VAR 0 1
20842: PPUSH
20843: CALL_OW 301
20847: IFFALSE 20795
// end ;
20849: PPOPN 1
20851: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20852: LD_EXP 39
20856: PUSH
20857: LD_EXP 79
20861: AND
20862: IFFALSE 20874
20864: GO 20866
20866: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20867: LD_STRING earthquake(getX(game), 0, 32)
20869: PPUSH
20870: CALL_OW 559
20874: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20875: LD_EXP 39
20879: PUSH
20880: LD_EXP 80
20884: AND
20885: IFFALSE 20976
20887: GO 20889
20889: DISABLE
20890: LD_INT 0
20892: PPUSH
// begin enable ;
20893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20894: LD_ADDR_VAR 0 1
20898: PUSH
20899: LD_INT 22
20901: PUSH
20902: LD_OWVAR 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 33
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: PPUSH
20936: CALL_OW 69
20940: ST_TO_ADDR
// if not tmp then
20941: LD_VAR 0 1
20945: NOT
20946: IFFALSE 20950
// exit ;
20948: GO 20976
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20950: LD_VAR 0 1
20954: PUSH
20955: LD_INT 1
20957: PPUSH
20958: LD_VAR 0 1
20962: PPUSH
20963: CALL_OW 12
20967: ARRAY
20968: PPUSH
20969: LD_INT 1
20971: PPUSH
20972: CALL_OW 234
// end ;
20976: PPOPN 1
20978: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20979: LD_EXP 39
20983: PUSH
20984: LD_EXP 81
20988: AND
20989: IFFALSE 21130
20991: GO 20993
20993: DISABLE
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
20998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_INT 22
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 25
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: ST_TO_ADDR
// if not tmp then
21035: LD_VAR 0 3
21039: NOT
21040: IFFALSE 21044
// exit ;
21042: GO 21130
// un := tmp [ rand ( 1 , tmp ) ] ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_VAR 0 3
21053: PUSH
21054: LD_INT 1
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: CALL_OW 12
21066: ARRAY
21067: ST_TO_ADDR
// if Crawls ( un ) then
21068: LD_VAR 0 2
21072: PPUSH
21073: CALL_OW 318
21077: IFFALSE 21088
// ComWalk ( un ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21088: LD_VAR 0 2
21092: PPUSH
21093: LD_INT 9
21095: PPUSH
21096: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21100: LD_INT 28
21102: PPUSH
21103: LD_OWVAR 2
21107: PPUSH
21108: LD_INT 2
21110: PPUSH
21111: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21115: LD_INT 29
21117: PPUSH
21118: LD_OWVAR 2
21122: PPUSH
21123: LD_INT 2
21125: PPUSH
21126: CALL_OW 322
// end ;
21130: PPOPN 3
21132: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21133: LD_EXP 39
21137: PUSH
21138: LD_EXP 82
21142: AND
21143: IFFALSE 21254
21145: GO 21147
21147: DISABLE
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
21152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 22
21160: PUSH
21161: LD_OWVAR 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: ST_TO_ADDR
// if not tmp then
21189: LD_VAR 0 3
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21254
// un := tmp [ rand ( 1 , tmp ) ] ;
21198: LD_ADDR_VAR 0 2
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 1
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: CALL_OW 12
21220: ARRAY
21221: ST_TO_ADDR
// if Crawls ( un ) then
21222: LD_VAR 0 2
21226: PPUSH
21227: CALL_OW 318
21231: IFFALSE 21242
// ComWalk ( un ) ;
21233: LD_VAR 0 2
21237: PPUSH
21238: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21242: LD_VAR 0 2
21246: PPUSH
21247: LD_INT 8
21249: PPUSH
21250: CALL_OW 336
// end ;
21254: PPOPN 3
21256: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21257: LD_EXP 39
21261: PUSH
21262: LD_EXP 83
21266: AND
21267: IFFALSE 21411
21269: GO 21271
21271: DISABLE
21272: LD_INT 0
21274: PPUSH
21275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21276: LD_ADDR_VAR 0 2
21280: PUSH
21281: LD_INT 22
21283: PUSH
21284: LD_OWVAR 2
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 21
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: LD_INT 34
21308: PUSH
21309: LD_INT 12
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 34
21318: PUSH
21319: LD_INT 51
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 34
21328: PUSH
21329: LD_INT 32
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: ST_TO_ADDR
// if not tmp then
21352: LD_VAR 0 2
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21411
// for i in tmp do
21361: LD_ADDR_VAR 0 1
21365: PUSH
21366: LD_VAR 0 2
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21409
// if GetCargo ( i , mat_artifact ) = 0 then
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 4
21381: PPUSH
21382: CALL_OW 289
21386: PUSH
21387: LD_INT 0
21389: EQUAL
21390: IFFALSE 21407
// SetCargo ( i , mat_siberit , 100 ) ;
21392: LD_VAR 0 1
21396: PPUSH
21397: LD_INT 3
21399: PPUSH
21400: LD_INT 100
21402: PPUSH
21403: CALL_OW 290
21407: GO 21371
21409: POP
21410: POP
// end ;
21411: PPOPN 2
21413: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21414: LD_EXP 39
21418: PUSH
21419: LD_EXP 84
21423: AND
21424: IFFALSE 21607
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: ST_TO_ADDR
// if not tmp then
21455: LD_VAR 0 2
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21607
// for i := 1 to 2 do
21464: LD_ADDR_VAR 0 1
21468: PUSH
21469: DOUBLE
21470: LD_INT 1
21472: DEC
21473: ST_TO_ADDR
21474: LD_INT 2
21476: PUSH
21477: FOR_TO
21478: IFFALSE 21605
// begin uc_side := your_side ;
21480: LD_ADDR_OWVAR 20
21484: PUSH
21485: LD_OWVAR 2
21489: ST_TO_ADDR
// uc_nation := nation_american ;
21490: LD_ADDR_OWVAR 21
21494: PUSH
21495: LD_INT 1
21497: ST_TO_ADDR
// vc_chassis := us_morphling ;
21498: LD_ADDR_OWVAR 37
21502: PUSH
21503: LD_INT 5
21505: ST_TO_ADDR
// vc_engine := engine_siberite ;
21506: LD_ADDR_OWVAR 39
21510: PUSH
21511: LD_INT 3
21513: ST_TO_ADDR
// vc_control := control_computer ;
21514: LD_ADDR_OWVAR 38
21518: PUSH
21519: LD_INT 3
21521: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21522: LD_ADDR_OWVAR 40
21526: PUSH
21527: LD_INT 10
21529: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21530: LD_VAR 0 2
21534: PUSH
21535: LD_INT 1
21537: ARRAY
21538: PPUSH
21539: CALL_OW 310
21543: NOT
21544: IFFALSE 21591
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21546: CALL_OW 45
21550: PPUSH
21551: LD_VAR 0 2
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: PPUSH
21560: CALL_OW 250
21564: PPUSH
21565: LD_VAR 0 2
21569: PUSH
21570: LD_INT 1
21572: ARRAY
21573: PPUSH
21574: CALL_OW 251
21578: PPUSH
21579: LD_INT 12
21581: PPUSH
21582: LD_INT 1
21584: PPUSH
21585: CALL_OW 50
21589: GO 21603
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21591: CALL_OW 45
21595: PPUSH
21596: LD_INT 1
21598: PPUSH
21599: CALL_OW 51
// end ;
21603: GO 21477
21605: POP
21606: POP
// end ;
21607: PPOPN 2
21609: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21610: LD_EXP 39
21614: PUSH
21615: LD_EXP 85
21619: AND
21620: IFFALSE 21842
21622: GO 21624
21624: DISABLE
21625: LD_INT 0
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21633: LD_ADDR_VAR 0 6
21637: PUSH
21638: LD_INT 22
21640: PUSH
21641: LD_OWVAR 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 21
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: LD_INT 23
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: ST_TO_ADDR
// if not tmp then
21687: LD_VAR 0 6
21691: NOT
21692: IFFALSE 21696
// exit ;
21694: GO 21842
// s1 := rand ( 1 , 4 ) ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_INT 1
21703: PPUSH
21704: LD_INT 4
21706: PPUSH
21707: CALL_OW 12
21711: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: LD_VAR 0 6
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: LD_VAR 0 2
21730: PPUSH
21731: CALL_OW 259
21735: ST_TO_ADDR
// if s1 = 1 then
21736: LD_VAR 0 2
21740: PUSH
21741: LD_INT 1
21743: EQUAL
21744: IFFALSE 21764
// s2 := rand ( 2 , 4 ) else
21746: LD_ADDR_VAR 0 3
21750: PUSH
21751: LD_INT 2
21753: PPUSH
21754: LD_INT 4
21756: PPUSH
21757: CALL_OW 12
21761: ST_TO_ADDR
21762: GO 21772
// s2 := 1 ;
21764: LD_ADDR_VAR 0 3
21768: PUSH
21769: LD_INT 1
21771: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21772: LD_ADDR_VAR 0 5
21776: PUSH
21777: LD_VAR 0 6
21781: PUSH
21782: LD_INT 1
21784: ARRAY
21785: PPUSH
21786: LD_VAR 0 3
21790: PPUSH
21791: CALL_OW 259
21795: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21796: LD_VAR 0 6
21800: PUSH
21801: LD_INT 1
21803: ARRAY
21804: PPUSH
21805: LD_VAR 0 2
21809: PPUSH
21810: LD_VAR 0 5
21814: PPUSH
21815: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21819: LD_VAR 0 6
21823: PUSH
21824: LD_INT 1
21826: ARRAY
21827: PPUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: LD_VAR 0 4
21837: PPUSH
21838: CALL_OW 237
// end ;
21842: PPOPN 6
21844: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21845: LD_EXP 39
21849: PUSH
21850: LD_EXP 86
21854: AND
21855: IFFALSE 21934
21857: GO 21859
21859: DISABLE
21860: LD_INT 0
21862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21863: LD_ADDR_VAR 0 1
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_OWVAR 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 30
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: ST_TO_ADDR
// if not tmp then
21899: LD_VAR 0 1
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 21934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21908: LD_VAR 0 1
21912: PUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 12
21925: ARRAY
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL_OW 234
// end ;
21934: PPOPN 1
21936: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21937: LD_EXP 39
21941: PUSH
21942: LD_EXP 87
21946: AND
21947: IFFALSE 22059
21949: GO 21951
21951: DISABLE
21952: LD_INT 0
21954: PPUSH
21955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_OWVAR 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 27
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 30
21988: PUSH
21989: LD_INT 26
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 30
21998: PUSH
21999: LD_INT 28
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PPUSH
22016: CALL_OW 69
22020: ST_TO_ADDR
// if not tmp then
22021: LD_VAR 0 2
22025: NOT
22026: IFFALSE 22030
// exit ;
22028: GO 22059
// for i in tmp do
22030: LD_ADDR_VAR 0 1
22034: PUSH
22035: LD_VAR 0 2
22039: PUSH
22040: FOR_IN
22041: IFFALSE 22057
// SetLives ( i , 1 ) ;
22043: LD_VAR 0 1
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 234
22055: GO 22040
22057: POP
22058: POP
// end ;
22059: PPOPN 2
22061: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22062: LD_EXP 39
22066: PUSH
22067: LD_EXP 88
22071: AND
22072: IFFALSE 22359
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
22080: PPUSH
22081: PPUSH
// begin i := rand ( 1 , 7 ) ;
22082: LD_ADDR_VAR 0 1
22086: PUSH
22087: LD_INT 1
22089: PPUSH
22090: LD_INT 7
22092: PPUSH
22093: CALL_OW 12
22097: ST_TO_ADDR
// case i of 1 :
22098: LD_VAR 0 1
22102: PUSH
22103: LD_INT 1
22105: DOUBLE
22106: EQUAL
22107: IFTRUE 22111
22109: GO 22121
22111: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22112: LD_STRING earthquake(getX(game), 0, 32)
22114: PPUSH
22115: CALL_OW 559
22119: GO 22359
22121: LD_INT 2
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22143
22129: POP
// begin ToLua ( displayStucuk(); ) ;
22130: LD_STRING displayStucuk();
22132: PPUSH
22133: CALL_OW 559
// ResetFog ;
22137: CALL_OW 335
// end ; 3 :
22141: GO 22359
22143: LD_INT 3
22145: DOUBLE
22146: EQUAL
22147: IFTRUE 22151
22149: GO 22255
22151: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22152: LD_ADDR_VAR 0 2
22156: PUSH
22157: LD_INT 22
22159: PUSH
22160: LD_OWVAR 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 25
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PPUSH
22183: CALL_OW 69
22187: ST_TO_ADDR
// if not tmp then
22188: LD_VAR 0 2
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 22359
// un := tmp [ rand ( 1 , tmp ) ] ;
22197: LD_ADDR_VAR 0 3
22201: PUSH
22202: LD_VAR 0 2
22206: PUSH
22207: LD_INT 1
22209: PPUSH
22210: LD_VAR 0 2
22214: PPUSH
22215: CALL_OW 12
22219: ARRAY
22220: ST_TO_ADDR
// if Crawls ( un ) then
22221: LD_VAR 0 3
22225: PPUSH
22226: CALL_OW 318
22230: IFFALSE 22241
// ComWalk ( un ) ;
22232: LD_VAR 0 3
22236: PPUSH
22237: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22241: LD_VAR 0 3
22245: PPUSH
22246: LD_INT 8
22248: PPUSH
22249: CALL_OW 336
// end ; 4 :
22253: GO 22359
22255: LD_INT 4
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22337
22263: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_INT 22
22271: PUSH
22272: LD_OWVAR 2
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 30
22283: PUSH
22284: LD_INT 29
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PPUSH
22295: CALL_OW 69
22299: ST_TO_ADDR
// if not tmp then
22300: LD_VAR 0 2
22304: NOT
22305: IFFALSE 22309
// exit ;
22307: GO 22359
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22309: LD_VAR 0 2
22313: PUSH
22314: LD_INT 1
22316: ARRAY
22317: PPUSH
22318: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22322: LD_VAR 0 2
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PPUSH
22331: CALL_OW 65
// end ; 5 .. 7 :
22335: GO 22359
22337: LD_INT 5
22339: DOUBLE
22340: GREATEREQUAL
22341: IFFALSE 22349
22343: LD_INT 7
22345: DOUBLE
22346: LESSEQUAL
22347: IFTRUE 22351
22349: GO 22358
22351: POP
// StreamSibBomb ; end ;
22352: CALL 18596 0 0
22356: GO 22359
22358: POP
// end ;
22359: PPOPN 3
22361: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22362: LD_EXP 39
22366: PUSH
22367: LD_EXP 89
22371: AND
22372: IFFALSE 22528
22374: GO 22376
22376: DISABLE
22377: LD_INT 0
22379: PPUSH
22380: PPUSH
22381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22382: LD_ADDR_VAR 0 2
22386: PUSH
22387: LD_INT 81
22389: PUSH
22390: LD_OWVAR 2
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 21
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 21
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 69
22435: ST_TO_ADDR
// if not tmp then
22436: LD_VAR 0 2
22440: NOT
22441: IFFALSE 22445
// exit ;
22443: GO 22528
// p := 0 ;
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_INT 0
22452: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22453: LD_INT 35
22455: PPUSH
22456: CALL_OW 67
// p := p + 1 ;
22460: LD_ADDR_VAR 0 3
22464: PUSH
22465: LD_VAR 0 3
22469: PUSH
22470: LD_INT 1
22472: PLUS
22473: ST_TO_ADDR
// for i in tmp do
22474: LD_ADDR_VAR 0 1
22478: PUSH
22479: LD_VAR 0 2
22483: PUSH
22484: FOR_IN
22485: IFFALSE 22516
// if GetLives ( i ) < 1000 then
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 256
22496: PUSH
22497: LD_INT 1000
22499: LESS
22500: IFFALSE 22514
// SetLives ( i , 1000 ) ;
22502: LD_VAR 0 1
22506: PPUSH
22507: LD_INT 1000
22509: PPUSH
22510: CALL_OW 234
22514: GO 22484
22516: POP
22517: POP
// until p > 20 ;
22518: LD_VAR 0 3
22522: PUSH
22523: LD_INT 20
22525: GREATER
22526: IFFALSE 22453
// end ;
22528: PPOPN 3
22530: END
// every 0 0$1 trigger StreamModeActive and sTime do
22531: LD_EXP 39
22535: PUSH
22536: LD_EXP 90
22540: AND
22541: IFFALSE 22576
22543: GO 22545
22545: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22546: LD_INT 28
22548: PPUSH
22549: LD_OWVAR 2
22553: PPUSH
22554: LD_INT 2
22556: PPUSH
22557: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22561: LD_INT 30
22563: PPUSH
22564: LD_OWVAR 2
22568: PPUSH
22569: LD_INT 2
22571: PPUSH
22572: CALL_OW 322
// end ;
22576: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22577: LD_EXP 39
22581: PUSH
22582: LD_EXP 91
22586: AND
22587: IFFALSE 22708
22589: GO 22591
22591: DISABLE
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22596: LD_ADDR_VAR 0 2
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_OWVAR 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 21
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: ST_TO_ADDR
// if not tmp then
22650: LD_VAR 0 2
22654: NOT
22655: IFFALSE 22659
// exit ;
22657: GO 22708
// for i in tmp do
22659: LD_ADDR_VAR 0 1
22663: PUSH
22664: LD_VAR 0 2
22668: PUSH
22669: FOR_IN
22670: IFFALSE 22706
// begin if Crawls ( i ) then
22672: LD_VAR 0 1
22676: PPUSH
22677: CALL_OW 318
22681: IFFALSE 22692
// ComWalk ( i ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL_OW 138
// SetClass ( i , 2 ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: LD_INT 2
22699: PPUSH
22700: CALL_OW 336
// end ;
22704: GO 22669
22706: POP
22707: POP
// end ;
22708: PPOPN 2
22710: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22711: LD_EXP 39
22715: PUSH
22716: LD_EXP 92
22720: AND
22721: IFFALSE 23009
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22731: LD_OWVAR 2
22735: PPUSH
22736: LD_INT 9
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22749: LD_INT 9
22751: PPUSH
22752: LD_OWVAR 2
22756: PPUSH
22757: CALL_OW 343
// uc_side := 9 ;
22761: LD_ADDR_OWVAR 20
22765: PUSH
22766: LD_INT 9
22768: ST_TO_ADDR
// uc_nation := 2 ;
22769: LD_ADDR_OWVAR 21
22773: PUSH
22774: LD_INT 2
22776: ST_TO_ADDR
// hc_name := Dark Warrior ;
22777: LD_ADDR_OWVAR 26
22781: PUSH
22782: LD_STRING Dark Warrior
22784: ST_TO_ADDR
// hc_gallery :=  ;
22785: LD_ADDR_OWVAR 33
22789: PUSH
22790: LD_STRING 
22792: ST_TO_ADDR
// hc_noskilllimit := true ;
22793: LD_ADDR_OWVAR 76
22797: PUSH
22798: LD_INT 1
22800: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22801: LD_ADDR_OWVAR 31
22805: PUSH
22806: LD_INT 30
22808: PUSH
22809: LD_INT 30
22811: PUSH
22812: LD_INT 30
22814: PUSH
22815: LD_INT 30
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: ST_TO_ADDR
// un := CreateHuman ;
22824: LD_ADDR_VAR 0 3
22828: PUSH
22829: CALL_OW 44
22833: ST_TO_ADDR
// hc_noskilllimit := false ;
22834: LD_ADDR_OWVAR 76
22838: PUSH
22839: LD_INT 0
22841: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22842: LD_VAR 0 3
22846: PPUSH
22847: LD_INT 1
22849: PPUSH
22850: CALL_OW 51
// ToLua ( playRanger() ) ;
22854: LD_STRING playRanger()
22856: PPUSH
22857: CALL_OW 559
// p := 0 ;
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 0
22868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22869: LD_INT 35
22871: PPUSH
22872: CALL_OW 67
// p := p + 1 ;
22876: LD_ADDR_VAR 0 2
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: LD_INT 1
22888: PLUS
22889: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22890: LD_VAR 0 3
22894: PPUSH
22895: CALL_OW 256
22899: PUSH
22900: LD_INT 1000
22902: LESS
22903: IFFALSE 22917
// SetLives ( un , 1000 ) ;
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_INT 1000
22912: PPUSH
22913: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22917: LD_VAR 0 3
22921: PPUSH
22922: LD_INT 81
22924: PUSH
22925: LD_OWVAR 2
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 91
22936: PUSH
22937: LD_VAR 0 3
22941: PUSH
22942: LD_INT 30
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 69
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: CALL_OW 74
22968: PPUSH
22969: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22973: LD_VAR 0 2
22977: PUSH
22978: LD_INT 80
22980: GREATER
22981: PUSH
22982: LD_VAR 0 3
22986: PPUSH
22987: CALL_OW 301
22991: OR
22992: IFFALSE 22869
// if un then
22994: LD_VAR 0 3
22998: IFFALSE 23009
// RemoveUnit ( un ) ;
23000: LD_VAR 0 3
23004: PPUSH
23005: CALL_OW 64
// end ;
23009: PPOPN 3
23011: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23012: LD_EXP 93
23016: IFFALSE 23132
23018: GO 23020
23020: DISABLE
23021: LD_INT 0
23023: PPUSH
23024: PPUSH
23025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23026: LD_ADDR_VAR 0 2
23030: PUSH
23031: LD_INT 81
23033: PUSH
23034: LD_OWVAR 2
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PPUSH
23057: CALL_OW 69
23061: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23062: LD_STRING playComputer()
23064: PPUSH
23065: CALL_OW 559
// if not tmp then
23069: LD_VAR 0 2
23073: NOT
23074: IFFALSE 23078
// exit ;
23076: GO 23132
// for i in tmp do
23078: LD_ADDR_VAR 0 1
23082: PUSH
23083: LD_VAR 0 2
23087: PUSH
23088: FOR_IN
23089: IFFALSE 23130
// for j := 1 to 4 do
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: DOUBLE
23097: LD_INT 1
23099: DEC
23100: ST_TO_ADDR
23101: LD_INT 4
23103: PUSH
23104: FOR_TO
23105: IFFALSE 23126
// SetSkill ( i , j , 10 ) ;
23107: LD_VAR 0 1
23111: PPUSH
23112: LD_VAR 0 3
23116: PPUSH
23117: LD_INT 10
23119: PPUSH
23120: CALL_OW 237
23124: GO 23104
23126: POP
23127: POP
23128: GO 23088
23130: POP
23131: POP
// end ;
23132: PPOPN 3
23134: END
// every 0 0$1 trigger s30 do var i , tmp ;
23135: LD_EXP 94
23139: IFFALSE 23208
23141: GO 23143
23143: DISABLE
23144: LD_INT 0
23146: PPUSH
23147: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23148: LD_ADDR_VAR 0 2
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_OWVAR 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PPUSH
23165: CALL_OW 69
23169: ST_TO_ADDR
// if not tmp then
23170: LD_VAR 0 2
23174: NOT
23175: IFFALSE 23179
// exit ;
23177: GO 23208
// for i in tmp do
23179: LD_ADDR_VAR 0 1
23183: PUSH
23184: LD_VAR 0 2
23188: PUSH
23189: FOR_IN
23190: IFFALSE 23206
// SetLives ( i , 300 ) ;
23192: LD_VAR 0 1
23196: PPUSH
23197: LD_INT 300
23199: PPUSH
23200: CALL_OW 234
23204: GO 23189
23206: POP
23207: POP
// end ;
23208: PPOPN 2
23210: END
// every 0 0$1 trigger s60 do var i , tmp ;
23211: LD_EXP 95
23215: IFFALSE 23284
23217: GO 23219
23219: DISABLE
23220: LD_INT 0
23222: PPUSH
23223: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23224: LD_ADDR_VAR 0 2
23228: PUSH
23229: LD_INT 22
23231: PUSH
23232: LD_OWVAR 2
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PPUSH
23241: CALL_OW 69
23245: ST_TO_ADDR
// if not tmp then
23246: LD_VAR 0 2
23250: NOT
23251: IFFALSE 23255
// exit ;
23253: GO 23284
// for i in tmp do
23255: LD_ADDR_VAR 0 1
23259: PUSH
23260: LD_VAR 0 2
23264: PUSH
23265: FOR_IN
23266: IFFALSE 23282
// SetLives ( i , 600 ) ;
23268: LD_VAR 0 1
23272: PPUSH
23273: LD_INT 600
23275: PPUSH
23276: CALL_OW 234
23280: GO 23265
23282: POP
23283: POP
// end ;
23284: PPOPN 2
23286: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23287: LD_INT 0
23289: PPUSH
// case cmd of 301 :
23290: LD_VAR 0 1
23294: PUSH
23295: LD_INT 301
23297: DOUBLE
23298: EQUAL
23299: IFTRUE 23303
23301: GO 23335
23303: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23304: LD_VAR 0 6
23308: PPUSH
23309: LD_VAR 0 7
23313: PPUSH
23314: LD_VAR 0 8
23318: PPUSH
23319: LD_VAR 0 4
23323: PPUSH
23324: LD_VAR 0 5
23328: PPUSH
23329: CALL 24536 0 5
23333: GO 23456
23335: LD_INT 302
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 23380
23343: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23344: LD_VAR 0 6
23348: PPUSH
23349: LD_VAR 0 7
23353: PPUSH
23354: LD_VAR 0 8
23358: PPUSH
23359: LD_VAR 0 9
23363: PPUSH
23364: LD_VAR 0 4
23368: PPUSH
23369: LD_VAR 0 5
23373: PPUSH
23374: CALL 24627 0 6
23378: GO 23456
23380: LD_INT 303
23382: DOUBLE
23383: EQUAL
23384: IFTRUE 23388
23386: GO 23425
23388: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23389: LD_VAR 0 6
23393: PPUSH
23394: LD_VAR 0 7
23398: PPUSH
23399: LD_VAR 0 8
23403: PPUSH
23404: LD_VAR 0 9
23408: PPUSH
23409: LD_VAR 0 4
23413: PPUSH
23414: LD_VAR 0 5
23418: PPUSH
23419: CALL 23461 0 6
23423: GO 23456
23425: LD_INT 304
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23455
23433: POP
// hHackTeleport ( unit , x , y ) ; end ;
23434: LD_VAR 0 2
23438: PPUSH
23439: LD_VAR 0 4
23443: PPUSH
23444: LD_VAR 0 5
23448: PPUSH
23449: CALL 25220 0 3
23453: GO 23456
23455: POP
// end ;
23456: LD_VAR 0 12
23460: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23461: LD_INT 0
23463: PPUSH
23464: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 1
23472: LESS
23473: PUSH
23474: LD_VAR 0 1
23478: PUSH
23479: LD_INT 3
23481: GREATER
23482: OR
23483: PUSH
23484: LD_VAR 0 5
23488: PPUSH
23489: LD_VAR 0 6
23493: PPUSH
23494: CALL_OW 428
23498: OR
23499: IFFALSE 23503
// exit ;
23501: GO 24223
// uc_side := your_side ;
23503: LD_ADDR_OWVAR 20
23507: PUSH
23508: LD_OWVAR 2
23512: ST_TO_ADDR
// uc_nation := nation ;
23513: LD_ADDR_OWVAR 21
23517: PUSH
23518: LD_VAR 0 1
23522: ST_TO_ADDR
// bc_level = 1 ;
23523: LD_ADDR_OWVAR 43
23527: PUSH
23528: LD_INT 1
23530: ST_TO_ADDR
// case btype of 1 :
23531: LD_VAR 0 2
23535: PUSH
23536: LD_INT 1
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23555
23544: POP
// bc_type := b_depot ; 2 :
23545: LD_ADDR_OWVAR 42
23549: PUSH
23550: LD_INT 0
23552: ST_TO_ADDR
23553: GO 24167
23555: LD_INT 2
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23574
23563: POP
// bc_type := b_warehouse ; 3 :
23564: LD_ADDR_OWVAR 42
23568: PUSH
23569: LD_INT 1
23571: ST_TO_ADDR
23572: GO 24167
23574: LD_INT 3
23576: DOUBLE
23577: EQUAL
23578: IFTRUE 23582
23580: GO 23593
23582: POP
// bc_type := b_lab ; 4 .. 9 :
23583: LD_ADDR_OWVAR 42
23587: PUSH
23588: LD_INT 6
23590: ST_TO_ADDR
23591: GO 24167
23593: LD_INT 4
23595: DOUBLE
23596: GREATEREQUAL
23597: IFFALSE 23605
23599: LD_INT 9
23601: DOUBLE
23602: LESSEQUAL
23603: IFTRUE 23607
23605: GO 23659
23607: POP
// begin bc_type := b_lab_half ;
23608: LD_ADDR_OWVAR 42
23612: PUSH
23613: LD_INT 7
23615: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23616: LD_ADDR_OWVAR 44
23620: PUSH
23621: LD_INT 10
23623: PUSH
23624: LD_INT 11
23626: PUSH
23627: LD_INT 12
23629: PUSH
23630: LD_INT 15
23632: PUSH
23633: LD_INT 14
23635: PUSH
23636: LD_INT 13
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: LD_VAR 0 2
23651: PUSH
23652: LD_INT 3
23654: MINUS
23655: ARRAY
23656: ST_TO_ADDR
// end ; 10 .. 13 :
23657: GO 24167
23659: LD_INT 10
23661: DOUBLE
23662: GREATEREQUAL
23663: IFFALSE 23671
23665: LD_INT 13
23667: DOUBLE
23668: LESSEQUAL
23669: IFTRUE 23673
23671: GO 23750
23673: POP
// begin bc_type := b_lab_full ;
23674: LD_ADDR_OWVAR 42
23678: PUSH
23679: LD_INT 8
23681: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23682: LD_ADDR_OWVAR 44
23686: PUSH
23687: LD_INT 10
23689: PUSH
23690: LD_INT 12
23692: PUSH
23693: LD_INT 14
23695: PUSH
23696: LD_INT 13
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: LD_INT 9
23712: MINUS
23713: ARRAY
23714: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23715: LD_ADDR_OWVAR 45
23719: PUSH
23720: LD_INT 11
23722: PUSH
23723: LD_INT 15
23725: PUSH
23726: LD_INT 12
23728: PUSH
23729: LD_INT 15
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: LD_VAR 0 2
23742: PUSH
23743: LD_INT 9
23745: MINUS
23746: ARRAY
23747: ST_TO_ADDR
// end ; 14 :
23748: GO 24167
23750: LD_INT 14
23752: DOUBLE
23753: EQUAL
23754: IFTRUE 23758
23756: GO 23769
23758: POP
// bc_type := b_workshop ; 15 :
23759: LD_ADDR_OWVAR 42
23763: PUSH
23764: LD_INT 2
23766: ST_TO_ADDR
23767: GO 24167
23769: LD_INT 15
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 23788
23777: POP
// bc_type := b_factory ; 16 :
23778: LD_ADDR_OWVAR 42
23782: PUSH
23783: LD_INT 3
23785: ST_TO_ADDR
23786: GO 24167
23788: LD_INT 16
23790: DOUBLE
23791: EQUAL
23792: IFTRUE 23796
23794: GO 23807
23796: POP
// bc_type := b_ext_gun ; 17 :
23797: LD_ADDR_OWVAR 42
23801: PUSH
23802: LD_INT 17
23804: ST_TO_ADDR
23805: GO 24167
23807: LD_INT 17
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23815
23813: GO 23843
23815: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23816: LD_ADDR_OWVAR 42
23820: PUSH
23821: LD_INT 19
23823: PUSH
23824: LD_INT 23
23826: PUSH
23827: LD_INT 19
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: PUSH
23835: LD_VAR 0 1
23839: ARRAY
23840: ST_TO_ADDR
23841: GO 24167
23843: LD_INT 18
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23851
23849: GO 23862
23851: POP
// bc_type := b_ext_radar ; 19 :
23852: LD_ADDR_OWVAR 42
23856: PUSH
23857: LD_INT 20
23859: ST_TO_ADDR
23860: GO 24167
23862: LD_INT 19
23864: DOUBLE
23865: EQUAL
23866: IFTRUE 23870
23868: GO 23881
23870: POP
// bc_type := b_ext_radio ; 20 :
23871: LD_ADDR_OWVAR 42
23875: PUSH
23876: LD_INT 22
23878: ST_TO_ADDR
23879: GO 24167
23881: LD_INT 20
23883: DOUBLE
23884: EQUAL
23885: IFTRUE 23889
23887: GO 23900
23889: POP
// bc_type := b_ext_siberium ; 21 :
23890: LD_ADDR_OWVAR 42
23894: PUSH
23895: LD_INT 21
23897: ST_TO_ADDR
23898: GO 24167
23900: LD_INT 21
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 23919
23908: POP
// bc_type := b_ext_computer ; 22 :
23909: LD_ADDR_OWVAR 42
23913: PUSH
23914: LD_INT 24
23916: ST_TO_ADDR
23917: GO 24167
23919: LD_INT 22
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23938
23927: POP
// bc_type := b_ext_track ; 23 :
23928: LD_ADDR_OWVAR 42
23932: PUSH
23933: LD_INT 16
23935: ST_TO_ADDR
23936: GO 24167
23938: LD_INT 23
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23957
23946: POP
// bc_type := b_ext_laser ; 24 :
23947: LD_ADDR_OWVAR 42
23951: PUSH
23952: LD_INT 25
23954: ST_TO_ADDR
23955: GO 24167
23957: LD_INT 24
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23976
23965: POP
// bc_type := b_control_tower ; 25 :
23966: LD_ADDR_OWVAR 42
23970: PUSH
23971: LD_INT 36
23973: ST_TO_ADDR
23974: GO 24167
23976: LD_INT 25
23978: DOUBLE
23979: EQUAL
23980: IFTRUE 23984
23982: GO 23995
23984: POP
// bc_type := b_breastwork ; 26 :
23985: LD_ADDR_OWVAR 42
23989: PUSH
23990: LD_INT 31
23992: ST_TO_ADDR
23993: GO 24167
23995: LD_INT 26
23997: DOUBLE
23998: EQUAL
23999: IFTRUE 24003
24001: GO 24014
24003: POP
// bc_type := b_bunker ; 27 :
24004: LD_ADDR_OWVAR 42
24008: PUSH
24009: LD_INT 32
24011: ST_TO_ADDR
24012: GO 24167
24014: LD_INT 27
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24033
24022: POP
// bc_type := b_turret ; 28 :
24023: LD_ADDR_OWVAR 42
24027: PUSH
24028: LD_INT 33
24030: ST_TO_ADDR
24031: GO 24167
24033: LD_INT 28
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24052
24041: POP
// bc_type := b_armoury ; 29 :
24042: LD_ADDR_OWVAR 42
24046: PUSH
24047: LD_INT 4
24049: ST_TO_ADDR
24050: GO 24167
24052: LD_INT 29
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24071
24060: POP
// bc_type := b_barracks ; 30 :
24061: LD_ADDR_OWVAR 42
24065: PUSH
24066: LD_INT 5
24068: ST_TO_ADDR
24069: GO 24167
24071: LD_INT 30
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24090
24079: POP
// bc_type := b_solar_power ; 31 :
24080: LD_ADDR_OWVAR 42
24084: PUSH
24085: LD_INT 27
24087: ST_TO_ADDR
24088: GO 24167
24090: LD_INT 31
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24109
24098: POP
// bc_type := b_oil_power ; 32 :
24099: LD_ADDR_OWVAR 42
24103: PUSH
24104: LD_INT 26
24106: ST_TO_ADDR
24107: GO 24167
24109: LD_INT 32
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24128
24117: POP
// bc_type := b_siberite_power ; 33 :
24118: LD_ADDR_OWVAR 42
24122: PUSH
24123: LD_INT 28
24125: ST_TO_ADDR
24126: GO 24167
24128: LD_INT 33
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24147
24136: POP
// bc_type := b_oil_mine ; 34 :
24137: LD_ADDR_OWVAR 42
24141: PUSH
24142: LD_INT 29
24144: ST_TO_ADDR
24145: GO 24167
24147: LD_INT 34
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24166
24155: POP
// bc_type := b_siberite_mine ; end ;
24156: LD_ADDR_OWVAR 42
24160: PUSH
24161: LD_INT 30
24163: ST_TO_ADDR
24164: GO 24167
24166: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24167: LD_ADDR_VAR 0 8
24171: PUSH
24172: LD_VAR 0 5
24176: PPUSH
24177: LD_VAR 0 6
24181: PPUSH
24182: LD_VAR 0 3
24186: PPUSH
24187: CALL_OW 47
24191: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24192: LD_OWVAR 42
24196: PUSH
24197: LD_INT 32
24199: PUSH
24200: LD_INT 33
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: IN
24207: IFFALSE 24223
// PlaceWeaponTurret ( b , weapon ) ;
24209: LD_VAR 0 8
24213: PPUSH
24214: LD_VAR 0 4
24218: PPUSH
24219: CALL_OW 431
// end ;
24223: LD_VAR 0 7
24227: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24228: LD_INT 0
24230: PPUSH
24231: PPUSH
24232: PPUSH
24233: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24234: LD_ADDR_VAR 0 4
24238: PUSH
24239: LD_INT 22
24241: PUSH
24242: LD_OWVAR 2
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 30
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PPUSH
24283: CALL_OW 69
24287: ST_TO_ADDR
// if not tmp then
24288: LD_VAR 0 4
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24356
// for i in tmp do
24297: LD_ADDR_VAR 0 2
24301: PUSH
24302: LD_VAR 0 4
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24354
// for j = 1 to 3 do
24310: LD_ADDR_VAR 0 3
24314: PUSH
24315: DOUBLE
24316: LD_INT 1
24318: DEC
24319: ST_TO_ADDR
24320: LD_INT 3
24322: PUSH
24323: FOR_TO
24324: IFFALSE 24350
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24326: LD_VAR 0 2
24330: PPUSH
24331: CALL_OW 274
24335: PPUSH
24336: LD_VAR 0 3
24340: PPUSH
24341: LD_INT 99999
24343: PPUSH
24344: CALL_OW 277
24348: GO 24323
24350: POP
24351: POP
24352: GO 24307
24354: POP
24355: POP
// end ;
24356: LD_VAR 0 1
24360: RET
// export function hHackSetLevel10 ; var i , j ; begin
24361: LD_INT 0
24363: PPUSH
24364: PPUSH
24365: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24366: LD_ADDR_VAR 0 2
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: PUSH
24386: FOR_IN
24387: IFFALSE 24439
// if IsSelected ( i ) then
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 306
24398: IFFALSE 24437
// begin for j := 1 to 4 do
24400: LD_ADDR_VAR 0 3
24404: PUSH
24405: DOUBLE
24406: LD_INT 1
24408: DEC
24409: ST_TO_ADDR
24410: LD_INT 4
24412: PUSH
24413: FOR_TO
24414: IFFALSE 24435
// SetSkill ( i , j , 10 ) ;
24416: LD_VAR 0 2
24420: PPUSH
24421: LD_VAR 0 3
24425: PPUSH
24426: LD_INT 10
24428: PPUSH
24429: CALL_OW 237
24433: GO 24413
24435: POP
24436: POP
// end ;
24437: GO 24386
24439: POP
24440: POP
// end ;
24441: LD_VAR 0 1
24445: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24446: LD_INT 0
24448: PPUSH
24449: PPUSH
24450: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24451: LD_ADDR_VAR 0 2
24455: PUSH
24456: LD_INT 22
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 21
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PPUSH
24482: CALL_OW 69
24486: PUSH
24487: FOR_IN
24488: IFFALSE 24529
// begin for j := 1 to 4 do
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_INT 4
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24525
// SetSkill ( i , j , 10 ) ;
24506: LD_VAR 0 2
24510: PPUSH
24511: LD_VAR 0 3
24515: PPUSH
24516: LD_INT 10
24518: PPUSH
24519: CALL_OW 237
24523: GO 24503
24525: POP
24526: POP
// end ;
24527: GO 24487
24529: POP
24530: POP
// end ;
24531: LD_VAR 0 1
24535: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24536: LD_INT 0
24538: PPUSH
// uc_side := your_side ;
24539: LD_ADDR_OWVAR 20
24543: PUSH
24544: LD_OWVAR 2
24548: ST_TO_ADDR
// uc_nation := nation ;
24549: LD_ADDR_OWVAR 21
24553: PUSH
24554: LD_VAR 0 1
24558: ST_TO_ADDR
// InitHc ;
24559: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24563: LD_INT 0
24565: PPUSH
24566: LD_VAR 0 2
24570: PPUSH
24571: LD_VAR 0 3
24575: PPUSH
24576: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24580: LD_VAR 0 4
24584: PPUSH
24585: LD_VAR 0 5
24589: PPUSH
24590: CALL_OW 428
24594: PUSH
24595: LD_INT 0
24597: EQUAL
24598: IFFALSE 24622
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24600: CALL_OW 44
24604: PPUSH
24605: LD_VAR 0 4
24609: PPUSH
24610: LD_VAR 0 5
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: CALL_OW 48
// end ;
24622: LD_VAR 0 6
24626: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
// uc_side := your_side ;
24631: LD_ADDR_OWVAR 20
24635: PUSH
24636: LD_OWVAR 2
24640: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24641: LD_VAR 0 1
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: IN
24668: IFFALSE 24680
// uc_nation := nation_american else
24670: LD_ADDR_OWVAR 21
24674: PUSH
24675: LD_INT 1
24677: ST_TO_ADDR
24678: GO 24723
// if chassis in [ 11 , 12 , 13 , 14 ] then
24680: LD_VAR 0 1
24684: PUSH
24685: LD_INT 11
24687: PUSH
24688: LD_INT 12
24690: PUSH
24691: LD_INT 13
24693: PUSH
24694: LD_INT 14
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: IN
24703: IFFALSE 24715
// uc_nation := nation_arabian else
24705: LD_ADDR_OWVAR 21
24709: PUSH
24710: LD_INT 2
24712: ST_TO_ADDR
24713: GO 24723
// uc_nation := nation_russian ;
24715: LD_ADDR_OWVAR 21
24719: PUSH
24720: LD_INT 3
24722: ST_TO_ADDR
// vc_chassis := chassis ;
24723: LD_ADDR_OWVAR 37
24727: PUSH
24728: LD_VAR 0 1
24732: ST_TO_ADDR
// vc_engine := engine ;
24733: LD_ADDR_OWVAR 39
24737: PUSH
24738: LD_VAR 0 2
24742: ST_TO_ADDR
// vc_control := control ;
24743: LD_ADDR_OWVAR 38
24747: PUSH
24748: LD_VAR 0 3
24752: ST_TO_ADDR
// vc_weapon := weapon ;
24753: LD_ADDR_OWVAR 40
24757: PUSH
24758: LD_VAR 0 4
24762: ST_TO_ADDR
// un := CreateVehicle ;
24763: LD_ADDR_VAR 0 8
24767: PUSH
24768: CALL_OW 45
24772: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24773: LD_VAR 0 8
24777: PPUSH
24778: LD_INT 0
24780: PPUSH
24781: LD_INT 5
24783: PPUSH
24784: CALL_OW 12
24788: PPUSH
24789: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24793: LD_VAR 0 8
24797: PPUSH
24798: LD_VAR 0 5
24802: PPUSH
24803: LD_VAR 0 6
24807: PPUSH
24808: LD_INT 1
24810: PPUSH
24811: CALL_OW 48
// end ;
24815: LD_VAR 0 7
24819: RET
// export hInvincible ; every 1 do
24820: GO 24822
24822: DISABLE
// hInvincible := [ ] ;
24823: LD_ADDR_EXP 96
24827: PUSH
24828: EMPTY
24829: ST_TO_ADDR
24830: END
// every 10 do var i ;
24831: GO 24833
24833: DISABLE
24834: LD_INT 0
24836: PPUSH
// begin enable ;
24837: ENABLE
// if not hInvincible then
24838: LD_EXP 96
24842: NOT
24843: IFFALSE 24847
// exit ;
24845: GO 24891
// for i in hInvincible do
24847: LD_ADDR_VAR 0 1
24851: PUSH
24852: LD_EXP 96
24856: PUSH
24857: FOR_IN
24858: IFFALSE 24889
// if GetLives ( i ) < 1000 then
24860: LD_VAR 0 1
24864: PPUSH
24865: CALL_OW 256
24869: PUSH
24870: LD_INT 1000
24872: LESS
24873: IFFALSE 24887
// SetLives ( i , 1000 ) ;
24875: LD_VAR 0 1
24879: PPUSH
24880: LD_INT 1000
24882: PPUSH
24883: CALL_OW 234
24887: GO 24857
24889: POP
24890: POP
// end ;
24891: PPOPN 1
24893: END
// export function hHackInvincible ; var i ; begin
24894: LD_INT 0
24896: PPUSH
24897: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 21
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 21
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: PPUSH
24931: CALL_OW 69
24935: PUSH
24936: FOR_IN
24937: IFFALSE 24998
// if IsSelected ( i ) then
24939: LD_VAR 0 2
24943: PPUSH
24944: CALL_OW 306
24948: IFFALSE 24996
// begin if i in hInvincible then
24950: LD_VAR 0 2
24954: PUSH
24955: LD_EXP 96
24959: IN
24960: IFFALSE 24980
// hInvincible := hInvincible diff i else
24962: LD_ADDR_EXP 96
24966: PUSH
24967: LD_EXP 96
24971: PUSH
24972: LD_VAR 0 2
24976: DIFF
24977: ST_TO_ADDR
24978: GO 24996
// hInvincible := hInvincible union i ;
24980: LD_ADDR_EXP 96
24984: PUSH
24985: LD_EXP 96
24989: PUSH
24990: LD_VAR 0 2
24994: UNION
24995: ST_TO_ADDR
// end ;
24996: GO 24936
24998: POP
24999: POP
// end ;
25000: LD_VAR 0 1
25004: RET
// export function hHackInvisible ; var i , j ; begin
25005: LD_INT 0
25007: PPUSH
25008: PPUSH
25009: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25010: LD_ADDR_VAR 0 2
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 69
25029: PUSH
25030: FOR_IN
25031: IFFALSE 25055
// if IsSelected ( i ) then
25033: LD_VAR 0 2
25037: PPUSH
25038: CALL_OW 306
25042: IFFALSE 25053
// ComForceInvisible ( i ) ;
25044: LD_VAR 0 2
25048: PPUSH
25049: CALL_OW 496
25053: GO 25030
25055: POP
25056: POP
// end ;
25057: LD_VAR 0 1
25061: RET
// export function hHackChangeYourSide ; begin
25062: LD_INT 0
25064: PPUSH
// if your_side = 8 then
25065: LD_OWVAR 2
25069: PUSH
25070: LD_INT 8
25072: EQUAL
25073: IFFALSE 25085
// your_side := 0 else
25075: LD_ADDR_OWVAR 2
25079: PUSH
25080: LD_INT 0
25082: ST_TO_ADDR
25083: GO 25099
// your_side := your_side + 1 ;
25085: LD_ADDR_OWVAR 2
25089: PUSH
25090: LD_OWVAR 2
25094: PUSH
25095: LD_INT 1
25097: PLUS
25098: ST_TO_ADDR
// end ;
25099: LD_VAR 0 1
25103: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25104: LD_INT 0
25106: PPUSH
25107: PPUSH
25108: PPUSH
// for i in all_units do
25109: LD_ADDR_VAR 0 2
25113: PUSH
25114: LD_OWVAR 3
25118: PUSH
25119: FOR_IN
25120: IFFALSE 25198
// if IsSelected ( i ) then
25122: LD_VAR 0 2
25126: PPUSH
25127: CALL_OW 306
25131: IFFALSE 25196
// begin j := GetSide ( i ) ;
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_VAR 0 2
25142: PPUSH
25143: CALL_OW 255
25147: ST_TO_ADDR
// if j = 8 then
25148: LD_VAR 0 3
25152: PUSH
25153: LD_INT 8
25155: EQUAL
25156: IFFALSE 25168
// j := 0 else
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_INT 0
25165: ST_TO_ADDR
25166: GO 25182
// j := j + 1 ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_VAR 0 3
25177: PUSH
25178: LD_INT 1
25180: PLUS
25181: ST_TO_ADDR
// SetSide ( i , j ) ;
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: CALL_OW 235
// end ;
25196: GO 25119
25198: POP
25199: POP
// end ;
25200: LD_VAR 0 1
25204: RET
// export function hHackFog ; begin
25205: LD_INT 0
25207: PPUSH
// FogOff ( true ) ;
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 344
// end ;
25215: LD_VAR 0 1
25219: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25220: LD_INT 0
25222: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25223: LD_VAR 0 1
25227: PPUSH
25228: LD_VAR 0 2
25232: PPUSH
25233: LD_VAR 0 3
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: LD_INT 1
25243: PPUSH
25244: CALL_OW 483
// CenterOnXY ( x , y ) ;
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_VAR 0 3
25257: PPUSH
25258: CALL_OW 84
// end ;
25262: LD_VAR 0 4
25266: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25267: LD_INT 0
25269: PPUSH
25270: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25271: LD_VAR 0 1
25275: NOT
25276: PUSH
25277: LD_VAR 0 2
25281: PPUSH
25282: LD_VAR 0 3
25286: PPUSH
25287: CALL_OW 488
25291: NOT
25292: OR
25293: PUSH
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 266
25303: PUSH
25304: LD_INT 3
25306: NONEQUAL
25307: PUSH
25308: LD_VAR 0 1
25312: PPUSH
25313: CALL_OW 247
25317: PUSH
25318: LD_INT 1
25320: EQUAL
25321: NOT
25322: AND
25323: OR
25324: IFFALSE 25328
// exit ;
25326: GO 25477
// if GetType ( factory ) = unit_human then
25328: LD_VAR 0 1
25332: PPUSH
25333: CALL_OW 247
25337: PUSH
25338: LD_INT 1
25340: EQUAL
25341: IFFALSE 25358
// factory := IsInUnit ( factory ) ;
25343: LD_ADDR_VAR 0 1
25347: PUSH
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 310
25357: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25358: LD_VAR 0 1
25362: PPUSH
25363: CALL_OW 266
25367: PUSH
25368: LD_INT 3
25370: NONEQUAL
25371: IFFALSE 25375
// exit ;
25373: GO 25477
// if HexInfo ( x , y ) = factory then
25375: LD_VAR 0 2
25379: PPUSH
25380: LD_VAR 0 3
25384: PPUSH
25385: CALL_OW 428
25389: PUSH
25390: LD_VAR 0 1
25394: EQUAL
25395: IFFALSE 25422
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25397: LD_ADDR_EXP 97
25401: PUSH
25402: LD_EXP 97
25406: PPUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_INT 0
25414: PPUSH
25415: CALL_OW 1
25419: ST_TO_ADDR
25420: GO 25473
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25422: LD_ADDR_EXP 97
25426: PUSH
25427: LD_EXP 97
25431: PPUSH
25432: LD_VAR 0 1
25436: PPUSH
25437: LD_VAR 0 1
25441: PPUSH
25442: CALL_OW 255
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: LD_VAR 0 3
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: PPUSH
25468: CALL_OW 1
25472: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25473: CALL 25482 0 0
// end ;
25477: LD_VAR 0 4
25481: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25482: LD_INT 0
25484: PPUSH
25485: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25486: LD_STRING resetFactoryWaypoint();
25488: PPUSH
25489: CALL_OW 559
// if factoryWaypoints then
25493: LD_EXP 97
25497: IFFALSE 25620
// begin for i := 1 to factoryWaypoints do
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: DOUBLE
25505: LD_INT 1
25507: DEC
25508: ST_TO_ADDR
25509: LD_EXP 97
25513: PUSH
25514: FOR_TO
25515: IFFALSE 25618
// if factoryWaypoints [ i ] then
25517: LD_EXP 97
25521: PUSH
25522: LD_VAR 0 2
25526: ARRAY
25527: IFFALSE 25616
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25529: LD_STRING setFactoryWaypointXY(
25531: PUSH
25532: LD_EXP 97
25536: PUSH
25537: LD_VAR 0 2
25541: ARRAY
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: STR
25547: PUSH
25548: LD_STRING ,
25550: STR
25551: PUSH
25552: LD_EXP 97
25556: PUSH
25557: LD_VAR 0 2
25561: ARRAY
25562: PUSH
25563: LD_INT 2
25565: ARRAY
25566: STR
25567: PUSH
25568: LD_STRING ,
25570: STR
25571: PUSH
25572: LD_EXP 97
25576: PUSH
25577: LD_VAR 0 2
25581: ARRAY
25582: PUSH
25583: LD_INT 3
25585: ARRAY
25586: STR
25587: PUSH
25588: LD_STRING ,
25590: STR
25591: PUSH
25592: LD_EXP 97
25596: PUSH
25597: LD_VAR 0 2
25601: ARRAY
25602: PUSH
25603: LD_INT 4
25605: ARRAY
25606: STR
25607: PUSH
25608: LD_STRING )
25610: STR
25611: PPUSH
25612: CALL_OW 559
25616: GO 25514
25618: POP
25619: POP
// end ; end ;
25620: LD_VAR 0 1
25624: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
25625: LD_INT 0
25627: PPUSH
// if HexInfo ( x , y ) = warehouse then
25628: LD_VAR 0 2
25632: PPUSH
25633: LD_VAR 0 3
25637: PPUSH
25638: CALL_OW 428
25642: PUSH
25643: LD_VAR 0 1
25647: EQUAL
25648: IFFALSE 25675
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25650: LD_ADDR_EXP 98
25654: PUSH
25655: LD_EXP 98
25659: PPUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_INT 0
25667: PPUSH
25668: CALL_OW 1
25672: ST_TO_ADDR
25673: GO 25726
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25675: LD_ADDR_EXP 98
25679: PUSH
25680: LD_EXP 98
25684: PPUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: LD_VAR 0 1
25694: PPUSH
25695: CALL_OW 255
25699: PUSH
25700: LD_VAR 0 1
25704: PUSH
25705: LD_VAR 0 2
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 1
25725: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
25726: CALL 25735 0 0
// end ;
25730: LD_VAR 0 4
25734: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
25735: LD_INT 0
25737: PPUSH
25738: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25739: LD_STRING resetWarehouseGatheringPoints();
25741: PPUSH
25742: CALL_OW 559
// if warehouseGatheringPoints then
25746: LD_EXP 98
25750: IFFALSE 25873
// begin for i := 1 to warehouseGatheringPoints do
25752: LD_ADDR_VAR 0 2
25756: PUSH
25757: DOUBLE
25758: LD_INT 1
25760: DEC
25761: ST_TO_ADDR
25762: LD_EXP 98
25766: PUSH
25767: FOR_TO
25768: IFFALSE 25871
// if warehouseGatheringPoints [ i ] then
25770: LD_EXP 98
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: IFFALSE 25869
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
25782: LD_STRING setWarhouseGatheringPointXY(
25784: PUSH
25785: LD_EXP 98
25789: PUSH
25790: LD_VAR 0 2
25794: ARRAY
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: STR
25800: PUSH
25801: LD_STRING ,
25803: STR
25804: PUSH
25805: LD_EXP 98
25809: PUSH
25810: LD_VAR 0 2
25814: ARRAY
25815: PUSH
25816: LD_INT 2
25818: ARRAY
25819: STR
25820: PUSH
25821: LD_STRING ,
25823: STR
25824: PUSH
25825: LD_EXP 98
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 3
25838: ARRAY
25839: STR
25840: PUSH
25841: LD_STRING ,
25843: STR
25844: PUSH
25845: LD_EXP 98
25849: PUSH
25850: LD_VAR 0 2
25854: ARRAY
25855: PUSH
25856: LD_INT 4
25858: ARRAY
25859: STR
25860: PUSH
25861: LD_STRING )
25863: STR
25864: PPUSH
25865: CALL_OW 559
25869: GO 25767
25871: POP
25872: POP
// end ; end ;
25873: LD_VAR 0 1
25877: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25878: LD_EXP 98
25882: IFFALSE 26511
25884: GO 25886
25886: DISABLE
25887: LD_INT 0
25889: PPUSH
25890: PPUSH
25891: PPUSH
25892: PPUSH
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
// begin enable ;
25898: ENABLE
// list := warehouseGatheringPoints diff 0 ;
25899: LD_ADDR_VAR 0 3
25903: PUSH
25904: LD_EXP 98
25908: PUSH
25909: LD_INT 0
25911: DIFF
25912: ST_TO_ADDR
// for i := 1 to list do
25913: LD_ADDR_VAR 0 1
25917: PUSH
25918: DOUBLE
25919: LD_INT 1
25921: DEC
25922: ST_TO_ADDR
25923: LD_VAR 0 3
25927: PUSH
25928: FOR_TO
25929: IFFALSE 26509
// begin if not list [ i ] then
25931: LD_VAR 0 3
25935: PUSH
25936: LD_VAR 0 1
25940: ARRAY
25941: NOT
25942: IFFALSE 25946
// continue ;
25944: GO 25928
// depot := list [ i ] [ 2 ] ;
25946: LD_ADDR_VAR 0 8
25950: PUSH
25951: LD_VAR 0 3
25955: PUSH
25956: LD_VAR 0 1
25960: ARRAY
25961: PUSH
25962: LD_INT 2
25964: ARRAY
25965: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25966: LD_ADDR_VAR 0 5
25970: PUSH
25971: LD_VAR 0 3
25975: PUSH
25976: LD_VAR 0 1
25980: ARRAY
25981: PUSH
25982: LD_INT 1
25984: ARRAY
25985: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25986: LD_VAR 0 8
25990: PPUSH
25991: CALL_OW 301
25995: PUSH
25996: LD_VAR 0 5
26000: PUSH
26001: LD_VAR 0 8
26005: PPUSH
26006: CALL_OW 255
26010: NONEQUAL
26011: OR
26012: IFFALSE 26041
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26014: LD_ADDR_EXP 98
26018: PUSH
26019: LD_EXP 98
26023: PPUSH
26024: LD_VAR 0 8
26028: PPUSH
26029: LD_INT 0
26031: PPUSH
26032: CALL_OW 1
26036: ST_TO_ADDR
// exit ;
26037: POP
26038: POP
26039: GO 26511
// end ; x := list [ i ] [ 3 ] ;
26041: LD_ADDR_VAR 0 6
26045: PUSH
26046: LD_VAR 0 3
26050: PUSH
26051: LD_VAR 0 1
26055: ARRAY
26056: PUSH
26057: LD_INT 3
26059: ARRAY
26060: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26061: LD_ADDR_VAR 0 7
26065: PUSH
26066: LD_VAR 0 3
26070: PUSH
26071: LD_VAR 0 1
26075: ARRAY
26076: PUSH
26077: LD_INT 4
26079: ARRAY
26080: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
26081: LD_ADDR_VAR 0 9
26085: PUSH
26086: LD_VAR 0 6
26090: PPUSH
26091: LD_VAR 0 7
26095: PPUSH
26096: LD_INT 12
26098: PPUSH
26099: CALL 70574 0 3
26103: ST_TO_ADDR
// if not cratesNearbyPoint then
26104: LD_VAR 0 9
26108: NOT
26109: IFFALSE 26115
// exit ;
26111: POP
26112: POP
26113: GO 26511
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26115: LD_ADDR_VAR 0 4
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_VAR 0 5
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: LD_INT 60
26137: PUSH
26138: EMPTY
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 25
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 25
26160: PUSH
26161: LD_INT 16
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: PPUSH
26178: CALL_OW 69
26182: PUSH
26183: LD_VAR 0 8
26187: PPUSH
26188: CALL_OW 313
26192: PPUSH
26193: LD_INT 3
26195: PUSH
26196: LD_INT 60
26198: PUSH
26199: EMPTY
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 25
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 25
26221: PUSH
26222: LD_INT 16
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL_OW 72
26242: UNION
26243: ST_TO_ADDR
// if tmp then
26244: LD_VAR 0 4
26248: IFFALSE 26328
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26250: LD_ADDR_VAR 0 4
26254: PUSH
26255: LD_VAR 0 4
26259: PPUSH
26260: LD_INT 3
26262: PPUSH
26263: CALL 68541 0 2
26267: ST_TO_ADDR
// for j in tmp do
26268: LD_ADDR_VAR 0 2
26272: PUSH
26273: LD_VAR 0 4
26277: PUSH
26278: FOR_IN
26279: IFFALSE 26322
// begin if IsInUnit ( j ) then
26281: LD_VAR 0 2
26285: PPUSH
26286: CALL_OW 310
26290: IFFALSE 26301
// ComExit ( j ) ;
26292: LD_VAR 0 2
26296: PPUSH
26297: CALL 68624 0 1
// AddComCollect ( j , x , y ) ;
26301: LD_VAR 0 2
26305: PPUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: CALL_OW 177
// end ;
26320: GO 26278
26322: POP
26323: POP
// exit ;
26324: POP
26325: POP
26326: GO 26511
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26328: LD_ADDR_VAR 0 4
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_VAR 0 5
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: LD_INT 34
26350: PUSH
26351: LD_INT 12
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 34
26360: PUSH
26361: LD_INT 51
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 34
26370: PUSH
26371: LD_INT 32
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 34
26380: PUSH
26381: LD_EXP 21
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: ST_TO_ADDR
// if tmp then
26406: LD_VAR 0 4
26410: IFFALSE 26507
// begin for j in tmp do
26412: LD_ADDR_VAR 0 2
26416: PUSH
26417: LD_VAR 0 4
26421: PUSH
26422: FOR_IN
26423: IFFALSE 26505
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 261
26434: PUSH
26435: LD_INT 20
26437: GREATER
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 314
26448: NOT
26449: AND
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 263
26460: PUSH
26461: LD_INT 1
26463: NONEQUAL
26464: PUSH
26465: LD_VAR 0 1
26469: PPUSH
26470: CALL_OW 311
26474: OR
26475: AND
26476: IFFALSE 26503
// begin ComCollect ( j , x , y ) ;
26478: LD_VAR 0 2
26482: PPUSH
26483: LD_VAR 0 6
26487: PPUSH
26488: LD_VAR 0 7
26492: PPUSH
26493: CALL_OW 117
// exit ;
26497: POP
26498: POP
26499: POP
26500: POP
26501: GO 26511
// end ;
26503: GO 26422
26505: POP
26506: POP
// end ; end ;
26507: GO 25928
26509: POP
26510: POP
// end ; end_of_file
26511: PPOPN 9
26513: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26514: LD_INT 0
26516: PPUSH
26517: PPUSH
26518: PPUSH
26519: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 264
26529: PUSH
26530: LD_EXP 24
26534: EQUAL
26535: IFFALSE 26607
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26537: LD_INT 68
26539: PPUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL_OW 255
26549: PPUSH
26550: CALL_OW 321
26554: PUSH
26555: LD_INT 2
26557: EQUAL
26558: IFFALSE 26570
// eff := 70 else
26560: LD_ADDR_VAR 0 4
26564: PUSH
26565: LD_INT 70
26567: ST_TO_ADDR
26568: GO 26578
// eff := 30 ;
26570: LD_ADDR_VAR 0 4
26574: PUSH
26575: LD_INT 30
26577: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26578: LD_VAR 0 1
26582: PPUSH
26583: CALL_OW 250
26587: PPUSH
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL_OW 251
26597: PPUSH
26598: LD_VAR 0 4
26602: PPUSH
26603: CALL_OW 495
// end ; end ;
26607: LD_VAR 0 2
26611: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26612: LD_INT 0
26614: PPUSH
// end ;
26615: LD_VAR 0 4
26619: RET
// export function SOS_Command ( cmd ) ; begin
26620: LD_INT 0
26622: PPUSH
// end ;
26623: LD_VAR 0 2
26627: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26628: LD_INT 0
26630: PPUSH
// end ;
26631: LD_VAR 0 6
26635: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26636: LD_INT 0
26638: PPUSH
26639: PPUSH
// if not vehicle or not factory then
26640: LD_VAR 0 1
26644: NOT
26645: PUSH
26646: LD_VAR 0 2
26650: NOT
26651: OR
26652: IFFALSE 26656
// exit ;
26654: GO 26887
// if factoryWaypoints >= factory then
26656: LD_EXP 97
26660: PUSH
26661: LD_VAR 0 2
26665: GREATEREQUAL
26666: IFFALSE 26887
// if factoryWaypoints [ factory ] then
26668: LD_EXP 97
26672: PUSH
26673: LD_VAR 0 2
26677: ARRAY
26678: IFFALSE 26887
// begin if GetControl ( vehicle ) = control_manual then
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 263
26689: PUSH
26690: LD_INT 1
26692: EQUAL
26693: IFFALSE 26774
// begin driver := IsDrivenBy ( vehicle ) ;
26695: LD_ADDR_VAR 0 4
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 311
26709: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26710: LD_VAR 0 4
26714: PPUSH
26715: LD_EXP 97
26719: PUSH
26720: LD_VAR 0 2
26724: ARRAY
26725: PUSH
26726: LD_INT 3
26728: ARRAY
26729: PPUSH
26730: LD_EXP 97
26734: PUSH
26735: LD_VAR 0 2
26739: ARRAY
26740: PUSH
26741: LD_INT 4
26743: ARRAY
26744: PPUSH
26745: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26749: LD_VAR 0 4
26753: PPUSH
26754: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26758: LD_VAR 0 4
26762: PPUSH
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 180
// end else
26772: GO 26887
// if GetControl ( vehicle ) = control_remote then
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 263
26783: PUSH
26784: LD_INT 2
26786: EQUAL
26787: IFFALSE 26848
// begin wait ( 0 0$2 ) ;
26789: LD_INT 70
26791: PPUSH
26792: CALL_OW 67
// if Connect ( vehicle ) then
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL 38935 0 1
26805: IFFALSE 26846
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26807: LD_VAR 0 1
26811: PPUSH
26812: LD_EXP 97
26816: PUSH
26817: LD_VAR 0 2
26821: ARRAY
26822: PUSH
26823: LD_INT 3
26825: ARRAY
26826: PPUSH
26827: LD_EXP 97
26831: PUSH
26832: LD_VAR 0 2
26836: ARRAY
26837: PUSH
26838: LD_INT 4
26840: ARRAY
26841: PPUSH
26842: CALL_OW 171
// end else
26846: GO 26887
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_EXP 97
26857: PUSH
26858: LD_VAR 0 2
26862: ARRAY
26863: PUSH
26864: LD_INT 3
26866: ARRAY
26867: PPUSH
26868: LD_EXP 97
26872: PUSH
26873: LD_VAR 0 2
26877: ARRAY
26878: PUSH
26879: LD_INT 4
26881: ARRAY
26882: PPUSH
26883: CALL_OW 171
// end ; end ;
26887: LD_VAR 0 3
26891: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26892: LD_INT 0
26894: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26895: LD_VAR 0 1
26899: PUSH
26900: LD_INT 250
26902: EQUAL
26903: PUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: CALL_OW 264
26913: PUSH
26914: LD_EXP 27
26918: EQUAL
26919: AND
26920: IFFALSE 26941
// MinerPlaceMine ( unit , x , y ) ;
26922: LD_VAR 0 2
26926: PPUSH
26927: LD_VAR 0 4
26931: PPUSH
26932: LD_VAR 0 5
26936: PPUSH
26937: CALL 29340 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26941: LD_VAR 0 1
26945: PUSH
26946: LD_INT 251
26948: EQUAL
26949: PUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: CALL_OW 264
26959: PUSH
26960: LD_EXP 27
26964: EQUAL
26965: AND
26966: IFFALSE 26987
// MinerDetonateMine ( unit , x , y ) ;
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_VAR 0 4
26977: PPUSH
26978: LD_VAR 0 5
26982: PPUSH
26983: CALL 29617 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26987: LD_VAR 0 1
26991: PUSH
26992: LD_INT 252
26994: EQUAL
26995: PUSH
26996: LD_VAR 0 2
27000: PPUSH
27001: CALL_OW 264
27005: PUSH
27006: LD_EXP 27
27010: EQUAL
27011: AND
27012: IFFALSE 27033
// MinerCreateMinefield ( unit , x , y ) ;
27014: LD_VAR 0 2
27018: PPUSH
27019: LD_VAR 0 4
27023: PPUSH
27024: LD_VAR 0 5
27028: PPUSH
27029: CALL 30034 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 253
27040: EQUAL
27041: PUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 257
27051: PUSH
27052: LD_INT 5
27054: EQUAL
27055: AND
27056: IFFALSE 27077
// ComBinocular ( unit , x , y ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_VAR 0 4
27067: PPUSH
27068: LD_VAR 0 5
27072: PPUSH
27073: CALL 30405 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27077: LD_VAR 0 1
27081: PUSH
27082: LD_INT 254
27084: EQUAL
27085: PUSH
27086: LD_VAR 0 2
27090: PPUSH
27091: CALL_OW 264
27095: PUSH
27096: LD_EXP 22
27100: EQUAL
27101: AND
27102: PUSH
27103: LD_VAR 0 3
27107: PPUSH
27108: CALL_OW 263
27112: PUSH
27113: LD_INT 3
27115: EQUAL
27116: AND
27117: IFFALSE 27133
// HackDestroyVehicle ( unit , selectedUnit ) ;
27119: LD_VAR 0 2
27123: PPUSH
27124: LD_VAR 0 3
27128: PPUSH
27129: CALL 28700 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27133: LD_VAR 0 1
27137: PUSH
27138: LD_INT 255
27140: EQUAL
27141: PUSH
27142: LD_VAR 0 2
27146: PPUSH
27147: CALL_OW 264
27151: PUSH
27152: LD_INT 14
27154: PUSH
27155: LD_INT 53
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: IN
27162: AND
27163: PUSH
27164: LD_VAR 0 4
27168: PPUSH
27169: LD_VAR 0 5
27173: PPUSH
27174: CALL_OW 488
27178: AND
27179: IFFALSE 27203
// CutTreeXYR ( unit , x , y , 12 ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 4
27190: PPUSH
27191: LD_VAR 0 5
27195: PPUSH
27196: LD_INT 12
27198: PPUSH
27199: CALL 27266 0 4
// if cmd = 256 then
27203: LD_VAR 0 1
27207: PUSH
27208: LD_INT 256
27210: EQUAL
27211: IFFALSE 27232
// SetFactoryWaypoint ( unit , x , y ) ;
27213: LD_VAR 0 2
27217: PPUSH
27218: LD_VAR 0 4
27222: PPUSH
27223: LD_VAR 0 5
27227: PPUSH
27228: CALL 25267 0 3
// if cmd = 257 then
27232: LD_VAR 0 1
27236: PUSH
27237: LD_INT 257
27239: EQUAL
27240: IFFALSE 27261
// SetWarhouseGatheringPoint ( unit , x , y ) ;
27242: LD_VAR 0 2
27246: PPUSH
27247: LD_VAR 0 4
27251: PPUSH
27252: LD_VAR 0 5
27256: PPUSH
27257: CALL 25625 0 3
// end ;
27261: LD_VAR 0 6
27265: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27266: LD_INT 0
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
27273: PPUSH
27274: PPUSH
27275: PPUSH
27276: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27277: LD_VAR 0 1
27281: NOT
27282: PUSH
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: CALL_OW 488
27297: NOT
27298: OR
27299: PUSH
27300: LD_VAR 0 4
27304: NOT
27305: OR
27306: IFFALSE 27310
// exit ;
27308: GO 27650
// list := [ ] ;
27310: LD_ADDR_VAR 0 13
27314: PUSH
27315: EMPTY
27316: ST_TO_ADDR
// if x - r < 0 then
27317: LD_VAR 0 2
27321: PUSH
27322: LD_VAR 0 4
27326: MINUS
27327: PUSH
27328: LD_INT 0
27330: LESS
27331: IFFALSE 27343
// min_x := 0 else
27333: LD_ADDR_VAR 0 7
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
27341: GO 27359
// min_x := x - r ;
27343: LD_ADDR_VAR 0 7
27347: PUSH
27348: LD_VAR 0 2
27352: PUSH
27353: LD_VAR 0 4
27357: MINUS
27358: ST_TO_ADDR
// if y - r < 0 then
27359: LD_VAR 0 3
27363: PUSH
27364: LD_VAR 0 4
27368: MINUS
27369: PUSH
27370: LD_INT 0
27372: LESS
27373: IFFALSE 27385
// min_y := 0 else
27375: LD_ADDR_VAR 0 8
27379: PUSH
27380: LD_INT 0
27382: ST_TO_ADDR
27383: GO 27401
// min_y := y - r ;
27385: LD_ADDR_VAR 0 8
27389: PUSH
27390: LD_VAR 0 3
27394: PUSH
27395: LD_VAR 0 4
27399: MINUS
27400: ST_TO_ADDR
// max_x := x + r ;
27401: LD_ADDR_VAR 0 9
27405: PUSH
27406: LD_VAR 0 2
27410: PUSH
27411: LD_VAR 0 4
27415: PLUS
27416: ST_TO_ADDR
// max_y := y + r ;
27417: LD_ADDR_VAR 0 10
27421: PUSH
27422: LD_VAR 0 3
27426: PUSH
27427: LD_VAR 0 4
27431: PLUS
27432: ST_TO_ADDR
// for _x = min_x to max_x do
27433: LD_ADDR_VAR 0 11
27437: PUSH
27438: DOUBLE
27439: LD_VAR 0 7
27443: DEC
27444: ST_TO_ADDR
27445: LD_VAR 0 9
27449: PUSH
27450: FOR_TO
27451: IFFALSE 27568
// for _y = min_y to max_y do
27453: LD_ADDR_VAR 0 12
27457: PUSH
27458: DOUBLE
27459: LD_VAR 0 8
27463: DEC
27464: ST_TO_ADDR
27465: LD_VAR 0 10
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27564
// begin if not ValidHex ( _x , _y ) then
27473: LD_VAR 0 11
27477: PPUSH
27478: LD_VAR 0 12
27482: PPUSH
27483: CALL_OW 488
27487: NOT
27488: IFFALSE 27492
// continue ;
27490: GO 27470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27492: LD_VAR 0 11
27496: PPUSH
27497: LD_VAR 0 12
27501: PPUSH
27502: CALL_OW 351
27506: PUSH
27507: LD_VAR 0 11
27511: PPUSH
27512: LD_VAR 0 12
27516: PPUSH
27517: CALL_OW 554
27521: AND
27522: IFFALSE 27562
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27524: LD_ADDR_VAR 0 13
27528: PUSH
27529: LD_VAR 0 13
27533: PPUSH
27534: LD_VAR 0 13
27538: PUSH
27539: LD_INT 1
27541: PLUS
27542: PPUSH
27543: LD_VAR 0 11
27547: PUSH
27548: LD_VAR 0 12
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PPUSH
27557: CALL_OW 2
27561: ST_TO_ADDR
// end ;
27562: GO 27470
27564: POP
27565: POP
27566: GO 27450
27568: POP
27569: POP
// if not list then
27570: LD_VAR 0 13
27574: NOT
27575: IFFALSE 27579
// exit ;
27577: GO 27650
// for i in list do
27579: LD_ADDR_VAR 0 6
27583: PUSH
27584: LD_VAR 0 13
27588: PUSH
27589: FOR_IN
27590: IFFALSE 27648
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_STRING M
27599: PUSH
27600: LD_VAR 0 6
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PUSH
27609: LD_VAR 0 6
27613: PUSH
27614: LD_INT 2
27616: ARRAY
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: PPUSH
27642: CALL_OW 447
27646: GO 27589
27648: POP
27649: POP
// end ;
27650: LD_VAR 0 5
27654: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27655: LD_EXP 100
27659: NOT
27660: IFFALSE 27710
27662: GO 27664
27664: DISABLE
// begin initHack := true ;
27665: LD_ADDR_EXP 100
27669: PUSH
27670: LD_INT 1
27672: ST_TO_ADDR
// hackTanks := [ ] ;
27673: LD_ADDR_EXP 101
27677: PUSH
27678: EMPTY
27679: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27680: LD_ADDR_EXP 102
27684: PUSH
27685: EMPTY
27686: ST_TO_ADDR
// hackLimit := 3 ;
27687: LD_ADDR_EXP 103
27691: PUSH
27692: LD_INT 3
27694: ST_TO_ADDR
// hackDist := 12 ;
27695: LD_ADDR_EXP 104
27699: PUSH
27700: LD_INT 12
27702: ST_TO_ADDR
// hackCounter := [ ] ;
27703: LD_ADDR_EXP 105
27707: PUSH
27708: EMPTY
27709: ST_TO_ADDR
// end ;
27710: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27711: LD_EXP 100
27715: PUSH
27716: LD_INT 34
27718: PUSH
27719: LD_EXP 22
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PPUSH
27728: CALL_OW 69
27732: AND
27733: IFFALSE 27988
27735: GO 27737
27737: DISABLE
27738: LD_INT 0
27740: PPUSH
27741: PPUSH
// begin enable ;
27742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27743: LD_ADDR_VAR 0 1
27747: PUSH
27748: LD_INT 34
27750: PUSH
27751: LD_EXP 22
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PPUSH
27760: CALL_OW 69
27764: PUSH
27765: FOR_IN
27766: IFFALSE 27986
// begin if not i in hackTanks then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_EXP 101
27777: IN
27778: NOT
27779: IFFALSE 27862
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27781: LD_ADDR_EXP 101
27785: PUSH
27786: LD_EXP 101
27790: PPUSH
27791: LD_EXP 101
27795: PUSH
27796: LD_INT 1
27798: PLUS
27799: PPUSH
27800: LD_VAR 0 1
27804: PPUSH
27805: CALL_OW 1
27809: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27810: LD_ADDR_EXP 102
27814: PUSH
27815: LD_EXP 102
27819: PPUSH
27820: LD_EXP 102
27824: PUSH
27825: LD_INT 1
27827: PLUS
27828: PPUSH
27829: EMPTY
27830: PPUSH
27831: CALL_OW 1
27835: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27836: LD_ADDR_EXP 105
27840: PUSH
27841: LD_EXP 105
27845: PPUSH
27846: LD_EXP 105
27850: PUSH
27851: LD_INT 1
27853: PLUS
27854: PPUSH
27855: EMPTY
27856: PPUSH
27857: CALL_OW 1
27861: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 302
27871: NOT
27872: IFFALSE 27885
// begin HackUnlinkAll ( i ) ;
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL 27991 0 1
// continue ;
27883: GO 27765
// end ; HackCheckCapturedStatus ( i ) ;
27885: LD_VAR 0 1
27889: PPUSH
27890: CALL 28434 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27894: LD_ADDR_VAR 0 2
27898: PUSH
27899: LD_INT 81
27901: PUSH
27902: LD_VAR 0 1
27906: PPUSH
27907: CALL_OW 255
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 33
27918: PUSH
27919: LD_INT 3
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 91
27928: PUSH
27929: LD_VAR 0 1
27933: PUSH
27934: LD_EXP 104
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 50
27946: PUSH
27947: EMPTY
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: PPUSH
27956: CALL_OW 69
27960: ST_TO_ADDR
// if not tmp then
27961: LD_VAR 0 2
27965: NOT
27966: IFFALSE 27970
// continue ;
27968: GO 27765
// HackLink ( i , tmp ) ;
27970: LD_VAR 0 1
27974: PPUSH
27975: LD_VAR 0 2
27979: PPUSH
27980: CALL 28127 0 2
// end ;
27984: GO 27765
27986: POP
27987: POP
// end ;
27988: PPOPN 2
27990: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27991: LD_INT 0
27993: PPUSH
27994: PPUSH
27995: PPUSH
// if not hack in hackTanks then
27996: LD_VAR 0 1
28000: PUSH
28001: LD_EXP 101
28005: IN
28006: NOT
28007: IFFALSE 28011
// exit ;
28009: GO 28122
// index := GetElementIndex ( hackTanks , hack ) ;
28011: LD_ADDR_VAR 0 4
28015: PUSH
28016: LD_EXP 101
28020: PPUSH
28021: LD_VAR 0 1
28025: PPUSH
28026: CALL 35749 0 2
28030: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28031: LD_EXP 102
28035: PUSH
28036: LD_VAR 0 4
28040: ARRAY
28041: IFFALSE 28122
// begin for i in hackTanksCaptured [ index ] do
28043: LD_ADDR_VAR 0 3
28047: PUSH
28048: LD_EXP 102
28052: PUSH
28053: LD_VAR 0 4
28057: ARRAY
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28086
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28062: LD_VAR 0 3
28066: PUSH
28067: LD_INT 1
28069: ARRAY
28070: PPUSH
28071: LD_VAR 0 3
28075: PUSH
28076: LD_INT 2
28078: ARRAY
28079: PPUSH
28080: CALL_OW 235
28084: GO 28059
28086: POP
28087: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28088: LD_ADDR_EXP 102
28092: PUSH
28093: LD_EXP 102
28097: PPUSH
28098: LD_VAR 0 4
28102: PPUSH
28103: EMPTY
28104: PPUSH
28105: CALL_OW 1
28109: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28110: LD_VAR 0 1
28114: PPUSH
28115: LD_INT 0
28117: PPUSH
28118: CALL_OW 505
// end ; end ;
28122: LD_VAR 0 2
28126: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28127: LD_INT 0
28129: PPUSH
28130: PPUSH
28131: PPUSH
// if not hack in hackTanks or not vehicles then
28132: LD_VAR 0 1
28136: PUSH
28137: LD_EXP 101
28141: IN
28142: NOT
28143: PUSH
28144: LD_VAR 0 2
28148: NOT
28149: OR
28150: IFFALSE 28154
// exit ;
28152: GO 28429
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28154: LD_ADDR_VAR 0 2
28158: PUSH
28159: LD_VAR 0 1
28163: PPUSH
28164: LD_VAR 0 2
28168: PPUSH
28169: LD_INT 1
28171: PPUSH
28172: LD_INT 1
28174: PPUSH
28175: CALL 36399 0 4
28179: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28180: LD_ADDR_VAR 0 5
28184: PUSH
28185: LD_EXP 101
28189: PPUSH
28190: LD_VAR 0 1
28194: PPUSH
28195: CALL 35749 0 2
28199: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28200: LD_EXP 102
28204: PUSH
28205: LD_VAR 0 5
28209: ARRAY
28210: PUSH
28211: LD_EXP 103
28215: LESS
28216: IFFALSE 28405
// begin for i := 1 to vehicles do
28218: LD_ADDR_VAR 0 4
28222: PUSH
28223: DOUBLE
28224: LD_INT 1
28226: DEC
28227: ST_TO_ADDR
28228: LD_VAR 0 2
28232: PUSH
28233: FOR_TO
28234: IFFALSE 28403
// begin if hackTanksCaptured [ index ] = hackLimit then
28236: LD_EXP 102
28240: PUSH
28241: LD_VAR 0 5
28245: ARRAY
28246: PUSH
28247: LD_EXP 103
28251: EQUAL
28252: IFFALSE 28256
// break ;
28254: GO 28403
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28256: LD_ADDR_EXP 105
28260: PUSH
28261: LD_EXP 105
28265: PPUSH
28266: LD_VAR 0 5
28270: PPUSH
28271: LD_EXP 105
28275: PUSH
28276: LD_VAR 0 5
28280: ARRAY
28281: PUSH
28282: LD_INT 1
28284: PLUS
28285: PPUSH
28286: CALL_OW 1
28290: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28291: LD_ADDR_EXP 102
28295: PUSH
28296: LD_EXP 102
28300: PPUSH
28301: LD_VAR 0 5
28305: PUSH
28306: LD_EXP 102
28310: PUSH
28311: LD_VAR 0 5
28315: ARRAY
28316: PUSH
28317: LD_INT 1
28319: PLUS
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PPUSH
28325: LD_VAR 0 2
28329: PUSH
28330: LD_VAR 0 4
28334: ARRAY
28335: PUSH
28336: LD_VAR 0 2
28340: PUSH
28341: LD_VAR 0 4
28345: ARRAY
28346: PPUSH
28347: CALL_OW 255
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PPUSH
28356: CALL 35964 0 3
28360: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28361: LD_VAR 0 2
28365: PUSH
28366: LD_VAR 0 4
28370: ARRAY
28371: PPUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 255
28381: PPUSH
28382: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28386: LD_VAR 0 2
28390: PUSH
28391: LD_VAR 0 4
28395: ARRAY
28396: PPUSH
28397: CALL_OW 141
// end ;
28401: GO 28233
28403: POP
28404: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28405: LD_VAR 0 1
28409: PPUSH
28410: LD_EXP 102
28414: PUSH
28415: LD_VAR 0 5
28419: ARRAY
28420: PUSH
28421: LD_INT 0
28423: PLUS
28424: PPUSH
28425: CALL_OW 505
// end ;
28429: LD_VAR 0 3
28433: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28434: LD_INT 0
28436: PPUSH
28437: PPUSH
28438: PPUSH
28439: PPUSH
// if not hack in hackTanks then
28440: LD_VAR 0 1
28444: PUSH
28445: LD_EXP 101
28449: IN
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28695
// index := GetElementIndex ( hackTanks , hack ) ;
28455: LD_ADDR_VAR 0 4
28459: PUSH
28460: LD_EXP 101
28464: PPUSH
28465: LD_VAR 0 1
28469: PPUSH
28470: CALL 35749 0 2
28474: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28475: LD_ADDR_VAR 0 3
28479: PUSH
28480: DOUBLE
28481: LD_EXP 102
28485: PUSH
28486: LD_VAR 0 4
28490: ARRAY
28491: INC
28492: ST_TO_ADDR
28493: LD_INT 1
28495: PUSH
28496: FOR_DOWNTO
28497: IFFALSE 28669
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28499: LD_ADDR_VAR 0 5
28503: PUSH
28504: LD_EXP 102
28508: PUSH
28509: LD_VAR 0 4
28513: ARRAY
28514: PUSH
28515: LD_VAR 0 3
28519: ARRAY
28520: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28521: LD_VAR 0 5
28525: PUSH
28526: LD_INT 1
28528: ARRAY
28529: PPUSH
28530: CALL_OW 302
28534: NOT
28535: PUSH
28536: LD_VAR 0 5
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: CALL_OW 255
28549: PUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 255
28559: NONEQUAL
28560: OR
28561: IFFALSE 28667
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28563: LD_VAR 0 5
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PPUSH
28572: CALL_OW 305
28576: PUSH
28577: LD_VAR 0 5
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: CALL_OW 255
28590: PUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 255
28600: EQUAL
28601: AND
28602: IFFALSE 28626
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28604: LD_VAR 0 5
28608: PUSH
28609: LD_INT 1
28611: ARRAY
28612: PPUSH
28613: LD_VAR 0 5
28617: PUSH
28618: LD_INT 2
28620: ARRAY
28621: PPUSH
28622: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28626: LD_ADDR_EXP 102
28630: PUSH
28631: LD_EXP 102
28635: PPUSH
28636: LD_VAR 0 4
28640: PPUSH
28641: LD_EXP 102
28645: PUSH
28646: LD_VAR 0 4
28650: ARRAY
28651: PPUSH
28652: LD_VAR 0 3
28656: PPUSH
28657: CALL_OW 3
28661: PPUSH
28662: CALL_OW 1
28666: ST_TO_ADDR
// end ; end ;
28667: GO 28496
28669: POP
28670: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28671: LD_VAR 0 1
28675: PPUSH
28676: LD_EXP 102
28680: PUSH
28681: LD_VAR 0 4
28685: ARRAY
28686: PUSH
28687: LD_INT 0
28689: PLUS
28690: PPUSH
28691: CALL_OW 505
// end ;
28695: LD_VAR 0 2
28699: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
// if not hack in hackTanks then
28706: LD_VAR 0 1
28710: PUSH
28711: LD_EXP 101
28715: IN
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28806
// index := GetElementIndex ( hackTanks , hack ) ;
28721: LD_ADDR_VAR 0 5
28725: PUSH
28726: LD_EXP 101
28730: PPUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL 35749 0 2
28740: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28741: LD_ADDR_VAR 0 4
28745: PUSH
28746: DOUBLE
28747: LD_INT 1
28749: DEC
28750: ST_TO_ADDR
28751: LD_EXP 102
28755: PUSH
28756: LD_VAR 0 5
28760: ARRAY
28761: PUSH
28762: FOR_TO
28763: IFFALSE 28804
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28765: LD_EXP 102
28769: PUSH
28770: LD_VAR 0 5
28774: ARRAY
28775: PUSH
28776: LD_VAR 0 4
28780: ARRAY
28781: PUSH
28782: LD_INT 1
28784: ARRAY
28785: PUSH
28786: LD_VAR 0 2
28790: EQUAL
28791: IFFALSE 28802
// KillUnit ( vehicle ) ;
28793: LD_VAR 0 2
28797: PPUSH
28798: CALL_OW 66
28802: GO 28762
28804: POP
28805: POP
// end ;
28806: LD_VAR 0 3
28810: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28811: LD_EXP 106
28815: NOT
28816: IFFALSE 28851
28818: GO 28820
28820: DISABLE
// begin initMiner := true ;
28821: LD_ADDR_EXP 106
28825: PUSH
28826: LD_INT 1
28828: ST_TO_ADDR
// minersList := [ ] ;
28829: LD_ADDR_EXP 107
28833: PUSH
28834: EMPTY
28835: ST_TO_ADDR
// minerMinesList := [ ] ;
28836: LD_ADDR_EXP 108
28840: PUSH
28841: EMPTY
28842: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28843: LD_ADDR_EXP 109
28847: PUSH
28848: LD_INT 5
28850: ST_TO_ADDR
// end ;
28851: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28852: LD_EXP 106
28856: PUSH
28857: LD_INT 34
28859: PUSH
28860: LD_EXP 27
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 69
28873: AND
28874: IFFALSE 29337
28876: GO 28878
28878: DISABLE
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
// begin enable ;
28885: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28886: LD_ADDR_VAR 0 1
28890: PUSH
28891: LD_INT 34
28893: PUSH
28894: LD_EXP 27
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PPUSH
28903: CALL_OW 69
28907: PUSH
28908: FOR_IN
28909: IFFALSE 28981
// begin if not i in minersList then
28911: LD_VAR 0 1
28915: PUSH
28916: LD_EXP 107
28920: IN
28921: NOT
28922: IFFALSE 28979
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28924: LD_ADDR_EXP 107
28928: PUSH
28929: LD_EXP 107
28933: PPUSH
28934: LD_EXP 107
28938: PUSH
28939: LD_INT 1
28941: PLUS
28942: PPUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 1
28952: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28953: LD_ADDR_EXP 108
28957: PUSH
28958: LD_EXP 108
28962: PPUSH
28963: LD_EXP 108
28967: PUSH
28968: LD_INT 1
28970: PLUS
28971: PPUSH
28972: EMPTY
28973: PPUSH
28974: CALL_OW 1
28978: ST_TO_ADDR
// end end ;
28979: GO 28908
28981: POP
28982: POP
// for i := minerMinesList downto 1 do
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: DOUBLE
28989: LD_EXP 108
28993: INC
28994: ST_TO_ADDR
28995: LD_INT 1
28997: PUSH
28998: FOR_DOWNTO
28999: IFFALSE 29335
// begin if IsLive ( minersList [ i ] ) then
29001: LD_EXP 107
29005: PUSH
29006: LD_VAR 0 1
29010: ARRAY
29011: PPUSH
29012: CALL_OW 300
29016: IFFALSE 29044
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29018: LD_EXP 107
29022: PUSH
29023: LD_VAR 0 1
29027: ARRAY
29028: PPUSH
29029: LD_EXP 108
29033: PUSH
29034: LD_VAR 0 1
29038: ARRAY
29039: PPUSH
29040: CALL_OW 505
// if not minerMinesList [ i ] then
29044: LD_EXP 108
29048: PUSH
29049: LD_VAR 0 1
29053: ARRAY
29054: NOT
29055: IFFALSE 29059
// continue ;
29057: GO 28998
// for j := minerMinesList [ i ] downto 1 do
29059: LD_ADDR_VAR 0 2
29063: PUSH
29064: DOUBLE
29065: LD_EXP 108
29069: PUSH
29070: LD_VAR 0 1
29074: ARRAY
29075: INC
29076: ST_TO_ADDR
29077: LD_INT 1
29079: PUSH
29080: FOR_DOWNTO
29081: IFFALSE 29331
// begin side := GetSide ( minersList [ i ] ) ;
29083: LD_ADDR_VAR 0 3
29087: PUSH
29088: LD_EXP 107
29092: PUSH
29093: LD_VAR 0 1
29097: ARRAY
29098: PPUSH
29099: CALL_OW 255
29103: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: LD_EXP 108
29113: PUSH
29114: LD_VAR 0 1
29118: ARRAY
29119: PUSH
29120: LD_VAR 0 2
29124: ARRAY
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: LD_EXP 108
29134: PUSH
29135: LD_VAR 0 1
29139: ARRAY
29140: PUSH
29141: LD_VAR 0 2
29145: ARRAY
29146: PUSH
29147: LD_INT 2
29149: ARRAY
29150: PPUSH
29151: CALL_OW 428
29155: ST_TO_ADDR
// if not tmp then
29156: LD_VAR 0 4
29160: NOT
29161: IFFALSE 29165
// continue ;
29163: GO 29080
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29165: LD_VAR 0 4
29169: PUSH
29170: LD_INT 81
29172: PUSH
29173: LD_VAR 0 3
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PPUSH
29182: CALL_OW 69
29186: IN
29187: PUSH
29188: LD_EXP 108
29192: PUSH
29193: LD_VAR 0 1
29197: ARRAY
29198: PUSH
29199: LD_VAR 0 2
29203: ARRAY
29204: PUSH
29205: LD_INT 1
29207: ARRAY
29208: PPUSH
29209: LD_EXP 108
29213: PUSH
29214: LD_VAR 0 1
29218: ARRAY
29219: PUSH
29220: LD_VAR 0 2
29224: ARRAY
29225: PUSH
29226: LD_INT 2
29228: ARRAY
29229: PPUSH
29230: CALL_OW 458
29234: AND
29235: IFFALSE 29329
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29237: LD_EXP 108
29241: PUSH
29242: LD_VAR 0 1
29246: ARRAY
29247: PUSH
29248: LD_VAR 0 2
29252: ARRAY
29253: PUSH
29254: LD_INT 1
29256: ARRAY
29257: PPUSH
29258: LD_EXP 108
29262: PUSH
29263: LD_VAR 0 1
29267: ARRAY
29268: PUSH
29269: LD_VAR 0 2
29273: ARRAY
29274: PUSH
29275: LD_INT 2
29277: ARRAY
29278: PPUSH
29279: LD_VAR 0 3
29283: PPUSH
29284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29288: LD_ADDR_EXP 108
29292: PUSH
29293: LD_EXP 108
29297: PPUSH
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_EXP 108
29307: PUSH
29308: LD_VAR 0 1
29312: ARRAY
29313: PPUSH
29314: LD_VAR 0 2
29318: PPUSH
29319: CALL_OW 3
29323: PPUSH
29324: CALL_OW 1
29328: ST_TO_ADDR
// end ; end ;
29329: GO 29080
29331: POP
29332: POP
// end ;
29333: GO 28998
29335: POP
29336: POP
// end ;
29337: PPOPN 4
29339: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
// result := false ;
29344: LD_ADDR_VAR 0 4
29348: PUSH
29349: LD_INT 0
29351: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29352: LD_VAR 0 1
29356: PPUSH
29357: CALL_OW 264
29361: PUSH
29362: LD_EXP 27
29366: EQUAL
29367: NOT
29368: IFFALSE 29372
// exit ;
29370: GO 29612
// index := GetElementIndex ( minersList , unit ) ;
29372: LD_ADDR_VAR 0 5
29376: PUSH
29377: LD_EXP 107
29381: PPUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL 35749 0 2
29391: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29392: LD_EXP 108
29396: PUSH
29397: LD_VAR 0 5
29401: ARRAY
29402: PUSH
29403: LD_EXP 109
29407: GREATEREQUAL
29408: IFFALSE 29412
// exit ;
29410: GO 29612
// ComMoveXY ( unit , x , y ) ;
29412: LD_VAR 0 1
29416: PPUSH
29417: LD_VAR 0 2
29421: PPUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29431: LD_INT 35
29433: PPUSH
29434: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29438: LD_VAR 0 1
29442: PPUSH
29443: LD_VAR 0 2
29447: PPUSH
29448: LD_VAR 0 3
29452: PPUSH
29453: CALL 67035 0 3
29457: NOT
29458: PUSH
29459: LD_VAR 0 1
29463: PPUSH
29464: CALL_OW 314
29468: AND
29469: IFFALSE 29473
// exit ;
29471: GO 29612
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_VAR 0 3
29482: PPUSH
29483: CALL_OW 428
29487: PUSH
29488: LD_VAR 0 1
29492: EQUAL
29493: PUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL_OW 314
29503: NOT
29504: AND
29505: IFFALSE 29431
// PlaySoundXY ( x , y , PlantMine ) ;
29507: LD_VAR 0 2
29511: PPUSH
29512: LD_VAR 0 3
29516: PPUSH
29517: LD_STRING PlantMine
29519: PPUSH
29520: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29524: LD_VAR 0 2
29528: PPUSH
29529: LD_VAR 0 3
29533: PPUSH
29534: LD_VAR 0 1
29538: PPUSH
29539: CALL_OW 255
29543: PPUSH
29544: LD_INT 0
29546: PPUSH
29547: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29551: LD_ADDR_EXP 108
29555: PUSH
29556: LD_EXP 108
29560: PPUSH
29561: LD_VAR 0 5
29565: PUSH
29566: LD_EXP 108
29570: PUSH
29571: LD_VAR 0 5
29575: ARRAY
29576: PUSH
29577: LD_INT 1
29579: PLUS
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: LD_VAR 0 2
29589: PUSH
29590: LD_VAR 0 3
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL 35964 0 3
29603: ST_TO_ADDR
// result := true ;
29604: LD_ADDR_VAR 0 4
29608: PUSH
29609: LD_INT 1
29611: ST_TO_ADDR
// end ;
29612: LD_VAR 0 4
29616: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29617: LD_INT 0
29619: PPUSH
29620: PPUSH
29621: PPUSH
// if not unit in minersList then
29622: LD_VAR 0 1
29626: PUSH
29627: LD_EXP 107
29631: IN
29632: NOT
29633: IFFALSE 29637
// exit ;
29635: GO 30029
// index := GetElementIndex ( minersList , unit ) ;
29637: LD_ADDR_VAR 0 6
29641: PUSH
29642: LD_EXP 107
29646: PPUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL 35749 0 2
29656: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29657: LD_ADDR_VAR 0 5
29661: PUSH
29662: DOUBLE
29663: LD_EXP 108
29667: PUSH
29668: LD_VAR 0 6
29672: ARRAY
29673: INC
29674: ST_TO_ADDR
29675: LD_INT 1
29677: PUSH
29678: FOR_DOWNTO
29679: IFFALSE 29840
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29681: LD_EXP 108
29685: PUSH
29686: LD_VAR 0 6
29690: ARRAY
29691: PUSH
29692: LD_VAR 0 5
29696: ARRAY
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PUSH
29702: LD_VAR 0 2
29706: EQUAL
29707: PUSH
29708: LD_EXP 108
29712: PUSH
29713: LD_VAR 0 6
29717: ARRAY
29718: PUSH
29719: LD_VAR 0 5
29723: ARRAY
29724: PUSH
29725: LD_INT 2
29727: ARRAY
29728: PUSH
29729: LD_VAR 0 3
29733: EQUAL
29734: AND
29735: IFFALSE 29838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29737: LD_EXP 108
29741: PUSH
29742: LD_VAR 0 6
29746: ARRAY
29747: PUSH
29748: LD_VAR 0 5
29752: ARRAY
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PPUSH
29758: LD_EXP 108
29762: PUSH
29763: LD_VAR 0 6
29767: ARRAY
29768: PUSH
29769: LD_VAR 0 5
29773: ARRAY
29774: PUSH
29775: LD_INT 2
29777: ARRAY
29778: PPUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 255
29788: PPUSH
29789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29793: LD_ADDR_EXP 108
29797: PUSH
29798: LD_EXP 108
29802: PPUSH
29803: LD_VAR 0 6
29807: PPUSH
29808: LD_EXP 108
29812: PUSH
29813: LD_VAR 0 6
29817: ARRAY
29818: PPUSH
29819: LD_VAR 0 5
29823: PPUSH
29824: CALL_OW 3
29828: PPUSH
29829: CALL_OW 1
29833: ST_TO_ADDR
// exit ;
29834: POP
29835: POP
29836: GO 30029
// end ; end ;
29838: GO 29678
29840: POP
29841: POP
// for i := minerMinesList [ index ] downto 1 do
29842: LD_ADDR_VAR 0 5
29846: PUSH
29847: DOUBLE
29848: LD_EXP 108
29852: PUSH
29853: LD_VAR 0 6
29857: ARRAY
29858: INC
29859: ST_TO_ADDR
29860: LD_INT 1
29862: PUSH
29863: FOR_DOWNTO
29864: IFFALSE 30027
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29866: LD_EXP 108
29870: PUSH
29871: LD_VAR 0 6
29875: ARRAY
29876: PUSH
29877: LD_VAR 0 5
29881: ARRAY
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: LD_EXP 108
29891: PUSH
29892: LD_VAR 0 6
29896: ARRAY
29897: PUSH
29898: LD_VAR 0 5
29902: ARRAY
29903: PUSH
29904: LD_INT 2
29906: ARRAY
29907: PPUSH
29908: LD_VAR 0 2
29912: PPUSH
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL_OW 298
29922: PUSH
29923: LD_INT 6
29925: LESS
29926: IFFALSE 30025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29928: LD_EXP 108
29932: PUSH
29933: LD_VAR 0 6
29937: ARRAY
29938: PUSH
29939: LD_VAR 0 5
29943: ARRAY
29944: PUSH
29945: LD_INT 1
29947: ARRAY
29948: PPUSH
29949: LD_EXP 108
29953: PUSH
29954: LD_VAR 0 6
29958: ARRAY
29959: PUSH
29960: LD_VAR 0 5
29964: ARRAY
29965: PUSH
29966: LD_INT 2
29968: ARRAY
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL_OW 255
29979: PPUSH
29980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29984: LD_ADDR_EXP 108
29988: PUSH
29989: LD_EXP 108
29993: PPUSH
29994: LD_VAR 0 6
29998: PPUSH
29999: LD_EXP 108
30003: PUSH
30004: LD_VAR 0 6
30008: ARRAY
30009: PPUSH
30010: LD_VAR 0 5
30014: PPUSH
30015: CALL_OW 3
30019: PPUSH
30020: CALL_OW 1
30024: ST_TO_ADDR
// end ; end ;
30025: GO 29863
30027: POP
30028: POP
// end ;
30029: LD_VAR 0 4
30033: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30034: LD_INT 0
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 264
30054: PUSH
30055: LD_EXP 27
30059: EQUAL
30060: NOT
30061: PUSH
30062: LD_VAR 0 1
30066: PUSH
30067: LD_EXP 107
30071: IN
30072: NOT
30073: OR
30074: IFFALSE 30078
// exit ;
30076: GO 30400
// index := GetElementIndex ( minersList , unit ) ;
30078: LD_ADDR_VAR 0 6
30082: PUSH
30083: LD_EXP 107
30087: PPUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL 35749 0 2
30097: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30098: LD_ADDR_VAR 0 8
30102: PUSH
30103: LD_EXP 109
30107: PUSH
30108: LD_EXP 108
30112: PUSH
30113: LD_VAR 0 6
30117: ARRAY
30118: MINUS
30119: ST_TO_ADDR
// if not minesFreeAmount then
30120: LD_VAR 0 8
30124: NOT
30125: IFFALSE 30129
// exit ;
30127: GO 30400
// tmp := [ ] ;
30129: LD_ADDR_VAR 0 7
30133: PUSH
30134: EMPTY
30135: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30136: LD_ADDR_VAR 0 5
30140: PUSH
30141: DOUBLE
30142: LD_INT 1
30144: DEC
30145: ST_TO_ADDR
30146: LD_VAR 0 8
30150: PUSH
30151: FOR_TO
30152: IFFALSE 30347
// begin _d := rand ( 0 , 5 ) ;
30154: LD_ADDR_VAR 0 11
30158: PUSH
30159: LD_INT 0
30161: PPUSH
30162: LD_INT 5
30164: PPUSH
30165: CALL_OW 12
30169: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30170: LD_ADDR_VAR 0 12
30174: PUSH
30175: LD_INT 2
30177: PPUSH
30178: LD_INT 6
30180: PPUSH
30181: CALL_OW 12
30185: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30186: LD_ADDR_VAR 0 9
30190: PUSH
30191: LD_VAR 0 2
30195: PPUSH
30196: LD_VAR 0 11
30200: PPUSH
30201: LD_VAR 0 12
30205: PPUSH
30206: CALL_OW 272
30210: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30211: LD_ADDR_VAR 0 10
30215: PUSH
30216: LD_VAR 0 3
30220: PPUSH
30221: LD_VAR 0 11
30225: PPUSH
30226: LD_VAR 0 12
30230: PPUSH
30231: CALL_OW 273
30235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30236: LD_VAR 0 9
30240: PPUSH
30241: LD_VAR 0 10
30245: PPUSH
30246: CALL_OW 488
30250: PUSH
30251: LD_VAR 0 9
30255: PUSH
30256: LD_VAR 0 10
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_VAR 0 7
30269: IN
30270: NOT
30271: AND
30272: PUSH
30273: LD_VAR 0 9
30277: PPUSH
30278: LD_VAR 0 10
30282: PPUSH
30283: CALL_OW 458
30287: NOT
30288: AND
30289: IFFALSE 30331
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30291: LD_ADDR_VAR 0 7
30295: PUSH
30296: LD_VAR 0 7
30300: PPUSH
30301: LD_VAR 0 7
30305: PUSH
30306: LD_INT 1
30308: PLUS
30309: PPUSH
30310: LD_VAR 0 9
30314: PUSH
30315: LD_VAR 0 10
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 1
30328: ST_TO_ADDR
30329: GO 30345
// i := i - 1 ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_VAR 0 5
30340: PUSH
30341: LD_INT 1
30343: MINUS
30344: ST_TO_ADDR
// end ;
30345: GO 30151
30347: POP
30348: POP
// for i in tmp do
30349: LD_ADDR_VAR 0 5
30353: PUSH
30354: LD_VAR 0 7
30358: PUSH
30359: FOR_IN
30360: IFFALSE 30398
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_VAR 0 5
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: PPUSH
30376: LD_VAR 0 5
30380: PUSH
30381: LD_INT 2
30383: ARRAY
30384: PPUSH
30385: CALL 29340 0 3
30389: NOT
30390: IFFALSE 30396
// exit ;
30392: POP
30393: POP
30394: GO 30400
30396: GO 30359
30398: POP
30399: POP
// end ;
30400: LD_VAR 0 4
30404: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30405: LD_INT 0
30407: PPUSH
30408: PPUSH
30409: PPUSH
30410: PPUSH
30411: PPUSH
30412: PPUSH
30413: PPUSH
// if not GetClass ( unit ) = class_sniper then
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 257
30423: PUSH
30424: LD_INT 5
30426: EQUAL
30427: NOT
30428: IFFALSE 30432
// exit ;
30430: GO 30820
// dist := 8 ;
30432: LD_ADDR_VAR 0 5
30436: PUSH
30437: LD_INT 8
30439: ST_TO_ADDR
// viewRange := 12 ;
30440: LD_ADDR_VAR 0 7
30444: PUSH
30445: LD_INT 12
30447: ST_TO_ADDR
// side := GetSide ( unit ) ;
30448: LD_ADDR_VAR 0 6
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 255
30462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30463: LD_INT 61
30465: PPUSH
30466: LD_VAR 0 6
30470: PPUSH
30471: CALL_OW 321
30475: PUSH
30476: LD_INT 2
30478: EQUAL
30479: IFFALSE 30489
// viewRange := 16 ;
30481: LD_ADDR_VAR 0 7
30485: PUSH
30486: LD_INT 16
30488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30489: LD_VAR 0 1
30493: PPUSH
30494: LD_VAR 0 2
30498: PPUSH
30499: LD_VAR 0 3
30503: PPUSH
30504: CALL_OW 297
30508: PUSH
30509: LD_VAR 0 5
30513: GREATER
30514: IFFALSE 30593
// begin ComMoveXY ( unit , x , y ) ;
30516: LD_VAR 0 1
30520: PPUSH
30521: LD_VAR 0 2
30525: PPUSH
30526: LD_VAR 0 3
30530: PPUSH
30531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30535: LD_INT 35
30537: PPUSH
30538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30542: LD_VAR 0 1
30546: PPUSH
30547: LD_VAR 0 2
30551: PPUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: CALL 67035 0 3
30561: NOT
30562: IFFALSE 30566
// exit ;
30564: GO 30820
// until GetDistUnitXY ( unit , x , y ) < dist ;
30566: LD_VAR 0 1
30570: PPUSH
30571: LD_VAR 0 2
30575: PPUSH
30576: LD_VAR 0 3
30580: PPUSH
30581: CALL_OW 297
30585: PUSH
30586: LD_VAR 0 5
30590: LESS
30591: IFFALSE 30535
// end ; ComTurnXY ( unit , x , y ) ;
30593: LD_VAR 0 1
30597: PPUSH
30598: LD_VAR 0 2
30602: PPUSH
30603: LD_VAR 0 3
30607: PPUSH
30608: CALL_OW 118
// wait ( 5 ) ;
30612: LD_INT 5
30614: PPUSH
30615: CALL_OW 67
// _d := GetDir ( unit ) ;
30619: LD_ADDR_VAR 0 10
30623: PUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 254
30633: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30634: LD_ADDR_VAR 0 8
30638: PUSH
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 250
30648: PPUSH
30649: LD_VAR 0 10
30653: PPUSH
30654: LD_VAR 0 5
30658: PPUSH
30659: CALL_OW 272
30663: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_VAR 0 1
30673: PPUSH
30674: CALL_OW 251
30678: PPUSH
30679: LD_VAR 0 10
30683: PPUSH
30684: LD_VAR 0 5
30688: PPUSH
30689: CALL_OW 273
30693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30694: LD_VAR 0 8
30698: PPUSH
30699: LD_VAR 0 9
30703: PPUSH
30704: CALL_OW 488
30708: NOT
30709: IFFALSE 30713
// exit ;
30711: GO 30820
// ComAnimCustom ( unit , 1 ) ;
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_INT 1
30720: PPUSH
30721: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30725: LD_VAR 0 8
30729: PPUSH
30730: LD_VAR 0 9
30734: PPUSH
30735: LD_VAR 0 6
30739: PPUSH
30740: LD_VAR 0 7
30744: PPUSH
30745: CALL_OW 330
// repeat wait ( 1 ) ;
30749: LD_INT 1
30751: PPUSH
30752: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 316
30765: PUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 314
30775: OR
30776: PUSH
30777: LD_VAR 0 1
30781: PPUSH
30782: CALL_OW 302
30786: NOT
30787: OR
30788: PUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 301
30798: OR
30799: IFFALSE 30749
// RemoveSeeing ( _x , _y , side ) ;
30801: LD_VAR 0 8
30805: PPUSH
30806: LD_VAR 0 9
30810: PPUSH
30811: LD_VAR 0 6
30815: PPUSH
30816: CALL_OW 331
// end ; end_of_file
30820: LD_VAR 0 4
30824: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30825: LD_INT 0
30827: PPUSH
30828: PPUSH
// if exist_mode then
30829: LD_VAR 0 2
30833: IFFALSE 30858
// unit := CreateCharacter ( prefix & ident ) else
30835: LD_ADDR_VAR 0 5
30839: PUSH
30840: LD_VAR 0 3
30844: PUSH
30845: LD_VAR 0 1
30849: STR
30850: PPUSH
30851: CALL_OW 34
30855: ST_TO_ADDR
30856: GO 30873
// unit := NewCharacter ( ident ) ;
30858: LD_ADDR_VAR 0 5
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 25
30872: ST_TO_ADDR
// result := unit ;
30873: LD_ADDR_VAR 0 4
30877: PUSH
30878: LD_VAR 0 5
30882: ST_TO_ADDR
// end ;
30883: LD_VAR 0 4
30887: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30888: LD_INT 0
30890: PPUSH
30891: PPUSH
// if not side or not nation then
30892: LD_VAR 0 1
30896: NOT
30897: PUSH
30898: LD_VAR 0 2
30902: NOT
30903: OR
30904: IFFALSE 30908
// exit ;
30906: GO 31676
// case nation of nation_american :
30908: LD_VAR 0 2
30912: PUSH
30913: LD_INT 1
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 31135
30921: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_INT 35
30929: PUSH
30930: LD_INT 45
30932: PUSH
30933: LD_INT 46
30935: PUSH
30936: LD_INT 47
30938: PUSH
30939: LD_INT 82
30941: PUSH
30942: LD_INT 83
30944: PUSH
30945: LD_INT 84
30947: PUSH
30948: LD_INT 85
30950: PUSH
30951: LD_INT 86
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 6
30962: PUSH
30963: LD_INT 15
30965: PUSH
30966: LD_INT 16
30968: PUSH
30969: LD_INT 7
30971: PUSH
30972: LD_INT 12
30974: PUSH
30975: LD_INT 13
30977: PUSH
30978: LD_INT 10
30980: PUSH
30981: LD_INT 14
30983: PUSH
30984: LD_INT 20
30986: PUSH
30987: LD_INT 21
30989: PUSH
30990: LD_INT 22
30992: PUSH
30993: LD_INT 25
30995: PUSH
30996: LD_INT 32
30998: PUSH
30999: LD_INT 27
31001: PUSH
31002: LD_INT 36
31004: PUSH
31005: LD_INT 69
31007: PUSH
31008: LD_INT 39
31010: PUSH
31011: LD_INT 34
31013: PUSH
31014: LD_INT 40
31016: PUSH
31017: LD_INT 48
31019: PUSH
31020: LD_INT 49
31022: PUSH
31023: LD_INT 50
31025: PUSH
31026: LD_INT 51
31028: PUSH
31029: LD_INT 52
31031: PUSH
31032: LD_INT 53
31034: PUSH
31035: LD_INT 54
31037: PUSH
31038: LD_INT 55
31040: PUSH
31041: LD_INT 56
31043: PUSH
31044: LD_INT 57
31046: PUSH
31047: LD_INT 58
31049: PUSH
31050: LD_INT 59
31052: PUSH
31053: LD_INT 60
31055: PUSH
31056: LD_INT 61
31058: PUSH
31059: LD_INT 62
31061: PUSH
31062: LD_INT 80
31064: PUSH
31065: LD_INT 82
31067: PUSH
31068: LD_INT 83
31070: PUSH
31071: LD_INT 84
31073: PUSH
31074: LD_INT 85
31076: PUSH
31077: LD_INT 86
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
31133: GO 31600
31135: LD_INT 2
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31369
31143: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31144: LD_ADDR_VAR 0 4
31148: PUSH
31149: LD_INT 35
31151: PUSH
31152: LD_INT 45
31154: PUSH
31155: LD_INT 46
31157: PUSH
31158: LD_INT 47
31160: PUSH
31161: LD_INT 82
31163: PUSH
31164: LD_INT 83
31166: PUSH
31167: LD_INT 84
31169: PUSH
31170: LD_INT 85
31172: PUSH
31173: LD_INT 87
31175: PUSH
31176: LD_INT 70
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 11
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: LD_INT 5
31193: PUSH
31194: LD_INT 6
31196: PUSH
31197: LD_INT 15
31199: PUSH
31200: LD_INT 18
31202: PUSH
31203: LD_INT 7
31205: PUSH
31206: LD_INT 17
31208: PUSH
31209: LD_INT 8
31211: PUSH
31212: LD_INT 20
31214: PUSH
31215: LD_INT 21
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_INT 72
31223: PUSH
31224: LD_INT 26
31226: PUSH
31227: LD_INT 69
31229: PUSH
31230: LD_INT 39
31232: PUSH
31233: LD_INT 40
31235: PUSH
31236: LD_INT 41
31238: PUSH
31239: LD_INT 42
31241: PUSH
31242: LD_INT 43
31244: PUSH
31245: LD_INT 48
31247: PUSH
31248: LD_INT 49
31250: PUSH
31251: LD_INT 50
31253: PUSH
31254: LD_INT 51
31256: PUSH
31257: LD_INT 52
31259: PUSH
31260: LD_INT 53
31262: PUSH
31263: LD_INT 54
31265: PUSH
31266: LD_INT 55
31268: PUSH
31269: LD_INT 56
31271: PUSH
31272: LD_INT 60
31274: PUSH
31275: LD_INT 61
31277: PUSH
31278: LD_INT 62
31280: PUSH
31281: LD_INT 66
31283: PUSH
31284: LD_INT 67
31286: PUSH
31287: LD_INT 68
31289: PUSH
31290: LD_INT 81
31292: PUSH
31293: LD_INT 82
31295: PUSH
31296: LD_INT 83
31298: PUSH
31299: LD_INT 84
31301: PUSH
31302: LD_INT 85
31304: PUSH
31305: LD_INT 87
31307: PUSH
31308: LD_INT 88
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31600
31369: LD_INT 3
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31599
31377: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31378: LD_ADDR_VAR 0 4
31382: PUSH
31383: LD_INT 46
31385: PUSH
31386: LD_INT 47
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 82
31397: PUSH
31398: LD_INT 83
31400: PUSH
31401: LD_INT 84
31403: PUSH
31404: LD_INT 85
31406: PUSH
31407: LD_INT 86
31409: PUSH
31410: LD_INT 11
31412: PUSH
31413: LD_INT 9
31415: PUSH
31416: LD_INT 20
31418: PUSH
31419: LD_INT 19
31421: PUSH
31422: LD_INT 21
31424: PUSH
31425: LD_INT 24
31427: PUSH
31428: LD_INT 22
31430: PUSH
31431: LD_INT 25
31433: PUSH
31434: LD_INT 28
31436: PUSH
31437: LD_INT 29
31439: PUSH
31440: LD_INT 30
31442: PUSH
31443: LD_INT 31
31445: PUSH
31446: LD_INT 37
31448: PUSH
31449: LD_INT 38
31451: PUSH
31452: LD_INT 32
31454: PUSH
31455: LD_INT 27
31457: PUSH
31458: LD_INT 33
31460: PUSH
31461: LD_INT 69
31463: PUSH
31464: LD_INT 39
31466: PUSH
31467: LD_INT 34
31469: PUSH
31470: LD_INT 40
31472: PUSH
31473: LD_INT 71
31475: PUSH
31476: LD_INT 23
31478: PUSH
31479: LD_INT 44
31481: PUSH
31482: LD_INT 48
31484: PUSH
31485: LD_INT 49
31487: PUSH
31488: LD_INT 50
31490: PUSH
31491: LD_INT 51
31493: PUSH
31494: LD_INT 52
31496: PUSH
31497: LD_INT 53
31499: PUSH
31500: LD_INT 54
31502: PUSH
31503: LD_INT 55
31505: PUSH
31506: LD_INT 56
31508: PUSH
31509: LD_INT 57
31511: PUSH
31512: LD_INT 58
31514: PUSH
31515: LD_INT 59
31517: PUSH
31518: LD_INT 63
31520: PUSH
31521: LD_INT 64
31523: PUSH
31524: LD_INT 65
31526: PUSH
31527: LD_INT 82
31529: PUSH
31530: LD_INT 83
31532: PUSH
31533: LD_INT 84
31535: PUSH
31536: LD_INT 85
31538: PUSH
31539: LD_INT 86
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
31597: GO 31600
31599: POP
// if state > - 1 and state < 3 then
31600: LD_VAR 0 3
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: GREATER
31609: PUSH
31610: LD_VAR 0 3
31614: PUSH
31615: LD_INT 3
31617: LESS
31618: AND
31619: IFFALSE 31676
// for i in result do
31621: LD_ADDR_VAR 0 5
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: FOR_IN
31632: IFFALSE 31674
// if GetTech ( i , side ) <> state then
31634: LD_VAR 0 5
31638: PPUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 321
31648: PUSH
31649: LD_VAR 0 3
31653: NONEQUAL
31654: IFFALSE 31672
// result := result diff i ;
31656: LD_ADDR_VAR 0 4
31660: PUSH
31661: LD_VAR 0 4
31665: PUSH
31666: LD_VAR 0 5
31670: DIFF
31671: ST_TO_ADDR
31672: GO 31631
31674: POP
31675: POP
// end ;
31676: LD_VAR 0 4
31680: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
31685: PPUSH
// result := true ;
31686: LD_ADDR_VAR 0 3
31690: PUSH
31691: LD_INT 1
31693: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31694: LD_ADDR_VAR 0 5
31698: PUSH
31699: LD_VAR 0 2
31703: PPUSH
31704: CALL_OW 480
31708: ST_TO_ADDR
// if not tmp then
31709: LD_VAR 0 5
31713: NOT
31714: IFFALSE 31718
// exit ;
31716: GO 31767
// for i in tmp do
31718: LD_ADDR_VAR 0 4
31722: PUSH
31723: LD_VAR 0 5
31727: PUSH
31728: FOR_IN
31729: IFFALSE 31765
// if GetTech ( i , side ) <> state_researched then
31731: LD_VAR 0 4
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 321
31745: PUSH
31746: LD_INT 2
31748: NONEQUAL
31749: IFFALSE 31763
// begin result := false ;
31751: LD_ADDR_VAR 0 3
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// exit ;
31759: POP
31760: POP
31761: GO 31767
// end ;
31763: GO 31728
31765: POP
31766: POP
// end ;
31767: LD_VAR 0 3
31771: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31772: LD_INT 0
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31787: LD_VAR 0 1
31791: NOT
31792: PUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 257
31802: PUSH
31803: LD_INT 9
31805: NONEQUAL
31806: OR
31807: IFFALSE 31811
// exit ;
31809: GO 32384
// side := GetSide ( unit ) ;
31811: LD_ADDR_VAR 0 9
31815: PUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 255
31825: ST_TO_ADDR
// tech_space := tech_spacanom ;
31826: LD_ADDR_VAR 0 12
31830: PUSH
31831: LD_INT 29
31833: ST_TO_ADDR
// tech_time := tech_taurad ;
31834: LD_ADDR_VAR 0 13
31838: PUSH
31839: LD_INT 28
31841: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31842: LD_ADDR_VAR 0 11
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 310
31856: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31857: LD_VAR 0 11
31861: PPUSH
31862: CALL_OW 247
31866: PUSH
31867: LD_INT 2
31869: EQUAL
31870: IFFALSE 31874
// exit ;
31872: GO 32384
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31874: LD_ADDR_VAR 0 8
31878: PUSH
31879: LD_INT 81
31881: PUSH
31882: LD_VAR 0 9
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: LD_INT 21
31896: PUSH
31897: LD_INT 3
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PPUSH
31912: CALL_OW 69
31916: ST_TO_ADDR
// if not tmp then
31917: LD_VAR 0 8
31921: NOT
31922: IFFALSE 31926
// exit ;
31924: GO 32384
// if in_unit then
31926: LD_VAR 0 11
31930: IFFALSE 31954
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31932: LD_ADDR_VAR 0 10
31936: PUSH
31937: LD_VAR 0 8
31941: PPUSH
31942: LD_VAR 0 11
31946: PPUSH
31947: CALL_OW 74
31951: ST_TO_ADDR
31952: GO 31974
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31954: LD_ADDR_VAR 0 10
31958: PUSH
31959: LD_VAR 0 8
31963: PPUSH
31964: LD_VAR 0 1
31968: PPUSH
31969: CALL_OW 74
31973: ST_TO_ADDR
// if not enemy then
31974: LD_VAR 0 10
31978: NOT
31979: IFFALSE 31983
// exit ;
31981: GO 32384
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31983: LD_VAR 0 11
31987: PUSH
31988: LD_VAR 0 11
31992: PPUSH
31993: LD_VAR 0 10
31997: PPUSH
31998: CALL_OW 296
32002: PUSH
32003: LD_INT 13
32005: GREATER
32006: AND
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: LD_VAR 0 10
32017: PPUSH
32018: CALL_OW 296
32022: PUSH
32023: LD_INT 12
32025: GREATER
32026: OR
32027: IFFALSE 32031
// exit ;
32029: GO 32384
// missile := [ 1 ] ;
32031: LD_ADDR_VAR 0 14
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32042: LD_VAR 0 9
32046: PPUSH
32047: LD_VAR 0 12
32051: PPUSH
32052: CALL_OW 325
32056: IFFALSE 32085
// missile := Replace ( missile , missile + 1 , 2 ) ;
32058: LD_ADDR_VAR 0 14
32062: PUSH
32063: LD_VAR 0 14
32067: PPUSH
32068: LD_VAR 0 14
32072: PUSH
32073: LD_INT 1
32075: PLUS
32076: PPUSH
32077: LD_INT 2
32079: PPUSH
32080: CALL_OW 1
32084: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32085: LD_VAR 0 9
32089: PPUSH
32090: LD_VAR 0 13
32094: PPUSH
32095: CALL_OW 325
32099: PUSH
32100: LD_VAR 0 10
32104: PPUSH
32105: CALL_OW 255
32109: PPUSH
32110: LD_VAR 0 13
32114: PPUSH
32115: CALL_OW 325
32119: NOT
32120: AND
32121: IFFALSE 32150
// missile := Replace ( missile , missile + 1 , 3 ) ;
32123: LD_ADDR_VAR 0 14
32127: PUSH
32128: LD_VAR 0 14
32132: PPUSH
32133: LD_VAR 0 14
32137: PUSH
32138: LD_INT 1
32140: PLUS
32141: PPUSH
32142: LD_INT 3
32144: PPUSH
32145: CALL_OW 1
32149: ST_TO_ADDR
// if missile < 2 then
32150: LD_VAR 0 14
32154: PUSH
32155: LD_INT 2
32157: LESS
32158: IFFALSE 32162
// exit ;
32160: GO 32384
// x := GetX ( enemy ) ;
32162: LD_ADDR_VAR 0 4
32166: PUSH
32167: LD_VAR 0 10
32171: PPUSH
32172: CALL_OW 250
32176: ST_TO_ADDR
// y := GetY ( enemy ) ;
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_VAR 0 10
32186: PPUSH
32187: CALL_OW 251
32191: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32192: LD_ADDR_VAR 0 6
32196: PUSH
32197: LD_VAR 0 4
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PPUSH
32206: LD_INT 1
32208: PPUSH
32209: CALL_OW 12
32213: PLUS
32214: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32215: LD_ADDR_VAR 0 7
32219: PUSH
32220: LD_VAR 0 5
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PPUSH
32229: LD_INT 1
32231: PPUSH
32232: CALL_OW 12
32236: PLUS
32237: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32238: LD_VAR 0 6
32242: PPUSH
32243: LD_VAR 0 7
32247: PPUSH
32248: CALL_OW 488
32252: NOT
32253: IFFALSE 32275
// begin _x := x ;
32255: LD_ADDR_VAR 0 6
32259: PUSH
32260: LD_VAR 0 4
32264: ST_TO_ADDR
// _y := y ;
32265: LD_ADDR_VAR 0 7
32269: PUSH
32270: LD_VAR 0 5
32274: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_INT 1
32282: PPUSH
32283: LD_VAR 0 14
32287: PPUSH
32288: CALL_OW 12
32292: ST_TO_ADDR
// case i of 1 :
32293: LD_VAR 0 3
32297: PUSH
32298: LD_INT 1
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32323
32306: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32307: LD_VAR 0 1
32311: PPUSH
32312: LD_VAR 0 10
32316: PPUSH
32317: CALL_OW 115
32321: GO 32384
32323: LD_INT 2
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32353
32331: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32332: LD_VAR 0 1
32336: PPUSH
32337: LD_VAR 0 6
32341: PPUSH
32342: LD_VAR 0 7
32346: PPUSH
32347: CALL_OW 153
32351: GO 32384
32353: LD_INT 3
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32383
32361: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32362: LD_VAR 0 1
32366: PPUSH
32367: LD_VAR 0 6
32371: PPUSH
32372: LD_VAR 0 7
32376: PPUSH
32377: CALL_OW 154
32381: GO 32384
32383: POP
// end ;
32384: LD_VAR 0 2
32388: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
32393: PPUSH
32394: PPUSH
32395: PPUSH
32396: PPUSH
// if not unit or not building then
32397: LD_VAR 0 1
32401: NOT
32402: PUSH
32403: LD_VAR 0 2
32407: NOT
32408: OR
32409: IFFALSE 32413
// exit ;
32411: GO 32571
// x := GetX ( building ) ;
32413: LD_ADDR_VAR 0 5
32417: PUSH
32418: LD_VAR 0 2
32422: PPUSH
32423: CALL_OW 250
32427: ST_TO_ADDR
// y := GetY ( building ) ;
32428: LD_ADDR_VAR 0 6
32432: PUSH
32433: LD_VAR 0 2
32437: PPUSH
32438: CALL_OW 251
32442: ST_TO_ADDR
// for i = 0 to 5 do
32443: LD_ADDR_VAR 0 4
32447: PUSH
32448: DOUBLE
32449: LD_INT 0
32451: DEC
32452: ST_TO_ADDR
32453: LD_INT 5
32455: PUSH
32456: FOR_TO
32457: IFFALSE 32569
// begin _x := ShiftX ( x , i , 3 ) ;
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: LD_VAR 0 5
32468: PPUSH
32469: LD_VAR 0 4
32473: PPUSH
32474: LD_INT 3
32476: PPUSH
32477: CALL_OW 272
32481: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32482: LD_ADDR_VAR 0 8
32486: PUSH
32487: LD_VAR 0 6
32491: PPUSH
32492: LD_VAR 0 4
32496: PPUSH
32497: LD_INT 3
32499: PPUSH
32500: CALL_OW 273
32504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32505: LD_VAR 0 7
32509: PPUSH
32510: LD_VAR 0 8
32514: PPUSH
32515: CALL_OW 488
32519: NOT
32520: IFFALSE 32524
// continue ;
32522: GO 32456
// if HexInfo ( _x , _y ) = 0 then
32524: LD_VAR 0 7
32528: PPUSH
32529: LD_VAR 0 8
32533: PPUSH
32534: CALL_OW 428
32538: PUSH
32539: LD_INT 0
32541: EQUAL
32542: IFFALSE 32567
// begin ComMoveXY ( unit , _x , _y ) ;
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_VAR 0 7
32553: PPUSH
32554: LD_VAR 0 8
32558: PPUSH
32559: CALL_OW 111
// exit ;
32563: POP
32564: POP
32565: GO 32571
// end ; end ;
32567: GO 32456
32569: POP
32570: POP
// end ;
32571: LD_VAR 0 3
32575: RET
// export function ScanBase ( side , base_area ) ; begin
32576: LD_INT 0
32578: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32579: LD_ADDR_VAR 0 3
32583: PUSH
32584: LD_VAR 0 2
32588: PPUSH
32589: LD_INT 81
32591: PUSH
32592: LD_VAR 0 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 70
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 3
32610: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
// result := false ;
32617: LD_ADDR_VAR 0 2
32621: PUSH
32622: LD_INT 0
32624: ST_TO_ADDR
// side := GetSide ( unit ) ;
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_VAR 0 1
32634: PPUSH
32635: CALL_OW 255
32639: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32640: LD_ADDR_VAR 0 4
32644: PUSH
32645: LD_VAR 0 1
32649: PPUSH
32650: CALL_OW 248
32654: ST_TO_ADDR
// case nat of 1 :
32655: LD_VAR 0 4
32659: PUSH
32660: LD_INT 1
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32679
32668: POP
// tech := tech_lassight ; 2 :
32669: LD_ADDR_VAR 0 5
32673: PUSH
32674: LD_INT 12
32676: ST_TO_ADDR
32677: GO 32718
32679: LD_INT 2
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32698
32687: POP
// tech := tech_mortar ; 3 :
32688: LD_ADDR_VAR 0 5
32692: PUSH
32693: LD_INT 41
32695: ST_TO_ADDR
32696: GO 32718
32698: LD_INT 3
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32717
32706: POP
// tech := tech_bazooka ; end ;
32707: LD_ADDR_VAR 0 5
32711: PUSH
32712: LD_INT 44
32714: ST_TO_ADDR
32715: GO 32718
32717: POP
// if Researched ( side , tech ) then
32718: LD_VAR 0 3
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL_OW 325
32732: IFFALSE 32759
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32734: LD_ADDR_VAR 0 2
32738: PUSH
32739: LD_INT 5
32741: PUSH
32742: LD_INT 8
32744: PUSH
32745: LD_INT 9
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 4
32757: ARRAY
32758: ST_TO_ADDR
// end ;
32759: LD_VAR 0 2
32763: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32764: LD_INT 0
32766: PPUSH
32767: PPUSH
32768: PPUSH
// if not mines then
32769: LD_VAR 0 2
32773: NOT
32774: IFFALSE 32778
// exit ;
32776: GO 32922
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32778: LD_ADDR_VAR 0 5
32782: PUSH
32783: LD_INT 81
32785: PUSH
32786: LD_VAR 0 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PPUSH
32816: CALL_OW 69
32820: ST_TO_ADDR
// for i in mines do
32821: LD_ADDR_VAR 0 4
32825: PUSH
32826: LD_VAR 0 2
32830: PUSH
32831: FOR_IN
32832: IFFALSE 32920
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32834: LD_VAR 0 4
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: PPUSH
32843: LD_VAR 0 4
32847: PUSH
32848: LD_INT 2
32850: ARRAY
32851: PPUSH
32852: CALL_OW 458
32856: NOT
32857: IFFALSE 32861
// continue ;
32859: GO 32831
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32861: LD_VAR 0 4
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PPUSH
32870: LD_VAR 0 4
32874: PUSH
32875: LD_INT 2
32877: ARRAY
32878: PPUSH
32879: CALL_OW 428
32883: PUSH
32884: LD_VAR 0 5
32888: IN
32889: IFFALSE 32918
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32891: LD_VAR 0 4
32895: PUSH
32896: LD_INT 1
32898: ARRAY
32899: PPUSH
32900: LD_VAR 0 4
32904: PUSH
32905: LD_INT 2
32907: ARRAY
32908: PPUSH
32909: LD_VAR 0 1
32913: PPUSH
32914: CALL_OW 456
// end ;
32918: GO 32831
32920: POP
32921: POP
// end ;
32922: LD_VAR 0 3
32926: RET
// export function Count ( array ) ; var i ; begin
32927: LD_INT 0
32929: PPUSH
32930: PPUSH
// result := 0 ;
32931: LD_ADDR_VAR 0 2
32935: PUSH
32936: LD_INT 0
32938: ST_TO_ADDR
// for i in array do
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_VAR 0 1
32948: PUSH
32949: FOR_IN
32950: IFFALSE 32974
// if i then
32952: LD_VAR 0 3
32956: IFFALSE 32972
// result := result + 1 ;
32958: LD_ADDR_VAR 0 2
32962: PUSH
32963: LD_VAR 0 2
32967: PUSH
32968: LD_INT 1
32970: PLUS
32971: ST_TO_ADDR
32972: GO 32949
32974: POP
32975: POP
// end ;
32976: LD_VAR 0 2
32980: RET
// export function IsEmpty ( building ) ; begin
32981: LD_INT 0
32983: PPUSH
// if not building then
32984: LD_VAR 0 1
32988: NOT
32989: IFFALSE 32993
// exit ;
32991: GO 33036
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_VAR 0 1
33002: PUSH
33003: LD_INT 22
33005: PUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 255
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 58
33022: PUSH
33023: EMPTY
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PPUSH
33030: CALL_OW 69
33034: IN
33035: ST_TO_ADDR
// end ;
33036: LD_VAR 0 2
33040: RET
// export function IsNotFull ( building ) ; var places ; begin
33041: LD_INT 0
33043: PPUSH
33044: PPUSH
// if not building then
33045: LD_VAR 0 1
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 33225
// result := false ;
33054: LD_ADDR_VAR 0 2
33058: PUSH
33059: LD_INT 0
33061: ST_TO_ADDR
// places := 0 ;
33062: LD_ADDR_VAR 0 3
33066: PUSH
33067: LD_INT 0
33069: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 266
33079: PUSH
33080: LD_INT 0
33082: DOUBLE
33083: EQUAL
33084: IFTRUE 33142
33086: LD_INT 1
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33142
33092: LD_INT 6
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33142
33098: LD_INT 7
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33142
33104: LD_INT 8
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33142
33110: LD_INT 4
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33142
33116: LD_INT 5
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33142
33122: LD_INT 2
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33142
33128: LD_INT 3
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33142
33134: LD_INT 35
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33153
33142: POP
// places := 6 ; b_bunker , b_breastwork :
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_INT 6
33150: ST_TO_ADDR
33151: GO 33198
33153: LD_INT 32
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33167
33159: LD_INT 31
33161: DOUBLE
33162: EQUAL
33163: IFTRUE 33167
33165: GO 33178
33167: POP
// places := 1 ; b_control_tower :
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 1
33175: ST_TO_ADDR
33176: GO 33198
33178: LD_INT 36
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33186
33184: GO 33197
33186: POP
// places := 3 ; end ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 3
33194: ST_TO_ADDR
33195: GO 33198
33197: POP
// if places then
33198: LD_VAR 0 3
33202: IFFALSE 33225
// result := UnitsInside ( building ) < places ;
33204: LD_ADDR_VAR 0 2
33208: PUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 313
33218: PUSH
33219: LD_VAR 0 3
33223: LESS
33224: ST_TO_ADDR
// end ;
33225: LD_VAR 0 2
33229: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
// tmp := [ ] ;
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: EMPTY
33242: ST_TO_ADDR
// list := [ ] ;
33243: LD_ADDR_VAR 0 5
33247: PUSH
33248: EMPTY
33249: ST_TO_ADDR
// for i = 16 to 25 do
33250: LD_ADDR_VAR 0 4
33254: PUSH
33255: DOUBLE
33256: LD_INT 16
33258: DEC
33259: ST_TO_ADDR
33260: LD_INT 25
33262: PUSH
33263: FOR_TO
33264: IFFALSE 33337
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_VAR 0 3
33275: PUSH
33276: LD_INT 22
33278: PUSH
33279: LD_VAR 0 1
33283: PPUSH
33284: CALL_OW 255
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 91
33295: PUSH
33296: LD_VAR 0 1
33300: PUSH
33301: LD_INT 6
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 30
33311: PUSH
33312: LD_VAR 0 4
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: PUSH
33326: EMPTY
33327: LIST
33328: PPUSH
33329: CALL_OW 69
33333: ADD
33334: ST_TO_ADDR
33335: GO 33263
33337: POP
33338: POP
// for i = 1 to tmp do
33339: LD_ADDR_VAR 0 4
33343: PUSH
33344: DOUBLE
33345: LD_INT 1
33347: DEC
33348: ST_TO_ADDR
33349: LD_VAR 0 3
33353: PUSH
33354: FOR_TO
33355: IFFALSE 33443
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33357: LD_ADDR_VAR 0 5
33361: PUSH
33362: LD_VAR 0 5
33366: PUSH
33367: LD_VAR 0 3
33371: PUSH
33372: LD_VAR 0 4
33376: ARRAY
33377: PPUSH
33378: CALL_OW 266
33382: PUSH
33383: LD_VAR 0 3
33387: PUSH
33388: LD_VAR 0 4
33392: ARRAY
33393: PPUSH
33394: CALL_OW 250
33398: PUSH
33399: LD_VAR 0 3
33403: PUSH
33404: LD_VAR 0 4
33408: ARRAY
33409: PPUSH
33410: CALL_OW 251
33414: PUSH
33415: LD_VAR 0 3
33419: PUSH
33420: LD_VAR 0 4
33424: ARRAY
33425: PPUSH
33426: CALL_OW 254
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: ADD
33440: ST_TO_ADDR
33441: GO 33354
33443: POP
33444: POP
// result := list ;
33445: LD_ADDR_VAR 0 2
33449: PUSH
33450: LD_VAR 0 5
33454: ST_TO_ADDR
// end ;
33455: LD_VAR 0 2
33459: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33460: LD_INT 0
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
// if not factory then
33469: LD_VAR 0 1
33473: NOT
33474: IFFALSE 33478
// exit ;
33476: GO 34071
// if control = control_apeman then
33478: LD_VAR 0 4
33482: PUSH
33483: LD_INT 5
33485: EQUAL
33486: IFFALSE 33595
// begin tmp := UnitsInside ( factory ) ;
33488: LD_ADDR_VAR 0 8
33492: PUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: CALL_OW 313
33502: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33503: LD_VAR 0 8
33507: PPUSH
33508: LD_INT 25
33510: PUSH
33511: LD_INT 12
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PPUSH
33518: CALL_OW 72
33522: NOT
33523: IFFALSE 33533
// control := control_manual ;
33525: LD_ADDR_VAR 0 4
33529: PUSH
33530: LD_INT 1
33532: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33533: LD_ADDR_VAR 0 8
33537: PUSH
33538: LD_VAR 0 1
33542: PPUSH
33543: CALL 33230 0 1
33547: ST_TO_ADDR
// if tmp then
33548: LD_VAR 0 8
33552: IFFALSE 33595
// begin for i in tmp do
33554: LD_ADDR_VAR 0 7
33558: PUSH
33559: LD_VAR 0 8
33563: PUSH
33564: FOR_IN
33565: IFFALSE 33593
// if i [ 1 ] = b_ext_radio then
33567: LD_VAR 0 7
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: PUSH
33576: LD_INT 22
33578: EQUAL
33579: IFFALSE 33591
// begin control := control_remote ;
33581: LD_ADDR_VAR 0 4
33585: PUSH
33586: LD_INT 2
33588: ST_TO_ADDR
// break ;
33589: GO 33593
// end ;
33591: GO 33564
33593: POP
33594: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33595: LD_VAR 0 1
33599: PPUSH
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_VAR 0 3
33609: PPUSH
33610: LD_VAR 0 4
33614: PPUSH
33615: LD_VAR 0 5
33619: PPUSH
33620: CALL_OW 448
33624: IFFALSE 33659
// begin result := [ chassis , engine , control , weapon ] ;
33626: LD_ADDR_VAR 0 6
33630: PUSH
33631: LD_VAR 0 2
33635: PUSH
33636: LD_VAR 0 3
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: LD_VAR 0 5
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: ST_TO_ADDR
// exit ;
33657: GO 34071
// end ; _chassis := AvailableChassisList ( factory ) ;
33659: LD_ADDR_VAR 0 9
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 475
33673: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33674: LD_ADDR_VAR 0 11
33678: PUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 476
33688: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33689: LD_ADDR_VAR 0 12
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 477
33703: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33704: LD_ADDR_VAR 0 10
33708: PUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 478
33718: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33719: LD_VAR 0 9
33723: NOT
33724: PUSH
33725: LD_VAR 0 11
33729: NOT
33730: OR
33731: PUSH
33732: LD_VAR 0 12
33736: NOT
33737: OR
33738: PUSH
33739: LD_VAR 0 10
33743: NOT
33744: OR
33745: IFFALSE 33780
// begin result := [ chassis , engine , control , weapon ] ;
33747: LD_ADDR_VAR 0 6
33751: PUSH
33752: LD_VAR 0 2
33756: PUSH
33757: LD_VAR 0 3
33761: PUSH
33762: LD_VAR 0 4
33766: PUSH
33767: LD_VAR 0 5
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// exit ;
33778: GO 34071
// end ; if not chassis in _chassis then
33780: LD_VAR 0 2
33784: PUSH
33785: LD_VAR 0 9
33789: IN
33790: NOT
33791: IFFALSE 33817
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33793: LD_ADDR_VAR 0 2
33797: PUSH
33798: LD_VAR 0 9
33802: PUSH
33803: LD_INT 1
33805: PPUSH
33806: LD_VAR 0 9
33810: PPUSH
33811: CALL_OW 12
33815: ARRAY
33816: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33817: LD_VAR 0 2
33821: PPUSH
33822: LD_VAR 0 3
33826: PPUSH
33827: CALL 34076 0 2
33831: NOT
33832: IFFALSE 33891
// repeat engine := _engine [ 1 ] ;
33834: LD_ADDR_VAR 0 3
33838: PUSH
33839: LD_VAR 0 11
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33848: LD_ADDR_VAR 0 11
33852: PUSH
33853: LD_VAR 0 11
33857: PPUSH
33858: LD_INT 1
33860: PPUSH
33861: CALL_OW 3
33865: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33866: LD_VAR 0 2
33870: PPUSH
33871: LD_VAR 0 3
33875: PPUSH
33876: CALL 34076 0 2
33880: PUSH
33881: LD_VAR 0 11
33885: PUSH
33886: EMPTY
33887: EQUAL
33888: OR
33889: IFFALSE 33834
// if not control in _control then
33891: LD_VAR 0 4
33895: PUSH
33896: LD_VAR 0 12
33900: IN
33901: NOT
33902: IFFALSE 33928
// control := _control [ rand ( 1 , _control ) ] ;
33904: LD_ADDR_VAR 0 4
33908: PUSH
33909: LD_VAR 0 12
33913: PUSH
33914: LD_INT 1
33916: PPUSH
33917: LD_VAR 0 12
33921: PPUSH
33922: CALL_OW 12
33926: ARRAY
33927: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33928: LD_VAR 0 2
33932: PPUSH
33933: LD_VAR 0 5
33937: PPUSH
33938: CALL 34296 0 2
33942: NOT
33943: IFFALSE 34002
// repeat weapon := _weapon [ 1 ] ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_VAR 0 10
33954: PUSH
33955: LD_INT 1
33957: ARRAY
33958: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33959: LD_ADDR_VAR 0 10
33963: PUSH
33964: LD_VAR 0 10
33968: PPUSH
33969: LD_INT 1
33971: PPUSH
33972: CALL_OW 3
33976: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33977: LD_VAR 0 2
33981: PPUSH
33982: LD_VAR 0 5
33986: PPUSH
33987: CALL 34296 0 2
33991: PUSH
33992: LD_VAR 0 10
33996: PUSH
33997: EMPTY
33998: EQUAL
33999: OR
34000: IFFALSE 33945
// result := [ ] ;
34002: LD_ADDR_VAR 0 6
34006: PUSH
34007: EMPTY
34008: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34009: LD_VAR 0 1
34013: PPUSH
34014: LD_VAR 0 2
34018: PPUSH
34019: LD_VAR 0 3
34023: PPUSH
34024: LD_VAR 0 4
34028: PPUSH
34029: LD_VAR 0 5
34033: PPUSH
34034: CALL_OW 448
34038: IFFALSE 34071
// result := [ chassis , engine , control , weapon ] ;
34040: LD_ADDR_VAR 0 6
34044: PUSH
34045: LD_VAR 0 2
34049: PUSH
34050: LD_VAR 0 3
34054: PUSH
34055: LD_VAR 0 4
34059: PUSH
34060: LD_VAR 0 5
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// end ;
34071: LD_VAR 0 6
34075: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34076: LD_INT 0
34078: PPUSH
// if not chassis or not engine then
34079: LD_VAR 0 1
34083: NOT
34084: PUSH
34085: LD_VAR 0 2
34089: NOT
34090: OR
34091: IFFALSE 34095
// exit ;
34093: GO 34291
// case engine of engine_solar :
34095: LD_VAR 0 2
34099: PUSH
34100: LD_INT 2
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34146
34108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 11
34116: PUSH
34117: LD_INT 12
34119: PUSH
34120: LD_INT 13
34122: PUSH
34123: LD_INT 14
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: LD_INT 3
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
34144: GO 34275
34146: LD_INT 1
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34216
34154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 11
34162: PUSH
34163: LD_INT 12
34165: PUSH
34166: LD_INT 13
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 4
34183: PUSH
34184: LD_INT 5
34186: PUSH
34187: LD_INT 21
34189: PUSH
34190: LD_INT 23
34192: PUSH
34193: LD_INT 22
34195: PUSH
34196: LD_INT 24
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
34214: GO 34275
34216: LD_INT 3
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34274
34224: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34225: LD_ADDR_VAR 0 3
34229: PUSH
34230: LD_INT 13
34232: PUSH
34233: LD_INT 14
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: LD_INT 4
34244: PUSH
34245: LD_INT 5
34247: PUSH
34248: LD_INT 21
34250: PUSH
34251: LD_INT 22
34253: PUSH
34254: LD_INT 23
34256: PUSH
34257: LD_INT 24
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: ST_TO_ADDR
34272: GO 34275
34274: POP
// result := ( chassis in result ) ;
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_VAR 0 1
34284: PUSH
34285: LD_VAR 0 3
34289: IN
34290: ST_TO_ADDR
// end ;
34291: LD_VAR 0 3
34295: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34296: LD_INT 0
34298: PPUSH
// if not chassis or not weapon then
34299: LD_VAR 0 1
34303: NOT
34304: PUSH
34305: LD_VAR 0 2
34309: NOT
34310: OR
34311: IFFALSE 34315
// exit ;
34313: GO 35377
// case weapon of us_machine_gun :
34315: LD_VAR 0 2
34319: PUSH
34320: LD_INT 2
34322: DOUBLE
34323: EQUAL
34324: IFTRUE 34328
34326: GO 34358
34328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 4
34345: PUSH
34346: LD_INT 5
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: ST_TO_ADDR
34356: GO 35361
34358: LD_INT 3
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 34396
34366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 4
34383: PUSH
34384: LD_INT 5
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: ST_TO_ADDR
34394: GO 35361
34396: LD_INT 11
34398: DOUBLE
34399: EQUAL
34400: IFTRUE 34404
34402: GO 34434
34404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 3
34418: PUSH
34419: LD_INT 4
34421: PUSH
34422: LD_INT 5
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: ST_TO_ADDR
34432: GO 35361
34434: LD_INT 4
34436: DOUBLE
34437: EQUAL
34438: IFTRUE 34442
34440: GO 34468
34442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34443: LD_ADDR_VAR 0 3
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: LD_INT 4
34456: PUSH
34457: LD_INT 5
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: ST_TO_ADDR
34466: GO 35361
34468: LD_INT 5
34470: DOUBLE
34471: EQUAL
34472: IFTRUE 34476
34474: GO 34502
34476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 3
34487: PUSH
34488: LD_INT 4
34490: PUSH
34491: LD_INT 5
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
34500: GO 35361
34502: LD_INT 9
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34536
34510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: LD_INT 5
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
34534: GO 35361
34536: LD_INT 7
34538: DOUBLE
34539: EQUAL
34540: IFTRUE 34544
34542: GO 34570
34544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34545: LD_ADDR_VAR 0 3
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 4
34558: PUSH
34559: LD_INT 5
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
34568: GO 35361
34570: LD_INT 12
34572: DOUBLE
34573: EQUAL
34574: IFTRUE 34578
34576: GO 34604
34578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34579: LD_ADDR_VAR 0 3
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
34602: GO 35361
34604: LD_INT 13
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34638
34612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 5
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
34636: GO 35361
34638: LD_INT 14
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34664
34646: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34647: LD_ADDR_VAR 0 3
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: ST_TO_ADDR
34662: GO 35361
34664: LD_INT 6
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34690
34672: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34673: LD_ADDR_VAR 0 3
34677: PUSH
34678: LD_INT 4
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: ST_TO_ADDR
34688: GO 35361
34690: LD_INT 10
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34716
34698: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: ST_TO_ADDR
34714: GO 35361
34716: LD_INT 22
34718: DOUBLE
34719: EQUAL
34720: IFTRUE 34724
34722: GO 34750
34724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34725: LD_ADDR_VAR 0 3
34729: PUSH
34730: LD_INT 11
34732: PUSH
34733: LD_INT 12
34735: PUSH
34736: LD_INT 13
34738: PUSH
34739: LD_INT 14
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: ST_TO_ADDR
34748: GO 35361
34750: LD_INT 23
34752: DOUBLE
34753: EQUAL
34754: IFTRUE 34758
34756: GO 34784
34758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: LD_INT 11
34766: PUSH
34767: LD_INT 12
34769: PUSH
34770: LD_INT 13
34772: PUSH
34773: LD_INT 14
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: ST_TO_ADDR
34782: GO 35361
34784: LD_INT 24
34786: DOUBLE
34787: EQUAL
34788: IFTRUE 34792
34790: GO 34818
34792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34793: LD_ADDR_VAR 0 3
34797: PUSH
34798: LD_INT 11
34800: PUSH
34801: LD_INT 12
34803: PUSH
34804: LD_INT 13
34806: PUSH
34807: LD_INT 14
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
34816: GO 35361
34818: LD_INT 30
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34852
34826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 11
34834: PUSH
34835: LD_INT 12
34837: PUSH
34838: LD_INT 13
34840: PUSH
34841: LD_INT 14
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
34850: GO 35361
34852: LD_INT 25
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34878
34860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 13
34868: PUSH
34869: LD_INT 14
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 35361
34878: LD_INT 27
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34904
34886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 13
34894: PUSH
34895: LD_INT 14
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: ST_TO_ADDR
34902: GO 35361
34904: LD_EXP 25
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34940
34914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_INT 11
34922: PUSH
34923: LD_INT 12
34925: PUSH
34926: LD_INT 13
34928: PUSH
34929: LD_INT 14
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
34938: GO 35361
34940: LD_INT 28
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34948
34946: GO 34966
34948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_INT 13
34956: PUSH
34957: LD_INT 14
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: ST_TO_ADDR
34964: GO 35361
34966: LD_INT 29
34968: DOUBLE
34969: EQUAL
34970: IFTRUE 34974
34972: GO 34992
34974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34975: LD_ADDR_VAR 0 3
34979: PUSH
34980: LD_INT 13
34982: PUSH
34983: LD_INT 14
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: ST_TO_ADDR
34990: GO 35361
34992: LD_INT 31
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35000
34998: GO 35018
35000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35001: LD_ADDR_VAR 0 3
35005: PUSH
35006: LD_INT 13
35008: PUSH
35009: LD_INT 14
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: ST_TO_ADDR
35016: GO 35361
35018: LD_INT 26
35020: DOUBLE
35021: EQUAL
35022: IFTRUE 35026
35024: GO 35044
35026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35027: LD_ADDR_VAR 0 3
35031: PUSH
35032: LD_INT 13
35034: PUSH
35035: LD_INT 14
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: ST_TO_ADDR
35042: GO 35361
35044: LD_INT 42
35046: DOUBLE
35047: EQUAL
35048: IFTRUE 35052
35050: GO 35078
35052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_INT 21
35060: PUSH
35061: LD_INT 22
35063: PUSH
35064: LD_INT 23
35066: PUSH
35067: LD_INT 24
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
35076: GO 35361
35078: LD_INT 43
35080: DOUBLE
35081: EQUAL
35082: IFTRUE 35086
35084: GO 35112
35086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: LD_INT 21
35094: PUSH
35095: LD_INT 22
35097: PUSH
35098: LD_INT 23
35100: PUSH
35101: LD_INT 24
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
35110: GO 35361
35112: LD_INT 44
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35120
35118: GO 35146
35120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35121: LD_ADDR_VAR 0 3
35125: PUSH
35126: LD_INT 21
35128: PUSH
35129: LD_INT 22
35131: PUSH
35132: LD_INT 23
35134: PUSH
35135: LD_INT 24
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: ST_TO_ADDR
35144: GO 35361
35146: LD_INT 45
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35154
35152: GO 35180
35154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35155: LD_ADDR_VAR 0 3
35159: PUSH
35160: LD_INT 21
35162: PUSH
35163: LD_INT 22
35165: PUSH
35166: LD_INT 23
35168: PUSH
35169: LD_INT 24
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: ST_TO_ADDR
35178: GO 35361
35180: LD_INT 49
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35214
35188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_INT 21
35196: PUSH
35197: LD_INT 22
35199: PUSH
35200: LD_INT 23
35202: PUSH
35203: LD_INT 24
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
35212: GO 35361
35214: LD_INT 51
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35248
35222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35223: LD_ADDR_VAR 0 3
35227: PUSH
35228: LD_INT 21
35230: PUSH
35231: LD_INT 22
35233: PUSH
35234: LD_INT 23
35236: PUSH
35237: LD_INT 24
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
35246: GO 35361
35248: LD_INT 52
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35256
35254: GO 35282
35256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35257: LD_ADDR_VAR 0 3
35261: PUSH
35262: LD_INT 21
35264: PUSH
35265: LD_INT 22
35267: PUSH
35268: LD_INT 23
35270: PUSH
35271: LD_INT 24
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
35280: GO 35361
35282: LD_INT 53
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35290
35288: GO 35308
35290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35291: LD_ADDR_VAR 0 3
35295: PUSH
35296: LD_INT 23
35298: PUSH
35299: LD_INT 24
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: ST_TO_ADDR
35306: GO 35361
35308: LD_INT 46
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35316
35314: GO 35334
35316: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35317: LD_ADDR_VAR 0 3
35321: PUSH
35322: LD_INT 23
35324: PUSH
35325: LD_INT 24
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: ST_TO_ADDR
35332: GO 35361
35334: LD_INT 47
35336: DOUBLE
35337: EQUAL
35338: IFTRUE 35342
35340: GO 35360
35342: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35343: LD_ADDR_VAR 0 3
35347: PUSH
35348: LD_INT 23
35350: PUSH
35351: LD_INT 24
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: ST_TO_ADDR
35358: GO 35361
35360: POP
// result := ( chassis in result ) ;
35361: LD_ADDR_VAR 0 3
35365: PUSH
35366: LD_VAR 0 1
35370: PUSH
35371: LD_VAR 0 3
35375: IN
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 3
35381: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35382: LD_INT 0
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
// result := array ;
35391: LD_ADDR_VAR 0 5
35395: PUSH
35396: LD_VAR 0 1
35400: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35401: LD_VAR 0 1
35405: NOT
35406: PUSH
35407: LD_VAR 0 2
35411: NOT
35412: OR
35413: PUSH
35414: LD_VAR 0 3
35418: NOT
35419: OR
35420: PUSH
35421: LD_VAR 0 2
35425: PUSH
35426: LD_VAR 0 1
35430: GREATER
35431: OR
35432: PUSH
35433: LD_VAR 0 3
35437: PUSH
35438: LD_VAR 0 1
35442: GREATER
35443: OR
35444: IFFALSE 35448
// exit ;
35446: GO 35744
// if direction then
35448: LD_VAR 0 4
35452: IFFALSE 35516
// begin d := 1 ;
35454: LD_ADDR_VAR 0 9
35458: PUSH
35459: LD_INT 1
35461: ST_TO_ADDR
// if i_from > i_to then
35462: LD_VAR 0 2
35466: PUSH
35467: LD_VAR 0 3
35471: GREATER
35472: IFFALSE 35498
// length := ( array - i_from ) + i_to else
35474: LD_ADDR_VAR 0 11
35478: PUSH
35479: LD_VAR 0 1
35483: PUSH
35484: LD_VAR 0 2
35488: MINUS
35489: PUSH
35490: LD_VAR 0 3
35494: PLUS
35495: ST_TO_ADDR
35496: GO 35514
// length := i_to - i_from ;
35498: LD_ADDR_VAR 0 11
35502: PUSH
35503: LD_VAR 0 3
35507: PUSH
35508: LD_VAR 0 2
35512: MINUS
35513: ST_TO_ADDR
// end else
35514: GO 35577
// begin d := - 1 ;
35516: LD_ADDR_VAR 0 9
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: ST_TO_ADDR
// if i_from > i_to then
35525: LD_VAR 0 2
35529: PUSH
35530: LD_VAR 0 3
35534: GREATER
35535: IFFALSE 35555
// length := i_from - i_to else
35537: LD_ADDR_VAR 0 11
35541: PUSH
35542: LD_VAR 0 2
35546: PUSH
35547: LD_VAR 0 3
35551: MINUS
35552: ST_TO_ADDR
35553: GO 35577
// length := ( array - i_to ) + i_from ;
35555: LD_ADDR_VAR 0 11
35559: PUSH
35560: LD_VAR 0 1
35564: PUSH
35565: LD_VAR 0 3
35569: MINUS
35570: PUSH
35571: LD_VAR 0 2
35575: PLUS
35576: ST_TO_ADDR
// end ; if not length then
35577: LD_VAR 0 11
35581: NOT
35582: IFFALSE 35586
// exit ;
35584: GO 35744
// tmp := array ;
35586: LD_ADDR_VAR 0 10
35590: PUSH
35591: LD_VAR 0 1
35595: ST_TO_ADDR
// for i = 1 to length do
35596: LD_ADDR_VAR 0 6
35600: PUSH
35601: DOUBLE
35602: LD_INT 1
35604: DEC
35605: ST_TO_ADDR
35606: LD_VAR 0 11
35610: PUSH
35611: FOR_TO
35612: IFFALSE 35732
// begin for j = 1 to array do
35614: LD_ADDR_VAR 0 7
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 1
35628: PUSH
35629: FOR_TO
35630: IFFALSE 35718
// begin k := j + d ;
35632: LD_ADDR_VAR 0 8
35636: PUSH
35637: LD_VAR 0 7
35641: PUSH
35642: LD_VAR 0 9
35646: PLUS
35647: ST_TO_ADDR
// if k > array then
35648: LD_VAR 0 8
35652: PUSH
35653: LD_VAR 0 1
35657: GREATER
35658: IFFALSE 35668
// k := 1 ;
35660: LD_ADDR_VAR 0 8
35664: PUSH
35665: LD_INT 1
35667: ST_TO_ADDR
// if not k then
35668: LD_VAR 0 8
35672: NOT
35673: IFFALSE 35685
// k := array ;
35675: LD_ADDR_VAR 0 8
35679: PUSH
35680: LD_VAR 0 1
35684: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35685: LD_ADDR_VAR 0 10
35689: PUSH
35690: LD_VAR 0 10
35694: PPUSH
35695: LD_VAR 0 8
35699: PPUSH
35700: LD_VAR 0 1
35704: PUSH
35705: LD_VAR 0 7
35709: ARRAY
35710: PPUSH
35711: CALL_OW 1
35715: ST_TO_ADDR
// end ;
35716: GO 35629
35718: POP
35719: POP
// array := tmp ;
35720: LD_ADDR_VAR 0 1
35724: PUSH
35725: LD_VAR 0 10
35729: ST_TO_ADDR
// end ;
35730: GO 35611
35732: POP
35733: POP
// result := array ;
35734: LD_ADDR_VAR 0 5
35738: PUSH
35739: LD_VAR 0 1
35743: ST_TO_ADDR
// end ;
35744: LD_VAR 0 5
35748: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35749: LD_INT 0
35751: PPUSH
35752: PPUSH
// result := 0 ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_INT 0
35760: ST_TO_ADDR
// if not array or not value in array then
35761: LD_VAR 0 1
35765: NOT
35766: PUSH
35767: LD_VAR 0 2
35771: PUSH
35772: LD_VAR 0 1
35776: IN
35777: NOT
35778: OR
35779: IFFALSE 35783
// exit ;
35781: GO 35837
// for i = 1 to array do
35783: LD_ADDR_VAR 0 4
35787: PUSH
35788: DOUBLE
35789: LD_INT 1
35791: DEC
35792: ST_TO_ADDR
35793: LD_VAR 0 1
35797: PUSH
35798: FOR_TO
35799: IFFALSE 35835
// if value = array [ i ] then
35801: LD_VAR 0 2
35805: PUSH
35806: LD_VAR 0 1
35810: PUSH
35811: LD_VAR 0 4
35815: ARRAY
35816: EQUAL
35817: IFFALSE 35833
// begin result := i ;
35819: LD_ADDR_VAR 0 3
35823: PUSH
35824: LD_VAR 0 4
35828: ST_TO_ADDR
// exit ;
35829: POP
35830: POP
35831: GO 35837
// end ;
35833: GO 35798
35835: POP
35836: POP
// end ;
35837: LD_VAR 0 3
35841: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35842: LD_INT 0
35844: PPUSH
// vc_chassis := chassis ;
35845: LD_ADDR_OWVAR 37
35849: PUSH
35850: LD_VAR 0 1
35854: ST_TO_ADDR
// vc_engine := engine ;
35855: LD_ADDR_OWVAR 39
35859: PUSH
35860: LD_VAR 0 2
35864: ST_TO_ADDR
// vc_control := control ;
35865: LD_ADDR_OWVAR 38
35869: PUSH
35870: LD_VAR 0 3
35874: ST_TO_ADDR
// vc_weapon := weapon ;
35875: LD_ADDR_OWVAR 40
35879: PUSH
35880: LD_VAR 0 4
35884: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35885: LD_ADDR_OWVAR 41
35889: PUSH
35890: LD_VAR 0 5
35894: ST_TO_ADDR
// end ;
35895: LD_VAR 0 6
35899: RET
// export function WantPlant ( unit ) ; var task ; begin
35900: LD_INT 0
35902: PPUSH
35903: PPUSH
// result := false ;
35904: LD_ADDR_VAR 0 2
35908: PUSH
35909: LD_INT 0
35911: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35912: LD_ADDR_VAR 0 3
35916: PUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 437
35926: ST_TO_ADDR
// if task then
35927: LD_VAR 0 3
35931: IFFALSE 35959
// if task [ 1 ] [ 1 ] = p then
35933: LD_VAR 0 3
35937: PUSH
35938: LD_INT 1
35940: ARRAY
35941: PUSH
35942: LD_INT 1
35944: ARRAY
35945: PUSH
35946: LD_STRING p
35948: EQUAL
35949: IFFALSE 35959
// result := true ;
35951: LD_ADDR_VAR 0 2
35955: PUSH
35956: LD_INT 1
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 2
35963: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
// if pos < 1 then
35970: LD_VAR 0 2
35974: PUSH
35975: LD_INT 1
35977: LESS
35978: IFFALSE 35982
// exit ;
35980: GO 36285
// if pos = 1 then
35982: LD_VAR 0 2
35986: PUSH
35987: LD_INT 1
35989: EQUAL
35990: IFFALSE 36023
// result := Replace ( arr , pos [ 1 ] , value ) else
35992: LD_ADDR_VAR 0 4
35996: PUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: LD_VAR 0 2
36006: PUSH
36007: LD_INT 1
36009: ARRAY
36010: PPUSH
36011: LD_VAR 0 3
36015: PPUSH
36016: CALL_OW 1
36020: ST_TO_ADDR
36021: GO 36285
// begin tmp := arr ;
36023: LD_ADDR_VAR 0 6
36027: PUSH
36028: LD_VAR 0 1
36032: ST_TO_ADDR
// s_arr := [ tmp ] ;
36033: LD_ADDR_VAR 0 7
36037: PUSH
36038: LD_VAR 0 6
36042: PUSH
36043: EMPTY
36044: LIST
36045: ST_TO_ADDR
// for i = 1 to pos - 1 do
36046: LD_ADDR_VAR 0 5
36050: PUSH
36051: DOUBLE
36052: LD_INT 1
36054: DEC
36055: ST_TO_ADDR
36056: LD_VAR 0 2
36060: PUSH
36061: LD_INT 1
36063: MINUS
36064: PUSH
36065: FOR_TO
36066: IFFALSE 36111
// begin tmp := tmp [ pos [ i ] ] ;
36068: LD_ADDR_VAR 0 6
36072: PUSH
36073: LD_VAR 0 6
36077: PUSH
36078: LD_VAR 0 2
36082: PUSH
36083: LD_VAR 0 5
36087: ARRAY
36088: ARRAY
36089: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36090: LD_ADDR_VAR 0 7
36094: PUSH
36095: LD_VAR 0 7
36099: PUSH
36100: LD_VAR 0 6
36104: PUSH
36105: EMPTY
36106: LIST
36107: ADD
36108: ST_TO_ADDR
// end ;
36109: GO 36065
36111: POP
36112: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36113: LD_ADDR_VAR 0 6
36117: PUSH
36118: LD_VAR 0 6
36122: PPUSH
36123: LD_VAR 0 2
36127: PUSH
36128: LD_VAR 0 2
36132: ARRAY
36133: PPUSH
36134: LD_VAR 0 3
36138: PPUSH
36139: CALL_OW 1
36143: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36144: LD_ADDR_VAR 0 7
36148: PUSH
36149: LD_VAR 0 7
36153: PPUSH
36154: LD_VAR 0 7
36158: PPUSH
36159: LD_VAR 0 6
36163: PPUSH
36164: CALL_OW 1
36168: ST_TO_ADDR
// for i = s_arr downto 2 do
36169: LD_ADDR_VAR 0 5
36173: PUSH
36174: DOUBLE
36175: LD_VAR 0 7
36179: INC
36180: ST_TO_ADDR
36181: LD_INT 2
36183: PUSH
36184: FOR_DOWNTO
36185: IFFALSE 36269
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36187: LD_ADDR_VAR 0 6
36191: PUSH
36192: LD_VAR 0 7
36196: PUSH
36197: LD_VAR 0 5
36201: PUSH
36202: LD_INT 1
36204: MINUS
36205: ARRAY
36206: PPUSH
36207: LD_VAR 0 2
36211: PUSH
36212: LD_VAR 0 5
36216: PUSH
36217: LD_INT 1
36219: MINUS
36220: ARRAY
36221: PPUSH
36222: LD_VAR 0 7
36226: PUSH
36227: LD_VAR 0 5
36231: ARRAY
36232: PPUSH
36233: CALL_OW 1
36237: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36238: LD_ADDR_VAR 0 7
36242: PUSH
36243: LD_VAR 0 7
36247: PPUSH
36248: LD_VAR 0 5
36252: PUSH
36253: LD_INT 1
36255: MINUS
36256: PPUSH
36257: LD_VAR 0 6
36261: PPUSH
36262: CALL_OW 1
36266: ST_TO_ADDR
// end ;
36267: GO 36184
36269: POP
36270: POP
// result := s_arr [ 1 ] ;
36271: LD_ADDR_VAR 0 4
36275: PUSH
36276: LD_VAR 0 7
36280: PUSH
36281: LD_INT 1
36283: ARRAY
36284: ST_TO_ADDR
// end ; end ;
36285: LD_VAR 0 4
36289: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36290: LD_INT 0
36292: PPUSH
36293: PPUSH
// if not list then
36294: LD_VAR 0 1
36298: NOT
36299: IFFALSE 36303
// exit ;
36301: GO 36394
// i := list [ pos1 ] ;
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: LD_VAR 0 1
36312: PUSH
36313: LD_VAR 0 2
36317: ARRAY
36318: ST_TO_ADDR
// if not i then
36319: LD_VAR 0 5
36323: NOT
36324: IFFALSE 36328
// exit ;
36326: GO 36394
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36328: LD_ADDR_VAR 0 1
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 1
36347: PUSH
36348: LD_VAR 0 3
36352: ARRAY
36353: PPUSH
36354: CALL_OW 1
36358: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36359: LD_ADDR_VAR 0 1
36363: PUSH
36364: LD_VAR 0 1
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_VAR 0 5
36378: PPUSH
36379: CALL_OW 1
36383: ST_TO_ADDR
// result := list ;
36384: LD_ADDR_VAR 0 4
36388: PUSH
36389: LD_VAR 0 1
36393: ST_TO_ADDR
// end ;
36394: LD_VAR 0 4
36398: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36399: LD_INT 0
36401: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36402: LD_ADDR_VAR 0 5
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 250
36416: PPUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 251
36426: PPUSH
36427: LD_VAR 0 2
36431: PPUSH
36432: LD_VAR 0 3
36436: PPUSH
36437: LD_VAR 0 4
36441: PPUSH
36442: CALL 36452 0 5
36446: ST_TO_ADDR
// end ;
36447: LD_VAR 0 5
36451: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36452: LD_INT 0
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
// if not list then
36458: LD_VAR 0 3
36462: NOT
36463: IFFALSE 36467
// exit ;
36465: GO 36855
// result := [ ] ;
36467: LD_ADDR_VAR 0 6
36471: PUSH
36472: EMPTY
36473: ST_TO_ADDR
// for i in list do
36474: LD_ADDR_VAR 0 7
36478: PUSH
36479: LD_VAR 0 3
36483: PUSH
36484: FOR_IN
36485: IFFALSE 36687
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36487: LD_ADDR_VAR 0 9
36491: PUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: CALL_OW 297
36511: ST_TO_ADDR
// if not result then
36512: LD_VAR 0 6
36516: NOT
36517: IFFALSE 36543
// result := [ [ i , tmp ] ] else
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: LD_VAR 0 7
36528: PUSH
36529: LD_VAR 0 9
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: ST_TO_ADDR
36541: GO 36685
// begin if result [ result ] [ 2 ] < tmp then
36543: LD_VAR 0 6
36547: PUSH
36548: LD_VAR 0 6
36552: ARRAY
36553: PUSH
36554: LD_INT 2
36556: ARRAY
36557: PUSH
36558: LD_VAR 0 9
36562: LESS
36563: IFFALSE 36605
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36565: LD_ADDR_VAR 0 6
36569: PUSH
36570: LD_VAR 0 6
36574: PPUSH
36575: LD_VAR 0 6
36579: PUSH
36580: LD_INT 1
36582: PLUS
36583: PPUSH
36584: LD_VAR 0 7
36588: PUSH
36589: LD_VAR 0 9
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PPUSH
36598: CALL_OW 2
36602: ST_TO_ADDR
36603: GO 36685
// for j = 1 to result do
36605: LD_ADDR_VAR 0 8
36609: PUSH
36610: DOUBLE
36611: LD_INT 1
36613: DEC
36614: ST_TO_ADDR
36615: LD_VAR 0 6
36619: PUSH
36620: FOR_TO
36621: IFFALSE 36683
// begin if tmp < result [ j ] [ 2 ] then
36623: LD_VAR 0 9
36627: PUSH
36628: LD_VAR 0 6
36632: PUSH
36633: LD_VAR 0 8
36637: ARRAY
36638: PUSH
36639: LD_INT 2
36641: ARRAY
36642: LESS
36643: IFFALSE 36681
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36645: LD_ADDR_VAR 0 6
36649: PUSH
36650: LD_VAR 0 6
36654: PPUSH
36655: LD_VAR 0 8
36659: PPUSH
36660: LD_VAR 0 7
36664: PUSH
36665: LD_VAR 0 9
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 2
36678: ST_TO_ADDR
// break ;
36679: GO 36683
// end ; end ;
36681: GO 36620
36683: POP
36684: POP
// end ; end ;
36685: GO 36484
36687: POP
36688: POP
// if result and not asc then
36689: LD_VAR 0 6
36693: PUSH
36694: LD_VAR 0 4
36698: NOT
36699: AND
36700: IFFALSE 36775
// begin tmp := result ;
36702: LD_ADDR_VAR 0 9
36706: PUSH
36707: LD_VAR 0 6
36711: ST_TO_ADDR
// for i = tmp downto 1 do
36712: LD_ADDR_VAR 0 7
36716: PUSH
36717: DOUBLE
36718: LD_VAR 0 9
36722: INC
36723: ST_TO_ADDR
36724: LD_INT 1
36726: PUSH
36727: FOR_DOWNTO
36728: IFFALSE 36773
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36730: LD_ADDR_VAR 0 6
36734: PUSH
36735: LD_VAR 0 6
36739: PPUSH
36740: LD_VAR 0 9
36744: PUSH
36745: LD_VAR 0 7
36749: MINUS
36750: PUSH
36751: LD_INT 1
36753: PLUS
36754: PPUSH
36755: LD_VAR 0 9
36759: PUSH
36760: LD_VAR 0 7
36764: ARRAY
36765: PPUSH
36766: CALL_OW 1
36770: ST_TO_ADDR
36771: GO 36727
36773: POP
36774: POP
// end ; tmp := [ ] ;
36775: LD_ADDR_VAR 0 9
36779: PUSH
36780: EMPTY
36781: ST_TO_ADDR
// if mode then
36782: LD_VAR 0 5
36786: IFFALSE 36855
// begin for i = 1 to result do
36788: LD_ADDR_VAR 0 7
36792: PUSH
36793: DOUBLE
36794: LD_INT 1
36796: DEC
36797: ST_TO_ADDR
36798: LD_VAR 0 6
36802: PUSH
36803: FOR_TO
36804: IFFALSE 36843
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_VAR 0 9
36815: PPUSH
36816: LD_VAR 0 7
36820: PPUSH
36821: LD_VAR 0 6
36825: PUSH
36826: LD_VAR 0 7
36830: ARRAY
36831: PUSH
36832: LD_INT 1
36834: ARRAY
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
36841: GO 36803
36843: POP
36844: POP
// result := tmp ;
36845: LD_ADDR_VAR 0 6
36849: PUSH
36850: LD_VAR 0 9
36854: ST_TO_ADDR
// end ; end ;
36855: LD_VAR 0 6
36859: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36860: LD_INT 0
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36868: LD_ADDR_VAR 0 5
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// if not x or not y then
36890: LD_VAR 0 2
36894: NOT
36895: PUSH
36896: LD_VAR 0 3
36900: NOT
36901: OR
36902: IFFALSE 36906
// exit ;
36904: GO 38558
// if not range then
36906: LD_VAR 0 4
36910: NOT
36911: IFFALSE 36921
// range := 10 ;
36913: LD_ADDR_VAR 0 4
36917: PUSH
36918: LD_INT 10
36920: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36921: LD_ADDR_VAR 0 8
36925: PUSH
36926: LD_INT 81
36928: PUSH
36929: LD_VAR 0 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 92
36940: PUSH
36941: LD_VAR 0 2
36945: PUSH
36946: LD_VAR 0 3
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: LD_INT 21
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: PPUSH
36984: CALL_OW 69
36988: ST_TO_ADDR
// if not tmp then
36989: LD_VAR 0 8
36993: NOT
36994: IFFALSE 36998
// exit ;
36996: GO 38558
// for i in tmp do
36998: LD_ADDR_VAR 0 6
37002: PUSH
37003: LD_VAR 0 8
37007: PUSH
37008: FOR_IN
37009: IFFALSE 38533
// begin points := [ 0 , 0 , 0 ] ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
// bpoints := 1 ;
37030: LD_ADDR_VAR 0 10
37034: PUSH
37035: LD_INT 1
37037: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37038: LD_VAR 0 6
37042: PPUSH
37043: CALL_OW 247
37047: PUSH
37048: LD_INT 1
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37634
37056: POP
// begin if GetClass ( i ) = 1 then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 257
37066: PUSH
37067: LD_INT 1
37069: EQUAL
37070: IFFALSE 37091
// points := [ 10 , 5 , 3 ] ;
37072: LD_ADDR_VAR 0 9
37076: PUSH
37077: LD_INT 10
37079: PUSH
37080: LD_INT 5
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 257
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: IN
37115: IFFALSE 37136
// points := [ 3 , 2 , 1 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 257
37145: PUSH
37146: LD_INT 5
37148: EQUAL
37149: IFFALSE 37170
// points := [ 130 , 5 , 2 ] ;
37151: LD_ADDR_VAR 0 9
37155: PUSH
37156: LD_INT 130
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37170: LD_VAR 0 6
37174: PPUSH
37175: CALL_OW 257
37179: PUSH
37180: LD_INT 8
37182: EQUAL
37183: IFFALSE 37204
// points := [ 35 , 35 , 30 ] ;
37185: LD_ADDR_VAR 0 9
37189: PUSH
37190: LD_INT 35
37192: PUSH
37193: LD_INT 35
37195: PUSH
37196: LD_INT 30
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37204: LD_VAR 0 6
37208: PPUSH
37209: CALL_OW 257
37213: PUSH
37214: LD_INT 9
37216: EQUAL
37217: IFFALSE 37238
// points := [ 20 , 55 , 40 ] ;
37219: LD_ADDR_VAR 0 9
37223: PUSH
37224: LD_INT 20
37226: PUSH
37227: LD_INT 55
37229: PUSH
37230: LD_INT 40
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37238: LD_VAR 0 6
37242: PPUSH
37243: CALL_OW 257
37247: PUSH
37248: LD_INT 12
37250: PUSH
37251: LD_INT 16
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: IN
37258: IFFALSE 37279
// points := [ 5 , 3 , 2 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 5
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 257
37288: PUSH
37289: LD_INT 17
37291: EQUAL
37292: IFFALSE 37313
// points := [ 100 , 50 , 75 ] ;
37294: LD_ADDR_VAR 0 9
37298: PUSH
37299: LD_INT 100
37301: PUSH
37302: LD_INT 50
37304: PUSH
37305: LD_INT 75
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37313: LD_VAR 0 6
37317: PPUSH
37318: CALL_OW 257
37322: PUSH
37323: LD_INT 15
37325: EQUAL
37326: IFFALSE 37347
// points := [ 10 , 5 , 3 ] ;
37328: LD_ADDR_VAR 0 9
37332: PUSH
37333: LD_INT 10
37335: PUSH
37336: LD_INT 5
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37347: LD_VAR 0 6
37351: PPUSH
37352: CALL_OW 257
37356: PUSH
37357: LD_INT 14
37359: EQUAL
37360: IFFALSE 37381
// points := [ 10 , 0 , 0 ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: LD_INT 10
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 257
37390: PUSH
37391: LD_INT 11
37393: EQUAL
37394: IFFALSE 37415
// points := [ 30 , 10 , 5 ] ;
37396: LD_ADDR_VAR 0 9
37400: PUSH
37401: LD_INT 30
37403: PUSH
37404: LD_INT 10
37406: PUSH
37407: LD_INT 5
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37415: LD_VAR 0 1
37419: PPUSH
37420: LD_INT 5
37422: PPUSH
37423: CALL_OW 321
37427: PUSH
37428: LD_INT 2
37430: EQUAL
37431: IFFALSE 37448
// bpoints := bpoints * 1.8 ;
37433: LD_ADDR_VAR 0 10
37437: PUSH
37438: LD_VAR 0 10
37442: PUSH
37443: LD_REAL  1.80000000000000E+0000
37446: MUL
37447: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37448: LD_VAR 0 6
37452: PPUSH
37453: CALL_OW 257
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: LD_INT 4
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: IN
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: LD_INT 51
37484: PPUSH
37485: CALL_OW 321
37489: PUSH
37490: LD_INT 2
37492: EQUAL
37493: AND
37494: IFFALSE 37511
// bpoints := bpoints * 1.2 ;
37496: LD_ADDR_VAR 0 10
37500: PUSH
37501: LD_VAR 0 10
37505: PUSH
37506: LD_REAL  1.20000000000000E+0000
37509: MUL
37510: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37511: LD_VAR 0 6
37515: PPUSH
37516: CALL_OW 257
37520: PUSH
37521: LD_INT 5
37523: PUSH
37524: LD_INT 7
37526: PUSH
37527: LD_INT 9
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: IN
37535: PUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: LD_INT 52
37543: PPUSH
37544: CALL_OW 321
37548: PUSH
37549: LD_INT 2
37551: EQUAL
37552: AND
37553: IFFALSE 37570
// bpoints := bpoints * 1.5 ;
37555: LD_ADDR_VAR 0 10
37559: PUSH
37560: LD_VAR 0 10
37564: PUSH
37565: LD_REAL  1.50000000000000E+0000
37568: MUL
37569: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37570: LD_VAR 0 1
37574: PPUSH
37575: LD_INT 66
37577: PPUSH
37578: CALL_OW 321
37582: PUSH
37583: LD_INT 2
37585: EQUAL
37586: IFFALSE 37603
// bpoints := bpoints * 1.1 ;
37588: LD_ADDR_VAR 0 10
37592: PUSH
37593: LD_VAR 0 10
37597: PUSH
37598: LD_REAL  1.10000000000000E+0000
37601: MUL
37602: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37603: LD_ADDR_VAR 0 10
37607: PUSH
37608: LD_VAR 0 10
37612: PUSH
37613: LD_VAR 0 6
37617: PPUSH
37618: LD_INT 1
37620: PPUSH
37621: CALL_OW 259
37625: PUSH
37626: LD_REAL  1.15000000000000E+0000
37629: MUL
37630: MUL
37631: ST_TO_ADDR
// end ; unit_vehicle :
37632: GO 38462
37634: LD_INT 2
37636: DOUBLE
37637: EQUAL
37638: IFTRUE 37642
37640: GO 38450
37642: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37643: LD_VAR 0 6
37647: PPUSH
37648: CALL_OW 264
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 42
37658: PUSH
37659: LD_INT 24
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: IN
37667: IFFALSE 37688
// points := [ 25 , 5 , 3 ] ;
37669: LD_ADDR_VAR 0 9
37673: PUSH
37674: LD_INT 25
37676: PUSH
37677: LD_INT 5
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37688: LD_VAR 0 6
37692: PPUSH
37693: CALL_OW 264
37697: PUSH
37698: LD_INT 4
37700: PUSH
37701: LD_INT 43
37703: PUSH
37704: LD_INT 25
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: IN
37712: IFFALSE 37733
// points := [ 40 , 15 , 5 ] ;
37714: LD_ADDR_VAR 0 9
37718: PUSH
37719: LD_INT 40
37721: PUSH
37722: LD_INT 15
37724: PUSH
37725: LD_INT 5
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37733: LD_VAR 0 6
37737: PPUSH
37738: CALL_OW 264
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: LD_INT 23
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: IN
37753: IFFALSE 37774
// points := [ 7 , 25 , 8 ] ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_INT 7
37762: PUSH
37763: LD_INT 25
37765: PUSH
37766: LD_INT 8
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37774: LD_VAR 0 6
37778: PPUSH
37779: CALL_OW 264
37783: PUSH
37784: LD_INT 5
37786: PUSH
37787: LD_INT 27
37789: PUSH
37790: LD_INT 44
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: IN
37798: IFFALSE 37819
// points := [ 14 , 50 , 16 ] ;
37800: LD_ADDR_VAR 0 9
37804: PUSH
37805: LD_INT 14
37807: PUSH
37808: LD_INT 50
37810: PUSH
37811: LD_INT 16
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37819: LD_VAR 0 6
37823: PPUSH
37824: CALL_OW 264
37828: PUSH
37829: LD_INT 6
37831: PUSH
37832: LD_INT 46
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: IN
37839: IFFALSE 37860
// points := [ 32 , 120 , 70 ] ;
37841: LD_ADDR_VAR 0 9
37845: PUSH
37846: LD_INT 32
37848: PUSH
37849: LD_INT 120
37851: PUSH
37852: LD_INT 70
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37860: LD_VAR 0 6
37864: PPUSH
37865: CALL_OW 264
37869: PUSH
37870: LD_INT 7
37872: PUSH
37873: LD_INT 28
37875: PUSH
37876: LD_INT 45
37878: PUSH
37879: LD_EXP 25
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: IN
37890: IFFALSE 37911
// points := [ 35 , 20 , 45 ] ;
37892: LD_ADDR_VAR 0 9
37896: PUSH
37897: LD_INT 35
37899: PUSH
37900: LD_INT 20
37902: PUSH
37903: LD_INT 45
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37911: LD_VAR 0 6
37915: PPUSH
37916: CALL_OW 264
37920: PUSH
37921: LD_INT 47
37923: PUSH
37924: EMPTY
37925: LIST
37926: IN
37927: IFFALSE 37948
// points := [ 67 , 45 , 75 ] ;
37929: LD_ADDR_VAR 0 9
37933: PUSH
37934: LD_INT 67
37936: PUSH
37937: LD_INT 45
37939: PUSH
37940: LD_INT 75
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37948: LD_VAR 0 6
37952: PPUSH
37953: CALL_OW 264
37957: PUSH
37958: LD_INT 26
37960: PUSH
37961: EMPTY
37962: LIST
37963: IN
37964: IFFALSE 37985
// points := [ 120 , 30 , 80 ] ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_INT 120
37973: PUSH
37974: LD_INT 30
37976: PUSH
37977: LD_INT 80
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37985: LD_VAR 0 6
37989: PPUSH
37990: CALL_OW 264
37994: PUSH
37995: LD_INT 22
37997: PUSH
37998: EMPTY
37999: LIST
38000: IN
38001: IFFALSE 38022
// points := [ 40 , 1 , 1 ] ;
38003: LD_ADDR_VAR 0 9
38007: PUSH
38008: LD_INT 40
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38022: LD_VAR 0 6
38026: PPUSH
38027: CALL_OW 264
38031: PUSH
38032: LD_INT 29
38034: PUSH
38035: EMPTY
38036: LIST
38037: IN
38038: IFFALSE 38059
// points := [ 70 , 200 , 400 ] ;
38040: LD_ADDR_VAR 0 9
38044: PUSH
38045: LD_INT 70
38047: PUSH
38048: LD_INT 200
38050: PUSH
38051: LD_INT 400
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38059: LD_VAR 0 6
38063: PPUSH
38064: CALL_OW 264
38068: PUSH
38069: LD_INT 14
38071: PUSH
38072: LD_INT 53
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: IN
38079: IFFALSE 38100
// points := [ 40 , 10 , 20 ] ;
38081: LD_ADDR_VAR 0 9
38085: PUSH
38086: LD_INT 40
38088: PUSH
38089: LD_INT 10
38091: PUSH
38092: LD_INT 20
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38100: LD_VAR 0 6
38104: PPUSH
38105: CALL_OW 264
38109: PUSH
38110: LD_INT 9
38112: PUSH
38113: EMPTY
38114: LIST
38115: IN
38116: IFFALSE 38137
// points := [ 5 , 70 , 20 ] ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_INT 5
38125: PUSH
38126: LD_INT 70
38128: PUSH
38129: LD_INT 20
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38137: LD_VAR 0 6
38141: PPUSH
38142: CALL_OW 264
38146: PUSH
38147: LD_INT 10
38149: PUSH
38150: EMPTY
38151: LIST
38152: IN
38153: IFFALSE 38174
// points := [ 35 , 110 , 70 ] ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: LD_INT 35
38162: PUSH
38163: LD_INT 110
38165: PUSH
38166: LD_INT 70
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38174: LD_VAR 0 6
38178: PPUSH
38179: CALL_OW 265
38183: PUSH
38184: LD_INT 25
38186: EQUAL
38187: IFFALSE 38208
// points := [ 80 , 65 , 100 ] ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_INT 80
38196: PUSH
38197: LD_INT 65
38199: PUSH
38200: LD_INT 100
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38208: LD_VAR 0 6
38212: PPUSH
38213: CALL_OW 263
38217: PUSH
38218: LD_INT 1
38220: EQUAL
38221: IFFALSE 38256
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38223: LD_ADDR_VAR 0 10
38227: PUSH
38228: LD_VAR 0 10
38232: PUSH
38233: LD_VAR 0 6
38237: PPUSH
38238: CALL_OW 311
38242: PPUSH
38243: LD_INT 3
38245: PPUSH
38246: CALL_OW 259
38250: PUSH
38251: LD_INT 4
38253: MUL
38254: MUL
38255: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38256: LD_VAR 0 6
38260: PPUSH
38261: CALL_OW 263
38265: PUSH
38266: LD_INT 2
38268: EQUAL
38269: IFFALSE 38320
// begin j := IsControledBy ( i ) ;
38271: LD_ADDR_VAR 0 7
38275: PUSH
38276: LD_VAR 0 6
38280: PPUSH
38281: CALL_OW 312
38285: ST_TO_ADDR
// if j then
38286: LD_VAR 0 7
38290: IFFALSE 38320
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38292: LD_ADDR_VAR 0 10
38296: PUSH
38297: LD_VAR 0 10
38301: PUSH
38302: LD_VAR 0 7
38306: PPUSH
38307: LD_INT 3
38309: PPUSH
38310: CALL_OW 259
38314: PUSH
38315: LD_INT 3
38317: MUL
38318: MUL
38319: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38320: LD_VAR 0 6
38324: PPUSH
38325: CALL_OW 264
38329: PUSH
38330: LD_INT 5
38332: PUSH
38333: LD_INT 6
38335: PUSH
38336: LD_INT 46
38338: PUSH
38339: LD_INT 44
38341: PUSH
38342: LD_INT 47
38344: PUSH
38345: LD_INT 45
38347: PUSH
38348: LD_INT 28
38350: PUSH
38351: LD_INT 7
38353: PUSH
38354: LD_INT 27
38356: PUSH
38357: LD_INT 29
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: IN
38372: PUSH
38373: LD_VAR 0 1
38377: PPUSH
38378: LD_INT 52
38380: PPUSH
38381: CALL_OW 321
38385: PUSH
38386: LD_INT 2
38388: EQUAL
38389: AND
38390: IFFALSE 38407
// bpoints := bpoints * 1.2 ;
38392: LD_ADDR_VAR 0 10
38396: PUSH
38397: LD_VAR 0 10
38401: PUSH
38402: LD_REAL  1.20000000000000E+0000
38405: MUL
38406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38407: LD_VAR 0 6
38411: PPUSH
38412: CALL_OW 264
38416: PUSH
38417: LD_INT 6
38419: PUSH
38420: LD_INT 46
38422: PUSH
38423: LD_INT 47
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: IN
38431: IFFALSE 38448
// bpoints := bpoints * 1.2 ;
38433: LD_ADDR_VAR 0 10
38437: PUSH
38438: LD_VAR 0 10
38442: PUSH
38443: LD_REAL  1.20000000000000E+0000
38446: MUL
38447: ST_TO_ADDR
// end ; unit_building :
38448: GO 38462
38450: LD_INT 3
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38458
38456: GO 38461
38458: POP
// ; end ;
38459: GO 38462
38461: POP
// for j = 1 to 3 do
38462: LD_ADDR_VAR 0 7
38466: PUSH
38467: DOUBLE
38468: LD_INT 1
38470: DEC
38471: ST_TO_ADDR
38472: LD_INT 3
38474: PUSH
38475: FOR_TO
38476: IFFALSE 38529
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38478: LD_ADDR_VAR 0 5
38482: PUSH
38483: LD_VAR 0 5
38487: PPUSH
38488: LD_VAR 0 7
38492: PPUSH
38493: LD_VAR 0 5
38497: PUSH
38498: LD_VAR 0 7
38502: ARRAY
38503: PUSH
38504: LD_VAR 0 9
38508: PUSH
38509: LD_VAR 0 7
38513: ARRAY
38514: PUSH
38515: LD_VAR 0 10
38519: MUL
38520: PLUS
38521: PPUSH
38522: CALL_OW 1
38526: ST_TO_ADDR
38527: GO 38475
38529: POP
38530: POP
// end ;
38531: GO 37008
38533: POP
38534: POP
// result := Replace ( result , 4 , tmp ) ;
38535: LD_ADDR_VAR 0 5
38539: PUSH
38540: LD_VAR 0 5
38544: PPUSH
38545: LD_INT 4
38547: PPUSH
38548: LD_VAR 0 8
38552: PPUSH
38553: CALL_OW 1
38557: ST_TO_ADDR
// end ;
38558: LD_VAR 0 5
38562: RET
// export function DangerAtRange ( unit , range ) ; begin
38563: LD_INT 0
38565: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 255
38580: PPUSH
38581: LD_VAR 0 1
38585: PPUSH
38586: CALL_OW 250
38590: PPUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 251
38600: PPUSH
38601: LD_VAR 0 2
38605: PPUSH
38606: CALL 36860 0 4
38610: ST_TO_ADDR
// end ;
38611: LD_VAR 0 3
38615: RET
// export function DangerInArea ( side , area ) ; begin
38616: LD_INT 0
38618: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38619: LD_ADDR_VAR 0 3
38623: PUSH
38624: LD_VAR 0 2
38628: PPUSH
38629: LD_INT 81
38631: PUSH
38632: LD_VAR 0 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PPUSH
38641: CALL_OW 70
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 3
38650: RET
// export function IsExtension ( b ) ; begin
38651: LD_INT 0
38653: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38654: LD_ADDR_VAR 0 2
38658: PUSH
38659: LD_VAR 0 1
38663: PUSH
38664: LD_INT 23
38666: PUSH
38667: LD_INT 20
38669: PUSH
38670: LD_INT 22
38672: PUSH
38673: LD_INT 17
38675: PUSH
38676: LD_INT 24
38678: PUSH
38679: LD_INT 21
38681: PUSH
38682: LD_INT 19
38684: PUSH
38685: LD_INT 16
38687: PUSH
38688: LD_INT 25
38690: PUSH
38691: LD_INT 18
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: IN
38706: ST_TO_ADDR
// end ;
38707: LD_VAR 0 2
38711: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38712: LD_INT 0
38714: PPUSH
38715: PPUSH
38716: PPUSH
// result := [ ] ;
38717: LD_ADDR_VAR 0 4
38721: PUSH
38722: EMPTY
38723: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38724: LD_ADDR_VAR 0 5
38728: PUSH
38729: LD_VAR 0 2
38733: PPUSH
38734: LD_INT 21
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PPUSH
38744: CALL_OW 70
38748: ST_TO_ADDR
// if not tmp then
38749: LD_VAR 0 5
38753: NOT
38754: IFFALSE 38758
// exit ;
38756: GO 38822
// if checkLink then
38758: LD_VAR 0 3
38762: IFFALSE 38812
// begin for i in tmp do
38764: LD_ADDR_VAR 0 6
38768: PUSH
38769: LD_VAR 0 5
38773: PUSH
38774: FOR_IN
38775: IFFALSE 38810
// if GetBase ( i ) <> base then
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 274
38786: PUSH
38787: LD_VAR 0 1
38791: NONEQUAL
38792: IFFALSE 38808
// ComLinkToBase ( base , i ) ;
38794: LD_VAR 0 1
38798: PPUSH
38799: LD_VAR 0 6
38803: PPUSH
38804: CALL_OW 169
38808: GO 38774
38810: POP
38811: POP
// end ; result := tmp ;
38812: LD_ADDR_VAR 0 4
38816: PUSH
38817: LD_VAR 0 5
38821: ST_TO_ADDR
// end ;
38822: LD_VAR 0 4
38826: RET
// export function ComComplete ( units , b ) ; var i ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
// if not units then
38831: LD_VAR 0 1
38835: NOT
38836: IFFALSE 38840
// exit ;
38838: GO 38930
// for i in units do
38840: LD_ADDR_VAR 0 4
38844: PUSH
38845: LD_VAR 0 1
38849: PUSH
38850: FOR_IN
38851: IFFALSE 38928
// if BuildingStatus ( b ) = bs_build then
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL_OW 461
38862: PUSH
38863: LD_INT 1
38865: EQUAL
38866: IFFALSE 38926
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38868: LD_VAR 0 4
38872: PPUSH
38873: LD_STRING h
38875: PUSH
38876: LD_VAR 0 2
38880: PPUSH
38881: CALL_OW 250
38885: PUSH
38886: LD_VAR 0 2
38890: PPUSH
38891: CALL_OW 251
38895: PUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: PPUSH
38922: CALL_OW 446
38926: GO 38850
38928: POP
38929: POP
// end ;
38930: LD_VAR 0 3
38934: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38935: LD_INT 0
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38943: LD_VAR 0 1
38947: NOT
38948: PUSH
38949: LD_VAR 0 1
38953: PPUSH
38954: CALL_OW 263
38958: PUSH
38959: LD_INT 2
38961: NONEQUAL
38962: OR
38963: IFFALSE 38967
// exit ;
38965: GO 39283
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38967: LD_ADDR_VAR 0 6
38971: PUSH
38972: LD_INT 22
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 255
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: LD_INT 36
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 34
39004: PUSH
39005: LD_INT 31
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 69
39025: ST_TO_ADDR
// if not tmp then
39026: LD_VAR 0 6
39030: NOT
39031: IFFALSE 39035
// exit ;
39033: GO 39283
// result := [ ] ;
39035: LD_ADDR_VAR 0 2
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// for i in tmp do
39042: LD_ADDR_VAR 0 3
39046: PUSH
39047: LD_VAR 0 6
39051: PUSH
39052: FOR_IN
39053: IFFALSE 39124
// begin t := UnitsInside ( i ) ;
39055: LD_ADDR_VAR 0 4
39059: PUSH
39060: LD_VAR 0 3
39064: PPUSH
39065: CALL_OW 313
39069: ST_TO_ADDR
// if t then
39070: LD_VAR 0 4
39074: IFFALSE 39122
// for j in t do
39076: LD_ADDR_VAR 0 7
39080: PUSH
39081: LD_VAR 0 4
39085: PUSH
39086: FOR_IN
39087: IFFALSE 39120
// result := Replace ( result , result + 1 , j ) ;
39089: LD_ADDR_VAR 0 2
39093: PUSH
39094: LD_VAR 0 2
39098: PPUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_INT 1
39106: PLUS
39107: PPUSH
39108: LD_VAR 0 7
39112: PPUSH
39113: CALL_OW 1
39117: ST_TO_ADDR
39118: GO 39086
39120: POP
39121: POP
// end ;
39122: GO 39052
39124: POP
39125: POP
// if not result then
39126: LD_VAR 0 2
39130: NOT
39131: IFFALSE 39135
// exit ;
39133: GO 39283
// mech := result [ 1 ] ;
39135: LD_ADDR_VAR 0 5
39139: PUSH
39140: LD_VAR 0 2
39144: PUSH
39145: LD_INT 1
39147: ARRAY
39148: ST_TO_ADDR
// if result > 1 then
39149: LD_VAR 0 2
39153: PUSH
39154: LD_INT 1
39156: GREATER
39157: IFFALSE 39269
// begin for i = 2 to result do
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: DOUBLE
39165: LD_INT 2
39167: DEC
39168: ST_TO_ADDR
39169: LD_VAR 0 2
39173: PUSH
39174: FOR_TO
39175: IFFALSE 39267
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39177: LD_ADDR_VAR 0 4
39181: PUSH
39182: LD_VAR 0 2
39186: PUSH
39187: LD_VAR 0 3
39191: ARRAY
39192: PPUSH
39193: LD_INT 3
39195: PPUSH
39196: CALL_OW 259
39200: PUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_VAR 0 3
39210: ARRAY
39211: PPUSH
39212: CALL_OW 432
39216: MINUS
39217: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39218: LD_VAR 0 4
39222: PUSH
39223: LD_VAR 0 5
39227: PPUSH
39228: LD_INT 3
39230: PPUSH
39231: CALL_OW 259
39235: PUSH
39236: LD_VAR 0 5
39240: PPUSH
39241: CALL_OW 432
39245: MINUS
39246: GREATEREQUAL
39247: IFFALSE 39265
// mech := result [ i ] ;
39249: LD_ADDR_VAR 0 5
39253: PUSH
39254: LD_VAR 0 2
39258: PUSH
39259: LD_VAR 0 3
39263: ARRAY
39264: ST_TO_ADDR
// end ;
39265: GO 39174
39267: POP
39268: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39269: LD_VAR 0 1
39273: PPUSH
39274: LD_VAR 0 5
39278: PPUSH
39279: CALL_OW 135
// end ;
39283: LD_VAR 0 2
39287: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
// result := [ ] ;
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: EMPTY
39309: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 266
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: IN
39330: NOT
39331: IFFALSE 39335
// exit ;
39333: GO 40969
// if name then
39335: LD_VAR 0 3
39339: IFFALSE 39355
// SetBName ( base_dep , name ) ;
39341: LD_VAR 0 1
39345: PPUSH
39346: LD_VAR 0 3
39350: PPUSH
39351: CALL_OW 500
// base := GetBase ( base_dep ) ;
39355: LD_ADDR_VAR 0 15
39359: PUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 274
39369: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39370: LD_ADDR_VAR 0 16
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 255
39384: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39385: LD_ADDR_VAR 0 17
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 248
39399: ST_TO_ADDR
// if sources then
39400: LD_VAR 0 5
39404: IFFALSE 39451
// for i = 1 to 3 do
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: DOUBLE
39412: LD_INT 1
39414: DEC
39415: ST_TO_ADDR
39416: LD_INT 3
39418: PUSH
39419: FOR_TO
39420: IFFALSE 39449
// AddResourceType ( base , i , sources [ i ] ) ;
39422: LD_VAR 0 15
39426: PPUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: LD_VAR 0 5
39436: PUSH
39437: LD_VAR 0 8
39441: ARRAY
39442: PPUSH
39443: CALL_OW 276
39447: GO 39419
39449: POP
39450: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39451: LD_ADDR_VAR 0 18
39455: PUSH
39456: LD_VAR 0 15
39460: PPUSH
39461: LD_VAR 0 2
39465: PPUSH
39466: LD_INT 1
39468: PPUSH
39469: CALL 38712 0 3
39473: ST_TO_ADDR
// InitHc ;
39474: CALL_OW 19
// InitUc ;
39478: CALL_OW 18
// uc_side := side ;
39482: LD_ADDR_OWVAR 20
39486: PUSH
39487: LD_VAR 0 16
39491: ST_TO_ADDR
// uc_nation := nation ;
39492: LD_ADDR_OWVAR 21
39496: PUSH
39497: LD_VAR 0 17
39501: ST_TO_ADDR
// if buildings then
39502: LD_VAR 0 18
39506: IFFALSE 40828
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39508: LD_ADDR_VAR 0 19
39512: PUSH
39513: LD_VAR 0 18
39517: PPUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 30
39523: PUSH
39524: LD_INT 29
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 30
39533: PUSH
39534: LD_INT 30
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PPUSH
39546: CALL_OW 72
39550: ST_TO_ADDR
// if tmp then
39551: LD_VAR 0 19
39555: IFFALSE 39603
// for i in tmp do
39557: LD_ADDR_VAR 0 8
39561: PUSH
39562: LD_VAR 0 19
39566: PUSH
39567: FOR_IN
39568: IFFALSE 39601
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39570: LD_VAR 0 8
39574: PPUSH
39575: CALL_OW 250
39579: PPUSH
39580: LD_VAR 0 8
39584: PPUSH
39585: CALL_OW 251
39589: PPUSH
39590: LD_VAR 0 16
39594: PPUSH
39595: CALL_OW 441
39599: GO 39567
39601: POP
39602: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39603: LD_VAR 0 18
39607: PPUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 30
39613: PUSH
39614: LD_INT 32
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 30
39623: PUSH
39624: LD_INT 33
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: LIST
39635: PPUSH
39636: CALL_OW 72
39640: IFFALSE 39728
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39642: LD_ADDR_VAR 0 8
39646: PUSH
39647: LD_VAR 0 18
39651: PPUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 30
39657: PUSH
39658: LD_INT 32
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 30
39667: PUSH
39668: LD_INT 33
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: PPUSH
39680: CALL_OW 72
39684: PUSH
39685: FOR_IN
39686: IFFALSE 39726
// begin if not GetBWeapon ( i ) then
39688: LD_VAR 0 8
39692: PPUSH
39693: CALL_OW 269
39697: NOT
39698: IFFALSE 39724
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39700: LD_VAR 0 8
39704: PPUSH
39705: LD_VAR 0 8
39709: PPUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: CALL 40974 0 2
39719: PPUSH
39720: CALL_OW 431
// end ;
39724: GO 39685
39726: POP
39727: POP
// end ; for i = 1 to personel do
39728: LD_ADDR_VAR 0 8
39732: PUSH
39733: DOUBLE
39734: LD_INT 1
39736: DEC
39737: ST_TO_ADDR
39738: LD_VAR 0 6
39742: PUSH
39743: FOR_TO
39744: IFFALSE 40808
// begin if i > 4 then
39746: LD_VAR 0 8
39750: PUSH
39751: LD_INT 4
39753: GREATER
39754: IFFALSE 39758
// break ;
39756: GO 40808
// case i of 1 :
39758: LD_VAR 0 8
39762: PUSH
39763: LD_INT 1
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39851
39771: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39772: LD_ADDR_VAR 0 12
39776: PUSH
39777: LD_VAR 0 18
39781: PPUSH
39782: LD_INT 22
39784: PUSH
39785: LD_VAR 0 16
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 58
39796: PUSH
39797: EMPTY
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 30
39805: PUSH
39806: LD_INT 32
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 30
39815: PUSH
39816: LD_INT 4
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 30
39825: PUSH
39826: LD_INT 5
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PPUSH
39844: CALL_OW 72
39848: ST_TO_ADDR
39849: GO 40073
39851: LD_INT 2
39853: DOUBLE
39854: EQUAL
39855: IFTRUE 39859
39857: GO 39921
39859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39860: LD_ADDR_VAR 0 12
39864: PUSH
39865: LD_VAR 0 18
39869: PPUSH
39870: LD_INT 22
39872: PUSH
39873: LD_VAR 0 16
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 30
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 30
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PPUSH
39914: CALL_OW 72
39918: ST_TO_ADDR
39919: GO 40073
39921: LD_INT 3
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39929
39927: GO 39991
39929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39930: LD_ADDR_VAR 0 12
39934: PUSH
39935: LD_VAR 0 18
39939: PPUSH
39940: LD_INT 22
39942: PUSH
39943: LD_VAR 0 16
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 30
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 30
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PPUSH
39984: CALL_OW 72
39988: ST_TO_ADDR
39989: GO 40073
39991: LD_INT 4
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40072
39999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40000: LD_ADDR_VAR 0 12
40004: PUSH
40005: LD_VAR 0 18
40009: PPUSH
40010: LD_INT 22
40012: PUSH
40013: LD_VAR 0 16
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 6
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: LD_INT 7
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 30
40047: PUSH
40048: LD_INT 8
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PPUSH
40065: CALL_OW 72
40069: ST_TO_ADDR
40070: GO 40073
40072: POP
// if i = 1 then
40073: LD_VAR 0 8
40077: PUSH
40078: LD_INT 1
40080: EQUAL
40081: IFFALSE 40192
// begin tmp := [ ] ;
40083: LD_ADDR_VAR 0 19
40087: PUSH
40088: EMPTY
40089: ST_TO_ADDR
// for j in f do
40090: LD_ADDR_VAR 0 9
40094: PUSH
40095: LD_VAR 0 12
40099: PUSH
40100: FOR_IN
40101: IFFALSE 40174
// if GetBType ( j ) = b_bunker then
40103: LD_VAR 0 9
40107: PPUSH
40108: CALL_OW 266
40112: PUSH
40113: LD_INT 32
40115: EQUAL
40116: IFFALSE 40143
// tmp := Insert ( tmp , 1 , j ) else
40118: LD_ADDR_VAR 0 19
40122: PUSH
40123: LD_VAR 0 19
40127: PPUSH
40128: LD_INT 1
40130: PPUSH
40131: LD_VAR 0 9
40135: PPUSH
40136: CALL_OW 2
40140: ST_TO_ADDR
40141: GO 40172
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40143: LD_ADDR_VAR 0 19
40147: PUSH
40148: LD_VAR 0 19
40152: PPUSH
40153: LD_VAR 0 19
40157: PUSH
40158: LD_INT 1
40160: PLUS
40161: PPUSH
40162: LD_VAR 0 9
40166: PPUSH
40167: CALL_OW 2
40171: ST_TO_ADDR
40172: GO 40100
40174: POP
40175: POP
// if tmp then
40176: LD_VAR 0 19
40180: IFFALSE 40192
// f := tmp ;
40182: LD_ADDR_VAR 0 12
40186: PUSH
40187: LD_VAR 0 19
40191: ST_TO_ADDR
// end ; x := personel [ i ] ;
40192: LD_ADDR_VAR 0 13
40196: PUSH
40197: LD_VAR 0 6
40201: PUSH
40202: LD_VAR 0 8
40206: ARRAY
40207: ST_TO_ADDR
// if x = - 1 then
40208: LD_VAR 0 13
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: EQUAL
40217: IFFALSE 40426
// begin for j in f do
40219: LD_ADDR_VAR 0 9
40223: PUSH
40224: LD_VAR 0 12
40228: PUSH
40229: FOR_IN
40230: IFFALSE 40422
// repeat InitHc ;
40232: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40236: LD_VAR 0 9
40240: PPUSH
40241: CALL_OW 266
40245: PUSH
40246: LD_INT 5
40248: EQUAL
40249: IFFALSE 40319
// begin if UnitsInside ( j ) < 3 then
40251: LD_VAR 0 9
40255: PPUSH
40256: CALL_OW 313
40260: PUSH
40261: LD_INT 3
40263: LESS
40264: IFFALSE 40300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40266: LD_INT 0
40268: PPUSH
40269: LD_INT 5
40271: PUSH
40272: LD_INT 8
40274: PUSH
40275: LD_INT 9
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PUSH
40283: LD_VAR 0 17
40287: ARRAY
40288: PPUSH
40289: LD_VAR 0 4
40293: PPUSH
40294: CALL_OW 380
40298: GO 40317
// PrepareHuman ( false , i , skill ) ;
40300: LD_INT 0
40302: PPUSH
40303: LD_VAR 0 8
40307: PPUSH
40308: LD_VAR 0 4
40312: PPUSH
40313: CALL_OW 380
// end else
40317: GO 40336
// PrepareHuman ( false , i , skill ) ;
40319: LD_INT 0
40321: PPUSH
40322: LD_VAR 0 8
40326: PPUSH
40327: LD_VAR 0 4
40331: PPUSH
40332: CALL_OW 380
// un := CreateHuman ;
40336: LD_ADDR_VAR 0 14
40340: PUSH
40341: CALL_OW 44
40345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40346: LD_ADDR_VAR 0 7
40350: PUSH
40351: LD_VAR 0 7
40355: PPUSH
40356: LD_INT 1
40358: PPUSH
40359: LD_VAR 0 14
40363: PPUSH
40364: CALL_OW 2
40368: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40369: LD_VAR 0 14
40373: PPUSH
40374: LD_VAR 0 9
40378: PPUSH
40379: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40383: LD_VAR 0 9
40387: PPUSH
40388: CALL_OW 313
40392: PUSH
40393: LD_INT 6
40395: EQUAL
40396: PUSH
40397: LD_VAR 0 9
40401: PPUSH
40402: CALL_OW 266
40406: PUSH
40407: LD_INT 32
40409: PUSH
40410: LD_INT 31
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: IN
40417: OR
40418: IFFALSE 40232
40420: GO 40229
40422: POP
40423: POP
// end else
40424: GO 40806
// for j = 1 to x do
40426: LD_ADDR_VAR 0 9
40430: PUSH
40431: DOUBLE
40432: LD_INT 1
40434: DEC
40435: ST_TO_ADDR
40436: LD_VAR 0 13
40440: PUSH
40441: FOR_TO
40442: IFFALSE 40804
// begin InitHc ;
40444: CALL_OW 19
// if not f then
40448: LD_VAR 0 12
40452: NOT
40453: IFFALSE 40542
// begin PrepareHuman ( false , i , skill ) ;
40455: LD_INT 0
40457: PPUSH
40458: LD_VAR 0 8
40462: PPUSH
40463: LD_VAR 0 4
40467: PPUSH
40468: CALL_OW 380
// un := CreateHuman ;
40472: LD_ADDR_VAR 0 14
40476: PUSH
40477: CALL_OW 44
40481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: LD_VAR 0 7
40491: PPUSH
40492: LD_INT 1
40494: PPUSH
40495: LD_VAR 0 14
40499: PPUSH
40500: CALL_OW 2
40504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40505: LD_VAR 0 14
40509: PPUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 250
40519: PPUSH
40520: LD_VAR 0 1
40524: PPUSH
40525: CALL_OW 251
40529: PPUSH
40530: LD_INT 10
40532: PPUSH
40533: LD_INT 0
40535: PPUSH
40536: CALL_OW 50
// continue ;
40540: GO 40441
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40542: LD_VAR 0 12
40546: PUSH
40547: LD_INT 1
40549: ARRAY
40550: PPUSH
40551: CALL_OW 313
40555: PUSH
40556: LD_VAR 0 12
40560: PUSH
40561: LD_INT 1
40563: ARRAY
40564: PPUSH
40565: CALL_OW 266
40569: PUSH
40570: LD_INT 32
40572: PUSH
40573: LD_INT 31
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: IN
40580: AND
40581: PUSH
40582: LD_VAR 0 12
40586: PUSH
40587: LD_INT 1
40589: ARRAY
40590: PPUSH
40591: CALL_OW 313
40595: PUSH
40596: LD_INT 6
40598: EQUAL
40599: OR
40600: IFFALSE 40620
// f := Delete ( f , 1 ) ;
40602: LD_ADDR_VAR 0 12
40606: PUSH
40607: LD_VAR 0 12
40611: PPUSH
40612: LD_INT 1
40614: PPUSH
40615: CALL_OW 3
40619: ST_TO_ADDR
// if not f then
40620: LD_VAR 0 12
40624: NOT
40625: IFFALSE 40643
// begin x := x + 2 ;
40627: LD_ADDR_VAR 0 13
40631: PUSH
40632: LD_VAR 0 13
40636: PUSH
40637: LD_INT 2
40639: PLUS
40640: ST_TO_ADDR
// continue ;
40641: GO 40441
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40643: LD_VAR 0 12
40647: PUSH
40648: LD_INT 1
40650: ARRAY
40651: PPUSH
40652: CALL_OW 266
40656: PUSH
40657: LD_INT 5
40659: EQUAL
40660: IFFALSE 40734
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40662: LD_VAR 0 12
40666: PUSH
40667: LD_INT 1
40669: ARRAY
40670: PPUSH
40671: CALL_OW 313
40675: PUSH
40676: LD_INT 3
40678: LESS
40679: IFFALSE 40715
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40681: LD_INT 0
40683: PPUSH
40684: LD_INT 5
40686: PUSH
40687: LD_INT 8
40689: PUSH
40690: LD_INT 9
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: PUSH
40698: LD_VAR 0 17
40702: ARRAY
40703: PPUSH
40704: LD_VAR 0 4
40708: PPUSH
40709: CALL_OW 380
40713: GO 40732
// PrepareHuman ( false , i , skill ) ;
40715: LD_INT 0
40717: PPUSH
40718: LD_VAR 0 8
40722: PPUSH
40723: LD_VAR 0 4
40727: PPUSH
40728: CALL_OW 380
// end else
40732: GO 40751
// PrepareHuman ( false , i , skill ) ;
40734: LD_INT 0
40736: PPUSH
40737: LD_VAR 0 8
40741: PPUSH
40742: LD_VAR 0 4
40746: PPUSH
40747: CALL_OW 380
// un := CreateHuman ;
40751: LD_ADDR_VAR 0 14
40755: PUSH
40756: CALL_OW 44
40760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: LD_VAR 0 7
40770: PPUSH
40771: LD_INT 1
40773: PPUSH
40774: LD_VAR 0 14
40778: PPUSH
40779: CALL_OW 2
40783: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40784: LD_VAR 0 14
40788: PPUSH
40789: LD_VAR 0 12
40793: PUSH
40794: LD_INT 1
40796: ARRAY
40797: PPUSH
40798: CALL_OW 52
// end ;
40802: GO 40441
40804: POP
40805: POP
// end ;
40806: GO 39743
40808: POP
40809: POP
// result := result ^ buildings ;
40810: LD_ADDR_VAR 0 7
40814: PUSH
40815: LD_VAR 0 7
40819: PUSH
40820: LD_VAR 0 18
40824: ADD
40825: ST_TO_ADDR
// end else
40826: GO 40969
// begin for i = 1 to personel do
40828: LD_ADDR_VAR 0 8
40832: PUSH
40833: DOUBLE
40834: LD_INT 1
40836: DEC
40837: ST_TO_ADDR
40838: LD_VAR 0 6
40842: PUSH
40843: FOR_TO
40844: IFFALSE 40967
// begin if i > 4 then
40846: LD_VAR 0 8
40850: PUSH
40851: LD_INT 4
40853: GREATER
40854: IFFALSE 40858
// break ;
40856: GO 40967
// x := personel [ i ] ;
40858: LD_ADDR_VAR 0 13
40862: PUSH
40863: LD_VAR 0 6
40867: PUSH
40868: LD_VAR 0 8
40872: ARRAY
40873: ST_TO_ADDR
// if x = - 1 then
40874: LD_VAR 0 13
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: EQUAL
40883: IFFALSE 40887
// continue ;
40885: GO 40843
// PrepareHuman ( false , i , skill ) ;
40887: LD_INT 0
40889: PPUSH
40890: LD_VAR 0 8
40894: PPUSH
40895: LD_VAR 0 4
40899: PPUSH
40900: CALL_OW 380
// un := CreateHuman ;
40904: LD_ADDR_VAR 0 14
40908: PUSH
40909: CALL_OW 44
40913: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40914: LD_VAR 0 14
40918: PPUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 250
40928: PPUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 251
40938: PPUSH
40939: LD_INT 10
40941: PPUSH
40942: LD_INT 0
40944: PPUSH
40945: CALL_OW 50
// result := result ^ un ;
40949: LD_ADDR_VAR 0 7
40953: PUSH
40954: LD_VAR 0 7
40958: PUSH
40959: LD_VAR 0 14
40963: ADD
40964: ST_TO_ADDR
// end ;
40965: GO 40843
40967: POP
40968: POP
// end ; end ;
40969: LD_VAR 0 7
40973: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
// result := false ;
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 0
40999: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41000: LD_VAR 0 1
41004: NOT
41005: PUSH
41006: LD_VAR 0 1
41010: PPUSH
41011: CALL_OW 266
41015: PUSH
41016: LD_INT 32
41018: PUSH
41019: LD_INT 33
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: IN
41026: NOT
41027: OR
41028: IFFALSE 41032
// exit ;
41030: GO 42141
// nat := GetNation ( tower ) ;
41032: LD_ADDR_VAR 0 12
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 248
41046: ST_TO_ADDR
// side := GetSide ( tower ) ;
41047: LD_ADDR_VAR 0 16
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 255
41061: ST_TO_ADDR
// x := GetX ( tower ) ;
41062: LD_ADDR_VAR 0 10
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 250
41076: ST_TO_ADDR
// y := GetY ( tower ) ;
41077: LD_ADDR_VAR 0 11
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 251
41091: ST_TO_ADDR
// if not x or not y then
41092: LD_VAR 0 10
41096: NOT
41097: PUSH
41098: LD_VAR 0 11
41102: NOT
41103: OR
41104: IFFALSE 41108
// exit ;
41106: GO 42141
// weapon := 0 ;
41108: LD_ADDR_VAR 0 18
41112: PUSH
41113: LD_INT 0
41115: ST_TO_ADDR
// fac_list := [ ] ;
41116: LD_ADDR_VAR 0 17
41120: PUSH
41121: EMPTY
41122: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41123: LD_ADDR_VAR 0 6
41127: PUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 274
41137: PPUSH
41138: LD_VAR 0 2
41142: PPUSH
41143: LD_INT 0
41145: PPUSH
41146: CALL 38712 0 3
41150: PPUSH
41151: LD_INT 30
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PPUSH
41161: CALL_OW 72
41165: ST_TO_ADDR
// if not factories then
41166: LD_VAR 0 6
41170: NOT
41171: IFFALSE 41175
// exit ;
41173: GO 42141
// for i in factories do
41175: LD_ADDR_VAR 0 8
41179: PUSH
41180: LD_VAR 0 6
41184: PUSH
41185: FOR_IN
41186: IFFALSE 41211
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41188: LD_ADDR_VAR 0 17
41192: PUSH
41193: LD_VAR 0 17
41197: PUSH
41198: LD_VAR 0 8
41202: PPUSH
41203: CALL_OW 478
41207: UNION
41208: ST_TO_ADDR
41209: GO 41185
41211: POP
41212: POP
// if not fac_list then
41213: LD_VAR 0 17
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 42141
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41222: LD_ADDR_VAR 0 5
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: LD_INT 5
41232: PUSH
41233: LD_INT 9
41235: PUSH
41236: LD_INT 10
41238: PUSH
41239: LD_INT 6
41241: PUSH
41242: LD_INT 7
41244: PUSH
41245: LD_INT 11
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 27
41259: PUSH
41260: LD_INT 28
41262: PUSH
41263: LD_INT 26
41265: PUSH
41266: LD_INT 30
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 43
41277: PUSH
41278: LD_INT 44
41280: PUSH
41281: LD_INT 46
41283: PUSH
41284: LD_INT 45
41286: PUSH
41287: LD_INT 47
41289: PUSH
41290: LD_INT 49
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: PUSH
41306: LD_VAR 0 12
41310: ARRAY
41311: ST_TO_ADDR
// list := list isect fac_list ;
41312: LD_ADDR_VAR 0 5
41316: PUSH
41317: LD_VAR 0 5
41321: PUSH
41322: LD_VAR 0 17
41326: ISECT
41327: ST_TO_ADDR
// if not list then
41328: LD_VAR 0 5
41332: NOT
41333: IFFALSE 41337
// exit ;
41335: GO 42141
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41337: LD_VAR 0 12
41341: PUSH
41342: LD_INT 3
41344: EQUAL
41345: PUSH
41346: LD_INT 49
41348: PUSH
41349: LD_VAR 0 5
41353: IN
41354: AND
41355: PUSH
41356: LD_INT 31
41358: PPUSH
41359: LD_VAR 0 16
41363: PPUSH
41364: CALL_OW 321
41368: PUSH
41369: LD_INT 2
41371: EQUAL
41372: AND
41373: IFFALSE 41433
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41375: LD_INT 22
41377: PUSH
41378: LD_VAR 0 16
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 35
41389: PUSH
41390: LD_INT 49
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 91
41399: PUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_INT 10
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: PPUSH
41418: CALL_OW 69
41422: NOT
41423: IFFALSE 41433
// weapon := ru_time_lapser ;
41425: LD_ADDR_VAR 0 18
41429: PUSH
41430: LD_INT 49
41432: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41433: LD_VAR 0 12
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: IN
41448: PUSH
41449: LD_INT 11
41451: PUSH
41452: LD_VAR 0 5
41456: IN
41457: PUSH
41458: LD_INT 30
41460: PUSH
41461: LD_VAR 0 5
41465: IN
41466: OR
41467: AND
41468: PUSH
41469: LD_INT 6
41471: PPUSH
41472: LD_VAR 0 16
41476: PPUSH
41477: CALL_OW 321
41481: PUSH
41482: LD_INT 2
41484: EQUAL
41485: AND
41486: IFFALSE 41651
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41488: LD_INT 22
41490: PUSH
41491: LD_VAR 0 16
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 35
41505: PUSH
41506: LD_INT 11
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 35
41515: PUSH
41516: LD_INT 30
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 91
41530: PUSH
41531: LD_VAR 0 1
41535: PUSH
41536: LD_INT 18
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PPUSH
41549: CALL_OW 69
41553: NOT
41554: PUSH
41555: LD_INT 22
41557: PUSH
41558: LD_VAR 0 16
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 30
41572: PUSH
41573: LD_INT 32
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 30
41582: PUSH
41583: LD_INT 33
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 91
41597: PUSH
41598: LD_VAR 0 1
41602: PUSH
41603: LD_INT 12
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: PUSH
41616: EMPTY
41617: LIST
41618: PPUSH
41619: CALL_OW 69
41623: PUSH
41624: LD_INT 2
41626: GREATER
41627: AND
41628: IFFALSE 41651
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41630: LD_ADDR_VAR 0 18
41634: PUSH
41635: LD_INT 11
41637: PUSH
41638: LD_INT 30
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_VAR 0 12
41649: ARRAY
41650: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41651: LD_VAR 0 18
41655: NOT
41656: PUSH
41657: LD_INT 40
41659: PPUSH
41660: LD_VAR 0 16
41664: PPUSH
41665: CALL_OW 321
41669: PUSH
41670: LD_INT 2
41672: EQUAL
41673: AND
41674: PUSH
41675: LD_INT 7
41677: PUSH
41678: LD_VAR 0 5
41682: IN
41683: PUSH
41684: LD_INT 28
41686: PUSH
41687: LD_VAR 0 5
41691: IN
41692: OR
41693: PUSH
41694: LD_INT 45
41696: PUSH
41697: LD_VAR 0 5
41701: IN
41702: OR
41703: AND
41704: IFFALSE 41958
// begin hex := GetHexInfo ( x , y ) ;
41706: LD_ADDR_VAR 0 4
41710: PUSH
41711: LD_VAR 0 10
41715: PPUSH
41716: LD_VAR 0 11
41720: PPUSH
41721: CALL_OW 546
41725: ST_TO_ADDR
// if hex [ 1 ] then
41726: LD_VAR 0 4
41730: PUSH
41731: LD_INT 1
41733: ARRAY
41734: IFFALSE 41738
// exit ;
41736: GO 42141
// height := hex [ 2 ] ;
41738: LD_ADDR_VAR 0 15
41742: PUSH
41743: LD_VAR 0 4
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41752: LD_ADDR_VAR 0 14
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// for i in tmp do
41775: LD_ADDR_VAR 0 8
41779: PUSH
41780: LD_VAR 0 14
41784: PUSH
41785: FOR_IN
41786: IFFALSE 41956
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41788: LD_ADDR_VAR 0 9
41792: PUSH
41793: LD_VAR 0 10
41797: PPUSH
41798: LD_VAR 0 8
41802: PPUSH
41803: LD_INT 5
41805: PPUSH
41806: CALL_OW 272
41810: PUSH
41811: LD_VAR 0 11
41815: PPUSH
41816: LD_VAR 0 8
41820: PPUSH
41821: LD_INT 5
41823: PPUSH
41824: CALL_OW 273
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41833: LD_VAR 0 9
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: LD_VAR 0 9
41846: PUSH
41847: LD_INT 2
41849: ARRAY
41850: PPUSH
41851: CALL_OW 488
41855: IFFALSE 41954
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41857: LD_ADDR_VAR 0 4
41861: PUSH
41862: LD_VAR 0 9
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: LD_VAR 0 9
41875: PUSH
41876: LD_INT 2
41878: ARRAY
41879: PPUSH
41880: CALL_OW 546
41884: ST_TO_ADDR
// if hex [ 1 ] then
41885: LD_VAR 0 4
41889: PUSH
41890: LD_INT 1
41892: ARRAY
41893: IFFALSE 41897
// continue ;
41895: GO 41785
// h := hex [ 2 ] ;
41897: LD_ADDR_VAR 0 13
41901: PUSH
41902: LD_VAR 0 4
41906: PUSH
41907: LD_INT 2
41909: ARRAY
41910: ST_TO_ADDR
// if h + 7 < height then
41911: LD_VAR 0 13
41915: PUSH
41916: LD_INT 7
41918: PLUS
41919: PUSH
41920: LD_VAR 0 15
41924: LESS
41925: IFFALSE 41954
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41927: LD_ADDR_VAR 0 18
41931: PUSH
41932: LD_INT 7
41934: PUSH
41935: LD_INT 28
41937: PUSH
41938: LD_INT 45
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: PUSH
41946: LD_VAR 0 12
41950: ARRAY
41951: ST_TO_ADDR
// break ;
41952: GO 41956
// end ; end ; end ;
41954: GO 41785
41956: POP
41957: POP
// end ; if not weapon then
41958: LD_VAR 0 18
41962: NOT
41963: IFFALSE 42023
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41965: LD_ADDR_VAR 0 5
41969: PUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_INT 11
41977: PUSH
41978: LD_INT 30
41980: PUSH
41981: LD_INT 49
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: DIFF
41989: ST_TO_ADDR
// if not list then
41990: LD_VAR 0 5
41994: NOT
41995: IFFALSE 41999
// exit ;
41997: GO 42141
// weapon := list [ rand ( 1 , list ) ] ;
41999: LD_ADDR_VAR 0 18
42003: PUSH
42004: LD_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: PPUSH
42012: LD_VAR 0 5
42016: PPUSH
42017: CALL_OW 12
42021: ARRAY
42022: ST_TO_ADDR
// end ; if weapon then
42023: LD_VAR 0 18
42027: IFFALSE 42141
// begin tmp := CostOfWeapon ( weapon ) ;
42029: LD_ADDR_VAR 0 14
42033: PUSH
42034: LD_VAR 0 18
42038: PPUSH
42039: CALL_OW 451
42043: ST_TO_ADDR
// j := GetBase ( tower ) ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 274
42058: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42059: LD_VAR 0 9
42063: PPUSH
42064: LD_INT 1
42066: PPUSH
42067: CALL_OW 275
42071: PUSH
42072: LD_VAR 0 14
42076: PUSH
42077: LD_INT 1
42079: ARRAY
42080: GREATEREQUAL
42081: PUSH
42082: LD_VAR 0 9
42086: PPUSH
42087: LD_INT 2
42089: PPUSH
42090: CALL_OW 275
42094: PUSH
42095: LD_VAR 0 14
42099: PUSH
42100: LD_INT 2
42102: ARRAY
42103: GREATEREQUAL
42104: AND
42105: PUSH
42106: LD_VAR 0 9
42110: PPUSH
42111: LD_INT 3
42113: PPUSH
42114: CALL_OW 275
42118: PUSH
42119: LD_VAR 0 14
42123: PUSH
42124: LD_INT 3
42126: ARRAY
42127: GREATEREQUAL
42128: AND
42129: IFFALSE 42141
// result := weapon ;
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: LD_VAR 0 18
42140: ST_TO_ADDR
// end ; end ;
42141: LD_VAR 0 3
42145: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
// result := true ;
42150: LD_ADDR_VAR 0 3
42154: PUSH
42155: LD_INT 1
42157: ST_TO_ADDR
// if array1 = array2 then
42158: LD_VAR 0 1
42162: PUSH
42163: LD_VAR 0 2
42167: EQUAL
42168: IFFALSE 42228
// begin for i = 1 to array1 do
42170: LD_ADDR_VAR 0 4
42174: PUSH
42175: DOUBLE
42176: LD_INT 1
42178: DEC
42179: ST_TO_ADDR
42180: LD_VAR 0 1
42184: PUSH
42185: FOR_TO
42186: IFFALSE 42224
// if array1 [ i ] <> array2 [ i ] then
42188: LD_VAR 0 1
42192: PUSH
42193: LD_VAR 0 4
42197: ARRAY
42198: PUSH
42199: LD_VAR 0 2
42203: PUSH
42204: LD_VAR 0 4
42208: ARRAY
42209: NONEQUAL
42210: IFFALSE 42222
// begin result := false ;
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 0
42219: ST_TO_ADDR
// break ;
42220: GO 42224
// end ;
42222: GO 42185
42224: POP
42225: POP
// end else
42226: GO 42236
// result := false ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 0
42235: ST_TO_ADDR
// end ;
42236: LD_VAR 0 3
42240: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
// if not array1 or not array2 then
42245: LD_VAR 0 1
42249: NOT
42250: PUSH
42251: LD_VAR 0 2
42255: NOT
42256: OR
42257: IFFALSE 42261
// exit ;
42259: GO 42325
// result := true ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_INT 1
42268: ST_TO_ADDR
// for i = 1 to array1 do
42269: LD_ADDR_VAR 0 4
42273: PUSH
42274: DOUBLE
42275: LD_INT 1
42277: DEC
42278: ST_TO_ADDR
42279: LD_VAR 0 1
42283: PUSH
42284: FOR_TO
42285: IFFALSE 42323
// if array1 [ i ] <> array2 [ i ] then
42287: LD_VAR 0 1
42291: PUSH
42292: LD_VAR 0 4
42296: ARRAY
42297: PUSH
42298: LD_VAR 0 2
42302: PUSH
42303: LD_VAR 0 4
42307: ARRAY
42308: NONEQUAL
42309: IFFALSE 42321
// begin result := false ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 0
42318: ST_TO_ADDR
// break ;
42319: GO 42323
// end ;
42321: GO 42284
42323: POP
42324: POP
// end ;
42325: LD_VAR 0 3
42329: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42330: LD_INT 0
42332: PPUSH
42333: PPUSH
42334: PPUSH
// pom := GetBase ( fac ) ;
42335: LD_ADDR_VAR 0 5
42339: PUSH
42340: LD_VAR 0 1
42344: PPUSH
42345: CALL_OW 274
42349: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42350: LD_ADDR_VAR 0 4
42354: PUSH
42355: LD_VAR 0 2
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: PPUSH
42364: LD_VAR 0 2
42368: PUSH
42369: LD_INT 2
42371: ARRAY
42372: PPUSH
42373: LD_VAR 0 2
42377: PUSH
42378: LD_INT 3
42380: ARRAY
42381: PPUSH
42382: LD_VAR 0 2
42386: PUSH
42387: LD_INT 4
42389: ARRAY
42390: PPUSH
42391: CALL_OW 449
42395: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42396: LD_ADDR_VAR 0 3
42400: PUSH
42401: LD_VAR 0 5
42405: PPUSH
42406: LD_INT 1
42408: PPUSH
42409: CALL_OW 275
42413: PUSH
42414: LD_VAR 0 4
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: GREATEREQUAL
42423: PUSH
42424: LD_VAR 0 5
42428: PPUSH
42429: LD_INT 2
42431: PPUSH
42432: CALL_OW 275
42436: PUSH
42437: LD_VAR 0 4
42441: PUSH
42442: LD_INT 2
42444: ARRAY
42445: GREATEREQUAL
42446: AND
42447: PUSH
42448: LD_VAR 0 5
42452: PPUSH
42453: LD_INT 3
42455: PPUSH
42456: CALL_OW 275
42460: PUSH
42461: LD_VAR 0 4
42465: PUSH
42466: LD_INT 3
42468: ARRAY
42469: GREATEREQUAL
42470: AND
42471: ST_TO_ADDR
// end ;
42472: LD_VAR 0 3
42476: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42477: LD_INT 0
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
// pom := GetBase ( building ) ;
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: CALL_OW 274
42497: ST_TO_ADDR
// if not pom then
42498: LD_VAR 0 3
42502: NOT
42503: IFFALSE 42507
// exit ;
42505: GO 42677
// btype := GetBType ( building ) ;
42507: LD_ADDR_VAR 0 5
42511: PUSH
42512: LD_VAR 0 1
42516: PPUSH
42517: CALL_OW 266
42521: ST_TO_ADDR
// if btype = b_armoury then
42522: LD_VAR 0 5
42526: PUSH
42527: LD_INT 4
42529: EQUAL
42530: IFFALSE 42540
// btype := b_barracks ;
42532: LD_ADDR_VAR 0 5
42536: PUSH
42537: LD_INT 5
42539: ST_TO_ADDR
// if btype = b_depot then
42540: LD_VAR 0 5
42544: PUSH
42545: LD_INT 0
42547: EQUAL
42548: IFFALSE 42558
// btype := b_warehouse ;
42550: LD_ADDR_VAR 0 5
42554: PUSH
42555: LD_INT 1
42557: ST_TO_ADDR
// if btype = b_workshop then
42558: LD_VAR 0 5
42562: PUSH
42563: LD_INT 2
42565: EQUAL
42566: IFFALSE 42576
// btype := b_factory ;
42568: LD_ADDR_VAR 0 5
42572: PUSH
42573: LD_INT 3
42575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42576: LD_ADDR_VAR 0 4
42580: PUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 248
42595: PPUSH
42596: CALL_OW 450
42600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42601: LD_ADDR_VAR 0 2
42605: PUSH
42606: LD_VAR 0 3
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: CALL_OW 275
42618: PUSH
42619: LD_VAR 0 4
42623: PUSH
42624: LD_INT 1
42626: ARRAY
42627: GREATEREQUAL
42628: PUSH
42629: LD_VAR 0 3
42633: PPUSH
42634: LD_INT 2
42636: PPUSH
42637: CALL_OW 275
42641: PUSH
42642: LD_VAR 0 4
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: GREATEREQUAL
42651: AND
42652: PUSH
42653: LD_VAR 0 3
42657: PPUSH
42658: LD_INT 3
42660: PPUSH
42661: CALL_OW 275
42665: PUSH
42666: LD_VAR 0 4
42670: PUSH
42671: LD_INT 3
42673: ARRAY
42674: GREATEREQUAL
42675: AND
42676: ST_TO_ADDR
// end ;
42677: LD_VAR 0 2
42681: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42682: LD_INT 0
42684: PPUSH
42685: PPUSH
42686: PPUSH
// pom := GetBase ( building ) ;
42687: LD_ADDR_VAR 0 4
42691: PUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL_OW 274
42701: ST_TO_ADDR
// if not pom then
42702: LD_VAR 0 4
42706: NOT
42707: IFFALSE 42711
// exit ;
42709: GO 42812
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42711: LD_ADDR_VAR 0 5
42715: PUSH
42716: LD_VAR 0 2
42720: PPUSH
42721: LD_VAR 0 1
42725: PPUSH
42726: CALL_OW 248
42730: PPUSH
42731: CALL_OW 450
42735: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42736: LD_ADDR_VAR 0 3
42740: PUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: LD_INT 1
42748: PPUSH
42749: CALL_OW 275
42753: PUSH
42754: LD_VAR 0 5
42758: PUSH
42759: LD_INT 1
42761: ARRAY
42762: GREATEREQUAL
42763: PUSH
42764: LD_VAR 0 4
42768: PPUSH
42769: LD_INT 2
42771: PPUSH
42772: CALL_OW 275
42776: PUSH
42777: LD_VAR 0 5
42781: PUSH
42782: LD_INT 2
42784: ARRAY
42785: GREATEREQUAL
42786: AND
42787: PUSH
42788: LD_VAR 0 4
42792: PPUSH
42793: LD_INT 3
42795: PPUSH
42796: CALL_OW 275
42800: PUSH
42801: LD_VAR 0 5
42805: PUSH
42806: LD_INT 3
42808: ARRAY
42809: GREATEREQUAL
42810: AND
42811: ST_TO_ADDR
// end ;
42812: LD_VAR 0 3
42816: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42817: LD_INT 0
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
// result := false ;
42830: LD_ADDR_VAR 0 8
42834: PUSH
42835: LD_INT 0
42837: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42838: LD_VAR 0 5
42842: NOT
42843: PUSH
42844: LD_VAR 0 1
42848: NOT
42849: OR
42850: PUSH
42851: LD_VAR 0 2
42855: NOT
42856: OR
42857: PUSH
42858: LD_VAR 0 3
42862: NOT
42863: OR
42864: IFFALSE 42868
// exit ;
42866: GO 43682
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42868: LD_ADDR_VAR 0 14
42872: PUSH
42873: LD_VAR 0 1
42877: PPUSH
42878: LD_VAR 0 2
42882: PPUSH
42883: LD_VAR 0 3
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: LD_VAR 0 5
42897: PUSH
42898: LD_INT 1
42900: ARRAY
42901: PPUSH
42902: CALL_OW 248
42906: PPUSH
42907: LD_INT 0
42909: PPUSH
42910: CALL 44919 0 6
42914: ST_TO_ADDR
// if not hexes then
42915: LD_VAR 0 14
42919: NOT
42920: IFFALSE 42924
// exit ;
42922: GO 43682
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42924: LD_ADDR_VAR 0 17
42928: PUSH
42929: LD_VAR 0 5
42933: PPUSH
42934: LD_INT 22
42936: PUSH
42937: LD_VAR 0 13
42941: PPUSH
42942: CALL_OW 255
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 30
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 30
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PPUSH
42983: CALL_OW 72
42987: ST_TO_ADDR
// for i = 1 to hexes do
42988: LD_ADDR_VAR 0 9
42992: PUSH
42993: DOUBLE
42994: LD_INT 1
42996: DEC
42997: ST_TO_ADDR
42998: LD_VAR 0 14
43002: PUSH
43003: FOR_TO
43004: IFFALSE 43680
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43006: LD_ADDR_VAR 0 13
43010: PUSH
43011: LD_VAR 0 14
43015: PUSH
43016: LD_VAR 0 9
43020: ARRAY
43021: PUSH
43022: LD_INT 1
43024: ARRAY
43025: PPUSH
43026: LD_VAR 0 14
43030: PUSH
43031: LD_VAR 0 9
43035: ARRAY
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: PPUSH
43041: CALL_OW 428
43045: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43046: LD_VAR 0 14
43050: PUSH
43051: LD_VAR 0 9
43055: ARRAY
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PPUSH
43061: LD_VAR 0 14
43065: PUSH
43066: LD_VAR 0 9
43070: ARRAY
43071: PUSH
43072: LD_INT 2
43074: ARRAY
43075: PPUSH
43076: CALL_OW 351
43080: PUSH
43081: LD_VAR 0 14
43085: PUSH
43086: LD_VAR 0 9
43090: ARRAY
43091: PUSH
43092: LD_INT 1
43094: ARRAY
43095: PPUSH
43096: LD_VAR 0 14
43100: PUSH
43101: LD_VAR 0 9
43105: ARRAY
43106: PUSH
43107: LD_INT 2
43109: ARRAY
43110: PPUSH
43111: CALL_OW 488
43115: NOT
43116: OR
43117: PUSH
43118: LD_VAR 0 13
43122: PPUSH
43123: CALL_OW 247
43127: PUSH
43128: LD_INT 3
43130: EQUAL
43131: OR
43132: IFFALSE 43138
// exit ;
43134: POP
43135: POP
43136: GO 43682
// if not tmp then
43138: LD_VAR 0 13
43142: NOT
43143: IFFALSE 43147
// continue ;
43145: GO 43003
// result := true ;
43147: LD_ADDR_VAR 0 8
43151: PUSH
43152: LD_INT 1
43154: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43155: LD_VAR 0 6
43159: PUSH
43160: LD_VAR 0 13
43164: PPUSH
43165: CALL_OW 247
43169: PUSH
43170: LD_INT 2
43172: EQUAL
43173: AND
43174: PUSH
43175: LD_VAR 0 13
43179: PPUSH
43180: CALL_OW 263
43184: PUSH
43185: LD_INT 1
43187: EQUAL
43188: AND
43189: IFFALSE 43353
// begin if IsDrivenBy ( tmp ) then
43191: LD_VAR 0 13
43195: PPUSH
43196: CALL_OW 311
43200: IFFALSE 43204
// continue ;
43202: GO 43003
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43204: LD_VAR 0 6
43208: PPUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 60
43214: PUSH
43215: EMPTY
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 55
43227: PUSH
43228: EMPTY
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PPUSH
43239: CALL_OW 72
43243: IFFALSE 43351
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43245: LD_ADDR_VAR 0 18
43249: PUSH
43250: LD_VAR 0 6
43254: PPUSH
43255: LD_INT 3
43257: PUSH
43258: LD_INT 60
43260: PUSH
43261: EMPTY
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: LD_INT 55
43273: PUSH
43274: EMPTY
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PPUSH
43285: CALL_OW 72
43289: PUSH
43290: LD_INT 1
43292: ARRAY
43293: ST_TO_ADDR
// if IsInUnit ( driver ) then
43294: LD_VAR 0 18
43298: PPUSH
43299: CALL_OW 310
43303: IFFALSE 43314
// ComExit ( driver ) ;
43305: LD_VAR 0 18
43309: PPUSH
43310: CALL 68624 0 1
// AddComEnterUnit ( driver , tmp ) ;
43314: LD_VAR 0 18
43318: PPUSH
43319: LD_VAR 0 13
43323: PPUSH
43324: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43328: LD_VAR 0 18
43332: PPUSH
43333: LD_VAR 0 7
43337: PPUSH
43338: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43342: LD_VAR 0 18
43346: PPUSH
43347: CALL_OW 181
// end ; continue ;
43351: GO 43003
// end ; if not cleaners or not tmp in cleaners then
43353: LD_VAR 0 6
43357: NOT
43358: PUSH
43359: LD_VAR 0 13
43363: PUSH
43364: LD_VAR 0 6
43368: IN
43369: NOT
43370: OR
43371: IFFALSE 43678
// begin if dep then
43373: LD_VAR 0 17
43377: IFFALSE 43513
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43379: LD_ADDR_VAR 0 16
43383: PUSH
43384: LD_VAR 0 17
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: CALL_OW 250
43397: PPUSH
43398: LD_VAR 0 17
43402: PUSH
43403: LD_INT 1
43405: ARRAY
43406: PPUSH
43407: CALL_OW 254
43411: PPUSH
43412: LD_INT 5
43414: PPUSH
43415: CALL_OW 272
43419: PUSH
43420: LD_VAR 0 17
43424: PUSH
43425: LD_INT 1
43427: ARRAY
43428: PPUSH
43429: CALL_OW 251
43433: PPUSH
43434: LD_VAR 0 17
43438: PUSH
43439: LD_INT 1
43441: ARRAY
43442: PPUSH
43443: CALL_OW 254
43447: PPUSH
43448: LD_INT 5
43450: PPUSH
43451: CALL_OW 273
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43460: LD_VAR 0 16
43464: PUSH
43465: LD_INT 1
43467: ARRAY
43468: PPUSH
43469: LD_VAR 0 16
43473: PUSH
43474: LD_INT 2
43476: ARRAY
43477: PPUSH
43478: CALL_OW 488
43482: IFFALSE 43513
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43484: LD_VAR 0 13
43488: PPUSH
43489: LD_VAR 0 16
43493: PUSH
43494: LD_INT 1
43496: ARRAY
43497: PPUSH
43498: LD_VAR 0 16
43502: PUSH
43503: LD_INT 2
43505: ARRAY
43506: PPUSH
43507: CALL_OW 111
// continue ;
43511: GO 43003
// end ; end ; r := GetDir ( tmp ) ;
43513: LD_ADDR_VAR 0 15
43517: PUSH
43518: LD_VAR 0 13
43522: PPUSH
43523: CALL_OW 254
43527: ST_TO_ADDR
// if r = 5 then
43528: LD_VAR 0 15
43532: PUSH
43533: LD_INT 5
43535: EQUAL
43536: IFFALSE 43546
// r := 0 ;
43538: LD_ADDR_VAR 0 15
43542: PUSH
43543: LD_INT 0
43545: ST_TO_ADDR
// for j = r to 5 do
43546: LD_ADDR_VAR 0 10
43550: PUSH
43551: DOUBLE
43552: LD_VAR 0 15
43556: DEC
43557: ST_TO_ADDR
43558: LD_INT 5
43560: PUSH
43561: FOR_TO
43562: IFFALSE 43676
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43564: LD_ADDR_VAR 0 11
43568: PUSH
43569: LD_VAR 0 13
43573: PPUSH
43574: CALL_OW 250
43578: PPUSH
43579: LD_VAR 0 10
43583: PPUSH
43584: LD_INT 2
43586: PPUSH
43587: CALL_OW 272
43591: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43592: LD_ADDR_VAR 0 12
43596: PUSH
43597: LD_VAR 0 13
43601: PPUSH
43602: CALL_OW 251
43606: PPUSH
43607: LD_VAR 0 10
43611: PPUSH
43612: LD_INT 2
43614: PPUSH
43615: CALL_OW 273
43619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43620: LD_VAR 0 11
43624: PPUSH
43625: LD_VAR 0 12
43629: PPUSH
43630: CALL_OW 488
43634: PUSH
43635: LD_VAR 0 11
43639: PPUSH
43640: LD_VAR 0 12
43644: PPUSH
43645: CALL_OW 428
43649: NOT
43650: AND
43651: IFFALSE 43674
// begin ComMoveXY ( tmp , _x , _y ) ;
43653: LD_VAR 0 13
43657: PPUSH
43658: LD_VAR 0 11
43662: PPUSH
43663: LD_VAR 0 12
43667: PPUSH
43668: CALL_OW 111
// break ;
43672: GO 43676
// end ; end ;
43674: GO 43561
43676: POP
43677: POP
// end ; end ;
43678: GO 43003
43680: POP
43681: POP
// end ;
43682: LD_VAR 0 8
43686: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43687: LD_INT 0
43689: PPUSH
// result := true ;
43690: LD_ADDR_VAR 0 3
43694: PUSH
43695: LD_INT 1
43697: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43698: LD_VAR 0 2
43702: PUSH
43703: LD_INT 24
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43717
43709: LD_INT 33
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43717
43715: GO 43742
43717: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_INT 32
43725: PPUSH
43726: LD_VAR 0 1
43730: PPUSH
43731: CALL_OW 321
43735: PUSH
43736: LD_INT 2
43738: EQUAL
43739: ST_TO_ADDR
43740: GO 44062
43742: LD_INT 20
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43775
43750: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 6
43758: PPUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 321
43768: PUSH
43769: LD_INT 2
43771: EQUAL
43772: ST_TO_ADDR
43773: GO 44062
43775: LD_INT 22
43777: DOUBLE
43778: EQUAL
43779: IFTRUE 43789
43781: LD_INT 36
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 43814
43789: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_INT 15
43797: PPUSH
43798: LD_VAR 0 1
43802: PPUSH
43803: CALL_OW 321
43807: PUSH
43808: LD_INT 2
43810: EQUAL
43811: ST_TO_ADDR
43812: GO 44062
43814: LD_INT 30
43816: DOUBLE
43817: EQUAL
43818: IFTRUE 43822
43820: GO 43847
43822: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_INT 20
43830: PPUSH
43831: LD_VAR 0 1
43835: PPUSH
43836: CALL_OW 321
43840: PUSH
43841: LD_INT 2
43843: EQUAL
43844: ST_TO_ADDR
43845: GO 44062
43847: LD_INT 28
43849: DOUBLE
43850: EQUAL
43851: IFTRUE 43861
43853: LD_INT 21
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43861
43859: GO 43886
43861: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43862: LD_ADDR_VAR 0 3
43866: PUSH
43867: LD_INT 21
43869: PPUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 321
43879: PUSH
43880: LD_INT 2
43882: EQUAL
43883: ST_TO_ADDR
43884: GO 44062
43886: LD_INT 16
43888: DOUBLE
43889: EQUAL
43890: IFTRUE 43894
43892: GO 43921
43894: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_EXP 33
43904: PPUSH
43905: LD_VAR 0 1
43909: PPUSH
43910: CALL_OW 321
43914: PUSH
43915: LD_INT 2
43917: EQUAL
43918: ST_TO_ADDR
43919: GO 44062
43921: LD_INT 19
43923: DOUBLE
43924: EQUAL
43925: IFTRUE 43935
43927: LD_INT 23
43929: DOUBLE
43930: EQUAL
43931: IFTRUE 43935
43933: GO 43962
43935: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_EXP 32
43945: PPUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 321
43955: PUSH
43956: LD_INT 2
43958: EQUAL
43959: ST_TO_ADDR
43960: GO 44062
43962: LD_INT 17
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43995
43970: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 39
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 321
43988: PUSH
43989: LD_INT 2
43991: EQUAL
43992: ST_TO_ADDR
43993: GO 44062
43995: LD_INT 18
43997: DOUBLE
43998: EQUAL
43999: IFTRUE 44003
44001: GO 44028
44003: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44004: LD_ADDR_VAR 0 3
44008: PUSH
44009: LD_INT 40
44011: PPUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 321
44021: PUSH
44022: LD_INT 2
44024: EQUAL
44025: ST_TO_ADDR
44026: GO 44062
44028: LD_INT 27
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44036
44034: GO 44061
44036: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_INT 35
44044: PPUSH
44045: LD_VAR 0 1
44049: PPUSH
44050: CALL_OW 321
44054: PUSH
44055: LD_INT 2
44057: EQUAL
44058: ST_TO_ADDR
44059: GO 44062
44061: POP
// end ;
44062: LD_VAR 0 3
44066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44067: LD_INT 0
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
// result := false ;
44080: LD_ADDR_VAR 0 6
44084: PUSH
44085: LD_INT 0
44087: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44088: LD_VAR 0 1
44092: NOT
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 266
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: IN
44114: NOT
44115: OR
44116: PUSH
44117: LD_VAR 0 2
44121: NOT
44122: OR
44123: PUSH
44124: LD_VAR 0 5
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: LD_INT 4
44143: PUSH
44144: LD_INT 5
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: IN
44155: NOT
44156: OR
44157: PUSH
44158: LD_VAR 0 3
44162: PPUSH
44163: LD_VAR 0 4
44167: PPUSH
44168: CALL_OW 488
44172: NOT
44173: OR
44174: IFFALSE 44178
// exit ;
44176: GO 44914
// side := GetSide ( depot ) ;
44178: LD_ADDR_VAR 0 9
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 255
44192: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44193: LD_VAR 0 9
44197: PPUSH
44198: LD_VAR 0 2
44202: PPUSH
44203: CALL 43687 0 2
44207: NOT
44208: IFFALSE 44212
// exit ;
44210: GO 44914
// pom := GetBase ( depot ) ;
44212: LD_ADDR_VAR 0 10
44216: PUSH
44217: LD_VAR 0 1
44221: PPUSH
44222: CALL_OW 274
44226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44227: LD_ADDR_VAR 0 11
44231: PUSH
44232: LD_VAR 0 2
44236: PPUSH
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 248
44246: PPUSH
44247: CALL_OW 450
44251: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44252: LD_VAR 0 10
44256: PPUSH
44257: LD_INT 1
44259: PPUSH
44260: CALL_OW 275
44264: PUSH
44265: LD_VAR 0 11
44269: PUSH
44270: LD_INT 1
44272: ARRAY
44273: GREATEREQUAL
44274: PUSH
44275: LD_VAR 0 10
44279: PPUSH
44280: LD_INT 2
44282: PPUSH
44283: CALL_OW 275
44287: PUSH
44288: LD_VAR 0 11
44292: PUSH
44293: LD_INT 2
44295: ARRAY
44296: GREATEREQUAL
44297: AND
44298: PUSH
44299: LD_VAR 0 10
44303: PPUSH
44304: LD_INT 3
44306: PPUSH
44307: CALL_OW 275
44311: PUSH
44312: LD_VAR 0 11
44316: PUSH
44317: LD_INT 3
44319: ARRAY
44320: GREATEREQUAL
44321: AND
44322: NOT
44323: IFFALSE 44327
// exit ;
44325: GO 44914
// if GetBType ( depot ) = b_depot then
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 266
44336: PUSH
44337: LD_INT 0
44339: EQUAL
44340: IFFALSE 44352
// dist := 28 else
44342: LD_ADDR_VAR 0 14
44346: PUSH
44347: LD_INT 28
44349: ST_TO_ADDR
44350: GO 44360
// dist := 36 ;
44352: LD_ADDR_VAR 0 14
44356: PUSH
44357: LD_INT 36
44359: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44360: LD_VAR 0 1
44364: PPUSH
44365: LD_VAR 0 3
44369: PPUSH
44370: LD_VAR 0 4
44374: PPUSH
44375: CALL_OW 297
44379: PUSH
44380: LD_VAR 0 14
44384: GREATER
44385: IFFALSE 44389
// exit ;
44387: GO 44914
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44389: LD_ADDR_VAR 0 12
44393: PUSH
44394: LD_VAR 0 2
44398: PPUSH
44399: LD_VAR 0 3
44403: PPUSH
44404: LD_VAR 0 4
44408: PPUSH
44409: LD_VAR 0 5
44413: PPUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: CALL_OW 248
44423: PPUSH
44424: LD_INT 0
44426: PPUSH
44427: CALL 44919 0 6
44431: ST_TO_ADDR
// if not hexes then
44432: LD_VAR 0 12
44436: NOT
44437: IFFALSE 44441
// exit ;
44439: GO 44914
// hex := GetHexInfo ( x , y ) ;
44441: LD_ADDR_VAR 0 15
44445: PUSH
44446: LD_VAR 0 3
44450: PPUSH
44451: LD_VAR 0 4
44455: PPUSH
44456: CALL_OW 546
44460: ST_TO_ADDR
// if hex [ 1 ] then
44461: LD_VAR 0 15
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: IFFALSE 44473
// exit ;
44471: GO 44914
// height := hex [ 2 ] ;
44473: LD_ADDR_VAR 0 13
44477: PUSH
44478: LD_VAR 0 15
44482: PUSH
44483: LD_INT 2
44485: ARRAY
44486: ST_TO_ADDR
// for i = 1 to hexes do
44487: LD_ADDR_VAR 0 7
44491: PUSH
44492: DOUBLE
44493: LD_INT 1
44495: DEC
44496: ST_TO_ADDR
44497: LD_VAR 0 12
44501: PUSH
44502: FOR_TO
44503: IFFALSE 44833
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44505: LD_VAR 0 12
44509: PUSH
44510: LD_VAR 0 7
44514: ARRAY
44515: PUSH
44516: LD_INT 1
44518: ARRAY
44519: PPUSH
44520: LD_VAR 0 12
44524: PUSH
44525: LD_VAR 0 7
44529: ARRAY
44530: PUSH
44531: LD_INT 2
44533: ARRAY
44534: PPUSH
44535: CALL_OW 488
44539: NOT
44540: PUSH
44541: LD_VAR 0 12
44545: PUSH
44546: LD_VAR 0 7
44550: ARRAY
44551: PUSH
44552: LD_INT 1
44554: ARRAY
44555: PPUSH
44556: LD_VAR 0 12
44560: PUSH
44561: LD_VAR 0 7
44565: ARRAY
44566: PUSH
44567: LD_INT 2
44569: ARRAY
44570: PPUSH
44571: CALL_OW 428
44575: PUSH
44576: LD_INT 0
44578: GREATER
44579: OR
44580: PUSH
44581: LD_VAR 0 12
44585: PUSH
44586: LD_VAR 0 7
44590: ARRAY
44591: PUSH
44592: LD_INT 1
44594: ARRAY
44595: PPUSH
44596: LD_VAR 0 12
44600: PUSH
44601: LD_VAR 0 7
44605: ARRAY
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: PPUSH
44611: CALL_OW 351
44615: OR
44616: IFFALSE 44622
// exit ;
44618: POP
44619: POP
44620: GO 44914
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44622: LD_ADDR_VAR 0 8
44626: PUSH
44627: LD_VAR 0 12
44631: PUSH
44632: LD_VAR 0 7
44636: ARRAY
44637: PUSH
44638: LD_INT 1
44640: ARRAY
44641: PPUSH
44642: LD_VAR 0 12
44646: PUSH
44647: LD_VAR 0 7
44651: ARRAY
44652: PUSH
44653: LD_INT 2
44655: ARRAY
44656: PPUSH
44657: CALL_OW 546
44661: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44662: LD_VAR 0 8
44666: PUSH
44667: LD_INT 1
44669: ARRAY
44670: PUSH
44671: LD_VAR 0 8
44675: PUSH
44676: LD_INT 2
44678: ARRAY
44679: PUSH
44680: LD_VAR 0 13
44684: PUSH
44685: LD_INT 2
44687: PLUS
44688: GREATER
44689: OR
44690: PUSH
44691: LD_VAR 0 8
44695: PUSH
44696: LD_INT 2
44698: ARRAY
44699: PUSH
44700: LD_VAR 0 13
44704: PUSH
44705: LD_INT 2
44707: MINUS
44708: LESS
44709: OR
44710: PUSH
44711: LD_VAR 0 8
44715: PUSH
44716: LD_INT 3
44718: ARRAY
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 8
44725: PUSH
44726: LD_INT 9
44728: PUSH
44729: LD_INT 10
44731: PUSH
44732: LD_INT 11
44734: PUSH
44735: LD_INT 12
44737: PUSH
44738: LD_INT 13
44740: PUSH
44741: LD_INT 16
44743: PUSH
44744: LD_INT 17
44746: PUSH
44747: LD_INT 18
44749: PUSH
44750: LD_INT 19
44752: PUSH
44753: LD_INT 20
44755: PUSH
44756: LD_INT 21
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: IN
44774: NOT
44775: OR
44776: PUSH
44777: LD_VAR 0 8
44781: PUSH
44782: LD_INT 5
44784: ARRAY
44785: NOT
44786: OR
44787: PUSH
44788: LD_VAR 0 8
44792: PUSH
44793: LD_INT 6
44795: ARRAY
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 7
44805: PUSH
44806: LD_INT 9
44808: PUSH
44809: LD_INT 10
44811: PUSH
44812: LD_INT 11
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: IN
44823: NOT
44824: OR
44825: IFFALSE 44831
// exit ;
44827: POP
44828: POP
44829: GO 44914
// end ;
44831: GO 44502
44833: POP
44834: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44835: LD_VAR 0 9
44839: PPUSH
44840: LD_VAR 0 3
44844: PPUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: LD_INT 20
44852: PPUSH
44853: CALL 36860 0 4
44857: PUSH
44858: LD_INT 4
44860: ARRAY
44861: IFFALSE 44865
// exit ;
44863: GO 44914
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44865: LD_VAR 0 2
44869: PUSH
44870: LD_INT 29
44872: PUSH
44873: LD_INT 30
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: IN
44880: PUSH
44881: LD_VAR 0 3
44885: PPUSH
44886: LD_VAR 0 4
44890: PPUSH
44891: LD_VAR 0 9
44895: PPUSH
44896: CALL_OW 440
44900: NOT
44901: AND
44902: IFFALSE 44906
// exit ;
44904: GO 44914
// result := true ;
44906: LD_ADDR_VAR 0 6
44910: PUSH
44911: LD_INT 1
44913: ST_TO_ADDR
// end ;
44914: LD_VAR 0 6
44918: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44919: LD_INT 0
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
44941: PPUSH
44942: PPUSH
44943: PPUSH
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
44948: PPUSH
44949: PPUSH
44950: PPUSH
44951: PPUSH
44952: PPUSH
44953: PPUSH
44954: PPUSH
44955: PPUSH
44956: PPUSH
44957: PPUSH
44958: PPUSH
44959: PPUSH
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
// result = [ ] ;
44979: LD_ADDR_VAR 0 7
44983: PUSH
44984: EMPTY
44985: ST_TO_ADDR
// temp_list = [ ] ;
44986: LD_ADDR_VAR 0 9
44990: PUSH
44991: EMPTY
44992: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44993: LD_VAR 0 4
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 5
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: IN
45024: NOT
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: IN
45041: PUSH
45042: LD_VAR 0 5
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: IN
45061: NOT
45062: AND
45063: OR
45064: IFFALSE 45068
// exit ;
45066: GO 63459
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45068: LD_VAR 0 1
45072: PUSH
45073: LD_INT 6
45075: PUSH
45076: LD_INT 7
45078: PUSH
45079: LD_INT 8
45081: PUSH
45082: LD_INT 13
45084: PUSH
45085: LD_INT 12
45087: PUSH
45088: LD_INT 15
45090: PUSH
45091: LD_INT 11
45093: PUSH
45094: LD_INT 14
45096: PUSH
45097: LD_INT 10
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: IN
45111: IFFALSE 45121
// btype = b_lab ;
45113: LD_ADDR_VAR 0 1
45117: PUSH
45118: LD_INT 6
45120: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45121: LD_VAR 0 6
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: IN
45140: NOT
45141: PUSH
45142: LD_VAR 0 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: LD_INT 6
45161: PUSH
45162: LD_INT 36
45164: PUSH
45165: LD_INT 4
45167: PUSH
45168: LD_INT 5
45170: PUSH
45171: LD_INT 31
45173: PUSH
45174: LD_INT 32
45176: PUSH
45177: LD_INT 33
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: IN
45193: NOT
45194: PUSH
45195: LD_VAR 0 6
45199: PUSH
45200: LD_INT 1
45202: EQUAL
45203: AND
45204: OR
45205: PUSH
45206: LD_VAR 0 1
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: IN
45221: NOT
45222: PUSH
45223: LD_VAR 0 6
45227: PUSH
45228: LD_INT 2
45230: EQUAL
45231: AND
45232: OR
45233: IFFALSE 45243
// mode = 0 ;
45235: LD_ADDR_VAR 0 6
45239: PUSH
45240: LD_INT 0
45242: ST_TO_ADDR
// case mode of 0 :
45243: LD_VAR 0 6
45247: PUSH
45248: LD_INT 0
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 56709
45256: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45257: LD_ADDR_VAR 0 11
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 3
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45450: LD_ADDR_VAR 0 12
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45646: LD_ADDR_VAR 0 13
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 3
45817: NEG
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45845: LD_ADDR_VAR 0 14
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46041: LD_ADDR_VAR 0 15
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46234: LD_ADDR_VAR 0 16
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46427: LD_ADDR_VAR 0 17
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46657: LD_ADDR_VAR 0 18
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46887: LD_ADDR_VAR 0 19
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47117: LD_ADDR_VAR 0 20
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47347: LD_ADDR_VAR 0 21
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47577: LD_ADDR_VAR 0 22
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47807: LD_ADDR_VAR 0 23
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48087: LD_ADDR_VAR 0 24
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48363: LD_ADDR_VAR 0 25
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48637: LD_ADDR_VAR 0 26
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48913: LD_ADDR_VAR 0 27
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49193: LD_ADDR_VAR 0 28
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 3
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49475: LD_ADDR_VAR 0 29
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49754: LD_ADDR_VAR 0 30
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50032: LD_ADDR_VAR 0 31
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50310: LD_ADDR_VAR 0 32
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50588: LD_ADDR_VAR 0 33
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50867: LD_ADDR_VAR 0 34
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51147: LD_ADDR_VAR 0 35
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51259: LD_ADDR_VAR 0 36
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51371: LD_ADDR_VAR 0 37
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51483: LD_ADDR_VAR 0 38
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51595: LD_ADDR_VAR 0 39
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51707: LD_ADDR_VAR 0 40
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51819: LD_ADDR_VAR 0 41
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52169: LD_ADDR_VAR 0 42
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52519: LD_ADDR_VAR 0 43
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52867: LD_ADDR_VAR 0 44
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53217: LD_ADDR_VAR 0 45
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53567: LD_ADDR_VAR 0 46
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53915: LD_ADDR_VAR 0 47
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54066: LD_ADDR_VAR 0 48
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54213: LD_ADDR_VAR 0 49
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54357: LD_ADDR_VAR 0 50
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54501: LD_ADDR_VAR 0 51
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54648: LD_ADDR_VAR 0 52
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54799: LD_ADDR_VAR 0 53
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55029: LD_ADDR_VAR 0 54
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55259: LD_ADDR_VAR 0 55
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55489: LD_ADDR_VAR 0 56
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55719: LD_ADDR_VAR 0 57
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55949: LD_ADDR_VAR 0 58
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56179: LD_ADDR_VAR 0 59
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56267: LD_ADDR_VAR 0 60
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56355: LD_ADDR_VAR 0 61
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56443: LD_ADDR_VAR 0 62
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56531: LD_ADDR_VAR 0 63
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56619: LD_ADDR_VAR 0 64
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// end ; 1 :
56707: GO 62604
56709: LD_INT 1
56711: DOUBLE
56712: EQUAL
56713: IFTRUE 56717
56715: GO 59340
56717: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56718: LD_ADDR_VAR 0 11
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56762: LD_ADDR_VAR 0 12
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56803: LD_ADDR_VAR 0 13
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56843: LD_ADDR_VAR 0 14
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56884: LD_ADDR_VAR 0 15
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56928: LD_ADDR_VAR 0 16
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56974: LD_ADDR_VAR 0 17
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57018: LD_ADDR_VAR 0 18
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57059: LD_ADDR_VAR 0 19
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57099: LD_ADDR_VAR 0 20
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57140: LD_ADDR_VAR 0 21
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57184: LD_ADDR_VAR 0 22
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57230: LD_ADDR_VAR 0 23
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57274: LD_ADDR_VAR 0 24
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57315: LD_ADDR_VAR 0 25
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57355: LD_ADDR_VAR 0 26
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57396: LD_ADDR_VAR 0 27
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: NEG
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57440: LD_ADDR_VAR 0 28
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57486: LD_ADDR_VAR 0 29
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 4
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 4
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 5
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 5
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 6
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 6
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 5
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57641: LD_ADDR_VAR 0 30
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 4
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 6
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 6
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57784: LD_ADDR_VAR 0 31
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 5
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 6
57881: PUSH
57882: LD_INT 5
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 6
57891: PUSH
57892: LD_INT 6
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: PUSH
57902: LD_INT 6
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57923: LD_ADDR_VAR 0 32
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 4
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 4
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 5
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 5
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 6
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 6
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58066: LD_ADDR_VAR 0 33
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 5
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 5
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 6
58186: NEG
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 6
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58221: LD_ADDR_VAR 0 34
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 3
58252: NEG
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: LD_INT 4
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: NEG
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 4
58288: NEG
58289: PUSH
58290: LD_INT 4
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: LD_INT 5
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 5
58312: NEG
58313: PUSH
58314: LD_INT 4
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 5
58324: NEG
58325: PUSH
58326: LD_INT 5
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 5
58336: NEG
58337: PUSH
58338: LD_INT 6
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 6
58348: NEG
58349: PUSH
58350: LD_INT 5
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 6
58360: NEG
58361: PUSH
58362: LD_INT 6
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58384: LD_ADDR_VAR 0 41
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58428: LD_ADDR_VAR 0 42
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58469: LD_ADDR_VAR 0 43
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58509: LD_ADDR_VAR 0 44
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58550: LD_ADDR_VAR 0 45
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58594: LD_ADDR_VAR 0 46
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58640: LD_ADDR_VAR 0 47
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58673: LD_ADDR_VAR 0 48
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58704: LD_ADDR_VAR 0 49
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58733: LD_ADDR_VAR 0 50
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58762: LD_ADDR_VAR 0 51
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58793: LD_ADDR_VAR 0 52
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58826: LD_ADDR_VAR 0 53
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58870: LD_ADDR_VAR 0 54
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58911: LD_ADDR_VAR 0 55
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58951: LD_ADDR_VAR 0 56
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58992: LD_ADDR_VAR 0 57
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59036: LD_ADDR_VAR 0 58
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59082: LD_ADDR_VAR 0 59
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: LIST
59125: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59126: LD_ADDR_VAR 0 60
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59167: LD_ADDR_VAR 0 61
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59207: LD_ADDR_VAR 0 62
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59248: LD_ADDR_VAR 0 63
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59292: LD_ADDR_VAR 0 64
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// end ; 2 :
59338: GO 62604
59340: LD_INT 2
59342: DOUBLE
59343: EQUAL
59344: IFTRUE 59348
59346: GO 62603
59348: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59349: LD_ADDR_VAR 0 29
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 5
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 5
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: PUSH
59480: LD_INT 4
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 4
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 4
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 4
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 4
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 4
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 5
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 5
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 5
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: NEG
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 4
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: NEG
59747: PUSH
59748: LD_INT 5
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 4
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: LD_INT 3
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: NEG
59783: PUSH
59784: LD_INT 3
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: LD_INT 4
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 5
59806: NEG
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: LD_INT 5
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59887: LD_ADDR_VAR 0 30
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: LD_INT 4
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: LD_INT 4
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: LD_INT 5
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: LD_INT 5
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: LD_INT 5
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 5
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: LD_INT 4
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 4
60251: NEG
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 5
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60434: LD_ADDR_VAR 0 31
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 4
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 5
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 5
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: LD_INT 4
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 5
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 4
60590: NEG
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: NEG
60637: PUSH
60638: LD_INT 4
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: NEG
60649: PUSH
60650: LD_INT 5
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 4
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 5
60696: NEG
60697: PUSH
60698: LD_INT 4
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 5
60708: NEG
60709: PUSH
60710: LD_INT 5
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: LD_INT 5
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 5
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 4
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 3
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 5
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60984: LD_ADDR_VAR 0 32
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 4
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 4
61036: NEG
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 5
61047: NEG
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 5
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 5
61070: NEG
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: NEG
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 3
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 4
61153: NEG
61154: PUSH
61155: LD_INT 3
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: LD_INT 4
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 5
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 4
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: LD_INT 4
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 5
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: LD_INT 5
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 4
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 4
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 4
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 4
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 4
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 5
61416: PUSH
61417: LD_INT 4
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 5
61426: PUSH
61427: LD_INT 5
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 5
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: PUSH
61447: LD_INT 4
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: LD_INT 5
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61531: LD_ADDR_VAR 0 33
61535: PUSH
61536: LD_INT 4
61538: NEG
61539: PUSH
61540: LD_INT 4
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: LD_INT 5
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: LD_INT 4
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 3
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 4
61586: NEG
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: NEG
61599: PUSH
61600: LD_INT 4
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 5
61610: NEG
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: LD_INT 5
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 5
61634: NEG
61635: PUSH
61636: LD_INT 3
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 4
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 5
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 4
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 5
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 3
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 3
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: LD_INT 4
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 4
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: LD_INT 4
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 5
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 5
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62069: LD_ADDR_VAR 0 34
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 4
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 3
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 4
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 5
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 5
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 4
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 3
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 4
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 4
62271: PUSH
62272: LD_INT 4
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 5
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 5
62301: PUSH
62302: LD_INT 5
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 5
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 5
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: LD_INT 5
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 4
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 4
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 4
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 4
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 4
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 5
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 5
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 5
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// end ; end ;
62601: GO 62604
62603: POP
// case btype of b_depot , b_warehouse :
62604: LD_VAR 0 1
62608: PUSH
62609: LD_INT 0
62611: DOUBLE
62612: EQUAL
62613: IFTRUE 62623
62615: LD_INT 1
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62623
62621: GO 62824
62623: POP
// case nation of nation_american :
62624: LD_VAR 0 5
62628: PUSH
62629: LD_INT 1
62631: DOUBLE
62632: EQUAL
62633: IFTRUE 62637
62635: GO 62693
62637: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62638: LD_ADDR_VAR 0 9
62642: PUSH
62643: LD_VAR 0 11
62647: PUSH
62648: LD_VAR 0 12
62652: PUSH
62653: LD_VAR 0 13
62657: PUSH
62658: LD_VAR 0 14
62662: PUSH
62663: LD_VAR 0 15
62667: PUSH
62668: LD_VAR 0 16
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: PUSH
62681: LD_VAR 0 4
62685: PUSH
62686: LD_INT 1
62688: PLUS
62689: ARRAY
62690: ST_TO_ADDR
62691: GO 62822
62693: LD_INT 2
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62701
62699: GO 62757
62701: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62702: LD_ADDR_VAR 0 9
62706: PUSH
62707: LD_VAR 0 17
62711: PUSH
62712: LD_VAR 0 18
62716: PUSH
62717: LD_VAR 0 19
62721: PUSH
62722: LD_VAR 0 20
62726: PUSH
62727: LD_VAR 0 21
62731: PUSH
62732: LD_VAR 0 22
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: PUSH
62745: LD_VAR 0 4
62749: PUSH
62750: LD_INT 1
62752: PLUS
62753: ARRAY
62754: ST_TO_ADDR
62755: GO 62822
62757: LD_INT 3
62759: DOUBLE
62760: EQUAL
62761: IFTRUE 62765
62763: GO 62821
62765: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62766: LD_ADDR_VAR 0 9
62770: PUSH
62771: LD_VAR 0 23
62775: PUSH
62776: LD_VAR 0 24
62780: PUSH
62781: LD_VAR 0 25
62785: PUSH
62786: LD_VAR 0 26
62790: PUSH
62791: LD_VAR 0 27
62795: PUSH
62796: LD_VAR 0 28
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: PUSH
62809: LD_VAR 0 4
62813: PUSH
62814: LD_INT 1
62816: PLUS
62817: ARRAY
62818: ST_TO_ADDR
62819: GO 62822
62821: POP
62822: GO 63377
62824: LD_INT 2
62826: DOUBLE
62827: EQUAL
62828: IFTRUE 62838
62830: LD_INT 3
62832: DOUBLE
62833: EQUAL
62834: IFTRUE 62838
62836: GO 62894
62838: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62839: LD_ADDR_VAR 0 9
62843: PUSH
62844: LD_VAR 0 29
62848: PUSH
62849: LD_VAR 0 30
62853: PUSH
62854: LD_VAR 0 31
62858: PUSH
62859: LD_VAR 0 32
62863: PUSH
62864: LD_VAR 0 33
62868: PUSH
62869: LD_VAR 0 34
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: PUSH
62882: LD_VAR 0 4
62886: PUSH
62887: LD_INT 1
62889: PLUS
62890: ARRAY
62891: ST_TO_ADDR
62892: GO 63377
62894: LD_INT 16
62896: DOUBLE
62897: EQUAL
62898: IFTRUE 62956
62900: LD_INT 17
62902: DOUBLE
62903: EQUAL
62904: IFTRUE 62956
62906: LD_INT 18
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62956
62912: LD_INT 19
62914: DOUBLE
62915: EQUAL
62916: IFTRUE 62956
62918: LD_INT 22
62920: DOUBLE
62921: EQUAL
62922: IFTRUE 62956
62924: LD_INT 20
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62956
62930: LD_INT 21
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62956
62936: LD_INT 23
62938: DOUBLE
62939: EQUAL
62940: IFTRUE 62956
62942: LD_INT 24
62944: DOUBLE
62945: EQUAL
62946: IFTRUE 62956
62948: LD_INT 25
62950: DOUBLE
62951: EQUAL
62952: IFTRUE 62956
62954: GO 63012
62956: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62957: LD_ADDR_VAR 0 9
62961: PUSH
62962: LD_VAR 0 35
62966: PUSH
62967: LD_VAR 0 36
62971: PUSH
62972: LD_VAR 0 37
62976: PUSH
62977: LD_VAR 0 38
62981: PUSH
62982: LD_VAR 0 39
62986: PUSH
62987: LD_VAR 0 40
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: PUSH
63000: LD_VAR 0 4
63004: PUSH
63005: LD_INT 1
63007: PLUS
63008: ARRAY
63009: ST_TO_ADDR
63010: GO 63377
63012: LD_INT 6
63014: DOUBLE
63015: EQUAL
63016: IFTRUE 63068
63018: LD_INT 7
63020: DOUBLE
63021: EQUAL
63022: IFTRUE 63068
63024: LD_INT 8
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63068
63030: LD_INT 13
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63068
63036: LD_INT 12
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63068
63042: LD_INT 15
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63068
63048: LD_INT 11
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63068
63054: LD_INT 14
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63068
63060: LD_INT 10
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63068
63066: GO 63124
63068: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63069: LD_ADDR_VAR 0 9
63073: PUSH
63074: LD_VAR 0 41
63078: PUSH
63079: LD_VAR 0 42
63083: PUSH
63084: LD_VAR 0 43
63088: PUSH
63089: LD_VAR 0 44
63093: PUSH
63094: LD_VAR 0 45
63098: PUSH
63099: LD_VAR 0 46
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: PUSH
63112: LD_VAR 0 4
63116: PUSH
63117: LD_INT 1
63119: PLUS
63120: ARRAY
63121: ST_TO_ADDR
63122: GO 63377
63124: LD_INT 36
63126: DOUBLE
63127: EQUAL
63128: IFTRUE 63132
63130: GO 63188
63132: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63133: LD_ADDR_VAR 0 9
63137: PUSH
63138: LD_VAR 0 47
63142: PUSH
63143: LD_VAR 0 48
63147: PUSH
63148: LD_VAR 0 49
63152: PUSH
63153: LD_VAR 0 50
63157: PUSH
63158: LD_VAR 0 51
63162: PUSH
63163: LD_VAR 0 52
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 4
63180: PUSH
63181: LD_INT 1
63183: PLUS
63184: ARRAY
63185: ST_TO_ADDR
63186: GO 63377
63188: LD_INT 4
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63214
63194: LD_INT 5
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63214
63200: LD_INT 34
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63214
63206: LD_INT 37
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63214
63212: GO 63270
63214: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63215: LD_ADDR_VAR 0 9
63219: PUSH
63220: LD_VAR 0 53
63224: PUSH
63225: LD_VAR 0 54
63229: PUSH
63230: LD_VAR 0 55
63234: PUSH
63235: LD_VAR 0 56
63239: PUSH
63240: LD_VAR 0 57
63244: PUSH
63245: LD_VAR 0 58
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 4
63262: PUSH
63263: LD_INT 1
63265: PLUS
63266: ARRAY
63267: ST_TO_ADDR
63268: GO 63377
63270: LD_INT 31
63272: DOUBLE
63273: EQUAL
63274: IFTRUE 63320
63276: LD_INT 32
63278: DOUBLE
63279: EQUAL
63280: IFTRUE 63320
63282: LD_INT 33
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63320
63288: LD_INT 27
63290: DOUBLE
63291: EQUAL
63292: IFTRUE 63320
63294: LD_INT 26
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63320
63300: LD_INT 28
63302: DOUBLE
63303: EQUAL
63304: IFTRUE 63320
63306: LD_INT 29
63308: DOUBLE
63309: EQUAL
63310: IFTRUE 63320
63312: LD_INT 30
63314: DOUBLE
63315: EQUAL
63316: IFTRUE 63320
63318: GO 63376
63320: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63321: LD_ADDR_VAR 0 9
63325: PUSH
63326: LD_VAR 0 59
63330: PUSH
63331: LD_VAR 0 60
63335: PUSH
63336: LD_VAR 0 61
63340: PUSH
63341: LD_VAR 0 62
63345: PUSH
63346: LD_VAR 0 63
63350: PUSH
63351: LD_VAR 0 64
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: PUSH
63364: LD_VAR 0 4
63368: PUSH
63369: LD_INT 1
63371: PLUS
63372: ARRAY
63373: ST_TO_ADDR
63374: GO 63377
63376: POP
// temp_list2 = [ ] ;
63377: LD_ADDR_VAR 0 10
63381: PUSH
63382: EMPTY
63383: ST_TO_ADDR
// for i in temp_list do
63384: LD_ADDR_VAR 0 8
63388: PUSH
63389: LD_VAR 0 9
63393: PUSH
63394: FOR_IN
63395: IFFALSE 63447
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63397: LD_ADDR_VAR 0 10
63401: PUSH
63402: LD_VAR 0 10
63406: PUSH
63407: LD_VAR 0 8
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PUSH
63416: LD_VAR 0 2
63420: PLUS
63421: PUSH
63422: LD_VAR 0 8
63426: PUSH
63427: LD_INT 2
63429: ARRAY
63430: PUSH
63431: LD_VAR 0 3
63435: PLUS
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: ADD
63444: ST_TO_ADDR
63445: GO 63394
63447: POP
63448: POP
// result = temp_list2 ;
63449: LD_ADDR_VAR 0 7
63453: PUSH
63454: LD_VAR 0 10
63458: ST_TO_ADDR
// end ;
63459: LD_VAR 0 7
63463: RET
// export function EnemyInRange ( unit , dist ) ; begin
63464: LD_INT 0
63466: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63467: LD_ADDR_VAR 0 3
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 255
63481: PPUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: CALL_OW 250
63491: PPUSH
63492: LD_VAR 0 1
63496: PPUSH
63497: CALL_OW 251
63501: PPUSH
63502: LD_VAR 0 2
63506: PPUSH
63507: CALL 36860 0 4
63511: PUSH
63512: LD_INT 4
63514: ARRAY
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 3
63520: RET
// export function PlayerSeeMe ( unit ) ; begin
63521: LD_INT 0
63523: PPUSH
// result := See ( your_side , unit ) ;
63524: LD_ADDR_VAR 0 2
63528: PUSH
63529: LD_OWVAR 2
63533: PPUSH
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 292
63543: ST_TO_ADDR
// end ;
63544: LD_VAR 0 2
63548: RET
// export function ReverseDir ( unit ) ; begin
63549: LD_INT 0
63551: PPUSH
// if not unit then
63552: LD_VAR 0 1
63556: NOT
63557: IFFALSE 63561
// exit ;
63559: GO 63584
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63561: LD_ADDR_VAR 0 2
63565: PUSH
63566: LD_VAR 0 1
63570: PPUSH
63571: CALL_OW 254
63575: PUSH
63576: LD_INT 3
63578: PLUS
63579: PUSH
63580: LD_INT 6
63582: MOD
63583: ST_TO_ADDR
// end ;
63584: LD_VAR 0 2
63588: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63589: LD_INT 0
63591: PPUSH
63592: PPUSH
63593: PPUSH
63594: PPUSH
63595: PPUSH
// if not hexes then
63596: LD_VAR 0 2
63600: NOT
63601: IFFALSE 63605
// exit ;
63603: GO 63753
// dist := 9999 ;
63605: LD_ADDR_VAR 0 5
63609: PUSH
63610: LD_INT 9999
63612: ST_TO_ADDR
// for i = 1 to hexes do
63613: LD_ADDR_VAR 0 4
63617: PUSH
63618: DOUBLE
63619: LD_INT 1
63621: DEC
63622: ST_TO_ADDR
63623: LD_VAR 0 2
63627: PUSH
63628: FOR_TO
63629: IFFALSE 63741
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63631: LD_VAR 0 1
63635: PPUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_VAR 0 4
63645: ARRAY
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: PPUSH
63651: LD_VAR 0 2
63655: PUSH
63656: LD_VAR 0 4
63660: ARRAY
63661: PUSH
63662: LD_INT 2
63664: ARRAY
63665: PPUSH
63666: CALL_OW 297
63670: PUSH
63671: LD_VAR 0 5
63675: LESS
63676: IFFALSE 63739
// begin hex := hexes [ i ] ;
63678: LD_ADDR_VAR 0 7
63682: PUSH
63683: LD_VAR 0 2
63687: PUSH
63688: LD_VAR 0 4
63692: ARRAY
63693: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_VAR 0 1
63703: PPUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_VAR 0 4
63713: ARRAY
63714: PUSH
63715: LD_INT 1
63717: ARRAY
63718: PPUSH
63719: LD_VAR 0 2
63723: PUSH
63724: LD_VAR 0 4
63728: ARRAY
63729: PUSH
63730: LD_INT 2
63732: ARRAY
63733: PPUSH
63734: CALL_OW 297
63738: ST_TO_ADDR
// end ; end ;
63739: GO 63628
63741: POP
63742: POP
// result := hex ;
63743: LD_ADDR_VAR 0 3
63747: PUSH
63748: LD_VAR 0 7
63752: ST_TO_ADDR
// end ;
63753: LD_VAR 0 3
63757: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63758: LD_INT 0
63760: PPUSH
63761: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63762: LD_VAR 0 1
63766: NOT
63767: PUSH
63768: LD_VAR 0 1
63772: PUSH
63773: LD_INT 21
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 23
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PPUSH
63797: CALL_OW 69
63801: IN
63802: NOT
63803: OR
63804: IFFALSE 63808
// exit ;
63806: GO 63855
// for i = 1 to 3 do
63808: LD_ADDR_VAR 0 3
63812: PUSH
63813: DOUBLE
63814: LD_INT 1
63816: DEC
63817: ST_TO_ADDR
63818: LD_INT 3
63820: PUSH
63821: FOR_TO
63822: IFFALSE 63853
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63824: LD_VAR 0 1
63828: PPUSH
63829: CALL_OW 250
63833: PPUSH
63834: LD_VAR 0 1
63838: PPUSH
63839: CALL_OW 251
63843: PPUSH
63844: LD_INT 1
63846: PPUSH
63847: CALL_OW 453
63851: GO 63821
63853: POP
63854: POP
// end ;
63855: LD_VAR 0 2
63859: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63860: LD_INT 0
63862: PPUSH
63863: PPUSH
63864: PPUSH
63865: PPUSH
63866: PPUSH
63867: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63868: LD_VAR 0 1
63872: NOT
63873: PUSH
63874: LD_VAR 0 2
63878: NOT
63879: OR
63880: PUSH
63881: LD_VAR 0 1
63885: PPUSH
63886: CALL_OW 314
63890: OR
63891: IFFALSE 63895
// exit ;
63893: GO 64336
// x := GetX ( enemy_unit ) ;
63895: LD_ADDR_VAR 0 7
63899: PUSH
63900: LD_VAR 0 2
63904: PPUSH
63905: CALL_OW 250
63909: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63910: LD_ADDR_VAR 0 8
63914: PUSH
63915: LD_VAR 0 2
63919: PPUSH
63920: CALL_OW 251
63924: ST_TO_ADDR
// if not x or not y then
63925: LD_VAR 0 7
63929: NOT
63930: PUSH
63931: LD_VAR 0 8
63935: NOT
63936: OR
63937: IFFALSE 63941
// exit ;
63939: GO 64336
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63941: LD_ADDR_VAR 0 6
63945: PUSH
63946: LD_VAR 0 7
63950: PPUSH
63951: LD_INT 0
63953: PPUSH
63954: LD_INT 4
63956: PPUSH
63957: CALL_OW 272
63961: PUSH
63962: LD_VAR 0 8
63966: PPUSH
63967: LD_INT 0
63969: PPUSH
63970: LD_INT 4
63972: PPUSH
63973: CALL_OW 273
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_VAR 0 7
63986: PPUSH
63987: LD_INT 1
63989: PPUSH
63990: LD_INT 4
63992: PPUSH
63993: CALL_OW 272
63997: PUSH
63998: LD_VAR 0 8
64002: PPUSH
64003: LD_INT 1
64005: PPUSH
64006: LD_INT 4
64008: PPUSH
64009: CALL_OW 273
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_VAR 0 7
64022: PPUSH
64023: LD_INT 2
64025: PPUSH
64026: LD_INT 4
64028: PPUSH
64029: CALL_OW 272
64033: PUSH
64034: LD_VAR 0 8
64038: PPUSH
64039: LD_INT 2
64041: PPUSH
64042: LD_INT 4
64044: PPUSH
64045: CALL_OW 273
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 7
64058: PPUSH
64059: LD_INT 3
64061: PPUSH
64062: LD_INT 4
64064: PPUSH
64065: CALL_OW 272
64069: PUSH
64070: LD_VAR 0 8
64074: PPUSH
64075: LD_INT 3
64077: PPUSH
64078: LD_INT 4
64080: PPUSH
64081: CALL_OW 273
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 7
64094: PPUSH
64095: LD_INT 4
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL_OW 272
64105: PUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_INT 4
64113: PPUSH
64114: LD_INT 4
64116: PPUSH
64117: CALL_OW 273
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_VAR 0 7
64130: PPUSH
64131: LD_INT 5
64133: PPUSH
64134: LD_INT 4
64136: PPUSH
64137: CALL_OW 272
64141: PUSH
64142: LD_VAR 0 8
64146: PPUSH
64147: LD_INT 5
64149: PPUSH
64150: LD_INT 4
64152: PPUSH
64153: CALL_OW 273
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// for i = tmp downto 1 do
64170: LD_ADDR_VAR 0 4
64174: PUSH
64175: DOUBLE
64176: LD_VAR 0 6
64180: INC
64181: ST_TO_ADDR
64182: LD_INT 1
64184: PUSH
64185: FOR_DOWNTO
64186: IFFALSE 64287
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64188: LD_VAR 0 6
64192: PUSH
64193: LD_VAR 0 4
64197: ARRAY
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PPUSH
64203: LD_VAR 0 6
64207: PUSH
64208: LD_VAR 0 4
64212: ARRAY
64213: PUSH
64214: LD_INT 2
64216: ARRAY
64217: PPUSH
64218: CALL_OW 488
64222: NOT
64223: PUSH
64224: LD_VAR 0 6
64228: PUSH
64229: LD_VAR 0 4
64233: ARRAY
64234: PUSH
64235: LD_INT 1
64237: ARRAY
64238: PPUSH
64239: LD_VAR 0 6
64243: PUSH
64244: LD_VAR 0 4
64248: ARRAY
64249: PUSH
64250: LD_INT 2
64252: ARRAY
64253: PPUSH
64254: CALL_OW 428
64258: PUSH
64259: LD_INT 0
64261: NONEQUAL
64262: OR
64263: IFFALSE 64285
// tmp := Delete ( tmp , i ) ;
64265: LD_ADDR_VAR 0 6
64269: PUSH
64270: LD_VAR 0 6
64274: PPUSH
64275: LD_VAR 0 4
64279: PPUSH
64280: CALL_OW 3
64284: ST_TO_ADDR
64285: GO 64185
64287: POP
64288: POP
// j := GetClosestHex ( unit , tmp ) ;
64289: LD_ADDR_VAR 0 5
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: LD_VAR 0 6
64303: PPUSH
64304: CALL 63589 0 2
64308: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_VAR 0 5
64318: PUSH
64319: LD_INT 1
64321: ARRAY
64322: PPUSH
64323: LD_VAR 0 5
64327: PUSH
64328: LD_INT 2
64330: ARRAY
64331: PPUSH
64332: CALL_OW 111
// end ;
64336: LD_VAR 0 3
64340: RET
// export function PrepareApemanSoldier ( ) ; begin
64341: LD_INT 0
64343: PPUSH
// uc_nation := 0 ;
64344: LD_ADDR_OWVAR 21
64348: PUSH
64349: LD_INT 0
64351: ST_TO_ADDR
// hc_sex := sex_male ;
64352: LD_ADDR_OWVAR 27
64356: PUSH
64357: LD_INT 1
64359: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64360: LD_ADDR_OWVAR 28
64364: PUSH
64365: LD_INT 15
64367: ST_TO_ADDR
// hc_gallery :=  ;
64368: LD_ADDR_OWVAR 33
64372: PUSH
64373: LD_STRING 
64375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64376: LD_ADDR_OWVAR 31
64380: PUSH
64381: LD_INT 0
64383: PPUSH
64384: LD_INT 3
64386: PPUSH
64387: CALL_OW 12
64391: PUSH
64392: LD_INT 0
64394: PPUSH
64395: LD_INT 3
64397: PPUSH
64398: CALL_OW 12
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// end ;
64415: LD_VAR 0 1
64419: RET
// export function PrepareApemanEngineer ( ) ; begin
64420: LD_INT 0
64422: PPUSH
// uc_nation := 0 ;
64423: LD_ADDR_OWVAR 21
64427: PUSH
64428: LD_INT 0
64430: ST_TO_ADDR
// hc_sex := sex_male ;
64431: LD_ADDR_OWVAR 27
64435: PUSH
64436: LD_INT 1
64438: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64439: LD_ADDR_OWVAR 28
64443: PUSH
64444: LD_INT 16
64446: ST_TO_ADDR
// hc_gallery :=  ;
64447: LD_ADDR_OWVAR 33
64451: PUSH
64452: LD_STRING 
64454: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64455: LD_ADDR_OWVAR 31
64459: PUSH
64460: LD_INT 0
64462: PPUSH
64463: LD_INT 3
64465: PPUSH
64466: CALL_OW 12
64470: PUSH
64471: LD_INT 0
64473: PPUSH
64474: LD_INT 3
64476: PPUSH
64477: CALL_OW 12
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// end ;
64494: LD_VAR 0 1
64498: RET
// export function PrepareApeman ( agressivity ) ; begin
64499: LD_INT 0
64501: PPUSH
// uc_side := 0 ;
64502: LD_ADDR_OWVAR 20
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// uc_nation := 0 ;
64510: LD_ADDR_OWVAR 21
64514: PUSH
64515: LD_INT 0
64517: ST_TO_ADDR
// hc_sex := sex_male ;
64518: LD_ADDR_OWVAR 27
64522: PUSH
64523: LD_INT 1
64525: ST_TO_ADDR
// hc_class := class_apeman ;
64526: LD_ADDR_OWVAR 28
64530: PUSH
64531: LD_INT 12
64533: ST_TO_ADDR
// hc_gallery :=  ;
64534: LD_ADDR_OWVAR 33
64538: PUSH
64539: LD_STRING 
64541: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64542: LD_ADDR_OWVAR 35
64546: PUSH
64547: LD_VAR 0 1
64551: NEG
64552: PPUSH
64553: LD_VAR 0 1
64557: PPUSH
64558: CALL_OW 12
64562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64563: LD_ADDR_OWVAR 31
64567: PUSH
64568: LD_INT 0
64570: PPUSH
64571: LD_INT 3
64573: PPUSH
64574: CALL_OW 12
64578: PUSH
64579: LD_INT 0
64581: PPUSH
64582: LD_INT 3
64584: PPUSH
64585: CALL_OW 12
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 2
64606: RET
// export function PrepareTiger ( agressivity ) ; begin
64607: LD_INT 0
64609: PPUSH
// uc_side := 0 ;
64610: LD_ADDR_OWVAR 20
64614: PUSH
64615: LD_INT 0
64617: ST_TO_ADDR
// uc_nation := 0 ;
64618: LD_ADDR_OWVAR 21
64622: PUSH
64623: LD_INT 0
64625: ST_TO_ADDR
// hc_class := class_tiger ;
64626: LD_ADDR_OWVAR 28
64630: PUSH
64631: LD_INT 14
64633: ST_TO_ADDR
// hc_gallery :=  ;
64634: LD_ADDR_OWVAR 33
64638: PUSH
64639: LD_STRING 
64641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64642: LD_ADDR_OWVAR 35
64646: PUSH
64647: LD_VAR 0 1
64651: NEG
64652: PPUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL_OW 12
64662: ST_TO_ADDR
// end ;
64663: LD_VAR 0 2
64667: RET
// export function PrepareEnchidna ( ) ; begin
64668: LD_INT 0
64670: PPUSH
// uc_side := 0 ;
64671: LD_ADDR_OWVAR 20
64675: PUSH
64676: LD_INT 0
64678: ST_TO_ADDR
// uc_nation := 0 ;
64679: LD_ADDR_OWVAR 21
64683: PUSH
64684: LD_INT 0
64686: ST_TO_ADDR
// hc_class := class_baggie ;
64687: LD_ADDR_OWVAR 28
64691: PUSH
64692: LD_INT 13
64694: ST_TO_ADDR
// hc_gallery :=  ;
64695: LD_ADDR_OWVAR 33
64699: PUSH
64700: LD_STRING 
64702: ST_TO_ADDR
// end ;
64703: LD_VAR 0 1
64707: RET
// export function PrepareFrog ( ) ; begin
64708: LD_INT 0
64710: PPUSH
// uc_side := 0 ;
64711: LD_ADDR_OWVAR 20
64715: PUSH
64716: LD_INT 0
64718: ST_TO_ADDR
// uc_nation := 0 ;
64719: LD_ADDR_OWVAR 21
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// hc_class := class_frog ;
64727: LD_ADDR_OWVAR 28
64731: PUSH
64732: LD_INT 19
64734: ST_TO_ADDR
// hc_gallery :=  ;
64735: LD_ADDR_OWVAR 33
64739: PUSH
64740: LD_STRING 
64742: ST_TO_ADDR
// end ;
64743: LD_VAR 0 1
64747: RET
// export function PrepareFish ( ) ; begin
64748: LD_INT 0
64750: PPUSH
// uc_side := 0 ;
64751: LD_ADDR_OWVAR 20
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// uc_nation := 0 ;
64759: LD_ADDR_OWVAR 21
64763: PUSH
64764: LD_INT 0
64766: ST_TO_ADDR
// hc_class := class_fish ;
64767: LD_ADDR_OWVAR 28
64771: PUSH
64772: LD_INT 20
64774: ST_TO_ADDR
// hc_gallery :=  ;
64775: LD_ADDR_OWVAR 33
64779: PUSH
64780: LD_STRING 
64782: ST_TO_ADDR
// end ;
64783: LD_VAR 0 1
64787: RET
// export function PrepareBird ( ) ; begin
64788: LD_INT 0
64790: PPUSH
// uc_side := 0 ;
64791: LD_ADDR_OWVAR 20
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// uc_nation := 0 ;
64799: LD_ADDR_OWVAR 21
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// hc_class := class_phororhacos ;
64807: LD_ADDR_OWVAR 28
64811: PUSH
64812: LD_INT 18
64814: ST_TO_ADDR
// hc_gallery :=  ;
64815: LD_ADDR_OWVAR 33
64819: PUSH
64820: LD_STRING 
64822: ST_TO_ADDR
// end ;
64823: LD_VAR 0 1
64827: RET
// export function PrepareHorse ( ) ; begin
64828: LD_INT 0
64830: PPUSH
// uc_side := 0 ;
64831: LD_ADDR_OWVAR 20
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// uc_nation := 0 ;
64839: LD_ADDR_OWVAR 21
64843: PUSH
64844: LD_INT 0
64846: ST_TO_ADDR
// hc_class := 21 ;
64847: LD_ADDR_OWVAR 28
64851: PUSH
64852: LD_INT 21
64854: ST_TO_ADDR
// hc_gallery :=  ;
64855: LD_ADDR_OWVAR 33
64859: PUSH
64860: LD_STRING 
64862: ST_TO_ADDR
// end ;
64863: LD_VAR 0 1
64867: RET
// export function PrepareMastodont ( ) ; begin
64868: LD_INT 0
64870: PPUSH
// uc_side := 0 ;
64871: LD_ADDR_OWVAR 20
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// uc_nation := 0 ;
64879: LD_ADDR_OWVAR 21
64883: PUSH
64884: LD_INT 0
64886: ST_TO_ADDR
// vc_chassis := 31 ;
64887: LD_ADDR_OWVAR 37
64891: PUSH
64892: LD_INT 31
64894: ST_TO_ADDR
// vc_control := control_rider ;
64895: LD_ADDR_OWVAR 38
64899: PUSH
64900: LD_INT 4
64902: ST_TO_ADDR
// end ;
64903: LD_VAR 0 1
64907: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64908: LD_INT 0
64910: PPUSH
64911: PPUSH
64912: PPUSH
// uc_side = 0 ;
64913: LD_ADDR_OWVAR 20
64917: PUSH
64918: LD_INT 0
64920: ST_TO_ADDR
// uc_nation = 0 ;
64921: LD_ADDR_OWVAR 21
64925: PUSH
64926: LD_INT 0
64928: ST_TO_ADDR
// InitHc_All ( ) ;
64929: CALL_OW 584
// InitVc ;
64933: CALL_OW 20
// if mastodonts then
64937: LD_VAR 0 6
64941: IFFALSE 65008
// for i = 1 to mastodonts do
64943: LD_ADDR_VAR 0 11
64947: PUSH
64948: DOUBLE
64949: LD_INT 1
64951: DEC
64952: ST_TO_ADDR
64953: LD_VAR 0 6
64957: PUSH
64958: FOR_TO
64959: IFFALSE 65006
// begin vc_chassis := 31 ;
64961: LD_ADDR_OWVAR 37
64965: PUSH
64966: LD_INT 31
64968: ST_TO_ADDR
// vc_control := control_rider ;
64969: LD_ADDR_OWVAR 38
64973: PUSH
64974: LD_INT 4
64976: ST_TO_ADDR
// animal := CreateVehicle ;
64977: LD_ADDR_VAR 0 12
64981: PUSH
64982: CALL_OW 45
64986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64987: LD_VAR 0 12
64991: PPUSH
64992: LD_VAR 0 8
64996: PPUSH
64997: LD_INT 0
64999: PPUSH
65000: CALL 67143 0 3
// end ;
65004: GO 64958
65006: POP
65007: POP
// if horses then
65008: LD_VAR 0 5
65012: IFFALSE 65079
// for i = 1 to horses do
65014: LD_ADDR_VAR 0 11
65018: PUSH
65019: DOUBLE
65020: LD_INT 1
65022: DEC
65023: ST_TO_ADDR
65024: LD_VAR 0 5
65028: PUSH
65029: FOR_TO
65030: IFFALSE 65077
// begin hc_class := 21 ;
65032: LD_ADDR_OWVAR 28
65036: PUSH
65037: LD_INT 21
65039: ST_TO_ADDR
// hc_gallery :=  ;
65040: LD_ADDR_OWVAR 33
65044: PUSH
65045: LD_STRING 
65047: ST_TO_ADDR
// animal := CreateHuman ;
65048: LD_ADDR_VAR 0 12
65052: PUSH
65053: CALL_OW 44
65057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65058: LD_VAR 0 12
65062: PPUSH
65063: LD_VAR 0 8
65067: PPUSH
65068: LD_INT 0
65070: PPUSH
65071: CALL 67143 0 3
// end ;
65075: GO 65029
65077: POP
65078: POP
// if birds then
65079: LD_VAR 0 1
65083: IFFALSE 65150
// for i = 1 to birds do
65085: LD_ADDR_VAR 0 11
65089: PUSH
65090: DOUBLE
65091: LD_INT 1
65093: DEC
65094: ST_TO_ADDR
65095: LD_VAR 0 1
65099: PUSH
65100: FOR_TO
65101: IFFALSE 65148
// begin hc_class = 18 ;
65103: LD_ADDR_OWVAR 28
65107: PUSH
65108: LD_INT 18
65110: ST_TO_ADDR
// hc_gallery =  ;
65111: LD_ADDR_OWVAR 33
65115: PUSH
65116: LD_STRING 
65118: ST_TO_ADDR
// animal := CreateHuman ;
65119: LD_ADDR_VAR 0 12
65123: PUSH
65124: CALL_OW 44
65128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65129: LD_VAR 0 12
65133: PPUSH
65134: LD_VAR 0 8
65138: PPUSH
65139: LD_INT 0
65141: PPUSH
65142: CALL 67143 0 3
// end ;
65146: GO 65100
65148: POP
65149: POP
// if tigers then
65150: LD_VAR 0 2
65154: IFFALSE 65238
// for i = 1 to tigers do
65156: LD_ADDR_VAR 0 11
65160: PUSH
65161: DOUBLE
65162: LD_INT 1
65164: DEC
65165: ST_TO_ADDR
65166: LD_VAR 0 2
65170: PUSH
65171: FOR_TO
65172: IFFALSE 65236
// begin hc_class = class_tiger ;
65174: LD_ADDR_OWVAR 28
65178: PUSH
65179: LD_INT 14
65181: ST_TO_ADDR
// hc_gallery =  ;
65182: LD_ADDR_OWVAR 33
65186: PUSH
65187: LD_STRING 
65189: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65190: LD_ADDR_OWVAR 35
65194: PUSH
65195: LD_INT 7
65197: NEG
65198: PPUSH
65199: LD_INT 7
65201: PPUSH
65202: CALL_OW 12
65206: ST_TO_ADDR
// animal := CreateHuman ;
65207: LD_ADDR_VAR 0 12
65211: PUSH
65212: CALL_OW 44
65216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65217: LD_VAR 0 12
65221: PPUSH
65222: LD_VAR 0 8
65226: PPUSH
65227: LD_INT 0
65229: PPUSH
65230: CALL 67143 0 3
// end ;
65234: GO 65171
65236: POP
65237: POP
// if apemans then
65238: LD_VAR 0 3
65242: IFFALSE 65365
// for i = 1 to apemans do
65244: LD_ADDR_VAR 0 11
65248: PUSH
65249: DOUBLE
65250: LD_INT 1
65252: DEC
65253: ST_TO_ADDR
65254: LD_VAR 0 3
65258: PUSH
65259: FOR_TO
65260: IFFALSE 65363
// begin hc_class = class_apeman ;
65262: LD_ADDR_OWVAR 28
65266: PUSH
65267: LD_INT 12
65269: ST_TO_ADDR
// hc_gallery =  ;
65270: LD_ADDR_OWVAR 33
65274: PUSH
65275: LD_STRING 
65277: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65278: LD_ADDR_OWVAR 35
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PPUSH
65287: LD_INT 2
65289: PPUSH
65290: CALL_OW 12
65294: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65295: LD_ADDR_OWVAR 31
65299: PUSH
65300: LD_INT 1
65302: PPUSH
65303: LD_INT 3
65305: PPUSH
65306: CALL_OW 12
65310: PUSH
65311: LD_INT 1
65313: PPUSH
65314: LD_INT 3
65316: PPUSH
65317: CALL_OW 12
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// animal := CreateHuman ;
65334: LD_ADDR_VAR 0 12
65338: PUSH
65339: CALL_OW 44
65343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65344: LD_VAR 0 12
65348: PPUSH
65349: LD_VAR 0 8
65353: PPUSH
65354: LD_INT 0
65356: PPUSH
65357: CALL 67143 0 3
// end ;
65361: GO 65259
65363: POP
65364: POP
// if enchidnas then
65365: LD_VAR 0 4
65369: IFFALSE 65436
// for i = 1 to enchidnas do
65371: LD_ADDR_VAR 0 11
65375: PUSH
65376: DOUBLE
65377: LD_INT 1
65379: DEC
65380: ST_TO_ADDR
65381: LD_VAR 0 4
65385: PUSH
65386: FOR_TO
65387: IFFALSE 65434
// begin hc_class = 13 ;
65389: LD_ADDR_OWVAR 28
65393: PUSH
65394: LD_INT 13
65396: ST_TO_ADDR
// hc_gallery =  ;
65397: LD_ADDR_OWVAR 33
65401: PUSH
65402: LD_STRING 
65404: ST_TO_ADDR
// animal := CreateHuman ;
65405: LD_ADDR_VAR 0 12
65409: PUSH
65410: CALL_OW 44
65414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65415: LD_VAR 0 12
65419: PPUSH
65420: LD_VAR 0 8
65424: PPUSH
65425: LD_INT 0
65427: PPUSH
65428: CALL 67143 0 3
// end ;
65432: GO 65386
65434: POP
65435: POP
// if fishes then
65436: LD_VAR 0 7
65440: IFFALSE 65507
// for i = 1 to fishes do
65442: LD_ADDR_VAR 0 11
65446: PUSH
65447: DOUBLE
65448: LD_INT 1
65450: DEC
65451: ST_TO_ADDR
65452: LD_VAR 0 7
65456: PUSH
65457: FOR_TO
65458: IFFALSE 65505
// begin hc_class = 20 ;
65460: LD_ADDR_OWVAR 28
65464: PUSH
65465: LD_INT 20
65467: ST_TO_ADDR
// hc_gallery =  ;
65468: LD_ADDR_OWVAR 33
65472: PUSH
65473: LD_STRING 
65475: ST_TO_ADDR
// animal := CreateHuman ;
65476: LD_ADDR_VAR 0 12
65480: PUSH
65481: CALL_OW 44
65485: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65486: LD_VAR 0 12
65490: PPUSH
65491: LD_VAR 0 9
65495: PPUSH
65496: LD_INT 0
65498: PPUSH
65499: CALL 67143 0 3
// end ;
65503: GO 65457
65505: POP
65506: POP
// end ;
65507: LD_VAR 0 10
65511: RET
// export function WantHeal ( sci , unit ) ; begin
65512: LD_INT 0
65514: PPUSH
// if GetTaskList ( sci ) > 0 then
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 437
65524: PUSH
65525: LD_INT 0
65527: GREATER
65528: IFFALSE 65598
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 437
65539: PUSH
65540: LD_INT 1
65542: ARRAY
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_STRING l
65550: EQUAL
65551: PUSH
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 437
65561: PUSH
65562: LD_INT 1
65564: ARRAY
65565: PUSH
65566: LD_INT 4
65568: ARRAY
65569: PUSH
65570: LD_VAR 0 2
65574: EQUAL
65575: AND
65576: IFFALSE 65588
// result := true else
65578: LD_ADDR_VAR 0 3
65582: PUSH
65583: LD_INT 1
65585: ST_TO_ADDR
65586: GO 65596
// result := false ;
65588: LD_ADDR_VAR 0 3
65592: PUSH
65593: LD_INT 0
65595: ST_TO_ADDR
// end else
65596: GO 65606
// result := false ;
65598: LD_ADDR_VAR 0 3
65602: PUSH
65603: LD_INT 0
65605: ST_TO_ADDR
// end ;
65606: LD_VAR 0 3
65610: RET
// export function HealTarget ( sci ) ; begin
65611: LD_INT 0
65613: PPUSH
// if not sci then
65614: LD_VAR 0 1
65618: NOT
65619: IFFALSE 65623
// exit ;
65621: GO 65688
// result := 0 ;
65623: LD_ADDR_VAR 0 2
65627: PUSH
65628: LD_INT 0
65630: ST_TO_ADDR
// if GetTaskList ( sci ) then
65631: LD_VAR 0 1
65635: PPUSH
65636: CALL_OW 437
65640: IFFALSE 65688
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65642: LD_VAR 0 1
65646: PPUSH
65647: CALL_OW 437
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PUSH
65656: LD_INT 1
65658: ARRAY
65659: PUSH
65660: LD_STRING l
65662: EQUAL
65663: IFFALSE 65688
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65665: LD_ADDR_VAR 0 2
65669: PUSH
65670: LD_VAR 0 1
65674: PPUSH
65675: CALL_OW 437
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: PUSH
65684: LD_INT 4
65686: ARRAY
65687: ST_TO_ADDR
// end ;
65688: LD_VAR 0 2
65692: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65693: LD_INT 0
65695: PPUSH
65696: PPUSH
65697: PPUSH
65698: PPUSH
// if not base_units then
65699: LD_VAR 0 1
65703: NOT
65704: IFFALSE 65708
// exit ;
65706: GO 65795
// result := false ;
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65716: LD_ADDR_VAR 0 5
65720: PUSH
65721: LD_VAR 0 1
65725: PPUSH
65726: LD_INT 21
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PPUSH
65736: CALL_OW 72
65740: ST_TO_ADDR
// if not tmp then
65741: LD_VAR 0 5
65745: NOT
65746: IFFALSE 65750
// exit ;
65748: GO 65795
// for i in tmp do
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: LD_VAR 0 5
65759: PUSH
65760: FOR_IN
65761: IFFALSE 65793
// begin result := EnemyInRange ( i , 22 ) ;
65763: LD_ADDR_VAR 0 2
65767: PUSH
65768: LD_VAR 0 3
65772: PPUSH
65773: LD_INT 22
65775: PPUSH
65776: CALL 63464 0 2
65780: ST_TO_ADDR
// if result then
65781: LD_VAR 0 2
65785: IFFALSE 65791
// exit ;
65787: POP
65788: POP
65789: GO 65795
// end ;
65791: GO 65760
65793: POP
65794: POP
// end ;
65795: LD_VAR 0 2
65799: RET
// export function FilterByTag ( units , tag ) ; begin
65800: LD_INT 0
65802: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65803: LD_ADDR_VAR 0 3
65807: PUSH
65808: LD_VAR 0 1
65812: PPUSH
65813: LD_INT 120
65815: PUSH
65816: LD_VAR 0 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PPUSH
65825: CALL_OW 72
65829: ST_TO_ADDR
// end ;
65830: LD_VAR 0 3
65834: RET
// export function IsDriver ( un ) ; begin
65835: LD_INT 0
65837: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65838: LD_ADDR_VAR 0 2
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: LD_INT 55
65850: PUSH
65851: EMPTY
65852: LIST
65853: PPUSH
65854: CALL_OW 69
65858: IN
65859: ST_TO_ADDR
// end ;
65860: LD_VAR 0 2
65864: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65865: LD_INT 0
65867: PPUSH
65868: PPUSH
// list := [ ] ;
65869: LD_ADDR_VAR 0 5
65873: PUSH
65874: EMPTY
65875: ST_TO_ADDR
// case d of 0 :
65876: LD_VAR 0 3
65880: PUSH
65881: LD_INT 0
65883: DOUBLE
65884: EQUAL
65885: IFTRUE 65889
65887: GO 66022
65889: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65890: LD_ADDR_VAR 0 5
65894: PUSH
65895: LD_VAR 0 1
65899: PUSH
65900: LD_INT 4
65902: MINUS
65903: PUSH
65904: LD_VAR 0 2
65908: PUSH
65909: LD_INT 4
65911: MINUS
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: PUSH
65921: LD_VAR 0 1
65925: PUSH
65926: LD_INT 3
65928: MINUS
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_INT 4
65950: PLUS
65951: PUSH
65952: LD_VAR 0 2
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 3
65972: PLUS
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: LD_INT 3
65981: PLUS
65982: PUSH
65983: LD_INT 5
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 4
66003: PLUS
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// end ; 1 :
66020: GO 66720
66022: LD_INT 1
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66030
66028: GO 66163
66030: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66031: LD_ADDR_VAR 0 5
66035: PUSH
66036: LD_VAR 0 1
66040: PUSH
66041: LD_VAR 0 2
66045: PUSH
66046: LD_INT 4
66048: MINUS
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: PUSH
66058: LD_VAR 0 1
66062: PUSH
66063: LD_INT 3
66065: MINUS
66066: PUSH
66067: LD_VAR 0 2
66071: PUSH
66072: LD_INT 3
66074: MINUS
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: PUSH
66084: LD_VAR 0 1
66088: PUSH
66089: LD_INT 4
66091: MINUS
66092: PUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: LD_VAR 0 1
66110: PUSH
66111: LD_VAR 0 2
66115: PUSH
66116: LD_INT 3
66118: PLUS
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 4
66135: PLUS
66136: PUSH
66137: LD_VAR 0 2
66141: PUSH
66142: LD_INT 4
66144: PLUS
66145: PUSH
66146: LD_INT 5
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: ST_TO_ADDR
// end ; 2 :
66161: GO 66720
66163: LD_INT 2
66165: DOUBLE
66166: EQUAL
66167: IFTRUE 66171
66169: GO 66300
66171: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66172: LD_ADDR_VAR 0 5
66176: PUSH
66177: LD_VAR 0 1
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_INT 3
66189: MINUS
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_INT 4
66206: PLUS
66207: PUSH
66208: LD_VAR 0 2
66212: PUSH
66213: LD_INT 4
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: PUSH
66221: LD_VAR 0 1
66225: PUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_INT 4
66233: PLUS
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_INT 3
66250: MINUS
66251: PUSH
66252: LD_VAR 0 2
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 4
66272: MINUS
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 4
66281: MINUS
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: LIST
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: ST_TO_ADDR
// end ; 3 :
66298: GO 66720
66300: LD_INT 3
66302: DOUBLE
66303: EQUAL
66304: IFTRUE 66308
66306: GO 66441
66308: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66309: LD_ADDR_VAR 0 5
66313: PUSH
66314: LD_VAR 0 1
66318: PUSH
66319: LD_INT 3
66321: PLUS
66322: PUSH
66323: LD_VAR 0 2
66327: PUSH
66328: LD_INT 4
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: LIST
66335: PUSH
66336: LD_VAR 0 1
66340: PUSH
66341: LD_INT 4
66343: PLUS
66344: PUSH
66345: LD_VAR 0 2
66349: PUSH
66350: LD_INT 4
66352: PLUS
66353: PUSH
66354: LD_INT 5
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: PUSH
66362: LD_VAR 0 1
66366: PUSH
66367: LD_INT 4
66369: MINUS
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: LD_VAR 0 2
66393: PUSH
66394: LD_INT 4
66396: MINUS
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: PUSH
66406: LD_VAR 0 1
66410: PUSH
66411: LD_INT 3
66413: MINUS
66414: PUSH
66415: LD_VAR 0 2
66419: PUSH
66420: LD_INT 3
66422: MINUS
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: ST_TO_ADDR
// end ; 4 :
66439: GO 66720
66441: LD_INT 4
66443: DOUBLE
66444: EQUAL
66445: IFTRUE 66449
66447: GO 66582
66449: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66450: LD_ADDR_VAR 0 5
66454: PUSH
66455: LD_VAR 0 1
66459: PUSH
66460: LD_VAR 0 2
66464: PUSH
66465: LD_INT 4
66467: PLUS
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: PUSH
66477: LD_VAR 0 1
66481: PUSH
66482: LD_INT 3
66484: PLUS
66485: PUSH
66486: LD_VAR 0 2
66490: PUSH
66491: LD_INT 3
66493: PLUS
66494: PUSH
66495: LD_INT 5
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: PUSH
66503: LD_VAR 0 1
66507: PUSH
66508: LD_INT 4
66510: PLUS
66511: PUSH
66512: LD_VAR 0 2
66516: PUSH
66517: LD_INT 4
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: LD_VAR 0 1
66529: PUSH
66530: LD_VAR 0 2
66534: PUSH
66535: LD_INT 3
66537: MINUS
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: PUSH
66547: LD_VAR 0 1
66551: PUSH
66552: LD_INT 4
66554: MINUS
66555: PUSH
66556: LD_VAR 0 2
66560: PUSH
66561: LD_INT 4
66563: MINUS
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: ST_TO_ADDR
// end ; 5 :
66580: GO 66720
66582: LD_INT 5
66584: DOUBLE
66585: EQUAL
66586: IFTRUE 66590
66588: GO 66719
66590: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66591: LD_ADDR_VAR 0 5
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_INT 4
66603: MINUS
66604: PUSH
66605: LD_VAR 0 2
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: PUSH
66618: LD_VAR 0 1
66622: PUSH
66623: LD_VAR 0 2
66627: PUSH
66628: LD_INT 4
66630: MINUS
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: PUSH
66640: LD_VAR 0 1
66644: PUSH
66645: LD_INT 4
66647: PLUS
66648: PUSH
66649: LD_VAR 0 2
66653: PUSH
66654: LD_INT 4
66656: PLUS
66657: PUSH
66658: LD_INT 5
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: LD_VAR 0 1
66670: PUSH
66671: LD_INT 3
66673: PLUS
66674: PUSH
66675: LD_VAR 0 2
66679: PUSH
66680: LD_INT 4
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_VAR 0 2
66697: PUSH
66698: LD_INT 3
66700: PLUS
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: LIST
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: ST_TO_ADDR
// end ; end ;
66717: GO 66720
66719: POP
// result := list ;
66720: LD_ADDR_VAR 0 4
66724: PUSH
66725: LD_VAR 0 5
66729: ST_TO_ADDR
// end ;
66730: LD_VAR 0 4
66734: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66735: LD_INT 0
66737: PPUSH
66738: PPUSH
66739: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66740: LD_VAR 0 1
66744: NOT
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: IN
66769: NOT
66770: OR
66771: IFFALSE 66775
// exit ;
66773: GO 66867
// tmp := [ ] ;
66775: LD_ADDR_VAR 0 5
66779: PUSH
66780: EMPTY
66781: ST_TO_ADDR
// for i in units do
66782: LD_ADDR_VAR 0 4
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: FOR_IN
66793: IFFALSE 66836
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66795: LD_ADDR_VAR 0 5
66799: PUSH
66800: LD_VAR 0 5
66804: PPUSH
66805: LD_VAR 0 5
66809: PUSH
66810: LD_INT 1
66812: PLUS
66813: PPUSH
66814: LD_VAR 0 4
66818: PPUSH
66819: LD_VAR 0 2
66823: PPUSH
66824: CALL_OW 259
66828: PPUSH
66829: CALL_OW 2
66833: ST_TO_ADDR
66834: GO 66792
66836: POP
66837: POP
// if not tmp then
66838: LD_VAR 0 5
66842: NOT
66843: IFFALSE 66847
// exit ;
66845: GO 66867
// result := SortListByListDesc ( units , tmp ) ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 1
66856: PPUSH
66857: LD_VAR 0 5
66861: PPUSH
66862: CALL_OW 77
66866: ST_TO_ADDR
// end ;
66867: LD_VAR 0 3
66871: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66872: LD_INT 0
66874: PPUSH
66875: PPUSH
66876: PPUSH
// result := false ;
66877: LD_ADDR_VAR 0 3
66881: PUSH
66882: LD_INT 0
66884: ST_TO_ADDR
// x := GetX ( building ) ;
66885: LD_ADDR_VAR 0 4
66889: PUSH
66890: LD_VAR 0 2
66894: PPUSH
66895: CALL_OW 250
66899: ST_TO_ADDR
// y := GetY ( building ) ;
66900: LD_ADDR_VAR 0 5
66904: PUSH
66905: LD_VAR 0 2
66909: PPUSH
66910: CALL_OW 251
66914: ST_TO_ADDR
// if not building or not x or not y then
66915: LD_VAR 0 2
66919: NOT
66920: PUSH
66921: LD_VAR 0 4
66925: NOT
66926: OR
66927: PUSH
66928: LD_VAR 0 5
66932: NOT
66933: OR
66934: IFFALSE 66938
// exit ;
66936: GO 67030
// if GetTaskList ( unit ) then
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 437
66947: IFFALSE 67030
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66949: LD_STRING e
66951: PUSH
66952: LD_VAR 0 1
66956: PPUSH
66957: CALL_OW 437
66961: PUSH
66962: LD_INT 1
66964: ARRAY
66965: PUSH
66966: LD_INT 1
66968: ARRAY
66969: EQUAL
66970: PUSH
66971: LD_VAR 0 4
66975: PUSH
66976: LD_VAR 0 1
66980: PPUSH
66981: CALL_OW 437
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: PUSH
66990: LD_INT 2
66992: ARRAY
66993: EQUAL
66994: AND
66995: PUSH
66996: LD_VAR 0 5
67000: PUSH
67001: LD_VAR 0 1
67005: PPUSH
67006: CALL_OW 437
67010: PUSH
67011: LD_INT 1
67013: ARRAY
67014: PUSH
67015: LD_INT 3
67017: ARRAY
67018: EQUAL
67019: AND
67020: IFFALSE 67030
// result := true end ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_INT 1
67029: ST_TO_ADDR
// end ;
67030: LD_VAR 0 3
67034: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67035: LD_INT 0
67037: PPUSH
// result := false ;
67038: LD_ADDR_VAR 0 4
67042: PUSH
67043: LD_INT 0
67045: ST_TO_ADDR
// if GetTaskList ( unit ) then
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 437
67055: IFFALSE 67138
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67057: LD_STRING M
67059: PUSH
67060: LD_VAR 0 1
67064: PPUSH
67065: CALL_OW 437
67069: PUSH
67070: LD_INT 1
67072: ARRAY
67073: PUSH
67074: LD_INT 1
67076: ARRAY
67077: EQUAL
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_VAR 0 1
67088: PPUSH
67089: CALL_OW 437
67093: PUSH
67094: LD_INT 1
67096: ARRAY
67097: PUSH
67098: LD_INT 2
67100: ARRAY
67101: EQUAL
67102: AND
67103: PUSH
67104: LD_VAR 0 3
67108: PUSH
67109: LD_VAR 0 1
67113: PPUSH
67114: CALL_OW 437
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PUSH
67123: LD_INT 3
67125: ARRAY
67126: EQUAL
67127: AND
67128: IFFALSE 67138
// result := true ;
67130: LD_ADDR_VAR 0 4
67134: PUSH
67135: LD_INT 1
67137: ST_TO_ADDR
// end ; end ;
67138: LD_VAR 0 4
67142: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67143: LD_INT 0
67145: PPUSH
67146: PPUSH
67147: PPUSH
67148: PPUSH
// if not unit or not area then
67149: LD_VAR 0 1
67153: NOT
67154: PUSH
67155: LD_VAR 0 2
67159: NOT
67160: OR
67161: IFFALSE 67165
// exit ;
67163: GO 67329
// tmp := AreaToList ( area , i ) ;
67165: LD_ADDR_VAR 0 6
67169: PUSH
67170: LD_VAR 0 2
67174: PPUSH
67175: LD_VAR 0 5
67179: PPUSH
67180: CALL_OW 517
67184: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67185: LD_ADDR_VAR 0 5
67189: PUSH
67190: DOUBLE
67191: LD_INT 1
67193: DEC
67194: ST_TO_ADDR
67195: LD_VAR 0 6
67199: PUSH
67200: LD_INT 1
67202: ARRAY
67203: PUSH
67204: FOR_TO
67205: IFFALSE 67327
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67207: LD_ADDR_VAR 0 7
67211: PUSH
67212: LD_VAR 0 6
67216: PUSH
67217: LD_INT 1
67219: ARRAY
67220: PUSH
67221: LD_VAR 0 5
67225: ARRAY
67226: PUSH
67227: LD_VAR 0 6
67231: PUSH
67232: LD_INT 2
67234: ARRAY
67235: PUSH
67236: LD_VAR 0 5
67240: ARRAY
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67246: LD_VAR 0 7
67250: PUSH
67251: LD_INT 1
67253: ARRAY
67254: PPUSH
67255: LD_VAR 0 7
67259: PUSH
67260: LD_INT 2
67262: ARRAY
67263: PPUSH
67264: CALL_OW 428
67268: PUSH
67269: LD_INT 0
67271: EQUAL
67272: IFFALSE 67325
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67274: LD_VAR 0 1
67278: PPUSH
67279: LD_VAR 0 7
67283: PUSH
67284: LD_INT 1
67286: ARRAY
67287: PPUSH
67288: LD_VAR 0 7
67292: PUSH
67293: LD_INT 2
67295: ARRAY
67296: PPUSH
67297: LD_VAR 0 3
67301: PPUSH
67302: CALL_OW 48
// result := IsPlaced ( unit ) ;
67306: LD_ADDR_VAR 0 4
67310: PUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: CALL_OW 305
67320: ST_TO_ADDR
// exit ;
67321: POP
67322: POP
67323: GO 67329
// end ; end ;
67325: GO 67204
67327: POP
67328: POP
// end ;
67329: LD_VAR 0 4
67333: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67334: LD_INT 0
67336: PPUSH
67337: PPUSH
67338: PPUSH
// if not side or side > 8 then
67339: LD_VAR 0 1
67343: NOT
67344: PUSH
67345: LD_VAR 0 1
67349: PUSH
67350: LD_INT 8
67352: GREATER
67353: OR
67354: IFFALSE 67358
// exit ;
67356: GO 67545
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67358: LD_ADDR_VAR 0 4
67362: PUSH
67363: LD_INT 22
67365: PUSH
67366: LD_VAR 0 1
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 21
67377: PUSH
67378: LD_INT 3
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL_OW 69
67393: ST_TO_ADDR
// if not tmp then
67394: LD_VAR 0 4
67398: NOT
67399: IFFALSE 67403
// exit ;
67401: GO 67545
// enable_addtolog := true ;
67403: LD_ADDR_OWVAR 81
67407: PUSH
67408: LD_INT 1
67410: ST_TO_ADDR
// AddToLog ( [ ) ;
67411: LD_STRING [
67413: PPUSH
67414: CALL_OW 561
// for i in tmp do
67418: LD_ADDR_VAR 0 3
67422: PUSH
67423: LD_VAR 0 4
67427: PUSH
67428: FOR_IN
67429: IFFALSE 67536
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67431: LD_STRING [
67433: PUSH
67434: LD_VAR 0 3
67438: PPUSH
67439: CALL_OW 266
67443: STR
67444: PUSH
67445: LD_STRING , 
67447: STR
67448: PUSH
67449: LD_VAR 0 3
67453: PPUSH
67454: CALL_OW 250
67458: STR
67459: PUSH
67460: LD_STRING , 
67462: STR
67463: PUSH
67464: LD_VAR 0 3
67468: PPUSH
67469: CALL_OW 251
67473: STR
67474: PUSH
67475: LD_STRING , 
67477: STR
67478: PUSH
67479: LD_VAR 0 3
67483: PPUSH
67484: CALL_OW 254
67488: STR
67489: PUSH
67490: LD_STRING , 
67492: STR
67493: PUSH
67494: LD_VAR 0 3
67498: PPUSH
67499: LD_INT 1
67501: PPUSH
67502: CALL_OW 268
67506: STR
67507: PUSH
67508: LD_STRING , 
67510: STR
67511: PUSH
67512: LD_VAR 0 3
67516: PPUSH
67517: LD_INT 2
67519: PPUSH
67520: CALL_OW 268
67524: STR
67525: PUSH
67526: LD_STRING ],
67528: STR
67529: PPUSH
67530: CALL_OW 561
// end ;
67534: GO 67428
67536: POP
67537: POP
// AddToLog ( ]; ) ;
67538: LD_STRING ];
67540: PPUSH
67541: CALL_OW 561
// end ;
67545: LD_VAR 0 2
67549: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67550: LD_INT 0
67552: PPUSH
67553: PPUSH
67554: PPUSH
67555: PPUSH
67556: PPUSH
// if not area or not rate or not max then
67557: LD_VAR 0 1
67561: NOT
67562: PUSH
67563: LD_VAR 0 2
67567: NOT
67568: OR
67569: PUSH
67570: LD_VAR 0 4
67574: NOT
67575: OR
67576: IFFALSE 67580
// exit ;
67578: GO 67769
// while 1 do
67580: LD_INT 1
67582: IFFALSE 67769
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67584: LD_ADDR_VAR 0 9
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_INT 1
67596: PPUSH
67597: CALL_OW 287
67601: PUSH
67602: LD_INT 10
67604: MUL
67605: ST_TO_ADDR
// r := rate / 10 ;
67606: LD_ADDR_VAR 0 7
67610: PUSH
67611: LD_VAR 0 2
67615: PUSH
67616: LD_INT 10
67618: DIVREAL
67619: ST_TO_ADDR
// time := 1 1$00 ;
67620: LD_ADDR_VAR 0 8
67624: PUSH
67625: LD_INT 2100
67627: ST_TO_ADDR
// if amount < min then
67628: LD_VAR 0 9
67632: PUSH
67633: LD_VAR 0 3
67637: LESS
67638: IFFALSE 67656
// r := r * 2 else
67640: LD_ADDR_VAR 0 7
67644: PUSH
67645: LD_VAR 0 7
67649: PUSH
67650: LD_INT 2
67652: MUL
67653: ST_TO_ADDR
67654: GO 67682
// if amount > max then
67656: LD_VAR 0 9
67660: PUSH
67661: LD_VAR 0 4
67665: GREATER
67666: IFFALSE 67682
// r := r / 2 ;
67668: LD_ADDR_VAR 0 7
67672: PUSH
67673: LD_VAR 0 7
67677: PUSH
67678: LD_INT 2
67680: DIVREAL
67681: ST_TO_ADDR
// time := time / r ;
67682: LD_ADDR_VAR 0 8
67686: PUSH
67687: LD_VAR 0 8
67691: PUSH
67692: LD_VAR 0 7
67696: DIVREAL
67697: ST_TO_ADDR
// if time < 0 then
67698: LD_VAR 0 8
67702: PUSH
67703: LD_INT 0
67705: LESS
67706: IFFALSE 67723
// time := time * - 1 ;
67708: LD_ADDR_VAR 0 8
67712: PUSH
67713: LD_VAR 0 8
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: MUL
67722: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67723: LD_VAR 0 8
67727: PUSH
67728: LD_INT 35
67730: PPUSH
67731: LD_INT 875
67733: PPUSH
67734: CALL_OW 12
67738: PLUS
67739: PPUSH
67740: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67744: LD_INT 1
67746: PPUSH
67747: LD_INT 5
67749: PPUSH
67750: CALL_OW 12
67754: PPUSH
67755: LD_VAR 0 1
67759: PPUSH
67760: LD_INT 1
67762: PPUSH
67763: CALL_OW 55
// end ;
67767: GO 67580
// end ;
67769: LD_VAR 0 5
67773: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67774: LD_INT 0
67776: PPUSH
67777: PPUSH
67778: PPUSH
67779: PPUSH
67780: PPUSH
67781: PPUSH
67782: PPUSH
67783: PPUSH
// if not turrets or not factories then
67784: LD_VAR 0 1
67788: NOT
67789: PUSH
67790: LD_VAR 0 2
67794: NOT
67795: OR
67796: IFFALSE 67800
// exit ;
67798: GO 68107
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67800: LD_ADDR_VAR 0 10
67804: PUSH
67805: LD_INT 5
67807: PUSH
67808: LD_INT 6
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: LD_INT 4
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: PUSH
67828: LD_INT 5
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 24
67842: PUSH
67843: LD_INT 25
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 23
67852: PUSH
67853: LD_INT 27
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 42
67866: PUSH
67867: LD_INT 43
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 44
67876: PUSH
67877: LD_INT 46
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 45
67886: PUSH
67887: LD_INT 47
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// result := [ ] ;
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: EMPTY
67910: ST_TO_ADDR
// for i in turrets do
67911: LD_ADDR_VAR 0 4
67915: PUSH
67916: LD_VAR 0 1
67920: PUSH
67921: FOR_IN
67922: IFFALSE 68105
// begin nat := GetNation ( i ) ;
67924: LD_ADDR_VAR 0 7
67928: PUSH
67929: LD_VAR 0 4
67933: PPUSH
67934: CALL_OW 248
67938: ST_TO_ADDR
// weapon := 0 ;
67939: LD_ADDR_VAR 0 8
67943: PUSH
67944: LD_INT 0
67946: ST_TO_ADDR
// if not nat then
67947: LD_VAR 0 7
67951: NOT
67952: IFFALSE 67956
// continue ;
67954: GO 67921
// for j in list [ nat ] do
67956: LD_ADDR_VAR 0 5
67960: PUSH
67961: LD_VAR 0 10
67965: PUSH
67966: LD_VAR 0 7
67970: ARRAY
67971: PUSH
67972: FOR_IN
67973: IFFALSE 68014
// if GetBWeapon ( i ) = j [ 1 ] then
67975: LD_VAR 0 4
67979: PPUSH
67980: CALL_OW 269
67984: PUSH
67985: LD_VAR 0 5
67989: PUSH
67990: LD_INT 1
67992: ARRAY
67993: EQUAL
67994: IFFALSE 68012
// begin weapon := j [ 2 ] ;
67996: LD_ADDR_VAR 0 8
68000: PUSH
68001: LD_VAR 0 5
68005: PUSH
68006: LD_INT 2
68008: ARRAY
68009: ST_TO_ADDR
// break ;
68010: GO 68014
// end ;
68012: GO 67972
68014: POP
68015: POP
// if not weapon then
68016: LD_VAR 0 8
68020: NOT
68021: IFFALSE 68025
// continue ;
68023: GO 67921
// for k in factories do
68025: LD_ADDR_VAR 0 6
68029: PUSH
68030: LD_VAR 0 2
68034: PUSH
68035: FOR_IN
68036: IFFALSE 68101
// begin weapons := AvailableWeaponList ( k ) ;
68038: LD_ADDR_VAR 0 9
68042: PUSH
68043: LD_VAR 0 6
68047: PPUSH
68048: CALL_OW 478
68052: ST_TO_ADDR
// if not weapons then
68053: LD_VAR 0 9
68057: NOT
68058: IFFALSE 68062
// continue ;
68060: GO 68035
// if weapon in weapons then
68062: LD_VAR 0 8
68066: PUSH
68067: LD_VAR 0 9
68071: IN
68072: IFFALSE 68099
// begin result := [ i , weapon ] ;
68074: LD_ADDR_VAR 0 3
68078: PUSH
68079: LD_VAR 0 4
68083: PUSH
68084: LD_VAR 0 8
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: ST_TO_ADDR
// exit ;
68093: POP
68094: POP
68095: POP
68096: POP
68097: GO 68107
// end ; end ;
68099: GO 68035
68101: POP
68102: POP
// end ;
68103: GO 67921
68105: POP
68106: POP
// end ;
68107: LD_VAR 0 3
68111: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68112: LD_INT 0
68114: PPUSH
// if not side or side > 8 then
68115: LD_VAR 0 3
68119: NOT
68120: PUSH
68121: LD_VAR 0 3
68125: PUSH
68126: LD_INT 8
68128: GREATER
68129: OR
68130: IFFALSE 68134
// exit ;
68132: GO 68193
// if not range then
68134: LD_VAR 0 4
68138: NOT
68139: IFFALSE 68150
// range := - 12 ;
68141: LD_ADDR_VAR 0 4
68145: PUSH
68146: LD_INT 12
68148: NEG
68149: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68150: LD_VAR 0 1
68154: PPUSH
68155: LD_VAR 0 2
68159: PPUSH
68160: LD_VAR 0 3
68164: PPUSH
68165: LD_VAR 0 4
68169: PPUSH
68170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68174: LD_VAR 0 1
68178: PPUSH
68179: LD_VAR 0 2
68183: PPUSH
68184: LD_VAR 0 3
68188: PPUSH
68189: CALL_OW 331
// end ;
68193: LD_VAR 0 5
68197: RET
// export function Video ( mode ) ; begin
68198: LD_INT 0
68200: PPUSH
// ingame_video = mode ;
68201: LD_ADDR_OWVAR 52
68205: PUSH
68206: LD_VAR 0 1
68210: ST_TO_ADDR
// interface_hidden = mode ;
68211: LD_ADDR_OWVAR 54
68215: PUSH
68216: LD_VAR 0 1
68220: ST_TO_ADDR
// end ;
68221: LD_VAR 0 2
68225: RET
// export function Join ( array , element ) ; begin
68226: LD_INT 0
68228: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68229: LD_ADDR_VAR 0 3
68233: PUSH
68234: LD_VAR 0 1
68238: PPUSH
68239: LD_VAR 0 1
68243: PUSH
68244: LD_INT 1
68246: PLUS
68247: PPUSH
68248: LD_VAR 0 2
68252: PPUSH
68253: CALL_OW 1
68257: ST_TO_ADDR
// end ;
68258: LD_VAR 0 3
68262: RET
// export function JoinUnion ( array , element ) ; begin
68263: LD_INT 0
68265: PPUSH
// result := array union element ;
68266: LD_ADDR_VAR 0 3
68270: PUSH
68271: LD_VAR 0 1
68275: PUSH
68276: LD_VAR 0 2
68280: UNION
68281: ST_TO_ADDR
// end ;
68282: LD_VAR 0 3
68286: RET
// export function GetBehemoths ( side ) ; begin
68287: LD_INT 0
68289: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68290: LD_ADDR_VAR 0 2
68294: PUSH
68295: LD_INT 22
68297: PUSH
68298: LD_VAR 0 1
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 31
68309: PUSH
68310: LD_INT 25
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PPUSH
68321: CALL_OW 69
68325: ST_TO_ADDR
// end ;
68326: LD_VAR 0 2
68330: RET
// export function Shuffle ( array ) ; var i , index ; begin
68331: LD_INT 0
68333: PPUSH
68334: PPUSH
68335: PPUSH
// result := [ ] ;
68336: LD_ADDR_VAR 0 2
68340: PUSH
68341: EMPTY
68342: ST_TO_ADDR
// if not array then
68343: LD_VAR 0 1
68347: NOT
68348: IFFALSE 68352
// exit ;
68350: GO 68451
// Randomize ;
68352: CALL_OW 10
// for i = array downto 1 do
68356: LD_ADDR_VAR 0 3
68360: PUSH
68361: DOUBLE
68362: LD_VAR 0 1
68366: INC
68367: ST_TO_ADDR
68368: LD_INT 1
68370: PUSH
68371: FOR_DOWNTO
68372: IFFALSE 68449
// begin index := rand ( 1 , array ) ;
68374: LD_ADDR_VAR 0 4
68378: PUSH
68379: LD_INT 1
68381: PPUSH
68382: LD_VAR 0 1
68386: PPUSH
68387: CALL_OW 12
68391: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68392: LD_ADDR_VAR 0 2
68396: PUSH
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_VAR 0 2
68406: PUSH
68407: LD_INT 1
68409: PLUS
68410: PPUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_VAR 0 4
68420: ARRAY
68421: PPUSH
68422: CALL_OW 2
68426: ST_TO_ADDR
// array := Delete ( array , index ) ;
68427: LD_ADDR_VAR 0 1
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: LD_VAR 0 4
68441: PPUSH
68442: CALL_OW 3
68446: ST_TO_ADDR
// end ;
68447: GO 68371
68449: POP
68450: POP
// end ;
68451: LD_VAR 0 2
68455: RET
// export function GetBaseMaterials ( base ) ; begin
68456: LD_INT 0
68458: PPUSH
// result := [ 0 , 0 , 0 ] ;
68459: LD_ADDR_VAR 0 2
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: LIST
68477: ST_TO_ADDR
// if not base then
68478: LD_VAR 0 1
68482: NOT
68483: IFFALSE 68487
// exit ;
68485: GO 68536
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_VAR 0 1
68496: PPUSH
68497: LD_INT 1
68499: PPUSH
68500: CALL_OW 275
68504: PUSH
68505: LD_VAR 0 1
68509: PPUSH
68510: LD_INT 2
68512: PPUSH
68513: CALL_OW 275
68517: PUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: LD_INT 3
68525: PPUSH
68526: CALL_OW 275
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// end ;
68536: LD_VAR 0 2
68540: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68541: LD_INT 0
68543: PPUSH
68544: PPUSH
// result := array ;
68545: LD_ADDR_VAR 0 3
68549: PUSH
68550: LD_VAR 0 1
68554: ST_TO_ADDR
// if size >= result then
68555: LD_VAR 0 2
68559: PUSH
68560: LD_VAR 0 3
68564: GREATEREQUAL
68565: IFFALSE 68569
// exit ;
68567: GO 68619
// if size then
68569: LD_VAR 0 2
68573: IFFALSE 68619
// for i := array downto size do
68575: LD_ADDR_VAR 0 4
68579: PUSH
68580: DOUBLE
68581: LD_VAR 0 1
68585: INC
68586: ST_TO_ADDR
68587: LD_VAR 0 2
68591: PUSH
68592: FOR_DOWNTO
68593: IFFALSE 68617
// result := Delete ( result , result ) ;
68595: LD_ADDR_VAR 0 3
68599: PUSH
68600: LD_VAR 0 3
68604: PPUSH
68605: LD_VAR 0 3
68609: PPUSH
68610: CALL_OW 3
68614: ST_TO_ADDR
68615: GO 68592
68617: POP
68618: POP
// end ;
68619: LD_VAR 0 3
68623: RET
// export function ComExit ( unit ) ; var tmp ; begin
68624: LD_INT 0
68626: PPUSH
68627: PPUSH
// if not IsInUnit ( unit ) then
68628: LD_VAR 0 1
68632: PPUSH
68633: CALL_OW 310
68637: NOT
68638: IFFALSE 68642
// exit ;
68640: GO 68702
// tmp := IsInUnit ( unit ) ;
68642: LD_ADDR_VAR 0 3
68646: PUSH
68647: LD_VAR 0 1
68651: PPUSH
68652: CALL_OW 310
68656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68657: LD_VAR 0 3
68661: PPUSH
68662: CALL_OW 247
68666: PUSH
68667: LD_INT 2
68669: EQUAL
68670: IFFALSE 68683
// ComExitVehicle ( unit ) else
68672: LD_VAR 0 1
68676: PPUSH
68677: CALL_OW 121
68681: GO 68692
// ComExitBuilding ( unit ) ;
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 122
// result := tmp ;
68692: LD_ADDR_VAR 0 2
68696: PUSH
68697: LD_VAR 0 3
68701: ST_TO_ADDR
// end ;
68702: LD_VAR 0 2
68706: RET
// export function ComExitAll ( units ) ; var i ; begin
68707: LD_INT 0
68709: PPUSH
68710: PPUSH
// if not units then
68711: LD_VAR 0 1
68715: NOT
68716: IFFALSE 68720
// exit ;
68718: GO 68746
// for i in units do
68720: LD_ADDR_VAR 0 3
68724: PUSH
68725: LD_VAR 0 1
68729: PUSH
68730: FOR_IN
68731: IFFALSE 68744
// ComExit ( i ) ;
68733: LD_VAR 0 3
68737: PPUSH
68738: CALL 68624 0 1
68742: GO 68730
68744: POP
68745: POP
// end ;
68746: LD_VAR 0 2
68750: RET
// export function ResetHc ; begin
68751: LD_INT 0
68753: PPUSH
// InitHc ;
68754: CALL_OW 19
// hc_importance := 0 ;
68758: LD_ADDR_OWVAR 32
68762: PUSH
68763: LD_INT 0
68765: ST_TO_ADDR
// end ;
68766: LD_VAR 0 1
68770: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68771: LD_INT 0
68773: PPUSH
68774: PPUSH
68775: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68776: LD_ADDR_VAR 0 6
68780: PUSH
68781: LD_VAR 0 1
68785: PUSH
68786: LD_VAR 0 3
68790: PLUS
68791: PUSH
68792: LD_INT 2
68794: DIV
68795: ST_TO_ADDR
// if _x < 0 then
68796: LD_VAR 0 6
68800: PUSH
68801: LD_INT 0
68803: LESS
68804: IFFALSE 68821
// _x := _x * - 1 ;
68806: LD_ADDR_VAR 0 6
68810: PUSH
68811: LD_VAR 0 6
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: MUL
68820: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68821: LD_ADDR_VAR 0 7
68825: PUSH
68826: LD_VAR 0 2
68830: PUSH
68831: LD_VAR 0 4
68835: PLUS
68836: PUSH
68837: LD_INT 2
68839: DIV
68840: ST_TO_ADDR
// if _y < 0 then
68841: LD_VAR 0 7
68845: PUSH
68846: LD_INT 0
68848: LESS
68849: IFFALSE 68866
// _y := _y * - 1 ;
68851: LD_ADDR_VAR 0 7
68855: PUSH
68856: LD_VAR 0 7
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: MUL
68865: ST_TO_ADDR
// result := [ _x , _y ] ;
68866: LD_ADDR_VAR 0 5
68870: PUSH
68871: LD_VAR 0 6
68875: PUSH
68876: LD_VAR 0 7
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// end ;
68885: LD_VAR 0 5
68889: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68890: LD_INT 0
68892: PPUSH
68893: PPUSH
68894: PPUSH
68895: PPUSH
// task := GetTaskList ( unit ) ;
68896: LD_ADDR_VAR 0 7
68900: PUSH
68901: LD_VAR 0 1
68905: PPUSH
68906: CALL_OW 437
68910: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68911: LD_VAR 0 7
68915: NOT
68916: PUSH
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_VAR 0 2
68926: PPUSH
68927: CALL_OW 308
68931: NOT
68932: AND
68933: IFFALSE 68937
// exit ;
68935: GO 69055
// if IsInArea ( unit , area ) then
68937: LD_VAR 0 1
68941: PPUSH
68942: LD_VAR 0 2
68946: PPUSH
68947: CALL_OW 308
68951: IFFALSE 68969
// begin ComMoveToArea ( unit , goAway ) ;
68953: LD_VAR 0 1
68957: PPUSH
68958: LD_VAR 0 3
68962: PPUSH
68963: CALL_OW 113
// exit ;
68967: GO 69055
// end ; if task [ 1 ] [ 1 ] <> M then
68969: LD_VAR 0 7
68973: PUSH
68974: LD_INT 1
68976: ARRAY
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PUSH
68982: LD_STRING M
68984: NONEQUAL
68985: IFFALSE 68989
// exit ;
68987: GO 69055
// x := task [ 1 ] [ 2 ] ;
68989: LD_ADDR_VAR 0 5
68993: PUSH
68994: LD_VAR 0 7
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PUSH
69003: LD_INT 2
69005: ARRAY
69006: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69007: LD_ADDR_VAR 0 6
69011: PUSH
69012: LD_VAR 0 7
69016: PUSH
69017: LD_INT 1
69019: ARRAY
69020: PUSH
69021: LD_INT 3
69023: ARRAY
69024: ST_TO_ADDR
// if InArea ( x , y , area ) then
69025: LD_VAR 0 5
69029: PPUSH
69030: LD_VAR 0 6
69034: PPUSH
69035: LD_VAR 0 2
69039: PPUSH
69040: CALL_OW 309
69044: IFFALSE 69055
// ComStop ( unit ) ;
69046: LD_VAR 0 1
69050: PPUSH
69051: CALL_OW 141
// end ;
69055: LD_VAR 0 4
69059: RET
// export function Abs ( value ) ; begin
69060: LD_INT 0
69062: PPUSH
// result := value ;
69063: LD_ADDR_VAR 0 2
69067: PUSH
69068: LD_VAR 0 1
69072: ST_TO_ADDR
// if value < 0 then
69073: LD_VAR 0 1
69077: PUSH
69078: LD_INT 0
69080: LESS
69081: IFFALSE 69098
// result := value * - 1 ;
69083: LD_ADDR_VAR 0 2
69087: PUSH
69088: LD_VAR 0 1
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: MUL
69097: ST_TO_ADDR
// end ;
69098: LD_VAR 0 2
69102: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69103: LD_INT 0
69105: PPUSH
69106: PPUSH
69107: PPUSH
69108: PPUSH
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
// if not unit or not building then
69113: LD_VAR 0 1
69117: NOT
69118: PUSH
69119: LD_VAR 0 2
69123: NOT
69124: OR
69125: IFFALSE 69129
// exit ;
69127: GO 69355
// x := GetX ( building ) ;
69129: LD_ADDR_VAR 0 4
69133: PUSH
69134: LD_VAR 0 2
69138: PPUSH
69139: CALL_OW 250
69143: ST_TO_ADDR
// y := GetY ( building ) ;
69144: LD_ADDR_VAR 0 6
69148: PUSH
69149: LD_VAR 0 2
69153: PPUSH
69154: CALL_OW 251
69158: ST_TO_ADDR
// d := GetDir ( building ) ;
69159: LD_ADDR_VAR 0 8
69163: PUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: CALL_OW 254
69173: ST_TO_ADDR
// r := 4 ;
69174: LD_ADDR_VAR 0 9
69178: PUSH
69179: LD_INT 4
69181: ST_TO_ADDR
// for i := 1 to 5 do
69182: LD_ADDR_VAR 0 10
69186: PUSH
69187: DOUBLE
69188: LD_INT 1
69190: DEC
69191: ST_TO_ADDR
69192: LD_INT 5
69194: PUSH
69195: FOR_TO
69196: IFFALSE 69353
// begin _x := ShiftX ( x , d , r + i ) ;
69198: LD_ADDR_VAR 0 5
69202: PUSH
69203: LD_VAR 0 4
69207: PPUSH
69208: LD_VAR 0 8
69212: PPUSH
69213: LD_VAR 0 9
69217: PUSH
69218: LD_VAR 0 10
69222: PLUS
69223: PPUSH
69224: CALL_OW 272
69228: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69229: LD_ADDR_VAR 0 7
69233: PUSH
69234: LD_VAR 0 6
69238: PPUSH
69239: LD_VAR 0 8
69243: PPUSH
69244: LD_VAR 0 9
69248: PUSH
69249: LD_VAR 0 10
69253: PLUS
69254: PPUSH
69255: CALL_OW 273
69259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69260: LD_VAR 0 5
69264: PPUSH
69265: LD_VAR 0 7
69269: PPUSH
69270: CALL_OW 488
69274: PUSH
69275: LD_VAR 0 5
69279: PPUSH
69280: LD_VAR 0 7
69284: PPUSH
69285: CALL_OW 428
69289: PPUSH
69290: CALL_OW 247
69294: PUSH
69295: LD_INT 3
69297: PUSH
69298: LD_INT 2
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: IN
69305: NOT
69306: AND
69307: IFFALSE 69351
// begin ComMoveXY ( unit , _x , _y ) ;
69309: LD_VAR 0 1
69313: PPUSH
69314: LD_VAR 0 5
69318: PPUSH
69319: LD_VAR 0 7
69323: PPUSH
69324: CALL_OW 111
// result := [ _x , _y ] ;
69328: LD_ADDR_VAR 0 3
69332: PUSH
69333: LD_VAR 0 5
69337: PUSH
69338: LD_VAR 0 7
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: ST_TO_ADDR
// exit ;
69347: POP
69348: POP
69349: GO 69355
// end ; end ;
69351: GO 69195
69353: POP
69354: POP
// end ;
69355: LD_VAR 0 3
69359: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
69364: PPUSH
// result := 0 ;
69365: LD_ADDR_VAR 0 3
69369: PUSH
69370: LD_INT 0
69372: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69373: LD_VAR 0 1
69377: PUSH
69378: LD_INT 0
69380: LESS
69381: PUSH
69382: LD_VAR 0 1
69386: PUSH
69387: LD_INT 8
69389: GREATER
69390: OR
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 0
69399: LESS
69400: OR
69401: PUSH
69402: LD_VAR 0 2
69406: PUSH
69407: LD_INT 8
69409: GREATER
69410: OR
69411: IFFALSE 69415
// exit ;
69413: GO 69490
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69415: LD_ADDR_VAR 0 4
69419: PUSH
69420: LD_INT 22
69422: PUSH
69423: LD_VAR 0 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PPUSH
69432: CALL_OW 69
69436: PUSH
69437: FOR_IN
69438: IFFALSE 69488
// begin un := UnitShoot ( i ) ;
69440: LD_ADDR_VAR 0 5
69444: PUSH
69445: LD_VAR 0 4
69449: PPUSH
69450: CALL_OW 504
69454: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69455: LD_VAR 0 5
69459: PPUSH
69460: CALL_OW 255
69464: PUSH
69465: LD_VAR 0 1
69469: EQUAL
69470: IFFALSE 69486
// begin result := un ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_VAR 0 5
69481: ST_TO_ADDR
// exit ;
69482: POP
69483: POP
69484: GO 69490
// end ; end ;
69486: GO 69437
69488: POP
69489: POP
// end ;
69490: LD_VAR 0 3
69494: RET
// export function GetCargoBay ( units ) ; begin
69495: LD_INT 0
69497: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69498: LD_ADDR_VAR 0 2
69502: PUSH
69503: LD_VAR 0 1
69507: PPUSH
69508: LD_INT 2
69510: PUSH
69511: LD_INT 34
69513: PUSH
69514: LD_INT 12
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 34
69523: PUSH
69524: LD_INT 51
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 34
69533: PUSH
69534: LD_INT 32
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 34
69543: PUSH
69544: LD_EXP 21
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: PPUSH
69560: CALL_OW 72
69564: ST_TO_ADDR
// end ;
69565: LD_VAR 0 2
69569: RET
// export function Negate ( value ) ; begin
69570: LD_INT 0
69572: PPUSH
// result := not value ;
69573: LD_ADDR_VAR 0 2
69577: PUSH
69578: LD_VAR 0 1
69582: NOT
69583: ST_TO_ADDR
// end ;
69584: LD_VAR 0 2
69588: RET
// export function Inc ( value ) ; begin
69589: LD_INT 0
69591: PPUSH
// result := value + 1 ;
69592: LD_ADDR_VAR 0 2
69596: PUSH
69597: LD_VAR 0 1
69601: PUSH
69602: LD_INT 1
69604: PLUS
69605: ST_TO_ADDR
// end ;
69606: LD_VAR 0 2
69610: RET
// export function Dec ( value ) ; begin
69611: LD_INT 0
69613: PPUSH
// result := value - 1 ;
69614: LD_ADDR_VAR 0 2
69618: PUSH
69619: LD_VAR 0 1
69623: PUSH
69624: LD_INT 1
69626: MINUS
69627: ST_TO_ADDR
// end ;
69628: LD_VAR 0 2
69632: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69643: LD_VAR 0 1
69647: PPUSH
69648: LD_VAR 0 2
69652: PPUSH
69653: CALL_OW 488
69657: NOT
69658: PUSH
69659: LD_VAR 0 3
69663: PPUSH
69664: LD_VAR 0 4
69668: PPUSH
69669: CALL_OW 488
69673: NOT
69674: OR
69675: IFFALSE 69688
// begin result := - 1 ;
69677: LD_ADDR_VAR 0 5
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: ST_TO_ADDR
// exit ;
69686: GO 69923
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69688: LD_ADDR_VAR 0 12
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: LD_VAR 0 2
69702: PPUSH
69703: LD_VAR 0 3
69707: PPUSH
69708: LD_VAR 0 4
69712: PPUSH
69713: CALL 68771 0 4
69717: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69718: LD_ADDR_VAR 0 11
69722: PUSH
69723: LD_VAR 0 1
69727: PPUSH
69728: LD_VAR 0 2
69732: PPUSH
69733: LD_VAR 0 12
69737: PUSH
69738: LD_INT 1
69740: ARRAY
69741: PPUSH
69742: LD_VAR 0 12
69746: PUSH
69747: LD_INT 2
69749: ARRAY
69750: PPUSH
69751: CALL_OW 298
69755: ST_TO_ADDR
// distance := 9999 ;
69756: LD_ADDR_VAR 0 10
69760: PUSH
69761: LD_INT 9999
69763: ST_TO_ADDR
// for i := 0 to 5 do
69764: LD_ADDR_VAR 0 6
69768: PUSH
69769: DOUBLE
69770: LD_INT 0
69772: DEC
69773: ST_TO_ADDR
69774: LD_INT 5
69776: PUSH
69777: FOR_TO
69778: IFFALSE 69921
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69780: LD_ADDR_VAR 0 7
69784: PUSH
69785: LD_VAR 0 1
69789: PPUSH
69790: LD_VAR 0 6
69794: PPUSH
69795: LD_VAR 0 11
69799: PPUSH
69800: CALL_OW 272
69804: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69805: LD_ADDR_VAR 0 8
69809: PUSH
69810: LD_VAR 0 2
69814: PPUSH
69815: LD_VAR 0 6
69819: PPUSH
69820: LD_VAR 0 11
69824: PPUSH
69825: CALL_OW 273
69829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69830: LD_VAR 0 7
69834: PPUSH
69835: LD_VAR 0 8
69839: PPUSH
69840: CALL_OW 488
69844: NOT
69845: IFFALSE 69849
// continue ;
69847: GO 69777
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69849: LD_ADDR_VAR 0 9
69853: PUSH
69854: LD_VAR 0 12
69858: PUSH
69859: LD_INT 1
69861: ARRAY
69862: PPUSH
69863: LD_VAR 0 12
69867: PUSH
69868: LD_INT 2
69870: ARRAY
69871: PPUSH
69872: LD_VAR 0 7
69876: PPUSH
69877: LD_VAR 0 8
69881: PPUSH
69882: CALL_OW 298
69886: ST_TO_ADDR
// if tmp < distance then
69887: LD_VAR 0 9
69891: PUSH
69892: LD_VAR 0 10
69896: LESS
69897: IFFALSE 69919
// begin result := i ;
69899: LD_ADDR_VAR 0 5
69903: PUSH
69904: LD_VAR 0 6
69908: ST_TO_ADDR
// distance := tmp ;
69909: LD_ADDR_VAR 0 10
69913: PUSH
69914: LD_VAR 0 9
69918: ST_TO_ADDR
// end ; end ;
69919: GO 69777
69921: POP
69922: POP
// end ;
69923: LD_VAR 0 5
69927: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69928: LD_INT 0
69930: PPUSH
69931: PPUSH
// if not driver or not IsInUnit ( driver ) then
69932: LD_VAR 0 1
69936: NOT
69937: PUSH
69938: LD_VAR 0 1
69942: PPUSH
69943: CALL_OW 310
69947: NOT
69948: OR
69949: IFFALSE 69953
// exit ;
69951: GO 70043
// vehicle := IsInUnit ( driver ) ;
69953: LD_ADDR_VAR 0 3
69957: PUSH
69958: LD_VAR 0 1
69962: PPUSH
69963: CALL_OW 310
69967: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69968: LD_VAR 0 1
69972: PPUSH
69973: LD_STRING \
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: LD_INT 0
69981: PUSH
69982: LD_INT 0
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: PUSH
70003: LD_STRING E
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_VAR 0 3
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PPUSH
70039: CALL_OW 446
// end ;
70043: LD_VAR 0 2
70047: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70048: LD_INT 0
70050: PPUSH
70051: PPUSH
// if not driver or not IsInUnit ( driver ) then
70052: LD_VAR 0 1
70056: NOT
70057: PUSH
70058: LD_VAR 0 1
70062: PPUSH
70063: CALL_OW 310
70067: NOT
70068: OR
70069: IFFALSE 70073
// exit ;
70071: GO 70163
// vehicle := IsInUnit ( driver ) ;
70073: LD_ADDR_VAR 0 3
70077: PUSH
70078: LD_VAR 0 1
70082: PPUSH
70083: CALL_OW 310
70087: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70088: LD_VAR 0 1
70092: PPUSH
70093: LD_STRING \
70095: PUSH
70096: LD_INT 0
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: PUSH
70123: LD_STRING E
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: LD_VAR 0 3
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PPUSH
70159: CALL_OW 447
// end ;
70163: LD_VAR 0 2
70167: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70168: LD_INT 0
70170: PPUSH
70171: PPUSH
70172: PPUSH
// tmp := [ ] ;
70173: LD_ADDR_VAR 0 5
70177: PUSH
70178: EMPTY
70179: ST_TO_ADDR
// for i in units do
70180: LD_ADDR_VAR 0 4
70184: PUSH
70185: LD_VAR 0 1
70189: PUSH
70190: FOR_IN
70191: IFFALSE 70229
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70193: LD_ADDR_VAR 0 5
70197: PUSH
70198: LD_VAR 0 5
70202: PPUSH
70203: LD_VAR 0 5
70207: PUSH
70208: LD_INT 1
70210: PLUS
70211: PPUSH
70212: LD_VAR 0 4
70216: PPUSH
70217: CALL_OW 256
70221: PPUSH
70222: CALL_OW 2
70226: ST_TO_ADDR
70227: GO 70190
70229: POP
70230: POP
// if not tmp then
70231: LD_VAR 0 5
70235: NOT
70236: IFFALSE 70240
// exit ;
70238: GO 70288
// if asc then
70240: LD_VAR 0 2
70244: IFFALSE 70268
// result := SortListByListAsc ( units , tmp ) else
70246: LD_ADDR_VAR 0 3
70250: PUSH
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_VAR 0 5
70260: PPUSH
70261: CALL_OW 76
70265: ST_TO_ADDR
70266: GO 70288
// result := SortListByListDesc ( units , tmp ) ;
70268: LD_ADDR_VAR 0 3
70272: PUSH
70273: LD_VAR 0 1
70277: PPUSH
70278: LD_VAR 0 5
70282: PPUSH
70283: CALL_OW 77
70287: ST_TO_ADDR
// end ;
70288: LD_VAR 0 3
70292: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
// task := GetTaskList ( mech ) ;
70297: LD_ADDR_VAR 0 4
70301: PUSH
70302: LD_VAR 0 1
70306: PPUSH
70307: CALL_OW 437
70311: ST_TO_ADDR
// if not task then
70312: LD_VAR 0 4
70316: NOT
70317: IFFALSE 70321
// exit ;
70319: GO 70363
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70321: LD_ADDR_VAR 0 3
70325: PUSH
70326: LD_VAR 0 4
70330: PUSH
70331: LD_INT 1
70333: ARRAY
70334: PUSH
70335: LD_INT 1
70337: ARRAY
70338: PUSH
70339: LD_STRING r
70341: EQUAL
70342: PUSH
70343: LD_VAR 0 4
70347: PUSH
70348: LD_INT 1
70350: ARRAY
70351: PUSH
70352: LD_INT 4
70354: ARRAY
70355: PUSH
70356: LD_VAR 0 2
70360: EQUAL
70361: AND
70362: ST_TO_ADDR
// end ;
70363: LD_VAR 0 3
70367: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70368: LD_INT 0
70370: PPUSH
// SetDir ( unit , d ) ;
70371: LD_VAR 0 1
70375: PPUSH
70376: LD_VAR 0 4
70380: PPUSH
70381: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70385: LD_VAR 0 1
70389: PPUSH
70390: LD_VAR 0 2
70394: PPUSH
70395: LD_VAR 0 3
70399: PPUSH
70400: LD_VAR 0 5
70404: PPUSH
70405: CALL_OW 48
// end ;
70409: LD_VAR 0 6
70413: RET
// export function ToNaturalNumber ( number ) ; begin
70414: LD_INT 0
70416: PPUSH
// result := number div 1 ;
70417: LD_ADDR_VAR 0 2
70421: PUSH
70422: LD_VAR 0 1
70426: PUSH
70427: LD_INT 1
70429: DIV
70430: ST_TO_ADDR
// if number < 0 then
70431: LD_VAR 0 1
70435: PUSH
70436: LD_INT 0
70438: LESS
70439: IFFALSE 70449
// result := 0 ;
70441: LD_ADDR_VAR 0 2
70445: PUSH
70446: LD_INT 0
70448: ST_TO_ADDR
// end ;
70449: LD_VAR 0 2
70453: RET
// export function SortByClass ( units , class ) ; var un ; begin
70454: LD_INT 0
70456: PPUSH
70457: PPUSH
// if not units or not class then
70458: LD_VAR 0 1
70462: NOT
70463: PUSH
70464: LD_VAR 0 2
70468: NOT
70469: OR
70470: IFFALSE 70474
// exit ;
70472: GO 70569
// result := [ ] ;
70474: LD_ADDR_VAR 0 3
70478: PUSH
70479: EMPTY
70480: ST_TO_ADDR
// for un in units do
70481: LD_ADDR_VAR 0 4
70485: PUSH
70486: LD_VAR 0 1
70490: PUSH
70491: FOR_IN
70492: IFFALSE 70567
// if GetClass ( un ) = class then
70494: LD_VAR 0 4
70498: PPUSH
70499: CALL_OW 257
70503: PUSH
70504: LD_VAR 0 2
70508: EQUAL
70509: IFFALSE 70536
// result := Insert ( result , 1 , un ) else
70511: LD_ADDR_VAR 0 3
70515: PUSH
70516: LD_VAR 0 3
70520: PPUSH
70521: LD_INT 1
70523: PPUSH
70524: LD_VAR 0 4
70528: PPUSH
70529: CALL_OW 2
70533: ST_TO_ADDR
70534: GO 70565
// result := Replace ( result , result + 1 , un ) ;
70536: LD_ADDR_VAR 0 3
70540: PUSH
70541: LD_VAR 0 3
70545: PPUSH
70546: LD_VAR 0 3
70550: PUSH
70551: LD_INT 1
70553: PLUS
70554: PPUSH
70555: LD_VAR 0 4
70559: PPUSH
70560: CALL_OW 1
70564: ST_TO_ADDR
70565: GO 70491
70567: POP
70568: POP
// end ;
70569: LD_VAR 0 3
70573: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
70578: PPUSH
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
// result := [ ] ;
70583: LD_ADDR_VAR 0 4
70587: PUSH
70588: EMPTY
70589: ST_TO_ADDR
// if x - r < 0 then
70590: LD_VAR 0 1
70594: PUSH
70595: LD_VAR 0 3
70599: MINUS
70600: PUSH
70601: LD_INT 0
70603: LESS
70604: IFFALSE 70616
// min_x := 0 else
70606: LD_ADDR_VAR 0 8
70610: PUSH
70611: LD_INT 0
70613: ST_TO_ADDR
70614: GO 70632
// min_x := x - r ;
70616: LD_ADDR_VAR 0 8
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: LD_VAR 0 3
70630: MINUS
70631: ST_TO_ADDR
// if y - r < 0 then
70632: LD_VAR 0 2
70636: PUSH
70637: LD_VAR 0 3
70641: MINUS
70642: PUSH
70643: LD_INT 0
70645: LESS
70646: IFFALSE 70658
// min_y := 0 else
70648: LD_ADDR_VAR 0 7
70652: PUSH
70653: LD_INT 0
70655: ST_TO_ADDR
70656: GO 70674
// min_y := y - r ;
70658: LD_ADDR_VAR 0 7
70662: PUSH
70663: LD_VAR 0 2
70667: PUSH
70668: LD_VAR 0 3
70672: MINUS
70673: ST_TO_ADDR
// max_x := x + r ;
70674: LD_ADDR_VAR 0 9
70678: PUSH
70679: LD_VAR 0 1
70683: PUSH
70684: LD_VAR 0 3
70688: PLUS
70689: ST_TO_ADDR
// max_y := y + r ;
70690: LD_ADDR_VAR 0 10
70694: PUSH
70695: LD_VAR 0 2
70699: PUSH
70700: LD_VAR 0 3
70704: PLUS
70705: ST_TO_ADDR
// for _x = min_x to max_x do
70706: LD_ADDR_VAR 0 5
70710: PUSH
70711: DOUBLE
70712: LD_VAR 0 8
70716: DEC
70717: ST_TO_ADDR
70718: LD_VAR 0 9
70722: PUSH
70723: FOR_TO
70724: IFFALSE 70825
// for _y = min_y to max_y do
70726: LD_ADDR_VAR 0 6
70730: PUSH
70731: DOUBLE
70732: LD_VAR 0 7
70736: DEC
70737: ST_TO_ADDR
70738: LD_VAR 0 10
70742: PUSH
70743: FOR_TO
70744: IFFALSE 70821
// begin if not ValidHex ( _x , _y ) then
70746: LD_VAR 0 5
70750: PPUSH
70751: LD_VAR 0 6
70755: PPUSH
70756: CALL_OW 488
70760: NOT
70761: IFFALSE 70765
// continue ;
70763: GO 70743
// if GetResourceTypeXY ( _x , _y ) then
70765: LD_VAR 0 5
70769: PPUSH
70770: LD_VAR 0 6
70774: PPUSH
70775: CALL_OW 283
70779: IFFALSE 70819
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70781: LD_ADDR_VAR 0 4
70785: PUSH
70786: LD_VAR 0 4
70790: PPUSH
70791: LD_VAR 0 4
70795: PUSH
70796: LD_INT 1
70798: PLUS
70799: PPUSH
70800: LD_VAR 0 5
70804: PUSH
70805: LD_VAR 0 6
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PPUSH
70814: CALL_OW 1
70818: ST_TO_ADDR
// end ;
70819: GO 70743
70821: POP
70822: POP
70823: GO 70723
70825: POP
70826: POP
// end ;
70827: LD_VAR 0 4
70831: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70832: LD_INT 0
70834: PPUSH
70835: PPUSH
70836: PPUSH
70837: PPUSH
70838: PPUSH
70839: PPUSH
70840: PPUSH
70841: PPUSH
// if not units then
70842: LD_VAR 0 1
70846: NOT
70847: IFFALSE 70851
// exit ;
70849: GO 71377
// result := UnitFilter ( units , [ f_ok ] ) ;
70851: LD_ADDR_VAR 0 3
70855: PUSH
70856: LD_VAR 0 1
70860: PPUSH
70861: LD_INT 50
70863: PUSH
70864: EMPTY
70865: LIST
70866: PPUSH
70867: CALL_OW 72
70871: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70872: LD_ADDR_VAR 0 8
70876: PUSH
70877: LD_VAR 0 1
70881: PUSH
70882: LD_INT 1
70884: ARRAY
70885: PPUSH
70886: CALL_OW 255
70890: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70891: LD_ADDR_VAR 0 10
70895: PUSH
70896: LD_INT 29
70898: PUSH
70899: LD_EXP 24
70903: PUSH
70904: LD_INT 49
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: LIST
70911: ST_TO_ADDR
// if not result then
70912: LD_VAR 0 3
70916: NOT
70917: IFFALSE 70921
// exit ;
70919: GO 71377
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70921: LD_ADDR_VAR 0 5
70925: PUSH
70926: LD_INT 81
70928: PUSH
70929: LD_VAR 0 8
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PPUSH
70938: CALL_OW 69
70942: ST_TO_ADDR
// for i in result do
70943: LD_ADDR_VAR 0 4
70947: PUSH
70948: LD_VAR 0 3
70952: PUSH
70953: FOR_IN
70954: IFFALSE 71375
// begin tag := GetTag ( i ) + 1 ;
70956: LD_ADDR_VAR 0 9
70960: PUSH
70961: LD_VAR 0 4
70965: PPUSH
70966: CALL_OW 110
70970: PUSH
70971: LD_INT 1
70973: PLUS
70974: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70975: LD_ADDR_VAR 0 7
70979: PUSH
70980: LD_VAR 0 4
70984: PPUSH
70985: CALL_OW 250
70989: PPUSH
70990: LD_VAR 0 4
70994: PPUSH
70995: CALL_OW 251
70999: PPUSH
71000: LD_INT 6
71002: PPUSH
71003: CALL 70574 0 3
71007: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71008: LD_VAR 0 4
71012: PPUSH
71013: CALL_OW 247
71017: PUSH
71018: LD_INT 2
71020: EQUAL
71021: PUSH
71022: LD_VAR 0 7
71026: AND
71027: PUSH
71028: LD_VAR 0 4
71032: PPUSH
71033: CALL_OW 264
71037: PUSH
71038: LD_VAR 0 10
71042: IN
71043: NOT
71044: AND
71045: IFFALSE 71084
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71047: LD_VAR 0 4
71051: PPUSH
71052: LD_VAR 0 7
71056: PUSH
71057: LD_INT 1
71059: ARRAY
71060: PUSH
71061: LD_INT 1
71063: ARRAY
71064: PPUSH
71065: LD_VAR 0 7
71069: PUSH
71070: LD_INT 1
71072: ARRAY
71073: PUSH
71074: LD_INT 2
71076: ARRAY
71077: PPUSH
71078: CALL_OW 116
71082: GO 71373
// if path > tag then
71084: LD_VAR 0 2
71088: PUSH
71089: LD_VAR 0 9
71093: GREATER
71094: IFFALSE 71302
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71096: LD_ADDR_VAR 0 6
71100: PUSH
71101: LD_VAR 0 5
71105: PPUSH
71106: LD_INT 91
71108: PUSH
71109: LD_VAR 0 4
71113: PUSH
71114: LD_INT 8
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: LIST
71121: PPUSH
71122: CALL_OW 72
71126: ST_TO_ADDR
// if nearEnemy then
71127: LD_VAR 0 6
71131: IFFALSE 71200
// begin if GetWeapon ( i ) = ru_time_lapser then
71133: LD_VAR 0 4
71137: PPUSH
71138: CALL_OW 264
71142: PUSH
71143: LD_INT 49
71145: EQUAL
71146: IFFALSE 71174
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71148: LD_VAR 0 4
71152: PPUSH
71153: LD_VAR 0 6
71157: PPUSH
71158: LD_VAR 0 4
71162: PPUSH
71163: CALL_OW 74
71167: PPUSH
71168: CALL_OW 112
71172: GO 71198
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71174: LD_VAR 0 4
71178: PPUSH
71179: LD_VAR 0 6
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: CALL_OW 74
71193: PPUSH
71194: CALL_OW 115
// end else
71198: GO 71300
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71200: LD_VAR 0 4
71204: PPUSH
71205: LD_VAR 0 2
71209: PUSH
71210: LD_VAR 0 9
71214: ARRAY
71215: PUSH
71216: LD_INT 1
71218: ARRAY
71219: PPUSH
71220: LD_VAR 0 2
71224: PUSH
71225: LD_VAR 0 9
71229: ARRAY
71230: PUSH
71231: LD_INT 2
71233: ARRAY
71234: PPUSH
71235: CALL_OW 297
71239: PUSH
71240: LD_INT 6
71242: GREATER
71243: IFFALSE 71286
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71245: LD_VAR 0 4
71249: PPUSH
71250: LD_VAR 0 2
71254: PUSH
71255: LD_VAR 0 9
71259: ARRAY
71260: PUSH
71261: LD_INT 1
71263: ARRAY
71264: PPUSH
71265: LD_VAR 0 2
71269: PUSH
71270: LD_VAR 0 9
71274: ARRAY
71275: PUSH
71276: LD_INT 2
71278: ARRAY
71279: PPUSH
71280: CALL_OW 114
71284: GO 71300
// SetTag ( i , tag ) ;
71286: LD_VAR 0 4
71290: PPUSH
71291: LD_VAR 0 9
71295: PPUSH
71296: CALL_OW 109
// end else
71300: GO 71373
// if enemy then
71302: LD_VAR 0 5
71306: IFFALSE 71373
// begin if GetWeapon ( i ) = ru_time_lapser then
71308: LD_VAR 0 4
71312: PPUSH
71313: CALL_OW 264
71317: PUSH
71318: LD_INT 49
71320: EQUAL
71321: IFFALSE 71349
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71323: LD_VAR 0 4
71327: PPUSH
71328: LD_VAR 0 5
71332: PPUSH
71333: LD_VAR 0 4
71337: PPUSH
71338: CALL_OW 74
71342: PPUSH
71343: CALL_OW 112
71347: GO 71373
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71349: LD_VAR 0 4
71353: PPUSH
71354: LD_VAR 0 5
71358: PPUSH
71359: LD_VAR 0 4
71363: PPUSH
71364: CALL_OW 74
71368: PPUSH
71369: CALL_OW 115
// end ; end ;
71373: GO 70953
71375: POP
71376: POP
// end ;
71377: LD_VAR 0 3
71381: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71382: LD_INT 0
71384: PPUSH
71385: PPUSH
71386: PPUSH
// if not unit or IsInUnit ( unit ) then
71387: LD_VAR 0 1
71391: NOT
71392: PUSH
71393: LD_VAR 0 1
71397: PPUSH
71398: CALL_OW 310
71402: OR
71403: IFFALSE 71407
// exit ;
71405: GO 71498
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71407: LD_ADDR_VAR 0 4
71411: PUSH
71412: LD_VAR 0 1
71416: PPUSH
71417: CALL_OW 250
71421: PPUSH
71422: LD_VAR 0 2
71426: PPUSH
71427: LD_INT 1
71429: PPUSH
71430: CALL_OW 272
71434: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: LD_VAR 0 1
71444: PPUSH
71445: CALL_OW 251
71449: PPUSH
71450: LD_VAR 0 2
71454: PPUSH
71455: LD_INT 1
71457: PPUSH
71458: CALL_OW 273
71462: ST_TO_ADDR
// if ValidHex ( x , y ) then
71463: LD_VAR 0 4
71467: PPUSH
71468: LD_VAR 0 5
71472: PPUSH
71473: CALL_OW 488
71477: IFFALSE 71498
// ComTurnXY ( unit , x , y ) ;
71479: LD_VAR 0 1
71483: PPUSH
71484: LD_VAR 0 4
71488: PPUSH
71489: LD_VAR 0 5
71493: PPUSH
71494: CALL_OW 118
// end ;
71498: LD_VAR 0 3
71502: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71503: LD_INT 0
71505: PPUSH
71506: PPUSH
// result := false ;
71507: LD_ADDR_VAR 0 3
71511: PUSH
71512: LD_INT 0
71514: ST_TO_ADDR
// if not units then
71515: LD_VAR 0 2
71519: NOT
71520: IFFALSE 71524
// exit ;
71522: GO 71569
// for i in units do
71524: LD_ADDR_VAR 0 4
71528: PUSH
71529: LD_VAR 0 2
71533: PUSH
71534: FOR_IN
71535: IFFALSE 71567
// if See ( side , i ) then
71537: LD_VAR 0 1
71541: PPUSH
71542: LD_VAR 0 4
71546: PPUSH
71547: CALL_OW 292
71551: IFFALSE 71565
// begin result := true ;
71553: LD_ADDR_VAR 0 3
71557: PUSH
71558: LD_INT 1
71560: ST_TO_ADDR
// exit ;
71561: POP
71562: POP
71563: GO 71569
// end ;
71565: GO 71534
71567: POP
71568: POP
// end ;
71569: LD_VAR 0 3
71573: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71574: LD_INT 0
71576: PPUSH
71577: PPUSH
71578: PPUSH
71579: PPUSH
// if not unit or not points then
71580: LD_VAR 0 1
71584: NOT
71585: PUSH
71586: LD_VAR 0 2
71590: NOT
71591: OR
71592: IFFALSE 71596
// exit ;
71594: GO 71686
// dist := 99999 ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: LD_INT 99999
71603: ST_TO_ADDR
// for i in points do
71604: LD_ADDR_VAR 0 4
71608: PUSH
71609: LD_VAR 0 2
71613: PUSH
71614: FOR_IN
71615: IFFALSE 71684
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71617: LD_ADDR_VAR 0 6
71621: PUSH
71622: LD_VAR 0 1
71626: PPUSH
71627: LD_VAR 0 4
71631: PUSH
71632: LD_INT 1
71634: ARRAY
71635: PPUSH
71636: LD_VAR 0 4
71640: PUSH
71641: LD_INT 2
71643: ARRAY
71644: PPUSH
71645: CALL_OW 297
71649: ST_TO_ADDR
// if tmpDist < dist then
71650: LD_VAR 0 6
71654: PUSH
71655: LD_VAR 0 5
71659: LESS
71660: IFFALSE 71682
// begin result := i ;
71662: LD_ADDR_VAR 0 3
71666: PUSH
71667: LD_VAR 0 4
71671: ST_TO_ADDR
// dist := tmpDist ;
71672: LD_ADDR_VAR 0 5
71676: PUSH
71677: LD_VAR 0 6
71681: ST_TO_ADDR
// end ; end ;
71682: GO 71614
71684: POP
71685: POP
// end ;
71686: LD_VAR 0 3
71690: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71691: LD_INT 0
71693: PPUSH
// uc_side := side ;
71694: LD_ADDR_OWVAR 20
71698: PUSH
71699: LD_VAR 0 1
71703: ST_TO_ADDR
// uc_nation := 3 ;
71704: LD_ADDR_OWVAR 21
71708: PUSH
71709: LD_INT 3
71711: ST_TO_ADDR
// vc_chassis := 25 ;
71712: LD_ADDR_OWVAR 37
71716: PUSH
71717: LD_INT 25
71719: ST_TO_ADDR
// vc_engine := engine_siberite ;
71720: LD_ADDR_OWVAR 39
71724: PUSH
71725: LD_INT 3
71727: ST_TO_ADDR
// vc_control := control_computer ;
71728: LD_ADDR_OWVAR 38
71732: PUSH
71733: LD_INT 3
71735: ST_TO_ADDR
// vc_weapon := 59 ;
71736: LD_ADDR_OWVAR 40
71740: PUSH
71741: LD_INT 59
71743: ST_TO_ADDR
// result := CreateVehicle ;
71744: LD_ADDR_VAR 0 5
71748: PUSH
71749: CALL_OW 45
71753: ST_TO_ADDR
// SetDir ( result , d ) ;
71754: LD_VAR 0 5
71758: PPUSH
71759: LD_VAR 0 4
71763: PPUSH
71764: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71768: LD_VAR 0 5
71772: PPUSH
71773: LD_VAR 0 2
71777: PPUSH
71778: LD_VAR 0 3
71782: PPUSH
71783: LD_INT 0
71785: PPUSH
71786: CALL_OW 48
// end ;
71790: LD_VAR 0 5
71794: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71795: LD_INT 0
71797: PPUSH
71798: PPUSH
71799: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71800: LD_ADDR_VAR 0 2
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71823: LD_VAR 0 1
71827: NOT
71828: PUSH
71829: LD_VAR 0 1
71833: PPUSH
71834: CALL_OW 264
71838: PUSH
71839: LD_INT 12
71841: PUSH
71842: LD_INT 51
71844: PUSH
71845: LD_INT 32
71847: PUSH
71848: LD_EXP 21
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: IN
71859: NOT
71860: OR
71861: IFFALSE 71865
// exit ;
71863: GO 71963
// for i := 1 to 3 do
71865: LD_ADDR_VAR 0 3
71869: PUSH
71870: DOUBLE
71871: LD_INT 1
71873: DEC
71874: ST_TO_ADDR
71875: LD_INT 3
71877: PUSH
71878: FOR_TO
71879: IFFALSE 71961
// begin tmp := GetCargo ( cargo , i ) ;
71881: LD_ADDR_VAR 0 4
71885: PUSH
71886: LD_VAR 0 1
71890: PPUSH
71891: LD_VAR 0 3
71895: PPUSH
71896: CALL_OW 289
71900: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71901: LD_ADDR_VAR 0 2
71905: PUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: LD_VAR 0 3
71915: PPUSH
71916: LD_VAR 0 4
71920: PPUSH
71921: CALL_OW 1
71925: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71926: LD_ADDR_VAR 0 2
71930: PUSH
71931: LD_VAR 0 2
71935: PPUSH
71936: LD_INT 4
71938: PPUSH
71939: LD_VAR 0 2
71943: PUSH
71944: LD_INT 4
71946: ARRAY
71947: PUSH
71948: LD_VAR 0 4
71952: PLUS
71953: PPUSH
71954: CALL_OW 1
71958: ST_TO_ADDR
// end ;
71959: GO 71878
71961: POP
71962: POP
// end ;
71963: LD_VAR 0 2
71967: RET
// export function Length ( array ) ; begin
71968: LD_INT 0
71970: PPUSH
// result := array + 0 ;
71971: LD_ADDR_VAR 0 2
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_INT 0
71983: PLUS
71984: ST_TO_ADDR
// end ; end_of_file
71985: LD_VAR 0 2
71989: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71990: LD_VAR 0 1
71994: PUSH
71995: LD_INT 200
71997: DOUBLE
71998: GREATEREQUAL
71999: IFFALSE 72007
72001: LD_INT 299
72003: DOUBLE
72004: LESSEQUAL
72005: IFTRUE 72009
72007: GO 72041
72009: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72010: LD_VAR 0 1
72014: PPUSH
72015: LD_VAR 0 2
72019: PPUSH
72020: LD_VAR 0 3
72024: PPUSH
72025: LD_VAR 0 4
72029: PPUSH
72030: LD_VAR 0 5
72034: PPUSH
72035: CALL 26892 0 5
72039: GO 72118
72041: LD_INT 300
72043: DOUBLE
72044: GREATEREQUAL
72045: IFFALSE 72053
72047: LD_INT 399
72049: DOUBLE
72050: LESSEQUAL
72051: IFTRUE 72055
72053: GO 72117
72055: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72056: LD_VAR 0 1
72060: PPUSH
72061: LD_VAR 0 2
72065: PPUSH
72066: LD_VAR 0 3
72070: PPUSH
72071: LD_VAR 0 4
72075: PPUSH
72076: LD_VAR 0 5
72080: PPUSH
72081: LD_VAR 0 6
72085: PPUSH
72086: LD_VAR 0 7
72090: PPUSH
72091: LD_VAR 0 8
72095: PPUSH
72096: LD_VAR 0 9
72100: PPUSH
72101: LD_VAR 0 10
72105: PPUSH
72106: LD_VAR 0 11
72110: PPUSH
72111: CALL 23287 0 11
72115: GO 72118
72117: POP
// end ;
72118: PPOPN 11
72120: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72121: LD_VAR 0 1
72125: PPUSH
72126: LD_VAR 0 2
72130: PPUSH
72131: LD_VAR 0 3
72135: PPUSH
72136: LD_VAR 0 4
72140: PPUSH
72141: LD_VAR 0 5
72145: PPUSH
72146: CALL 26628 0 5
// end ; end_of_file
72150: PPOPN 5
72152: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72153: LD_VAR 0 1
72157: PPUSH
72158: LD_VAR 0 2
72162: PPUSH
72163: LD_VAR 0 3
72167: PPUSH
72168: LD_VAR 0 4
72172: PPUSH
72173: LD_VAR 0 5
72177: PPUSH
72178: LD_VAR 0 6
72182: PPUSH
72183: CALL 10980 0 6
// end ;
72187: PPOPN 6
72189: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72190: LD_INT 0
72192: PPUSH
// begin if not units then
72193: LD_VAR 0 1
72197: NOT
72198: IFFALSE 72202
// exit ;
72200: GO 72202
// end ;
72202: PPOPN 7
72204: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72205: CALL 10951 0 0
// end ;
72209: PPOPN 1
72211: END
