// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10844 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 32650 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 37511 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 32650 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 32650 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 32650 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 37511 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 37511 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 66630 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 37511 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 72522 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 32734 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2250
1740: PUSH
1741: LD_INT 3500
1743: PUSH
1744: LD_INT 4500
1746: PUSH
1747: LD_INT 5600
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 37511 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 37511 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 66551 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 70382 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 34773 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 70863 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 70780 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 46107 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 72986 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27366 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 70780 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27424 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 71743 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 70382 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 70382 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27408 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 37511 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 72522 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 37511 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 72522 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 37511 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 72522 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: EQUAL
9957: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9958: LD_EXP 8
9962: PPUSH
9963: LD_STRING 14_JMM
9965: PPUSH
9966: CALL_OW 38
// if tick <= 50 50$00 then
9970: LD_OWVAR 1
9974: PUSH
9975: LD_INT 105000
9977: LESSEQUAL
9978: IFFALSE 9987
// SetAchievement ( ACH_ASPEED_14 ) ;
9980: LD_STRING ACH_ASPEED_14
9982: PPUSH
9983: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9987: LD_EXP 8
9991: PPUSH
9992: CALL_OW 310
9996: PUSH
9997: LD_EXP 8
10001: PPUSH
10002: CALL_OW 310
10006: PPUSH
10007: CALL_OW 247
10011: PUSH
10012: LD_INT 2
10014: EQUAL
10015: AND
10016: IFFALSE 10098
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_EXP 8
10027: PPUSH
10028: CALL_OW 310
10032: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 265
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 262
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: CALL_OW 264
10081: PUSH
10082: EMPTY
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: LD_STRING 14_JMMVeh_1
10093: PPUSH
10094: CALL_OW 39
// end ; if fastEnd then
10098: LD_VAR 0 1
10102: IFFALSE 10193
// begin AddMedal ( fastend , - 1 ) ;
10104: LD_STRING fastend
10106: PPUSH
10107: LD_INT 1
10109: NEG
10110: PPUSH
10111: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10115: LD_STRING fastend
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10126: LD_STRING fastend
10128: PPUSH
10129: LD_INT 1
10131: NEG
10132: PPUSH
10133: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10137: LD_EXP 2
10141: PPUSH
10142: LD_STRING 14_JMMGirl_1
10144: PPUSH
10145: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_STRING 14_JMMGirlStatus_1
10154: PPUSH
10155: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_STRING 14_KappaStatus_1
10164: PPUSH
10165: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10169: LD_STRING Eliminate
10171: PPUSH
10172: CALL_OW 102
// RewardPeople ( JMM ) ;
10176: LD_EXP 8
10180: PPUSH
10181: CALL_OW 43
// YouWin ;
10185: CALL_OW 103
// exit ;
10189: GO 10839
// end else
10191: GO 10732
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10193: LD_EXP 2
10197: PPUSH
10198: LD_STRING 14_JMMGirl_1
10200: PPUSH
10201: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10205: LD_VAR 0 7
10209: PPUSH
10210: LD_STRING 14_KappaStatus_1
10212: PPUSH
10213: CALL_OW 39
// case JMMGirl of 1 :
10217: LD_EXP 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10358
10230: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10231: LD_EXP 10
10235: PPUSH
10236: CALL_OW 302
10240: PUSH
10241: LD_EXP 10
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: LD_INT 1
10253: EQUAL
10254: AND
10255: PUSH
10256: LD_VAR 0 7
10260: PUSH
10261: LD_EXP 8
10265: PPUSH
10266: CALL_OW 310
10270: PPUSH
10271: LD_EXP 10
10275: PPUSH
10276: CALL_OW 310
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 10
10288: LESS
10289: OR
10290: AND
10291: IFFALSE 10335
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_STRING 14_JMMGirlStatus_1
10298: PPUSH
10299: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10303: LD_EXP 10
10307: PPUSH
10308: LD_STRING 14_Joan
10310: PPUSH
10311: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10315: LD_STRING protect
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 101
// m1 := true ;
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// end else
10333: GO 10356
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10335: LD_INT 0
10337: PPUSH
10338: LD_STRING 14_JMMGirlStatus_1
10340: PPUSH
10341: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10345: LD_STRING protect
10347: PPUSH
10348: LD_INT 1
10350: NEG
10351: PPUSH
10352: CALL_OW 101
// end ; end ; 2 :
10356: GO 10631
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10494
10366: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10367: LD_EXP 11
10371: PPUSH
10372: CALL_OW 302
10376: PUSH
10377: LD_EXP 11
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: AND
10391: PUSH
10392: LD_VAR 0 7
10396: PUSH
10397: LD_EXP 8
10401: PPUSH
10402: CALL_OW 310
10406: PPUSH
10407: LD_EXP 11
10411: PPUSH
10412: CALL_OW 310
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 10
10424: LESS
10425: OR
10426: AND
10427: IFFALSE 10471
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10429: LD_INT 1
10431: PPUSH
10432: LD_STRING 14_JMMGirlStatus_1
10434: PPUSH
10435: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10439: LD_EXP 11
10443: PPUSH
10444: LD_STRING 14_Lisa
10446: PPUSH
10447: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10451: LD_STRING protect
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 101
// m1 := true ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// end else
10469: GO 10492
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10471: LD_INT 0
10473: PPUSH
10474: LD_STRING 14_JMMGirlStatus_1
10476: PPUSH
10477: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10481: LD_STRING protect
10483: PPUSH
10484: LD_INT 2
10486: NEG
10487: PPUSH
10488: CALL_OW 101
// end ; end ; 3 :
10492: GO 10631
10494: LD_INT 3
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10630
10502: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10503: LD_EXP 12
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 12
10517: PPUSH
10518: CALL_OW 255
10522: PUSH
10523: LD_INT 1
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_VAR 0 7
10532: PUSH
10533: LD_EXP 8
10537: PPUSH
10538: CALL_OW 310
10542: PPUSH
10543: LD_EXP 12
10547: PPUSH
10548: CALL_OW 310
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 10
10560: LESS
10561: OR
10562: AND
10563: IFFALSE 10607
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10565: LD_INT 1
10567: PPUSH
10568: LD_STRING 14_JMMGirlStatus_1
10570: PPUSH
10571: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10575: LD_EXP 12
10579: PPUSH
10580: LD_STRING 14_Connie
10582: PPUSH
10583: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10587: LD_STRING protect
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// m1 := true ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// end else
10605: GO 10628
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_STRING 14_JMMGirlStatus_1
10612: PPUSH
10613: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10617: LD_STRING protect
10619: PPUSH
10620: LD_INT 3
10622: NEG
10623: PPUSH
10624: CALL_OW 101
// end ; end ; end ;
10628: GO 10631
10630: POP
// if amLaserCounter >= 2 then
10631: LD_EXP 7
10635: PUSH
10636: LD_INT 2
10638: GREATEREQUAL
10639: IFFALSE 10661
// begin AddMedal ( double , 1 ) ;
10641: LD_STRING double
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 101
// m2 := true ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end else
10659: GO 10695
// begin if amLaserCounter = 1 then
10661: LD_EXP 7
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10684
// AddMedal ( double , - 2 ) else
10671: LD_STRING double
10673: PPUSH
10674: LD_INT 2
10676: NEG
10677: PPUSH
10678: CALL_OW 101
10682: GO 10695
// AddMedal ( double , - 1 ) ;
10684: LD_STRING double
10686: PPUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: CALL_OW 101
// end ; if ruEliminated then
10695: LD_VAR 0 7
10699: IFFALSE 10721
// begin AddMedal ( base , 1 ) ;
10701: LD_STRING base
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 101
// m3 := true ;
10711: LD_ADDR_VAR 0 6
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// end else
10719: GO 10732
// AddMedal ( base , - 1 ) ;
10721: LD_STRING base
10723: PPUSH
10724: LD_INT 1
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10732: LD_VAR 0 4
10736: PUSH
10737: LD_VAR 0 5
10741: AND
10742: PUSH
10743: LD_VAR 0 6
10747: AND
10748: PUSH
10749: LD_OWVAR 67
10753: PUSH
10754: LD_INT 3
10756: GREATEREQUAL
10757: AND
10758: IFFALSE 10770
// SetAchievementEX ( ACH_AMER , 14 ) ;
10760: LD_STRING ACH_AMER
10762: PPUSH
10763: LD_INT 14
10765: PPUSH
10766: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10770: LD_STRING Eliminate
10772: PPUSH
10773: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: CALL_OW 43
// YouWin ;
10835: CALL_OW 103
// end ; end_of_file
10839: LD_VAR 0 2
10843: RET
// export function CreateNature ; var i , un ; begin
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// PrepareEnchidna ;
10849: CALL 66819 0 0
// for i := 1 to 3 do
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_INT 3
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10916
// begin un := CreateHuman ;
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: CALL_OW 44
10878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 9
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// end ;
10914: GO 10866
10916: POP
10917: POP
// PrepareHorse ;
10918: CALL 66979 0 0
// for i := 1 to 2 do
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 2
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10985
// begin un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 5
10958: PPUSH
10959: CALL_OW 12
10963: PPUSH
10964: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 9
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 49
// end ;
10983: GO 10935
10985: POP
10986: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11086
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL 66630 0 1
// un := CreateHuman ;
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 5
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: LD_INT 0
11079: PPUSH
11080: CALL_OW 49
// end ;
11084: GO 11021
11086: POP
11087: POP
// PrepareFish ;
11088: CALL 66899 0 0
// for i := 1 to 2 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 2
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11155
// begin un := CreateHuman ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: CALL_OW 44
11117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: LD_INT 5
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// end ;
11153: GO 11105
11155: POP
11156: POP
// PrepareFrog ;
11157: CALL 66859 0 0
// for i := 1 to 2 do
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_INT 2
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11224
// begin un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 5
11197: PPUSH
11198: CALL_OW 12
11202: PPUSH
11203: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 7
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL_OW 49
// end ;
11222: GO 11174
11224: POP
11225: POP
// PrepareMastodont ;
11226: CALL 67019 0 0
// un := CreateVehicle ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: CALL_OW 45
11239: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 166
11247: PPUSH
11248: LD_INT 134
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL 72522 0 5
// end ; end_of_file
11261: LD_VAR 0 1
11265: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11266: LD_INT 14
11268: PPUSH
11269: CALL_OW 435
11273: PUSH
11274: LD_INT 20
11276: LESS
11277: IFFALSE 11319
11279: GO 11281
11281: DISABLE
// begin enable ;
11282: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11283: LD_INT 35
11285: PPUSH
11286: LD_INT 735
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 5
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 14
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 55
// end ;
11319: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11320: LD_INT 13
11322: PPUSH
11323: CALL_OW 435
11327: PUSH
11328: LD_INT 30
11330: LESS
11331: IFFALSE 11373
11333: GO 11335
11335: DISABLE
// begin enable ;
11336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11337: LD_INT 35
11339: PPUSH
11340: LD_INT 735
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 13
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 55
// end ;
11373: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11374: LD_INT 13
11376: PPUSH
11377: CALL_OW 435
11381: PUSH
11382: LD_INT 30
11384: LESS
11385: IFFALSE 11418
11387: GO 11389
11389: DISABLE
// begin enable ;
11390: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 5
11396: PPUSH
11397: CALL_OW 12
11401: PPUSH
11402: LD_INT 133
11404: PPUSH
11405: LD_INT 122
11407: PPUSH
11408: LD_INT 20
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 56
// end ; end_of_file end_of_file
11418: END
// export globalGameSaveCounter ; every 0 0$1 do
11419: GO 11421
11421: DISABLE
// begin enable ;
11422: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11423: LD_STRING updateTimer(
11425: PUSH
11426: LD_OWVAR 1
11430: STR
11431: PUSH
11432: LD_STRING );
11434: STR
11435: PPUSH
11436: CALL_OW 559
// end ;
11440: END
// every 0 0$1 do
11441: GO 11443
11443: DISABLE
// begin globalGameSaveCounter := 0 ;
11444: LD_ADDR_EXP 21
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11452: LD_STRING setGameSaveCounter(0)
11454: PPUSH
11455: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11459: LD_STRING initStreamRollete();
11461: PPUSH
11462: CALL_OW 559
// InitStreamMode ;
11466: CALL 12809 0 0
// DefineStreamItems ( false ) ;
11470: LD_INT 0
11472: PPUSH
11473: CALL 13273 0 1
// end ;
11477: END
// export function SOS_MapStart ( ) ; begin
11478: LD_INT 0
11480: PPUSH
// if streamModeActive then
11481: LD_EXP 22
11485: IFFALSE 11494
// DefineStreamItems ( true ) ;
11487: LD_INT 1
11489: PPUSH
11490: CALL 13273 0 1
// UpdateLuaVariables ( ) ;
11494: CALL 11511 0 0
// UpdateFactoryWaypoints ( ) ;
11498: CALL 26275 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11502: CALL 26527 0 0
// end ;
11506: LD_VAR 0 1
11510: RET
// function UpdateLuaVariables ( ) ; begin
11511: LD_INT 0
11513: PPUSH
// if globalGameSaveCounter then
11514: LD_EXP 21
11518: IFFALSE 11552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11520: LD_ADDR_EXP 21
11524: PUSH
11525: LD_EXP 21
11529: PPUSH
11530: CALL 71743 0 1
11534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11535: LD_STRING setGameSaveCounter(
11537: PUSH
11538: LD_EXP 21
11542: STR
11543: PUSH
11544: LD_STRING )
11546: STR
11547: PPUSH
11548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11552: LD_STRING setGameDifficulty(
11554: PUSH
11555: LD_OWVAR 67
11559: STR
11560: PUSH
11561: LD_STRING )
11563: STR
11564: PPUSH
11565: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11569: LD_STRING displayDifficulty(
11571: PUSH
11572: LD_OWVAR 67
11576: STR
11577: PUSH
11578: LD_STRING )
11580: STR
11581: PPUSH
11582: CALL_OW 559
// end ;
11586: LD_VAR 0 1
11590: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11591: LD_INT 0
11593: PPUSH
// if p2 = stream_mode then
11594: LD_VAR 0 2
11598: PUSH
11599: LD_INT 100
11601: EQUAL
11602: IFFALSE 12605
// begin if not StreamModeActive then
11604: LD_EXP 22
11608: NOT
11609: IFFALSE 11619
// StreamModeActive := true ;
11611: LD_ADDR_EXP 22
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// if p3 = 0 then
11619: LD_VAR 0 3
11623: PUSH
11624: LD_INT 0
11626: EQUAL
11627: IFFALSE 11633
// InitStreamMode ;
11629: CALL 12809 0 0
// if p3 = 1 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 1
11640: EQUAL
11641: IFFALSE 11651
// sRocket := true ;
11643: LD_ADDR_EXP 27
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 2 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 2
11658: EQUAL
11659: IFFALSE 11669
// sSpeed := true ;
11661: LD_ADDR_EXP 26
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 3 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 3
11676: EQUAL
11677: IFFALSE 11687
// sEngine := true ;
11679: LD_ADDR_EXP 28
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 4 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 4
11694: EQUAL
11695: IFFALSE 11705
// sSpec := true ;
11697: LD_ADDR_EXP 25
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 5 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 5
11712: EQUAL
11713: IFFALSE 11723
// sLevel := true ;
11715: LD_ADDR_EXP 29
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 6 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 6
11730: EQUAL
11731: IFFALSE 11741
// sArmoury := true ;
11733: LD_ADDR_EXP 30
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 7 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 7
11748: EQUAL
11749: IFFALSE 11759
// sRadar := true ;
11751: LD_ADDR_EXP 31
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 8 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 8
11766: EQUAL
11767: IFFALSE 11777
// sBunker := true ;
11769: LD_ADDR_EXP 32
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 9 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 9
11784: EQUAL
11785: IFFALSE 11795
// sHack := true ;
11787: LD_ADDR_EXP 33
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 10 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 10
11802: EQUAL
11803: IFFALSE 11813
// sFire := true ;
11805: LD_ADDR_EXP 34
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 11 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 11
11820: EQUAL
11821: IFFALSE 11831
// sRefresh := true ;
11823: LD_ADDR_EXP 35
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 12 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 12
11838: EQUAL
11839: IFFALSE 11849
// sExp := true ;
11841: LD_ADDR_EXP 36
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 13 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 13
11856: EQUAL
11857: IFFALSE 11867
// sDepot := true ;
11859: LD_ADDR_EXP 37
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 14 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 14
11874: EQUAL
11875: IFFALSE 11885
// sFlag := true ;
11877: LD_ADDR_EXP 38
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 15 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 15
11892: EQUAL
11893: IFFALSE 11903
// sKamikadze := true ;
11895: LD_ADDR_EXP 46
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 16 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 16
11910: EQUAL
11911: IFFALSE 11921
// sTroll := true ;
11913: LD_ADDR_EXP 47
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 17 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 17
11928: EQUAL
11929: IFFALSE 11939
// sSlow := true ;
11931: LD_ADDR_EXP 48
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 18 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 18
11946: EQUAL
11947: IFFALSE 11957
// sLack := true ;
11949: LD_ADDR_EXP 49
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 19 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 19
11964: EQUAL
11965: IFFALSE 11975
// sTank := true ;
11967: LD_ADDR_EXP 51
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 20 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 20
11982: EQUAL
11983: IFFALSE 11993
// sRemote := true ;
11985: LD_ADDR_EXP 52
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 21 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 21
12000: EQUAL
12001: IFFALSE 12011
// sPowell := true ;
12003: LD_ADDR_EXP 53
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 22 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 22
12018: EQUAL
12019: IFFALSE 12029
// sTeleport := true ;
12021: LD_ADDR_EXP 56
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 23 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 23
12036: EQUAL
12037: IFFALSE 12047
// sOilTower := true ;
12039: LD_ADDR_EXP 58
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 24 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 24
12054: EQUAL
12055: IFFALSE 12065
// sShovel := true ;
12057: LD_ADDR_EXP 59
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 25 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 25
12072: EQUAL
12073: IFFALSE 12083
// sSheik := true ;
12075: LD_ADDR_EXP 60
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 26 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 26
12090: EQUAL
12091: IFFALSE 12101
// sEarthquake := true ;
12093: LD_ADDR_EXP 62
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 27 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 27
12108: EQUAL
12109: IFFALSE 12119
// sAI := true ;
12111: LD_ADDR_EXP 63
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 28 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 28
12126: EQUAL
12127: IFFALSE 12137
// sCargo := true ;
12129: LD_ADDR_EXP 66
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 29 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 29
12144: EQUAL
12145: IFFALSE 12155
// sDLaser := true ;
12147: LD_ADDR_EXP 67
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 30 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 30
12162: EQUAL
12163: IFFALSE 12173
// sExchange := true ;
12165: LD_ADDR_EXP 68
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 31 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 31
12180: EQUAL
12181: IFFALSE 12191
// sFac := true ;
12183: LD_ADDR_EXP 69
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 32 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 32
12198: EQUAL
12199: IFFALSE 12209
// sPower := true ;
12201: LD_ADDR_EXP 70
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 33 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 33
12216: EQUAL
12217: IFFALSE 12227
// sRandom := true ;
12219: LD_ADDR_EXP 71
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 34 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 34
12234: EQUAL
12235: IFFALSE 12245
// sShield := true ;
12237: LD_ADDR_EXP 72
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 35 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 35
12252: EQUAL
12253: IFFALSE 12263
// sTime := true ;
12255: LD_ADDR_EXP 73
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 36 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 36
12270: EQUAL
12271: IFFALSE 12281
// sTools := true ;
12273: LD_ADDR_EXP 74
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 101 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 101
12288: EQUAL
12289: IFFALSE 12299
// sSold := true ;
12291: LD_ADDR_EXP 39
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 102 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 102
12306: EQUAL
12307: IFFALSE 12317
// sDiff := true ;
12309: LD_ADDR_EXP 40
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 103 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 103
12324: EQUAL
12325: IFFALSE 12335
// sFog := true ;
12327: LD_ADDR_EXP 43
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 104 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 104
12342: EQUAL
12343: IFFALSE 12353
// sReset := true ;
12345: LD_ADDR_EXP 44
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 105 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 105
12360: EQUAL
12361: IFFALSE 12371
// sSun := true ;
12363: LD_ADDR_EXP 45
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 106 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 106
12378: EQUAL
12379: IFFALSE 12389
// sTiger := true ;
12381: LD_ADDR_EXP 41
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 107 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 107
12396: EQUAL
12397: IFFALSE 12407
// sBomb := true ;
12399: LD_ADDR_EXP 42
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 108 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 108
12414: EQUAL
12415: IFFALSE 12425
// sWound := true ;
12417: LD_ADDR_EXP 50
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 109 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 109
12432: EQUAL
12433: IFFALSE 12443
// sBetray := true ;
12435: LD_ADDR_EXP 54
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 110 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 110
12450: EQUAL
12451: IFFALSE 12461
// sContamin := true ;
12453: LD_ADDR_EXP 55
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 111 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 111
12468: EQUAL
12469: IFFALSE 12479
// sOil := true ;
12471: LD_ADDR_EXP 57
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 112 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 112
12486: EQUAL
12487: IFFALSE 12497
// sStu := true ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 113 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 113
12504: EQUAL
12505: IFFALSE 12515
// sBazooka := true ;
12507: LD_ADDR_EXP 64
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 114 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 114
12522: EQUAL
12523: IFFALSE 12533
// sMortar := true ;
12525: LD_ADDR_EXP 65
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 115 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 115
12540: EQUAL
12541: IFFALSE 12551
// sRanger := true ;
12543: LD_ADDR_EXP 75
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 116 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 116
12558: EQUAL
12559: IFFALSE 12569
// sComputer := true ;
12561: LD_ADDR_EXP 76
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 117 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 117
12576: EQUAL
12577: IFFALSE 12587
// s30 := true ;
12579: LD_ADDR_EXP 77
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 118 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 118
12594: EQUAL
12595: IFFALSE 12605
// s60 := true ;
12597: LD_ADDR_EXP 78
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// end ; if p2 = hack_mode then
12605: LD_VAR 0 2
12609: PUSH
12610: LD_INT 101
12612: EQUAL
12613: IFFALSE 12741
// begin case p3 of 1 :
12615: LD_VAR 0 3
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12635
12628: POP
// hHackUnlimitedResources ; 2 :
12629: CALL 24888 0 0
12633: GO 12741
12635: LD_INT 2
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12650
12643: POP
// hHackSetLevel10 ; 3 :
12644: CALL 25021 0 0
12648: GO 12741
12650: LD_INT 3
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12665
12658: POP
// hHackSetLevel10YourUnits ; 4 :
12659: CALL 25106 0 0
12663: GO 12741
12665: LD_INT 4
12667: DOUBLE
12668: EQUAL
12669: IFTRUE 12673
12671: GO 12680
12673: POP
// hHackInvincible ; 5 :
12674: CALL 25554 0 0
12678: GO 12741
12680: LD_INT 5
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12695
12688: POP
// hHackInvisible ; 6 :
12689: CALL 25665 0 0
12693: GO 12741
12695: LD_INT 6
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12710
12703: POP
// hHackChangeYourSide ; 7 :
12704: CALL 25722 0 0
12708: GO 12741
12710: LD_INT 7
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12725
12718: POP
// hHackChangeUnitSide ; 8 :
12719: CALL 25764 0 0
12723: GO 12741
12725: LD_INT 8
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12740
12733: POP
// hHackFog ; end ;
12734: CALL 25865 0 0
12738: GO 12741
12740: POP
// end ; if p2 = game_save_mode then
12741: LD_VAR 0 2
12745: PUSH
12746: LD_INT 102
12748: EQUAL
12749: IFFALSE 12804
// begin if p3 = 1 then
12751: LD_VAR 0 3
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: IFFALSE 12771
// globalGameSaveCounter := p4 ;
12761: LD_ADDR_EXP 21
12765: PUSH
12766: LD_VAR 0 4
12770: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12771: LD_VAR 0 3
12775: PUSH
12776: LD_INT 2
12778: EQUAL
12779: PUSH
12780: LD_EXP 21
12784: AND
12785: IFFALSE 12804
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12787: LD_STRING setGameSaveCounter(
12789: PUSH
12790: LD_EXP 21
12794: STR
12795: PUSH
12796: LD_STRING )
12798: STR
12799: PPUSH
12800: CALL_OW 559
// end ; end ;
12804: LD_VAR 0 7
12808: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12809: LD_INT 0
12811: PPUSH
// streamModeActive := false ;
12812: LD_ADDR_EXP 22
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// normalCounter := 36 ;
12820: LD_ADDR_EXP 23
12824: PUSH
12825: LD_INT 36
12827: ST_TO_ADDR
// hardcoreCounter := 18 ;
12828: LD_ADDR_EXP 24
12832: PUSH
12833: LD_INT 18
12835: ST_TO_ADDR
// sRocket := false ;
12836: LD_ADDR_EXP 27
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sSpeed := false ;
12844: LD_ADDR_EXP 26
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sEngine := false ;
12852: LD_ADDR_EXP 28
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sSpec := false ;
12860: LD_ADDR_EXP 25
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sLevel := false ;
12868: LD_ADDR_EXP 29
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sArmoury := false ;
12876: LD_ADDR_EXP 30
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sRadar := false ;
12884: LD_ADDR_EXP 31
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sBunker := false ;
12892: LD_ADDR_EXP 32
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sHack := false ;
12900: LD_ADDR_EXP 33
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sFire := false ;
12908: LD_ADDR_EXP 34
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sRefresh := false ;
12916: LD_ADDR_EXP 35
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sExp := false ;
12924: LD_ADDR_EXP 36
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sDepot := false ;
12932: LD_ADDR_EXP 37
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sFlag := false ;
12940: LD_ADDR_EXP 38
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sKamikadze := false ;
12948: LD_ADDR_EXP 46
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sTroll := false ;
12956: LD_ADDR_EXP 47
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sSlow := false ;
12964: LD_ADDR_EXP 48
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sLack := false ;
12972: LD_ADDR_EXP 49
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sTank := false ;
12980: LD_ADDR_EXP 51
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sRemote := false ;
12988: LD_ADDR_EXP 52
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sPowell := false ;
12996: LD_ADDR_EXP 53
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sTeleport := false ;
13004: LD_ADDR_EXP 56
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sOilTower := false ;
13012: LD_ADDR_EXP 58
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sShovel := false ;
13020: LD_ADDR_EXP 59
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sSheik := false ;
13028: LD_ADDR_EXP 60
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sEarthquake := false ;
13036: LD_ADDR_EXP 62
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sAI := false ;
13044: LD_ADDR_EXP 63
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sCargo := false ;
13052: LD_ADDR_EXP 66
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sDLaser := false ;
13060: LD_ADDR_EXP 67
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sExchange := false ;
13068: LD_ADDR_EXP 68
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sFac := false ;
13076: LD_ADDR_EXP 69
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sPower := false ;
13084: LD_ADDR_EXP 70
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sRandom := false ;
13092: LD_ADDR_EXP 71
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// sShield := false ;
13100: LD_ADDR_EXP 72
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// sTime := false ;
13108: LD_ADDR_EXP 73
13112: PUSH
13113: LD_INT 0
13115: ST_TO_ADDR
// sTools := false ;
13116: LD_ADDR_EXP 74
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// sSold := false ;
13124: LD_ADDR_EXP 39
13128: PUSH
13129: LD_INT 0
13131: ST_TO_ADDR
// sDiff := false ;
13132: LD_ADDR_EXP 40
13136: PUSH
13137: LD_INT 0
13139: ST_TO_ADDR
// sFog := false ;
13140: LD_ADDR_EXP 43
13144: PUSH
13145: LD_INT 0
13147: ST_TO_ADDR
// sReset := false ;
13148: LD_ADDR_EXP 44
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// sSun := false ;
13156: LD_ADDR_EXP 45
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// sTiger := false ;
13164: LD_ADDR_EXP 41
13168: PUSH
13169: LD_INT 0
13171: ST_TO_ADDR
// sBomb := false ;
13172: LD_ADDR_EXP 42
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// sWound := false ;
13180: LD_ADDR_EXP 50
13184: PUSH
13185: LD_INT 0
13187: ST_TO_ADDR
// sBetray := false ;
13188: LD_ADDR_EXP 54
13192: PUSH
13193: LD_INT 0
13195: ST_TO_ADDR
// sContamin := false ;
13196: LD_ADDR_EXP 55
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// sOil := false ;
13204: LD_ADDR_EXP 57
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// sStu := false ;
13212: LD_ADDR_EXP 61
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// sBazooka := false ;
13220: LD_ADDR_EXP 64
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// sMortar := false ;
13228: LD_ADDR_EXP 65
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// sRanger := false ;
13236: LD_ADDR_EXP 75
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// sComputer := false ;
13244: LD_ADDR_EXP 76
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// s30 := false ;
13252: LD_ADDR_EXP 77
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// s60 := false ;
13260: LD_ADDR_EXP 78
13264: PUSH
13265: LD_INT 0
13267: ST_TO_ADDR
// end ;
13268: LD_VAR 0 1
13272: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
// result := [ ] ;
13282: LD_ADDR_VAR 0 2
13286: PUSH
13287: EMPTY
13288: ST_TO_ADDR
// if campaign_id = 1 then
13289: LD_OWVAR 69
13293: PUSH
13294: LD_INT 1
13296: EQUAL
13297: IFFALSE 16463
// begin case mission_number of 1 :
13299: LD_OWVAR 70
13303: PUSH
13304: LD_INT 1
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13388
13312: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13313: LD_ADDR_VAR 0 2
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 4
13323: PUSH
13324: LD_INT 11
13326: PUSH
13327: LD_INT 12
13329: PUSH
13330: LD_INT 15
13332: PUSH
13333: LD_INT 16
13335: PUSH
13336: LD_INT 22
13338: PUSH
13339: LD_INT 23
13341: PUSH
13342: LD_INT 26
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 101
13358: PUSH
13359: LD_INT 102
13361: PUSH
13362: LD_INT 106
13364: PUSH
13365: LD_INT 116
13367: PUSH
13368: LD_INT 117
13370: PUSH
13371: LD_INT 118
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: ST_TO_ADDR
13386: GO 16461
13388: LD_INT 2
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13480
13396: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 11
13410: PUSH
13411: LD_INT 12
13413: PUSH
13414: LD_INT 15
13416: PUSH
13417: LD_INT 16
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 26
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 101
13442: PUSH
13443: LD_INT 102
13445: PUSH
13446: LD_INT 105
13448: PUSH
13449: LD_INT 106
13451: PUSH
13452: LD_INT 108
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: ST_TO_ADDR
13478: GO 16461
13480: LD_INT 3
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13576
13488: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13489: LD_ADDR_VAR 0 2
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: LD_INT 4
13499: PUSH
13500: LD_INT 5
13502: PUSH
13503: LD_INT 11
13505: PUSH
13506: LD_INT 12
13508: PUSH
13509: LD_INT 15
13511: PUSH
13512: LD_INT 16
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_INT 26
13520: PUSH
13521: LD_INT 36
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 101
13538: PUSH
13539: LD_INT 102
13541: PUSH
13542: LD_INT 105
13544: PUSH
13545: LD_INT 106
13547: PUSH
13548: LD_INT 108
13550: PUSH
13551: LD_INT 116
13553: PUSH
13554: LD_INT 117
13556: PUSH
13557: LD_INT 118
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: ST_TO_ADDR
13574: GO 16461
13576: LD_INT 4
13578: DOUBLE
13579: EQUAL
13580: IFTRUE 13584
13582: GO 13680
13584: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 4
13595: PUSH
13596: LD_INT 5
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: LD_INT 11
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 15
13610: PUSH
13611: LD_INT 16
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 23
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 36
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 101
13642: PUSH
13643: LD_INT 102
13645: PUSH
13646: LD_INT 105
13648: PUSH
13649: LD_INT 106
13651: PUSH
13652: LD_INT 108
13654: PUSH
13655: LD_INT 116
13657: PUSH
13658: LD_INT 117
13660: PUSH
13661: LD_INT 118
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: ST_TO_ADDR
13678: GO 16461
13680: LD_INT 5
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13800
13688: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_INT 2
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: LD_INT 5
13702: PUSH
13703: LD_INT 6
13705: PUSH
13706: LD_INT 8
13708: PUSH
13709: LD_INT 11
13711: PUSH
13712: LD_INT 12
13714: PUSH
13715: LD_INT 15
13717: PUSH
13718: LD_INT 16
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_INT 23
13726: PUSH
13727: LD_INT 25
13729: PUSH
13730: LD_INT 26
13732: PUSH
13733: LD_INT 36
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 101
13754: PUSH
13755: LD_INT 102
13757: PUSH
13758: LD_INT 105
13760: PUSH
13761: LD_INT 106
13763: PUSH
13764: LD_INT 108
13766: PUSH
13767: LD_INT 109
13769: PUSH
13770: LD_INT 112
13772: PUSH
13773: LD_INT 116
13775: PUSH
13776: LD_INT 117
13778: PUSH
13779: LD_INT 118
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 16461
13800: LD_INT 6
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13940
13808: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 5
13822: PUSH
13823: LD_INT 6
13825: PUSH
13826: LD_INT 8
13828: PUSH
13829: LD_INT 11
13831: PUSH
13832: LD_INT 12
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 20
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 22
13849: PUSH
13850: LD_INT 23
13852: PUSH
13853: LD_INT 25
13855: PUSH
13856: LD_INT 26
13858: PUSH
13859: LD_INT 30
13861: PUSH
13862: LD_INT 31
13864: PUSH
13865: LD_INT 32
13867: PUSH
13868: LD_INT 36
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 101
13894: PUSH
13895: LD_INT 102
13897: PUSH
13898: LD_INT 105
13900: PUSH
13901: LD_INT 106
13903: PUSH
13904: LD_INT 108
13906: PUSH
13907: LD_INT 109
13909: PUSH
13910: LD_INT 112
13912: PUSH
13913: LD_INT 116
13915: PUSH
13916: LD_INT 117
13918: PUSH
13919: LD_INT 118
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: ST_TO_ADDR
13938: GO 16461
13940: LD_INT 7
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 14060
13948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: LD_INT 7
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 15
13974: PUSH
13975: LD_INT 16
13977: PUSH
13978: LD_INT 20
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_INT 23
13989: PUSH
13990: LD_INT 25
13992: PUSH
13993: LD_INT 26
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 101
14014: PUSH
14015: LD_INT 102
14017: PUSH
14018: LD_INT 103
14020: PUSH
14021: LD_INT 105
14023: PUSH
14024: LD_INT 106
14026: PUSH
14027: LD_INT 108
14029: PUSH
14030: LD_INT 112
14032: PUSH
14033: LD_INT 116
14035: PUSH
14036: LD_INT 117
14038: PUSH
14039: LD_INT 118
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: ST_TO_ADDR
14058: GO 16461
14060: LD_INT 8
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14208
14068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 4
14079: PUSH
14080: LD_INT 5
14082: PUSH
14083: LD_INT 6
14085: PUSH
14086: LD_INT 7
14088: PUSH
14089: LD_INT 8
14091: PUSH
14092: LD_INT 11
14094: PUSH
14095: LD_INT 12
14097: PUSH
14098: LD_INT 15
14100: PUSH
14101: LD_INT 16
14103: PUSH
14104: LD_INT 20
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_INT 23
14115: PUSH
14116: LD_INT 25
14118: PUSH
14119: LD_INT 26
14121: PUSH
14122: LD_INT 30
14124: PUSH
14125: LD_INT 31
14127: PUSH
14128: LD_INT 32
14130: PUSH
14131: LD_INT 36
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 101
14158: PUSH
14159: LD_INT 102
14161: PUSH
14162: LD_INT 103
14164: PUSH
14165: LD_INT 105
14167: PUSH
14168: LD_INT 106
14170: PUSH
14171: LD_INT 108
14173: PUSH
14174: LD_INT 109
14176: PUSH
14177: LD_INT 112
14179: PUSH
14180: LD_INT 116
14182: PUSH
14183: LD_INT 117
14185: PUSH
14186: LD_INT 118
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: ST_TO_ADDR
14206: GO 16461
14208: LD_INT 9
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14364
14216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14217: LD_ADDR_VAR 0 2
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 4
14227: PUSH
14228: LD_INT 5
14230: PUSH
14231: LD_INT 6
14233: PUSH
14234: LD_INT 7
14236: PUSH
14237: LD_INT 8
14239: PUSH
14240: LD_INT 11
14242: PUSH
14243: LD_INT 12
14245: PUSH
14246: LD_INT 15
14248: PUSH
14249: LD_INT 16
14251: PUSH
14252: LD_INT 20
14254: PUSH
14255: LD_INT 21
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 23
14263: PUSH
14264: LD_INT 25
14266: PUSH
14267: LD_INT 26
14269: PUSH
14270: LD_INT 28
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 31
14278: PUSH
14279: LD_INT 32
14281: PUSH
14282: LD_INT 36
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 101
14310: PUSH
14311: LD_INT 102
14313: PUSH
14314: LD_INT 103
14316: PUSH
14317: LD_INT 105
14319: PUSH
14320: LD_INT 106
14322: PUSH
14323: LD_INT 108
14325: PUSH
14326: LD_INT 109
14328: PUSH
14329: LD_INT 112
14331: PUSH
14332: LD_INT 114
14334: PUSH
14335: LD_INT 116
14337: PUSH
14338: LD_INT 117
14340: PUSH
14341: LD_INT 118
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: ST_TO_ADDR
14362: GO 16461
14364: LD_INT 10
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14568
14372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14373: LD_ADDR_VAR 0 2
14377: PUSH
14378: LD_INT 2
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: LD_INT 6
14389: PUSH
14390: LD_INT 7
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: LD_INT 9
14398: PUSH
14399: LD_INT 10
14401: PUSH
14402: LD_INT 11
14404: PUSH
14405: LD_INT 12
14407: PUSH
14408: LD_INT 13
14410: PUSH
14411: LD_INT 14
14413: PUSH
14414: LD_INT 15
14416: PUSH
14417: LD_INT 16
14419: PUSH
14420: LD_INT 17
14422: PUSH
14423: LD_INT 18
14425: PUSH
14426: LD_INT 19
14428: PUSH
14429: LD_INT 20
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 25
14446: PUSH
14447: LD_INT 26
14449: PUSH
14450: LD_INT 28
14452: PUSH
14453: LD_INT 30
14455: PUSH
14456: LD_INT 31
14458: PUSH
14459: LD_INT 32
14461: PUSH
14462: LD_INT 36
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 101
14498: PUSH
14499: LD_INT 102
14501: PUSH
14502: LD_INT 103
14504: PUSH
14505: LD_INT 104
14507: PUSH
14508: LD_INT 105
14510: PUSH
14511: LD_INT 106
14513: PUSH
14514: LD_INT 107
14516: PUSH
14517: LD_INT 108
14519: PUSH
14520: LD_INT 109
14522: PUSH
14523: LD_INT 110
14525: PUSH
14526: LD_INT 111
14528: PUSH
14529: LD_INT 112
14531: PUSH
14532: LD_INT 114
14534: PUSH
14535: LD_INT 116
14537: PUSH
14538: LD_INT 117
14540: PUSH
14541: LD_INT 118
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 16461
14568: LD_INT 11
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14780
14576: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 6
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 8
14602: PUSH
14603: LD_INT 9
14605: PUSH
14606: LD_INT 10
14608: PUSH
14609: LD_INT 11
14611: PUSH
14612: LD_INT 12
14614: PUSH
14615: LD_INT 13
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 28
14659: PUSH
14660: LD_INT 30
14662: PUSH
14663: LD_INT 31
14665: PUSH
14666: LD_INT 32
14668: PUSH
14669: LD_INT 34
14671: PUSH
14672: LD_INT 36
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 101
14710: PUSH
14711: LD_INT 102
14713: PUSH
14714: LD_INT 103
14716: PUSH
14717: LD_INT 104
14719: PUSH
14720: LD_INT 105
14722: PUSH
14723: LD_INT 106
14725: PUSH
14726: LD_INT 107
14728: PUSH
14729: LD_INT 108
14731: PUSH
14732: LD_INT 109
14734: PUSH
14735: LD_INT 110
14737: PUSH
14738: LD_INT 111
14740: PUSH
14741: LD_INT 112
14743: PUSH
14744: LD_INT 114
14746: PUSH
14747: LD_INT 116
14749: PUSH
14750: LD_INT 117
14752: PUSH
14753: LD_INT 118
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: ST_TO_ADDR
14778: GO 16461
14780: LD_INT 12
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 15008
14788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14789: LD_ADDR_VAR 0 2
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: LD_INT 4
14805: PUSH
14806: LD_INT 5
14808: PUSH
14809: LD_INT 6
14811: PUSH
14812: LD_INT 7
14814: PUSH
14815: LD_INT 8
14817: PUSH
14818: LD_INT 9
14820: PUSH
14821: LD_INT 10
14823: PUSH
14824: LD_INT 11
14826: PUSH
14827: LD_INT 12
14829: PUSH
14830: LD_INT 13
14832: PUSH
14833: LD_INT 14
14835: PUSH
14836: LD_INT 15
14838: PUSH
14839: LD_INT 16
14841: PUSH
14842: LD_INT 17
14844: PUSH
14845: LD_INT 18
14847: PUSH
14848: LD_INT 19
14850: PUSH
14851: LD_INT 20
14853: PUSH
14854: LD_INT 21
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 23
14862: PUSH
14863: LD_INT 24
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 26
14871: PUSH
14872: LD_INT 27
14874: PUSH
14875: LD_INT 28
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 36
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 101
14934: PUSH
14935: LD_INT 102
14937: PUSH
14938: LD_INT 103
14940: PUSH
14941: LD_INT 104
14943: PUSH
14944: LD_INT 105
14946: PUSH
14947: LD_INT 106
14949: PUSH
14950: LD_INT 107
14952: PUSH
14953: LD_INT 108
14955: PUSH
14956: LD_INT 109
14958: PUSH
14959: LD_INT 110
14961: PUSH
14962: LD_INT 111
14964: PUSH
14965: LD_INT 112
14967: PUSH
14968: LD_INT 113
14970: PUSH
14971: LD_INT 114
14973: PUSH
14974: LD_INT 116
14976: PUSH
14977: LD_INT 117
14979: PUSH
14980: LD_INT 118
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 16461
15008: LD_INT 13
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15224
15016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: LD_INT 1
15024: PUSH
15025: LD_INT 2
15027: PUSH
15028: LD_INT 3
15030: PUSH
15031: LD_INT 4
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: LD_INT 9
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 14
15054: PUSH
15055: LD_INT 15
15057: PUSH
15058: LD_INT 16
15060: PUSH
15061: LD_INT 17
15063: PUSH
15064: LD_INT 18
15066: PUSH
15067: LD_INT 19
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 24
15084: PUSH
15085: LD_INT 25
15087: PUSH
15088: LD_INT 26
15090: PUSH
15091: LD_INT 27
15093: PUSH
15094: LD_INT 28
15096: PUSH
15097: LD_INT 30
15099: PUSH
15100: LD_INT 31
15102: PUSH
15103: LD_INT 32
15105: PUSH
15106: LD_INT 33
15108: PUSH
15109: LD_INT 34
15111: PUSH
15112: LD_INT 36
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 101
15150: PUSH
15151: LD_INT 102
15153: PUSH
15154: LD_INT 103
15156: PUSH
15157: LD_INT 104
15159: PUSH
15160: LD_INT 105
15162: PUSH
15163: LD_INT 106
15165: PUSH
15166: LD_INT 107
15168: PUSH
15169: LD_INT 108
15171: PUSH
15172: LD_INT 109
15174: PUSH
15175: LD_INT 110
15177: PUSH
15178: LD_INT 111
15180: PUSH
15181: LD_INT 112
15183: PUSH
15184: LD_INT 113
15186: PUSH
15187: LD_INT 114
15189: PUSH
15190: LD_INT 116
15192: PUSH
15193: LD_INT 117
15195: PUSH
15196: LD_INT 118
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: ST_TO_ADDR
15222: GO 16461
15224: LD_INT 14
15226: DOUBLE
15227: EQUAL
15228: IFTRUE 15232
15230: GO 15456
15232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15233: LD_ADDR_VAR 0 2
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: LD_INT 3
15246: PUSH
15247: LD_INT 4
15249: PUSH
15250: LD_INT 5
15252: PUSH
15253: LD_INT 6
15255: PUSH
15256: LD_INT 7
15258: PUSH
15259: LD_INT 8
15261: PUSH
15262: LD_INT 9
15264: PUSH
15265: LD_INT 10
15267: PUSH
15268: LD_INT 11
15270: PUSH
15271: LD_INT 12
15273: PUSH
15274: LD_INT 13
15276: PUSH
15277: LD_INT 14
15279: PUSH
15280: LD_INT 15
15282: PUSH
15283: LD_INT 16
15285: PUSH
15286: LD_INT 17
15288: PUSH
15289: LD_INT 18
15291: PUSH
15292: LD_INT 19
15294: PUSH
15295: LD_INT 20
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_INT 23
15306: PUSH
15307: LD_INT 24
15309: PUSH
15310: LD_INT 25
15312: PUSH
15313: LD_INT 26
15315: PUSH
15316: LD_INT 27
15318: PUSH
15319: LD_INT 28
15321: PUSH
15322: LD_INT 29
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 31
15330: PUSH
15331: LD_INT 32
15333: PUSH
15334: LD_INT 33
15336: PUSH
15337: LD_INT 34
15339: PUSH
15340: LD_INT 36
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 101
15382: PUSH
15383: LD_INT 102
15385: PUSH
15386: LD_INT 103
15388: PUSH
15389: LD_INT 104
15391: PUSH
15392: LD_INT 105
15394: PUSH
15395: LD_INT 106
15397: PUSH
15398: LD_INT 107
15400: PUSH
15401: LD_INT 108
15403: PUSH
15404: LD_INT 109
15406: PUSH
15407: LD_INT 110
15409: PUSH
15410: LD_INT 111
15412: PUSH
15413: LD_INT 112
15415: PUSH
15416: LD_INT 113
15418: PUSH
15419: LD_INT 114
15421: PUSH
15422: LD_INT 116
15424: PUSH
15425: LD_INT 117
15427: PUSH
15428: LD_INT 118
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: ST_TO_ADDR
15454: GO 16461
15456: LD_INT 15
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15688
15464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: LD_INT 4
15481: PUSH
15482: LD_INT 5
15484: PUSH
15485: LD_INT 6
15487: PUSH
15488: LD_INT 7
15490: PUSH
15491: LD_INT 8
15493: PUSH
15494: LD_INT 9
15496: PUSH
15497: LD_INT 10
15499: PUSH
15500: LD_INT 11
15502: PUSH
15503: LD_INT 12
15505: PUSH
15506: LD_INT 13
15508: PUSH
15509: LD_INT 14
15511: PUSH
15512: LD_INT 15
15514: PUSH
15515: LD_INT 16
15517: PUSH
15518: LD_INT 17
15520: PUSH
15521: LD_INT 18
15523: PUSH
15524: LD_INT 19
15526: PUSH
15527: LD_INT 20
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_INT 23
15538: PUSH
15539: LD_INT 24
15541: PUSH
15542: LD_INT 25
15544: PUSH
15545: LD_INT 26
15547: PUSH
15548: LD_INT 27
15550: PUSH
15551: LD_INT 28
15553: PUSH
15554: LD_INT 29
15556: PUSH
15557: LD_INT 30
15559: PUSH
15560: LD_INT 31
15562: PUSH
15563: LD_INT 32
15565: PUSH
15566: LD_INT 33
15568: PUSH
15569: LD_INT 34
15571: PUSH
15572: LD_INT 36
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 101
15614: PUSH
15615: LD_INT 102
15617: PUSH
15618: LD_INT 103
15620: PUSH
15621: LD_INT 104
15623: PUSH
15624: LD_INT 105
15626: PUSH
15627: LD_INT 106
15629: PUSH
15630: LD_INT 107
15632: PUSH
15633: LD_INT 108
15635: PUSH
15636: LD_INT 109
15638: PUSH
15639: LD_INT 110
15641: PUSH
15642: LD_INT 111
15644: PUSH
15645: LD_INT 112
15647: PUSH
15648: LD_INT 113
15650: PUSH
15651: LD_INT 114
15653: PUSH
15654: LD_INT 116
15656: PUSH
15657: LD_INT 117
15659: PUSH
15660: LD_INT 118
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 16461
15688: LD_INT 16
15690: DOUBLE
15691: EQUAL
15692: IFTRUE 15696
15694: GO 15832
15696: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_INT 2
15704: PUSH
15705: LD_INT 4
15707: PUSH
15708: LD_INT 5
15710: PUSH
15711: LD_INT 7
15713: PUSH
15714: LD_INT 11
15716: PUSH
15717: LD_INT 12
15719: PUSH
15720: LD_INT 15
15722: PUSH
15723: LD_INT 16
15725: PUSH
15726: LD_INT 20
15728: PUSH
15729: LD_INT 21
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_INT 23
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 26
15743: PUSH
15744: LD_INT 30
15746: PUSH
15747: LD_INT 31
15749: PUSH
15750: LD_INT 32
15752: PUSH
15753: LD_INT 33
15755: PUSH
15756: LD_INT 34
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 101
15782: PUSH
15783: LD_INT 102
15785: PUSH
15786: LD_INT 103
15788: PUSH
15789: LD_INT 106
15791: PUSH
15792: LD_INT 108
15794: PUSH
15795: LD_INT 112
15797: PUSH
15798: LD_INT 113
15800: PUSH
15801: LD_INT 114
15803: PUSH
15804: LD_INT 116
15806: PUSH
15807: LD_INT 117
15809: PUSH
15810: LD_INT 118
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 16461
15832: LD_INT 17
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 16064
15840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: LD_INT 3
15854: PUSH
15855: LD_INT 4
15857: PUSH
15858: LD_INT 5
15860: PUSH
15861: LD_INT 6
15863: PUSH
15864: LD_INT 7
15866: PUSH
15867: LD_INT 8
15869: PUSH
15870: LD_INT 9
15872: PUSH
15873: LD_INT 10
15875: PUSH
15876: LD_INT 11
15878: PUSH
15879: LD_INT 12
15881: PUSH
15882: LD_INT 13
15884: PUSH
15885: LD_INT 14
15887: PUSH
15888: LD_INT 15
15890: PUSH
15891: LD_INT 16
15893: PUSH
15894: LD_INT 17
15896: PUSH
15897: LD_INT 18
15899: PUSH
15900: LD_INT 19
15902: PUSH
15903: LD_INT 20
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 23
15914: PUSH
15915: LD_INT 24
15917: PUSH
15918: LD_INT 25
15920: PUSH
15921: LD_INT 26
15923: PUSH
15924: LD_INT 27
15926: PUSH
15927: LD_INT 28
15929: PUSH
15930: LD_INT 29
15932: PUSH
15933: LD_INT 30
15935: PUSH
15936: LD_INT 31
15938: PUSH
15939: LD_INT 32
15941: PUSH
15942: LD_INT 33
15944: PUSH
15945: LD_INT 34
15947: PUSH
15948: LD_INT 36
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 101
15990: PUSH
15991: LD_INT 102
15993: PUSH
15994: LD_INT 103
15996: PUSH
15997: LD_INT 104
15999: PUSH
16000: LD_INT 105
16002: PUSH
16003: LD_INT 106
16005: PUSH
16006: LD_INT 107
16008: PUSH
16009: LD_INT 108
16011: PUSH
16012: LD_INT 109
16014: PUSH
16015: LD_INT 110
16017: PUSH
16018: LD_INT 111
16020: PUSH
16021: LD_INT 112
16023: PUSH
16024: LD_INT 113
16026: PUSH
16027: LD_INT 114
16029: PUSH
16030: LD_INT 116
16032: PUSH
16033: LD_INT 117
16035: PUSH
16036: LD_INT 118
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: ST_TO_ADDR
16062: GO 16461
16064: LD_INT 18
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16220
16072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: LD_INT 5
16086: PUSH
16087: LD_INT 7
16089: PUSH
16090: LD_INT 11
16092: PUSH
16093: LD_INT 12
16095: PUSH
16096: LD_INT 15
16098: PUSH
16099: LD_INT 16
16101: PUSH
16102: LD_INT 20
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 25
16116: PUSH
16117: LD_INT 26
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 101
16166: PUSH
16167: LD_INT 102
16169: PUSH
16170: LD_INT 103
16172: PUSH
16173: LD_INT 106
16175: PUSH
16176: LD_INT 108
16178: PUSH
16179: LD_INT 112
16181: PUSH
16182: LD_INT 113
16184: PUSH
16185: LD_INT 114
16187: PUSH
16188: LD_INT 115
16190: PUSH
16191: LD_INT 116
16193: PUSH
16194: LD_INT 117
16196: PUSH
16197: LD_INT 118
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: ST_TO_ADDR
16218: GO 16461
16220: LD_INT 19
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16460
16228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16229: LD_ADDR_VAR 0 2
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 3
16242: PUSH
16243: LD_INT 4
16245: PUSH
16246: LD_INT 5
16248: PUSH
16249: LD_INT 6
16251: PUSH
16252: LD_INT 7
16254: PUSH
16255: LD_INT 8
16257: PUSH
16258: LD_INT 9
16260: PUSH
16261: LD_INT 10
16263: PUSH
16264: LD_INT 11
16266: PUSH
16267: LD_INT 12
16269: PUSH
16270: LD_INT 13
16272: PUSH
16273: LD_INT 14
16275: PUSH
16276: LD_INT 15
16278: PUSH
16279: LD_INT 16
16281: PUSH
16282: LD_INT 17
16284: PUSH
16285: LD_INT 18
16287: PUSH
16288: LD_INT 19
16290: PUSH
16291: LD_INT 20
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 22
16299: PUSH
16300: LD_INT 23
16302: PUSH
16303: LD_INT 24
16305: PUSH
16306: LD_INT 25
16308: PUSH
16309: LD_INT 26
16311: PUSH
16312: LD_INT 27
16314: PUSH
16315: LD_INT 28
16317: PUSH
16318: LD_INT 29
16320: PUSH
16321: LD_INT 30
16323: PUSH
16324: LD_INT 31
16326: PUSH
16327: LD_INT 32
16329: PUSH
16330: LD_INT 33
16332: PUSH
16333: LD_INT 34
16335: PUSH
16336: LD_INT 35
16338: PUSH
16339: LD_INT 36
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 101
16382: PUSH
16383: LD_INT 102
16385: PUSH
16386: LD_INT 103
16388: PUSH
16389: LD_INT 104
16391: PUSH
16392: LD_INT 105
16394: PUSH
16395: LD_INT 106
16397: PUSH
16398: LD_INT 107
16400: PUSH
16401: LD_INT 108
16403: PUSH
16404: LD_INT 109
16406: PUSH
16407: LD_INT 110
16409: PUSH
16410: LD_INT 111
16412: PUSH
16413: LD_INT 112
16415: PUSH
16416: LD_INT 113
16418: PUSH
16419: LD_INT 114
16421: PUSH
16422: LD_INT 115
16424: PUSH
16425: LD_INT 116
16427: PUSH
16428: LD_INT 117
16430: PUSH
16431: LD_INT 118
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: ST_TO_ADDR
16458: GO 16461
16460: POP
// end else
16461: GO 16692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: LD_INT 4
16479: PUSH
16480: LD_INT 5
16482: PUSH
16483: LD_INT 6
16485: PUSH
16486: LD_INT 7
16488: PUSH
16489: LD_INT 8
16491: PUSH
16492: LD_INT 9
16494: PUSH
16495: LD_INT 10
16497: PUSH
16498: LD_INT 11
16500: PUSH
16501: LD_INT 12
16503: PUSH
16504: LD_INT 13
16506: PUSH
16507: LD_INT 14
16509: PUSH
16510: LD_INT 15
16512: PUSH
16513: LD_INT 16
16515: PUSH
16516: LD_INT 17
16518: PUSH
16519: LD_INT 18
16521: PUSH
16522: LD_INT 19
16524: PUSH
16525: LD_INT 20
16527: PUSH
16528: LD_INT 21
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_INT 23
16536: PUSH
16537: LD_INT 24
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 27
16548: PUSH
16549: LD_INT 28
16551: PUSH
16552: LD_INT 29
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 31
16560: PUSH
16561: LD_INT 32
16563: PUSH
16564: LD_INT 33
16566: PUSH
16567: LD_INT 34
16569: PUSH
16570: LD_INT 35
16572: PUSH
16573: LD_INT 36
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 101
16616: PUSH
16617: LD_INT 102
16619: PUSH
16620: LD_INT 103
16622: PUSH
16623: LD_INT 104
16625: PUSH
16626: LD_INT 105
16628: PUSH
16629: LD_INT 106
16631: PUSH
16632: LD_INT 107
16634: PUSH
16635: LD_INT 108
16637: PUSH
16638: LD_INT 109
16640: PUSH
16641: LD_INT 110
16643: PUSH
16644: LD_INT 111
16646: PUSH
16647: LD_INT 112
16649: PUSH
16650: LD_INT 113
16652: PUSH
16653: LD_INT 114
16655: PUSH
16656: LD_INT 115
16658: PUSH
16659: LD_INT 116
16661: PUSH
16662: LD_INT 117
16664: PUSH
16665: LD_INT 118
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// if result then
16692: LD_VAR 0 2
16696: IFFALSE 17482
// begin normal :=  ;
16698: LD_ADDR_VAR 0 5
16702: PUSH
16703: LD_STRING 
16705: ST_TO_ADDR
// hardcore :=  ;
16706: LD_ADDR_VAR 0 6
16710: PUSH
16711: LD_STRING 
16713: ST_TO_ADDR
// active :=  ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_STRING 
16721: ST_TO_ADDR
// for i = 1 to normalCounter do
16722: LD_ADDR_VAR 0 8
16726: PUSH
16727: DOUBLE
16728: LD_INT 1
16730: DEC
16731: ST_TO_ADDR
16732: LD_EXP 23
16736: PUSH
16737: FOR_TO
16738: IFFALSE 16839
// begin tmp := 0 ;
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_STRING 0
16747: ST_TO_ADDR
// if result [ 1 ] then
16748: LD_VAR 0 2
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: IFFALSE 16821
// if result [ 1 ] [ 1 ] = i then
16758: LD_VAR 0 2
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PUSH
16767: LD_INT 1
16769: ARRAY
16770: PUSH
16771: LD_VAR 0 8
16775: EQUAL
16776: IFFALSE 16821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16778: LD_ADDR_VAR 0 2
16782: PUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_VAR 0 2
16795: PUSH
16796: LD_INT 1
16798: ARRAY
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 3
16807: PPUSH
16808: CALL_OW 1
16812: ST_TO_ADDR
// tmp := 1 ;
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_STRING 1
16820: ST_TO_ADDR
// end ; normal := normal & tmp ;
16821: LD_ADDR_VAR 0 5
16825: PUSH
16826: LD_VAR 0 5
16830: PUSH
16831: LD_VAR 0 3
16835: STR
16836: ST_TO_ADDR
// end ;
16837: GO 16737
16839: POP
16840: POP
// for i = 1 to hardcoreCounter do
16841: LD_ADDR_VAR 0 8
16845: PUSH
16846: DOUBLE
16847: LD_INT 1
16849: DEC
16850: ST_TO_ADDR
16851: LD_EXP 24
16855: PUSH
16856: FOR_TO
16857: IFFALSE 16962
// begin tmp := 0 ;
16859: LD_ADDR_VAR 0 3
16863: PUSH
16864: LD_STRING 0
16866: ST_TO_ADDR
// if result [ 2 ] then
16867: LD_VAR 0 2
16871: PUSH
16872: LD_INT 2
16874: ARRAY
16875: IFFALSE 16944
// if result [ 2 ] [ 1 ] = 100 + i then
16877: LD_VAR 0 2
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: PUSH
16890: LD_INT 100
16892: PUSH
16893: LD_VAR 0 8
16897: PLUS
16898: EQUAL
16899: IFFALSE 16944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_VAR 0 2
16910: PPUSH
16911: LD_INT 2
16913: PPUSH
16914: LD_VAR 0 2
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 3
16930: PPUSH
16931: CALL_OW 1
16935: ST_TO_ADDR
// tmp := 1 ;
16936: LD_ADDR_VAR 0 3
16940: PUSH
16941: LD_STRING 1
16943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16944: LD_ADDR_VAR 0 6
16948: PUSH
16949: LD_VAR 0 6
16953: PUSH
16954: LD_VAR 0 3
16958: STR
16959: ST_TO_ADDR
// end ;
16960: GO 16856
16962: POP
16963: POP
// if isGameLoad then
16964: LD_VAR 0 1
16968: IFFALSE 17443
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16970: LD_ADDR_VAR 0 4
16974: PUSH
16975: LD_EXP 27
16979: PUSH
16980: LD_EXP 26
16984: PUSH
16985: LD_EXP 28
16989: PUSH
16990: LD_EXP 25
16994: PUSH
16995: LD_EXP 29
16999: PUSH
17000: LD_EXP 30
17004: PUSH
17005: LD_EXP 31
17009: PUSH
17010: LD_EXP 32
17014: PUSH
17015: LD_EXP 33
17019: PUSH
17020: LD_EXP 34
17024: PUSH
17025: LD_EXP 35
17029: PUSH
17030: LD_EXP 36
17034: PUSH
17035: LD_EXP 37
17039: PUSH
17040: LD_EXP 38
17044: PUSH
17045: LD_EXP 46
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_EXP 48
17059: PUSH
17060: LD_EXP 49
17064: PUSH
17065: LD_EXP 51
17069: PUSH
17070: LD_EXP 52
17074: PUSH
17075: LD_EXP 53
17079: PUSH
17080: LD_EXP 56
17084: PUSH
17085: LD_EXP 58
17089: PUSH
17090: LD_EXP 59
17094: PUSH
17095: LD_EXP 60
17099: PUSH
17100: LD_EXP 62
17104: PUSH
17105: LD_EXP 63
17109: PUSH
17110: LD_EXP 66
17114: PUSH
17115: LD_EXP 67
17119: PUSH
17120: LD_EXP 68
17124: PUSH
17125: LD_EXP 69
17129: PUSH
17130: LD_EXP 70
17134: PUSH
17135: LD_EXP 71
17139: PUSH
17140: LD_EXP 72
17144: PUSH
17145: LD_EXP 73
17149: PUSH
17150: LD_EXP 74
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 43
17169: PUSH
17170: LD_EXP 44
17174: PUSH
17175: LD_EXP 45
17179: PUSH
17180: LD_EXP 41
17184: PUSH
17185: LD_EXP 42
17189: PUSH
17190: LD_EXP 50
17194: PUSH
17195: LD_EXP 54
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 57
17209: PUSH
17210: LD_EXP 61
17214: PUSH
17215: LD_EXP 64
17219: PUSH
17220: LD_EXP 65
17224: PUSH
17225: LD_EXP 75
17229: PUSH
17230: LD_EXP 76
17234: PUSH
17235: LD_EXP 77
17239: PUSH
17240: LD_EXP 78
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: ST_TO_ADDR
// tmp :=  ;
17301: LD_ADDR_VAR 0 3
17305: PUSH
17306: LD_STRING 
17308: ST_TO_ADDR
// for i = 1 to normalCounter do
17309: LD_ADDR_VAR 0 8
17313: PUSH
17314: DOUBLE
17315: LD_INT 1
17317: DEC
17318: ST_TO_ADDR
17319: LD_EXP 23
17323: PUSH
17324: FOR_TO
17325: IFFALSE 17361
// begin if flags [ i ] then
17327: LD_VAR 0 4
17331: PUSH
17332: LD_VAR 0 8
17336: ARRAY
17337: IFFALSE 17359
// tmp := tmp & i & ; ;
17339: LD_ADDR_VAR 0 3
17343: PUSH
17344: LD_VAR 0 3
17348: PUSH
17349: LD_VAR 0 8
17353: STR
17354: PUSH
17355: LD_STRING ;
17357: STR
17358: ST_TO_ADDR
// end ;
17359: GO 17324
17361: POP
17362: POP
// for i = 1 to hardcoreCounter do
17363: LD_ADDR_VAR 0 8
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_EXP 24
17377: PUSH
17378: FOR_TO
17379: IFFALSE 17425
// begin if flags [ normalCounter + i ] then
17381: LD_VAR 0 4
17385: PUSH
17386: LD_EXP 23
17390: PUSH
17391: LD_VAR 0 8
17395: PLUS
17396: ARRAY
17397: IFFALSE 17423
// tmp := tmp & ( 100 + i ) & ; ;
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: LD_VAR 0 3
17408: PUSH
17409: LD_INT 100
17411: PUSH
17412: LD_VAR 0 8
17416: PLUS
17417: STR
17418: PUSH
17419: LD_STRING ;
17421: STR
17422: ST_TO_ADDR
// end ;
17423: GO 17378
17425: POP
17426: POP
// if tmp then
17427: LD_VAR 0 3
17431: IFFALSE 17443
// active := tmp ;
17433: LD_ADDR_VAR 0 7
17437: PUSH
17438: LD_VAR 0 3
17442: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17443: LD_STRING getStreamItemsFromMission("
17445: PUSH
17446: LD_VAR 0 5
17450: STR
17451: PUSH
17452: LD_STRING ","
17454: STR
17455: PUSH
17456: LD_VAR 0 6
17460: STR
17461: PUSH
17462: LD_STRING ","
17464: STR
17465: PUSH
17466: LD_VAR 0 7
17470: STR
17471: PUSH
17472: LD_STRING ")
17474: STR
17475: PPUSH
17476: CALL_OW 559
// end else
17480: GO 17489
// ToLua ( getStreamItemsFromMission("","","") ) ;
17482: LD_STRING getStreamItemsFromMission("","","")
17484: PPUSH
17485: CALL_OW 559
// end ;
17489: LD_VAR 0 2
17493: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17494: LD_EXP 22
17498: PUSH
17499: LD_EXP 27
17503: AND
17504: IFFALSE 17628
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin enable ;
17513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 7
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 34
17546: PUSH
17547: LD_INT 45
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 34
17556: PUSH
17557: LD_INT 28
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 34
17566: PUSH
17567: LD_INT 47
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 2
17594: NOT
17595: IFFALSE 17599
// exit ;
17597: GO 17628
// for i in tmp do
17599: LD_ADDR_VAR 0 1
17603: PUSH
17604: LD_VAR 0 2
17608: PUSH
17609: FOR_IN
17610: IFFALSE 17626
// begin SetLives ( i , 0 ) ;
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 234
// end ;
17624: GO 17609
17626: POP
17627: POP
// end ;
17628: PPOPN 2
17630: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17631: LD_EXP 22
17635: PUSH
17636: LD_EXP 28
17640: AND
17641: IFFALSE 17725
17643: GO 17645
17645: DISABLE
17646: LD_INT 0
17648: PPUSH
17649: PPUSH
// begin enable ;
17650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: LD_INT 22
17658: PUSH
17659: LD_OWVAR 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 32
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 69
17686: ST_TO_ADDR
// if not tmp then
17687: LD_VAR 0 2
17691: NOT
17692: IFFALSE 17696
// exit ;
17694: GO 17725
// for i in tmp do
17696: LD_ADDR_VAR 0 1
17700: PUSH
17701: LD_VAR 0 2
17705: PUSH
17706: FOR_IN
17707: IFFALSE 17723
// begin SetLives ( i , 0 ) ;
17709: LD_VAR 0 1
17713: PPUSH
17714: LD_INT 0
17716: PPUSH
17717: CALL_OW 234
// end ;
17721: GO 17706
17723: POP
17724: POP
// end ;
17725: PPOPN 2
17727: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17728: LD_EXP 22
17732: PUSH
17733: LD_EXP 25
17737: AND
17738: IFFALSE 17831
17740: GO 17742
17742: DISABLE
17743: LD_INT 0
17745: PPUSH
// begin enable ;
17746: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_OWVAR 2
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 25
17769: PUSH
17770: LD_INT 5
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 25
17779: PUSH
17780: LD_INT 9
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 25
17789: PUSH
17790: LD_INT 8
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 69
17811: PUSH
17812: FOR_IN
17813: IFFALSE 17829
// begin SetClass ( i , 1 ) ;
17815: LD_VAR 0 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: CALL_OW 336
// end ;
17827: GO 17812
17829: POP
17830: POP
// end ;
17831: PPOPN 1
17833: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17834: LD_EXP 22
17838: PUSH
17839: LD_EXP 26
17843: AND
17844: PUSH
17845: LD_OWVAR 65
17849: PUSH
17850: LD_INT 7
17852: LESS
17853: AND
17854: IFFALSE 17868
17856: GO 17858
17858: DISABLE
// begin enable ;
17859: ENABLE
// game_speed := 7 ;
17860: LD_ADDR_OWVAR 65
17864: PUSH
17865: LD_INT 7
17867: ST_TO_ADDR
// end ;
17868: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17869: LD_EXP 22
17873: PUSH
17874: LD_EXP 29
17878: AND
17879: IFFALSE 18081
17881: GO 17883
17883: DISABLE
17884: LD_INT 0
17886: PPUSH
17887: PPUSH
17888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 81
17896: PUSH
17897: LD_OWVAR 2
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: ST_TO_ADDR
// if not tmp then
17925: LD_VAR 0 3
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 18081
// if tmp > 5 then
17934: LD_VAR 0 3
17938: PUSH
17939: LD_INT 5
17941: GREATER
17942: IFFALSE 17954
// k := 5 else
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_INT 5
17951: ST_TO_ADDR
17952: GO 17964
// k := tmp ;
17954: LD_ADDR_VAR 0 2
17958: PUSH
17959: LD_VAR 0 3
17963: ST_TO_ADDR
// for i := 1 to k do
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: DOUBLE
17970: LD_INT 1
17972: DEC
17973: ST_TO_ADDR
17974: LD_VAR 0 2
17978: PUSH
17979: FOR_TO
17980: IFFALSE 18079
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17982: LD_VAR 0 3
17986: PUSH
17987: LD_VAR 0 1
17991: ARRAY
17992: PPUSH
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 4
18000: MOD
18001: PUSH
18002: LD_INT 1
18004: PLUS
18005: PPUSH
18006: CALL_OW 259
18010: PUSH
18011: LD_INT 10
18013: LESS
18014: IFFALSE 18077
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18016: LD_VAR 0 3
18020: PUSH
18021: LD_VAR 0 1
18025: ARRAY
18026: PPUSH
18027: LD_VAR 0 1
18031: PUSH
18032: LD_INT 4
18034: MOD
18035: PUSH
18036: LD_INT 1
18038: PLUS
18039: PPUSH
18040: LD_VAR 0 3
18044: PUSH
18045: LD_VAR 0 1
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 1
18055: PUSH
18056: LD_INT 4
18058: MOD
18059: PUSH
18060: LD_INT 1
18062: PLUS
18063: PPUSH
18064: CALL_OW 259
18068: PUSH
18069: LD_INT 1
18071: PLUS
18072: PPUSH
18073: CALL_OW 237
18077: GO 17979
18079: POP
18080: POP
// end ;
18081: PPOPN 3
18083: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18084: LD_EXP 22
18088: PUSH
18089: LD_EXP 30
18093: AND
18094: IFFALSE 18114
18096: GO 18098
18098: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18099: LD_INT 4
18101: PPUSH
18102: LD_OWVAR 2
18106: PPUSH
18107: LD_INT 0
18109: PPUSH
18110: CALL_OW 324
18114: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18115: LD_EXP 22
18119: PUSH
18120: LD_EXP 59
18124: AND
18125: IFFALSE 18145
18127: GO 18129
18129: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18130: LD_INT 19
18132: PPUSH
18133: LD_OWVAR 2
18137: PPUSH
18138: LD_INT 0
18140: PPUSH
18141: CALL_OW 324
18145: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18146: LD_EXP 22
18150: PUSH
18151: LD_EXP 31
18155: AND
18156: IFFALSE 18258
18158: GO 18160
18160: DISABLE
18161: LD_INT 0
18163: PPUSH
18164: PPUSH
// begin enable ;
18165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 34
18188: PUSH
18189: LD_INT 11
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 34
18198: PUSH
18199: LD_INT 30
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: ST_TO_ADDR
// if not tmp then
18220: LD_VAR 0 2
18224: NOT
18225: IFFALSE 18229
// exit ;
18227: GO 18258
// for i in tmp do
18229: LD_ADDR_VAR 0 1
18233: PUSH
18234: LD_VAR 0 2
18238: PUSH
18239: FOR_IN
18240: IFFALSE 18256
// begin SetLives ( i , 0 ) ;
18242: LD_VAR 0 1
18246: PPUSH
18247: LD_INT 0
18249: PPUSH
18250: CALL_OW 234
// end ;
18254: GO 18239
18256: POP
18257: POP
// end ;
18258: PPOPN 2
18260: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18261: LD_EXP 22
18265: PUSH
18266: LD_EXP 32
18270: AND
18271: IFFALSE 18291
18273: GO 18275
18275: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18276: LD_INT 32
18278: PPUSH
18279: LD_OWVAR 2
18283: PPUSH
18284: LD_INT 0
18286: PPUSH
18287: CALL_OW 324
18291: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18292: LD_EXP 22
18296: PUSH
18297: LD_EXP 33
18301: AND
18302: IFFALSE 18483
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 33
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 2
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18483
// side := 0 ;
18357: LD_ADDR_VAR 0 3
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// for i := 1 to 8 do
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: DOUBLE
18371: LD_INT 1
18373: DEC
18374: ST_TO_ADDR
18375: LD_INT 8
18377: PUSH
18378: FOR_TO
18379: IFFALSE 18427
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18381: LD_OWVAR 2
18385: PUSH
18386: LD_VAR 0 1
18390: NONEQUAL
18391: PUSH
18392: LD_OWVAR 2
18396: PPUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 81
18406: PUSH
18407: LD_INT 2
18409: EQUAL
18410: AND
18411: IFFALSE 18425
// begin side := i ;
18413: LD_ADDR_VAR 0 3
18417: PUSH
18418: LD_VAR 0 1
18422: ST_TO_ADDR
// break ;
18423: GO 18427
// end ;
18425: GO 18378
18427: POP
18428: POP
// if not side then
18429: LD_VAR 0 3
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18483
// for i := 1 to tmp do
18438: LD_ADDR_VAR 0 1
18442: PUSH
18443: DOUBLE
18444: LD_INT 1
18446: DEC
18447: ST_TO_ADDR
18448: LD_VAR 0 2
18452: PUSH
18453: FOR_TO
18454: IFFALSE 18481
// if Prob ( 60 ) then
18456: LD_INT 60
18458: PPUSH
18459: CALL_OW 13
18463: IFFALSE 18479
// SetSide ( i , side ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: CALL_OW 235
18479: GO 18453
18481: POP
18482: POP
// end ;
18483: PPOPN 3
18485: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18486: LD_EXP 22
18490: PUSH
18491: LD_EXP 35
18495: AND
18496: IFFALSE 18615
18498: GO 18500
18500: DISABLE
18501: LD_INT 0
18503: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_INT 22
18511: PUSH
18512: LD_OWVAR 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 21
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 3
18533: PUSH
18534: LD_INT 23
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PPUSH
18553: CALL_OW 69
18557: PUSH
18558: FOR_IN
18559: IFFALSE 18613
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 257
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: LD_INT 4
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: IN
18589: IFFALSE 18611
// SetClass ( un , rand ( 1 , 4 ) ) ;
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_INT 4
18601: PPUSH
18602: CALL_OW 12
18606: PPUSH
18607: CALL_OW 336
18611: GO 18558
18613: POP
18614: POP
// end ;
18615: PPOPN 1
18617: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18618: LD_EXP 22
18622: PUSH
18623: LD_EXP 34
18627: AND
18628: IFFALSE 18707
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: ST_TO_ADDR
// if not tmp then
18672: LD_VAR 0 1
18676: NOT
18677: IFFALSE 18681
// exit ;
18679: GO 18707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 100
18702: PPUSH
18703: CALL_OW 234
// end ;
18707: PPOPN 1
18709: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18710: LD_EXP 22
18714: PUSH
18715: LD_EXP 36
18719: AND
18720: IFFALSE 18818
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18728: LD_ADDR_VAR 0 1
18732: PUSH
18733: LD_INT 22
18735: PUSH
18736: LD_OWVAR 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 69
18763: ST_TO_ADDR
// if not tmp then
18764: LD_VAR 0 1
18768: NOT
18769: IFFALSE 18773
// exit ;
18771: GO 18818
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18773: LD_VAR 0 1
18777: PUSH
18778: LD_INT 1
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 12
18790: ARRAY
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_INT 4
18797: PPUSH
18798: CALL_OW 12
18802: PPUSH
18803: LD_INT 3000
18805: PPUSH
18806: LD_INT 9000
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: CALL_OW 492
// end ;
18818: PPOPN 1
18820: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18821: LD_EXP 22
18825: PUSH
18826: LD_EXP 37
18830: AND
18831: IFFALSE 18851
18833: GO 18835
18835: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18836: LD_INT 1
18838: PPUSH
18839: LD_OWVAR 2
18843: PPUSH
18844: LD_INT 0
18846: PPUSH
18847: CALL_OW 324
18851: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18852: LD_EXP 22
18856: PUSH
18857: LD_EXP 38
18861: AND
18862: IFFALSE 18945
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 21
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 2
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18945
// for i in tmp do
18916: LD_ADDR_VAR 0 1
18920: PUSH
18921: LD_VAR 0 2
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18943
// SetBLevel ( i , 10 ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: LD_INT 10
18936: PPUSH
18937: CALL_OW 241
18941: GO 18926
18943: POP
18944: POP
// end ;
18945: PPOPN 2
18947: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18948: LD_EXP 22
18952: PUSH
18953: LD_EXP 39
18957: AND
18958: IFFALSE 19069
18960: GO 18962
18962: DISABLE
18963: LD_INT 0
18965: PPUSH
18966: PPUSH
18967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18968: LD_ADDR_VAR 0 3
18972: PUSH
18973: LD_INT 22
18975: PUSH
18976: LD_OWVAR 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 25
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 69
19003: ST_TO_ADDR
// if not tmp then
19004: LD_VAR 0 3
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19069
// un := tmp [ rand ( 1 , tmp ) ] ;
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 12
19035: ARRAY
19036: ST_TO_ADDR
// if Crawls ( un ) then
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 318
19046: IFFALSE 19057
// ComWalk ( un ) ;
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19057: LD_VAR 0 2
19061: PPUSH
19062: LD_INT 5
19064: PPUSH
19065: CALL_OW 336
// end ;
19069: PPOPN 3
19071: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19072: LD_EXP 22
19076: PUSH
19077: LD_EXP 40
19081: AND
19082: PUSH
19083: LD_OWVAR 67
19087: PUSH
19088: LD_INT 4
19090: LESS
19091: AND
19092: IFFALSE 19111
19094: GO 19096
19096: DISABLE
// begin Difficulty := Difficulty + 1 ;
19097: LD_ADDR_OWVAR 67
19101: PUSH
19102: LD_OWVAR 67
19106: PUSH
19107: LD_INT 1
19109: PLUS
19110: ST_TO_ADDR
// end ;
19111: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19112: LD_EXP 22
19116: PUSH
19117: LD_EXP 41
19121: AND
19122: IFFALSE 19225
19124: GO 19126
19126: DISABLE
19127: LD_INT 0
19129: PPUSH
// begin for i := 1 to 5 do
19130: LD_ADDR_VAR 0 1
19134: PUSH
19135: DOUBLE
19136: LD_INT 1
19138: DEC
19139: ST_TO_ADDR
19140: LD_INT 5
19142: PUSH
19143: FOR_TO
19144: IFFALSE 19223
// begin uc_nation := nation_nature ;
19146: LD_ADDR_OWVAR 21
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// uc_side := 0 ;
19154: LD_ADDR_OWVAR 20
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19162: LD_ADDR_OWVAR 29
19166: PUSH
19167: LD_INT 12
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: ST_TO_ADDR
// hc_agressivity := 20 ;
19177: LD_ADDR_OWVAR 35
19181: PUSH
19182: LD_INT 20
19184: ST_TO_ADDR
// hc_class := class_tiger ;
19185: LD_ADDR_OWVAR 28
19189: PUSH
19190: LD_INT 14
19192: ST_TO_ADDR
// hc_gallery :=  ;
19193: LD_ADDR_OWVAR 33
19197: PUSH
19198: LD_STRING 
19200: ST_TO_ADDR
// hc_name :=  ;
19201: LD_ADDR_OWVAR 26
19205: PUSH
19206: LD_STRING 
19208: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19209: CALL_OW 44
19213: PPUSH
19214: LD_INT 0
19216: PPUSH
19217: CALL_OW 51
// end ;
19221: GO 19143
19223: POP
19224: POP
// end ;
19225: PPOPN 1
19227: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19228: LD_EXP 22
19232: PUSH
19233: LD_EXP 42
19237: AND
19238: IFFALSE 19247
19240: GO 19242
19242: DISABLE
// StreamSibBomb ;
19243: CALL 19248 0 0
19247: END
// export function StreamSibBomb ; var i , x , y ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
// result := false ;
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// for i := 1 to 16 do
19262: LD_ADDR_VAR 0 2
19266: PUSH
19267: DOUBLE
19268: LD_INT 1
19270: DEC
19271: ST_TO_ADDR
19272: LD_INT 16
19274: PUSH
19275: FOR_TO
19276: IFFALSE 19475
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_INT 10
19285: PUSH
19286: LD_INT 20
19288: PUSH
19289: LD_INT 30
19291: PUSH
19292: LD_INT 40
19294: PUSH
19295: LD_INT 50
19297: PUSH
19298: LD_INT 60
19300: PUSH
19301: LD_INT 70
19303: PUSH
19304: LD_INT 80
19306: PUSH
19307: LD_INT 90
19309: PUSH
19310: LD_INT 100
19312: PUSH
19313: LD_INT 110
19315: PUSH
19316: LD_INT 120
19318: PUSH
19319: LD_INT 130
19321: PUSH
19322: LD_INT 140
19324: PUSH
19325: LD_INT 150
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_INT 15
19350: PPUSH
19351: CALL_OW 12
19355: ARRAY
19356: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19357: LD_ADDR_VAR 0 4
19361: PUSH
19362: LD_INT 10
19364: PUSH
19365: LD_INT 20
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 40
19373: PUSH
19374: LD_INT 50
19376: PUSH
19377: LD_INT 60
19379: PUSH
19380: LD_INT 70
19382: PUSH
19383: LD_INT 80
19385: PUSH
19386: LD_INT 90
19388: PUSH
19389: LD_INT 100
19391: PUSH
19392: LD_INT 110
19394: PUSH
19395: LD_INT 120
19397: PUSH
19398: LD_INT 130
19400: PUSH
19401: LD_INT 140
19403: PUSH
19404: LD_INT 150
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PPUSH
19427: LD_INT 15
19429: PPUSH
19430: CALL_OW 12
19434: ARRAY
19435: ST_TO_ADDR
// if ValidHex ( x , y ) then
19436: LD_VAR 0 3
19440: PPUSH
19441: LD_VAR 0 4
19445: PPUSH
19446: CALL_OW 488
19450: IFFALSE 19473
// begin result := [ x , y ] ;
19452: LD_ADDR_VAR 0 1
19456: PUSH
19457: LD_VAR 0 3
19461: PUSH
19462: LD_VAR 0 4
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// break ;
19471: GO 19475
// end ; end ;
19473: GO 19275
19475: POP
19476: POP
// if result then
19477: LD_VAR 0 1
19481: IFFALSE 19541
// begin ToLua ( playSibBomb() ) ;
19483: LD_STRING playSibBomb()
19485: PPUSH
19486: CALL_OW 559
// wait ( 0 0$14 ) ;
19490: LD_INT 490
19492: PPUSH
19493: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19497: LD_VAR 0 1
19501: PUSH
19502: LD_INT 1
19504: ARRAY
19505: PPUSH
19506: LD_VAR 0 1
19510: PUSH
19511: LD_INT 2
19513: ARRAY
19514: PPUSH
19515: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19519: LD_VAR 0 1
19523: PUSH
19524: LD_INT 1
19526: ARRAY
19527: PPUSH
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 2
19535: ARRAY
19536: PPUSH
19537: CALL_OW 429
// end ; end ;
19541: LD_VAR 0 1
19545: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19546: LD_EXP 22
19550: PUSH
19551: LD_EXP 44
19555: AND
19556: IFFALSE 19568
19558: GO 19560
19560: DISABLE
// YouLost (  ) ;
19561: LD_STRING 
19563: PPUSH
19564: CALL_OW 104
19568: END
// every 0 0$1 trigger StreamModeActive and sFog do
19569: LD_EXP 22
19573: PUSH
19574: LD_EXP 43
19578: AND
19579: IFFALSE 19593
19581: GO 19583
19583: DISABLE
// FogOff ( your_side ) ;
19584: LD_OWVAR 2
19588: PPUSH
19589: CALL_OW 344
19593: END
// every 0 0$1 trigger StreamModeActive and sSun do
19594: LD_EXP 22
19598: PUSH
19599: LD_EXP 45
19603: AND
19604: IFFALSE 19632
19606: GO 19608
19608: DISABLE
// begin solar_recharge_percent := 0 ;
19609: LD_ADDR_OWVAR 79
19613: PUSH
19614: LD_INT 0
19616: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19617: LD_INT 10500
19619: PPUSH
19620: CALL_OW 67
// solar_recharge_percent := 100 ;
19624: LD_ADDR_OWVAR 79
19628: PUSH
19629: LD_INT 100
19631: ST_TO_ADDR
// end ;
19632: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19633: LD_EXP 22
19637: PUSH
19638: LD_EXP 46
19642: AND
19643: IFFALSE 19882
19645: GO 19647
19647: DISABLE
19648: LD_INT 0
19650: PPUSH
19651: PPUSH
19652: PPUSH
// begin tmp := [ ] ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: EMPTY
19659: ST_TO_ADDR
// for i := 1 to 6 do
19660: LD_ADDR_VAR 0 1
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_INT 6
19672: PUSH
19673: FOR_TO
19674: IFFALSE 19779
// begin uc_nation := nation_nature ;
19676: LD_ADDR_OWVAR 21
19680: PUSH
19681: LD_INT 0
19683: ST_TO_ADDR
// uc_side := 0 ;
19684: LD_ADDR_OWVAR 20
19688: PUSH
19689: LD_INT 0
19691: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19692: LD_ADDR_OWVAR 29
19696: PUSH
19697: LD_INT 12
19699: PUSH
19700: LD_INT 12
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: ST_TO_ADDR
// hc_agressivity := 20 ;
19707: LD_ADDR_OWVAR 35
19711: PUSH
19712: LD_INT 20
19714: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19715: LD_ADDR_OWVAR 28
19719: PUSH
19720: LD_INT 17
19722: ST_TO_ADDR
// hc_gallery :=  ;
19723: LD_ADDR_OWVAR 33
19727: PUSH
19728: LD_STRING 
19730: ST_TO_ADDR
// hc_name :=  ;
19731: LD_ADDR_OWVAR 26
19735: PUSH
19736: LD_STRING 
19738: ST_TO_ADDR
// un := CreateHuman ;
19739: LD_ADDR_VAR 0 2
19743: PUSH
19744: CALL_OW 44
19748: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_INT 1
19756: PPUSH
19757: CALL_OW 51
// tmp := tmp ^ un ;
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: LD_VAR 0 3
19770: PUSH
19771: LD_VAR 0 2
19775: ADD
19776: ST_TO_ADDR
// end ;
19777: GO 19673
19779: POP
19780: POP
// repeat wait ( 0 0$1 ) ;
19781: LD_INT 35
19783: PPUSH
19784: CALL_OW 67
// for un in tmp do
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_VAR 0 3
19797: PUSH
19798: FOR_IN
19799: IFFALSE 19873
// begin if IsDead ( un ) then
19801: LD_VAR 0 2
19805: PPUSH
19806: CALL_OW 301
19810: IFFALSE 19830
// begin tmp := tmp diff un ;
19812: LD_ADDR_VAR 0 3
19816: PUSH
19817: LD_VAR 0 3
19821: PUSH
19822: LD_VAR 0 2
19826: DIFF
19827: ST_TO_ADDR
// continue ;
19828: GO 19798
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_INT 3
19837: PUSH
19838: LD_INT 22
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PPUSH
19852: CALL_OW 69
19856: PPUSH
19857: LD_VAR 0 2
19861: PPUSH
19862: CALL_OW 74
19866: PPUSH
19867: CALL_OW 115
// end ;
19871: GO 19798
19873: POP
19874: POP
// until not tmp ;
19875: LD_VAR 0 3
19879: NOT
19880: IFFALSE 19781
// end ;
19882: PPOPN 3
19884: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19885: LD_EXP 22
19889: PUSH
19890: LD_EXP 47
19894: AND
19895: IFFALSE 19949
19897: GO 19899
19899: DISABLE
// begin ToLua ( displayTroll(); ) ;
19900: LD_STRING displayTroll();
19902: PPUSH
19903: CALL_OW 559
// wait ( 3 3$00 ) ;
19907: LD_INT 6300
19909: PPUSH
19910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19914: LD_STRING hideTroll();
19916: PPUSH
19917: CALL_OW 559
// wait ( 1 1$00 ) ;
19921: LD_INT 2100
19923: PPUSH
19924: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19928: LD_STRING displayTroll();
19930: PPUSH
19931: CALL_OW 559
// wait ( 1 1$00 ) ;
19935: LD_INT 2100
19937: PPUSH
19938: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19942: LD_STRING hideTroll();
19944: PPUSH
19945: CALL_OW 559
// end ;
19949: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19950: LD_EXP 22
19954: PUSH
19955: LD_EXP 48
19959: AND
19960: IFFALSE 20023
19962: GO 19964
19964: DISABLE
19965: LD_INT 0
19967: PPUSH
// begin p := 0 ;
19968: LD_ADDR_VAR 0 1
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// repeat game_speed := 1 ;
19976: LD_ADDR_OWVAR 65
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19984: LD_INT 35
19986: PPUSH
19987: CALL_OW 67
// p := p + 1 ;
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_VAR 0 1
20000: PUSH
20001: LD_INT 1
20003: PLUS
20004: ST_TO_ADDR
// until p >= 60 ;
20005: LD_VAR 0 1
20009: PUSH
20010: LD_INT 60
20012: GREATEREQUAL
20013: IFFALSE 19976
// game_speed := 4 ;
20015: LD_ADDR_OWVAR 65
20019: PUSH
20020: LD_INT 4
20022: ST_TO_ADDR
// end ;
20023: PPOPN 1
20025: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20026: LD_EXP 22
20030: PUSH
20031: LD_EXP 49
20035: AND
20036: IFFALSE 20182
20038: GO 20040
20040: DISABLE
20041: LD_INT 0
20043: PPUSH
20044: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: LD_INT 22
20052: PUSH
20053: LD_OWVAR 2
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 30
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PPUSH
20094: CALL_OW 69
20098: ST_TO_ADDR
// if not depot then
20099: LD_VAR 0 1
20103: NOT
20104: IFFALSE 20108
// exit ;
20106: GO 20182
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_VAR 0 1
20117: PUSH
20118: LD_INT 1
20120: PPUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 12
20130: ARRAY
20131: PPUSH
20132: CALL_OW 274
20136: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20137: LD_VAR 0 2
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: LD_INT 0
20147: PPUSH
20148: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20152: LD_VAR 0 2
20156: PPUSH
20157: LD_INT 2
20159: PPUSH
20160: LD_INT 0
20162: PPUSH
20163: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 3
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: CALL_OW 277
// end ;
20182: PPOPN 2
20184: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20185: LD_EXP 22
20189: PUSH
20190: LD_EXP 50
20194: AND
20195: IFFALSE 20292
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_INT 22
20210: PUSH
20211: LD_OWVAR 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 21
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 23
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 1
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20266: LD_VAR 0 1
20270: PUSH
20271: LD_INT 1
20273: PPUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 12
20283: ARRAY
20284: PPUSH
20285: LD_INT 200
20287: PPUSH
20288: CALL_OW 234
// end ;
20292: PPOPN 1
20294: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20295: LD_EXP 22
20299: PUSH
20300: LD_EXP 51
20304: AND
20305: IFFALSE 20384
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20313: LD_ADDR_VAR 0 1
20317: PUSH
20318: LD_INT 22
20320: PUSH
20321: LD_OWVAR 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 21
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 69
20348: ST_TO_ADDR
// if not tmp then
20349: LD_VAR 0 1
20353: NOT
20354: IFFALSE 20358
// exit ;
20356: GO 20384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20358: LD_VAR 0 1
20362: PUSH
20363: LD_INT 1
20365: PPUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 12
20375: ARRAY
20376: PPUSH
20377: LD_INT 60
20379: PPUSH
20380: CALL_OW 234
// end ;
20384: PPOPN 1
20386: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 52
20396: AND
20397: IFFALSE 20496
20399: GO 20401
20401: DISABLE
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
// begin enable ;
20406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20407: LD_ADDR_VAR 0 1
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_OWVAR 2
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 61
20426: PUSH
20427: EMPTY
20428: LIST
20429: PUSH
20430: LD_INT 33
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: LIST
20444: PPUSH
20445: CALL_OW 69
20449: ST_TO_ADDR
// if not tmp then
20450: LD_VAR 0 1
20454: NOT
20455: IFFALSE 20459
// exit ;
20457: GO 20496
// for i in tmp do
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20494
// if IsControledBy ( i ) then
20472: LD_VAR 0 2
20476: PPUSH
20477: CALL_OW 312
20481: IFFALSE 20492
// ComUnlink ( i ) ;
20483: LD_VAR 0 2
20487: PPUSH
20488: CALL_OW 136
20492: GO 20469
20494: POP
20495: POP
// end ;
20496: PPOPN 2
20498: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20499: LD_EXP 22
20503: PUSH
20504: LD_EXP 53
20508: AND
20509: IFFALSE 20649
20511: GO 20513
20513: DISABLE
20514: LD_INT 0
20516: PPUSH
20517: PPUSH
// begin ToLua ( displayPowell(); ) ;
20518: LD_STRING displayPowell();
20520: PPUSH
20521: CALL_OW 559
// uc_side := 0 ;
20525: LD_ADDR_OWVAR 20
20529: PUSH
20530: LD_INT 0
20532: ST_TO_ADDR
// uc_nation := 2 ;
20533: LD_ADDR_OWVAR 21
20537: PUSH
20538: LD_INT 2
20540: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20541: LD_ADDR_OWVAR 37
20545: PUSH
20546: LD_INT 14
20548: ST_TO_ADDR
// vc_engine := engine_siberite ;
20549: LD_ADDR_OWVAR 39
20553: PUSH
20554: LD_INT 3
20556: ST_TO_ADDR
// vc_control := control_apeman ;
20557: LD_ADDR_OWVAR 38
20561: PUSH
20562: LD_INT 5
20564: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20565: LD_ADDR_OWVAR 40
20569: PUSH
20570: LD_INT 29
20572: ST_TO_ADDR
// un := CreateVehicle ;
20573: LD_ADDR_VAR 0 2
20577: PUSH
20578: CALL_OW 45
20582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20583: LD_VAR 0 2
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20595: LD_INT 35
20597: PPUSH
20598: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20602: LD_VAR 0 2
20606: PPUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: PPUSH
20624: LD_VAR 0 2
20628: PPUSH
20629: CALL_OW 74
20633: PPUSH
20634: CALL_OW 115
// until IsDead ( un ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: CALL_OW 301
20647: IFFALSE 20595
// end ;
20649: PPOPN 2
20651: END
// every 0 0$1 trigger StreamModeActive and sStu do
20652: LD_EXP 22
20656: PUSH
20657: LD_EXP 61
20661: AND
20662: IFFALSE 20678
20664: GO 20666
20666: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20667: LD_STRING displayStucuk();
20669: PPUSH
20670: CALL_OW 559
// ResetFog ;
20674: CALL_OW 335
// end ;
20678: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20679: LD_EXP 22
20683: PUSH
20684: LD_EXP 54
20688: AND
20689: IFFALSE 20830
20691: GO 20693
20693: DISABLE
20694: LD_INT 0
20696: PPUSH
20697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_INT 22
20705: PUSH
20706: LD_OWVAR 2
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 21
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PPUSH
20729: CALL_OW 69
20733: ST_TO_ADDR
// if not tmp then
20734: LD_VAR 0 2
20738: NOT
20739: IFFALSE 20743
// exit ;
20741: GO 20830
// un := tmp [ rand ( 1 , tmp ) ] ;
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 1
20755: PPUSH
20756: LD_VAR 0 2
20760: PPUSH
20761: CALL_OW 12
20765: ARRAY
20766: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20767: LD_VAR 0 1
20771: PPUSH
20772: LD_INT 0
20774: PPUSH
20775: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20779: LD_VAR 0 1
20783: PPUSH
20784: LD_OWVAR 3
20788: PUSH
20789: LD_VAR 0 1
20793: DIFF
20794: PPUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 74
20804: PPUSH
20805: CALL_OW 115
// wait ( 0 0$20 ) ;
20809: LD_INT 700
20811: PPUSH
20812: CALL_OW 67
// SetSide ( un , your_side ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_OWVAR 2
20825: PPUSH
20826: CALL_OW 235
// end ;
20830: PPOPN 2
20832: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20833: LD_EXP 22
20837: PUSH
20838: LD_EXP 55
20842: AND
20843: IFFALSE 20949
20845: GO 20847
20847: DISABLE
20848: LD_INT 0
20850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20851: LD_ADDR_VAR 0 1
20855: PUSH
20856: LD_INT 22
20858: PUSH
20859: LD_OWVAR 2
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: PUSH
20871: LD_INT 30
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 30
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: ST_TO_ADDR
// if not depot then
20905: LD_VAR 0 1
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 20949
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20914: LD_VAR 0 1
20918: PUSH
20919: LD_INT 1
20921: ARRAY
20922: PPUSH
20923: CALL_OW 250
20927: PPUSH
20928: LD_VAR 0 1
20932: PUSH
20933: LD_INT 1
20935: ARRAY
20936: PPUSH
20937: CALL_OW 251
20941: PPUSH
20942: LD_INT 70
20944: PPUSH
20945: CALL_OW 495
// end ;
20949: PPOPN 1
20951: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20952: LD_EXP 22
20956: PUSH
20957: LD_EXP 56
20961: AND
20962: IFFALSE 21173
20964: GO 20966
20966: DISABLE
20967: LD_INT 0
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20974: LD_ADDR_VAR 0 5
20978: PUSH
20979: LD_INT 22
20981: PUSH
20982: LD_OWVAR 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: ST_TO_ADDR
// if not tmp then
21010: LD_VAR 0 5
21014: NOT
21015: IFFALSE 21019
// exit ;
21017: GO 21173
// for i in tmp do
21019: LD_ADDR_VAR 0 1
21023: PUSH
21024: LD_VAR 0 5
21028: PUSH
21029: FOR_IN
21030: IFFALSE 21171
// begin d := rand ( 0 , 5 ) ;
21032: LD_ADDR_VAR 0 4
21036: PUSH
21037: LD_INT 0
21039: PPUSH
21040: LD_INT 5
21042: PPUSH
21043: CALL_OW 12
21047: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21048: LD_ADDR_VAR 0 2
21052: PUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 250
21062: PPUSH
21063: LD_VAR 0 4
21067: PPUSH
21068: LD_INT 3
21070: PPUSH
21071: LD_INT 12
21073: PPUSH
21074: CALL_OW 12
21078: PPUSH
21079: CALL_OW 272
21083: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_VAR 0 1
21093: PPUSH
21094: CALL_OW 251
21098: PPUSH
21099: LD_VAR 0 4
21103: PPUSH
21104: LD_INT 3
21106: PPUSH
21107: LD_INT 12
21109: PPUSH
21110: CALL_OW 12
21114: PPUSH
21115: CALL_OW 273
21119: ST_TO_ADDR
// if ValidHex ( x , y ) then
21120: LD_VAR 0 2
21124: PPUSH
21125: LD_VAR 0 3
21129: PPUSH
21130: CALL_OW 488
21134: IFFALSE 21169
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: LD_VAR 0 2
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: LD_INT 6
21156: PPUSH
21157: CALL_OW 12
21161: PPUSH
21162: LD_INT 1
21164: PPUSH
21165: CALL_OW 483
// end ;
21169: GO 21029
21171: POP
21172: POP
// end ;
21173: PPOPN 5
21175: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21176: LD_EXP 22
21180: PUSH
21181: LD_EXP 57
21185: AND
21186: IFFALSE 21280
21188: GO 21190
21190: DISABLE
21191: LD_INT 0
21193: PPUSH
21194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 32
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: ST_TO_ADDR
// if not tmp then
21242: LD_VAR 0 2
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21280
// for i in tmp do
21251: LD_ADDR_VAR 0 1
21255: PUSH
21256: LD_VAR 0 2
21260: PUSH
21261: FOR_IN
21262: IFFALSE 21278
// SetFuel ( i , 0 ) ;
21264: LD_VAR 0 1
21268: PPUSH
21269: LD_INT 0
21271: PPUSH
21272: CALL_OW 240
21276: GO 21261
21278: POP
21279: POP
// end ;
21280: PPOPN 2
21282: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21283: LD_EXP 22
21287: PUSH
21288: LD_EXP 58
21292: AND
21293: IFFALSE 21359
21295: GO 21297
21297: DISABLE
21298: LD_INT 0
21300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21301: LD_ADDR_VAR 0 1
21305: PUSH
21306: LD_INT 22
21308: PUSH
21309: LD_OWVAR 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 30
21320: PUSH
21321: LD_INT 29
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: ST_TO_ADDR
// if not tmp then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21359
// DestroyUnit ( tmp [ 1 ] ) ;
21346: LD_VAR 0 1
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PPUSH
21355: CALL_OW 65
// end ;
21359: PPOPN 1
21361: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21362: LD_EXP 22
21366: PUSH
21367: LD_EXP 60
21371: AND
21372: IFFALSE 21501
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
// begin uc_side := 0 ;
21380: LD_ADDR_OWVAR 20
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// uc_nation := nation_arabian ;
21388: LD_ADDR_OWVAR 21
21392: PUSH
21393: LD_INT 2
21395: ST_TO_ADDR
// hc_gallery :=  ;
21396: LD_ADDR_OWVAR 33
21400: PUSH
21401: LD_STRING 
21403: ST_TO_ADDR
// hc_name :=  ;
21404: LD_ADDR_OWVAR 26
21408: PUSH
21409: LD_STRING 
21411: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21412: LD_INT 1
21414: PPUSH
21415: LD_INT 11
21417: PPUSH
21418: LD_INT 10
21420: PPUSH
21421: CALL_OW 380
// un := CreateHuman ;
21425: LD_ADDR_VAR 0 1
21429: PUSH
21430: CALL_OW 44
21434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21447: LD_INT 35
21449: PPUSH
21450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_INT 22
21461: PUSH
21462: LD_OWVAR 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PPUSH
21471: CALL_OW 69
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 74
21485: PPUSH
21486: CALL_OW 115
// until IsDead ( un ) ;
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 301
21499: IFFALSE 21447
// end ;
21501: PPOPN 1
21503: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21504: LD_EXP 22
21508: PUSH
21509: LD_EXP 62
21513: AND
21514: IFFALSE 21526
21516: GO 21518
21518: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21519: LD_STRING earthquake(getX(game), 0, 32)
21521: PPUSH
21522: CALL_OW 559
21526: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21527: LD_EXP 22
21531: PUSH
21532: LD_EXP 63
21536: AND
21537: IFFALSE 21628
21539: GO 21541
21541: DISABLE
21542: LD_INT 0
21544: PPUSH
// begin enable ;
21545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_INT 22
21553: PUSH
21554: LD_OWVAR 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 21
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 33
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PPUSH
21588: CALL_OW 69
21592: ST_TO_ADDR
// if not tmp then
21593: LD_VAR 0 1
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 21628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21602: LD_VAR 0 1
21606: PUSH
21607: LD_INT 1
21609: PPUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 12
21619: ARRAY
21620: PPUSH
21621: LD_INT 1
21623: PPUSH
21624: CALL_OW 234
// end ;
21628: PPOPN 1
21630: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21631: LD_EXP 22
21635: PUSH
21636: LD_EXP 64
21640: AND
21641: IFFALSE 21782
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21651: LD_ADDR_VAR 0 3
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_OWVAR 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 25
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: ST_TO_ADDR
// if not tmp then
21687: LD_VAR 0 3
21691: NOT
21692: IFFALSE 21696
// exit ;
21694: GO 21782
// un := tmp [ rand ( 1 , tmp ) ] ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 1
21708: PPUSH
21709: LD_VAR 0 3
21713: PPUSH
21714: CALL_OW 12
21718: ARRAY
21719: ST_TO_ADDR
// if Crawls ( un ) then
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL_OW 318
21729: IFFALSE 21740
// ComWalk ( un ) ;
21731: LD_VAR 0 2
21735: PPUSH
21736: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21740: LD_VAR 0 2
21744: PPUSH
21745: LD_INT 9
21747: PPUSH
21748: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21752: LD_INT 28
21754: PPUSH
21755: LD_OWVAR 2
21759: PPUSH
21760: LD_INT 2
21762: PPUSH
21763: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21767: LD_INT 29
21769: PPUSH
21770: LD_OWVAR 2
21774: PPUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 322
// end ;
21782: PPOPN 3
21784: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21785: LD_EXP 22
21789: PUSH
21790: LD_EXP 65
21794: AND
21795: IFFALSE 21906
21797: GO 21799
21799: DISABLE
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
21804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_OWVAR 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: ST_TO_ADDR
// if not tmp then
21841: LD_VAR 0 3
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 21906
// un := tmp [ rand ( 1 , tmp ) ] ;
21850: LD_ADDR_VAR 0 2
21854: PUSH
21855: LD_VAR 0 3
21859: PUSH
21860: LD_INT 1
21862: PPUSH
21863: LD_VAR 0 3
21867: PPUSH
21868: CALL_OW 12
21872: ARRAY
21873: ST_TO_ADDR
// if Crawls ( un ) then
21874: LD_VAR 0 2
21878: PPUSH
21879: CALL_OW 318
21883: IFFALSE 21894
// ComWalk ( un ) ;
21885: LD_VAR 0 2
21889: PPUSH
21890: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21894: LD_VAR 0 2
21898: PPUSH
21899: LD_INT 8
21901: PPUSH
21902: CALL_OW 336
// end ;
21906: PPOPN 3
21908: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21909: LD_EXP 22
21913: PUSH
21914: LD_EXP 66
21918: AND
21919: IFFALSE 22063
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 21
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 34
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 34
21970: PUSH
21971: LD_INT 51
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 32
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 2
22008: NOT
22009: IFFALSE 22013
// exit ;
22011: GO 22063
// for i in tmp do
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: FOR_IN
22024: IFFALSE 22061
// if GetCargo ( i , mat_artifact ) = 0 then
22026: LD_VAR 0 1
22030: PPUSH
22031: LD_INT 4
22033: PPUSH
22034: CALL_OW 289
22038: PUSH
22039: LD_INT 0
22041: EQUAL
22042: IFFALSE 22059
// SetCargo ( i , mat_siberit , 100 ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_INT 3
22051: PPUSH
22052: LD_INT 100
22054: PPUSH
22055: CALL_OW 290
22059: GO 22023
22061: POP
22062: POP
// end ;
22063: PPOPN 2
22065: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22066: LD_EXP 22
22070: PUSH
22071: LD_EXP 67
22075: AND
22076: IFFALSE 22259
22078: GO 22080
22080: DISABLE
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_INT 22
22092: PUSH
22093: LD_OWVAR 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PPUSH
22102: CALL_OW 69
22106: ST_TO_ADDR
// if not tmp then
22107: LD_VAR 0 2
22111: NOT
22112: IFFALSE 22116
// exit ;
22114: GO 22259
// for i := 1 to 2 do
22116: LD_ADDR_VAR 0 1
22120: PUSH
22121: DOUBLE
22122: LD_INT 1
22124: DEC
22125: ST_TO_ADDR
22126: LD_INT 2
22128: PUSH
22129: FOR_TO
22130: IFFALSE 22257
// begin uc_side := your_side ;
22132: LD_ADDR_OWVAR 20
22136: PUSH
22137: LD_OWVAR 2
22141: ST_TO_ADDR
// uc_nation := nation_american ;
22142: LD_ADDR_OWVAR 21
22146: PUSH
22147: LD_INT 1
22149: ST_TO_ADDR
// vc_chassis := us_morphling ;
22150: LD_ADDR_OWVAR 37
22154: PUSH
22155: LD_INT 5
22157: ST_TO_ADDR
// vc_engine := engine_siberite ;
22158: LD_ADDR_OWVAR 39
22162: PUSH
22163: LD_INT 3
22165: ST_TO_ADDR
// vc_control := control_computer ;
22166: LD_ADDR_OWVAR 38
22170: PUSH
22171: LD_INT 3
22173: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22174: LD_ADDR_OWVAR 40
22178: PUSH
22179: LD_INT 10
22181: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22182: LD_VAR 0 2
22186: PUSH
22187: LD_INT 1
22189: ARRAY
22190: PPUSH
22191: CALL_OW 310
22195: NOT
22196: IFFALSE 22243
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22198: CALL_OW 45
22202: PPUSH
22203: LD_VAR 0 2
22207: PUSH
22208: LD_INT 1
22210: ARRAY
22211: PPUSH
22212: CALL_OW 250
22216: PPUSH
22217: LD_VAR 0 2
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: CALL_OW 251
22230: PPUSH
22231: LD_INT 12
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 50
22241: GO 22255
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22243: CALL_OW 45
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 51
// end ;
22255: GO 22129
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22262: LD_EXP 22
22266: PUSH
22267: LD_EXP 68
22271: AND
22272: IFFALSE 22494
22274: GO 22276
22276: DISABLE
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22285: LD_ADDR_VAR 0 6
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_OWVAR 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 21
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: ST_TO_ADDR
// if not tmp then
22339: LD_VAR 0 6
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22494
// s1 := rand ( 1 , 4 ) ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 1
22355: PPUSH
22356: LD_INT 4
22358: PPUSH
22359: CALL_OW 12
22363: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_VAR 0 6
22373: PUSH
22374: LD_INT 1
22376: ARRAY
22377: PPUSH
22378: LD_VAR 0 2
22382: PPUSH
22383: CALL_OW 259
22387: ST_TO_ADDR
// if s1 = 1 then
22388: LD_VAR 0 2
22392: PUSH
22393: LD_INT 1
22395: EQUAL
22396: IFFALSE 22416
// s2 := rand ( 2 , 4 ) else
22398: LD_ADDR_VAR 0 3
22402: PUSH
22403: LD_INT 2
22405: PPUSH
22406: LD_INT 4
22408: PPUSH
22409: CALL_OW 12
22413: ST_TO_ADDR
22414: GO 22424
// s2 := 1 ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22424: LD_ADDR_VAR 0 5
22428: PUSH
22429: LD_VAR 0 6
22433: PUSH
22434: LD_INT 1
22436: ARRAY
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 259
22447: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22448: LD_VAR 0 6
22452: PUSH
22453: LD_INT 1
22455: ARRAY
22456: PPUSH
22457: LD_VAR 0 2
22461: PPUSH
22462: LD_VAR 0 5
22466: PPUSH
22467: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22471: LD_VAR 0 6
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_VAR 0 4
22489: PPUSH
22490: CALL_OW 237
// end ;
22494: PPOPN 6
22496: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22497: LD_EXP 22
22501: PUSH
22502: LD_EXP 69
22506: AND
22507: IFFALSE 22586
22509: GO 22511
22511: DISABLE
22512: LD_INT 0
22514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22515: LD_ADDR_VAR 0 1
22519: PUSH
22520: LD_INT 22
22522: PUSH
22523: LD_OWVAR 2
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 30
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL_OW 69
22550: ST_TO_ADDR
// if not tmp then
22551: LD_VAR 0 1
22555: NOT
22556: IFFALSE 22560
// exit ;
22558: GO 22586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22560: LD_VAR 0 1
22564: PUSH
22565: LD_INT 1
22567: PPUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: CALL_OW 12
22577: ARRAY
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: CALL_OW 234
// end ;
22586: PPOPN 1
22588: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22589: LD_EXP 22
22593: PUSH
22594: LD_EXP 70
22598: AND
22599: IFFALSE 22711
22601: GO 22603
22603: DISABLE
22604: LD_INT 0
22606: PPUSH
22607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_OWVAR 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 27
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 30
22640: PUSH
22641: LD_INT 26
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: LD_INT 28
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: ST_TO_ADDR
// if not tmp then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22711
// for i in tmp do
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22709
// SetLives ( i , 1 ) ;
22695: LD_VAR 0 1
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 234
22707: GO 22692
22709: POP
22710: POP
// end ;
22711: PPOPN 2
22713: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22714: LD_EXP 22
22718: PUSH
22719: LD_EXP 71
22723: AND
22724: IFFALSE 23011
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// begin i := rand ( 1 , 7 ) ;
22734: LD_ADDR_VAR 0 1
22738: PUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_INT 7
22744: PPUSH
22745: CALL_OW 12
22749: ST_TO_ADDR
// case i of 1 :
22750: LD_VAR 0 1
22754: PUSH
22755: LD_INT 1
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22773
22763: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22764: LD_STRING earthquake(getX(game), 0, 32)
22766: PPUSH
22767: CALL_OW 559
22771: GO 23011
22773: LD_INT 2
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22795
22781: POP
// begin ToLua ( displayStucuk(); ) ;
22782: LD_STRING displayStucuk();
22784: PPUSH
22785: CALL_OW 559
// ResetFog ;
22789: CALL_OW 335
// end ; 3 :
22793: GO 23011
22795: LD_INT 3
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22907
22803: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_OWVAR 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 25
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 69
22839: ST_TO_ADDR
// if not tmp then
22840: LD_VAR 0 2
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 23011
// un := tmp [ rand ( 1 , tmp ) ] ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_VAR 0 2
22858: PUSH
22859: LD_INT 1
22861: PPUSH
22862: LD_VAR 0 2
22866: PPUSH
22867: CALL_OW 12
22871: ARRAY
22872: ST_TO_ADDR
// if Crawls ( un ) then
22873: LD_VAR 0 3
22877: PPUSH
22878: CALL_OW 318
22882: IFFALSE 22893
// ComWalk ( un ) ;
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_INT 8
22900: PPUSH
22901: CALL_OW 336
// end ; 4 :
22905: GO 23011
22907: LD_INT 4
22909: DOUBLE
22910: EQUAL
22911: IFTRUE 22915
22913: GO 22989
22915: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_OWVAR 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 30
22935: PUSH
22936: LD_INT 29
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: ST_TO_ADDR
// if not tmp then
22952: LD_VAR 0 2
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 23011
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22961: LD_VAR 0 2
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PPUSH
22970: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22974: LD_VAR 0 2
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: PPUSH
22983: CALL_OW 65
// end ; 5 .. 7 :
22987: GO 23011
22989: LD_INT 5
22991: DOUBLE
22992: GREATEREQUAL
22993: IFFALSE 23001
22995: LD_INT 7
22997: DOUBLE
22998: LESSEQUAL
22999: IFTRUE 23003
23001: GO 23010
23003: POP
// StreamSibBomb ; end ;
23004: CALL 19248 0 0
23008: GO 23011
23010: POP
// end ;
23011: PPOPN 3
23013: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23014: LD_EXP 22
23018: PUSH
23019: LD_EXP 72
23023: AND
23024: IFFALSE 23180
23026: GO 23028
23028: DISABLE
23029: LD_INT 0
23031: PPUSH
23032: PPUSH
23033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23034: LD_ADDR_VAR 0 2
23038: PUSH
23039: LD_INT 81
23041: PUSH
23042: LD_OWVAR 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 21
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PPUSH
23083: CALL_OW 69
23087: ST_TO_ADDR
// if not tmp then
23088: LD_VAR 0 2
23092: NOT
23093: IFFALSE 23097
// exit ;
23095: GO 23180
// p := 0 ;
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_INT 0
23104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23105: LD_INT 35
23107: PPUSH
23108: CALL_OW 67
// p := p + 1 ;
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_VAR 0 3
23121: PUSH
23122: LD_INT 1
23124: PLUS
23125: ST_TO_ADDR
// for i in tmp do
23126: LD_ADDR_VAR 0 1
23130: PUSH
23131: LD_VAR 0 2
23135: PUSH
23136: FOR_IN
23137: IFFALSE 23168
// if GetLives ( i ) < 1000 then
23139: LD_VAR 0 1
23143: PPUSH
23144: CALL_OW 256
23148: PUSH
23149: LD_INT 1000
23151: LESS
23152: IFFALSE 23166
// SetLives ( i , 1000 ) ;
23154: LD_VAR 0 1
23158: PPUSH
23159: LD_INT 1000
23161: PPUSH
23162: CALL_OW 234
23166: GO 23136
23168: POP
23169: POP
// until p > 20 ;
23170: LD_VAR 0 3
23174: PUSH
23175: LD_INT 20
23177: GREATER
23178: IFFALSE 23105
// end ;
23180: PPOPN 3
23182: END
// every 0 0$1 trigger StreamModeActive and sTime do
23183: LD_EXP 22
23187: PUSH
23188: LD_EXP 73
23192: AND
23193: IFFALSE 23228
23195: GO 23197
23197: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23198: LD_INT 28
23200: PPUSH
23201: LD_OWVAR 2
23205: PPUSH
23206: LD_INT 2
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23213: LD_INT 30
23215: PPUSH
23216: LD_OWVAR 2
23220: PPUSH
23221: LD_INT 2
23223: PPUSH
23224: CALL_OW 322
// end ;
23228: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23229: LD_EXP 22
23233: PUSH
23234: LD_EXP 74
23238: AND
23239: IFFALSE 23360
23241: GO 23243
23243: DISABLE
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: PUSH
23278: LD_INT 23
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 2
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23360
// for i in tmp do
23311: LD_ADDR_VAR 0 1
23315: PUSH
23316: LD_VAR 0 2
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23358
// begin if Crawls ( i ) then
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 318
23333: IFFALSE 23344
// ComWalk ( i ) ;
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 138
// SetClass ( i , 2 ) ;
23344: LD_VAR 0 1
23348: PPUSH
23349: LD_INT 2
23351: PPUSH
23352: CALL_OW 336
// end ;
23356: GO 23321
23358: POP
23359: POP
// end ;
23360: PPOPN 2
23362: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23363: LD_EXP 22
23367: PUSH
23368: LD_EXP 75
23372: AND
23373: IFFALSE 23661
23375: GO 23377
23377: DISABLE
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
23382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23383: LD_OWVAR 2
23387: PPUSH
23388: LD_INT 9
23390: PPUSH
23391: LD_INT 1
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23401: LD_INT 9
23403: PPUSH
23404: LD_OWVAR 2
23408: PPUSH
23409: CALL_OW 343
// uc_side := 9 ;
23413: LD_ADDR_OWVAR 20
23417: PUSH
23418: LD_INT 9
23420: ST_TO_ADDR
// uc_nation := 2 ;
23421: LD_ADDR_OWVAR 21
23425: PUSH
23426: LD_INT 2
23428: ST_TO_ADDR
// hc_name := Dark Warrior ;
23429: LD_ADDR_OWVAR 26
23433: PUSH
23434: LD_STRING Dark Warrior
23436: ST_TO_ADDR
// hc_gallery :=  ;
23437: LD_ADDR_OWVAR 33
23441: PUSH
23442: LD_STRING 
23444: ST_TO_ADDR
// hc_noskilllimit := true ;
23445: LD_ADDR_OWVAR 76
23449: PUSH
23450: LD_INT 1
23452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23453: LD_ADDR_OWVAR 31
23457: PUSH
23458: LD_INT 30
23460: PUSH
23461: LD_INT 30
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 30
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// un := CreateHuman ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: CALL_OW 44
23485: ST_TO_ADDR
// hc_noskilllimit := false ;
23486: LD_ADDR_OWVAR 76
23490: PUSH
23491: LD_INT 0
23493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23494: LD_VAR 0 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 51
// ToLua ( playRanger() ) ;
23506: LD_STRING playRanger()
23508: PPUSH
23509: CALL_OW 559
// p := 0 ;
23513: LD_ADDR_VAR 0 2
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23521: LD_INT 35
23523: PPUSH
23524: CALL_OW 67
// p := p + 1 ;
23528: LD_ADDR_VAR 0 2
23532: PUSH
23533: LD_VAR 0 2
23537: PUSH
23538: LD_INT 1
23540: PLUS
23541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23542: LD_VAR 0 3
23546: PPUSH
23547: CALL_OW 256
23551: PUSH
23552: LD_INT 1000
23554: LESS
23555: IFFALSE 23569
// SetLives ( un , 1000 ) ;
23557: LD_VAR 0 3
23561: PPUSH
23562: LD_INT 1000
23564: PPUSH
23565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_INT 81
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 91
23588: PUSH
23589: LD_VAR 0 3
23593: PUSH
23594: LD_INT 30
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PPUSH
23606: CALL_OW 69
23610: PPUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: CALL_OW 74
23620: PPUSH
23621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23625: LD_VAR 0 2
23629: PUSH
23630: LD_INT 80
23632: GREATER
23633: PUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: CALL_OW 301
23643: OR
23644: IFFALSE 23521
// if un then
23646: LD_VAR 0 3
23650: IFFALSE 23661
// RemoveUnit ( un ) ;
23652: LD_VAR 0 3
23656: PPUSH
23657: CALL_OW 64
// end ;
23661: PPOPN 3
23663: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23664: LD_EXP 76
23668: IFFALSE 23784
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23678: LD_ADDR_VAR 0 2
23682: PUSH
23683: LD_INT 81
23685: PUSH
23686: LD_OWVAR 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PPUSH
23709: CALL_OW 69
23713: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23714: LD_STRING playComputer()
23716: PPUSH
23717: CALL_OW 559
// if not tmp then
23721: LD_VAR 0 2
23725: NOT
23726: IFFALSE 23730
// exit ;
23728: GO 23784
// for i in tmp do
23730: LD_ADDR_VAR 0 1
23734: PUSH
23735: LD_VAR 0 2
23739: PUSH
23740: FOR_IN
23741: IFFALSE 23782
// for j := 1 to 4 do
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: DOUBLE
23749: LD_INT 1
23751: DEC
23752: ST_TO_ADDR
23753: LD_INT 4
23755: PUSH
23756: FOR_TO
23757: IFFALSE 23778
// SetSkill ( i , j , 10 ) ;
23759: LD_VAR 0 1
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 10
23771: PPUSH
23772: CALL_OW 237
23776: GO 23756
23778: POP
23779: POP
23780: GO 23740
23782: POP
23783: POP
// end ;
23784: PPOPN 3
23786: END
// every 0 0$1 trigger s30 do var i , tmp ;
23787: LD_EXP 77
23791: IFFALSE 23860
23793: GO 23795
23795: DISABLE
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23800: LD_ADDR_VAR 0 2
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_OWVAR 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not tmp then
23822: LD_VAR 0 2
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23860
// for i in tmp do
23831: LD_ADDR_VAR 0 1
23835: PUSH
23836: LD_VAR 0 2
23840: PUSH
23841: FOR_IN
23842: IFFALSE 23858
// SetLives ( i , 300 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 300
23851: PPUSH
23852: CALL_OW 234
23856: GO 23841
23858: POP
23859: POP
// end ;
23860: PPOPN 2
23862: END
// every 0 0$1 trigger s60 do var i , tmp ;
23863: LD_EXP 78
23867: IFFALSE 23936
23869: GO 23871
23871: DISABLE
23872: LD_INT 0
23874: PPUSH
23875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_OWVAR 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 2
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23936
// for i in tmp do
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_VAR 0 2
23916: PUSH
23917: FOR_IN
23918: IFFALSE 23934
// SetLives ( i , 600 ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 600
23927: PPUSH
23928: CALL_OW 234
23932: GO 23917
23934: POP
23935: POP
// end ;
23936: PPOPN 2
23938: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23939: LD_INT 0
23941: PPUSH
// case cmd of 301 :
23942: LD_VAR 0 1
23946: PUSH
23947: LD_INT 301
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 23987
23955: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23956: LD_VAR 0 6
23960: PPUSH
23961: LD_VAR 0 7
23965: PPUSH
23966: LD_VAR 0 8
23970: PPUSH
23971: LD_VAR 0 4
23975: PPUSH
23976: LD_VAR 0 5
23980: PPUSH
23981: CALL 25196 0 5
23985: GO 24108
23987: LD_INT 302
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24032
23995: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23996: LD_VAR 0 6
24000: PPUSH
24001: LD_VAR 0 7
24005: PPUSH
24006: LD_VAR 0 8
24010: PPUSH
24011: LD_VAR 0 9
24015: PPUSH
24016: LD_VAR 0 4
24020: PPUSH
24021: LD_VAR 0 5
24025: PPUSH
24026: CALL 25287 0 6
24030: GO 24108
24032: LD_INT 303
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24077
24040: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24041: LD_VAR 0 6
24045: PPUSH
24046: LD_VAR 0 7
24050: PPUSH
24051: LD_VAR 0 8
24055: PPUSH
24056: LD_VAR 0 9
24060: PPUSH
24061: LD_VAR 0 4
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL 24113 0 6
24075: GO 24108
24077: LD_INT 304
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24107
24085: POP
// hHackTeleport ( unit , x , y ) ; end ;
24086: LD_VAR 0 2
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: CALL 25880 0 3
24105: GO 24108
24107: POP
// end ;
24108: LD_VAR 0 12
24112: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24113: LD_INT 0
24115: PPUSH
24116: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24117: LD_VAR 0 1
24121: PUSH
24122: LD_INT 1
24124: LESS
24125: PUSH
24126: LD_VAR 0 1
24130: PUSH
24131: LD_INT 3
24133: GREATER
24134: OR
24135: PUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: LD_VAR 0 6
24145: PPUSH
24146: CALL_OW 428
24150: OR
24151: IFFALSE 24155
// exit ;
24153: GO 24883
// uc_side := your_side ;
24155: LD_ADDR_OWVAR 20
24159: PUSH
24160: LD_OWVAR 2
24164: ST_TO_ADDR
// uc_nation := nation ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_VAR 0 1
24174: ST_TO_ADDR
// bc_level = 1 ;
24175: LD_ADDR_OWVAR 43
24179: PUSH
24180: LD_INT 1
24182: ST_TO_ADDR
// case btype of 1 :
24183: LD_VAR 0 2
24187: PUSH
24188: LD_INT 1
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24207
24196: POP
// bc_type := b_depot ; 2 :
24197: LD_ADDR_OWVAR 42
24201: PUSH
24202: LD_INT 0
24204: ST_TO_ADDR
24205: GO 24827
24207: LD_INT 2
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24226
24215: POP
// bc_type := b_warehouse ; 3 :
24216: LD_ADDR_OWVAR 42
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
24224: GO 24827
24226: LD_INT 3
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24234
24232: GO 24245
24234: POP
// bc_type := b_lab ; 4 .. 9 :
24235: LD_ADDR_OWVAR 42
24239: PUSH
24240: LD_INT 6
24242: ST_TO_ADDR
24243: GO 24827
24245: LD_INT 4
24247: DOUBLE
24248: GREATEREQUAL
24249: IFFALSE 24257
24251: LD_INT 9
24253: DOUBLE
24254: LESSEQUAL
24255: IFTRUE 24259
24257: GO 24319
24259: POP
// begin bc_type := b_lab_half ;
24260: LD_ADDR_OWVAR 42
24264: PUSH
24265: LD_INT 7
24267: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24268: LD_ADDR_OWVAR 44
24272: PUSH
24273: LD_INT 10
24275: PUSH
24276: LD_INT 11
24278: PUSH
24279: LD_INT 12
24281: PUSH
24282: LD_INT 15
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: LD_INT 13
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: LD_VAR 0 2
24303: PUSH
24304: LD_INT 3
24306: MINUS
24307: ARRAY
24308: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24309: LD_ADDR_OWVAR 45
24313: PUSH
24314: LD_INT 9
24316: ST_TO_ADDR
// end ; 10 .. 13 :
24317: GO 24827
24319: LD_INT 10
24321: DOUBLE
24322: GREATEREQUAL
24323: IFFALSE 24331
24325: LD_INT 13
24327: DOUBLE
24328: LESSEQUAL
24329: IFTRUE 24333
24331: GO 24410
24333: POP
// begin bc_type := b_lab_full ;
24334: LD_ADDR_OWVAR 42
24338: PUSH
24339: LD_INT 8
24341: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24342: LD_ADDR_OWVAR 44
24346: PUSH
24347: LD_INT 10
24349: PUSH
24350: LD_INT 12
24352: PUSH
24353: LD_INT 14
24355: PUSH
24356: LD_INT 13
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: LD_VAR 0 2
24369: PUSH
24370: LD_INT 9
24372: MINUS
24373: ARRAY
24374: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24375: LD_ADDR_OWVAR 45
24379: PUSH
24380: LD_INT 11
24382: PUSH
24383: LD_INT 15
24385: PUSH
24386: LD_INT 12
24388: PUSH
24389: LD_INT 15
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PUSH
24398: LD_VAR 0 2
24402: PUSH
24403: LD_INT 9
24405: MINUS
24406: ARRAY
24407: ST_TO_ADDR
// end ; 14 :
24408: GO 24827
24410: LD_INT 14
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24429
24418: POP
// bc_type := b_workshop ; 15 :
24419: LD_ADDR_OWVAR 42
24423: PUSH
24424: LD_INT 2
24426: ST_TO_ADDR
24427: GO 24827
24429: LD_INT 15
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24448
24437: POP
// bc_type := b_factory ; 16 :
24438: LD_ADDR_OWVAR 42
24442: PUSH
24443: LD_INT 3
24445: ST_TO_ADDR
24446: GO 24827
24448: LD_INT 16
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24467
24456: POP
// bc_type := b_ext_gun ; 17 :
24457: LD_ADDR_OWVAR 42
24461: PUSH
24462: LD_INT 17
24464: ST_TO_ADDR
24465: GO 24827
24467: LD_INT 17
24469: DOUBLE
24470: EQUAL
24471: IFTRUE 24475
24473: GO 24503
24475: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24476: LD_ADDR_OWVAR 42
24480: PUSH
24481: LD_INT 19
24483: PUSH
24484: LD_INT 23
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: PUSH
24495: LD_VAR 0 1
24499: ARRAY
24500: ST_TO_ADDR
24501: GO 24827
24503: LD_INT 18
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24522
24511: POP
// bc_type := b_ext_radar ; 19 :
24512: LD_ADDR_OWVAR 42
24516: PUSH
24517: LD_INT 20
24519: ST_TO_ADDR
24520: GO 24827
24522: LD_INT 19
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24541
24530: POP
// bc_type := b_ext_radio ; 20 :
24531: LD_ADDR_OWVAR 42
24535: PUSH
24536: LD_INT 22
24538: ST_TO_ADDR
24539: GO 24827
24541: LD_INT 20
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24560
24549: POP
// bc_type := b_ext_siberium ; 21 :
24550: LD_ADDR_OWVAR 42
24554: PUSH
24555: LD_INT 21
24557: ST_TO_ADDR
24558: GO 24827
24560: LD_INT 21
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24579
24568: POP
// bc_type := b_ext_computer ; 22 :
24569: LD_ADDR_OWVAR 42
24573: PUSH
24574: LD_INT 24
24576: ST_TO_ADDR
24577: GO 24827
24579: LD_INT 22
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24598
24587: POP
// bc_type := b_ext_track ; 23 :
24588: LD_ADDR_OWVAR 42
24592: PUSH
24593: LD_INT 16
24595: ST_TO_ADDR
24596: GO 24827
24598: LD_INT 23
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24617
24606: POP
// bc_type := b_ext_laser ; 24 :
24607: LD_ADDR_OWVAR 42
24611: PUSH
24612: LD_INT 25
24614: ST_TO_ADDR
24615: GO 24827
24617: LD_INT 24
24619: DOUBLE
24620: EQUAL
24621: IFTRUE 24625
24623: GO 24636
24625: POP
// bc_type := b_control_tower ; 25 :
24626: LD_ADDR_OWVAR 42
24630: PUSH
24631: LD_INT 36
24633: ST_TO_ADDR
24634: GO 24827
24636: LD_INT 25
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24655
24644: POP
// bc_type := b_breastwork ; 26 :
24645: LD_ADDR_OWVAR 42
24649: PUSH
24650: LD_INT 31
24652: ST_TO_ADDR
24653: GO 24827
24655: LD_INT 26
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24674
24663: POP
// bc_type := b_bunker ; 27 :
24664: LD_ADDR_OWVAR 42
24668: PUSH
24669: LD_INT 32
24671: ST_TO_ADDR
24672: GO 24827
24674: LD_INT 27
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24693
24682: POP
// bc_type := b_turret ; 28 :
24683: LD_ADDR_OWVAR 42
24687: PUSH
24688: LD_INT 33
24690: ST_TO_ADDR
24691: GO 24827
24693: LD_INT 28
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24712
24701: POP
// bc_type := b_armoury ; 29 :
24702: LD_ADDR_OWVAR 42
24706: PUSH
24707: LD_INT 4
24709: ST_TO_ADDR
24710: GO 24827
24712: LD_INT 29
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24731
24720: POP
// bc_type := b_barracks ; 30 :
24721: LD_ADDR_OWVAR 42
24725: PUSH
24726: LD_INT 5
24728: ST_TO_ADDR
24729: GO 24827
24731: LD_INT 30
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24750
24739: POP
// bc_type := b_solar_power ; 31 :
24740: LD_ADDR_OWVAR 42
24744: PUSH
24745: LD_INT 27
24747: ST_TO_ADDR
24748: GO 24827
24750: LD_INT 31
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24769
24758: POP
// bc_type := b_oil_power ; 32 :
24759: LD_ADDR_OWVAR 42
24763: PUSH
24764: LD_INT 26
24766: ST_TO_ADDR
24767: GO 24827
24769: LD_INT 32
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24788
24777: POP
// bc_type := b_siberite_power ; 33 :
24778: LD_ADDR_OWVAR 42
24782: PUSH
24783: LD_INT 28
24785: ST_TO_ADDR
24786: GO 24827
24788: LD_INT 33
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24807
24796: POP
// bc_type := b_oil_mine ; 34 :
24797: LD_ADDR_OWVAR 42
24801: PUSH
24802: LD_INT 29
24804: ST_TO_ADDR
24805: GO 24827
24807: LD_INT 34
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24826
24815: POP
// bc_type := b_siberite_mine ; end ;
24816: LD_ADDR_OWVAR 42
24820: PUSH
24821: LD_INT 30
24823: ST_TO_ADDR
24824: GO 24827
24826: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24827: LD_ADDR_VAR 0 8
24831: PUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: LD_VAR 0 6
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: CALL_OW 47
24851: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24852: LD_OWVAR 42
24856: PUSH
24857: LD_INT 32
24859: PUSH
24860: LD_INT 33
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: IN
24867: IFFALSE 24883
// PlaceWeaponTurret ( b , weapon ) ;
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 4
24878: PPUSH
24879: CALL_OW 431
// end ;
24883: LD_VAR 0 7
24887: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
24893: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24894: LD_ADDR_VAR 0 4
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_OWVAR 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 30
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 30
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PPUSH
24943: CALL_OW 69
24947: ST_TO_ADDR
// if not tmp then
24948: LD_VAR 0 4
24952: NOT
24953: IFFALSE 24957
// exit ;
24955: GO 25016
// for i in tmp do
24957: LD_ADDR_VAR 0 2
24961: PUSH
24962: LD_VAR 0 4
24966: PUSH
24967: FOR_IN
24968: IFFALSE 25014
// for j = 1 to 3 do
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_INT 3
24982: PUSH
24983: FOR_TO
24984: IFFALSE 25010
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24986: LD_VAR 0 2
24990: PPUSH
24991: CALL_OW 274
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: LD_INT 99999
25003: PPUSH
25004: CALL_OW 277
25008: GO 24983
25010: POP
25011: POP
25012: GO 24967
25014: POP
25015: POP
// end ;
25016: LD_VAR 0 1
25020: RET
// export function hHackSetLevel10 ; var i , j ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_INT 21
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 69
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25099
// if IsSelected ( i ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 306
25058: IFFALSE 25097
// begin for j := 1 to 4 do
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: DOUBLE
25066: LD_INT 1
25068: DEC
25069: ST_TO_ADDR
25070: LD_INT 4
25072: PUSH
25073: FOR_TO
25074: IFFALSE 25095
// SetSkill ( i , j , 10 ) ;
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: LD_INT 10
25088: PPUSH
25089: CALL_OW 237
25093: GO 25073
25095: POP
25096: POP
// end ;
25097: GO 25046
25099: POP
25100: POP
// end ;
25101: LD_VAR 0 1
25105: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: PUSH
25147: FOR_IN
25148: IFFALSE 25189
// begin for j := 1 to 4 do
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: DOUBLE
25156: LD_INT 1
25158: DEC
25159: ST_TO_ADDR
25160: LD_INT 4
25162: PUSH
25163: FOR_TO
25164: IFFALSE 25185
// SetSkill ( i , j , 10 ) ;
25166: LD_VAR 0 2
25170: PPUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: LD_INT 10
25178: PPUSH
25179: CALL_OW 237
25183: GO 25163
25185: POP
25186: POP
// end ;
25187: GO 25147
25189: POP
25190: POP
// end ;
25191: LD_VAR 0 1
25195: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25196: LD_INT 0
25198: PPUSH
// uc_side := your_side ;
25199: LD_ADDR_OWVAR 20
25203: PUSH
25204: LD_OWVAR 2
25208: ST_TO_ADDR
// uc_nation := nation ;
25209: LD_ADDR_OWVAR 21
25213: PUSH
25214: LD_VAR 0 1
25218: ST_TO_ADDR
// InitHc ;
25219: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25223: LD_INT 0
25225: PPUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: CALL_OW 428
25254: PUSH
25255: LD_INT 0
25257: EQUAL
25258: IFFALSE 25282
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25260: CALL_OW 44
25264: PPUSH
25265: LD_VAR 0 4
25269: PPUSH
25270: LD_VAR 0 5
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL_OW 48
// end ;
25282: LD_VAR 0 6
25286: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25287: LD_INT 0
25289: PPUSH
25290: PPUSH
// uc_side := your_side ;
25291: LD_ADDR_OWVAR 20
25295: PUSH
25296: LD_OWVAR 2
25300: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25301: LD_VAR 0 1
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: LD_INT 5
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: IN
25328: IFFALSE 25340
// uc_nation := nation_american else
25330: LD_ADDR_OWVAR 21
25334: PUSH
25335: LD_INT 1
25337: ST_TO_ADDR
25338: GO 25383
// if chassis in [ 11 , 12 , 13 , 14 ] then
25340: LD_VAR 0 1
25344: PUSH
25345: LD_INT 11
25347: PUSH
25348: LD_INT 12
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: LD_INT 14
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: IN
25363: IFFALSE 25375
// uc_nation := nation_arabian else
25365: LD_ADDR_OWVAR 21
25369: PUSH
25370: LD_INT 2
25372: ST_TO_ADDR
25373: GO 25383
// uc_nation := nation_russian ;
25375: LD_ADDR_OWVAR 21
25379: PUSH
25380: LD_INT 3
25382: ST_TO_ADDR
// vc_chassis := chassis ;
25383: LD_ADDR_OWVAR 37
25387: PUSH
25388: LD_VAR 0 1
25392: ST_TO_ADDR
// vc_engine := engine ;
25393: LD_ADDR_OWVAR 39
25397: PUSH
25398: LD_VAR 0 2
25402: ST_TO_ADDR
// vc_control := control ;
25403: LD_ADDR_OWVAR 38
25407: PUSH
25408: LD_VAR 0 3
25412: ST_TO_ADDR
// vc_weapon := weapon ;
25413: LD_ADDR_OWVAR 40
25417: PUSH
25418: LD_VAR 0 4
25422: ST_TO_ADDR
// un := CreateVehicle ;
25423: LD_ADDR_VAR 0 8
25427: PUSH
25428: CALL_OW 45
25432: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25433: LD_VAR 0 8
25437: PPUSH
25438: LD_INT 0
25440: PPUSH
25441: LD_INT 5
25443: PPUSH
25444: CALL_OW 12
25448: PPUSH
25449: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25453: LD_VAR 0 8
25457: PPUSH
25458: LD_VAR 0 5
25462: PPUSH
25463: LD_VAR 0 6
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 48
// end ;
25475: LD_VAR 0 7
25479: RET
// export hInvincible ; every 1 do
25480: GO 25482
25482: DISABLE
// hInvincible := [ ] ;
25483: LD_ADDR_EXP 79
25487: PUSH
25488: EMPTY
25489: ST_TO_ADDR
25490: END
// every 10 do var i ;
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
// begin enable ;
25497: ENABLE
// if not hInvincible then
25498: LD_EXP 79
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25551
// for i in hInvincible do
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_EXP 79
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25549
// if GetLives ( i ) < 1000 then
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 256
25529: PUSH
25530: LD_INT 1000
25532: LESS
25533: IFFALSE 25547
// SetLives ( i , 1000 ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_INT 1000
25542: PPUSH
25543: CALL_OW 234
25547: GO 25517
25549: POP
25550: POP
// end ;
25551: PPOPN 1
25553: END
// export function hHackInvincible ; var i ; begin
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25558: LD_ADDR_VAR 0 2
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 21
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 21
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: PUSH
25596: FOR_IN
25597: IFFALSE 25658
// if IsSelected ( i ) then
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 306
25608: IFFALSE 25656
// begin if i in hInvincible then
25610: LD_VAR 0 2
25614: PUSH
25615: LD_EXP 79
25619: IN
25620: IFFALSE 25640
// hInvincible := hInvincible diff i else
25622: LD_ADDR_EXP 79
25626: PUSH
25627: LD_EXP 79
25631: PUSH
25632: LD_VAR 0 2
25636: DIFF
25637: ST_TO_ADDR
25638: GO 25656
// hInvincible := hInvincible union i ;
25640: LD_ADDR_EXP 79
25644: PUSH
25645: LD_EXP 79
25649: PUSH
25650: LD_VAR 0 2
25654: UNION
25655: ST_TO_ADDR
// end ;
25656: GO 25596
25658: POP
25659: POP
// end ;
25660: LD_VAR 0 1
25664: RET
// export function hHackInvisible ; var i , j ; begin
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
25669: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: PUSH
25690: FOR_IN
25691: IFFALSE 25715
// if IsSelected ( i ) then
25693: LD_VAR 0 2
25697: PPUSH
25698: CALL_OW 306
25702: IFFALSE 25713
// ComForceInvisible ( i ) ;
25704: LD_VAR 0 2
25708: PPUSH
25709: CALL_OW 496
25713: GO 25690
25715: POP
25716: POP
// end ;
25717: LD_VAR 0 1
25721: RET
// export function hHackChangeYourSide ; begin
25722: LD_INT 0
25724: PPUSH
// if your_side = 8 then
25725: LD_OWVAR 2
25729: PUSH
25730: LD_INT 8
25732: EQUAL
25733: IFFALSE 25745
// your_side := 0 else
25735: LD_ADDR_OWVAR 2
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
25743: GO 25759
// your_side := your_side + 1 ;
25745: LD_ADDR_OWVAR 2
25749: PUSH
25750: LD_OWVAR 2
25754: PUSH
25755: LD_INT 1
25757: PLUS
25758: ST_TO_ADDR
// end ;
25759: LD_VAR 0 1
25763: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25764: LD_INT 0
25766: PPUSH
25767: PPUSH
25768: PPUSH
// for i in all_units do
25769: LD_ADDR_VAR 0 2
25773: PUSH
25774: LD_OWVAR 3
25778: PUSH
25779: FOR_IN
25780: IFFALSE 25858
// if IsSelected ( i ) then
25782: LD_VAR 0 2
25786: PPUSH
25787: CALL_OW 306
25791: IFFALSE 25856
// begin j := GetSide ( i ) ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL_OW 255
25807: ST_TO_ADDR
// if j = 8 then
25808: LD_VAR 0 3
25812: PUSH
25813: LD_INT 8
25815: EQUAL
25816: IFFALSE 25828
// j := 0 else
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_INT 0
25825: ST_TO_ADDR
25826: GO 25842
// j := j + 1 ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_VAR 0 3
25837: PUSH
25838: LD_INT 1
25840: PLUS
25841: ST_TO_ADDR
// SetSide ( i , j ) ;
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: CALL_OW 235
// end ;
25856: GO 25779
25858: POP
25859: POP
// end ;
25860: LD_VAR 0 1
25864: RET
// export function hHackFog ; begin
25865: LD_INT 0
25867: PPUSH
// FogOff ( true ) ;
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 344
// end ;
25875: LD_VAR 0 1
25879: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25880: LD_INT 0
25882: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25883: LD_VAR 0 1
25887: PPUSH
25888: LD_VAR 0 2
25892: PPUSH
25893: LD_VAR 0 3
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 483
// CenterOnXY ( x , y ) ;
25908: LD_VAR 0 2
25912: PPUSH
25913: LD_VAR 0 3
25917: PPUSH
25918: CALL_OW 84
// end ;
25922: LD_VAR 0 4
25926: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25931: LD_VAR 0 1
25935: NOT
25936: PUSH
25937: LD_VAR 0 2
25941: PPUSH
25942: LD_VAR 0 3
25946: PPUSH
25947: CALL_OW 488
25951: NOT
25952: OR
25953: PUSH
25954: LD_VAR 0 1
25958: PPUSH
25959: CALL_OW 266
25963: PUSH
25964: LD_INT 3
25966: NONEQUAL
25967: PUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 247
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: NOT
25982: AND
25983: OR
25984: IFFALSE 25988
// exit ;
25986: GO 26270
// if GetType ( factory ) = unit_human then
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 247
25997: PUSH
25998: LD_INT 1
26000: EQUAL
26001: IFFALSE 26018
// factory := IsInUnit ( factory ) ;
26003: LD_ADDR_VAR 0 1
26007: PUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 310
26017: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 266
26027: PUSH
26028: LD_INT 3
26030: NONEQUAL
26031: IFFALSE 26035
// exit ;
26033: GO 26270
// for i := 1 to Count ( factoryWaypoints ) do
26035: LD_ADDR_VAR 0 5
26039: PUSH
26040: DOUBLE
26041: LD_INT 1
26043: DEC
26044: ST_TO_ADDR
26045: LD_EXP 80
26049: PPUSH
26050: CALL 34773 0 1
26054: PUSH
26055: FOR_TO
26056: IFFALSE 26218
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26058: LD_VAR 0 2
26062: PPUSH
26063: LD_VAR 0 3
26067: PPUSH
26068: CALL_OW 428
26072: PUSH
26073: LD_EXP 80
26077: PUSH
26078: LD_VAR 0 5
26082: ARRAY
26083: PUSH
26084: LD_INT 2
26086: ARRAY
26087: EQUAL
26088: IFFALSE 26120
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26090: LD_ADDR_EXP 80
26094: PUSH
26095: LD_EXP 80
26099: PPUSH
26100: LD_VAR 0 5
26104: PPUSH
26105: CALL_OW 3
26109: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26110: CALL 26275 0 0
// exit ;
26114: POP
26115: POP
26116: GO 26270
// end else
26118: GO 26216
// if factory = factoryWaypoints [ i ] [ 2 ] then
26120: LD_VAR 0 1
26124: PUSH
26125: LD_EXP 80
26129: PUSH
26130: LD_VAR 0 5
26134: ARRAY
26135: PUSH
26136: LD_INT 2
26138: ARRAY
26139: EQUAL
26140: IFFALSE 26216
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26142: LD_ADDR_EXP 80
26146: PUSH
26147: LD_EXP 80
26151: PPUSH
26152: LD_VAR 0 5
26156: PPUSH
26157: CALL_OW 3
26161: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26162: LD_ADDR_EXP 80
26166: PUSH
26167: LD_EXP 80
26171: PPUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 255
26181: PUSH
26182: LD_VAR 0 1
26186: PUSH
26187: LD_VAR 0 2
26191: PUSH
26192: LD_VAR 0 3
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: PPUSH
26203: CALL 70382 0 2
26207: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26208: CALL 26275 0 0
// exit ;
26212: POP
26213: POP
26214: GO 26270
// end ; end ;
26216: GO 26055
26218: POP
26219: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26220: LD_ADDR_EXP 80
26224: PUSH
26225: LD_EXP 80
26229: PPUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 255
26239: PUSH
26240: LD_VAR 0 1
26244: PUSH
26245: LD_VAR 0 2
26249: PUSH
26250: LD_VAR 0 3
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: PPUSH
26261: CALL 70382 0 2
26265: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26266: CALL 26275 0 0
// end ;
26270: LD_VAR 0 4
26274: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26275: LD_INT 0
26277: PPUSH
26278: PPUSH
26279: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26280: LD_STRING resetFactoryWaypoint();
26282: PPUSH
26283: CALL_OW 559
// if factoryWaypoints then
26287: LD_EXP 80
26291: IFFALSE 26412
// begin list := factoryWaypoints ;
26293: LD_ADDR_VAR 0 3
26297: PUSH
26298: LD_EXP 80
26302: ST_TO_ADDR
// for i := 1 to list do
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: DOUBLE
26309: LD_INT 1
26311: DEC
26312: ST_TO_ADDR
26313: LD_VAR 0 3
26317: PUSH
26318: FOR_TO
26319: IFFALSE 26410
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26321: LD_STRING setFactoryWaypointXY(
26323: PUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_VAR 0 2
26333: ARRAY
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: STR
26339: PUSH
26340: LD_STRING ,
26342: STR
26343: PUSH
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 2
26353: ARRAY
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 3
26368: PUSH
26369: LD_VAR 0 2
26373: ARRAY
26374: PUSH
26375: LD_INT 3
26377: ARRAY
26378: STR
26379: PUSH
26380: LD_STRING ,
26382: STR
26383: PUSH
26384: LD_VAR 0 3
26388: PUSH
26389: LD_VAR 0 2
26393: ARRAY
26394: PUSH
26395: LD_INT 4
26397: ARRAY
26398: STR
26399: PUSH
26400: LD_STRING )
26402: STR
26403: PPUSH
26404: CALL_OW 559
26408: GO 26318
26410: POP
26411: POP
// end ; end ;
26412: LD_VAR 0 1
26416: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26417: LD_INT 0
26419: PPUSH
// if HexInfo ( x , y ) = warehouse then
26420: LD_VAR 0 2
26424: PPUSH
26425: LD_VAR 0 3
26429: PPUSH
26430: CALL_OW 428
26434: PUSH
26435: LD_VAR 0 1
26439: EQUAL
26440: IFFALSE 26467
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26442: LD_ADDR_EXP 81
26446: PUSH
26447: LD_EXP 81
26451: PPUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: LD_INT 0
26459: PPUSH
26460: CALL_OW 1
26464: ST_TO_ADDR
26465: GO 26518
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26467: LD_ADDR_EXP 81
26471: PUSH
26472: LD_EXP 81
26476: PPUSH
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_VAR 0 1
26486: PPUSH
26487: CALL_OW 255
26491: PUSH
26492: LD_VAR 0 1
26496: PUSH
26497: LD_VAR 0 2
26501: PUSH
26502: LD_VAR 0 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 1
26517: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26518: CALL 26527 0 0
// end ;
26522: LD_VAR 0 4
26526: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
26531: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26532: LD_STRING resetWarehouseGatheringPoints();
26534: PPUSH
26535: CALL_OW 559
// if warehouseGatheringPoints then
26539: LD_EXP 81
26543: IFFALSE 26669
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_EXP 81
26554: PPUSH
26555: CALL 74144 0 1
26559: ST_TO_ADDR
// for i := 1 to list do
26560: LD_ADDR_VAR 0 2
26564: PUSH
26565: DOUBLE
26566: LD_INT 1
26568: DEC
26569: ST_TO_ADDR
26570: LD_VAR 0 3
26574: PUSH
26575: FOR_TO
26576: IFFALSE 26667
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26578: LD_STRING setWarehouseGatheringPointXY(
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: STR
26596: PUSH
26597: LD_STRING ,
26599: STR
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: PUSH
26612: LD_INT 2
26614: ARRAY
26615: STR
26616: PUSH
26617: LD_STRING ,
26619: STR
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 2
26630: ARRAY
26631: PUSH
26632: LD_INT 3
26634: ARRAY
26635: STR
26636: PUSH
26637: LD_STRING ,
26639: STR
26640: PUSH
26641: LD_VAR 0 3
26645: PUSH
26646: LD_VAR 0 2
26650: ARRAY
26651: PUSH
26652: LD_INT 4
26654: ARRAY
26655: STR
26656: PUSH
26657: LD_STRING )
26659: STR
26660: PPUSH
26661: CALL_OW 559
26665: GO 26575
26667: POP
26668: POP
// end ; end ;
26669: LD_VAR 0 1
26673: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26674: LD_EXP 81
26678: IFFALSE 27363
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
// begin enable ;
26694: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: LD_EXP 81
26704: PPUSH
26705: CALL 74144 0 1
26709: ST_TO_ADDR
// if not list then
26710: LD_VAR 0 3
26714: NOT
26715: IFFALSE 26719
// exit ;
26717: GO 27363
// for i := 1 to list do
26719: LD_ADDR_VAR 0 1
26723: PUSH
26724: DOUBLE
26725: LD_INT 1
26727: DEC
26728: ST_TO_ADDR
26729: LD_VAR 0 3
26733: PUSH
26734: FOR_TO
26735: IFFALSE 27361
// begin depot := list [ i ] [ 2 ] ;
26737: LD_ADDR_VAR 0 8
26741: PUSH
26742: LD_VAR 0 3
26746: PUSH
26747: LD_VAR 0 1
26751: ARRAY
26752: PUSH
26753: LD_INT 2
26755: ARRAY
26756: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26757: LD_ADDR_VAR 0 5
26761: PUSH
26762: LD_VAR 0 3
26766: PUSH
26767: LD_VAR 0 1
26771: ARRAY
26772: PUSH
26773: LD_INT 1
26775: ARRAY
26776: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26777: LD_VAR 0 8
26781: PPUSH
26782: CALL_OW 301
26786: PUSH
26787: LD_VAR 0 5
26791: PUSH
26792: LD_VAR 0 8
26796: PPUSH
26797: CALL_OW 255
26801: NONEQUAL
26802: OR
26803: IFFALSE 26832
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26805: LD_ADDR_EXP 81
26809: PUSH
26810: LD_EXP 81
26814: PPUSH
26815: LD_VAR 0 8
26819: PPUSH
26820: LD_INT 0
26822: PPUSH
26823: CALL_OW 1
26827: ST_TO_ADDR
// exit ;
26828: POP
26829: POP
26830: GO 27363
// end ; x := list [ i ] [ 3 ] ;
26832: LD_ADDR_VAR 0 6
26836: PUSH
26837: LD_VAR 0 3
26841: PUSH
26842: LD_VAR 0 1
26846: ARRAY
26847: PUSH
26848: LD_INT 3
26850: ARRAY
26851: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26852: LD_ADDR_VAR 0 7
26856: PUSH
26857: LD_VAR 0 3
26861: PUSH
26862: LD_VAR 0 1
26866: ARRAY
26867: PUSH
26868: LD_INT 4
26870: ARRAY
26871: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26872: LD_ADDR_VAR 0 9
26876: PUSH
26877: LD_VAR 0 6
26881: PPUSH
26882: LD_VAR 0 7
26886: PPUSH
26887: LD_INT 16
26889: PPUSH
26890: CALL 72728 0 3
26894: ST_TO_ADDR
// if not cratesNearbyPoint then
26895: LD_VAR 0 9
26899: NOT
26900: IFFALSE 26906
// exit ;
26902: POP
26903: POP
26904: GO 27363
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_VAR 0 5
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: LD_INT 60
26928: PUSH
26929: EMPTY
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 91
26938: PUSH
26939: LD_VAR 0 8
26943: PUSH
26944: LD_INT 6
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 25
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 25
26967: PUSH
26968: LD_INT 16
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: PUSH
26991: LD_VAR 0 8
26995: PPUSH
26996: CALL_OW 313
27000: PPUSH
27001: LD_INT 3
27003: PUSH
27004: LD_INT 60
27006: PUSH
27007: EMPTY
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: LD_INT 25
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 25
27029: PUSH
27030: LD_INT 16
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PPUSH
27046: CALL_OW 72
27050: UNION
27051: ST_TO_ADDR
// if tmp then
27052: LD_VAR 0 4
27056: IFFALSE 27136
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27058: LD_ADDR_VAR 0 4
27062: PUSH
27063: LD_VAR 0 4
27067: PPUSH
27068: LD_INT 3
27070: PPUSH
27071: CALL 70697 0 2
27075: ST_TO_ADDR
// for j in tmp do
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_VAR 0 4
27085: PUSH
27086: FOR_IN
27087: IFFALSE 27130
// begin if IsInUnit ( j ) then
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 310
27098: IFFALSE 27109
// ComExit ( j ) ;
27100: LD_VAR 0 2
27104: PPUSH
27105: CALL 70780 0 1
// AddComCollect ( j , x , y ) ;
27109: LD_VAR 0 2
27113: PPUSH
27114: LD_VAR 0 6
27118: PPUSH
27119: LD_VAR 0 7
27123: PPUSH
27124: CALL_OW 177
// end ;
27128: GO 27086
27130: POP
27131: POP
// exit ;
27132: POP
27133: POP
27134: GO 27363
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27136: LD_ADDR_VAR 0 4
27140: PUSH
27141: LD_INT 22
27143: PUSH
27144: LD_VAR 0 5
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 91
27155: PUSH
27156: LD_VAR 0 8
27160: PUSH
27161: LD_INT 8
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 34
27174: PUSH
27175: LD_INT 12
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 34
27184: PUSH
27185: LD_INT 51
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 34
27194: PUSH
27195: LD_INT 32
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 34
27204: PUSH
27205: LD_INT 89
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: ST_TO_ADDR
// if tmp then
27229: LD_VAR 0 4
27233: IFFALSE 27359
// begin for j in tmp do
27235: LD_ADDR_VAR 0 2
27239: PUSH
27240: LD_VAR 0 4
27244: PUSH
27245: FOR_IN
27246: IFFALSE 27357
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27248: LD_VAR 0 2
27252: PPUSH
27253: CALL_OW 262
27257: PUSH
27258: LD_INT 3
27260: EQUAL
27261: PUSH
27262: LD_VAR 0 2
27266: PPUSH
27267: CALL_OW 261
27271: PUSH
27272: LD_INT 20
27274: GREATER
27275: OR
27276: PUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: CALL_OW 314
27286: NOT
27287: AND
27288: PUSH
27289: LD_VAR 0 2
27293: PPUSH
27294: CALL_OW 263
27298: PUSH
27299: LD_INT 1
27301: NONEQUAL
27302: PUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: CALL_OW 311
27312: OR
27313: AND
27314: IFFALSE 27355
// begin ComCollect ( j , x , y ) ;
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_VAR 0 6
27325: PPUSH
27326: LD_VAR 0 7
27330: PPUSH
27331: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27335: LD_VAR 0 2
27339: PPUSH
27340: LD_VAR 0 8
27344: PPUSH
27345: CALL_OW 172
// exit ;
27349: POP
27350: POP
27351: POP
27352: POP
27353: GO 27363
// end ;
27355: GO 27245
27357: POP
27358: POP
// end ; end ;
27359: GO 26734
27361: POP
27362: POP
// end ; end_of_file
27363: PPOPN 9
27365: END
// export function SOS_UnitDestroyed ( un ) ; begin
27366: LD_INT 0
27368: PPUSH
// ComRadiation ( un ) ;
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL 28355 0 1
// end ;
27378: LD_VAR 0 2
27382: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27383: LD_INT 0
27385: PPUSH
// ComRadiation ( un ) ;
27386: LD_VAR 0 1
27390: PPUSH
27391: CALL 28355 0 1
// end ;
27395: LD_VAR 0 2
27399: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27400: LD_INT 0
27402: PPUSH
// end ;
27403: LD_VAR 0 4
27407: RET
// export function SOS_Command ( cmd ) ; begin
27408: LD_INT 0
27410: PPUSH
// end ;
27411: LD_VAR 0 2
27415: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27416: LD_INT 0
27418: PPUSH
// end ;
27419: LD_VAR 0 6
27423: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
27424: LD_INT 0
27426: PPUSH
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
// if not vehicle or not factory then
27431: LD_VAR 0 1
27435: NOT
27436: PUSH
27437: LD_VAR 0 2
27441: NOT
27442: OR
27443: IFFALSE 27447
// exit ;
27445: GO 27946
// if not factoryWaypoints then
27447: LD_EXP 80
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 27946
// for i := 1 to Count ( factoryWaypoints ) do
27456: LD_ADDR_VAR 0 4
27460: PUSH
27461: DOUBLE
27462: LD_INT 1
27464: DEC
27465: ST_TO_ADDR
27466: LD_EXP 80
27470: PPUSH
27471: CALL 34773 0 1
27475: PUSH
27476: FOR_TO
27477: IFFALSE 27944
// if factoryWaypoints [ i ] [ 2 ] = factory then
27479: LD_EXP 80
27483: PUSH
27484: LD_VAR 0 4
27488: ARRAY
27489: PUSH
27490: LD_INT 2
27492: ARRAY
27493: PUSH
27494: LD_VAR 0 2
27498: EQUAL
27499: IFFALSE 27942
// begin if GetControl ( vehicle ) = control_manual then
27501: LD_VAR 0 1
27505: PPUSH
27506: CALL_OW 263
27510: PUSH
27511: LD_INT 1
27513: EQUAL
27514: IFFALSE 27825
// begin driver := IsDrivenBy ( vehicle ) ;
27516: LD_ADDR_VAR 0 6
27520: PUSH
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 311
27530: ST_TO_ADDR
// tag := GetTag ( driver ) ;
27531: LD_ADDR_VAR 0 5
27535: PUSH
27536: LD_VAR 0 6
27540: PPUSH
27541: CALL_OW 110
27545: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
27546: LD_VAR 0 5
27550: PUSH
27551: LD_INT 501
27553: EQUAL
27554: PUSH
27555: LD_VAR 0 1
27559: PPUSH
27560: CALL_OW 110
27564: PUSH
27565: LD_INT 501
27567: EQUAL
27568: OR
27569: IFFALSE 27575
// exit ;
27571: POP
27572: POP
27573: GO 27946
// if not HasTask ( driver ) then
27575: LD_VAR 0 6
27579: PPUSH
27580: CALL_OW 314
27584: NOT
27585: IFFALSE 27823
// begin SetTag ( driver , tDriver ) ;
27587: LD_VAR 0 6
27591: PPUSH
27592: LD_INT 501
27594: PPUSH
27595: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
27599: LD_VAR 0 1
27603: PPUSH
27604: LD_INT 501
27606: PPUSH
27607: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27611: LD_ADDR_VAR 0 7
27615: PUSH
27616: LD_EXP 80
27620: PUSH
27621: LD_VAR 0 4
27625: ARRAY
27626: PUSH
27627: LD_INT 3
27629: ARRAY
27630: PPUSH
27631: LD_EXP 80
27635: PUSH
27636: LD_VAR 0 4
27640: ARRAY
27641: PUSH
27642: LD_INT 4
27644: ARRAY
27645: PPUSH
27646: CALL_OW 428
27650: ST_TO_ADDR
// if hex then
27651: LD_VAR 0 7
27655: IFFALSE 27673
// ComMoveUnit ( driver , hex ) else
27657: LD_VAR 0 6
27661: PPUSH
27662: LD_VAR 0 7
27666: PPUSH
27667: CALL_OW 112
27671: GO 27712
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27673: LD_VAR 0 6
27677: PPUSH
27678: LD_EXP 80
27682: PUSH
27683: LD_VAR 0 4
27687: ARRAY
27688: PUSH
27689: LD_INT 3
27691: ARRAY
27692: PPUSH
27693: LD_EXP 80
27697: PUSH
27698: LD_VAR 0 4
27702: ARRAY
27703: PUSH
27704: LD_INT 4
27706: ARRAY
27707: PPUSH
27708: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27712: LD_VAR 0 6
27716: PPUSH
27717: CALL_OW 181
// if Multiplayer then
27721: LD_OWVAR 4
27725: IFFALSE 27774
// begin repeat wait ( 10 ) ;
27727: LD_INT 10
27729: PPUSH
27730: CALL_OW 67
// until not IsInUnit ( driver ) ;
27734: LD_VAR 0 6
27738: PPUSH
27739: CALL_OW 310
27743: NOT
27744: IFFALSE 27727
// if not HasTask ( driver ) then
27746: LD_VAR 0 6
27750: PPUSH
27751: CALL_OW 314
27755: NOT
27756: IFFALSE 27772
// ComEnterUnit ( driver , factory ) ;
27758: LD_VAR 0 6
27762: PPUSH
27763: LD_VAR 0 2
27767: PPUSH
27768: CALL_OW 120
// end else
27772: GO 27788
// AddComEnterUnit ( driver , factory ) ;
27774: LD_VAR 0 6
27778: PPUSH
27779: LD_VAR 0 2
27783: PPUSH
27784: CALL_OW 180
// wait ( 0 0$1 ) ;
27788: LD_INT 35
27790: PPUSH
27791: CALL_OW 67
// SetTag ( driver , tag ) ;
27795: LD_VAR 0 6
27799: PPUSH
27800: LD_VAR 0 5
27804: PPUSH
27805: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: LD_INT 0
27816: PPUSH
27817: CALL_OW 109
// break ;
27821: GO 27944
// end ; end else
27823: GO 27942
// if GetControl ( vehicle ) = control_remote then
27825: LD_VAR 0 1
27829: PPUSH
27830: CALL_OW 263
27834: PUSH
27835: LD_INT 2
27837: EQUAL
27838: IFFALSE 27901
// begin wait ( 0 0$2 ) ;
27840: LD_INT 70
27842: PPUSH
27843: CALL_OW 67
// if Connect ( vehicle ) then
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL 40979 0 1
27856: IFFALSE 27897
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_EXP 80
27867: PUSH
27868: LD_VAR 0 4
27872: ARRAY
27873: PUSH
27874: LD_INT 3
27876: ARRAY
27877: PPUSH
27878: LD_EXP 80
27882: PUSH
27883: LD_VAR 0 4
27887: ARRAY
27888: PUSH
27889: LD_INT 4
27891: ARRAY
27892: PPUSH
27893: CALL_OW 171
// break ;
27897: GO 27944
// end else
27899: GO 27942
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_EXP 80
27910: PUSH
27911: LD_VAR 0 4
27915: ARRAY
27916: PUSH
27917: LD_INT 3
27919: ARRAY
27920: PPUSH
27921: LD_EXP 80
27925: PUSH
27926: LD_VAR 0 4
27930: ARRAY
27931: PUSH
27932: LD_INT 4
27934: ARRAY
27935: PPUSH
27936: CALL_OW 171
// break ;
27940: GO 27944
// end ; end ;
27942: GO 27476
27944: POP
27945: POP
// end ;
27946: LD_VAR 0 3
27950: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27951: LD_INT 0
27953: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27954: LD_VAR 0 1
27958: PUSH
27959: LD_INT 250
27961: EQUAL
27962: PUSH
27963: LD_VAR 0 2
27967: PPUSH
27968: CALL_OW 264
27972: PUSH
27973: LD_INT 81
27975: EQUAL
27976: AND
27977: IFFALSE 27998
// MinerPlaceMine ( unit , x , y ) ;
27979: LD_VAR 0 2
27983: PPUSH
27984: LD_VAR 0 4
27988: PPUSH
27989: LD_VAR 0 5
27993: PPUSH
27994: CALL 31090 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 251
28005: EQUAL
28006: PUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL_OW 264
28016: PUSH
28017: LD_INT 81
28019: EQUAL
28020: AND
28021: IFFALSE 28042
// MinerDetonateMine ( unit , x , y ) ;
28023: LD_VAR 0 2
28027: PPUSH
28028: LD_VAR 0 4
28032: PPUSH
28033: LD_VAR 0 5
28037: PPUSH
28038: CALL 31365 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28042: LD_VAR 0 1
28046: PUSH
28047: LD_INT 252
28049: EQUAL
28050: PUSH
28051: LD_VAR 0 2
28055: PPUSH
28056: CALL_OW 264
28060: PUSH
28061: LD_INT 81
28063: EQUAL
28064: AND
28065: IFFALSE 28086
// MinerCreateMinefield ( unit , x , y ) ;
28067: LD_VAR 0 2
28071: PPUSH
28072: LD_VAR 0 4
28076: PPUSH
28077: LD_VAR 0 5
28081: PPUSH
28082: CALL 31782 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28086: LD_VAR 0 1
28090: PUSH
28091: LD_INT 253
28093: EQUAL
28094: PUSH
28095: LD_VAR 0 2
28099: PPUSH
28100: CALL_OW 257
28104: PUSH
28105: LD_INT 5
28107: EQUAL
28108: AND
28109: IFFALSE 28130
// ComBinocular ( unit , x , y ) ;
28111: LD_VAR 0 2
28115: PPUSH
28116: LD_VAR 0 4
28120: PPUSH
28121: LD_VAR 0 5
28125: PPUSH
28126: CALL 32151 0 3
// if selectedUnit then
28130: LD_VAR 0 3
28134: IFFALSE 28190
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28136: LD_VAR 0 1
28140: PUSH
28141: LD_INT 254
28143: EQUAL
28144: PUSH
28145: LD_VAR 0 2
28149: PPUSH
28150: CALL_OW 264
28154: PUSH
28155: LD_INT 99
28157: EQUAL
28158: AND
28159: PUSH
28160: LD_VAR 0 3
28164: PPUSH
28165: CALL_OW 263
28169: PUSH
28170: LD_INT 3
28172: EQUAL
28173: AND
28174: IFFALSE 28190
// HackDestroyVehicle ( unit , selectedUnit ) ;
28176: LD_VAR 0 2
28180: PPUSH
28181: LD_VAR 0 3
28185: PPUSH
28186: CALL 30454 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28190: LD_VAR 0 1
28194: PUSH
28195: LD_INT 255
28197: EQUAL
28198: PUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: CALL_OW 264
28208: PUSH
28209: LD_INT 14
28211: PUSH
28212: LD_INT 53
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: IN
28219: AND
28220: PUSH
28221: LD_VAR 0 4
28225: PPUSH
28226: LD_VAR 0 5
28230: PPUSH
28231: CALL_OW 488
28235: AND
28236: IFFALSE 28260
// CutTreeXYR ( unit , x , y , 12 ) ;
28238: LD_VAR 0 2
28242: PPUSH
28243: LD_VAR 0 4
28247: PPUSH
28248: LD_VAR 0 5
28252: PPUSH
28253: LD_INT 12
28255: PPUSH
28256: CALL 28451 0 4
// if cmd = 256 then
28260: LD_VAR 0 1
28264: PUSH
28265: LD_INT 256
28267: EQUAL
28268: IFFALSE 28289
// SetFactoryWaypoint ( unit , x , y ) ;
28270: LD_VAR 0 2
28274: PPUSH
28275: LD_VAR 0 4
28279: PPUSH
28280: LD_VAR 0 5
28284: PPUSH
28285: CALL 25927 0 3
// if cmd = 257 then
28289: LD_VAR 0 1
28293: PUSH
28294: LD_INT 257
28296: EQUAL
28297: IFFALSE 28318
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28299: LD_VAR 0 2
28303: PPUSH
28304: LD_VAR 0 4
28308: PPUSH
28309: LD_VAR 0 5
28313: PPUSH
28314: CALL 26417 0 3
// if cmd = 258 then
28318: LD_VAR 0 1
28322: PUSH
28323: LD_INT 258
28325: EQUAL
28326: IFFALSE 28350
// BurnTreeXYR ( unit , x , y , 8 ) ;
28328: LD_VAR 0 2
28332: PPUSH
28333: LD_VAR 0 4
28337: PPUSH
28338: LD_VAR 0 5
28342: PPUSH
28343: LD_INT 8
28345: PPUSH
28346: CALL 28845 0 4
// end ;
28350: LD_VAR 0 6
28354: RET
// export function ComRadiation ( un ) ; var eff ; begin
28355: LD_INT 0
28357: PPUSH
28358: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28359: LD_VAR 0 1
28363: PPUSH
28364: CALL_OW 264
28368: PUSH
28369: LD_INT 91
28371: NONEQUAL
28372: IFFALSE 28376
// exit ;
28374: GO 28446
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28376: LD_INT 68
28378: PPUSH
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 255
28388: PPUSH
28389: CALL_OW 321
28393: PUSH
28394: LD_INT 2
28396: EQUAL
28397: IFFALSE 28409
// eff := 70 else
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_INT 70
28406: ST_TO_ADDR
28407: GO 28417
// eff := 30 ;
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_INT 30
28416: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 250
28426: PPUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 251
28436: PPUSH
28437: LD_VAR 0 3
28441: PPUSH
28442: CALL_OW 495
// end ;
28446: LD_VAR 0 2
28450: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
28461: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 302
28471: NOT
28472: PUSH
28473: LD_VAR 0 2
28477: PPUSH
28478: LD_VAR 0 3
28482: PPUSH
28483: CALL_OW 488
28487: NOT
28488: OR
28489: PUSH
28490: LD_VAR 0 4
28494: NOT
28495: OR
28496: IFFALSE 28500
// exit ;
28498: GO 28840
// list := [ ] ;
28500: LD_ADDR_VAR 0 13
28504: PUSH
28505: EMPTY
28506: ST_TO_ADDR
// if x - r < 0 then
28507: LD_VAR 0 2
28511: PUSH
28512: LD_VAR 0 4
28516: MINUS
28517: PUSH
28518: LD_INT 0
28520: LESS
28521: IFFALSE 28533
// min_x := 0 else
28523: LD_ADDR_VAR 0 7
28527: PUSH
28528: LD_INT 0
28530: ST_TO_ADDR
28531: GO 28549
// min_x := x - r ;
28533: LD_ADDR_VAR 0 7
28537: PUSH
28538: LD_VAR 0 2
28542: PUSH
28543: LD_VAR 0 4
28547: MINUS
28548: ST_TO_ADDR
// if y - r < 0 then
28549: LD_VAR 0 3
28553: PUSH
28554: LD_VAR 0 4
28558: MINUS
28559: PUSH
28560: LD_INT 0
28562: LESS
28563: IFFALSE 28575
// min_y := 0 else
28565: LD_ADDR_VAR 0 8
28569: PUSH
28570: LD_INT 0
28572: ST_TO_ADDR
28573: GO 28591
// min_y := y - r ;
28575: LD_ADDR_VAR 0 8
28579: PUSH
28580: LD_VAR 0 3
28584: PUSH
28585: LD_VAR 0 4
28589: MINUS
28590: ST_TO_ADDR
// max_x := x + r ;
28591: LD_ADDR_VAR 0 9
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_VAR 0 4
28605: PLUS
28606: ST_TO_ADDR
// max_y := y + r ;
28607: LD_ADDR_VAR 0 10
28611: PUSH
28612: LD_VAR 0 3
28616: PUSH
28617: LD_VAR 0 4
28621: PLUS
28622: ST_TO_ADDR
// for _x = min_x to max_x do
28623: LD_ADDR_VAR 0 11
28627: PUSH
28628: DOUBLE
28629: LD_VAR 0 7
28633: DEC
28634: ST_TO_ADDR
28635: LD_VAR 0 9
28639: PUSH
28640: FOR_TO
28641: IFFALSE 28758
// for _y = min_y to max_y do
28643: LD_ADDR_VAR 0 12
28647: PUSH
28648: DOUBLE
28649: LD_VAR 0 8
28653: DEC
28654: ST_TO_ADDR
28655: LD_VAR 0 10
28659: PUSH
28660: FOR_TO
28661: IFFALSE 28754
// begin if not ValidHex ( _x , _y ) then
28663: LD_VAR 0 11
28667: PPUSH
28668: LD_VAR 0 12
28672: PPUSH
28673: CALL_OW 488
28677: NOT
28678: IFFALSE 28682
// continue ;
28680: GO 28660
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28682: LD_VAR 0 11
28686: PPUSH
28687: LD_VAR 0 12
28691: PPUSH
28692: CALL_OW 351
28696: PUSH
28697: LD_VAR 0 11
28701: PPUSH
28702: LD_VAR 0 12
28706: PPUSH
28707: CALL_OW 554
28711: AND
28712: IFFALSE 28752
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28714: LD_ADDR_VAR 0 13
28718: PUSH
28719: LD_VAR 0 13
28723: PPUSH
28724: LD_VAR 0 13
28728: PUSH
28729: LD_INT 1
28731: PLUS
28732: PPUSH
28733: LD_VAR 0 11
28737: PUSH
28738: LD_VAR 0 12
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PPUSH
28747: CALL_OW 2
28751: ST_TO_ADDR
// end ;
28752: GO 28660
28754: POP
28755: POP
28756: GO 28640
28758: POP
28759: POP
// if not list then
28760: LD_VAR 0 13
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 28840
// for i in list do
28769: LD_ADDR_VAR 0 6
28773: PUSH
28774: LD_VAR 0 13
28778: PUSH
28779: FOR_IN
28780: IFFALSE 28838
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: LD_STRING M
28789: PUSH
28790: LD_VAR 0 6
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PUSH
28799: LD_VAR 0 6
28803: PUSH
28804: LD_INT 2
28806: ARRAY
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: PPUSH
28832: CALL_OW 447
28836: GO 28779
28838: POP
28839: POP
// end ;
28840: LD_VAR 0 5
28844: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28845: LD_INT 0
28847: PPUSH
28848: PPUSH
28849: PPUSH
28850: PPUSH
28851: PPUSH
28852: PPUSH
28853: PPUSH
28854: PPUSH
28855: PPUSH
28856: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28857: LD_VAR 0 1
28861: PPUSH
28862: CALL_OW 302
28866: NOT
28867: PUSH
28868: LD_VAR 0 2
28872: PPUSH
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL_OW 488
28882: NOT
28883: OR
28884: PUSH
28885: LD_VAR 0 4
28889: NOT
28890: OR
28891: IFFALSE 28895
// exit ;
28893: GO 29408
// list := [ ] ;
28895: LD_ADDR_VAR 0 13
28899: PUSH
28900: EMPTY
28901: ST_TO_ADDR
// if x - r < 0 then
28902: LD_VAR 0 2
28906: PUSH
28907: LD_VAR 0 4
28911: MINUS
28912: PUSH
28913: LD_INT 0
28915: LESS
28916: IFFALSE 28928
// min_x := 0 else
28918: LD_ADDR_VAR 0 7
28922: PUSH
28923: LD_INT 0
28925: ST_TO_ADDR
28926: GO 28944
// min_x := x - r ;
28928: LD_ADDR_VAR 0 7
28932: PUSH
28933: LD_VAR 0 2
28937: PUSH
28938: LD_VAR 0 4
28942: MINUS
28943: ST_TO_ADDR
// if y - r < 0 then
28944: LD_VAR 0 3
28948: PUSH
28949: LD_VAR 0 4
28953: MINUS
28954: PUSH
28955: LD_INT 0
28957: LESS
28958: IFFALSE 28970
// min_y := 0 else
28960: LD_ADDR_VAR 0 8
28964: PUSH
28965: LD_INT 0
28967: ST_TO_ADDR
28968: GO 28986
// min_y := y - r ;
28970: LD_ADDR_VAR 0 8
28974: PUSH
28975: LD_VAR 0 3
28979: PUSH
28980: LD_VAR 0 4
28984: MINUS
28985: ST_TO_ADDR
// max_x := x + r ;
28986: LD_ADDR_VAR 0 9
28990: PUSH
28991: LD_VAR 0 2
28995: PUSH
28996: LD_VAR 0 4
29000: PLUS
29001: ST_TO_ADDR
// max_y := y + r ;
29002: LD_ADDR_VAR 0 10
29006: PUSH
29007: LD_VAR 0 3
29011: PUSH
29012: LD_VAR 0 4
29016: PLUS
29017: ST_TO_ADDR
// for _x = min_x to max_x do
29018: LD_ADDR_VAR 0 11
29022: PUSH
29023: DOUBLE
29024: LD_VAR 0 7
29028: DEC
29029: ST_TO_ADDR
29030: LD_VAR 0 9
29034: PUSH
29035: FOR_TO
29036: IFFALSE 29153
// for _y = min_y to max_y do
29038: LD_ADDR_VAR 0 12
29042: PUSH
29043: DOUBLE
29044: LD_VAR 0 8
29048: DEC
29049: ST_TO_ADDR
29050: LD_VAR 0 10
29054: PUSH
29055: FOR_TO
29056: IFFALSE 29149
// begin if not ValidHex ( _x , _y ) then
29058: LD_VAR 0 11
29062: PPUSH
29063: LD_VAR 0 12
29067: PPUSH
29068: CALL_OW 488
29072: NOT
29073: IFFALSE 29077
// continue ;
29075: GO 29055
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29077: LD_VAR 0 11
29081: PPUSH
29082: LD_VAR 0 12
29086: PPUSH
29087: CALL_OW 351
29091: PUSH
29092: LD_VAR 0 11
29096: PPUSH
29097: LD_VAR 0 12
29101: PPUSH
29102: CALL_OW 554
29106: AND
29107: IFFALSE 29147
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29109: LD_ADDR_VAR 0 13
29113: PUSH
29114: LD_VAR 0 13
29118: PPUSH
29119: LD_VAR 0 13
29123: PUSH
29124: LD_INT 1
29126: PLUS
29127: PPUSH
29128: LD_VAR 0 11
29132: PUSH
29133: LD_VAR 0 12
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 2
29146: ST_TO_ADDR
// end ;
29147: GO 29055
29149: POP
29150: POP
29151: GO 29035
29153: POP
29154: POP
// if not list then
29155: LD_VAR 0 13
29159: NOT
29160: IFFALSE 29164
// exit ;
29162: GO 29408
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29164: LD_ADDR_VAR 0 13
29168: PUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: LD_VAR 0 13
29178: PPUSH
29179: LD_INT 1
29181: PPUSH
29182: LD_INT 1
29184: PPUSH
29185: CALL 38121 0 4
29189: ST_TO_ADDR
// ComStop ( flame ) ;
29190: LD_VAR 0 1
29194: PPUSH
29195: CALL_OW 141
// for i in list do
29199: LD_ADDR_VAR 0 6
29203: PUSH
29204: LD_VAR 0 13
29208: PUSH
29209: FOR_IN
29210: IFFALSE 29241
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29212: LD_VAR 0 1
29216: PPUSH
29217: LD_VAR 0 6
29221: PUSH
29222: LD_INT 1
29224: ARRAY
29225: PPUSH
29226: LD_VAR 0 6
29230: PUSH
29231: LD_INT 2
29233: ARRAY
29234: PPUSH
29235: CALL_OW 176
29239: GO 29209
29241: POP
29242: POP
// repeat wait ( 0 0$1 ) ;
29243: LD_INT 35
29245: PPUSH
29246: CALL_OW 67
// task := GetTaskList ( flame ) ;
29250: LD_ADDR_VAR 0 14
29254: PUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 437
29264: ST_TO_ADDR
// if not task then
29265: LD_VAR 0 14
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29408
// if task [ 1 ] [ 1 ] <> | then
29274: LD_VAR 0 14
29278: PUSH
29279: LD_INT 1
29281: ARRAY
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: PUSH
29287: LD_STRING |
29289: NONEQUAL
29290: IFFALSE 29294
// exit ;
29292: GO 29408
// _x := task [ 1 ] [ 2 ] ;
29294: LD_ADDR_VAR 0 11
29298: PUSH
29299: LD_VAR 0 14
29303: PUSH
29304: LD_INT 1
29306: ARRAY
29307: PUSH
29308: LD_INT 2
29310: ARRAY
29311: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29312: LD_ADDR_VAR 0 12
29316: PUSH
29317: LD_VAR 0 14
29321: PUSH
29322: LD_INT 1
29324: ARRAY
29325: PUSH
29326: LD_INT 3
29328: ARRAY
29329: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29330: LD_VAR 0 11
29334: PPUSH
29335: LD_VAR 0 12
29339: PPUSH
29340: CALL_OW 351
29344: NOT
29345: PUSH
29346: LD_VAR 0 11
29350: PPUSH
29351: LD_VAR 0 12
29355: PPUSH
29356: CALL_OW 554
29360: NOT
29361: OR
29362: IFFALSE 29396
// begin task := Delete ( task , 1 ) ;
29364: LD_ADDR_VAR 0 14
29368: PUSH
29369: LD_VAR 0 14
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 3
29381: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_VAR 0 14
29391: PPUSH
29392: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 314
29405: NOT
29406: IFFALSE 29243
// end ;
29408: LD_VAR 0 5
29412: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29413: LD_EXP 83
29417: NOT
29418: IFFALSE 29468
29420: GO 29422
29422: DISABLE
// begin initHack := true ;
29423: LD_ADDR_EXP 83
29427: PUSH
29428: LD_INT 1
29430: ST_TO_ADDR
// hackTanks := [ ] ;
29431: LD_ADDR_EXP 84
29435: PUSH
29436: EMPTY
29437: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29438: LD_ADDR_EXP 85
29442: PUSH
29443: EMPTY
29444: ST_TO_ADDR
// hackLimit := 3 ;
29445: LD_ADDR_EXP 86
29449: PUSH
29450: LD_INT 3
29452: ST_TO_ADDR
// hackDist := 12 ;
29453: LD_ADDR_EXP 87
29457: PUSH
29458: LD_INT 12
29460: ST_TO_ADDR
// hackCounter := [ ] ;
29461: LD_ADDR_EXP 88
29465: PUSH
29466: EMPTY
29467: ST_TO_ADDR
// end ;
29468: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29469: LD_EXP 83
29473: PUSH
29474: LD_INT 34
29476: PUSH
29477: LD_INT 99
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PPUSH
29484: CALL_OW 69
29488: AND
29489: IFFALSE 29742
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
// begin enable ;
29498: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29499: LD_ADDR_VAR 0 1
29503: PUSH
29504: LD_INT 34
29506: PUSH
29507: LD_INT 99
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 69
29518: PUSH
29519: FOR_IN
29520: IFFALSE 29740
// begin if not i in hackTanks then
29522: LD_VAR 0 1
29526: PUSH
29527: LD_EXP 84
29531: IN
29532: NOT
29533: IFFALSE 29616
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29535: LD_ADDR_EXP 84
29539: PUSH
29540: LD_EXP 84
29544: PPUSH
29545: LD_EXP 84
29549: PUSH
29550: LD_INT 1
29552: PLUS
29553: PPUSH
29554: LD_VAR 0 1
29558: PPUSH
29559: CALL_OW 1
29563: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29564: LD_ADDR_EXP 85
29568: PUSH
29569: LD_EXP 85
29573: PPUSH
29574: LD_EXP 85
29578: PUSH
29579: LD_INT 1
29581: PLUS
29582: PPUSH
29583: EMPTY
29584: PPUSH
29585: CALL_OW 1
29589: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29590: LD_ADDR_EXP 88
29594: PUSH
29595: LD_EXP 88
29599: PPUSH
29600: LD_EXP 88
29604: PUSH
29605: LD_INT 1
29607: PLUS
29608: PPUSH
29609: EMPTY
29610: PPUSH
29611: CALL_OW 1
29615: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 302
29625: NOT
29626: IFFALSE 29639
// begin HackUnlinkAll ( i ) ;
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL 29745 0 1
// continue ;
29637: GO 29519
// end ; HackCheckCapturedStatus ( i ) ;
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL 30188 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29648: LD_ADDR_VAR 0 2
29652: PUSH
29653: LD_INT 81
29655: PUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 255
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 33
29672: PUSH
29673: LD_INT 3
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 91
29682: PUSH
29683: LD_VAR 0 1
29687: PUSH
29688: LD_EXP 87
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 50
29700: PUSH
29701: EMPTY
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: ST_TO_ADDR
// if not tmp then
29715: LD_VAR 0 2
29719: NOT
29720: IFFALSE 29724
// continue ;
29722: GO 29519
// HackLink ( i , tmp ) ;
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL 29881 0 2
// end ;
29738: GO 29519
29740: POP
29741: POP
// end ;
29742: PPOPN 2
29744: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29745: LD_INT 0
29747: PPUSH
29748: PPUSH
29749: PPUSH
// if not hack in hackTanks then
29750: LD_VAR 0 1
29754: PUSH
29755: LD_EXP 84
29759: IN
29760: NOT
29761: IFFALSE 29765
// exit ;
29763: GO 29876
// index := GetElementIndex ( hackTanks , hack ) ;
29765: LD_ADDR_VAR 0 4
29769: PUSH
29770: LD_EXP 84
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL 37418 0 2
29784: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29785: LD_EXP 85
29789: PUSH
29790: LD_VAR 0 4
29794: ARRAY
29795: IFFALSE 29876
// begin for i in hackTanksCaptured [ index ] do
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_EXP 85
29806: PUSH
29807: LD_VAR 0 4
29811: ARRAY
29812: PUSH
29813: FOR_IN
29814: IFFALSE 29840
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29816: LD_VAR 0 3
29820: PUSH
29821: LD_INT 1
29823: ARRAY
29824: PPUSH
29825: LD_VAR 0 3
29829: PUSH
29830: LD_INT 2
29832: ARRAY
29833: PPUSH
29834: CALL_OW 235
29838: GO 29813
29840: POP
29841: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29842: LD_ADDR_EXP 85
29846: PUSH
29847: LD_EXP 85
29851: PPUSH
29852: LD_VAR 0 4
29856: PPUSH
29857: EMPTY
29858: PPUSH
29859: CALL_OW 1
29863: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29864: LD_VAR 0 1
29868: PPUSH
29869: LD_INT 0
29871: PPUSH
29872: CALL_OW 505
// end ; end ;
29876: LD_VAR 0 2
29880: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29881: LD_INT 0
29883: PPUSH
29884: PPUSH
29885: PPUSH
// if not hack in hackTanks or not vehicles then
29886: LD_VAR 0 1
29890: PUSH
29891: LD_EXP 84
29895: IN
29896: NOT
29897: PUSH
29898: LD_VAR 0 2
29902: NOT
29903: OR
29904: IFFALSE 29908
// exit ;
29906: GO 30183
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29908: LD_ADDR_VAR 0 2
29912: PUSH
29913: LD_VAR 0 1
29917: PPUSH
29918: LD_VAR 0 2
29922: PPUSH
29923: LD_INT 1
29925: PPUSH
29926: LD_INT 1
29928: PPUSH
29929: CALL 38068 0 4
29933: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29934: LD_ADDR_VAR 0 5
29938: PUSH
29939: LD_EXP 84
29943: PPUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL 37418 0 2
29953: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29954: LD_EXP 85
29958: PUSH
29959: LD_VAR 0 5
29963: ARRAY
29964: PUSH
29965: LD_EXP 86
29969: LESS
29970: IFFALSE 30159
// begin for i := 1 to vehicles do
29972: LD_ADDR_VAR 0 4
29976: PUSH
29977: DOUBLE
29978: LD_INT 1
29980: DEC
29981: ST_TO_ADDR
29982: LD_VAR 0 2
29986: PUSH
29987: FOR_TO
29988: IFFALSE 30157
// begin if hackTanksCaptured [ index ] = hackLimit then
29990: LD_EXP 85
29994: PUSH
29995: LD_VAR 0 5
29999: ARRAY
30000: PUSH
30001: LD_EXP 86
30005: EQUAL
30006: IFFALSE 30010
// break ;
30008: GO 30157
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30010: LD_ADDR_EXP 88
30014: PUSH
30015: LD_EXP 88
30019: PPUSH
30020: LD_VAR 0 5
30024: PPUSH
30025: LD_EXP 88
30029: PUSH
30030: LD_VAR 0 5
30034: ARRAY
30035: PUSH
30036: LD_INT 1
30038: PLUS
30039: PPUSH
30040: CALL_OW 1
30044: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30045: LD_ADDR_EXP 85
30049: PUSH
30050: LD_EXP 85
30054: PPUSH
30055: LD_VAR 0 5
30059: PUSH
30060: LD_EXP 85
30064: PUSH
30065: LD_VAR 0 5
30069: ARRAY
30070: PUSH
30071: LD_INT 1
30073: PLUS
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PPUSH
30079: LD_VAR 0 2
30083: PUSH
30084: LD_VAR 0 4
30088: ARRAY
30089: PUSH
30090: LD_VAR 0 2
30094: PUSH
30095: LD_VAR 0 4
30099: ARRAY
30100: PPUSH
30101: CALL_OW 255
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PPUSH
30110: CALL 37633 0 3
30114: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30115: LD_VAR 0 2
30119: PUSH
30120: LD_VAR 0 4
30124: ARRAY
30125: PPUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: CALL_OW 255
30135: PPUSH
30136: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30140: LD_VAR 0 2
30144: PUSH
30145: LD_VAR 0 4
30149: ARRAY
30150: PPUSH
30151: CALL_OW 141
// end ;
30155: GO 29987
30157: POP
30158: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_EXP 85
30168: PUSH
30169: LD_VAR 0 5
30173: ARRAY
30174: PUSH
30175: LD_INT 0
30177: PLUS
30178: PPUSH
30179: CALL_OW 505
// end ;
30183: LD_VAR 0 3
30187: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
// if not hack in hackTanks then
30194: LD_VAR 0 1
30198: PUSH
30199: LD_EXP 84
30203: IN
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30449
// index := GetElementIndex ( hackTanks , hack ) ;
30209: LD_ADDR_VAR 0 4
30213: PUSH
30214: LD_EXP 84
30218: PPUSH
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL 37418 0 2
30228: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: DOUBLE
30235: LD_EXP 85
30239: PUSH
30240: LD_VAR 0 4
30244: ARRAY
30245: INC
30246: ST_TO_ADDR
30247: LD_INT 1
30249: PUSH
30250: FOR_DOWNTO
30251: IFFALSE 30423
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30253: LD_ADDR_VAR 0 5
30257: PUSH
30258: LD_EXP 85
30262: PUSH
30263: LD_VAR 0 4
30267: ARRAY
30268: PUSH
30269: LD_VAR 0 3
30273: ARRAY
30274: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30275: LD_VAR 0 5
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: PPUSH
30284: CALL_OW 302
30288: NOT
30289: PUSH
30290: LD_VAR 0 5
30294: PUSH
30295: LD_INT 1
30297: ARRAY
30298: PPUSH
30299: CALL_OW 255
30303: PUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: CALL_OW 255
30313: NONEQUAL
30314: OR
30315: IFFALSE 30421
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30317: LD_VAR 0 5
30321: PUSH
30322: LD_INT 1
30324: ARRAY
30325: PPUSH
30326: CALL_OW 305
30330: PUSH
30331: LD_VAR 0 5
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: PPUSH
30340: CALL_OW 255
30344: PUSH
30345: LD_VAR 0 1
30349: PPUSH
30350: CALL_OW 255
30354: EQUAL
30355: AND
30356: IFFALSE 30380
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30358: LD_VAR 0 5
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 5
30371: PUSH
30372: LD_INT 2
30374: ARRAY
30375: PPUSH
30376: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30380: LD_ADDR_EXP 85
30384: PUSH
30385: LD_EXP 85
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: LD_EXP 85
30399: PUSH
30400: LD_VAR 0 4
30404: ARRAY
30405: PPUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: CALL_OW 3
30415: PPUSH
30416: CALL_OW 1
30420: ST_TO_ADDR
// end ; end ;
30421: GO 30250
30423: POP
30424: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30425: LD_VAR 0 1
30429: PPUSH
30430: LD_EXP 85
30434: PUSH
30435: LD_VAR 0 4
30439: ARRAY
30440: PUSH
30441: LD_INT 0
30443: PLUS
30444: PPUSH
30445: CALL_OW 505
// end ;
30449: LD_VAR 0 2
30453: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30454: LD_INT 0
30456: PPUSH
30457: PPUSH
30458: PPUSH
30459: PPUSH
// if not hack in hackTanks then
30460: LD_VAR 0 1
30464: PUSH
30465: LD_EXP 84
30469: IN
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30560
// index := GetElementIndex ( hackTanks , hack ) ;
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: LD_EXP 84
30484: PPUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL 37418 0 2
30494: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30495: LD_ADDR_VAR 0 4
30499: PUSH
30500: DOUBLE
30501: LD_INT 1
30503: DEC
30504: ST_TO_ADDR
30505: LD_EXP 85
30509: PUSH
30510: LD_VAR 0 5
30514: ARRAY
30515: PUSH
30516: FOR_TO
30517: IFFALSE 30558
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30519: LD_EXP 85
30523: PUSH
30524: LD_VAR 0 5
30528: ARRAY
30529: PUSH
30530: LD_VAR 0 4
30534: ARRAY
30535: PUSH
30536: LD_INT 1
30538: ARRAY
30539: PUSH
30540: LD_VAR 0 2
30544: EQUAL
30545: IFFALSE 30556
// KillUnit ( vehicle ) ;
30547: LD_VAR 0 2
30551: PPUSH
30552: CALL_OW 66
30556: GO 30516
30558: POP
30559: POP
// end ;
30560: LD_VAR 0 3
30564: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30565: LD_EXP 89
30569: NOT
30570: IFFALSE 30605
30572: GO 30574
30574: DISABLE
// begin initMiner := true ;
30575: LD_ADDR_EXP 89
30579: PUSH
30580: LD_INT 1
30582: ST_TO_ADDR
// minersList := [ ] ;
30583: LD_ADDR_EXP 90
30587: PUSH
30588: EMPTY
30589: ST_TO_ADDR
// minerMinesList := [ ] ;
30590: LD_ADDR_EXP 91
30594: PUSH
30595: EMPTY
30596: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30597: LD_ADDR_EXP 92
30601: PUSH
30602: LD_INT 5
30604: ST_TO_ADDR
// end ;
30605: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30606: LD_EXP 89
30610: PUSH
30611: LD_INT 34
30613: PUSH
30614: LD_INT 81
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PPUSH
30621: CALL_OW 69
30625: AND
30626: IFFALSE 31087
30628: GO 30630
30630: DISABLE
30631: LD_INT 0
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// begin enable ;
30637: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30638: LD_ADDR_VAR 0 1
30642: PUSH
30643: LD_INT 34
30645: PUSH
30646: LD_INT 81
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 69
30657: PUSH
30658: FOR_IN
30659: IFFALSE 30731
// begin if not i in minersList then
30661: LD_VAR 0 1
30665: PUSH
30666: LD_EXP 90
30670: IN
30671: NOT
30672: IFFALSE 30729
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30674: LD_ADDR_EXP 90
30678: PUSH
30679: LD_EXP 90
30683: PPUSH
30684: LD_EXP 90
30688: PUSH
30689: LD_INT 1
30691: PLUS
30692: PPUSH
30693: LD_VAR 0 1
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30703: LD_ADDR_EXP 91
30707: PUSH
30708: LD_EXP 91
30712: PPUSH
30713: LD_EXP 91
30717: PUSH
30718: LD_INT 1
30720: PLUS
30721: PPUSH
30722: EMPTY
30723: PPUSH
30724: CALL_OW 1
30728: ST_TO_ADDR
// end end ;
30729: GO 30658
30731: POP
30732: POP
// for i := minerMinesList downto 1 do
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: DOUBLE
30739: LD_EXP 91
30743: INC
30744: ST_TO_ADDR
30745: LD_INT 1
30747: PUSH
30748: FOR_DOWNTO
30749: IFFALSE 31085
// begin if IsLive ( minersList [ i ] ) then
30751: LD_EXP 90
30755: PUSH
30756: LD_VAR 0 1
30760: ARRAY
30761: PPUSH
30762: CALL_OW 300
30766: IFFALSE 30794
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30768: LD_EXP 90
30772: PUSH
30773: LD_VAR 0 1
30777: ARRAY
30778: PPUSH
30779: LD_EXP 91
30783: PUSH
30784: LD_VAR 0 1
30788: ARRAY
30789: PPUSH
30790: CALL_OW 505
// if not minerMinesList [ i ] then
30794: LD_EXP 91
30798: PUSH
30799: LD_VAR 0 1
30803: ARRAY
30804: NOT
30805: IFFALSE 30809
// continue ;
30807: GO 30748
// for j := minerMinesList [ i ] downto 1 do
30809: LD_ADDR_VAR 0 2
30813: PUSH
30814: DOUBLE
30815: LD_EXP 91
30819: PUSH
30820: LD_VAR 0 1
30824: ARRAY
30825: INC
30826: ST_TO_ADDR
30827: LD_INT 1
30829: PUSH
30830: FOR_DOWNTO
30831: IFFALSE 31081
// begin side := GetSide ( minersList [ i ] ) ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_EXP 90
30842: PUSH
30843: LD_VAR 0 1
30847: ARRAY
30848: PPUSH
30849: CALL_OW 255
30853: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30854: LD_ADDR_VAR 0 4
30858: PUSH
30859: LD_EXP 91
30863: PUSH
30864: LD_VAR 0 1
30868: ARRAY
30869: PUSH
30870: LD_VAR 0 2
30874: ARRAY
30875: PUSH
30876: LD_INT 1
30878: ARRAY
30879: PPUSH
30880: LD_EXP 91
30884: PUSH
30885: LD_VAR 0 1
30889: ARRAY
30890: PUSH
30891: LD_VAR 0 2
30895: ARRAY
30896: PUSH
30897: LD_INT 2
30899: ARRAY
30900: PPUSH
30901: CALL_OW 428
30905: ST_TO_ADDR
// if not tmp then
30906: LD_VAR 0 4
30910: NOT
30911: IFFALSE 30915
// continue ;
30913: GO 30830
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30915: LD_VAR 0 4
30919: PUSH
30920: LD_INT 81
30922: PUSH
30923: LD_VAR 0 3
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PPUSH
30932: CALL_OW 69
30936: IN
30937: PUSH
30938: LD_EXP 91
30942: PUSH
30943: LD_VAR 0 1
30947: ARRAY
30948: PUSH
30949: LD_VAR 0 2
30953: ARRAY
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: LD_EXP 91
30963: PUSH
30964: LD_VAR 0 1
30968: ARRAY
30969: PUSH
30970: LD_VAR 0 2
30974: ARRAY
30975: PUSH
30976: LD_INT 2
30978: ARRAY
30979: PPUSH
30980: CALL_OW 458
30984: AND
30985: IFFALSE 31079
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30987: LD_EXP 91
30991: PUSH
30992: LD_VAR 0 1
30996: ARRAY
30997: PUSH
30998: LD_VAR 0 2
31002: ARRAY
31003: PUSH
31004: LD_INT 1
31006: ARRAY
31007: PPUSH
31008: LD_EXP 91
31012: PUSH
31013: LD_VAR 0 1
31017: ARRAY
31018: PUSH
31019: LD_VAR 0 2
31023: ARRAY
31024: PUSH
31025: LD_INT 2
31027: ARRAY
31028: PPUSH
31029: LD_VAR 0 3
31033: PPUSH
31034: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31038: LD_ADDR_EXP 91
31042: PUSH
31043: LD_EXP 91
31047: PPUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_EXP 91
31057: PUSH
31058: LD_VAR 0 1
31062: ARRAY
31063: PPUSH
31064: LD_VAR 0 2
31068: PPUSH
31069: CALL_OW 3
31073: PPUSH
31074: CALL_OW 1
31078: ST_TO_ADDR
// end ; end ;
31079: GO 30830
31081: POP
31082: POP
// end ;
31083: GO 30748
31085: POP
31086: POP
// end ;
31087: PPOPN 4
31089: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31090: LD_INT 0
31092: PPUSH
31093: PPUSH
// result := false ;
31094: LD_ADDR_VAR 0 4
31098: PUSH
31099: LD_INT 0
31101: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL_OW 264
31111: PUSH
31112: LD_INT 81
31114: EQUAL
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31360
// index := GetElementIndex ( minersList , unit ) ;
31120: LD_ADDR_VAR 0 5
31124: PUSH
31125: LD_EXP 90
31129: PPUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL 37418 0 2
31139: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31140: LD_EXP 91
31144: PUSH
31145: LD_VAR 0 5
31149: ARRAY
31150: PUSH
31151: LD_EXP 92
31155: GREATEREQUAL
31156: IFFALSE 31160
// exit ;
31158: GO 31360
// ComMoveXY ( unit , x , y ) ;
31160: LD_VAR 0 1
31164: PPUSH
31165: LD_VAR 0 2
31169: PPUSH
31170: LD_VAR 0 3
31174: PPUSH
31175: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31179: LD_INT 35
31181: PPUSH
31182: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31186: LD_VAR 0 1
31190: PPUSH
31191: LD_VAR 0 2
31195: PPUSH
31196: LD_VAR 0 3
31200: PPUSH
31201: CALL 69179 0 3
31205: NOT
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 314
31216: AND
31217: IFFALSE 31221
// exit ;
31219: GO 31360
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 428
31235: PUSH
31236: LD_VAR 0 1
31240: EQUAL
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 314
31251: NOT
31252: AND
31253: IFFALSE 31179
// PlaySoundXY ( x , y , PlantMine ) ;
31255: LD_VAR 0 2
31259: PPUSH
31260: LD_VAR 0 3
31264: PPUSH
31265: LD_STRING PlantMine
31267: PPUSH
31268: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_VAR 0 3
31281: PPUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 255
31291: PPUSH
31292: LD_INT 0
31294: PPUSH
31295: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31299: LD_ADDR_EXP 91
31303: PUSH
31304: LD_EXP 91
31308: PPUSH
31309: LD_VAR 0 5
31313: PUSH
31314: LD_EXP 91
31318: PUSH
31319: LD_VAR 0 5
31323: ARRAY
31324: PUSH
31325: LD_INT 1
31327: PLUS
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PPUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 3
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL 37633 0 3
31351: ST_TO_ADDR
// result := true ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_INT 1
31359: ST_TO_ADDR
// end ;
31360: LD_VAR 0 4
31364: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31365: LD_INT 0
31367: PPUSH
31368: PPUSH
31369: PPUSH
// if not unit in minersList then
31370: LD_VAR 0 1
31374: PUSH
31375: LD_EXP 90
31379: IN
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31777
// index := GetElementIndex ( minersList , unit ) ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_EXP 90
31394: PPUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL 37418 0 2
31404: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31405: LD_ADDR_VAR 0 5
31409: PUSH
31410: DOUBLE
31411: LD_EXP 91
31415: PUSH
31416: LD_VAR 0 6
31420: ARRAY
31421: INC
31422: ST_TO_ADDR
31423: LD_INT 1
31425: PUSH
31426: FOR_DOWNTO
31427: IFFALSE 31588
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31429: LD_EXP 91
31433: PUSH
31434: LD_VAR 0 6
31438: ARRAY
31439: PUSH
31440: LD_VAR 0 5
31444: ARRAY
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PUSH
31450: LD_VAR 0 2
31454: EQUAL
31455: PUSH
31456: LD_EXP 91
31460: PUSH
31461: LD_VAR 0 6
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 5
31471: ARRAY
31472: PUSH
31473: LD_INT 2
31475: ARRAY
31476: PUSH
31477: LD_VAR 0 3
31481: EQUAL
31482: AND
31483: IFFALSE 31586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31485: LD_EXP 91
31489: PUSH
31490: LD_VAR 0 6
31494: ARRAY
31495: PUSH
31496: LD_VAR 0 5
31500: ARRAY
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PPUSH
31506: LD_EXP 91
31510: PUSH
31511: LD_VAR 0 6
31515: ARRAY
31516: PUSH
31517: LD_VAR 0 5
31521: ARRAY
31522: PUSH
31523: LD_INT 2
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 255
31536: PPUSH
31537: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31541: LD_ADDR_EXP 91
31545: PUSH
31546: LD_EXP 91
31550: PPUSH
31551: LD_VAR 0 6
31555: PPUSH
31556: LD_EXP 91
31560: PUSH
31561: LD_VAR 0 6
31565: ARRAY
31566: PPUSH
31567: LD_VAR 0 5
31571: PPUSH
31572: CALL_OW 3
31576: PPUSH
31577: CALL_OW 1
31581: ST_TO_ADDR
// exit ;
31582: POP
31583: POP
31584: GO 31777
// end ; end ;
31586: GO 31426
31588: POP
31589: POP
// for i := minerMinesList [ index ] downto 1 do
31590: LD_ADDR_VAR 0 5
31594: PUSH
31595: DOUBLE
31596: LD_EXP 91
31600: PUSH
31601: LD_VAR 0 6
31605: ARRAY
31606: INC
31607: ST_TO_ADDR
31608: LD_INT 1
31610: PUSH
31611: FOR_DOWNTO
31612: IFFALSE 31775
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31614: LD_EXP 91
31618: PUSH
31619: LD_VAR 0 6
31623: ARRAY
31624: PUSH
31625: LD_VAR 0 5
31629: ARRAY
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: LD_EXP 91
31639: PUSH
31640: LD_VAR 0 6
31644: ARRAY
31645: PUSH
31646: LD_VAR 0 5
31650: ARRAY
31651: PUSH
31652: LD_INT 2
31654: ARRAY
31655: PPUSH
31656: LD_VAR 0 2
31660: PPUSH
31661: LD_VAR 0 3
31665: PPUSH
31666: CALL_OW 298
31670: PUSH
31671: LD_INT 6
31673: LESS
31674: IFFALSE 31773
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31676: LD_EXP 91
31680: PUSH
31681: LD_VAR 0 6
31685: ARRAY
31686: PUSH
31687: LD_VAR 0 5
31691: ARRAY
31692: PUSH
31693: LD_INT 1
31695: ARRAY
31696: PPUSH
31697: LD_EXP 91
31701: PUSH
31702: LD_VAR 0 6
31706: ARRAY
31707: PUSH
31708: LD_VAR 0 5
31712: ARRAY
31713: PUSH
31714: LD_INT 2
31716: ARRAY
31717: PPUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL_OW 255
31727: PPUSH
31728: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31732: LD_ADDR_EXP 91
31736: PUSH
31737: LD_EXP 91
31741: PPUSH
31742: LD_VAR 0 6
31746: PPUSH
31747: LD_EXP 91
31751: PUSH
31752: LD_VAR 0 6
31756: ARRAY
31757: PPUSH
31758: LD_VAR 0 5
31762: PPUSH
31763: CALL_OW 3
31767: PPUSH
31768: CALL_OW 1
31772: ST_TO_ADDR
// end ; end ;
31773: GO 31611
31775: POP
31776: POP
// end ;
31777: LD_VAR 0 4
31781: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31782: LD_INT 0
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 264
31802: PUSH
31803: LD_INT 81
31805: EQUAL
31806: NOT
31807: PUSH
31808: LD_VAR 0 1
31812: PUSH
31813: LD_EXP 90
31817: IN
31818: NOT
31819: OR
31820: IFFALSE 31824
// exit ;
31822: GO 32146
// index := GetElementIndex ( minersList , unit ) ;
31824: LD_ADDR_VAR 0 6
31828: PUSH
31829: LD_EXP 90
31833: PPUSH
31834: LD_VAR 0 1
31838: PPUSH
31839: CALL 37418 0 2
31843: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31844: LD_ADDR_VAR 0 8
31848: PUSH
31849: LD_EXP 92
31853: PUSH
31854: LD_EXP 91
31858: PUSH
31859: LD_VAR 0 6
31863: ARRAY
31864: MINUS
31865: ST_TO_ADDR
// if not minesFreeAmount then
31866: LD_VAR 0 8
31870: NOT
31871: IFFALSE 31875
// exit ;
31873: GO 32146
// tmp := [ ] ;
31875: LD_ADDR_VAR 0 7
31879: PUSH
31880: EMPTY
31881: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: DOUBLE
31888: LD_INT 1
31890: DEC
31891: ST_TO_ADDR
31892: LD_VAR 0 8
31896: PUSH
31897: FOR_TO
31898: IFFALSE 32093
// begin _d := rand ( 0 , 5 ) ;
31900: LD_ADDR_VAR 0 11
31904: PUSH
31905: LD_INT 0
31907: PPUSH
31908: LD_INT 5
31910: PPUSH
31911: CALL_OW 12
31915: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31916: LD_ADDR_VAR 0 12
31920: PUSH
31921: LD_INT 2
31923: PPUSH
31924: LD_INT 6
31926: PPUSH
31927: CALL_OW 12
31931: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31932: LD_ADDR_VAR 0 9
31936: PUSH
31937: LD_VAR 0 2
31941: PPUSH
31942: LD_VAR 0 11
31946: PPUSH
31947: LD_VAR 0 12
31951: PPUSH
31952: CALL_OW 272
31956: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31957: LD_ADDR_VAR 0 10
31961: PUSH
31962: LD_VAR 0 3
31966: PPUSH
31967: LD_VAR 0 11
31971: PPUSH
31972: LD_VAR 0 12
31976: PPUSH
31977: CALL_OW 273
31981: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31982: LD_VAR 0 9
31986: PPUSH
31987: LD_VAR 0 10
31991: PPUSH
31992: CALL_OW 488
31996: PUSH
31997: LD_VAR 0 9
32001: PUSH
32002: LD_VAR 0 10
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_VAR 0 7
32015: IN
32016: NOT
32017: AND
32018: PUSH
32019: LD_VAR 0 9
32023: PPUSH
32024: LD_VAR 0 10
32028: PPUSH
32029: CALL_OW 458
32033: NOT
32034: AND
32035: IFFALSE 32077
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32037: LD_ADDR_VAR 0 7
32041: PUSH
32042: LD_VAR 0 7
32046: PPUSH
32047: LD_VAR 0 7
32051: PUSH
32052: LD_INT 1
32054: PLUS
32055: PPUSH
32056: LD_VAR 0 9
32060: PUSH
32061: LD_VAR 0 10
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PPUSH
32070: CALL_OW 1
32074: ST_TO_ADDR
32075: GO 32091
// i := i - 1 ;
32077: LD_ADDR_VAR 0 5
32081: PUSH
32082: LD_VAR 0 5
32086: PUSH
32087: LD_INT 1
32089: MINUS
32090: ST_TO_ADDR
// end ;
32091: GO 31897
32093: POP
32094: POP
// for i in tmp do
32095: LD_ADDR_VAR 0 5
32099: PUSH
32100: LD_VAR 0 7
32104: PUSH
32105: FOR_IN
32106: IFFALSE 32144
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32108: LD_VAR 0 1
32112: PPUSH
32113: LD_VAR 0 5
32117: PUSH
32118: LD_INT 1
32120: ARRAY
32121: PPUSH
32122: LD_VAR 0 5
32126: PUSH
32127: LD_INT 2
32129: ARRAY
32130: PPUSH
32131: CALL 31090 0 3
32135: NOT
32136: IFFALSE 32142
// exit ;
32138: POP
32139: POP
32140: GO 32146
32142: GO 32105
32144: POP
32145: POP
// end ;
32146: LD_VAR 0 4
32150: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
// if GetClass ( unit ) <> class_sniper then
32162: LD_VAR 0 1
32166: PPUSH
32167: CALL_OW 257
32171: PUSH
32172: LD_INT 5
32174: NONEQUAL
32175: IFFALSE 32179
// exit ;
32177: GO 32645
// dist := 8 ;
32179: LD_ADDR_VAR 0 5
32183: PUSH
32184: LD_INT 8
32186: ST_TO_ADDR
// viewRange := 12 ;
32187: LD_ADDR_VAR 0 8
32191: PUSH
32192: LD_INT 12
32194: ST_TO_ADDR
// side := GetSide ( unit ) ;
32195: LD_ADDR_VAR 0 6
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 255
32209: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32210: LD_INT 61
32212: PPUSH
32213: LD_VAR 0 6
32217: PPUSH
32218: CALL_OW 321
32222: PUSH
32223: LD_INT 2
32225: EQUAL
32226: IFFALSE 32236
// viewRange := 16 ;
32228: LD_ADDR_VAR 0 8
32232: PUSH
32233: LD_INT 16
32235: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_VAR 0 2
32245: PPUSH
32246: LD_VAR 0 3
32250: PPUSH
32251: CALL_OW 297
32255: PUSH
32256: LD_VAR 0 5
32260: GREATER
32261: IFFALSE 32340
// begin ComMoveXY ( unit , x , y ) ;
32263: LD_VAR 0 1
32267: PPUSH
32268: LD_VAR 0 2
32272: PPUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32282: LD_INT 35
32284: PPUSH
32285: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32289: LD_VAR 0 1
32293: PPUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: LD_VAR 0 3
32303: PPUSH
32304: CALL 69179 0 3
32308: NOT
32309: IFFALSE 32313
// exit ;
32311: GO 32645
// until GetDistUnitXY ( unit , x , y ) < dist ;
32313: LD_VAR 0 1
32317: PPUSH
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 3
32327: PPUSH
32328: CALL_OW 297
32332: PUSH
32333: LD_VAR 0 5
32337: LESS
32338: IFFALSE 32282
// end ; ComTurnXY ( unit , x , y ) ;
32340: LD_VAR 0 1
32344: PPUSH
32345: LD_VAR 0 2
32349: PPUSH
32350: LD_VAR 0 3
32354: PPUSH
32355: CALL_OW 118
// repeat if Multiplayer then
32359: LD_OWVAR 4
32363: IFFALSE 32374
// wait ( 35 ) else
32365: LD_INT 35
32367: PPUSH
32368: CALL_OW 67
32372: GO 32381
// wait ( 5 ) ;
32374: LD_INT 5
32376: PPUSH
32377: CALL_OW 67
// _d := GetDir ( unit ) ;
32381: LD_ADDR_VAR 0 11
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 254
32395: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32396: LD_ADDR_VAR 0 7
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 250
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 251
32420: PPUSH
32421: LD_VAR 0 2
32425: PPUSH
32426: LD_VAR 0 3
32430: PPUSH
32431: CALL 71787 0 4
32435: ST_TO_ADDR
// until dir = _d ;
32436: LD_VAR 0 7
32440: PUSH
32441: LD_VAR 0 11
32445: EQUAL
32446: IFFALSE 32359
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 250
32462: PPUSH
32463: LD_VAR 0 7
32467: PPUSH
32468: LD_VAR 0 5
32472: PPUSH
32473: CALL_OW 272
32477: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32478: LD_ADDR_VAR 0 10
32482: PUSH
32483: LD_VAR 0 1
32487: PPUSH
32488: CALL_OW 251
32492: PPUSH
32493: LD_VAR 0 7
32497: PPUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: CALL_OW 273
32507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32508: LD_VAR 0 9
32512: PPUSH
32513: LD_VAR 0 10
32517: PPUSH
32518: CALL_OW 488
32522: NOT
32523: IFFALSE 32527
// exit ;
32525: GO 32645
// ComAnimCustom ( unit , 1 ) ;
32527: LD_VAR 0 1
32531: PPUSH
32532: LD_INT 1
32534: PPUSH
32535: CALL_OW 592
// p := 0 ;
32539: LD_ADDR_VAR 0 12
32543: PUSH
32544: LD_INT 0
32546: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32547: LD_VAR 0 9
32551: PPUSH
32552: LD_VAR 0 10
32556: PPUSH
32557: LD_VAR 0 6
32561: PPUSH
32562: LD_VAR 0 8
32566: PPUSH
32567: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32571: LD_INT 35
32573: PPUSH
32574: CALL_OW 67
// p := Inc ( p ) ;
32578: LD_ADDR_VAR 0 12
32582: PUSH
32583: LD_VAR 0 12
32587: PPUSH
32588: CALL 71743 0 1
32592: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32593: LD_VAR 0 12
32597: PUSH
32598: LD_INT 3
32600: EQUAL
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 302
32611: NOT
32612: OR
32613: PUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 301
32623: OR
32624: IFFALSE 32571
// RemoveSeeing ( _x , _y , side ) ;
32626: LD_VAR 0 9
32630: PPUSH
32631: LD_VAR 0 10
32635: PPUSH
32636: LD_VAR 0 6
32640: PPUSH
32641: CALL_OW 331
// end ; end_of_file
32645: LD_VAR 0 4
32649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32650: LD_INT 0
32652: PPUSH
32653: PPUSH
// if exist_mode then
32654: LD_VAR 0 2
32658: IFFALSE 32704
// begin unit := CreateCharacter ( prefix & ident ) ;
32660: LD_ADDR_VAR 0 5
32664: PUSH
32665: LD_VAR 0 3
32669: PUSH
32670: LD_VAR 0 1
32674: STR
32675: PPUSH
32676: CALL_OW 34
32680: ST_TO_ADDR
// if unit then
32681: LD_VAR 0 5
32685: IFFALSE 32702
// DeleteCharacters ( prefix & ident ) ;
32687: LD_VAR 0 3
32691: PUSH
32692: LD_VAR 0 1
32696: STR
32697: PPUSH
32698: CALL_OW 40
// end else
32702: GO 32719
// unit := NewCharacter ( ident ) ;
32704: LD_ADDR_VAR 0 5
32708: PUSH
32709: LD_VAR 0 1
32713: PPUSH
32714: CALL_OW 25
32718: ST_TO_ADDR
// result := unit ;
32719: LD_ADDR_VAR 0 4
32723: PUSH
32724: LD_VAR 0 5
32728: ST_TO_ADDR
// end ;
32729: LD_VAR 0 4
32733: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32734: LD_INT 0
32736: PPUSH
32737: PPUSH
// if not side or not nation then
32738: LD_VAR 0 1
32742: NOT
32743: PUSH
32744: LD_VAR 0 2
32748: NOT
32749: OR
32750: IFFALSE 32754
// exit ;
32752: GO 33522
// case nation of nation_american :
32754: LD_VAR 0 2
32758: PUSH
32759: LD_INT 1
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32767
32765: GO 32981
32767: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32768: LD_ADDR_VAR 0 4
32772: PUSH
32773: LD_INT 35
32775: PUSH
32776: LD_INT 45
32778: PUSH
32779: LD_INT 46
32781: PUSH
32782: LD_INT 47
32784: PUSH
32785: LD_INT 82
32787: PUSH
32788: LD_INT 83
32790: PUSH
32791: LD_INT 84
32793: PUSH
32794: LD_INT 85
32796: PUSH
32797: LD_INT 86
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 6
32808: PUSH
32809: LD_INT 15
32811: PUSH
32812: LD_INT 16
32814: PUSH
32815: LD_INT 7
32817: PUSH
32818: LD_INT 12
32820: PUSH
32821: LD_INT 13
32823: PUSH
32824: LD_INT 10
32826: PUSH
32827: LD_INT 14
32829: PUSH
32830: LD_INT 20
32832: PUSH
32833: LD_INT 21
32835: PUSH
32836: LD_INT 22
32838: PUSH
32839: LD_INT 25
32841: PUSH
32842: LD_INT 32
32844: PUSH
32845: LD_INT 27
32847: PUSH
32848: LD_INT 36
32850: PUSH
32851: LD_INT 69
32853: PUSH
32854: LD_INT 39
32856: PUSH
32857: LD_INT 34
32859: PUSH
32860: LD_INT 40
32862: PUSH
32863: LD_INT 48
32865: PUSH
32866: LD_INT 49
32868: PUSH
32869: LD_INT 50
32871: PUSH
32872: LD_INT 51
32874: PUSH
32875: LD_INT 52
32877: PUSH
32878: LD_INT 53
32880: PUSH
32881: LD_INT 54
32883: PUSH
32884: LD_INT 55
32886: PUSH
32887: LD_INT 56
32889: PUSH
32890: LD_INT 57
32892: PUSH
32893: LD_INT 58
32895: PUSH
32896: LD_INT 59
32898: PUSH
32899: LD_INT 60
32901: PUSH
32902: LD_INT 61
32904: PUSH
32905: LD_INT 62
32907: PUSH
32908: LD_INT 80
32910: PUSH
32911: LD_INT 82
32913: PUSH
32914: LD_INT 83
32916: PUSH
32917: LD_INT 84
32919: PUSH
32920: LD_INT 85
32922: PUSH
32923: LD_INT 86
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
32979: GO 33446
32981: LD_INT 2
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33215
32989: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32990: LD_ADDR_VAR 0 4
32994: PUSH
32995: LD_INT 35
32997: PUSH
32998: LD_INT 45
33000: PUSH
33001: LD_INT 46
33003: PUSH
33004: LD_INT 47
33006: PUSH
33007: LD_INT 82
33009: PUSH
33010: LD_INT 83
33012: PUSH
33013: LD_INT 84
33015: PUSH
33016: LD_INT 85
33018: PUSH
33019: LD_INT 87
33021: PUSH
33022: LD_INT 70
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 11
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: LD_INT 4
33036: PUSH
33037: LD_INT 5
33039: PUSH
33040: LD_INT 6
33042: PUSH
33043: LD_INT 15
33045: PUSH
33046: LD_INT 18
33048: PUSH
33049: LD_INT 7
33051: PUSH
33052: LD_INT 17
33054: PUSH
33055: LD_INT 8
33057: PUSH
33058: LD_INT 20
33060: PUSH
33061: LD_INT 21
33063: PUSH
33064: LD_INT 22
33066: PUSH
33067: LD_INT 72
33069: PUSH
33070: LD_INT 26
33072: PUSH
33073: LD_INT 69
33075: PUSH
33076: LD_INT 39
33078: PUSH
33079: LD_INT 40
33081: PUSH
33082: LD_INT 41
33084: PUSH
33085: LD_INT 42
33087: PUSH
33088: LD_INT 43
33090: PUSH
33091: LD_INT 48
33093: PUSH
33094: LD_INT 49
33096: PUSH
33097: LD_INT 50
33099: PUSH
33100: LD_INT 51
33102: PUSH
33103: LD_INT 52
33105: PUSH
33106: LD_INT 53
33108: PUSH
33109: LD_INT 54
33111: PUSH
33112: LD_INT 55
33114: PUSH
33115: LD_INT 56
33117: PUSH
33118: LD_INT 60
33120: PUSH
33121: LD_INT 61
33123: PUSH
33124: LD_INT 62
33126: PUSH
33127: LD_INT 66
33129: PUSH
33130: LD_INT 67
33132: PUSH
33133: LD_INT 68
33135: PUSH
33136: LD_INT 81
33138: PUSH
33139: LD_INT 82
33141: PUSH
33142: LD_INT 83
33144: PUSH
33145: LD_INT 84
33147: PUSH
33148: LD_INT 85
33150: PUSH
33151: LD_INT 87
33153: PUSH
33154: LD_INT 88
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33446
33215: LD_INT 3
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33445
33223: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33224: LD_ADDR_VAR 0 4
33228: PUSH
33229: LD_INT 46
33231: PUSH
33232: LD_INT 47
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: LD_INT 82
33243: PUSH
33244: LD_INT 83
33246: PUSH
33247: LD_INT 84
33249: PUSH
33250: LD_INT 85
33252: PUSH
33253: LD_INT 86
33255: PUSH
33256: LD_INT 11
33258: PUSH
33259: LD_INT 9
33261: PUSH
33262: LD_INT 20
33264: PUSH
33265: LD_INT 19
33267: PUSH
33268: LD_INT 21
33270: PUSH
33271: LD_INT 24
33273: PUSH
33274: LD_INT 22
33276: PUSH
33277: LD_INT 25
33279: PUSH
33280: LD_INT 28
33282: PUSH
33283: LD_INT 29
33285: PUSH
33286: LD_INT 30
33288: PUSH
33289: LD_INT 31
33291: PUSH
33292: LD_INT 37
33294: PUSH
33295: LD_INT 38
33297: PUSH
33298: LD_INT 32
33300: PUSH
33301: LD_INT 27
33303: PUSH
33304: LD_INT 33
33306: PUSH
33307: LD_INT 69
33309: PUSH
33310: LD_INT 39
33312: PUSH
33313: LD_INT 34
33315: PUSH
33316: LD_INT 40
33318: PUSH
33319: LD_INT 71
33321: PUSH
33322: LD_INT 23
33324: PUSH
33325: LD_INT 44
33327: PUSH
33328: LD_INT 48
33330: PUSH
33331: LD_INT 49
33333: PUSH
33334: LD_INT 50
33336: PUSH
33337: LD_INT 51
33339: PUSH
33340: LD_INT 52
33342: PUSH
33343: LD_INT 53
33345: PUSH
33346: LD_INT 54
33348: PUSH
33349: LD_INT 55
33351: PUSH
33352: LD_INT 56
33354: PUSH
33355: LD_INT 57
33357: PUSH
33358: LD_INT 58
33360: PUSH
33361: LD_INT 59
33363: PUSH
33364: LD_INT 63
33366: PUSH
33367: LD_INT 64
33369: PUSH
33370: LD_INT 65
33372: PUSH
33373: LD_INT 82
33375: PUSH
33376: LD_INT 83
33378: PUSH
33379: LD_INT 84
33381: PUSH
33382: LD_INT 85
33384: PUSH
33385: LD_INT 86
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: ST_TO_ADDR
33443: GO 33446
33445: POP
// if state > - 1 and state < 3 then
33446: LD_VAR 0 3
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: GREATER
33455: PUSH
33456: LD_VAR 0 3
33460: PUSH
33461: LD_INT 3
33463: LESS
33464: AND
33465: IFFALSE 33522
// for i in result do
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: LD_VAR 0 4
33476: PUSH
33477: FOR_IN
33478: IFFALSE 33520
// if GetTech ( i , side ) <> state then
33480: LD_VAR 0 5
33484: PPUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 321
33494: PUSH
33495: LD_VAR 0 3
33499: NONEQUAL
33500: IFFALSE 33518
// result := result diff i ;
33502: LD_ADDR_VAR 0 4
33506: PUSH
33507: LD_VAR 0 4
33511: PUSH
33512: LD_VAR 0 5
33516: DIFF
33517: ST_TO_ADDR
33518: GO 33477
33520: POP
33521: POP
// end ;
33522: LD_VAR 0 4
33526: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33527: LD_INT 0
33529: PPUSH
33530: PPUSH
33531: PPUSH
// result := true ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_INT 1
33539: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33540: LD_ADDR_VAR 0 5
33544: PUSH
33545: LD_VAR 0 2
33549: PPUSH
33550: CALL_OW 480
33554: ST_TO_ADDR
// if not tmp then
33555: LD_VAR 0 5
33559: NOT
33560: IFFALSE 33564
// exit ;
33562: GO 33613
// for i in tmp do
33564: LD_ADDR_VAR 0 4
33568: PUSH
33569: LD_VAR 0 5
33573: PUSH
33574: FOR_IN
33575: IFFALSE 33611
// if GetTech ( i , side ) <> state_researched then
33577: LD_VAR 0 4
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 321
33591: PUSH
33592: LD_INT 2
33594: NONEQUAL
33595: IFFALSE 33609
// begin result := false ;
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_INT 0
33604: ST_TO_ADDR
// exit ;
33605: POP
33606: POP
33607: GO 33613
// end ;
33609: GO 33574
33611: POP
33612: POP
// end ;
33613: LD_VAR 0 3
33617: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33618: LD_INT 0
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
33624: PPUSH
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33633: LD_VAR 0 1
33637: NOT
33638: PUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 257
33648: PUSH
33649: LD_INT 9
33651: NONEQUAL
33652: OR
33653: IFFALSE 33657
// exit ;
33655: GO 34230
// side := GetSide ( unit ) ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 255
33671: ST_TO_ADDR
// tech_space := tech_spacanom ;
33672: LD_ADDR_VAR 0 12
33676: PUSH
33677: LD_INT 29
33679: ST_TO_ADDR
// tech_time := tech_taurad ;
33680: LD_ADDR_VAR 0 13
33684: PUSH
33685: LD_INT 28
33687: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33688: LD_ADDR_VAR 0 11
33692: PUSH
33693: LD_VAR 0 1
33697: PPUSH
33698: CALL_OW 310
33702: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33703: LD_VAR 0 11
33707: PPUSH
33708: CALL_OW 247
33712: PUSH
33713: LD_INT 2
33715: EQUAL
33716: IFFALSE 33720
// exit ;
33718: GO 34230
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33720: LD_ADDR_VAR 0 8
33724: PUSH
33725: LD_INT 81
33727: PUSH
33728: LD_VAR 0 9
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 3
33739: PUSH
33740: LD_INT 21
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PPUSH
33758: CALL_OW 69
33762: ST_TO_ADDR
// if not tmp then
33763: LD_VAR 0 8
33767: NOT
33768: IFFALSE 33772
// exit ;
33770: GO 34230
// if in_unit then
33772: LD_VAR 0 11
33776: IFFALSE 33800
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33778: LD_ADDR_VAR 0 10
33782: PUSH
33783: LD_VAR 0 8
33787: PPUSH
33788: LD_VAR 0 11
33792: PPUSH
33793: CALL_OW 74
33797: ST_TO_ADDR
33798: GO 33820
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33800: LD_ADDR_VAR 0 10
33804: PUSH
33805: LD_VAR 0 8
33809: PPUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 74
33819: ST_TO_ADDR
// if not enemy then
33820: LD_VAR 0 10
33824: NOT
33825: IFFALSE 33829
// exit ;
33827: GO 34230
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33829: LD_VAR 0 11
33833: PUSH
33834: LD_VAR 0 11
33838: PPUSH
33839: LD_VAR 0 10
33843: PPUSH
33844: CALL_OW 296
33848: PUSH
33849: LD_INT 13
33851: GREATER
33852: AND
33853: PUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: LD_VAR 0 10
33863: PPUSH
33864: CALL_OW 296
33868: PUSH
33869: LD_INT 12
33871: GREATER
33872: OR
33873: IFFALSE 33877
// exit ;
33875: GO 34230
// missile := [ 1 ] ;
33877: LD_ADDR_VAR 0 14
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33888: LD_VAR 0 9
33892: PPUSH
33893: LD_VAR 0 12
33897: PPUSH
33898: CALL_OW 325
33902: IFFALSE 33931
// missile := Replace ( missile , missile + 1 , 2 ) ;
33904: LD_ADDR_VAR 0 14
33908: PUSH
33909: LD_VAR 0 14
33913: PPUSH
33914: LD_VAR 0 14
33918: PUSH
33919: LD_INT 1
33921: PLUS
33922: PPUSH
33923: LD_INT 2
33925: PPUSH
33926: CALL_OW 1
33930: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33931: LD_VAR 0 9
33935: PPUSH
33936: LD_VAR 0 13
33940: PPUSH
33941: CALL_OW 325
33945: PUSH
33946: LD_VAR 0 10
33950: PPUSH
33951: CALL_OW 255
33955: PPUSH
33956: LD_VAR 0 13
33960: PPUSH
33961: CALL_OW 325
33965: NOT
33966: AND
33967: IFFALSE 33996
// missile := Replace ( missile , missile + 1 , 3 ) ;
33969: LD_ADDR_VAR 0 14
33973: PUSH
33974: LD_VAR 0 14
33978: PPUSH
33979: LD_VAR 0 14
33983: PUSH
33984: LD_INT 1
33986: PLUS
33987: PPUSH
33988: LD_INT 3
33990: PPUSH
33991: CALL_OW 1
33995: ST_TO_ADDR
// if missile < 2 then
33996: LD_VAR 0 14
34000: PUSH
34001: LD_INT 2
34003: LESS
34004: IFFALSE 34008
// exit ;
34006: GO 34230
// x := GetX ( enemy ) ;
34008: LD_ADDR_VAR 0 4
34012: PUSH
34013: LD_VAR 0 10
34017: PPUSH
34018: CALL_OW 250
34022: ST_TO_ADDR
// y := GetY ( enemy ) ;
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_VAR 0 10
34032: PPUSH
34033: CALL_OW 251
34037: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34038: LD_ADDR_VAR 0 6
34042: PUSH
34043: LD_VAR 0 4
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PPUSH
34052: LD_INT 1
34054: PPUSH
34055: CALL_OW 12
34059: PLUS
34060: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34061: LD_ADDR_VAR 0 7
34065: PUSH
34066: LD_VAR 0 5
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PPUSH
34075: LD_INT 1
34077: PPUSH
34078: CALL_OW 12
34082: PLUS
34083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34084: LD_VAR 0 6
34088: PPUSH
34089: LD_VAR 0 7
34093: PPUSH
34094: CALL_OW 488
34098: NOT
34099: IFFALSE 34121
// begin _x := x ;
34101: LD_ADDR_VAR 0 6
34105: PUSH
34106: LD_VAR 0 4
34110: ST_TO_ADDR
// _y := y ;
34111: LD_ADDR_VAR 0 7
34115: PUSH
34116: LD_VAR 0 5
34120: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 1
34128: PPUSH
34129: LD_VAR 0 14
34133: PPUSH
34134: CALL_OW 12
34138: ST_TO_ADDR
// case i of 1 :
34139: LD_VAR 0 3
34143: PUSH
34144: LD_INT 1
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34152
34150: GO 34169
34152: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34153: LD_VAR 0 1
34157: PPUSH
34158: LD_VAR 0 10
34162: PPUSH
34163: CALL_OW 115
34167: GO 34230
34169: LD_INT 2
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34199
34177: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_VAR 0 6
34187: PPUSH
34188: LD_VAR 0 7
34192: PPUSH
34193: CALL_OW 153
34197: GO 34230
34199: LD_INT 3
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34207
34205: GO 34229
34207: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_VAR 0 6
34217: PPUSH
34218: LD_VAR 0 7
34222: PPUSH
34223: CALL_OW 154
34227: GO 34230
34229: POP
// end ;
34230: LD_VAR 0 2
34234: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34235: LD_INT 0
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
// if not unit or not building then
34243: LD_VAR 0 1
34247: NOT
34248: PUSH
34249: LD_VAR 0 2
34253: NOT
34254: OR
34255: IFFALSE 34259
// exit ;
34257: GO 34417
// x := GetX ( building ) ;
34259: LD_ADDR_VAR 0 5
34263: PUSH
34264: LD_VAR 0 2
34268: PPUSH
34269: CALL_OW 250
34273: ST_TO_ADDR
// y := GetY ( building ) ;
34274: LD_ADDR_VAR 0 6
34278: PUSH
34279: LD_VAR 0 2
34283: PPUSH
34284: CALL_OW 251
34288: ST_TO_ADDR
// for i = 0 to 5 do
34289: LD_ADDR_VAR 0 4
34293: PUSH
34294: DOUBLE
34295: LD_INT 0
34297: DEC
34298: ST_TO_ADDR
34299: LD_INT 5
34301: PUSH
34302: FOR_TO
34303: IFFALSE 34415
// begin _x := ShiftX ( x , i , 3 ) ;
34305: LD_ADDR_VAR 0 7
34309: PUSH
34310: LD_VAR 0 5
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: LD_INT 3
34322: PPUSH
34323: CALL_OW 272
34327: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34328: LD_ADDR_VAR 0 8
34332: PUSH
34333: LD_VAR 0 6
34337: PPUSH
34338: LD_VAR 0 4
34342: PPUSH
34343: LD_INT 3
34345: PPUSH
34346: CALL_OW 273
34350: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34351: LD_VAR 0 7
34355: PPUSH
34356: LD_VAR 0 8
34360: PPUSH
34361: CALL_OW 488
34365: NOT
34366: IFFALSE 34370
// continue ;
34368: GO 34302
// if HexInfo ( _x , _y ) = 0 then
34370: LD_VAR 0 7
34374: PPUSH
34375: LD_VAR 0 8
34379: PPUSH
34380: CALL_OW 428
34384: PUSH
34385: LD_INT 0
34387: EQUAL
34388: IFFALSE 34413
// begin ComMoveXY ( unit , _x , _y ) ;
34390: LD_VAR 0 1
34394: PPUSH
34395: LD_VAR 0 7
34399: PPUSH
34400: LD_VAR 0 8
34404: PPUSH
34405: CALL_OW 111
// exit ;
34409: POP
34410: POP
34411: GO 34417
// end ; end ;
34413: GO 34302
34415: POP
34416: POP
// end ;
34417: LD_VAR 0 3
34421: RET
// export function ScanBase ( side , base_area ) ; begin
34422: LD_INT 0
34424: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34425: LD_ADDR_VAR 0 3
34429: PUSH
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_INT 81
34437: PUSH
34438: LD_VAR 0 1
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PPUSH
34447: CALL_OW 70
34451: ST_TO_ADDR
// end ;
34452: LD_VAR 0 3
34456: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34457: LD_INT 0
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
// result := false ;
34463: LD_ADDR_VAR 0 2
34467: PUSH
34468: LD_INT 0
34470: ST_TO_ADDR
// side := GetSide ( unit ) ;
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_VAR 0 1
34480: PPUSH
34481: CALL_OW 255
34485: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34486: LD_ADDR_VAR 0 4
34490: PUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 248
34500: ST_TO_ADDR
// case nat of 1 :
34501: LD_VAR 0 4
34505: PUSH
34506: LD_INT 1
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34525
34514: POP
// tech := tech_lassight ; 2 :
34515: LD_ADDR_VAR 0 5
34519: PUSH
34520: LD_INT 12
34522: ST_TO_ADDR
34523: GO 34564
34525: LD_INT 2
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34544
34533: POP
// tech := tech_mortar ; 3 :
34534: LD_ADDR_VAR 0 5
34538: PUSH
34539: LD_INT 41
34541: ST_TO_ADDR
34542: GO 34564
34544: LD_INT 3
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34563
34552: POP
// tech := tech_bazooka ; end ;
34553: LD_ADDR_VAR 0 5
34557: PUSH
34558: LD_INT 44
34560: ST_TO_ADDR
34561: GO 34564
34563: POP
// if Researched ( side , tech ) then
34564: LD_VAR 0 3
34568: PPUSH
34569: LD_VAR 0 5
34573: PPUSH
34574: CALL_OW 325
34578: IFFALSE 34605
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34580: LD_ADDR_VAR 0 2
34584: PUSH
34585: LD_INT 5
34587: PUSH
34588: LD_INT 8
34590: PUSH
34591: LD_INT 9
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: LD_VAR 0 4
34603: ARRAY
34604: ST_TO_ADDR
// end ;
34605: LD_VAR 0 2
34609: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34610: LD_INT 0
34612: PPUSH
34613: PPUSH
34614: PPUSH
// if not mines then
34615: LD_VAR 0 2
34619: NOT
34620: IFFALSE 34624
// exit ;
34622: GO 34768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34624: LD_ADDR_VAR 0 5
34628: PUSH
34629: LD_INT 81
34631: PUSH
34632: LD_VAR 0 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 21
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PPUSH
34662: CALL_OW 69
34666: ST_TO_ADDR
// for i in mines do
34667: LD_ADDR_VAR 0 4
34671: PUSH
34672: LD_VAR 0 2
34676: PUSH
34677: FOR_IN
34678: IFFALSE 34766
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34680: LD_VAR 0 4
34684: PUSH
34685: LD_INT 1
34687: ARRAY
34688: PPUSH
34689: LD_VAR 0 4
34693: PUSH
34694: LD_INT 2
34696: ARRAY
34697: PPUSH
34698: CALL_OW 458
34702: NOT
34703: IFFALSE 34707
// continue ;
34705: GO 34677
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 1
34714: ARRAY
34715: PPUSH
34716: LD_VAR 0 4
34720: PUSH
34721: LD_INT 2
34723: ARRAY
34724: PPUSH
34725: CALL_OW 428
34729: PUSH
34730: LD_VAR 0 5
34734: IN
34735: IFFALSE 34764
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34737: LD_VAR 0 4
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PPUSH
34746: LD_VAR 0 4
34750: PUSH
34751: LD_INT 2
34753: ARRAY
34754: PPUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 456
// end ;
34764: GO 34677
34766: POP
34767: POP
// end ;
34768: LD_VAR 0 3
34772: RET
// export function Count ( array ) ; begin
34773: LD_INT 0
34775: PPUSH
// result := array + 0 ;
34776: LD_ADDR_VAR 0 2
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: LD_INT 0
34788: PLUS
34789: ST_TO_ADDR
// end ;
34790: LD_VAR 0 2
34794: RET
// export function IsEmpty ( building ) ; begin
34795: LD_INT 0
34797: PPUSH
// if not building then
34798: LD_VAR 0 1
34802: NOT
34803: IFFALSE 34807
// exit ;
34805: GO 34850
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34807: LD_ADDR_VAR 0 2
34811: PUSH
34812: LD_VAR 0 1
34816: PUSH
34817: LD_INT 22
34819: PUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 255
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 58
34836: PUSH
34837: EMPTY
34838: LIST
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PPUSH
34844: CALL_OW 69
34848: IN
34849: ST_TO_ADDR
// end ;
34850: LD_VAR 0 2
34854: RET
// export function IsNotFull ( building ) ; var places ; begin
34855: LD_INT 0
34857: PPUSH
34858: PPUSH
// if not building then
34859: LD_VAR 0 1
34863: NOT
34864: IFFALSE 34868
// exit ;
34866: GO 34896
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34868: LD_ADDR_VAR 0 2
34872: PUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 62
34883: PUSH
34884: EMPTY
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PPUSH
34891: CALL_OW 72
34895: ST_TO_ADDR
// end ;
34896: LD_VAR 0 2
34900: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34901: LD_INT 0
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
// tmp := [ ] ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: EMPTY
34913: ST_TO_ADDR
// list := [ ] ;
34914: LD_ADDR_VAR 0 5
34918: PUSH
34919: EMPTY
34920: ST_TO_ADDR
// for i = 16 to 25 do
34921: LD_ADDR_VAR 0 4
34925: PUSH
34926: DOUBLE
34927: LD_INT 16
34929: DEC
34930: ST_TO_ADDR
34931: LD_INT 25
34933: PUSH
34934: FOR_TO
34935: IFFALSE 35008
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_VAR 0 3
34946: PUSH
34947: LD_INT 22
34949: PUSH
34950: LD_VAR 0 1
34954: PPUSH
34955: CALL_OW 255
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 91
34966: PUSH
34967: LD_VAR 0 1
34971: PUSH
34972: LD_INT 6
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 30
34982: PUSH
34983: LD_VAR 0 4
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: PPUSH
35000: CALL_OW 69
35004: ADD
35005: ST_TO_ADDR
35006: GO 34934
35008: POP
35009: POP
// for i = 1 to tmp do
35010: LD_ADDR_VAR 0 4
35014: PUSH
35015: DOUBLE
35016: LD_INT 1
35018: DEC
35019: ST_TO_ADDR
35020: LD_VAR 0 3
35024: PUSH
35025: FOR_TO
35026: IFFALSE 35114
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: LD_VAR 0 5
35037: PUSH
35038: LD_VAR 0 3
35042: PUSH
35043: LD_VAR 0 4
35047: ARRAY
35048: PPUSH
35049: CALL_OW 266
35053: PUSH
35054: LD_VAR 0 3
35058: PUSH
35059: LD_VAR 0 4
35063: ARRAY
35064: PPUSH
35065: CALL_OW 250
35069: PUSH
35070: LD_VAR 0 3
35074: PUSH
35075: LD_VAR 0 4
35079: ARRAY
35080: PPUSH
35081: CALL_OW 251
35085: PUSH
35086: LD_VAR 0 3
35090: PUSH
35091: LD_VAR 0 4
35095: ARRAY
35096: PPUSH
35097: CALL_OW 254
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: ADD
35111: ST_TO_ADDR
35112: GO 35025
35114: POP
35115: POP
// result := list ;
35116: LD_ADDR_VAR 0 2
35120: PUSH
35121: LD_VAR 0 5
35125: ST_TO_ADDR
// end ;
35126: LD_VAR 0 2
35130: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35131: LD_INT 0
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
// if not factory then
35140: LD_VAR 0 1
35144: NOT
35145: IFFALSE 35149
// exit ;
35147: GO 35742
// if control = control_apeman then
35149: LD_VAR 0 4
35153: PUSH
35154: LD_INT 5
35156: EQUAL
35157: IFFALSE 35266
// begin tmp := UnitsInside ( factory ) ;
35159: LD_ADDR_VAR 0 8
35163: PUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 313
35173: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35174: LD_VAR 0 8
35178: PPUSH
35179: LD_INT 25
35181: PUSH
35182: LD_INT 12
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PPUSH
35189: CALL_OW 72
35193: NOT
35194: IFFALSE 35204
// control := control_manual ;
35196: LD_ADDR_VAR 0 4
35200: PUSH
35201: LD_INT 1
35203: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35204: LD_ADDR_VAR 0 8
35208: PUSH
35209: LD_VAR 0 1
35213: PPUSH
35214: CALL 34901 0 1
35218: ST_TO_ADDR
// if tmp then
35219: LD_VAR 0 8
35223: IFFALSE 35266
// begin for i in tmp do
35225: LD_ADDR_VAR 0 7
35229: PUSH
35230: LD_VAR 0 8
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35264
// if i [ 1 ] = b_ext_radio then
35238: LD_VAR 0 7
35242: PUSH
35243: LD_INT 1
35245: ARRAY
35246: PUSH
35247: LD_INT 22
35249: EQUAL
35250: IFFALSE 35262
// begin control := control_remote ;
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: LD_INT 2
35259: ST_TO_ADDR
// break ;
35260: GO 35264
// end ;
35262: GO 35235
35264: POP
35265: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35266: LD_VAR 0 1
35270: PPUSH
35271: LD_VAR 0 2
35275: PPUSH
35276: LD_VAR 0 3
35280: PPUSH
35281: LD_VAR 0 4
35285: PPUSH
35286: LD_VAR 0 5
35290: PPUSH
35291: CALL_OW 448
35295: IFFALSE 35330
// begin result := [ chassis , engine , control , weapon ] ;
35297: LD_ADDR_VAR 0 6
35301: PUSH
35302: LD_VAR 0 2
35306: PUSH
35307: LD_VAR 0 3
35311: PUSH
35312: LD_VAR 0 4
35316: PUSH
35317: LD_VAR 0 5
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
// exit ;
35328: GO 35742
// end ; _chassis := AvailableChassisList ( factory ) ;
35330: LD_ADDR_VAR 0 9
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 475
35344: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35345: LD_ADDR_VAR 0 11
35349: PUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 476
35359: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35360: LD_ADDR_VAR 0 12
35364: PUSH
35365: LD_VAR 0 1
35369: PPUSH
35370: CALL_OW 477
35374: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35375: LD_ADDR_VAR 0 10
35379: PUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 478
35389: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35390: LD_VAR 0 9
35394: NOT
35395: PUSH
35396: LD_VAR 0 11
35400: NOT
35401: OR
35402: PUSH
35403: LD_VAR 0 12
35407: NOT
35408: OR
35409: PUSH
35410: LD_VAR 0 10
35414: NOT
35415: OR
35416: IFFALSE 35451
// begin result := [ chassis , engine , control , weapon ] ;
35418: LD_ADDR_VAR 0 6
35422: PUSH
35423: LD_VAR 0 2
35427: PUSH
35428: LD_VAR 0 3
35432: PUSH
35433: LD_VAR 0 4
35437: PUSH
35438: LD_VAR 0 5
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// exit ;
35449: GO 35742
// end ; if not chassis in _chassis then
35451: LD_VAR 0 2
35455: PUSH
35456: LD_VAR 0 9
35460: IN
35461: NOT
35462: IFFALSE 35488
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35464: LD_ADDR_VAR 0 2
35468: PUSH
35469: LD_VAR 0 9
35473: PUSH
35474: LD_INT 1
35476: PPUSH
35477: LD_VAR 0 9
35481: PPUSH
35482: CALL_OW 12
35486: ARRAY
35487: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35488: LD_VAR 0 2
35492: PPUSH
35493: LD_VAR 0 3
35497: PPUSH
35498: CALL 35747 0 2
35502: NOT
35503: IFFALSE 35562
// repeat engine := _engine [ 1 ] ;
35505: LD_ADDR_VAR 0 3
35509: PUSH
35510: LD_VAR 0 11
35514: PUSH
35515: LD_INT 1
35517: ARRAY
35518: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35519: LD_ADDR_VAR 0 11
35523: PUSH
35524: LD_VAR 0 11
35528: PPUSH
35529: LD_INT 1
35531: PPUSH
35532: CALL_OW 3
35536: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35537: LD_VAR 0 2
35541: PPUSH
35542: LD_VAR 0 3
35546: PPUSH
35547: CALL 35747 0 2
35551: PUSH
35552: LD_VAR 0 11
35556: PUSH
35557: EMPTY
35558: EQUAL
35559: OR
35560: IFFALSE 35505
// if not control in _control then
35562: LD_VAR 0 4
35566: PUSH
35567: LD_VAR 0 12
35571: IN
35572: NOT
35573: IFFALSE 35599
// control := _control [ rand ( 1 , _control ) ] ;
35575: LD_ADDR_VAR 0 4
35579: PUSH
35580: LD_VAR 0 12
35584: PUSH
35585: LD_INT 1
35587: PPUSH
35588: LD_VAR 0 12
35592: PPUSH
35593: CALL_OW 12
35597: ARRAY
35598: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35599: LD_VAR 0 2
35603: PPUSH
35604: LD_VAR 0 5
35608: PPUSH
35609: CALL 35967 0 2
35613: NOT
35614: IFFALSE 35673
// repeat weapon := _weapon [ 1 ] ;
35616: LD_ADDR_VAR 0 5
35620: PUSH
35621: LD_VAR 0 10
35625: PUSH
35626: LD_INT 1
35628: ARRAY
35629: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35630: LD_ADDR_VAR 0 10
35634: PUSH
35635: LD_VAR 0 10
35639: PPUSH
35640: LD_INT 1
35642: PPUSH
35643: CALL_OW 3
35647: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35648: LD_VAR 0 2
35652: PPUSH
35653: LD_VAR 0 5
35657: PPUSH
35658: CALL 35967 0 2
35662: PUSH
35663: LD_VAR 0 10
35667: PUSH
35668: EMPTY
35669: EQUAL
35670: OR
35671: IFFALSE 35616
// result := [ ] ;
35673: LD_ADDR_VAR 0 6
35677: PUSH
35678: EMPTY
35679: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35680: LD_VAR 0 1
35684: PPUSH
35685: LD_VAR 0 2
35689: PPUSH
35690: LD_VAR 0 3
35694: PPUSH
35695: LD_VAR 0 4
35699: PPUSH
35700: LD_VAR 0 5
35704: PPUSH
35705: CALL_OW 448
35709: IFFALSE 35742
// result := [ chassis , engine , control , weapon ] ;
35711: LD_ADDR_VAR 0 6
35715: PUSH
35716: LD_VAR 0 2
35720: PUSH
35721: LD_VAR 0 3
35725: PUSH
35726: LD_VAR 0 4
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: ST_TO_ADDR
// end ;
35742: LD_VAR 0 6
35746: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35747: LD_INT 0
35749: PPUSH
// if not chassis or not engine then
35750: LD_VAR 0 1
35754: NOT
35755: PUSH
35756: LD_VAR 0 2
35760: NOT
35761: OR
35762: IFFALSE 35766
// exit ;
35764: GO 35962
// case engine of engine_solar :
35766: LD_VAR 0 2
35770: PUSH
35771: LD_INT 2
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35817
35779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 11
35787: PUSH
35788: LD_INT 12
35790: PUSH
35791: LD_INT 13
35793: PUSH
35794: LD_INT 14
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: ST_TO_ADDR
35815: GO 35946
35817: LD_INT 1
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35825
35823: GO 35887
35825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35826: LD_ADDR_VAR 0 3
35830: PUSH
35831: LD_INT 11
35833: PUSH
35834: LD_INT 12
35836: PUSH
35837: LD_INT 13
35839: PUSH
35840: LD_INT 14
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 4
35854: PUSH
35855: LD_INT 5
35857: PUSH
35858: LD_INT 21
35860: PUSH
35861: LD_INT 23
35863: PUSH
35864: LD_INT 22
35866: PUSH
35867: LD_INT 24
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
35885: GO 35946
35887: LD_INT 3
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35895
35893: GO 35945
35895: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35896: LD_ADDR_VAR 0 3
35900: PUSH
35901: LD_INT 13
35903: PUSH
35904: LD_INT 14
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 4
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 21
35921: PUSH
35922: LD_INT 22
35924: PUSH
35925: LD_INT 23
35927: PUSH
35928: LD_INT 24
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
35943: GO 35946
35945: POP
// result := ( chassis in result ) ;
35946: LD_ADDR_VAR 0 3
35950: PUSH
35951: LD_VAR 0 1
35955: PUSH
35956: LD_VAR 0 3
35960: IN
35961: ST_TO_ADDR
// end ;
35962: LD_VAR 0 3
35966: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35967: LD_INT 0
35969: PPUSH
// if not chassis or not weapon then
35970: LD_VAR 0 1
35974: NOT
35975: PUSH
35976: LD_VAR 0 2
35980: NOT
35981: OR
35982: IFFALSE 35986
// exit ;
35984: GO 37046
// case weapon of us_machine_gun :
35986: LD_VAR 0 2
35990: PUSH
35991: LD_INT 2
35993: DOUBLE
35994: EQUAL
35995: IFTRUE 35999
35997: GO 36029
35999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 3
36013: PUSH
36014: LD_INT 4
36016: PUSH
36017: LD_INT 5
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: ST_TO_ADDR
36027: GO 37030
36029: LD_INT 3
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36067
36037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: LD_INT 3
36051: PUSH
36052: LD_INT 4
36054: PUSH
36055: LD_INT 5
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
36065: GO 37030
36067: LD_INT 11
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36105
36075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: LD_INT 4
36092: PUSH
36093: LD_INT 5
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 37030
36105: LD_INT 4
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36139
36113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 3
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: LD_INT 5
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
36137: GO 37030
36139: LD_INT 5
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36173
36147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: LD_INT 4
36161: PUSH
36162: LD_INT 5
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
36171: GO 37030
36173: LD_INT 9
36175: DOUBLE
36176: EQUAL
36177: IFTRUE 36181
36179: GO 36207
36181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36182: LD_ADDR_VAR 0 3
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 3
36192: PUSH
36193: LD_INT 4
36195: PUSH
36196: LD_INT 5
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
36205: GO 37030
36207: LD_INT 7
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36215
36213: GO 36241
36215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: LD_INT 4
36229: PUSH
36230: LD_INT 5
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
36239: GO 37030
36241: LD_INT 12
36243: DOUBLE
36244: EQUAL
36245: IFTRUE 36249
36247: GO 36275
36249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36250: LD_ADDR_VAR 0 3
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 4
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
36273: GO 37030
36275: LD_INT 13
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36283
36281: GO 36309
36283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 3
36294: PUSH
36295: LD_INT 4
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: ST_TO_ADDR
36307: GO 37030
36309: LD_INT 14
36311: DOUBLE
36312: EQUAL
36313: IFTRUE 36317
36315: GO 36335
36317: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36318: LD_ADDR_VAR 0 3
36322: PUSH
36323: LD_INT 4
36325: PUSH
36326: LD_INT 5
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: ST_TO_ADDR
36333: GO 37030
36335: LD_INT 6
36337: DOUBLE
36338: EQUAL
36339: IFTRUE 36343
36341: GO 36361
36343: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36344: LD_ADDR_VAR 0 3
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: LD_INT 5
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: ST_TO_ADDR
36359: GO 37030
36361: LD_INT 10
36363: DOUBLE
36364: EQUAL
36365: IFTRUE 36369
36367: GO 36387
36369: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36370: LD_ADDR_VAR 0 3
36374: PUSH
36375: LD_INT 4
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: ST_TO_ADDR
36385: GO 37030
36387: LD_INT 22
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36395
36393: GO 36421
36395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 11
36403: PUSH
36404: LD_INT 12
36406: PUSH
36407: LD_INT 13
36409: PUSH
36410: LD_INT 14
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
36419: GO 37030
36421: LD_INT 23
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36429
36427: GO 36455
36429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_INT 11
36437: PUSH
36438: LD_INT 12
36440: PUSH
36441: LD_INT 13
36443: PUSH
36444: LD_INT 14
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
36453: GO 37030
36455: LD_INT 24
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36489
36463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_INT 11
36471: PUSH
36472: LD_INT 12
36474: PUSH
36475: LD_INT 13
36477: PUSH
36478: LD_INT 14
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
36487: GO 37030
36489: LD_INT 30
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36523
36497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36498: LD_ADDR_VAR 0 3
36502: PUSH
36503: LD_INT 11
36505: PUSH
36506: LD_INT 12
36508: PUSH
36509: LD_INT 13
36511: PUSH
36512: LD_INT 14
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
36521: GO 37030
36523: LD_INT 25
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36531
36529: GO 36549
36531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: LD_INT 13
36539: PUSH
36540: LD_INT 14
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: ST_TO_ADDR
36547: GO 37030
36549: LD_INT 27
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36557
36555: GO 36575
36557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36558: LD_ADDR_VAR 0 3
36562: PUSH
36563: LD_INT 13
36565: PUSH
36566: LD_INT 14
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: ST_TO_ADDR
36573: GO 37030
36575: LD_INT 92
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36583
36581: GO 36609
36583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_INT 11
36591: PUSH
36592: LD_INT 12
36594: PUSH
36595: LD_INT 13
36597: PUSH
36598: LD_INT 14
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
36607: GO 37030
36609: LD_INT 28
36611: DOUBLE
36612: EQUAL
36613: IFTRUE 36617
36615: GO 36635
36617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36618: LD_ADDR_VAR 0 3
36622: PUSH
36623: LD_INT 13
36625: PUSH
36626: LD_INT 14
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: ST_TO_ADDR
36633: GO 37030
36635: LD_INT 29
36637: DOUBLE
36638: EQUAL
36639: IFTRUE 36643
36641: GO 36661
36643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36644: LD_ADDR_VAR 0 3
36648: PUSH
36649: LD_INT 13
36651: PUSH
36652: LD_INT 14
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: ST_TO_ADDR
36659: GO 37030
36661: LD_INT 31
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 36687
36669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36670: LD_ADDR_VAR 0 3
36674: PUSH
36675: LD_INT 13
36677: PUSH
36678: LD_INT 14
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 37030
36687: LD_INT 26
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36713
36695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 13
36703: PUSH
36704: LD_INT 14
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 37030
36713: LD_INT 42
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36747
36721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_INT 21
36729: PUSH
36730: LD_INT 22
36732: PUSH
36733: LD_INT 23
36735: PUSH
36736: LD_INT 24
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 37030
36747: LD_INT 43
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36781
36755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 21
36763: PUSH
36764: LD_INT 22
36766: PUSH
36767: LD_INT 23
36769: PUSH
36770: LD_INT 24
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: ST_TO_ADDR
36779: GO 37030
36781: LD_INT 44
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36789
36787: GO 36815
36789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 21
36797: PUSH
36798: LD_INT 22
36800: PUSH
36801: LD_INT 23
36803: PUSH
36804: LD_INT 24
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: ST_TO_ADDR
36813: GO 37030
36815: LD_INT 45
36817: DOUBLE
36818: EQUAL
36819: IFTRUE 36823
36821: GO 36849
36823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36824: LD_ADDR_VAR 0 3
36828: PUSH
36829: LD_INT 21
36831: PUSH
36832: LD_INT 22
36834: PUSH
36835: LD_INT 23
36837: PUSH
36838: LD_INT 24
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: ST_TO_ADDR
36847: GO 37030
36849: LD_INT 49
36851: DOUBLE
36852: EQUAL
36853: IFTRUE 36857
36855: GO 36883
36857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_INT 21
36865: PUSH
36866: LD_INT 22
36868: PUSH
36869: LD_INT 23
36871: PUSH
36872: LD_INT 24
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
36881: GO 37030
36883: LD_INT 51
36885: DOUBLE
36886: EQUAL
36887: IFTRUE 36891
36889: GO 36917
36891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36892: LD_ADDR_VAR 0 3
36896: PUSH
36897: LD_INT 21
36899: PUSH
36900: LD_INT 22
36902: PUSH
36903: LD_INT 23
36905: PUSH
36906: LD_INT 24
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
36915: GO 37030
36917: LD_INT 52
36919: DOUBLE
36920: EQUAL
36921: IFTRUE 36925
36923: GO 36951
36925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36926: LD_ADDR_VAR 0 3
36930: PUSH
36931: LD_INT 21
36933: PUSH
36934: LD_INT 22
36936: PUSH
36937: LD_INT 23
36939: PUSH
36940: LD_INT 24
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
36949: GO 37030
36951: LD_INT 53
36953: DOUBLE
36954: EQUAL
36955: IFTRUE 36959
36957: GO 36977
36959: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36960: LD_ADDR_VAR 0 3
36964: PUSH
36965: LD_INT 23
36967: PUSH
36968: LD_INT 24
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: ST_TO_ADDR
36975: GO 37030
36977: LD_INT 46
36979: DOUBLE
36980: EQUAL
36981: IFTRUE 36985
36983: GO 37003
36985: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36986: LD_ADDR_VAR 0 3
36990: PUSH
36991: LD_INT 23
36993: PUSH
36994: LD_INT 24
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: ST_TO_ADDR
37001: GO 37030
37003: LD_INT 47
37005: DOUBLE
37006: EQUAL
37007: IFTRUE 37011
37009: GO 37029
37011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_INT 23
37019: PUSH
37020: LD_INT 24
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: ST_TO_ADDR
37027: GO 37030
37029: POP
// result := ( chassis in result ) ;
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: LD_VAR 0 3
37044: IN
37045: ST_TO_ADDR
// end ;
37046: LD_VAR 0 3
37050: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37051: LD_INT 0
37053: PPUSH
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
// result := array ;
37060: LD_ADDR_VAR 0 5
37064: PUSH
37065: LD_VAR 0 1
37069: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37070: LD_VAR 0 1
37074: NOT
37075: PUSH
37076: LD_VAR 0 2
37080: NOT
37081: OR
37082: PUSH
37083: LD_VAR 0 3
37087: NOT
37088: OR
37089: PUSH
37090: LD_VAR 0 2
37094: PUSH
37095: LD_VAR 0 1
37099: GREATER
37100: OR
37101: PUSH
37102: LD_VAR 0 3
37106: PUSH
37107: LD_VAR 0 1
37111: GREATER
37112: OR
37113: IFFALSE 37117
// exit ;
37115: GO 37413
// if direction then
37117: LD_VAR 0 4
37121: IFFALSE 37185
// begin d := 1 ;
37123: LD_ADDR_VAR 0 9
37127: PUSH
37128: LD_INT 1
37130: ST_TO_ADDR
// if i_from > i_to then
37131: LD_VAR 0 2
37135: PUSH
37136: LD_VAR 0 3
37140: GREATER
37141: IFFALSE 37167
// length := ( array - i_from ) + i_to else
37143: LD_ADDR_VAR 0 11
37147: PUSH
37148: LD_VAR 0 1
37152: PUSH
37153: LD_VAR 0 2
37157: MINUS
37158: PUSH
37159: LD_VAR 0 3
37163: PLUS
37164: ST_TO_ADDR
37165: GO 37183
// length := i_to - i_from ;
37167: LD_ADDR_VAR 0 11
37171: PUSH
37172: LD_VAR 0 3
37176: PUSH
37177: LD_VAR 0 2
37181: MINUS
37182: ST_TO_ADDR
// end else
37183: GO 37246
// begin d := - 1 ;
37185: LD_ADDR_VAR 0 9
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: ST_TO_ADDR
// if i_from > i_to then
37194: LD_VAR 0 2
37198: PUSH
37199: LD_VAR 0 3
37203: GREATER
37204: IFFALSE 37224
// length := i_from - i_to else
37206: LD_ADDR_VAR 0 11
37210: PUSH
37211: LD_VAR 0 2
37215: PUSH
37216: LD_VAR 0 3
37220: MINUS
37221: ST_TO_ADDR
37222: GO 37246
// length := ( array - i_to ) + i_from ;
37224: LD_ADDR_VAR 0 11
37228: PUSH
37229: LD_VAR 0 1
37233: PUSH
37234: LD_VAR 0 3
37238: MINUS
37239: PUSH
37240: LD_VAR 0 2
37244: PLUS
37245: ST_TO_ADDR
// end ; if not length then
37246: LD_VAR 0 11
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 37413
// tmp := array ;
37255: LD_ADDR_VAR 0 10
37259: PUSH
37260: LD_VAR 0 1
37264: ST_TO_ADDR
// for i = 1 to length do
37265: LD_ADDR_VAR 0 6
37269: PUSH
37270: DOUBLE
37271: LD_INT 1
37273: DEC
37274: ST_TO_ADDR
37275: LD_VAR 0 11
37279: PUSH
37280: FOR_TO
37281: IFFALSE 37401
// begin for j = 1 to array do
37283: LD_ADDR_VAR 0 7
37287: PUSH
37288: DOUBLE
37289: LD_INT 1
37291: DEC
37292: ST_TO_ADDR
37293: LD_VAR 0 1
37297: PUSH
37298: FOR_TO
37299: IFFALSE 37387
// begin k := j + d ;
37301: LD_ADDR_VAR 0 8
37305: PUSH
37306: LD_VAR 0 7
37310: PUSH
37311: LD_VAR 0 9
37315: PLUS
37316: ST_TO_ADDR
// if k > array then
37317: LD_VAR 0 8
37321: PUSH
37322: LD_VAR 0 1
37326: GREATER
37327: IFFALSE 37337
// k := 1 ;
37329: LD_ADDR_VAR 0 8
37333: PUSH
37334: LD_INT 1
37336: ST_TO_ADDR
// if not k then
37337: LD_VAR 0 8
37341: NOT
37342: IFFALSE 37354
// k := array ;
37344: LD_ADDR_VAR 0 8
37348: PUSH
37349: LD_VAR 0 1
37353: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37354: LD_ADDR_VAR 0 10
37358: PUSH
37359: LD_VAR 0 10
37363: PPUSH
37364: LD_VAR 0 8
37368: PPUSH
37369: LD_VAR 0 1
37373: PUSH
37374: LD_VAR 0 7
37378: ARRAY
37379: PPUSH
37380: CALL_OW 1
37384: ST_TO_ADDR
// end ;
37385: GO 37298
37387: POP
37388: POP
// array := tmp ;
37389: LD_ADDR_VAR 0 1
37393: PUSH
37394: LD_VAR 0 10
37398: ST_TO_ADDR
// end ;
37399: GO 37280
37401: POP
37402: POP
// result := array ;
37403: LD_ADDR_VAR 0 5
37407: PUSH
37408: LD_VAR 0 1
37412: ST_TO_ADDR
// end ;
37413: LD_VAR 0 5
37417: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37418: LD_INT 0
37420: PPUSH
37421: PPUSH
// result := 0 ;
37422: LD_ADDR_VAR 0 3
37426: PUSH
37427: LD_INT 0
37429: ST_TO_ADDR
// if not array or not value in array then
37430: LD_VAR 0 1
37434: NOT
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_VAR 0 1
37445: IN
37446: NOT
37447: OR
37448: IFFALSE 37452
// exit ;
37450: GO 37506
// for i = 1 to array do
37452: LD_ADDR_VAR 0 4
37456: PUSH
37457: DOUBLE
37458: LD_INT 1
37460: DEC
37461: ST_TO_ADDR
37462: LD_VAR 0 1
37466: PUSH
37467: FOR_TO
37468: IFFALSE 37504
// if value = array [ i ] then
37470: LD_VAR 0 2
37474: PUSH
37475: LD_VAR 0 1
37479: PUSH
37480: LD_VAR 0 4
37484: ARRAY
37485: EQUAL
37486: IFFALSE 37502
// begin result := i ;
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: LD_VAR 0 4
37497: ST_TO_ADDR
// exit ;
37498: POP
37499: POP
37500: GO 37506
// end ;
37502: GO 37467
37504: POP
37505: POP
// end ;
37506: LD_VAR 0 3
37510: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37511: LD_INT 0
37513: PPUSH
// vc_chassis := chassis ;
37514: LD_ADDR_OWVAR 37
37518: PUSH
37519: LD_VAR 0 1
37523: ST_TO_ADDR
// vc_engine := engine ;
37524: LD_ADDR_OWVAR 39
37528: PUSH
37529: LD_VAR 0 2
37533: ST_TO_ADDR
// vc_control := control ;
37534: LD_ADDR_OWVAR 38
37538: PUSH
37539: LD_VAR 0 3
37543: ST_TO_ADDR
// vc_weapon := weapon ;
37544: LD_ADDR_OWVAR 40
37548: PUSH
37549: LD_VAR 0 4
37553: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37554: LD_ADDR_OWVAR 41
37558: PUSH
37559: LD_VAR 0 5
37563: ST_TO_ADDR
// end ;
37564: LD_VAR 0 6
37568: RET
// export function WantPlant ( unit ) ; var task ; begin
37569: LD_INT 0
37571: PPUSH
37572: PPUSH
// result := false ;
37573: LD_ADDR_VAR 0 2
37577: PUSH
37578: LD_INT 0
37580: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: CALL_OW 437
37595: ST_TO_ADDR
// if task then
37596: LD_VAR 0 3
37600: IFFALSE 37628
// if task [ 1 ] [ 1 ] = p then
37602: LD_VAR 0 3
37606: PUSH
37607: LD_INT 1
37609: ARRAY
37610: PUSH
37611: LD_INT 1
37613: ARRAY
37614: PUSH
37615: LD_STRING p
37617: EQUAL
37618: IFFALSE 37628
// result := true ;
37620: LD_ADDR_VAR 0 2
37624: PUSH
37625: LD_INT 1
37627: ST_TO_ADDR
// end ;
37628: LD_VAR 0 2
37632: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
// if pos < 1 then
37639: LD_VAR 0 2
37643: PUSH
37644: LD_INT 1
37646: LESS
37647: IFFALSE 37651
// exit ;
37649: GO 37954
// if pos = 1 then
37651: LD_VAR 0 2
37655: PUSH
37656: LD_INT 1
37658: EQUAL
37659: IFFALSE 37692
// result := Replace ( arr , pos [ 1 ] , value ) else
37661: LD_ADDR_VAR 0 4
37665: PUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: LD_VAR 0 2
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
37690: GO 37954
// begin tmp := arr ;
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_VAR 0 1
37701: ST_TO_ADDR
// s_arr := [ tmp ] ;
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_VAR 0 6
37711: PUSH
37712: EMPTY
37713: LIST
37714: ST_TO_ADDR
// for i = 1 to pos - 1 do
37715: LD_ADDR_VAR 0 5
37719: PUSH
37720: DOUBLE
37721: LD_INT 1
37723: DEC
37724: ST_TO_ADDR
37725: LD_VAR 0 2
37729: PUSH
37730: LD_INT 1
37732: MINUS
37733: PUSH
37734: FOR_TO
37735: IFFALSE 37780
// begin tmp := tmp [ pos [ i ] ] ;
37737: LD_ADDR_VAR 0 6
37741: PUSH
37742: LD_VAR 0 6
37746: PUSH
37747: LD_VAR 0 2
37751: PUSH
37752: LD_VAR 0 5
37756: ARRAY
37757: ARRAY
37758: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37759: LD_ADDR_VAR 0 7
37763: PUSH
37764: LD_VAR 0 7
37768: PUSH
37769: LD_VAR 0 6
37773: PUSH
37774: EMPTY
37775: LIST
37776: ADD
37777: ST_TO_ADDR
// end ;
37778: GO 37734
37780: POP
37781: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37782: LD_ADDR_VAR 0 6
37786: PUSH
37787: LD_VAR 0 6
37791: PPUSH
37792: LD_VAR 0 2
37796: PUSH
37797: LD_VAR 0 2
37801: ARRAY
37802: PPUSH
37803: LD_VAR 0 3
37807: PPUSH
37808: CALL_OW 1
37812: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37813: LD_ADDR_VAR 0 7
37817: PUSH
37818: LD_VAR 0 7
37822: PPUSH
37823: LD_VAR 0 7
37827: PPUSH
37828: LD_VAR 0 6
37832: PPUSH
37833: CALL_OW 1
37837: ST_TO_ADDR
// for i = s_arr downto 2 do
37838: LD_ADDR_VAR 0 5
37842: PUSH
37843: DOUBLE
37844: LD_VAR 0 7
37848: INC
37849: ST_TO_ADDR
37850: LD_INT 2
37852: PUSH
37853: FOR_DOWNTO
37854: IFFALSE 37938
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37856: LD_ADDR_VAR 0 6
37860: PUSH
37861: LD_VAR 0 7
37865: PUSH
37866: LD_VAR 0 5
37870: PUSH
37871: LD_INT 1
37873: MINUS
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 2
37880: PUSH
37881: LD_VAR 0 5
37885: PUSH
37886: LD_INT 1
37888: MINUS
37889: ARRAY
37890: PPUSH
37891: LD_VAR 0 7
37895: PUSH
37896: LD_VAR 0 5
37900: ARRAY
37901: PPUSH
37902: CALL_OW 1
37906: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37907: LD_ADDR_VAR 0 7
37911: PUSH
37912: LD_VAR 0 7
37916: PPUSH
37917: LD_VAR 0 5
37921: PUSH
37922: LD_INT 1
37924: MINUS
37925: PPUSH
37926: LD_VAR 0 6
37930: PPUSH
37931: CALL_OW 1
37935: ST_TO_ADDR
// end ;
37936: GO 37853
37938: POP
37939: POP
// result := s_arr [ 1 ] ;
37940: LD_ADDR_VAR 0 4
37944: PUSH
37945: LD_VAR 0 7
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: ST_TO_ADDR
// end ; end ;
37954: LD_VAR 0 4
37958: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37959: LD_INT 0
37961: PPUSH
37962: PPUSH
// if not list then
37963: LD_VAR 0 1
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38063
// i := list [ pos1 ] ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 1
37981: PUSH
37982: LD_VAR 0 2
37986: ARRAY
37987: ST_TO_ADDR
// if not i then
37988: LD_VAR 0 5
37992: NOT
37993: IFFALSE 37997
// exit ;
37995: GO 38063
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37997: LD_ADDR_VAR 0 1
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: LD_VAR 0 2
38011: PPUSH
38012: LD_VAR 0 1
38016: PUSH
38017: LD_VAR 0 3
38021: ARRAY
38022: PPUSH
38023: CALL_OW 1
38027: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38028: LD_ADDR_VAR 0 1
38032: PUSH
38033: LD_VAR 0 1
38037: PPUSH
38038: LD_VAR 0 3
38042: PPUSH
38043: LD_VAR 0 5
38047: PPUSH
38048: CALL_OW 1
38052: ST_TO_ADDR
// result := list ;
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 1
38062: ST_TO_ADDR
// end ;
38063: LD_VAR 0 4
38067: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38068: LD_INT 0
38070: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 250
38085: PPUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 251
38095: PPUSH
38096: LD_VAR 0 2
38100: PPUSH
38101: LD_VAR 0 3
38105: PPUSH
38106: LD_VAR 0 4
38110: PPUSH
38111: CALL 38489 0 5
38115: ST_TO_ADDR
// end ;
38116: LD_VAR 0 5
38120: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38121: LD_INT 0
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
// if not list or not unit then
38127: LD_VAR 0 2
38131: NOT
38132: PUSH
38133: LD_VAR 0 1
38137: NOT
38138: OR
38139: IFFALSE 38143
// exit ;
38141: GO 38484
// result := [ ] ;
38143: LD_ADDR_VAR 0 5
38147: PUSH
38148: EMPTY
38149: ST_TO_ADDR
// for i in list do
38150: LD_ADDR_VAR 0 6
38154: PUSH
38155: LD_VAR 0 2
38159: PUSH
38160: FOR_IN
38161: IFFALSE 38379
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38163: LD_ADDR_VAR 0 8
38167: PUSH
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 6
38177: PUSH
38178: LD_INT 1
38180: ARRAY
38181: PPUSH
38182: LD_VAR 0 6
38186: PUSH
38187: LD_INT 2
38189: ARRAY
38190: PPUSH
38191: CALL_OW 297
38195: ST_TO_ADDR
// if not Count ( result ) then
38196: LD_VAR 0 5
38200: PPUSH
38201: CALL 34773 0 1
38205: NOT
38206: IFFALSE 38239
// begin result := Join ( result , [ i , tmp ] ) ;
38208: LD_ADDR_VAR 0 5
38212: PUSH
38213: LD_VAR 0 5
38217: PPUSH
38218: LD_VAR 0 6
38222: PUSH
38223: LD_VAR 0 8
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PPUSH
38232: CALL 70382 0 2
38236: ST_TO_ADDR
// continue ;
38237: GO 38160
// end ; if result [ result ] [ 2 ] <= tmp then
38239: LD_VAR 0 5
38243: PUSH
38244: LD_VAR 0 5
38248: ARRAY
38249: PUSH
38250: LD_INT 2
38252: ARRAY
38253: PUSH
38254: LD_VAR 0 8
38258: LESSEQUAL
38259: IFFALSE 38292
// result := Join ( result , [ i , tmp ] ) else
38261: LD_ADDR_VAR 0 5
38265: PUSH
38266: LD_VAR 0 5
38270: PPUSH
38271: LD_VAR 0 6
38275: PUSH
38276: LD_VAR 0 8
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PPUSH
38285: CALL 70382 0 2
38289: ST_TO_ADDR
38290: GO 38377
// begin for j := 1 to Count ( result ) do
38292: LD_ADDR_VAR 0 7
38296: PUSH
38297: DOUBLE
38298: LD_INT 1
38300: DEC
38301: ST_TO_ADDR
38302: LD_VAR 0 5
38306: PPUSH
38307: CALL 34773 0 1
38311: PUSH
38312: FOR_TO
38313: IFFALSE 38375
// begin if tmp < result [ j ] [ 2 ] then
38315: LD_VAR 0 8
38319: PUSH
38320: LD_VAR 0 5
38324: PUSH
38325: LD_VAR 0 7
38329: ARRAY
38330: PUSH
38331: LD_INT 2
38333: ARRAY
38334: LESS
38335: IFFALSE 38373
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_VAR 0 5
38346: PPUSH
38347: LD_VAR 0 7
38351: PPUSH
38352: LD_VAR 0 6
38356: PUSH
38357: LD_VAR 0 8
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PPUSH
38366: CALL_OW 2
38370: ST_TO_ADDR
// break ;
38371: GO 38375
// end ; end ;
38373: GO 38312
38375: POP
38376: POP
// end ; end ;
38377: GO 38160
38379: POP
38380: POP
// if result and not asc then
38381: LD_VAR 0 5
38385: PUSH
38386: LD_VAR 0 3
38390: NOT
38391: AND
38392: IFFALSE 38409
// result := ReverseArray ( result ) ;
38394: LD_ADDR_VAR 0 5
38398: PUSH
38399: LD_VAR 0 5
38403: PPUSH
38404: CALL 65649 0 1
38408: ST_TO_ADDR
// tmp := [ ] ;
38409: LD_ADDR_VAR 0 8
38413: PUSH
38414: EMPTY
38415: ST_TO_ADDR
// if mode then
38416: LD_VAR 0 4
38420: IFFALSE 38484
// begin for i := 1 to result do
38422: LD_ADDR_VAR 0 6
38426: PUSH
38427: DOUBLE
38428: LD_INT 1
38430: DEC
38431: ST_TO_ADDR
38432: LD_VAR 0 5
38436: PUSH
38437: FOR_TO
38438: IFFALSE 38472
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38440: LD_ADDR_VAR 0 8
38444: PUSH
38445: LD_VAR 0 8
38449: PPUSH
38450: LD_VAR 0 5
38454: PUSH
38455: LD_VAR 0 6
38459: ARRAY
38460: PUSH
38461: LD_INT 1
38463: ARRAY
38464: PPUSH
38465: CALL 70382 0 2
38469: ST_TO_ADDR
38470: GO 38437
38472: POP
38473: POP
// result := tmp ;
38474: LD_ADDR_VAR 0 5
38478: PUSH
38479: LD_VAR 0 8
38483: ST_TO_ADDR
// end ; end ;
38484: LD_VAR 0 5
38488: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38489: LD_INT 0
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
// if not list then
38495: LD_VAR 0 3
38499: NOT
38500: IFFALSE 38504
// exit ;
38502: GO 38892
// result := [ ] ;
38504: LD_ADDR_VAR 0 6
38508: PUSH
38509: EMPTY
38510: ST_TO_ADDR
// for i in list do
38511: LD_ADDR_VAR 0 7
38515: PUSH
38516: LD_VAR 0 3
38520: PUSH
38521: FOR_IN
38522: IFFALSE 38724
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38524: LD_ADDR_VAR 0 9
38528: PUSH
38529: LD_VAR 0 7
38533: PPUSH
38534: LD_VAR 0 1
38538: PPUSH
38539: LD_VAR 0 2
38543: PPUSH
38544: CALL_OW 297
38548: ST_TO_ADDR
// if not result then
38549: LD_VAR 0 6
38553: NOT
38554: IFFALSE 38580
// result := [ [ i , tmp ] ] else
38556: LD_ADDR_VAR 0 6
38560: PUSH
38561: LD_VAR 0 7
38565: PUSH
38566: LD_VAR 0 9
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: ST_TO_ADDR
38578: GO 38722
// begin if result [ result ] [ 2 ] <= tmp then
38580: LD_VAR 0 6
38584: PUSH
38585: LD_VAR 0 6
38589: ARRAY
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: PUSH
38595: LD_VAR 0 9
38599: LESSEQUAL
38600: IFFALSE 38642
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38602: LD_ADDR_VAR 0 6
38606: PUSH
38607: LD_VAR 0 6
38611: PPUSH
38612: LD_VAR 0 6
38616: PUSH
38617: LD_INT 1
38619: PLUS
38620: PPUSH
38621: LD_VAR 0 7
38625: PUSH
38626: LD_VAR 0 9
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PPUSH
38635: CALL_OW 2
38639: ST_TO_ADDR
38640: GO 38722
// for j := 1 to result do
38642: LD_ADDR_VAR 0 8
38646: PUSH
38647: DOUBLE
38648: LD_INT 1
38650: DEC
38651: ST_TO_ADDR
38652: LD_VAR 0 6
38656: PUSH
38657: FOR_TO
38658: IFFALSE 38720
// begin if tmp < result [ j ] [ 2 ] then
38660: LD_VAR 0 9
38664: PUSH
38665: LD_VAR 0 6
38669: PUSH
38670: LD_VAR 0 8
38674: ARRAY
38675: PUSH
38676: LD_INT 2
38678: ARRAY
38679: LESS
38680: IFFALSE 38718
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38682: LD_ADDR_VAR 0 6
38686: PUSH
38687: LD_VAR 0 6
38691: PPUSH
38692: LD_VAR 0 8
38696: PPUSH
38697: LD_VAR 0 7
38701: PUSH
38702: LD_VAR 0 9
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PPUSH
38711: CALL_OW 2
38715: ST_TO_ADDR
// break ;
38716: GO 38720
// end ; end ;
38718: GO 38657
38720: POP
38721: POP
// end ; end ;
38722: GO 38521
38724: POP
38725: POP
// if result and not asc then
38726: LD_VAR 0 6
38730: PUSH
38731: LD_VAR 0 4
38735: NOT
38736: AND
38737: IFFALSE 38812
// begin tmp := result ;
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: LD_VAR 0 6
38748: ST_TO_ADDR
// for i = tmp downto 1 do
38749: LD_ADDR_VAR 0 7
38753: PUSH
38754: DOUBLE
38755: LD_VAR 0 9
38759: INC
38760: ST_TO_ADDR
38761: LD_INT 1
38763: PUSH
38764: FOR_DOWNTO
38765: IFFALSE 38810
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38767: LD_ADDR_VAR 0 6
38771: PUSH
38772: LD_VAR 0 6
38776: PPUSH
38777: LD_VAR 0 9
38781: PUSH
38782: LD_VAR 0 7
38786: MINUS
38787: PUSH
38788: LD_INT 1
38790: PLUS
38791: PPUSH
38792: LD_VAR 0 9
38796: PUSH
38797: LD_VAR 0 7
38801: ARRAY
38802: PPUSH
38803: CALL_OW 1
38807: ST_TO_ADDR
38808: GO 38764
38810: POP
38811: POP
// end ; tmp := [ ] ;
38812: LD_ADDR_VAR 0 9
38816: PUSH
38817: EMPTY
38818: ST_TO_ADDR
// if mode then
38819: LD_VAR 0 5
38823: IFFALSE 38892
// begin for i = 1 to result do
38825: LD_ADDR_VAR 0 7
38829: PUSH
38830: DOUBLE
38831: LD_INT 1
38833: DEC
38834: ST_TO_ADDR
38835: LD_VAR 0 6
38839: PUSH
38840: FOR_TO
38841: IFFALSE 38880
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38843: LD_ADDR_VAR 0 9
38847: PUSH
38848: LD_VAR 0 9
38852: PPUSH
38853: LD_VAR 0 7
38857: PPUSH
38858: LD_VAR 0 6
38862: PUSH
38863: LD_VAR 0 7
38867: ARRAY
38868: PUSH
38869: LD_INT 1
38871: ARRAY
38872: PPUSH
38873: CALL_OW 1
38877: ST_TO_ADDR
38878: GO 38840
38880: POP
38881: POP
// result := tmp ;
38882: LD_ADDR_VAR 0 6
38886: PUSH
38887: LD_VAR 0 9
38891: ST_TO_ADDR
// end ; end ;
38892: LD_VAR 0 6
38896: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: ST_TO_ADDR
// if not x or not y then
38927: LD_VAR 0 2
38931: NOT
38932: PUSH
38933: LD_VAR 0 3
38937: NOT
38938: OR
38939: IFFALSE 38943
// exit ;
38941: GO 40593
// if not range then
38943: LD_VAR 0 4
38947: NOT
38948: IFFALSE 38958
// range := 10 ;
38950: LD_ADDR_VAR 0 4
38954: PUSH
38955: LD_INT 10
38957: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38958: LD_ADDR_VAR 0 8
38962: PUSH
38963: LD_INT 81
38965: PUSH
38966: LD_VAR 0 1
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 92
38977: PUSH
38978: LD_VAR 0 2
38982: PUSH
38983: LD_VAR 0 3
38987: PUSH
38988: LD_VAR 0 4
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: LD_INT 21
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 69
39025: ST_TO_ADDR
// if not tmp then
39026: LD_VAR 0 8
39030: NOT
39031: IFFALSE 39035
// exit ;
39033: GO 40593
// for i in tmp do
39035: LD_ADDR_VAR 0 6
39039: PUSH
39040: LD_VAR 0 8
39044: PUSH
39045: FOR_IN
39046: IFFALSE 40568
// begin points := [ 0 , 0 , 0 ] ;
39048: LD_ADDR_VAR 0 9
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// bpoints := 1 ;
39067: LD_ADDR_VAR 0 10
39071: PUSH
39072: LD_INT 1
39074: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39075: LD_VAR 0 6
39079: PPUSH
39080: CALL_OW 247
39084: PUSH
39085: LD_INT 1
39087: DOUBLE
39088: EQUAL
39089: IFTRUE 39093
39091: GO 39671
39093: POP
// begin if GetClass ( i ) = 1 then
39094: LD_VAR 0 6
39098: PPUSH
39099: CALL_OW 257
39103: PUSH
39104: LD_INT 1
39106: EQUAL
39107: IFFALSE 39128
// points := [ 10 , 5 , 3 ] ;
39109: LD_ADDR_VAR 0 9
39113: PUSH
39114: LD_INT 10
39116: PUSH
39117: LD_INT 5
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39128: LD_VAR 0 6
39132: PPUSH
39133: CALL_OW 257
39137: PUSH
39138: LD_INT 2
39140: PUSH
39141: LD_INT 3
39143: PUSH
39144: LD_INT 4
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: IN
39152: IFFALSE 39173
// points := [ 3 , 2 , 1 ] ;
39154: LD_ADDR_VAR 0 9
39158: PUSH
39159: LD_INT 3
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39173: LD_VAR 0 6
39177: PPUSH
39178: CALL_OW 257
39182: PUSH
39183: LD_INT 5
39185: EQUAL
39186: IFFALSE 39207
// points := [ 130 , 5 , 2 ] ;
39188: LD_ADDR_VAR 0 9
39192: PUSH
39193: LD_INT 130
39195: PUSH
39196: LD_INT 5
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39207: LD_VAR 0 6
39211: PPUSH
39212: CALL_OW 257
39216: PUSH
39217: LD_INT 8
39219: EQUAL
39220: IFFALSE 39241
// points := [ 35 , 35 , 30 ] ;
39222: LD_ADDR_VAR 0 9
39226: PUSH
39227: LD_INT 35
39229: PUSH
39230: LD_INT 35
39232: PUSH
39233: LD_INT 30
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39241: LD_VAR 0 6
39245: PPUSH
39246: CALL_OW 257
39250: PUSH
39251: LD_INT 9
39253: EQUAL
39254: IFFALSE 39275
// points := [ 20 , 55 , 40 ] ;
39256: LD_ADDR_VAR 0 9
39260: PUSH
39261: LD_INT 20
39263: PUSH
39264: LD_INT 55
39266: PUSH
39267: LD_INT 40
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39275: LD_VAR 0 6
39279: PPUSH
39280: CALL_OW 257
39284: PUSH
39285: LD_INT 12
39287: PUSH
39288: LD_INT 16
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: IN
39295: IFFALSE 39316
// points := [ 5 , 3 , 2 ] ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: LD_INT 5
39304: PUSH
39305: LD_INT 3
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39316: LD_VAR 0 6
39320: PPUSH
39321: CALL_OW 257
39325: PUSH
39326: LD_INT 17
39328: EQUAL
39329: IFFALSE 39350
// points := [ 100 , 50 , 75 ] ;
39331: LD_ADDR_VAR 0 9
39335: PUSH
39336: LD_INT 100
39338: PUSH
39339: LD_INT 50
39341: PUSH
39342: LD_INT 75
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39350: LD_VAR 0 6
39354: PPUSH
39355: CALL_OW 257
39359: PUSH
39360: LD_INT 15
39362: EQUAL
39363: IFFALSE 39384
// points := [ 10 , 5 , 3 ] ;
39365: LD_ADDR_VAR 0 9
39369: PUSH
39370: LD_INT 10
39372: PUSH
39373: LD_INT 5
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39384: LD_VAR 0 6
39388: PPUSH
39389: CALL_OW 257
39393: PUSH
39394: LD_INT 14
39396: EQUAL
39397: IFFALSE 39418
// points := [ 10 , 0 , 0 ] ;
39399: LD_ADDR_VAR 0 9
39403: PUSH
39404: LD_INT 10
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39418: LD_VAR 0 6
39422: PPUSH
39423: CALL_OW 257
39427: PUSH
39428: LD_INT 11
39430: EQUAL
39431: IFFALSE 39452
// points := [ 30 , 10 , 5 ] ;
39433: LD_ADDR_VAR 0 9
39437: PUSH
39438: LD_INT 30
39440: PUSH
39441: LD_INT 10
39443: PUSH
39444: LD_INT 5
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_INT 5
39459: PPUSH
39460: CALL_OW 321
39464: PUSH
39465: LD_INT 2
39467: EQUAL
39468: IFFALSE 39485
// bpoints := bpoints * 1.8 ;
39470: LD_ADDR_VAR 0 10
39474: PUSH
39475: LD_VAR 0 10
39479: PUSH
39480: LD_REAL  1.80000000000000E+0000
39483: MUL
39484: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39485: LD_VAR 0 6
39489: PPUSH
39490: CALL_OW 257
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: LD_INT 4
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: IN
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: LD_INT 51
39521: PPUSH
39522: CALL_OW 321
39526: PUSH
39527: LD_INT 2
39529: EQUAL
39530: AND
39531: IFFALSE 39548
// bpoints := bpoints * 1.2 ;
39533: LD_ADDR_VAR 0 10
39537: PUSH
39538: LD_VAR 0 10
39542: PUSH
39543: LD_REAL  1.20000000000000E+0000
39546: MUL
39547: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39548: LD_VAR 0 6
39552: PPUSH
39553: CALL_OW 257
39557: PUSH
39558: LD_INT 5
39560: PUSH
39561: LD_INT 7
39563: PUSH
39564: LD_INT 9
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: IN
39572: PUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: LD_INT 52
39580: PPUSH
39581: CALL_OW 321
39585: PUSH
39586: LD_INT 2
39588: EQUAL
39589: AND
39590: IFFALSE 39607
// bpoints := bpoints * 1.5 ;
39592: LD_ADDR_VAR 0 10
39596: PUSH
39597: LD_VAR 0 10
39601: PUSH
39602: LD_REAL  1.50000000000000E+0000
39605: MUL
39606: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39607: LD_VAR 0 1
39611: PPUSH
39612: LD_INT 66
39614: PPUSH
39615: CALL_OW 321
39619: PUSH
39620: LD_INT 2
39622: EQUAL
39623: IFFALSE 39640
// bpoints := bpoints * 1.1 ;
39625: LD_ADDR_VAR 0 10
39629: PUSH
39630: LD_VAR 0 10
39634: PUSH
39635: LD_REAL  1.10000000000000E+0000
39638: MUL
39639: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39640: LD_ADDR_VAR 0 10
39644: PUSH
39645: LD_VAR 0 10
39649: PUSH
39650: LD_VAR 0 6
39654: PPUSH
39655: LD_INT 1
39657: PPUSH
39658: CALL_OW 259
39662: PUSH
39663: LD_REAL  1.15000000000000E+0000
39666: MUL
39667: MUL
39668: ST_TO_ADDR
// end ; unit_vehicle :
39669: GO 40497
39671: LD_INT 2
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 40485
39679: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39680: LD_VAR 0 6
39684: PPUSH
39685: CALL_OW 264
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 42
39695: PUSH
39696: LD_INT 24
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: IN
39704: IFFALSE 39725
// points := [ 25 , 5 , 3 ] ;
39706: LD_ADDR_VAR 0 9
39710: PUSH
39711: LD_INT 25
39713: PUSH
39714: LD_INT 5
39716: PUSH
39717: LD_INT 3
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39725: LD_VAR 0 6
39729: PPUSH
39730: CALL_OW 264
39734: PUSH
39735: LD_INT 4
39737: PUSH
39738: LD_INT 43
39740: PUSH
39741: LD_INT 25
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: IN
39749: IFFALSE 39770
// points := [ 40 , 15 , 5 ] ;
39751: LD_ADDR_VAR 0 9
39755: PUSH
39756: LD_INT 40
39758: PUSH
39759: LD_INT 15
39761: PUSH
39762: LD_INT 5
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39770: LD_VAR 0 6
39774: PPUSH
39775: CALL_OW 264
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: LD_INT 23
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: IN
39790: IFFALSE 39811
// points := [ 7 , 25 , 8 ] ;
39792: LD_ADDR_VAR 0 9
39796: PUSH
39797: LD_INT 7
39799: PUSH
39800: LD_INT 25
39802: PUSH
39803: LD_INT 8
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39811: LD_VAR 0 6
39815: PPUSH
39816: CALL_OW 264
39820: PUSH
39821: LD_INT 5
39823: PUSH
39824: LD_INT 27
39826: PUSH
39827: LD_INT 44
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: LIST
39834: IN
39835: IFFALSE 39856
// points := [ 14 , 50 , 16 ] ;
39837: LD_ADDR_VAR 0 9
39841: PUSH
39842: LD_INT 14
39844: PUSH
39845: LD_INT 50
39847: PUSH
39848: LD_INT 16
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39856: LD_VAR 0 6
39860: PPUSH
39861: CALL_OW 264
39865: PUSH
39866: LD_INT 6
39868: PUSH
39869: LD_INT 46
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: IN
39876: IFFALSE 39897
// points := [ 32 , 120 , 70 ] ;
39878: LD_ADDR_VAR 0 9
39882: PUSH
39883: LD_INT 32
39885: PUSH
39886: LD_INT 120
39888: PUSH
39889: LD_INT 70
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39897: LD_VAR 0 6
39901: PPUSH
39902: CALL_OW 264
39906: PUSH
39907: LD_INT 7
39909: PUSH
39910: LD_INT 28
39912: PUSH
39913: LD_INT 45
39915: PUSH
39916: LD_INT 92
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: IN
39925: IFFALSE 39946
// points := [ 35 , 20 , 45 ] ;
39927: LD_ADDR_VAR 0 9
39931: PUSH
39932: LD_INT 35
39934: PUSH
39935: LD_INT 20
39937: PUSH
39938: LD_INT 45
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39946: LD_VAR 0 6
39950: PPUSH
39951: CALL_OW 264
39955: PUSH
39956: LD_INT 47
39958: PUSH
39959: EMPTY
39960: LIST
39961: IN
39962: IFFALSE 39983
// points := [ 67 , 45 , 75 ] ;
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_INT 67
39971: PUSH
39972: LD_INT 45
39974: PUSH
39975: LD_INT 75
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39983: LD_VAR 0 6
39987: PPUSH
39988: CALL_OW 264
39992: PUSH
39993: LD_INT 26
39995: PUSH
39996: EMPTY
39997: LIST
39998: IN
39999: IFFALSE 40020
// points := [ 120 , 30 , 80 ] ;
40001: LD_ADDR_VAR 0 9
40005: PUSH
40006: LD_INT 120
40008: PUSH
40009: LD_INT 30
40011: PUSH
40012: LD_INT 80
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40020: LD_VAR 0 6
40024: PPUSH
40025: CALL_OW 264
40029: PUSH
40030: LD_INT 22
40032: PUSH
40033: EMPTY
40034: LIST
40035: IN
40036: IFFALSE 40057
// points := [ 40 , 1 , 1 ] ;
40038: LD_ADDR_VAR 0 9
40042: PUSH
40043: LD_INT 40
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40057: LD_VAR 0 6
40061: PPUSH
40062: CALL_OW 264
40066: PUSH
40067: LD_INT 29
40069: PUSH
40070: EMPTY
40071: LIST
40072: IN
40073: IFFALSE 40094
// points := [ 70 , 200 , 400 ] ;
40075: LD_ADDR_VAR 0 9
40079: PUSH
40080: LD_INT 70
40082: PUSH
40083: LD_INT 200
40085: PUSH
40086: LD_INT 400
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40094: LD_VAR 0 6
40098: PPUSH
40099: CALL_OW 264
40103: PUSH
40104: LD_INT 14
40106: PUSH
40107: LD_INT 53
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: IN
40114: IFFALSE 40135
// points := [ 40 , 10 , 20 ] ;
40116: LD_ADDR_VAR 0 9
40120: PUSH
40121: LD_INT 40
40123: PUSH
40124: LD_INT 10
40126: PUSH
40127: LD_INT 20
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40135: LD_VAR 0 6
40139: PPUSH
40140: CALL_OW 264
40144: PUSH
40145: LD_INT 9
40147: PUSH
40148: EMPTY
40149: LIST
40150: IN
40151: IFFALSE 40172
// points := [ 5 , 70 , 20 ] ;
40153: LD_ADDR_VAR 0 9
40157: PUSH
40158: LD_INT 5
40160: PUSH
40161: LD_INT 70
40163: PUSH
40164: LD_INT 20
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40172: LD_VAR 0 6
40176: PPUSH
40177: CALL_OW 264
40181: PUSH
40182: LD_INT 10
40184: PUSH
40185: EMPTY
40186: LIST
40187: IN
40188: IFFALSE 40209
// points := [ 35 , 110 , 70 ] ;
40190: LD_ADDR_VAR 0 9
40194: PUSH
40195: LD_INT 35
40197: PUSH
40198: LD_INT 110
40200: PUSH
40201: LD_INT 70
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40209: LD_VAR 0 6
40213: PPUSH
40214: CALL_OW 265
40218: PUSH
40219: LD_INT 25
40221: EQUAL
40222: IFFALSE 40243
// points := [ 80 , 65 , 100 ] ;
40224: LD_ADDR_VAR 0 9
40228: PUSH
40229: LD_INT 80
40231: PUSH
40232: LD_INT 65
40234: PUSH
40235: LD_INT 100
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: LIST
40242: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40243: LD_VAR 0 6
40247: PPUSH
40248: CALL_OW 263
40252: PUSH
40253: LD_INT 1
40255: EQUAL
40256: IFFALSE 40291
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40258: LD_ADDR_VAR 0 10
40262: PUSH
40263: LD_VAR 0 10
40267: PUSH
40268: LD_VAR 0 6
40272: PPUSH
40273: CALL_OW 311
40277: PPUSH
40278: LD_INT 3
40280: PPUSH
40281: CALL_OW 259
40285: PUSH
40286: LD_INT 4
40288: MUL
40289: MUL
40290: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40291: LD_VAR 0 6
40295: PPUSH
40296: CALL_OW 263
40300: PUSH
40301: LD_INT 2
40303: EQUAL
40304: IFFALSE 40355
// begin j := IsControledBy ( i ) ;
40306: LD_ADDR_VAR 0 7
40310: PUSH
40311: LD_VAR 0 6
40315: PPUSH
40316: CALL_OW 312
40320: ST_TO_ADDR
// if j then
40321: LD_VAR 0 7
40325: IFFALSE 40355
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40327: LD_ADDR_VAR 0 10
40331: PUSH
40332: LD_VAR 0 10
40336: PUSH
40337: LD_VAR 0 7
40341: PPUSH
40342: LD_INT 3
40344: PPUSH
40345: CALL_OW 259
40349: PUSH
40350: LD_INT 3
40352: MUL
40353: MUL
40354: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40355: LD_VAR 0 6
40359: PPUSH
40360: CALL_OW 264
40364: PUSH
40365: LD_INT 5
40367: PUSH
40368: LD_INT 6
40370: PUSH
40371: LD_INT 46
40373: PUSH
40374: LD_INT 44
40376: PUSH
40377: LD_INT 47
40379: PUSH
40380: LD_INT 45
40382: PUSH
40383: LD_INT 28
40385: PUSH
40386: LD_INT 7
40388: PUSH
40389: LD_INT 27
40391: PUSH
40392: LD_INT 29
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: IN
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: LD_INT 52
40415: PPUSH
40416: CALL_OW 321
40420: PUSH
40421: LD_INT 2
40423: EQUAL
40424: AND
40425: IFFALSE 40442
// bpoints := bpoints * 1.2 ;
40427: LD_ADDR_VAR 0 10
40431: PUSH
40432: LD_VAR 0 10
40436: PUSH
40437: LD_REAL  1.20000000000000E+0000
40440: MUL
40441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40442: LD_VAR 0 6
40446: PPUSH
40447: CALL_OW 264
40451: PUSH
40452: LD_INT 6
40454: PUSH
40455: LD_INT 46
40457: PUSH
40458: LD_INT 47
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: IN
40466: IFFALSE 40483
// bpoints := bpoints * 1.2 ;
40468: LD_ADDR_VAR 0 10
40472: PUSH
40473: LD_VAR 0 10
40477: PUSH
40478: LD_REAL  1.20000000000000E+0000
40481: MUL
40482: ST_TO_ADDR
// end ; unit_building :
40483: GO 40497
40485: LD_INT 3
40487: DOUBLE
40488: EQUAL
40489: IFTRUE 40493
40491: GO 40496
40493: POP
// ; end ;
40494: GO 40497
40496: POP
// for j = 1 to 3 do
40497: LD_ADDR_VAR 0 7
40501: PUSH
40502: DOUBLE
40503: LD_INT 1
40505: DEC
40506: ST_TO_ADDR
40507: LD_INT 3
40509: PUSH
40510: FOR_TO
40511: IFFALSE 40564
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40513: LD_ADDR_VAR 0 5
40517: PUSH
40518: LD_VAR 0 5
40522: PPUSH
40523: LD_VAR 0 7
40527: PPUSH
40528: LD_VAR 0 5
40532: PUSH
40533: LD_VAR 0 7
40537: ARRAY
40538: PUSH
40539: LD_VAR 0 9
40543: PUSH
40544: LD_VAR 0 7
40548: ARRAY
40549: PUSH
40550: LD_VAR 0 10
40554: MUL
40555: PLUS
40556: PPUSH
40557: CALL_OW 1
40561: ST_TO_ADDR
40562: GO 40510
40564: POP
40565: POP
// end ;
40566: GO 39045
40568: POP
40569: POP
// result := Replace ( result , 4 , tmp ) ;
40570: LD_ADDR_VAR 0 5
40574: PUSH
40575: LD_VAR 0 5
40579: PPUSH
40580: LD_INT 4
40582: PPUSH
40583: LD_VAR 0 8
40587: PPUSH
40588: CALL_OW 1
40592: ST_TO_ADDR
// end ;
40593: LD_VAR 0 5
40597: RET
// export function DangerAtRange ( unit , range ) ; begin
40598: LD_INT 0
40600: PPUSH
// if not unit then
40601: LD_VAR 0 1
40605: NOT
40606: IFFALSE 40610
// exit ;
40608: GO 40655
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40610: LD_ADDR_VAR 0 3
40614: PUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: CALL_OW 255
40624: PPUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: CALL_OW 250
40634: PPUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 251
40644: PPUSH
40645: LD_VAR 0 2
40649: PPUSH
40650: CALL 38897 0 4
40654: ST_TO_ADDR
// end ;
40655: LD_VAR 0 3
40659: RET
// export function DangerInArea ( side , area ) ; begin
40660: LD_INT 0
40662: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_VAR 0 2
40672: PPUSH
40673: LD_INT 81
40675: PUSH
40676: LD_VAR 0 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PPUSH
40685: CALL_OW 70
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 3
40694: RET
// export function IsExtension ( b ) ; begin
40695: LD_INT 0
40697: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40698: LD_ADDR_VAR 0 2
40702: PUSH
40703: LD_VAR 0 1
40707: PUSH
40708: LD_INT 23
40710: PUSH
40711: LD_INT 20
40713: PUSH
40714: LD_INT 22
40716: PUSH
40717: LD_INT 17
40719: PUSH
40720: LD_INT 24
40722: PUSH
40723: LD_INT 21
40725: PUSH
40726: LD_INT 19
40728: PUSH
40729: LD_INT 16
40731: PUSH
40732: LD_INT 25
40734: PUSH
40735: LD_INT 18
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: IN
40750: ST_TO_ADDR
// end ;
40751: LD_VAR 0 2
40755: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40756: LD_INT 0
40758: PPUSH
40759: PPUSH
40760: PPUSH
// result := [ ] ;
40761: LD_ADDR_VAR 0 4
40765: PUSH
40766: EMPTY
40767: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: LD_VAR 0 2
40777: PPUSH
40778: LD_INT 21
40780: PUSH
40781: LD_INT 3
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PPUSH
40788: CALL_OW 70
40792: ST_TO_ADDR
// if not tmp then
40793: LD_VAR 0 5
40797: NOT
40798: IFFALSE 40802
// exit ;
40800: GO 40866
// if checkLink then
40802: LD_VAR 0 3
40806: IFFALSE 40856
// begin for i in tmp do
40808: LD_ADDR_VAR 0 6
40812: PUSH
40813: LD_VAR 0 5
40817: PUSH
40818: FOR_IN
40819: IFFALSE 40854
// if GetBase ( i ) <> base then
40821: LD_VAR 0 6
40825: PPUSH
40826: CALL_OW 274
40830: PUSH
40831: LD_VAR 0 1
40835: NONEQUAL
40836: IFFALSE 40852
// ComLinkToBase ( base , i ) ;
40838: LD_VAR 0 1
40842: PPUSH
40843: LD_VAR 0 6
40847: PPUSH
40848: CALL_OW 169
40852: GO 40818
40854: POP
40855: POP
// end ; result := tmp ;
40856: LD_ADDR_VAR 0 4
40860: PUSH
40861: LD_VAR 0 5
40865: ST_TO_ADDR
// end ;
40866: LD_VAR 0 4
40870: RET
// export function ComComplete ( units , b ) ; var i ; begin
40871: LD_INT 0
40873: PPUSH
40874: PPUSH
// if not units then
40875: LD_VAR 0 1
40879: NOT
40880: IFFALSE 40884
// exit ;
40882: GO 40974
// for i in units do
40884: LD_ADDR_VAR 0 4
40888: PUSH
40889: LD_VAR 0 1
40893: PUSH
40894: FOR_IN
40895: IFFALSE 40972
// if BuildingStatus ( b ) = bs_build then
40897: LD_VAR 0 2
40901: PPUSH
40902: CALL_OW 461
40906: PUSH
40907: LD_INT 1
40909: EQUAL
40910: IFFALSE 40970
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40912: LD_VAR 0 4
40916: PPUSH
40917: LD_STRING h
40919: PUSH
40920: LD_VAR 0 2
40924: PPUSH
40925: CALL_OW 250
40929: PUSH
40930: LD_VAR 0 2
40934: PPUSH
40935: CALL_OW 251
40939: PUSH
40940: LD_VAR 0 2
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: PPUSH
40966: CALL_OW 446
40970: GO 40894
40972: POP
40973: POP
// end ;
40974: LD_VAR 0 3
40978: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40979: LD_INT 0
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40987: LD_VAR 0 1
40991: NOT
40992: PUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: CALL_OW 263
41002: PUSH
41003: LD_INT 2
41005: NONEQUAL
41006: OR
41007: IFFALSE 41011
// exit ;
41009: GO 41327
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41011: LD_ADDR_VAR 0 6
41015: PUSH
41016: LD_INT 22
41018: PUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 255
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 30
41038: PUSH
41039: LD_INT 36
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 34
41048: PUSH
41049: LD_INT 31
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PPUSH
41065: CALL_OW 69
41069: ST_TO_ADDR
// if not tmp then
41070: LD_VAR 0 6
41074: NOT
41075: IFFALSE 41079
// exit ;
41077: GO 41327
// result := [ ] ;
41079: LD_ADDR_VAR 0 2
41083: PUSH
41084: EMPTY
41085: ST_TO_ADDR
// for i in tmp do
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_VAR 0 6
41095: PUSH
41096: FOR_IN
41097: IFFALSE 41168
// begin t := UnitsInside ( i ) ;
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: LD_VAR 0 3
41108: PPUSH
41109: CALL_OW 313
41113: ST_TO_ADDR
// if t then
41114: LD_VAR 0 4
41118: IFFALSE 41166
// for j in t do
41120: LD_ADDR_VAR 0 7
41124: PUSH
41125: LD_VAR 0 4
41129: PUSH
41130: FOR_IN
41131: IFFALSE 41164
// result := Replace ( result , result + 1 , j ) ;
41133: LD_ADDR_VAR 0 2
41137: PUSH
41138: LD_VAR 0 2
41142: PPUSH
41143: LD_VAR 0 2
41147: PUSH
41148: LD_INT 1
41150: PLUS
41151: PPUSH
41152: LD_VAR 0 7
41156: PPUSH
41157: CALL_OW 1
41161: ST_TO_ADDR
41162: GO 41130
41164: POP
41165: POP
// end ;
41166: GO 41096
41168: POP
41169: POP
// if not result then
41170: LD_VAR 0 2
41174: NOT
41175: IFFALSE 41179
// exit ;
41177: GO 41327
// mech := result [ 1 ] ;
41179: LD_ADDR_VAR 0 5
41183: PUSH
41184: LD_VAR 0 2
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: ST_TO_ADDR
// if result > 1 then
41193: LD_VAR 0 2
41197: PUSH
41198: LD_INT 1
41200: GREATER
41201: IFFALSE 41313
// begin for i = 2 to result do
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: DOUBLE
41209: LD_INT 2
41211: DEC
41212: ST_TO_ADDR
41213: LD_VAR 0 2
41217: PUSH
41218: FOR_TO
41219: IFFALSE 41311
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41221: LD_ADDR_VAR 0 4
41225: PUSH
41226: LD_VAR 0 2
41230: PUSH
41231: LD_VAR 0 3
41235: ARRAY
41236: PPUSH
41237: LD_INT 3
41239: PPUSH
41240: CALL_OW 259
41244: PUSH
41245: LD_VAR 0 2
41249: PUSH
41250: LD_VAR 0 3
41254: ARRAY
41255: PPUSH
41256: CALL_OW 432
41260: MINUS
41261: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41262: LD_VAR 0 4
41266: PUSH
41267: LD_VAR 0 5
41271: PPUSH
41272: LD_INT 3
41274: PPUSH
41275: CALL_OW 259
41279: PUSH
41280: LD_VAR 0 5
41284: PPUSH
41285: CALL_OW 432
41289: MINUS
41290: GREATEREQUAL
41291: IFFALSE 41309
// mech := result [ i ] ;
41293: LD_ADDR_VAR 0 5
41297: PUSH
41298: LD_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: ARRAY
41308: ST_TO_ADDR
// end ;
41309: GO 41218
41311: POP
41312: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41313: LD_VAR 0 1
41317: PPUSH
41318: LD_VAR 0 5
41322: PPUSH
41323: CALL_OW 135
// end ;
41327: LD_VAR 0 2
41331: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41332: LD_INT 0
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
// result := [ ] ;
41347: LD_ADDR_VAR 0 7
41351: PUSH
41352: EMPTY
41353: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 266
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: IN
41374: NOT
41375: IFFALSE 41379
// exit ;
41377: GO 43013
// if name then
41379: LD_VAR 0 3
41383: IFFALSE 41399
// SetBName ( base_dep , name ) ;
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: CALL_OW 500
// base := GetBase ( base_dep ) ;
41399: LD_ADDR_VAR 0 15
41403: PUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: CALL_OW 274
41413: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41414: LD_ADDR_VAR 0 16
41418: PUSH
41419: LD_VAR 0 1
41423: PPUSH
41424: CALL_OW 255
41428: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41429: LD_ADDR_VAR 0 17
41433: PUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 248
41443: ST_TO_ADDR
// if sources then
41444: LD_VAR 0 5
41448: IFFALSE 41495
// for i = 1 to 3 do
41450: LD_ADDR_VAR 0 8
41454: PUSH
41455: DOUBLE
41456: LD_INT 1
41458: DEC
41459: ST_TO_ADDR
41460: LD_INT 3
41462: PUSH
41463: FOR_TO
41464: IFFALSE 41493
// AddResourceType ( base , i , sources [ i ] ) ;
41466: LD_VAR 0 15
41470: PPUSH
41471: LD_VAR 0 8
41475: PPUSH
41476: LD_VAR 0 5
41480: PUSH
41481: LD_VAR 0 8
41485: ARRAY
41486: PPUSH
41487: CALL_OW 276
41491: GO 41463
41493: POP
41494: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41495: LD_ADDR_VAR 0 18
41499: PUSH
41500: LD_VAR 0 15
41504: PPUSH
41505: LD_VAR 0 2
41509: PPUSH
41510: LD_INT 1
41512: PPUSH
41513: CALL 40756 0 3
41517: ST_TO_ADDR
// InitHc ;
41518: CALL_OW 19
// InitUc ;
41522: CALL_OW 18
// uc_side := side ;
41526: LD_ADDR_OWVAR 20
41530: PUSH
41531: LD_VAR 0 16
41535: ST_TO_ADDR
// uc_nation := nation ;
41536: LD_ADDR_OWVAR 21
41540: PUSH
41541: LD_VAR 0 17
41545: ST_TO_ADDR
// if buildings then
41546: LD_VAR 0 18
41550: IFFALSE 42872
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41552: LD_ADDR_VAR 0 19
41556: PUSH
41557: LD_VAR 0 18
41561: PPUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 30
41567: PUSH
41568: LD_INT 29
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 30
41577: PUSH
41578: LD_INT 30
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: PPUSH
41590: CALL_OW 72
41594: ST_TO_ADDR
// if tmp then
41595: LD_VAR 0 19
41599: IFFALSE 41647
// for i in tmp do
41601: LD_ADDR_VAR 0 8
41605: PUSH
41606: LD_VAR 0 19
41610: PUSH
41611: FOR_IN
41612: IFFALSE 41645
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41614: LD_VAR 0 8
41618: PPUSH
41619: CALL_OW 250
41623: PPUSH
41624: LD_VAR 0 8
41628: PPUSH
41629: CALL_OW 251
41633: PPUSH
41634: LD_VAR 0 16
41638: PPUSH
41639: CALL_OW 441
41643: GO 41611
41645: POP
41646: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41647: LD_VAR 0 18
41651: PPUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 30
41657: PUSH
41658: LD_INT 32
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 30
41667: PUSH
41668: LD_INT 33
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: PPUSH
41680: CALL_OW 72
41684: IFFALSE 41772
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41686: LD_ADDR_VAR 0 8
41690: PUSH
41691: LD_VAR 0 18
41695: PPUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 30
41701: PUSH
41702: LD_INT 32
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 30
41711: PUSH
41712: LD_INT 33
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PPUSH
41724: CALL_OW 72
41728: PUSH
41729: FOR_IN
41730: IFFALSE 41770
// begin if not GetBWeapon ( i ) then
41732: LD_VAR 0 8
41736: PPUSH
41737: CALL_OW 269
41741: NOT
41742: IFFALSE 41768
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_VAR 0 8
41753: PPUSH
41754: LD_VAR 0 2
41758: PPUSH
41759: CALL 43018 0 2
41763: PPUSH
41764: CALL_OW 431
// end ;
41768: GO 41729
41770: POP
41771: POP
// end ; for i = 1 to personel do
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: DOUBLE
41778: LD_INT 1
41780: DEC
41781: ST_TO_ADDR
41782: LD_VAR 0 6
41786: PUSH
41787: FOR_TO
41788: IFFALSE 42852
// begin if i > 4 then
41790: LD_VAR 0 8
41794: PUSH
41795: LD_INT 4
41797: GREATER
41798: IFFALSE 41802
// break ;
41800: GO 42852
// case i of 1 :
41802: LD_VAR 0 8
41806: PUSH
41807: LD_INT 1
41809: DOUBLE
41810: EQUAL
41811: IFTRUE 41815
41813: GO 41895
41815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41816: LD_ADDR_VAR 0 12
41820: PUSH
41821: LD_VAR 0 18
41825: PPUSH
41826: LD_INT 22
41828: PUSH
41829: LD_VAR 0 16
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 58
41840: PUSH
41841: EMPTY
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 30
41849: PUSH
41850: LD_INT 32
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 30
41859: PUSH
41860: LD_INT 4
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 30
41869: PUSH
41870: LD_INT 5
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: PPUSH
41888: CALL_OW 72
41892: ST_TO_ADDR
41893: GO 42117
41895: LD_INT 2
41897: DOUBLE
41898: EQUAL
41899: IFTRUE 41903
41901: GO 41965
41903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41904: LD_ADDR_VAR 0 12
41908: PUSH
41909: LD_VAR 0 18
41913: PPUSH
41914: LD_INT 22
41916: PUSH
41917: LD_VAR 0 16
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: LD_INT 30
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 30
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PPUSH
41958: CALL_OW 72
41962: ST_TO_ADDR
41963: GO 42117
41965: LD_INT 3
41967: DOUBLE
41968: EQUAL
41969: IFTRUE 41973
41971: GO 42035
41973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41974: LD_ADDR_VAR 0 12
41978: PUSH
41979: LD_VAR 0 18
41983: PPUSH
41984: LD_INT 22
41986: PUSH
41987: LD_VAR 0 16
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 30
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 30
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PPUSH
42028: CALL_OW 72
42032: ST_TO_ADDR
42033: GO 42117
42035: LD_INT 4
42037: DOUBLE
42038: EQUAL
42039: IFTRUE 42043
42041: GO 42116
42043: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42044: LD_ADDR_VAR 0 12
42048: PUSH
42049: LD_VAR 0 18
42053: PPUSH
42054: LD_INT 22
42056: PUSH
42057: LD_VAR 0 16
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 30
42071: PUSH
42072: LD_INT 6
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 30
42081: PUSH
42082: LD_INT 7
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 30
42091: PUSH
42092: LD_INT 8
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PPUSH
42109: CALL_OW 72
42113: ST_TO_ADDR
42114: GO 42117
42116: POP
// if i = 1 then
42117: LD_VAR 0 8
42121: PUSH
42122: LD_INT 1
42124: EQUAL
42125: IFFALSE 42236
// begin tmp := [ ] ;
42127: LD_ADDR_VAR 0 19
42131: PUSH
42132: EMPTY
42133: ST_TO_ADDR
// for j in f do
42134: LD_ADDR_VAR 0 9
42138: PUSH
42139: LD_VAR 0 12
42143: PUSH
42144: FOR_IN
42145: IFFALSE 42218
// if GetBType ( j ) = b_bunker then
42147: LD_VAR 0 9
42151: PPUSH
42152: CALL_OW 266
42156: PUSH
42157: LD_INT 32
42159: EQUAL
42160: IFFALSE 42187
// tmp := Insert ( tmp , 1 , j ) else
42162: LD_ADDR_VAR 0 19
42166: PUSH
42167: LD_VAR 0 19
42171: PPUSH
42172: LD_INT 1
42174: PPUSH
42175: LD_VAR 0 9
42179: PPUSH
42180: CALL_OW 2
42184: ST_TO_ADDR
42185: GO 42216
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42187: LD_ADDR_VAR 0 19
42191: PUSH
42192: LD_VAR 0 19
42196: PPUSH
42197: LD_VAR 0 19
42201: PUSH
42202: LD_INT 1
42204: PLUS
42205: PPUSH
42206: LD_VAR 0 9
42210: PPUSH
42211: CALL_OW 2
42215: ST_TO_ADDR
42216: GO 42144
42218: POP
42219: POP
// if tmp then
42220: LD_VAR 0 19
42224: IFFALSE 42236
// f := tmp ;
42226: LD_ADDR_VAR 0 12
42230: PUSH
42231: LD_VAR 0 19
42235: ST_TO_ADDR
// end ; x := personel [ i ] ;
42236: LD_ADDR_VAR 0 13
42240: PUSH
42241: LD_VAR 0 6
42245: PUSH
42246: LD_VAR 0 8
42250: ARRAY
42251: ST_TO_ADDR
// if x = - 1 then
42252: LD_VAR 0 13
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: EQUAL
42261: IFFALSE 42470
// begin for j in f do
42263: LD_ADDR_VAR 0 9
42267: PUSH
42268: LD_VAR 0 12
42272: PUSH
42273: FOR_IN
42274: IFFALSE 42466
// repeat InitHc ;
42276: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42280: LD_VAR 0 9
42284: PPUSH
42285: CALL_OW 266
42289: PUSH
42290: LD_INT 5
42292: EQUAL
42293: IFFALSE 42363
// begin if UnitsInside ( j ) < 3 then
42295: LD_VAR 0 9
42299: PPUSH
42300: CALL_OW 313
42304: PUSH
42305: LD_INT 3
42307: LESS
42308: IFFALSE 42344
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42310: LD_INT 0
42312: PPUSH
42313: LD_INT 5
42315: PUSH
42316: LD_INT 8
42318: PUSH
42319: LD_INT 9
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: PUSH
42327: LD_VAR 0 17
42331: ARRAY
42332: PPUSH
42333: LD_VAR 0 4
42337: PPUSH
42338: CALL_OW 380
42342: GO 42361
// PrepareHuman ( false , i , skill ) ;
42344: LD_INT 0
42346: PPUSH
42347: LD_VAR 0 8
42351: PPUSH
42352: LD_VAR 0 4
42356: PPUSH
42357: CALL_OW 380
// end else
42361: GO 42380
// PrepareHuman ( false , i , skill ) ;
42363: LD_INT 0
42365: PPUSH
42366: LD_VAR 0 8
42370: PPUSH
42371: LD_VAR 0 4
42375: PPUSH
42376: CALL_OW 380
// un := CreateHuman ;
42380: LD_ADDR_VAR 0 14
42384: PUSH
42385: CALL_OW 44
42389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42390: LD_ADDR_VAR 0 7
42394: PUSH
42395: LD_VAR 0 7
42399: PPUSH
42400: LD_INT 1
42402: PPUSH
42403: LD_VAR 0 14
42407: PPUSH
42408: CALL_OW 2
42412: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42413: LD_VAR 0 14
42417: PPUSH
42418: LD_VAR 0 9
42422: PPUSH
42423: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42427: LD_VAR 0 9
42431: PPUSH
42432: CALL_OW 313
42436: PUSH
42437: LD_INT 6
42439: EQUAL
42440: PUSH
42441: LD_VAR 0 9
42445: PPUSH
42446: CALL_OW 266
42450: PUSH
42451: LD_INT 32
42453: PUSH
42454: LD_INT 31
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: IN
42461: OR
42462: IFFALSE 42276
42464: GO 42273
42466: POP
42467: POP
// end else
42468: GO 42850
// for j = 1 to x do
42470: LD_ADDR_VAR 0 9
42474: PUSH
42475: DOUBLE
42476: LD_INT 1
42478: DEC
42479: ST_TO_ADDR
42480: LD_VAR 0 13
42484: PUSH
42485: FOR_TO
42486: IFFALSE 42848
// begin InitHc ;
42488: CALL_OW 19
// if not f then
42492: LD_VAR 0 12
42496: NOT
42497: IFFALSE 42586
// begin PrepareHuman ( false , i , skill ) ;
42499: LD_INT 0
42501: PPUSH
42502: LD_VAR 0 8
42506: PPUSH
42507: LD_VAR 0 4
42511: PPUSH
42512: CALL_OW 380
// un := CreateHuman ;
42516: LD_ADDR_VAR 0 14
42520: PUSH
42521: CALL_OW 44
42525: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42526: LD_ADDR_VAR 0 7
42530: PUSH
42531: LD_VAR 0 7
42535: PPUSH
42536: LD_INT 1
42538: PPUSH
42539: LD_VAR 0 14
42543: PPUSH
42544: CALL_OW 2
42548: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42549: LD_VAR 0 14
42553: PPUSH
42554: LD_VAR 0 1
42558: PPUSH
42559: CALL_OW 250
42563: PPUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 251
42573: PPUSH
42574: LD_INT 10
42576: PPUSH
42577: LD_INT 0
42579: PPUSH
42580: CALL_OW 50
// continue ;
42584: GO 42485
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42586: LD_VAR 0 12
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PPUSH
42595: CALL_OW 313
42599: PUSH
42600: LD_VAR 0 12
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PPUSH
42609: CALL_OW 266
42613: PUSH
42614: LD_INT 32
42616: PUSH
42617: LD_INT 31
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: IN
42624: AND
42625: PUSH
42626: LD_VAR 0 12
42630: PUSH
42631: LD_INT 1
42633: ARRAY
42634: PPUSH
42635: CALL_OW 313
42639: PUSH
42640: LD_INT 6
42642: EQUAL
42643: OR
42644: IFFALSE 42664
// f := Delete ( f , 1 ) ;
42646: LD_ADDR_VAR 0 12
42650: PUSH
42651: LD_VAR 0 12
42655: PPUSH
42656: LD_INT 1
42658: PPUSH
42659: CALL_OW 3
42663: ST_TO_ADDR
// if not f then
42664: LD_VAR 0 12
42668: NOT
42669: IFFALSE 42687
// begin x := x + 2 ;
42671: LD_ADDR_VAR 0 13
42675: PUSH
42676: LD_VAR 0 13
42680: PUSH
42681: LD_INT 2
42683: PLUS
42684: ST_TO_ADDR
// continue ;
42685: GO 42485
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42687: LD_VAR 0 12
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: CALL_OW 266
42700: PUSH
42701: LD_INT 5
42703: EQUAL
42704: IFFALSE 42778
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42706: LD_VAR 0 12
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: PPUSH
42715: CALL_OW 313
42719: PUSH
42720: LD_INT 3
42722: LESS
42723: IFFALSE 42759
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42725: LD_INT 0
42727: PPUSH
42728: LD_INT 5
42730: PUSH
42731: LD_INT 8
42733: PUSH
42734: LD_INT 9
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: PUSH
42742: LD_VAR 0 17
42746: ARRAY
42747: PPUSH
42748: LD_VAR 0 4
42752: PPUSH
42753: CALL_OW 380
42757: GO 42776
// PrepareHuman ( false , i , skill ) ;
42759: LD_INT 0
42761: PPUSH
42762: LD_VAR 0 8
42766: PPUSH
42767: LD_VAR 0 4
42771: PPUSH
42772: CALL_OW 380
// end else
42776: GO 42795
// PrepareHuman ( false , i , skill ) ;
42778: LD_INT 0
42780: PPUSH
42781: LD_VAR 0 8
42785: PPUSH
42786: LD_VAR 0 4
42790: PPUSH
42791: CALL_OW 380
// un := CreateHuman ;
42795: LD_ADDR_VAR 0 14
42799: PUSH
42800: CALL_OW 44
42804: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42805: LD_ADDR_VAR 0 7
42809: PUSH
42810: LD_VAR 0 7
42814: PPUSH
42815: LD_INT 1
42817: PPUSH
42818: LD_VAR 0 14
42822: PPUSH
42823: CALL_OW 2
42827: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42828: LD_VAR 0 14
42832: PPUSH
42833: LD_VAR 0 12
42837: PUSH
42838: LD_INT 1
42840: ARRAY
42841: PPUSH
42842: CALL_OW 52
// end ;
42846: GO 42485
42848: POP
42849: POP
// end ;
42850: GO 41787
42852: POP
42853: POP
// result := result ^ buildings ;
42854: LD_ADDR_VAR 0 7
42858: PUSH
42859: LD_VAR 0 7
42863: PUSH
42864: LD_VAR 0 18
42868: ADD
42869: ST_TO_ADDR
// end else
42870: GO 43013
// begin for i = 1 to personel do
42872: LD_ADDR_VAR 0 8
42876: PUSH
42877: DOUBLE
42878: LD_INT 1
42880: DEC
42881: ST_TO_ADDR
42882: LD_VAR 0 6
42886: PUSH
42887: FOR_TO
42888: IFFALSE 43011
// begin if i > 4 then
42890: LD_VAR 0 8
42894: PUSH
42895: LD_INT 4
42897: GREATER
42898: IFFALSE 42902
// break ;
42900: GO 43011
// x := personel [ i ] ;
42902: LD_ADDR_VAR 0 13
42906: PUSH
42907: LD_VAR 0 6
42911: PUSH
42912: LD_VAR 0 8
42916: ARRAY
42917: ST_TO_ADDR
// if x = - 1 then
42918: LD_VAR 0 13
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: EQUAL
42927: IFFALSE 42931
// continue ;
42929: GO 42887
// PrepareHuman ( false , i , skill ) ;
42931: LD_INT 0
42933: PPUSH
42934: LD_VAR 0 8
42938: PPUSH
42939: LD_VAR 0 4
42943: PPUSH
42944: CALL_OW 380
// un := CreateHuman ;
42948: LD_ADDR_VAR 0 14
42952: PUSH
42953: CALL_OW 44
42957: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42958: LD_VAR 0 14
42962: PPUSH
42963: LD_VAR 0 1
42967: PPUSH
42968: CALL_OW 250
42972: PPUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: CALL_OW 251
42982: PPUSH
42983: LD_INT 10
42985: PPUSH
42986: LD_INT 0
42988: PPUSH
42989: CALL_OW 50
// result := result ^ un ;
42993: LD_ADDR_VAR 0 7
42997: PUSH
42998: LD_VAR 0 7
43002: PUSH
43003: LD_VAR 0 14
43007: ADD
43008: ST_TO_ADDR
// end ;
43009: GO 42887
43011: POP
43012: POP
// end ; end ;
43013: LD_VAR 0 7
43017: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43018: LD_INT 0
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
// result := false ;
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: LD_INT 0
43043: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43044: LD_VAR 0 1
43048: NOT
43049: PUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: CALL_OW 266
43059: PUSH
43060: LD_INT 32
43062: PUSH
43063: LD_INT 33
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: IN
43070: NOT
43071: OR
43072: IFFALSE 43076
// exit ;
43074: GO 44185
// nat := GetNation ( tower ) ;
43076: LD_ADDR_VAR 0 12
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: CALL_OW 248
43090: ST_TO_ADDR
// side := GetSide ( tower ) ;
43091: LD_ADDR_VAR 0 16
43095: PUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: CALL_OW 255
43105: ST_TO_ADDR
// x := GetX ( tower ) ;
43106: LD_ADDR_VAR 0 10
43110: PUSH
43111: LD_VAR 0 1
43115: PPUSH
43116: CALL_OW 250
43120: ST_TO_ADDR
// y := GetY ( tower ) ;
43121: LD_ADDR_VAR 0 11
43125: PUSH
43126: LD_VAR 0 1
43130: PPUSH
43131: CALL_OW 251
43135: ST_TO_ADDR
// if not x or not y then
43136: LD_VAR 0 10
43140: NOT
43141: PUSH
43142: LD_VAR 0 11
43146: NOT
43147: OR
43148: IFFALSE 43152
// exit ;
43150: GO 44185
// weapon := 0 ;
43152: LD_ADDR_VAR 0 18
43156: PUSH
43157: LD_INT 0
43159: ST_TO_ADDR
// fac_list := [ ] ;
43160: LD_ADDR_VAR 0 17
43164: PUSH
43165: EMPTY
43166: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43167: LD_ADDR_VAR 0 6
43171: PUSH
43172: LD_VAR 0 1
43176: PPUSH
43177: CALL_OW 274
43181: PPUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: LD_INT 0
43189: PPUSH
43190: CALL 40756 0 3
43194: PPUSH
43195: LD_INT 30
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PPUSH
43205: CALL_OW 72
43209: ST_TO_ADDR
// if not factories then
43210: LD_VAR 0 6
43214: NOT
43215: IFFALSE 43219
// exit ;
43217: GO 44185
// for i in factories do
43219: LD_ADDR_VAR 0 8
43223: PUSH
43224: LD_VAR 0 6
43228: PUSH
43229: FOR_IN
43230: IFFALSE 43255
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43232: LD_ADDR_VAR 0 17
43236: PUSH
43237: LD_VAR 0 17
43241: PUSH
43242: LD_VAR 0 8
43246: PPUSH
43247: CALL_OW 478
43251: UNION
43252: ST_TO_ADDR
43253: GO 43229
43255: POP
43256: POP
// if not fac_list then
43257: LD_VAR 0 17
43261: NOT
43262: IFFALSE 43266
// exit ;
43264: GO 44185
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43266: LD_ADDR_VAR 0 5
43270: PUSH
43271: LD_INT 4
43273: PUSH
43274: LD_INT 5
43276: PUSH
43277: LD_INT 9
43279: PUSH
43280: LD_INT 10
43282: PUSH
43283: LD_INT 6
43285: PUSH
43286: LD_INT 7
43288: PUSH
43289: LD_INT 11
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 27
43303: PUSH
43304: LD_INT 28
43306: PUSH
43307: LD_INT 26
43309: PUSH
43310: LD_INT 30
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 43
43321: PUSH
43322: LD_INT 44
43324: PUSH
43325: LD_INT 46
43327: PUSH
43328: LD_INT 45
43330: PUSH
43331: LD_INT 47
43333: PUSH
43334: LD_INT 49
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: PUSH
43350: LD_VAR 0 12
43354: ARRAY
43355: ST_TO_ADDR
// list := list isect fac_list ;
43356: LD_ADDR_VAR 0 5
43360: PUSH
43361: LD_VAR 0 5
43365: PUSH
43366: LD_VAR 0 17
43370: ISECT
43371: ST_TO_ADDR
// if not list then
43372: LD_VAR 0 5
43376: NOT
43377: IFFALSE 43381
// exit ;
43379: GO 44185
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43381: LD_VAR 0 12
43385: PUSH
43386: LD_INT 3
43388: EQUAL
43389: PUSH
43390: LD_INT 49
43392: PUSH
43393: LD_VAR 0 5
43397: IN
43398: AND
43399: PUSH
43400: LD_INT 31
43402: PPUSH
43403: LD_VAR 0 16
43407: PPUSH
43408: CALL_OW 321
43412: PUSH
43413: LD_INT 2
43415: EQUAL
43416: AND
43417: IFFALSE 43477
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43419: LD_INT 22
43421: PUSH
43422: LD_VAR 0 16
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 35
43433: PUSH
43434: LD_INT 49
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 91
43443: PUSH
43444: LD_VAR 0 1
43448: PUSH
43449: LD_INT 10
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: PPUSH
43462: CALL_OW 69
43466: NOT
43467: IFFALSE 43477
// weapon := ru_time_lapser ;
43469: LD_ADDR_VAR 0 18
43473: PUSH
43474: LD_INT 49
43476: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43477: LD_VAR 0 12
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: IN
43492: PUSH
43493: LD_INT 11
43495: PUSH
43496: LD_VAR 0 5
43500: IN
43501: PUSH
43502: LD_INT 30
43504: PUSH
43505: LD_VAR 0 5
43509: IN
43510: OR
43511: AND
43512: PUSH
43513: LD_INT 6
43515: PPUSH
43516: LD_VAR 0 16
43520: PPUSH
43521: CALL_OW 321
43525: PUSH
43526: LD_INT 2
43528: EQUAL
43529: AND
43530: IFFALSE 43695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43532: LD_INT 22
43534: PUSH
43535: LD_VAR 0 16
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 35
43549: PUSH
43550: LD_INT 11
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 35
43559: PUSH
43560: LD_INT 30
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 91
43574: PUSH
43575: LD_VAR 0 1
43579: PUSH
43580: LD_INT 18
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: PPUSH
43593: CALL_OW 69
43597: NOT
43598: PUSH
43599: LD_INT 22
43601: PUSH
43602: LD_VAR 0 16
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 30
43616: PUSH
43617: LD_INT 32
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 30
43626: PUSH
43627: LD_INT 33
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 91
43641: PUSH
43642: LD_VAR 0 1
43646: PUSH
43647: LD_INT 12
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: PPUSH
43663: CALL_OW 69
43667: PUSH
43668: LD_INT 2
43670: GREATER
43671: AND
43672: IFFALSE 43695
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43674: LD_ADDR_VAR 0 18
43678: PUSH
43679: LD_INT 11
43681: PUSH
43682: LD_INT 30
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_VAR 0 12
43693: ARRAY
43694: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43695: LD_VAR 0 18
43699: NOT
43700: PUSH
43701: LD_INT 40
43703: PPUSH
43704: LD_VAR 0 16
43708: PPUSH
43709: CALL_OW 321
43713: PUSH
43714: LD_INT 2
43716: EQUAL
43717: AND
43718: PUSH
43719: LD_INT 7
43721: PUSH
43722: LD_VAR 0 5
43726: IN
43727: PUSH
43728: LD_INT 28
43730: PUSH
43731: LD_VAR 0 5
43735: IN
43736: OR
43737: PUSH
43738: LD_INT 45
43740: PUSH
43741: LD_VAR 0 5
43745: IN
43746: OR
43747: AND
43748: IFFALSE 44002
// begin hex := GetHexInfo ( x , y ) ;
43750: LD_ADDR_VAR 0 4
43754: PUSH
43755: LD_VAR 0 10
43759: PPUSH
43760: LD_VAR 0 11
43764: PPUSH
43765: CALL_OW 546
43769: ST_TO_ADDR
// if hex [ 1 ] then
43770: LD_VAR 0 4
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: IFFALSE 43782
// exit ;
43780: GO 44185
// height := hex [ 2 ] ;
43782: LD_ADDR_VAR 0 15
43786: PUSH
43787: LD_VAR 0 4
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43796: LD_ADDR_VAR 0 14
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// for i in tmp do
43819: LD_ADDR_VAR 0 8
43823: PUSH
43824: LD_VAR 0 14
43828: PUSH
43829: FOR_IN
43830: IFFALSE 44000
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43832: LD_ADDR_VAR 0 9
43836: PUSH
43837: LD_VAR 0 10
43841: PPUSH
43842: LD_VAR 0 8
43846: PPUSH
43847: LD_INT 5
43849: PPUSH
43850: CALL_OW 272
43854: PUSH
43855: LD_VAR 0 11
43859: PPUSH
43860: LD_VAR 0 8
43864: PPUSH
43865: LD_INT 5
43867: PPUSH
43868: CALL_OW 273
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43877: LD_VAR 0 9
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: PPUSH
43886: LD_VAR 0 9
43890: PUSH
43891: LD_INT 2
43893: ARRAY
43894: PPUSH
43895: CALL_OW 488
43899: IFFALSE 43998
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43901: LD_ADDR_VAR 0 4
43905: PUSH
43906: LD_VAR 0 9
43910: PUSH
43911: LD_INT 1
43913: ARRAY
43914: PPUSH
43915: LD_VAR 0 9
43919: PUSH
43920: LD_INT 2
43922: ARRAY
43923: PPUSH
43924: CALL_OW 546
43928: ST_TO_ADDR
// if hex [ 1 ] then
43929: LD_VAR 0 4
43933: PUSH
43934: LD_INT 1
43936: ARRAY
43937: IFFALSE 43941
// continue ;
43939: GO 43829
// h := hex [ 2 ] ;
43941: LD_ADDR_VAR 0 13
43945: PUSH
43946: LD_VAR 0 4
43950: PUSH
43951: LD_INT 2
43953: ARRAY
43954: ST_TO_ADDR
// if h + 7 < height then
43955: LD_VAR 0 13
43959: PUSH
43960: LD_INT 7
43962: PLUS
43963: PUSH
43964: LD_VAR 0 15
43968: LESS
43969: IFFALSE 43998
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43971: LD_ADDR_VAR 0 18
43975: PUSH
43976: LD_INT 7
43978: PUSH
43979: LD_INT 28
43981: PUSH
43982: LD_INT 45
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: PUSH
43990: LD_VAR 0 12
43994: ARRAY
43995: ST_TO_ADDR
// break ;
43996: GO 44000
// end ; end ; end ;
43998: GO 43829
44000: POP
44001: POP
// end ; if not weapon then
44002: LD_VAR 0 18
44006: NOT
44007: IFFALSE 44067
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44009: LD_ADDR_VAR 0 5
44013: PUSH
44014: LD_VAR 0 5
44018: PUSH
44019: LD_INT 11
44021: PUSH
44022: LD_INT 30
44024: PUSH
44025: LD_INT 49
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: DIFF
44033: ST_TO_ADDR
// if not list then
44034: LD_VAR 0 5
44038: NOT
44039: IFFALSE 44043
// exit ;
44041: GO 44185
// weapon := list [ rand ( 1 , list ) ] ;
44043: LD_ADDR_VAR 0 18
44047: PUSH
44048: LD_VAR 0 5
44052: PUSH
44053: LD_INT 1
44055: PPUSH
44056: LD_VAR 0 5
44060: PPUSH
44061: CALL_OW 12
44065: ARRAY
44066: ST_TO_ADDR
// end ; if weapon then
44067: LD_VAR 0 18
44071: IFFALSE 44185
// begin tmp := CostOfWeapon ( weapon ) ;
44073: LD_ADDR_VAR 0 14
44077: PUSH
44078: LD_VAR 0 18
44082: PPUSH
44083: CALL_OW 451
44087: ST_TO_ADDR
// j := GetBase ( tower ) ;
44088: LD_ADDR_VAR 0 9
44092: PUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 274
44102: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44103: LD_VAR 0 9
44107: PPUSH
44108: LD_INT 1
44110: PPUSH
44111: CALL_OW 275
44115: PUSH
44116: LD_VAR 0 14
44120: PUSH
44121: LD_INT 1
44123: ARRAY
44124: GREATEREQUAL
44125: PUSH
44126: LD_VAR 0 9
44130: PPUSH
44131: LD_INT 2
44133: PPUSH
44134: CALL_OW 275
44138: PUSH
44139: LD_VAR 0 14
44143: PUSH
44144: LD_INT 2
44146: ARRAY
44147: GREATEREQUAL
44148: AND
44149: PUSH
44150: LD_VAR 0 9
44154: PPUSH
44155: LD_INT 3
44157: PPUSH
44158: CALL_OW 275
44162: PUSH
44163: LD_VAR 0 14
44167: PUSH
44168: LD_INT 3
44170: ARRAY
44171: GREATEREQUAL
44172: AND
44173: IFFALSE 44185
// result := weapon ;
44175: LD_ADDR_VAR 0 3
44179: PUSH
44180: LD_VAR 0 18
44184: ST_TO_ADDR
// end ; end ;
44185: LD_VAR 0 3
44189: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44190: LD_INT 0
44192: PPUSH
44193: PPUSH
// result := true ;
44194: LD_ADDR_VAR 0 3
44198: PUSH
44199: LD_INT 1
44201: ST_TO_ADDR
// if array1 = array2 then
44202: LD_VAR 0 1
44206: PUSH
44207: LD_VAR 0 2
44211: EQUAL
44212: IFFALSE 44272
// begin for i = 1 to array1 do
44214: LD_ADDR_VAR 0 4
44218: PUSH
44219: DOUBLE
44220: LD_INT 1
44222: DEC
44223: ST_TO_ADDR
44224: LD_VAR 0 1
44228: PUSH
44229: FOR_TO
44230: IFFALSE 44268
// if array1 [ i ] <> array2 [ i ] then
44232: LD_VAR 0 1
44236: PUSH
44237: LD_VAR 0 4
44241: ARRAY
44242: PUSH
44243: LD_VAR 0 2
44247: PUSH
44248: LD_VAR 0 4
44252: ARRAY
44253: NONEQUAL
44254: IFFALSE 44266
// begin result := false ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_INT 0
44263: ST_TO_ADDR
// break ;
44264: GO 44268
// end ;
44266: GO 44229
44268: POP
44269: POP
// end else
44270: GO 44280
// result := false ;
44272: LD_ADDR_VAR 0 3
44276: PUSH
44277: LD_INT 0
44279: ST_TO_ADDR
// end ;
44280: LD_VAR 0 3
44284: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44285: LD_INT 0
44287: PPUSH
44288: PPUSH
// if not array1 or not array2 then
44289: LD_VAR 0 1
44293: NOT
44294: PUSH
44295: LD_VAR 0 2
44299: NOT
44300: OR
44301: IFFALSE 44305
// exit ;
44303: GO 44369
// result := true ;
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: LD_INT 1
44312: ST_TO_ADDR
// for i = 1 to array1 do
44313: LD_ADDR_VAR 0 4
44317: PUSH
44318: DOUBLE
44319: LD_INT 1
44321: DEC
44322: ST_TO_ADDR
44323: LD_VAR 0 1
44327: PUSH
44328: FOR_TO
44329: IFFALSE 44367
// if array1 [ i ] <> array2 [ i ] then
44331: LD_VAR 0 1
44335: PUSH
44336: LD_VAR 0 4
44340: ARRAY
44341: PUSH
44342: LD_VAR 0 2
44346: PUSH
44347: LD_VAR 0 4
44351: ARRAY
44352: NONEQUAL
44353: IFFALSE 44365
// begin result := false ;
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: LD_INT 0
44362: ST_TO_ADDR
// break ;
44363: GO 44367
// end ;
44365: GO 44328
44367: POP
44368: POP
// end ;
44369: LD_VAR 0 3
44373: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44374: LD_INT 0
44376: PPUSH
44377: PPUSH
44378: PPUSH
// pom := GetBase ( fac ) ;
44379: LD_ADDR_VAR 0 5
44383: PUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 274
44393: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44394: LD_ADDR_VAR 0 4
44398: PUSH
44399: LD_VAR 0 2
44403: PUSH
44404: LD_INT 1
44406: ARRAY
44407: PPUSH
44408: LD_VAR 0 2
44412: PUSH
44413: LD_INT 2
44415: ARRAY
44416: PPUSH
44417: LD_VAR 0 2
44421: PUSH
44422: LD_INT 3
44424: ARRAY
44425: PPUSH
44426: LD_VAR 0 2
44430: PUSH
44431: LD_INT 4
44433: ARRAY
44434: PPUSH
44435: CALL_OW 449
44439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_VAR 0 5
44449: PPUSH
44450: LD_INT 1
44452: PPUSH
44453: CALL_OW 275
44457: PUSH
44458: LD_VAR 0 4
44462: PUSH
44463: LD_INT 1
44465: ARRAY
44466: GREATEREQUAL
44467: PUSH
44468: LD_VAR 0 5
44472: PPUSH
44473: LD_INT 2
44475: PPUSH
44476: CALL_OW 275
44480: PUSH
44481: LD_VAR 0 4
44485: PUSH
44486: LD_INT 2
44488: ARRAY
44489: GREATEREQUAL
44490: AND
44491: PUSH
44492: LD_VAR 0 5
44496: PPUSH
44497: LD_INT 3
44499: PPUSH
44500: CALL_OW 275
44504: PUSH
44505: LD_VAR 0 4
44509: PUSH
44510: LD_INT 3
44512: ARRAY
44513: GREATEREQUAL
44514: AND
44515: ST_TO_ADDR
// end ;
44516: LD_VAR 0 3
44520: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44521: LD_INT 0
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
// pom := GetBase ( building ) ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: CALL_OW 274
44541: ST_TO_ADDR
// if not pom then
44542: LD_VAR 0 3
44546: NOT
44547: IFFALSE 44551
// exit ;
44549: GO 44721
// btype := GetBType ( building ) ;
44551: LD_ADDR_VAR 0 5
44555: PUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 266
44565: ST_TO_ADDR
// if btype = b_armoury then
44566: LD_VAR 0 5
44570: PUSH
44571: LD_INT 4
44573: EQUAL
44574: IFFALSE 44584
// btype := b_barracks ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_INT 5
44583: ST_TO_ADDR
// if btype = b_depot then
44584: LD_VAR 0 5
44588: PUSH
44589: LD_INT 0
44591: EQUAL
44592: IFFALSE 44602
// btype := b_warehouse ;
44594: LD_ADDR_VAR 0 5
44598: PUSH
44599: LD_INT 1
44601: ST_TO_ADDR
// if btype = b_workshop then
44602: LD_VAR 0 5
44606: PUSH
44607: LD_INT 2
44609: EQUAL
44610: IFFALSE 44620
// btype := b_factory ;
44612: LD_ADDR_VAR 0 5
44616: PUSH
44617: LD_INT 3
44619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44620: LD_ADDR_VAR 0 4
44624: PUSH
44625: LD_VAR 0 5
44629: PPUSH
44630: LD_VAR 0 1
44634: PPUSH
44635: CALL_OW 248
44639: PPUSH
44640: CALL_OW 450
44644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44645: LD_ADDR_VAR 0 2
44649: PUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: LD_INT 1
44657: PPUSH
44658: CALL_OW 275
44662: PUSH
44663: LD_VAR 0 4
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: GREATEREQUAL
44672: PUSH
44673: LD_VAR 0 3
44677: PPUSH
44678: LD_INT 2
44680: PPUSH
44681: CALL_OW 275
44685: PUSH
44686: LD_VAR 0 4
44690: PUSH
44691: LD_INT 2
44693: ARRAY
44694: GREATEREQUAL
44695: AND
44696: PUSH
44697: LD_VAR 0 3
44701: PPUSH
44702: LD_INT 3
44704: PPUSH
44705: CALL_OW 275
44709: PUSH
44710: LD_VAR 0 4
44714: PUSH
44715: LD_INT 3
44717: ARRAY
44718: GREATEREQUAL
44719: AND
44720: ST_TO_ADDR
// end ;
44721: LD_VAR 0 2
44725: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44726: LD_INT 0
44728: PPUSH
44729: PPUSH
44730: PPUSH
// pom := GetBase ( building ) ;
44731: LD_ADDR_VAR 0 4
44735: PUSH
44736: LD_VAR 0 1
44740: PPUSH
44741: CALL_OW 274
44745: ST_TO_ADDR
// if not pom then
44746: LD_VAR 0 4
44750: NOT
44751: IFFALSE 44755
// exit ;
44753: GO 44856
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44755: LD_ADDR_VAR 0 5
44759: PUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 248
44774: PPUSH
44775: CALL_OW 450
44779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44780: LD_ADDR_VAR 0 3
44784: PUSH
44785: LD_VAR 0 4
44789: PPUSH
44790: LD_INT 1
44792: PPUSH
44793: CALL_OW 275
44797: PUSH
44798: LD_VAR 0 5
44802: PUSH
44803: LD_INT 1
44805: ARRAY
44806: GREATEREQUAL
44807: PUSH
44808: LD_VAR 0 4
44812: PPUSH
44813: LD_INT 2
44815: PPUSH
44816: CALL_OW 275
44820: PUSH
44821: LD_VAR 0 5
44825: PUSH
44826: LD_INT 2
44828: ARRAY
44829: GREATEREQUAL
44830: AND
44831: PUSH
44832: LD_VAR 0 4
44836: PPUSH
44837: LD_INT 3
44839: PPUSH
44840: CALL_OW 275
44844: PUSH
44845: LD_VAR 0 5
44849: PUSH
44850: LD_INT 3
44852: ARRAY
44853: GREATEREQUAL
44854: AND
44855: ST_TO_ADDR
// end ;
44856: LD_VAR 0 3
44860: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
// result := false ;
44874: LD_ADDR_VAR 0 8
44878: PUSH
44879: LD_INT 0
44881: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44882: LD_VAR 0 5
44886: NOT
44887: PUSH
44888: LD_VAR 0 1
44892: NOT
44893: OR
44894: PUSH
44895: LD_VAR 0 2
44899: NOT
44900: OR
44901: PUSH
44902: LD_VAR 0 3
44906: NOT
44907: OR
44908: IFFALSE 44912
// exit ;
44910: GO 45726
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44912: LD_ADDR_VAR 0 14
44916: PUSH
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_VAR 0 2
44926: PPUSH
44927: LD_VAR 0 3
44931: PPUSH
44932: LD_VAR 0 4
44936: PPUSH
44937: LD_VAR 0 5
44941: PUSH
44942: LD_INT 1
44944: ARRAY
44945: PPUSH
44946: CALL_OW 248
44950: PPUSH
44951: LD_INT 0
44953: PPUSH
44954: CALL 46979 0 6
44958: ST_TO_ADDR
// if not hexes then
44959: LD_VAR 0 14
44963: NOT
44964: IFFALSE 44968
// exit ;
44966: GO 45726
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44968: LD_ADDR_VAR 0 17
44972: PUSH
44973: LD_VAR 0 5
44977: PPUSH
44978: LD_INT 22
44980: PUSH
44981: LD_VAR 0 13
44985: PPUSH
44986: CALL_OW 255
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 30
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 30
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PPUSH
45027: CALL_OW 72
45031: ST_TO_ADDR
// for i = 1 to hexes do
45032: LD_ADDR_VAR 0 9
45036: PUSH
45037: DOUBLE
45038: LD_INT 1
45040: DEC
45041: ST_TO_ADDR
45042: LD_VAR 0 14
45046: PUSH
45047: FOR_TO
45048: IFFALSE 45724
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45050: LD_ADDR_VAR 0 13
45054: PUSH
45055: LD_VAR 0 14
45059: PUSH
45060: LD_VAR 0 9
45064: ARRAY
45065: PUSH
45066: LD_INT 1
45068: ARRAY
45069: PPUSH
45070: LD_VAR 0 14
45074: PUSH
45075: LD_VAR 0 9
45079: ARRAY
45080: PUSH
45081: LD_INT 2
45083: ARRAY
45084: PPUSH
45085: CALL_OW 428
45089: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45090: LD_VAR 0 14
45094: PUSH
45095: LD_VAR 0 9
45099: ARRAY
45100: PUSH
45101: LD_INT 1
45103: ARRAY
45104: PPUSH
45105: LD_VAR 0 14
45109: PUSH
45110: LD_VAR 0 9
45114: ARRAY
45115: PUSH
45116: LD_INT 2
45118: ARRAY
45119: PPUSH
45120: CALL_OW 351
45124: PUSH
45125: LD_VAR 0 14
45129: PUSH
45130: LD_VAR 0 9
45134: ARRAY
45135: PUSH
45136: LD_INT 1
45138: ARRAY
45139: PPUSH
45140: LD_VAR 0 14
45144: PUSH
45145: LD_VAR 0 9
45149: ARRAY
45150: PUSH
45151: LD_INT 2
45153: ARRAY
45154: PPUSH
45155: CALL_OW 488
45159: NOT
45160: OR
45161: PUSH
45162: LD_VAR 0 13
45166: PPUSH
45167: CALL_OW 247
45171: PUSH
45172: LD_INT 3
45174: EQUAL
45175: OR
45176: IFFALSE 45182
// exit ;
45178: POP
45179: POP
45180: GO 45726
// if not tmp then
45182: LD_VAR 0 13
45186: NOT
45187: IFFALSE 45191
// continue ;
45189: GO 45047
// result := true ;
45191: LD_ADDR_VAR 0 8
45195: PUSH
45196: LD_INT 1
45198: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45199: LD_VAR 0 6
45203: PUSH
45204: LD_VAR 0 13
45208: PPUSH
45209: CALL_OW 247
45213: PUSH
45214: LD_INT 2
45216: EQUAL
45217: AND
45218: PUSH
45219: LD_VAR 0 13
45223: PPUSH
45224: CALL_OW 263
45228: PUSH
45229: LD_INT 1
45231: EQUAL
45232: AND
45233: IFFALSE 45397
// begin if IsDrivenBy ( tmp ) then
45235: LD_VAR 0 13
45239: PPUSH
45240: CALL_OW 311
45244: IFFALSE 45248
// continue ;
45246: GO 45047
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45248: LD_VAR 0 6
45252: PPUSH
45253: LD_INT 3
45255: PUSH
45256: LD_INT 60
45258: PUSH
45259: EMPTY
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 55
45271: PUSH
45272: EMPTY
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PPUSH
45283: CALL_OW 72
45287: IFFALSE 45395
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45289: LD_ADDR_VAR 0 18
45293: PUSH
45294: LD_VAR 0 6
45298: PPUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 60
45304: PUSH
45305: EMPTY
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: LD_INT 55
45317: PUSH
45318: EMPTY
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PPUSH
45329: CALL_OW 72
45333: PUSH
45334: LD_INT 1
45336: ARRAY
45337: ST_TO_ADDR
// if IsInUnit ( driver ) then
45338: LD_VAR 0 18
45342: PPUSH
45343: CALL_OW 310
45347: IFFALSE 45358
// ComExit ( driver ) ;
45349: LD_VAR 0 18
45353: PPUSH
45354: CALL 70780 0 1
// AddComEnterUnit ( driver , tmp ) ;
45358: LD_VAR 0 18
45362: PPUSH
45363: LD_VAR 0 13
45367: PPUSH
45368: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45372: LD_VAR 0 18
45376: PPUSH
45377: LD_VAR 0 7
45381: PPUSH
45382: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45386: LD_VAR 0 18
45390: PPUSH
45391: CALL_OW 181
// end ; continue ;
45395: GO 45047
// end ; if not cleaners or not tmp in cleaners then
45397: LD_VAR 0 6
45401: NOT
45402: PUSH
45403: LD_VAR 0 13
45407: PUSH
45408: LD_VAR 0 6
45412: IN
45413: NOT
45414: OR
45415: IFFALSE 45722
// begin if dep then
45417: LD_VAR 0 17
45421: IFFALSE 45557
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45423: LD_ADDR_VAR 0 16
45427: PUSH
45428: LD_VAR 0 17
45432: PUSH
45433: LD_INT 1
45435: ARRAY
45436: PPUSH
45437: CALL_OW 250
45441: PPUSH
45442: LD_VAR 0 17
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: CALL_OW 254
45455: PPUSH
45456: LD_INT 5
45458: PPUSH
45459: CALL_OW 272
45463: PUSH
45464: LD_VAR 0 17
45468: PUSH
45469: LD_INT 1
45471: ARRAY
45472: PPUSH
45473: CALL_OW 251
45477: PPUSH
45478: LD_VAR 0 17
45482: PUSH
45483: LD_INT 1
45485: ARRAY
45486: PPUSH
45487: CALL_OW 254
45491: PPUSH
45492: LD_INT 5
45494: PPUSH
45495: CALL_OW 273
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45504: LD_VAR 0 16
45508: PUSH
45509: LD_INT 1
45511: ARRAY
45512: PPUSH
45513: LD_VAR 0 16
45517: PUSH
45518: LD_INT 2
45520: ARRAY
45521: PPUSH
45522: CALL_OW 488
45526: IFFALSE 45557
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45528: LD_VAR 0 13
45532: PPUSH
45533: LD_VAR 0 16
45537: PUSH
45538: LD_INT 1
45540: ARRAY
45541: PPUSH
45542: LD_VAR 0 16
45546: PUSH
45547: LD_INT 2
45549: ARRAY
45550: PPUSH
45551: CALL_OW 111
// continue ;
45555: GO 45047
// end ; end ; r := GetDir ( tmp ) ;
45557: LD_ADDR_VAR 0 15
45561: PUSH
45562: LD_VAR 0 13
45566: PPUSH
45567: CALL_OW 254
45571: ST_TO_ADDR
// if r = 5 then
45572: LD_VAR 0 15
45576: PUSH
45577: LD_INT 5
45579: EQUAL
45580: IFFALSE 45590
// r := 0 ;
45582: LD_ADDR_VAR 0 15
45586: PUSH
45587: LD_INT 0
45589: ST_TO_ADDR
// for j = r to 5 do
45590: LD_ADDR_VAR 0 10
45594: PUSH
45595: DOUBLE
45596: LD_VAR 0 15
45600: DEC
45601: ST_TO_ADDR
45602: LD_INT 5
45604: PUSH
45605: FOR_TO
45606: IFFALSE 45720
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45608: LD_ADDR_VAR 0 11
45612: PUSH
45613: LD_VAR 0 13
45617: PPUSH
45618: CALL_OW 250
45622: PPUSH
45623: LD_VAR 0 10
45627: PPUSH
45628: LD_INT 2
45630: PPUSH
45631: CALL_OW 272
45635: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45636: LD_ADDR_VAR 0 12
45640: PUSH
45641: LD_VAR 0 13
45645: PPUSH
45646: CALL_OW 251
45650: PPUSH
45651: LD_VAR 0 10
45655: PPUSH
45656: LD_INT 2
45658: PPUSH
45659: CALL_OW 273
45663: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45664: LD_VAR 0 11
45668: PPUSH
45669: LD_VAR 0 12
45673: PPUSH
45674: CALL_OW 488
45678: PUSH
45679: LD_VAR 0 11
45683: PPUSH
45684: LD_VAR 0 12
45688: PPUSH
45689: CALL_OW 428
45693: NOT
45694: AND
45695: IFFALSE 45718
// begin ComMoveXY ( tmp , _x , _y ) ;
45697: LD_VAR 0 13
45701: PPUSH
45702: LD_VAR 0 11
45706: PPUSH
45707: LD_VAR 0 12
45711: PPUSH
45712: CALL_OW 111
// break ;
45716: GO 45720
// end ; end ;
45718: GO 45605
45720: POP
45721: POP
// end ; end ;
45722: GO 45047
45724: POP
45725: POP
// end ;
45726: LD_VAR 0 8
45730: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45731: LD_INT 0
45733: PPUSH
// result := true ;
45734: LD_ADDR_VAR 0 3
45738: PUSH
45739: LD_INT 1
45741: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45742: LD_VAR 0 2
45746: PUSH
45747: LD_INT 24
45749: DOUBLE
45750: EQUAL
45751: IFTRUE 45761
45753: LD_INT 33
45755: DOUBLE
45756: EQUAL
45757: IFTRUE 45761
45759: GO 45786
45761: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45762: LD_ADDR_VAR 0 3
45766: PUSH
45767: LD_INT 32
45769: PPUSH
45770: LD_VAR 0 1
45774: PPUSH
45775: CALL_OW 321
45779: PUSH
45780: LD_INT 2
45782: EQUAL
45783: ST_TO_ADDR
45784: GO 46102
45786: LD_INT 20
45788: DOUBLE
45789: EQUAL
45790: IFTRUE 45794
45792: GO 45819
45794: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45795: LD_ADDR_VAR 0 3
45799: PUSH
45800: LD_INT 6
45802: PPUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 321
45812: PUSH
45813: LD_INT 2
45815: EQUAL
45816: ST_TO_ADDR
45817: GO 46102
45819: LD_INT 22
45821: DOUBLE
45822: EQUAL
45823: IFTRUE 45833
45825: LD_INT 36
45827: DOUBLE
45828: EQUAL
45829: IFTRUE 45833
45831: GO 45858
45833: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_INT 15
45841: PPUSH
45842: LD_VAR 0 1
45846: PPUSH
45847: CALL_OW 321
45851: PUSH
45852: LD_INT 2
45854: EQUAL
45855: ST_TO_ADDR
45856: GO 46102
45858: LD_INT 30
45860: DOUBLE
45861: EQUAL
45862: IFTRUE 45866
45864: GO 45891
45866: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45867: LD_ADDR_VAR 0 3
45871: PUSH
45872: LD_INT 20
45874: PPUSH
45875: LD_VAR 0 1
45879: PPUSH
45880: CALL_OW 321
45884: PUSH
45885: LD_INT 2
45887: EQUAL
45888: ST_TO_ADDR
45889: GO 46102
45891: LD_INT 28
45893: DOUBLE
45894: EQUAL
45895: IFTRUE 45905
45897: LD_INT 21
45899: DOUBLE
45900: EQUAL
45901: IFTRUE 45905
45903: GO 45930
45905: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45906: LD_ADDR_VAR 0 3
45910: PUSH
45911: LD_INT 21
45913: PPUSH
45914: LD_VAR 0 1
45918: PPUSH
45919: CALL_OW 321
45923: PUSH
45924: LD_INT 2
45926: EQUAL
45927: ST_TO_ADDR
45928: GO 46102
45930: LD_INT 16
45932: DOUBLE
45933: EQUAL
45934: IFTRUE 45938
45936: GO 45963
45938: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45939: LD_ADDR_VAR 0 3
45943: PUSH
45944: LD_INT 84
45946: PPUSH
45947: LD_VAR 0 1
45951: PPUSH
45952: CALL_OW 321
45956: PUSH
45957: LD_INT 2
45959: EQUAL
45960: ST_TO_ADDR
45961: GO 46102
45963: LD_INT 19
45965: DOUBLE
45966: EQUAL
45967: IFTRUE 45977
45969: LD_INT 23
45971: DOUBLE
45972: EQUAL
45973: IFTRUE 45977
45975: GO 46002
45977: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45978: LD_ADDR_VAR 0 3
45982: PUSH
45983: LD_INT 83
45985: PPUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: CALL_OW 321
45995: PUSH
45996: LD_INT 2
45998: EQUAL
45999: ST_TO_ADDR
46000: GO 46102
46002: LD_INT 17
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46010
46008: GO 46035
46010: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46011: LD_ADDR_VAR 0 3
46015: PUSH
46016: LD_INT 39
46018: PPUSH
46019: LD_VAR 0 1
46023: PPUSH
46024: CALL_OW 321
46028: PUSH
46029: LD_INT 2
46031: EQUAL
46032: ST_TO_ADDR
46033: GO 46102
46035: LD_INT 18
46037: DOUBLE
46038: EQUAL
46039: IFTRUE 46043
46041: GO 46068
46043: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46044: LD_ADDR_VAR 0 3
46048: PUSH
46049: LD_INT 40
46051: PPUSH
46052: LD_VAR 0 1
46056: PPUSH
46057: CALL_OW 321
46061: PUSH
46062: LD_INT 2
46064: EQUAL
46065: ST_TO_ADDR
46066: GO 46102
46068: LD_INT 27
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46101
46076: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 35
46084: PPUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: CALL_OW 321
46094: PUSH
46095: LD_INT 2
46097: EQUAL
46098: ST_TO_ADDR
46099: GO 46102
46101: POP
// end ;
46102: LD_VAR 0 3
46106: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46107: LD_INT 0
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
// result := false ;
46120: LD_ADDR_VAR 0 6
46124: PUSH
46125: LD_INT 0
46127: ST_TO_ADDR
// if btype = b_depot then
46128: LD_VAR 0 2
46132: PUSH
46133: LD_INT 0
46135: EQUAL
46136: IFFALSE 46148
// begin result := true ;
46138: LD_ADDR_VAR 0 6
46142: PUSH
46143: LD_INT 1
46145: ST_TO_ADDR
// exit ;
46146: GO 46974
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46148: LD_VAR 0 1
46152: NOT
46153: PUSH
46154: LD_VAR 0 1
46158: PPUSH
46159: CALL_OW 266
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: IN
46174: NOT
46175: OR
46176: PUSH
46177: LD_VAR 0 2
46181: NOT
46182: OR
46183: PUSH
46184: LD_VAR 0 5
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 4
46203: PUSH
46204: LD_INT 5
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: IN
46215: NOT
46216: OR
46217: PUSH
46218: LD_VAR 0 3
46222: PPUSH
46223: LD_VAR 0 4
46227: PPUSH
46228: CALL_OW 488
46232: NOT
46233: OR
46234: IFFALSE 46238
// exit ;
46236: GO 46974
// side := GetSide ( depot ) ;
46238: LD_ADDR_VAR 0 9
46242: PUSH
46243: LD_VAR 0 1
46247: PPUSH
46248: CALL_OW 255
46252: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46253: LD_VAR 0 9
46257: PPUSH
46258: LD_VAR 0 2
46262: PPUSH
46263: CALL 45731 0 2
46267: NOT
46268: IFFALSE 46272
// exit ;
46270: GO 46974
// pom := GetBase ( depot ) ;
46272: LD_ADDR_VAR 0 10
46276: PUSH
46277: LD_VAR 0 1
46281: PPUSH
46282: CALL_OW 274
46286: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46287: LD_ADDR_VAR 0 11
46291: PUSH
46292: LD_VAR 0 2
46296: PPUSH
46297: LD_VAR 0 1
46301: PPUSH
46302: CALL_OW 248
46306: PPUSH
46307: CALL_OW 450
46311: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46312: LD_VAR 0 10
46316: PPUSH
46317: LD_INT 1
46319: PPUSH
46320: CALL_OW 275
46324: PUSH
46325: LD_VAR 0 11
46329: PUSH
46330: LD_INT 1
46332: ARRAY
46333: GREATEREQUAL
46334: PUSH
46335: LD_VAR 0 10
46339: PPUSH
46340: LD_INT 2
46342: PPUSH
46343: CALL_OW 275
46347: PUSH
46348: LD_VAR 0 11
46352: PUSH
46353: LD_INT 2
46355: ARRAY
46356: GREATEREQUAL
46357: AND
46358: PUSH
46359: LD_VAR 0 10
46363: PPUSH
46364: LD_INT 3
46366: PPUSH
46367: CALL_OW 275
46371: PUSH
46372: LD_VAR 0 11
46376: PUSH
46377: LD_INT 3
46379: ARRAY
46380: GREATEREQUAL
46381: AND
46382: NOT
46383: IFFALSE 46387
// exit ;
46385: GO 46974
// if GetBType ( depot ) = b_depot then
46387: LD_VAR 0 1
46391: PPUSH
46392: CALL_OW 266
46396: PUSH
46397: LD_INT 0
46399: EQUAL
46400: IFFALSE 46412
// dist := 28 else
46402: LD_ADDR_VAR 0 14
46406: PUSH
46407: LD_INT 28
46409: ST_TO_ADDR
46410: GO 46420
// dist := 36 ;
46412: LD_ADDR_VAR 0 14
46416: PUSH
46417: LD_INT 36
46419: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46420: LD_VAR 0 1
46424: PPUSH
46425: LD_VAR 0 3
46429: PPUSH
46430: LD_VAR 0 4
46434: PPUSH
46435: CALL_OW 297
46439: PUSH
46440: LD_VAR 0 14
46444: GREATER
46445: IFFALSE 46449
// exit ;
46447: GO 46974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46449: LD_ADDR_VAR 0 12
46453: PUSH
46454: LD_VAR 0 2
46458: PPUSH
46459: LD_VAR 0 3
46463: PPUSH
46464: LD_VAR 0 4
46468: PPUSH
46469: LD_VAR 0 5
46473: PPUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 248
46483: PPUSH
46484: LD_INT 0
46486: PPUSH
46487: CALL 46979 0 6
46491: ST_TO_ADDR
// if not hexes then
46492: LD_VAR 0 12
46496: NOT
46497: IFFALSE 46501
// exit ;
46499: GO 46974
// hex := GetHexInfo ( x , y ) ;
46501: LD_ADDR_VAR 0 15
46505: PUSH
46506: LD_VAR 0 3
46510: PPUSH
46511: LD_VAR 0 4
46515: PPUSH
46516: CALL_OW 546
46520: ST_TO_ADDR
// if hex [ 1 ] then
46521: LD_VAR 0 15
46525: PUSH
46526: LD_INT 1
46528: ARRAY
46529: IFFALSE 46533
// exit ;
46531: GO 46974
// height := hex [ 2 ] ;
46533: LD_ADDR_VAR 0 13
46537: PUSH
46538: LD_VAR 0 15
46542: PUSH
46543: LD_INT 2
46545: ARRAY
46546: ST_TO_ADDR
// for i = 1 to hexes do
46547: LD_ADDR_VAR 0 7
46551: PUSH
46552: DOUBLE
46553: LD_INT 1
46555: DEC
46556: ST_TO_ADDR
46557: LD_VAR 0 12
46561: PUSH
46562: FOR_TO
46563: IFFALSE 46893
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46565: LD_VAR 0 12
46569: PUSH
46570: LD_VAR 0 7
46574: ARRAY
46575: PUSH
46576: LD_INT 1
46578: ARRAY
46579: PPUSH
46580: LD_VAR 0 12
46584: PUSH
46585: LD_VAR 0 7
46589: ARRAY
46590: PUSH
46591: LD_INT 2
46593: ARRAY
46594: PPUSH
46595: CALL_OW 488
46599: NOT
46600: PUSH
46601: LD_VAR 0 12
46605: PUSH
46606: LD_VAR 0 7
46610: ARRAY
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: PPUSH
46616: LD_VAR 0 12
46620: PUSH
46621: LD_VAR 0 7
46625: ARRAY
46626: PUSH
46627: LD_INT 2
46629: ARRAY
46630: PPUSH
46631: CALL_OW 428
46635: PUSH
46636: LD_INT 0
46638: GREATER
46639: OR
46640: PUSH
46641: LD_VAR 0 12
46645: PUSH
46646: LD_VAR 0 7
46650: ARRAY
46651: PUSH
46652: LD_INT 1
46654: ARRAY
46655: PPUSH
46656: LD_VAR 0 12
46660: PUSH
46661: LD_VAR 0 7
46665: ARRAY
46666: PUSH
46667: LD_INT 2
46669: ARRAY
46670: PPUSH
46671: CALL_OW 351
46675: OR
46676: IFFALSE 46682
// exit ;
46678: POP
46679: POP
46680: GO 46974
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46682: LD_ADDR_VAR 0 8
46686: PUSH
46687: LD_VAR 0 12
46691: PUSH
46692: LD_VAR 0 7
46696: ARRAY
46697: PUSH
46698: LD_INT 1
46700: ARRAY
46701: PPUSH
46702: LD_VAR 0 12
46706: PUSH
46707: LD_VAR 0 7
46711: ARRAY
46712: PUSH
46713: LD_INT 2
46715: ARRAY
46716: PPUSH
46717: CALL_OW 546
46721: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46722: LD_VAR 0 8
46726: PUSH
46727: LD_INT 1
46729: ARRAY
46730: PUSH
46731: LD_VAR 0 8
46735: PUSH
46736: LD_INT 2
46738: ARRAY
46739: PUSH
46740: LD_VAR 0 13
46744: PUSH
46745: LD_INT 2
46747: PLUS
46748: GREATER
46749: OR
46750: PUSH
46751: LD_VAR 0 8
46755: PUSH
46756: LD_INT 2
46758: ARRAY
46759: PUSH
46760: LD_VAR 0 13
46764: PUSH
46765: LD_INT 2
46767: MINUS
46768: LESS
46769: OR
46770: PUSH
46771: LD_VAR 0 8
46775: PUSH
46776: LD_INT 3
46778: ARRAY
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 8
46785: PUSH
46786: LD_INT 9
46788: PUSH
46789: LD_INT 10
46791: PUSH
46792: LD_INT 11
46794: PUSH
46795: LD_INT 12
46797: PUSH
46798: LD_INT 13
46800: PUSH
46801: LD_INT 16
46803: PUSH
46804: LD_INT 17
46806: PUSH
46807: LD_INT 18
46809: PUSH
46810: LD_INT 19
46812: PUSH
46813: LD_INT 20
46815: PUSH
46816: LD_INT 21
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: IN
46834: NOT
46835: OR
46836: PUSH
46837: LD_VAR 0 8
46841: PUSH
46842: LD_INT 5
46844: ARRAY
46845: NOT
46846: OR
46847: PUSH
46848: LD_VAR 0 8
46852: PUSH
46853: LD_INT 6
46855: ARRAY
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 7
46865: PUSH
46866: LD_INT 9
46868: PUSH
46869: LD_INT 10
46871: PUSH
46872: LD_INT 11
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: IN
46883: NOT
46884: OR
46885: IFFALSE 46891
// exit ;
46887: POP
46888: POP
46889: GO 46974
// end ;
46891: GO 46562
46893: POP
46894: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46895: LD_VAR 0 9
46899: PPUSH
46900: LD_VAR 0 3
46904: PPUSH
46905: LD_VAR 0 4
46909: PPUSH
46910: LD_INT 20
46912: PPUSH
46913: CALL 38897 0 4
46917: PUSH
46918: LD_INT 4
46920: ARRAY
46921: IFFALSE 46925
// exit ;
46923: GO 46974
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46925: LD_VAR 0 2
46929: PUSH
46930: LD_INT 29
46932: PUSH
46933: LD_INT 30
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: IN
46940: PUSH
46941: LD_VAR 0 3
46945: PPUSH
46946: LD_VAR 0 4
46950: PPUSH
46951: LD_VAR 0 9
46955: PPUSH
46956: CALL_OW 440
46960: NOT
46961: AND
46962: IFFALSE 46966
// exit ;
46964: GO 46974
// result := true ;
46966: LD_ADDR_VAR 0 6
46970: PUSH
46971: LD_INT 1
46973: ST_TO_ADDR
// end ;
46974: LD_VAR 0 6
46978: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46979: LD_INT 0
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
47018: PPUSH
47019: PPUSH
47020: PPUSH
47021: PPUSH
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
47026: PPUSH
47027: PPUSH
47028: PPUSH
47029: PPUSH
47030: PPUSH
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
47037: PPUSH
47038: PPUSH
// result = [ ] ;
47039: LD_ADDR_VAR 0 7
47043: PUSH
47044: EMPTY
47045: ST_TO_ADDR
// temp_list = [ ] ;
47046: LD_ADDR_VAR 0 9
47050: PUSH
47051: EMPTY
47052: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47053: LD_VAR 0 4
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 4
47072: PUSH
47073: LD_INT 5
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: IN
47084: NOT
47085: PUSH
47086: LD_VAR 0 1
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: IN
47101: PUSH
47102: LD_VAR 0 5
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: IN
47121: NOT
47122: AND
47123: OR
47124: IFFALSE 47128
// exit ;
47126: GO 65519
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47128: LD_VAR 0 1
47132: PUSH
47133: LD_INT 6
47135: PUSH
47136: LD_INT 7
47138: PUSH
47139: LD_INT 8
47141: PUSH
47142: LD_INT 13
47144: PUSH
47145: LD_INT 12
47147: PUSH
47148: LD_INT 15
47150: PUSH
47151: LD_INT 11
47153: PUSH
47154: LD_INT 14
47156: PUSH
47157: LD_INT 10
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: IN
47171: IFFALSE 47181
// btype = b_lab ;
47173: LD_ADDR_VAR 0 1
47177: PUSH
47178: LD_INT 6
47180: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47181: LD_VAR 0 6
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: IN
47200: NOT
47201: PUSH
47202: LD_VAR 0 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 6
47221: PUSH
47222: LD_INT 36
47224: PUSH
47225: LD_INT 4
47227: PUSH
47228: LD_INT 5
47230: PUSH
47231: LD_INT 31
47233: PUSH
47234: LD_INT 32
47236: PUSH
47237: LD_INT 33
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: IN
47253: NOT
47254: PUSH
47255: LD_VAR 0 6
47259: PUSH
47260: LD_INT 1
47262: EQUAL
47263: AND
47264: OR
47265: PUSH
47266: LD_VAR 0 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: IN
47281: NOT
47282: PUSH
47283: LD_VAR 0 6
47287: PUSH
47288: LD_INT 2
47290: EQUAL
47291: AND
47292: OR
47293: IFFALSE 47303
// mode = 0 ;
47295: LD_ADDR_VAR 0 6
47299: PUSH
47300: LD_INT 0
47302: ST_TO_ADDR
// case mode of 0 :
47303: LD_VAR 0 6
47307: PUSH
47308: LD_INT 0
47310: DOUBLE
47311: EQUAL
47312: IFTRUE 47316
47314: GO 58769
47316: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47317: LD_ADDR_VAR 0 11
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47510: LD_ADDR_VAR 0 12
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47706: LD_ADDR_VAR 0 13
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47905: LD_ADDR_VAR 0 14
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48101: LD_ADDR_VAR 0 15
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48294: LD_ADDR_VAR 0 16
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48487: LD_ADDR_VAR 0 17
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48717: LD_ADDR_VAR 0 18
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48947: LD_ADDR_VAR 0 19
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49177: LD_ADDR_VAR 0 20
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49407: LD_ADDR_VAR 0 21
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49637: LD_ADDR_VAR 0 22
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49867: LD_ADDR_VAR 0 23
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50147: LD_ADDR_VAR 0 24
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50423: LD_ADDR_VAR 0 25
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50697: LD_ADDR_VAR 0 26
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50973: LD_ADDR_VAR 0 27
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51253: LD_ADDR_VAR 0 28
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51535: LD_ADDR_VAR 0 29
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51814: LD_ADDR_VAR 0 30
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52092: LD_ADDR_VAR 0 31
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52370: LD_ADDR_VAR 0 32
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52648: LD_ADDR_VAR 0 33
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52927: LD_ADDR_VAR 0 34
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53207: LD_ADDR_VAR 0 35
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53319: LD_ADDR_VAR 0 36
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53431: LD_ADDR_VAR 0 37
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53543: LD_ADDR_VAR 0 38
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53655: LD_ADDR_VAR 0 39
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53767: LD_ADDR_VAR 0 40
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53879: LD_ADDR_VAR 0 41
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 3
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54229: LD_ADDR_VAR 0 42
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54579: LD_ADDR_VAR 0 43
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54927: LD_ADDR_VAR 0 44
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55277: LD_ADDR_VAR 0 45
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 3
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 3
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55627: LD_ADDR_VAR 0 46
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55975: LD_ADDR_VAR 0 47
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56126: LD_ADDR_VAR 0 48
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56273: LD_ADDR_VAR 0 49
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56417: LD_ADDR_VAR 0 50
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56561: LD_ADDR_VAR 0 51
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56708: LD_ADDR_VAR 0 52
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56859: LD_ADDR_VAR 0 53
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57089: LD_ADDR_VAR 0 54
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57319: LD_ADDR_VAR 0 55
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57549: LD_ADDR_VAR 0 56
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57779: LD_ADDR_VAR 0 57
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58009: LD_ADDR_VAR 0 58
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58239: LD_ADDR_VAR 0 59
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58327: LD_ADDR_VAR 0 60
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58415: LD_ADDR_VAR 0 61
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58503: LD_ADDR_VAR 0 62
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58591: LD_ADDR_VAR 0 63
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58679: LD_ADDR_VAR 0 64
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: ST_TO_ADDR
// end ; 1 :
58767: GO 64664
58769: LD_INT 1
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58777
58775: GO 61400
58777: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58778: LD_ADDR_VAR 0 11
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58822: LD_ADDR_VAR 0 12
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58863: LD_ADDR_VAR 0 13
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58903: LD_ADDR_VAR 0 14
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58944: LD_ADDR_VAR 0 15
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58988: LD_ADDR_VAR 0 16
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59034: LD_ADDR_VAR 0 17
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59078: LD_ADDR_VAR 0 18
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59119: LD_ADDR_VAR 0 19
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59159: LD_ADDR_VAR 0 20
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59200: LD_ADDR_VAR 0 21
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59244: LD_ADDR_VAR 0 22
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59290: LD_ADDR_VAR 0 23
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 4
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59334: LD_ADDR_VAR 0 24
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59375: LD_ADDR_VAR 0 25
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: LD_INT 3
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59415: LD_ADDR_VAR 0 26
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59456: LD_ADDR_VAR 0 27
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59500: LD_ADDR_VAR 0 28
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 4
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 4
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59546: LD_ADDR_VAR 0 29
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 4
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 6
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 6
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59701: LD_ADDR_VAR 0 30
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 5
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 5
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 6
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 6
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59844: LD_ADDR_VAR 0 31
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 4
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 5
59911: PUSH
59912: LD_INT 4
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 5
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: LD_INT 5
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 6
59941: PUSH
59942: LD_INT 5
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 6
59951: PUSH
59952: LD_INT 6
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 5
59961: PUSH
59962: LD_INT 6
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59983: LD_ADDR_VAR 0 32
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 4
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 5
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 5
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 4
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 6
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 6
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60126: LD_ADDR_VAR 0 33
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 4
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 5
60212: NEG
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 5
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 5
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 6
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 6
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60281: LD_ADDR_VAR 0 34
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: NEG
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 4
60348: NEG
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 4
60360: NEG
60361: PUSH
60362: LD_INT 5
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 5
60372: NEG
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 5
60384: NEG
60385: PUSH
60386: LD_INT 5
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 5
60396: NEG
60397: PUSH
60398: LD_INT 6
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 6
60408: NEG
60409: PUSH
60410: LD_INT 5
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 6
60420: NEG
60421: PUSH
60422: LD_INT 6
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60444: LD_ADDR_VAR 0 41
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60488: LD_ADDR_VAR 0 42
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60529: LD_ADDR_VAR 0 43
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 3
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60569: LD_ADDR_VAR 0 44
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60610: LD_ADDR_VAR 0 45
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60654: LD_ADDR_VAR 0 46
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60700: LD_ADDR_VAR 0 47
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60733: LD_ADDR_VAR 0 48
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60764: LD_ADDR_VAR 0 49
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60793: LD_ADDR_VAR 0 50
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: LD_INT 3
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60822: LD_ADDR_VAR 0 51
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60853: LD_ADDR_VAR 0 52
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60886: LD_ADDR_VAR 0 53
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60930: LD_ADDR_VAR 0 54
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60971: LD_ADDR_VAR 0 55
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61011: LD_ADDR_VAR 0 56
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61052: LD_ADDR_VAR 0 57
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61096: LD_ADDR_VAR 0 58
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61142: LD_ADDR_VAR 0 59
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61186: LD_ADDR_VAR 0 60
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61227: LD_ADDR_VAR 0 61
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61267: LD_ADDR_VAR 0 62
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61308: LD_ADDR_VAR 0 63
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61352: LD_ADDR_VAR 0 64
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: ST_TO_ADDR
// end ; 2 :
61398: GO 64664
61400: LD_INT 2
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61408
61406: GO 64663
61408: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61409: LD_ADDR_VAR 0 29
61413: PUSH
61414: LD_INT 4
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 5
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 5
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 4
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: LD_INT 4
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 4
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 5
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 4
61759: NEG
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: NEG
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 4
61806: NEG
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 4
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 5
61854: NEG
61855: PUSH
61856: LD_INT 4
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 5
61866: NEG
61867: PUSH
61868: LD_INT 5
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: LD_INT 5
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 5
61890: NEG
61891: PUSH
61892: LD_INT 3
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61947: LD_ADDR_VAR 0 30
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: LD_INT 4
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 4
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: LD_INT 5
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: LD_INT 5
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: LD_INT 4
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 4
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 4
62182: NEG
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 5
62193: NEG
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: NEG
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 5
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 3
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 4
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 4
62299: NEG
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: NEG
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: LD_INT 4
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 4
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 4
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 5
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 4
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 5
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: LD_INT 5
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62494: LD_ADDR_VAR 0 31
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 5
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 5
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 5
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 2
62628: NEG
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 3
62639: NEG
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 4
62650: NEG
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 4
62673: NEG
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 4
62696: NEG
62697: PUSH
62698: LD_INT 4
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 4
62708: NEG
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: LD_INT 4
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: NEG
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 4
62744: NEG
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 5
62756: NEG
62757: PUSH
62758: LD_INT 4
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 5
62768: NEG
62769: PUSH
62770: LD_INT 5
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: LD_INT 5
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 5
62792: NEG
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 4
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 4
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 4
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 4
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 5
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 5
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 4
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 5
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63044: LD_ADDR_VAR 0 32
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 4
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 5
63107: NEG
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 5
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 5
63130: NEG
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: LD_INT 3
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: LD_INT 4
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 4
63213: NEG
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 4
63225: NEG
63226: PUSH
63227: LD_INT 4
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 5
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 4
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 3
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 4
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 5
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 3
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: LD_INT 5
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 3
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 4
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 4
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 3
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 4
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 4
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 5
63476: PUSH
63477: LD_INT 4
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 5
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 4
63496: PUSH
63497: LD_INT 5
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 3
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 3
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: LD_INT 5
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63591: LD_ADDR_VAR 0 33
63595: PUSH
63596: LD_INT 4
63598: NEG
63599: PUSH
63600: LD_INT 4
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 4
63610: NEG
63611: PUSH
63612: LD_INT 5
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: LD_INT 4
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 4
63646: NEG
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 5
63658: NEG
63659: PUSH
63660: LD_INT 4
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: NEG
63671: PUSH
63672: LD_INT 5
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: LD_INT 5
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 5
63694: NEG
63695: PUSH
63696: LD_INT 3
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: LD_INT 3
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 4
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: LD_INT 4
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: LD_INT 4
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 4
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 4
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 3
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 5
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 3
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 4
63921: PUSH
63922: LD_INT 3
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 4
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: LD_INT 4
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 4
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: LD_INT 4
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 4
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 4
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 5
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 5
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 5
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64129: LD_ADDR_VAR 0 34
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 4
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 5
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: LD_INT 4
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 4
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 5
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: LD_INT 3
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: LD_INT 5
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 4
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 4
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 4
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: LD_INT 4
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 4
64341: PUSH
64342: LD_INT 3
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 5
64351: PUSH
64352: LD_INT 4
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 5
64361: PUSH
64362: LD_INT 5
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 4
64371: PUSH
64372: LD_INT 5
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: LD_INT 3
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 5
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 5
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: LD_INT 3
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: NEG
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 4
64514: NEG
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 4
64525: NEG
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: NEG
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 4
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 5
64570: NEG
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 5
64581: NEG
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 5
64593: NEG
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// end ; end ;
64661: GO 64664
64663: POP
// case btype of b_depot , b_warehouse :
64664: LD_VAR 0 1
64668: PUSH
64669: LD_INT 0
64671: DOUBLE
64672: EQUAL
64673: IFTRUE 64683
64675: LD_INT 1
64677: DOUBLE
64678: EQUAL
64679: IFTRUE 64683
64681: GO 64884
64683: POP
// case nation of nation_american :
64684: LD_VAR 0 5
64688: PUSH
64689: LD_INT 1
64691: DOUBLE
64692: EQUAL
64693: IFTRUE 64697
64695: GO 64753
64697: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64698: LD_ADDR_VAR 0 9
64702: PUSH
64703: LD_VAR 0 11
64707: PUSH
64708: LD_VAR 0 12
64712: PUSH
64713: LD_VAR 0 13
64717: PUSH
64718: LD_VAR 0 14
64722: PUSH
64723: LD_VAR 0 15
64727: PUSH
64728: LD_VAR 0 16
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: PUSH
64741: LD_VAR 0 4
64745: PUSH
64746: LD_INT 1
64748: PLUS
64749: ARRAY
64750: ST_TO_ADDR
64751: GO 64882
64753: LD_INT 2
64755: DOUBLE
64756: EQUAL
64757: IFTRUE 64761
64759: GO 64817
64761: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64762: LD_ADDR_VAR 0 9
64766: PUSH
64767: LD_VAR 0 17
64771: PUSH
64772: LD_VAR 0 18
64776: PUSH
64777: LD_VAR 0 19
64781: PUSH
64782: LD_VAR 0 20
64786: PUSH
64787: LD_VAR 0 21
64791: PUSH
64792: LD_VAR 0 22
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: LD_VAR 0 4
64809: PUSH
64810: LD_INT 1
64812: PLUS
64813: ARRAY
64814: ST_TO_ADDR
64815: GO 64882
64817: LD_INT 3
64819: DOUBLE
64820: EQUAL
64821: IFTRUE 64825
64823: GO 64881
64825: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64826: LD_ADDR_VAR 0 9
64830: PUSH
64831: LD_VAR 0 23
64835: PUSH
64836: LD_VAR 0 24
64840: PUSH
64841: LD_VAR 0 25
64845: PUSH
64846: LD_VAR 0 26
64850: PUSH
64851: LD_VAR 0 27
64855: PUSH
64856: LD_VAR 0 28
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: PUSH
64869: LD_VAR 0 4
64873: PUSH
64874: LD_INT 1
64876: PLUS
64877: ARRAY
64878: ST_TO_ADDR
64879: GO 64882
64881: POP
64882: GO 65437
64884: LD_INT 2
64886: DOUBLE
64887: EQUAL
64888: IFTRUE 64898
64890: LD_INT 3
64892: DOUBLE
64893: EQUAL
64894: IFTRUE 64898
64896: GO 64954
64898: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64899: LD_ADDR_VAR 0 9
64903: PUSH
64904: LD_VAR 0 29
64908: PUSH
64909: LD_VAR 0 30
64913: PUSH
64914: LD_VAR 0 31
64918: PUSH
64919: LD_VAR 0 32
64923: PUSH
64924: LD_VAR 0 33
64928: PUSH
64929: LD_VAR 0 34
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 4
64946: PUSH
64947: LD_INT 1
64949: PLUS
64950: ARRAY
64951: ST_TO_ADDR
64952: GO 65437
64954: LD_INT 16
64956: DOUBLE
64957: EQUAL
64958: IFTRUE 65016
64960: LD_INT 17
64962: DOUBLE
64963: EQUAL
64964: IFTRUE 65016
64966: LD_INT 18
64968: DOUBLE
64969: EQUAL
64970: IFTRUE 65016
64972: LD_INT 19
64974: DOUBLE
64975: EQUAL
64976: IFTRUE 65016
64978: LD_INT 22
64980: DOUBLE
64981: EQUAL
64982: IFTRUE 65016
64984: LD_INT 20
64986: DOUBLE
64987: EQUAL
64988: IFTRUE 65016
64990: LD_INT 21
64992: DOUBLE
64993: EQUAL
64994: IFTRUE 65016
64996: LD_INT 23
64998: DOUBLE
64999: EQUAL
65000: IFTRUE 65016
65002: LD_INT 24
65004: DOUBLE
65005: EQUAL
65006: IFTRUE 65016
65008: LD_INT 25
65010: DOUBLE
65011: EQUAL
65012: IFTRUE 65016
65014: GO 65072
65016: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65017: LD_ADDR_VAR 0 9
65021: PUSH
65022: LD_VAR 0 35
65026: PUSH
65027: LD_VAR 0 36
65031: PUSH
65032: LD_VAR 0 37
65036: PUSH
65037: LD_VAR 0 38
65041: PUSH
65042: LD_VAR 0 39
65046: PUSH
65047: LD_VAR 0 40
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: PUSH
65060: LD_VAR 0 4
65064: PUSH
65065: LD_INT 1
65067: PLUS
65068: ARRAY
65069: ST_TO_ADDR
65070: GO 65437
65072: LD_INT 6
65074: DOUBLE
65075: EQUAL
65076: IFTRUE 65128
65078: LD_INT 7
65080: DOUBLE
65081: EQUAL
65082: IFTRUE 65128
65084: LD_INT 8
65086: DOUBLE
65087: EQUAL
65088: IFTRUE 65128
65090: LD_INT 13
65092: DOUBLE
65093: EQUAL
65094: IFTRUE 65128
65096: LD_INT 12
65098: DOUBLE
65099: EQUAL
65100: IFTRUE 65128
65102: LD_INT 15
65104: DOUBLE
65105: EQUAL
65106: IFTRUE 65128
65108: LD_INT 11
65110: DOUBLE
65111: EQUAL
65112: IFTRUE 65128
65114: LD_INT 14
65116: DOUBLE
65117: EQUAL
65118: IFTRUE 65128
65120: LD_INT 10
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65128
65126: GO 65184
65128: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65129: LD_ADDR_VAR 0 9
65133: PUSH
65134: LD_VAR 0 41
65138: PUSH
65139: LD_VAR 0 42
65143: PUSH
65144: LD_VAR 0 43
65148: PUSH
65149: LD_VAR 0 44
65153: PUSH
65154: LD_VAR 0 45
65158: PUSH
65159: LD_VAR 0 46
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: PUSH
65172: LD_VAR 0 4
65176: PUSH
65177: LD_INT 1
65179: PLUS
65180: ARRAY
65181: ST_TO_ADDR
65182: GO 65437
65184: LD_INT 36
65186: DOUBLE
65187: EQUAL
65188: IFTRUE 65192
65190: GO 65248
65192: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65193: LD_ADDR_VAR 0 9
65197: PUSH
65198: LD_VAR 0 47
65202: PUSH
65203: LD_VAR 0 48
65207: PUSH
65208: LD_VAR 0 49
65212: PUSH
65213: LD_VAR 0 50
65217: PUSH
65218: LD_VAR 0 51
65222: PUSH
65223: LD_VAR 0 52
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: PUSH
65236: LD_VAR 0 4
65240: PUSH
65241: LD_INT 1
65243: PLUS
65244: ARRAY
65245: ST_TO_ADDR
65246: GO 65437
65248: LD_INT 4
65250: DOUBLE
65251: EQUAL
65252: IFTRUE 65274
65254: LD_INT 5
65256: DOUBLE
65257: EQUAL
65258: IFTRUE 65274
65260: LD_INT 34
65262: DOUBLE
65263: EQUAL
65264: IFTRUE 65274
65266: LD_INT 37
65268: DOUBLE
65269: EQUAL
65270: IFTRUE 65274
65272: GO 65330
65274: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65275: LD_ADDR_VAR 0 9
65279: PUSH
65280: LD_VAR 0 53
65284: PUSH
65285: LD_VAR 0 54
65289: PUSH
65290: LD_VAR 0 55
65294: PUSH
65295: LD_VAR 0 56
65299: PUSH
65300: LD_VAR 0 57
65304: PUSH
65305: LD_VAR 0 58
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: PUSH
65318: LD_VAR 0 4
65322: PUSH
65323: LD_INT 1
65325: PLUS
65326: ARRAY
65327: ST_TO_ADDR
65328: GO 65437
65330: LD_INT 31
65332: DOUBLE
65333: EQUAL
65334: IFTRUE 65380
65336: LD_INT 32
65338: DOUBLE
65339: EQUAL
65340: IFTRUE 65380
65342: LD_INT 33
65344: DOUBLE
65345: EQUAL
65346: IFTRUE 65380
65348: LD_INT 27
65350: DOUBLE
65351: EQUAL
65352: IFTRUE 65380
65354: LD_INT 26
65356: DOUBLE
65357: EQUAL
65358: IFTRUE 65380
65360: LD_INT 28
65362: DOUBLE
65363: EQUAL
65364: IFTRUE 65380
65366: LD_INT 29
65368: DOUBLE
65369: EQUAL
65370: IFTRUE 65380
65372: LD_INT 30
65374: DOUBLE
65375: EQUAL
65376: IFTRUE 65380
65378: GO 65436
65380: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65381: LD_ADDR_VAR 0 9
65385: PUSH
65386: LD_VAR 0 59
65390: PUSH
65391: LD_VAR 0 60
65395: PUSH
65396: LD_VAR 0 61
65400: PUSH
65401: LD_VAR 0 62
65405: PUSH
65406: LD_VAR 0 63
65410: PUSH
65411: LD_VAR 0 64
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: PUSH
65424: LD_VAR 0 4
65428: PUSH
65429: LD_INT 1
65431: PLUS
65432: ARRAY
65433: ST_TO_ADDR
65434: GO 65437
65436: POP
// temp_list2 = [ ] ;
65437: LD_ADDR_VAR 0 10
65441: PUSH
65442: EMPTY
65443: ST_TO_ADDR
// for i in temp_list do
65444: LD_ADDR_VAR 0 8
65448: PUSH
65449: LD_VAR 0 9
65453: PUSH
65454: FOR_IN
65455: IFFALSE 65507
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65457: LD_ADDR_VAR 0 10
65461: PUSH
65462: LD_VAR 0 10
65466: PUSH
65467: LD_VAR 0 8
65471: PUSH
65472: LD_INT 1
65474: ARRAY
65475: PUSH
65476: LD_VAR 0 2
65480: PLUS
65481: PUSH
65482: LD_VAR 0 8
65486: PUSH
65487: LD_INT 2
65489: ARRAY
65490: PUSH
65491: LD_VAR 0 3
65495: PLUS
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: ADD
65504: ST_TO_ADDR
65505: GO 65454
65507: POP
65508: POP
// result = temp_list2 ;
65509: LD_ADDR_VAR 0 7
65513: PUSH
65514: LD_VAR 0 10
65518: ST_TO_ADDR
// end ;
65519: LD_VAR 0 7
65523: RET
// export function EnemyInRange ( unit , dist ) ; begin
65524: LD_INT 0
65526: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65527: LD_ADDR_VAR 0 3
65531: PUSH
65532: LD_VAR 0 1
65536: PPUSH
65537: CALL_OW 255
65541: PPUSH
65542: LD_VAR 0 1
65546: PPUSH
65547: CALL_OW 250
65551: PPUSH
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 251
65561: PPUSH
65562: LD_VAR 0 2
65566: PPUSH
65567: CALL 38897 0 4
65571: PUSH
65572: LD_INT 4
65574: ARRAY
65575: ST_TO_ADDR
// end ;
65576: LD_VAR 0 3
65580: RET
// export function PlayerSeeMe ( unit ) ; begin
65581: LD_INT 0
65583: PPUSH
// result := See ( your_side , unit ) ;
65584: LD_ADDR_VAR 0 2
65588: PUSH
65589: LD_OWVAR 2
65593: PPUSH
65594: LD_VAR 0 1
65598: PPUSH
65599: CALL_OW 292
65603: ST_TO_ADDR
// end ;
65604: LD_VAR 0 2
65608: RET
// export function ReverseDir ( unit ) ; begin
65609: LD_INT 0
65611: PPUSH
// if not unit then
65612: LD_VAR 0 1
65616: NOT
65617: IFFALSE 65621
// exit ;
65619: GO 65644
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65621: LD_ADDR_VAR 0 2
65625: PUSH
65626: LD_VAR 0 1
65630: PPUSH
65631: CALL_OW 254
65635: PUSH
65636: LD_INT 3
65638: PLUS
65639: PUSH
65640: LD_INT 6
65642: MOD
65643: ST_TO_ADDR
// end ;
65644: LD_VAR 0 2
65648: RET
// export function ReverseArray ( array ) ; var i ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
// if not array then
65653: LD_VAR 0 1
65657: NOT
65658: IFFALSE 65662
// exit ;
65660: GO 65717
// result := [ ] ;
65662: LD_ADDR_VAR 0 2
65666: PUSH
65667: EMPTY
65668: ST_TO_ADDR
// for i := array downto 1 do
65669: LD_ADDR_VAR 0 3
65673: PUSH
65674: DOUBLE
65675: LD_VAR 0 1
65679: INC
65680: ST_TO_ADDR
65681: LD_INT 1
65683: PUSH
65684: FOR_DOWNTO
65685: IFFALSE 65715
// result := Join ( result , array [ i ] ) ;
65687: LD_ADDR_VAR 0 2
65691: PUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: LD_VAR 0 1
65701: PUSH
65702: LD_VAR 0 3
65706: ARRAY
65707: PPUSH
65708: CALL 70382 0 2
65712: ST_TO_ADDR
65713: GO 65684
65715: POP
65716: POP
// end ;
65717: LD_VAR 0 2
65721: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65722: LD_INT 0
65724: PPUSH
65725: PPUSH
65726: PPUSH
65727: PPUSH
65728: PPUSH
65729: PPUSH
// if not unit or not hexes then
65730: LD_VAR 0 1
65734: NOT
65735: PUSH
65736: LD_VAR 0 2
65740: NOT
65741: OR
65742: IFFALSE 65746
// exit ;
65744: GO 65869
// dist := 9999 ;
65746: LD_ADDR_VAR 0 5
65750: PUSH
65751: LD_INT 9999
65753: ST_TO_ADDR
// for i = 1 to hexes do
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: DOUBLE
65760: LD_INT 1
65762: DEC
65763: ST_TO_ADDR
65764: LD_VAR 0 2
65768: PUSH
65769: FOR_TO
65770: IFFALSE 65857
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65772: LD_ADDR_VAR 0 6
65776: PUSH
65777: LD_VAR 0 1
65781: PPUSH
65782: LD_VAR 0 2
65786: PUSH
65787: LD_VAR 0 4
65791: ARRAY
65792: PUSH
65793: LD_INT 1
65795: ARRAY
65796: PPUSH
65797: LD_VAR 0 2
65801: PUSH
65802: LD_VAR 0 4
65806: ARRAY
65807: PUSH
65808: LD_INT 2
65810: ARRAY
65811: PPUSH
65812: CALL_OW 297
65816: ST_TO_ADDR
// if tdist < dist then
65817: LD_VAR 0 6
65821: PUSH
65822: LD_VAR 0 5
65826: LESS
65827: IFFALSE 65855
// begin hex := hexes [ i ] ;
65829: LD_ADDR_VAR 0 8
65833: PUSH
65834: LD_VAR 0 2
65838: PUSH
65839: LD_VAR 0 4
65843: ARRAY
65844: ST_TO_ADDR
// dist := tdist ;
65845: LD_ADDR_VAR 0 5
65849: PUSH
65850: LD_VAR 0 6
65854: ST_TO_ADDR
// end ; end ;
65855: GO 65769
65857: POP
65858: POP
// result := hex ;
65859: LD_ADDR_VAR 0 3
65863: PUSH
65864: LD_VAR 0 8
65868: ST_TO_ADDR
// end ;
65869: LD_VAR 0 3
65873: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65874: LD_INT 0
65876: PPUSH
65877: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65878: LD_VAR 0 1
65882: NOT
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 21
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 23
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PPUSH
65913: CALL_OW 69
65917: IN
65918: NOT
65919: OR
65920: IFFALSE 65924
// exit ;
65922: GO 65971
// for i = 1 to 3 do
65924: LD_ADDR_VAR 0 3
65928: PUSH
65929: DOUBLE
65930: LD_INT 1
65932: DEC
65933: ST_TO_ADDR
65934: LD_INT 3
65936: PUSH
65937: FOR_TO
65938: IFFALSE 65969
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65940: LD_VAR 0 1
65944: PPUSH
65945: CALL_OW 250
65949: PPUSH
65950: LD_VAR 0 1
65954: PPUSH
65955: CALL_OW 251
65959: PPUSH
65960: LD_INT 1
65962: PPUSH
65963: CALL_OW 453
65967: GO 65937
65969: POP
65970: POP
// end ;
65971: LD_VAR 0 2
65975: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
// if not unit or not enemy_unit then
65984: LD_VAR 0 1
65988: NOT
65989: PUSH
65990: LD_VAR 0 2
65994: NOT
65995: OR
65996: IFFALSE 66000
// exit ;
65998: GO 66467
// if GetLives ( i ) < 250 then
66000: LD_VAR 0 4
66004: PPUSH
66005: CALL_OW 256
66009: PUSH
66010: LD_INT 250
66012: LESS
66013: IFFALSE 66026
// begin ComAutodestruct ( i ) ;
66015: LD_VAR 0 4
66019: PPUSH
66020: CALL 65874 0 1
// exit ;
66024: GO 66467
// end ; x := GetX ( enemy_unit ) ;
66026: LD_ADDR_VAR 0 7
66030: PUSH
66031: LD_VAR 0 2
66035: PPUSH
66036: CALL_OW 250
66040: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66041: LD_ADDR_VAR 0 8
66045: PUSH
66046: LD_VAR 0 2
66050: PPUSH
66051: CALL_OW 251
66055: ST_TO_ADDR
// if not x or not y then
66056: LD_VAR 0 7
66060: NOT
66061: PUSH
66062: LD_VAR 0 8
66066: NOT
66067: OR
66068: IFFALSE 66072
// exit ;
66070: GO 66467
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66072: LD_ADDR_VAR 0 6
66076: PUSH
66077: LD_VAR 0 7
66081: PPUSH
66082: LD_INT 0
66084: PPUSH
66085: LD_INT 4
66087: PPUSH
66088: CALL_OW 272
66092: PUSH
66093: LD_VAR 0 8
66097: PPUSH
66098: LD_INT 0
66100: PPUSH
66101: LD_INT 4
66103: PPUSH
66104: CALL_OW 273
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 7
66117: PPUSH
66118: LD_INT 1
66120: PPUSH
66121: LD_INT 4
66123: PPUSH
66124: CALL_OW 272
66128: PUSH
66129: LD_VAR 0 8
66133: PPUSH
66134: LD_INT 1
66136: PPUSH
66137: LD_INT 4
66139: PPUSH
66140: CALL_OW 273
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 7
66153: PPUSH
66154: LD_INT 2
66156: PPUSH
66157: LD_INT 4
66159: PPUSH
66160: CALL_OW 272
66164: PUSH
66165: LD_VAR 0 8
66169: PPUSH
66170: LD_INT 2
66172: PPUSH
66173: LD_INT 4
66175: PPUSH
66176: CALL_OW 273
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_VAR 0 7
66189: PPUSH
66190: LD_INT 3
66192: PPUSH
66193: LD_INT 4
66195: PPUSH
66196: CALL_OW 272
66200: PUSH
66201: LD_VAR 0 8
66205: PPUSH
66206: LD_INT 3
66208: PPUSH
66209: LD_INT 4
66211: PPUSH
66212: CALL_OW 273
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_VAR 0 7
66225: PPUSH
66226: LD_INT 4
66228: PPUSH
66229: LD_INT 4
66231: PPUSH
66232: CALL_OW 272
66236: PUSH
66237: LD_VAR 0 8
66241: PPUSH
66242: LD_INT 4
66244: PPUSH
66245: LD_INT 4
66247: PPUSH
66248: CALL_OW 273
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_VAR 0 7
66261: PPUSH
66262: LD_INT 5
66264: PPUSH
66265: LD_INT 4
66267: PPUSH
66268: CALL_OW 272
66272: PUSH
66273: LD_VAR 0 8
66277: PPUSH
66278: LD_INT 5
66280: PPUSH
66281: LD_INT 4
66283: PPUSH
66284: CALL_OW 273
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: ST_TO_ADDR
// for i = tmp downto 1 do
66301: LD_ADDR_VAR 0 4
66305: PUSH
66306: DOUBLE
66307: LD_VAR 0 6
66311: INC
66312: ST_TO_ADDR
66313: LD_INT 1
66315: PUSH
66316: FOR_DOWNTO
66317: IFFALSE 66418
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66319: LD_VAR 0 6
66323: PUSH
66324: LD_VAR 0 4
66328: ARRAY
66329: PUSH
66330: LD_INT 1
66332: ARRAY
66333: PPUSH
66334: LD_VAR 0 6
66338: PUSH
66339: LD_VAR 0 4
66343: ARRAY
66344: PUSH
66345: LD_INT 2
66347: ARRAY
66348: PPUSH
66349: CALL_OW 488
66353: NOT
66354: PUSH
66355: LD_VAR 0 6
66359: PUSH
66360: LD_VAR 0 4
66364: ARRAY
66365: PUSH
66366: LD_INT 1
66368: ARRAY
66369: PPUSH
66370: LD_VAR 0 6
66374: PUSH
66375: LD_VAR 0 4
66379: ARRAY
66380: PUSH
66381: LD_INT 2
66383: ARRAY
66384: PPUSH
66385: CALL_OW 428
66389: PUSH
66390: LD_INT 0
66392: NONEQUAL
66393: OR
66394: IFFALSE 66416
// tmp := Delete ( tmp , i ) ;
66396: LD_ADDR_VAR 0 6
66400: PUSH
66401: LD_VAR 0 6
66405: PPUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: CALL_OW 3
66415: ST_TO_ADDR
66416: GO 66316
66418: POP
66419: POP
// j := GetClosestHex ( unit , tmp ) ;
66420: LD_ADDR_VAR 0 5
66424: PUSH
66425: LD_VAR 0 1
66429: PPUSH
66430: LD_VAR 0 6
66434: PPUSH
66435: CALL 65722 0 2
66439: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66440: LD_VAR 0 1
66444: PPUSH
66445: LD_VAR 0 5
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PPUSH
66454: LD_VAR 0 5
66458: PUSH
66459: LD_INT 2
66461: ARRAY
66462: PPUSH
66463: CALL_OW 111
// end ;
66467: LD_VAR 0 3
66471: RET
// export function PrepareApemanSoldier ( ) ; begin
66472: LD_INT 0
66474: PPUSH
// uc_nation := 0 ;
66475: LD_ADDR_OWVAR 21
66479: PUSH
66480: LD_INT 0
66482: ST_TO_ADDR
// hc_sex := sex_male ;
66483: LD_ADDR_OWVAR 27
66487: PUSH
66488: LD_INT 1
66490: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66491: LD_ADDR_OWVAR 28
66495: PUSH
66496: LD_INT 15
66498: ST_TO_ADDR
// hc_gallery :=  ;
66499: LD_ADDR_OWVAR 33
66503: PUSH
66504: LD_STRING 
66506: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66507: LD_ADDR_OWVAR 31
66511: PUSH
66512: LD_INT 0
66514: PPUSH
66515: LD_INT 3
66517: PPUSH
66518: CALL_OW 12
66522: PUSH
66523: LD_INT 0
66525: PPUSH
66526: LD_INT 3
66528: PPUSH
66529: CALL_OW 12
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: ST_TO_ADDR
// end ;
66546: LD_VAR 0 1
66550: RET
// export function PrepareApemanEngineer ( ) ; begin
66551: LD_INT 0
66553: PPUSH
// uc_nation := 0 ;
66554: LD_ADDR_OWVAR 21
66558: PUSH
66559: LD_INT 0
66561: ST_TO_ADDR
// hc_sex := sex_male ;
66562: LD_ADDR_OWVAR 27
66566: PUSH
66567: LD_INT 1
66569: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66570: LD_ADDR_OWVAR 28
66574: PUSH
66575: LD_INT 16
66577: ST_TO_ADDR
// hc_gallery :=  ;
66578: LD_ADDR_OWVAR 33
66582: PUSH
66583: LD_STRING 
66585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66586: LD_ADDR_OWVAR 31
66590: PUSH
66591: LD_INT 0
66593: PPUSH
66594: LD_INT 3
66596: PPUSH
66597: CALL_OW 12
66601: PUSH
66602: LD_INT 0
66604: PPUSH
66605: LD_INT 3
66607: PPUSH
66608: CALL_OW 12
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: ST_TO_ADDR
// end ;
66625: LD_VAR 0 1
66629: RET
// export function PrepareApeman ( agressivity ) ; begin
66630: LD_INT 0
66632: PPUSH
// uc_side := 0 ;
66633: LD_ADDR_OWVAR 20
66637: PUSH
66638: LD_INT 0
66640: ST_TO_ADDR
// uc_nation := 0 ;
66641: LD_ADDR_OWVAR 21
66645: PUSH
66646: LD_INT 0
66648: ST_TO_ADDR
// hc_sex := sex_male ;
66649: LD_ADDR_OWVAR 27
66653: PUSH
66654: LD_INT 1
66656: ST_TO_ADDR
// hc_class := class_apeman ;
66657: LD_ADDR_OWVAR 28
66661: PUSH
66662: LD_INT 12
66664: ST_TO_ADDR
// hc_gallery :=  ;
66665: LD_ADDR_OWVAR 33
66669: PUSH
66670: LD_STRING 
66672: ST_TO_ADDR
// if agressivity = 0 then
66673: LD_VAR 0 1
66677: PUSH
66678: LD_INT 0
66680: EQUAL
66681: IFFALSE 66693
// hc_agressivity := 0 else
66683: LD_ADDR_OWVAR 35
66687: PUSH
66688: LD_INT 0
66690: ST_TO_ADDR
66691: GO 66714
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66693: LD_ADDR_OWVAR 35
66697: PUSH
66698: LD_VAR 0 1
66702: NEG
66703: PPUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 12
66713: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66714: LD_ADDR_OWVAR 31
66718: PUSH
66719: LD_INT 0
66721: PPUSH
66722: LD_INT 3
66724: PPUSH
66725: CALL_OW 12
66729: PUSH
66730: LD_INT 0
66732: PPUSH
66733: LD_INT 3
66735: PPUSH
66736: CALL_OW 12
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: ST_TO_ADDR
// end ;
66753: LD_VAR 0 2
66757: RET
// export function PrepareTiger ( agressivity ) ; begin
66758: LD_INT 0
66760: PPUSH
// uc_side := 0 ;
66761: LD_ADDR_OWVAR 20
66765: PUSH
66766: LD_INT 0
66768: ST_TO_ADDR
// uc_nation := 0 ;
66769: LD_ADDR_OWVAR 21
66773: PUSH
66774: LD_INT 0
66776: ST_TO_ADDR
// hc_class := class_tiger ;
66777: LD_ADDR_OWVAR 28
66781: PUSH
66782: LD_INT 14
66784: ST_TO_ADDR
// hc_gallery :=  ;
66785: LD_ADDR_OWVAR 33
66789: PUSH
66790: LD_STRING 
66792: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66793: LD_ADDR_OWVAR 35
66797: PUSH
66798: LD_VAR 0 1
66802: NEG
66803: PPUSH
66804: LD_VAR 0 1
66808: PPUSH
66809: CALL_OW 12
66813: ST_TO_ADDR
// end ;
66814: LD_VAR 0 2
66818: RET
// export function PrepareEnchidna ( ) ; begin
66819: LD_INT 0
66821: PPUSH
// uc_side := 0 ;
66822: LD_ADDR_OWVAR 20
66826: PUSH
66827: LD_INT 0
66829: ST_TO_ADDR
// uc_nation := 0 ;
66830: LD_ADDR_OWVAR 21
66834: PUSH
66835: LD_INT 0
66837: ST_TO_ADDR
// hc_class := class_baggie ;
66838: LD_ADDR_OWVAR 28
66842: PUSH
66843: LD_INT 13
66845: ST_TO_ADDR
// hc_gallery :=  ;
66846: LD_ADDR_OWVAR 33
66850: PUSH
66851: LD_STRING 
66853: ST_TO_ADDR
// end ;
66854: LD_VAR 0 1
66858: RET
// export function PrepareFrog ( ) ; begin
66859: LD_INT 0
66861: PPUSH
// uc_side := 0 ;
66862: LD_ADDR_OWVAR 20
66866: PUSH
66867: LD_INT 0
66869: ST_TO_ADDR
// uc_nation := 0 ;
66870: LD_ADDR_OWVAR 21
66874: PUSH
66875: LD_INT 0
66877: ST_TO_ADDR
// hc_class := class_frog ;
66878: LD_ADDR_OWVAR 28
66882: PUSH
66883: LD_INT 19
66885: ST_TO_ADDR
// hc_gallery :=  ;
66886: LD_ADDR_OWVAR 33
66890: PUSH
66891: LD_STRING 
66893: ST_TO_ADDR
// end ;
66894: LD_VAR 0 1
66898: RET
// export function PrepareFish ( ) ; begin
66899: LD_INT 0
66901: PPUSH
// uc_side := 0 ;
66902: LD_ADDR_OWVAR 20
66906: PUSH
66907: LD_INT 0
66909: ST_TO_ADDR
// uc_nation := 0 ;
66910: LD_ADDR_OWVAR 21
66914: PUSH
66915: LD_INT 0
66917: ST_TO_ADDR
// hc_class := class_fish ;
66918: LD_ADDR_OWVAR 28
66922: PUSH
66923: LD_INT 20
66925: ST_TO_ADDR
// hc_gallery :=  ;
66926: LD_ADDR_OWVAR 33
66930: PUSH
66931: LD_STRING 
66933: ST_TO_ADDR
// end ;
66934: LD_VAR 0 1
66938: RET
// export function PrepareBird ( ) ; begin
66939: LD_INT 0
66941: PPUSH
// uc_side := 0 ;
66942: LD_ADDR_OWVAR 20
66946: PUSH
66947: LD_INT 0
66949: ST_TO_ADDR
// uc_nation := 0 ;
66950: LD_ADDR_OWVAR 21
66954: PUSH
66955: LD_INT 0
66957: ST_TO_ADDR
// hc_class := class_phororhacos ;
66958: LD_ADDR_OWVAR 28
66962: PUSH
66963: LD_INT 18
66965: ST_TO_ADDR
// hc_gallery :=  ;
66966: LD_ADDR_OWVAR 33
66970: PUSH
66971: LD_STRING 
66973: ST_TO_ADDR
// end ;
66974: LD_VAR 0 1
66978: RET
// export function PrepareHorse ( ) ; begin
66979: LD_INT 0
66981: PPUSH
// uc_side := 0 ;
66982: LD_ADDR_OWVAR 20
66986: PUSH
66987: LD_INT 0
66989: ST_TO_ADDR
// uc_nation := 0 ;
66990: LD_ADDR_OWVAR 21
66994: PUSH
66995: LD_INT 0
66997: ST_TO_ADDR
// hc_class := class_horse ;
66998: LD_ADDR_OWVAR 28
67002: PUSH
67003: LD_INT 21
67005: ST_TO_ADDR
// hc_gallery :=  ;
67006: LD_ADDR_OWVAR 33
67010: PUSH
67011: LD_STRING 
67013: ST_TO_ADDR
// end ;
67014: LD_VAR 0 1
67018: RET
// export function PrepareMastodont ( ) ; begin
67019: LD_INT 0
67021: PPUSH
// uc_side := 0 ;
67022: LD_ADDR_OWVAR 20
67026: PUSH
67027: LD_INT 0
67029: ST_TO_ADDR
// uc_nation := 0 ;
67030: LD_ADDR_OWVAR 21
67034: PUSH
67035: LD_INT 0
67037: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67038: LD_ADDR_OWVAR 37
67042: PUSH
67043: LD_INT 31
67045: ST_TO_ADDR
// vc_control := control_rider ;
67046: LD_ADDR_OWVAR 38
67050: PUSH
67051: LD_INT 4
67053: ST_TO_ADDR
// end ;
67054: LD_VAR 0 1
67058: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67059: LD_INT 0
67061: PPUSH
67062: PPUSH
67063: PPUSH
// uc_side = 0 ;
67064: LD_ADDR_OWVAR 20
67068: PUSH
67069: LD_INT 0
67071: ST_TO_ADDR
// uc_nation = 0 ;
67072: LD_ADDR_OWVAR 21
67076: PUSH
67077: LD_INT 0
67079: ST_TO_ADDR
// InitHc_All ( ) ;
67080: CALL_OW 584
// InitVc ;
67084: CALL_OW 20
// if mastodonts then
67088: LD_VAR 0 6
67092: IFFALSE 67159
// for i = 1 to mastodonts do
67094: LD_ADDR_VAR 0 11
67098: PUSH
67099: DOUBLE
67100: LD_INT 1
67102: DEC
67103: ST_TO_ADDR
67104: LD_VAR 0 6
67108: PUSH
67109: FOR_TO
67110: IFFALSE 67157
// begin vc_chassis := 31 ;
67112: LD_ADDR_OWVAR 37
67116: PUSH
67117: LD_INT 31
67119: ST_TO_ADDR
// vc_control := control_rider ;
67120: LD_ADDR_OWVAR 38
67124: PUSH
67125: LD_INT 4
67127: ST_TO_ADDR
// animal := CreateVehicle ;
67128: LD_ADDR_VAR 0 12
67132: PUSH
67133: CALL_OW 45
67137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67138: LD_VAR 0 12
67142: PPUSH
67143: LD_VAR 0 8
67147: PPUSH
67148: LD_INT 0
67150: PPUSH
67151: CALL 69287 0 3
// end ;
67155: GO 67109
67157: POP
67158: POP
// if horses then
67159: LD_VAR 0 5
67163: IFFALSE 67230
// for i = 1 to horses do
67165: LD_ADDR_VAR 0 11
67169: PUSH
67170: DOUBLE
67171: LD_INT 1
67173: DEC
67174: ST_TO_ADDR
67175: LD_VAR 0 5
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67228
// begin hc_class := 21 ;
67183: LD_ADDR_OWVAR 28
67187: PUSH
67188: LD_INT 21
67190: ST_TO_ADDR
// hc_gallery :=  ;
67191: LD_ADDR_OWVAR 33
67195: PUSH
67196: LD_STRING 
67198: ST_TO_ADDR
// animal := CreateHuman ;
67199: LD_ADDR_VAR 0 12
67203: PUSH
67204: CALL_OW 44
67208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67209: LD_VAR 0 12
67213: PPUSH
67214: LD_VAR 0 8
67218: PPUSH
67219: LD_INT 0
67221: PPUSH
67222: CALL 69287 0 3
// end ;
67226: GO 67180
67228: POP
67229: POP
// if birds then
67230: LD_VAR 0 1
67234: IFFALSE 67301
// for i = 1 to birds do
67236: LD_ADDR_VAR 0 11
67240: PUSH
67241: DOUBLE
67242: LD_INT 1
67244: DEC
67245: ST_TO_ADDR
67246: LD_VAR 0 1
67250: PUSH
67251: FOR_TO
67252: IFFALSE 67299
// begin hc_class := 18 ;
67254: LD_ADDR_OWVAR 28
67258: PUSH
67259: LD_INT 18
67261: ST_TO_ADDR
// hc_gallery =  ;
67262: LD_ADDR_OWVAR 33
67266: PUSH
67267: LD_STRING 
67269: ST_TO_ADDR
// animal := CreateHuman ;
67270: LD_ADDR_VAR 0 12
67274: PUSH
67275: CALL_OW 44
67279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67280: LD_VAR 0 12
67284: PPUSH
67285: LD_VAR 0 8
67289: PPUSH
67290: LD_INT 0
67292: PPUSH
67293: CALL 69287 0 3
// end ;
67297: GO 67251
67299: POP
67300: POP
// if tigers then
67301: LD_VAR 0 2
67305: IFFALSE 67389
// for i = 1 to tigers do
67307: LD_ADDR_VAR 0 11
67311: PUSH
67312: DOUBLE
67313: LD_INT 1
67315: DEC
67316: ST_TO_ADDR
67317: LD_VAR 0 2
67321: PUSH
67322: FOR_TO
67323: IFFALSE 67387
// begin hc_class = class_tiger ;
67325: LD_ADDR_OWVAR 28
67329: PUSH
67330: LD_INT 14
67332: ST_TO_ADDR
// hc_gallery =  ;
67333: LD_ADDR_OWVAR 33
67337: PUSH
67338: LD_STRING 
67340: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67341: LD_ADDR_OWVAR 35
67345: PUSH
67346: LD_INT 7
67348: NEG
67349: PPUSH
67350: LD_INT 7
67352: PPUSH
67353: CALL_OW 12
67357: ST_TO_ADDR
// animal := CreateHuman ;
67358: LD_ADDR_VAR 0 12
67362: PUSH
67363: CALL_OW 44
67367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67368: LD_VAR 0 12
67372: PPUSH
67373: LD_VAR 0 8
67377: PPUSH
67378: LD_INT 0
67380: PPUSH
67381: CALL 69287 0 3
// end ;
67385: GO 67322
67387: POP
67388: POP
// if apemans then
67389: LD_VAR 0 3
67393: IFFALSE 67516
// for i = 1 to apemans do
67395: LD_ADDR_VAR 0 11
67399: PUSH
67400: DOUBLE
67401: LD_INT 1
67403: DEC
67404: ST_TO_ADDR
67405: LD_VAR 0 3
67409: PUSH
67410: FOR_TO
67411: IFFALSE 67514
// begin hc_class = class_apeman ;
67413: LD_ADDR_OWVAR 28
67417: PUSH
67418: LD_INT 12
67420: ST_TO_ADDR
// hc_gallery =  ;
67421: LD_ADDR_OWVAR 33
67425: PUSH
67426: LD_STRING 
67428: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67429: LD_ADDR_OWVAR 35
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PPUSH
67438: LD_INT 2
67440: PPUSH
67441: CALL_OW 12
67445: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67446: LD_ADDR_OWVAR 31
67450: PUSH
67451: LD_INT 1
67453: PPUSH
67454: LD_INT 3
67456: PPUSH
67457: CALL_OW 12
67461: PUSH
67462: LD_INT 1
67464: PPUSH
67465: LD_INT 3
67467: PPUSH
67468: CALL_OW 12
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: ST_TO_ADDR
// animal := CreateHuman ;
67485: LD_ADDR_VAR 0 12
67489: PUSH
67490: CALL_OW 44
67494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67495: LD_VAR 0 12
67499: PPUSH
67500: LD_VAR 0 8
67504: PPUSH
67505: LD_INT 0
67507: PPUSH
67508: CALL 69287 0 3
// end ;
67512: GO 67410
67514: POP
67515: POP
// if enchidnas then
67516: LD_VAR 0 4
67520: IFFALSE 67587
// for i = 1 to enchidnas do
67522: LD_ADDR_VAR 0 11
67526: PUSH
67527: DOUBLE
67528: LD_INT 1
67530: DEC
67531: ST_TO_ADDR
67532: LD_VAR 0 4
67536: PUSH
67537: FOR_TO
67538: IFFALSE 67585
// begin hc_class = 13 ;
67540: LD_ADDR_OWVAR 28
67544: PUSH
67545: LD_INT 13
67547: ST_TO_ADDR
// hc_gallery =  ;
67548: LD_ADDR_OWVAR 33
67552: PUSH
67553: LD_STRING 
67555: ST_TO_ADDR
// animal := CreateHuman ;
67556: LD_ADDR_VAR 0 12
67560: PUSH
67561: CALL_OW 44
67565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67566: LD_VAR 0 12
67570: PPUSH
67571: LD_VAR 0 8
67575: PPUSH
67576: LD_INT 0
67578: PPUSH
67579: CALL 69287 0 3
// end ;
67583: GO 67537
67585: POP
67586: POP
// if fishes then
67587: LD_VAR 0 7
67591: IFFALSE 67658
// for i = 1 to fishes do
67593: LD_ADDR_VAR 0 11
67597: PUSH
67598: DOUBLE
67599: LD_INT 1
67601: DEC
67602: ST_TO_ADDR
67603: LD_VAR 0 7
67607: PUSH
67608: FOR_TO
67609: IFFALSE 67656
// begin hc_class = 20 ;
67611: LD_ADDR_OWVAR 28
67615: PUSH
67616: LD_INT 20
67618: ST_TO_ADDR
// hc_gallery =  ;
67619: LD_ADDR_OWVAR 33
67623: PUSH
67624: LD_STRING 
67626: ST_TO_ADDR
// animal := CreateHuman ;
67627: LD_ADDR_VAR 0 12
67631: PUSH
67632: CALL_OW 44
67636: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67637: LD_VAR 0 12
67641: PPUSH
67642: LD_VAR 0 9
67646: PPUSH
67647: LD_INT 0
67649: PPUSH
67650: CALL 69287 0 3
// end ;
67654: GO 67608
67656: POP
67657: POP
// end ;
67658: LD_VAR 0 10
67662: RET
// export function WantHeal ( sci , unit ) ; begin
67663: LD_INT 0
67665: PPUSH
// if GetTaskList ( sci ) > 0 then
67666: LD_VAR 0 1
67670: PPUSH
67671: CALL_OW 437
67675: PUSH
67676: LD_INT 0
67678: GREATER
67679: IFFALSE 67749
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67681: LD_VAR 0 1
67685: PPUSH
67686: CALL_OW 437
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PUSH
67699: LD_STRING l
67701: EQUAL
67702: PUSH
67703: LD_VAR 0 1
67707: PPUSH
67708: CALL_OW 437
67712: PUSH
67713: LD_INT 1
67715: ARRAY
67716: PUSH
67717: LD_INT 4
67719: ARRAY
67720: PUSH
67721: LD_VAR 0 2
67725: EQUAL
67726: AND
67727: IFFALSE 67739
// result := true else
67729: LD_ADDR_VAR 0 3
67733: PUSH
67734: LD_INT 1
67736: ST_TO_ADDR
67737: GO 67747
// result := false ;
67739: LD_ADDR_VAR 0 3
67743: PUSH
67744: LD_INT 0
67746: ST_TO_ADDR
// end else
67747: GO 67757
// result := false ;
67749: LD_ADDR_VAR 0 3
67753: PUSH
67754: LD_INT 0
67756: ST_TO_ADDR
// end ;
67757: LD_VAR 0 3
67761: RET
// export function HealTarget ( sci ) ; begin
67762: LD_INT 0
67764: PPUSH
// if not sci then
67765: LD_VAR 0 1
67769: NOT
67770: IFFALSE 67774
// exit ;
67772: GO 67839
// result := 0 ;
67774: LD_ADDR_VAR 0 2
67778: PUSH
67779: LD_INT 0
67781: ST_TO_ADDR
// if GetTaskList ( sci ) then
67782: LD_VAR 0 1
67786: PPUSH
67787: CALL_OW 437
67791: IFFALSE 67839
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 437
67802: PUSH
67803: LD_INT 1
67805: ARRAY
67806: PUSH
67807: LD_INT 1
67809: ARRAY
67810: PUSH
67811: LD_STRING l
67813: EQUAL
67814: IFFALSE 67839
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67816: LD_ADDR_VAR 0 2
67820: PUSH
67821: LD_VAR 0 1
67825: PPUSH
67826: CALL_OW 437
67830: PUSH
67831: LD_INT 1
67833: ARRAY
67834: PUSH
67835: LD_INT 4
67837: ARRAY
67838: ST_TO_ADDR
// end ;
67839: LD_VAR 0 2
67843: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67844: LD_INT 0
67846: PPUSH
67847: PPUSH
67848: PPUSH
67849: PPUSH
// if not base_units then
67850: LD_VAR 0 1
67854: NOT
67855: IFFALSE 67859
// exit ;
67857: GO 67946
// result := false ;
67859: LD_ADDR_VAR 0 2
67863: PUSH
67864: LD_INT 0
67866: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67867: LD_ADDR_VAR 0 5
67871: PUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_INT 21
67879: PUSH
67880: LD_INT 3
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PPUSH
67887: CALL_OW 72
67891: ST_TO_ADDR
// if not tmp then
67892: LD_VAR 0 5
67896: NOT
67897: IFFALSE 67901
// exit ;
67899: GO 67946
// for i in tmp do
67901: LD_ADDR_VAR 0 3
67905: PUSH
67906: LD_VAR 0 5
67910: PUSH
67911: FOR_IN
67912: IFFALSE 67944
// begin result := EnemyInRange ( i , 22 ) ;
67914: LD_ADDR_VAR 0 2
67918: PUSH
67919: LD_VAR 0 3
67923: PPUSH
67924: LD_INT 22
67926: PPUSH
67927: CALL 65524 0 2
67931: ST_TO_ADDR
// if result then
67932: LD_VAR 0 2
67936: IFFALSE 67942
// exit ;
67938: POP
67939: POP
67940: GO 67946
// end ;
67942: GO 67911
67944: POP
67945: POP
// end ;
67946: LD_VAR 0 2
67950: RET
// export function FilterByTag ( units , tag ) ; begin
67951: LD_INT 0
67953: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67954: LD_ADDR_VAR 0 3
67958: PUSH
67959: LD_VAR 0 1
67963: PPUSH
67964: LD_INT 120
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PPUSH
67976: CALL_OW 72
67980: ST_TO_ADDR
// end ;
67981: LD_VAR 0 3
67985: RET
// export function IsDriver ( un ) ; begin
67986: LD_INT 0
67988: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67989: LD_ADDR_VAR 0 2
67993: PUSH
67994: LD_VAR 0 1
67998: PUSH
67999: LD_INT 55
68001: PUSH
68002: EMPTY
68003: LIST
68004: PPUSH
68005: CALL_OW 69
68009: IN
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 2
68015: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68016: LD_INT 0
68018: PPUSH
68019: PPUSH
// list := [ ] ;
68020: LD_ADDR_VAR 0 5
68024: PUSH
68025: EMPTY
68026: ST_TO_ADDR
// case d of 0 :
68027: LD_VAR 0 3
68031: PUSH
68032: LD_INT 0
68034: DOUBLE
68035: EQUAL
68036: IFTRUE 68040
68038: GO 68173
68040: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68041: LD_ADDR_VAR 0 5
68045: PUSH
68046: LD_VAR 0 1
68050: PUSH
68051: LD_INT 4
68053: MINUS
68054: PUSH
68055: LD_VAR 0 2
68059: PUSH
68060: LD_INT 4
68062: MINUS
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: LIST
68071: PUSH
68072: LD_VAR 0 1
68076: PUSH
68077: LD_INT 3
68079: MINUS
68080: PUSH
68081: LD_VAR 0 2
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: PUSH
68094: LD_VAR 0 1
68098: PUSH
68099: LD_INT 4
68101: PLUS
68102: PUSH
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 4
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: PUSH
68116: LD_VAR 0 1
68120: PUSH
68121: LD_INT 3
68123: PLUS
68124: PUSH
68125: LD_VAR 0 2
68129: PUSH
68130: LD_INT 3
68132: PLUS
68133: PUSH
68134: LD_INT 5
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: PUSH
68142: LD_VAR 0 1
68146: PUSH
68147: LD_VAR 0 2
68151: PUSH
68152: LD_INT 4
68154: PLUS
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: ST_TO_ADDR
// end ; 1 :
68171: GO 68871
68173: LD_INT 1
68175: DOUBLE
68176: EQUAL
68177: IFTRUE 68181
68179: GO 68314
68181: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68182: LD_ADDR_VAR 0 5
68186: PUSH
68187: LD_VAR 0 1
68191: PUSH
68192: LD_VAR 0 2
68196: PUSH
68197: LD_INT 4
68199: MINUS
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: LIST
68208: PUSH
68209: LD_VAR 0 1
68213: PUSH
68214: LD_INT 3
68216: MINUS
68217: PUSH
68218: LD_VAR 0 2
68222: PUSH
68223: LD_INT 3
68225: MINUS
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: LIST
68234: PUSH
68235: LD_VAR 0 1
68239: PUSH
68240: LD_INT 4
68242: MINUS
68243: PUSH
68244: LD_VAR 0 2
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: LIST
68256: PUSH
68257: LD_VAR 0 1
68261: PUSH
68262: LD_VAR 0 2
68266: PUSH
68267: LD_INT 3
68269: PLUS
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: PUSH
68279: LD_VAR 0 1
68283: PUSH
68284: LD_INT 4
68286: PLUS
68287: PUSH
68288: LD_VAR 0 2
68292: PUSH
68293: LD_INT 4
68295: PLUS
68296: PUSH
68297: LD_INT 5
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// end ; 2 :
68312: GO 68871
68314: LD_INT 2
68316: DOUBLE
68317: EQUAL
68318: IFTRUE 68322
68320: GO 68451
68322: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68323: LD_ADDR_VAR 0 5
68327: PUSH
68328: LD_VAR 0 1
68332: PUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_INT 3
68340: MINUS
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: LIST
68349: PUSH
68350: LD_VAR 0 1
68354: PUSH
68355: LD_INT 4
68357: PLUS
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: LD_INT 4
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: LIST
68371: PUSH
68372: LD_VAR 0 1
68376: PUSH
68377: LD_VAR 0 2
68381: PUSH
68382: LD_INT 4
68384: PLUS
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: PUSH
68394: LD_VAR 0 1
68398: PUSH
68399: LD_INT 3
68401: MINUS
68402: PUSH
68403: LD_VAR 0 2
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: PUSH
68416: LD_VAR 0 1
68420: PUSH
68421: LD_INT 4
68423: MINUS
68424: PUSH
68425: LD_VAR 0 2
68429: PUSH
68430: LD_INT 4
68432: MINUS
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: LIST
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// end ; 3 :
68449: GO 68871
68451: LD_INT 3
68453: DOUBLE
68454: EQUAL
68455: IFTRUE 68459
68457: GO 68592
68459: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68460: LD_ADDR_VAR 0 5
68464: PUSH
68465: LD_VAR 0 1
68469: PUSH
68470: LD_INT 3
68472: PLUS
68473: PUSH
68474: LD_VAR 0 2
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: LIST
68486: PUSH
68487: LD_VAR 0 1
68491: PUSH
68492: LD_INT 4
68494: PLUS
68495: PUSH
68496: LD_VAR 0 2
68500: PUSH
68501: LD_INT 4
68503: PLUS
68504: PUSH
68505: LD_INT 5
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: LIST
68512: PUSH
68513: LD_VAR 0 1
68517: PUSH
68518: LD_INT 4
68520: MINUS
68521: PUSH
68522: LD_VAR 0 2
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: LIST
68534: PUSH
68535: LD_VAR 0 1
68539: PUSH
68540: LD_VAR 0 2
68544: PUSH
68545: LD_INT 4
68547: MINUS
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: PUSH
68557: LD_VAR 0 1
68561: PUSH
68562: LD_INT 3
68564: MINUS
68565: PUSH
68566: LD_VAR 0 2
68570: PUSH
68571: LD_INT 3
68573: MINUS
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: ST_TO_ADDR
// end ; 4 :
68590: GO 68871
68592: LD_INT 4
68594: DOUBLE
68595: EQUAL
68596: IFTRUE 68600
68598: GO 68733
68600: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68601: LD_ADDR_VAR 0 5
68605: PUSH
68606: LD_VAR 0 1
68610: PUSH
68611: LD_VAR 0 2
68615: PUSH
68616: LD_INT 4
68618: PLUS
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: PUSH
68628: LD_VAR 0 1
68632: PUSH
68633: LD_INT 3
68635: PLUS
68636: PUSH
68637: LD_VAR 0 2
68641: PUSH
68642: LD_INT 3
68644: PLUS
68645: PUSH
68646: LD_INT 5
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: LIST
68653: PUSH
68654: LD_VAR 0 1
68658: PUSH
68659: LD_INT 4
68661: PLUS
68662: PUSH
68663: LD_VAR 0 2
68667: PUSH
68668: LD_INT 4
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: PUSH
68676: LD_VAR 0 1
68680: PUSH
68681: LD_VAR 0 2
68685: PUSH
68686: LD_INT 3
68688: MINUS
68689: PUSH
68690: LD_INT 3
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: PUSH
68698: LD_VAR 0 1
68702: PUSH
68703: LD_INT 4
68705: MINUS
68706: PUSH
68707: LD_VAR 0 2
68711: PUSH
68712: LD_INT 4
68714: MINUS
68715: PUSH
68716: LD_INT 2
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// end ; 5 :
68731: GO 68871
68733: LD_INT 5
68735: DOUBLE
68736: EQUAL
68737: IFTRUE 68741
68739: GO 68870
68741: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68742: LD_ADDR_VAR 0 5
68746: PUSH
68747: LD_VAR 0 1
68751: PUSH
68752: LD_INT 4
68754: MINUS
68755: PUSH
68756: LD_VAR 0 2
68760: PUSH
68761: LD_INT 1
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: PUSH
68769: LD_VAR 0 1
68773: PUSH
68774: LD_VAR 0 2
68778: PUSH
68779: LD_INT 4
68781: MINUS
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: LIST
68790: PUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_INT 4
68798: PLUS
68799: PUSH
68800: LD_VAR 0 2
68804: PUSH
68805: LD_INT 4
68807: PLUS
68808: PUSH
68809: LD_INT 5
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: LIST
68816: PUSH
68817: LD_VAR 0 1
68821: PUSH
68822: LD_INT 3
68824: PLUS
68825: PUSH
68826: LD_VAR 0 2
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: LIST
68838: PUSH
68839: LD_VAR 0 1
68843: PUSH
68844: LD_VAR 0 2
68848: PUSH
68849: LD_INT 3
68851: PLUS
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// end ; end ;
68868: GO 68871
68870: POP
// result := list ;
68871: LD_ADDR_VAR 0 4
68875: PUSH
68876: LD_VAR 0 5
68880: ST_TO_ADDR
// end ;
68881: LD_VAR 0 4
68885: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68886: LD_INT 0
68888: PPUSH
68889: PPUSH
68890: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68891: LD_VAR 0 1
68895: NOT
68896: PUSH
68897: LD_VAR 0 2
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: LD_INT 4
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: IN
68920: NOT
68921: OR
68922: IFFALSE 68926
// exit ;
68924: GO 69009
// tmp := [ ] ;
68926: LD_ADDR_VAR 0 5
68930: PUSH
68931: EMPTY
68932: ST_TO_ADDR
// for i in units do
68933: LD_ADDR_VAR 0 4
68937: PUSH
68938: LD_VAR 0 1
68942: PUSH
68943: FOR_IN
68944: IFFALSE 68978
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68946: LD_ADDR_VAR 0 5
68950: PUSH
68951: LD_VAR 0 5
68955: PPUSH
68956: LD_VAR 0 4
68960: PPUSH
68961: LD_VAR 0 2
68965: PPUSH
68966: CALL_OW 259
68970: PPUSH
68971: CALL 70382 0 2
68975: ST_TO_ADDR
68976: GO 68943
68978: POP
68979: POP
// if not tmp then
68980: LD_VAR 0 5
68984: NOT
68985: IFFALSE 68989
// exit ;
68987: GO 69009
// result := SortListByListDesc ( units , tmp ) ;
68989: LD_ADDR_VAR 0 3
68993: PUSH
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 5
69003: PPUSH
69004: CALL_OW 77
69008: ST_TO_ADDR
// end ;
69009: LD_VAR 0 3
69013: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69014: LD_INT 0
69016: PPUSH
69017: PPUSH
69018: PPUSH
// result := false ;
69019: LD_ADDR_VAR 0 3
69023: PUSH
69024: LD_INT 0
69026: ST_TO_ADDR
// if not building then
69027: LD_VAR 0 2
69031: NOT
69032: IFFALSE 69036
// exit ;
69034: GO 69174
// x := GetX ( building ) ;
69036: LD_ADDR_VAR 0 4
69040: PUSH
69041: LD_VAR 0 2
69045: PPUSH
69046: CALL_OW 250
69050: ST_TO_ADDR
// y := GetY ( building ) ;
69051: LD_ADDR_VAR 0 5
69055: PUSH
69056: LD_VAR 0 2
69060: PPUSH
69061: CALL_OW 251
69065: ST_TO_ADDR
// if not x or not y then
69066: LD_VAR 0 4
69070: NOT
69071: PUSH
69072: LD_VAR 0 5
69076: NOT
69077: OR
69078: IFFALSE 69082
// exit ;
69080: GO 69174
// if GetTaskList ( unit ) then
69082: LD_VAR 0 1
69086: PPUSH
69087: CALL_OW 437
69091: IFFALSE 69174
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69093: LD_STRING e
69095: PUSH
69096: LD_VAR 0 1
69100: PPUSH
69101: CALL_OW 437
69105: PUSH
69106: LD_INT 1
69108: ARRAY
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: EQUAL
69114: PUSH
69115: LD_VAR 0 4
69119: PUSH
69120: LD_VAR 0 1
69124: PPUSH
69125: CALL_OW 437
69129: PUSH
69130: LD_INT 1
69132: ARRAY
69133: PUSH
69134: LD_INT 2
69136: ARRAY
69137: EQUAL
69138: AND
69139: PUSH
69140: LD_VAR 0 5
69144: PUSH
69145: LD_VAR 0 1
69149: PPUSH
69150: CALL_OW 437
69154: PUSH
69155: LD_INT 1
69157: ARRAY
69158: PUSH
69159: LD_INT 3
69161: ARRAY
69162: EQUAL
69163: AND
69164: IFFALSE 69174
// result := true end ;
69166: LD_ADDR_VAR 0 3
69170: PUSH
69171: LD_INT 1
69173: ST_TO_ADDR
// end ;
69174: LD_VAR 0 3
69178: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69179: LD_INT 0
69181: PPUSH
// result := false ;
69182: LD_ADDR_VAR 0 4
69186: PUSH
69187: LD_INT 0
69189: ST_TO_ADDR
// if GetTaskList ( unit ) then
69190: LD_VAR 0 1
69194: PPUSH
69195: CALL_OW 437
69199: IFFALSE 69282
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69201: LD_STRING M
69203: PUSH
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 437
69213: PUSH
69214: LD_INT 1
69216: ARRAY
69217: PUSH
69218: LD_INT 1
69220: ARRAY
69221: EQUAL
69222: PUSH
69223: LD_VAR 0 2
69227: PUSH
69228: LD_VAR 0 1
69232: PPUSH
69233: CALL_OW 437
69237: PUSH
69238: LD_INT 1
69240: ARRAY
69241: PUSH
69242: LD_INT 2
69244: ARRAY
69245: EQUAL
69246: AND
69247: PUSH
69248: LD_VAR 0 3
69252: PUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: CALL_OW 437
69262: PUSH
69263: LD_INT 1
69265: ARRAY
69266: PUSH
69267: LD_INT 3
69269: ARRAY
69270: EQUAL
69271: AND
69272: IFFALSE 69282
// result := true ;
69274: LD_ADDR_VAR 0 4
69278: PUSH
69279: LD_INT 1
69281: ST_TO_ADDR
// end ; end ;
69282: LD_VAR 0 4
69286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69287: LD_INT 0
69289: PPUSH
69290: PPUSH
69291: PPUSH
69292: PPUSH
// if not unit or not area then
69293: LD_VAR 0 1
69297: NOT
69298: PUSH
69299: LD_VAR 0 2
69303: NOT
69304: OR
69305: IFFALSE 69309
// exit ;
69307: GO 69485
// tmp := AreaToList ( area , i ) ;
69309: LD_ADDR_VAR 0 6
69313: PUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: LD_VAR 0 5
69323: PPUSH
69324: CALL_OW 517
69328: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69329: LD_ADDR_VAR 0 5
69333: PUSH
69334: DOUBLE
69335: LD_INT 1
69337: DEC
69338: ST_TO_ADDR
69339: LD_VAR 0 6
69343: PUSH
69344: LD_INT 1
69346: ARRAY
69347: PUSH
69348: FOR_TO
69349: IFFALSE 69483
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69351: LD_ADDR_VAR 0 7
69355: PUSH
69356: LD_VAR 0 6
69360: PUSH
69361: LD_INT 1
69363: ARRAY
69364: PUSH
69365: LD_VAR 0 5
69369: ARRAY
69370: PUSH
69371: LD_VAR 0 6
69375: PUSH
69376: LD_INT 2
69378: ARRAY
69379: PUSH
69380: LD_VAR 0 5
69384: ARRAY
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69390: LD_INT 92
69392: PUSH
69393: LD_VAR 0 7
69397: PUSH
69398: LD_INT 1
69400: ARRAY
69401: PUSH
69402: LD_VAR 0 7
69406: PUSH
69407: LD_INT 2
69409: ARRAY
69410: PUSH
69411: LD_INT 2
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: PPUSH
69420: CALL_OW 69
69424: PUSH
69425: LD_INT 0
69427: EQUAL
69428: IFFALSE 69481
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_VAR 0 7
69439: PUSH
69440: LD_INT 1
69442: ARRAY
69443: PPUSH
69444: LD_VAR 0 7
69448: PUSH
69449: LD_INT 2
69451: ARRAY
69452: PPUSH
69453: LD_VAR 0 3
69457: PPUSH
69458: CALL_OW 48
// result := IsPlaced ( unit ) ;
69462: LD_ADDR_VAR 0 4
69466: PUSH
69467: LD_VAR 0 1
69471: PPUSH
69472: CALL_OW 305
69476: ST_TO_ADDR
// exit ;
69477: POP
69478: POP
69479: GO 69485
// end ; end ;
69481: GO 69348
69483: POP
69484: POP
// end ;
69485: LD_VAR 0 4
69489: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69490: LD_INT 0
69492: PPUSH
69493: PPUSH
69494: PPUSH
// if not side or side > 8 then
69495: LD_VAR 0 1
69499: NOT
69500: PUSH
69501: LD_VAR 0 1
69505: PUSH
69506: LD_INT 8
69508: GREATER
69509: OR
69510: IFFALSE 69514
// exit ;
69512: GO 69701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69514: LD_ADDR_VAR 0 4
69518: PUSH
69519: LD_INT 22
69521: PUSH
69522: LD_VAR 0 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 21
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PPUSH
69545: CALL_OW 69
69549: ST_TO_ADDR
// if not tmp then
69550: LD_VAR 0 4
69554: NOT
69555: IFFALSE 69559
// exit ;
69557: GO 69701
// enable_addtolog := true ;
69559: LD_ADDR_OWVAR 81
69563: PUSH
69564: LD_INT 1
69566: ST_TO_ADDR
// AddToLog ( [ ) ;
69567: LD_STRING [
69569: PPUSH
69570: CALL_OW 561
// for i in tmp do
69574: LD_ADDR_VAR 0 3
69578: PUSH
69579: LD_VAR 0 4
69583: PUSH
69584: FOR_IN
69585: IFFALSE 69692
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69587: LD_STRING [
69589: PUSH
69590: LD_VAR 0 3
69594: PPUSH
69595: CALL_OW 266
69599: STR
69600: PUSH
69601: LD_STRING , 
69603: STR
69604: PUSH
69605: LD_VAR 0 3
69609: PPUSH
69610: CALL_OW 250
69614: STR
69615: PUSH
69616: LD_STRING , 
69618: STR
69619: PUSH
69620: LD_VAR 0 3
69624: PPUSH
69625: CALL_OW 251
69629: STR
69630: PUSH
69631: LD_STRING , 
69633: STR
69634: PUSH
69635: LD_VAR 0 3
69639: PPUSH
69640: CALL_OW 254
69644: STR
69645: PUSH
69646: LD_STRING , 
69648: STR
69649: PUSH
69650: LD_VAR 0 3
69654: PPUSH
69655: LD_INT 1
69657: PPUSH
69658: CALL_OW 268
69662: STR
69663: PUSH
69664: LD_STRING , 
69666: STR
69667: PUSH
69668: LD_VAR 0 3
69672: PPUSH
69673: LD_INT 2
69675: PPUSH
69676: CALL_OW 268
69680: STR
69681: PUSH
69682: LD_STRING ],
69684: STR
69685: PPUSH
69686: CALL_OW 561
// end ;
69690: GO 69584
69692: POP
69693: POP
// AddToLog ( ]; ) ;
69694: LD_STRING ];
69696: PPUSH
69697: CALL_OW 561
// end ;
69701: LD_VAR 0 2
69705: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
69710: PPUSH
69711: PPUSH
69712: PPUSH
// if not area or not rate or not max then
69713: LD_VAR 0 1
69717: NOT
69718: PUSH
69719: LD_VAR 0 2
69723: NOT
69724: OR
69725: PUSH
69726: LD_VAR 0 4
69730: NOT
69731: OR
69732: IFFALSE 69736
// exit ;
69734: GO 69925
// while 1 do
69736: LD_INT 1
69738: IFFALSE 69925
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69740: LD_ADDR_VAR 0 9
69744: PUSH
69745: LD_VAR 0 1
69749: PPUSH
69750: LD_INT 1
69752: PPUSH
69753: CALL_OW 287
69757: PUSH
69758: LD_INT 10
69760: MUL
69761: ST_TO_ADDR
// r := rate / 10 ;
69762: LD_ADDR_VAR 0 7
69766: PUSH
69767: LD_VAR 0 2
69771: PUSH
69772: LD_INT 10
69774: DIVREAL
69775: ST_TO_ADDR
// time := 1 1$00 ;
69776: LD_ADDR_VAR 0 8
69780: PUSH
69781: LD_INT 2100
69783: ST_TO_ADDR
// if amount < min then
69784: LD_VAR 0 9
69788: PUSH
69789: LD_VAR 0 3
69793: LESS
69794: IFFALSE 69812
// r := r * 2 else
69796: LD_ADDR_VAR 0 7
69800: PUSH
69801: LD_VAR 0 7
69805: PUSH
69806: LD_INT 2
69808: MUL
69809: ST_TO_ADDR
69810: GO 69838
// if amount > max then
69812: LD_VAR 0 9
69816: PUSH
69817: LD_VAR 0 4
69821: GREATER
69822: IFFALSE 69838
// r := r / 2 ;
69824: LD_ADDR_VAR 0 7
69828: PUSH
69829: LD_VAR 0 7
69833: PUSH
69834: LD_INT 2
69836: DIVREAL
69837: ST_TO_ADDR
// time := time / r ;
69838: LD_ADDR_VAR 0 8
69842: PUSH
69843: LD_VAR 0 8
69847: PUSH
69848: LD_VAR 0 7
69852: DIVREAL
69853: ST_TO_ADDR
// if time < 0 then
69854: LD_VAR 0 8
69858: PUSH
69859: LD_INT 0
69861: LESS
69862: IFFALSE 69879
// time := time * - 1 ;
69864: LD_ADDR_VAR 0 8
69868: PUSH
69869: LD_VAR 0 8
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: MUL
69878: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69879: LD_VAR 0 8
69883: PUSH
69884: LD_INT 35
69886: PPUSH
69887: LD_INT 875
69889: PPUSH
69890: CALL_OW 12
69894: PLUS
69895: PPUSH
69896: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69900: LD_INT 1
69902: PPUSH
69903: LD_INT 5
69905: PPUSH
69906: CALL_OW 12
69910: PPUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: LD_INT 1
69918: PPUSH
69919: CALL_OW 55
// end ;
69923: GO 69736
// end ;
69925: LD_VAR 0 5
69929: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
69934: PPUSH
69935: PPUSH
69936: PPUSH
69937: PPUSH
69938: PPUSH
69939: PPUSH
// if not turrets or not factories then
69940: LD_VAR 0 1
69944: NOT
69945: PUSH
69946: LD_VAR 0 2
69950: NOT
69951: OR
69952: IFFALSE 69956
// exit ;
69954: GO 70263
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69956: LD_ADDR_VAR 0 10
69960: PUSH
69961: LD_INT 5
69963: PUSH
69964: LD_INT 6
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: LD_INT 4
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: LD_INT 5
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 24
69998: PUSH
69999: LD_INT 25
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 23
70008: PUSH
70009: LD_INT 27
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 42
70022: PUSH
70023: LD_INT 43
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 44
70032: PUSH
70033: LD_INT 46
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 45
70042: PUSH
70043: LD_INT 47
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: ST_TO_ADDR
// result := [ ] ;
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: EMPTY
70066: ST_TO_ADDR
// for i in turrets do
70067: LD_ADDR_VAR 0 4
70071: PUSH
70072: LD_VAR 0 1
70076: PUSH
70077: FOR_IN
70078: IFFALSE 70261
// begin nat := GetNation ( i ) ;
70080: LD_ADDR_VAR 0 7
70084: PUSH
70085: LD_VAR 0 4
70089: PPUSH
70090: CALL_OW 248
70094: ST_TO_ADDR
// weapon := 0 ;
70095: LD_ADDR_VAR 0 8
70099: PUSH
70100: LD_INT 0
70102: ST_TO_ADDR
// if not nat then
70103: LD_VAR 0 7
70107: NOT
70108: IFFALSE 70112
// continue ;
70110: GO 70077
// for j in list [ nat ] do
70112: LD_ADDR_VAR 0 5
70116: PUSH
70117: LD_VAR 0 10
70121: PUSH
70122: LD_VAR 0 7
70126: ARRAY
70127: PUSH
70128: FOR_IN
70129: IFFALSE 70170
// if GetBWeapon ( i ) = j [ 1 ] then
70131: LD_VAR 0 4
70135: PPUSH
70136: CALL_OW 269
70140: PUSH
70141: LD_VAR 0 5
70145: PUSH
70146: LD_INT 1
70148: ARRAY
70149: EQUAL
70150: IFFALSE 70168
// begin weapon := j [ 2 ] ;
70152: LD_ADDR_VAR 0 8
70156: PUSH
70157: LD_VAR 0 5
70161: PUSH
70162: LD_INT 2
70164: ARRAY
70165: ST_TO_ADDR
// break ;
70166: GO 70170
// end ;
70168: GO 70128
70170: POP
70171: POP
// if not weapon then
70172: LD_VAR 0 8
70176: NOT
70177: IFFALSE 70181
// continue ;
70179: GO 70077
// for k in factories do
70181: LD_ADDR_VAR 0 6
70185: PUSH
70186: LD_VAR 0 2
70190: PUSH
70191: FOR_IN
70192: IFFALSE 70257
// begin weapons := AvailableWeaponList ( k ) ;
70194: LD_ADDR_VAR 0 9
70198: PUSH
70199: LD_VAR 0 6
70203: PPUSH
70204: CALL_OW 478
70208: ST_TO_ADDR
// if not weapons then
70209: LD_VAR 0 9
70213: NOT
70214: IFFALSE 70218
// continue ;
70216: GO 70191
// if weapon in weapons then
70218: LD_VAR 0 8
70222: PUSH
70223: LD_VAR 0 9
70227: IN
70228: IFFALSE 70255
// begin result := [ i , weapon ] ;
70230: LD_ADDR_VAR 0 3
70234: PUSH
70235: LD_VAR 0 4
70239: PUSH
70240: LD_VAR 0 8
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: ST_TO_ADDR
// exit ;
70249: POP
70250: POP
70251: POP
70252: POP
70253: GO 70263
// end ; end ;
70255: GO 70191
70257: POP
70258: POP
// end ;
70259: GO 70077
70261: POP
70262: POP
// end ;
70263: LD_VAR 0 3
70267: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70268: LD_INT 0
70270: PPUSH
// if not side or side > 8 then
70271: LD_VAR 0 3
70275: NOT
70276: PUSH
70277: LD_VAR 0 3
70281: PUSH
70282: LD_INT 8
70284: GREATER
70285: OR
70286: IFFALSE 70290
// exit ;
70288: GO 70349
// if not range then
70290: LD_VAR 0 4
70294: NOT
70295: IFFALSE 70306
// range := - 12 ;
70297: LD_ADDR_VAR 0 4
70301: PUSH
70302: LD_INT 12
70304: NEG
70305: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70306: LD_VAR 0 1
70310: PPUSH
70311: LD_VAR 0 2
70315: PPUSH
70316: LD_VAR 0 3
70320: PPUSH
70321: LD_VAR 0 4
70325: PPUSH
70326: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70330: LD_VAR 0 1
70334: PPUSH
70335: LD_VAR 0 2
70339: PPUSH
70340: LD_VAR 0 3
70344: PPUSH
70345: CALL_OW 331
// end ;
70349: LD_VAR 0 5
70353: RET
// export function Video ( mode ) ; begin
70354: LD_INT 0
70356: PPUSH
// ingame_video = mode ;
70357: LD_ADDR_OWVAR 52
70361: PUSH
70362: LD_VAR 0 1
70366: ST_TO_ADDR
// interface_hidden = mode ;
70367: LD_ADDR_OWVAR 54
70371: PUSH
70372: LD_VAR 0 1
70376: ST_TO_ADDR
// end ;
70377: LD_VAR 0 2
70381: RET
// export function Join ( array , element ) ; begin
70382: LD_INT 0
70384: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70385: LD_ADDR_VAR 0 3
70389: PUSH
70390: LD_VAR 0 1
70394: PPUSH
70395: LD_VAR 0 1
70399: PUSH
70400: LD_INT 1
70402: PLUS
70403: PPUSH
70404: LD_VAR 0 2
70408: PPUSH
70409: CALL_OW 1
70413: ST_TO_ADDR
// end ;
70414: LD_VAR 0 3
70418: RET
// export function JoinUnion ( array , element ) ; begin
70419: LD_INT 0
70421: PPUSH
// result := array union element ;
70422: LD_ADDR_VAR 0 3
70426: PUSH
70427: LD_VAR 0 1
70431: PUSH
70432: LD_VAR 0 2
70436: UNION
70437: ST_TO_ADDR
// end ;
70438: LD_VAR 0 3
70442: RET
// export function GetBehemoths ( side ) ; begin
70443: LD_INT 0
70445: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70446: LD_ADDR_VAR 0 2
70450: PUSH
70451: LD_INT 22
70453: PUSH
70454: LD_VAR 0 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 31
70465: PUSH
70466: LD_INT 25
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PPUSH
70477: CALL_OW 69
70481: ST_TO_ADDR
// end ;
70482: LD_VAR 0 2
70486: RET
// export function Shuffle ( array ) ; var i , index ; begin
70487: LD_INT 0
70489: PPUSH
70490: PPUSH
70491: PPUSH
// result := [ ] ;
70492: LD_ADDR_VAR 0 2
70496: PUSH
70497: EMPTY
70498: ST_TO_ADDR
// if not array then
70499: LD_VAR 0 1
70503: NOT
70504: IFFALSE 70508
// exit ;
70506: GO 70607
// Randomize ;
70508: CALL_OW 10
// for i = array downto 1 do
70512: LD_ADDR_VAR 0 3
70516: PUSH
70517: DOUBLE
70518: LD_VAR 0 1
70522: INC
70523: ST_TO_ADDR
70524: LD_INT 1
70526: PUSH
70527: FOR_DOWNTO
70528: IFFALSE 70605
// begin index := rand ( 1 , array ) ;
70530: LD_ADDR_VAR 0 4
70534: PUSH
70535: LD_INT 1
70537: PPUSH
70538: LD_VAR 0 1
70542: PPUSH
70543: CALL_OW 12
70547: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70548: LD_ADDR_VAR 0 2
70552: PUSH
70553: LD_VAR 0 2
70557: PPUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 1
70565: PLUS
70566: PPUSH
70567: LD_VAR 0 1
70571: PUSH
70572: LD_VAR 0 4
70576: ARRAY
70577: PPUSH
70578: CALL_OW 2
70582: ST_TO_ADDR
// array := Delete ( array , index ) ;
70583: LD_ADDR_VAR 0 1
70587: PUSH
70588: LD_VAR 0 1
70592: PPUSH
70593: LD_VAR 0 4
70597: PPUSH
70598: CALL_OW 3
70602: ST_TO_ADDR
// end ;
70603: GO 70527
70605: POP
70606: POP
// end ;
70607: LD_VAR 0 2
70611: RET
// export function GetBaseMaterials ( base ) ; begin
70612: LD_INT 0
70614: PPUSH
// result := [ 0 , 0 , 0 ] ;
70615: LD_ADDR_VAR 0 2
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: LIST
70633: ST_TO_ADDR
// if not base then
70634: LD_VAR 0 1
70638: NOT
70639: IFFALSE 70643
// exit ;
70641: GO 70692
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70643: LD_ADDR_VAR 0 2
70647: PUSH
70648: LD_VAR 0 1
70652: PPUSH
70653: LD_INT 1
70655: PPUSH
70656: CALL_OW 275
70660: PUSH
70661: LD_VAR 0 1
70665: PPUSH
70666: LD_INT 2
70668: PPUSH
70669: CALL_OW 275
70673: PUSH
70674: LD_VAR 0 1
70678: PPUSH
70679: LD_INT 3
70681: PPUSH
70682: CALL_OW 275
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: ST_TO_ADDR
// end ;
70692: LD_VAR 0 2
70696: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70697: LD_INT 0
70699: PPUSH
70700: PPUSH
// result := array ;
70701: LD_ADDR_VAR 0 3
70705: PUSH
70706: LD_VAR 0 1
70710: ST_TO_ADDR
// if size >= result then
70711: LD_VAR 0 2
70715: PUSH
70716: LD_VAR 0 3
70720: GREATEREQUAL
70721: IFFALSE 70725
// exit ;
70723: GO 70775
// if size then
70725: LD_VAR 0 2
70729: IFFALSE 70775
// for i := array downto size do
70731: LD_ADDR_VAR 0 4
70735: PUSH
70736: DOUBLE
70737: LD_VAR 0 1
70741: INC
70742: ST_TO_ADDR
70743: LD_VAR 0 2
70747: PUSH
70748: FOR_DOWNTO
70749: IFFALSE 70773
// result := Delete ( result , result ) ;
70751: LD_ADDR_VAR 0 3
70755: PUSH
70756: LD_VAR 0 3
70760: PPUSH
70761: LD_VAR 0 3
70765: PPUSH
70766: CALL_OW 3
70770: ST_TO_ADDR
70771: GO 70748
70773: POP
70774: POP
// end ;
70775: LD_VAR 0 3
70779: RET
// export function ComExit ( unit ) ; var tmp ; begin
70780: LD_INT 0
70782: PPUSH
70783: PPUSH
// if not IsInUnit ( unit ) then
70784: LD_VAR 0 1
70788: PPUSH
70789: CALL_OW 310
70793: NOT
70794: IFFALSE 70798
// exit ;
70796: GO 70858
// tmp := IsInUnit ( unit ) ;
70798: LD_ADDR_VAR 0 3
70802: PUSH
70803: LD_VAR 0 1
70807: PPUSH
70808: CALL_OW 310
70812: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70813: LD_VAR 0 3
70817: PPUSH
70818: CALL_OW 247
70822: PUSH
70823: LD_INT 2
70825: EQUAL
70826: IFFALSE 70839
// ComExitVehicle ( unit ) else
70828: LD_VAR 0 1
70832: PPUSH
70833: CALL_OW 121
70837: GO 70848
// ComExitBuilding ( unit ) ;
70839: LD_VAR 0 1
70843: PPUSH
70844: CALL_OW 122
// result := tmp ;
70848: LD_ADDR_VAR 0 2
70852: PUSH
70853: LD_VAR 0 3
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 2
70862: RET
// export function ComExitAll ( units ) ; var i ; begin
70863: LD_INT 0
70865: PPUSH
70866: PPUSH
// if not units then
70867: LD_VAR 0 1
70871: NOT
70872: IFFALSE 70876
// exit ;
70874: GO 70902
// for i in units do
70876: LD_ADDR_VAR 0 3
70880: PUSH
70881: LD_VAR 0 1
70885: PUSH
70886: FOR_IN
70887: IFFALSE 70900
// ComExit ( i ) ;
70889: LD_VAR 0 3
70893: PPUSH
70894: CALL 70780 0 1
70898: GO 70886
70900: POP
70901: POP
// end ;
70902: LD_VAR 0 2
70906: RET
// export function ResetHc ; begin
70907: LD_INT 0
70909: PPUSH
// InitHc ;
70910: CALL_OW 19
// hc_importance := 0 ;
70914: LD_ADDR_OWVAR 32
70918: PUSH
70919: LD_INT 0
70921: ST_TO_ADDR
// end ;
70922: LD_VAR 0 1
70926: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70927: LD_INT 0
70929: PPUSH
70930: PPUSH
70931: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70932: LD_ADDR_VAR 0 6
70936: PUSH
70937: LD_VAR 0 1
70941: PUSH
70942: LD_VAR 0 3
70946: PLUS
70947: PUSH
70948: LD_INT 2
70950: DIV
70951: ST_TO_ADDR
// if _x < 0 then
70952: LD_VAR 0 6
70956: PUSH
70957: LD_INT 0
70959: LESS
70960: IFFALSE 70977
// _x := _x * - 1 ;
70962: LD_ADDR_VAR 0 6
70966: PUSH
70967: LD_VAR 0 6
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: MUL
70976: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70977: LD_ADDR_VAR 0 7
70981: PUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_VAR 0 4
70991: PLUS
70992: PUSH
70993: LD_INT 2
70995: DIV
70996: ST_TO_ADDR
// if _y < 0 then
70997: LD_VAR 0 7
71001: PUSH
71002: LD_INT 0
71004: LESS
71005: IFFALSE 71022
// _y := _y * - 1 ;
71007: LD_ADDR_VAR 0 7
71011: PUSH
71012: LD_VAR 0 7
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: MUL
71021: ST_TO_ADDR
// result := [ _x , _y ] ;
71022: LD_ADDR_VAR 0 5
71026: PUSH
71027: LD_VAR 0 6
71031: PUSH
71032: LD_VAR 0 7
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: ST_TO_ADDR
// end ;
71041: LD_VAR 0 5
71045: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71046: LD_INT 0
71048: PPUSH
71049: PPUSH
71050: PPUSH
71051: PPUSH
// task := GetTaskList ( unit ) ;
71052: LD_ADDR_VAR 0 7
71056: PUSH
71057: LD_VAR 0 1
71061: PPUSH
71062: CALL_OW 437
71066: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71067: LD_VAR 0 7
71071: NOT
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: LD_VAR 0 2
71082: PPUSH
71083: CALL_OW 308
71087: NOT
71088: AND
71089: IFFALSE 71093
// exit ;
71091: GO 71211
// if IsInArea ( unit , area ) then
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_VAR 0 2
71102: PPUSH
71103: CALL_OW 308
71107: IFFALSE 71125
// begin ComMoveToArea ( unit , goAway ) ;
71109: LD_VAR 0 1
71113: PPUSH
71114: LD_VAR 0 3
71118: PPUSH
71119: CALL_OW 113
// exit ;
71123: GO 71211
// end ; if task [ 1 ] [ 1 ] <> M then
71125: LD_VAR 0 7
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PUSH
71134: LD_INT 1
71136: ARRAY
71137: PUSH
71138: LD_STRING M
71140: NONEQUAL
71141: IFFALSE 71145
// exit ;
71143: GO 71211
// x := task [ 1 ] [ 2 ] ;
71145: LD_ADDR_VAR 0 5
71149: PUSH
71150: LD_VAR 0 7
71154: PUSH
71155: LD_INT 1
71157: ARRAY
71158: PUSH
71159: LD_INT 2
71161: ARRAY
71162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71163: LD_ADDR_VAR 0 6
71167: PUSH
71168: LD_VAR 0 7
71172: PUSH
71173: LD_INT 1
71175: ARRAY
71176: PUSH
71177: LD_INT 3
71179: ARRAY
71180: ST_TO_ADDR
// if InArea ( x , y , area ) then
71181: LD_VAR 0 5
71185: PPUSH
71186: LD_VAR 0 6
71190: PPUSH
71191: LD_VAR 0 2
71195: PPUSH
71196: CALL_OW 309
71200: IFFALSE 71211
// ComStop ( unit ) ;
71202: LD_VAR 0 1
71206: PPUSH
71207: CALL_OW 141
// end ;
71211: LD_VAR 0 4
71215: RET
// export function Abs ( value ) ; begin
71216: LD_INT 0
71218: PPUSH
// result := value ;
71219: LD_ADDR_VAR 0 2
71223: PUSH
71224: LD_VAR 0 1
71228: ST_TO_ADDR
// if value < 0 then
71229: LD_VAR 0 1
71233: PUSH
71234: LD_INT 0
71236: LESS
71237: IFFALSE 71254
// result := value * - 1 ;
71239: LD_ADDR_VAR 0 2
71243: PUSH
71244: LD_VAR 0 1
71248: PUSH
71249: LD_INT 1
71251: NEG
71252: MUL
71253: ST_TO_ADDR
// end ;
71254: LD_VAR 0 2
71258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
71263: PPUSH
71264: PPUSH
71265: PPUSH
71266: PPUSH
71267: PPUSH
71268: PPUSH
// if not unit or not building then
71269: LD_VAR 0 1
71273: NOT
71274: PUSH
71275: LD_VAR 0 2
71279: NOT
71280: OR
71281: IFFALSE 71285
// exit ;
71283: GO 71511
// x := GetX ( building ) ;
71285: LD_ADDR_VAR 0 4
71289: PUSH
71290: LD_VAR 0 2
71294: PPUSH
71295: CALL_OW 250
71299: ST_TO_ADDR
// y := GetY ( building ) ;
71300: LD_ADDR_VAR 0 6
71304: PUSH
71305: LD_VAR 0 2
71309: PPUSH
71310: CALL_OW 251
71314: ST_TO_ADDR
// d := GetDir ( building ) ;
71315: LD_ADDR_VAR 0 8
71319: PUSH
71320: LD_VAR 0 2
71324: PPUSH
71325: CALL_OW 254
71329: ST_TO_ADDR
// r := 4 ;
71330: LD_ADDR_VAR 0 9
71334: PUSH
71335: LD_INT 4
71337: ST_TO_ADDR
// for i := 1 to 5 do
71338: LD_ADDR_VAR 0 10
71342: PUSH
71343: DOUBLE
71344: LD_INT 1
71346: DEC
71347: ST_TO_ADDR
71348: LD_INT 5
71350: PUSH
71351: FOR_TO
71352: IFFALSE 71509
// begin _x := ShiftX ( x , d , r + i ) ;
71354: LD_ADDR_VAR 0 5
71358: PUSH
71359: LD_VAR 0 4
71363: PPUSH
71364: LD_VAR 0 8
71368: PPUSH
71369: LD_VAR 0 9
71373: PUSH
71374: LD_VAR 0 10
71378: PLUS
71379: PPUSH
71380: CALL_OW 272
71384: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71385: LD_ADDR_VAR 0 7
71389: PUSH
71390: LD_VAR 0 6
71394: PPUSH
71395: LD_VAR 0 8
71399: PPUSH
71400: LD_VAR 0 9
71404: PUSH
71405: LD_VAR 0 10
71409: PLUS
71410: PPUSH
71411: CALL_OW 273
71415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71416: LD_VAR 0 5
71420: PPUSH
71421: LD_VAR 0 7
71425: PPUSH
71426: CALL_OW 488
71430: PUSH
71431: LD_VAR 0 5
71435: PPUSH
71436: LD_VAR 0 7
71440: PPUSH
71441: CALL_OW 428
71445: PPUSH
71446: CALL_OW 247
71450: PUSH
71451: LD_INT 3
71453: PUSH
71454: LD_INT 2
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: IN
71461: NOT
71462: AND
71463: IFFALSE 71507
// begin ComMoveXY ( unit , _x , _y ) ;
71465: LD_VAR 0 1
71469: PPUSH
71470: LD_VAR 0 5
71474: PPUSH
71475: LD_VAR 0 7
71479: PPUSH
71480: CALL_OW 111
// result := [ _x , _y ] ;
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_VAR 0 5
71493: PUSH
71494: LD_VAR 0 7
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: ST_TO_ADDR
// exit ;
71503: POP
71504: POP
71505: GO 71511
// end ; end ;
71507: GO 71351
71509: POP
71510: POP
// end ;
71511: LD_VAR 0 3
71515: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71516: LD_INT 0
71518: PPUSH
71519: PPUSH
71520: PPUSH
// result := 0 ;
71521: LD_ADDR_VAR 0 3
71525: PUSH
71526: LD_INT 0
71528: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71529: LD_VAR 0 1
71533: PUSH
71534: LD_INT 0
71536: LESS
71537: PUSH
71538: LD_VAR 0 1
71542: PUSH
71543: LD_INT 8
71545: GREATER
71546: OR
71547: PUSH
71548: LD_VAR 0 2
71552: PUSH
71553: LD_INT 0
71555: LESS
71556: OR
71557: PUSH
71558: LD_VAR 0 2
71562: PUSH
71563: LD_INT 8
71565: GREATER
71566: OR
71567: IFFALSE 71571
// exit ;
71569: GO 71646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71571: LD_ADDR_VAR 0 4
71575: PUSH
71576: LD_INT 22
71578: PUSH
71579: LD_VAR 0 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PPUSH
71588: CALL_OW 69
71592: PUSH
71593: FOR_IN
71594: IFFALSE 71644
// begin un := UnitShoot ( i ) ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: LD_VAR 0 4
71605: PPUSH
71606: CALL_OW 504
71610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71611: LD_VAR 0 5
71615: PPUSH
71616: CALL_OW 255
71620: PUSH
71621: LD_VAR 0 1
71625: EQUAL
71626: IFFALSE 71642
// begin result := un ;
71628: LD_ADDR_VAR 0 3
71632: PUSH
71633: LD_VAR 0 5
71637: ST_TO_ADDR
// exit ;
71638: POP
71639: POP
71640: GO 71646
// end ; end ;
71642: GO 71593
71644: POP
71645: POP
// end ;
71646: LD_VAR 0 3
71650: RET
// export function GetCargoBay ( units ) ; begin
71651: LD_INT 0
71653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_VAR 0 1
71663: PPUSH
71664: LD_INT 2
71666: PUSH
71667: LD_INT 34
71669: PUSH
71670: LD_INT 12
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 34
71679: PUSH
71680: LD_INT 51
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 34
71689: PUSH
71690: LD_INT 32
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 34
71699: PUSH
71700: LD_INT 89
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: PPUSH
71714: CALL_OW 72
71718: ST_TO_ADDR
// end ;
71719: LD_VAR 0 2
71723: RET
// export function Negate ( value ) ; begin
71724: LD_INT 0
71726: PPUSH
// result := not value ;
71727: LD_ADDR_VAR 0 2
71731: PUSH
71732: LD_VAR 0 1
71736: NOT
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 2
71742: RET
// export function Inc ( value ) ; begin
71743: LD_INT 0
71745: PPUSH
// result := value + 1 ;
71746: LD_ADDR_VAR 0 2
71750: PUSH
71751: LD_VAR 0 1
71755: PUSH
71756: LD_INT 1
71758: PLUS
71759: ST_TO_ADDR
// end ;
71760: LD_VAR 0 2
71764: RET
// export function Dec ( value ) ; begin
71765: LD_INT 0
71767: PPUSH
// result := value - 1 ;
71768: LD_ADDR_VAR 0 2
71772: PUSH
71773: LD_VAR 0 1
71777: PUSH
71778: LD_INT 1
71780: MINUS
71781: ST_TO_ADDR
// end ;
71782: LD_VAR 0 2
71786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71787: LD_INT 0
71789: PPUSH
71790: PPUSH
71791: PPUSH
71792: PPUSH
71793: PPUSH
71794: PPUSH
71795: PPUSH
71796: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71797: LD_VAR 0 1
71801: PPUSH
71802: LD_VAR 0 2
71806: PPUSH
71807: CALL_OW 488
71811: NOT
71812: PUSH
71813: LD_VAR 0 3
71817: PPUSH
71818: LD_VAR 0 4
71822: PPUSH
71823: CALL_OW 488
71827: NOT
71828: OR
71829: IFFALSE 71842
// begin result := - 1 ;
71831: LD_ADDR_VAR 0 5
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: ST_TO_ADDR
// exit ;
71840: GO 72077
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71842: LD_ADDR_VAR 0 12
71846: PUSH
71847: LD_VAR 0 1
71851: PPUSH
71852: LD_VAR 0 2
71856: PPUSH
71857: LD_VAR 0 3
71861: PPUSH
71862: LD_VAR 0 4
71866: PPUSH
71867: CALL 70927 0 4
71871: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71872: LD_ADDR_VAR 0 11
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: LD_VAR 0 2
71886: PPUSH
71887: LD_VAR 0 12
71891: PUSH
71892: LD_INT 1
71894: ARRAY
71895: PPUSH
71896: LD_VAR 0 12
71900: PUSH
71901: LD_INT 2
71903: ARRAY
71904: PPUSH
71905: CALL_OW 298
71909: ST_TO_ADDR
// distance := 9999 ;
71910: LD_ADDR_VAR 0 10
71914: PUSH
71915: LD_INT 9999
71917: ST_TO_ADDR
// for i := 0 to 5 do
71918: LD_ADDR_VAR 0 6
71922: PUSH
71923: DOUBLE
71924: LD_INT 0
71926: DEC
71927: ST_TO_ADDR
71928: LD_INT 5
71930: PUSH
71931: FOR_TO
71932: IFFALSE 72075
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71934: LD_ADDR_VAR 0 7
71938: PUSH
71939: LD_VAR 0 1
71943: PPUSH
71944: LD_VAR 0 6
71948: PPUSH
71949: LD_VAR 0 11
71953: PPUSH
71954: CALL_OW 272
71958: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71959: LD_ADDR_VAR 0 8
71963: PUSH
71964: LD_VAR 0 2
71968: PPUSH
71969: LD_VAR 0 6
71973: PPUSH
71974: LD_VAR 0 11
71978: PPUSH
71979: CALL_OW 273
71983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71984: LD_VAR 0 7
71988: PPUSH
71989: LD_VAR 0 8
71993: PPUSH
71994: CALL_OW 488
71998: NOT
71999: IFFALSE 72003
// continue ;
72001: GO 71931
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72003: LD_ADDR_VAR 0 9
72007: PUSH
72008: LD_VAR 0 12
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: PPUSH
72017: LD_VAR 0 12
72021: PUSH
72022: LD_INT 2
72024: ARRAY
72025: PPUSH
72026: LD_VAR 0 7
72030: PPUSH
72031: LD_VAR 0 8
72035: PPUSH
72036: CALL_OW 298
72040: ST_TO_ADDR
// if tmp < distance then
72041: LD_VAR 0 9
72045: PUSH
72046: LD_VAR 0 10
72050: LESS
72051: IFFALSE 72073
// begin result := i ;
72053: LD_ADDR_VAR 0 5
72057: PUSH
72058: LD_VAR 0 6
72062: ST_TO_ADDR
// distance := tmp ;
72063: LD_ADDR_VAR 0 10
72067: PUSH
72068: LD_VAR 0 9
72072: ST_TO_ADDR
// end ; end ;
72073: GO 71931
72075: POP
72076: POP
// end ;
72077: LD_VAR 0 5
72081: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72082: LD_INT 0
72084: PPUSH
72085: PPUSH
// if not driver or not IsInUnit ( driver ) then
72086: LD_VAR 0 1
72090: NOT
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: CALL_OW 310
72101: NOT
72102: OR
72103: IFFALSE 72107
// exit ;
72105: GO 72197
// vehicle := IsInUnit ( driver ) ;
72107: LD_ADDR_VAR 0 3
72111: PUSH
72112: LD_VAR 0 1
72116: PPUSH
72117: CALL_OW 310
72121: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72122: LD_VAR 0 1
72126: PPUSH
72127: LD_STRING \
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: LD_INT 0
72135: PUSH
72136: LD_INT 0
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 0
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: LD_STRING E
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: LD_VAR 0 3
72170: PUSH
72171: LD_INT 0
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PPUSH
72193: CALL_OW 446
// end ;
72197: LD_VAR 0 2
72201: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72202: LD_INT 0
72204: PPUSH
72205: PPUSH
// if not driver or not IsInUnit ( driver ) then
72206: LD_VAR 0 1
72210: NOT
72211: PUSH
72212: LD_VAR 0 1
72216: PPUSH
72217: CALL_OW 310
72221: NOT
72222: OR
72223: IFFALSE 72227
// exit ;
72225: GO 72317
// vehicle := IsInUnit ( driver ) ;
72227: LD_ADDR_VAR 0 3
72231: PUSH
72232: LD_VAR 0 1
72236: PPUSH
72237: CALL_OW 310
72241: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72242: LD_VAR 0 1
72246: PPUSH
72247: LD_STRING \
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: LD_INT 0
72258: PUSH
72259: LD_INT 0
72261: PUSH
72262: LD_INT 0
72264: PUSH
72265: LD_INT 0
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: PUSH
72277: LD_STRING E
72279: PUSH
72280: LD_INT 0
72282: PUSH
72283: LD_INT 0
72285: PUSH
72286: LD_VAR 0 3
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PPUSH
72313: CALL_OW 447
// end ;
72317: LD_VAR 0 2
72321: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72322: LD_INT 0
72324: PPUSH
72325: PPUSH
72326: PPUSH
// tmp := [ ] ;
72327: LD_ADDR_VAR 0 5
72331: PUSH
72332: EMPTY
72333: ST_TO_ADDR
// for i in units do
72334: LD_ADDR_VAR 0 4
72338: PUSH
72339: LD_VAR 0 1
72343: PUSH
72344: FOR_IN
72345: IFFALSE 72383
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72347: LD_ADDR_VAR 0 5
72351: PUSH
72352: LD_VAR 0 5
72356: PPUSH
72357: LD_VAR 0 5
72361: PUSH
72362: LD_INT 1
72364: PLUS
72365: PPUSH
72366: LD_VAR 0 4
72370: PPUSH
72371: CALL_OW 256
72375: PPUSH
72376: CALL_OW 2
72380: ST_TO_ADDR
72381: GO 72344
72383: POP
72384: POP
// if not tmp then
72385: LD_VAR 0 5
72389: NOT
72390: IFFALSE 72394
// exit ;
72392: GO 72442
// if asc then
72394: LD_VAR 0 2
72398: IFFALSE 72422
// result := SortListByListAsc ( units , tmp ) else
72400: LD_ADDR_VAR 0 3
72404: PUSH
72405: LD_VAR 0 1
72409: PPUSH
72410: LD_VAR 0 5
72414: PPUSH
72415: CALL_OW 76
72419: ST_TO_ADDR
72420: GO 72442
// result := SortListByListDesc ( units , tmp ) ;
72422: LD_ADDR_VAR 0 3
72426: PUSH
72427: LD_VAR 0 1
72431: PPUSH
72432: LD_VAR 0 5
72436: PPUSH
72437: CALL_OW 77
72441: ST_TO_ADDR
// end ;
72442: LD_VAR 0 3
72446: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72447: LD_INT 0
72449: PPUSH
72450: PPUSH
// task := GetTaskList ( mech ) ;
72451: LD_ADDR_VAR 0 4
72455: PUSH
72456: LD_VAR 0 1
72460: PPUSH
72461: CALL_OW 437
72465: ST_TO_ADDR
// if not task then
72466: LD_VAR 0 4
72470: NOT
72471: IFFALSE 72475
// exit ;
72473: GO 72517
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72475: LD_ADDR_VAR 0 3
72479: PUSH
72480: LD_VAR 0 4
72484: PUSH
72485: LD_INT 1
72487: ARRAY
72488: PUSH
72489: LD_INT 1
72491: ARRAY
72492: PUSH
72493: LD_STRING r
72495: EQUAL
72496: PUSH
72497: LD_VAR 0 4
72501: PUSH
72502: LD_INT 1
72504: ARRAY
72505: PUSH
72506: LD_INT 4
72508: ARRAY
72509: PUSH
72510: LD_VAR 0 2
72514: EQUAL
72515: AND
72516: ST_TO_ADDR
// end ;
72517: LD_VAR 0 3
72521: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72522: LD_INT 0
72524: PPUSH
// SetDir ( unit , d ) ;
72525: LD_VAR 0 1
72529: PPUSH
72530: LD_VAR 0 4
72534: PPUSH
72535: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72539: LD_VAR 0 1
72543: PPUSH
72544: LD_VAR 0 2
72548: PPUSH
72549: LD_VAR 0 3
72553: PPUSH
72554: LD_VAR 0 5
72558: PPUSH
72559: CALL_OW 48
// end ;
72563: LD_VAR 0 6
72567: RET
// export function ToNaturalNumber ( number ) ; begin
72568: LD_INT 0
72570: PPUSH
// result := number div 1 ;
72571: LD_ADDR_VAR 0 2
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_INT 1
72583: DIV
72584: ST_TO_ADDR
// if number < 0 then
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 0
72592: LESS
72593: IFFALSE 72603
// result := 0 ;
72595: LD_ADDR_VAR 0 2
72599: PUSH
72600: LD_INT 0
72602: ST_TO_ADDR
// end ;
72603: LD_VAR 0 2
72607: RET
// export function SortByClass ( units , class ) ; var un ; begin
72608: LD_INT 0
72610: PPUSH
72611: PPUSH
// if not units or not class then
72612: LD_VAR 0 1
72616: NOT
72617: PUSH
72618: LD_VAR 0 2
72622: NOT
72623: OR
72624: IFFALSE 72628
// exit ;
72626: GO 72723
// result := [ ] ;
72628: LD_ADDR_VAR 0 3
72632: PUSH
72633: EMPTY
72634: ST_TO_ADDR
// for un in units do
72635: LD_ADDR_VAR 0 4
72639: PUSH
72640: LD_VAR 0 1
72644: PUSH
72645: FOR_IN
72646: IFFALSE 72721
// if GetClass ( un ) = class then
72648: LD_VAR 0 4
72652: PPUSH
72653: CALL_OW 257
72657: PUSH
72658: LD_VAR 0 2
72662: EQUAL
72663: IFFALSE 72690
// result := Insert ( result , 1 , un ) else
72665: LD_ADDR_VAR 0 3
72669: PUSH
72670: LD_VAR 0 3
72674: PPUSH
72675: LD_INT 1
72677: PPUSH
72678: LD_VAR 0 4
72682: PPUSH
72683: CALL_OW 2
72687: ST_TO_ADDR
72688: GO 72719
// result := Replace ( result , result + 1 , un ) ;
72690: LD_ADDR_VAR 0 3
72694: PUSH
72695: LD_VAR 0 3
72699: PPUSH
72700: LD_VAR 0 3
72704: PUSH
72705: LD_INT 1
72707: PLUS
72708: PPUSH
72709: LD_VAR 0 4
72713: PPUSH
72714: CALL_OW 1
72718: ST_TO_ADDR
72719: GO 72645
72721: POP
72722: POP
// end ;
72723: LD_VAR 0 3
72727: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72728: LD_INT 0
72730: PPUSH
72731: PPUSH
72732: PPUSH
72733: PPUSH
72734: PPUSH
72735: PPUSH
72736: PPUSH
// result := [ ] ;
72737: LD_ADDR_VAR 0 4
72741: PUSH
72742: EMPTY
72743: ST_TO_ADDR
// if x - r < 0 then
72744: LD_VAR 0 1
72748: PUSH
72749: LD_VAR 0 3
72753: MINUS
72754: PUSH
72755: LD_INT 0
72757: LESS
72758: IFFALSE 72770
// min_x := 0 else
72760: LD_ADDR_VAR 0 8
72764: PUSH
72765: LD_INT 0
72767: ST_TO_ADDR
72768: GO 72786
// min_x := x - r ;
72770: LD_ADDR_VAR 0 8
72774: PUSH
72775: LD_VAR 0 1
72779: PUSH
72780: LD_VAR 0 3
72784: MINUS
72785: ST_TO_ADDR
// if y - r < 0 then
72786: LD_VAR 0 2
72790: PUSH
72791: LD_VAR 0 3
72795: MINUS
72796: PUSH
72797: LD_INT 0
72799: LESS
72800: IFFALSE 72812
// min_y := 0 else
72802: LD_ADDR_VAR 0 7
72806: PUSH
72807: LD_INT 0
72809: ST_TO_ADDR
72810: GO 72828
// min_y := y - r ;
72812: LD_ADDR_VAR 0 7
72816: PUSH
72817: LD_VAR 0 2
72821: PUSH
72822: LD_VAR 0 3
72826: MINUS
72827: ST_TO_ADDR
// max_x := x + r ;
72828: LD_ADDR_VAR 0 9
72832: PUSH
72833: LD_VAR 0 1
72837: PUSH
72838: LD_VAR 0 3
72842: PLUS
72843: ST_TO_ADDR
// max_y := y + r ;
72844: LD_ADDR_VAR 0 10
72848: PUSH
72849: LD_VAR 0 2
72853: PUSH
72854: LD_VAR 0 3
72858: PLUS
72859: ST_TO_ADDR
// for _x = min_x to max_x do
72860: LD_ADDR_VAR 0 5
72864: PUSH
72865: DOUBLE
72866: LD_VAR 0 8
72870: DEC
72871: ST_TO_ADDR
72872: LD_VAR 0 9
72876: PUSH
72877: FOR_TO
72878: IFFALSE 72979
// for _y = min_y to max_y do
72880: LD_ADDR_VAR 0 6
72884: PUSH
72885: DOUBLE
72886: LD_VAR 0 7
72890: DEC
72891: ST_TO_ADDR
72892: LD_VAR 0 10
72896: PUSH
72897: FOR_TO
72898: IFFALSE 72975
// begin if not ValidHex ( _x , _y ) then
72900: LD_VAR 0 5
72904: PPUSH
72905: LD_VAR 0 6
72909: PPUSH
72910: CALL_OW 488
72914: NOT
72915: IFFALSE 72919
// continue ;
72917: GO 72897
// if GetResourceTypeXY ( _x , _y ) then
72919: LD_VAR 0 5
72923: PPUSH
72924: LD_VAR 0 6
72928: PPUSH
72929: CALL_OW 283
72933: IFFALSE 72973
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72935: LD_ADDR_VAR 0 4
72939: PUSH
72940: LD_VAR 0 4
72944: PPUSH
72945: LD_VAR 0 4
72949: PUSH
72950: LD_INT 1
72952: PLUS
72953: PPUSH
72954: LD_VAR 0 5
72958: PUSH
72959: LD_VAR 0 6
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PPUSH
72968: CALL_OW 1
72972: ST_TO_ADDR
// end ;
72973: GO 72897
72975: POP
72976: POP
72977: GO 72877
72979: POP
72980: POP
// end ;
72981: LD_VAR 0 4
72985: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72986: LD_INT 0
72988: PPUSH
72989: PPUSH
72990: PPUSH
72991: PPUSH
72992: PPUSH
72993: PPUSH
72994: PPUSH
72995: PPUSH
// if not units then
72996: LD_VAR 0 1
73000: NOT
73001: IFFALSE 73005
// exit ;
73003: GO 73533
// result := UnitFilter ( units , [ f_ok ] ) ;
73005: LD_ADDR_VAR 0 3
73009: PUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: LD_INT 50
73017: PUSH
73018: EMPTY
73019: LIST
73020: PPUSH
73021: CALL_OW 72
73025: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73026: LD_ADDR_VAR 0 8
73030: PUSH
73031: LD_VAR 0 1
73035: PUSH
73036: LD_INT 1
73038: ARRAY
73039: PPUSH
73040: CALL_OW 255
73044: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73045: LD_ADDR_VAR 0 10
73049: PUSH
73050: LD_INT 29
73052: PUSH
73053: LD_INT 91
73055: PUSH
73056: LD_INT 49
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: ST_TO_ADDR
// if not result then
73064: LD_VAR 0 3
73068: NOT
73069: IFFALSE 73073
// exit ;
73071: GO 73533
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73073: LD_ADDR_VAR 0 5
73077: PUSH
73078: LD_INT 81
73080: PUSH
73081: LD_VAR 0 8
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PPUSH
73090: CALL_OW 69
73094: ST_TO_ADDR
// for i in result do
73095: LD_ADDR_VAR 0 4
73099: PUSH
73100: LD_VAR 0 3
73104: PUSH
73105: FOR_IN
73106: IFFALSE 73531
// begin tag := GetTag ( i ) + 1 ;
73108: LD_ADDR_VAR 0 9
73112: PUSH
73113: LD_VAR 0 4
73117: PPUSH
73118: CALL_OW 110
73122: PUSH
73123: LD_INT 1
73125: PLUS
73126: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73127: LD_ADDR_VAR 0 7
73131: PUSH
73132: LD_VAR 0 4
73136: PPUSH
73137: CALL_OW 250
73141: PPUSH
73142: LD_VAR 0 4
73146: PPUSH
73147: CALL_OW 251
73151: PPUSH
73152: LD_INT 4
73154: PPUSH
73155: CALL 72728 0 3
73159: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73160: LD_VAR 0 4
73164: PPUSH
73165: CALL_OW 247
73169: PUSH
73170: LD_INT 2
73172: EQUAL
73173: PUSH
73174: LD_VAR 0 7
73178: PUSH
73179: LD_INT 2
73181: GREATER
73182: AND
73183: PUSH
73184: LD_VAR 0 4
73188: PPUSH
73189: CALL_OW 264
73193: PUSH
73194: LD_VAR 0 10
73198: IN
73199: NOT
73200: AND
73201: IFFALSE 73240
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73203: LD_VAR 0 4
73207: PPUSH
73208: LD_VAR 0 7
73212: PUSH
73213: LD_INT 1
73215: ARRAY
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PPUSH
73221: LD_VAR 0 7
73225: PUSH
73226: LD_INT 1
73228: ARRAY
73229: PUSH
73230: LD_INT 2
73232: ARRAY
73233: PPUSH
73234: CALL_OW 116
73238: GO 73529
// if path > tag then
73240: LD_VAR 0 2
73244: PUSH
73245: LD_VAR 0 9
73249: GREATER
73250: IFFALSE 73458
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73252: LD_ADDR_VAR 0 6
73256: PUSH
73257: LD_VAR 0 5
73261: PPUSH
73262: LD_INT 91
73264: PUSH
73265: LD_VAR 0 4
73269: PUSH
73270: LD_INT 8
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: LIST
73277: PPUSH
73278: CALL_OW 72
73282: ST_TO_ADDR
// if nearEnemy then
73283: LD_VAR 0 6
73287: IFFALSE 73356
// begin if GetWeapon ( i ) = ru_time_lapser then
73289: LD_VAR 0 4
73293: PPUSH
73294: CALL_OW 264
73298: PUSH
73299: LD_INT 49
73301: EQUAL
73302: IFFALSE 73330
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73304: LD_VAR 0 4
73308: PPUSH
73309: LD_VAR 0 6
73313: PPUSH
73314: LD_VAR 0 4
73318: PPUSH
73319: CALL_OW 74
73323: PPUSH
73324: CALL_OW 112
73328: GO 73354
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73330: LD_VAR 0 4
73334: PPUSH
73335: LD_VAR 0 6
73339: PPUSH
73340: LD_VAR 0 4
73344: PPUSH
73345: CALL_OW 74
73349: PPUSH
73350: CALL 74604 0 2
// end else
73354: GO 73456
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73356: LD_VAR 0 4
73360: PPUSH
73361: LD_VAR 0 2
73365: PUSH
73366: LD_VAR 0 9
73370: ARRAY
73371: PUSH
73372: LD_INT 1
73374: ARRAY
73375: PPUSH
73376: LD_VAR 0 2
73380: PUSH
73381: LD_VAR 0 9
73385: ARRAY
73386: PUSH
73387: LD_INT 2
73389: ARRAY
73390: PPUSH
73391: CALL_OW 297
73395: PUSH
73396: LD_INT 6
73398: GREATER
73399: IFFALSE 73442
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73401: LD_VAR 0 4
73405: PPUSH
73406: LD_VAR 0 2
73410: PUSH
73411: LD_VAR 0 9
73415: ARRAY
73416: PUSH
73417: LD_INT 1
73419: ARRAY
73420: PPUSH
73421: LD_VAR 0 2
73425: PUSH
73426: LD_VAR 0 9
73430: ARRAY
73431: PUSH
73432: LD_INT 2
73434: ARRAY
73435: PPUSH
73436: CALL_OW 114
73440: GO 73456
// SetTag ( i , tag ) ;
73442: LD_VAR 0 4
73446: PPUSH
73447: LD_VAR 0 9
73451: PPUSH
73452: CALL_OW 109
// end else
73456: GO 73529
// if enemy then
73458: LD_VAR 0 5
73462: IFFALSE 73529
// begin if GetWeapon ( i ) = ru_time_lapser then
73464: LD_VAR 0 4
73468: PPUSH
73469: CALL_OW 264
73473: PUSH
73474: LD_INT 49
73476: EQUAL
73477: IFFALSE 73505
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73479: LD_VAR 0 4
73483: PPUSH
73484: LD_VAR 0 5
73488: PPUSH
73489: LD_VAR 0 4
73493: PPUSH
73494: CALL_OW 74
73498: PPUSH
73499: CALL_OW 112
73503: GO 73529
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73505: LD_VAR 0 4
73509: PPUSH
73510: LD_VAR 0 5
73514: PPUSH
73515: LD_VAR 0 4
73519: PPUSH
73520: CALL_OW 74
73524: PPUSH
73525: CALL 74604 0 2
// end ; end ;
73529: GO 73105
73531: POP
73532: POP
// end ;
73533: LD_VAR 0 3
73537: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73538: LD_INT 0
73540: PPUSH
73541: PPUSH
73542: PPUSH
// if not unit or IsInUnit ( unit ) then
73543: LD_VAR 0 1
73547: NOT
73548: PUSH
73549: LD_VAR 0 1
73553: PPUSH
73554: CALL_OW 310
73558: OR
73559: IFFALSE 73563
// exit ;
73561: GO 73654
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73563: LD_ADDR_VAR 0 4
73567: PUSH
73568: LD_VAR 0 1
73572: PPUSH
73573: CALL_OW 250
73577: PPUSH
73578: LD_VAR 0 2
73582: PPUSH
73583: LD_INT 1
73585: PPUSH
73586: CALL_OW 272
73590: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73591: LD_ADDR_VAR 0 5
73595: PUSH
73596: LD_VAR 0 1
73600: PPUSH
73601: CALL_OW 251
73605: PPUSH
73606: LD_VAR 0 2
73610: PPUSH
73611: LD_INT 1
73613: PPUSH
73614: CALL_OW 273
73618: ST_TO_ADDR
// if ValidHex ( x , y ) then
73619: LD_VAR 0 4
73623: PPUSH
73624: LD_VAR 0 5
73628: PPUSH
73629: CALL_OW 488
73633: IFFALSE 73654
// ComTurnXY ( unit , x , y ) ;
73635: LD_VAR 0 1
73639: PPUSH
73640: LD_VAR 0 4
73644: PPUSH
73645: LD_VAR 0 5
73649: PPUSH
73650: CALL_OW 118
// end ;
73654: LD_VAR 0 3
73658: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73659: LD_INT 0
73661: PPUSH
73662: PPUSH
// result := false ;
73663: LD_ADDR_VAR 0 3
73667: PUSH
73668: LD_INT 0
73670: ST_TO_ADDR
// if not units then
73671: LD_VAR 0 2
73675: NOT
73676: IFFALSE 73680
// exit ;
73678: GO 73725
// for i in units do
73680: LD_ADDR_VAR 0 4
73684: PUSH
73685: LD_VAR 0 2
73689: PUSH
73690: FOR_IN
73691: IFFALSE 73723
// if See ( side , i ) then
73693: LD_VAR 0 1
73697: PPUSH
73698: LD_VAR 0 4
73702: PPUSH
73703: CALL_OW 292
73707: IFFALSE 73721
// begin result := true ;
73709: LD_ADDR_VAR 0 3
73713: PUSH
73714: LD_INT 1
73716: ST_TO_ADDR
// exit ;
73717: POP
73718: POP
73719: GO 73725
// end ;
73721: GO 73690
73723: POP
73724: POP
// end ;
73725: LD_VAR 0 3
73729: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73730: LD_INT 0
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
// if not unit or not points then
73736: LD_VAR 0 1
73740: NOT
73741: PUSH
73742: LD_VAR 0 2
73746: NOT
73747: OR
73748: IFFALSE 73752
// exit ;
73750: GO 73842
// dist := 99999 ;
73752: LD_ADDR_VAR 0 5
73756: PUSH
73757: LD_INT 99999
73759: ST_TO_ADDR
// for i in points do
73760: LD_ADDR_VAR 0 4
73764: PUSH
73765: LD_VAR 0 2
73769: PUSH
73770: FOR_IN
73771: IFFALSE 73840
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73773: LD_ADDR_VAR 0 6
73777: PUSH
73778: LD_VAR 0 1
73782: PPUSH
73783: LD_VAR 0 4
73787: PUSH
73788: LD_INT 1
73790: ARRAY
73791: PPUSH
73792: LD_VAR 0 4
73796: PUSH
73797: LD_INT 2
73799: ARRAY
73800: PPUSH
73801: CALL_OW 297
73805: ST_TO_ADDR
// if tmpDist < dist then
73806: LD_VAR 0 6
73810: PUSH
73811: LD_VAR 0 5
73815: LESS
73816: IFFALSE 73838
// begin result := i ;
73818: LD_ADDR_VAR 0 3
73822: PUSH
73823: LD_VAR 0 4
73827: ST_TO_ADDR
// dist := tmpDist ;
73828: LD_ADDR_VAR 0 5
73832: PUSH
73833: LD_VAR 0 6
73837: ST_TO_ADDR
// end ; end ;
73838: GO 73770
73840: POP
73841: POP
// end ;
73842: LD_VAR 0 3
73846: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73847: LD_INT 0
73849: PPUSH
// uc_side := side ;
73850: LD_ADDR_OWVAR 20
73854: PUSH
73855: LD_VAR 0 1
73859: ST_TO_ADDR
// uc_nation := 3 ;
73860: LD_ADDR_OWVAR 21
73864: PUSH
73865: LD_INT 3
73867: ST_TO_ADDR
// vc_chassis := 25 ;
73868: LD_ADDR_OWVAR 37
73872: PUSH
73873: LD_INT 25
73875: ST_TO_ADDR
// vc_engine := engine_siberite ;
73876: LD_ADDR_OWVAR 39
73880: PUSH
73881: LD_INT 3
73883: ST_TO_ADDR
// vc_control := control_computer ;
73884: LD_ADDR_OWVAR 38
73888: PUSH
73889: LD_INT 3
73891: ST_TO_ADDR
// vc_weapon := 59 ;
73892: LD_ADDR_OWVAR 40
73896: PUSH
73897: LD_INT 59
73899: ST_TO_ADDR
// result := CreateVehicle ;
73900: LD_ADDR_VAR 0 5
73904: PUSH
73905: CALL_OW 45
73909: ST_TO_ADDR
// SetDir ( result , d ) ;
73910: LD_VAR 0 5
73914: PPUSH
73915: LD_VAR 0 4
73919: PPUSH
73920: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73924: LD_VAR 0 5
73928: PPUSH
73929: LD_VAR 0 2
73933: PPUSH
73934: LD_VAR 0 3
73938: PPUSH
73939: LD_INT 0
73941: PPUSH
73942: CALL_OW 48
// end ;
73946: LD_VAR 0 5
73950: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73951: LD_INT 0
73953: PPUSH
73954: PPUSH
73955: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73956: LD_ADDR_VAR 0 2
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: LD_INT 0
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73979: LD_VAR 0 1
73983: NOT
73984: PUSH
73985: LD_VAR 0 1
73989: PPUSH
73990: CALL_OW 264
73994: PUSH
73995: LD_INT 12
73997: PUSH
73998: LD_INT 51
74000: PUSH
74001: LD_INT 32
74003: PUSH
74004: LD_INT 89
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: IN
74013: NOT
74014: OR
74015: IFFALSE 74019
// exit ;
74017: GO 74117
// for i := 1 to 3 do
74019: LD_ADDR_VAR 0 3
74023: PUSH
74024: DOUBLE
74025: LD_INT 1
74027: DEC
74028: ST_TO_ADDR
74029: LD_INT 3
74031: PUSH
74032: FOR_TO
74033: IFFALSE 74115
// begin tmp := GetCargo ( cargo , i ) ;
74035: LD_ADDR_VAR 0 4
74039: PUSH
74040: LD_VAR 0 1
74044: PPUSH
74045: LD_VAR 0 3
74049: PPUSH
74050: CALL_OW 289
74054: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74055: LD_ADDR_VAR 0 2
74059: PUSH
74060: LD_VAR 0 2
74064: PPUSH
74065: LD_VAR 0 3
74069: PPUSH
74070: LD_VAR 0 4
74074: PPUSH
74075: CALL_OW 1
74079: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74080: LD_ADDR_VAR 0 2
74084: PUSH
74085: LD_VAR 0 2
74089: PPUSH
74090: LD_INT 4
74092: PPUSH
74093: LD_VAR 0 2
74097: PUSH
74098: LD_INT 4
74100: ARRAY
74101: PUSH
74102: LD_VAR 0 4
74106: PLUS
74107: PPUSH
74108: CALL_OW 1
74112: ST_TO_ADDR
// end ;
74113: GO 74032
74115: POP
74116: POP
// end ;
74117: LD_VAR 0 2
74121: RET
// export function Length ( array ) ; begin
74122: LD_INT 0
74124: PPUSH
// result := array + 0 ;
74125: LD_ADDR_VAR 0 2
74129: PUSH
74130: LD_VAR 0 1
74134: PUSH
74135: LD_INT 0
74137: PLUS
74138: ST_TO_ADDR
// end ;
74139: LD_VAR 0 2
74143: RET
// export function PrepareArray ( array ) ; begin
74144: LD_INT 0
74146: PPUSH
// result := array diff 0 ;
74147: LD_ADDR_VAR 0 2
74151: PUSH
74152: LD_VAR 0 1
74156: PUSH
74157: LD_INT 0
74159: DIFF
74160: ST_TO_ADDR
// if not result [ 1 ] then
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: NOT
74170: IFFALSE 74190
// result := Delete ( result , 1 ) ;
74172: LD_ADDR_VAR 0 2
74176: PUSH
74177: LD_VAR 0 2
74181: PPUSH
74182: LD_INT 1
74184: PPUSH
74185: CALL_OW 3
74189: ST_TO_ADDR
// end ;
74190: LD_VAR 0 2
74194: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74195: LD_INT 0
74197: PPUSH
74198: PPUSH
74199: PPUSH
74200: PPUSH
// sibRocketRange := 25 ;
74201: LD_ADDR_VAR 0 6
74205: PUSH
74206: LD_INT 25
74208: ST_TO_ADDR
// result := false ;
74209: LD_ADDR_VAR 0 4
74213: PUSH
74214: LD_INT 0
74216: ST_TO_ADDR
// for i := 0 to 5 do
74217: LD_ADDR_VAR 0 5
74221: PUSH
74222: DOUBLE
74223: LD_INT 0
74225: DEC
74226: ST_TO_ADDR
74227: LD_INT 5
74229: PUSH
74230: FOR_TO
74231: IFFALSE 74298
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74233: LD_VAR 0 1
74237: PPUSH
74238: LD_VAR 0 5
74242: PPUSH
74243: LD_VAR 0 6
74247: PPUSH
74248: CALL_OW 272
74252: PPUSH
74253: LD_VAR 0 2
74257: PPUSH
74258: LD_VAR 0 5
74262: PPUSH
74263: LD_VAR 0 6
74267: PPUSH
74268: CALL_OW 273
74272: PPUSH
74273: LD_VAR 0 3
74277: PPUSH
74278: CALL_OW 309
74282: IFFALSE 74296
// begin result := true ;
74284: LD_ADDR_VAR 0 4
74288: PUSH
74289: LD_INT 1
74291: ST_TO_ADDR
// exit ;
74292: POP
74293: POP
74294: GO 74300
// end ;
74296: GO 74230
74298: POP
74299: POP
// end ;
74300: LD_VAR 0 4
74304: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74305: LD_INT 0
74307: PPUSH
74308: PPUSH
74309: PPUSH
// if btype = b_depot then
74310: LD_VAR 0 2
74314: PUSH
74315: LD_INT 0
74317: EQUAL
74318: IFFALSE 74330
// begin result := true ;
74320: LD_ADDR_VAR 0 3
74324: PUSH
74325: LD_INT 1
74327: ST_TO_ADDR
// exit ;
74328: GO 74446
// end ; pom := GetBase ( depot ) ;
74330: LD_ADDR_VAR 0 4
74334: PUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 274
74344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74345: LD_ADDR_VAR 0 5
74349: PUSH
74350: LD_VAR 0 2
74354: PPUSH
74355: LD_VAR 0 1
74359: PPUSH
74360: CALL_OW 248
74364: PPUSH
74365: CALL_OW 450
74369: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74370: LD_ADDR_VAR 0 3
74374: PUSH
74375: LD_VAR 0 4
74379: PPUSH
74380: LD_INT 1
74382: PPUSH
74383: CALL_OW 275
74387: PUSH
74388: LD_VAR 0 5
74392: PUSH
74393: LD_INT 1
74395: ARRAY
74396: GREATEREQUAL
74397: PUSH
74398: LD_VAR 0 4
74402: PPUSH
74403: LD_INT 2
74405: PPUSH
74406: CALL_OW 275
74410: PUSH
74411: LD_VAR 0 5
74415: PUSH
74416: LD_INT 2
74418: ARRAY
74419: GREATEREQUAL
74420: AND
74421: PUSH
74422: LD_VAR 0 4
74426: PPUSH
74427: LD_INT 3
74429: PPUSH
74430: CALL_OW 275
74434: PUSH
74435: LD_VAR 0 5
74439: PUSH
74440: LD_INT 3
74442: ARRAY
74443: GREATEREQUAL
74444: AND
74445: ST_TO_ADDR
// end ;
74446: LD_VAR 0 3
74450: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74451: LD_INT 0
74453: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74454: LD_VAR 0 1
74458: PPUSH
74459: LD_VAR 0 2
74463: PPUSH
74464: LD_INT 0
74466: PPUSH
74467: LD_INT 0
74469: PPUSH
74470: LD_INT 1
74472: PPUSH
74473: LD_INT 0
74475: PPUSH
74476: CALL_OW 587
// end ;
74480: LD_VAR 0 3
74484: RET
// export function CenterOnNow ( unit ) ; begin
74485: LD_INT 0
74487: PPUSH
// result := IsInUnit ( unit ) ;
74488: LD_ADDR_VAR 0 2
74492: PUSH
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL_OW 310
74502: ST_TO_ADDR
// if not result then
74503: LD_VAR 0 2
74507: NOT
74508: IFFALSE 74520
// result := unit ;
74510: LD_ADDR_VAR 0 2
74514: PUSH
74515: LD_VAR 0 1
74519: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74520: LD_VAR 0 1
74524: PPUSH
74525: CALL_OW 87
// end ;
74529: LD_VAR 0 2
74533: RET
// export function ComMoveHex ( unit , hex ) ; begin
74534: LD_INT 0
74536: PPUSH
// if not hex then
74537: LD_VAR 0 2
74541: NOT
74542: IFFALSE 74546
// exit ;
74544: GO 74599
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74546: LD_VAR 0 2
74550: PUSH
74551: LD_INT 1
74553: ARRAY
74554: PPUSH
74555: LD_VAR 0 2
74559: PUSH
74560: LD_INT 2
74562: ARRAY
74563: PPUSH
74564: CALL_OW 428
74568: IFFALSE 74572
// exit ;
74570: GO 74599
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74572: LD_VAR 0 1
74576: PPUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 1
74584: ARRAY
74585: PPUSH
74586: LD_VAR 0 2
74590: PUSH
74591: LD_INT 2
74593: ARRAY
74594: PPUSH
74595: CALL_OW 111
// end ;
74599: LD_VAR 0 3
74603: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74604: LD_INT 0
74606: PPUSH
74607: PPUSH
74608: PPUSH
// if not unit or not enemy then
74609: LD_VAR 0 1
74613: NOT
74614: PUSH
74615: LD_VAR 0 2
74619: NOT
74620: OR
74621: IFFALSE 74625
// exit ;
74623: GO 74749
// x := GetX ( enemy ) ;
74625: LD_ADDR_VAR 0 4
74629: PUSH
74630: LD_VAR 0 2
74634: PPUSH
74635: CALL_OW 250
74639: ST_TO_ADDR
// y := GetY ( enemy ) ;
74640: LD_ADDR_VAR 0 5
74644: PUSH
74645: LD_VAR 0 2
74649: PPUSH
74650: CALL_OW 251
74654: ST_TO_ADDR
// if ValidHex ( x , y ) then
74655: LD_VAR 0 4
74659: PPUSH
74660: LD_VAR 0 5
74664: PPUSH
74665: CALL_OW 488
74669: IFFALSE 74749
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74671: LD_VAR 0 2
74675: PPUSH
74676: CALL_OW 247
74680: PUSH
74681: LD_INT 3
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: IN
74691: PUSH
74692: LD_VAR 0 1
74696: PPUSH
74697: CALL_OW 255
74701: PPUSH
74702: LD_VAR 0 2
74706: PPUSH
74707: CALL_OW 292
74711: OR
74712: IFFALSE 74730
// ComAttackUnit ( unit , enemy ) else
74714: LD_VAR 0 1
74718: PPUSH
74719: LD_VAR 0 2
74723: PPUSH
74724: CALL_OW 115
74728: GO 74749
// ComAgressiveMove ( unit , x , y ) ;
74730: LD_VAR 0 1
74734: PPUSH
74735: LD_VAR 0 4
74739: PPUSH
74740: LD_VAR 0 5
74744: PPUSH
74745: CALL_OW 114
// end ;
74749: LD_VAR 0 3
74753: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74754: LD_INT 0
74756: PPUSH
74757: PPUSH
74758: PPUSH
// list := AreaToList ( area , 0 ) ;
74759: LD_ADDR_VAR 0 5
74763: PUSH
74764: LD_VAR 0 1
74768: PPUSH
74769: LD_INT 0
74771: PPUSH
74772: CALL_OW 517
74776: ST_TO_ADDR
// if not list then
74777: LD_VAR 0 5
74781: NOT
74782: IFFALSE 74786
// exit ;
74784: GO 74916
// if all then
74786: LD_VAR 0 2
74790: IFFALSE 74878
// begin for i := 1 to list [ 1 ] do
74792: LD_ADDR_VAR 0 4
74796: PUSH
74797: DOUBLE
74798: LD_INT 1
74800: DEC
74801: ST_TO_ADDR
74802: LD_VAR 0 5
74806: PUSH
74807: LD_INT 1
74809: ARRAY
74810: PUSH
74811: FOR_TO
74812: IFFALSE 74874
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74814: LD_ADDR_VAR 0 3
74818: PUSH
74819: LD_VAR 0 3
74823: PPUSH
74824: LD_VAR 0 3
74828: PUSH
74829: LD_INT 1
74831: PLUS
74832: PPUSH
74833: LD_VAR 0 5
74837: PUSH
74838: LD_INT 1
74840: ARRAY
74841: PUSH
74842: LD_VAR 0 4
74846: ARRAY
74847: PUSH
74848: LD_VAR 0 5
74852: PUSH
74853: LD_INT 2
74855: ARRAY
74856: PUSH
74857: LD_VAR 0 4
74861: ARRAY
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PPUSH
74867: CALL_OW 1
74871: ST_TO_ADDR
74872: GO 74811
74874: POP
74875: POP
// exit ;
74876: GO 74916
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74878: LD_ADDR_VAR 0 3
74882: PUSH
74883: LD_VAR 0 5
74887: PUSH
74888: LD_INT 1
74890: ARRAY
74891: PUSH
74892: LD_INT 1
74894: ARRAY
74895: PUSH
74896: LD_VAR 0 5
74900: PUSH
74901: LD_INT 2
74903: ARRAY
74904: PUSH
74905: LD_INT 1
74907: ARRAY
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: EMPTY
74914: LIST
74915: ST_TO_ADDR
// end ;
74916: LD_VAR 0 3
74920: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74921: LD_INT 0
74923: PPUSH
74924: PPUSH
// list := AreaToList ( area , 0 ) ;
74925: LD_ADDR_VAR 0 4
74929: PUSH
74930: LD_VAR 0 1
74934: PPUSH
74935: LD_INT 0
74937: PPUSH
74938: CALL_OW 517
74942: ST_TO_ADDR
// if not list then
74943: LD_VAR 0 4
74947: NOT
74948: IFFALSE 74952
// exit ;
74950: GO 74993
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74952: LD_ADDR_VAR 0 3
74956: PUSH
74957: LD_VAR 0 4
74961: PUSH
74962: LD_INT 1
74964: ARRAY
74965: PUSH
74966: LD_INT 1
74968: ARRAY
74969: PUSH
74970: LD_VAR 0 4
74974: PUSH
74975: LD_INT 2
74977: ARRAY
74978: PUSH
74979: LD_INT 1
74981: ARRAY
74982: PUSH
74983: LD_VAR 0 2
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: ST_TO_ADDR
// end ;
74993: LD_VAR 0 3
74997: RET
// export function First ( array ) ; begin
74998: LD_INT 0
75000: PPUSH
// if not array then
75001: LD_VAR 0 1
75005: NOT
75006: IFFALSE 75010
// exit ;
75008: GO 75024
// result := array [ 1 ] ;
75010: LD_ADDR_VAR 0 2
75014: PUSH
75015: LD_VAR 0 1
75019: PUSH
75020: LD_INT 1
75022: ARRAY
75023: ST_TO_ADDR
// end ;
75024: LD_VAR 0 2
75028: RET
// export function Last ( array ) ; begin
75029: LD_INT 0
75031: PPUSH
// if not array then
75032: LD_VAR 0 1
75036: NOT
75037: IFFALSE 75041
// exit ;
75039: GO 75057
// result := array [ array ] ;
75041: LD_ADDR_VAR 0 2
75045: PUSH
75046: LD_VAR 0 1
75050: PUSH
75051: LD_VAR 0 1
75055: ARRAY
75056: ST_TO_ADDR
// end ;
75057: LD_VAR 0 2
75061: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75062: LD_INT 0
75064: PPUSH
75065: PPUSH
// result := [ ] ;
75066: LD_ADDR_VAR 0 5
75070: PUSH
75071: EMPTY
75072: ST_TO_ADDR
// if not array then
75073: LD_VAR 0 1
75077: NOT
75078: IFFALSE 75082
// exit ;
75080: GO 75194
// for i := 1 to array do
75082: LD_ADDR_VAR 0 6
75086: PUSH
75087: DOUBLE
75088: LD_INT 1
75090: DEC
75091: ST_TO_ADDR
75092: LD_VAR 0 1
75096: PUSH
75097: FOR_TO
75098: IFFALSE 75192
// if array [ i ] [ index ] = value then
75100: LD_VAR 0 1
75104: PUSH
75105: LD_VAR 0 6
75109: ARRAY
75110: PUSH
75111: LD_VAR 0 2
75115: ARRAY
75116: PUSH
75117: LD_VAR 0 3
75121: EQUAL
75122: IFFALSE 75190
// begin if indexColumn then
75124: LD_VAR 0 4
75128: IFFALSE 75164
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: LD_VAR 0 5
75139: PPUSH
75140: LD_VAR 0 1
75144: PUSH
75145: LD_VAR 0 6
75149: ARRAY
75150: PUSH
75151: LD_VAR 0 4
75155: ARRAY
75156: PPUSH
75157: CALL 70382 0 2
75161: ST_TO_ADDR
75162: GO 75190
// result := Join ( result , array [ i ] ) ;
75164: LD_ADDR_VAR 0 5
75168: PUSH
75169: LD_VAR 0 5
75173: PPUSH
75174: LD_VAR 0 1
75178: PUSH
75179: LD_VAR 0 6
75183: ARRAY
75184: PPUSH
75185: CALL 70382 0 2
75189: ST_TO_ADDR
// end ;
75190: GO 75097
75192: POP
75193: POP
// end ;
75194: LD_VAR 0 5
75198: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75199: LD_INT 0
75201: PPUSH
// if not vehicles or not parkingPoint then
75202: LD_VAR 0 1
75206: NOT
75207: PUSH
75208: LD_VAR 0 2
75212: NOT
75213: OR
75214: IFFALSE 75218
// exit ;
75216: GO 75316
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75218: LD_ADDR_VAR 0 1
75222: PUSH
75223: LD_VAR 0 1
75227: PPUSH
75228: LD_INT 50
75230: PUSH
75231: EMPTY
75232: LIST
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: LD_INT 92
75239: PUSH
75240: LD_VAR 0 2
75244: PUSH
75245: LD_INT 1
75247: ARRAY
75248: PUSH
75249: LD_VAR 0 2
75253: PUSH
75254: LD_INT 2
75256: ARRAY
75257: PUSH
75258: LD_INT 8
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PPUSH
75275: CALL_OW 72
75279: ST_TO_ADDR
// if not vehicles then
75280: LD_VAR 0 1
75284: NOT
75285: IFFALSE 75289
// exit ;
75287: GO 75316
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75289: LD_VAR 0 1
75293: PPUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: PPUSH
75303: LD_VAR 0 2
75307: PUSH
75308: LD_INT 2
75310: ARRAY
75311: PPUSH
75312: CALL_OW 111
// end ;
75316: LD_VAR 0 3
75320: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75321: LD_INT 0
75323: PPUSH
75324: PPUSH
75325: PPUSH
// if not side or not area then
75326: LD_VAR 0 1
75330: NOT
75331: PUSH
75332: LD_VAR 0 2
75336: NOT
75337: OR
75338: IFFALSE 75342
// exit ;
75340: GO 75461
// tmp := AreaToList ( area , 0 ) ;
75342: LD_ADDR_VAR 0 5
75346: PUSH
75347: LD_VAR 0 2
75351: PPUSH
75352: LD_INT 0
75354: PPUSH
75355: CALL_OW 517
75359: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75360: LD_ADDR_VAR 0 4
75364: PUSH
75365: DOUBLE
75366: LD_INT 1
75368: DEC
75369: ST_TO_ADDR
75370: LD_VAR 0 5
75374: PUSH
75375: LD_INT 1
75377: ARRAY
75378: PUSH
75379: FOR_TO
75380: IFFALSE 75459
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75382: LD_VAR 0 5
75386: PUSH
75387: LD_INT 1
75389: ARRAY
75390: PUSH
75391: LD_VAR 0 4
75395: ARRAY
75396: PPUSH
75397: LD_VAR 0 5
75401: PUSH
75402: LD_INT 2
75404: ARRAY
75405: PUSH
75406: LD_VAR 0 4
75410: ARRAY
75411: PPUSH
75412: CALL_OW 351
75416: IFFALSE 75457
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75418: LD_VAR 0 5
75422: PUSH
75423: LD_INT 1
75425: ARRAY
75426: PUSH
75427: LD_VAR 0 4
75431: ARRAY
75432: PPUSH
75433: LD_VAR 0 5
75437: PUSH
75438: LD_INT 2
75440: ARRAY
75441: PUSH
75442: LD_VAR 0 4
75446: ARRAY
75447: PPUSH
75448: LD_VAR 0 1
75452: PPUSH
75453: CALL_OW 244
// end ;
75457: GO 75379
75459: POP
75460: POP
// end ; end_of_file
75461: LD_VAR 0 3
75465: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75466: LD_VAR 0 1
75470: PUSH
75471: LD_INT 200
75473: DOUBLE
75474: GREATEREQUAL
75475: IFFALSE 75483
75477: LD_INT 299
75479: DOUBLE
75480: LESSEQUAL
75481: IFTRUE 75485
75483: GO 75517
75485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75486: LD_VAR 0 1
75490: PPUSH
75491: LD_VAR 0 2
75495: PPUSH
75496: LD_VAR 0 3
75500: PPUSH
75501: LD_VAR 0 4
75505: PPUSH
75506: LD_VAR 0 5
75510: PPUSH
75511: CALL 27951 0 5
75515: GO 75594
75517: LD_INT 300
75519: DOUBLE
75520: GREATEREQUAL
75521: IFFALSE 75529
75523: LD_INT 399
75525: DOUBLE
75526: LESSEQUAL
75527: IFTRUE 75531
75529: GO 75593
75531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75532: LD_VAR 0 1
75536: PPUSH
75537: LD_VAR 0 2
75541: PPUSH
75542: LD_VAR 0 3
75546: PPUSH
75547: LD_VAR 0 4
75551: PPUSH
75552: LD_VAR 0 5
75556: PPUSH
75557: LD_VAR 0 6
75561: PPUSH
75562: LD_VAR 0 7
75566: PPUSH
75567: LD_VAR 0 8
75571: PPUSH
75572: LD_VAR 0 9
75576: PPUSH
75577: LD_VAR 0 10
75581: PPUSH
75582: LD_VAR 0 11
75586: PPUSH
75587: CALL 23939 0 11
75591: GO 75594
75593: POP
// end ;
75594: PPOPN 11
75596: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75597: LD_VAR 0 1
75601: PPUSH
75602: LD_VAR 0 2
75606: PPUSH
75607: LD_VAR 0 3
75611: PPUSH
75612: LD_VAR 0 4
75616: PPUSH
75617: LD_VAR 0 5
75621: PPUSH
75622: CALL 27416 0 5
// end ; end_of_file
75626: PPOPN 5
75628: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75629: LD_VAR 0 1
75633: PPUSH
75634: LD_VAR 0 2
75638: PPUSH
75639: LD_VAR 0 3
75643: PPUSH
75644: LD_VAR 0 4
75648: PPUSH
75649: LD_VAR 0 5
75653: PPUSH
75654: LD_VAR 0 6
75658: PPUSH
75659: CALL 11591 0 6
// end ;
75663: PPOPN 6
75665: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75666: LD_INT 0
75668: PPUSH
// begin if not units then
75669: LD_VAR 0 1
75673: NOT
75674: IFFALSE 75678
// exit ;
75676: GO 75678
// end ;
75678: PPOPN 7
75680: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75681: CALL 11478 0 0
// end ;
75685: PPOPN 1
75687: END
