// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10862 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 32748 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 37672 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 32748 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 32748 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 32748 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 37672 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 37672 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 66791 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 37672 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 72683 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 32895 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2250
1740: PUSH
1741: LD_INT 3500
1743: PUSH
1744: LD_INT 4500
1746: PUSH
1747: LD_INT 5600
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 37672 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 37672 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 66712 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 70543 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 34934 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 71024 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 70941 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 46268 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 73153 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27384 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 70941 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27442 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 71904 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 70543 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 70543 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27426 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 37672 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 72683 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 37672 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 72683 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 37672 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 72683 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 50
9937: PUSH
9938: EMPTY
9939: LIST
9940: PUSH
9941: LD_INT 23
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 21
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PPUSH
9967: CALL_OW 69
9971: PUSH
9972: LD_INT 0
9974: EQUAL
9975: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9976: LD_EXP 8
9980: PPUSH
9981: LD_STRING 14_JMM
9983: PPUSH
9984: CALL_OW 38
// if tick <= 50 50$00 then
9988: LD_OWVAR 1
9992: PUSH
9993: LD_INT 105000
9995: LESSEQUAL
9996: IFFALSE 10005
// SetAchievement ( ACH_ASPEED_14 ) ;
9998: LD_STRING ACH_ASPEED_14
10000: PPUSH
10001: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10005: LD_EXP 8
10009: PPUSH
10010: CALL_OW 310
10014: PUSH
10015: LD_EXP 8
10019: PPUSH
10020: CALL_OW 310
10024: PPUSH
10025: CALL_OW 247
10029: PUSH
10030: LD_INT 2
10032: EQUAL
10033: AND
10034: IFFALSE 10116
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_EXP 8
10045: PPUSH
10046: CALL_OW 310
10050: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10051: LD_VAR 0 3
10055: PPUSH
10056: CALL_OW 265
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: CALL_OW 262
10073: PUSH
10074: EMPTY
10075: LIST
10076: PUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: CALL_OW 263
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_VAR 0 3
10094: PPUSH
10095: CALL_OW 264
10099: PUSH
10100: EMPTY
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: PPUSH
10109: LD_STRING 14_JMMVeh_1
10111: PPUSH
10112: CALL_OW 39
// end ; if fastEnd then
10116: LD_VAR 0 1
10120: IFFALSE 10211
// begin AddMedal ( fastend , - 1 ) ;
10122: LD_STRING fastend
10124: PPUSH
10125: LD_INT 1
10127: NEG
10128: PPUSH
10129: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10133: LD_STRING fastend
10135: PPUSH
10136: LD_INT 1
10138: NEG
10139: PPUSH
10140: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10144: LD_STRING fastend
10146: PPUSH
10147: LD_INT 1
10149: NEG
10150: PPUSH
10151: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10155: LD_EXP 2
10159: PPUSH
10160: LD_STRING 14_JMMGirl_1
10162: PPUSH
10163: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10167: LD_INT 0
10169: PPUSH
10170: LD_STRING 14_JMMGirlStatus_1
10172: PPUSH
10173: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_STRING 14_KappaStatus_1
10182: PPUSH
10183: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10187: LD_STRING Eliminate
10189: PPUSH
10190: CALL_OW 102
// RewardPeople ( JMM ) ;
10194: LD_EXP 8
10198: PPUSH
10199: CALL_OW 43
// YouWin ;
10203: CALL_OW 103
// exit ;
10207: GO 10857
// end else
10209: GO 10750
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10211: LD_EXP 2
10215: PPUSH
10216: LD_STRING 14_JMMGirl_1
10218: PPUSH
10219: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10223: LD_VAR 0 7
10227: PPUSH
10228: LD_STRING 14_KappaStatus_1
10230: PPUSH
10231: CALL_OW 39
// case JMMGirl of 1 :
10235: LD_EXP 2
10239: PUSH
10240: LD_INT 1
10242: DOUBLE
10243: EQUAL
10244: IFTRUE 10248
10246: GO 10376
10248: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10249: LD_EXP 10
10253: PPUSH
10254: CALL_OW 302
10258: PUSH
10259: LD_EXP 10
10263: PPUSH
10264: CALL_OW 255
10268: PUSH
10269: LD_INT 1
10271: EQUAL
10272: AND
10273: PUSH
10274: LD_VAR 0 7
10278: PUSH
10279: LD_EXP 8
10283: PPUSH
10284: CALL_OW 310
10288: PPUSH
10289: LD_EXP 10
10293: PPUSH
10294: CALL_OW 310
10298: PPUSH
10299: CALL_OW 296
10303: PUSH
10304: LD_INT 10
10306: LESS
10307: OR
10308: AND
10309: IFFALSE 10353
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10311: LD_INT 1
10313: PPUSH
10314: LD_STRING 14_JMMGirlStatus_1
10316: PPUSH
10317: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10321: LD_EXP 10
10325: PPUSH
10326: LD_STRING 14_Joan
10328: PPUSH
10329: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10333: LD_STRING protect
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 101
// m1 := true ;
10343: LD_ADDR_VAR 0 4
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// end else
10351: GO 10374
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10353: LD_INT 0
10355: PPUSH
10356: LD_STRING 14_JMMGirlStatus_1
10358: PPUSH
10359: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10363: LD_STRING protect
10365: PPUSH
10366: LD_INT 1
10368: NEG
10369: PPUSH
10370: CALL_OW 101
// end ; end ; 2 :
10374: GO 10649
10376: LD_INT 2
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10512
10384: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10385: LD_EXP 11
10389: PPUSH
10390: CALL_OW 302
10394: PUSH
10395: LD_EXP 11
10399: PPUSH
10400: CALL_OW 255
10404: PUSH
10405: LD_INT 1
10407: EQUAL
10408: AND
10409: PUSH
10410: LD_VAR 0 7
10414: PUSH
10415: LD_EXP 8
10419: PPUSH
10420: CALL_OW 310
10424: PPUSH
10425: LD_EXP 11
10429: PPUSH
10430: CALL_OW 310
10434: PPUSH
10435: CALL_OW 296
10439: PUSH
10440: LD_INT 10
10442: LESS
10443: OR
10444: AND
10445: IFFALSE 10489
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10447: LD_INT 1
10449: PPUSH
10450: LD_STRING 14_JMMGirlStatus_1
10452: PPUSH
10453: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10457: LD_EXP 11
10461: PPUSH
10462: LD_STRING 14_Lisa
10464: PPUSH
10465: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10469: LD_STRING protect
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 101
// m1 := true ;
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// end else
10487: GO 10510
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10489: LD_INT 0
10491: PPUSH
10492: LD_STRING 14_JMMGirlStatus_1
10494: PPUSH
10495: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10499: LD_STRING protect
10501: PPUSH
10502: LD_INT 2
10504: NEG
10505: PPUSH
10506: CALL_OW 101
// end ; end ; 3 :
10510: GO 10649
10512: LD_INT 3
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 10648
10520: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10521: LD_EXP 12
10525: PPUSH
10526: CALL_OW 302
10530: PUSH
10531: LD_EXP 12
10535: PPUSH
10536: CALL_OW 255
10540: PUSH
10541: LD_INT 1
10543: EQUAL
10544: AND
10545: PUSH
10546: LD_VAR 0 7
10550: PUSH
10551: LD_EXP 8
10555: PPUSH
10556: CALL_OW 310
10560: PPUSH
10561: LD_EXP 12
10565: PPUSH
10566: CALL_OW 310
10570: PPUSH
10571: CALL_OW 296
10575: PUSH
10576: LD_INT 10
10578: LESS
10579: OR
10580: AND
10581: IFFALSE 10625
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10583: LD_INT 1
10585: PPUSH
10586: LD_STRING 14_JMMGirlStatus_1
10588: PPUSH
10589: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10593: LD_EXP 12
10597: PPUSH
10598: LD_STRING 14_Connie
10600: PPUSH
10601: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10605: LD_STRING protect
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 101
// m1 := true ;
10615: LD_ADDR_VAR 0 4
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// end else
10623: GO 10646
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10625: LD_INT 0
10627: PPUSH
10628: LD_STRING 14_JMMGirlStatus_1
10630: PPUSH
10631: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10635: LD_STRING protect
10637: PPUSH
10638: LD_INT 3
10640: NEG
10641: PPUSH
10642: CALL_OW 101
// end ; end ; end ;
10646: GO 10649
10648: POP
// if amLaserCounter >= 2 then
10649: LD_EXP 7
10653: PUSH
10654: LD_INT 2
10656: GREATEREQUAL
10657: IFFALSE 10679
// begin AddMedal ( double , 1 ) ;
10659: LD_STRING double
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 101
// m2 := true ;
10669: LD_ADDR_VAR 0 5
10673: PUSH
10674: LD_INT 1
10676: ST_TO_ADDR
// end else
10677: GO 10713
// begin if amLaserCounter = 1 then
10679: LD_EXP 7
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: IFFALSE 10702
// AddMedal ( double , - 2 ) else
10689: LD_STRING double
10691: PPUSH
10692: LD_INT 2
10694: NEG
10695: PPUSH
10696: CALL_OW 101
10700: GO 10713
// AddMedal ( double , - 1 ) ;
10702: LD_STRING double
10704: PPUSH
10705: LD_INT 1
10707: NEG
10708: PPUSH
10709: CALL_OW 101
// end ; if ruEliminated then
10713: LD_VAR 0 7
10717: IFFALSE 10739
// begin AddMedal ( base , 1 ) ;
10719: LD_STRING base
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 101
// m3 := true ;
10729: LD_ADDR_VAR 0 6
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// end else
10737: GO 10750
// AddMedal ( base , - 1 ) ;
10739: LD_STRING base
10741: PPUSH
10742: LD_INT 1
10744: NEG
10745: PPUSH
10746: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10750: LD_VAR 0 4
10754: PUSH
10755: LD_VAR 0 5
10759: AND
10760: PUSH
10761: LD_VAR 0 6
10765: AND
10766: PUSH
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 3
10774: GREATEREQUAL
10775: AND
10776: IFFALSE 10788
// SetAchievementEX ( ACH_AMER , 14 ) ;
10778: LD_STRING ACH_AMER
10780: PPUSH
10781: LD_INT 14
10783: PPUSH
10784: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10788: LD_STRING Eliminate
10790: PPUSH
10791: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10795: LD_INT 22
10797: PUSH
10798: LD_INT 1
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 25
10810: PUSH
10811: LD_INT 12
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: LD_INT 25
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 69
10848: PPUSH
10849: CALL_OW 43
// YouWin ;
10853: CALL_OW 103
// end ; end_of_file
10857: LD_VAR 0 2
10861: RET
// export function CreateNature ; var i , un ; begin
10862: LD_INT 0
10864: PPUSH
10865: PPUSH
10866: PPUSH
// PrepareEnchidna ;
10867: CALL 66980 0 0
// for i := 1 to 3 do
10871: LD_ADDR_VAR 0 2
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 3
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10934
// begin un := CreateHuman ;
10887: LD_ADDR_VAR 0 3
10891: PUSH
10892: CALL_OW 44
10896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 0
10904: PPUSH
10905: LD_INT 5
10907: PPUSH
10908: CALL_OW 12
10912: PPUSH
10913: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_INT 9
10924: PPUSH
10925: LD_INT 0
10927: PPUSH
10928: CALL_OW 49
// end ;
10932: GO 10884
10934: POP
10935: POP
// PrepareHorse ;
10936: CALL 67140 0 0
// for i := 1 to 2 do
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_INT 2
10952: PUSH
10953: FOR_TO
10954: IFFALSE 11003
// begin un := CreateHuman ;
10956: LD_ADDR_VAR 0 3
10960: PUSH
10961: CALL_OW 44
10965: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 0
10973: PPUSH
10974: LD_INT 5
10976: PPUSH
10977: CALL_OW 12
10981: PPUSH
10982: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 9
10993: PPUSH
10994: LD_INT 0
10996: PPUSH
10997: CALL_OW 49
// end ;
11001: GO 10953
11003: POP
11004: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11005: LD_ADDR_VAR 0 2
11009: PUSH
11010: DOUBLE
11011: LD_INT 1
11013: DEC
11014: ST_TO_ADDR
11015: LD_INT 4
11017: PUSH
11018: LD_INT 5
11020: PUSH
11021: LD_INT 5
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_OWVAR 67
11037: ARRAY
11038: PUSH
11039: FOR_TO
11040: IFFALSE 11104
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11042: LD_INT 0
11044: PPUSH
11045: LD_INT 5
11047: PPUSH
11048: CALL_OW 12
11052: PPUSH
11053: CALL 66791 0 1
// un := CreateHuman ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: CALL_OW 44
11066: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11067: LD_VAR 0 3
11071: PPUSH
11072: LD_INT 0
11074: PPUSH
11075: LD_INT 5
11077: PPUSH
11078: CALL_OW 12
11082: PPUSH
11083: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 8
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 49
// end ;
11102: GO 11039
11104: POP
11105: POP
// PrepareFish ;
11106: CALL 67060 0 0
// for i := 1 to 2 do
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: DOUBLE
11116: LD_INT 1
11118: DEC
11119: ST_TO_ADDR
11120: LD_INT 2
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11173
// begin un := CreateHuman ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: CALL_OW 44
11135: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 5
11146: PPUSH
11147: CALL_OW 12
11151: PPUSH
11152: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 6
11163: PPUSH
11164: LD_INT 0
11166: PPUSH
11167: CALL_OW 49
// end ;
11171: GO 11123
11173: POP
11174: POP
// PrepareFrog ;
11175: CALL 67020 0 0
// for i := 1 to 2 do
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: DOUBLE
11185: LD_INT 1
11187: DEC
11188: ST_TO_ADDR
11189: LD_INT 2
11191: PUSH
11192: FOR_TO
11193: IFFALSE 11242
// begin un := CreateHuman ;
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: CALL_OW 44
11204: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: LD_INT 5
11215: PPUSH
11216: CALL_OW 12
11220: PPUSH
11221: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 7
11232: PPUSH
11233: LD_INT 0
11235: PPUSH
11236: CALL_OW 49
// end ;
11240: GO 11192
11242: POP
11243: POP
// PrepareMastodont ;
11244: CALL 67180 0 0
// un := CreateVehicle ;
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: CALL_OW 45
11257: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 166
11265: PPUSH
11266: LD_INT 134
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL 72683 0 5
// end ; end_of_file
11279: LD_VAR 0 1
11283: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11284: LD_INT 14
11286: PPUSH
11287: CALL_OW 435
11291: PUSH
11292: LD_INT 20
11294: LESS
11295: IFFALSE 11337
11297: GO 11299
11299: DISABLE
// begin enable ;
11300: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11301: LD_INT 35
11303: PPUSH
11304: LD_INT 735
11306: PPUSH
11307: CALL_OW 12
11311: PPUSH
11312: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 5
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: LD_INT 14
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 55
// end ;
11337: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11338: LD_INT 13
11340: PPUSH
11341: CALL_OW 435
11345: PUSH
11346: LD_INT 30
11348: LESS
11349: IFFALSE 11391
11351: GO 11353
11353: DISABLE
// begin enable ;
11354: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11355: LD_INT 35
11357: PPUSH
11358: LD_INT 735
11360: PPUSH
11361: CALL_OW 12
11365: PPUSH
11366: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 5
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: LD_INT 13
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 55
// end ;
11391: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11392: LD_INT 13
11394: PPUSH
11395: CALL_OW 435
11399: PUSH
11400: LD_INT 30
11402: LESS
11403: IFFALSE 11436
11405: GO 11407
11407: DISABLE
// begin enable ;
11408: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 5
11414: PPUSH
11415: CALL_OW 12
11419: PPUSH
11420: LD_INT 133
11422: PPUSH
11423: LD_INT 122
11425: PPUSH
11426: LD_INT 20
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 56
// end ; end_of_file end_of_file
11436: END
// export globalGameSaveCounter ; every 0 0$1 do
11437: GO 11439
11439: DISABLE
// begin enable ;
11440: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11441: LD_STRING updateTimer(
11443: PUSH
11444: LD_OWVAR 1
11448: STR
11449: PUSH
11450: LD_STRING );
11452: STR
11453: PPUSH
11454: CALL_OW 559
// end ;
11458: END
// every 0 0$1 do
11459: GO 11461
11461: DISABLE
// begin globalGameSaveCounter := 0 ;
11462: LD_ADDR_EXP 21
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11470: LD_STRING setGameSaveCounter(0)
11472: PPUSH
11473: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11477: LD_STRING initStreamRollete();
11479: PPUSH
11480: CALL_OW 559
// InitStreamMode ;
11484: CALL 12827 0 0
// DefineStreamItems ( false ) ;
11488: LD_INT 0
11490: PPUSH
11491: CALL 13291 0 1
// end ;
11495: END
// export function SOS_MapStart ( ) ; begin
11496: LD_INT 0
11498: PPUSH
// if streamModeActive then
11499: LD_EXP 22
11503: IFFALSE 11512
// DefineStreamItems ( true ) ;
11505: LD_INT 1
11507: PPUSH
11508: CALL 13291 0 1
// UpdateLuaVariables ( ) ;
11512: CALL 11529 0 0
// UpdateFactoryWaypoints ( ) ;
11516: CALL 26293 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11520: CALL 26545 0 0
// end ;
11524: LD_VAR 0 1
11528: RET
// function UpdateLuaVariables ( ) ; begin
11529: LD_INT 0
11531: PPUSH
// if globalGameSaveCounter then
11532: LD_EXP 21
11536: IFFALSE 11570
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11538: LD_ADDR_EXP 21
11542: PUSH
11543: LD_EXP 21
11547: PPUSH
11548: CALL 71904 0 1
11552: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11553: LD_STRING setGameSaveCounter(
11555: PUSH
11556: LD_EXP 21
11560: STR
11561: PUSH
11562: LD_STRING )
11564: STR
11565: PPUSH
11566: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11570: LD_STRING setGameDifficulty(
11572: PUSH
11573: LD_OWVAR 67
11577: STR
11578: PUSH
11579: LD_STRING )
11581: STR
11582: PPUSH
11583: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11587: LD_STRING displayDifficulty(
11589: PUSH
11590: LD_OWVAR 67
11594: STR
11595: PUSH
11596: LD_STRING )
11598: STR
11599: PPUSH
11600: CALL_OW 559
// end ;
11604: LD_VAR 0 1
11608: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11609: LD_INT 0
11611: PPUSH
// if p2 = stream_mode then
11612: LD_VAR 0 2
11616: PUSH
11617: LD_INT 100
11619: EQUAL
11620: IFFALSE 12623
// begin if not StreamModeActive then
11622: LD_EXP 22
11626: NOT
11627: IFFALSE 11637
// StreamModeActive := true ;
11629: LD_ADDR_EXP 22
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// if p3 = 0 then
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 0
11644: EQUAL
11645: IFFALSE 11651
// InitStreamMode ;
11647: CALL 12827 0 0
// if p3 = 1 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 1
11658: EQUAL
11659: IFFALSE 11669
// sRocket := true ;
11661: LD_ADDR_EXP 27
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 2 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 2
11676: EQUAL
11677: IFFALSE 11687
// sSpeed := true ;
11679: LD_ADDR_EXP 26
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 3 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 3
11694: EQUAL
11695: IFFALSE 11705
// sEngine := true ;
11697: LD_ADDR_EXP 28
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 4 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 4
11712: EQUAL
11713: IFFALSE 11723
// sSpec := true ;
11715: LD_ADDR_EXP 25
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 5 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 5
11730: EQUAL
11731: IFFALSE 11741
// sLevel := true ;
11733: LD_ADDR_EXP 29
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 6 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 6
11748: EQUAL
11749: IFFALSE 11759
// sArmoury := true ;
11751: LD_ADDR_EXP 30
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 7 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 7
11766: EQUAL
11767: IFFALSE 11777
// sRadar := true ;
11769: LD_ADDR_EXP 31
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 8 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 8
11784: EQUAL
11785: IFFALSE 11795
// sBunker := true ;
11787: LD_ADDR_EXP 32
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 9 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 9
11802: EQUAL
11803: IFFALSE 11813
// sHack := true ;
11805: LD_ADDR_EXP 33
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 10 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 10
11820: EQUAL
11821: IFFALSE 11831
// sFire := true ;
11823: LD_ADDR_EXP 34
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 11 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 11
11838: EQUAL
11839: IFFALSE 11849
// sRefresh := true ;
11841: LD_ADDR_EXP 35
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 12 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 12
11856: EQUAL
11857: IFFALSE 11867
// sExp := true ;
11859: LD_ADDR_EXP 36
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 13 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 13
11874: EQUAL
11875: IFFALSE 11885
// sDepot := true ;
11877: LD_ADDR_EXP 37
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 14 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 14
11892: EQUAL
11893: IFFALSE 11903
// sFlag := true ;
11895: LD_ADDR_EXP 38
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 15 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 15
11910: EQUAL
11911: IFFALSE 11921
// sKamikadze := true ;
11913: LD_ADDR_EXP 46
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 16 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 16
11928: EQUAL
11929: IFFALSE 11939
// sTroll := true ;
11931: LD_ADDR_EXP 47
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 17 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 17
11946: EQUAL
11947: IFFALSE 11957
// sSlow := true ;
11949: LD_ADDR_EXP 48
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 18 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 18
11964: EQUAL
11965: IFFALSE 11975
// sLack := true ;
11967: LD_ADDR_EXP 49
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 19 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 19
11982: EQUAL
11983: IFFALSE 11993
// sTank := true ;
11985: LD_ADDR_EXP 51
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 20 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 20
12000: EQUAL
12001: IFFALSE 12011
// sRemote := true ;
12003: LD_ADDR_EXP 52
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 21 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 21
12018: EQUAL
12019: IFFALSE 12029
// sPowell := true ;
12021: LD_ADDR_EXP 53
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 22 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 22
12036: EQUAL
12037: IFFALSE 12047
// sTeleport := true ;
12039: LD_ADDR_EXP 56
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 23 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 23
12054: EQUAL
12055: IFFALSE 12065
// sOilTower := true ;
12057: LD_ADDR_EXP 58
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 24 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 24
12072: EQUAL
12073: IFFALSE 12083
// sShovel := true ;
12075: LD_ADDR_EXP 59
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 25 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 25
12090: EQUAL
12091: IFFALSE 12101
// sSheik := true ;
12093: LD_ADDR_EXP 60
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 26 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 26
12108: EQUAL
12109: IFFALSE 12119
// sEarthquake := true ;
12111: LD_ADDR_EXP 62
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 27 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 27
12126: EQUAL
12127: IFFALSE 12137
// sAI := true ;
12129: LD_ADDR_EXP 63
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 28 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 28
12144: EQUAL
12145: IFFALSE 12155
// sCargo := true ;
12147: LD_ADDR_EXP 66
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 29 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 29
12162: EQUAL
12163: IFFALSE 12173
// sDLaser := true ;
12165: LD_ADDR_EXP 67
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 30 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 30
12180: EQUAL
12181: IFFALSE 12191
// sExchange := true ;
12183: LD_ADDR_EXP 68
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 31 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 31
12198: EQUAL
12199: IFFALSE 12209
// sFac := true ;
12201: LD_ADDR_EXP 69
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 32 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 32
12216: EQUAL
12217: IFFALSE 12227
// sPower := true ;
12219: LD_ADDR_EXP 70
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 33 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 33
12234: EQUAL
12235: IFFALSE 12245
// sRandom := true ;
12237: LD_ADDR_EXP 71
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 34 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 34
12252: EQUAL
12253: IFFALSE 12263
// sShield := true ;
12255: LD_ADDR_EXP 72
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 35 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 35
12270: EQUAL
12271: IFFALSE 12281
// sTime := true ;
12273: LD_ADDR_EXP 73
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 36 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 36
12288: EQUAL
12289: IFFALSE 12299
// sTools := true ;
12291: LD_ADDR_EXP 74
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 101 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 101
12306: EQUAL
12307: IFFALSE 12317
// sSold := true ;
12309: LD_ADDR_EXP 39
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 102 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 102
12324: EQUAL
12325: IFFALSE 12335
// sDiff := true ;
12327: LD_ADDR_EXP 40
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 103 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 103
12342: EQUAL
12343: IFFALSE 12353
// sFog := true ;
12345: LD_ADDR_EXP 43
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 104 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 104
12360: EQUAL
12361: IFFALSE 12371
// sReset := true ;
12363: LD_ADDR_EXP 44
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 105 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 105
12378: EQUAL
12379: IFFALSE 12389
// sSun := true ;
12381: LD_ADDR_EXP 45
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 106 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 106
12396: EQUAL
12397: IFFALSE 12407
// sTiger := true ;
12399: LD_ADDR_EXP 41
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 107 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 107
12414: EQUAL
12415: IFFALSE 12425
// sBomb := true ;
12417: LD_ADDR_EXP 42
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 108 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 108
12432: EQUAL
12433: IFFALSE 12443
// sWound := true ;
12435: LD_ADDR_EXP 50
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 109 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 109
12450: EQUAL
12451: IFFALSE 12461
// sBetray := true ;
12453: LD_ADDR_EXP 54
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 110 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 110
12468: EQUAL
12469: IFFALSE 12479
// sContamin := true ;
12471: LD_ADDR_EXP 55
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 111 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 111
12486: EQUAL
12487: IFFALSE 12497
// sOil := true ;
12489: LD_ADDR_EXP 57
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 112 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 112
12504: EQUAL
12505: IFFALSE 12515
// sStu := true ;
12507: LD_ADDR_EXP 61
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 113 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 113
12522: EQUAL
12523: IFFALSE 12533
// sBazooka := true ;
12525: LD_ADDR_EXP 64
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 114 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 114
12540: EQUAL
12541: IFFALSE 12551
// sMortar := true ;
12543: LD_ADDR_EXP 65
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 115 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 115
12558: EQUAL
12559: IFFALSE 12569
// sRanger := true ;
12561: LD_ADDR_EXP 75
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 116 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 116
12576: EQUAL
12577: IFFALSE 12587
// sComputer := true ;
12579: LD_ADDR_EXP 76
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 117 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 117
12594: EQUAL
12595: IFFALSE 12605
// s30 := true ;
12597: LD_ADDR_EXP 77
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 118 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 118
12612: EQUAL
12613: IFFALSE 12623
// s60 := true ;
12615: LD_ADDR_EXP 78
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// end ; if p2 = hack_mode then
12623: LD_VAR 0 2
12627: PUSH
12628: LD_INT 101
12630: EQUAL
12631: IFFALSE 12759
// begin case p3 of 1 :
12633: LD_VAR 0 3
12637: PUSH
12638: LD_INT 1
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12653
12646: POP
// hHackUnlimitedResources ; 2 :
12647: CALL 24906 0 0
12651: GO 12759
12653: LD_INT 2
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12668
12661: POP
// hHackSetLevel10 ; 3 :
12662: CALL 25039 0 0
12666: GO 12759
12668: LD_INT 3
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12683
12676: POP
// hHackSetLevel10YourUnits ; 4 :
12677: CALL 25124 0 0
12681: GO 12759
12683: LD_INT 4
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12698
12691: POP
// hHackInvincible ; 5 :
12692: CALL 25572 0 0
12696: GO 12759
12698: LD_INT 5
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12713
12706: POP
// hHackInvisible ; 6 :
12707: CALL 25683 0 0
12711: GO 12759
12713: LD_INT 6
12715: DOUBLE
12716: EQUAL
12717: IFTRUE 12721
12719: GO 12728
12721: POP
// hHackChangeYourSide ; 7 :
12722: CALL 25740 0 0
12726: GO 12759
12728: LD_INT 7
12730: DOUBLE
12731: EQUAL
12732: IFTRUE 12736
12734: GO 12743
12736: POP
// hHackChangeUnitSide ; 8 :
12737: CALL 25782 0 0
12741: GO 12759
12743: LD_INT 8
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12758
12751: POP
// hHackFog ; end ;
12752: CALL 25883 0 0
12756: GO 12759
12758: POP
// end ; if p2 = game_save_mode then
12759: LD_VAR 0 2
12763: PUSH
12764: LD_INT 102
12766: EQUAL
12767: IFFALSE 12822
// begin if p3 = 1 then
12769: LD_VAR 0 3
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12789
// globalGameSaveCounter := p4 ;
12779: LD_ADDR_EXP 21
12783: PUSH
12784: LD_VAR 0 4
12788: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12789: LD_VAR 0 3
12793: PUSH
12794: LD_INT 2
12796: EQUAL
12797: PUSH
12798: LD_EXP 21
12802: AND
12803: IFFALSE 12822
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12805: LD_STRING setGameSaveCounter(
12807: PUSH
12808: LD_EXP 21
12812: STR
12813: PUSH
12814: LD_STRING )
12816: STR
12817: PPUSH
12818: CALL_OW 559
// end ; end ;
12822: LD_VAR 0 7
12826: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12827: LD_INT 0
12829: PPUSH
// streamModeActive := false ;
12830: LD_ADDR_EXP 22
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// normalCounter := 36 ;
12838: LD_ADDR_EXP 23
12842: PUSH
12843: LD_INT 36
12845: ST_TO_ADDR
// hardcoreCounter := 18 ;
12846: LD_ADDR_EXP 24
12850: PUSH
12851: LD_INT 18
12853: ST_TO_ADDR
// sRocket := false ;
12854: LD_ADDR_EXP 27
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// sSpeed := false ;
12862: LD_ADDR_EXP 26
12866: PUSH
12867: LD_INT 0
12869: ST_TO_ADDR
// sEngine := false ;
12870: LD_ADDR_EXP 28
12874: PUSH
12875: LD_INT 0
12877: ST_TO_ADDR
// sSpec := false ;
12878: LD_ADDR_EXP 25
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// sLevel := false ;
12886: LD_ADDR_EXP 29
12890: PUSH
12891: LD_INT 0
12893: ST_TO_ADDR
// sArmoury := false ;
12894: LD_ADDR_EXP 30
12898: PUSH
12899: LD_INT 0
12901: ST_TO_ADDR
// sRadar := false ;
12902: LD_ADDR_EXP 31
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// sBunker := false ;
12910: LD_ADDR_EXP 32
12914: PUSH
12915: LD_INT 0
12917: ST_TO_ADDR
// sHack := false ;
12918: LD_ADDR_EXP 33
12922: PUSH
12923: LD_INT 0
12925: ST_TO_ADDR
// sFire := false ;
12926: LD_ADDR_EXP 34
12930: PUSH
12931: LD_INT 0
12933: ST_TO_ADDR
// sRefresh := false ;
12934: LD_ADDR_EXP 35
12938: PUSH
12939: LD_INT 0
12941: ST_TO_ADDR
// sExp := false ;
12942: LD_ADDR_EXP 36
12946: PUSH
12947: LD_INT 0
12949: ST_TO_ADDR
// sDepot := false ;
12950: LD_ADDR_EXP 37
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// sFlag := false ;
12958: LD_ADDR_EXP 38
12962: PUSH
12963: LD_INT 0
12965: ST_TO_ADDR
// sKamikadze := false ;
12966: LD_ADDR_EXP 46
12970: PUSH
12971: LD_INT 0
12973: ST_TO_ADDR
// sTroll := false ;
12974: LD_ADDR_EXP 47
12978: PUSH
12979: LD_INT 0
12981: ST_TO_ADDR
// sSlow := false ;
12982: LD_ADDR_EXP 48
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// sLack := false ;
12990: LD_ADDR_EXP 49
12994: PUSH
12995: LD_INT 0
12997: ST_TO_ADDR
// sTank := false ;
12998: LD_ADDR_EXP 51
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// sRemote := false ;
13006: LD_ADDR_EXP 52
13010: PUSH
13011: LD_INT 0
13013: ST_TO_ADDR
// sPowell := false ;
13014: LD_ADDR_EXP 53
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// sTeleport := false ;
13022: LD_ADDR_EXP 56
13026: PUSH
13027: LD_INT 0
13029: ST_TO_ADDR
// sOilTower := false ;
13030: LD_ADDR_EXP 58
13034: PUSH
13035: LD_INT 0
13037: ST_TO_ADDR
// sShovel := false ;
13038: LD_ADDR_EXP 59
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// sSheik := false ;
13046: LD_ADDR_EXP 60
13050: PUSH
13051: LD_INT 0
13053: ST_TO_ADDR
// sEarthquake := false ;
13054: LD_ADDR_EXP 62
13058: PUSH
13059: LD_INT 0
13061: ST_TO_ADDR
// sAI := false ;
13062: LD_ADDR_EXP 63
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// sCargo := false ;
13070: LD_ADDR_EXP 66
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// sDLaser := false ;
13078: LD_ADDR_EXP 67
13082: PUSH
13083: LD_INT 0
13085: ST_TO_ADDR
// sExchange := false ;
13086: LD_ADDR_EXP 68
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// sFac := false ;
13094: LD_ADDR_EXP 69
13098: PUSH
13099: LD_INT 0
13101: ST_TO_ADDR
// sPower := false ;
13102: LD_ADDR_EXP 70
13106: PUSH
13107: LD_INT 0
13109: ST_TO_ADDR
// sRandom := false ;
13110: LD_ADDR_EXP 71
13114: PUSH
13115: LD_INT 0
13117: ST_TO_ADDR
// sShield := false ;
13118: LD_ADDR_EXP 72
13122: PUSH
13123: LD_INT 0
13125: ST_TO_ADDR
// sTime := false ;
13126: LD_ADDR_EXP 73
13130: PUSH
13131: LD_INT 0
13133: ST_TO_ADDR
// sTools := false ;
13134: LD_ADDR_EXP 74
13138: PUSH
13139: LD_INT 0
13141: ST_TO_ADDR
// sSold := false ;
13142: LD_ADDR_EXP 39
13146: PUSH
13147: LD_INT 0
13149: ST_TO_ADDR
// sDiff := false ;
13150: LD_ADDR_EXP 40
13154: PUSH
13155: LD_INT 0
13157: ST_TO_ADDR
// sFog := false ;
13158: LD_ADDR_EXP 43
13162: PUSH
13163: LD_INT 0
13165: ST_TO_ADDR
// sReset := false ;
13166: LD_ADDR_EXP 44
13170: PUSH
13171: LD_INT 0
13173: ST_TO_ADDR
// sSun := false ;
13174: LD_ADDR_EXP 45
13178: PUSH
13179: LD_INT 0
13181: ST_TO_ADDR
// sTiger := false ;
13182: LD_ADDR_EXP 41
13186: PUSH
13187: LD_INT 0
13189: ST_TO_ADDR
// sBomb := false ;
13190: LD_ADDR_EXP 42
13194: PUSH
13195: LD_INT 0
13197: ST_TO_ADDR
// sWound := false ;
13198: LD_ADDR_EXP 50
13202: PUSH
13203: LD_INT 0
13205: ST_TO_ADDR
// sBetray := false ;
13206: LD_ADDR_EXP 54
13210: PUSH
13211: LD_INT 0
13213: ST_TO_ADDR
// sContamin := false ;
13214: LD_ADDR_EXP 55
13218: PUSH
13219: LD_INT 0
13221: ST_TO_ADDR
// sOil := false ;
13222: LD_ADDR_EXP 57
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// sStu := false ;
13230: LD_ADDR_EXP 61
13234: PUSH
13235: LD_INT 0
13237: ST_TO_ADDR
// sBazooka := false ;
13238: LD_ADDR_EXP 64
13242: PUSH
13243: LD_INT 0
13245: ST_TO_ADDR
// sMortar := false ;
13246: LD_ADDR_EXP 65
13250: PUSH
13251: LD_INT 0
13253: ST_TO_ADDR
// sRanger := false ;
13254: LD_ADDR_EXP 75
13258: PUSH
13259: LD_INT 0
13261: ST_TO_ADDR
// sComputer := false ;
13262: LD_ADDR_EXP 76
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// s30 := false ;
13270: LD_ADDR_EXP 77
13274: PUSH
13275: LD_INT 0
13277: ST_TO_ADDR
// s60 := false ;
13278: LD_ADDR_EXP 78
13282: PUSH
13283: LD_INT 0
13285: ST_TO_ADDR
// end ;
13286: LD_VAR 0 1
13290: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13291: LD_INT 0
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
// result := [ ] ;
13300: LD_ADDR_VAR 0 2
13304: PUSH
13305: EMPTY
13306: ST_TO_ADDR
// if campaign_id = 1 then
13307: LD_OWVAR 69
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: IFFALSE 16481
// begin case mission_number of 1 :
13317: LD_OWVAR 70
13321: PUSH
13322: LD_INT 1
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13406
13330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 11
13344: PUSH
13345: LD_INT 12
13347: PUSH
13348: LD_INT 15
13350: PUSH
13351: LD_INT 16
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_INT 23
13359: PUSH
13360: LD_INT 26
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 101
13376: PUSH
13377: LD_INT 102
13379: PUSH
13380: LD_INT 106
13382: PUSH
13383: LD_INT 116
13385: PUSH
13386: LD_INT 117
13388: PUSH
13389: LD_INT 118
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: ST_TO_ADDR
13404: GO 16479
13406: LD_INT 2
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13498
13414: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13415: LD_ADDR_VAR 0 2
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: LD_INT 15
13434: PUSH
13435: LD_INT 16
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_INT 23
13443: PUSH
13444: LD_INT 26
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 101
13460: PUSH
13461: LD_INT 102
13463: PUSH
13464: LD_INT 105
13466: PUSH
13467: LD_INT 106
13469: PUSH
13470: LD_INT 108
13472: PUSH
13473: LD_INT 116
13475: PUSH
13476: LD_INT 117
13478: PUSH
13479: LD_INT 118
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 16479
13498: LD_INT 3
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13594
13506: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: LD_INT 11
13523: PUSH
13524: LD_INT 12
13526: PUSH
13527: LD_INT 15
13529: PUSH
13530: LD_INT 16
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_INT 26
13538: PUSH
13539: LD_INT 36
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 101
13556: PUSH
13557: LD_INT 102
13559: PUSH
13560: LD_INT 105
13562: PUSH
13563: LD_INT 106
13565: PUSH
13566: LD_INT 108
13568: PUSH
13569: LD_INT 116
13571: PUSH
13572: LD_INT 117
13574: PUSH
13575: LD_INT 118
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 16479
13594: LD_INT 4
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13698
13602: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 4
13613: PUSH
13614: LD_INT 5
13616: PUSH
13617: LD_INT 8
13619: PUSH
13620: LD_INT 11
13622: PUSH
13623: LD_INT 12
13625: PUSH
13626: LD_INT 15
13628: PUSH
13629: LD_INT 16
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_INT 23
13637: PUSH
13638: LD_INT 26
13640: PUSH
13641: LD_INT 36
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 101
13660: PUSH
13661: LD_INT 102
13663: PUSH
13664: LD_INT 105
13666: PUSH
13667: LD_INT 106
13669: PUSH
13670: LD_INT 108
13672: PUSH
13673: LD_INT 116
13675: PUSH
13676: LD_INT 117
13678: PUSH
13679: LD_INT 118
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 16479
13698: LD_INT 5
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13818
13706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: LD_INT 5
13720: PUSH
13721: LD_INT 6
13723: PUSH
13724: LD_INT 8
13726: PUSH
13727: LD_INT 11
13729: PUSH
13730: LD_INT 12
13732: PUSH
13733: LD_INT 15
13735: PUSH
13736: LD_INT 16
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 36
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 105
13778: PUSH
13779: LD_INT 106
13781: PUSH
13782: LD_INT 108
13784: PUSH
13785: LD_INT 109
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: LD_INT 116
13793: PUSH
13794: LD_INT 117
13796: PUSH
13797: LD_INT 118
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: ST_TO_ADDR
13816: GO 16479
13818: LD_INT 6
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13958
13826: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: LD_INT 6
13843: PUSH
13844: LD_INT 8
13846: PUSH
13847: LD_INT 11
13849: PUSH
13850: LD_INT 12
13852: PUSH
13853: LD_INT 15
13855: PUSH
13856: LD_INT 16
13858: PUSH
13859: LD_INT 20
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 22
13867: PUSH
13868: LD_INT 23
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 26
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 36
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 101
13912: PUSH
13913: LD_INT 102
13915: PUSH
13916: LD_INT 105
13918: PUSH
13919: LD_INT 106
13921: PUSH
13922: LD_INT 108
13924: PUSH
13925: LD_INT 109
13927: PUSH
13928: LD_INT 112
13930: PUSH
13931: LD_INT 116
13933: PUSH
13934: LD_INT 117
13936: PUSH
13937: LD_INT 118
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 16479
13958: LD_INT 7
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14078
13966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13967: LD_ADDR_VAR 0 2
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 4
13977: PUSH
13978: LD_INT 5
13980: PUSH
13981: LD_INT 7
13983: PUSH
13984: LD_INT 11
13986: PUSH
13987: LD_INT 12
13989: PUSH
13990: LD_INT 15
13992: PUSH
13993: LD_INT 16
13995: PUSH
13996: LD_INT 20
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 22
14004: PUSH
14005: LD_INT 23
14007: PUSH
14008: LD_INT 25
14010: PUSH
14011: LD_INT 26
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 101
14032: PUSH
14033: LD_INT 102
14035: PUSH
14036: LD_INT 103
14038: PUSH
14039: LD_INT 105
14041: PUSH
14042: LD_INT 106
14044: PUSH
14045: LD_INT 108
14047: PUSH
14048: LD_INT 112
14050: PUSH
14051: LD_INT 116
14053: PUSH
14054: LD_INT 117
14056: PUSH
14057: LD_INT 118
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: ST_TO_ADDR
14076: GO 16479
14078: LD_INT 8
14080: DOUBLE
14081: EQUAL
14082: IFTRUE 14086
14084: GO 14226
14086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14087: LD_ADDR_VAR 0 2
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 4
14097: PUSH
14098: LD_INT 5
14100: PUSH
14101: LD_INT 6
14103: PUSH
14104: LD_INT 7
14106: PUSH
14107: LD_INT 8
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 15
14118: PUSH
14119: LD_INT 16
14121: PUSH
14122: LD_INT 20
14124: PUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_INT 23
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 26
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 31
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 36
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 103
14182: PUSH
14183: LD_INT 105
14185: PUSH
14186: LD_INT 106
14188: PUSH
14189: LD_INT 108
14191: PUSH
14192: LD_INT 109
14194: PUSH
14195: LD_INT 112
14197: PUSH
14198: LD_INT 116
14200: PUSH
14201: LD_INT 117
14203: PUSH
14204: LD_INT 118
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
14224: GO 16479
14226: LD_INT 9
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14382
14234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14235: LD_ADDR_VAR 0 2
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 4
14245: PUSH
14246: LD_INT 5
14248: PUSH
14249: LD_INT 6
14251: PUSH
14252: LD_INT 7
14254: PUSH
14255: LD_INT 8
14257: PUSH
14258: LD_INT 11
14260: PUSH
14261: LD_INT 12
14263: PUSH
14264: LD_INT 15
14266: PUSH
14267: LD_INT 16
14269: PUSH
14270: LD_INT 20
14272: PUSH
14273: LD_INT 21
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 26
14287: PUSH
14288: LD_INT 28
14290: PUSH
14291: LD_INT 30
14293: PUSH
14294: LD_INT 31
14296: PUSH
14297: LD_INT 32
14299: PUSH
14300: LD_INT 36
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 101
14328: PUSH
14329: LD_INT 102
14331: PUSH
14332: LD_INT 103
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 109
14346: PUSH
14347: LD_INT 112
14349: PUSH
14350: LD_INT 114
14352: PUSH
14353: LD_INT 116
14355: PUSH
14356: LD_INT 117
14358: PUSH
14359: LD_INT 118
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: ST_TO_ADDR
14380: GO 16479
14382: LD_INT 10
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14586
14390: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14391: LD_ADDR_VAR 0 2
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 4
14401: PUSH
14402: LD_INT 5
14404: PUSH
14405: LD_INT 6
14407: PUSH
14408: LD_INT 7
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: LD_INT 9
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 13
14428: PUSH
14429: LD_INT 14
14431: PUSH
14432: LD_INT 15
14434: PUSH
14435: LD_INT 16
14437: PUSH
14438: LD_INT 17
14440: PUSH
14441: LD_INT 18
14443: PUSH
14444: LD_INT 19
14446: PUSH
14447: LD_INT 20
14449: PUSH
14450: LD_INT 21
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 23
14458: PUSH
14459: LD_INT 24
14461: PUSH
14462: LD_INT 25
14464: PUSH
14465: LD_INT 26
14467: PUSH
14468: LD_INT 28
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 31
14476: PUSH
14477: LD_INT 32
14479: PUSH
14480: LD_INT 36
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 101
14516: PUSH
14517: LD_INT 102
14519: PUSH
14520: LD_INT 103
14522: PUSH
14523: LD_INT 104
14525: PUSH
14526: LD_INT 105
14528: PUSH
14529: LD_INT 106
14531: PUSH
14532: LD_INT 107
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 109
14540: PUSH
14541: LD_INT 110
14543: PUSH
14544: LD_INT 111
14546: PUSH
14547: LD_INT 112
14549: PUSH
14550: LD_INT 114
14552: PUSH
14553: LD_INT 116
14555: PUSH
14556: LD_INT 117
14558: PUSH
14559: LD_INT 118
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: ST_TO_ADDR
14584: GO 16479
14586: LD_INT 11
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14798
14594: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14595: LD_ADDR_VAR 0 2
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: LD_INT 4
14608: PUSH
14609: LD_INT 5
14611: PUSH
14612: LD_INT 6
14614: PUSH
14615: LD_INT 7
14617: PUSH
14618: LD_INT 8
14620: PUSH
14621: LD_INT 9
14623: PUSH
14624: LD_INT 10
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 13
14635: PUSH
14636: LD_INT 14
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 16
14644: PUSH
14645: LD_INT 17
14647: PUSH
14648: LD_INT 18
14650: PUSH
14651: LD_INT 19
14653: PUSH
14654: LD_INT 20
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 22
14662: PUSH
14663: LD_INT 23
14665: PUSH
14666: LD_INT 24
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 26
14674: PUSH
14675: LD_INT 28
14677: PUSH
14678: LD_INT 30
14680: PUSH
14681: LD_INT 31
14683: PUSH
14684: LD_INT 32
14686: PUSH
14687: LD_INT 34
14689: PUSH
14690: LD_INT 36
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 101
14728: PUSH
14729: LD_INT 102
14731: PUSH
14732: LD_INT 103
14734: PUSH
14735: LD_INT 104
14737: PUSH
14738: LD_INT 105
14740: PUSH
14741: LD_INT 106
14743: PUSH
14744: LD_INT 107
14746: PUSH
14747: LD_INT 108
14749: PUSH
14750: LD_INT 109
14752: PUSH
14753: LD_INT 110
14755: PUSH
14756: LD_INT 111
14758: PUSH
14759: LD_INT 112
14761: PUSH
14762: LD_INT 114
14764: PUSH
14765: LD_INT 116
14767: PUSH
14768: LD_INT 117
14770: PUSH
14771: LD_INT 118
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 16479
14798: LD_INT 12
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 15026
14806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 5
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: LD_INT 7
14832: PUSH
14833: LD_INT 8
14835: PUSH
14836: LD_INT 9
14838: PUSH
14839: LD_INT 10
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 13
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 17
14862: PUSH
14863: LD_INT 18
14865: PUSH
14866: LD_INT 19
14868: PUSH
14869: LD_INT 20
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 24
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 26
14889: PUSH
14890: LD_INT 27
14892: PUSH
14893: LD_INT 28
14895: PUSH
14896: LD_INT 30
14898: PUSH
14899: LD_INT 31
14901: PUSH
14902: LD_INT 32
14904: PUSH
14905: LD_INT 33
14907: PUSH
14908: LD_INT 34
14910: PUSH
14911: LD_INT 36
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 101
14952: PUSH
14953: LD_INT 102
14955: PUSH
14956: LD_INT 103
14958: PUSH
14959: LD_INT 104
14961: PUSH
14962: LD_INT 105
14964: PUSH
14965: LD_INT 106
14967: PUSH
14968: LD_INT 107
14970: PUSH
14971: LD_INT 108
14973: PUSH
14974: LD_INT 109
14976: PUSH
14977: LD_INT 110
14979: PUSH
14980: LD_INT 111
14982: PUSH
14983: LD_INT 112
14985: PUSH
14986: LD_INT 113
14988: PUSH
14989: LD_INT 114
14991: PUSH
14992: LD_INT 116
14994: PUSH
14995: LD_INT 117
14997: PUSH
14998: LD_INT 118
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 16479
15026: LD_INT 13
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15242
15034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: LD_INT 2
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: LD_INT 4
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 9
15060: PUSH
15061: LD_INT 10
15063: PUSH
15064: LD_INT 11
15066: PUSH
15067: LD_INT 12
15069: PUSH
15070: LD_INT 14
15072: PUSH
15073: LD_INT 15
15075: PUSH
15076: LD_INT 16
15078: PUSH
15079: LD_INT 17
15081: PUSH
15082: LD_INT 18
15084: PUSH
15085: LD_INT 19
15087: PUSH
15088: LD_INT 20
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 23
15099: PUSH
15100: LD_INT 24
15102: PUSH
15103: LD_INT 25
15105: PUSH
15106: LD_INT 26
15108: PUSH
15109: LD_INT 27
15111: PUSH
15112: LD_INT 28
15114: PUSH
15115: LD_INT 30
15117: PUSH
15118: LD_INT 31
15120: PUSH
15121: LD_INT 32
15123: PUSH
15124: LD_INT 33
15126: PUSH
15127: LD_INT 34
15129: PUSH
15130: LD_INT 36
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 101
15168: PUSH
15169: LD_INT 102
15171: PUSH
15172: LD_INT 103
15174: PUSH
15175: LD_INT 104
15177: PUSH
15178: LD_INT 105
15180: PUSH
15181: LD_INT 106
15183: PUSH
15184: LD_INT 107
15186: PUSH
15187: LD_INT 108
15189: PUSH
15190: LD_INT 109
15192: PUSH
15193: LD_INT 110
15195: PUSH
15196: LD_INT 111
15198: PUSH
15199: LD_INT 112
15201: PUSH
15202: LD_INT 113
15204: PUSH
15205: LD_INT 114
15207: PUSH
15208: LD_INT 116
15210: PUSH
15211: LD_INT 117
15213: PUSH
15214: LD_INT 118
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 16479
15242: LD_INT 14
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15474
15250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15251: LD_ADDR_VAR 0 2
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 3
15264: PUSH
15265: LD_INT 4
15267: PUSH
15268: LD_INT 5
15270: PUSH
15271: LD_INT 6
15273: PUSH
15274: LD_INT 7
15276: PUSH
15277: LD_INT 8
15279: PUSH
15280: LD_INT 9
15282: PUSH
15283: LD_INT 10
15285: PUSH
15286: LD_INT 11
15288: PUSH
15289: LD_INT 12
15291: PUSH
15292: LD_INT 13
15294: PUSH
15295: LD_INT 14
15297: PUSH
15298: LD_INT 15
15300: PUSH
15301: LD_INT 16
15303: PUSH
15304: LD_INT 17
15306: PUSH
15307: LD_INT 18
15309: PUSH
15310: LD_INT 19
15312: PUSH
15313: LD_INT 20
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_INT 23
15324: PUSH
15325: LD_INT 24
15327: PUSH
15328: LD_INT 25
15330: PUSH
15331: LD_INT 26
15333: PUSH
15334: LD_INT 27
15336: PUSH
15337: LD_INT 28
15339: PUSH
15340: LD_INT 29
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 31
15348: PUSH
15349: LD_INT 32
15351: PUSH
15352: LD_INT 33
15354: PUSH
15355: LD_INT 34
15357: PUSH
15358: LD_INT 36
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 101
15400: PUSH
15401: LD_INT 102
15403: PUSH
15404: LD_INT 103
15406: PUSH
15407: LD_INT 104
15409: PUSH
15410: LD_INT 105
15412: PUSH
15413: LD_INT 106
15415: PUSH
15416: LD_INT 107
15418: PUSH
15419: LD_INT 108
15421: PUSH
15422: LD_INT 109
15424: PUSH
15425: LD_INT 110
15427: PUSH
15428: LD_INT 111
15430: PUSH
15431: LD_INT 112
15433: PUSH
15434: LD_INT 113
15436: PUSH
15437: LD_INT 114
15439: PUSH
15440: LD_INT 116
15442: PUSH
15443: LD_INT 117
15445: PUSH
15446: LD_INT 118
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: ST_TO_ADDR
15472: GO 16479
15474: LD_INT 15
15476: DOUBLE
15477: EQUAL
15478: IFTRUE 15482
15480: GO 15706
15482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: LD_INT 5
15502: PUSH
15503: LD_INT 6
15505: PUSH
15506: LD_INT 7
15508: PUSH
15509: LD_INT 8
15511: PUSH
15512: LD_INT 9
15514: PUSH
15515: LD_INT 10
15517: PUSH
15518: LD_INT 11
15520: PUSH
15521: LD_INT 12
15523: PUSH
15524: LD_INT 13
15526: PUSH
15527: LD_INT 14
15529: PUSH
15530: LD_INT 15
15532: PUSH
15533: LD_INT 16
15535: PUSH
15536: LD_INT 17
15538: PUSH
15539: LD_INT 18
15541: PUSH
15542: LD_INT 19
15544: PUSH
15545: LD_INT 20
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: LD_INT 24
15559: PUSH
15560: LD_INT 25
15562: PUSH
15563: LD_INT 26
15565: PUSH
15566: LD_INT 27
15568: PUSH
15569: LD_INT 28
15571: PUSH
15572: LD_INT 29
15574: PUSH
15575: LD_INT 30
15577: PUSH
15578: LD_INT 31
15580: PUSH
15581: LD_INT 32
15583: PUSH
15584: LD_INT 33
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 36
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 101
15632: PUSH
15633: LD_INT 102
15635: PUSH
15636: LD_INT 103
15638: PUSH
15639: LD_INT 104
15641: PUSH
15642: LD_INT 105
15644: PUSH
15645: LD_INT 106
15647: PUSH
15648: LD_INT 107
15650: PUSH
15651: LD_INT 108
15653: PUSH
15654: LD_INT 109
15656: PUSH
15657: LD_INT 110
15659: PUSH
15660: LD_INT 111
15662: PUSH
15663: LD_INT 112
15665: PUSH
15666: LD_INT 113
15668: PUSH
15669: LD_INT 114
15671: PUSH
15672: LD_INT 116
15674: PUSH
15675: LD_INT 117
15677: PUSH
15678: LD_INT 118
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: ST_TO_ADDR
15704: GO 16479
15706: LD_INT 16
15708: DOUBLE
15709: EQUAL
15710: IFTRUE 15714
15712: GO 15850
15714: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15715: LD_ADDR_VAR 0 2
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 4
15725: PUSH
15726: LD_INT 5
15728: PUSH
15729: LD_INT 7
15731: PUSH
15732: LD_INT 11
15734: PUSH
15735: LD_INT 12
15737: PUSH
15738: LD_INT 15
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: LD_INT 20
15746: PUSH
15747: LD_INT 21
15749: PUSH
15750: LD_INT 22
15752: PUSH
15753: LD_INT 23
15755: PUSH
15756: LD_INT 25
15758: PUSH
15759: LD_INT 26
15761: PUSH
15762: LD_INT 30
15764: PUSH
15765: LD_INT 31
15767: PUSH
15768: LD_INT 32
15770: PUSH
15771: LD_INT 33
15773: PUSH
15774: LD_INT 34
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 101
15800: PUSH
15801: LD_INT 102
15803: PUSH
15804: LD_INT 103
15806: PUSH
15807: LD_INT 106
15809: PUSH
15810: LD_INT 108
15812: PUSH
15813: LD_INT 112
15815: PUSH
15816: LD_INT 113
15818: PUSH
15819: LD_INT 114
15821: PUSH
15822: LD_INT 116
15824: PUSH
15825: LD_INT 117
15827: PUSH
15828: LD_INT 118
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: ST_TO_ADDR
15848: GO 16479
15850: LD_INT 17
15852: DOUBLE
15853: EQUAL
15854: IFTRUE 15858
15856: GO 16082
15858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: LD_INT 2
15869: PUSH
15870: LD_INT 3
15872: PUSH
15873: LD_INT 4
15875: PUSH
15876: LD_INT 5
15878: PUSH
15879: LD_INT 6
15881: PUSH
15882: LD_INT 7
15884: PUSH
15885: LD_INT 8
15887: PUSH
15888: LD_INT 9
15890: PUSH
15891: LD_INT 10
15893: PUSH
15894: LD_INT 11
15896: PUSH
15897: LD_INT 12
15899: PUSH
15900: LD_INT 13
15902: PUSH
15903: LD_INT 14
15905: PUSH
15906: LD_INT 15
15908: PUSH
15909: LD_INT 16
15911: PUSH
15912: LD_INT 17
15914: PUSH
15915: LD_INT 18
15917: PUSH
15918: LD_INT 19
15920: PUSH
15921: LD_INT 20
15923: PUSH
15924: LD_INT 21
15926: PUSH
15927: LD_INT 22
15929: PUSH
15930: LD_INT 23
15932: PUSH
15933: LD_INT 24
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 26
15941: PUSH
15942: LD_INT 27
15944: PUSH
15945: LD_INT 28
15947: PUSH
15948: LD_INT 29
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 31
15956: PUSH
15957: LD_INT 32
15959: PUSH
15960: LD_INT 33
15962: PUSH
15963: LD_INT 34
15965: PUSH
15966: LD_INT 36
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 101
16008: PUSH
16009: LD_INT 102
16011: PUSH
16012: LD_INT 103
16014: PUSH
16015: LD_INT 104
16017: PUSH
16018: LD_INT 105
16020: PUSH
16021: LD_INT 106
16023: PUSH
16024: LD_INT 107
16026: PUSH
16027: LD_INT 108
16029: PUSH
16030: LD_INT 109
16032: PUSH
16033: LD_INT 110
16035: PUSH
16036: LD_INT 111
16038: PUSH
16039: LD_INT 112
16041: PUSH
16042: LD_INT 113
16044: PUSH
16045: LD_INT 114
16047: PUSH
16048: LD_INT 116
16050: PUSH
16051: LD_INT 117
16053: PUSH
16054: LD_INT 118
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: ST_TO_ADDR
16080: GO 16479
16082: LD_INT 18
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16238
16090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16091: LD_ADDR_VAR 0 2
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 4
16101: PUSH
16102: LD_INT 5
16104: PUSH
16105: LD_INT 7
16107: PUSH
16108: LD_INT 11
16110: PUSH
16111: LD_INT 12
16113: PUSH
16114: LD_INT 15
16116: PUSH
16117: LD_INT 16
16119: PUSH
16120: LD_INT 20
16122: PUSH
16123: LD_INT 21
16125: PUSH
16126: LD_INT 22
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 25
16134: PUSH
16135: LD_INT 26
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 31
16143: PUSH
16144: LD_INT 32
16146: PUSH
16147: LD_INT 33
16149: PUSH
16150: LD_INT 34
16152: PUSH
16153: LD_INT 35
16155: PUSH
16156: LD_INT 36
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 101
16184: PUSH
16185: LD_INT 102
16187: PUSH
16188: LD_INT 103
16190: PUSH
16191: LD_INT 106
16193: PUSH
16194: LD_INT 108
16196: PUSH
16197: LD_INT 112
16199: PUSH
16200: LD_INT 113
16202: PUSH
16203: LD_INT 114
16205: PUSH
16206: LD_INT 115
16208: PUSH
16209: LD_INT 116
16211: PUSH
16212: LD_INT 117
16214: PUSH
16215: LD_INT 118
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: ST_TO_ADDR
16236: GO 16479
16238: LD_INT 19
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16478
16246: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 3
16260: PUSH
16261: LD_INT 4
16263: PUSH
16264: LD_INT 5
16266: PUSH
16267: LD_INT 6
16269: PUSH
16270: LD_INT 7
16272: PUSH
16273: LD_INT 8
16275: PUSH
16276: LD_INT 9
16278: PUSH
16279: LD_INT 10
16281: PUSH
16282: LD_INT 11
16284: PUSH
16285: LD_INT 12
16287: PUSH
16288: LD_INT 13
16290: PUSH
16291: LD_INT 14
16293: PUSH
16294: LD_INT 15
16296: PUSH
16297: LD_INT 16
16299: PUSH
16300: LD_INT 17
16302: PUSH
16303: LD_INT 18
16305: PUSH
16306: LD_INT 19
16308: PUSH
16309: LD_INT 20
16311: PUSH
16312: LD_INT 21
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_INT 23
16320: PUSH
16321: LD_INT 24
16323: PUSH
16324: LD_INT 25
16326: PUSH
16327: LD_INT 26
16329: PUSH
16330: LD_INT 27
16332: PUSH
16333: LD_INT 28
16335: PUSH
16336: LD_INT 29
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 31
16344: PUSH
16345: LD_INT 32
16347: PUSH
16348: LD_INT 33
16350: PUSH
16351: LD_INT 34
16353: PUSH
16354: LD_INT 35
16356: PUSH
16357: LD_INT 36
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 101
16400: PUSH
16401: LD_INT 102
16403: PUSH
16404: LD_INT 103
16406: PUSH
16407: LD_INT 104
16409: PUSH
16410: LD_INT 105
16412: PUSH
16413: LD_INT 106
16415: PUSH
16416: LD_INT 107
16418: PUSH
16419: LD_INT 108
16421: PUSH
16422: LD_INT 109
16424: PUSH
16425: LD_INT 110
16427: PUSH
16428: LD_INT 111
16430: PUSH
16431: LD_INT 112
16433: PUSH
16434: LD_INT 113
16436: PUSH
16437: LD_INT 114
16439: PUSH
16440: LD_INT 115
16442: PUSH
16443: LD_INT 116
16445: PUSH
16446: LD_INT 117
16448: PUSH
16449: LD_INT 118
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: ST_TO_ADDR
16476: GO 16479
16478: POP
// end else
16479: GO 16710
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 3
16494: PUSH
16495: LD_INT 4
16497: PUSH
16498: LD_INT 5
16500: PUSH
16501: LD_INT 6
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: LD_INT 8
16509: PUSH
16510: LD_INT 9
16512: PUSH
16513: LD_INT 10
16515: PUSH
16516: LD_INT 11
16518: PUSH
16519: LD_INT 12
16521: PUSH
16522: LD_INT 13
16524: PUSH
16525: LD_INT 14
16527: PUSH
16528: LD_INT 15
16530: PUSH
16531: LD_INT 16
16533: PUSH
16534: LD_INT 17
16536: PUSH
16537: LD_INT 18
16539: PUSH
16540: LD_INT 19
16542: PUSH
16543: LD_INT 20
16545: PUSH
16546: LD_INT 21
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 23
16554: PUSH
16555: LD_INT 24
16557: PUSH
16558: LD_INT 25
16560: PUSH
16561: LD_INT 26
16563: PUSH
16564: LD_INT 27
16566: PUSH
16567: LD_INT 28
16569: PUSH
16570: LD_INT 29
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 31
16578: PUSH
16579: LD_INT 32
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 34
16587: PUSH
16588: LD_INT 35
16590: PUSH
16591: LD_INT 36
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 101
16634: PUSH
16635: LD_INT 102
16637: PUSH
16638: LD_INT 103
16640: PUSH
16641: LD_INT 104
16643: PUSH
16644: LD_INT 105
16646: PUSH
16647: LD_INT 106
16649: PUSH
16650: LD_INT 107
16652: PUSH
16653: LD_INT 108
16655: PUSH
16656: LD_INT 109
16658: PUSH
16659: LD_INT 110
16661: PUSH
16662: LD_INT 111
16664: PUSH
16665: LD_INT 112
16667: PUSH
16668: LD_INT 113
16670: PUSH
16671: LD_INT 114
16673: PUSH
16674: LD_INT 115
16676: PUSH
16677: LD_INT 116
16679: PUSH
16680: LD_INT 117
16682: PUSH
16683: LD_INT 118
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: ST_TO_ADDR
// if result then
16710: LD_VAR 0 2
16714: IFFALSE 17500
// begin normal :=  ;
16716: LD_ADDR_VAR 0 5
16720: PUSH
16721: LD_STRING 
16723: ST_TO_ADDR
// hardcore :=  ;
16724: LD_ADDR_VAR 0 6
16728: PUSH
16729: LD_STRING 
16731: ST_TO_ADDR
// active :=  ;
16732: LD_ADDR_VAR 0 7
16736: PUSH
16737: LD_STRING 
16739: ST_TO_ADDR
// for i = 1 to normalCounter do
16740: LD_ADDR_VAR 0 8
16744: PUSH
16745: DOUBLE
16746: LD_INT 1
16748: DEC
16749: ST_TO_ADDR
16750: LD_EXP 23
16754: PUSH
16755: FOR_TO
16756: IFFALSE 16857
// begin tmp := 0 ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_STRING 0
16765: ST_TO_ADDR
// if result [ 1 ] then
16766: LD_VAR 0 2
16770: PUSH
16771: LD_INT 1
16773: ARRAY
16774: IFFALSE 16839
// if result [ 1 ] [ 1 ] = i then
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 1
16783: ARRAY
16784: PUSH
16785: LD_INT 1
16787: ARRAY
16788: PUSH
16789: LD_VAR 0 8
16793: EQUAL
16794: IFFALSE 16839
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16796: LD_ADDR_VAR 0 2
16800: PUSH
16801: LD_VAR 0 2
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: LD_VAR 0 2
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 3
16825: PPUSH
16826: CALL_OW 1
16830: ST_TO_ADDR
// tmp := 1 ;
16831: LD_ADDR_VAR 0 3
16835: PUSH
16836: LD_STRING 1
16838: ST_TO_ADDR
// end ; normal := normal & tmp ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: LD_VAR 0 5
16848: PUSH
16849: LD_VAR 0 3
16853: STR
16854: ST_TO_ADDR
// end ;
16855: GO 16755
16857: POP
16858: POP
// for i = 1 to hardcoreCounter do
16859: LD_ADDR_VAR 0 8
16863: PUSH
16864: DOUBLE
16865: LD_INT 1
16867: DEC
16868: ST_TO_ADDR
16869: LD_EXP 24
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16980
// begin tmp := 0 ;
16877: LD_ADDR_VAR 0 3
16881: PUSH
16882: LD_STRING 0
16884: ST_TO_ADDR
// if result [ 2 ] then
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 2
16892: ARRAY
16893: IFFALSE 16962
// if result [ 2 ] [ 1 ] = 100 + i then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PUSH
16908: LD_INT 100
16910: PUSH
16911: LD_VAR 0 8
16915: PLUS
16916: EQUAL
16917: IFFALSE 16962
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_INT 2
16931: PPUSH
16932: LD_VAR 0 2
16936: PUSH
16937: LD_INT 2
16939: ARRAY
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 3
16948: PPUSH
16949: CALL_OW 1
16953: ST_TO_ADDR
// tmp := 1 ;
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_STRING 1
16961: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16962: LD_ADDR_VAR 0 6
16966: PUSH
16967: LD_VAR 0 6
16971: PUSH
16972: LD_VAR 0 3
16976: STR
16977: ST_TO_ADDR
// end ;
16978: GO 16874
16980: POP
16981: POP
// if isGameLoad then
16982: LD_VAR 0 1
16986: IFFALSE 17461
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16988: LD_ADDR_VAR 0 4
16992: PUSH
16993: LD_EXP 27
16997: PUSH
16998: LD_EXP 26
17002: PUSH
17003: LD_EXP 28
17007: PUSH
17008: LD_EXP 25
17012: PUSH
17013: LD_EXP 29
17017: PUSH
17018: LD_EXP 30
17022: PUSH
17023: LD_EXP 31
17027: PUSH
17028: LD_EXP 32
17032: PUSH
17033: LD_EXP 33
17037: PUSH
17038: LD_EXP 34
17042: PUSH
17043: LD_EXP 35
17047: PUSH
17048: LD_EXP 36
17052: PUSH
17053: LD_EXP 37
17057: PUSH
17058: LD_EXP 38
17062: PUSH
17063: LD_EXP 46
17067: PUSH
17068: LD_EXP 47
17072: PUSH
17073: LD_EXP 48
17077: PUSH
17078: LD_EXP 49
17082: PUSH
17083: LD_EXP 51
17087: PUSH
17088: LD_EXP 52
17092: PUSH
17093: LD_EXP 53
17097: PUSH
17098: LD_EXP 56
17102: PUSH
17103: LD_EXP 58
17107: PUSH
17108: LD_EXP 59
17112: PUSH
17113: LD_EXP 60
17117: PUSH
17118: LD_EXP 62
17122: PUSH
17123: LD_EXP 63
17127: PUSH
17128: LD_EXP 66
17132: PUSH
17133: LD_EXP 67
17137: PUSH
17138: LD_EXP 68
17142: PUSH
17143: LD_EXP 69
17147: PUSH
17148: LD_EXP 70
17152: PUSH
17153: LD_EXP 71
17157: PUSH
17158: LD_EXP 72
17162: PUSH
17163: LD_EXP 73
17167: PUSH
17168: LD_EXP 74
17172: PUSH
17173: LD_EXP 39
17177: PUSH
17178: LD_EXP 40
17182: PUSH
17183: LD_EXP 43
17187: PUSH
17188: LD_EXP 44
17192: PUSH
17193: LD_EXP 45
17197: PUSH
17198: LD_EXP 41
17202: PUSH
17203: LD_EXP 42
17207: PUSH
17208: LD_EXP 50
17212: PUSH
17213: LD_EXP 54
17217: PUSH
17218: LD_EXP 55
17222: PUSH
17223: LD_EXP 57
17227: PUSH
17228: LD_EXP 61
17232: PUSH
17233: LD_EXP 64
17237: PUSH
17238: LD_EXP 65
17242: PUSH
17243: LD_EXP 75
17247: PUSH
17248: LD_EXP 76
17252: PUSH
17253: LD_EXP 77
17257: PUSH
17258: LD_EXP 78
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: ST_TO_ADDR
// tmp :=  ;
17319: LD_ADDR_VAR 0 3
17323: PUSH
17324: LD_STRING 
17326: ST_TO_ADDR
// for i = 1 to normalCounter do
17327: LD_ADDR_VAR 0 8
17331: PUSH
17332: DOUBLE
17333: LD_INT 1
17335: DEC
17336: ST_TO_ADDR
17337: LD_EXP 23
17341: PUSH
17342: FOR_TO
17343: IFFALSE 17379
// begin if flags [ i ] then
17345: LD_VAR 0 4
17349: PUSH
17350: LD_VAR 0 8
17354: ARRAY
17355: IFFALSE 17377
// tmp := tmp & i & ; ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_VAR 0 3
17366: PUSH
17367: LD_VAR 0 8
17371: STR
17372: PUSH
17373: LD_STRING ;
17375: STR
17376: ST_TO_ADDR
// end ;
17377: GO 17342
17379: POP
17380: POP
// for i = 1 to hardcoreCounter do
17381: LD_ADDR_VAR 0 8
17385: PUSH
17386: DOUBLE
17387: LD_INT 1
17389: DEC
17390: ST_TO_ADDR
17391: LD_EXP 24
17395: PUSH
17396: FOR_TO
17397: IFFALSE 17443
// begin if flags [ normalCounter + i ] then
17399: LD_VAR 0 4
17403: PUSH
17404: LD_EXP 23
17408: PUSH
17409: LD_VAR 0 8
17413: PLUS
17414: ARRAY
17415: IFFALSE 17441
// tmp := tmp & ( 100 + i ) & ; ;
17417: LD_ADDR_VAR 0 3
17421: PUSH
17422: LD_VAR 0 3
17426: PUSH
17427: LD_INT 100
17429: PUSH
17430: LD_VAR 0 8
17434: PLUS
17435: STR
17436: PUSH
17437: LD_STRING ;
17439: STR
17440: ST_TO_ADDR
// end ;
17441: GO 17396
17443: POP
17444: POP
// if tmp then
17445: LD_VAR 0 3
17449: IFFALSE 17461
// active := tmp ;
17451: LD_ADDR_VAR 0 7
17455: PUSH
17456: LD_VAR 0 3
17460: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17461: LD_STRING getStreamItemsFromMission("
17463: PUSH
17464: LD_VAR 0 5
17468: STR
17469: PUSH
17470: LD_STRING ","
17472: STR
17473: PUSH
17474: LD_VAR 0 6
17478: STR
17479: PUSH
17480: LD_STRING ","
17482: STR
17483: PUSH
17484: LD_VAR 0 7
17488: STR
17489: PUSH
17490: LD_STRING ")
17492: STR
17493: PPUSH
17494: CALL_OW 559
// end else
17498: GO 17507
// ToLua ( getStreamItemsFromMission("","","") ) ;
17500: LD_STRING getStreamItemsFromMission("","","")
17502: PPUSH
17503: CALL_OW 559
// end ;
17507: LD_VAR 0 2
17511: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17512: LD_EXP 22
17516: PUSH
17517: LD_EXP 27
17521: AND
17522: IFFALSE 17646
17524: GO 17526
17526: DISABLE
17527: LD_INT 0
17529: PPUSH
17530: PPUSH
// begin enable ;
17531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_OWVAR 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 34
17554: PUSH
17555: LD_INT 7
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 34
17564: PUSH
17565: LD_INT 45
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 34
17574: PUSH
17575: LD_INT 28
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 34
17584: PUSH
17585: LD_INT 47
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PPUSH
17603: CALL_OW 69
17607: ST_TO_ADDR
// if not tmp then
17608: LD_VAR 0 2
17612: NOT
17613: IFFALSE 17617
// exit ;
17615: GO 17646
// for i in tmp do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: LD_VAR 0 2
17626: PUSH
17627: FOR_IN
17628: IFFALSE 17644
// begin SetLives ( i , 0 ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: LD_INT 0
17637: PPUSH
17638: CALL_OW 234
// end ;
17642: GO 17627
17644: POP
17645: POP
// end ;
17646: PPOPN 2
17648: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17649: LD_EXP 22
17653: PUSH
17654: LD_EXP 28
17658: AND
17659: IFFALSE 17743
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
17667: PPUSH
// begin enable ;
17668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_OWVAR 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 32
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: ST_TO_ADDR
// if not tmp then
17705: LD_VAR 0 2
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 17743
// for i in tmp do
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_VAR 0 2
17723: PUSH
17724: FOR_IN
17725: IFFALSE 17741
// begin SetLives ( i , 0 ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 0
17734: PPUSH
17735: CALL_OW 234
// end ;
17739: GO 17724
17741: POP
17742: POP
// end ;
17743: PPOPN 2
17745: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17746: LD_EXP 22
17750: PUSH
17751: LD_EXP 25
17755: AND
17756: IFFALSE 17849
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin enable ;
17764: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17765: LD_ADDR_VAR 0 1
17769: PUSH
17770: LD_INT 22
17772: PUSH
17773: LD_OWVAR 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 5
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 25
17797: PUSH
17798: LD_INT 9
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 25
17807: PUSH
17808: LD_INT 8
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17847
// begin SetClass ( i , 1 ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 336
// end ;
17845: GO 17830
17847: POP
17848: POP
// end ;
17849: PPOPN 1
17851: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17852: LD_EXP 22
17856: PUSH
17857: LD_EXP 26
17861: AND
17862: PUSH
17863: LD_OWVAR 65
17867: PUSH
17868: LD_INT 7
17870: LESS
17871: AND
17872: IFFALSE 17886
17874: GO 17876
17876: DISABLE
// begin enable ;
17877: ENABLE
// game_speed := 7 ;
17878: LD_ADDR_OWVAR 65
17882: PUSH
17883: LD_INT 7
17885: ST_TO_ADDR
// end ;
17886: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17887: LD_EXP 22
17891: PUSH
17892: LD_EXP 29
17896: AND
17897: IFFALSE 18099
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17907: LD_ADDR_VAR 0 3
17911: PUSH
17912: LD_INT 81
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 3
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 18099
// if tmp > 5 then
17952: LD_VAR 0 3
17956: PUSH
17957: LD_INT 5
17959: GREATER
17960: IFFALSE 17972
// k := 5 else
17962: LD_ADDR_VAR 0 2
17966: PUSH
17967: LD_INT 5
17969: ST_TO_ADDR
17970: GO 17982
// k := tmp ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_VAR 0 3
17981: ST_TO_ADDR
// for i := 1 to k do
17982: LD_ADDR_VAR 0 1
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_VAR 0 2
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18097
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 1
18009: ARRAY
18010: PPUSH
18011: LD_VAR 0 1
18015: PUSH
18016: LD_INT 4
18018: MOD
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: PPUSH
18024: CALL_OW 259
18028: PUSH
18029: LD_INT 10
18031: LESS
18032: IFFALSE 18095
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18034: LD_VAR 0 3
18038: PUSH
18039: LD_VAR 0 1
18043: ARRAY
18044: PPUSH
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 4
18052: MOD
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 1
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 1
18073: PUSH
18074: LD_INT 4
18076: MOD
18077: PUSH
18078: LD_INT 1
18080: PLUS
18081: PPUSH
18082: CALL_OW 259
18086: PUSH
18087: LD_INT 1
18089: PLUS
18090: PPUSH
18091: CALL_OW 237
18095: GO 17997
18097: POP
18098: POP
// end ;
18099: PPOPN 3
18101: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18102: LD_EXP 22
18106: PUSH
18107: LD_EXP 30
18111: AND
18112: IFFALSE 18132
18114: GO 18116
18116: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18117: LD_INT 4
18119: PPUSH
18120: LD_OWVAR 2
18124: PPUSH
18125: LD_INT 0
18127: PPUSH
18128: CALL_OW 324
18132: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18133: LD_EXP 22
18137: PUSH
18138: LD_EXP 59
18142: AND
18143: IFFALSE 18163
18145: GO 18147
18147: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18148: LD_INT 19
18150: PPUSH
18151: LD_OWVAR 2
18155: PPUSH
18156: LD_INT 0
18158: PPUSH
18159: CALL_OW 324
18163: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18164: LD_EXP 22
18168: PUSH
18169: LD_EXP 31
18173: AND
18174: IFFALSE 18276
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// begin enable ;
18183: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18184: LD_ADDR_VAR 0 2
18188: PUSH
18189: LD_INT 22
18191: PUSH
18192: LD_OWVAR 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 34
18206: PUSH
18207: LD_INT 11
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 34
18216: PUSH
18217: LD_INT 30
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: ST_TO_ADDR
// if not tmp then
18238: LD_VAR 0 2
18242: NOT
18243: IFFALSE 18247
// exit ;
18245: GO 18276
// for i in tmp do
18247: LD_ADDR_VAR 0 1
18251: PUSH
18252: LD_VAR 0 2
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18274
// begin SetLives ( i , 0 ) ;
18260: LD_VAR 0 1
18264: PPUSH
18265: LD_INT 0
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: GO 18257
18274: POP
18275: POP
// end ;
18276: PPOPN 2
18278: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18279: LD_EXP 22
18283: PUSH
18284: LD_EXP 32
18288: AND
18289: IFFALSE 18309
18291: GO 18293
18293: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18294: LD_INT 32
18296: PPUSH
18297: LD_OWVAR 2
18301: PPUSH
18302: LD_INT 0
18304: PPUSH
18305: CALL_OW 324
18309: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18310: LD_EXP 22
18314: PUSH
18315: LD_EXP 33
18319: AND
18320: IFFALSE 18501
18322: GO 18324
18324: DISABLE
18325: LD_INT 0
18327: PPUSH
18328: PPUSH
18329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18330: LD_ADDR_VAR 0 2
18334: PUSH
18335: LD_INT 22
18337: PUSH
18338: LD_OWVAR 2
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 33
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PPUSH
18361: CALL_OW 69
18365: ST_TO_ADDR
// if not tmp then
18366: LD_VAR 0 2
18370: NOT
18371: IFFALSE 18375
// exit ;
18373: GO 18501
// side := 0 ;
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_INT 0
18382: ST_TO_ADDR
// for i := 1 to 8 do
18383: LD_ADDR_VAR 0 1
18387: PUSH
18388: DOUBLE
18389: LD_INT 1
18391: DEC
18392: ST_TO_ADDR
18393: LD_INT 8
18395: PUSH
18396: FOR_TO
18397: IFFALSE 18445
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18399: LD_OWVAR 2
18403: PUSH
18404: LD_VAR 0 1
18408: NONEQUAL
18409: PUSH
18410: LD_OWVAR 2
18414: PPUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 81
18424: PUSH
18425: LD_INT 2
18427: EQUAL
18428: AND
18429: IFFALSE 18443
// begin side := i ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_VAR 0 1
18440: ST_TO_ADDR
// break ;
18441: GO 18445
// end ;
18443: GO 18396
18445: POP
18446: POP
// if not side then
18447: LD_VAR 0 3
18451: NOT
18452: IFFALSE 18456
// exit ;
18454: GO 18501
// for i := 1 to tmp do
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: DOUBLE
18462: LD_INT 1
18464: DEC
18465: ST_TO_ADDR
18466: LD_VAR 0 2
18470: PUSH
18471: FOR_TO
18472: IFFALSE 18499
// if Prob ( 60 ) then
18474: LD_INT 60
18476: PPUSH
18477: CALL_OW 13
18481: IFFALSE 18497
// SetSide ( i , side ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: CALL_OW 235
18497: GO 18471
18499: POP
18500: POP
// end ;
18501: PPOPN 3
18503: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18504: LD_EXP 22
18508: PUSH
18509: LD_EXP 35
18513: AND
18514: IFFALSE 18633
18516: GO 18518
18518: DISABLE
18519: LD_INT 0
18521: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18522: LD_ADDR_VAR 0 1
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_OWVAR 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: LD_INT 23
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: PUSH
18576: FOR_IN
18577: IFFALSE 18631
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 257
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: LD_INT 4
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: IN
18607: IFFALSE 18629
// SetClass ( un , rand ( 1 , 4 ) ) ;
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: LD_INT 4
18619: PPUSH
18620: CALL_OW 12
18624: PPUSH
18625: CALL_OW 336
18629: GO 18576
18631: POP
18632: POP
// end ;
18633: PPOPN 1
18635: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18636: LD_EXP 22
18640: PUSH
18641: LD_EXP 34
18645: AND
18646: IFFALSE 18725
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18654: LD_ADDR_VAR 0 1
18658: PUSH
18659: LD_INT 22
18661: PUSH
18662: LD_OWVAR 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 21
18673: PUSH
18674: LD_INT 3
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: ST_TO_ADDR
// if not tmp then
18690: LD_VAR 0 1
18694: NOT
18695: IFFALSE 18699
// exit ;
18697: GO 18725
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18699: LD_VAR 0 1
18703: PUSH
18704: LD_INT 1
18706: PPUSH
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL_OW 12
18716: ARRAY
18717: PPUSH
18718: LD_INT 100
18720: PPUSH
18721: CALL_OW 234
// end ;
18725: PPOPN 1
18727: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18728: LD_EXP 22
18732: PUSH
18733: LD_EXP 36
18737: AND
18738: IFFALSE 18836
18740: GO 18742
18742: DISABLE
18743: LD_INT 0
18745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18746: LD_ADDR_VAR 0 1
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_OWVAR 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: ST_TO_ADDR
// if not tmp then
18782: LD_VAR 0 1
18786: NOT
18787: IFFALSE 18791
// exit ;
18789: GO 18836
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18791: LD_VAR 0 1
18795: PUSH
18796: LD_INT 1
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 12
18808: ARRAY
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: LD_INT 4
18815: PPUSH
18816: CALL_OW 12
18820: PPUSH
18821: LD_INT 3000
18823: PPUSH
18824: LD_INT 9000
18826: PPUSH
18827: CALL_OW 12
18831: PPUSH
18832: CALL_OW 492
// end ;
18836: PPOPN 1
18838: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18839: LD_EXP 22
18843: PUSH
18844: LD_EXP 37
18848: AND
18849: IFFALSE 18869
18851: GO 18853
18853: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18854: LD_INT 1
18856: PPUSH
18857: LD_OWVAR 2
18861: PPUSH
18862: LD_INT 0
18864: PPUSH
18865: CALL_OW 324
18869: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18870: LD_EXP 22
18874: PUSH
18875: LD_EXP 38
18879: AND
18880: IFFALSE 18963
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
18888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18889: LD_ADDR_VAR 0 2
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_OWVAR 2
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 21
18908: PUSH
18909: LD_INT 3
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// if not tmp then
18925: LD_VAR 0 2
18929: NOT
18930: IFFALSE 18934
// exit ;
18932: GO 18963
// for i in tmp do
18934: LD_ADDR_VAR 0 1
18938: PUSH
18939: LD_VAR 0 2
18943: PUSH
18944: FOR_IN
18945: IFFALSE 18961
// SetBLevel ( i , 10 ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_INT 10
18954: PPUSH
18955: CALL_OW 241
18959: GO 18944
18961: POP
18962: POP
// end ;
18963: PPOPN 2
18965: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18966: LD_EXP 22
18970: PUSH
18971: LD_EXP 39
18975: AND
18976: IFFALSE 19087
18978: GO 18980
18980: DISABLE
18981: LD_INT 0
18983: PPUSH
18984: PPUSH
18985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18986: LD_ADDR_VAR 0 3
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_OWVAR 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 25
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PPUSH
19017: CALL_OW 69
19021: ST_TO_ADDR
// if not tmp then
19022: LD_VAR 0 3
19026: NOT
19027: IFFALSE 19031
// exit ;
19029: GO 19087
// un := tmp [ rand ( 1 , tmp ) ] ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 1
19043: PPUSH
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: ST_TO_ADDR
// if Crawls ( un ) then
19055: LD_VAR 0 2
19059: PPUSH
19060: CALL_OW 318
19064: IFFALSE 19075
// ComWalk ( un ) ;
19066: LD_VAR 0 2
19070: PPUSH
19071: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19075: LD_VAR 0 2
19079: PPUSH
19080: LD_INT 5
19082: PPUSH
19083: CALL_OW 336
// end ;
19087: PPOPN 3
19089: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19090: LD_EXP 22
19094: PUSH
19095: LD_EXP 40
19099: AND
19100: PUSH
19101: LD_OWVAR 67
19105: PUSH
19106: LD_INT 4
19108: LESS
19109: AND
19110: IFFALSE 19129
19112: GO 19114
19114: DISABLE
// begin Difficulty := Difficulty + 1 ;
19115: LD_ADDR_OWVAR 67
19119: PUSH
19120: LD_OWVAR 67
19124: PUSH
19125: LD_INT 1
19127: PLUS
19128: ST_TO_ADDR
// end ;
19129: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19130: LD_EXP 22
19134: PUSH
19135: LD_EXP 41
19139: AND
19140: IFFALSE 19243
19142: GO 19144
19144: DISABLE
19145: LD_INT 0
19147: PPUSH
// begin for i := 1 to 5 do
19148: LD_ADDR_VAR 0 1
19152: PUSH
19153: DOUBLE
19154: LD_INT 1
19156: DEC
19157: ST_TO_ADDR
19158: LD_INT 5
19160: PUSH
19161: FOR_TO
19162: IFFALSE 19241
// begin uc_nation := nation_nature ;
19164: LD_ADDR_OWVAR 21
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// uc_side := 0 ;
19172: LD_ADDR_OWVAR 20
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19180: LD_ADDR_OWVAR 29
19184: PUSH
19185: LD_INT 12
19187: PUSH
19188: LD_INT 12
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: ST_TO_ADDR
// hc_agressivity := 20 ;
19195: LD_ADDR_OWVAR 35
19199: PUSH
19200: LD_INT 20
19202: ST_TO_ADDR
// hc_class := class_tiger ;
19203: LD_ADDR_OWVAR 28
19207: PUSH
19208: LD_INT 14
19210: ST_TO_ADDR
// hc_gallery :=  ;
19211: LD_ADDR_OWVAR 33
19215: PUSH
19216: LD_STRING 
19218: ST_TO_ADDR
// hc_name :=  ;
19219: LD_ADDR_OWVAR 26
19223: PUSH
19224: LD_STRING 
19226: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19227: CALL_OW 44
19231: PPUSH
19232: LD_INT 0
19234: PPUSH
19235: CALL_OW 51
// end ;
19239: GO 19161
19241: POP
19242: POP
// end ;
19243: PPOPN 1
19245: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19246: LD_EXP 22
19250: PUSH
19251: LD_EXP 42
19255: AND
19256: IFFALSE 19265
19258: GO 19260
19260: DISABLE
// StreamSibBomb ;
19261: CALL 19266 0 0
19265: END
// export function StreamSibBomb ; var i , x , y ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
// result := false ;
19272: LD_ADDR_VAR 0 1
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// for i := 1 to 16 do
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: DOUBLE
19286: LD_INT 1
19288: DEC
19289: ST_TO_ADDR
19290: LD_INT 16
19292: PUSH
19293: FOR_TO
19294: IFFALSE 19493
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 20
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: LD_INT 40
19312: PUSH
19313: LD_INT 50
19315: PUSH
19316: LD_INT 60
19318: PUSH
19319: LD_INT 70
19321: PUSH
19322: LD_INT 80
19324: PUSH
19325: LD_INT 90
19327: PUSH
19328: LD_INT 100
19330: PUSH
19331: LD_INT 110
19333: PUSH
19334: LD_INT 120
19336: PUSH
19337: LD_INT 130
19339: PUSH
19340: LD_INT 140
19342: PUSH
19343: LD_INT 150
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 15
19368: PPUSH
19369: CALL_OW 12
19373: ARRAY
19374: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19375: LD_ADDR_VAR 0 4
19379: PUSH
19380: LD_INT 10
19382: PUSH
19383: LD_INT 20
19385: PUSH
19386: LD_INT 30
19388: PUSH
19389: LD_INT 40
19391: PUSH
19392: LD_INT 50
19394: PUSH
19395: LD_INT 60
19397: PUSH
19398: LD_INT 70
19400: PUSH
19401: LD_INT 80
19403: PUSH
19404: LD_INT 90
19406: PUSH
19407: LD_INT 100
19409: PUSH
19410: LD_INT 110
19412: PUSH
19413: LD_INT 120
19415: PUSH
19416: LD_INT 130
19418: PUSH
19419: LD_INT 140
19421: PUSH
19422: LD_INT 150
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PPUSH
19445: LD_INT 15
19447: PPUSH
19448: CALL_OW 12
19452: ARRAY
19453: ST_TO_ADDR
// if ValidHex ( x , y ) then
19454: LD_VAR 0 3
19458: PPUSH
19459: LD_VAR 0 4
19463: PPUSH
19464: CALL_OW 488
19468: IFFALSE 19491
// begin result := [ x , y ] ;
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_VAR 0 3
19479: PUSH
19480: LD_VAR 0 4
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: ST_TO_ADDR
// break ;
19489: GO 19493
// end ; end ;
19491: GO 19293
19493: POP
19494: POP
// if result then
19495: LD_VAR 0 1
19499: IFFALSE 19559
// begin ToLua ( playSibBomb() ) ;
19501: LD_STRING playSibBomb()
19503: PPUSH
19504: CALL_OW 559
// wait ( 0 0$14 ) ;
19508: LD_INT 490
19510: PPUSH
19511: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19515: LD_VAR 0 1
19519: PUSH
19520: LD_INT 1
19522: ARRAY
19523: PPUSH
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 2
19531: ARRAY
19532: PPUSH
19533: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19537: LD_VAR 0 1
19541: PUSH
19542: LD_INT 1
19544: ARRAY
19545: PPUSH
19546: LD_VAR 0 1
19550: PUSH
19551: LD_INT 2
19553: ARRAY
19554: PPUSH
19555: CALL_OW 429
// end ; end ;
19559: LD_VAR 0 1
19563: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19564: LD_EXP 22
19568: PUSH
19569: LD_EXP 44
19573: AND
19574: IFFALSE 19586
19576: GO 19578
19578: DISABLE
// YouLost (  ) ;
19579: LD_STRING 
19581: PPUSH
19582: CALL_OW 104
19586: END
// every 0 0$1 trigger StreamModeActive and sFog do
19587: LD_EXP 22
19591: PUSH
19592: LD_EXP 43
19596: AND
19597: IFFALSE 19611
19599: GO 19601
19601: DISABLE
// FogOff ( your_side ) ;
19602: LD_OWVAR 2
19606: PPUSH
19607: CALL_OW 344
19611: END
// every 0 0$1 trigger StreamModeActive and sSun do
19612: LD_EXP 22
19616: PUSH
19617: LD_EXP 45
19621: AND
19622: IFFALSE 19650
19624: GO 19626
19626: DISABLE
// begin solar_recharge_percent := 0 ;
19627: LD_ADDR_OWVAR 79
19631: PUSH
19632: LD_INT 0
19634: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19635: LD_INT 10500
19637: PPUSH
19638: CALL_OW 67
// solar_recharge_percent := 100 ;
19642: LD_ADDR_OWVAR 79
19646: PUSH
19647: LD_INT 100
19649: ST_TO_ADDR
// end ;
19650: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19651: LD_EXP 22
19655: PUSH
19656: LD_EXP 46
19660: AND
19661: IFFALSE 19900
19663: GO 19665
19665: DISABLE
19666: LD_INT 0
19668: PPUSH
19669: PPUSH
19670: PPUSH
// begin tmp := [ ] ;
19671: LD_ADDR_VAR 0 3
19675: PUSH
19676: EMPTY
19677: ST_TO_ADDR
// for i := 1 to 6 do
19678: LD_ADDR_VAR 0 1
19682: PUSH
19683: DOUBLE
19684: LD_INT 1
19686: DEC
19687: ST_TO_ADDR
19688: LD_INT 6
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19797
// begin uc_nation := nation_nature ;
19694: LD_ADDR_OWVAR 21
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// uc_side := 0 ;
19702: LD_ADDR_OWVAR 20
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19710: LD_ADDR_OWVAR 29
19714: PUSH
19715: LD_INT 12
19717: PUSH
19718: LD_INT 12
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// hc_agressivity := 20 ;
19725: LD_ADDR_OWVAR 35
19729: PUSH
19730: LD_INT 20
19732: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19733: LD_ADDR_OWVAR 28
19737: PUSH
19738: LD_INT 17
19740: ST_TO_ADDR
// hc_gallery :=  ;
19741: LD_ADDR_OWVAR 33
19745: PUSH
19746: LD_STRING 
19748: ST_TO_ADDR
// hc_name :=  ;
19749: LD_ADDR_OWVAR 26
19753: PUSH
19754: LD_STRING 
19756: ST_TO_ADDR
// un := CreateHuman ;
19757: LD_ADDR_VAR 0 2
19761: PUSH
19762: CALL_OW 44
19766: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19767: LD_VAR 0 2
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 51
// tmp := tmp ^ un ;
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_VAR 0 3
19788: PUSH
19789: LD_VAR 0 2
19793: ADD
19794: ST_TO_ADDR
// end ;
19795: GO 19691
19797: POP
19798: POP
// repeat wait ( 0 0$1 ) ;
19799: LD_INT 35
19801: PPUSH
19802: CALL_OW 67
// for un in tmp do
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: LD_VAR 0 3
19815: PUSH
19816: FOR_IN
19817: IFFALSE 19891
// begin if IsDead ( un ) then
19819: LD_VAR 0 2
19823: PPUSH
19824: CALL_OW 301
19828: IFFALSE 19848
// begin tmp := tmp diff un ;
19830: LD_ADDR_VAR 0 3
19834: PUSH
19835: LD_VAR 0 3
19839: PUSH
19840: LD_VAR 0 2
19844: DIFF
19845: ST_TO_ADDR
// continue ;
19846: GO 19816
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: LD_INT 3
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: PPUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 74
19884: PPUSH
19885: CALL_OW 115
// end ;
19889: GO 19816
19891: POP
19892: POP
// until not tmp ;
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19799
// end ;
19900: PPOPN 3
19902: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19903: LD_EXP 22
19907: PUSH
19908: LD_EXP 47
19912: AND
19913: IFFALSE 19967
19915: GO 19917
19917: DISABLE
// begin ToLua ( displayTroll(); ) ;
19918: LD_STRING displayTroll();
19920: PPUSH
19921: CALL_OW 559
// wait ( 3 3$00 ) ;
19925: LD_INT 6300
19927: PPUSH
19928: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19932: LD_STRING hideTroll();
19934: PPUSH
19935: CALL_OW 559
// wait ( 1 1$00 ) ;
19939: LD_INT 2100
19941: PPUSH
19942: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19946: LD_STRING displayTroll();
19948: PPUSH
19949: CALL_OW 559
// wait ( 1 1$00 ) ;
19953: LD_INT 2100
19955: PPUSH
19956: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19960: LD_STRING hideTroll();
19962: PPUSH
19963: CALL_OW 559
// end ;
19967: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19968: LD_EXP 22
19972: PUSH
19973: LD_EXP 48
19977: AND
19978: IFFALSE 20041
19980: GO 19982
19982: DISABLE
19983: LD_INT 0
19985: PPUSH
// begin p := 0 ;
19986: LD_ADDR_VAR 0 1
19990: PUSH
19991: LD_INT 0
19993: ST_TO_ADDR
// repeat game_speed := 1 ;
19994: LD_ADDR_OWVAR 65
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20002: LD_INT 35
20004: PPUSH
20005: CALL_OW 67
// p := p + 1 ;
20009: LD_ADDR_VAR 0 1
20013: PUSH
20014: LD_VAR 0 1
20018: PUSH
20019: LD_INT 1
20021: PLUS
20022: ST_TO_ADDR
// until p >= 60 ;
20023: LD_VAR 0 1
20027: PUSH
20028: LD_INT 60
20030: GREATEREQUAL
20031: IFFALSE 19994
// game_speed := 4 ;
20033: LD_ADDR_OWVAR 65
20037: PUSH
20038: LD_INT 4
20040: ST_TO_ADDR
// end ;
20041: PPOPN 1
20043: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20044: LD_EXP 22
20048: PUSH
20049: LD_EXP 49
20053: AND
20054: IFFALSE 20200
20056: GO 20058
20058: DISABLE
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_OWVAR 2
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 30
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: ST_TO_ADDR
// if not depot then
20117: LD_VAR 0 1
20121: NOT
20122: IFFALSE 20126
// exit ;
20124: GO 20200
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: LD_VAR 0 1
20135: PUSH
20136: LD_INT 1
20138: PPUSH
20139: LD_VAR 0 1
20143: PPUSH
20144: CALL_OW 12
20148: ARRAY
20149: PPUSH
20150: CALL_OW 274
20154: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: LD_INT 0
20165: PPUSH
20166: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_INT 2
20177: PPUSH
20178: LD_INT 0
20180: PPUSH
20181: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_INT 3
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: CALL_OW 277
// end ;
20200: PPOPN 2
20202: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20203: LD_EXP 22
20207: PUSH
20208: LD_EXP 50
20212: AND
20213: IFFALSE 20310
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 3
20250: PUSH
20251: LD_INT 23
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: PPUSH
20270: CALL_OW 69
20274: ST_TO_ADDR
// if not tmp then
20275: LD_VAR 0 1
20279: NOT
20280: IFFALSE 20284
// exit ;
20282: GO 20310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20284: LD_VAR 0 1
20288: PUSH
20289: LD_INT 1
20291: PPUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 12
20301: ARRAY
20302: PPUSH
20303: LD_INT 200
20305: PPUSH
20306: CALL_OW 234
// end ;
20310: PPOPN 1
20312: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20313: LD_EXP 22
20317: PUSH
20318: LD_EXP 51
20322: AND
20323: IFFALSE 20402
20325: GO 20327
20327: DISABLE
20328: LD_INT 0
20330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_OWVAR 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 69
20366: ST_TO_ADDR
// if not tmp then
20367: LD_VAR 0 1
20371: NOT
20372: IFFALSE 20376
// exit ;
20374: GO 20402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20376: LD_VAR 0 1
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 1
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: PPUSH
20395: LD_INT 60
20397: PPUSH
20398: CALL_OW 234
// end ;
20402: PPOPN 1
20404: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20405: LD_EXP 22
20409: PUSH
20410: LD_EXP 52
20414: AND
20415: IFFALSE 20514
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
20423: PPUSH
// begin enable ;
20424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20425: LD_ADDR_VAR 0 1
20429: PUSH
20430: LD_INT 22
20432: PUSH
20433: LD_OWVAR 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 61
20444: PUSH
20445: EMPTY
20446: LIST
20447: PUSH
20448: LD_INT 33
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 1
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20514
// for i in tmp do
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_VAR 0 1
20486: PUSH
20487: FOR_IN
20488: IFFALSE 20512
// if IsControledBy ( i ) then
20490: LD_VAR 0 2
20494: PPUSH
20495: CALL_OW 312
20499: IFFALSE 20510
// ComUnlink ( i ) ;
20501: LD_VAR 0 2
20505: PPUSH
20506: CALL_OW 136
20510: GO 20487
20512: POP
20513: POP
// end ;
20514: PPOPN 2
20516: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20517: LD_EXP 22
20521: PUSH
20522: LD_EXP 53
20526: AND
20527: IFFALSE 20667
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
// begin ToLua ( displayPowell(); ) ;
20536: LD_STRING displayPowell();
20538: PPUSH
20539: CALL_OW 559
// uc_side := 0 ;
20543: LD_ADDR_OWVAR 20
20547: PUSH
20548: LD_INT 0
20550: ST_TO_ADDR
// uc_nation := 2 ;
20551: LD_ADDR_OWVAR 21
20555: PUSH
20556: LD_INT 2
20558: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20559: LD_ADDR_OWVAR 37
20563: PUSH
20564: LD_INT 14
20566: ST_TO_ADDR
// vc_engine := engine_siberite ;
20567: LD_ADDR_OWVAR 39
20571: PUSH
20572: LD_INT 3
20574: ST_TO_ADDR
// vc_control := control_apeman ;
20575: LD_ADDR_OWVAR 38
20579: PUSH
20580: LD_INT 5
20582: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20583: LD_ADDR_OWVAR 40
20587: PUSH
20588: LD_INT 29
20590: ST_TO_ADDR
// un := CreateVehicle ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: CALL_OW 45
20600: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20613: LD_INT 35
20615: PPUSH
20616: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20620: LD_VAR 0 2
20624: PPUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 69
20641: PPUSH
20642: LD_VAR 0 2
20646: PPUSH
20647: CALL_OW 74
20651: PPUSH
20652: CALL_OW 115
// until IsDead ( un ) ;
20656: LD_VAR 0 2
20660: PPUSH
20661: CALL_OW 301
20665: IFFALSE 20613
// end ;
20667: PPOPN 2
20669: END
// every 0 0$1 trigger StreamModeActive and sStu do
20670: LD_EXP 22
20674: PUSH
20675: LD_EXP 61
20679: AND
20680: IFFALSE 20696
20682: GO 20684
20684: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20685: LD_STRING displayStucuk();
20687: PPUSH
20688: CALL_OW 559
// ResetFog ;
20692: CALL_OW 335
// end ;
20696: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20697: LD_EXP 22
20701: PUSH
20702: LD_EXP 54
20706: AND
20707: IFFALSE 20848
20709: GO 20711
20711: DISABLE
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20716: LD_ADDR_VAR 0 2
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_OWVAR 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 21
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PPUSH
20747: CALL_OW 69
20751: ST_TO_ADDR
// if not tmp then
20752: LD_VAR 0 2
20756: NOT
20757: IFFALSE 20761
// exit ;
20759: GO 20848
// un := tmp [ rand ( 1 , tmp ) ] ;
20761: LD_ADDR_VAR 0 1
20765: PUSH
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: PPUSH
20774: LD_VAR 0 2
20778: PPUSH
20779: CALL_OW 12
20783: ARRAY
20784: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20785: LD_VAR 0 1
20789: PPUSH
20790: LD_INT 0
20792: PPUSH
20793: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_OWVAR 3
20806: PUSH
20807: LD_VAR 0 1
20811: DIFF
20812: PPUSH
20813: LD_VAR 0 1
20817: PPUSH
20818: CALL_OW 74
20822: PPUSH
20823: CALL_OW 115
// wait ( 0 0$20 ) ;
20827: LD_INT 700
20829: PPUSH
20830: CALL_OW 67
// SetSide ( un , your_side ) ;
20834: LD_VAR 0 1
20838: PPUSH
20839: LD_OWVAR 2
20843: PPUSH
20844: CALL_OW 235
// end ;
20848: PPOPN 2
20850: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20851: LD_EXP 22
20855: PUSH
20856: LD_EXP 55
20860: AND
20861: IFFALSE 20967
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_OWVAR 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 30
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 30
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 69
20922: ST_TO_ADDR
// if not depot then
20923: LD_VAR 0 1
20927: NOT
20928: IFFALSE 20932
// exit ;
20930: GO 20967
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20932: LD_VAR 0 1
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: PPUSH
20941: CALL_OW 250
20945: PPUSH
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 1
20953: ARRAY
20954: PPUSH
20955: CALL_OW 251
20959: PPUSH
20960: LD_INT 70
20962: PPUSH
20963: CALL_OW 495
// end ;
20967: PPOPN 1
20969: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20970: LD_EXP 22
20974: PUSH
20975: LD_EXP 56
20979: AND
20980: IFFALSE 21191
20982: GO 20984
20984: DISABLE
20985: LD_INT 0
20987: PPUSH
20988: PPUSH
20989: PPUSH
20990: PPUSH
20991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20992: LD_ADDR_VAR 0 5
20996: PUSH
20997: LD_INT 22
20999: PUSH
21000: LD_OWVAR 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 21
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: ST_TO_ADDR
// if not tmp then
21028: LD_VAR 0 5
21032: NOT
21033: IFFALSE 21037
// exit ;
21035: GO 21191
// for i in tmp do
21037: LD_ADDR_VAR 0 1
21041: PUSH
21042: LD_VAR 0 5
21046: PUSH
21047: FOR_IN
21048: IFFALSE 21189
// begin d := rand ( 0 , 5 ) ;
21050: LD_ADDR_VAR 0 4
21054: PUSH
21055: LD_INT 0
21057: PPUSH
21058: LD_INT 5
21060: PPUSH
21061: CALL_OW 12
21065: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21066: LD_ADDR_VAR 0 2
21070: PUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 250
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: LD_INT 3
21088: PPUSH
21089: LD_INT 12
21091: PPUSH
21092: CALL_OW 12
21096: PPUSH
21097: CALL_OW 272
21101: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21102: LD_ADDR_VAR 0 3
21106: PUSH
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL_OW 251
21116: PPUSH
21117: LD_VAR 0 4
21121: PPUSH
21122: LD_INT 3
21124: PPUSH
21125: LD_INT 12
21127: PPUSH
21128: CALL_OW 12
21132: PPUSH
21133: CALL_OW 273
21137: ST_TO_ADDR
// if ValidHex ( x , y ) then
21138: LD_VAR 0 2
21142: PPUSH
21143: LD_VAR 0 3
21147: PPUSH
21148: CALL_OW 488
21152: IFFALSE 21187
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_VAR 0 2
21163: PPUSH
21164: LD_VAR 0 3
21168: PPUSH
21169: LD_INT 3
21171: PPUSH
21172: LD_INT 6
21174: PPUSH
21175: CALL_OW 12
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: CALL_OW 483
// end ;
21187: GO 21047
21189: POP
21190: POP
// end ;
21191: PPOPN 5
21193: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21194: LD_EXP 22
21198: PUSH
21199: LD_EXP 57
21203: AND
21204: IFFALSE 21298
21206: GO 21208
21208: DISABLE
21209: LD_INT 0
21211: PPUSH
21212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_OWVAR 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 32
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 69
21259: ST_TO_ADDR
// if not tmp then
21260: LD_VAR 0 2
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21298
// for i in tmp do
21269: LD_ADDR_VAR 0 1
21273: PUSH
21274: LD_VAR 0 2
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21296
// SetFuel ( i , 0 ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_INT 0
21289: PPUSH
21290: CALL_OW 240
21294: GO 21279
21296: POP
21297: POP
// end ;
21298: PPOPN 2
21300: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21301: LD_EXP 22
21305: PUSH
21306: LD_EXP 58
21310: AND
21311: IFFALSE 21377
21313: GO 21315
21315: DISABLE
21316: LD_INT 0
21318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 22
21326: PUSH
21327: LD_OWVAR 2
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 30
21338: PUSH
21339: LD_INT 29
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PPUSH
21350: CALL_OW 69
21354: ST_TO_ADDR
// if not tmp then
21355: LD_VAR 0 1
21359: NOT
21360: IFFALSE 21364
// exit ;
21362: GO 21377
// DestroyUnit ( tmp [ 1 ] ) ;
21364: LD_VAR 0 1
21368: PUSH
21369: LD_INT 1
21371: ARRAY
21372: PPUSH
21373: CALL_OW 65
// end ;
21377: PPOPN 1
21379: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21380: LD_EXP 22
21384: PUSH
21385: LD_EXP 60
21389: AND
21390: IFFALSE 21519
21392: GO 21394
21394: DISABLE
21395: LD_INT 0
21397: PPUSH
// begin uc_side := 0 ;
21398: LD_ADDR_OWVAR 20
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// uc_nation := nation_arabian ;
21406: LD_ADDR_OWVAR 21
21410: PUSH
21411: LD_INT 2
21413: ST_TO_ADDR
// hc_gallery :=  ;
21414: LD_ADDR_OWVAR 33
21418: PUSH
21419: LD_STRING 
21421: ST_TO_ADDR
// hc_name :=  ;
21422: LD_ADDR_OWVAR 26
21426: PUSH
21427: LD_STRING 
21429: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21430: LD_INT 1
21432: PPUSH
21433: LD_INT 11
21435: PPUSH
21436: LD_INT 10
21438: PPUSH
21439: CALL_OW 380
// un := CreateHuman ;
21443: LD_ADDR_VAR 0 1
21447: PUSH
21448: CALL_OW 44
21452: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21453: LD_VAR 0 1
21457: PPUSH
21458: LD_INT 1
21460: PPUSH
21461: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21465: LD_INT 35
21467: PPUSH
21468: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21472: LD_VAR 0 1
21476: PPUSH
21477: LD_INT 22
21479: PUSH
21480: LD_OWVAR 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 69
21493: PPUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 74
21503: PPUSH
21504: CALL_OW 115
// until IsDead ( un ) ;
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 301
21517: IFFALSE 21465
// end ;
21519: PPOPN 1
21521: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21522: LD_EXP 22
21526: PUSH
21527: LD_EXP 62
21531: AND
21532: IFFALSE 21544
21534: GO 21536
21536: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21537: LD_STRING earthquake(getX(game), 0, 32)
21539: PPUSH
21540: CALL_OW 559
21544: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21545: LD_EXP 22
21549: PUSH
21550: LD_EXP 63
21554: AND
21555: IFFALSE 21646
21557: GO 21559
21559: DISABLE
21560: LD_INT 0
21562: PPUSH
// begin enable ;
21563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21564: LD_ADDR_VAR 0 1
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_OWVAR 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 33
21593: PUSH
21594: LD_INT 3
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ST_TO_ADDR
// if not tmp then
21611: LD_VAR 0 1
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 21646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21620: LD_VAR 0 1
21624: PUSH
21625: LD_INT 1
21627: PPUSH
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 12
21637: ARRAY
21638: PPUSH
21639: LD_INT 1
21641: PPUSH
21642: CALL_OW 234
// end ;
21646: PPOPN 1
21648: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21649: LD_EXP 22
21653: PUSH
21654: LD_EXP 64
21658: AND
21659: IFFALSE 21800
21661: GO 21663
21663: DISABLE
21664: LD_INT 0
21666: PPUSH
21667: PPUSH
21668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 25
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not tmp then
21705: LD_VAR 0 3
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21800
// un := tmp [ rand ( 1 , tmp ) ] ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 1
21726: PPUSH
21727: LD_VAR 0 3
21731: PPUSH
21732: CALL_OW 12
21736: ARRAY
21737: ST_TO_ADDR
// if Crawls ( un ) then
21738: LD_VAR 0 2
21742: PPUSH
21743: CALL_OW 318
21747: IFFALSE 21758
// ComWalk ( un ) ;
21749: LD_VAR 0 2
21753: PPUSH
21754: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_INT 9
21765: PPUSH
21766: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21770: LD_INT 28
21772: PPUSH
21773: LD_OWVAR 2
21777: PPUSH
21778: LD_INT 2
21780: PPUSH
21781: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21785: LD_INT 29
21787: PPUSH
21788: LD_OWVAR 2
21792: PPUSH
21793: LD_INT 2
21795: PPUSH
21796: CALL_OW 322
// end ;
21800: PPOPN 3
21802: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21803: LD_EXP 22
21807: PUSH
21808: LD_EXP 65
21812: AND
21813: IFFALSE 21924
21815: GO 21817
21817: DISABLE
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_OWVAR 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 25
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 3
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21924
// un := tmp [ rand ( 1 , tmp ) ] ;
21868: LD_ADDR_VAR 0 2
21872: PUSH
21873: LD_VAR 0 3
21877: PUSH
21878: LD_INT 1
21880: PPUSH
21881: LD_VAR 0 3
21885: PPUSH
21886: CALL_OW 12
21890: ARRAY
21891: ST_TO_ADDR
// if Crawls ( un ) then
21892: LD_VAR 0 2
21896: PPUSH
21897: CALL_OW 318
21901: IFFALSE 21912
// ComWalk ( un ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_INT 8
21919: PPUSH
21920: CALL_OW 336
// end ;
21924: PPOPN 3
21926: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21927: LD_EXP 22
21931: PUSH
21932: LD_EXP 66
21936: AND
21937: IFFALSE 22081
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21946: LD_ADDR_VAR 0 2
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_OWVAR 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 21
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: LD_INT 34
21978: PUSH
21979: LD_INT 12
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 34
21988: PUSH
21989: LD_INT 51
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 34
21998: PUSH
21999: LD_INT 32
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 69
22021: ST_TO_ADDR
// if not tmp then
22022: LD_VAR 0 2
22026: NOT
22027: IFFALSE 22031
// exit ;
22029: GO 22081
// for i in tmp do
22031: LD_ADDR_VAR 0 1
22035: PUSH
22036: LD_VAR 0 2
22040: PUSH
22041: FOR_IN
22042: IFFALSE 22079
// if GetCargo ( i , mat_artifact ) = 0 then
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_INT 4
22051: PPUSH
22052: CALL_OW 289
22056: PUSH
22057: LD_INT 0
22059: EQUAL
22060: IFFALSE 22077
// SetCargo ( i , mat_siberit , 100 ) ;
22062: LD_VAR 0 1
22066: PPUSH
22067: LD_INT 3
22069: PPUSH
22070: LD_INT 100
22072: PPUSH
22073: CALL_OW 290
22077: GO 22041
22079: POP
22080: POP
// end ;
22081: PPOPN 2
22083: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22084: LD_EXP 22
22088: PUSH
22089: LD_EXP 67
22093: AND
22094: IFFALSE 22277
22096: GO 22098
22098: DISABLE
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22103: LD_ADDR_VAR 0 2
22107: PUSH
22108: LD_INT 22
22110: PUSH
22111: LD_OWVAR 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PPUSH
22120: CALL_OW 69
22124: ST_TO_ADDR
// if not tmp then
22125: LD_VAR 0 2
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22277
// for i := 1 to 2 do
22134: LD_ADDR_VAR 0 1
22138: PUSH
22139: DOUBLE
22140: LD_INT 1
22142: DEC
22143: ST_TO_ADDR
22144: LD_INT 2
22146: PUSH
22147: FOR_TO
22148: IFFALSE 22275
// begin uc_side := your_side ;
22150: LD_ADDR_OWVAR 20
22154: PUSH
22155: LD_OWVAR 2
22159: ST_TO_ADDR
// uc_nation := nation_american ;
22160: LD_ADDR_OWVAR 21
22164: PUSH
22165: LD_INT 1
22167: ST_TO_ADDR
// vc_chassis := us_morphling ;
22168: LD_ADDR_OWVAR 37
22172: PUSH
22173: LD_INT 5
22175: ST_TO_ADDR
// vc_engine := engine_siberite ;
22176: LD_ADDR_OWVAR 39
22180: PUSH
22181: LD_INT 3
22183: ST_TO_ADDR
// vc_control := control_computer ;
22184: LD_ADDR_OWVAR 38
22188: PUSH
22189: LD_INT 3
22191: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22192: LD_ADDR_OWVAR 40
22196: PUSH
22197: LD_INT 10
22199: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 310
22213: NOT
22214: IFFALSE 22261
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22216: CALL_OW 45
22220: PPUSH
22221: LD_VAR 0 2
22225: PUSH
22226: LD_INT 1
22228: ARRAY
22229: PPUSH
22230: CALL_OW 250
22234: PPUSH
22235: LD_VAR 0 2
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: CALL_OW 251
22248: PPUSH
22249: LD_INT 12
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 50
22259: GO 22273
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22261: CALL_OW 45
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 51
// end ;
22273: GO 22147
22275: POP
22276: POP
// end ;
22277: PPOPN 2
22279: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22280: LD_EXP 22
22284: PUSH
22285: LD_EXP 68
22289: AND
22290: IFFALSE 22512
22292: GO 22294
22294: DISABLE
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
22302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22303: LD_ADDR_VAR 0 6
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_OWVAR 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 21
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 6
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22512
// s1 := rand ( 1 , 4 ) ;
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 1
22373: PPUSH
22374: LD_INT 4
22376: PPUSH
22377: CALL_OW 12
22381: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22382: LD_ADDR_VAR 0 4
22386: PUSH
22387: LD_VAR 0 6
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: LD_VAR 0 2
22400: PPUSH
22401: CALL_OW 259
22405: ST_TO_ADDR
// if s1 = 1 then
22406: LD_VAR 0 2
22410: PUSH
22411: LD_INT 1
22413: EQUAL
22414: IFFALSE 22434
// s2 := rand ( 2 , 4 ) else
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 2
22423: PPUSH
22424: LD_INT 4
22426: PPUSH
22427: CALL_OW 12
22431: ST_TO_ADDR
22432: GO 22442
// s2 := 1 ;
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: LD_INT 1
22441: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22442: LD_ADDR_VAR 0 5
22446: PUSH
22447: LD_VAR 0 6
22451: PUSH
22452: LD_INT 1
22454: ARRAY
22455: PPUSH
22456: LD_VAR 0 3
22460: PPUSH
22461: CALL_OW 259
22465: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22466: LD_VAR 0 6
22470: PUSH
22471: LD_INT 1
22473: ARRAY
22474: PPUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: LD_VAR 0 5
22484: PPUSH
22485: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22489: LD_VAR 0 6
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_VAR 0 4
22507: PPUSH
22508: CALL_OW 237
// end ;
22512: PPOPN 6
22514: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22515: LD_EXP 22
22519: PUSH
22520: LD_EXP 69
22524: AND
22525: IFFALSE 22604
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_INT 22
22540: PUSH
22541: LD_OWVAR 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: ST_TO_ADDR
// if not tmp then
22569: LD_VAR 0 1
22573: NOT
22574: IFFALSE 22578
// exit ;
22576: GO 22604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22578: LD_VAR 0 1
22582: PUSH
22583: LD_INT 1
22585: PPUSH
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 12
22595: ARRAY
22596: PPUSH
22597: LD_INT 1
22599: PPUSH
22600: CALL_OW 234
// end ;
22604: PPOPN 1
22606: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22607: LD_EXP 22
22611: PUSH
22612: LD_EXP 70
22616: AND
22617: IFFALSE 22729
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_OWVAR 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 30
22648: PUSH
22649: LD_INT 27
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 30
22658: PUSH
22659: LD_INT 26
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 30
22668: PUSH
22669: LD_INT 28
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 69
22690: ST_TO_ADDR
// if not tmp then
22691: LD_VAR 0 2
22695: NOT
22696: IFFALSE 22700
// exit ;
22698: GO 22729
// for i in tmp do
22700: LD_ADDR_VAR 0 1
22704: PUSH
22705: LD_VAR 0 2
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22727
// SetLives ( i , 1 ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 1
22720: PPUSH
22721: CALL_OW 234
22725: GO 22710
22727: POP
22728: POP
// end ;
22729: PPOPN 2
22731: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22732: LD_EXP 22
22736: PUSH
22737: LD_EXP 71
22741: AND
22742: IFFALSE 23029
22744: GO 22746
22746: DISABLE
22747: LD_INT 0
22749: PPUSH
22750: PPUSH
22751: PPUSH
// begin i := rand ( 1 , 7 ) ;
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 1
22759: PPUSH
22760: LD_INT 7
22762: PPUSH
22763: CALL_OW 12
22767: ST_TO_ADDR
// case i of 1 :
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 1
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22791
22781: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22782: LD_STRING earthquake(getX(game), 0, 32)
22784: PPUSH
22785: CALL_OW 559
22789: GO 23029
22791: LD_INT 2
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 22813
22799: POP
// begin ToLua ( displayStucuk(); ) ;
22800: LD_STRING displayStucuk();
22802: PPUSH
22803: CALL_OW 559
// ResetFog ;
22807: CALL_OW 335
// end ; 3 :
22811: GO 23029
22813: LD_INT 3
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22925
22821: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22822: LD_ADDR_VAR 0 2
22826: PUSH
22827: LD_INT 22
22829: PUSH
22830: LD_OWVAR 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 25
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if not tmp then
22858: LD_VAR 0 2
22862: NOT
22863: IFFALSE 22867
// exit ;
22865: GO 23029
// un := tmp [ rand ( 1 , tmp ) ] ;
22867: LD_ADDR_VAR 0 3
22871: PUSH
22872: LD_VAR 0 2
22876: PUSH
22877: LD_INT 1
22879: PPUSH
22880: LD_VAR 0 2
22884: PPUSH
22885: CALL_OW 12
22889: ARRAY
22890: ST_TO_ADDR
// if Crawls ( un ) then
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 318
22900: IFFALSE 22911
// ComWalk ( un ) ;
22902: LD_VAR 0 3
22906: PPUSH
22907: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22911: LD_VAR 0 3
22915: PPUSH
22916: LD_INT 8
22918: PPUSH
22919: CALL_OW 336
// end ; 4 :
22923: GO 23029
22925: LD_INT 4
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 23007
22933: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_OWVAR 2
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 30
22953: PUSH
22954: LD_INT 29
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: ST_TO_ADDR
// if not tmp then
22970: LD_VAR 0 2
22974: NOT
22975: IFFALSE 22979
// exit ;
22977: GO 23029
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22979: LD_VAR 0 2
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22992: LD_VAR 0 2
22996: PUSH
22997: LD_INT 1
22999: ARRAY
23000: PPUSH
23001: CALL_OW 65
// end ; 5 .. 7 :
23005: GO 23029
23007: LD_INT 5
23009: DOUBLE
23010: GREATEREQUAL
23011: IFFALSE 23019
23013: LD_INT 7
23015: DOUBLE
23016: LESSEQUAL
23017: IFTRUE 23021
23019: GO 23028
23021: POP
// StreamSibBomb ; end ;
23022: CALL 19266 0 0
23026: GO 23029
23028: POP
// end ;
23029: PPOPN 3
23031: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23032: LD_EXP 22
23036: PUSH
23037: LD_EXP 72
23041: AND
23042: IFFALSE 23198
23044: GO 23046
23046: DISABLE
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_INT 81
23059: PUSH
23060: LD_OWVAR 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 21
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23198
// p := 0 ;
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23123: LD_INT 35
23125: PPUSH
23126: CALL_OW 67
// p := p + 1 ;
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 1
23142: PLUS
23143: ST_TO_ADDR
// for i in tmp do
23144: LD_ADDR_VAR 0 1
23148: PUSH
23149: LD_VAR 0 2
23153: PUSH
23154: FOR_IN
23155: IFFALSE 23186
// if GetLives ( i ) < 1000 then
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 256
23166: PUSH
23167: LD_INT 1000
23169: LESS
23170: IFFALSE 23184
// SetLives ( i , 1000 ) ;
23172: LD_VAR 0 1
23176: PPUSH
23177: LD_INT 1000
23179: PPUSH
23180: CALL_OW 234
23184: GO 23154
23186: POP
23187: POP
// until p > 20 ;
23188: LD_VAR 0 3
23192: PUSH
23193: LD_INT 20
23195: GREATER
23196: IFFALSE 23123
// end ;
23198: PPOPN 3
23200: END
// every 0 0$1 trigger StreamModeActive and sTime do
23201: LD_EXP 22
23205: PUSH
23206: LD_EXP 73
23210: AND
23211: IFFALSE 23246
23213: GO 23215
23215: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23216: LD_INT 28
23218: PPUSH
23219: LD_OWVAR 2
23223: PPUSH
23224: LD_INT 2
23226: PPUSH
23227: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23231: LD_INT 30
23233: PPUSH
23234: LD_OWVAR 2
23238: PPUSH
23239: LD_INT 2
23241: PPUSH
23242: CALL_OW 322
// end ;
23246: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23247: LD_EXP 22
23251: PUSH
23252: LD_EXP 74
23256: AND
23257: IFFALSE 23378
23259: GO 23261
23261: DISABLE
23262: LD_INT 0
23264: PPUSH
23265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23266: LD_ADDR_VAR 0 2
23270: PUSH
23271: LD_INT 22
23273: PUSH
23274: LD_OWVAR 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 21
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 23
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: LIST
23314: PPUSH
23315: CALL_OW 69
23319: ST_TO_ADDR
// if not tmp then
23320: LD_VAR 0 2
23324: NOT
23325: IFFALSE 23329
// exit ;
23327: GO 23378
// for i in tmp do
23329: LD_ADDR_VAR 0 1
23333: PUSH
23334: LD_VAR 0 2
23338: PUSH
23339: FOR_IN
23340: IFFALSE 23376
// begin if Crawls ( i ) then
23342: LD_VAR 0 1
23346: PPUSH
23347: CALL_OW 318
23351: IFFALSE 23362
// ComWalk ( i ) ;
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 138
// SetClass ( i , 2 ) ;
23362: LD_VAR 0 1
23366: PPUSH
23367: LD_INT 2
23369: PPUSH
23370: CALL_OW 336
// end ;
23374: GO 23339
23376: POP
23377: POP
// end ;
23378: PPOPN 2
23380: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23381: LD_EXP 22
23385: PUSH
23386: LD_EXP 75
23390: AND
23391: IFFALSE 23679
23393: GO 23395
23395: DISABLE
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23401: LD_OWVAR 2
23405: PPUSH
23406: LD_INT 9
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23419: LD_INT 9
23421: PPUSH
23422: LD_OWVAR 2
23426: PPUSH
23427: CALL_OW 343
// uc_side := 9 ;
23431: LD_ADDR_OWVAR 20
23435: PUSH
23436: LD_INT 9
23438: ST_TO_ADDR
// uc_nation := 2 ;
23439: LD_ADDR_OWVAR 21
23443: PUSH
23444: LD_INT 2
23446: ST_TO_ADDR
// hc_name := Dark Warrior ;
23447: LD_ADDR_OWVAR 26
23451: PUSH
23452: LD_STRING Dark Warrior
23454: ST_TO_ADDR
// hc_gallery :=  ;
23455: LD_ADDR_OWVAR 33
23459: PUSH
23460: LD_STRING 
23462: ST_TO_ADDR
// hc_noskilllimit := true ;
23463: LD_ADDR_OWVAR 76
23467: PUSH
23468: LD_INT 1
23470: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23471: LD_ADDR_OWVAR 31
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 30
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
// un := CreateHuman ;
23494: LD_ADDR_VAR 0 3
23498: PUSH
23499: CALL_OW 44
23503: ST_TO_ADDR
// hc_noskilllimit := false ;
23504: LD_ADDR_OWVAR 76
23508: PUSH
23509: LD_INT 0
23511: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 51
// ToLua ( playRanger() ) ;
23524: LD_STRING playRanger()
23526: PPUSH
23527: CALL_OW 559
// p := 0 ;
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23539: LD_INT 35
23541: PPUSH
23542: CALL_OW 67
// p := p + 1 ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_VAR 0 2
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23560: LD_VAR 0 3
23564: PPUSH
23565: CALL_OW 256
23569: PUSH
23570: LD_INT 1000
23572: LESS
23573: IFFALSE 23587
// SetLives ( un , 1000 ) ;
23575: LD_VAR 0 3
23579: PPUSH
23580: LD_INT 1000
23582: PPUSH
23583: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23587: LD_VAR 0 3
23591: PPUSH
23592: LD_INT 81
23594: PUSH
23595: LD_OWVAR 2
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 91
23606: PUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: CALL_OW 74
23638: PPUSH
23639: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23643: LD_VAR 0 2
23647: PUSH
23648: LD_INT 80
23650: GREATER
23651: PUSH
23652: LD_VAR 0 3
23656: PPUSH
23657: CALL_OW 301
23661: OR
23662: IFFALSE 23539
// if un then
23664: LD_VAR 0 3
23668: IFFALSE 23679
// RemoveUnit ( un ) ;
23670: LD_VAR 0 3
23674: PPUSH
23675: CALL_OW 64
// end ;
23679: PPOPN 3
23681: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23682: LD_EXP 76
23686: IFFALSE 23802
23688: GO 23690
23690: DISABLE
23691: LD_INT 0
23693: PPUSH
23694: PPUSH
23695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_INT 81
23703: PUSH
23704: LD_OWVAR 2
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 21
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PPUSH
23727: CALL_OW 69
23731: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23732: LD_STRING playComputer()
23734: PPUSH
23735: CALL_OW 559
// if not tmp then
23739: LD_VAR 0 2
23743: NOT
23744: IFFALSE 23748
// exit ;
23746: GO 23802
// for i in tmp do
23748: LD_ADDR_VAR 0 1
23752: PUSH
23753: LD_VAR 0 2
23757: PUSH
23758: FOR_IN
23759: IFFALSE 23800
// for j := 1 to 4 do
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: DOUBLE
23767: LD_INT 1
23769: DEC
23770: ST_TO_ADDR
23771: LD_INT 4
23773: PUSH
23774: FOR_TO
23775: IFFALSE 23796
// SetSkill ( i , j , 10 ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 10
23789: PPUSH
23790: CALL_OW 237
23794: GO 23774
23796: POP
23797: POP
23798: GO 23758
23800: POP
23801: POP
// end ;
23802: PPOPN 3
23804: END
// every 0 0$1 trigger s30 do var i , tmp ;
23805: LD_EXP 77
23809: IFFALSE 23878
23811: GO 23813
23813: DISABLE
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_OWVAR 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PPUSH
23835: CALL_OW 69
23839: ST_TO_ADDR
// if not tmp then
23840: LD_VAR 0 2
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 23878
// for i in tmp do
23849: LD_ADDR_VAR 0 1
23853: PUSH
23854: LD_VAR 0 2
23858: PUSH
23859: FOR_IN
23860: IFFALSE 23876
// SetLives ( i , 300 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 300
23869: PPUSH
23870: CALL_OW 234
23874: GO 23859
23876: POP
23877: POP
// end ;
23878: PPOPN 2
23880: END
// every 0 0$1 trigger s60 do var i , tmp ;
23881: LD_EXP 78
23885: IFFALSE 23954
23887: GO 23889
23889: DISABLE
23890: LD_INT 0
23892: PPUSH
23893: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23894: LD_ADDR_VAR 0 2
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: LD_OWVAR 2
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 69
23915: ST_TO_ADDR
// if not tmp then
23916: LD_VAR 0 2
23920: NOT
23921: IFFALSE 23925
// exit ;
23923: GO 23954
// for i in tmp do
23925: LD_ADDR_VAR 0 1
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: FOR_IN
23936: IFFALSE 23952
// SetLives ( i , 600 ) ;
23938: LD_VAR 0 1
23942: PPUSH
23943: LD_INT 600
23945: PPUSH
23946: CALL_OW 234
23950: GO 23935
23952: POP
23953: POP
// end ;
23954: PPOPN 2
23956: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23957: LD_INT 0
23959: PPUSH
// case cmd of 301 :
23960: LD_VAR 0 1
23964: PUSH
23965: LD_INT 301
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24005
23973: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23974: LD_VAR 0 6
23978: PPUSH
23979: LD_VAR 0 7
23983: PPUSH
23984: LD_VAR 0 8
23988: PPUSH
23989: LD_VAR 0 4
23993: PPUSH
23994: LD_VAR 0 5
23998: PPUSH
23999: CALL 25214 0 5
24003: GO 24126
24005: LD_INT 302
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24050
24013: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24014: LD_VAR 0 6
24018: PPUSH
24019: LD_VAR 0 7
24023: PPUSH
24024: LD_VAR 0 8
24028: PPUSH
24029: LD_VAR 0 9
24033: PPUSH
24034: LD_VAR 0 4
24038: PPUSH
24039: LD_VAR 0 5
24043: PPUSH
24044: CALL 25305 0 6
24048: GO 24126
24050: LD_INT 303
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24095
24058: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24059: LD_VAR 0 6
24063: PPUSH
24064: LD_VAR 0 7
24068: PPUSH
24069: LD_VAR 0 8
24073: PPUSH
24074: LD_VAR 0 9
24078: PPUSH
24079: LD_VAR 0 4
24083: PPUSH
24084: LD_VAR 0 5
24088: PPUSH
24089: CALL 24131 0 6
24093: GO 24126
24095: LD_INT 304
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24125
24103: POP
// hHackTeleport ( unit , x , y ) ; end ;
24104: LD_VAR 0 2
24108: PPUSH
24109: LD_VAR 0 4
24113: PPUSH
24114: LD_VAR 0 5
24118: PPUSH
24119: CALL 25898 0 3
24123: GO 24126
24125: POP
// end ;
24126: LD_VAR 0 12
24130: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: LESS
24143: PUSH
24144: LD_VAR 0 1
24148: PUSH
24149: LD_INT 3
24151: GREATER
24152: OR
24153: PUSH
24154: LD_VAR 0 5
24158: PPUSH
24159: LD_VAR 0 6
24163: PPUSH
24164: CALL_OW 428
24168: OR
24169: IFFALSE 24173
// exit ;
24171: GO 24901
// uc_side := your_side ;
24173: LD_ADDR_OWVAR 20
24177: PUSH
24178: LD_OWVAR 2
24182: ST_TO_ADDR
// uc_nation := nation ;
24183: LD_ADDR_OWVAR 21
24187: PUSH
24188: LD_VAR 0 1
24192: ST_TO_ADDR
// bc_level = 1 ;
24193: LD_ADDR_OWVAR 43
24197: PUSH
24198: LD_INT 1
24200: ST_TO_ADDR
// case btype of 1 :
24201: LD_VAR 0 2
24205: PUSH
24206: LD_INT 1
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24225
24214: POP
// bc_type := b_depot ; 2 :
24215: LD_ADDR_OWVAR 42
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
24223: GO 24845
24225: LD_INT 2
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// bc_type := b_warehouse ; 3 :
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 1
24241: ST_TO_ADDR
24242: GO 24845
24244: LD_INT 3
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// bc_type := b_lab ; 4 .. 9 :
24253: LD_ADDR_OWVAR 42
24257: PUSH
24258: LD_INT 6
24260: ST_TO_ADDR
24261: GO 24845
24263: LD_INT 4
24265: DOUBLE
24266: GREATEREQUAL
24267: IFFALSE 24275
24269: LD_INT 9
24271: DOUBLE
24272: LESSEQUAL
24273: IFTRUE 24277
24275: GO 24337
24277: POP
// begin bc_type := b_lab_half ;
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 7
24285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24286: LD_ADDR_OWVAR 44
24290: PUSH
24291: LD_INT 10
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 14
24305: PUSH
24306: LD_INT 13
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: PUSH
24317: LD_VAR 0 2
24321: PUSH
24322: LD_INT 3
24324: MINUS
24325: ARRAY
24326: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24327: LD_ADDR_OWVAR 45
24331: PUSH
24332: LD_INT 9
24334: ST_TO_ADDR
// end ; 10 .. 13 :
24335: GO 24845
24337: LD_INT 10
24339: DOUBLE
24340: GREATEREQUAL
24341: IFFALSE 24349
24343: LD_INT 13
24345: DOUBLE
24346: LESSEQUAL
24347: IFTRUE 24351
24349: GO 24428
24351: POP
// begin bc_type := b_lab_full ;
24352: LD_ADDR_OWVAR 42
24356: PUSH
24357: LD_INT 8
24359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24360: LD_ADDR_OWVAR 44
24364: PUSH
24365: LD_INT 10
24367: PUSH
24368: LD_INT 12
24370: PUSH
24371: LD_INT 14
24373: PUSH
24374: LD_INT 13
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: PUSH
24383: LD_VAR 0 2
24387: PUSH
24388: LD_INT 9
24390: MINUS
24391: ARRAY
24392: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24393: LD_ADDR_OWVAR 45
24397: PUSH
24398: LD_INT 11
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 12
24406: PUSH
24407: LD_INT 15
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: PUSH
24416: LD_VAR 0 2
24420: PUSH
24421: LD_INT 9
24423: MINUS
24424: ARRAY
24425: ST_TO_ADDR
// end ; 14 :
24426: GO 24845
24428: LD_INT 14
24430: DOUBLE
24431: EQUAL
24432: IFTRUE 24436
24434: GO 24447
24436: POP
// bc_type := b_workshop ; 15 :
24437: LD_ADDR_OWVAR 42
24441: PUSH
24442: LD_INT 2
24444: ST_TO_ADDR
24445: GO 24845
24447: LD_INT 15
24449: DOUBLE
24450: EQUAL
24451: IFTRUE 24455
24453: GO 24466
24455: POP
// bc_type := b_factory ; 16 :
24456: LD_ADDR_OWVAR 42
24460: PUSH
24461: LD_INT 3
24463: ST_TO_ADDR
24464: GO 24845
24466: LD_INT 16
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24485
24474: POP
// bc_type := b_ext_gun ; 17 :
24475: LD_ADDR_OWVAR 42
24479: PUSH
24480: LD_INT 17
24482: ST_TO_ADDR
24483: GO 24845
24485: LD_INT 17
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24521
24493: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24494: LD_ADDR_OWVAR 42
24498: PUSH
24499: LD_INT 19
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 19
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: LD_VAR 0 1
24517: ARRAY
24518: ST_TO_ADDR
24519: GO 24845
24521: LD_INT 18
24523: DOUBLE
24524: EQUAL
24525: IFTRUE 24529
24527: GO 24540
24529: POP
// bc_type := b_ext_radar ; 19 :
24530: LD_ADDR_OWVAR 42
24534: PUSH
24535: LD_INT 20
24537: ST_TO_ADDR
24538: GO 24845
24540: LD_INT 19
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24559
24548: POP
// bc_type := b_ext_radio ; 20 :
24549: LD_ADDR_OWVAR 42
24553: PUSH
24554: LD_INT 22
24556: ST_TO_ADDR
24557: GO 24845
24559: LD_INT 20
24561: DOUBLE
24562: EQUAL
24563: IFTRUE 24567
24565: GO 24578
24567: POP
// bc_type := b_ext_siberium ; 21 :
24568: LD_ADDR_OWVAR 42
24572: PUSH
24573: LD_INT 21
24575: ST_TO_ADDR
24576: GO 24845
24578: LD_INT 21
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24597
24586: POP
// bc_type := b_ext_computer ; 22 :
24587: LD_ADDR_OWVAR 42
24591: PUSH
24592: LD_INT 24
24594: ST_TO_ADDR
24595: GO 24845
24597: LD_INT 22
24599: DOUBLE
24600: EQUAL
24601: IFTRUE 24605
24603: GO 24616
24605: POP
// bc_type := b_ext_track ; 23 :
24606: LD_ADDR_OWVAR 42
24610: PUSH
24611: LD_INT 16
24613: ST_TO_ADDR
24614: GO 24845
24616: LD_INT 23
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24635
24624: POP
// bc_type := b_ext_laser ; 24 :
24625: LD_ADDR_OWVAR 42
24629: PUSH
24630: LD_INT 25
24632: ST_TO_ADDR
24633: GO 24845
24635: LD_INT 24
24637: DOUBLE
24638: EQUAL
24639: IFTRUE 24643
24641: GO 24654
24643: POP
// bc_type := b_control_tower ; 25 :
24644: LD_ADDR_OWVAR 42
24648: PUSH
24649: LD_INT 36
24651: ST_TO_ADDR
24652: GO 24845
24654: LD_INT 25
24656: DOUBLE
24657: EQUAL
24658: IFTRUE 24662
24660: GO 24673
24662: POP
// bc_type := b_breastwork ; 26 :
24663: LD_ADDR_OWVAR 42
24667: PUSH
24668: LD_INT 31
24670: ST_TO_ADDR
24671: GO 24845
24673: LD_INT 26
24675: DOUBLE
24676: EQUAL
24677: IFTRUE 24681
24679: GO 24692
24681: POP
// bc_type := b_bunker ; 27 :
24682: LD_ADDR_OWVAR 42
24686: PUSH
24687: LD_INT 32
24689: ST_TO_ADDR
24690: GO 24845
24692: LD_INT 27
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24711
24700: POP
// bc_type := b_turret ; 28 :
24701: LD_ADDR_OWVAR 42
24705: PUSH
24706: LD_INT 33
24708: ST_TO_ADDR
24709: GO 24845
24711: LD_INT 28
24713: DOUBLE
24714: EQUAL
24715: IFTRUE 24719
24717: GO 24730
24719: POP
// bc_type := b_armoury ; 29 :
24720: LD_ADDR_OWVAR 42
24724: PUSH
24725: LD_INT 4
24727: ST_TO_ADDR
24728: GO 24845
24730: LD_INT 29
24732: DOUBLE
24733: EQUAL
24734: IFTRUE 24738
24736: GO 24749
24738: POP
// bc_type := b_barracks ; 30 :
24739: LD_ADDR_OWVAR 42
24743: PUSH
24744: LD_INT 5
24746: ST_TO_ADDR
24747: GO 24845
24749: LD_INT 30
24751: DOUBLE
24752: EQUAL
24753: IFTRUE 24757
24755: GO 24768
24757: POP
// bc_type := b_solar_power ; 31 :
24758: LD_ADDR_OWVAR 42
24762: PUSH
24763: LD_INT 27
24765: ST_TO_ADDR
24766: GO 24845
24768: LD_INT 31
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24787
24776: POP
// bc_type := b_oil_power ; 32 :
24777: LD_ADDR_OWVAR 42
24781: PUSH
24782: LD_INT 26
24784: ST_TO_ADDR
24785: GO 24845
24787: LD_INT 32
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24806
24795: POP
// bc_type := b_siberite_power ; 33 :
24796: LD_ADDR_OWVAR 42
24800: PUSH
24801: LD_INT 28
24803: ST_TO_ADDR
24804: GO 24845
24806: LD_INT 33
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24825
24814: POP
// bc_type := b_oil_mine ; 34 :
24815: LD_ADDR_OWVAR 42
24819: PUSH
24820: LD_INT 29
24822: ST_TO_ADDR
24823: GO 24845
24825: LD_INT 34
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 24844
24833: POP
// bc_type := b_siberite_mine ; end ;
24834: LD_ADDR_OWVAR 42
24838: PUSH
24839: LD_INT 30
24841: ST_TO_ADDR
24842: GO 24845
24844: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24845: LD_ADDR_VAR 0 8
24849: PUSH
24850: LD_VAR 0 5
24854: PPUSH
24855: LD_VAR 0 6
24859: PPUSH
24860: LD_VAR 0 3
24864: PPUSH
24865: CALL_OW 47
24869: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24870: LD_OWVAR 42
24874: PUSH
24875: LD_INT 32
24877: PUSH
24878: LD_INT 33
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: IN
24885: IFFALSE 24901
// PlaceWeaponTurret ( b , weapon ) ;
24887: LD_VAR 0 8
24891: PPUSH
24892: LD_VAR 0 4
24896: PPUSH
24897: CALL_OW 431
// end ;
24901: LD_VAR 0 7
24905: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24906: LD_INT 0
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24912: LD_ADDR_VAR 0 4
24916: PUSH
24917: LD_INT 22
24919: PUSH
24920: LD_OWVAR 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 30
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 30
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: ST_TO_ADDR
// if not tmp then
24966: LD_VAR 0 4
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25034
// for i in tmp do
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_VAR 0 4
24984: PUSH
24985: FOR_IN
24986: IFFALSE 25032
// for j = 1 to 3 do
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: DOUBLE
24994: LD_INT 1
24996: DEC
24997: ST_TO_ADDR
24998: LD_INT 3
25000: PUSH
25001: FOR_TO
25002: IFFALSE 25028
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25004: LD_VAR 0 2
25008: PPUSH
25009: CALL_OW 274
25013: PPUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: LD_INT 99999
25021: PPUSH
25022: CALL_OW 277
25026: GO 25001
25028: POP
25029: POP
25030: GO 24985
25032: POP
25033: POP
// end ;
25034: LD_VAR 0 1
25038: RET
// export function hHackSetLevel10 ; var i , j ; begin
25039: LD_INT 0
25041: PPUSH
25042: PPUSH
25043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25044: LD_ADDR_VAR 0 2
25048: PUSH
25049: LD_INT 21
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PPUSH
25059: CALL_OW 69
25063: PUSH
25064: FOR_IN
25065: IFFALSE 25117
// if IsSelected ( i ) then
25067: LD_VAR 0 2
25071: PPUSH
25072: CALL_OW 306
25076: IFFALSE 25115
// begin for j := 1 to 4 do
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: DOUBLE
25084: LD_INT 1
25086: DEC
25087: ST_TO_ADDR
25088: LD_INT 4
25090: PUSH
25091: FOR_TO
25092: IFFALSE 25113
// SetSkill ( i , j , 10 ) ;
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_VAR 0 3
25103: PPUSH
25104: LD_INT 10
25106: PPUSH
25107: CALL_OW 237
25111: GO 25091
25113: POP
25114: POP
// end ;
25115: GO 25064
25117: POP
25118: POP
// end ;
25119: LD_VAR 0 1
25123: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: FOR_IN
25166: IFFALSE 25207
// begin for j := 1 to 4 do
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: DOUBLE
25174: LD_INT 1
25176: DEC
25177: ST_TO_ADDR
25178: LD_INT 4
25180: PUSH
25181: FOR_TO
25182: IFFALSE 25203
// SetSkill ( i , j , 10 ) ;
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: LD_INT 10
25196: PPUSH
25197: CALL_OW 237
25201: GO 25181
25203: POP
25204: POP
// end ;
25205: GO 25165
25207: POP
25208: POP
// end ;
25209: LD_VAR 0 1
25213: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25214: LD_INT 0
25216: PPUSH
// uc_side := your_side ;
25217: LD_ADDR_OWVAR 20
25221: PUSH
25222: LD_OWVAR 2
25226: ST_TO_ADDR
// uc_nation := nation ;
25227: LD_ADDR_OWVAR 21
25231: PUSH
25232: LD_VAR 0 1
25236: ST_TO_ADDR
// InitHc ;
25237: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25241: LD_INT 0
25243: PPUSH
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25258: LD_VAR 0 4
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL_OW 428
25272: PUSH
25273: LD_INT 0
25275: EQUAL
25276: IFFALSE 25300
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25278: CALL_OW 44
25282: PPUSH
25283: LD_VAR 0 4
25287: PPUSH
25288: LD_VAR 0 5
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 48
// end ;
25300: LD_VAR 0 6
25304: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25305: LD_INT 0
25307: PPUSH
25308: PPUSH
// uc_side := your_side ;
25309: LD_ADDR_OWVAR 20
25313: PUSH
25314: LD_OWVAR 2
25318: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25319: LD_VAR 0 1
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: IN
25346: IFFALSE 25358
// uc_nation := nation_american else
25348: LD_ADDR_OWVAR 21
25352: PUSH
25353: LD_INT 1
25355: ST_TO_ADDR
25356: GO 25401
// if chassis in [ 11 , 12 , 13 , 14 ] then
25358: LD_VAR 0 1
25362: PUSH
25363: LD_INT 11
25365: PUSH
25366: LD_INT 12
25368: PUSH
25369: LD_INT 13
25371: PUSH
25372: LD_INT 14
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: IN
25381: IFFALSE 25393
// uc_nation := nation_arabian else
25383: LD_ADDR_OWVAR 21
25387: PUSH
25388: LD_INT 2
25390: ST_TO_ADDR
25391: GO 25401
// uc_nation := nation_russian ;
25393: LD_ADDR_OWVAR 21
25397: PUSH
25398: LD_INT 3
25400: ST_TO_ADDR
// vc_chassis := chassis ;
25401: LD_ADDR_OWVAR 37
25405: PUSH
25406: LD_VAR 0 1
25410: ST_TO_ADDR
// vc_engine := engine ;
25411: LD_ADDR_OWVAR 39
25415: PUSH
25416: LD_VAR 0 2
25420: ST_TO_ADDR
// vc_control := control ;
25421: LD_ADDR_OWVAR 38
25425: PUSH
25426: LD_VAR 0 3
25430: ST_TO_ADDR
// vc_weapon := weapon ;
25431: LD_ADDR_OWVAR 40
25435: PUSH
25436: LD_VAR 0 4
25440: ST_TO_ADDR
// un := CreateVehicle ;
25441: LD_ADDR_VAR 0 8
25445: PUSH
25446: CALL_OW 45
25450: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25451: LD_VAR 0 8
25455: PPUSH
25456: LD_INT 0
25458: PPUSH
25459: LD_INT 5
25461: PPUSH
25462: CALL_OW 12
25466: PPUSH
25467: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25471: LD_VAR 0 8
25475: PPUSH
25476: LD_VAR 0 5
25480: PPUSH
25481: LD_VAR 0 6
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: CALL_OW 48
// end ;
25493: LD_VAR 0 7
25497: RET
// export hInvincible ; every 1 do
25498: GO 25500
25500: DISABLE
// hInvincible := [ ] ;
25501: LD_ADDR_EXP 79
25505: PUSH
25506: EMPTY
25507: ST_TO_ADDR
25508: END
// every 10 do var i ;
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
// begin enable ;
25515: ENABLE
// if not hInvincible then
25516: LD_EXP 79
25520: NOT
25521: IFFALSE 25525
// exit ;
25523: GO 25569
// for i in hInvincible do
25525: LD_ADDR_VAR 0 1
25529: PUSH
25530: LD_EXP 79
25534: PUSH
25535: FOR_IN
25536: IFFALSE 25567
// if GetLives ( i ) < 1000 then
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 256
25547: PUSH
25548: LD_INT 1000
25550: LESS
25551: IFFALSE 25565
// SetLives ( i , 1000 ) ;
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_INT 1000
25560: PPUSH
25561: CALL_OW 234
25565: GO 25535
25567: POP
25568: POP
// end ;
25569: PPOPN 1
25571: END
// export function hHackInvincible ; var i ; begin
25572: LD_INT 0
25574: PPUSH
25575: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 21
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 21
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: PUSH
25614: FOR_IN
25615: IFFALSE 25676
// if IsSelected ( i ) then
25617: LD_VAR 0 2
25621: PPUSH
25622: CALL_OW 306
25626: IFFALSE 25674
// begin if i in hInvincible then
25628: LD_VAR 0 2
25632: PUSH
25633: LD_EXP 79
25637: IN
25638: IFFALSE 25658
// hInvincible := hInvincible diff i else
25640: LD_ADDR_EXP 79
25644: PUSH
25645: LD_EXP 79
25649: PUSH
25650: LD_VAR 0 2
25654: DIFF
25655: ST_TO_ADDR
25656: GO 25674
// hInvincible := hInvincible union i ;
25658: LD_ADDR_EXP 79
25662: PUSH
25663: LD_EXP 79
25667: PUSH
25668: LD_VAR 0 2
25672: UNION
25673: ST_TO_ADDR
// end ;
25674: GO 25614
25676: POP
25677: POP
// end ;
25678: LD_VAR 0 1
25682: RET
// export function hHackInvisible ; var i , j ; begin
25683: LD_INT 0
25685: PPUSH
25686: PPUSH
25687: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25688: LD_ADDR_VAR 0 2
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PPUSH
25703: CALL_OW 69
25707: PUSH
25708: FOR_IN
25709: IFFALSE 25733
// if IsSelected ( i ) then
25711: LD_VAR 0 2
25715: PPUSH
25716: CALL_OW 306
25720: IFFALSE 25731
// ComForceInvisible ( i ) ;
25722: LD_VAR 0 2
25726: PPUSH
25727: CALL_OW 496
25731: GO 25708
25733: POP
25734: POP
// end ;
25735: LD_VAR 0 1
25739: RET
// export function hHackChangeYourSide ; begin
25740: LD_INT 0
25742: PPUSH
// if your_side = 8 then
25743: LD_OWVAR 2
25747: PUSH
25748: LD_INT 8
25750: EQUAL
25751: IFFALSE 25763
// your_side := 0 else
25753: LD_ADDR_OWVAR 2
25757: PUSH
25758: LD_INT 0
25760: ST_TO_ADDR
25761: GO 25777
// your_side := your_side + 1 ;
25763: LD_ADDR_OWVAR 2
25767: PUSH
25768: LD_OWVAR 2
25772: PUSH
25773: LD_INT 1
25775: PLUS
25776: ST_TO_ADDR
// end ;
25777: LD_VAR 0 1
25781: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25782: LD_INT 0
25784: PPUSH
25785: PPUSH
25786: PPUSH
// for i in all_units do
25787: LD_ADDR_VAR 0 2
25791: PUSH
25792: LD_OWVAR 3
25796: PUSH
25797: FOR_IN
25798: IFFALSE 25876
// if IsSelected ( i ) then
25800: LD_VAR 0 2
25804: PPUSH
25805: CALL_OW 306
25809: IFFALSE 25874
// begin j := GetSide ( i ) ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 2
25820: PPUSH
25821: CALL_OW 255
25825: ST_TO_ADDR
// if j = 8 then
25826: LD_VAR 0 3
25830: PUSH
25831: LD_INT 8
25833: EQUAL
25834: IFFALSE 25846
// j := 0 else
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 0
25843: ST_TO_ADDR
25844: GO 25860
// j := j + 1 ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_VAR 0 3
25855: PUSH
25856: LD_INT 1
25858: PLUS
25859: ST_TO_ADDR
// SetSide ( i , j ) ;
25860: LD_VAR 0 2
25864: PPUSH
25865: LD_VAR 0 3
25869: PPUSH
25870: CALL_OW 235
// end ;
25874: GO 25797
25876: POP
25877: POP
// end ;
25878: LD_VAR 0 1
25882: RET
// export function hHackFog ; begin
25883: LD_INT 0
25885: PPUSH
// FogOff ( true ) ;
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 344
// end ;
25893: LD_VAR 0 1
25897: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25898: LD_INT 0
25900: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: CALL_OW 483
// CenterOnXY ( x , y ) ;
25926: LD_VAR 0 2
25930: PPUSH
25931: LD_VAR 0 3
25935: PPUSH
25936: CALL_OW 84
// end ;
25940: LD_VAR 0 4
25944: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25949: LD_VAR 0 1
25953: NOT
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_VAR 0 3
25964: PPUSH
25965: CALL_OW 488
25969: NOT
25970: OR
25971: PUSH
25972: LD_VAR 0 1
25976: PPUSH
25977: CALL_OW 266
25981: PUSH
25982: LD_INT 3
25984: NONEQUAL
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 247
25995: PUSH
25996: LD_INT 1
25998: EQUAL
25999: NOT
26000: AND
26001: OR
26002: IFFALSE 26006
// exit ;
26004: GO 26288
// if GetType ( factory ) = unit_human then
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 247
26015: PUSH
26016: LD_INT 1
26018: EQUAL
26019: IFFALSE 26036
// factory := IsInUnit ( factory ) ;
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 310
26035: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 3
26048: NONEQUAL
26049: IFFALSE 26053
// exit ;
26051: GO 26288
// for i := 1 to Count ( factoryWaypoints ) do
26053: LD_ADDR_VAR 0 5
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_EXP 80
26067: PPUSH
26068: CALL 34934 0 1
26072: PUSH
26073: FOR_TO
26074: IFFALSE 26236
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL_OW 428
26090: PUSH
26091: LD_EXP 80
26095: PUSH
26096: LD_VAR 0 5
26100: ARRAY
26101: PUSH
26102: LD_INT 2
26104: ARRAY
26105: EQUAL
26106: IFFALSE 26138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26108: LD_ADDR_EXP 80
26112: PUSH
26113: LD_EXP 80
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 3
26127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26128: CALL 26293 0 0
// exit ;
26132: POP
26133: POP
26134: GO 26288
// end else
26136: GO 26234
// if factory = factoryWaypoints [ i ] [ 2 ] then
26138: LD_VAR 0 1
26142: PUSH
26143: LD_EXP 80
26147: PUSH
26148: LD_VAR 0 5
26152: ARRAY
26153: PUSH
26154: LD_INT 2
26156: ARRAY
26157: EQUAL
26158: IFFALSE 26234
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26160: LD_ADDR_EXP 80
26164: PUSH
26165: LD_EXP 80
26169: PPUSH
26170: LD_VAR 0 5
26174: PPUSH
26175: CALL_OW 3
26179: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26180: LD_ADDR_EXP 80
26184: PUSH
26185: LD_EXP 80
26189: PPUSH
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 255
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_VAR 0 2
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL 70543 0 2
26225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26226: CALL 26293 0 0
// exit ;
26230: POP
26231: POP
26232: GO 26288
// end ; end ;
26234: GO 26073
26236: POP
26237: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26238: LD_ADDR_EXP 80
26242: PUSH
26243: LD_EXP 80
26247: PPUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 255
26257: PUSH
26258: LD_VAR 0 1
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PPUSH
26279: CALL 70543 0 2
26283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26284: CALL 26293 0 0
// end ;
26288: LD_VAR 0 4
26292: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26293: LD_INT 0
26295: PPUSH
26296: PPUSH
26297: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26298: LD_STRING resetFactoryWaypoint();
26300: PPUSH
26301: CALL_OW 559
// if factoryWaypoints then
26305: LD_EXP 80
26309: IFFALSE 26430
// begin list := factoryWaypoints ;
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_EXP 80
26320: ST_TO_ADDR
// for i := 1 to list do
26321: LD_ADDR_VAR 0 2
26325: PUSH
26326: DOUBLE
26327: LD_INT 1
26329: DEC
26330: ST_TO_ADDR
26331: LD_VAR 0 3
26335: PUSH
26336: FOR_TO
26337: IFFALSE 26428
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26339: LD_STRING setFactoryWaypointXY(
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: LD_VAR 0 2
26351: ARRAY
26352: PUSH
26353: LD_INT 1
26355: ARRAY
26356: STR
26357: PUSH
26358: LD_STRING ,
26360: STR
26361: PUSH
26362: LD_VAR 0 3
26366: PUSH
26367: LD_VAR 0 2
26371: ARRAY
26372: PUSH
26373: LD_INT 2
26375: ARRAY
26376: STR
26377: PUSH
26378: LD_STRING ,
26380: STR
26381: PUSH
26382: LD_VAR 0 3
26386: PUSH
26387: LD_VAR 0 2
26391: ARRAY
26392: PUSH
26393: LD_INT 3
26395: ARRAY
26396: STR
26397: PUSH
26398: LD_STRING ,
26400: STR
26401: PUSH
26402: LD_VAR 0 3
26406: PUSH
26407: LD_VAR 0 2
26411: ARRAY
26412: PUSH
26413: LD_INT 4
26415: ARRAY
26416: STR
26417: PUSH
26418: LD_STRING )
26420: STR
26421: PPUSH
26422: CALL_OW 559
26426: GO 26336
26428: POP
26429: POP
// end ; end ;
26430: LD_VAR 0 1
26434: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26435: LD_INT 0
26437: PPUSH
// if HexInfo ( x , y ) = warehouse then
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 428
26452: PUSH
26453: LD_VAR 0 1
26457: EQUAL
26458: IFFALSE 26485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26460: LD_ADDR_EXP 82
26464: PUSH
26465: LD_EXP 82
26469: PPUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: LD_INT 0
26477: PPUSH
26478: CALL_OW 1
26482: ST_TO_ADDR
26483: GO 26536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26485: LD_ADDR_EXP 82
26489: PUSH
26490: LD_EXP 82
26494: PPUSH
26495: LD_VAR 0 1
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 255
26509: PUSH
26510: LD_VAR 0 1
26514: PUSH
26515: LD_VAR 0 2
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 1
26535: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26536: CALL 26545 0 0
// end ;
26540: LD_VAR 0 4
26544: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26545: LD_INT 0
26547: PPUSH
26548: PPUSH
26549: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26550: LD_STRING resetWarehouseGatheringPoints();
26552: PPUSH
26553: CALL_OW 559
// if warehouseGatheringPoints then
26557: LD_EXP 82
26561: IFFALSE 26687
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_EXP 82
26572: PPUSH
26573: CALL 74311 0 1
26577: ST_TO_ADDR
// for i := 1 to list do
26578: LD_ADDR_VAR 0 2
26582: PUSH
26583: DOUBLE
26584: LD_INT 1
26586: DEC
26587: ST_TO_ADDR
26588: LD_VAR 0 3
26592: PUSH
26593: FOR_TO
26594: IFFALSE 26685
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26596: LD_STRING setWarehouseGatheringPointXY(
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 2
26608: ARRAY
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: STR
26614: PUSH
26615: LD_STRING ,
26617: STR
26618: PUSH
26619: LD_VAR 0 3
26623: PUSH
26624: LD_VAR 0 2
26628: ARRAY
26629: PUSH
26630: LD_INT 2
26632: ARRAY
26633: STR
26634: PUSH
26635: LD_STRING ,
26637: STR
26638: PUSH
26639: LD_VAR 0 3
26643: PUSH
26644: LD_VAR 0 2
26648: ARRAY
26649: PUSH
26650: LD_INT 3
26652: ARRAY
26653: STR
26654: PUSH
26655: LD_STRING ,
26657: STR
26658: PUSH
26659: LD_VAR 0 3
26663: PUSH
26664: LD_VAR 0 2
26668: ARRAY
26669: PUSH
26670: LD_INT 4
26672: ARRAY
26673: STR
26674: PUSH
26675: LD_STRING )
26677: STR
26678: PPUSH
26679: CALL_OW 559
26683: GO 26593
26685: POP
26686: POP
// end ; end ;
26687: LD_VAR 0 1
26691: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26692: LD_EXP 82
26696: IFFALSE 27381
26698: GO 26700
26700: DISABLE
26701: LD_INT 0
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
// begin enable ;
26712: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_EXP 82
26722: PPUSH
26723: CALL 74311 0 1
26727: ST_TO_ADDR
// if not list then
26728: LD_VAR 0 3
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 27381
// for i := 1 to list do
26737: LD_ADDR_VAR 0 1
26741: PUSH
26742: DOUBLE
26743: LD_INT 1
26745: DEC
26746: ST_TO_ADDR
26747: LD_VAR 0 3
26751: PUSH
26752: FOR_TO
26753: IFFALSE 27379
// begin depot := list [ i ] [ 2 ] ;
26755: LD_ADDR_VAR 0 8
26759: PUSH
26760: LD_VAR 0 3
26764: PUSH
26765: LD_VAR 0 1
26769: ARRAY
26770: PUSH
26771: LD_INT 2
26773: ARRAY
26774: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26775: LD_ADDR_VAR 0 5
26779: PUSH
26780: LD_VAR 0 3
26784: PUSH
26785: LD_VAR 0 1
26789: ARRAY
26790: PUSH
26791: LD_INT 1
26793: ARRAY
26794: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26795: LD_VAR 0 8
26799: PPUSH
26800: CALL_OW 301
26804: PUSH
26805: LD_VAR 0 5
26809: PUSH
26810: LD_VAR 0 8
26814: PPUSH
26815: CALL_OW 255
26819: NONEQUAL
26820: OR
26821: IFFALSE 26850
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26823: LD_ADDR_EXP 82
26827: PUSH
26828: LD_EXP 82
26832: PPUSH
26833: LD_VAR 0 8
26837: PPUSH
26838: LD_INT 0
26840: PPUSH
26841: CALL_OW 1
26845: ST_TO_ADDR
// exit ;
26846: POP
26847: POP
26848: GO 27381
// end ; x := list [ i ] [ 3 ] ;
26850: LD_ADDR_VAR 0 6
26854: PUSH
26855: LD_VAR 0 3
26859: PUSH
26860: LD_VAR 0 1
26864: ARRAY
26865: PUSH
26866: LD_INT 3
26868: ARRAY
26869: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26870: LD_ADDR_VAR 0 7
26874: PUSH
26875: LD_VAR 0 3
26879: PUSH
26880: LD_VAR 0 1
26884: ARRAY
26885: PUSH
26886: LD_INT 4
26888: ARRAY
26889: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26890: LD_ADDR_VAR 0 9
26894: PUSH
26895: LD_VAR 0 6
26899: PPUSH
26900: LD_VAR 0 7
26904: PPUSH
26905: LD_INT 16
26907: PPUSH
26908: CALL 72895 0 3
26912: ST_TO_ADDR
// if not cratesNearbyPoint then
26913: LD_VAR 0 9
26917: NOT
26918: IFFALSE 26924
// exit ;
26920: POP
26921: POP
26922: GO 27381
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26924: LD_ADDR_VAR 0 4
26928: PUSH
26929: LD_INT 22
26931: PUSH
26932: LD_VAR 0 5
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: LD_INT 60
26946: PUSH
26947: EMPTY
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 91
26956: PUSH
26957: LD_VAR 0 8
26961: PUSH
26962: LD_INT 6
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 25
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 25
26985: PUSH
26986: LD_INT 16
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: PPUSH
27004: CALL_OW 69
27008: PUSH
27009: LD_VAR 0 8
27013: PPUSH
27014: CALL_OW 313
27018: PPUSH
27019: LD_INT 3
27021: PUSH
27022: LD_INT 60
27024: PUSH
27025: EMPTY
27026: LIST
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 25
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 25
27047: PUSH
27048: LD_INT 16
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 72
27068: UNION
27069: ST_TO_ADDR
// if tmp then
27070: LD_VAR 0 4
27074: IFFALSE 27154
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27076: LD_ADDR_VAR 0 4
27080: PUSH
27081: LD_VAR 0 4
27085: PPUSH
27086: LD_INT 3
27088: PPUSH
27089: CALL 70858 0 2
27093: ST_TO_ADDR
// for j in tmp do
27094: LD_ADDR_VAR 0 2
27098: PUSH
27099: LD_VAR 0 4
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27148
// begin if IsInUnit ( j ) then
27107: LD_VAR 0 2
27111: PPUSH
27112: CALL_OW 310
27116: IFFALSE 27127
// ComExit ( j ) ;
27118: LD_VAR 0 2
27122: PPUSH
27123: CALL 70941 0 1
// AddComCollect ( j , x , y ) ;
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 6
27136: PPUSH
27137: LD_VAR 0 7
27141: PPUSH
27142: CALL_OW 177
// end ;
27146: GO 27104
27148: POP
27149: POP
// exit ;
27150: POP
27151: POP
27152: GO 27381
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27154: LD_ADDR_VAR 0 4
27158: PUSH
27159: LD_INT 22
27161: PUSH
27162: LD_VAR 0 5
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 91
27173: PUSH
27174: LD_VAR 0 8
27178: PUSH
27179: LD_INT 8
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 34
27192: PUSH
27193: LD_INT 12
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 34
27202: PUSH
27203: LD_INT 51
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 34
27212: PUSH
27213: LD_INT 32
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 34
27222: PUSH
27223: LD_INT 89
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: PPUSH
27242: CALL_OW 69
27246: ST_TO_ADDR
// if tmp then
27247: LD_VAR 0 4
27251: IFFALSE 27377
// begin for j in tmp do
27253: LD_ADDR_VAR 0 2
27257: PUSH
27258: LD_VAR 0 4
27262: PUSH
27263: FOR_IN
27264: IFFALSE 27375
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL_OW 262
27275: PUSH
27276: LD_INT 3
27278: EQUAL
27279: PUSH
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 261
27289: PUSH
27290: LD_INT 20
27292: GREATER
27293: OR
27294: PUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 314
27304: NOT
27305: AND
27306: PUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: CALL_OW 263
27316: PUSH
27317: LD_INT 1
27319: NONEQUAL
27320: PUSH
27321: LD_VAR 0 2
27325: PPUSH
27326: CALL_OW 311
27330: OR
27331: AND
27332: IFFALSE 27373
// begin ComCollect ( j , x , y ) ;
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_VAR 0 6
27343: PPUSH
27344: LD_VAR 0 7
27348: PPUSH
27349: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27353: LD_VAR 0 2
27357: PPUSH
27358: LD_VAR 0 8
27362: PPUSH
27363: CALL_OW 172
// exit ;
27367: POP
27368: POP
27369: POP
27370: POP
27371: GO 27381
// end ;
27373: GO 27263
27375: POP
27376: POP
// end ; end ;
27377: GO 26752
27379: POP
27380: POP
// end ; end_of_file
27381: PPOPN 9
27383: END
// export function SOS_UnitDestroyed ( un ) ; begin
27384: LD_INT 0
27386: PPUSH
// ComRadiation ( un ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL 28453 0 1
// end ;
27396: LD_VAR 0 2
27400: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27401: LD_INT 0
27403: PPUSH
// ComRadiation ( un ) ;
27404: LD_VAR 0 1
27408: PPUSH
27409: CALL 28453 0 1
// end ;
27413: LD_VAR 0 2
27417: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27418: LD_INT 0
27420: PPUSH
// end ;
27421: LD_VAR 0 4
27425: RET
// export function SOS_Command ( cmd ) ; begin
27426: LD_INT 0
27428: PPUSH
// end ;
27429: LD_VAR 0 2
27433: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27434: LD_INT 0
27436: PPUSH
// end ;
27437: LD_VAR 0 6
27441: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27442: LD_INT 0
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
// if not vehicle or not factory then
27448: LD_VAR 0 1
27452: NOT
27453: PUSH
27454: LD_VAR 0 2
27458: NOT
27459: OR
27460: IFFALSE 27464
// exit ;
27462: GO 28044
// if not factoryWaypoints then
27464: LD_EXP 80
27468: NOT
27469: IFFALSE 27473
// exit ;
27471: GO 28044
// for i := 1 to Count ( factoryWaypoints ) do
27473: LD_ADDR_VAR 0 4
27477: PUSH
27478: DOUBLE
27479: LD_INT 1
27481: DEC
27482: ST_TO_ADDR
27483: LD_EXP 80
27487: PPUSH
27488: CALL 34934 0 1
27492: PUSH
27493: FOR_TO
27494: IFFALSE 28042
// if factoryWaypoints [ i ] [ 2 ] = factory then
27496: LD_EXP 80
27500: PUSH
27501: LD_VAR 0 4
27505: ARRAY
27506: PUSH
27507: LD_INT 2
27509: ARRAY
27510: PUSH
27511: LD_VAR 0 2
27515: EQUAL
27516: IFFALSE 28040
// begin if GetControl ( vehicle ) = control_manual then
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 263
27527: PUSH
27528: LD_INT 1
27530: EQUAL
27531: IFFALSE 27893
// begin driver := IsDrivenBy ( vehicle ) ;
27533: LD_ADDR_VAR 0 5
27537: PUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 311
27547: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27548: LD_VAR 0 5
27552: PUSH
27553: LD_EXP 81
27557: IN
27558: PUSH
27559: LD_VAR 0 1
27563: PUSH
27564: LD_EXP 81
27568: IN
27569: OR
27570: IFFALSE 27576
// exit ;
27572: POP
27573: POP
27574: GO 28044
// if not HasTask ( driver ) then
27576: LD_VAR 0 5
27580: PPUSH
27581: CALL_OW 314
27585: NOT
27586: IFFALSE 27891
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27588: LD_ADDR_EXP 81
27592: PUSH
27593: LD_EXP 81
27597: PPUSH
27598: LD_VAR 0 5
27602: PPUSH
27603: CALL 70543 0 2
27607: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27608: LD_ADDR_EXP 81
27612: PUSH
27613: LD_EXP 81
27617: PPUSH
27618: LD_VAR 0 1
27622: PPUSH
27623: CALL 70543 0 2
27627: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27628: LD_ADDR_VAR 0 6
27632: PUSH
27633: LD_EXP 80
27637: PUSH
27638: LD_VAR 0 4
27642: ARRAY
27643: PUSH
27644: LD_INT 3
27646: ARRAY
27647: PPUSH
27648: LD_EXP 80
27652: PUSH
27653: LD_VAR 0 4
27657: ARRAY
27658: PUSH
27659: LD_INT 4
27661: ARRAY
27662: PPUSH
27663: CALL_OW 428
27667: ST_TO_ADDR
// if hex then
27668: LD_VAR 0 6
27672: IFFALSE 27690
// ComMoveUnit ( driver , hex ) else
27674: LD_VAR 0 5
27678: PPUSH
27679: LD_VAR 0 6
27683: PPUSH
27684: CALL_OW 112
27688: GO 27774
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27690: LD_VAR 0 1
27694: PPUSH
27695: LD_EXP 80
27699: PUSH
27700: LD_VAR 0 4
27704: ARRAY
27705: PUSH
27706: LD_INT 3
27708: ARRAY
27709: PPUSH
27710: LD_EXP 80
27714: PUSH
27715: LD_VAR 0 4
27719: ARRAY
27720: PUSH
27721: LD_INT 4
27723: ARRAY
27724: PPUSH
27725: CALL_OW 297
27729: PUSH
27730: LD_INT 0
27732: GREATER
27733: IFFALSE 27774
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27735: LD_VAR 0 5
27739: PPUSH
27740: LD_EXP 80
27744: PUSH
27745: LD_VAR 0 4
27749: ARRAY
27750: PUSH
27751: LD_INT 3
27753: ARRAY
27754: PPUSH
27755: LD_EXP 80
27759: PUSH
27760: LD_VAR 0 4
27764: ARRAY
27765: PUSH
27766: LD_INT 4
27768: ARRAY
27769: PPUSH
27770: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27774: LD_VAR 0 5
27778: PPUSH
27779: CALL_OW 181
// if Multiplayer then
27783: LD_OWVAR 4
27787: IFFALSE 27836
// begin repeat wait ( 10 ) ;
27789: LD_INT 10
27791: PPUSH
27792: CALL_OW 67
// until not IsInUnit ( driver ) ;
27796: LD_VAR 0 5
27800: PPUSH
27801: CALL_OW 310
27805: NOT
27806: IFFALSE 27789
// if not HasTask ( driver ) then
27808: LD_VAR 0 5
27812: PPUSH
27813: CALL_OW 314
27817: NOT
27818: IFFALSE 27834
// ComEnterUnit ( driver , factory ) ;
27820: LD_VAR 0 5
27824: PPUSH
27825: LD_VAR 0 2
27829: PPUSH
27830: CALL_OW 120
// end else
27834: GO 27850
// AddComEnterUnit ( driver , factory ) ;
27836: LD_VAR 0 5
27840: PPUSH
27841: LD_VAR 0 2
27845: PPUSH
27846: CALL_OW 180
// wait ( 0 0$1 ) ;
27850: LD_INT 35
27852: PPUSH
27853: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27857: LD_ADDR_EXP 81
27861: PUSH
27862: LD_EXP 81
27866: PUSH
27867: LD_VAR 0 5
27871: DIFF
27872: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27873: LD_ADDR_EXP 81
27877: PUSH
27878: LD_EXP 81
27882: PUSH
27883: LD_VAR 0 1
27887: DIFF
27888: ST_TO_ADDR
// break ;
27889: GO 28042
// end ; end else
27891: GO 28040
// if GetControl ( vehicle ) = control_remote then
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 263
27902: PUSH
27903: LD_INT 2
27905: EQUAL
27906: IFFALSE 27992
// begin wait ( 0 0$2 ) ;
27908: LD_INT 70
27910: PPUSH
27911: CALL_OW 67
// repeat wait ( 10 ) ;
27915: LD_INT 10
27917: PPUSH
27918: CALL_OW 67
// Connect ( vehicle ) ;
27922: LD_VAR 0 1
27926: PPUSH
27927: CALL 41140 0 1
// until IsControledBy ( vehicle ) ;
27931: LD_VAR 0 1
27935: PPUSH
27936: CALL_OW 312
27940: IFFALSE 27915
// wait ( 10 ) ;
27942: LD_INT 10
27944: PPUSH
27945: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_EXP 80
27958: PUSH
27959: LD_VAR 0 4
27963: ARRAY
27964: PUSH
27965: LD_INT 3
27967: ARRAY
27968: PPUSH
27969: LD_EXP 80
27973: PUSH
27974: LD_VAR 0 4
27978: ARRAY
27979: PUSH
27980: LD_INT 4
27982: ARRAY
27983: PPUSH
27984: CALL_OW 111
// break ;
27988: GO 28042
// end else
27990: GO 28040
// begin wait ( 0 0$3 ) ;
27992: LD_INT 105
27994: PPUSH
27995: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27999: LD_VAR 0 1
28003: PPUSH
28004: LD_EXP 80
28008: PUSH
28009: LD_VAR 0 4
28013: ARRAY
28014: PUSH
28015: LD_INT 3
28017: ARRAY
28018: PPUSH
28019: LD_EXP 80
28023: PUSH
28024: LD_VAR 0 4
28028: ARRAY
28029: PUSH
28030: LD_INT 4
28032: ARRAY
28033: PPUSH
28034: CALL_OW 111
// break ;
28038: GO 28042
// end ; end ;
28040: GO 27493
28042: POP
28043: POP
// end ;
28044: LD_VAR 0 3
28048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28049: LD_INT 0
28051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28052: LD_VAR 0 1
28056: PUSH
28057: LD_INT 250
28059: EQUAL
28060: PUSH
28061: LD_VAR 0 2
28065: PPUSH
28066: CALL_OW 264
28070: PUSH
28071: LD_INT 81
28073: EQUAL
28074: AND
28075: IFFALSE 28096
// MinerPlaceMine ( unit , x , y ) ;
28077: LD_VAR 0 2
28081: PPUSH
28082: LD_VAR 0 4
28086: PPUSH
28087: LD_VAR 0 5
28091: PPUSH
28092: CALL 31188 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28096: LD_VAR 0 1
28100: PUSH
28101: LD_INT 251
28103: EQUAL
28104: PUSH
28105: LD_VAR 0 2
28109: PPUSH
28110: CALL_OW 264
28114: PUSH
28115: LD_INT 81
28117: EQUAL
28118: AND
28119: IFFALSE 28140
// MinerDetonateMine ( unit , x , y ) ;
28121: LD_VAR 0 2
28125: PPUSH
28126: LD_VAR 0 4
28130: PPUSH
28131: LD_VAR 0 5
28135: PPUSH
28136: CALL 31463 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28140: LD_VAR 0 1
28144: PUSH
28145: LD_INT 252
28147: EQUAL
28148: PUSH
28149: LD_VAR 0 2
28153: PPUSH
28154: CALL_OW 264
28158: PUSH
28159: LD_INT 81
28161: EQUAL
28162: AND
28163: IFFALSE 28184
// MinerCreateMinefield ( unit , x , y ) ;
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_VAR 0 4
28174: PPUSH
28175: LD_VAR 0 5
28179: PPUSH
28180: CALL 31880 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28184: LD_VAR 0 1
28188: PUSH
28189: LD_INT 253
28191: EQUAL
28192: PUSH
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 257
28202: PUSH
28203: LD_INT 5
28205: EQUAL
28206: AND
28207: IFFALSE 28228
// ComBinocular ( unit , x , y ) ;
28209: LD_VAR 0 2
28213: PPUSH
28214: LD_VAR 0 4
28218: PPUSH
28219: LD_VAR 0 5
28223: PPUSH
28224: CALL 32249 0 3
// if selectedUnit then
28228: LD_VAR 0 3
28232: IFFALSE 28288
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28234: LD_VAR 0 1
28238: PUSH
28239: LD_INT 254
28241: EQUAL
28242: PUSH
28243: LD_VAR 0 2
28247: PPUSH
28248: CALL_OW 264
28252: PUSH
28253: LD_INT 99
28255: EQUAL
28256: AND
28257: PUSH
28258: LD_VAR 0 3
28262: PPUSH
28263: CALL_OW 263
28267: PUSH
28268: LD_INT 3
28270: EQUAL
28271: AND
28272: IFFALSE 28288
// HackDestroyVehicle ( unit , selectedUnit ) ;
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_VAR 0 3
28283: PPUSH
28284: CALL 30552 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28288: LD_VAR 0 1
28292: PUSH
28293: LD_INT 255
28295: EQUAL
28296: PUSH
28297: LD_VAR 0 2
28301: PPUSH
28302: CALL_OW 264
28306: PUSH
28307: LD_INT 14
28309: PUSH
28310: LD_INT 53
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: IN
28317: AND
28318: PUSH
28319: LD_VAR 0 4
28323: PPUSH
28324: LD_VAR 0 5
28328: PPUSH
28329: CALL_OW 488
28333: AND
28334: IFFALSE 28358
// CutTreeXYR ( unit , x , y , 12 ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: LD_VAR 0 4
28345: PPUSH
28346: LD_VAR 0 5
28350: PPUSH
28351: LD_INT 12
28353: PPUSH
28354: CALL 28549 0 4
// if cmd = 256 then
28358: LD_VAR 0 1
28362: PUSH
28363: LD_INT 256
28365: EQUAL
28366: IFFALSE 28387
// SetFactoryWaypoint ( unit , x , y ) ;
28368: LD_VAR 0 2
28372: PPUSH
28373: LD_VAR 0 4
28377: PPUSH
28378: LD_VAR 0 5
28382: PPUSH
28383: CALL 25945 0 3
// if cmd = 257 then
28387: LD_VAR 0 1
28391: PUSH
28392: LD_INT 257
28394: EQUAL
28395: IFFALSE 28416
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28397: LD_VAR 0 2
28401: PPUSH
28402: LD_VAR 0 4
28406: PPUSH
28407: LD_VAR 0 5
28411: PPUSH
28412: CALL 26435 0 3
// if cmd = 258 then
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 258
28423: EQUAL
28424: IFFALSE 28448
// BurnTreeXYR ( unit , x , y , 8 ) ;
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_VAR 0 4
28435: PPUSH
28436: LD_VAR 0 5
28440: PPUSH
28441: LD_INT 8
28443: PPUSH
28444: CALL 28943 0 4
// end ;
28448: LD_VAR 0 6
28452: RET
// export function ComRadiation ( un ) ; var eff ; begin
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 264
28466: PUSH
28467: LD_INT 91
28469: NONEQUAL
28470: IFFALSE 28474
// exit ;
28472: GO 28544
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28474: LD_INT 68
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 255
28486: PPUSH
28487: CALL_OW 321
28491: PUSH
28492: LD_INT 2
28494: EQUAL
28495: IFFALSE 28507
// eff := 50 else
28497: LD_ADDR_VAR 0 3
28501: PUSH
28502: LD_INT 50
28504: ST_TO_ADDR
28505: GO 28515
// eff := 25 ;
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 25
28514: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 250
28524: PPUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 251
28534: PPUSH
28535: LD_VAR 0 3
28539: PPUSH
28540: CALL_OW 495
// end ;
28544: LD_VAR 0 2
28548: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 302
28569: NOT
28570: PUSH
28571: LD_VAR 0 2
28575: PPUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: CALL_OW 488
28585: NOT
28586: OR
28587: PUSH
28588: LD_VAR 0 4
28592: NOT
28593: OR
28594: IFFALSE 28598
// exit ;
28596: GO 28938
// list := [ ] ;
28598: LD_ADDR_VAR 0 13
28602: PUSH
28603: EMPTY
28604: ST_TO_ADDR
// if x - r < 0 then
28605: LD_VAR 0 2
28609: PUSH
28610: LD_VAR 0 4
28614: MINUS
28615: PUSH
28616: LD_INT 0
28618: LESS
28619: IFFALSE 28631
// min_x := 0 else
28621: LD_ADDR_VAR 0 7
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
28629: GO 28647
// min_x := x - r ;
28631: LD_ADDR_VAR 0 7
28635: PUSH
28636: LD_VAR 0 2
28640: PUSH
28641: LD_VAR 0 4
28645: MINUS
28646: ST_TO_ADDR
// if y - r < 0 then
28647: LD_VAR 0 3
28651: PUSH
28652: LD_VAR 0 4
28656: MINUS
28657: PUSH
28658: LD_INT 0
28660: LESS
28661: IFFALSE 28673
// min_y := 0 else
28663: LD_ADDR_VAR 0 8
28667: PUSH
28668: LD_INT 0
28670: ST_TO_ADDR
28671: GO 28689
// min_y := y - r ;
28673: LD_ADDR_VAR 0 8
28677: PUSH
28678: LD_VAR 0 3
28682: PUSH
28683: LD_VAR 0 4
28687: MINUS
28688: ST_TO_ADDR
// max_x := x + r ;
28689: LD_ADDR_VAR 0 9
28693: PUSH
28694: LD_VAR 0 2
28698: PUSH
28699: LD_VAR 0 4
28703: PLUS
28704: ST_TO_ADDR
// max_y := y + r ;
28705: LD_ADDR_VAR 0 10
28709: PUSH
28710: LD_VAR 0 3
28714: PUSH
28715: LD_VAR 0 4
28719: PLUS
28720: ST_TO_ADDR
// for _x = min_x to max_x do
28721: LD_ADDR_VAR 0 11
28725: PUSH
28726: DOUBLE
28727: LD_VAR 0 7
28731: DEC
28732: ST_TO_ADDR
28733: LD_VAR 0 9
28737: PUSH
28738: FOR_TO
28739: IFFALSE 28856
// for _y = min_y to max_y do
28741: LD_ADDR_VAR 0 12
28745: PUSH
28746: DOUBLE
28747: LD_VAR 0 8
28751: DEC
28752: ST_TO_ADDR
28753: LD_VAR 0 10
28757: PUSH
28758: FOR_TO
28759: IFFALSE 28852
// begin if not ValidHex ( _x , _y ) then
28761: LD_VAR 0 11
28765: PPUSH
28766: LD_VAR 0 12
28770: PPUSH
28771: CALL_OW 488
28775: NOT
28776: IFFALSE 28780
// continue ;
28778: GO 28758
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28780: LD_VAR 0 11
28784: PPUSH
28785: LD_VAR 0 12
28789: PPUSH
28790: CALL_OW 351
28794: PUSH
28795: LD_VAR 0 11
28799: PPUSH
28800: LD_VAR 0 12
28804: PPUSH
28805: CALL_OW 554
28809: AND
28810: IFFALSE 28850
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28812: LD_ADDR_VAR 0 13
28816: PUSH
28817: LD_VAR 0 13
28821: PPUSH
28822: LD_VAR 0 13
28826: PUSH
28827: LD_INT 1
28829: PLUS
28830: PPUSH
28831: LD_VAR 0 11
28835: PUSH
28836: LD_VAR 0 12
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PPUSH
28845: CALL_OW 2
28849: ST_TO_ADDR
// end ;
28850: GO 28758
28852: POP
28853: POP
28854: GO 28738
28856: POP
28857: POP
// if not list then
28858: LD_VAR 0 13
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 28938
// for i in list do
28867: LD_ADDR_VAR 0 6
28871: PUSH
28872: LD_VAR 0 13
28876: PUSH
28877: FOR_IN
28878: IFFALSE 28936
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28880: LD_VAR 0 1
28884: PPUSH
28885: LD_STRING M
28887: PUSH
28888: LD_VAR 0 6
28892: PUSH
28893: LD_INT 1
28895: ARRAY
28896: PUSH
28897: LD_VAR 0 6
28901: PUSH
28902: LD_INT 2
28904: ARRAY
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: PPUSH
28930: CALL_OW 447
28934: GO 28877
28936: POP
28937: POP
// end ;
28938: LD_VAR 0 5
28942: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28943: LD_INT 0
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
28953: PPUSH
28954: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 302
28964: NOT
28965: PUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: CALL_OW 488
28980: NOT
28981: OR
28982: PUSH
28983: LD_VAR 0 4
28987: NOT
28988: OR
28989: IFFALSE 28993
// exit ;
28991: GO 29506
// list := [ ] ;
28993: LD_ADDR_VAR 0 13
28997: PUSH
28998: EMPTY
28999: ST_TO_ADDR
// if x - r < 0 then
29000: LD_VAR 0 2
29004: PUSH
29005: LD_VAR 0 4
29009: MINUS
29010: PUSH
29011: LD_INT 0
29013: LESS
29014: IFFALSE 29026
// min_x := 0 else
29016: LD_ADDR_VAR 0 7
29020: PUSH
29021: LD_INT 0
29023: ST_TO_ADDR
29024: GO 29042
// min_x := x - r ;
29026: LD_ADDR_VAR 0 7
29030: PUSH
29031: LD_VAR 0 2
29035: PUSH
29036: LD_VAR 0 4
29040: MINUS
29041: ST_TO_ADDR
// if y - r < 0 then
29042: LD_VAR 0 3
29046: PUSH
29047: LD_VAR 0 4
29051: MINUS
29052: PUSH
29053: LD_INT 0
29055: LESS
29056: IFFALSE 29068
// min_y := 0 else
29058: LD_ADDR_VAR 0 8
29062: PUSH
29063: LD_INT 0
29065: ST_TO_ADDR
29066: GO 29084
// min_y := y - r ;
29068: LD_ADDR_VAR 0 8
29072: PUSH
29073: LD_VAR 0 3
29077: PUSH
29078: LD_VAR 0 4
29082: MINUS
29083: ST_TO_ADDR
// max_x := x + r ;
29084: LD_ADDR_VAR 0 9
29088: PUSH
29089: LD_VAR 0 2
29093: PUSH
29094: LD_VAR 0 4
29098: PLUS
29099: ST_TO_ADDR
// max_y := y + r ;
29100: LD_ADDR_VAR 0 10
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_VAR 0 4
29114: PLUS
29115: ST_TO_ADDR
// for _x = min_x to max_x do
29116: LD_ADDR_VAR 0 11
29120: PUSH
29121: DOUBLE
29122: LD_VAR 0 7
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 9
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29251
// for _y = min_y to max_y do
29136: LD_ADDR_VAR 0 12
29140: PUSH
29141: DOUBLE
29142: LD_VAR 0 8
29146: DEC
29147: ST_TO_ADDR
29148: LD_VAR 0 10
29152: PUSH
29153: FOR_TO
29154: IFFALSE 29247
// begin if not ValidHex ( _x , _y ) then
29156: LD_VAR 0 11
29160: PPUSH
29161: LD_VAR 0 12
29165: PPUSH
29166: CALL_OW 488
29170: NOT
29171: IFFALSE 29175
// continue ;
29173: GO 29153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29175: LD_VAR 0 11
29179: PPUSH
29180: LD_VAR 0 12
29184: PPUSH
29185: CALL_OW 351
29189: PUSH
29190: LD_VAR 0 11
29194: PPUSH
29195: LD_VAR 0 12
29199: PPUSH
29200: CALL_OW 554
29204: AND
29205: IFFALSE 29245
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29207: LD_ADDR_VAR 0 13
29211: PUSH
29212: LD_VAR 0 13
29216: PPUSH
29217: LD_VAR 0 13
29221: PUSH
29222: LD_INT 1
29224: PLUS
29225: PPUSH
29226: LD_VAR 0 11
29230: PUSH
29231: LD_VAR 0 12
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PPUSH
29240: CALL_OW 2
29244: ST_TO_ADDR
// end ;
29245: GO 29153
29247: POP
29248: POP
29249: GO 29133
29251: POP
29252: POP
// if not list then
29253: LD_VAR 0 13
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29506
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29262: LD_ADDR_VAR 0 13
29266: PUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: LD_VAR 0 13
29276: PPUSH
29277: LD_INT 1
29279: PPUSH
29280: LD_INT 1
29282: PPUSH
29283: CALL 38282 0 4
29287: ST_TO_ADDR
// ComStop ( flame ) ;
29288: LD_VAR 0 1
29292: PPUSH
29293: CALL_OW 141
// for i in list do
29297: LD_ADDR_VAR 0 6
29301: PUSH
29302: LD_VAR 0 13
29306: PUSH
29307: FOR_IN
29308: IFFALSE 29339
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29310: LD_VAR 0 1
29314: PPUSH
29315: LD_VAR 0 6
29319: PUSH
29320: LD_INT 1
29322: ARRAY
29323: PPUSH
29324: LD_VAR 0 6
29328: PUSH
29329: LD_INT 2
29331: ARRAY
29332: PPUSH
29333: CALL_OW 176
29337: GO 29307
29339: POP
29340: POP
// repeat wait ( 0 0$1 ) ;
29341: LD_INT 35
29343: PPUSH
29344: CALL_OW 67
// task := GetTaskList ( flame ) ;
29348: LD_ADDR_VAR 0 14
29352: PUSH
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 437
29362: ST_TO_ADDR
// if not task then
29363: LD_VAR 0 14
29367: NOT
29368: IFFALSE 29372
// exit ;
29370: GO 29506
// if task [ 1 ] [ 1 ] <> | then
29372: LD_VAR 0 14
29376: PUSH
29377: LD_INT 1
29379: ARRAY
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PUSH
29385: LD_STRING |
29387: NONEQUAL
29388: IFFALSE 29392
// exit ;
29390: GO 29506
// _x := task [ 1 ] [ 2 ] ;
29392: LD_ADDR_VAR 0 11
29396: PUSH
29397: LD_VAR 0 14
29401: PUSH
29402: LD_INT 1
29404: ARRAY
29405: PUSH
29406: LD_INT 2
29408: ARRAY
29409: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29410: LD_ADDR_VAR 0 12
29414: PUSH
29415: LD_VAR 0 14
29419: PUSH
29420: LD_INT 1
29422: ARRAY
29423: PUSH
29424: LD_INT 3
29426: ARRAY
29427: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29428: LD_VAR 0 11
29432: PPUSH
29433: LD_VAR 0 12
29437: PPUSH
29438: CALL_OW 351
29442: NOT
29443: PUSH
29444: LD_VAR 0 11
29448: PPUSH
29449: LD_VAR 0 12
29453: PPUSH
29454: CALL_OW 554
29458: NOT
29459: OR
29460: IFFALSE 29494
// begin task := Delete ( task , 1 ) ;
29462: LD_ADDR_VAR 0 14
29466: PUSH
29467: LD_VAR 0 14
29471: PPUSH
29472: LD_INT 1
29474: PPUSH
29475: CALL_OW 3
29479: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_VAR 0 14
29489: PPUSH
29490: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL_OW 314
29503: NOT
29504: IFFALSE 29341
// end ;
29506: LD_VAR 0 5
29510: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29511: LD_EXP 84
29515: NOT
29516: IFFALSE 29566
29518: GO 29520
29520: DISABLE
// begin initHack := true ;
29521: LD_ADDR_EXP 84
29525: PUSH
29526: LD_INT 1
29528: ST_TO_ADDR
// hackTanks := [ ] ;
29529: LD_ADDR_EXP 85
29533: PUSH
29534: EMPTY
29535: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29536: LD_ADDR_EXP 86
29540: PUSH
29541: EMPTY
29542: ST_TO_ADDR
// hackLimit := 3 ;
29543: LD_ADDR_EXP 87
29547: PUSH
29548: LD_INT 3
29550: ST_TO_ADDR
// hackDist := 12 ;
29551: LD_ADDR_EXP 88
29555: PUSH
29556: LD_INT 12
29558: ST_TO_ADDR
// hackCounter := [ ] ;
29559: LD_ADDR_EXP 89
29563: PUSH
29564: EMPTY
29565: ST_TO_ADDR
// end ;
29566: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29567: LD_EXP 84
29571: PUSH
29572: LD_INT 34
29574: PUSH
29575: LD_INT 99
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PPUSH
29582: CALL_OW 69
29586: AND
29587: IFFALSE 29840
29589: GO 29591
29591: DISABLE
29592: LD_INT 0
29594: PPUSH
29595: PPUSH
// begin enable ;
29596: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29597: LD_ADDR_VAR 0 1
29601: PUSH
29602: LD_INT 34
29604: PUSH
29605: LD_INT 99
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PPUSH
29612: CALL_OW 69
29616: PUSH
29617: FOR_IN
29618: IFFALSE 29838
// begin if not i in hackTanks then
29620: LD_VAR 0 1
29624: PUSH
29625: LD_EXP 85
29629: IN
29630: NOT
29631: IFFALSE 29714
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29633: LD_ADDR_EXP 85
29637: PUSH
29638: LD_EXP 85
29642: PPUSH
29643: LD_EXP 85
29647: PUSH
29648: LD_INT 1
29650: PLUS
29651: PPUSH
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 1
29661: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29662: LD_ADDR_EXP 86
29666: PUSH
29667: LD_EXP 86
29671: PPUSH
29672: LD_EXP 86
29676: PUSH
29677: LD_INT 1
29679: PLUS
29680: PPUSH
29681: EMPTY
29682: PPUSH
29683: CALL_OW 1
29687: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29688: LD_ADDR_EXP 89
29692: PUSH
29693: LD_EXP 89
29697: PPUSH
29698: LD_EXP 89
29702: PUSH
29703: LD_INT 1
29705: PLUS
29706: PPUSH
29707: EMPTY
29708: PPUSH
29709: CALL_OW 1
29713: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 302
29723: NOT
29724: IFFALSE 29737
// begin HackUnlinkAll ( i ) ;
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL 29843 0 1
// continue ;
29735: GO 29617
// end ; HackCheckCapturedStatus ( i ) ;
29737: LD_VAR 0 1
29741: PPUSH
29742: CALL 30286 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29746: LD_ADDR_VAR 0 2
29750: PUSH
29751: LD_INT 81
29753: PUSH
29754: LD_VAR 0 1
29758: PPUSH
29759: CALL_OW 255
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 33
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 91
29780: PUSH
29781: LD_VAR 0 1
29785: PUSH
29786: LD_EXP 88
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 50
29798: PUSH
29799: EMPTY
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: PPUSH
29808: CALL_OW 69
29812: ST_TO_ADDR
// if not tmp then
29813: LD_VAR 0 2
29817: NOT
29818: IFFALSE 29822
// continue ;
29820: GO 29617
// HackLink ( i , tmp ) ;
29822: LD_VAR 0 1
29826: PPUSH
29827: LD_VAR 0 2
29831: PPUSH
29832: CALL 29979 0 2
// end ;
29836: GO 29617
29838: POP
29839: POP
// end ;
29840: PPOPN 2
29842: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
29847: PPUSH
// if not hack in hackTanks then
29848: LD_VAR 0 1
29852: PUSH
29853: LD_EXP 85
29857: IN
29858: NOT
29859: IFFALSE 29863
// exit ;
29861: GO 29974
// index := GetElementIndex ( hackTanks , hack ) ;
29863: LD_ADDR_VAR 0 4
29867: PUSH
29868: LD_EXP 85
29872: PPUSH
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL 37579 0 2
29882: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29883: LD_EXP 86
29887: PUSH
29888: LD_VAR 0 4
29892: ARRAY
29893: IFFALSE 29974
// begin for i in hackTanksCaptured [ index ] do
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_EXP 86
29904: PUSH
29905: LD_VAR 0 4
29909: ARRAY
29910: PUSH
29911: FOR_IN
29912: IFFALSE 29938
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29914: LD_VAR 0 3
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: LD_VAR 0 3
29927: PUSH
29928: LD_INT 2
29930: ARRAY
29931: PPUSH
29932: CALL_OW 235
29936: GO 29911
29938: POP
29939: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29940: LD_ADDR_EXP 86
29944: PUSH
29945: LD_EXP 86
29949: PPUSH
29950: LD_VAR 0 4
29954: PPUSH
29955: EMPTY
29956: PPUSH
29957: CALL_OW 1
29961: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_INT 0
29969: PPUSH
29970: CALL_OW 505
// end ; end ;
29974: LD_VAR 0 2
29978: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29979: LD_INT 0
29981: PPUSH
29982: PPUSH
29983: PPUSH
// if not hack in hackTanks or not vehicles then
29984: LD_VAR 0 1
29988: PUSH
29989: LD_EXP 85
29993: IN
29994: NOT
29995: PUSH
29996: LD_VAR 0 2
30000: NOT
30001: OR
30002: IFFALSE 30006
// exit ;
30004: GO 30281
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30006: LD_ADDR_VAR 0 2
30010: PUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_VAR 0 2
30020: PPUSH
30021: LD_INT 1
30023: PPUSH
30024: LD_INT 1
30026: PPUSH
30027: CALL 38229 0 4
30031: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30032: LD_ADDR_VAR 0 5
30036: PUSH
30037: LD_EXP 85
30041: PPUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL 37579 0 2
30051: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30052: LD_EXP 86
30056: PUSH
30057: LD_VAR 0 5
30061: ARRAY
30062: PUSH
30063: LD_EXP 87
30067: LESS
30068: IFFALSE 30257
// begin for i := 1 to vehicles do
30070: LD_ADDR_VAR 0 4
30074: PUSH
30075: DOUBLE
30076: LD_INT 1
30078: DEC
30079: ST_TO_ADDR
30080: LD_VAR 0 2
30084: PUSH
30085: FOR_TO
30086: IFFALSE 30255
// begin if hackTanksCaptured [ index ] = hackLimit then
30088: LD_EXP 86
30092: PUSH
30093: LD_VAR 0 5
30097: ARRAY
30098: PUSH
30099: LD_EXP 87
30103: EQUAL
30104: IFFALSE 30108
// break ;
30106: GO 30255
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30108: LD_ADDR_EXP 89
30112: PUSH
30113: LD_EXP 89
30117: PPUSH
30118: LD_VAR 0 5
30122: PPUSH
30123: LD_EXP 89
30127: PUSH
30128: LD_VAR 0 5
30132: ARRAY
30133: PUSH
30134: LD_INT 1
30136: PLUS
30137: PPUSH
30138: CALL_OW 1
30142: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30143: LD_ADDR_EXP 86
30147: PUSH
30148: LD_EXP 86
30152: PPUSH
30153: LD_VAR 0 5
30157: PUSH
30158: LD_EXP 86
30162: PUSH
30163: LD_VAR 0 5
30167: ARRAY
30168: PUSH
30169: LD_INT 1
30171: PLUS
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PPUSH
30177: LD_VAR 0 2
30181: PUSH
30182: LD_VAR 0 4
30186: ARRAY
30187: PUSH
30188: LD_VAR 0 2
30192: PUSH
30193: LD_VAR 0 4
30197: ARRAY
30198: PPUSH
30199: CALL_OW 255
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PPUSH
30208: CALL 37794 0 3
30212: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30213: LD_VAR 0 2
30217: PUSH
30218: LD_VAR 0 4
30222: ARRAY
30223: PPUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 255
30233: PPUSH
30234: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30238: LD_VAR 0 2
30242: PUSH
30243: LD_VAR 0 4
30247: ARRAY
30248: PPUSH
30249: CALL_OW 141
// end ;
30253: GO 30085
30255: POP
30256: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30257: LD_VAR 0 1
30261: PPUSH
30262: LD_EXP 86
30266: PUSH
30267: LD_VAR 0 5
30271: ARRAY
30272: PUSH
30273: LD_INT 0
30275: PLUS
30276: PPUSH
30277: CALL_OW 505
// end ;
30281: LD_VAR 0 3
30285: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30286: LD_INT 0
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
// if not hack in hackTanks then
30292: LD_VAR 0 1
30296: PUSH
30297: LD_EXP 85
30301: IN
30302: NOT
30303: IFFALSE 30307
// exit ;
30305: GO 30547
// index := GetElementIndex ( hackTanks , hack ) ;
30307: LD_ADDR_VAR 0 4
30311: PUSH
30312: LD_EXP 85
30316: PPUSH
30317: LD_VAR 0 1
30321: PPUSH
30322: CALL 37579 0 2
30326: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30327: LD_ADDR_VAR 0 3
30331: PUSH
30332: DOUBLE
30333: LD_EXP 86
30337: PUSH
30338: LD_VAR 0 4
30342: ARRAY
30343: INC
30344: ST_TO_ADDR
30345: LD_INT 1
30347: PUSH
30348: FOR_DOWNTO
30349: IFFALSE 30521
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_EXP 86
30360: PUSH
30361: LD_VAR 0 4
30365: ARRAY
30366: PUSH
30367: LD_VAR 0 3
30371: ARRAY
30372: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30373: LD_VAR 0 5
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PPUSH
30382: CALL_OW 302
30386: NOT
30387: PUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_INT 1
30395: ARRAY
30396: PPUSH
30397: CALL_OW 255
30401: PUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 255
30411: NONEQUAL
30412: OR
30413: IFFALSE 30519
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30415: LD_VAR 0 5
30419: PUSH
30420: LD_INT 1
30422: ARRAY
30423: PPUSH
30424: CALL_OW 305
30428: PUSH
30429: LD_VAR 0 5
30433: PUSH
30434: LD_INT 1
30436: ARRAY
30437: PPUSH
30438: CALL_OW 255
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 255
30452: EQUAL
30453: AND
30454: IFFALSE 30478
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30456: LD_VAR 0 5
30460: PUSH
30461: LD_INT 1
30463: ARRAY
30464: PPUSH
30465: LD_VAR 0 5
30469: PUSH
30470: LD_INT 2
30472: ARRAY
30473: PPUSH
30474: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30478: LD_ADDR_EXP 86
30482: PUSH
30483: LD_EXP 86
30487: PPUSH
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_EXP 86
30497: PUSH
30498: LD_VAR 0 4
30502: ARRAY
30503: PPUSH
30504: LD_VAR 0 3
30508: PPUSH
30509: CALL_OW 3
30513: PPUSH
30514: CALL_OW 1
30518: ST_TO_ADDR
// end ; end ;
30519: GO 30348
30521: POP
30522: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30523: LD_VAR 0 1
30527: PPUSH
30528: LD_EXP 86
30532: PUSH
30533: LD_VAR 0 4
30537: ARRAY
30538: PUSH
30539: LD_INT 0
30541: PLUS
30542: PPUSH
30543: CALL_OW 505
// end ;
30547: LD_VAR 0 2
30551: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30552: LD_INT 0
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
// if not hack in hackTanks then
30558: LD_VAR 0 1
30562: PUSH
30563: LD_EXP 85
30567: IN
30568: NOT
30569: IFFALSE 30573
// exit ;
30571: GO 30658
// index := GetElementIndex ( hackTanks , hack ) ;
30573: LD_ADDR_VAR 0 5
30577: PUSH
30578: LD_EXP 85
30582: PPUSH
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL 37579 0 2
30592: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30593: LD_ADDR_VAR 0 4
30597: PUSH
30598: DOUBLE
30599: LD_INT 1
30601: DEC
30602: ST_TO_ADDR
30603: LD_EXP 86
30607: PUSH
30608: LD_VAR 0 5
30612: ARRAY
30613: PUSH
30614: FOR_TO
30615: IFFALSE 30656
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30617: LD_EXP 86
30621: PUSH
30622: LD_VAR 0 5
30626: ARRAY
30627: PUSH
30628: LD_VAR 0 4
30632: ARRAY
30633: PUSH
30634: LD_INT 1
30636: ARRAY
30637: PUSH
30638: LD_VAR 0 2
30642: EQUAL
30643: IFFALSE 30654
// KillUnit ( vehicle ) ;
30645: LD_VAR 0 2
30649: PPUSH
30650: CALL_OW 66
30654: GO 30614
30656: POP
30657: POP
// end ;
30658: LD_VAR 0 3
30662: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30663: LD_EXP 90
30667: NOT
30668: IFFALSE 30703
30670: GO 30672
30672: DISABLE
// begin initMiner := true ;
30673: LD_ADDR_EXP 90
30677: PUSH
30678: LD_INT 1
30680: ST_TO_ADDR
// minersList := [ ] ;
30681: LD_ADDR_EXP 91
30685: PUSH
30686: EMPTY
30687: ST_TO_ADDR
// minerMinesList := [ ] ;
30688: LD_ADDR_EXP 92
30692: PUSH
30693: EMPTY
30694: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30695: LD_ADDR_EXP 93
30699: PUSH
30700: LD_INT 5
30702: ST_TO_ADDR
// end ;
30703: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30704: LD_EXP 90
30708: PUSH
30709: LD_INT 34
30711: PUSH
30712: LD_INT 81
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: AND
30724: IFFALSE 31185
30726: GO 30728
30728: DISABLE
30729: LD_INT 0
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
// begin enable ;
30735: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30736: LD_ADDR_VAR 0 1
30740: PUSH
30741: LD_INT 34
30743: PUSH
30744: LD_INT 81
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PPUSH
30751: CALL_OW 69
30755: PUSH
30756: FOR_IN
30757: IFFALSE 30829
// begin if not i in minersList then
30759: LD_VAR 0 1
30763: PUSH
30764: LD_EXP 91
30768: IN
30769: NOT
30770: IFFALSE 30827
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30772: LD_ADDR_EXP 91
30776: PUSH
30777: LD_EXP 91
30781: PPUSH
30782: LD_EXP 91
30786: PUSH
30787: LD_INT 1
30789: PLUS
30790: PPUSH
30791: LD_VAR 0 1
30795: PPUSH
30796: CALL_OW 1
30800: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30801: LD_ADDR_EXP 92
30805: PUSH
30806: LD_EXP 92
30810: PPUSH
30811: LD_EXP 92
30815: PUSH
30816: LD_INT 1
30818: PLUS
30819: PPUSH
30820: EMPTY
30821: PPUSH
30822: CALL_OW 1
30826: ST_TO_ADDR
// end end ;
30827: GO 30756
30829: POP
30830: POP
// for i := minerMinesList downto 1 do
30831: LD_ADDR_VAR 0 1
30835: PUSH
30836: DOUBLE
30837: LD_EXP 92
30841: INC
30842: ST_TO_ADDR
30843: LD_INT 1
30845: PUSH
30846: FOR_DOWNTO
30847: IFFALSE 31183
// begin if IsLive ( minersList [ i ] ) then
30849: LD_EXP 91
30853: PUSH
30854: LD_VAR 0 1
30858: ARRAY
30859: PPUSH
30860: CALL_OW 300
30864: IFFALSE 30892
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30866: LD_EXP 91
30870: PUSH
30871: LD_VAR 0 1
30875: ARRAY
30876: PPUSH
30877: LD_EXP 92
30881: PUSH
30882: LD_VAR 0 1
30886: ARRAY
30887: PPUSH
30888: CALL_OW 505
// if not minerMinesList [ i ] then
30892: LD_EXP 92
30896: PUSH
30897: LD_VAR 0 1
30901: ARRAY
30902: NOT
30903: IFFALSE 30907
// continue ;
30905: GO 30846
// for j := minerMinesList [ i ] downto 1 do
30907: LD_ADDR_VAR 0 2
30911: PUSH
30912: DOUBLE
30913: LD_EXP 92
30917: PUSH
30918: LD_VAR 0 1
30922: ARRAY
30923: INC
30924: ST_TO_ADDR
30925: LD_INT 1
30927: PUSH
30928: FOR_DOWNTO
30929: IFFALSE 31179
// begin side := GetSide ( minersList [ i ] ) ;
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_EXP 91
30940: PUSH
30941: LD_VAR 0 1
30945: ARRAY
30946: PPUSH
30947: CALL_OW 255
30951: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30952: LD_ADDR_VAR 0 4
30956: PUSH
30957: LD_EXP 92
30961: PUSH
30962: LD_VAR 0 1
30966: ARRAY
30967: PUSH
30968: LD_VAR 0 2
30972: ARRAY
30973: PUSH
30974: LD_INT 1
30976: ARRAY
30977: PPUSH
30978: LD_EXP 92
30982: PUSH
30983: LD_VAR 0 1
30987: ARRAY
30988: PUSH
30989: LD_VAR 0 2
30993: ARRAY
30994: PUSH
30995: LD_INT 2
30997: ARRAY
30998: PPUSH
30999: CALL_OW 428
31003: ST_TO_ADDR
// if not tmp then
31004: LD_VAR 0 4
31008: NOT
31009: IFFALSE 31013
// continue ;
31011: GO 30928
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31013: LD_VAR 0 4
31017: PUSH
31018: LD_INT 81
31020: PUSH
31021: LD_VAR 0 3
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PPUSH
31030: CALL_OW 69
31034: IN
31035: PUSH
31036: LD_EXP 92
31040: PUSH
31041: LD_VAR 0 1
31045: ARRAY
31046: PUSH
31047: LD_VAR 0 2
31051: ARRAY
31052: PUSH
31053: LD_INT 1
31055: ARRAY
31056: PPUSH
31057: LD_EXP 92
31061: PUSH
31062: LD_VAR 0 1
31066: ARRAY
31067: PUSH
31068: LD_VAR 0 2
31072: ARRAY
31073: PUSH
31074: LD_INT 2
31076: ARRAY
31077: PPUSH
31078: CALL_OW 458
31082: AND
31083: IFFALSE 31177
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31085: LD_EXP 92
31089: PUSH
31090: LD_VAR 0 1
31094: ARRAY
31095: PUSH
31096: LD_VAR 0 2
31100: ARRAY
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: LD_EXP 92
31110: PUSH
31111: LD_VAR 0 1
31115: ARRAY
31116: PUSH
31117: LD_VAR 0 2
31121: ARRAY
31122: PUSH
31123: LD_INT 2
31125: ARRAY
31126: PPUSH
31127: LD_VAR 0 3
31131: PPUSH
31132: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31136: LD_ADDR_EXP 92
31140: PUSH
31141: LD_EXP 92
31145: PPUSH
31146: LD_VAR 0 1
31150: PPUSH
31151: LD_EXP 92
31155: PUSH
31156: LD_VAR 0 1
31160: ARRAY
31161: PPUSH
31162: LD_VAR 0 2
31166: PPUSH
31167: CALL_OW 3
31171: PPUSH
31172: CALL_OW 1
31176: ST_TO_ADDR
// end ; end ;
31177: GO 30928
31179: POP
31180: POP
// end ;
31181: GO 30846
31183: POP
31184: POP
// end ;
31185: PPOPN 4
31187: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31188: LD_INT 0
31190: PPUSH
31191: PPUSH
// result := false ;
31192: LD_ADDR_VAR 0 4
31196: PUSH
31197: LD_INT 0
31199: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31200: LD_VAR 0 1
31204: PPUSH
31205: CALL_OW 264
31209: PUSH
31210: LD_INT 81
31212: EQUAL
31213: NOT
31214: IFFALSE 31218
// exit ;
31216: GO 31458
// index := GetElementIndex ( minersList , unit ) ;
31218: LD_ADDR_VAR 0 5
31222: PUSH
31223: LD_EXP 91
31227: PPUSH
31228: LD_VAR 0 1
31232: PPUSH
31233: CALL 37579 0 2
31237: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31238: LD_EXP 92
31242: PUSH
31243: LD_VAR 0 5
31247: ARRAY
31248: PUSH
31249: LD_EXP 93
31253: GREATEREQUAL
31254: IFFALSE 31258
// exit ;
31256: GO 31458
// ComMoveXY ( unit , x , y ) ;
31258: LD_VAR 0 1
31262: PPUSH
31263: LD_VAR 0 2
31267: PPUSH
31268: LD_VAR 0 3
31272: PPUSH
31273: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31277: LD_INT 35
31279: PPUSH
31280: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31284: LD_VAR 0 1
31288: PPUSH
31289: LD_VAR 0 2
31293: PPUSH
31294: LD_VAR 0 3
31298: PPUSH
31299: CALL 69340 0 3
31303: NOT
31304: PUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: CALL_OW 314
31314: AND
31315: IFFALSE 31319
// exit ;
31317: GO 31458
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31319: LD_VAR 0 2
31323: PPUSH
31324: LD_VAR 0 3
31328: PPUSH
31329: CALL_OW 428
31333: PUSH
31334: LD_VAR 0 1
31338: EQUAL
31339: PUSH
31340: LD_VAR 0 1
31344: PPUSH
31345: CALL_OW 314
31349: NOT
31350: AND
31351: IFFALSE 31277
// PlaySoundXY ( x , y , PlantMine ) ;
31353: LD_VAR 0 2
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: LD_STRING PlantMine
31365: PPUSH
31366: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31370: LD_VAR 0 2
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 255
31389: PPUSH
31390: LD_INT 0
31392: PPUSH
31393: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31397: LD_ADDR_EXP 92
31401: PUSH
31402: LD_EXP 92
31406: PPUSH
31407: LD_VAR 0 5
31411: PUSH
31412: LD_EXP 92
31416: PUSH
31417: LD_VAR 0 5
31421: ARRAY
31422: PUSH
31423: LD_INT 1
31425: PLUS
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: LD_VAR 0 2
31435: PUSH
31436: LD_VAR 0 3
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PPUSH
31445: CALL 37794 0 3
31449: ST_TO_ADDR
// result := true ;
31450: LD_ADDR_VAR 0 4
31454: PUSH
31455: LD_INT 1
31457: ST_TO_ADDR
// end ;
31458: LD_VAR 0 4
31462: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31463: LD_INT 0
31465: PPUSH
31466: PPUSH
31467: PPUSH
// if not unit in minersList then
31468: LD_VAR 0 1
31472: PUSH
31473: LD_EXP 91
31477: IN
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31875
// index := GetElementIndex ( minersList , unit ) ;
31483: LD_ADDR_VAR 0 6
31487: PUSH
31488: LD_EXP 91
31492: PPUSH
31493: LD_VAR 0 1
31497: PPUSH
31498: CALL 37579 0 2
31502: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31503: LD_ADDR_VAR 0 5
31507: PUSH
31508: DOUBLE
31509: LD_EXP 92
31513: PUSH
31514: LD_VAR 0 6
31518: ARRAY
31519: INC
31520: ST_TO_ADDR
31521: LD_INT 1
31523: PUSH
31524: FOR_DOWNTO
31525: IFFALSE 31686
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31527: LD_EXP 92
31531: PUSH
31532: LD_VAR 0 6
31536: ARRAY
31537: PUSH
31538: LD_VAR 0 5
31542: ARRAY
31543: PUSH
31544: LD_INT 1
31546: ARRAY
31547: PUSH
31548: LD_VAR 0 2
31552: EQUAL
31553: PUSH
31554: LD_EXP 92
31558: PUSH
31559: LD_VAR 0 6
31563: ARRAY
31564: PUSH
31565: LD_VAR 0 5
31569: ARRAY
31570: PUSH
31571: LD_INT 2
31573: ARRAY
31574: PUSH
31575: LD_VAR 0 3
31579: EQUAL
31580: AND
31581: IFFALSE 31684
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31583: LD_EXP 92
31587: PUSH
31588: LD_VAR 0 6
31592: ARRAY
31593: PUSH
31594: LD_VAR 0 5
31598: ARRAY
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: PPUSH
31604: LD_EXP 92
31608: PUSH
31609: LD_VAR 0 6
31613: ARRAY
31614: PUSH
31615: LD_VAR 0 5
31619: ARRAY
31620: PUSH
31621: LD_INT 2
31623: ARRAY
31624: PPUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 255
31634: PPUSH
31635: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31639: LD_ADDR_EXP 92
31643: PUSH
31644: LD_EXP 92
31648: PPUSH
31649: LD_VAR 0 6
31653: PPUSH
31654: LD_EXP 92
31658: PUSH
31659: LD_VAR 0 6
31663: ARRAY
31664: PPUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: CALL_OW 3
31674: PPUSH
31675: CALL_OW 1
31679: ST_TO_ADDR
// exit ;
31680: POP
31681: POP
31682: GO 31875
// end ; end ;
31684: GO 31524
31686: POP
31687: POP
// for i := minerMinesList [ index ] downto 1 do
31688: LD_ADDR_VAR 0 5
31692: PUSH
31693: DOUBLE
31694: LD_EXP 92
31698: PUSH
31699: LD_VAR 0 6
31703: ARRAY
31704: INC
31705: ST_TO_ADDR
31706: LD_INT 1
31708: PUSH
31709: FOR_DOWNTO
31710: IFFALSE 31873
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31712: LD_EXP 92
31716: PUSH
31717: LD_VAR 0 6
31721: ARRAY
31722: PUSH
31723: LD_VAR 0 5
31727: ARRAY
31728: PUSH
31729: LD_INT 1
31731: ARRAY
31732: PPUSH
31733: LD_EXP 92
31737: PUSH
31738: LD_VAR 0 6
31742: ARRAY
31743: PUSH
31744: LD_VAR 0 5
31748: ARRAY
31749: PUSH
31750: LD_INT 2
31752: ARRAY
31753: PPUSH
31754: LD_VAR 0 2
31758: PPUSH
31759: LD_VAR 0 3
31763: PPUSH
31764: CALL_OW 298
31768: PUSH
31769: LD_INT 6
31771: LESS
31772: IFFALSE 31871
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31774: LD_EXP 92
31778: PUSH
31779: LD_VAR 0 6
31783: ARRAY
31784: PUSH
31785: LD_VAR 0 5
31789: ARRAY
31790: PUSH
31791: LD_INT 1
31793: ARRAY
31794: PPUSH
31795: LD_EXP 92
31799: PUSH
31800: LD_VAR 0 6
31804: ARRAY
31805: PUSH
31806: LD_VAR 0 5
31810: ARRAY
31811: PUSH
31812: LD_INT 2
31814: ARRAY
31815: PPUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 255
31825: PPUSH
31826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31830: LD_ADDR_EXP 92
31834: PUSH
31835: LD_EXP 92
31839: PPUSH
31840: LD_VAR 0 6
31844: PPUSH
31845: LD_EXP 92
31849: PUSH
31850: LD_VAR 0 6
31854: ARRAY
31855: PPUSH
31856: LD_VAR 0 5
31860: PPUSH
31861: CALL_OW 3
31865: PPUSH
31866: CALL_OW 1
31870: ST_TO_ADDR
// end ; end ;
31871: GO 31709
31873: POP
31874: POP
// end ;
31875: LD_VAR 0 4
31879: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31880: LD_INT 0
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
31890: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31891: LD_VAR 0 1
31895: PPUSH
31896: CALL_OW 264
31900: PUSH
31901: LD_INT 81
31903: EQUAL
31904: NOT
31905: PUSH
31906: LD_VAR 0 1
31910: PUSH
31911: LD_EXP 91
31915: IN
31916: NOT
31917: OR
31918: IFFALSE 31922
// exit ;
31920: GO 32244
// index := GetElementIndex ( minersList , unit ) ;
31922: LD_ADDR_VAR 0 6
31926: PUSH
31927: LD_EXP 91
31931: PPUSH
31932: LD_VAR 0 1
31936: PPUSH
31937: CALL 37579 0 2
31941: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31942: LD_ADDR_VAR 0 8
31946: PUSH
31947: LD_EXP 93
31951: PUSH
31952: LD_EXP 92
31956: PUSH
31957: LD_VAR 0 6
31961: ARRAY
31962: MINUS
31963: ST_TO_ADDR
// if not minesFreeAmount then
31964: LD_VAR 0 8
31968: NOT
31969: IFFALSE 31973
// exit ;
31971: GO 32244
// tmp := [ ] ;
31973: LD_ADDR_VAR 0 7
31977: PUSH
31978: EMPTY
31979: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31980: LD_ADDR_VAR 0 5
31984: PUSH
31985: DOUBLE
31986: LD_INT 1
31988: DEC
31989: ST_TO_ADDR
31990: LD_VAR 0 8
31994: PUSH
31995: FOR_TO
31996: IFFALSE 32191
// begin _d := rand ( 0 , 5 ) ;
31998: LD_ADDR_VAR 0 11
32002: PUSH
32003: LD_INT 0
32005: PPUSH
32006: LD_INT 5
32008: PPUSH
32009: CALL_OW 12
32013: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32014: LD_ADDR_VAR 0 12
32018: PUSH
32019: LD_INT 2
32021: PPUSH
32022: LD_INT 6
32024: PPUSH
32025: CALL_OW 12
32029: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_VAR 0 2
32039: PPUSH
32040: LD_VAR 0 11
32044: PPUSH
32045: LD_VAR 0 12
32049: PPUSH
32050: CALL_OW 272
32054: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32055: LD_ADDR_VAR 0 10
32059: PUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: LD_VAR 0 11
32069: PPUSH
32070: LD_VAR 0 12
32074: PPUSH
32075: CALL_OW 273
32079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32080: LD_VAR 0 9
32084: PPUSH
32085: LD_VAR 0 10
32089: PPUSH
32090: CALL_OW 488
32094: PUSH
32095: LD_VAR 0 9
32099: PUSH
32100: LD_VAR 0 10
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_VAR 0 7
32113: IN
32114: NOT
32115: AND
32116: PUSH
32117: LD_VAR 0 9
32121: PPUSH
32122: LD_VAR 0 10
32126: PPUSH
32127: CALL_OW 458
32131: NOT
32132: AND
32133: IFFALSE 32175
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32135: LD_ADDR_VAR 0 7
32139: PUSH
32140: LD_VAR 0 7
32144: PPUSH
32145: LD_VAR 0 7
32149: PUSH
32150: LD_INT 1
32152: PLUS
32153: PPUSH
32154: LD_VAR 0 9
32158: PUSH
32159: LD_VAR 0 10
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PPUSH
32168: CALL_OW 1
32172: ST_TO_ADDR
32173: GO 32189
// i := i - 1 ;
32175: LD_ADDR_VAR 0 5
32179: PUSH
32180: LD_VAR 0 5
32184: PUSH
32185: LD_INT 1
32187: MINUS
32188: ST_TO_ADDR
// end ;
32189: GO 31995
32191: POP
32192: POP
// for i in tmp do
32193: LD_ADDR_VAR 0 5
32197: PUSH
32198: LD_VAR 0 7
32202: PUSH
32203: FOR_IN
32204: IFFALSE 32242
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_VAR 0 5
32215: PUSH
32216: LD_INT 1
32218: ARRAY
32219: PPUSH
32220: LD_VAR 0 5
32224: PUSH
32225: LD_INT 2
32227: ARRAY
32228: PPUSH
32229: CALL 31188 0 3
32233: NOT
32234: IFFALSE 32240
// exit ;
32236: POP
32237: POP
32238: GO 32244
32240: GO 32203
32242: POP
32243: POP
// end ;
32244: LD_VAR 0 4
32248: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32249: LD_INT 0
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
// if GetClass ( unit ) <> class_sniper then
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 257
32269: PUSH
32270: LD_INT 5
32272: NONEQUAL
32273: IFFALSE 32277
// exit ;
32275: GO 32743
// dist := 8 ;
32277: LD_ADDR_VAR 0 5
32281: PUSH
32282: LD_INT 8
32284: ST_TO_ADDR
// viewRange := 12 ;
32285: LD_ADDR_VAR 0 8
32289: PUSH
32290: LD_INT 12
32292: ST_TO_ADDR
// side := GetSide ( unit ) ;
32293: LD_ADDR_VAR 0 6
32297: PUSH
32298: LD_VAR 0 1
32302: PPUSH
32303: CALL_OW 255
32307: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32308: LD_INT 61
32310: PPUSH
32311: LD_VAR 0 6
32315: PPUSH
32316: CALL_OW 321
32320: PUSH
32321: LD_INT 2
32323: EQUAL
32324: IFFALSE 32334
// viewRange := 16 ;
32326: LD_ADDR_VAR 0 8
32330: PUSH
32331: LD_INT 16
32333: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32334: LD_VAR 0 1
32338: PPUSH
32339: LD_VAR 0 2
32343: PPUSH
32344: LD_VAR 0 3
32348: PPUSH
32349: CALL_OW 297
32353: PUSH
32354: LD_VAR 0 5
32358: GREATER
32359: IFFALSE 32438
// begin ComMoveXY ( unit , x , y ) ;
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 2
32370: PPUSH
32371: LD_VAR 0 3
32375: PPUSH
32376: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32380: LD_INT 35
32382: PPUSH
32383: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32387: LD_VAR 0 1
32391: PPUSH
32392: LD_VAR 0 2
32396: PPUSH
32397: LD_VAR 0 3
32401: PPUSH
32402: CALL 69340 0 3
32406: NOT
32407: IFFALSE 32411
// exit ;
32409: GO 32743
// until GetDistUnitXY ( unit , x , y ) < dist ;
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: LD_VAR 0 3
32425: PPUSH
32426: CALL_OW 297
32430: PUSH
32431: LD_VAR 0 5
32435: LESS
32436: IFFALSE 32380
// end ; ComTurnXY ( unit , x , y ) ;
32438: LD_VAR 0 1
32442: PPUSH
32443: LD_VAR 0 2
32447: PPUSH
32448: LD_VAR 0 3
32452: PPUSH
32453: CALL_OW 118
// repeat if Multiplayer then
32457: LD_OWVAR 4
32461: IFFALSE 32472
// wait ( 35 ) else
32463: LD_INT 35
32465: PPUSH
32466: CALL_OW 67
32470: GO 32479
// wait ( 5 ) ;
32472: LD_INT 5
32474: PPUSH
32475: CALL_OW 67
// _d := GetDir ( unit ) ;
32479: LD_ADDR_VAR 0 11
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 254
32493: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32494: LD_ADDR_VAR 0 7
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 250
32508: PPUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 251
32518: PPUSH
32519: LD_VAR 0 2
32523: PPUSH
32524: LD_VAR 0 3
32528: PPUSH
32529: CALL 71948 0 4
32533: ST_TO_ADDR
// until dir = _d ;
32534: LD_VAR 0 7
32538: PUSH
32539: LD_VAR 0 11
32543: EQUAL
32544: IFFALSE 32457
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32546: LD_ADDR_VAR 0 9
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 250
32560: PPUSH
32561: LD_VAR 0 7
32565: PPUSH
32566: LD_VAR 0 5
32570: PPUSH
32571: CALL_OW 272
32575: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32576: LD_ADDR_VAR 0 10
32580: PUSH
32581: LD_VAR 0 1
32585: PPUSH
32586: CALL_OW 251
32590: PPUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: LD_VAR 0 5
32600: PPUSH
32601: CALL_OW 273
32605: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32606: LD_VAR 0 9
32610: PPUSH
32611: LD_VAR 0 10
32615: PPUSH
32616: CALL_OW 488
32620: NOT
32621: IFFALSE 32625
// exit ;
32623: GO 32743
// ComAnimCustom ( unit , 1 ) ;
32625: LD_VAR 0 1
32629: PPUSH
32630: LD_INT 1
32632: PPUSH
32633: CALL_OW 592
// p := 0 ;
32637: LD_ADDR_VAR 0 12
32641: PUSH
32642: LD_INT 0
32644: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32645: LD_VAR 0 9
32649: PPUSH
32650: LD_VAR 0 10
32654: PPUSH
32655: LD_VAR 0 6
32659: PPUSH
32660: LD_VAR 0 8
32664: PPUSH
32665: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32669: LD_INT 35
32671: PPUSH
32672: CALL_OW 67
// p := Inc ( p ) ;
32676: LD_ADDR_VAR 0 12
32680: PUSH
32681: LD_VAR 0 12
32685: PPUSH
32686: CALL 71904 0 1
32690: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32691: LD_VAR 0 12
32695: PUSH
32696: LD_INT 3
32698: EQUAL
32699: PUSH
32700: LD_VAR 0 1
32704: PPUSH
32705: CALL_OW 302
32709: NOT
32710: OR
32711: PUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 301
32721: OR
32722: IFFALSE 32669
// RemoveSeeing ( _x , _y , side ) ;
32724: LD_VAR 0 9
32728: PPUSH
32729: LD_VAR 0 10
32733: PPUSH
32734: LD_VAR 0 6
32738: PPUSH
32739: CALL_OW 331
// end ; end_of_file
32743: LD_VAR 0 4
32747: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
// if exist_mode then
32752: LD_VAR 0 2
32756: IFFALSE 32802
// begin unit := CreateCharacter ( prefix & ident ) ;
32758: LD_ADDR_VAR 0 5
32762: PUSH
32763: LD_VAR 0 3
32767: PUSH
32768: LD_VAR 0 1
32772: STR
32773: PPUSH
32774: CALL_OW 34
32778: ST_TO_ADDR
// if unit then
32779: LD_VAR 0 5
32783: IFFALSE 32800
// DeleteCharacters ( prefix & ident ) ;
32785: LD_VAR 0 3
32789: PUSH
32790: LD_VAR 0 1
32794: STR
32795: PPUSH
32796: CALL_OW 40
// end else
32800: GO 32817
// unit := NewCharacter ( ident ) ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 25
32816: ST_TO_ADDR
// result := unit ;
32817: LD_ADDR_VAR 0 4
32821: PUSH
32822: LD_VAR 0 5
32826: ST_TO_ADDR
// end ;
32827: LD_VAR 0 4
32831: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
// if exist_mode then
32836: LD_VAR 0 2
32840: IFFALSE 32865
// unit := CreateCharacter ( prefix & ident ) else
32842: LD_ADDR_VAR 0 5
32846: PUSH
32847: LD_VAR 0 3
32851: PUSH
32852: LD_VAR 0 1
32856: STR
32857: PPUSH
32858: CALL_OW 34
32862: ST_TO_ADDR
32863: GO 32880
// unit := NewCharacter ( ident ) ;
32865: LD_ADDR_VAR 0 5
32869: PUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 25
32879: ST_TO_ADDR
// result := unit ;
32880: LD_ADDR_VAR 0 4
32884: PUSH
32885: LD_VAR 0 5
32889: ST_TO_ADDR
// end ;
32890: LD_VAR 0 4
32894: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
// if not side or not nation then
32899: LD_VAR 0 1
32903: NOT
32904: PUSH
32905: LD_VAR 0 2
32909: NOT
32910: OR
32911: IFFALSE 32915
// exit ;
32913: GO 33683
// case nation of nation_american :
32915: LD_VAR 0 2
32919: PUSH
32920: LD_INT 1
32922: DOUBLE
32923: EQUAL
32924: IFTRUE 32928
32926: GO 33142
32928: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32929: LD_ADDR_VAR 0 4
32933: PUSH
32934: LD_INT 35
32936: PUSH
32937: LD_INT 45
32939: PUSH
32940: LD_INT 46
32942: PUSH
32943: LD_INT 47
32945: PUSH
32946: LD_INT 82
32948: PUSH
32949: LD_INT 83
32951: PUSH
32952: LD_INT 84
32954: PUSH
32955: LD_INT 85
32957: PUSH
32958: LD_INT 86
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 6
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 16
32975: PUSH
32976: LD_INT 7
32978: PUSH
32979: LD_INT 12
32981: PUSH
32982: LD_INT 13
32984: PUSH
32985: LD_INT 10
32987: PUSH
32988: LD_INT 14
32990: PUSH
32991: LD_INT 20
32993: PUSH
32994: LD_INT 21
32996: PUSH
32997: LD_INT 22
32999: PUSH
33000: LD_INT 25
33002: PUSH
33003: LD_INT 32
33005: PUSH
33006: LD_INT 27
33008: PUSH
33009: LD_INT 36
33011: PUSH
33012: LD_INT 69
33014: PUSH
33015: LD_INT 39
33017: PUSH
33018: LD_INT 34
33020: PUSH
33021: LD_INT 40
33023: PUSH
33024: LD_INT 48
33026: PUSH
33027: LD_INT 49
33029: PUSH
33030: LD_INT 50
33032: PUSH
33033: LD_INT 51
33035: PUSH
33036: LD_INT 52
33038: PUSH
33039: LD_INT 53
33041: PUSH
33042: LD_INT 54
33044: PUSH
33045: LD_INT 55
33047: PUSH
33048: LD_INT 56
33050: PUSH
33051: LD_INT 57
33053: PUSH
33054: LD_INT 58
33056: PUSH
33057: LD_INT 59
33059: PUSH
33060: LD_INT 60
33062: PUSH
33063: LD_INT 61
33065: PUSH
33066: LD_INT 62
33068: PUSH
33069: LD_INT 80
33071: PUSH
33072: LD_INT 82
33074: PUSH
33075: LD_INT 83
33077: PUSH
33078: LD_INT 84
33080: PUSH
33081: LD_INT 85
33083: PUSH
33084: LD_INT 86
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: ST_TO_ADDR
33140: GO 33607
33142: LD_INT 2
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33150
33148: GO 33376
33150: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_INT 35
33158: PUSH
33159: LD_INT 45
33161: PUSH
33162: LD_INT 46
33164: PUSH
33165: LD_INT 47
33167: PUSH
33168: LD_INT 82
33170: PUSH
33171: LD_INT 83
33173: PUSH
33174: LD_INT 84
33176: PUSH
33177: LD_INT 85
33179: PUSH
33180: LD_INT 87
33182: PUSH
33183: LD_INT 70
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: LD_INT 4
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 6
33203: PUSH
33204: LD_INT 15
33206: PUSH
33207: LD_INT 18
33209: PUSH
33210: LD_INT 7
33212: PUSH
33213: LD_INT 17
33215: PUSH
33216: LD_INT 8
33218: PUSH
33219: LD_INT 20
33221: PUSH
33222: LD_INT 21
33224: PUSH
33225: LD_INT 22
33227: PUSH
33228: LD_INT 72
33230: PUSH
33231: LD_INT 26
33233: PUSH
33234: LD_INT 69
33236: PUSH
33237: LD_INT 39
33239: PUSH
33240: LD_INT 40
33242: PUSH
33243: LD_INT 41
33245: PUSH
33246: LD_INT 42
33248: PUSH
33249: LD_INT 43
33251: PUSH
33252: LD_INT 48
33254: PUSH
33255: LD_INT 49
33257: PUSH
33258: LD_INT 50
33260: PUSH
33261: LD_INT 51
33263: PUSH
33264: LD_INT 52
33266: PUSH
33267: LD_INT 53
33269: PUSH
33270: LD_INT 54
33272: PUSH
33273: LD_INT 55
33275: PUSH
33276: LD_INT 56
33278: PUSH
33279: LD_INT 60
33281: PUSH
33282: LD_INT 61
33284: PUSH
33285: LD_INT 62
33287: PUSH
33288: LD_INT 66
33290: PUSH
33291: LD_INT 67
33293: PUSH
33294: LD_INT 68
33296: PUSH
33297: LD_INT 81
33299: PUSH
33300: LD_INT 82
33302: PUSH
33303: LD_INT 83
33305: PUSH
33306: LD_INT 84
33308: PUSH
33309: LD_INT 85
33311: PUSH
33312: LD_INT 87
33314: PUSH
33315: LD_INT 88
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: ST_TO_ADDR
33374: GO 33607
33376: LD_INT 3
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 33606
33384: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33385: LD_ADDR_VAR 0 4
33389: PUSH
33390: LD_INT 46
33392: PUSH
33393: LD_INT 47
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: LD_INT 82
33404: PUSH
33405: LD_INT 83
33407: PUSH
33408: LD_INT 84
33410: PUSH
33411: LD_INT 85
33413: PUSH
33414: LD_INT 86
33416: PUSH
33417: LD_INT 11
33419: PUSH
33420: LD_INT 9
33422: PUSH
33423: LD_INT 20
33425: PUSH
33426: LD_INT 19
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 24
33434: PUSH
33435: LD_INT 22
33437: PUSH
33438: LD_INT 25
33440: PUSH
33441: LD_INT 28
33443: PUSH
33444: LD_INT 29
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 31
33452: PUSH
33453: LD_INT 37
33455: PUSH
33456: LD_INT 38
33458: PUSH
33459: LD_INT 32
33461: PUSH
33462: LD_INT 27
33464: PUSH
33465: LD_INT 33
33467: PUSH
33468: LD_INT 69
33470: PUSH
33471: LD_INT 39
33473: PUSH
33474: LD_INT 34
33476: PUSH
33477: LD_INT 40
33479: PUSH
33480: LD_INT 71
33482: PUSH
33483: LD_INT 23
33485: PUSH
33486: LD_INT 44
33488: PUSH
33489: LD_INT 48
33491: PUSH
33492: LD_INT 49
33494: PUSH
33495: LD_INT 50
33497: PUSH
33498: LD_INT 51
33500: PUSH
33501: LD_INT 52
33503: PUSH
33504: LD_INT 53
33506: PUSH
33507: LD_INT 54
33509: PUSH
33510: LD_INT 55
33512: PUSH
33513: LD_INT 56
33515: PUSH
33516: LD_INT 57
33518: PUSH
33519: LD_INT 58
33521: PUSH
33522: LD_INT 59
33524: PUSH
33525: LD_INT 63
33527: PUSH
33528: LD_INT 64
33530: PUSH
33531: LD_INT 65
33533: PUSH
33534: LD_INT 82
33536: PUSH
33537: LD_INT 83
33539: PUSH
33540: LD_INT 84
33542: PUSH
33543: LD_INT 85
33545: PUSH
33546: LD_INT 86
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
33604: GO 33607
33606: POP
// if state > - 1 and state < 3 then
33607: LD_VAR 0 3
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: GREATER
33616: PUSH
33617: LD_VAR 0 3
33621: PUSH
33622: LD_INT 3
33624: LESS
33625: AND
33626: IFFALSE 33683
// for i in result do
33628: LD_ADDR_VAR 0 5
33632: PUSH
33633: LD_VAR 0 4
33637: PUSH
33638: FOR_IN
33639: IFFALSE 33681
// if GetTech ( i , side ) <> state then
33641: LD_VAR 0 5
33645: PPUSH
33646: LD_VAR 0 1
33650: PPUSH
33651: CALL_OW 321
33655: PUSH
33656: LD_VAR 0 3
33660: NONEQUAL
33661: IFFALSE 33679
// result := result diff i ;
33663: LD_ADDR_VAR 0 4
33667: PUSH
33668: LD_VAR 0 4
33672: PUSH
33673: LD_VAR 0 5
33677: DIFF
33678: ST_TO_ADDR
33679: GO 33638
33681: POP
33682: POP
// end ;
33683: LD_VAR 0 4
33687: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
33692: PPUSH
// result := true ;
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: LD_INT 1
33700: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33701: LD_ADDR_VAR 0 5
33705: PUSH
33706: LD_VAR 0 2
33710: PPUSH
33711: CALL_OW 480
33715: ST_TO_ADDR
// if not tmp then
33716: LD_VAR 0 5
33720: NOT
33721: IFFALSE 33725
// exit ;
33723: GO 33774
// for i in tmp do
33725: LD_ADDR_VAR 0 4
33729: PUSH
33730: LD_VAR 0 5
33734: PUSH
33735: FOR_IN
33736: IFFALSE 33772
// if GetTech ( i , side ) <> state_researched then
33738: LD_VAR 0 4
33742: PPUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 321
33752: PUSH
33753: LD_INT 2
33755: NONEQUAL
33756: IFFALSE 33770
// begin result := false ;
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 0
33765: ST_TO_ADDR
// exit ;
33766: POP
33767: POP
33768: GO 33774
// end ;
33770: GO 33735
33772: POP
33773: POP
// end ;
33774: LD_VAR 0 3
33778: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33794: LD_VAR 0 1
33798: NOT
33799: PUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 257
33809: PUSH
33810: LD_INT 9
33812: NONEQUAL
33813: OR
33814: IFFALSE 33818
// exit ;
33816: GO 34391
// side := GetSide ( unit ) ;
33818: LD_ADDR_VAR 0 9
33822: PUSH
33823: LD_VAR 0 1
33827: PPUSH
33828: CALL_OW 255
33832: ST_TO_ADDR
// tech_space := tech_spacanom ;
33833: LD_ADDR_VAR 0 12
33837: PUSH
33838: LD_INT 29
33840: ST_TO_ADDR
// tech_time := tech_taurad ;
33841: LD_ADDR_VAR 0 13
33845: PUSH
33846: LD_INT 28
33848: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33849: LD_ADDR_VAR 0 11
33853: PUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 310
33863: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33864: LD_VAR 0 11
33868: PPUSH
33869: CALL_OW 247
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: IFFALSE 33881
// exit ;
33879: GO 34391
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33881: LD_ADDR_VAR 0 8
33885: PUSH
33886: LD_INT 81
33888: PUSH
33889: LD_VAR 0 9
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 21
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PPUSH
33919: CALL_OW 69
33923: ST_TO_ADDR
// if not tmp then
33924: LD_VAR 0 8
33928: NOT
33929: IFFALSE 33933
// exit ;
33931: GO 34391
// if in_unit then
33933: LD_VAR 0 11
33937: IFFALSE 33961
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33939: LD_ADDR_VAR 0 10
33943: PUSH
33944: LD_VAR 0 8
33948: PPUSH
33949: LD_VAR 0 11
33953: PPUSH
33954: CALL_OW 74
33958: ST_TO_ADDR
33959: GO 33981
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33961: LD_ADDR_VAR 0 10
33965: PUSH
33966: LD_VAR 0 8
33970: PPUSH
33971: LD_VAR 0 1
33975: PPUSH
33976: CALL_OW 74
33980: ST_TO_ADDR
// if not enemy then
33981: LD_VAR 0 10
33985: NOT
33986: IFFALSE 33990
// exit ;
33988: GO 34391
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33990: LD_VAR 0 11
33994: PUSH
33995: LD_VAR 0 11
33999: PPUSH
34000: LD_VAR 0 10
34004: PPUSH
34005: CALL_OW 296
34009: PUSH
34010: LD_INT 13
34012: GREATER
34013: AND
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: LD_VAR 0 10
34024: PPUSH
34025: CALL_OW 296
34029: PUSH
34030: LD_INT 12
34032: GREATER
34033: OR
34034: IFFALSE 34038
// exit ;
34036: GO 34391
// missile := [ 1 ] ;
34038: LD_ADDR_VAR 0 14
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34049: LD_VAR 0 9
34053: PPUSH
34054: LD_VAR 0 12
34058: PPUSH
34059: CALL_OW 325
34063: IFFALSE 34092
// missile := Replace ( missile , missile + 1 , 2 ) ;
34065: LD_ADDR_VAR 0 14
34069: PUSH
34070: LD_VAR 0 14
34074: PPUSH
34075: LD_VAR 0 14
34079: PUSH
34080: LD_INT 1
34082: PLUS
34083: PPUSH
34084: LD_INT 2
34086: PPUSH
34087: CALL_OW 1
34091: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34092: LD_VAR 0 9
34096: PPUSH
34097: LD_VAR 0 13
34101: PPUSH
34102: CALL_OW 325
34106: PUSH
34107: LD_VAR 0 10
34111: PPUSH
34112: CALL_OW 255
34116: PPUSH
34117: LD_VAR 0 13
34121: PPUSH
34122: CALL_OW 325
34126: NOT
34127: AND
34128: IFFALSE 34157
// missile := Replace ( missile , missile + 1 , 3 ) ;
34130: LD_ADDR_VAR 0 14
34134: PUSH
34135: LD_VAR 0 14
34139: PPUSH
34140: LD_VAR 0 14
34144: PUSH
34145: LD_INT 1
34147: PLUS
34148: PPUSH
34149: LD_INT 3
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// if missile < 2 then
34157: LD_VAR 0 14
34161: PUSH
34162: LD_INT 2
34164: LESS
34165: IFFALSE 34169
// exit ;
34167: GO 34391
// x := GetX ( enemy ) ;
34169: LD_ADDR_VAR 0 4
34173: PUSH
34174: LD_VAR 0 10
34178: PPUSH
34179: CALL_OW 250
34183: ST_TO_ADDR
// y := GetY ( enemy ) ;
34184: LD_ADDR_VAR 0 5
34188: PUSH
34189: LD_VAR 0 10
34193: PPUSH
34194: CALL_OW 251
34198: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34199: LD_ADDR_VAR 0 6
34203: PUSH
34204: LD_VAR 0 4
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PPUSH
34213: LD_INT 1
34215: PPUSH
34216: CALL_OW 12
34220: PLUS
34221: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34222: LD_ADDR_VAR 0 7
34226: PUSH
34227: LD_VAR 0 5
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PPUSH
34236: LD_INT 1
34238: PPUSH
34239: CALL_OW 12
34243: PLUS
34244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34245: LD_VAR 0 6
34249: PPUSH
34250: LD_VAR 0 7
34254: PPUSH
34255: CALL_OW 488
34259: NOT
34260: IFFALSE 34282
// begin _x := x ;
34262: LD_ADDR_VAR 0 6
34266: PUSH
34267: LD_VAR 0 4
34271: ST_TO_ADDR
// _y := y ;
34272: LD_ADDR_VAR 0 7
34276: PUSH
34277: LD_VAR 0 5
34281: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34282: LD_ADDR_VAR 0 3
34286: PUSH
34287: LD_INT 1
34289: PPUSH
34290: LD_VAR 0 14
34294: PPUSH
34295: CALL_OW 12
34299: ST_TO_ADDR
// case i of 1 :
34300: LD_VAR 0 3
34304: PUSH
34305: LD_INT 1
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34330
34313: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_VAR 0 10
34323: PPUSH
34324: CALL_OW 115
34328: GO 34391
34330: LD_INT 2
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 34360
34338: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34339: LD_VAR 0 1
34343: PPUSH
34344: LD_VAR 0 6
34348: PPUSH
34349: LD_VAR 0 7
34353: PPUSH
34354: CALL_OW 153
34358: GO 34391
34360: LD_INT 3
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34390
34368: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 6
34378: PPUSH
34379: LD_VAR 0 7
34383: PPUSH
34384: CALL_OW 154
34388: GO 34391
34390: POP
// end ;
34391: LD_VAR 0 2
34395: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34396: LD_INT 0
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
// if not unit or not building then
34404: LD_VAR 0 1
34408: NOT
34409: PUSH
34410: LD_VAR 0 2
34414: NOT
34415: OR
34416: IFFALSE 34420
// exit ;
34418: GO 34578
// x := GetX ( building ) ;
34420: LD_ADDR_VAR 0 5
34424: PUSH
34425: LD_VAR 0 2
34429: PPUSH
34430: CALL_OW 250
34434: ST_TO_ADDR
// y := GetY ( building ) ;
34435: LD_ADDR_VAR 0 6
34439: PUSH
34440: LD_VAR 0 2
34444: PPUSH
34445: CALL_OW 251
34449: ST_TO_ADDR
// for i = 0 to 5 do
34450: LD_ADDR_VAR 0 4
34454: PUSH
34455: DOUBLE
34456: LD_INT 0
34458: DEC
34459: ST_TO_ADDR
34460: LD_INT 5
34462: PUSH
34463: FOR_TO
34464: IFFALSE 34576
// begin _x := ShiftX ( x , i , 3 ) ;
34466: LD_ADDR_VAR 0 7
34470: PUSH
34471: LD_VAR 0 5
34475: PPUSH
34476: LD_VAR 0 4
34480: PPUSH
34481: LD_INT 3
34483: PPUSH
34484: CALL_OW 272
34488: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34489: LD_ADDR_VAR 0 8
34493: PUSH
34494: LD_VAR 0 6
34498: PPUSH
34499: LD_VAR 0 4
34503: PPUSH
34504: LD_INT 3
34506: PPUSH
34507: CALL_OW 273
34511: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34512: LD_VAR 0 7
34516: PPUSH
34517: LD_VAR 0 8
34521: PPUSH
34522: CALL_OW 488
34526: NOT
34527: IFFALSE 34531
// continue ;
34529: GO 34463
// if HexInfo ( _x , _y ) = 0 then
34531: LD_VAR 0 7
34535: PPUSH
34536: LD_VAR 0 8
34540: PPUSH
34541: CALL_OW 428
34545: PUSH
34546: LD_INT 0
34548: EQUAL
34549: IFFALSE 34574
// begin ComMoveXY ( unit , _x , _y ) ;
34551: LD_VAR 0 1
34555: PPUSH
34556: LD_VAR 0 7
34560: PPUSH
34561: LD_VAR 0 8
34565: PPUSH
34566: CALL_OW 111
// exit ;
34570: POP
34571: POP
34572: GO 34578
// end ; end ;
34574: GO 34463
34576: POP
34577: POP
// end ;
34578: LD_VAR 0 3
34582: RET
// export function ScanBase ( side , base_area ) ; begin
34583: LD_INT 0
34585: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34586: LD_ADDR_VAR 0 3
34590: PUSH
34591: LD_VAR 0 2
34595: PPUSH
34596: LD_INT 81
34598: PUSH
34599: LD_VAR 0 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PPUSH
34608: CALL_OW 70
34612: ST_TO_ADDR
// end ;
34613: LD_VAR 0 3
34617: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34618: LD_INT 0
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
// result := false ;
34624: LD_ADDR_VAR 0 2
34628: PUSH
34629: LD_INT 0
34631: ST_TO_ADDR
// side := GetSide ( unit ) ;
34632: LD_ADDR_VAR 0 3
34636: PUSH
34637: LD_VAR 0 1
34641: PPUSH
34642: CALL_OW 255
34646: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34647: LD_ADDR_VAR 0 4
34651: PUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 248
34661: ST_TO_ADDR
// case nat of 1 :
34662: LD_VAR 0 4
34666: PUSH
34667: LD_INT 1
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34686
34675: POP
// tech := tech_lassight ; 2 :
34676: LD_ADDR_VAR 0 5
34680: PUSH
34681: LD_INT 12
34683: ST_TO_ADDR
34684: GO 34725
34686: LD_INT 2
34688: DOUBLE
34689: EQUAL
34690: IFTRUE 34694
34692: GO 34705
34694: POP
// tech := tech_mortar ; 3 :
34695: LD_ADDR_VAR 0 5
34699: PUSH
34700: LD_INT 41
34702: ST_TO_ADDR
34703: GO 34725
34705: LD_INT 3
34707: DOUBLE
34708: EQUAL
34709: IFTRUE 34713
34711: GO 34724
34713: POP
// tech := tech_bazooka ; end ;
34714: LD_ADDR_VAR 0 5
34718: PUSH
34719: LD_INT 44
34721: ST_TO_ADDR
34722: GO 34725
34724: POP
// if Researched ( side , tech ) then
34725: LD_VAR 0 3
34729: PPUSH
34730: LD_VAR 0 5
34734: PPUSH
34735: CALL_OW 325
34739: IFFALSE 34766
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34741: LD_ADDR_VAR 0 2
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: LD_INT 8
34751: PUSH
34752: LD_INT 9
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: PUSH
34760: LD_VAR 0 4
34764: ARRAY
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 2
34770: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34771: LD_INT 0
34773: PPUSH
34774: PPUSH
34775: PPUSH
// if not mines then
34776: LD_VAR 0 2
34780: NOT
34781: IFFALSE 34785
// exit ;
34783: GO 34929
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34785: LD_ADDR_VAR 0 5
34789: PUSH
34790: LD_INT 81
34792: PUSH
34793: LD_VAR 0 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 21
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 69
34827: ST_TO_ADDR
// for i in mines do
34828: LD_ADDR_VAR 0 4
34832: PUSH
34833: LD_VAR 0 2
34837: PUSH
34838: FOR_IN
34839: IFFALSE 34927
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34841: LD_VAR 0 4
34845: PUSH
34846: LD_INT 1
34848: ARRAY
34849: PPUSH
34850: LD_VAR 0 4
34854: PUSH
34855: LD_INT 2
34857: ARRAY
34858: PPUSH
34859: CALL_OW 458
34863: NOT
34864: IFFALSE 34868
// continue ;
34866: GO 34838
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34868: LD_VAR 0 4
34872: PUSH
34873: LD_INT 1
34875: ARRAY
34876: PPUSH
34877: LD_VAR 0 4
34881: PUSH
34882: LD_INT 2
34884: ARRAY
34885: PPUSH
34886: CALL_OW 428
34890: PUSH
34891: LD_VAR 0 5
34895: IN
34896: IFFALSE 34925
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34898: LD_VAR 0 4
34902: PUSH
34903: LD_INT 1
34905: ARRAY
34906: PPUSH
34907: LD_VAR 0 4
34911: PUSH
34912: LD_INT 2
34914: ARRAY
34915: PPUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: CALL_OW 456
// end ;
34925: GO 34838
34927: POP
34928: POP
// end ;
34929: LD_VAR 0 3
34933: RET
// export function Count ( array ) ; begin
34934: LD_INT 0
34936: PPUSH
// result := array + 0 ;
34937: LD_ADDR_VAR 0 2
34941: PUSH
34942: LD_VAR 0 1
34946: PUSH
34947: LD_INT 0
34949: PLUS
34950: ST_TO_ADDR
// end ;
34951: LD_VAR 0 2
34955: RET
// export function IsEmpty ( building ) ; begin
34956: LD_INT 0
34958: PPUSH
// if not building then
34959: LD_VAR 0 1
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35011
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 22
34980: PUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: CALL_OW 255
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 58
34997: PUSH
34998: EMPTY
34999: LIST
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PPUSH
35005: CALL_OW 69
35009: IN
35010: ST_TO_ADDR
// end ;
35011: LD_VAR 0 2
35015: RET
// export function IsNotFull ( building ) ; var places ; begin
35016: LD_INT 0
35018: PPUSH
35019: PPUSH
// if not building then
35020: LD_VAR 0 1
35024: NOT
35025: IFFALSE 35029
// exit ;
35027: GO 35057
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35029: LD_ADDR_VAR 0 2
35033: PUSH
35034: LD_VAR 0 1
35038: PPUSH
35039: LD_INT 3
35041: PUSH
35042: LD_INT 62
35044: PUSH
35045: EMPTY
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PPUSH
35052: CALL_OW 72
35056: ST_TO_ADDR
// end ;
35057: LD_VAR 0 2
35061: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
// tmp := [ ] ;
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: EMPTY
35074: ST_TO_ADDR
// list := [ ] ;
35075: LD_ADDR_VAR 0 5
35079: PUSH
35080: EMPTY
35081: ST_TO_ADDR
// for i = 16 to 25 do
35082: LD_ADDR_VAR 0 4
35086: PUSH
35087: DOUBLE
35088: LD_INT 16
35090: DEC
35091: ST_TO_ADDR
35092: LD_INT 25
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35169
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35098: LD_ADDR_VAR 0 3
35102: PUSH
35103: LD_VAR 0 3
35107: PUSH
35108: LD_INT 22
35110: PUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 255
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 91
35127: PUSH
35128: LD_VAR 0 1
35132: PUSH
35133: LD_INT 6
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 30
35143: PUSH
35144: LD_VAR 0 4
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: PPUSH
35161: CALL_OW 69
35165: ADD
35166: ST_TO_ADDR
35167: GO 35095
35169: POP
35170: POP
// for i = 1 to tmp do
35171: LD_ADDR_VAR 0 4
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_VAR 0 3
35185: PUSH
35186: FOR_TO
35187: IFFALSE 35275
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35189: LD_ADDR_VAR 0 5
35193: PUSH
35194: LD_VAR 0 5
35198: PUSH
35199: LD_VAR 0 3
35203: PUSH
35204: LD_VAR 0 4
35208: ARRAY
35209: PPUSH
35210: CALL_OW 266
35214: PUSH
35215: LD_VAR 0 3
35219: PUSH
35220: LD_VAR 0 4
35224: ARRAY
35225: PPUSH
35226: CALL_OW 250
35230: PUSH
35231: LD_VAR 0 3
35235: PUSH
35236: LD_VAR 0 4
35240: ARRAY
35241: PPUSH
35242: CALL_OW 251
35246: PUSH
35247: LD_VAR 0 3
35251: PUSH
35252: LD_VAR 0 4
35256: ARRAY
35257: PPUSH
35258: CALL_OW 254
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: ADD
35272: ST_TO_ADDR
35273: GO 35186
35275: POP
35276: POP
// result := list ;
35277: LD_ADDR_VAR 0 2
35281: PUSH
35282: LD_VAR 0 5
35286: ST_TO_ADDR
// end ;
35287: LD_VAR 0 2
35291: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35292: LD_INT 0
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
// if not factory then
35301: LD_VAR 0 1
35305: NOT
35306: IFFALSE 35310
// exit ;
35308: GO 35903
// if control = control_apeman then
35310: LD_VAR 0 4
35314: PUSH
35315: LD_INT 5
35317: EQUAL
35318: IFFALSE 35427
// begin tmp := UnitsInside ( factory ) ;
35320: LD_ADDR_VAR 0 8
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 313
35334: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35335: LD_VAR 0 8
35339: PPUSH
35340: LD_INT 25
35342: PUSH
35343: LD_INT 12
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PPUSH
35350: CALL_OW 72
35354: NOT
35355: IFFALSE 35365
// control := control_manual ;
35357: LD_ADDR_VAR 0 4
35361: PUSH
35362: LD_INT 1
35364: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35365: LD_ADDR_VAR 0 8
35369: PUSH
35370: LD_VAR 0 1
35374: PPUSH
35375: CALL 35062 0 1
35379: ST_TO_ADDR
// if tmp then
35380: LD_VAR 0 8
35384: IFFALSE 35427
// begin for i in tmp do
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 8
35395: PUSH
35396: FOR_IN
35397: IFFALSE 35425
// if i [ 1 ] = b_ext_radio then
35399: LD_VAR 0 7
35403: PUSH
35404: LD_INT 1
35406: ARRAY
35407: PUSH
35408: LD_INT 22
35410: EQUAL
35411: IFFALSE 35423
// begin control := control_remote ;
35413: LD_ADDR_VAR 0 4
35417: PUSH
35418: LD_INT 2
35420: ST_TO_ADDR
// break ;
35421: GO 35425
// end ;
35423: GO 35396
35425: POP
35426: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35427: LD_VAR 0 1
35431: PPUSH
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 3
35441: PPUSH
35442: LD_VAR 0 4
35446: PPUSH
35447: LD_VAR 0 5
35451: PPUSH
35452: CALL_OW 448
35456: IFFALSE 35491
// begin result := [ chassis , engine , control , weapon ] ;
35458: LD_ADDR_VAR 0 6
35462: PUSH
35463: LD_VAR 0 2
35467: PUSH
35468: LD_VAR 0 3
35472: PUSH
35473: LD_VAR 0 4
35477: PUSH
35478: LD_VAR 0 5
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// exit ;
35489: GO 35903
// end ; _chassis := AvailableChassisList ( factory ) ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_VAR 0 1
35500: PPUSH
35501: CALL_OW 475
35505: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35506: LD_ADDR_VAR 0 11
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 476
35520: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35521: LD_ADDR_VAR 0 12
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 477
35535: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35536: LD_ADDR_VAR 0 10
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 478
35550: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35551: LD_VAR 0 9
35555: NOT
35556: PUSH
35557: LD_VAR 0 11
35561: NOT
35562: OR
35563: PUSH
35564: LD_VAR 0 12
35568: NOT
35569: OR
35570: PUSH
35571: LD_VAR 0 10
35575: NOT
35576: OR
35577: IFFALSE 35612
// begin result := [ chassis , engine , control , weapon ] ;
35579: LD_ADDR_VAR 0 6
35583: PUSH
35584: LD_VAR 0 2
35588: PUSH
35589: LD_VAR 0 3
35593: PUSH
35594: LD_VAR 0 4
35598: PUSH
35599: LD_VAR 0 5
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// exit ;
35610: GO 35903
// end ; if not chassis in _chassis then
35612: LD_VAR 0 2
35616: PUSH
35617: LD_VAR 0 9
35621: IN
35622: NOT
35623: IFFALSE 35649
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35625: LD_ADDR_VAR 0 2
35629: PUSH
35630: LD_VAR 0 9
35634: PUSH
35635: LD_INT 1
35637: PPUSH
35638: LD_VAR 0 9
35642: PPUSH
35643: CALL_OW 12
35647: ARRAY
35648: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: CALL 35908 0 2
35663: NOT
35664: IFFALSE 35723
// repeat engine := _engine [ 1 ] ;
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_VAR 0 11
35675: PUSH
35676: LD_INT 1
35678: ARRAY
35679: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35680: LD_ADDR_VAR 0 11
35684: PUSH
35685: LD_VAR 0 11
35689: PPUSH
35690: LD_INT 1
35692: PPUSH
35693: CALL_OW 3
35697: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35698: LD_VAR 0 2
35702: PPUSH
35703: LD_VAR 0 3
35707: PPUSH
35708: CALL 35908 0 2
35712: PUSH
35713: LD_VAR 0 11
35717: PUSH
35718: EMPTY
35719: EQUAL
35720: OR
35721: IFFALSE 35666
// if not control in _control then
35723: LD_VAR 0 4
35727: PUSH
35728: LD_VAR 0 12
35732: IN
35733: NOT
35734: IFFALSE 35760
// control := _control [ rand ( 1 , _control ) ] ;
35736: LD_ADDR_VAR 0 4
35740: PUSH
35741: LD_VAR 0 12
35745: PUSH
35746: LD_INT 1
35748: PPUSH
35749: LD_VAR 0 12
35753: PPUSH
35754: CALL_OW 12
35758: ARRAY
35759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35760: LD_VAR 0 2
35764: PPUSH
35765: LD_VAR 0 5
35769: PPUSH
35770: CALL 36128 0 2
35774: NOT
35775: IFFALSE 35834
// repeat weapon := _weapon [ 1 ] ;
35777: LD_ADDR_VAR 0 5
35781: PUSH
35782: LD_VAR 0 10
35786: PUSH
35787: LD_INT 1
35789: ARRAY
35790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35791: LD_ADDR_VAR 0 10
35795: PUSH
35796: LD_VAR 0 10
35800: PPUSH
35801: LD_INT 1
35803: PPUSH
35804: CALL_OW 3
35808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35809: LD_VAR 0 2
35813: PPUSH
35814: LD_VAR 0 5
35818: PPUSH
35819: CALL 36128 0 2
35823: PUSH
35824: LD_VAR 0 10
35828: PUSH
35829: EMPTY
35830: EQUAL
35831: OR
35832: IFFALSE 35777
// result := [ ] ;
35834: LD_ADDR_VAR 0 6
35838: PUSH
35839: EMPTY
35840: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35841: LD_VAR 0 1
35845: PPUSH
35846: LD_VAR 0 2
35850: PPUSH
35851: LD_VAR 0 3
35855: PPUSH
35856: LD_VAR 0 4
35860: PPUSH
35861: LD_VAR 0 5
35865: PPUSH
35866: CALL_OW 448
35870: IFFALSE 35903
// result := [ chassis , engine , control , weapon ] ;
35872: LD_ADDR_VAR 0 6
35876: PUSH
35877: LD_VAR 0 2
35881: PUSH
35882: LD_VAR 0 3
35886: PUSH
35887: LD_VAR 0 4
35891: PUSH
35892: LD_VAR 0 5
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: ST_TO_ADDR
// end ;
35903: LD_VAR 0 6
35907: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35908: LD_INT 0
35910: PPUSH
// if not chassis or not engine then
35911: LD_VAR 0 1
35915: NOT
35916: PUSH
35917: LD_VAR 0 2
35921: NOT
35922: OR
35923: IFFALSE 35927
// exit ;
35925: GO 36123
// case engine of engine_solar :
35927: LD_VAR 0 2
35931: PUSH
35932: LD_INT 2
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35978
35940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35941: LD_ADDR_VAR 0 3
35945: PUSH
35946: LD_INT 11
35948: PUSH
35949: LD_INT 12
35951: PUSH
35952: LD_INT 13
35954: PUSH
35955: LD_INT 14
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 3
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: ST_TO_ADDR
35976: GO 36107
35978: LD_INT 1
35980: DOUBLE
35981: EQUAL
35982: IFTRUE 35986
35984: GO 36048
35986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35987: LD_ADDR_VAR 0 3
35991: PUSH
35992: LD_INT 11
35994: PUSH
35995: LD_INT 12
35997: PUSH
35998: LD_INT 13
36000: PUSH
36001: LD_INT 14
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: LD_INT 4
36015: PUSH
36016: LD_INT 5
36018: PUSH
36019: LD_INT 21
36021: PUSH
36022: LD_INT 23
36024: PUSH
36025: LD_INT 22
36027: PUSH
36028: LD_INT 24
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: ST_TO_ADDR
36046: GO 36107
36048: LD_INT 3
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36056
36054: GO 36106
36056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36057: LD_ADDR_VAR 0 3
36061: PUSH
36062: LD_INT 13
36064: PUSH
36065: LD_INT 14
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 4
36076: PUSH
36077: LD_INT 5
36079: PUSH
36080: LD_INT 21
36082: PUSH
36083: LD_INT 22
36085: PUSH
36086: LD_INT 23
36088: PUSH
36089: LD_INT 24
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
36104: GO 36107
36106: POP
// result := ( chassis in result ) ;
36107: LD_ADDR_VAR 0 3
36111: PUSH
36112: LD_VAR 0 1
36116: PUSH
36117: LD_VAR 0 3
36121: IN
36122: ST_TO_ADDR
// end ;
36123: LD_VAR 0 3
36127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36128: LD_INT 0
36130: PPUSH
// if not chassis or not weapon then
36131: LD_VAR 0 1
36135: NOT
36136: PUSH
36137: LD_VAR 0 2
36141: NOT
36142: OR
36143: IFFALSE 36147
// exit ;
36145: GO 37207
// case weapon of us_machine_gun :
36147: LD_VAR 0 2
36151: PUSH
36152: LD_INT 2
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36160
36158: GO 36190
36160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36161: LD_ADDR_VAR 0 3
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 3
36174: PUSH
36175: LD_INT 4
36177: PUSH
36178: LD_INT 5
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
36188: GO 37191
36190: LD_INT 3
36192: DOUBLE
36193: EQUAL
36194: IFTRUE 36198
36196: GO 36228
36198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36199: LD_ADDR_VAR 0 3
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: LD_INT 3
36212: PUSH
36213: LD_INT 4
36215: PUSH
36216: LD_INT 5
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
36226: GO 37191
36228: LD_INT 11
36230: DOUBLE
36231: EQUAL
36232: IFTRUE 36236
36234: GO 36266
36236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36237: LD_ADDR_VAR 0 3
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: LD_INT 4
36253: PUSH
36254: LD_INT 5
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: ST_TO_ADDR
36264: GO 37191
36266: LD_INT 4
36268: DOUBLE
36269: EQUAL
36270: IFTRUE 36274
36272: GO 36300
36274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36275: LD_ADDR_VAR 0 3
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: LD_INT 4
36288: PUSH
36289: LD_INT 5
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
36298: GO 37191
36300: LD_INT 5
36302: DOUBLE
36303: EQUAL
36304: IFTRUE 36308
36306: GO 36334
36308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: LD_INT 4
36322: PUSH
36323: LD_INT 5
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
36332: GO 37191
36334: LD_INT 9
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36342
36340: GO 36368
36342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 3
36353: PUSH
36354: LD_INT 4
36356: PUSH
36357: LD_INT 5
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
36366: GO 37191
36368: LD_INT 7
36370: DOUBLE
36371: EQUAL
36372: IFTRUE 36376
36374: GO 36402
36376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 4
36390: PUSH
36391: LD_INT 5
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
36400: GO 37191
36402: LD_INT 12
36404: DOUBLE
36405: EQUAL
36406: IFTRUE 36410
36408: GO 36436
36410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36411: LD_ADDR_VAR 0 3
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 4
36424: PUSH
36425: LD_INT 5
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
36434: GO 37191
36436: LD_INT 13
36438: DOUBLE
36439: EQUAL
36440: IFTRUE 36444
36442: GO 36470
36444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36445: LD_ADDR_VAR 0 3
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: LD_INT 5
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
36468: GO 37191
36470: LD_INT 14
36472: DOUBLE
36473: EQUAL
36474: IFTRUE 36478
36476: GO 36496
36478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36479: LD_ADDR_VAR 0 3
36483: PUSH
36484: LD_INT 4
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: ST_TO_ADDR
36494: GO 37191
36496: LD_INT 6
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36504
36502: GO 36522
36504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36505: LD_ADDR_VAR 0 3
36509: PUSH
36510: LD_INT 4
36512: PUSH
36513: LD_INT 5
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: ST_TO_ADDR
36520: GO 37191
36522: LD_INT 10
36524: DOUBLE
36525: EQUAL
36526: IFTRUE 36530
36528: GO 36548
36530: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36531: LD_ADDR_VAR 0 3
36535: PUSH
36536: LD_INT 4
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: ST_TO_ADDR
36546: GO 37191
36548: LD_INT 22
36550: DOUBLE
36551: EQUAL
36552: IFTRUE 36556
36554: GO 36582
36556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36557: LD_ADDR_VAR 0 3
36561: PUSH
36562: LD_INT 11
36564: PUSH
36565: LD_INT 12
36567: PUSH
36568: LD_INT 13
36570: PUSH
36571: LD_INT 14
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
36580: GO 37191
36582: LD_INT 23
36584: DOUBLE
36585: EQUAL
36586: IFTRUE 36590
36588: GO 36616
36590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: LD_INT 11
36598: PUSH
36599: LD_INT 12
36601: PUSH
36602: LD_INT 13
36604: PUSH
36605: LD_INT 14
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
36614: GO 37191
36616: LD_INT 24
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 36650
36624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36625: LD_ADDR_VAR 0 3
36629: PUSH
36630: LD_INT 11
36632: PUSH
36633: LD_INT 12
36635: PUSH
36636: LD_INT 13
36638: PUSH
36639: LD_INT 14
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
36648: GO 37191
36650: LD_INT 30
36652: DOUBLE
36653: EQUAL
36654: IFTRUE 36658
36656: GO 36684
36658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36659: LD_ADDR_VAR 0 3
36663: PUSH
36664: LD_INT 11
36666: PUSH
36667: LD_INT 12
36669: PUSH
36670: LD_INT 13
36672: PUSH
36673: LD_INT 14
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
36682: GO 37191
36684: LD_INT 25
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36710
36692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_INT 13
36700: PUSH
36701: LD_INT 14
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: ST_TO_ADDR
36708: GO 37191
36710: LD_INT 27
36712: DOUBLE
36713: EQUAL
36714: IFTRUE 36718
36716: GO 36736
36718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_INT 13
36726: PUSH
36727: LD_INT 14
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: ST_TO_ADDR
36734: GO 37191
36736: LD_INT 92
36738: DOUBLE
36739: EQUAL
36740: IFTRUE 36744
36742: GO 36770
36744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36745: LD_ADDR_VAR 0 3
36749: PUSH
36750: LD_INT 11
36752: PUSH
36753: LD_INT 12
36755: PUSH
36756: LD_INT 13
36758: PUSH
36759: LD_INT 14
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
36768: GO 37191
36770: LD_INT 28
36772: DOUBLE
36773: EQUAL
36774: IFTRUE 36778
36776: GO 36796
36778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_INT 13
36786: PUSH
36787: LD_INT 14
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: ST_TO_ADDR
36794: GO 37191
36796: LD_INT 29
36798: DOUBLE
36799: EQUAL
36800: IFTRUE 36804
36802: GO 36822
36804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_INT 13
36812: PUSH
36813: LD_INT 14
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: ST_TO_ADDR
36820: GO 37191
36822: LD_INT 31
36824: DOUBLE
36825: EQUAL
36826: IFTRUE 36830
36828: GO 36848
36830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36831: LD_ADDR_VAR 0 3
36835: PUSH
36836: LD_INT 13
36838: PUSH
36839: LD_INT 14
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: ST_TO_ADDR
36846: GO 37191
36848: LD_INT 26
36850: DOUBLE
36851: EQUAL
36852: IFTRUE 36856
36854: GO 36874
36856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36857: LD_ADDR_VAR 0 3
36861: PUSH
36862: LD_INT 13
36864: PUSH
36865: LD_INT 14
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: ST_TO_ADDR
36872: GO 37191
36874: LD_INT 42
36876: DOUBLE
36877: EQUAL
36878: IFTRUE 36882
36880: GO 36908
36882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36883: LD_ADDR_VAR 0 3
36887: PUSH
36888: LD_INT 21
36890: PUSH
36891: LD_INT 22
36893: PUSH
36894: LD_INT 23
36896: PUSH
36897: LD_INT 24
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: ST_TO_ADDR
36906: GO 37191
36908: LD_INT 43
36910: DOUBLE
36911: EQUAL
36912: IFTRUE 36916
36914: GO 36942
36916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36917: LD_ADDR_VAR 0 3
36921: PUSH
36922: LD_INT 21
36924: PUSH
36925: LD_INT 22
36927: PUSH
36928: LD_INT 23
36930: PUSH
36931: LD_INT 24
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: ST_TO_ADDR
36940: GO 37191
36942: LD_INT 44
36944: DOUBLE
36945: EQUAL
36946: IFTRUE 36950
36948: GO 36976
36950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36951: LD_ADDR_VAR 0 3
36955: PUSH
36956: LD_INT 21
36958: PUSH
36959: LD_INT 22
36961: PUSH
36962: LD_INT 23
36964: PUSH
36965: LD_INT 24
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
36974: GO 37191
36976: LD_INT 45
36978: DOUBLE
36979: EQUAL
36980: IFTRUE 36984
36982: GO 37010
36984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 21
36992: PUSH
36993: LD_INT 22
36995: PUSH
36996: LD_INT 23
36998: PUSH
36999: LD_INT 24
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
37008: GO 37191
37010: LD_INT 49
37012: DOUBLE
37013: EQUAL
37014: IFTRUE 37018
37016: GO 37044
37018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37019: LD_ADDR_VAR 0 3
37023: PUSH
37024: LD_INT 21
37026: PUSH
37027: LD_INT 22
37029: PUSH
37030: LD_INT 23
37032: PUSH
37033: LD_INT 24
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: ST_TO_ADDR
37042: GO 37191
37044: LD_INT 51
37046: DOUBLE
37047: EQUAL
37048: IFTRUE 37052
37050: GO 37078
37052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37053: LD_ADDR_VAR 0 3
37057: PUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 22
37063: PUSH
37064: LD_INT 23
37066: PUSH
37067: LD_INT 24
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: ST_TO_ADDR
37076: GO 37191
37078: LD_INT 52
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37086
37084: GO 37112
37086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37087: LD_ADDR_VAR 0 3
37091: PUSH
37092: LD_INT 21
37094: PUSH
37095: LD_INT 22
37097: PUSH
37098: LD_INT 23
37100: PUSH
37101: LD_INT 24
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: ST_TO_ADDR
37110: GO 37191
37112: LD_INT 53
37114: DOUBLE
37115: EQUAL
37116: IFTRUE 37120
37118: GO 37138
37120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37121: LD_ADDR_VAR 0 3
37125: PUSH
37126: LD_INT 23
37128: PUSH
37129: LD_INT 24
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: ST_TO_ADDR
37136: GO 37191
37138: LD_INT 46
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37164
37146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_INT 23
37154: PUSH
37155: LD_INT 24
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: ST_TO_ADDR
37162: GO 37191
37164: LD_INT 47
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37190
37172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 23
37180: PUSH
37181: LD_INT 24
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: ST_TO_ADDR
37188: GO 37191
37190: POP
// result := ( chassis in result ) ;
37191: LD_ADDR_VAR 0 3
37195: PUSH
37196: LD_VAR 0 1
37200: PUSH
37201: LD_VAR 0 3
37205: IN
37206: ST_TO_ADDR
// end ;
37207: LD_VAR 0 3
37211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37212: LD_INT 0
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
// result := array ;
37221: LD_ADDR_VAR 0 5
37225: PUSH
37226: LD_VAR 0 1
37230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37231: LD_VAR 0 1
37235: NOT
37236: PUSH
37237: LD_VAR 0 2
37241: NOT
37242: OR
37243: PUSH
37244: LD_VAR 0 3
37248: NOT
37249: OR
37250: PUSH
37251: LD_VAR 0 2
37255: PUSH
37256: LD_VAR 0 1
37260: GREATER
37261: OR
37262: PUSH
37263: LD_VAR 0 3
37267: PUSH
37268: LD_VAR 0 1
37272: GREATER
37273: OR
37274: IFFALSE 37278
// exit ;
37276: GO 37574
// if direction then
37278: LD_VAR 0 4
37282: IFFALSE 37346
// begin d := 1 ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_INT 1
37291: ST_TO_ADDR
// if i_from > i_to then
37292: LD_VAR 0 2
37296: PUSH
37297: LD_VAR 0 3
37301: GREATER
37302: IFFALSE 37328
// length := ( array - i_from ) + i_to else
37304: LD_ADDR_VAR 0 11
37308: PUSH
37309: LD_VAR 0 1
37313: PUSH
37314: LD_VAR 0 2
37318: MINUS
37319: PUSH
37320: LD_VAR 0 3
37324: PLUS
37325: ST_TO_ADDR
37326: GO 37344
// length := i_to - i_from ;
37328: LD_ADDR_VAR 0 11
37332: PUSH
37333: LD_VAR 0 3
37337: PUSH
37338: LD_VAR 0 2
37342: MINUS
37343: ST_TO_ADDR
// end else
37344: GO 37407
// begin d := - 1 ;
37346: LD_ADDR_VAR 0 9
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: ST_TO_ADDR
// if i_from > i_to then
37355: LD_VAR 0 2
37359: PUSH
37360: LD_VAR 0 3
37364: GREATER
37365: IFFALSE 37385
// length := i_from - i_to else
37367: LD_ADDR_VAR 0 11
37371: PUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_VAR 0 3
37381: MINUS
37382: ST_TO_ADDR
37383: GO 37407
// length := ( array - i_to ) + i_from ;
37385: LD_ADDR_VAR 0 11
37389: PUSH
37390: LD_VAR 0 1
37394: PUSH
37395: LD_VAR 0 3
37399: MINUS
37400: PUSH
37401: LD_VAR 0 2
37405: PLUS
37406: ST_TO_ADDR
// end ; if not length then
37407: LD_VAR 0 11
37411: NOT
37412: IFFALSE 37416
// exit ;
37414: GO 37574
// tmp := array ;
37416: LD_ADDR_VAR 0 10
37420: PUSH
37421: LD_VAR 0 1
37425: ST_TO_ADDR
// for i = 1 to length do
37426: LD_ADDR_VAR 0 6
37430: PUSH
37431: DOUBLE
37432: LD_INT 1
37434: DEC
37435: ST_TO_ADDR
37436: LD_VAR 0 11
37440: PUSH
37441: FOR_TO
37442: IFFALSE 37562
// begin for j = 1 to array do
37444: LD_ADDR_VAR 0 7
37448: PUSH
37449: DOUBLE
37450: LD_INT 1
37452: DEC
37453: ST_TO_ADDR
37454: LD_VAR 0 1
37458: PUSH
37459: FOR_TO
37460: IFFALSE 37548
// begin k := j + d ;
37462: LD_ADDR_VAR 0 8
37466: PUSH
37467: LD_VAR 0 7
37471: PUSH
37472: LD_VAR 0 9
37476: PLUS
37477: ST_TO_ADDR
// if k > array then
37478: LD_VAR 0 8
37482: PUSH
37483: LD_VAR 0 1
37487: GREATER
37488: IFFALSE 37498
// k := 1 ;
37490: LD_ADDR_VAR 0 8
37494: PUSH
37495: LD_INT 1
37497: ST_TO_ADDR
// if not k then
37498: LD_VAR 0 8
37502: NOT
37503: IFFALSE 37515
// k := array ;
37505: LD_ADDR_VAR 0 8
37509: PUSH
37510: LD_VAR 0 1
37514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37515: LD_ADDR_VAR 0 10
37519: PUSH
37520: LD_VAR 0 10
37524: PPUSH
37525: LD_VAR 0 8
37529: PPUSH
37530: LD_VAR 0 1
37534: PUSH
37535: LD_VAR 0 7
37539: ARRAY
37540: PPUSH
37541: CALL_OW 1
37545: ST_TO_ADDR
// end ;
37546: GO 37459
37548: POP
37549: POP
// array := tmp ;
37550: LD_ADDR_VAR 0 1
37554: PUSH
37555: LD_VAR 0 10
37559: ST_TO_ADDR
// end ;
37560: GO 37441
37562: POP
37563: POP
// result := array ;
37564: LD_ADDR_VAR 0 5
37568: PUSH
37569: LD_VAR 0 1
37573: ST_TO_ADDR
// end ;
37574: LD_VAR 0 5
37578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
// result := 0 ;
37583: LD_ADDR_VAR 0 3
37587: PUSH
37588: LD_INT 0
37590: ST_TO_ADDR
// if not array or not value in array then
37591: LD_VAR 0 1
37595: NOT
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_VAR 0 1
37606: IN
37607: NOT
37608: OR
37609: IFFALSE 37613
// exit ;
37611: GO 37667
// for i = 1 to array do
37613: LD_ADDR_VAR 0 4
37617: PUSH
37618: DOUBLE
37619: LD_INT 1
37621: DEC
37622: ST_TO_ADDR
37623: LD_VAR 0 1
37627: PUSH
37628: FOR_TO
37629: IFFALSE 37665
// if value = array [ i ] then
37631: LD_VAR 0 2
37635: PUSH
37636: LD_VAR 0 1
37640: PUSH
37641: LD_VAR 0 4
37645: ARRAY
37646: EQUAL
37647: IFFALSE 37663
// begin result := i ;
37649: LD_ADDR_VAR 0 3
37653: PUSH
37654: LD_VAR 0 4
37658: ST_TO_ADDR
// exit ;
37659: POP
37660: POP
37661: GO 37667
// end ;
37663: GO 37628
37665: POP
37666: POP
// end ;
37667: LD_VAR 0 3
37671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37672: LD_INT 0
37674: PPUSH
// vc_chassis := chassis ;
37675: LD_ADDR_OWVAR 37
37679: PUSH
37680: LD_VAR 0 1
37684: ST_TO_ADDR
// vc_engine := engine ;
37685: LD_ADDR_OWVAR 39
37689: PUSH
37690: LD_VAR 0 2
37694: ST_TO_ADDR
// vc_control := control ;
37695: LD_ADDR_OWVAR 38
37699: PUSH
37700: LD_VAR 0 3
37704: ST_TO_ADDR
// vc_weapon := weapon ;
37705: LD_ADDR_OWVAR 40
37709: PUSH
37710: LD_VAR 0 4
37714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37715: LD_ADDR_OWVAR 41
37719: PUSH
37720: LD_VAR 0 5
37724: ST_TO_ADDR
// end ;
37725: LD_VAR 0 6
37729: RET
// export function WantPlant ( unit ) ; var task ; begin
37730: LD_INT 0
37732: PPUSH
37733: PPUSH
// result := false ;
37734: LD_ADDR_VAR 0 2
37738: PUSH
37739: LD_INT 0
37741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 437
37756: ST_TO_ADDR
// if task then
37757: LD_VAR 0 3
37761: IFFALSE 37789
// if task [ 1 ] [ 1 ] = p then
37763: LD_VAR 0 3
37767: PUSH
37768: LD_INT 1
37770: ARRAY
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PUSH
37776: LD_STRING p
37778: EQUAL
37779: IFFALSE 37789
// result := true ;
37781: LD_ADDR_VAR 0 2
37785: PUSH
37786: LD_INT 1
37788: ST_TO_ADDR
// end ;
37789: LD_VAR 0 2
37793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37794: LD_INT 0
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
// if pos < 1 then
37800: LD_VAR 0 2
37804: PUSH
37805: LD_INT 1
37807: LESS
37808: IFFALSE 37812
// exit ;
37810: GO 38115
// if pos = 1 then
37812: LD_VAR 0 2
37816: PUSH
37817: LD_INT 1
37819: EQUAL
37820: IFFALSE 37853
// result := Replace ( arr , pos [ 1 ] , value ) else
37822: LD_ADDR_VAR 0 4
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: LD_VAR 0 2
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: LD_VAR 0 3
37845: PPUSH
37846: CALL_OW 1
37850: ST_TO_ADDR
37851: GO 38115
// begin tmp := arr ;
37853: LD_ADDR_VAR 0 6
37857: PUSH
37858: LD_VAR 0 1
37862: ST_TO_ADDR
// s_arr := [ tmp ] ;
37863: LD_ADDR_VAR 0 7
37867: PUSH
37868: LD_VAR 0 6
37872: PUSH
37873: EMPTY
37874: LIST
37875: ST_TO_ADDR
// for i = 1 to pos - 1 do
37876: LD_ADDR_VAR 0 5
37880: PUSH
37881: DOUBLE
37882: LD_INT 1
37884: DEC
37885: ST_TO_ADDR
37886: LD_VAR 0 2
37890: PUSH
37891: LD_INT 1
37893: MINUS
37894: PUSH
37895: FOR_TO
37896: IFFALSE 37941
// begin tmp := tmp [ pos [ i ] ] ;
37898: LD_ADDR_VAR 0 6
37902: PUSH
37903: LD_VAR 0 6
37907: PUSH
37908: LD_VAR 0 2
37912: PUSH
37913: LD_VAR 0 5
37917: ARRAY
37918: ARRAY
37919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37920: LD_ADDR_VAR 0 7
37924: PUSH
37925: LD_VAR 0 7
37929: PUSH
37930: LD_VAR 0 6
37934: PUSH
37935: EMPTY
37936: LIST
37937: ADD
37938: ST_TO_ADDR
// end ;
37939: GO 37895
37941: POP
37942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37943: LD_ADDR_VAR 0 6
37947: PUSH
37948: LD_VAR 0 6
37952: PPUSH
37953: LD_VAR 0 2
37957: PUSH
37958: LD_VAR 0 2
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37974: LD_ADDR_VAR 0 7
37978: PUSH
37979: LD_VAR 0 7
37983: PPUSH
37984: LD_VAR 0 7
37988: PPUSH
37989: LD_VAR 0 6
37993: PPUSH
37994: CALL_OW 1
37998: ST_TO_ADDR
// for i = s_arr downto 2 do
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: DOUBLE
38005: LD_VAR 0 7
38009: INC
38010: ST_TO_ADDR
38011: LD_INT 2
38013: PUSH
38014: FOR_DOWNTO
38015: IFFALSE 38099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38017: LD_ADDR_VAR 0 6
38021: PUSH
38022: LD_VAR 0 7
38026: PUSH
38027: LD_VAR 0 5
38031: PUSH
38032: LD_INT 1
38034: MINUS
38035: ARRAY
38036: PPUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 5
38046: PUSH
38047: LD_INT 1
38049: MINUS
38050: ARRAY
38051: PPUSH
38052: LD_VAR 0 7
38056: PUSH
38057: LD_VAR 0 5
38061: ARRAY
38062: PPUSH
38063: CALL_OW 1
38067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38068: LD_ADDR_VAR 0 7
38072: PUSH
38073: LD_VAR 0 7
38077: PPUSH
38078: LD_VAR 0 5
38082: PUSH
38083: LD_INT 1
38085: MINUS
38086: PPUSH
38087: LD_VAR 0 6
38091: PPUSH
38092: CALL_OW 1
38096: ST_TO_ADDR
// end ;
38097: GO 38014
38099: POP
38100: POP
// result := s_arr [ 1 ] ;
38101: LD_ADDR_VAR 0 4
38105: PUSH
38106: LD_VAR 0 7
38110: PUSH
38111: LD_INT 1
38113: ARRAY
38114: ST_TO_ADDR
// end ; end ;
38115: LD_VAR 0 4
38119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38120: LD_INT 0
38122: PPUSH
38123: PPUSH
// if not list then
38124: LD_VAR 0 1
38128: NOT
38129: IFFALSE 38133
// exit ;
38131: GO 38224
// i := list [ pos1 ] ;
38133: LD_ADDR_VAR 0 5
38137: PUSH
38138: LD_VAR 0 1
38142: PUSH
38143: LD_VAR 0 2
38147: ARRAY
38148: ST_TO_ADDR
// if not i then
38149: LD_VAR 0 5
38153: NOT
38154: IFFALSE 38158
// exit ;
38156: GO 38224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38158: LD_ADDR_VAR 0 1
38162: PUSH
38163: LD_VAR 0 1
38167: PPUSH
38168: LD_VAR 0 2
38172: PPUSH
38173: LD_VAR 0 1
38177: PUSH
38178: LD_VAR 0 3
38182: ARRAY
38183: PPUSH
38184: CALL_OW 1
38188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38189: LD_ADDR_VAR 0 1
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_VAR 0 3
38203: PPUSH
38204: LD_VAR 0 5
38208: PPUSH
38209: CALL_OW 1
38213: ST_TO_ADDR
// result := list ;
38214: LD_ADDR_VAR 0 4
38218: PUSH
38219: LD_VAR 0 1
38223: ST_TO_ADDR
// end ;
38224: LD_VAR 0 4
38228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38229: LD_INT 0
38231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38232: LD_ADDR_VAR 0 5
38236: PUSH
38237: LD_VAR 0 1
38241: PPUSH
38242: CALL_OW 250
38246: PPUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL_OW 251
38256: PPUSH
38257: LD_VAR 0 2
38261: PPUSH
38262: LD_VAR 0 3
38266: PPUSH
38267: LD_VAR 0 4
38271: PPUSH
38272: CALL 38650 0 5
38276: ST_TO_ADDR
// end ;
38277: LD_VAR 0 5
38281: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38282: LD_INT 0
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
// if not list or not unit then
38288: LD_VAR 0 2
38292: NOT
38293: PUSH
38294: LD_VAR 0 1
38298: NOT
38299: OR
38300: IFFALSE 38304
// exit ;
38302: GO 38645
// result := [ ] ;
38304: LD_ADDR_VAR 0 5
38308: PUSH
38309: EMPTY
38310: ST_TO_ADDR
// for i in list do
38311: LD_ADDR_VAR 0 6
38315: PUSH
38316: LD_VAR 0 2
38320: PUSH
38321: FOR_IN
38322: IFFALSE 38540
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38324: LD_ADDR_VAR 0 8
38328: PUSH
38329: LD_VAR 0 1
38333: PPUSH
38334: LD_VAR 0 6
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PPUSH
38343: LD_VAR 0 6
38347: PUSH
38348: LD_INT 2
38350: ARRAY
38351: PPUSH
38352: CALL_OW 297
38356: ST_TO_ADDR
// if not Count ( result ) then
38357: LD_VAR 0 5
38361: PPUSH
38362: CALL 34934 0 1
38366: NOT
38367: IFFALSE 38400
// begin result := Join ( result , [ i , tmp ] ) ;
38369: LD_ADDR_VAR 0 5
38373: PUSH
38374: LD_VAR 0 5
38378: PPUSH
38379: LD_VAR 0 6
38383: PUSH
38384: LD_VAR 0 8
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PPUSH
38393: CALL 70543 0 2
38397: ST_TO_ADDR
// continue ;
38398: GO 38321
// end ; if result [ result ] [ 2 ] <= tmp then
38400: LD_VAR 0 5
38404: PUSH
38405: LD_VAR 0 5
38409: ARRAY
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PUSH
38415: LD_VAR 0 8
38419: LESSEQUAL
38420: IFFALSE 38453
// result := Join ( result , [ i , tmp ] ) else
38422: LD_ADDR_VAR 0 5
38426: PUSH
38427: LD_VAR 0 5
38431: PPUSH
38432: LD_VAR 0 6
38436: PUSH
38437: LD_VAR 0 8
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL 70543 0 2
38450: ST_TO_ADDR
38451: GO 38538
// begin for j := 1 to Count ( result ) do
38453: LD_ADDR_VAR 0 7
38457: PUSH
38458: DOUBLE
38459: LD_INT 1
38461: DEC
38462: ST_TO_ADDR
38463: LD_VAR 0 5
38467: PPUSH
38468: CALL 34934 0 1
38472: PUSH
38473: FOR_TO
38474: IFFALSE 38536
// begin if tmp < result [ j ] [ 2 ] then
38476: LD_VAR 0 8
38480: PUSH
38481: LD_VAR 0 5
38485: PUSH
38486: LD_VAR 0 7
38490: ARRAY
38491: PUSH
38492: LD_INT 2
38494: ARRAY
38495: LESS
38496: IFFALSE 38534
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38498: LD_ADDR_VAR 0 5
38502: PUSH
38503: LD_VAR 0 5
38507: PPUSH
38508: LD_VAR 0 7
38512: PPUSH
38513: LD_VAR 0 6
38517: PUSH
38518: LD_VAR 0 8
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PPUSH
38527: CALL_OW 2
38531: ST_TO_ADDR
// break ;
38532: GO 38536
// end ; end ;
38534: GO 38473
38536: POP
38537: POP
// end ; end ;
38538: GO 38321
38540: POP
38541: POP
// if result and not asc then
38542: LD_VAR 0 5
38546: PUSH
38547: LD_VAR 0 3
38551: NOT
38552: AND
38553: IFFALSE 38570
// result := ReverseArray ( result ) ;
38555: LD_ADDR_VAR 0 5
38559: PUSH
38560: LD_VAR 0 5
38564: PPUSH
38565: CALL 65810 0 1
38569: ST_TO_ADDR
// tmp := [ ] ;
38570: LD_ADDR_VAR 0 8
38574: PUSH
38575: EMPTY
38576: ST_TO_ADDR
// if mode then
38577: LD_VAR 0 4
38581: IFFALSE 38645
// begin for i := 1 to result do
38583: LD_ADDR_VAR 0 6
38587: PUSH
38588: DOUBLE
38589: LD_INT 1
38591: DEC
38592: ST_TO_ADDR
38593: LD_VAR 0 5
38597: PUSH
38598: FOR_TO
38599: IFFALSE 38633
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38601: LD_ADDR_VAR 0 8
38605: PUSH
38606: LD_VAR 0 8
38610: PPUSH
38611: LD_VAR 0 5
38615: PUSH
38616: LD_VAR 0 6
38620: ARRAY
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: PPUSH
38626: CALL 70543 0 2
38630: ST_TO_ADDR
38631: GO 38598
38633: POP
38634: POP
// result := tmp ;
38635: LD_ADDR_VAR 0 5
38639: PUSH
38640: LD_VAR 0 8
38644: ST_TO_ADDR
// end ; end ;
38645: LD_VAR 0 5
38649: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38650: LD_INT 0
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
// if not list then
38656: LD_VAR 0 3
38660: NOT
38661: IFFALSE 38665
// exit ;
38663: GO 39053
// result := [ ] ;
38665: LD_ADDR_VAR 0 6
38669: PUSH
38670: EMPTY
38671: ST_TO_ADDR
// for i in list do
38672: LD_ADDR_VAR 0 7
38676: PUSH
38677: LD_VAR 0 3
38681: PUSH
38682: FOR_IN
38683: IFFALSE 38885
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_VAR 0 7
38694: PPUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_VAR 0 2
38704: PPUSH
38705: CALL_OW 297
38709: ST_TO_ADDR
// if not result then
38710: LD_VAR 0 6
38714: NOT
38715: IFFALSE 38741
// result := [ [ i , tmp ] ] else
38717: LD_ADDR_VAR 0 6
38721: PUSH
38722: LD_VAR 0 7
38726: PUSH
38727: LD_VAR 0 9
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: ST_TO_ADDR
38739: GO 38883
// begin if result [ result ] [ 2 ] <= tmp then
38741: LD_VAR 0 6
38745: PUSH
38746: LD_VAR 0 6
38750: ARRAY
38751: PUSH
38752: LD_INT 2
38754: ARRAY
38755: PUSH
38756: LD_VAR 0 9
38760: LESSEQUAL
38761: IFFALSE 38803
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38763: LD_ADDR_VAR 0 6
38767: PUSH
38768: LD_VAR 0 6
38772: PPUSH
38773: LD_VAR 0 6
38777: PUSH
38778: LD_INT 1
38780: PLUS
38781: PPUSH
38782: LD_VAR 0 7
38786: PUSH
38787: LD_VAR 0 9
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 2
38800: ST_TO_ADDR
38801: GO 38883
// for j := 1 to result do
38803: LD_ADDR_VAR 0 8
38807: PUSH
38808: DOUBLE
38809: LD_INT 1
38811: DEC
38812: ST_TO_ADDR
38813: LD_VAR 0 6
38817: PUSH
38818: FOR_TO
38819: IFFALSE 38881
// begin if tmp < result [ j ] [ 2 ] then
38821: LD_VAR 0 9
38825: PUSH
38826: LD_VAR 0 6
38830: PUSH
38831: LD_VAR 0 8
38835: ARRAY
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: LESS
38841: IFFALSE 38879
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38843: LD_ADDR_VAR 0 6
38847: PUSH
38848: LD_VAR 0 6
38852: PPUSH
38853: LD_VAR 0 8
38857: PPUSH
38858: LD_VAR 0 7
38862: PUSH
38863: LD_VAR 0 9
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PPUSH
38872: CALL_OW 2
38876: ST_TO_ADDR
// break ;
38877: GO 38881
// end ; end ;
38879: GO 38818
38881: POP
38882: POP
// end ; end ;
38883: GO 38682
38885: POP
38886: POP
// if result and not asc then
38887: LD_VAR 0 6
38891: PUSH
38892: LD_VAR 0 4
38896: NOT
38897: AND
38898: IFFALSE 38973
// begin tmp := result ;
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_VAR 0 6
38909: ST_TO_ADDR
// for i = tmp downto 1 do
38910: LD_ADDR_VAR 0 7
38914: PUSH
38915: DOUBLE
38916: LD_VAR 0 9
38920: INC
38921: ST_TO_ADDR
38922: LD_INT 1
38924: PUSH
38925: FOR_DOWNTO
38926: IFFALSE 38971
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38928: LD_ADDR_VAR 0 6
38932: PUSH
38933: LD_VAR 0 6
38937: PPUSH
38938: LD_VAR 0 9
38942: PUSH
38943: LD_VAR 0 7
38947: MINUS
38948: PUSH
38949: LD_INT 1
38951: PLUS
38952: PPUSH
38953: LD_VAR 0 9
38957: PUSH
38958: LD_VAR 0 7
38962: ARRAY
38963: PPUSH
38964: CALL_OW 1
38968: ST_TO_ADDR
38969: GO 38925
38971: POP
38972: POP
// end ; tmp := [ ] ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: EMPTY
38979: ST_TO_ADDR
// if mode then
38980: LD_VAR 0 5
38984: IFFALSE 39053
// begin for i = 1 to result do
38986: LD_ADDR_VAR 0 7
38990: PUSH
38991: DOUBLE
38992: LD_INT 1
38994: DEC
38995: ST_TO_ADDR
38996: LD_VAR 0 6
39000: PUSH
39001: FOR_TO
39002: IFFALSE 39041
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: LD_VAR 0 9
39013: PPUSH
39014: LD_VAR 0 7
39018: PPUSH
39019: LD_VAR 0 6
39023: PUSH
39024: LD_VAR 0 7
39028: ARRAY
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PPUSH
39034: CALL_OW 1
39038: ST_TO_ADDR
39039: GO 39001
39041: POP
39042: POP
// result := tmp ;
39043: LD_ADDR_VAR 0 6
39047: PUSH
39048: LD_VAR 0 9
39052: ST_TO_ADDR
// end ; end ;
39053: LD_VAR 0 6
39057: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39058: LD_INT 0
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39066: LD_ADDR_VAR 0 5
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// if not x or not y then
39088: LD_VAR 0 2
39092: NOT
39093: PUSH
39094: LD_VAR 0 3
39098: NOT
39099: OR
39100: IFFALSE 39104
// exit ;
39102: GO 40754
// if not range then
39104: LD_VAR 0 4
39108: NOT
39109: IFFALSE 39119
// range := 10 ;
39111: LD_ADDR_VAR 0 4
39115: PUSH
39116: LD_INT 10
39118: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39119: LD_ADDR_VAR 0 8
39123: PUSH
39124: LD_INT 81
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 92
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_VAR 0 3
39148: PUSH
39149: LD_VAR 0 4
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 21
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: PPUSH
39182: CALL_OW 69
39186: ST_TO_ADDR
// if not tmp then
39187: LD_VAR 0 8
39191: NOT
39192: IFFALSE 39196
// exit ;
39194: GO 40754
// for i in tmp do
39196: LD_ADDR_VAR 0 6
39200: PUSH
39201: LD_VAR 0 8
39205: PUSH
39206: FOR_IN
39207: IFFALSE 40729
// begin points := [ 0 , 0 , 0 ] ;
39209: LD_ADDR_VAR 0 9
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
// bpoints := 1 ;
39228: LD_ADDR_VAR 0 10
39232: PUSH
39233: LD_INT 1
39235: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39236: LD_VAR 0 6
39240: PPUSH
39241: CALL_OW 247
39245: PUSH
39246: LD_INT 1
39248: DOUBLE
39249: EQUAL
39250: IFTRUE 39254
39252: GO 39832
39254: POP
// begin if GetClass ( i ) = 1 then
39255: LD_VAR 0 6
39259: PPUSH
39260: CALL_OW 257
39264: PUSH
39265: LD_INT 1
39267: EQUAL
39268: IFFALSE 39289
// points := [ 10 , 5 , 3 ] ;
39270: LD_ADDR_VAR 0 9
39274: PUSH
39275: LD_INT 10
39277: PUSH
39278: LD_INT 5
39280: PUSH
39281: LD_INT 3
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39289: LD_VAR 0 6
39293: PPUSH
39294: CALL_OW 257
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 4
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: IN
39313: IFFALSE 39334
// points := [ 3 , 2 , 1 ] ;
39315: LD_ADDR_VAR 0 9
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39334: LD_VAR 0 6
39338: PPUSH
39339: CALL_OW 257
39343: PUSH
39344: LD_INT 5
39346: EQUAL
39347: IFFALSE 39368
// points := [ 130 , 5 , 2 ] ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_INT 130
39356: PUSH
39357: LD_INT 5
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39368: LD_VAR 0 6
39372: PPUSH
39373: CALL_OW 257
39377: PUSH
39378: LD_INT 8
39380: EQUAL
39381: IFFALSE 39402
// points := [ 35 , 35 , 30 ] ;
39383: LD_ADDR_VAR 0 9
39387: PUSH
39388: LD_INT 35
39390: PUSH
39391: LD_INT 35
39393: PUSH
39394: LD_INT 30
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39402: LD_VAR 0 6
39406: PPUSH
39407: CALL_OW 257
39411: PUSH
39412: LD_INT 9
39414: EQUAL
39415: IFFALSE 39436
// points := [ 20 , 55 , 40 ] ;
39417: LD_ADDR_VAR 0 9
39421: PUSH
39422: LD_INT 20
39424: PUSH
39425: LD_INT 55
39427: PUSH
39428: LD_INT 40
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39436: LD_VAR 0 6
39440: PPUSH
39441: CALL_OW 257
39445: PUSH
39446: LD_INT 12
39448: PUSH
39449: LD_INT 16
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: IN
39456: IFFALSE 39477
// points := [ 5 , 3 , 2 ] ;
39458: LD_ADDR_VAR 0 9
39462: PUSH
39463: LD_INT 5
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39477: LD_VAR 0 6
39481: PPUSH
39482: CALL_OW 257
39486: PUSH
39487: LD_INT 17
39489: EQUAL
39490: IFFALSE 39511
// points := [ 100 , 50 , 75 ] ;
39492: LD_ADDR_VAR 0 9
39496: PUSH
39497: LD_INT 100
39499: PUSH
39500: LD_INT 50
39502: PUSH
39503: LD_INT 75
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39511: LD_VAR 0 6
39515: PPUSH
39516: CALL_OW 257
39520: PUSH
39521: LD_INT 15
39523: EQUAL
39524: IFFALSE 39545
// points := [ 10 , 5 , 3 ] ;
39526: LD_ADDR_VAR 0 9
39530: PUSH
39531: LD_INT 10
39533: PUSH
39534: LD_INT 5
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39545: LD_VAR 0 6
39549: PPUSH
39550: CALL_OW 257
39554: PUSH
39555: LD_INT 14
39557: EQUAL
39558: IFFALSE 39579
// points := [ 10 , 0 , 0 ] ;
39560: LD_ADDR_VAR 0 9
39564: PUSH
39565: LD_INT 10
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 257
39588: PUSH
39589: LD_INT 11
39591: EQUAL
39592: IFFALSE 39613
// points := [ 30 , 10 , 5 ] ;
39594: LD_ADDR_VAR 0 9
39598: PUSH
39599: LD_INT 30
39601: PUSH
39602: LD_INT 10
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39613: LD_VAR 0 1
39617: PPUSH
39618: LD_INT 5
39620: PPUSH
39621: CALL_OW 321
39625: PUSH
39626: LD_INT 2
39628: EQUAL
39629: IFFALSE 39646
// bpoints := bpoints * 1.8 ;
39631: LD_ADDR_VAR 0 10
39635: PUSH
39636: LD_VAR 0 10
39640: PUSH
39641: LD_REAL  1.80000000000000E+0000
39644: MUL
39645: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39646: LD_VAR 0 6
39650: PPUSH
39651: CALL_OW 257
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 4
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: IN
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_INT 51
39682: PPUSH
39683: CALL_OW 321
39687: PUSH
39688: LD_INT 2
39690: EQUAL
39691: AND
39692: IFFALSE 39709
// bpoints := bpoints * 1.2 ;
39694: LD_ADDR_VAR 0 10
39698: PUSH
39699: LD_VAR 0 10
39703: PUSH
39704: LD_REAL  1.20000000000000E+0000
39707: MUL
39708: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39709: LD_VAR 0 6
39713: PPUSH
39714: CALL_OW 257
39718: PUSH
39719: LD_INT 5
39721: PUSH
39722: LD_INT 7
39724: PUSH
39725: LD_INT 9
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: IN
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: LD_INT 52
39741: PPUSH
39742: CALL_OW 321
39746: PUSH
39747: LD_INT 2
39749: EQUAL
39750: AND
39751: IFFALSE 39768
// bpoints := bpoints * 1.5 ;
39753: LD_ADDR_VAR 0 10
39757: PUSH
39758: LD_VAR 0 10
39762: PUSH
39763: LD_REAL  1.50000000000000E+0000
39766: MUL
39767: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39768: LD_VAR 0 1
39772: PPUSH
39773: LD_INT 66
39775: PPUSH
39776: CALL_OW 321
39780: PUSH
39781: LD_INT 2
39783: EQUAL
39784: IFFALSE 39801
// bpoints := bpoints * 1.1 ;
39786: LD_ADDR_VAR 0 10
39790: PUSH
39791: LD_VAR 0 10
39795: PUSH
39796: LD_REAL  1.10000000000000E+0000
39799: MUL
39800: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39801: LD_ADDR_VAR 0 10
39805: PUSH
39806: LD_VAR 0 10
39810: PUSH
39811: LD_VAR 0 6
39815: PPUSH
39816: LD_INT 1
39818: PPUSH
39819: CALL_OW 259
39823: PUSH
39824: LD_REAL  1.15000000000000E+0000
39827: MUL
39828: MUL
39829: ST_TO_ADDR
// end ; unit_vehicle :
39830: GO 40658
39832: LD_INT 2
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 40646
39840: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39841: LD_VAR 0 6
39845: PPUSH
39846: CALL_OW 264
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 42
39856: PUSH
39857: LD_INT 24
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: IN
39865: IFFALSE 39886
// points := [ 25 , 5 , 3 ] ;
39867: LD_ADDR_VAR 0 9
39871: PUSH
39872: LD_INT 25
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39886: LD_VAR 0 6
39890: PPUSH
39891: CALL_OW 264
39895: PUSH
39896: LD_INT 4
39898: PUSH
39899: LD_INT 43
39901: PUSH
39902: LD_INT 25
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: IN
39910: IFFALSE 39931
// points := [ 40 , 15 , 5 ] ;
39912: LD_ADDR_VAR 0 9
39916: PUSH
39917: LD_INT 40
39919: PUSH
39920: LD_INT 15
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39931: LD_VAR 0 6
39935: PPUSH
39936: CALL_OW 264
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: IN
39951: IFFALSE 39972
// points := [ 7 , 25 , 8 ] ;
39953: LD_ADDR_VAR 0 9
39957: PUSH
39958: LD_INT 7
39960: PUSH
39961: LD_INT 25
39963: PUSH
39964: LD_INT 8
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39972: LD_VAR 0 6
39976: PPUSH
39977: CALL_OW 264
39981: PUSH
39982: LD_INT 5
39984: PUSH
39985: LD_INT 27
39987: PUSH
39988: LD_INT 44
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: IN
39996: IFFALSE 40017
// points := [ 14 , 50 , 16 ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_INT 14
40005: PUSH
40006: LD_INT 50
40008: PUSH
40009: LD_INT 16
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40017: LD_VAR 0 6
40021: PPUSH
40022: CALL_OW 264
40026: PUSH
40027: LD_INT 6
40029: PUSH
40030: LD_INT 46
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: IN
40037: IFFALSE 40058
// points := [ 32 , 120 , 70 ] ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_INT 32
40046: PUSH
40047: LD_INT 120
40049: PUSH
40050: LD_INT 70
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40058: LD_VAR 0 6
40062: PPUSH
40063: CALL_OW 264
40067: PUSH
40068: LD_INT 7
40070: PUSH
40071: LD_INT 28
40073: PUSH
40074: LD_INT 45
40076: PUSH
40077: LD_INT 92
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: IN
40086: IFFALSE 40107
// points := [ 35 , 20 , 45 ] ;
40088: LD_ADDR_VAR 0 9
40092: PUSH
40093: LD_INT 35
40095: PUSH
40096: LD_INT 20
40098: PUSH
40099: LD_INT 45
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40107: LD_VAR 0 6
40111: PPUSH
40112: CALL_OW 264
40116: PUSH
40117: LD_INT 47
40119: PUSH
40120: EMPTY
40121: LIST
40122: IN
40123: IFFALSE 40144
// points := [ 67 , 45 , 75 ] ;
40125: LD_ADDR_VAR 0 9
40129: PUSH
40130: LD_INT 67
40132: PUSH
40133: LD_INT 45
40135: PUSH
40136: LD_INT 75
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40144: LD_VAR 0 6
40148: PPUSH
40149: CALL_OW 264
40153: PUSH
40154: LD_INT 26
40156: PUSH
40157: EMPTY
40158: LIST
40159: IN
40160: IFFALSE 40181
// points := [ 120 , 30 , 80 ] ;
40162: LD_ADDR_VAR 0 9
40166: PUSH
40167: LD_INT 120
40169: PUSH
40170: LD_INT 30
40172: PUSH
40173: LD_INT 80
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40181: LD_VAR 0 6
40185: PPUSH
40186: CALL_OW 264
40190: PUSH
40191: LD_INT 22
40193: PUSH
40194: EMPTY
40195: LIST
40196: IN
40197: IFFALSE 40218
// points := [ 40 , 1 , 1 ] ;
40199: LD_ADDR_VAR 0 9
40203: PUSH
40204: LD_INT 40
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40218: LD_VAR 0 6
40222: PPUSH
40223: CALL_OW 264
40227: PUSH
40228: LD_INT 29
40230: PUSH
40231: EMPTY
40232: LIST
40233: IN
40234: IFFALSE 40255
// points := [ 70 , 200 , 400 ] ;
40236: LD_ADDR_VAR 0 9
40240: PUSH
40241: LD_INT 70
40243: PUSH
40244: LD_INT 200
40246: PUSH
40247: LD_INT 400
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40255: LD_VAR 0 6
40259: PPUSH
40260: CALL_OW 264
40264: PUSH
40265: LD_INT 14
40267: PUSH
40268: LD_INT 53
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: IN
40275: IFFALSE 40296
// points := [ 40 , 10 , 20 ] ;
40277: LD_ADDR_VAR 0 9
40281: PUSH
40282: LD_INT 40
40284: PUSH
40285: LD_INT 10
40287: PUSH
40288: LD_INT 20
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40296: LD_VAR 0 6
40300: PPUSH
40301: CALL_OW 264
40305: PUSH
40306: LD_INT 9
40308: PUSH
40309: EMPTY
40310: LIST
40311: IN
40312: IFFALSE 40333
// points := [ 5 , 70 , 20 ] ;
40314: LD_ADDR_VAR 0 9
40318: PUSH
40319: LD_INT 5
40321: PUSH
40322: LD_INT 70
40324: PUSH
40325: LD_INT 20
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 264
40342: PUSH
40343: LD_INT 10
40345: PUSH
40346: EMPTY
40347: LIST
40348: IN
40349: IFFALSE 40370
// points := [ 35 , 110 , 70 ] ;
40351: LD_ADDR_VAR 0 9
40355: PUSH
40356: LD_INT 35
40358: PUSH
40359: LD_INT 110
40361: PUSH
40362: LD_INT 70
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40370: LD_VAR 0 6
40374: PPUSH
40375: CALL_OW 265
40379: PUSH
40380: LD_INT 25
40382: EQUAL
40383: IFFALSE 40404
// points := [ 80 , 65 , 100 ] ;
40385: LD_ADDR_VAR 0 9
40389: PUSH
40390: LD_INT 80
40392: PUSH
40393: LD_INT 65
40395: PUSH
40396: LD_INT 100
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40404: LD_VAR 0 6
40408: PPUSH
40409: CALL_OW 263
40413: PUSH
40414: LD_INT 1
40416: EQUAL
40417: IFFALSE 40452
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40419: LD_ADDR_VAR 0 10
40423: PUSH
40424: LD_VAR 0 10
40428: PUSH
40429: LD_VAR 0 6
40433: PPUSH
40434: CALL_OW 311
40438: PPUSH
40439: LD_INT 3
40441: PPUSH
40442: CALL_OW 259
40446: PUSH
40447: LD_INT 4
40449: MUL
40450: MUL
40451: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40452: LD_VAR 0 6
40456: PPUSH
40457: CALL_OW 263
40461: PUSH
40462: LD_INT 2
40464: EQUAL
40465: IFFALSE 40516
// begin j := IsControledBy ( i ) ;
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 6
40476: PPUSH
40477: CALL_OW 312
40481: ST_TO_ADDR
// if j then
40482: LD_VAR 0 7
40486: IFFALSE 40516
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40488: LD_ADDR_VAR 0 10
40492: PUSH
40493: LD_VAR 0 10
40497: PUSH
40498: LD_VAR 0 7
40502: PPUSH
40503: LD_INT 3
40505: PPUSH
40506: CALL_OW 259
40510: PUSH
40511: LD_INT 3
40513: MUL
40514: MUL
40515: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40516: LD_VAR 0 6
40520: PPUSH
40521: CALL_OW 264
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 6
40531: PUSH
40532: LD_INT 46
40534: PUSH
40535: LD_INT 44
40537: PUSH
40538: LD_INT 47
40540: PUSH
40541: LD_INT 45
40543: PUSH
40544: LD_INT 28
40546: PUSH
40547: LD_INT 7
40549: PUSH
40550: LD_INT 27
40552: PUSH
40553: LD_INT 29
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: IN
40568: PUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: LD_INT 52
40576: PPUSH
40577: CALL_OW 321
40581: PUSH
40582: LD_INT 2
40584: EQUAL
40585: AND
40586: IFFALSE 40603
// bpoints := bpoints * 1.2 ;
40588: LD_ADDR_VAR 0 10
40592: PUSH
40593: LD_VAR 0 10
40597: PUSH
40598: LD_REAL  1.20000000000000E+0000
40601: MUL
40602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40603: LD_VAR 0 6
40607: PPUSH
40608: CALL_OW 264
40612: PUSH
40613: LD_INT 6
40615: PUSH
40616: LD_INT 46
40618: PUSH
40619: LD_INT 47
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: IN
40627: IFFALSE 40644
// bpoints := bpoints * 1.2 ;
40629: LD_ADDR_VAR 0 10
40633: PUSH
40634: LD_VAR 0 10
40638: PUSH
40639: LD_REAL  1.20000000000000E+0000
40642: MUL
40643: ST_TO_ADDR
// end ; unit_building :
40644: GO 40658
40646: LD_INT 3
40648: DOUBLE
40649: EQUAL
40650: IFTRUE 40654
40652: GO 40657
40654: POP
// ; end ;
40655: GO 40658
40657: POP
// for j = 1 to 3 do
40658: LD_ADDR_VAR 0 7
40662: PUSH
40663: DOUBLE
40664: LD_INT 1
40666: DEC
40667: ST_TO_ADDR
40668: LD_INT 3
40670: PUSH
40671: FOR_TO
40672: IFFALSE 40725
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40674: LD_ADDR_VAR 0 5
40678: PUSH
40679: LD_VAR 0 5
40683: PPUSH
40684: LD_VAR 0 7
40688: PPUSH
40689: LD_VAR 0 5
40693: PUSH
40694: LD_VAR 0 7
40698: ARRAY
40699: PUSH
40700: LD_VAR 0 9
40704: PUSH
40705: LD_VAR 0 7
40709: ARRAY
40710: PUSH
40711: LD_VAR 0 10
40715: MUL
40716: PLUS
40717: PPUSH
40718: CALL_OW 1
40722: ST_TO_ADDR
40723: GO 40671
40725: POP
40726: POP
// end ;
40727: GO 39206
40729: POP
40730: POP
// result := Replace ( result , 4 , tmp ) ;
40731: LD_ADDR_VAR 0 5
40735: PUSH
40736: LD_VAR 0 5
40740: PPUSH
40741: LD_INT 4
40743: PPUSH
40744: LD_VAR 0 8
40748: PPUSH
40749: CALL_OW 1
40753: ST_TO_ADDR
// end ;
40754: LD_VAR 0 5
40758: RET
// export function DangerAtRange ( unit , range ) ; begin
40759: LD_INT 0
40761: PPUSH
// if not unit then
40762: LD_VAR 0 1
40766: NOT
40767: IFFALSE 40771
// exit ;
40769: GO 40816
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40771: LD_ADDR_VAR 0 3
40775: PUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 255
40785: PPUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 250
40795: PPUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 251
40805: PPUSH
40806: LD_VAR 0 2
40810: PPUSH
40811: CALL 39058 0 4
40815: ST_TO_ADDR
// end ;
40816: LD_VAR 0 3
40820: RET
// export function DangerInArea ( side , area ) ; begin
40821: LD_INT 0
40823: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_INT 81
40836: PUSH
40837: LD_VAR 0 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PPUSH
40846: CALL_OW 70
40850: ST_TO_ADDR
// end ;
40851: LD_VAR 0 3
40855: RET
// export function IsExtension ( b ) ; begin
40856: LD_INT 0
40858: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40859: LD_ADDR_VAR 0 2
40863: PUSH
40864: LD_VAR 0 1
40868: PUSH
40869: LD_INT 23
40871: PUSH
40872: LD_INT 20
40874: PUSH
40875: LD_INT 22
40877: PUSH
40878: LD_INT 17
40880: PUSH
40881: LD_INT 24
40883: PUSH
40884: LD_INT 21
40886: PUSH
40887: LD_INT 19
40889: PUSH
40890: LD_INT 16
40892: PUSH
40893: LD_INT 25
40895: PUSH
40896: LD_INT 18
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: IN
40911: ST_TO_ADDR
// end ;
40912: LD_VAR 0 2
40916: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40917: LD_INT 0
40919: PPUSH
40920: PPUSH
40921: PPUSH
// result := [ ] ;
40922: LD_ADDR_VAR 0 4
40926: PUSH
40927: EMPTY
40928: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40929: LD_ADDR_VAR 0 5
40933: PUSH
40934: LD_VAR 0 2
40938: PPUSH
40939: LD_INT 21
40941: PUSH
40942: LD_INT 3
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PPUSH
40949: CALL_OW 70
40953: ST_TO_ADDR
// if not tmp then
40954: LD_VAR 0 5
40958: NOT
40959: IFFALSE 40963
// exit ;
40961: GO 41027
// if checkLink then
40963: LD_VAR 0 3
40967: IFFALSE 41017
// begin for i in tmp do
40969: LD_ADDR_VAR 0 6
40973: PUSH
40974: LD_VAR 0 5
40978: PUSH
40979: FOR_IN
40980: IFFALSE 41015
// if GetBase ( i ) <> base then
40982: LD_VAR 0 6
40986: PPUSH
40987: CALL_OW 274
40991: PUSH
40992: LD_VAR 0 1
40996: NONEQUAL
40997: IFFALSE 41013
// ComLinkToBase ( base , i ) ;
40999: LD_VAR 0 1
41003: PPUSH
41004: LD_VAR 0 6
41008: PPUSH
41009: CALL_OW 169
41013: GO 40979
41015: POP
41016: POP
// end ; result := tmp ;
41017: LD_ADDR_VAR 0 4
41021: PUSH
41022: LD_VAR 0 5
41026: ST_TO_ADDR
// end ;
41027: LD_VAR 0 4
41031: RET
// export function ComComplete ( units , b ) ; var i ; begin
41032: LD_INT 0
41034: PPUSH
41035: PPUSH
// if not units then
41036: LD_VAR 0 1
41040: NOT
41041: IFFALSE 41045
// exit ;
41043: GO 41135
// for i in units do
41045: LD_ADDR_VAR 0 4
41049: PUSH
41050: LD_VAR 0 1
41054: PUSH
41055: FOR_IN
41056: IFFALSE 41133
// if BuildingStatus ( b ) = bs_build then
41058: LD_VAR 0 2
41062: PPUSH
41063: CALL_OW 461
41067: PUSH
41068: LD_INT 1
41070: EQUAL
41071: IFFALSE 41131
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41073: LD_VAR 0 4
41077: PPUSH
41078: LD_STRING h
41080: PUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: CALL_OW 250
41090: PUSH
41091: LD_VAR 0 2
41095: PPUSH
41096: CALL_OW 251
41100: PUSH
41101: LD_VAR 0 2
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: PPUSH
41127: CALL_OW 446
41131: GO 41055
41133: POP
41134: POP
// end ;
41135: LD_VAR 0 3
41139: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41140: LD_INT 0
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41148: LD_VAR 0 1
41152: NOT
41153: PUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 263
41163: PUSH
41164: LD_INT 2
41166: NONEQUAL
41167: OR
41168: IFFALSE 41172
// exit ;
41170: GO 41488
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41172: LD_ADDR_VAR 0 6
41176: PUSH
41177: LD_INT 22
41179: PUSH
41180: LD_VAR 0 1
41184: PPUSH
41185: CALL_OW 255
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 30
41199: PUSH
41200: LD_INT 36
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 34
41209: PUSH
41210: LD_INT 31
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PPUSH
41226: CALL_OW 69
41230: ST_TO_ADDR
// if not tmp then
41231: LD_VAR 0 6
41235: NOT
41236: IFFALSE 41240
// exit ;
41238: GO 41488
// result := [ ] ;
41240: LD_ADDR_VAR 0 2
41244: PUSH
41245: EMPTY
41246: ST_TO_ADDR
// for i in tmp do
41247: LD_ADDR_VAR 0 3
41251: PUSH
41252: LD_VAR 0 6
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41329
// begin t := UnitsInside ( i ) ;
41260: LD_ADDR_VAR 0 4
41264: PUSH
41265: LD_VAR 0 3
41269: PPUSH
41270: CALL_OW 313
41274: ST_TO_ADDR
// if t then
41275: LD_VAR 0 4
41279: IFFALSE 41327
// for j in t do
41281: LD_ADDR_VAR 0 7
41285: PUSH
41286: LD_VAR 0 4
41290: PUSH
41291: FOR_IN
41292: IFFALSE 41325
// result := Replace ( result , result + 1 , j ) ;
41294: LD_ADDR_VAR 0 2
41298: PUSH
41299: LD_VAR 0 2
41303: PPUSH
41304: LD_VAR 0 2
41308: PUSH
41309: LD_INT 1
41311: PLUS
41312: PPUSH
41313: LD_VAR 0 7
41317: PPUSH
41318: CALL_OW 1
41322: ST_TO_ADDR
41323: GO 41291
41325: POP
41326: POP
// end ;
41327: GO 41257
41329: POP
41330: POP
// if not result then
41331: LD_VAR 0 2
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41488
// mech := result [ 1 ] ;
41340: LD_ADDR_VAR 0 5
41344: PUSH
41345: LD_VAR 0 2
41349: PUSH
41350: LD_INT 1
41352: ARRAY
41353: ST_TO_ADDR
// if result > 1 then
41354: LD_VAR 0 2
41358: PUSH
41359: LD_INT 1
41361: GREATER
41362: IFFALSE 41474
// begin for i = 2 to result do
41364: LD_ADDR_VAR 0 3
41368: PUSH
41369: DOUBLE
41370: LD_INT 2
41372: DEC
41373: ST_TO_ADDR
41374: LD_VAR 0 2
41378: PUSH
41379: FOR_TO
41380: IFFALSE 41472
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41382: LD_ADDR_VAR 0 4
41386: PUSH
41387: LD_VAR 0 2
41391: PUSH
41392: LD_VAR 0 3
41396: ARRAY
41397: PPUSH
41398: LD_INT 3
41400: PPUSH
41401: CALL_OW 259
41405: PUSH
41406: LD_VAR 0 2
41410: PUSH
41411: LD_VAR 0 3
41415: ARRAY
41416: PPUSH
41417: CALL_OW 432
41421: MINUS
41422: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41423: LD_VAR 0 4
41427: PUSH
41428: LD_VAR 0 5
41432: PPUSH
41433: LD_INT 3
41435: PPUSH
41436: CALL_OW 259
41440: PUSH
41441: LD_VAR 0 5
41445: PPUSH
41446: CALL_OW 432
41450: MINUS
41451: GREATEREQUAL
41452: IFFALSE 41470
// mech := result [ i ] ;
41454: LD_ADDR_VAR 0 5
41458: PUSH
41459: LD_VAR 0 2
41463: PUSH
41464: LD_VAR 0 3
41468: ARRAY
41469: ST_TO_ADDR
// end ;
41470: GO 41379
41472: POP
41473: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_VAR 0 5
41483: PPUSH
41484: CALL_OW 135
// end ;
41488: LD_VAR 0 2
41492: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41493: LD_INT 0
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
// result := [ ] ;
41508: LD_ADDR_VAR 0 7
41512: PUSH
41513: EMPTY
41514: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 266
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: IN
41535: NOT
41536: IFFALSE 41540
// exit ;
41538: GO 43174
// if name then
41540: LD_VAR 0 3
41544: IFFALSE 41560
// SetBName ( base_dep , name ) ;
41546: LD_VAR 0 1
41550: PPUSH
41551: LD_VAR 0 3
41555: PPUSH
41556: CALL_OW 500
// base := GetBase ( base_dep ) ;
41560: LD_ADDR_VAR 0 15
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 274
41574: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41575: LD_ADDR_VAR 0 16
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL_OW 255
41589: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41590: LD_ADDR_VAR 0 17
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 248
41604: ST_TO_ADDR
// if sources then
41605: LD_VAR 0 5
41609: IFFALSE 41656
// for i = 1 to 3 do
41611: LD_ADDR_VAR 0 8
41615: PUSH
41616: DOUBLE
41617: LD_INT 1
41619: DEC
41620: ST_TO_ADDR
41621: LD_INT 3
41623: PUSH
41624: FOR_TO
41625: IFFALSE 41654
// AddResourceType ( base , i , sources [ i ] ) ;
41627: LD_VAR 0 15
41631: PPUSH
41632: LD_VAR 0 8
41636: PPUSH
41637: LD_VAR 0 5
41641: PUSH
41642: LD_VAR 0 8
41646: ARRAY
41647: PPUSH
41648: CALL_OW 276
41652: GO 41624
41654: POP
41655: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41656: LD_ADDR_VAR 0 18
41660: PUSH
41661: LD_VAR 0 15
41665: PPUSH
41666: LD_VAR 0 2
41670: PPUSH
41671: LD_INT 1
41673: PPUSH
41674: CALL 40917 0 3
41678: ST_TO_ADDR
// InitHc ;
41679: CALL_OW 19
// InitUc ;
41683: CALL_OW 18
// uc_side := side ;
41687: LD_ADDR_OWVAR 20
41691: PUSH
41692: LD_VAR 0 16
41696: ST_TO_ADDR
// uc_nation := nation ;
41697: LD_ADDR_OWVAR 21
41701: PUSH
41702: LD_VAR 0 17
41706: ST_TO_ADDR
// if buildings then
41707: LD_VAR 0 18
41711: IFFALSE 43033
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41713: LD_ADDR_VAR 0 19
41717: PUSH
41718: LD_VAR 0 18
41722: PPUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 30
41728: PUSH
41729: LD_INT 29
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 30
41738: PUSH
41739: LD_INT 30
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 72
41755: ST_TO_ADDR
// if tmp then
41756: LD_VAR 0 19
41760: IFFALSE 41808
// for i in tmp do
41762: LD_ADDR_VAR 0 8
41766: PUSH
41767: LD_VAR 0 19
41771: PUSH
41772: FOR_IN
41773: IFFALSE 41806
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41775: LD_VAR 0 8
41779: PPUSH
41780: CALL_OW 250
41784: PPUSH
41785: LD_VAR 0 8
41789: PPUSH
41790: CALL_OW 251
41794: PPUSH
41795: LD_VAR 0 16
41799: PPUSH
41800: CALL_OW 441
41804: GO 41772
41806: POP
41807: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41808: LD_VAR 0 18
41812: PPUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 30
41818: PUSH
41819: LD_INT 32
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 30
41828: PUSH
41829: LD_INT 33
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: PPUSH
41841: CALL_OW 72
41845: IFFALSE 41933
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41847: LD_ADDR_VAR 0 8
41851: PUSH
41852: LD_VAR 0 18
41856: PPUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 30
41862: PUSH
41863: LD_INT 32
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 30
41872: PUSH
41873: LD_INT 33
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: PPUSH
41885: CALL_OW 72
41889: PUSH
41890: FOR_IN
41891: IFFALSE 41931
// begin if not GetBWeapon ( i ) then
41893: LD_VAR 0 8
41897: PPUSH
41898: CALL_OW 269
41902: NOT
41903: IFFALSE 41929
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41905: LD_VAR 0 8
41909: PPUSH
41910: LD_VAR 0 8
41914: PPUSH
41915: LD_VAR 0 2
41919: PPUSH
41920: CALL 43179 0 2
41924: PPUSH
41925: CALL_OW 431
// end ;
41929: GO 41890
41931: POP
41932: POP
// end ; for i = 1 to personel do
41933: LD_ADDR_VAR 0 8
41937: PUSH
41938: DOUBLE
41939: LD_INT 1
41941: DEC
41942: ST_TO_ADDR
41943: LD_VAR 0 6
41947: PUSH
41948: FOR_TO
41949: IFFALSE 43013
// begin if i > 4 then
41951: LD_VAR 0 8
41955: PUSH
41956: LD_INT 4
41958: GREATER
41959: IFFALSE 41963
// break ;
41961: GO 43013
// case i of 1 :
41963: LD_VAR 0 8
41967: PUSH
41968: LD_INT 1
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 42056
41976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41977: LD_ADDR_VAR 0 12
41981: PUSH
41982: LD_VAR 0 18
41986: PPUSH
41987: LD_INT 22
41989: PUSH
41990: LD_VAR 0 16
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 58
42001: PUSH
42002: EMPTY
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: LD_INT 32
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 30
42020: PUSH
42021: LD_INT 4
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 30
42030: PUSH
42031: LD_INT 5
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: PPUSH
42049: CALL_OW 72
42053: ST_TO_ADDR
42054: GO 42278
42056: LD_INT 2
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42064
42062: GO 42126
42064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42065: LD_ADDR_VAR 0 12
42069: PUSH
42070: LD_VAR 0 18
42074: PPUSH
42075: LD_INT 22
42077: PUSH
42078: LD_VAR 0 16
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: LD_INT 30
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 30
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PPUSH
42119: CALL_OW 72
42123: ST_TO_ADDR
42124: GO 42278
42126: LD_INT 3
42128: DOUBLE
42129: EQUAL
42130: IFTRUE 42134
42132: GO 42196
42134: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42135: LD_ADDR_VAR 0 12
42139: PUSH
42140: LD_VAR 0 18
42144: PPUSH
42145: LD_INT 22
42147: PUSH
42148: LD_VAR 0 16
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 30
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 30
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PPUSH
42189: CALL_OW 72
42193: ST_TO_ADDR
42194: GO 42278
42196: LD_INT 4
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42204
42202: GO 42277
42204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42205: LD_ADDR_VAR 0 12
42209: PUSH
42210: LD_VAR 0 18
42214: PPUSH
42215: LD_INT 22
42217: PUSH
42218: LD_VAR 0 16
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 30
42232: PUSH
42233: LD_INT 6
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: LD_INT 7
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 30
42252: PUSH
42253: LD_INT 8
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PPUSH
42270: CALL_OW 72
42274: ST_TO_ADDR
42275: GO 42278
42277: POP
// if i = 1 then
42278: LD_VAR 0 8
42282: PUSH
42283: LD_INT 1
42285: EQUAL
42286: IFFALSE 42397
// begin tmp := [ ] ;
42288: LD_ADDR_VAR 0 19
42292: PUSH
42293: EMPTY
42294: ST_TO_ADDR
// for j in f do
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 12
42304: PUSH
42305: FOR_IN
42306: IFFALSE 42379
// if GetBType ( j ) = b_bunker then
42308: LD_VAR 0 9
42312: PPUSH
42313: CALL_OW 266
42317: PUSH
42318: LD_INT 32
42320: EQUAL
42321: IFFALSE 42348
// tmp := Insert ( tmp , 1 , j ) else
42323: LD_ADDR_VAR 0 19
42327: PUSH
42328: LD_VAR 0 19
42332: PPUSH
42333: LD_INT 1
42335: PPUSH
42336: LD_VAR 0 9
42340: PPUSH
42341: CALL_OW 2
42345: ST_TO_ADDR
42346: GO 42377
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42348: LD_ADDR_VAR 0 19
42352: PUSH
42353: LD_VAR 0 19
42357: PPUSH
42358: LD_VAR 0 19
42362: PUSH
42363: LD_INT 1
42365: PLUS
42366: PPUSH
42367: LD_VAR 0 9
42371: PPUSH
42372: CALL_OW 2
42376: ST_TO_ADDR
42377: GO 42305
42379: POP
42380: POP
// if tmp then
42381: LD_VAR 0 19
42385: IFFALSE 42397
// f := tmp ;
42387: LD_ADDR_VAR 0 12
42391: PUSH
42392: LD_VAR 0 19
42396: ST_TO_ADDR
// end ; x := personel [ i ] ;
42397: LD_ADDR_VAR 0 13
42401: PUSH
42402: LD_VAR 0 6
42406: PUSH
42407: LD_VAR 0 8
42411: ARRAY
42412: ST_TO_ADDR
// if x = - 1 then
42413: LD_VAR 0 13
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: EQUAL
42422: IFFALSE 42631
// begin for j in f do
42424: LD_ADDR_VAR 0 9
42428: PUSH
42429: LD_VAR 0 12
42433: PUSH
42434: FOR_IN
42435: IFFALSE 42627
// repeat InitHc ;
42437: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42441: LD_VAR 0 9
42445: PPUSH
42446: CALL_OW 266
42450: PUSH
42451: LD_INT 5
42453: EQUAL
42454: IFFALSE 42524
// begin if UnitsInside ( j ) < 3 then
42456: LD_VAR 0 9
42460: PPUSH
42461: CALL_OW 313
42465: PUSH
42466: LD_INT 3
42468: LESS
42469: IFFALSE 42505
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42471: LD_INT 0
42473: PPUSH
42474: LD_INT 5
42476: PUSH
42477: LD_INT 8
42479: PUSH
42480: LD_INT 9
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: PUSH
42488: LD_VAR 0 17
42492: ARRAY
42493: PPUSH
42494: LD_VAR 0 4
42498: PPUSH
42499: CALL_OW 380
42503: GO 42522
// PrepareHuman ( false , i , skill ) ;
42505: LD_INT 0
42507: PPUSH
42508: LD_VAR 0 8
42512: PPUSH
42513: LD_VAR 0 4
42517: PPUSH
42518: CALL_OW 380
// end else
42522: GO 42541
// PrepareHuman ( false , i , skill ) ;
42524: LD_INT 0
42526: PPUSH
42527: LD_VAR 0 8
42531: PPUSH
42532: LD_VAR 0 4
42536: PPUSH
42537: CALL_OW 380
// un := CreateHuman ;
42541: LD_ADDR_VAR 0 14
42545: PUSH
42546: CALL_OW 44
42550: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42551: LD_ADDR_VAR 0 7
42555: PUSH
42556: LD_VAR 0 7
42560: PPUSH
42561: LD_INT 1
42563: PPUSH
42564: LD_VAR 0 14
42568: PPUSH
42569: CALL_OW 2
42573: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42574: LD_VAR 0 14
42578: PPUSH
42579: LD_VAR 0 9
42583: PPUSH
42584: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42588: LD_VAR 0 9
42592: PPUSH
42593: CALL_OW 313
42597: PUSH
42598: LD_INT 6
42600: EQUAL
42601: PUSH
42602: LD_VAR 0 9
42606: PPUSH
42607: CALL_OW 266
42611: PUSH
42612: LD_INT 32
42614: PUSH
42615: LD_INT 31
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: IN
42622: OR
42623: IFFALSE 42437
42625: GO 42434
42627: POP
42628: POP
// end else
42629: GO 43011
// for j = 1 to x do
42631: LD_ADDR_VAR 0 9
42635: PUSH
42636: DOUBLE
42637: LD_INT 1
42639: DEC
42640: ST_TO_ADDR
42641: LD_VAR 0 13
42645: PUSH
42646: FOR_TO
42647: IFFALSE 43009
// begin InitHc ;
42649: CALL_OW 19
// if not f then
42653: LD_VAR 0 12
42657: NOT
42658: IFFALSE 42747
// begin PrepareHuman ( false , i , skill ) ;
42660: LD_INT 0
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: LD_VAR 0 4
42672: PPUSH
42673: CALL_OW 380
// un := CreateHuman ;
42677: LD_ADDR_VAR 0 14
42681: PUSH
42682: CALL_OW 44
42686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42687: LD_ADDR_VAR 0 7
42691: PUSH
42692: LD_VAR 0 7
42696: PPUSH
42697: LD_INT 1
42699: PPUSH
42700: LD_VAR 0 14
42704: PPUSH
42705: CALL_OW 2
42709: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42710: LD_VAR 0 14
42714: PPUSH
42715: LD_VAR 0 1
42719: PPUSH
42720: CALL_OW 250
42724: PPUSH
42725: LD_VAR 0 1
42729: PPUSH
42730: CALL_OW 251
42734: PPUSH
42735: LD_INT 10
42737: PPUSH
42738: LD_INT 0
42740: PPUSH
42741: CALL_OW 50
// continue ;
42745: GO 42646
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42747: LD_VAR 0 12
42751: PUSH
42752: LD_INT 1
42754: ARRAY
42755: PPUSH
42756: CALL_OW 313
42760: PUSH
42761: LD_VAR 0 12
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: PPUSH
42770: CALL_OW 266
42774: PUSH
42775: LD_INT 32
42777: PUSH
42778: LD_INT 31
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: IN
42785: AND
42786: PUSH
42787: LD_VAR 0 12
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: PPUSH
42796: CALL_OW 313
42800: PUSH
42801: LD_INT 6
42803: EQUAL
42804: OR
42805: IFFALSE 42825
// f := Delete ( f , 1 ) ;
42807: LD_ADDR_VAR 0 12
42811: PUSH
42812: LD_VAR 0 12
42816: PPUSH
42817: LD_INT 1
42819: PPUSH
42820: CALL_OW 3
42824: ST_TO_ADDR
// if not f then
42825: LD_VAR 0 12
42829: NOT
42830: IFFALSE 42848
// begin x := x + 2 ;
42832: LD_ADDR_VAR 0 13
42836: PUSH
42837: LD_VAR 0 13
42841: PUSH
42842: LD_INT 2
42844: PLUS
42845: ST_TO_ADDR
// continue ;
42846: GO 42646
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42848: LD_VAR 0 12
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PPUSH
42857: CALL_OW 266
42861: PUSH
42862: LD_INT 5
42864: EQUAL
42865: IFFALSE 42939
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42867: LD_VAR 0 12
42871: PUSH
42872: LD_INT 1
42874: ARRAY
42875: PPUSH
42876: CALL_OW 313
42880: PUSH
42881: LD_INT 3
42883: LESS
42884: IFFALSE 42920
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42886: LD_INT 0
42888: PPUSH
42889: LD_INT 5
42891: PUSH
42892: LD_INT 8
42894: PUSH
42895: LD_INT 9
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: PUSH
42903: LD_VAR 0 17
42907: ARRAY
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 380
42918: GO 42937
// PrepareHuman ( false , i , skill ) ;
42920: LD_INT 0
42922: PPUSH
42923: LD_VAR 0 8
42927: PPUSH
42928: LD_VAR 0 4
42932: PPUSH
42933: CALL_OW 380
// end else
42937: GO 42956
// PrepareHuman ( false , i , skill ) ;
42939: LD_INT 0
42941: PPUSH
42942: LD_VAR 0 8
42946: PPUSH
42947: LD_VAR 0 4
42951: PPUSH
42952: CALL_OW 380
// un := CreateHuman ;
42956: LD_ADDR_VAR 0 14
42960: PUSH
42961: CALL_OW 44
42965: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42966: LD_ADDR_VAR 0 7
42970: PUSH
42971: LD_VAR 0 7
42975: PPUSH
42976: LD_INT 1
42978: PPUSH
42979: LD_VAR 0 14
42983: PPUSH
42984: CALL_OW 2
42988: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42989: LD_VAR 0 14
42993: PPUSH
42994: LD_VAR 0 12
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PPUSH
43003: CALL_OW 52
// end ;
43007: GO 42646
43009: POP
43010: POP
// end ;
43011: GO 41948
43013: POP
43014: POP
// result := result ^ buildings ;
43015: LD_ADDR_VAR 0 7
43019: PUSH
43020: LD_VAR 0 7
43024: PUSH
43025: LD_VAR 0 18
43029: ADD
43030: ST_TO_ADDR
// end else
43031: GO 43174
// begin for i = 1 to personel do
43033: LD_ADDR_VAR 0 8
43037: PUSH
43038: DOUBLE
43039: LD_INT 1
43041: DEC
43042: ST_TO_ADDR
43043: LD_VAR 0 6
43047: PUSH
43048: FOR_TO
43049: IFFALSE 43172
// begin if i > 4 then
43051: LD_VAR 0 8
43055: PUSH
43056: LD_INT 4
43058: GREATER
43059: IFFALSE 43063
// break ;
43061: GO 43172
// x := personel [ i ] ;
43063: LD_ADDR_VAR 0 13
43067: PUSH
43068: LD_VAR 0 6
43072: PUSH
43073: LD_VAR 0 8
43077: ARRAY
43078: ST_TO_ADDR
// if x = - 1 then
43079: LD_VAR 0 13
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: EQUAL
43088: IFFALSE 43092
// continue ;
43090: GO 43048
// PrepareHuman ( false , i , skill ) ;
43092: LD_INT 0
43094: PPUSH
43095: LD_VAR 0 8
43099: PPUSH
43100: LD_VAR 0 4
43104: PPUSH
43105: CALL_OW 380
// un := CreateHuman ;
43109: LD_ADDR_VAR 0 14
43113: PUSH
43114: CALL_OW 44
43118: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43119: LD_VAR 0 14
43123: PPUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: CALL_OW 250
43133: PPUSH
43134: LD_VAR 0 1
43138: PPUSH
43139: CALL_OW 251
43143: PPUSH
43144: LD_INT 10
43146: PPUSH
43147: LD_INT 0
43149: PPUSH
43150: CALL_OW 50
// result := result ^ un ;
43154: LD_ADDR_VAR 0 7
43158: PUSH
43159: LD_VAR 0 7
43163: PUSH
43164: LD_VAR 0 14
43168: ADD
43169: ST_TO_ADDR
// end ;
43170: GO 43048
43172: POP
43173: POP
// end ; end ;
43174: LD_VAR 0 7
43178: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43179: LD_INT 0
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
// result := false ;
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: LD_INT 0
43204: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43205: LD_VAR 0 1
43209: NOT
43210: PUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 266
43220: PUSH
43221: LD_INT 32
43223: PUSH
43224: LD_INT 33
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: IN
43231: NOT
43232: OR
43233: IFFALSE 43237
// exit ;
43235: GO 44346
// nat := GetNation ( tower ) ;
43237: LD_ADDR_VAR 0 12
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 248
43251: ST_TO_ADDR
// side := GetSide ( tower ) ;
43252: LD_ADDR_VAR 0 16
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 255
43266: ST_TO_ADDR
// x := GetX ( tower ) ;
43267: LD_ADDR_VAR 0 10
43271: PUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: CALL_OW 250
43281: ST_TO_ADDR
// y := GetY ( tower ) ;
43282: LD_ADDR_VAR 0 11
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 251
43296: ST_TO_ADDR
// if not x or not y then
43297: LD_VAR 0 10
43301: NOT
43302: PUSH
43303: LD_VAR 0 11
43307: NOT
43308: OR
43309: IFFALSE 43313
// exit ;
43311: GO 44346
// weapon := 0 ;
43313: LD_ADDR_VAR 0 18
43317: PUSH
43318: LD_INT 0
43320: ST_TO_ADDR
// fac_list := [ ] ;
43321: LD_ADDR_VAR 0 17
43325: PUSH
43326: EMPTY
43327: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43328: LD_ADDR_VAR 0 6
43332: PUSH
43333: LD_VAR 0 1
43337: PPUSH
43338: CALL_OW 274
43342: PPUSH
43343: LD_VAR 0 2
43347: PPUSH
43348: LD_INT 0
43350: PPUSH
43351: CALL 40917 0 3
43355: PPUSH
43356: LD_INT 30
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PPUSH
43366: CALL_OW 72
43370: ST_TO_ADDR
// if not factories then
43371: LD_VAR 0 6
43375: NOT
43376: IFFALSE 43380
// exit ;
43378: GO 44346
// for i in factories do
43380: LD_ADDR_VAR 0 8
43384: PUSH
43385: LD_VAR 0 6
43389: PUSH
43390: FOR_IN
43391: IFFALSE 43416
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43393: LD_ADDR_VAR 0 17
43397: PUSH
43398: LD_VAR 0 17
43402: PUSH
43403: LD_VAR 0 8
43407: PPUSH
43408: CALL_OW 478
43412: UNION
43413: ST_TO_ADDR
43414: GO 43390
43416: POP
43417: POP
// if not fac_list then
43418: LD_VAR 0 17
43422: NOT
43423: IFFALSE 43427
// exit ;
43425: GO 44346
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43427: LD_ADDR_VAR 0 5
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: LD_INT 5
43437: PUSH
43438: LD_INT 9
43440: PUSH
43441: LD_INT 10
43443: PUSH
43444: LD_INT 6
43446: PUSH
43447: LD_INT 7
43449: PUSH
43450: LD_INT 11
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 27
43464: PUSH
43465: LD_INT 28
43467: PUSH
43468: LD_INT 26
43470: PUSH
43471: LD_INT 30
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 43
43482: PUSH
43483: LD_INT 44
43485: PUSH
43486: LD_INT 46
43488: PUSH
43489: LD_INT 45
43491: PUSH
43492: LD_INT 47
43494: PUSH
43495: LD_INT 49
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: PUSH
43511: LD_VAR 0 12
43515: ARRAY
43516: ST_TO_ADDR
// list := list isect fac_list ;
43517: LD_ADDR_VAR 0 5
43521: PUSH
43522: LD_VAR 0 5
43526: PUSH
43527: LD_VAR 0 17
43531: ISECT
43532: ST_TO_ADDR
// if not list then
43533: LD_VAR 0 5
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 44346
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43542: LD_VAR 0 12
43546: PUSH
43547: LD_INT 3
43549: EQUAL
43550: PUSH
43551: LD_INT 49
43553: PUSH
43554: LD_VAR 0 5
43558: IN
43559: AND
43560: PUSH
43561: LD_INT 31
43563: PPUSH
43564: LD_VAR 0 16
43568: PPUSH
43569: CALL_OW 321
43573: PUSH
43574: LD_INT 2
43576: EQUAL
43577: AND
43578: IFFALSE 43638
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43580: LD_INT 22
43582: PUSH
43583: LD_VAR 0 16
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 35
43594: PUSH
43595: LD_INT 49
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 91
43604: PUSH
43605: LD_VAR 0 1
43609: PUSH
43610: LD_INT 10
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: PPUSH
43623: CALL_OW 69
43627: NOT
43628: IFFALSE 43638
// weapon := ru_time_lapser ;
43630: LD_ADDR_VAR 0 18
43634: PUSH
43635: LD_INT 49
43637: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43638: LD_VAR 0 12
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: IN
43653: PUSH
43654: LD_INT 11
43656: PUSH
43657: LD_VAR 0 5
43661: IN
43662: PUSH
43663: LD_INT 30
43665: PUSH
43666: LD_VAR 0 5
43670: IN
43671: OR
43672: AND
43673: PUSH
43674: LD_INT 6
43676: PPUSH
43677: LD_VAR 0 16
43681: PPUSH
43682: CALL_OW 321
43686: PUSH
43687: LD_INT 2
43689: EQUAL
43690: AND
43691: IFFALSE 43856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43693: LD_INT 22
43695: PUSH
43696: LD_VAR 0 16
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 35
43710: PUSH
43711: LD_INT 11
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 35
43720: PUSH
43721: LD_INT 30
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 91
43735: PUSH
43736: LD_VAR 0 1
43740: PUSH
43741: LD_INT 18
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: PPUSH
43754: CALL_OW 69
43758: NOT
43759: PUSH
43760: LD_INT 22
43762: PUSH
43763: LD_VAR 0 16
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 30
43777: PUSH
43778: LD_INT 32
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 30
43787: PUSH
43788: LD_INT 33
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 91
43802: PUSH
43803: LD_VAR 0 1
43807: PUSH
43808: LD_INT 12
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: PUSH
43821: EMPTY
43822: LIST
43823: PPUSH
43824: CALL_OW 69
43828: PUSH
43829: LD_INT 2
43831: GREATER
43832: AND
43833: IFFALSE 43856
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43835: LD_ADDR_VAR 0 18
43839: PUSH
43840: LD_INT 11
43842: PUSH
43843: LD_INT 30
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_VAR 0 12
43854: ARRAY
43855: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43856: LD_VAR 0 18
43860: NOT
43861: PUSH
43862: LD_INT 40
43864: PPUSH
43865: LD_VAR 0 16
43869: PPUSH
43870: CALL_OW 321
43874: PUSH
43875: LD_INT 2
43877: EQUAL
43878: AND
43879: PUSH
43880: LD_INT 7
43882: PUSH
43883: LD_VAR 0 5
43887: IN
43888: PUSH
43889: LD_INT 28
43891: PUSH
43892: LD_VAR 0 5
43896: IN
43897: OR
43898: PUSH
43899: LD_INT 45
43901: PUSH
43902: LD_VAR 0 5
43906: IN
43907: OR
43908: AND
43909: IFFALSE 44163
// begin hex := GetHexInfo ( x , y ) ;
43911: LD_ADDR_VAR 0 4
43915: PUSH
43916: LD_VAR 0 10
43920: PPUSH
43921: LD_VAR 0 11
43925: PPUSH
43926: CALL_OW 546
43930: ST_TO_ADDR
// if hex [ 1 ] then
43931: LD_VAR 0 4
43935: PUSH
43936: LD_INT 1
43938: ARRAY
43939: IFFALSE 43943
// exit ;
43941: GO 44346
// height := hex [ 2 ] ;
43943: LD_ADDR_VAR 0 15
43947: PUSH
43948: LD_VAR 0 4
43952: PUSH
43953: LD_INT 2
43955: ARRAY
43956: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43957: LD_ADDR_VAR 0 14
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: LD_INT 5
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// for i in tmp do
43980: LD_ADDR_VAR 0 8
43984: PUSH
43985: LD_VAR 0 14
43989: PUSH
43990: FOR_IN
43991: IFFALSE 44161
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43993: LD_ADDR_VAR 0 9
43997: PUSH
43998: LD_VAR 0 10
44002: PPUSH
44003: LD_VAR 0 8
44007: PPUSH
44008: LD_INT 5
44010: PPUSH
44011: CALL_OW 272
44015: PUSH
44016: LD_VAR 0 11
44020: PPUSH
44021: LD_VAR 0 8
44025: PPUSH
44026: LD_INT 5
44028: PPUSH
44029: CALL_OW 273
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44038: LD_VAR 0 9
44042: PUSH
44043: LD_INT 1
44045: ARRAY
44046: PPUSH
44047: LD_VAR 0 9
44051: PUSH
44052: LD_INT 2
44054: ARRAY
44055: PPUSH
44056: CALL_OW 488
44060: IFFALSE 44159
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44062: LD_ADDR_VAR 0 4
44066: PUSH
44067: LD_VAR 0 9
44071: PUSH
44072: LD_INT 1
44074: ARRAY
44075: PPUSH
44076: LD_VAR 0 9
44080: PUSH
44081: LD_INT 2
44083: ARRAY
44084: PPUSH
44085: CALL_OW 546
44089: ST_TO_ADDR
// if hex [ 1 ] then
44090: LD_VAR 0 4
44094: PUSH
44095: LD_INT 1
44097: ARRAY
44098: IFFALSE 44102
// continue ;
44100: GO 43990
// h := hex [ 2 ] ;
44102: LD_ADDR_VAR 0 13
44106: PUSH
44107: LD_VAR 0 4
44111: PUSH
44112: LD_INT 2
44114: ARRAY
44115: ST_TO_ADDR
// if h + 7 < height then
44116: LD_VAR 0 13
44120: PUSH
44121: LD_INT 7
44123: PLUS
44124: PUSH
44125: LD_VAR 0 15
44129: LESS
44130: IFFALSE 44159
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44132: LD_ADDR_VAR 0 18
44136: PUSH
44137: LD_INT 7
44139: PUSH
44140: LD_INT 28
44142: PUSH
44143: LD_INT 45
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: PUSH
44151: LD_VAR 0 12
44155: ARRAY
44156: ST_TO_ADDR
// break ;
44157: GO 44161
// end ; end ; end ;
44159: GO 43990
44161: POP
44162: POP
// end ; if not weapon then
44163: LD_VAR 0 18
44167: NOT
44168: IFFALSE 44228
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44170: LD_ADDR_VAR 0 5
44174: PUSH
44175: LD_VAR 0 5
44179: PUSH
44180: LD_INT 11
44182: PUSH
44183: LD_INT 30
44185: PUSH
44186: LD_INT 49
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: LIST
44193: DIFF
44194: ST_TO_ADDR
// if not list then
44195: LD_VAR 0 5
44199: NOT
44200: IFFALSE 44204
// exit ;
44202: GO 44346
// weapon := list [ rand ( 1 , list ) ] ;
44204: LD_ADDR_VAR 0 18
44208: PUSH
44209: LD_VAR 0 5
44213: PUSH
44214: LD_INT 1
44216: PPUSH
44217: LD_VAR 0 5
44221: PPUSH
44222: CALL_OW 12
44226: ARRAY
44227: ST_TO_ADDR
// end ; if weapon then
44228: LD_VAR 0 18
44232: IFFALSE 44346
// begin tmp := CostOfWeapon ( weapon ) ;
44234: LD_ADDR_VAR 0 14
44238: PUSH
44239: LD_VAR 0 18
44243: PPUSH
44244: CALL_OW 451
44248: ST_TO_ADDR
// j := GetBase ( tower ) ;
44249: LD_ADDR_VAR 0 9
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 274
44263: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44264: LD_VAR 0 9
44268: PPUSH
44269: LD_INT 1
44271: PPUSH
44272: CALL_OW 275
44276: PUSH
44277: LD_VAR 0 14
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: GREATEREQUAL
44286: PUSH
44287: LD_VAR 0 9
44291: PPUSH
44292: LD_INT 2
44294: PPUSH
44295: CALL_OW 275
44299: PUSH
44300: LD_VAR 0 14
44304: PUSH
44305: LD_INT 2
44307: ARRAY
44308: GREATEREQUAL
44309: AND
44310: PUSH
44311: LD_VAR 0 9
44315: PPUSH
44316: LD_INT 3
44318: PPUSH
44319: CALL_OW 275
44323: PUSH
44324: LD_VAR 0 14
44328: PUSH
44329: LD_INT 3
44331: ARRAY
44332: GREATEREQUAL
44333: AND
44334: IFFALSE 44346
// result := weapon ;
44336: LD_ADDR_VAR 0 3
44340: PUSH
44341: LD_VAR 0 18
44345: ST_TO_ADDR
// end ; end ;
44346: LD_VAR 0 3
44350: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44351: LD_INT 0
44353: PPUSH
44354: PPUSH
// result := true ;
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: LD_INT 1
44362: ST_TO_ADDR
// if array1 = array2 then
44363: LD_VAR 0 1
44367: PUSH
44368: LD_VAR 0 2
44372: EQUAL
44373: IFFALSE 44433
// begin for i = 1 to array1 do
44375: LD_ADDR_VAR 0 4
44379: PUSH
44380: DOUBLE
44381: LD_INT 1
44383: DEC
44384: ST_TO_ADDR
44385: LD_VAR 0 1
44389: PUSH
44390: FOR_TO
44391: IFFALSE 44429
// if array1 [ i ] <> array2 [ i ] then
44393: LD_VAR 0 1
44397: PUSH
44398: LD_VAR 0 4
44402: ARRAY
44403: PUSH
44404: LD_VAR 0 2
44408: PUSH
44409: LD_VAR 0 4
44413: ARRAY
44414: NONEQUAL
44415: IFFALSE 44427
// begin result := false ;
44417: LD_ADDR_VAR 0 3
44421: PUSH
44422: LD_INT 0
44424: ST_TO_ADDR
// break ;
44425: GO 44429
// end ;
44427: GO 44390
44429: POP
44430: POP
// end else
44431: GO 44441
// result := false ;
44433: LD_ADDR_VAR 0 3
44437: PUSH
44438: LD_INT 0
44440: ST_TO_ADDR
// end ;
44441: LD_VAR 0 3
44445: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44446: LD_INT 0
44448: PPUSH
44449: PPUSH
// if not array1 or not array2 then
44450: LD_VAR 0 1
44454: NOT
44455: PUSH
44456: LD_VAR 0 2
44460: NOT
44461: OR
44462: IFFALSE 44466
// exit ;
44464: GO 44530
// result := true ;
44466: LD_ADDR_VAR 0 3
44470: PUSH
44471: LD_INT 1
44473: ST_TO_ADDR
// for i = 1 to array1 do
44474: LD_ADDR_VAR 0 4
44478: PUSH
44479: DOUBLE
44480: LD_INT 1
44482: DEC
44483: ST_TO_ADDR
44484: LD_VAR 0 1
44488: PUSH
44489: FOR_TO
44490: IFFALSE 44528
// if array1 [ i ] <> array2 [ i ] then
44492: LD_VAR 0 1
44496: PUSH
44497: LD_VAR 0 4
44501: ARRAY
44502: PUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_VAR 0 4
44512: ARRAY
44513: NONEQUAL
44514: IFFALSE 44526
// begin result := false ;
44516: LD_ADDR_VAR 0 3
44520: PUSH
44521: LD_INT 0
44523: ST_TO_ADDR
// break ;
44524: GO 44528
// end ;
44526: GO 44489
44528: POP
44529: POP
// end ;
44530: LD_VAR 0 3
44534: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44535: LD_INT 0
44537: PPUSH
44538: PPUSH
44539: PPUSH
// pom := GetBase ( fac ) ;
44540: LD_ADDR_VAR 0 5
44544: PUSH
44545: LD_VAR 0 1
44549: PPUSH
44550: CALL_OW 274
44554: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44555: LD_ADDR_VAR 0 4
44559: PUSH
44560: LD_VAR 0 2
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: PPUSH
44569: LD_VAR 0 2
44573: PUSH
44574: LD_INT 2
44576: ARRAY
44577: PPUSH
44578: LD_VAR 0 2
44582: PUSH
44583: LD_INT 3
44585: ARRAY
44586: PPUSH
44587: LD_VAR 0 2
44591: PUSH
44592: LD_INT 4
44594: ARRAY
44595: PPUSH
44596: CALL_OW 449
44600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44601: LD_ADDR_VAR 0 3
44605: PUSH
44606: LD_VAR 0 5
44610: PPUSH
44611: LD_INT 1
44613: PPUSH
44614: CALL_OW 275
44618: PUSH
44619: LD_VAR 0 4
44623: PUSH
44624: LD_INT 1
44626: ARRAY
44627: GREATEREQUAL
44628: PUSH
44629: LD_VAR 0 5
44633: PPUSH
44634: LD_INT 2
44636: PPUSH
44637: CALL_OW 275
44641: PUSH
44642: LD_VAR 0 4
44646: PUSH
44647: LD_INT 2
44649: ARRAY
44650: GREATEREQUAL
44651: AND
44652: PUSH
44653: LD_VAR 0 5
44657: PPUSH
44658: LD_INT 3
44660: PPUSH
44661: CALL_OW 275
44665: PUSH
44666: LD_VAR 0 4
44670: PUSH
44671: LD_INT 3
44673: ARRAY
44674: GREATEREQUAL
44675: AND
44676: ST_TO_ADDR
// end ;
44677: LD_VAR 0 3
44681: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44682: LD_INT 0
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
// pom := GetBase ( building ) ;
44688: LD_ADDR_VAR 0 3
44692: PUSH
44693: LD_VAR 0 1
44697: PPUSH
44698: CALL_OW 274
44702: ST_TO_ADDR
// if not pom then
44703: LD_VAR 0 3
44707: NOT
44708: IFFALSE 44712
// exit ;
44710: GO 44882
// btype := GetBType ( building ) ;
44712: LD_ADDR_VAR 0 5
44716: PUSH
44717: LD_VAR 0 1
44721: PPUSH
44722: CALL_OW 266
44726: ST_TO_ADDR
// if btype = b_armoury then
44727: LD_VAR 0 5
44731: PUSH
44732: LD_INT 4
44734: EQUAL
44735: IFFALSE 44745
// btype := b_barracks ;
44737: LD_ADDR_VAR 0 5
44741: PUSH
44742: LD_INT 5
44744: ST_TO_ADDR
// if btype = b_depot then
44745: LD_VAR 0 5
44749: PUSH
44750: LD_INT 0
44752: EQUAL
44753: IFFALSE 44763
// btype := b_warehouse ;
44755: LD_ADDR_VAR 0 5
44759: PUSH
44760: LD_INT 1
44762: ST_TO_ADDR
// if btype = b_workshop then
44763: LD_VAR 0 5
44767: PUSH
44768: LD_INT 2
44770: EQUAL
44771: IFFALSE 44781
// btype := b_factory ;
44773: LD_ADDR_VAR 0 5
44777: PUSH
44778: LD_INT 3
44780: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44781: LD_ADDR_VAR 0 4
44785: PUSH
44786: LD_VAR 0 5
44790: PPUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 248
44800: PPUSH
44801: CALL_OW 450
44805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44806: LD_ADDR_VAR 0 2
44810: PUSH
44811: LD_VAR 0 3
44815: PPUSH
44816: LD_INT 1
44818: PPUSH
44819: CALL_OW 275
44823: PUSH
44824: LD_VAR 0 4
44828: PUSH
44829: LD_INT 1
44831: ARRAY
44832: GREATEREQUAL
44833: PUSH
44834: LD_VAR 0 3
44838: PPUSH
44839: LD_INT 2
44841: PPUSH
44842: CALL_OW 275
44846: PUSH
44847: LD_VAR 0 4
44851: PUSH
44852: LD_INT 2
44854: ARRAY
44855: GREATEREQUAL
44856: AND
44857: PUSH
44858: LD_VAR 0 3
44862: PPUSH
44863: LD_INT 3
44865: PPUSH
44866: CALL_OW 275
44870: PUSH
44871: LD_VAR 0 4
44875: PUSH
44876: LD_INT 3
44878: ARRAY
44879: GREATEREQUAL
44880: AND
44881: ST_TO_ADDR
// end ;
44882: LD_VAR 0 2
44886: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44887: LD_INT 0
44889: PPUSH
44890: PPUSH
44891: PPUSH
// pom := GetBase ( building ) ;
44892: LD_ADDR_VAR 0 4
44896: PUSH
44897: LD_VAR 0 1
44901: PPUSH
44902: CALL_OW 274
44906: ST_TO_ADDR
// if not pom then
44907: LD_VAR 0 4
44911: NOT
44912: IFFALSE 44916
// exit ;
44914: GO 45017
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44916: LD_ADDR_VAR 0 5
44920: PUSH
44921: LD_VAR 0 2
44925: PPUSH
44926: LD_VAR 0 1
44930: PPUSH
44931: CALL_OW 248
44935: PPUSH
44936: CALL_OW 450
44940: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_VAR 0 4
44950: PPUSH
44951: LD_INT 1
44953: PPUSH
44954: CALL_OW 275
44958: PUSH
44959: LD_VAR 0 5
44963: PUSH
44964: LD_INT 1
44966: ARRAY
44967: GREATEREQUAL
44968: PUSH
44969: LD_VAR 0 4
44973: PPUSH
44974: LD_INT 2
44976: PPUSH
44977: CALL_OW 275
44981: PUSH
44982: LD_VAR 0 5
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: GREATEREQUAL
44991: AND
44992: PUSH
44993: LD_VAR 0 4
44997: PPUSH
44998: LD_INT 3
45000: PPUSH
45001: CALL_OW 275
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 3
45013: ARRAY
45014: GREATEREQUAL
45015: AND
45016: ST_TO_ADDR
// end ;
45017: LD_VAR 0 3
45021: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45022: LD_INT 0
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
// result := false ;
45035: LD_ADDR_VAR 0 8
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45043: LD_VAR 0 5
45047: NOT
45048: PUSH
45049: LD_VAR 0 1
45053: NOT
45054: OR
45055: PUSH
45056: LD_VAR 0 2
45060: NOT
45061: OR
45062: PUSH
45063: LD_VAR 0 3
45067: NOT
45068: OR
45069: IFFALSE 45073
// exit ;
45071: GO 45887
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45073: LD_ADDR_VAR 0 14
45077: PUSH
45078: LD_VAR 0 1
45082: PPUSH
45083: LD_VAR 0 2
45087: PPUSH
45088: LD_VAR 0 3
45092: PPUSH
45093: LD_VAR 0 4
45097: PPUSH
45098: LD_VAR 0 5
45102: PUSH
45103: LD_INT 1
45105: ARRAY
45106: PPUSH
45107: CALL_OW 248
45111: PPUSH
45112: LD_INT 0
45114: PPUSH
45115: CALL 47140 0 6
45119: ST_TO_ADDR
// if not hexes then
45120: LD_VAR 0 14
45124: NOT
45125: IFFALSE 45129
// exit ;
45127: GO 45887
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45129: LD_ADDR_VAR 0 17
45133: PUSH
45134: LD_VAR 0 5
45138: PPUSH
45139: LD_INT 22
45141: PUSH
45142: LD_VAR 0 13
45146: PPUSH
45147: CALL_OW 255
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 30
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 30
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PPUSH
45188: CALL_OW 72
45192: ST_TO_ADDR
// for i = 1 to hexes do
45193: LD_ADDR_VAR 0 9
45197: PUSH
45198: DOUBLE
45199: LD_INT 1
45201: DEC
45202: ST_TO_ADDR
45203: LD_VAR 0 14
45207: PUSH
45208: FOR_TO
45209: IFFALSE 45885
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45211: LD_ADDR_VAR 0 13
45215: PUSH
45216: LD_VAR 0 14
45220: PUSH
45221: LD_VAR 0 9
45225: ARRAY
45226: PUSH
45227: LD_INT 1
45229: ARRAY
45230: PPUSH
45231: LD_VAR 0 14
45235: PUSH
45236: LD_VAR 0 9
45240: ARRAY
45241: PUSH
45242: LD_INT 2
45244: ARRAY
45245: PPUSH
45246: CALL_OW 428
45250: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45251: LD_VAR 0 14
45255: PUSH
45256: LD_VAR 0 9
45260: ARRAY
45261: PUSH
45262: LD_INT 1
45264: ARRAY
45265: PPUSH
45266: LD_VAR 0 14
45270: PUSH
45271: LD_VAR 0 9
45275: ARRAY
45276: PUSH
45277: LD_INT 2
45279: ARRAY
45280: PPUSH
45281: CALL_OW 351
45285: PUSH
45286: LD_VAR 0 14
45290: PUSH
45291: LD_VAR 0 9
45295: ARRAY
45296: PUSH
45297: LD_INT 1
45299: ARRAY
45300: PPUSH
45301: LD_VAR 0 14
45305: PUSH
45306: LD_VAR 0 9
45310: ARRAY
45311: PUSH
45312: LD_INT 2
45314: ARRAY
45315: PPUSH
45316: CALL_OW 488
45320: NOT
45321: OR
45322: PUSH
45323: LD_VAR 0 13
45327: PPUSH
45328: CALL_OW 247
45332: PUSH
45333: LD_INT 3
45335: EQUAL
45336: OR
45337: IFFALSE 45343
// exit ;
45339: POP
45340: POP
45341: GO 45887
// if not tmp then
45343: LD_VAR 0 13
45347: NOT
45348: IFFALSE 45352
// continue ;
45350: GO 45208
// result := true ;
45352: LD_ADDR_VAR 0 8
45356: PUSH
45357: LD_INT 1
45359: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45360: LD_VAR 0 6
45364: PUSH
45365: LD_VAR 0 13
45369: PPUSH
45370: CALL_OW 247
45374: PUSH
45375: LD_INT 2
45377: EQUAL
45378: AND
45379: PUSH
45380: LD_VAR 0 13
45384: PPUSH
45385: CALL_OW 263
45389: PUSH
45390: LD_INT 1
45392: EQUAL
45393: AND
45394: IFFALSE 45558
// begin if IsDrivenBy ( tmp ) then
45396: LD_VAR 0 13
45400: PPUSH
45401: CALL_OW 311
45405: IFFALSE 45409
// continue ;
45407: GO 45208
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45409: LD_VAR 0 6
45413: PPUSH
45414: LD_INT 3
45416: PUSH
45417: LD_INT 60
45419: PUSH
45420: EMPTY
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 3
45429: PUSH
45430: LD_INT 55
45432: PUSH
45433: EMPTY
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PPUSH
45444: CALL_OW 72
45448: IFFALSE 45556
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45450: LD_ADDR_VAR 0 18
45454: PUSH
45455: LD_VAR 0 6
45459: PPUSH
45460: LD_INT 3
45462: PUSH
45463: LD_INT 60
45465: PUSH
45466: EMPTY
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: LD_INT 55
45478: PUSH
45479: EMPTY
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PPUSH
45490: CALL_OW 72
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: ST_TO_ADDR
// if IsInUnit ( driver ) then
45499: LD_VAR 0 18
45503: PPUSH
45504: CALL_OW 310
45508: IFFALSE 45519
// ComExit ( driver ) ;
45510: LD_VAR 0 18
45514: PPUSH
45515: CALL 70941 0 1
// AddComEnterUnit ( driver , tmp ) ;
45519: LD_VAR 0 18
45523: PPUSH
45524: LD_VAR 0 13
45528: PPUSH
45529: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45533: LD_VAR 0 18
45537: PPUSH
45538: LD_VAR 0 7
45542: PPUSH
45543: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45547: LD_VAR 0 18
45551: PPUSH
45552: CALL_OW 181
// end ; continue ;
45556: GO 45208
// end ; if not cleaners or not tmp in cleaners then
45558: LD_VAR 0 6
45562: NOT
45563: PUSH
45564: LD_VAR 0 13
45568: PUSH
45569: LD_VAR 0 6
45573: IN
45574: NOT
45575: OR
45576: IFFALSE 45883
// begin if dep then
45578: LD_VAR 0 17
45582: IFFALSE 45718
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45584: LD_ADDR_VAR 0 16
45588: PUSH
45589: LD_VAR 0 17
45593: PUSH
45594: LD_INT 1
45596: ARRAY
45597: PPUSH
45598: CALL_OW 250
45602: PPUSH
45603: LD_VAR 0 17
45607: PUSH
45608: LD_INT 1
45610: ARRAY
45611: PPUSH
45612: CALL_OW 254
45616: PPUSH
45617: LD_INT 5
45619: PPUSH
45620: CALL_OW 272
45624: PUSH
45625: LD_VAR 0 17
45629: PUSH
45630: LD_INT 1
45632: ARRAY
45633: PPUSH
45634: CALL_OW 251
45638: PPUSH
45639: LD_VAR 0 17
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: PPUSH
45648: CALL_OW 254
45652: PPUSH
45653: LD_INT 5
45655: PPUSH
45656: CALL_OW 273
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45665: LD_VAR 0 16
45669: PUSH
45670: LD_INT 1
45672: ARRAY
45673: PPUSH
45674: LD_VAR 0 16
45678: PUSH
45679: LD_INT 2
45681: ARRAY
45682: PPUSH
45683: CALL_OW 488
45687: IFFALSE 45718
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45689: LD_VAR 0 13
45693: PPUSH
45694: LD_VAR 0 16
45698: PUSH
45699: LD_INT 1
45701: ARRAY
45702: PPUSH
45703: LD_VAR 0 16
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: PPUSH
45712: CALL_OW 111
// continue ;
45716: GO 45208
// end ; end ; r := GetDir ( tmp ) ;
45718: LD_ADDR_VAR 0 15
45722: PUSH
45723: LD_VAR 0 13
45727: PPUSH
45728: CALL_OW 254
45732: ST_TO_ADDR
// if r = 5 then
45733: LD_VAR 0 15
45737: PUSH
45738: LD_INT 5
45740: EQUAL
45741: IFFALSE 45751
// r := 0 ;
45743: LD_ADDR_VAR 0 15
45747: PUSH
45748: LD_INT 0
45750: ST_TO_ADDR
// for j = r to 5 do
45751: LD_ADDR_VAR 0 10
45755: PUSH
45756: DOUBLE
45757: LD_VAR 0 15
45761: DEC
45762: ST_TO_ADDR
45763: LD_INT 5
45765: PUSH
45766: FOR_TO
45767: IFFALSE 45881
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45769: LD_ADDR_VAR 0 11
45773: PUSH
45774: LD_VAR 0 13
45778: PPUSH
45779: CALL_OW 250
45783: PPUSH
45784: LD_VAR 0 10
45788: PPUSH
45789: LD_INT 2
45791: PPUSH
45792: CALL_OW 272
45796: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45797: LD_ADDR_VAR 0 12
45801: PUSH
45802: LD_VAR 0 13
45806: PPUSH
45807: CALL_OW 251
45811: PPUSH
45812: LD_VAR 0 10
45816: PPUSH
45817: LD_INT 2
45819: PPUSH
45820: CALL_OW 273
45824: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45825: LD_VAR 0 11
45829: PPUSH
45830: LD_VAR 0 12
45834: PPUSH
45835: CALL_OW 488
45839: PUSH
45840: LD_VAR 0 11
45844: PPUSH
45845: LD_VAR 0 12
45849: PPUSH
45850: CALL_OW 428
45854: NOT
45855: AND
45856: IFFALSE 45879
// begin ComMoveXY ( tmp , _x , _y ) ;
45858: LD_VAR 0 13
45862: PPUSH
45863: LD_VAR 0 11
45867: PPUSH
45868: LD_VAR 0 12
45872: PPUSH
45873: CALL_OW 111
// break ;
45877: GO 45881
// end ; end ;
45879: GO 45766
45881: POP
45882: POP
// end ; end ;
45883: GO 45208
45885: POP
45886: POP
// end ;
45887: LD_VAR 0 8
45891: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45892: LD_INT 0
45894: PPUSH
// result := true ;
45895: LD_ADDR_VAR 0 3
45899: PUSH
45900: LD_INT 1
45902: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45903: LD_VAR 0 2
45907: PUSH
45908: LD_INT 24
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45922
45914: LD_INT 33
45916: DOUBLE
45917: EQUAL
45918: IFTRUE 45922
45920: GO 45947
45922: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45923: LD_ADDR_VAR 0 3
45927: PUSH
45928: LD_INT 32
45930: PPUSH
45931: LD_VAR 0 1
45935: PPUSH
45936: CALL_OW 321
45940: PUSH
45941: LD_INT 2
45943: EQUAL
45944: ST_TO_ADDR
45945: GO 46263
45947: LD_INT 20
45949: DOUBLE
45950: EQUAL
45951: IFTRUE 45955
45953: GO 45980
45955: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45956: LD_ADDR_VAR 0 3
45960: PUSH
45961: LD_INT 6
45963: PPUSH
45964: LD_VAR 0 1
45968: PPUSH
45969: CALL_OW 321
45973: PUSH
45974: LD_INT 2
45976: EQUAL
45977: ST_TO_ADDR
45978: GO 46263
45980: LD_INT 22
45982: DOUBLE
45983: EQUAL
45984: IFTRUE 45994
45986: LD_INT 36
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 45994
45992: GO 46019
45994: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45995: LD_ADDR_VAR 0 3
45999: PUSH
46000: LD_INT 15
46002: PPUSH
46003: LD_VAR 0 1
46007: PPUSH
46008: CALL_OW 321
46012: PUSH
46013: LD_INT 2
46015: EQUAL
46016: ST_TO_ADDR
46017: GO 46263
46019: LD_INT 30
46021: DOUBLE
46022: EQUAL
46023: IFTRUE 46027
46025: GO 46052
46027: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46028: LD_ADDR_VAR 0 3
46032: PUSH
46033: LD_INT 20
46035: PPUSH
46036: LD_VAR 0 1
46040: PPUSH
46041: CALL_OW 321
46045: PUSH
46046: LD_INT 2
46048: EQUAL
46049: ST_TO_ADDR
46050: GO 46263
46052: LD_INT 28
46054: DOUBLE
46055: EQUAL
46056: IFTRUE 46066
46058: LD_INT 21
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46091
46066: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46067: LD_ADDR_VAR 0 3
46071: PUSH
46072: LD_INT 21
46074: PPUSH
46075: LD_VAR 0 1
46079: PPUSH
46080: CALL_OW 321
46084: PUSH
46085: LD_INT 2
46087: EQUAL
46088: ST_TO_ADDR
46089: GO 46263
46091: LD_INT 16
46093: DOUBLE
46094: EQUAL
46095: IFTRUE 46099
46097: GO 46124
46099: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46100: LD_ADDR_VAR 0 3
46104: PUSH
46105: LD_INT 84
46107: PPUSH
46108: LD_VAR 0 1
46112: PPUSH
46113: CALL_OW 321
46117: PUSH
46118: LD_INT 2
46120: EQUAL
46121: ST_TO_ADDR
46122: GO 46263
46124: LD_INT 19
46126: DOUBLE
46127: EQUAL
46128: IFTRUE 46138
46130: LD_INT 23
46132: DOUBLE
46133: EQUAL
46134: IFTRUE 46138
46136: GO 46163
46138: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_INT 83
46146: PPUSH
46147: LD_VAR 0 1
46151: PPUSH
46152: CALL_OW 321
46156: PUSH
46157: LD_INT 2
46159: EQUAL
46160: ST_TO_ADDR
46161: GO 46263
46163: LD_INT 17
46165: DOUBLE
46166: EQUAL
46167: IFTRUE 46171
46169: GO 46196
46171: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46172: LD_ADDR_VAR 0 3
46176: PUSH
46177: LD_INT 39
46179: PPUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 321
46189: PUSH
46190: LD_INT 2
46192: EQUAL
46193: ST_TO_ADDR
46194: GO 46263
46196: LD_INT 18
46198: DOUBLE
46199: EQUAL
46200: IFTRUE 46204
46202: GO 46229
46204: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46205: LD_ADDR_VAR 0 3
46209: PUSH
46210: LD_INT 40
46212: PPUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 321
46222: PUSH
46223: LD_INT 2
46225: EQUAL
46226: ST_TO_ADDR
46227: GO 46263
46229: LD_INT 27
46231: DOUBLE
46232: EQUAL
46233: IFTRUE 46237
46235: GO 46262
46237: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46238: LD_ADDR_VAR 0 3
46242: PUSH
46243: LD_INT 35
46245: PPUSH
46246: LD_VAR 0 1
46250: PPUSH
46251: CALL_OW 321
46255: PUSH
46256: LD_INT 2
46258: EQUAL
46259: ST_TO_ADDR
46260: GO 46263
46262: POP
// end ;
46263: LD_VAR 0 3
46267: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46268: LD_INT 0
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
// result := false ;
46281: LD_ADDR_VAR 0 6
46285: PUSH
46286: LD_INT 0
46288: ST_TO_ADDR
// if btype = b_depot then
46289: LD_VAR 0 2
46293: PUSH
46294: LD_INT 0
46296: EQUAL
46297: IFFALSE 46309
// begin result := true ;
46299: LD_ADDR_VAR 0 6
46303: PUSH
46304: LD_INT 1
46306: ST_TO_ADDR
// exit ;
46307: GO 47135
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46309: LD_VAR 0 1
46313: NOT
46314: PUSH
46315: LD_VAR 0 1
46319: PPUSH
46320: CALL_OW 266
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: IN
46335: NOT
46336: OR
46337: PUSH
46338: LD_VAR 0 2
46342: NOT
46343: OR
46344: PUSH
46345: LD_VAR 0 5
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: LD_INT 4
46364: PUSH
46365: LD_INT 5
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: IN
46376: NOT
46377: OR
46378: PUSH
46379: LD_VAR 0 3
46383: PPUSH
46384: LD_VAR 0 4
46388: PPUSH
46389: CALL_OW 488
46393: NOT
46394: OR
46395: IFFALSE 46399
// exit ;
46397: GO 47135
// side := GetSide ( depot ) ;
46399: LD_ADDR_VAR 0 9
46403: PUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 255
46413: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46414: LD_VAR 0 9
46418: PPUSH
46419: LD_VAR 0 2
46423: PPUSH
46424: CALL 45892 0 2
46428: NOT
46429: IFFALSE 46433
// exit ;
46431: GO 47135
// pom := GetBase ( depot ) ;
46433: LD_ADDR_VAR 0 10
46437: PUSH
46438: LD_VAR 0 1
46442: PPUSH
46443: CALL_OW 274
46447: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46448: LD_ADDR_VAR 0 11
46452: PUSH
46453: LD_VAR 0 2
46457: PPUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: CALL_OW 248
46467: PPUSH
46468: CALL_OW 450
46472: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46473: LD_VAR 0 10
46477: PPUSH
46478: LD_INT 1
46480: PPUSH
46481: CALL_OW 275
46485: PUSH
46486: LD_VAR 0 11
46490: PUSH
46491: LD_INT 1
46493: ARRAY
46494: GREATEREQUAL
46495: PUSH
46496: LD_VAR 0 10
46500: PPUSH
46501: LD_INT 2
46503: PPUSH
46504: CALL_OW 275
46508: PUSH
46509: LD_VAR 0 11
46513: PUSH
46514: LD_INT 2
46516: ARRAY
46517: GREATEREQUAL
46518: AND
46519: PUSH
46520: LD_VAR 0 10
46524: PPUSH
46525: LD_INT 3
46527: PPUSH
46528: CALL_OW 275
46532: PUSH
46533: LD_VAR 0 11
46537: PUSH
46538: LD_INT 3
46540: ARRAY
46541: GREATEREQUAL
46542: AND
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 47135
// if GetBType ( depot ) = b_depot then
46548: LD_VAR 0 1
46552: PPUSH
46553: CALL_OW 266
46557: PUSH
46558: LD_INT 0
46560: EQUAL
46561: IFFALSE 46573
// dist := 28 else
46563: LD_ADDR_VAR 0 14
46567: PUSH
46568: LD_INT 28
46570: ST_TO_ADDR
46571: GO 46581
// dist := 36 ;
46573: LD_ADDR_VAR 0 14
46577: PUSH
46578: LD_INT 36
46580: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46581: LD_VAR 0 1
46585: PPUSH
46586: LD_VAR 0 3
46590: PPUSH
46591: LD_VAR 0 4
46595: PPUSH
46596: CALL_OW 297
46600: PUSH
46601: LD_VAR 0 14
46605: GREATER
46606: IFFALSE 46610
// exit ;
46608: GO 47135
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46610: LD_ADDR_VAR 0 12
46614: PUSH
46615: LD_VAR 0 2
46619: PPUSH
46620: LD_VAR 0 3
46624: PPUSH
46625: LD_VAR 0 4
46629: PPUSH
46630: LD_VAR 0 5
46634: PPUSH
46635: LD_VAR 0 1
46639: PPUSH
46640: CALL_OW 248
46644: PPUSH
46645: LD_INT 0
46647: PPUSH
46648: CALL 47140 0 6
46652: ST_TO_ADDR
// if not hexes then
46653: LD_VAR 0 12
46657: NOT
46658: IFFALSE 46662
// exit ;
46660: GO 47135
// hex := GetHexInfo ( x , y ) ;
46662: LD_ADDR_VAR 0 15
46666: PUSH
46667: LD_VAR 0 3
46671: PPUSH
46672: LD_VAR 0 4
46676: PPUSH
46677: CALL_OW 546
46681: ST_TO_ADDR
// if hex [ 1 ] then
46682: LD_VAR 0 15
46686: PUSH
46687: LD_INT 1
46689: ARRAY
46690: IFFALSE 46694
// exit ;
46692: GO 47135
// height := hex [ 2 ] ;
46694: LD_ADDR_VAR 0 13
46698: PUSH
46699: LD_VAR 0 15
46703: PUSH
46704: LD_INT 2
46706: ARRAY
46707: ST_TO_ADDR
// for i = 1 to hexes do
46708: LD_ADDR_VAR 0 7
46712: PUSH
46713: DOUBLE
46714: LD_INT 1
46716: DEC
46717: ST_TO_ADDR
46718: LD_VAR 0 12
46722: PUSH
46723: FOR_TO
46724: IFFALSE 47054
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46726: LD_VAR 0 12
46730: PUSH
46731: LD_VAR 0 7
46735: ARRAY
46736: PUSH
46737: LD_INT 1
46739: ARRAY
46740: PPUSH
46741: LD_VAR 0 12
46745: PUSH
46746: LD_VAR 0 7
46750: ARRAY
46751: PUSH
46752: LD_INT 2
46754: ARRAY
46755: PPUSH
46756: CALL_OW 488
46760: NOT
46761: PUSH
46762: LD_VAR 0 12
46766: PUSH
46767: LD_VAR 0 7
46771: ARRAY
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: PPUSH
46777: LD_VAR 0 12
46781: PUSH
46782: LD_VAR 0 7
46786: ARRAY
46787: PUSH
46788: LD_INT 2
46790: ARRAY
46791: PPUSH
46792: CALL_OW 428
46796: PUSH
46797: LD_INT 0
46799: GREATER
46800: OR
46801: PUSH
46802: LD_VAR 0 12
46806: PUSH
46807: LD_VAR 0 7
46811: ARRAY
46812: PUSH
46813: LD_INT 1
46815: ARRAY
46816: PPUSH
46817: LD_VAR 0 12
46821: PUSH
46822: LD_VAR 0 7
46826: ARRAY
46827: PUSH
46828: LD_INT 2
46830: ARRAY
46831: PPUSH
46832: CALL_OW 351
46836: OR
46837: IFFALSE 46843
// exit ;
46839: POP
46840: POP
46841: GO 47135
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46843: LD_ADDR_VAR 0 8
46847: PUSH
46848: LD_VAR 0 12
46852: PUSH
46853: LD_VAR 0 7
46857: ARRAY
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: PPUSH
46863: LD_VAR 0 12
46867: PUSH
46868: LD_VAR 0 7
46872: ARRAY
46873: PUSH
46874: LD_INT 2
46876: ARRAY
46877: PPUSH
46878: CALL_OW 546
46882: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46883: LD_VAR 0 8
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PUSH
46892: LD_VAR 0 8
46896: PUSH
46897: LD_INT 2
46899: ARRAY
46900: PUSH
46901: LD_VAR 0 13
46905: PUSH
46906: LD_INT 2
46908: PLUS
46909: GREATER
46910: OR
46911: PUSH
46912: LD_VAR 0 8
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: PUSH
46921: LD_VAR 0 13
46925: PUSH
46926: LD_INT 2
46928: MINUS
46929: LESS
46930: OR
46931: PUSH
46932: LD_VAR 0 8
46936: PUSH
46937: LD_INT 3
46939: ARRAY
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 8
46946: PUSH
46947: LD_INT 9
46949: PUSH
46950: LD_INT 10
46952: PUSH
46953: LD_INT 11
46955: PUSH
46956: LD_INT 12
46958: PUSH
46959: LD_INT 13
46961: PUSH
46962: LD_INT 16
46964: PUSH
46965: LD_INT 17
46967: PUSH
46968: LD_INT 18
46970: PUSH
46971: LD_INT 19
46973: PUSH
46974: LD_INT 20
46976: PUSH
46977: LD_INT 21
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: IN
46995: NOT
46996: OR
46997: PUSH
46998: LD_VAR 0 8
47002: PUSH
47003: LD_INT 5
47005: ARRAY
47006: NOT
47007: OR
47008: PUSH
47009: LD_VAR 0 8
47013: PUSH
47014: LD_INT 6
47016: ARRAY
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 7
47026: PUSH
47027: LD_INT 9
47029: PUSH
47030: LD_INT 10
47032: PUSH
47033: LD_INT 11
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: IN
47044: NOT
47045: OR
47046: IFFALSE 47052
// exit ;
47048: POP
47049: POP
47050: GO 47135
// end ;
47052: GO 46723
47054: POP
47055: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47056: LD_VAR 0 9
47060: PPUSH
47061: LD_VAR 0 3
47065: PPUSH
47066: LD_VAR 0 4
47070: PPUSH
47071: LD_INT 20
47073: PPUSH
47074: CALL 39058 0 4
47078: PUSH
47079: LD_INT 4
47081: ARRAY
47082: IFFALSE 47086
// exit ;
47084: GO 47135
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47086: LD_VAR 0 2
47090: PUSH
47091: LD_INT 29
47093: PUSH
47094: LD_INT 30
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: IN
47101: PUSH
47102: LD_VAR 0 3
47106: PPUSH
47107: LD_VAR 0 4
47111: PPUSH
47112: LD_VAR 0 9
47116: PPUSH
47117: CALL_OW 440
47121: NOT
47122: AND
47123: IFFALSE 47127
// exit ;
47125: GO 47135
// result := true ;
47127: LD_ADDR_VAR 0 6
47131: PUSH
47132: LD_INT 1
47134: ST_TO_ADDR
// end ;
47135: LD_VAR 0 6
47139: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47140: LD_INT 0
47142: PPUSH
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
47156: PPUSH
47157: PPUSH
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
47172: PPUSH
47173: PPUSH
47174: PPUSH
47175: PPUSH
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
47188: PPUSH
47189: PPUSH
47190: PPUSH
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
47199: PPUSH
// result = [ ] ;
47200: LD_ADDR_VAR 0 7
47204: PUSH
47205: EMPTY
47206: ST_TO_ADDR
// temp_list = [ ] ;
47207: LD_ADDR_VAR 0 9
47211: PUSH
47212: EMPTY
47213: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47214: LD_VAR 0 4
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 3
47230: PUSH
47231: LD_INT 4
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: IN
47245: NOT
47246: PUSH
47247: LD_VAR 0 1
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: IN
47262: PUSH
47263: LD_VAR 0 5
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: IN
47282: NOT
47283: AND
47284: OR
47285: IFFALSE 47289
// exit ;
47287: GO 65680
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47289: LD_VAR 0 1
47293: PUSH
47294: LD_INT 6
47296: PUSH
47297: LD_INT 7
47299: PUSH
47300: LD_INT 8
47302: PUSH
47303: LD_INT 13
47305: PUSH
47306: LD_INT 12
47308: PUSH
47309: LD_INT 15
47311: PUSH
47312: LD_INT 11
47314: PUSH
47315: LD_INT 14
47317: PUSH
47318: LD_INT 10
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: IN
47332: IFFALSE 47342
// btype = b_lab ;
47334: LD_ADDR_VAR 0 1
47338: PUSH
47339: LD_INT 6
47341: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47342: LD_VAR 0 6
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: IN
47361: NOT
47362: PUSH
47363: LD_VAR 0 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 6
47382: PUSH
47383: LD_INT 36
47385: PUSH
47386: LD_INT 4
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: LD_INT 31
47394: PUSH
47395: LD_INT 32
47397: PUSH
47398: LD_INT 33
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: IN
47414: NOT
47415: PUSH
47416: LD_VAR 0 6
47420: PUSH
47421: LD_INT 1
47423: EQUAL
47424: AND
47425: OR
47426: PUSH
47427: LD_VAR 0 1
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: IN
47442: NOT
47443: PUSH
47444: LD_VAR 0 6
47448: PUSH
47449: LD_INT 2
47451: EQUAL
47452: AND
47453: OR
47454: IFFALSE 47464
// mode = 0 ;
47456: LD_ADDR_VAR 0 6
47460: PUSH
47461: LD_INT 0
47463: ST_TO_ADDR
// case mode of 0 :
47464: LD_VAR 0 6
47468: PUSH
47469: LD_INT 0
47471: DOUBLE
47472: EQUAL
47473: IFTRUE 47477
47475: GO 58930
47477: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47478: LD_ADDR_VAR 0 11
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47671: LD_ADDR_VAR 0 12
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 3
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47867: LD_ADDR_VAR 0 13
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48066: LD_ADDR_VAR 0 14
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 3
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48262: LD_ADDR_VAR 0 15
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48455: LD_ADDR_VAR 0 16
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48648: LD_ADDR_VAR 0 17
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48878: LD_ADDR_VAR 0 18
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49108: LD_ADDR_VAR 0 19
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49338: LD_ADDR_VAR 0 20
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49568: LD_ADDR_VAR 0 21
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49798: LD_ADDR_VAR 0 22
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50028: LD_ADDR_VAR 0 23
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 3
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50308: LD_ADDR_VAR 0 24
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50584: LD_ADDR_VAR 0 25
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50858: LD_ADDR_VAR 0 26
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51134: LD_ADDR_VAR 0 27
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51414: LD_ADDR_VAR 0 28
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51696: LD_ADDR_VAR 0 29
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51975: LD_ADDR_VAR 0 30
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52253: LD_ADDR_VAR 0 31
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 3
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52531: LD_ADDR_VAR 0 32
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52809: LD_ADDR_VAR 0 33
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53088: LD_ADDR_VAR 0 34
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53368: LD_ADDR_VAR 0 35
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53480: LD_ADDR_VAR 0 36
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53592: LD_ADDR_VAR 0 37
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53704: LD_ADDR_VAR 0 38
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53816: LD_ADDR_VAR 0 39
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53928: LD_ADDR_VAR 0 40
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54040: LD_ADDR_VAR 0 41
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54390: LD_ADDR_VAR 0 42
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 3
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54740: LD_ADDR_VAR 0 43
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55088: LD_ADDR_VAR 0 44
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55438: LD_ADDR_VAR 0 45
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 3
55735: NEG
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55788: LD_ADDR_VAR 0 46
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56136: LD_ADDR_VAR 0 47
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56287: LD_ADDR_VAR 0 48
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56434: LD_ADDR_VAR 0 49
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56578: LD_ADDR_VAR 0 50
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56722: LD_ADDR_VAR 0 51
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56869: LD_ADDR_VAR 0 52
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57020: LD_ADDR_VAR 0 53
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57250: LD_ADDR_VAR 0 54
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57480: LD_ADDR_VAR 0 55
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57710: LD_ADDR_VAR 0 56
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57940: LD_ADDR_VAR 0 57
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58170: LD_ADDR_VAR 0 58
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58400: LD_ADDR_VAR 0 59
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58488: LD_ADDR_VAR 0 60
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58576: LD_ADDR_VAR 0 61
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58664: LD_ADDR_VAR 0 62
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58752: LD_ADDR_VAR 0 63
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58840: LD_ADDR_VAR 0 64
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// end ; 1 :
58928: GO 64825
58930: LD_INT 1
58932: DOUBLE
58933: EQUAL
58934: IFTRUE 58938
58936: GO 61561
58938: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58939: LD_ADDR_VAR 0 11
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58983: LD_ADDR_VAR 0 12
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59024: LD_ADDR_VAR 0 13
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59064: LD_ADDR_VAR 0 14
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59105: LD_ADDR_VAR 0 15
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59149: LD_ADDR_VAR 0 16
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: NEG
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59195: LD_ADDR_VAR 0 17
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59239: LD_ADDR_VAR 0 18
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59280: LD_ADDR_VAR 0 19
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59320: LD_ADDR_VAR 0 20
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59361: LD_ADDR_VAR 0 21
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59405: LD_ADDR_VAR 0 22
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59451: LD_ADDR_VAR 0 23
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 3
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59495: LD_ADDR_VAR 0 24
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 4
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59536: LD_ADDR_VAR 0 25
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 4
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: LD_INT 4
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59576: LD_ADDR_VAR 0 26
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 4
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59617: LD_ADDR_VAR 0 27
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59661: LD_ADDR_VAR 0 28
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 4
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 4
59692: NEG
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59707: LD_ADDR_VAR 0 29
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 3
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 4
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 4
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 3
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 5
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 5
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 4
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 6
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 6
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 5
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59862: LD_ADDR_VAR 0 30
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 4
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 5
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 5
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 6
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 6
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60005: LD_ADDR_VAR 0 31
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 4
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 4
60052: PUSH
60053: LD_INT 4
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 4
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 5
60072: PUSH
60073: LD_INT 4
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 5
60082: PUSH
60083: LD_INT 5
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 4
60092: PUSH
60093: LD_INT 5
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 6
60102: PUSH
60103: LD_INT 5
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 6
60112: PUSH
60113: LD_INT 6
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: LD_INT 6
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60144: LD_ADDR_VAR 0 32
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 4
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 4
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 5
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 5
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 6
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 6
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 5
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60287: LD_ADDR_VAR 0 33
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 4
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 5
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 5
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 6
60407: NEG
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 6
60418: NEG
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60442: LD_ADDR_VAR 0 34
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 3
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: LD_INT 4
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: LD_INT 3
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: LD_INT 5
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 5
60533: NEG
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 5
60545: NEG
60546: PUSH
60547: LD_INT 5
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 5
60557: NEG
60558: PUSH
60559: LD_INT 6
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 6
60569: NEG
60570: PUSH
60571: LD_INT 5
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 6
60581: NEG
60582: PUSH
60583: LD_INT 6
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60605: LD_ADDR_VAR 0 41
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60649: LD_ADDR_VAR 0 42
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60690: LD_ADDR_VAR 0 43
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60730: LD_ADDR_VAR 0 44
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: LIST
60770: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60771: LD_ADDR_VAR 0 45
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60815: LD_ADDR_VAR 0 46
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60861: LD_ADDR_VAR 0 47
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60894: LD_ADDR_VAR 0 48
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60925: LD_ADDR_VAR 0 49
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60954: LD_ADDR_VAR 0 50
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60983: LD_ADDR_VAR 0 51
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61014: LD_ADDR_VAR 0 52
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61047: LD_ADDR_VAR 0 53
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61091: LD_ADDR_VAR 0 54
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61132: LD_ADDR_VAR 0 55
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: LIST
61171: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61172: LD_ADDR_VAR 0 56
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61213: LD_ADDR_VAR 0 57
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61257: LD_ADDR_VAR 0 58
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61303: LD_ADDR_VAR 0 59
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61347: LD_ADDR_VAR 0 60
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61388: LD_ADDR_VAR 0 61
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61428: LD_ADDR_VAR 0 62
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61469: LD_ADDR_VAR 0 63
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61513: LD_ADDR_VAR 0 64
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// end ; 2 :
61559: GO 64825
61561: LD_INT 2
61563: DOUBLE
61564: EQUAL
61565: IFTRUE 61569
61567: GO 64824
61569: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61570: LD_ADDR_VAR 0 29
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 4
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 5
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 5
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 4
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 4
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 4
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 4
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 5
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 5
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 4
61909: NEG
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 4
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: NEG
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: LD_INT 4
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 4
61967: NEG
61968: PUSH
61969: LD_INT 5
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: LD_INT 4
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 3
61991: NEG
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 4
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 5
62015: NEG
62016: PUSH
62017: LD_INT 4
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 5
62027: NEG
62028: PUSH
62029: LD_INT 5
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 3
62039: NEG
62040: PUSH
62041: LD_INT 5
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 5
62051: NEG
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62108: LD_ADDR_VAR 0 30
62112: PUSH
62113: LD_INT 4
62115: PUSH
62116: LD_INT 4
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 5
62135: PUSH
62136: LD_INT 4
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: LD_INT 5
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: PUSH
62156: LD_INT 5
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 5
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: LD_INT 5
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 4
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: LD_INT 4
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 4
62298: NEG
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 4
62309: NEG
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: NEG
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 4
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 5
62354: NEG
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 5
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 5
62377: NEG
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: NEG
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 4
62472: NEG
62473: PUSH
62474: LD_INT 4
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: NEG
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 4
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 5
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 4
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 4
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 5
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62655: LD_ADDR_VAR 0 31
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 4
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 4
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 5
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 5
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 4
62811: NEG
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 4
62822: NEG
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 4
62834: NEG
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 4
62857: NEG
62858: PUSH
62859: LD_INT 4
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 4
62869: NEG
62870: PUSH
62871: LD_INT 5
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: LD_INT 4
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 4
62905: NEG
62906: PUSH
62907: LD_INT 3
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 5
62917: NEG
62918: PUSH
62919: LD_INT 4
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 5
62929: NEG
62930: PUSH
62931: LD_INT 5
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: LD_INT 5
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 5
62953: NEG
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 2
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 4
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 4
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 4
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 5
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 5
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63205: LD_ADDR_VAR 0 32
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 4
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 3
63235: NEG
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 5
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 5
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 5
63291: NEG
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 3
63314: NEG
63315: PUSH
63316: LD_INT 3
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 3
63326: NEG
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 3
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 4
63374: NEG
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: LD_INT 4
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 4
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 4
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 5
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 4
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 3
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 3
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 4
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 5
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 5
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 4
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 4
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 3
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: LD_INT 4
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 5
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 5
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63752: LD_ADDR_VAR 0 33
63756: PUSH
63757: LD_INT 4
63759: NEG
63760: PUSH
63761: LD_INT 4
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 4
63771: NEG
63772: PUSH
63773: LD_INT 5
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: LD_INT 4
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: NEG
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 5
63819: NEG
63820: PUSH
63821: LD_INT 4
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 5
63831: NEG
63832: PUSH
63833: LD_INT 5
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: LD_INT 5
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 5
63855: NEG
63856: PUSH
63857: LD_INT 3
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 4
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: LD_INT 4
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 5
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 5
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 4
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 5
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 4
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: LD_INT 4
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 4
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 5
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 5
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 4
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 2
64224: PUSH
64225: LD_INT 5
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64290: LD_ADDR_VAR 0 34
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 4
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 5
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 4
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 4
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 5
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: LD_INT 3
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 5
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 4
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 4
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 4
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 5
64512: PUSH
64513: LD_INT 4
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 5
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 4
64532: PUSH
64533: LD_INT 5
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: LD_INT 4
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 5
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: LD_INT 5
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 4
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: LD_INT 4
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 4
64675: NEG
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 4
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 4
64720: NEG
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 5
64731: NEG
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 5
64742: NEG
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 5
64754: NEG
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// end ; end ;
64822: GO 64825
64824: POP
// case btype of b_depot , b_warehouse :
64825: LD_VAR 0 1
64829: PUSH
64830: LD_INT 0
64832: DOUBLE
64833: EQUAL
64834: IFTRUE 64844
64836: LD_INT 1
64838: DOUBLE
64839: EQUAL
64840: IFTRUE 64844
64842: GO 65045
64844: POP
// case nation of nation_american :
64845: LD_VAR 0 5
64849: PUSH
64850: LD_INT 1
64852: DOUBLE
64853: EQUAL
64854: IFTRUE 64858
64856: GO 64914
64858: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64859: LD_ADDR_VAR 0 9
64863: PUSH
64864: LD_VAR 0 11
64868: PUSH
64869: LD_VAR 0 12
64873: PUSH
64874: LD_VAR 0 13
64878: PUSH
64879: LD_VAR 0 14
64883: PUSH
64884: LD_VAR 0 15
64888: PUSH
64889: LD_VAR 0 16
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: PUSH
64902: LD_VAR 0 4
64906: PUSH
64907: LD_INT 1
64909: PLUS
64910: ARRAY
64911: ST_TO_ADDR
64912: GO 65043
64914: LD_INT 2
64916: DOUBLE
64917: EQUAL
64918: IFTRUE 64922
64920: GO 64978
64922: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64923: LD_ADDR_VAR 0 9
64927: PUSH
64928: LD_VAR 0 17
64932: PUSH
64933: LD_VAR 0 18
64937: PUSH
64938: LD_VAR 0 19
64942: PUSH
64943: LD_VAR 0 20
64947: PUSH
64948: LD_VAR 0 21
64952: PUSH
64953: LD_VAR 0 22
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: LD_VAR 0 4
64970: PUSH
64971: LD_INT 1
64973: PLUS
64974: ARRAY
64975: ST_TO_ADDR
64976: GO 65043
64978: LD_INT 3
64980: DOUBLE
64981: EQUAL
64982: IFTRUE 64986
64984: GO 65042
64986: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64987: LD_ADDR_VAR 0 9
64991: PUSH
64992: LD_VAR 0 23
64996: PUSH
64997: LD_VAR 0 24
65001: PUSH
65002: LD_VAR 0 25
65006: PUSH
65007: LD_VAR 0 26
65011: PUSH
65012: LD_VAR 0 27
65016: PUSH
65017: LD_VAR 0 28
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: PUSH
65030: LD_VAR 0 4
65034: PUSH
65035: LD_INT 1
65037: PLUS
65038: ARRAY
65039: ST_TO_ADDR
65040: GO 65043
65042: POP
65043: GO 65598
65045: LD_INT 2
65047: DOUBLE
65048: EQUAL
65049: IFTRUE 65059
65051: LD_INT 3
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65059
65057: GO 65115
65059: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65060: LD_ADDR_VAR 0 9
65064: PUSH
65065: LD_VAR 0 29
65069: PUSH
65070: LD_VAR 0 30
65074: PUSH
65075: LD_VAR 0 31
65079: PUSH
65080: LD_VAR 0 32
65084: PUSH
65085: LD_VAR 0 33
65089: PUSH
65090: LD_VAR 0 34
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: PUSH
65103: LD_VAR 0 4
65107: PUSH
65108: LD_INT 1
65110: PLUS
65111: ARRAY
65112: ST_TO_ADDR
65113: GO 65598
65115: LD_INT 16
65117: DOUBLE
65118: EQUAL
65119: IFTRUE 65177
65121: LD_INT 17
65123: DOUBLE
65124: EQUAL
65125: IFTRUE 65177
65127: LD_INT 18
65129: DOUBLE
65130: EQUAL
65131: IFTRUE 65177
65133: LD_INT 19
65135: DOUBLE
65136: EQUAL
65137: IFTRUE 65177
65139: LD_INT 22
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65177
65145: LD_INT 20
65147: DOUBLE
65148: EQUAL
65149: IFTRUE 65177
65151: LD_INT 21
65153: DOUBLE
65154: EQUAL
65155: IFTRUE 65177
65157: LD_INT 23
65159: DOUBLE
65160: EQUAL
65161: IFTRUE 65177
65163: LD_INT 24
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65177
65169: LD_INT 25
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65177
65175: GO 65233
65177: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65178: LD_ADDR_VAR 0 9
65182: PUSH
65183: LD_VAR 0 35
65187: PUSH
65188: LD_VAR 0 36
65192: PUSH
65193: LD_VAR 0 37
65197: PUSH
65198: LD_VAR 0 38
65202: PUSH
65203: LD_VAR 0 39
65207: PUSH
65208: LD_VAR 0 40
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: PUSH
65221: LD_VAR 0 4
65225: PUSH
65226: LD_INT 1
65228: PLUS
65229: ARRAY
65230: ST_TO_ADDR
65231: GO 65598
65233: LD_INT 6
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65289
65239: LD_INT 7
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65289
65245: LD_INT 8
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65289
65251: LD_INT 13
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65289
65257: LD_INT 12
65259: DOUBLE
65260: EQUAL
65261: IFTRUE 65289
65263: LD_INT 15
65265: DOUBLE
65266: EQUAL
65267: IFTRUE 65289
65269: LD_INT 11
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65289
65275: LD_INT 14
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65289
65281: LD_INT 10
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65289
65287: GO 65345
65289: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65290: LD_ADDR_VAR 0 9
65294: PUSH
65295: LD_VAR 0 41
65299: PUSH
65300: LD_VAR 0 42
65304: PUSH
65305: LD_VAR 0 43
65309: PUSH
65310: LD_VAR 0 44
65314: PUSH
65315: LD_VAR 0 45
65319: PUSH
65320: LD_VAR 0 46
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: PUSH
65333: LD_VAR 0 4
65337: PUSH
65338: LD_INT 1
65340: PLUS
65341: ARRAY
65342: ST_TO_ADDR
65343: GO 65598
65345: LD_INT 36
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65353
65351: GO 65409
65353: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65354: LD_ADDR_VAR 0 9
65358: PUSH
65359: LD_VAR 0 47
65363: PUSH
65364: LD_VAR 0 48
65368: PUSH
65369: LD_VAR 0 49
65373: PUSH
65374: LD_VAR 0 50
65378: PUSH
65379: LD_VAR 0 51
65383: PUSH
65384: LD_VAR 0 52
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: PUSH
65397: LD_VAR 0 4
65401: PUSH
65402: LD_INT 1
65404: PLUS
65405: ARRAY
65406: ST_TO_ADDR
65407: GO 65598
65409: LD_INT 4
65411: DOUBLE
65412: EQUAL
65413: IFTRUE 65435
65415: LD_INT 5
65417: DOUBLE
65418: EQUAL
65419: IFTRUE 65435
65421: LD_INT 34
65423: DOUBLE
65424: EQUAL
65425: IFTRUE 65435
65427: LD_INT 37
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65435
65433: GO 65491
65435: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65436: LD_ADDR_VAR 0 9
65440: PUSH
65441: LD_VAR 0 53
65445: PUSH
65446: LD_VAR 0 54
65450: PUSH
65451: LD_VAR 0 55
65455: PUSH
65456: LD_VAR 0 56
65460: PUSH
65461: LD_VAR 0 57
65465: PUSH
65466: LD_VAR 0 58
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 4
65483: PUSH
65484: LD_INT 1
65486: PLUS
65487: ARRAY
65488: ST_TO_ADDR
65489: GO 65598
65491: LD_INT 31
65493: DOUBLE
65494: EQUAL
65495: IFTRUE 65541
65497: LD_INT 32
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65541
65503: LD_INT 33
65505: DOUBLE
65506: EQUAL
65507: IFTRUE 65541
65509: LD_INT 27
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65541
65515: LD_INT 26
65517: DOUBLE
65518: EQUAL
65519: IFTRUE 65541
65521: LD_INT 28
65523: DOUBLE
65524: EQUAL
65525: IFTRUE 65541
65527: LD_INT 29
65529: DOUBLE
65530: EQUAL
65531: IFTRUE 65541
65533: LD_INT 30
65535: DOUBLE
65536: EQUAL
65537: IFTRUE 65541
65539: GO 65597
65541: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65542: LD_ADDR_VAR 0 9
65546: PUSH
65547: LD_VAR 0 59
65551: PUSH
65552: LD_VAR 0 60
65556: PUSH
65557: LD_VAR 0 61
65561: PUSH
65562: LD_VAR 0 62
65566: PUSH
65567: LD_VAR 0 63
65571: PUSH
65572: LD_VAR 0 64
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: LD_VAR 0 4
65589: PUSH
65590: LD_INT 1
65592: PLUS
65593: ARRAY
65594: ST_TO_ADDR
65595: GO 65598
65597: POP
// temp_list2 = [ ] ;
65598: LD_ADDR_VAR 0 10
65602: PUSH
65603: EMPTY
65604: ST_TO_ADDR
// for i in temp_list do
65605: LD_ADDR_VAR 0 8
65609: PUSH
65610: LD_VAR 0 9
65614: PUSH
65615: FOR_IN
65616: IFFALSE 65668
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65618: LD_ADDR_VAR 0 10
65622: PUSH
65623: LD_VAR 0 10
65627: PUSH
65628: LD_VAR 0 8
65632: PUSH
65633: LD_INT 1
65635: ARRAY
65636: PUSH
65637: LD_VAR 0 2
65641: PLUS
65642: PUSH
65643: LD_VAR 0 8
65647: PUSH
65648: LD_INT 2
65650: ARRAY
65651: PUSH
65652: LD_VAR 0 3
65656: PLUS
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: ADD
65665: ST_TO_ADDR
65666: GO 65615
65668: POP
65669: POP
// result = temp_list2 ;
65670: LD_ADDR_VAR 0 7
65674: PUSH
65675: LD_VAR 0 10
65679: ST_TO_ADDR
// end ;
65680: LD_VAR 0 7
65684: RET
// export function EnemyInRange ( unit , dist ) ; begin
65685: LD_INT 0
65687: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65688: LD_ADDR_VAR 0 3
65692: PUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL_OW 255
65702: PPUSH
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 250
65712: PPUSH
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL_OW 251
65722: PPUSH
65723: LD_VAR 0 2
65727: PPUSH
65728: CALL 39058 0 4
65732: PUSH
65733: LD_INT 4
65735: ARRAY
65736: ST_TO_ADDR
// end ;
65737: LD_VAR 0 3
65741: RET
// export function PlayerSeeMe ( unit ) ; begin
65742: LD_INT 0
65744: PPUSH
// result := See ( your_side , unit ) ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: LD_OWVAR 2
65754: PPUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 292
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 2
65769: RET
// export function ReverseDir ( unit ) ; begin
65770: LD_INT 0
65772: PPUSH
// if not unit then
65773: LD_VAR 0 1
65777: NOT
65778: IFFALSE 65782
// exit ;
65780: GO 65805
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: CALL_OW 254
65796: PUSH
65797: LD_INT 3
65799: PLUS
65800: PUSH
65801: LD_INT 6
65803: MOD
65804: ST_TO_ADDR
// end ;
65805: LD_VAR 0 2
65809: RET
// export function ReverseArray ( array ) ; var i ; begin
65810: LD_INT 0
65812: PPUSH
65813: PPUSH
// if not array then
65814: LD_VAR 0 1
65818: NOT
65819: IFFALSE 65823
// exit ;
65821: GO 65878
// result := [ ] ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: EMPTY
65829: ST_TO_ADDR
// for i := array downto 1 do
65830: LD_ADDR_VAR 0 3
65834: PUSH
65835: DOUBLE
65836: LD_VAR 0 1
65840: INC
65841: ST_TO_ADDR
65842: LD_INT 1
65844: PUSH
65845: FOR_DOWNTO
65846: IFFALSE 65876
// result := Join ( result , array [ i ] ) ;
65848: LD_ADDR_VAR 0 2
65852: PUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: LD_VAR 0 1
65862: PUSH
65863: LD_VAR 0 3
65867: ARRAY
65868: PPUSH
65869: CALL 70543 0 2
65873: ST_TO_ADDR
65874: GO 65845
65876: POP
65877: POP
// end ;
65878: LD_VAR 0 2
65882: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
65887: PPUSH
65888: PPUSH
65889: PPUSH
65890: PPUSH
// if not unit or not hexes then
65891: LD_VAR 0 1
65895: NOT
65896: PUSH
65897: LD_VAR 0 2
65901: NOT
65902: OR
65903: IFFALSE 65907
// exit ;
65905: GO 66030
// dist := 9999 ;
65907: LD_ADDR_VAR 0 5
65911: PUSH
65912: LD_INT 9999
65914: ST_TO_ADDR
// for i = 1 to hexes do
65915: LD_ADDR_VAR 0 4
65919: PUSH
65920: DOUBLE
65921: LD_INT 1
65923: DEC
65924: ST_TO_ADDR
65925: LD_VAR 0 2
65929: PUSH
65930: FOR_TO
65931: IFFALSE 66018
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65933: LD_ADDR_VAR 0 6
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: LD_VAR 0 2
65947: PUSH
65948: LD_VAR 0 4
65952: ARRAY
65953: PUSH
65954: LD_INT 1
65956: ARRAY
65957: PPUSH
65958: LD_VAR 0 2
65962: PUSH
65963: LD_VAR 0 4
65967: ARRAY
65968: PUSH
65969: LD_INT 2
65971: ARRAY
65972: PPUSH
65973: CALL_OW 297
65977: ST_TO_ADDR
// if tdist < dist then
65978: LD_VAR 0 6
65982: PUSH
65983: LD_VAR 0 5
65987: LESS
65988: IFFALSE 66016
// begin hex := hexes [ i ] ;
65990: LD_ADDR_VAR 0 8
65994: PUSH
65995: LD_VAR 0 2
65999: PUSH
66000: LD_VAR 0 4
66004: ARRAY
66005: ST_TO_ADDR
// dist := tdist ;
66006: LD_ADDR_VAR 0 5
66010: PUSH
66011: LD_VAR 0 6
66015: ST_TO_ADDR
// end ; end ;
66016: GO 65930
66018: POP
66019: POP
// result := hex ;
66020: LD_ADDR_VAR 0 3
66024: PUSH
66025: LD_VAR 0 8
66029: ST_TO_ADDR
// end ;
66030: LD_VAR 0 3
66034: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66035: LD_INT 0
66037: PPUSH
66038: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66039: LD_VAR 0 1
66043: NOT
66044: PUSH
66045: LD_VAR 0 1
66049: PUSH
66050: LD_INT 21
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 23
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PPUSH
66074: CALL_OW 69
66078: IN
66079: NOT
66080: OR
66081: IFFALSE 66085
// exit ;
66083: GO 66132
// for i = 1 to 3 do
66085: LD_ADDR_VAR 0 3
66089: PUSH
66090: DOUBLE
66091: LD_INT 1
66093: DEC
66094: ST_TO_ADDR
66095: LD_INT 3
66097: PUSH
66098: FOR_TO
66099: IFFALSE 66130
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66101: LD_VAR 0 1
66105: PPUSH
66106: CALL_OW 250
66110: PPUSH
66111: LD_VAR 0 1
66115: PPUSH
66116: CALL_OW 251
66120: PPUSH
66121: LD_INT 1
66123: PPUSH
66124: CALL_OW 453
66128: GO 66098
66130: POP
66131: POP
// end ;
66132: LD_VAR 0 2
66136: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66137: LD_INT 0
66139: PPUSH
66140: PPUSH
66141: PPUSH
66142: PPUSH
66143: PPUSH
66144: PPUSH
// if not unit or not enemy_unit then
66145: LD_VAR 0 1
66149: NOT
66150: PUSH
66151: LD_VAR 0 2
66155: NOT
66156: OR
66157: IFFALSE 66161
// exit ;
66159: GO 66628
// if GetLives ( i ) < 250 then
66161: LD_VAR 0 4
66165: PPUSH
66166: CALL_OW 256
66170: PUSH
66171: LD_INT 250
66173: LESS
66174: IFFALSE 66187
// begin ComAutodestruct ( i ) ;
66176: LD_VAR 0 4
66180: PPUSH
66181: CALL 66035 0 1
// exit ;
66185: GO 66628
// end ; x := GetX ( enemy_unit ) ;
66187: LD_ADDR_VAR 0 7
66191: PUSH
66192: LD_VAR 0 2
66196: PPUSH
66197: CALL_OW 250
66201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66202: LD_ADDR_VAR 0 8
66206: PUSH
66207: LD_VAR 0 2
66211: PPUSH
66212: CALL_OW 251
66216: ST_TO_ADDR
// if not x or not y then
66217: LD_VAR 0 7
66221: NOT
66222: PUSH
66223: LD_VAR 0 8
66227: NOT
66228: OR
66229: IFFALSE 66233
// exit ;
66231: GO 66628
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66233: LD_ADDR_VAR 0 6
66237: PUSH
66238: LD_VAR 0 7
66242: PPUSH
66243: LD_INT 0
66245: PPUSH
66246: LD_INT 4
66248: PPUSH
66249: CALL_OW 272
66253: PUSH
66254: LD_VAR 0 8
66258: PPUSH
66259: LD_INT 0
66261: PPUSH
66262: LD_INT 4
66264: PPUSH
66265: CALL_OW 273
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_VAR 0 7
66278: PPUSH
66279: LD_INT 1
66281: PPUSH
66282: LD_INT 4
66284: PPUSH
66285: CALL_OW 272
66289: PUSH
66290: LD_VAR 0 8
66294: PPUSH
66295: LD_INT 1
66297: PPUSH
66298: LD_INT 4
66300: PPUSH
66301: CALL_OW 273
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_VAR 0 7
66314: PPUSH
66315: LD_INT 2
66317: PPUSH
66318: LD_INT 4
66320: PPUSH
66321: CALL_OW 272
66325: PUSH
66326: LD_VAR 0 8
66330: PPUSH
66331: LD_INT 2
66333: PPUSH
66334: LD_INT 4
66336: PPUSH
66337: CALL_OW 273
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_VAR 0 7
66350: PPUSH
66351: LD_INT 3
66353: PPUSH
66354: LD_INT 4
66356: PPUSH
66357: CALL_OW 272
66361: PUSH
66362: LD_VAR 0 8
66366: PPUSH
66367: LD_INT 3
66369: PPUSH
66370: LD_INT 4
66372: PPUSH
66373: CALL_OW 273
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_VAR 0 7
66386: PPUSH
66387: LD_INT 4
66389: PPUSH
66390: LD_INT 4
66392: PPUSH
66393: CALL_OW 272
66397: PUSH
66398: LD_VAR 0 8
66402: PPUSH
66403: LD_INT 4
66405: PPUSH
66406: LD_INT 4
66408: PPUSH
66409: CALL_OW 273
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_VAR 0 7
66422: PPUSH
66423: LD_INT 5
66425: PPUSH
66426: LD_INT 4
66428: PPUSH
66429: CALL_OW 272
66433: PUSH
66434: LD_VAR 0 8
66438: PPUSH
66439: LD_INT 5
66441: PPUSH
66442: LD_INT 4
66444: PPUSH
66445: CALL_OW 273
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// for i = tmp downto 1 do
66462: LD_ADDR_VAR 0 4
66466: PUSH
66467: DOUBLE
66468: LD_VAR 0 6
66472: INC
66473: ST_TO_ADDR
66474: LD_INT 1
66476: PUSH
66477: FOR_DOWNTO
66478: IFFALSE 66579
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66480: LD_VAR 0 6
66484: PUSH
66485: LD_VAR 0 4
66489: ARRAY
66490: PUSH
66491: LD_INT 1
66493: ARRAY
66494: PPUSH
66495: LD_VAR 0 6
66499: PUSH
66500: LD_VAR 0 4
66504: ARRAY
66505: PUSH
66506: LD_INT 2
66508: ARRAY
66509: PPUSH
66510: CALL_OW 488
66514: NOT
66515: PUSH
66516: LD_VAR 0 6
66520: PUSH
66521: LD_VAR 0 4
66525: ARRAY
66526: PUSH
66527: LD_INT 1
66529: ARRAY
66530: PPUSH
66531: LD_VAR 0 6
66535: PUSH
66536: LD_VAR 0 4
66540: ARRAY
66541: PUSH
66542: LD_INT 2
66544: ARRAY
66545: PPUSH
66546: CALL_OW 428
66550: PUSH
66551: LD_INT 0
66553: NONEQUAL
66554: OR
66555: IFFALSE 66577
// tmp := Delete ( tmp , i ) ;
66557: LD_ADDR_VAR 0 6
66561: PUSH
66562: LD_VAR 0 6
66566: PPUSH
66567: LD_VAR 0 4
66571: PPUSH
66572: CALL_OW 3
66576: ST_TO_ADDR
66577: GO 66477
66579: POP
66580: POP
// j := GetClosestHex ( unit , tmp ) ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: LD_VAR 0 6
66595: PPUSH
66596: CALL 65883 0 2
66600: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66601: LD_VAR 0 1
66605: PPUSH
66606: LD_VAR 0 5
66610: PUSH
66611: LD_INT 1
66613: ARRAY
66614: PPUSH
66615: LD_VAR 0 5
66619: PUSH
66620: LD_INT 2
66622: ARRAY
66623: PPUSH
66624: CALL_OW 111
// end ;
66628: LD_VAR 0 3
66632: RET
// export function PrepareApemanSoldier ( ) ; begin
66633: LD_INT 0
66635: PPUSH
// uc_nation := 0 ;
66636: LD_ADDR_OWVAR 21
66640: PUSH
66641: LD_INT 0
66643: ST_TO_ADDR
// hc_sex := sex_male ;
66644: LD_ADDR_OWVAR 27
66648: PUSH
66649: LD_INT 1
66651: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66652: LD_ADDR_OWVAR 28
66656: PUSH
66657: LD_INT 15
66659: ST_TO_ADDR
// hc_gallery :=  ;
66660: LD_ADDR_OWVAR 33
66664: PUSH
66665: LD_STRING 
66667: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66668: LD_ADDR_OWVAR 31
66672: PUSH
66673: LD_INT 0
66675: PPUSH
66676: LD_INT 3
66678: PPUSH
66679: CALL_OW 12
66683: PUSH
66684: LD_INT 0
66686: PPUSH
66687: LD_INT 3
66689: PPUSH
66690: CALL_OW 12
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// end ;
66707: LD_VAR 0 1
66711: RET
// export function PrepareApemanEngineer ( ) ; begin
66712: LD_INT 0
66714: PPUSH
// uc_nation := 0 ;
66715: LD_ADDR_OWVAR 21
66719: PUSH
66720: LD_INT 0
66722: ST_TO_ADDR
// hc_sex := sex_male ;
66723: LD_ADDR_OWVAR 27
66727: PUSH
66728: LD_INT 1
66730: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66731: LD_ADDR_OWVAR 28
66735: PUSH
66736: LD_INT 16
66738: ST_TO_ADDR
// hc_gallery :=  ;
66739: LD_ADDR_OWVAR 33
66743: PUSH
66744: LD_STRING 
66746: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66747: LD_ADDR_OWVAR 31
66751: PUSH
66752: LD_INT 0
66754: PPUSH
66755: LD_INT 3
66757: PPUSH
66758: CALL_OW 12
66762: PUSH
66763: LD_INT 0
66765: PPUSH
66766: LD_INT 3
66768: PPUSH
66769: CALL_OW 12
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// end ;
66786: LD_VAR 0 1
66790: RET
// export function PrepareApeman ( agressivity ) ; begin
66791: LD_INT 0
66793: PPUSH
// uc_side := 0 ;
66794: LD_ADDR_OWVAR 20
66798: PUSH
66799: LD_INT 0
66801: ST_TO_ADDR
// uc_nation := 0 ;
66802: LD_ADDR_OWVAR 21
66806: PUSH
66807: LD_INT 0
66809: ST_TO_ADDR
// hc_sex := sex_male ;
66810: LD_ADDR_OWVAR 27
66814: PUSH
66815: LD_INT 1
66817: ST_TO_ADDR
// hc_class := class_apeman ;
66818: LD_ADDR_OWVAR 28
66822: PUSH
66823: LD_INT 12
66825: ST_TO_ADDR
// hc_gallery :=  ;
66826: LD_ADDR_OWVAR 33
66830: PUSH
66831: LD_STRING 
66833: ST_TO_ADDR
// if agressivity = 0 then
66834: LD_VAR 0 1
66838: PUSH
66839: LD_INT 0
66841: EQUAL
66842: IFFALSE 66854
// hc_agressivity := 0 else
66844: LD_ADDR_OWVAR 35
66848: PUSH
66849: LD_INT 0
66851: ST_TO_ADDR
66852: GO 66875
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66854: LD_ADDR_OWVAR 35
66858: PUSH
66859: LD_VAR 0 1
66863: NEG
66864: PPUSH
66865: LD_VAR 0 1
66869: PPUSH
66870: CALL_OW 12
66874: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66875: LD_ADDR_OWVAR 31
66879: PUSH
66880: LD_INT 0
66882: PPUSH
66883: LD_INT 3
66885: PPUSH
66886: CALL_OW 12
66890: PUSH
66891: LD_INT 0
66893: PPUSH
66894: LD_INT 3
66896: PPUSH
66897: CALL_OW 12
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// end ;
66914: LD_VAR 0 2
66918: RET
// export function PrepareTiger ( agressivity ) ; begin
66919: LD_INT 0
66921: PPUSH
// uc_side := 0 ;
66922: LD_ADDR_OWVAR 20
66926: PUSH
66927: LD_INT 0
66929: ST_TO_ADDR
// uc_nation := 0 ;
66930: LD_ADDR_OWVAR 21
66934: PUSH
66935: LD_INT 0
66937: ST_TO_ADDR
// hc_class := class_tiger ;
66938: LD_ADDR_OWVAR 28
66942: PUSH
66943: LD_INT 14
66945: ST_TO_ADDR
// hc_gallery :=  ;
66946: LD_ADDR_OWVAR 33
66950: PUSH
66951: LD_STRING 
66953: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66954: LD_ADDR_OWVAR 35
66958: PUSH
66959: LD_VAR 0 1
66963: NEG
66964: PPUSH
66965: LD_VAR 0 1
66969: PPUSH
66970: CALL_OW 12
66974: ST_TO_ADDR
// end ;
66975: LD_VAR 0 2
66979: RET
// export function PrepareEnchidna ( ) ; begin
66980: LD_INT 0
66982: PPUSH
// uc_side := 0 ;
66983: LD_ADDR_OWVAR 20
66987: PUSH
66988: LD_INT 0
66990: ST_TO_ADDR
// uc_nation := 0 ;
66991: LD_ADDR_OWVAR 21
66995: PUSH
66996: LD_INT 0
66998: ST_TO_ADDR
// hc_class := class_baggie ;
66999: LD_ADDR_OWVAR 28
67003: PUSH
67004: LD_INT 13
67006: ST_TO_ADDR
// hc_gallery :=  ;
67007: LD_ADDR_OWVAR 33
67011: PUSH
67012: LD_STRING 
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 1
67019: RET
// export function PrepareFrog ( ) ; begin
67020: LD_INT 0
67022: PPUSH
// uc_side := 0 ;
67023: LD_ADDR_OWVAR 20
67027: PUSH
67028: LD_INT 0
67030: ST_TO_ADDR
// uc_nation := 0 ;
67031: LD_ADDR_OWVAR 21
67035: PUSH
67036: LD_INT 0
67038: ST_TO_ADDR
// hc_class := class_frog ;
67039: LD_ADDR_OWVAR 28
67043: PUSH
67044: LD_INT 19
67046: ST_TO_ADDR
// hc_gallery :=  ;
67047: LD_ADDR_OWVAR 33
67051: PUSH
67052: LD_STRING 
67054: ST_TO_ADDR
// end ;
67055: LD_VAR 0 1
67059: RET
// export function PrepareFish ( ) ; begin
67060: LD_INT 0
67062: PPUSH
// uc_side := 0 ;
67063: LD_ADDR_OWVAR 20
67067: PUSH
67068: LD_INT 0
67070: ST_TO_ADDR
// uc_nation := 0 ;
67071: LD_ADDR_OWVAR 21
67075: PUSH
67076: LD_INT 0
67078: ST_TO_ADDR
// hc_class := class_fish ;
67079: LD_ADDR_OWVAR 28
67083: PUSH
67084: LD_INT 20
67086: ST_TO_ADDR
// hc_gallery :=  ;
67087: LD_ADDR_OWVAR 33
67091: PUSH
67092: LD_STRING 
67094: ST_TO_ADDR
// end ;
67095: LD_VAR 0 1
67099: RET
// export function PrepareBird ( ) ; begin
67100: LD_INT 0
67102: PPUSH
// uc_side := 0 ;
67103: LD_ADDR_OWVAR 20
67107: PUSH
67108: LD_INT 0
67110: ST_TO_ADDR
// uc_nation := 0 ;
67111: LD_ADDR_OWVAR 21
67115: PUSH
67116: LD_INT 0
67118: ST_TO_ADDR
// hc_class := class_phororhacos ;
67119: LD_ADDR_OWVAR 28
67123: PUSH
67124: LD_INT 18
67126: ST_TO_ADDR
// hc_gallery :=  ;
67127: LD_ADDR_OWVAR 33
67131: PUSH
67132: LD_STRING 
67134: ST_TO_ADDR
// end ;
67135: LD_VAR 0 1
67139: RET
// export function PrepareHorse ( ) ; begin
67140: LD_INT 0
67142: PPUSH
// uc_side := 0 ;
67143: LD_ADDR_OWVAR 20
67147: PUSH
67148: LD_INT 0
67150: ST_TO_ADDR
// uc_nation := 0 ;
67151: LD_ADDR_OWVAR 21
67155: PUSH
67156: LD_INT 0
67158: ST_TO_ADDR
// hc_class := class_horse ;
67159: LD_ADDR_OWVAR 28
67163: PUSH
67164: LD_INT 21
67166: ST_TO_ADDR
// hc_gallery :=  ;
67167: LD_ADDR_OWVAR 33
67171: PUSH
67172: LD_STRING 
67174: ST_TO_ADDR
// end ;
67175: LD_VAR 0 1
67179: RET
// export function PrepareMastodont ( ) ; begin
67180: LD_INT 0
67182: PPUSH
// uc_side := 0 ;
67183: LD_ADDR_OWVAR 20
67187: PUSH
67188: LD_INT 0
67190: ST_TO_ADDR
// uc_nation := 0 ;
67191: LD_ADDR_OWVAR 21
67195: PUSH
67196: LD_INT 0
67198: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67199: LD_ADDR_OWVAR 37
67203: PUSH
67204: LD_INT 31
67206: ST_TO_ADDR
// vc_control := control_rider ;
67207: LD_ADDR_OWVAR 38
67211: PUSH
67212: LD_INT 4
67214: ST_TO_ADDR
// end ;
67215: LD_VAR 0 1
67219: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67220: LD_INT 0
67222: PPUSH
67223: PPUSH
67224: PPUSH
// uc_side = 0 ;
67225: LD_ADDR_OWVAR 20
67229: PUSH
67230: LD_INT 0
67232: ST_TO_ADDR
// uc_nation = 0 ;
67233: LD_ADDR_OWVAR 21
67237: PUSH
67238: LD_INT 0
67240: ST_TO_ADDR
// InitHc_All ( ) ;
67241: CALL_OW 584
// InitVc ;
67245: CALL_OW 20
// if mastodonts then
67249: LD_VAR 0 6
67253: IFFALSE 67320
// for i = 1 to mastodonts do
67255: LD_ADDR_VAR 0 11
67259: PUSH
67260: DOUBLE
67261: LD_INT 1
67263: DEC
67264: ST_TO_ADDR
67265: LD_VAR 0 6
67269: PUSH
67270: FOR_TO
67271: IFFALSE 67318
// begin vc_chassis := 31 ;
67273: LD_ADDR_OWVAR 37
67277: PUSH
67278: LD_INT 31
67280: ST_TO_ADDR
// vc_control := control_rider ;
67281: LD_ADDR_OWVAR 38
67285: PUSH
67286: LD_INT 4
67288: ST_TO_ADDR
// animal := CreateVehicle ;
67289: LD_ADDR_VAR 0 12
67293: PUSH
67294: CALL_OW 45
67298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67299: LD_VAR 0 12
67303: PPUSH
67304: LD_VAR 0 8
67308: PPUSH
67309: LD_INT 0
67311: PPUSH
67312: CALL 69448 0 3
// end ;
67316: GO 67270
67318: POP
67319: POP
// if horses then
67320: LD_VAR 0 5
67324: IFFALSE 67391
// for i = 1 to horses do
67326: LD_ADDR_VAR 0 11
67330: PUSH
67331: DOUBLE
67332: LD_INT 1
67334: DEC
67335: ST_TO_ADDR
67336: LD_VAR 0 5
67340: PUSH
67341: FOR_TO
67342: IFFALSE 67389
// begin hc_class := 21 ;
67344: LD_ADDR_OWVAR 28
67348: PUSH
67349: LD_INT 21
67351: ST_TO_ADDR
// hc_gallery :=  ;
67352: LD_ADDR_OWVAR 33
67356: PUSH
67357: LD_STRING 
67359: ST_TO_ADDR
// animal := CreateHuman ;
67360: LD_ADDR_VAR 0 12
67364: PUSH
67365: CALL_OW 44
67369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67370: LD_VAR 0 12
67374: PPUSH
67375: LD_VAR 0 8
67379: PPUSH
67380: LD_INT 0
67382: PPUSH
67383: CALL 69448 0 3
// end ;
67387: GO 67341
67389: POP
67390: POP
// if birds then
67391: LD_VAR 0 1
67395: IFFALSE 67462
// for i = 1 to birds do
67397: LD_ADDR_VAR 0 11
67401: PUSH
67402: DOUBLE
67403: LD_INT 1
67405: DEC
67406: ST_TO_ADDR
67407: LD_VAR 0 1
67411: PUSH
67412: FOR_TO
67413: IFFALSE 67460
// begin hc_class := 18 ;
67415: LD_ADDR_OWVAR 28
67419: PUSH
67420: LD_INT 18
67422: ST_TO_ADDR
// hc_gallery =  ;
67423: LD_ADDR_OWVAR 33
67427: PUSH
67428: LD_STRING 
67430: ST_TO_ADDR
// animal := CreateHuman ;
67431: LD_ADDR_VAR 0 12
67435: PUSH
67436: CALL_OW 44
67440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67441: LD_VAR 0 12
67445: PPUSH
67446: LD_VAR 0 8
67450: PPUSH
67451: LD_INT 0
67453: PPUSH
67454: CALL 69448 0 3
// end ;
67458: GO 67412
67460: POP
67461: POP
// if tigers then
67462: LD_VAR 0 2
67466: IFFALSE 67550
// for i = 1 to tigers do
67468: LD_ADDR_VAR 0 11
67472: PUSH
67473: DOUBLE
67474: LD_INT 1
67476: DEC
67477: ST_TO_ADDR
67478: LD_VAR 0 2
67482: PUSH
67483: FOR_TO
67484: IFFALSE 67548
// begin hc_class = class_tiger ;
67486: LD_ADDR_OWVAR 28
67490: PUSH
67491: LD_INT 14
67493: ST_TO_ADDR
// hc_gallery =  ;
67494: LD_ADDR_OWVAR 33
67498: PUSH
67499: LD_STRING 
67501: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67502: LD_ADDR_OWVAR 35
67506: PUSH
67507: LD_INT 7
67509: NEG
67510: PPUSH
67511: LD_INT 7
67513: PPUSH
67514: CALL_OW 12
67518: ST_TO_ADDR
// animal := CreateHuman ;
67519: LD_ADDR_VAR 0 12
67523: PUSH
67524: CALL_OW 44
67528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67529: LD_VAR 0 12
67533: PPUSH
67534: LD_VAR 0 8
67538: PPUSH
67539: LD_INT 0
67541: PPUSH
67542: CALL 69448 0 3
// end ;
67546: GO 67483
67548: POP
67549: POP
// if apemans then
67550: LD_VAR 0 3
67554: IFFALSE 67677
// for i = 1 to apemans do
67556: LD_ADDR_VAR 0 11
67560: PUSH
67561: DOUBLE
67562: LD_INT 1
67564: DEC
67565: ST_TO_ADDR
67566: LD_VAR 0 3
67570: PUSH
67571: FOR_TO
67572: IFFALSE 67675
// begin hc_class = class_apeman ;
67574: LD_ADDR_OWVAR 28
67578: PUSH
67579: LD_INT 12
67581: ST_TO_ADDR
// hc_gallery =  ;
67582: LD_ADDR_OWVAR 33
67586: PUSH
67587: LD_STRING 
67589: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67590: LD_ADDR_OWVAR 35
67594: PUSH
67595: LD_INT 2
67597: NEG
67598: PPUSH
67599: LD_INT 2
67601: PPUSH
67602: CALL_OW 12
67606: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67607: LD_ADDR_OWVAR 31
67611: PUSH
67612: LD_INT 1
67614: PPUSH
67615: LD_INT 3
67617: PPUSH
67618: CALL_OW 12
67622: PUSH
67623: LD_INT 1
67625: PPUSH
67626: LD_INT 3
67628: PPUSH
67629: CALL_OW 12
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: ST_TO_ADDR
// animal := CreateHuman ;
67646: LD_ADDR_VAR 0 12
67650: PUSH
67651: CALL_OW 44
67655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67656: LD_VAR 0 12
67660: PPUSH
67661: LD_VAR 0 8
67665: PPUSH
67666: LD_INT 0
67668: PPUSH
67669: CALL 69448 0 3
// end ;
67673: GO 67571
67675: POP
67676: POP
// if enchidnas then
67677: LD_VAR 0 4
67681: IFFALSE 67748
// for i = 1 to enchidnas do
67683: LD_ADDR_VAR 0 11
67687: PUSH
67688: DOUBLE
67689: LD_INT 1
67691: DEC
67692: ST_TO_ADDR
67693: LD_VAR 0 4
67697: PUSH
67698: FOR_TO
67699: IFFALSE 67746
// begin hc_class = 13 ;
67701: LD_ADDR_OWVAR 28
67705: PUSH
67706: LD_INT 13
67708: ST_TO_ADDR
// hc_gallery =  ;
67709: LD_ADDR_OWVAR 33
67713: PUSH
67714: LD_STRING 
67716: ST_TO_ADDR
// animal := CreateHuman ;
67717: LD_ADDR_VAR 0 12
67721: PUSH
67722: CALL_OW 44
67726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67727: LD_VAR 0 12
67731: PPUSH
67732: LD_VAR 0 8
67736: PPUSH
67737: LD_INT 0
67739: PPUSH
67740: CALL 69448 0 3
// end ;
67744: GO 67698
67746: POP
67747: POP
// if fishes then
67748: LD_VAR 0 7
67752: IFFALSE 67819
// for i = 1 to fishes do
67754: LD_ADDR_VAR 0 11
67758: PUSH
67759: DOUBLE
67760: LD_INT 1
67762: DEC
67763: ST_TO_ADDR
67764: LD_VAR 0 7
67768: PUSH
67769: FOR_TO
67770: IFFALSE 67817
// begin hc_class = 20 ;
67772: LD_ADDR_OWVAR 28
67776: PUSH
67777: LD_INT 20
67779: ST_TO_ADDR
// hc_gallery =  ;
67780: LD_ADDR_OWVAR 33
67784: PUSH
67785: LD_STRING 
67787: ST_TO_ADDR
// animal := CreateHuman ;
67788: LD_ADDR_VAR 0 12
67792: PUSH
67793: CALL_OW 44
67797: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67798: LD_VAR 0 12
67802: PPUSH
67803: LD_VAR 0 9
67807: PPUSH
67808: LD_INT 0
67810: PPUSH
67811: CALL 69448 0 3
// end ;
67815: GO 67769
67817: POP
67818: POP
// end ;
67819: LD_VAR 0 10
67823: RET
// export function WantHeal ( sci , unit ) ; begin
67824: LD_INT 0
67826: PPUSH
// if GetTaskList ( sci ) > 0 then
67827: LD_VAR 0 1
67831: PPUSH
67832: CALL_OW 437
67836: PUSH
67837: LD_INT 0
67839: GREATER
67840: IFFALSE 67910
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67842: LD_VAR 0 1
67846: PPUSH
67847: CALL_OW 437
67851: PUSH
67852: LD_INT 1
67854: ARRAY
67855: PUSH
67856: LD_INT 1
67858: ARRAY
67859: PUSH
67860: LD_STRING l
67862: EQUAL
67863: PUSH
67864: LD_VAR 0 1
67868: PPUSH
67869: CALL_OW 437
67873: PUSH
67874: LD_INT 1
67876: ARRAY
67877: PUSH
67878: LD_INT 4
67880: ARRAY
67881: PUSH
67882: LD_VAR 0 2
67886: EQUAL
67887: AND
67888: IFFALSE 67900
// result := true else
67890: LD_ADDR_VAR 0 3
67894: PUSH
67895: LD_INT 1
67897: ST_TO_ADDR
67898: GO 67908
// result := false ;
67900: LD_ADDR_VAR 0 3
67904: PUSH
67905: LD_INT 0
67907: ST_TO_ADDR
// end else
67908: GO 67918
// result := false ;
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_INT 0
67917: ST_TO_ADDR
// end ;
67918: LD_VAR 0 3
67922: RET
// export function HealTarget ( sci ) ; begin
67923: LD_INT 0
67925: PPUSH
// if not sci then
67926: LD_VAR 0 1
67930: NOT
67931: IFFALSE 67935
// exit ;
67933: GO 68000
// result := 0 ;
67935: LD_ADDR_VAR 0 2
67939: PUSH
67940: LD_INT 0
67942: ST_TO_ADDR
// if GetTaskList ( sci ) then
67943: LD_VAR 0 1
67947: PPUSH
67948: CALL_OW 437
67952: IFFALSE 68000
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67954: LD_VAR 0 1
67958: PPUSH
67959: CALL_OW 437
67963: PUSH
67964: LD_INT 1
67966: ARRAY
67967: PUSH
67968: LD_INT 1
67970: ARRAY
67971: PUSH
67972: LD_STRING l
67974: EQUAL
67975: IFFALSE 68000
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67977: LD_ADDR_VAR 0 2
67981: PUSH
67982: LD_VAR 0 1
67986: PPUSH
67987: CALL_OW 437
67991: PUSH
67992: LD_INT 1
67994: ARRAY
67995: PUSH
67996: LD_INT 4
67998: ARRAY
67999: ST_TO_ADDR
// end ;
68000: LD_VAR 0 2
68004: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68005: LD_INT 0
68007: PPUSH
68008: PPUSH
68009: PPUSH
68010: PPUSH
// if not base_units then
68011: LD_VAR 0 1
68015: NOT
68016: IFFALSE 68020
// exit ;
68018: GO 68107
// result := false ;
68020: LD_ADDR_VAR 0 2
68024: PUSH
68025: LD_INT 0
68027: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68028: LD_ADDR_VAR 0 5
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_INT 21
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PPUSH
68048: CALL_OW 72
68052: ST_TO_ADDR
// if not tmp then
68053: LD_VAR 0 5
68057: NOT
68058: IFFALSE 68062
// exit ;
68060: GO 68107
// for i in tmp do
68062: LD_ADDR_VAR 0 3
68066: PUSH
68067: LD_VAR 0 5
68071: PUSH
68072: FOR_IN
68073: IFFALSE 68105
// begin result := EnemyInRange ( i , 22 ) ;
68075: LD_ADDR_VAR 0 2
68079: PUSH
68080: LD_VAR 0 3
68084: PPUSH
68085: LD_INT 22
68087: PPUSH
68088: CALL 65685 0 2
68092: ST_TO_ADDR
// if result then
68093: LD_VAR 0 2
68097: IFFALSE 68103
// exit ;
68099: POP
68100: POP
68101: GO 68107
// end ;
68103: GO 68072
68105: POP
68106: POP
// end ;
68107: LD_VAR 0 2
68111: RET
// export function FilterByTag ( units , tag ) ; begin
68112: LD_INT 0
68114: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68115: LD_ADDR_VAR 0 3
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: LD_INT 120
68127: PUSH
68128: LD_VAR 0 2
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PPUSH
68137: CALL_OW 72
68141: ST_TO_ADDR
// end ;
68142: LD_VAR 0 3
68146: RET
// export function IsDriver ( un ) ; begin
68147: LD_INT 0
68149: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68150: LD_ADDR_VAR 0 2
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_INT 55
68162: PUSH
68163: EMPTY
68164: LIST
68165: PPUSH
68166: CALL_OW 69
68170: IN
68171: ST_TO_ADDR
// end ;
68172: LD_VAR 0 2
68176: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68177: LD_INT 0
68179: PPUSH
68180: PPUSH
// list := [ ] ;
68181: LD_ADDR_VAR 0 5
68185: PUSH
68186: EMPTY
68187: ST_TO_ADDR
// case d of 0 :
68188: LD_VAR 0 3
68192: PUSH
68193: LD_INT 0
68195: DOUBLE
68196: EQUAL
68197: IFTRUE 68201
68199: GO 68334
68201: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68202: LD_ADDR_VAR 0 5
68206: PUSH
68207: LD_VAR 0 1
68211: PUSH
68212: LD_INT 4
68214: MINUS
68215: PUSH
68216: LD_VAR 0 2
68220: PUSH
68221: LD_INT 4
68223: MINUS
68224: PUSH
68225: LD_INT 2
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: LIST
68232: PUSH
68233: LD_VAR 0 1
68237: PUSH
68238: LD_INT 3
68240: MINUS
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: PUSH
68255: LD_VAR 0 1
68259: PUSH
68260: LD_INT 4
68262: PLUS
68263: PUSH
68264: LD_VAR 0 2
68268: PUSH
68269: LD_INT 4
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: LD_INT 3
68284: PLUS
68285: PUSH
68286: LD_VAR 0 2
68290: PUSH
68291: LD_INT 3
68293: PLUS
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: PUSH
68303: LD_VAR 0 1
68307: PUSH
68308: LD_VAR 0 2
68312: PUSH
68313: LD_INT 4
68315: PLUS
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: LIST
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: ST_TO_ADDR
// end ; 1 :
68332: GO 69032
68334: LD_INT 1
68336: DOUBLE
68337: EQUAL
68338: IFTRUE 68342
68340: GO 68475
68342: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68343: LD_ADDR_VAR 0 5
68347: PUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_VAR 0 2
68357: PUSH
68358: LD_INT 4
68360: MINUS
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: PUSH
68370: LD_VAR 0 1
68374: PUSH
68375: LD_INT 3
68377: MINUS
68378: PUSH
68379: LD_VAR 0 2
68383: PUSH
68384: LD_INT 3
68386: MINUS
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: PUSH
68396: LD_VAR 0 1
68400: PUSH
68401: LD_INT 4
68403: MINUS
68404: PUSH
68405: LD_VAR 0 2
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: LIST
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: LD_VAR 0 2
68427: PUSH
68428: LD_INT 3
68430: PLUS
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: LIST
68439: PUSH
68440: LD_VAR 0 1
68444: PUSH
68445: LD_INT 4
68447: PLUS
68448: PUSH
68449: LD_VAR 0 2
68453: PUSH
68454: LD_INT 4
68456: PLUS
68457: PUSH
68458: LD_INT 5
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: LIST
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: ST_TO_ADDR
// end ; 2 :
68473: GO 69032
68475: LD_INT 2
68477: DOUBLE
68478: EQUAL
68479: IFTRUE 68483
68481: GO 68612
68483: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68484: LD_ADDR_VAR 0 5
68488: PUSH
68489: LD_VAR 0 1
68493: PUSH
68494: LD_VAR 0 2
68498: PUSH
68499: LD_INT 3
68501: MINUS
68502: PUSH
68503: LD_INT 3
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: LIST
68510: PUSH
68511: LD_VAR 0 1
68515: PUSH
68516: LD_INT 4
68518: PLUS
68519: PUSH
68520: LD_VAR 0 2
68524: PUSH
68525: LD_INT 4
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: PUSH
68533: LD_VAR 0 1
68537: PUSH
68538: LD_VAR 0 2
68542: PUSH
68543: LD_INT 4
68545: PLUS
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: PUSH
68555: LD_VAR 0 1
68559: PUSH
68560: LD_INT 3
68562: MINUS
68563: PUSH
68564: LD_VAR 0 2
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: PUSH
68577: LD_VAR 0 1
68581: PUSH
68582: LD_INT 4
68584: MINUS
68585: PUSH
68586: LD_VAR 0 2
68590: PUSH
68591: LD_INT 4
68593: MINUS
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: ST_TO_ADDR
// end ; 3 :
68610: GO 69032
68612: LD_INT 3
68614: DOUBLE
68615: EQUAL
68616: IFTRUE 68620
68618: GO 68753
68620: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68621: LD_ADDR_VAR 0 5
68625: PUSH
68626: LD_VAR 0 1
68630: PUSH
68631: LD_INT 3
68633: PLUS
68634: PUSH
68635: LD_VAR 0 2
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: PUSH
68648: LD_VAR 0 1
68652: PUSH
68653: LD_INT 4
68655: PLUS
68656: PUSH
68657: LD_VAR 0 2
68661: PUSH
68662: LD_INT 4
68664: PLUS
68665: PUSH
68666: LD_INT 5
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 1
68678: PUSH
68679: LD_INT 4
68681: MINUS
68682: PUSH
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 1
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: LD_VAR 0 1
68700: PUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 4
68708: MINUS
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: PUSH
68718: LD_VAR 0 1
68722: PUSH
68723: LD_INT 3
68725: MINUS
68726: PUSH
68727: LD_VAR 0 2
68731: PUSH
68732: LD_INT 3
68734: MINUS
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: ST_TO_ADDR
// end ; 4 :
68751: GO 69032
68753: LD_INT 4
68755: DOUBLE
68756: EQUAL
68757: IFTRUE 68761
68759: GO 68894
68761: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68762: LD_ADDR_VAR 0 5
68766: PUSH
68767: LD_VAR 0 1
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 4
68779: PLUS
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: PUSH
68789: LD_VAR 0 1
68793: PUSH
68794: LD_INT 3
68796: PLUS
68797: PUSH
68798: LD_VAR 0 2
68802: PUSH
68803: LD_INT 3
68805: PLUS
68806: PUSH
68807: LD_INT 5
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 4
68822: PLUS
68823: PUSH
68824: LD_VAR 0 2
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: LIST
68836: PUSH
68837: LD_VAR 0 1
68841: PUSH
68842: LD_VAR 0 2
68846: PUSH
68847: LD_INT 3
68849: MINUS
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: PUSH
68859: LD_VAR 0 1
68863: PUSH
68864: LD_INT 4
68866: MINUS
68867: PUSH
68868: LD_VAR 0 2
68872: PUSH
68873: LD_INT 4
68875: MINUS
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: ST_TO_ADDR
// end ; 5 :
68892: GO 69032
68894: LD_INT 5
68896: DOUBLE
68897: EQUAL
68898: IFTRUE 68902
68900: GO 69031
68902: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68903: LD_ADDR_VAR 0 5
68907: PUSH
68908: LD_VAR 0 1
68912: PUSH
68913: LD_INT 4
68915: MINUS
68916: PUSH
68917: LD_VAR 0 2
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: PUSH
68930: LD_VAR 0 1
68934: PUSH
68935: LD_VAR 0 2
68939: PUSH
68940: LD_INT 4
68942: MINUS
68943: PUSH
68944: LD_INT 3
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: LD_VAR 0 1
68956: PUSH
68957: LD_INT 4
68959: PLUS
68960: PUSH
68961: LD_VAR 0 2
68965: PUSH
68966: LD_INT 4
68968: PLUS
68969: PUSH
68970: LD_INT 5
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: PUSH
68978: LD_VAR 0 1
68982: PUSH
68983: LD_INT 3
68985: PLUS
68986: PUSH
68987: LD_VAR 0 2
68991: PUSH
68992: LD_INT 4
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: LIST
68999: PUSH
69000: LD_VAR 0 1
69004: PUSH
69005: LD_VAR 0 2
69009: PUSH
69010: LD_INT 3
69012: PLUS
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: ST_TO_ADDR
// end ; end ;
69029: GO 69032
69031: POP
// result := list ;
69032: LD_ADDR_VAR 0 4
69036: PUSH
69037: LD_VAR 0 5
69041: ST_TO_ADDR
// end ;
69042: LD_VAR 0 4
69046: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69047: LD_INT 0
69049: PPUSH
69050: PPUSH
69051: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69052: LD_VAR 0 1
69056: NOT
69057: PUSH
69058: LD_VAR 0 2
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: LD_INT 2
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 4
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: IN
69081: NOT
69082: OR
69083: IFFALSE 69087
// exit ;
69085: GO 69170
// tmp := [ ] ;
69087: LD_ADDR_VAR 0 5
69091: PUSH
69092: EMPTY
69093: ST_TO_ADDR
// for i in units do
69094: LD_ADDR_VAR 0 4
69098: PUSH
69099: LD_VAR 0 1
69103: PUSH
69104: FOR_IN
69105: IFFALSE 69139
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69107: LD_ADDR_VAR 0 5
69111: PUSH
69112: LD_VAR 0 5
69116: PPUSH
69117: LD_VAR 0 4
69121: PPUSH
69122: LD_VAR 0 2
69126: PPUSH
69127: CALL_OW 259
69131: PPUSH
69132: CALL 70543 0 2
69136: ST_TO_ADDR
69137: GO 69104
69139: POP
69140: POP
// if not tmp then
69141: LD_VAR 0 5
69145: NOT
69146: IFFALSE 69150
// exit ;
69148: GO 69170
// result := SortListByListDesc ( units , tmp ) ;
69150: LD_ADDR_VAR 0 3
69154: PUSH
69155: LD_VAR 0 1
69159: PPUSH
69160: LD_VAR 0 5
69164: PPUSH
69165: CALL_OW 77
69169: ST_TO_ADDR
// end ;
69170: LD_VAR 0 3
69174: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69175: LD_INT 0
69177: PPUSH
69178: PPUSH
69179: PPUSH
// result := false ;
69180: LD_ADDR_VAR 0 3
69184: PUSH
69185: LD_INT 0
69187: ST_TO_ADDR
// if not building then
69188: LD_VAR 0 2
69192: NOT
69193: IFFALSE 69197
// exit ;
69195: GO 69335
// x := GetX ( building ) ;
69197: LD_ADDR_VAR 0 4
69201: PUSH
69202: LD_VAR 0 2
69206: PPUSH
69207: CALL_OW 250
69211: ST_TO_ADDR
// y := GetY ( building ) ;
69212: LD_ADDR_VAR 0 5
69216: PUSH
69217: LD_VAR 0 2
69221: PPUSH
69222: CALL_OW 251
69226: ST_TO_ADDR
// if not x or not y then
69227: LD_VAR 0 4
69231: NOT
69232: PUSH
69233: LD_VAR 0 5
69237: NOT
69238: OR
69239: IFFALSE 69243
// exit ;
69241: GO 69335
// if GetTaskList ( unit ) then
69243: LD_VAR 0 1
69247: PPUSH
69248: CALL_OW 437
69252: IFFALSE 69335
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69254: LD_STRING e
69256: PUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: CALL_OW 437
69266: PUSH
69267: LD_INT 1
69269: ARRAY
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: EQUAL
69275: PUSH
69276: LD_VAR 0 4
69280: PUSH
69281: LD_VAR 0 1
69285: PPUSH
69286: CALL_OW 437
69290: PUSH
69291: LD_INT 1
69293: ARRAY
69294: PUSH
69295: LD_INT 2
69297: ARRAY
69298: EQUAL
69299: AND
69300: PUSH
69301: LD_VAR 0 5
69305: PUSH
69306: LD_VAR 0 1
69310: PPUSH
69311: CALL_OW 437
69315: PUSH
69316: LD_INT 1
69318: ARRAY
69319: PUSH
69320: LD_INT 3
69322: ARRAY
69323: EQUAL
69324: AND
69325: IFFALSE 69335
// result := true end ;
69327: LD_ADDR_VAR 0 3
69331: PUSH
69332: LD_INT 1
69334: ST_TO_ADDR
// end ;
69335: LD_VAR 0 3
69339: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69340: LD_INT 0
69342: PPUSH
// result := false ;
69343: LD_ADDR_VAR 0 4
69347: PUSH
69348: LD_INT 0
69350: ST_TO_ADDR
// if GetTaskList ( unit ) then
69351: LD_VAR 0 1
69355: PPUSH
69356: CALL_OW 437
69360: IFFALSE 69443
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69362: LD_STRING M
69364: PUSH
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL_OW 437
69374: PUSH
69375: LD_INT 1
69377: ARRAY
69378: PUSH
69379: LD_INT 1
69381: ARRAY
69382: EQUAL
69383: PUSH
69384: LD_VAR 0 2
69388: PUSH
69389: LD_VAR 0 1
69393: PPUSH
69394: CALL_OW 437
69398: PUSH
69399: LD_INT 1
69401: ARRAY
69402: PUSH
69403: LD_INT 2
69405: ARRAY
69406: EQUAL
69407: AND
69408: PUSH
69409: LD_VAR 0 3
69413: PUSH
69414: LD_VAR 0 1
69418: PPUSH
69419: CALL_OW 437
69423: PUSH
69424: LD_INT 1
69426: ARRAY
69427: PUSH
69428: LD_INT 3
69430: ARRAY
69431: EQUAL
69432: AND
69433: IFFALSE 69443
// result := true ;
69435: LD_ADDR_VAR 0 4
69439: PUSH
69440: LD_INT 1
69442: ST_TO_ADDR
// end ; end ;
69443: LD_VAR 0 4
69447: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69448: LD_INT 0
69450: PPUSH
69451: PPUSH
69452: PPUSH
69453: PPUSH
// if not unit or not area then
69454: LD_VAR 0 1
69458: NOT
69459: PUSH
69460: LD_VAR 0 2
69464: NOT
69465: OR
69466: IFFALSE 69470
// exit ;
69468: GO 69646
// tmp := AreaToList ( area , i ) ;
69470: LD_ADDR_VAR 0 6
69474: PUSH
69475: LD_VAR 0 2
69479: PPUSH
69480: LD_VAR 0 5
69484: PPUSH
69485: CALL_OW 517
69489: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69490: LD_ADDR_VAR 0 5
69494: PUSH
69495: DOUBLE
69496: LD_INT 1
69498: DEC
69499: ST_TO_ADDR
69500: LD_VAR 0 6
69504: PUSH
69505: LD_INT 1
69507: ARRAY
69508: PUSH
69509: FOR_TO
69510: IFFALSE 69644
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69512: LD_ADDR_VAR 0 7
69516: PUSH
69517: LD_VAR 0 6
69521: PUSH
69522: LD_INT 1
69524: ARRAY
69525: PUSH
69526: LD_VAR 0 5
69530: ARRAY
69531: PUSH
69532: LD_VAR 0 6
69536: PUSH
69537: LD_INT 2
69539: ARRAY
69540: PUSH
69541: LD_VAR 0 5
69545: ARRAY
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69551: LD_INT 92
69553: PUSH
69554: LD_VAR 0 7
69558: PUSH
69559: LD_INT 1
69561: ARRAY
69562: PUSH
69563: LD_VAR 0 7
69567: PUSH
69568: LD_INT 2
69570: ARRAY
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: PPUSH
69581: CALL_OW 69
69585: PUSH
69586: LD_INT 0
69588: EQUAL
69589: IFFALSE 69642
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69591: LD_VAR 0 1
69595: PPUSH
69596: LD_VAR 0 7
69600: PUSH
69601: LD_INT 1
69603: ARRAY
69604: PPUSH
69605: LD_VAR 0 7
69609: PUSH
69610: LD_INT 2
69612: ARRAY
69613: PPUSH
69614: LD_VAR 0 3
69618: PPUSH
69619: CALL_OW 48
// result := IsPlaced ( unit ) ;
69623: LD_ADDR_VAR 0 4
69627: PUSH
69628: LD_VAR 0 1
69632: PPUSH
69633: CALL_OW 305
69637: ST_TO_ADDR
// exit ;
69638: POP
69639: POP
69640: GO 69646
// end ; end ;
69642: GO 69509
69644: POP
69645: POP
// end ;
69646: LD_VAR 0 4
69650: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69651: LD_INT 0
69653: PPUSH
69654: PPUSH
69655: PPUSH
// if not side or side > 8 then
69656: LD_VAR 0 1
69660: NOT
69661: PUSH
69662: LD_VAR 0 1
69666: PUSH
69667: LD_INT 8
69669: GREATER
69670: OR
69671: IFFALSE 69675
// exit ;
69673: GO 69862
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69675: LD_ADDR_VAR 0 4
69679: PUSH
69680: LD_INT 22
69682: PUSH
69683: LD_VAR 0 1
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 21
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PPUSH
69706: CALL_OW 69
69710: ST_TO_ADDR
// if not tmp then
69711: LD_VAR 0 4
69715: NOT
69716: IFFALSE 69720
// exit ;
69718: GO 69862
// enable_addtolog := true ;
69720: LD_ADDR_OWVAR 81
69724: PUSH
69725: LD_INT 1
69727: ST_TO_ADDR
// AddToLog ( [ ) ;
69728: LD_STRING [
69730: PPUSH
69731: CALL_OW 561
// for i in tmp do
69735: LD_ADDR_VAR 0 3
69739: PUSH
69740: LD_VAR 0 4
69744: PUSH
69745: FOR_IN
69746: IFFALSE 69853
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69748: LD_STRING [
69750: PUSH
69751: LD_VAR 0 3
69755: PPUSH
69756: CALL_OW 266
69760: STR
69761: PUSH
69762: LD_STRING , 
69764: STR
69765: PUSH
69766: LD_VAR 0 3
69770: PPUSH
69771: CALL_OW 250
69775: STR
69776: PUSH
69777: LD_STRING , 
69779: STR
69780: PUSH
69781: LD_VAR 0 3
69785: PPUSH
69786: CALL_OW 251
69790: STR
69791: PUSH
69792: LD_STRING , 
69794: STR
69795: PUSH
69796: LD_VAR 0 3
69800: PPUSH
69801: CALL_OW 254
69805: STR
69806: PUSH
69807: LD_STRING , 
69809: STR
69810: PUSH
69811: LD_VAR 0 3
69815: PPUSH
69816: LD_INT 1
69818: PPUSH
69819: CALL_OW 268
69823: STR
69824: PUSH
69825: LD_STRING , 
69827: STR
69828: PUSH
69829: LD_VAR 0 3
69833: PPUSH
69834: LD_INT 2
69836: PPUSH
69837: CALL_OW 268
69841: STR
69842: PUSH
69843: LD_STRING ],
69845: STR
69846: PPUSH
69847: CALL_OW 561
// end ;
69851: GO 69745
69853: POP
69854: POP
// AddToLog ( ]; ) ;
69855: LD_STRING ];
69857: PPUSH
69858: CALL_OW 561
// end ;
69862: LD_VAR 0 2
69866: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69867: LD_INT 0
69869: PPUSH
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
// if not area or not rate or not max then
69874: LD_VAR 0 1
69878: NOT
69879: PUSH
69880: LD_VAR 0 2
69884: NOT
69885: OR
69886: PUSH
69887: LD_VAR 0 4
69891: NOT
69892: OR
69893: IFFALSE 69897
// exit ;
69895: GO 70086
// while 1 do
69897: LD_INT 1
69899: IFFALSE 70086
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69901: LD_ADDR_VAR 0 9
69905: PUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: LD_INT 1
69913: PPUSH
69914: CALL_OW 287
69918: PUSH
69919: LD_INT 10
69921: MUL
69922: ST_TO_ADDR
// r := rate / 10 ;
69923: LD_ADDR_VAR 0 7
69927: PUSH
69928: LD_VAR 0 2
69932: PUSH
69933: LD_INT 10
69935: DIVREAL
69936: ST_TO_ADDR
// time := 1 1$00 ;
69937: LD_ADDR_VAR 0 8
69941: PUSH
69942: LD_INT 2100
69944: ST_TO_ADDR
// if amount < min then
69945: LD_VAR 0 9
69949: PUSH
69950: LD_VAR 0 3
69954: LESS
69955: IFFALSE 69973
// r := r * 2 else
69957: LD_ADDR_VAR 0 7
69961: PUSH
69962: LD_VAR 0 7
69966: PUSH
69967: LD_INT 2
69969: MUL
69970: ST_TO_ADDR
69971: GO 69999
// if amount > max then
69973: LD_VAR 0 9
69977: PUSH
69978: LD_VAR 0 4
69982: GREATER
69983: IFFALSE 69999
// r := r / 2 ;
69985: LD_ADDR_VAR 0 7
69989: PUSH
69990: LD_VAR 0 7
69994: PUSH
69995: LD_INT 2
69997: DIVREAL
69998: ST_TO_ADDR
// time := time / r ;
69999: LD_ADDR_VAR 0 8
70003: PUSH
70004: LD_VAR 0 8
70008: PUSH
70009: LD_VAR 0 7
70013: DIVREAL
70014: ST_TO_ADDR
// if time < 0 then
70015: LD_VAR 0 8
70019: PUSH
70020: LD_INT 0
70022: LESS
70023: IFFALSE 70040
// time := time * - 1 ;
70025: LD_ADDR_VAR 0 8
70029: PUSH
70030: LD_VAR 0 8
70034: PUSH
70035: LD_INT 1
70037: NEG
70038: MUL
70039: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70040: LD_VAR 0 8
70044: PUSH
70045: LD_INT 35
70047: PPUSH
70048: LD_INT 875
70050: PPUSH
70051: CALL_OW 12
70055: PLUS
70056: PPUSH
70057: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70061: LD_INT 1
70063: PPUSH
70064: LD_INT 5
70066: PPUSH
70067: CALL_OW 12
70071: PPUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: LD_INT 1
70079: PPUSH
70080: CALL_OW 55
// end ;
70084: GO 69897
// end ;
70086: LD_VAR 0 5
70090: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70091: LD_INT 0
70093: PPUSH
70094: PPUSH
70095: PPUSH
70096: PPUSH
70097: PPUSH
70098: PPUSH
70099: PPUSH
70100: PPUSH
// if not turrets or not factories then
70101: LD_VAR 0 1
70105: NOT
70106: PUSH
70107: LD_VAR 0 2
70111: NOT
70112: OR
70113: IFFALSE 70117
// exit ;
70115: GO 70424
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70117: LD_ADDR_VAR 0 10
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: LD_INT 6
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: LD_INT 5
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 24
70159: PUSH
70160: LD_INT 25
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 23
70169: PUSH
70170: LD_INT 27
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 42
70183: PUSH
70184: LD_INT 43
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 44
70193: PUSH
70194: LD_INT 46
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 45
70203: PUSH
70204: LD_INT 47
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: ST_TO_ADDR
// result := [ ] ;
70221: LD_ADDR_VAR 0 3
70225: PUSH
70226: EMPTY
70227: ST_TO_ADDR
// for i in turrets do
70228: LD_ADDR_VAR 0 4
70232: PUSH
70233: LD_VAR 0 1
70237: PUSH
70238: FOR_IN
70239: IFFALSE 70422
// begin nat := GetNation ( i ) ;
70241: LD_ADDR_VAR 0 7
70245: PUSH
70246: LD_VAR 0 4
70250: PPUSH
70251: CALL_OW 248
70255: ST_TO_ADDR
// weapon := 0 ;
70256: LD_ADDR_VAR 0 8
70260: PUSH
70261: LD_INT 0
70263: ST_TO_ADDR
// if not nat then
70264: LD_VAR 0 7
70268: NOT
70269: IFFALSE 70273
// continue ;
70271: GO 70238
// for j in list [ nat ] do
70273: LD_ADDR_VAR 0 5
70277: PUSH
70278: LD_VAR 0 10
70282: PUSH
70283: LD_VAR 0 7
70287: ARRAY
70288: PUSH
70289: FOR_IN
70290: IFFALSE 70331
// if GetBWeapon ( i ) = j [ 1 ] then
70292: LD_VAR 0 4
70296: PPUSH
70297: CALL_OW 269
70301: PUSH
70302: LD_VAR 0 5
70306: PUSH
70307: LD_INT 1
70309: ARRAY
70310: EQUAL
70311: IFFALSE 70329
// begin weapon := j [ 2 ] ;
70313: LD_ADDR_VAR 0 8
70317: PUSH
70318: LD_VAR 0 5
70322: PUSH
70323: LD_INT 2
70325: ARRAY
70326: ST_TO_ADDR
// break ;
70327: GO 70331
// end ;
70329: GO 70289
70331: POP
70332: POP
// if not weapon then
70333: LD_VAR 0 8
70337: NOT
70338: IFFALSE 70342
// continue ;
70340: GO 70238
// for k in factories do
70342: LD_ADDR_VAR 0 6
70346: PUSH
70347: LD_VAR 0 2
70351: PUSH
70352: FOR_IN
70353: IFFALSE 70418
// begin weapons := AvailableWeaponList ( k ) ;
70355: LD_ADDR_VAR 0 9
70359: PUSH
70360: LD_VAR 0 6
70364: PPUSH
70365: CALL_OW 478
70369: ST_TO_ADDR
// if not weapons then
70370: LD_VAR 0 9
70374: NOT
70375: IFFALSE 70379
// continue ;
70377: GO 70352
// if weapon in weapons then
70379: LD_VAR 0 8
70383: PUSH
70384: LD_VAR 0 9
70388: IN
70389: IFFALSE 70416
// begin result := [ i , weapon ] ;
70391: LD_ADDR_VAR 0 3
70395: PUSH
70396: LD_VAR 0 4
70400: PUSH
70401: LD_VAR 0 8
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: ST_TO_ADDR
// exit ;
70410: POP
70411: POP
70412: POP
70413: POP
70414: GO 70424
// end ; end ;
70416: GO 70352
70418: POP
70419: POP
// end ;
70420: GO 70238
70422: POP
70423: POP
// end ;
70424: LD_VAR 0 3
70428: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70429: LD_INT 0
70431: PPUSH
// if not side or side > 8 then
70432: LD_VAR 0 3
70436: NOT
70437: PUSH
70438: LD_VAR 0 3
70442: PUSH
70443: LD_INT 8
70445: GREATER
70446: OR
70447: IFFALSE 70451
// exit ;
70449: GO 70510
// if not range then
70451: LD_VAR 0 4
70455: NOT
70456: IFFALSE 70467
// range := - 12 ;
70458: LD_ADDR_VAR 0 4
70462: PUSH
70463: LD_INT 12
70465: NEG
70466: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70467: LD_VAR 0 1
70471: PPUSH
70472: LD_VAR 0 2
70476: PPUSH
70477: LD_VAR 0 3
70481: PPUSH
70482: LD_VAR 0 4
70486: PPUSH
70487: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70491: LD_VAR 0 1
70495: PPUSH
70496: LD_VAR 0 2
70500: PPUSH
70501: LD_VAR 0 3
70505: PPUSH
70506: CALL_OW 331
// end ;
70510: LD_VAR 0 5
70514: RET
// export function Video ( mode ) ; begin
70515: LD_INT 0
70517: PPUSH
// ingame_video = mode ;
70518: LD_ADDR_OWVAR 52
70522: PUSH
70523: LD_VAR 0 1
70527: ST_TO_ADDR
// interface_hidden = mode ;
70528: LD_ADDR_OWVAR 54
70532: PUSH
70533: LD_VAR 0 1
70537: ST_TO_ADDR
// end ;
70538: LD_VAR 0 2
70542: RET
// export function Join ( array , element ) ; begin
70543: LD_INT 0
70545: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70546: LD_ADDR_VAR 0 3
70550: PUSH
70551: LD_VAR 0 1
70555: PPUSH
70556: LD_VAR 0 1
70560: PUSH
70561: LD_INT 1
70563: PLUS
70564: PPUSH
70565: LD_VAR 0 2
70569: PPUSH
70570: CALL_OW 1
70574: ST_TO_ADDR
// end ;
70575: LD_VAR 0 3
70579: RET
// export function JoinUnion ( array , element ) ; begin
70580: LD_INT 0
70582: PPUSH
// result := array union element ;
70583: LD_ADDR_VAR 0 3
70587: PUSH
70588: LD_VAR 0 1
70592: PUSH
70593: LD_VAR 0 2
70597: UNION
70598: ST_TO_ADDR
// end ;
70599: LD_VAR 0 3
70603: RET
// export function GetBehemoths ( side ) ; begin
70604: LD_INT 0
70606: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70607: LD_ADDR_VAR 0 2
70611: PUSH
70612: LD_INT 22
70614: PUSH
70615: LD_VAR 0 1
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 31
70626: PUSH
70627: LD_INT 25
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PPUSH
70638: CALL_OW 69
70642: ST_TO_ADDR
// end ;
70643: LD_VAR 0 2
70647: RET
// export function Shuffle ( array ) ; var i , index ; begin
70648: LD_INT 0
70650: PPUSH
70651: PPUSH
70652: PPUSH
// result := [ ] ;
70653: LD_ADDR_VAR 0 2
70657: PUSH
70658: EMPTY
70659: ST_TO_ADDR
// if not array then
70660: LD_VAR 0 1
70664: NOT
70665: IFFALSE 70669
// exit ;
70667: GO 70768
// Randomize ;
70669: CALL_OW 10
// for i = array downto 1 do
70673: LD_ADDR_VAR 0 3
70677: PUSH
70678: DOUBLE
70679: LD_VAR 0 1
70683: INC
70684: ST_TO_ADDR
70685: LD_INT 1
70687: PUSH
70688: FOR_DOWNTO
70689: IFFALSE 70766
// begin index := rand ( 1 , array ) ;
70691: LD_ADDR_VAR 0 4
70695: PUSH
70696: LD_INT 1
70698: PPUSH
70699: LD_VAR 0 1
70703: PPUSH
70704: CALL_OW 12
70708: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70709: LD_ADDR_VAR 0 2
70713: PUSH
70714: LD_VAR 0 2
70718: PPUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_INT 1
70726: PLUS
70727: PPUSH
70728: LD_VAR 0 1
70732: PUSH
70733: LD_VAR 0 4
70737: ARRAY
70738: PPUSH
70739: CALL_OW 2
70743: ST_TO_ADDR
// array := Delete ( array , index ) ;
70744: LD_ADDR_VAR 0 1
70748: PUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: LD_VAR 0 4
70758: PPUSH
70759: CALL_OW 3
70763: ST_TO_ADDR
// end ;
70764: GO 70688
70766: POP
70767: POP
// end ;
70768: LD_VAR 0 2
70772: RET
// export function GetBaseMaterials ( base ) ; begin
70773: LD_INT 0
70775: PPUSH
// result := [ 0 , 0 , 0 ] ;
70776: LD_ADDR_VAR 0 2
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: ST_TO_ADDR
// if not base then
70795: LD_VAR 0 1
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70853
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70804: LD_ADDR_VAR 0 2
70808: PUSH
70809: LD_VAR 0 1
70813: PPUSH
70814: LD_INT 1
70816: PPUSH
70817: CALL_OW 275
70821: PUSH
70822: LD_VAR 0 1
70826: PPUSH
70827: LD_INT 2
70829: PPUSH
70830: CALL_OW 275
70834: PUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: LD_INT 3
70842: PPUSH
70843: CALL_OW 275
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: LIST
70852: ST_TO_ADDR
// end ;
70853: LD_VAR 0 2
70857: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70858: LD_INT 0
70860: PPUSH
70861: PPUSH
// result := array ;
70862: LD_ADDR_VAR 0 3
70866: PUSH
70867: LD_VAR 0 1
70871: ST_TO_ADDR
// if size >= result then
70872: LD_VAR 0 2
70876: PUSH
70877: LD_VAR 0 3
70881: GREATEREQUAL
70882: IFFALSE 70886
// exit ;
70884: GO 70936
// if size then
70886: LD_VAR 0 2
70890: IFFALSE 70936
// for i := array downto size do
70892: LD_ADDR_VAR 0 4
70896: PUSH
70897: DOUBLE
70898: LD_VAR 0 1
70902: INC
70903: ST_TO_ADDR
70904: LD_VAR 0 2
70908: PUSH
70909: FOR_DOWNTO
70910: IFFALSE 70934
// result := Delete ( result , result ) ;
70912: LD_ADDR_VAR 0 3
70916: PUSH
70917: LD_VAR 0 3
70921: PPUSH
70922: LD_VAR 0 3
70926: PPUSH
70927: CALL_OW 3
70931: ST_TO_ADDR
70932: GO 70909
70934: POP
70935: POP
// end ;
70936: LD_VAR 0 3
70940: RET
// export function ComExit ( unit ) ; var tmp ; begin
70941: LD_INT 0
70943: PPUSH
70944: PPUSH
// if not IsInUnit ( unit ) then
70945: LD_VAR 0 1
70949: PPUSH
70950: CALL_OW 310
70954: NOT
70955: IFFALSE 70959
// exit ;
70957: GO 71019
// tmp := IsInUnit ( unit ) ;
70959: LD_ADDR_VAR 0 3
70963: PUSH
70964: LD_VAR 0 1
70968: PPUSH
70969: CALL_OW 310
70973: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70974: LD_VAR 0 3
70978: PPUSH
70979: CALL_OW 247
70983: PUSH
70984: LD_INT 2
70986: EQUAL
70987: IFFALSE 71000
// ComExitVehicle ( unit ) else
70989: LD_VAR 0 1
70993: PPUSH
70994: CALL_OW 121
70998: GO 71009
// ComExitBuilding ( unit ) ;
71000: LD_VAR 0 1
71004: PPUSH
71005: CALL_OW 122
// result := tmp ;
71009: LD_ADDR_VAR 0 2
71013: PUSH
71014: LD_VAR 0 3
71018: ST_TO_ADDR
// end ;
71019: LD_VAR 0 2
71023: RET
// export function ComExitAll ( units ) ; var i ; begin
71024: LD_INT 0
71026: PPUSH
71027: PPUSH
// if not units then
71028: LD_VAR 0 1
71032: NOT
71033: IFFALSE 71037
// exit ;
71035: GO 71063
// for i in units do
71037: LD_ADDR_VAR 0 3
71041: PUSH
71042: LD_VAR 0 1
71046: PUSH
71047: FOR_IN
71048: IFFALSE 71061
// ComExit ( i ) ;
71050: LD_VAR 0 3
71054: PPUSH
71055: CALL 70941 0 1
71059: GO 71047
71061: POP
71062: POP
// end ;
71063: LD_VAR 0 2
71067: RET
// export function ResetHc ; begin
71068: LD_INT 0
71070: PPUSH
// InitHc ;
71071: CALL_OW 19
// hc_importance := 0 ;
71075: LD_ADDR_OWVAR 32
71079: PUSH
71080: LD_INT 0
71082: ST_TO_ADDR
// end ;
71083: LD_VAR 0 1
71087: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71088: LD_INT 0
71090: PPUSH
71091: PPUSH
71092: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71093: LD_ADDR_VAR 0 6
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_VAR 0 3
71107: PLUS
71108: PUSH
71109: LD_INT 2
71111: DIV
71112: ST_TO_ADDR
// if _x < 0 then
71113: LD_VAR 0 6
71117: PUSH
71118: LD_INT 0
71120: LESS
71121: IFFALSE 71138
// _x := _x * - 1 ;
71123: LD_ADDR_VAR 0 6
71127: PUSH
71128: LD_VAR 0 6
71132: PUSH
71133: LD_INT 1
71135: NEG
71136: MUL
71137: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71138: LD_ADDR_VAR 0 7
71142: PUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_VAR 0 4
71152: PLUS
71153: PUSH
71154: LD_INT 2
71156: DIV
71157: ST_TO_ADDR
// if _y < 0 then
71158: LD_VAR 0 7
71162: PUSH
71163: LD_INT 0
71165: LESS
71166: IFFALSE 71183
// _y := _y * - 1 ;
71168: LD_ADDR_VAR 0 7
71172: PUSH
71173: LD_VAR 0 7
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: MUL
71182: ST_TO_ADDR
// result := [ _x , _y ] ;
71183: LD_ADDR_VAR 0 5
71187: PUSH
71188: LD_VAR 0 6
71192: PUSH
71193: LD_VAR 0 7
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: ST_TO_ADDR
// end ;
71202: LD_VAR 0 5
71206: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71207: LD_INT 0
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
// task := GetTaskList ( unit ) ;
71213: LD_ADDR_VAR 0 7
71217: PUSH
71218: LD_VAR 0 1
71222: PPUSH
71223: CALL_OW 437
71227: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71228: LD_VAR 0 7
71232: NOT
71233: PUSH
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: CALL_OW 308
71248: NOT
71249: AND
71250: IFFALSE 71254
// exit ;
71252: GO 71372
// if IsInArea ( unit , area ) then
71254: LD_VAR 0 1
71258: PPUSH
71259: LD_VAR 0 2
71263: PPUSH
71264: CALL_OW 308
71268: IFFALSE 71286
// begin ComMoveToArea ( unit , goAway ) ;
71270: LD_VAR 0 1
71274: PPUSH
71275: LD_VAR 0 3
71279: PPUSH
71280: CALL_OW 113
// exit ;
71284: GO 71372
// end ; if task [ 1 ] [ 1 ] <> M then
71286: LD_VAR 0 7
71290: PUSH
71291: LD_INT 1
71293: ARRAY
71294: PUSH
71295: LD_INT 1
71297: ARRAY
71298: PUSH
71299: LD_STRING M
71301: NONEQUAL
71302: IFFALSE 71306
// exit ;
71304: GO 71372
// x := task [ 1 ] [ 2 ] ;
71306: LD_ADDR_VAR 0 5
71310: PUSH
71311: LD_VAR 0 7
71315: PUSH
71316: LD_INT 1
71318: ARRAY
71319: PUSH
71320: LD_INT 2
71322: ARRAY
71323: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71324: LD_ADDR_VAR 0 6
71328: PUSH
71329: LD_VAR 0 7
71333: PUSH
71334: LD_INT 1
71336: ARRAY
71337: PUSH
71338: LD_INT 3
71340: ARRAY
71341: ST_TO_ADDR
// if InArea ( x , y , area ) then
71342: LD_VAR 0 5
71346: PPUSH
71347: LD_VAR 0 6
71351: PPUSH
71352: LD_VAR 0 2
71356: PPUSH
71357: CALL_OW 309
71361: IFFALSE 71372
// ComStop ( unit ) ;
71363: LD_VAR 0 1
71367: PPUSH
71368: CALL_OW 141
// end ;
71372: LD_VAR 0 4
71376: RET
// export function Abs ( value ) ; begin
71377: LD_INT 0
71379: PPUSH
// result := value ;
71380: LD_ADDR_VAR 0 2
71384: PUSH
71385: LD_VAR 0 1
71389: ST_TO_ADDR
// if value < 0 then
71390: LD_VAR 0 1
71394: PUSH
71395: LD_INT 0
71397: LESS
71398: IFFALSE 71415
// result := value * - 1 ;
71400: LD_ADDR_VAR 0 2
71404: PUSH
71405: LD_VAR 0 1
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: MUL
71414: ST_TO_ADDR
// end ;
71415: LD_VAR 0 2
71419: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71420: LD_INT 0
71422: PPUSH
71423: PPUSH
71424: PPUSH
71425: PPUSH
71426: PPUSH
71427: PPUSH
71428: PPUSH
71429: PPUSH
// if not unit or not building then
71430: LD_VAR 0 1
71434: NOT
71435: PUSH
71436: LD_VAR 0 2
71440: NOT
71441: OR
71442: IFFALSE 71446
// exit ;
71444: GO 71672
// x := GetX ( building ) ;
71446: LD_ADDR_VAR 0 4
71450: PUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 250
71460: ST_TO_ADDR
// y := GetY ( building ) ;
71461: LD_ADDR_VAR 0 6
71465: PUSH
71466: LD_VAR 0 2
71470: PPUSH
71471: CALL_OW 251
71475: ST_TO_ADDR
// d := GetDir ( building ) ;
71476: LD_ADDR_VAR 0 8
71480: PUSH
71481: LD_VAR 0 2
71485: PPUSH
71486: CALL_OW 254
71490: ST_TO_ADDR
// r := 4 ;
71491: LD_ADDR_VAR 0 9
71495: PUSH
71496: LD_INT 4
71498: ST_TO_ADDR
// for i := 1 to 5 do
71499: LD_ADDR_VAR 0 10
71503: PUSH
71504: DOUBLE
71505: LD_INT 1
71507: DEC
71508: ST_TO_ADDR
71509: LD_INT 5
71511: PUSH
71512: FOR_TO
71513: IFFALSE 71670
// begin _x := ShiftX ( x , d , r + i ) ;
71515: LD_ADDR_VAR 0 5
71519: PUSH
71520: LD_VAR 0 4
71524: PPUSH
71525: LD_VAR 0 8
71529: PPUSH
71530: LD_VAR 0 9
71534: PUSH
71535: LD_VAR 0 10
71539: PLUS
71540: PPUSH
71541: CALL_OW 272
71545: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71546: LD_ADDR_VAR 0 7
71550: PUSH
71551: LD_VAR 0 6
71555: PPUSH
71556: LD_VAR 0 8
71560: PPUSH
71561: LD_VAR 0 9
71565: PUSH
71566: LD_VAR 0 10
71570: PLUS
71571: PPUSH
71572: CALL_OW 273
71576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71577: LD_VAR 0 5
71581: PPUSH
71582: LD_VAR 0 7
71586: PPUSH
71587: CALL_OW 488
71591: PUSH
71592: LD_VAR 0 5
71596: PPUSH
71597: LD_VAR 0 7
71601: PPUSH
71602: CALL_OW 428
71606: PPUSH
71607: CALL_OW 247
71611: PUSH
71612: LD_INT 3
71614: PUSH
71615: LD_INT 2
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: IN
71622: NOT
71623: AND
71624: IFFALSE 71668
// begin ComMoveXY ( unit , _x , _y ) ;
71626: LD_VAR 0 1
71630: PPUSH
71631: LD_VAR 0 5
71635: PPUSH
71636: LD_VAR 0 7
71640: PPUSH
71641: CALL_OW 111
// result := [ _x , _y ] ;
71645: LD_ADDR_VAR 0 3
71649: PUSH
71650: LD_VAR 0 5
71654: PUSH
71655: LD_VAR 0 7
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: ST_TO_ADDR
// exit ;
71664: POP
71665: POP
71666: GO 71672
// end ; end ;
71668: GO 71512
71670: POP
71671: POP
// end ;
71672: LD_VAR 0 3
71676: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71677: LD_INT 0
71679: PPUSH
71680: PPUSH
71681: PPUSH
// result := 0 ;
71682: LD_ADDR_VAR 0 3
71686: PUSH
71687: LD_INT 0
71689: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71690: LD_VAR 0 1
71694: PUSH
71695: LD_INT 0
71697: LESS
71698: PUSH
71699: LD_VAR 0 1
71703: PUSH
71704: LD_INT 8
71706: GREATER
71707: OR
71708: PUSH
71709: LD_VAR 0 2
71713: PUSH
71714: LD_INT 0
71716: LESS
71717: OR
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: LD_INT 8
71726: GREATER
71727: OR
71728: IFFALSE 71732
// exit ;
71730: GO 71807
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71732: LD_ADDR_VAR 0 4
71736: PUSH
71737: LD_INT 22
71739: PUSH
71740: LD_VAR 0 2
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PPUSH
71749: CALL_OW 69
71753: PUSH
71754: FOR_IN
71755: IFFALSE 71805
// begin un := UnitShoot ( i ) ;
71757: LD_ADDR_VAR 0 5
71761: PUSH
71762: LD_VAR 0 4
71766: PPUSH
71767: CALL_OW 504
71771: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71772: LD_VAR 0 5
71776: PPUSH
71777: CALL_OW 255
71781: PUSH
71782: LD_VAR 0 1
71786: EQUAL
71787: IFFALSE 71803
// begin result := un ;
71789: LD_ADDR_VAR 0 3
71793: PUSH
71794: LD_VAR 0 5
71798: ST_TO_ADDR
// exit ;
71799: POP
71800: POP
71801: GO 71807
// end ; end ;
71803: GO 71754
71805: POP
71806: POP
// end ;
71807: LD_VAR 0 3
71811: RET
// export function GetCargoBay ( units ) ; begin
71812: LD_INT 0
71814: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 1
71824: PPUSH
71825: LD_INT 2
71827: PUSH
71828: LD_INT 34
71830: PUSH
71831: LD_INT 12
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 34
71840: PUSH
71841: LD_INT 51
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 34
71850: PUSH
71851: LD_INT 32
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 34
71860: PUSH
71861: LD_INT 89
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: PPUSH
71875: CALL_OW 72
71879: ST_TO_ADDR
// end ;
71880: LD_VAR 0 2
71884: RET
// export function Negate ( value ) ; begin
71885: LD_INT 0
71887: PPUSH
// result := not value ;
71888: LD_ADDR_VAR 0 2
71892: PUSH
71893: LD_VAR 0 1
71897: NOT
71898: ST_TO_ADDR
// end ;
71899: LD_VAR 0 2
71903: RET
// export function Inc ( value ) ; begin
71904: LD_INT 0
71906: PPUSH
// result := value + 1 ;
71907: LD_ADDR_VAR 0 2
71911: PUSH
71912: LD_VAR 0 1
71916: PUSH
71917: LD_INT 1
71919: PLUS
71920: ST_TO_ADDR
// end ;
71921: LD_VAR 0 2
71925: RET
// export function Dec ( value ) ; begin
71926: LD_INT 0
71928: PPUSH
// result := value - 1 ;
71929: LD_ADDR_VAR 0 2
71933: PUSH
71934: LD_VAR 0 1
71938: PUSH
71939: LD_INT 1
71941: MINUS
71942: ST_TO_ADDR
// end ;
71943: LD_VAR 0 2
71947: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71948: LD_INT 0
71950: PPUSH
71951: PPUSH
71952: PPUSH
71953: PPUSH
71954: PPUSH
71955: PPUSH
71956: PPUSH
71957: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71958: LD_VAR 0 1
71962: PPUSH
71963: LD_VAR 0 2
71967: PPUSH
71968: CALL_OW 488
71972: NOT
71973: PUSH
71974: LD_VAR 0 3
71978: PPUSH
71979: LD_VAR 0 4
71983: PPUSH
71984: CALL_OW 488
71988: NOT
71989: OR
71990: IFFALSE 72003
// begin result := - 1 ;
71992: LD_ADDR_VAR 0 5
71996: PUSH
71997: LD_INT 1
71999: NEG
72000: ST_TO_ADDR
// exit ;
72001: GO 72238
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72003: LD_ADDR_VAR 0 12
72007: PUSH
72008: LD_VAR 0 1
72012: PPUSH
72013: LD_VAR 0 2
72017: PPUSH
72018: LD_VAR 0 3
72022: PPUSH
72023: LD_VAR 0 4
72027: PPUSH
72028: CALL 71088 0 4
72032: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72033: LD_ADDR_VAR 0 11
72037: PUSH
72038: LD_VAR 0 1
72042: PPUSH
72043: LD_VAR 0 2
72047: PPUSH
72048: LD_VAR 0 12
72052: PUSH
72053: LD_INT 1
72055: ARRAY
72056: PPUSH
72057: LD_VAR 0 12
72061: PUSH
72062: LD_INT 2
72064: ARRAY
72065: PPUSH
72066: CALL_OW 298
72070: ST_TO_ADDR
// distance := 9999 ;
72071: LD_ADDR_VAR 0 10
72075: PUSH
72076: LD_INT 9999
72078: ST_TO_ADDR
// for i := 0 to 5 do
72079: LD_ADDR_VAR 0 6
72083: PUSH
72084: DOUBLE
72085: LD_INT 0
72087: DEC
72088: ST_TO_ADDR
72089: LD_INT 5
72091: PUSH
72092: FOR_TO
72093: IFFALSE 72236
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72095: LD_ADDR_VAR 0 7
72099: PUSH
72100: LD_VAR 0 1
72104: PPUSH
72105: LD_VAR 0 6
72109: PPUSH
72110: LD_VAR 0 11
72114: PPUSH
72115: CALL_OW 272
72119: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72120: LD_ADDR_VAR 0 8
72124: PUSH
72125: LD_VAR 0 2
72129: PPUSH
72130: LD_VAR 0 6
72134: PPUSH
72135: LD_VAR 0 11
72139: PPUSH
72140: CALL_OW 273
72144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72145: LD_VAR 0 7
72149: PPUSH
72150: LD_VAR 0 8
72154: PPUSH
72155: CALL_OW 488
72159: NOT
72160: IFFALSE 72164
// continue ;
72162: GO 72092
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72164: LD_ADDR_VAR 0 9
72168: PUSH
72169: LD_VAR 0 12
72173: PUSH
72174: LD_INT 1
72176: ARRAY
72177: PPUSH
72178: LD_VAR 0 12
72182: PUSH
72183: LD_INT 2
72185: ARRAY
72186: PPUSH
72187: LD_VAR 0 7
72191: PPUSH
72192: LD_VAR 0 8
72196: PPUSH
72197: CALL_OW 298
72201: ST_TO_ADDR
// if tmp < distance then
72202: LD_VAR 0 9
72206: PUSH
72207: LD_VAR 0 10
72211: LESS
72212: IFFALSE 72234
// begin result := i ;
72214: LD_ADDR_VAR 0 5
72218: PUSH
72219: LD_VAR 0 6
72223: ST_TO_ADDR
// distance := tmp ;
72224: LD_ADDR_VAR 0 10
72228: PUSH
72229: LD_VAR 0 9
72233: ST_TO_ADDR
// end ; end ;
72234: GO 72092
72236: POP
72237: POP
// end ;
72238: LD_VAR 0 5
72242: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72243: LD_INT 0
72245: PPUSH
72246: PPUSH
// if not driver or not IsInUnit ( driver ) then
72247: LD_VAR 0 1
72251: NOT
72252: PUSH
72253: LD_VAR 0 1
72257: PPUSH
72258: CALL_OW 310
72262: NOT
72263: OR
72264: IFFALSE 72268
// exit ;
72266: GO 72358
// vehicle := IsInUnit ( driver ) ;
72268: LD_ADDR_VAR 0 3
72272: PUSH
72273: LD_VAR 0 1
72277: PPUSH
72278: CALL_OW 310
72282: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72283: LD_VAR 0 1
72287: PPUSH
72288: LD_STRING \
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: LD_INT 0
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: LD_INT 0
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: PUSH
72318: LD_STRING E
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: LD_VAR 0 3
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PPUSH
72354: CALL_OW 446
// end ;
72358: LD_VAR 0 2
72362: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72363: LD_INT 0
72365: PPUSH
72366: PPUSH
// if not driver or not IsInUnit ( driver ) then
72367: LD_VAR 0 1
72371: NOT
72372: PUSH
72373: LD_VAR 0 1
72377: PPUSH
72378: CALL_OW 310
72382: NOT
72383: OR
72384: IFFALSE 72388
// exit ;
72386: GO 72478
// vehicle := IsInUnit ( driver ) ;
72388: LD_ADDR_VAR 0 3
72392: PUSH
72393: LD_VAR 0 1
72397: PPUSH
72398: CALL_OW 310
72402: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72403: LD_VAR 0 1
72407: PPUSH
72408: LD_STRING \
72410: PUSH
72411: LD_INT 0
72413: PUSH
72414: LD_INT 0
72416: PUSH
72417: LD_INT 0
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: LD_INT 0
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: PUSH
72438: LD_STRING E
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 0
72446: PUSH
72447: LD_VAR 0 3
72451: PUSH
72452: LD_INT 0
72454: PUSH
72455: LD_INT 0
72457: PUSH
72458: LD_INT 0
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PPUSH
72474: CALL_OW 447
// end ;
72478: LD_VAR 0 2
72482: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72483: LD_INT 0
72485: PPUSH
72486: PPUSH
72487: PPUSH
// tmp := [ ] ;
72488: LD_ADDR_VAR 0 5
72492: PUSH
72493: EMPTY
72494: ST_TO_ADDR
// for i in units do
72495: LD_ADDR_VAR 0 4
72499: PUSH
72500: LD_VAR 0 1
72504: PUSH
72505: FOR_IN
72506: IFFALSE 72544
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72508: LD_ADDR_VAR 0 5
72512: PUSH
72513: LD_VAR 0 5
72517: PPUSH
72518: LD_VAR 0 5
72522: PUSH
72523: LD_INT 1
72525: PLUS
72526: PPUSH
72527: LD_VAR 0 4
72531: PPUSH
72532: CALL_OW 256
72536: PPUSH
72537: CALL_OW 2
72541: ST_TO_ADDR
72542: GO 72505
72544: POP
72545: POP
// if not tmp then
72546: LD_VAR 0 5
72550: NOT
72551: IFFALSE 72555
// exit ;
72553: GO 72603
// if asc then
72555: LD_VAR 0 2
72559: IFFALSE 72583
// result := SortListByListAsc ( units , tmp ) else
72561: LD_ADDR_VAR 0 3
72565: PUSH
72566: LD_VAR 0 1
72570: PPUSH
72571: LD_VAR 0 5
72575: PPUSH
72576: CALL_OW 76
72580: ST_TO_ADDR
72581: GO 72603
// result := SortListByListDesc ( units , tmp ) ;
72583: LD_ADDR_VAR 0 3
72587: PUSH
72588: LD_VAR 0 1
72592: PPUSH
72593: LD_VAR 0 5
72597: PPUSH
72598: CALL_OW 77
72602: ST_TO_ADDR
// end ;
72603: LD_VAR 0 3
72607: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72608: LD_INT 0
72610: PPUSH
72611: PPUSH
// task := GetTaskList ( mech ) ;
72612: LD_ADDR_VAR 0 4
72616: PUSH
72617: LD_VAR 0 1
72621: PPUSH
72622: CALL_OW 437
72626: ST_TO_ADDR
// if not task then
72627: LD_VAR 0 4
72631: NOT
72632: IFFALSE 72636
// exit ;
72634: GO 72678
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72636: LD_ADDR_VAR 0 3
72640: PUSH
72641: LD_VAR 0 4
72645: PUSH
72646: LD_INT 1
72648: ARRAY
72649: PUSH
72650: LD_INT 1
72652: ARRAY
72653: PUSH
72654: LD_STRING r
72656: EQUAL
72657: PUSH
72658: LD_VAR 0 4
72662: PUSH
72663: LD_INT 1
72665: ARRAY
72666: PUSH
72667: LD_INT 4
72669: ARRAY
72670: PUSH
72671: LD_VAR 0 2
72675: EQUAL
72676: AND
72677: ST_TO_ADDR
// end ;
72678: LD_VAR 0 3
72682: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72683: LD_INT 0
72685: PPUSH
// SetDir ( unit , d ) ;
72686: LD_VAR 0 1
72690: PPUSH
72691: LD_VAR 0 4
72695: PPUSH
72696: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72700: LD_ADDR_VAR 0 6
72704: PUSH
72705: LD_VAR 0 1
72709: PPUSH
72710: LD_VAR 0 2
72714: PPUSH
72715: LD_VAR 0 3
72719: PPUSH
72720: LD_VAR 0 5
72724: PPUSH
72725: CALL_OW 48
72729: ST_TO_ADDR
// end ;
72730: LD_VAR 0 6
72734: RET
// export function ToNaturalNumber ( number ) ; begin
72735: LD_INT 0
72737: PPUSH
// result := number div 1 ;
72738: LD_ADDR_VAR 0 2
72742: PUSH
72743: LD_VAR 0 1
72747: PUSH
72748: LD_INT 1
72750: DIV
72751: ST_TO_ADDR
// if number < 0 then
72752: LD_VAR 0 1
72756: PUSH
72757: LD_INT 0
72759: LESS
72760: IFFALSE 72770
// result := 0 ;
72762: LD_ADDR_VAR 0 2
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
// end ;
72770: LD_VAR 0 2
72774: RET
// export function SortByClass ( units , class ) ; var un ; begin
72775: LD_INT 0
72777: PPUSH
72778: PPUSH
// if not units or not class then
72779: LD_VAR 0 1
72783: NOT
72784: PUSH
72785: LD_VAR 0 2
72789: NOT
72790: OR
72791: IFFALSE 72795
// exit ;
72793: GO 72890
// result := [ ] ;
72795: LD_ADDR_VAR 0 3
72799: PUSH
72800: EMPTY
72801: ST_TO_ADDR
// for un in units do
72802: LD_ADDR_VAR 0 4
72806: PUSH
72807: LD_VAR 0 1
72811: PUSH
72812: FOR_IN
72813: IFFALSE 72888
// if GetClass ( un ) = class then
72815: LD_VAR 0 4
72819: PPUSH
72820: CALL_OW 257
72824: PUSH
72825: LD_VAR 0 2
72829: EQUAL
72830: IFFALSE 72857
// result := Insert ( result , 1 , un ) else
72832: LD_ADDR_VAR 0 3
72836: PUSH
72837: LD_VAR 0 3
72841: PPUSH
72842: LD_INT 1
72844: PPUSH
72845: LD_VAR 0 4
72849: PPUSH
72850: CALL_OW 2
72854: ST_TO_ADDR
72855: GO 72886
// result := Replace ( result , result + 1 , un ) ;
72857: LD_ADDR_VAR 0 3
72861: PUSH
72862: LD_VAR 0 3
72866: PPUSH
72867: LD_VAR 0 3
72871: PUSH
72872: LD_INT 1
72874: PLUS
72875: PPUSH
72876: LD_VAR 0 4
72880: PPUSH
72881: CALL_OW 1
72885: ST_TO_ADDR
72886: GO 72812
72888: POP
72889: POP
// end ;
72890: LD_VAR 0 3
72894: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72895: LD_INT 0
72897: PPUSH
72898: PPUSH
72899: PPUSH
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
// result := [ ] ;
72904: LD_ADDR_VAR 0 4
72908: PUSH
72909: EMPTY
72910: ST_TO_ADDR
// if x - r < 0 then
72911: LD_VAR 0 1
72915: PUSH
72916: LD_VAR 0 3
72920: MINUS
72921: PUSH
72922: LD_INT 0
72924: LESS
72925: IFFALSE 72937
// min_x := 0 else
72927: LD_ADDR_VAR 0 8
72931: PUSH
72932: LD_INT 0
72934: ST_TO_ADDR
72935: GO 72953
// min_x := x - r ;
72937: LD_ADDR_VAR 0 8
72941: PUSH
72942: LD_VAR 0 1
72946: PUSH
72947: LD_VAR 0 3
72951: MINUS
72952: ST_TO_ADDR
// if y - r < 0 then
72953: LD_VAR 0 2
72957: PUSH
72958: LD_VAR 0 3
72962: MINUS
72963: PUSH
72964: LD_INT 0
72966: LESS
72967: IFFALSE 72979
// min_y := 0 else
72969: LD_ADDR_VAR 0 7
72973: PUSH
72974: LD_INT 0
72976: ST_TO_ADDR
72977: GO 72995
// min_y := y - r ;
72979: LD_ADDR_VAR 0 7
72983: PUSH
72984: LD_VAR 0 2
72988: PUSH
72989: LD_VAR 0 3
72993: MINUS
72994: ST_TO_ADDR
// max_x := x + r ;
72995: LD_ADDR_VAR 0 9
72999: PUSH
73000: LD_VAR 0 1
73004: PUSH
73005: LD_VAR 0 3
73009: PLUS
73010: ST_TO_ADDR
// max_y := y + r ;
73011: LD_ADDR_VAR 0 10
73015: PUSH
73016: LD_VAR 0 2
73020: PUSH
73021: LD_VAR 0 3
73025: PLUS
73026: ST_TO_ADDR
// for _x = min_x to max_x do
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: DOUBLE
73033: LD_VAR 0 8
73037: DEC
73038: ST_TO_ADDR
73039: LD_VAR 0 9
73043: PUSH
73044: FOR_TO
73045: IFFALSE 73146
// for _y = min_y to max_y do
73047: LD_ADDR_VAR 0 6
73051: PUSH
73052: DOUBLE
73053: LD_VAR 0 7
73057: DEC
73058: ST_TO_ADDR
73059: LD_VAR 0 10
73063: PUSH
73064: FOR_TO
73065: IFFALSE 73142
// begin if not ValidHex ( _x , _y ) then
73067: LD_VAR 0 5
73071: PPUSH
73072: LD_VAR 0 6
73076: PPUSH
73077: CALL_OW 488
73081: NOT
73082: IFFALSE 73086
// continue ;
73084: GO 73064
// if GetResourceTypeXY ( _x , _y ) then
73086: LD_VAR 0 5
73090: PPUSH
73091: LD_VAR 0 6
73095: PPUSH
73096: CALL_OW 283
73100: IFFALSE 73140
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73102: LD_ADDR_VAR 0 4
73106: PUSH
73107: LD_VAR 0 4
73111: PPUSH
73112: LD_VAR 0 4
73116: PUSH
73117: LD_INT 1
73119: PLUS
73120: PPUSH
73121: LD_VAR 0 5
73125: PUSH
73126: LD_VAR 0 6
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PPUSH
73135: CALL_OW 1
73139: ST_TO_ADDR
// end ;
73140: GO 73064
73142: POP
73143: POP
73144: GO 73044
73146: POP
73147: POP
// end ;
73148: LD_VAR 0 4
73152: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73153: LD_INT 0
73155: PPUSH
73156: PPUSH
73157: PPUSH
73158: PPUSH
73159: PPUSH
73160: PPUSH
73161: PPUSH
73162: PPUSH
// if not units then
73163: LD_VAR 0 1
73167: NOT
73168: IFFALSE 73172
// exit ;
73170: GO 73700
// result := UnitFilter ( units , [ f_ok ] ) ;
73172: LD_ADDR_VAR 0 3
73176: PUSH
73177: LD_VAR 0 1
73181: PPUSH
73182: LD_INT 50
73184: PUSH
73185: EMPTY
73186: LIST
73187: PPUSH
73188: CALL_OW 72
73192: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73193: LD_ADDR_VAR 0 8
73197: PUSH
73198: LD_VAR 0 1
73202: PUSH
73203: LD_INT 1
73205: ARRAY
73206: PPUSH
73207: CALL_OW 255
73211: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73212: LD_ADDR_VAR 0 10
73216: PUSH
73217: LD_INT 29
73219: PUSH
73220: LD_INT 91
73222: PUSH
73223: LD_INT 49
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: ST_TO_ADDR
// if not result then
73231: LD_VAR 0 3
73235: NOT
73236: IFFALSE 73240
// exit ;
73238: GO 73700
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73240: LD_ADDR_VAR 0 5
73244: PUSH
73245: LD_INT 81
73247: PUSH
73248: LD_VAR 0 8
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PPUSH
73257: CALL_OW 69
73261: ST_TO_ADDR
// for i in result do
73262: LD_ADDR_VAR 0 4
73266: PUSH
73267: LD_VAR 0 3
73271: PUSH
73272: FOR_IN
73273: IFFALSE 73698
// begin tag := GetTag ( i ) + 1 ;
73275: LD_ADDR_VAR 0 9
73279: PUSH
73280: LD_VAR 0 4
73284: PPUSH
73285: CALL_OW 110
73289: PUSH
73290: LD_INT 1
73292: PLUS
73293: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73294: LD_ADDR_VAR 0 7
73298: PUSH
73299: LD_VAR 0 4
73303: PPUSH
73304: CALL_OW 250
73308: PPUSH
73309: LD_VAR 0 4
73313: PPUSH
73314: CALL_OW 251
73318: PPUSH
73319: LD_INT 4
73321: PPUSH
73322: CALL 72895 0 3
73326: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73327: LD_VAR 0 4
73331: PPUSH
73332: CALL_OW 247
73336: PUSH
73337: LD_INT 2
73339: EQUAL
73340: PUSH
73341: LD_VAR 0 7
73345: PUSH
73346: LD_INT 2
73348: GREATER
73349: AND
73350: PUSH
73351: LD_VAR 0 4
73355: PPUSH
73356: CALL_OW 264
73360: PUSH
73361: LD_VAR 0 10
73365: IN
73366: NOT
73367: AND
73368: IFFALSE 73407
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73370: LD_VAR 0 4
73374: PPUSH
73375: LD_VAR 0 7
73379: PUSH
73380: LD_INT 1
73382: ARRAY
73383: PUSH
73384: LD_INT 1
73386: ARRAY
73387: PPUSH
73388: LD_VAR 0 7
73392: PUSH
73393: LD_INT 1
73395: ARRAY
73396: PUSH
73397: LD_INT 2
73399: ARRAY
73400: PPUSH
73401: CALL_OW 116
73405: GO 73696
// if path > tag then
73407: LD_VAR 0 2
73411: PUSH
73412: LD_VAR 0 9
73416: GREATER
73417: IFFALSE 73625
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73419: LD_ADDR_VAR 0 6
73423: PUSH
73424: LD_VAR 0 5
73428: PPUSH
73429: LD_INT 91
73431: PUSH
73432: LD_VAR 0 4
73436: PUSH
73437: LD_INT 8
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: LIST
73444: PPUSH
73445: CALL_OW 72
73449: ST_TO_ADDR
// if nearEnemy then
73450: LD_VAR 0 6
73454: IFFALSE 73523
// begin if GetWeapon ( i ) = ru_time_lapser then
73456: LD_VAR 0 4
73460: PPUSH
73461: CALL_OW 264
73465: PUSH
73466: LD_INT 49
73468: EQUAL
73469: IFFALSE 73497
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73471: LD_VAR 0 4
73475: PPUSH
73476: LD_VAR 0 6
73480: PPUSH
73481: LD_VAR 0 4
73485: PPUSH
73486: CALL_OW 74
73490: PPUSH
73491: CALL_OW 112
73495: GO 73521
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73497: LD_VAR 0 4
73501: PPUSH
73502: LD_VAR 0 6
73506: PPUSH
73507: LD_VAR 0 4
73511: PPUSH
73512: CALL_OW 74
73516: PPUSH
73517: CALL 74771 0 2
// end else
73521: GO 73623
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73523: LD_VAR 0 4
73527: PPUSH
73528: LD_VAR 0 2
73532: PUSH
73533: LD_VAR 0 9
73537: ARRAY
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PPUSH
73543: LD_VAR 0 2
73547: PUSH
73548: LD_VAR 0 9
73552: ARRAY
73553: PUSH
73554: LD_INT 2
73556: ARRAY
73557: PPUSH
73558: CALL_OW 297
73562: PUSH
73563: LD_INT 6
73565: GREATER
73566: IFFALSE 73609
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73568: LD_VAR 0 4
73572: PPUSH
73573: LD_VAR 0 2
73577: PUSH
73578: LD_VAR 0 9
73582: ARRAY
73583: PUSH
73584: LD_INT 1
73586: ARRAY
73587: PPUSH
73588: LD_VAR 0 2
73592: PUSH
73593: LD_VAR 0 9
73597: ARRAY
73598: PUSH
73599: LD_INT 2
73601: ARRAY
73602: PPUSH
73603: CALL_OW 114
73607: GO 73623
// SetTag ( i , tag ) ;
73609: LD_VAR 0 4
73613: PPUSH
73614: LD_VAR 0 9
73618: PPUSH
73619: CALL_OW 109
// end else
73623: GO 73696
// if enemy then
73625: LD_VAR 0 5
73629: IFFALSE 73696
// begin if GetWeapon ( i ) = ru_time_lapser then
73631: LD_VAR 0 4
73635: PPUSH
73636: CALL_OW 264
73640: PUSH
73641: LD_INT 49
73643: EQUAL
73644: IFFALSE 73672
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73646: LD_VAR 0 4
73650: PPUSH
73651: LD_VAR 0 5
73655: PPUSH
73656: LD_VAR 0 4
73660: PPUSH
73661: CALL_OW 74
73665: PPUSH
73666: CALL_OW 112
73670: GO 73696
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73672: LD_VAR 0 4
73676: PPUSH
73677: LD_VAR 0 5
73681: PPUSH
73682: LD_VAR 0 4
73686: PPUSH
73687: CALL_OW 74
73691: PPUSH
73692: CALL 74771 0 2
// end ; end ;
73696: GO 73272
73698: POP
73699: POP
// end ;
73700: LD_VAR 0 3
73704: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73705: LD_INT 0
73707: PPUSH
73708: PPUSH
73709: PPUSH
// if not unit or IsInUnit ( unit ) then
73710: LD_VAR 0 1
73714: NOT
73715: PUSH
73716: LD_VAR 0 1
73720: PPUSH
73721: CALL_OW 310
73725: OR
73726: IFFALSE 73730
// exit ;
73728: GO 73821
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73730: LD_ADDR_VAR 0 4
73734: PUSH
73735: LD_VAR 0 1
73739: PPUSH
73740: CALL_OW 250
73744: PPUSH
73745: LD_VAR 0 2
73749: PPUSH
73750: LD_INT 1
73752: PPUSH
73753: CALL_OW 272
73757: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73758: LD_ADDR_VAR 0 5
73762: PUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 251
73772: PPUSH
73773: LD_VAR 0 2
73777: PPUSH
73778: LD_INT 1
73780: PPUSH
73781: CALL_OW 273
73785: ST_TO_ADDR
// if ValidHex ( x , y ) then
73786: LD_VAR 0 4
73790: PPUSH
73791: LD_VAR 0 5
73795: PPUSH
73796: CALL_OW 488
73800: IFFALSE 73821
// ComTurnXY ( unit , x , y ) ;
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_VAR 0 4
73811: PPUSH
73812: LD_VAR 0 5
73816: PPUSH
73817: CALL_OW 118
// end ;
73821: LD_VAR 0 3
73825: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73826: LD_INT 0
73828: PPUSH
73829: PPUSH
// result := false ;
73830: LD_ADDR_VAR 0 3
73834: PUSH
73835: LD_INT 0
73837: ST_TO_ADDR
// if not units then
73838: LD_VAR 0 2
73842: NOT
73843: IFFALSE 73847
// exit ;
73845: GO 73892
// for i in units do
73847: LD_ADDR_VAR 0 4
73851: PUSH
73852: LD_VAR 0 2
73856: PUSH
73857: FOR_IN
73858: IFFALSE 73890
// if See ( side , i ) then
73860: LD_VAR 0 1
73864: PPUSH
73865: LD_VAR 0 4
73869: PPUSH
73870: CALL_OW 292
73874: IFFALSE 73888
// begin result := true ;
73876: LD_ADDR_VAR 0 3
73880: PUSH
73881: LD_INT 1
73883: ST_TO_ADDR
// exit ;
73884: POP
73885: POP
73886: GO 73892
// end ;
73888: GO 73857
73890: POP
73891: POP
// end ;
73892: LD_VAR 0 3
73896: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73897: LD_INT 0
73899: PPUSH
73900: PPUSH
73901: PPUSH
73902: PPUSH
// if not unit or not points then
73903: LD_VAR 0 1
73907: NOT
73908: PUSH
73909: LD_VAR 0 2
73913: NOT
73914: OR
73915: IFFALSE 73919
// exit ;
73917: GO 74009
// dist := 99999 ;
73919: LD_ADDR_VAR 0 5
73923: PUSH
73924: LD_INT 99999
73926: ST_TO_ADDR
// for i in points do
73927: LD_ADDR_VAR 0 4
73931: PUSH
73932: LD_VAR 0 2
73936: PUSH
73937: FOR_IN
73938: IFFALSE 74007
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73940: LD_ADDR_VAR 0 6
73944: PUSH
73945: LD_VAR 0 1
73949: PPUSH
73950: LD_VAR 0 4
73954: PUSH
73955: LD_INT 1
73957: ARRAY
73958: PPUSH
73959: LD_VAR 0 4
73963: PUSH
73964: LD_INT 2
73966: ARRAY
73967: PPUSH
73968: CALL_OW 297
73972: ST_TO_ADDR
// if tmpDist < dist then
73973: LD_VAR 0 6
73977: PUSH
73978: LD_VAR 0 5
73982: LESS
73983: IFFALSE 74005
// begin result := i ;
73985: LD_ADDR_VAR 0 3
73989: PUSH
73990: LD_VAR 0 4
73994: ST_TO_ADDR
// dist := tmpDist ;
73995: LD_ADDR_VAR 0 5
73999: PUSH
74000: LD_VAR 0 6
74004: ST_TO_ADDR
// end ; end ;
74005: GO 73937
74007: POP
74008: POP
// end ;
74009: LD_VAR 0 3
74013: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74014: LD_INT 0
74016: PPUSH
// uc_side := side ;
74017: LD_ADDR_OWVAR 20
74021: PUSH
74022: LD_VAR 0 1
74026: ST_TO_ADDR
// uc_nation := 3 ;
74027: LD_ADDR_OWVAR 21
74031: PUSH
74032: LD_INT 3
74034: ST_TO_ADDR
// vc_chassis := 25 ;
74035: LD_ADDR_OWVAR 37
74039: PUSH
74040: LD_INT 25
74042: ST_TO_ADDR
// vc_engine := engine_siberite ;
74043: LD_ADDR_OWVAR 39
74047: PUSH
74048: LD_INT 3
74050: ST_TO_ADDR
// vc_control := control_computer ;
74051: LD_ADDR_OWVAR 38
74055: PUSH
74056: LD_INT 3
74058: ST_TO_ADDR
// vc_weapon := 59 ;
74059: LD_ADDR_OWVAR 40
74063: PUSH
74064: LD_INT 59
74066: ST_TO_ADDR
// result := CreateVehicle ;
74067: LD_ADDR_VAR 0 5
74071: PUSH
74072: CALL_OW 45
74076: ST_TO_ADDR
// SetDir ( result , d ) ;
74077: LD_VAR 0 5
74081: PPUSH
74082: LD_VAR 0 4
74086: PPUSH
74087: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74091: LD_VAR 0 5
74095: PPUSH
74096: LD_VAR 0 2
74100: PPUSH
74101: LD_VAR 0 3
74105: PPUSH
74106: LD_INT 0
74108: PPUSH
74109: CALL_OW 48
// end ;
74113: LD_VAR 0 5
74117: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74118: LD_INT 0
74120: PPUSH
74121: PPUSH
74122: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74123: LD_ADDR_VAR 0 2
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: LD_INT 0
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74146: LD_VAR 0 1
74150: NOT
74151: PUSH
74152: LD_VAR 0 1
74156: PPUSH
74157: CALL_OW 264
74161: PUSH
74162: LD_INT 12
74164: PUSH
74165: LD_INT 51
74167: PUSH
74168: LD_INT 32
74170: PUSH
74171: LD_INT 89
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: IN
74180: NOT
74181: OR
74182: IFFALSE 74186
// exit ;
74184: GO 74284
// for i := 1 to 3 do
74186: LD_ADDR_VAR 0 3
74190: PUSH
74191: DOUBLE
74192: LD_INT 1
74194: DEC
74195: ST_TO_ADDR
74196: LD_INT 3
74198: PUSH
74199: FOR_TO
74200: IFFALSE 74282
// begin tmp := GetCargo ( cargo , i ) ;
74202: LD_ADDR_VAR 0 4
74206: PUSH
74207: LD_VAR 0 1
74211: PPUSH
74212: LD_VAR 0 3
74216: PPUSH
74217: CALL_OW 289
74221: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74222: LD_ADDR_VAR 0 2
74226: PUSH
74227: LD_VAR 0 2
74231: PPUSH
74232: LD_VAR 0 3
74236: PPUSH
74237: LD_VAR 0 4
74241: PPUSH
74242: CALL_OW 1
74246: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74247: LD_ADDR_VAR 0 2
74251: PUSH
74252: LD_VAR 0 2
74256: PPUSH
74257: LD_INT 4
74259: PPUSH
74260: LD_VAR 0 2
74264: PUSH
74265: LD_INT 4
74267: ARRAY
74268: PUSH
74269: LD_VAR 0 4
74273: PLUS
74274: PPUSH
74275: CALL_OW 1
74279: ST_TO_ADDR
// end ;
74280: GO 74199
74282: POP
74283: POP
// end ;
74284: LD_VAR 0 2
74288: RET
// export function Length ( array ) ; begin
74289: LD_INT 0
74291: PPUSH
// result := array + 0 ;
74292: LD_ADDR_VAR 0 2
74296: PUSH
74297: LD_VAR 0 1
74301: PUSH
74302: LD_INT 0
74304: PLUS
74305: ST_TO_ADDR
// end ;
74306: LD_VAR 0 2
74310: RET
// export function PrepareArray ( array ) ; begin
74311: LD_INT 0
74313: PPUSH
// result := array diff 0 ;
74314: LD_ADDR_VAR 0 2
74318: PUSH
74319: LD_VAR 0 1
74323: PUSH
74324: LD_INT 0
74326: DIFF
74327: ST_TO_ADDR
// if not result [ 1 ] then
74328: LD_VAR 0 2
74332: PUSH
74333: LD_INT 1
74335: ARRAY
74336: NOT
74337: IFFALSE 74357
// result := Delete ( result , 1 ) ;
74339: LD_ADDR_VAR 0 2
74343: PUSH
74344: LD_VAR 0 2
74348: PPUSH
74349: LD_INT 1
74351: PPUSH
74352: CALL_OW 3
74356: ST_TO_ADDR
// end ;
74357: LD_VAR 0 2
74361: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74362: LD_INT 0
74364: PPUSH
74365: PPUSH
74366: PPUSH
74367: PPUSH
// sibRocketRange := 25 ;
74368: LD_ADDR_VAR 0 6
74372: PUSH
74373: LD_INT 25
74375: ST_TO_ADDR
// result := false ;
74376: LD_ADDR_VAR 0 4
74380: PUSH
74381: LD_INT 0
74383: ST_TO_ADDR
// for i := 0 to 5 do
74384: LD_ADDR_VAR 0 5
74388: PUSH
74389: DOUBLE
74390: LD_INT 0
74392: DEC
74393: ST_TO_ADDR
74394: LD_INT 5
74396: PUSH
74397: FOR_TO
74398: IFFALSE 74465
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74400: LD_VAR 0 1
74404: PPUSH
74405: LD_VAR 0 5
74409: PPUSH
74410: LD_VAR 0 6
74414: PPUSH
74415: CALL_OW 272
74419: PPUSH
74420: LD_VAR 0 2
74424: PPUSH
74425: LD_VAR 0 5
74429: PPUSH
74430: LD_VAR 0 6
74434: PPUSH
74435: CALL_OW 273
74439: PPUSH
74440: LD_VAR 0 3
74444: PPUSH
74445: CALL_OW 309
74449: IFFALSE 74463
// begin result := true ;
74451: LD_ADDR_VAR 0 4
74455: PUSH
74456: LD_INT 1
74458: ST_TO_ADDR
// exit ;
74459: POP
74460: POP
74461: GO 74467
// end ;
74463: GO 74397
74465: POP
74466: POP
// end ;
74467: LD_VAR 0 4
74471: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74472: LD_INT 0
74474: PPUSH
74475: PPUSH
74476: PPUSH
// if btype = b_depot then
74477: LD_VAR 0 2
74481: PUSH
74482: LD_INT 0
74484: EQUAL
74485: IFFALSE 74497
// begin result := true ;
74487: LD_ADDR_VAR 0 3
74491: PUSH
74492: LD_INT 1
74494: ST_TO_ADDR
// exit ;
74495: GO 74613
// end ; pom := GetBase ( depot ) ;
74497: LD_ADDR_VAR 0 4
74501: PUSH
74502: LD_VAR 0 1
74506: PPUSH
74507: CALL_OW 274
74511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74512: LD_ADDR_VAR 0 5
74516: PUSH
74517: LD_VAR 0 2
74521: PPUSH
74522: LD_VAR 0 1
74526: PPUSH
74527: CALL_OW 248
74531: PPUSH
74532: CALL_OW 450
74536: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74537: LD_ADDR_VAR 0 3
74541: PUSH
74542: LD_VAR 0 4
74546: PPUSH
74547: LD_INT 1
74549: PPUSH
74550: CALL_OW 275
74554: PUSH
74555: LD_VAR 0 5
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: GREATEREQUAL
74564: PUSH
74565: LD_VAR 0 4
74569: PPUSH
74570: LD_INT 2
74572: PPUSH
74573: CALL_OW 275
74577: PUSH
74578: LD_VAR 0 5
74582: PUSH
74583: LD_INT 2
74585: ARRAY
74586: GREATEREQUAL
74587: AND
74588: PUSH
74589: LD_VAR 0 4
74593: PPUSH
74594: LD_INT 3
74596: PPUSH
74597: CALL_OW 275
74601: PUSH
74602: LD_VAR 0 5
74606: PUSH
74607: LD_INT 3
74609: ARRAY
74610: GREATEREQUAL
74611: AND
74612: ST_TO_ADDR
// end ;
74613: LD_VAR 0 3
74617: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74618: LD_INT 0
74620: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74621: LD_VAR 0 1
74625: PPUSH
74626: LD_VAR 0 2
74630: PPUSH
74631: LD_INT 0
74633: PPUSH
74634: LD_INT 0
74636: PPUSH
74637: LD_INT 1
74639: PPUSH
74640: LD_INT 0
74642: PPUSH
74643: CALL_OW 587
// end ;
74647: LD_VAR 0 3
74651: RET
// export function CenterOnNow ( unit ) ; begin
74652: LD_INT 0
74654: PPUSH
// result := IsInUnit ( unit ) ;
74655: LD_ADDR_VAR 0 2
74659: PUSH
74660: LD_VAR 0 1
74664: PPUSH
74665: CALL_OW 310
74669: ST_TO_ADDR
// if not result then
74670: LD_VAR 0 2
74674: NOT
74675: IFFALSE 74687
// result := unit ;
74677: LD_ADDR_VAR 0 2
74681: PUSH
74682: LD_VAR 0 1
74686: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74687: LD_VAR 0 1
74691: PPUSH
74692: CALL_OW 87
// end ;
74696: LD_VAR 0 2
74700: RET
// export function ComMoveHex ( unit , hex ) ; begin
74701: LD_INT 0
74703: PPUSH
// if not hex then
74704: LD_VAR 0 2
74708: NOT
74709: IFFALSE 74713
// exit ;
74711: GO 74766
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74713: LD_VAR 0 2
74717: PUSH
74718: LD_INT 1
74720: ARRAY
74721: PPUSH
74722: LD_VAR 0 2
74726: PUSH
74727: LD_INT 2
74729: ARRAY
74730: PPUSH
74731: CALL_OW 428
74735: IFFALSE 74739
// exit ;
74737: GO 74766
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74739: LD_VAR 0 1
74743: PPUSH
74744: LD_VAR 0 2
74748: PUSH
74749: LD_INT 1
74751: ARRAY
74752: PPUSH
74753: LD_VAR 0 2
74757: PUSH
74758: LD_INT 2
74760: ARRAY
74761: PPUSH
74762: CALL_OW 111
// end ;
74766: LD_VAR 0 3
74770: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74771: LD_INT 0
74773: PPUSH
74774: PPUSH
74775: PPUSH
// if not unit or not enemy then
74776: LD_VAR 0 1
74780: NOT
74781: PUSH
74782: LD_VAR 0 2
74786: NOT
74787: OR
74788: IFFALSE 74792
// exit ;
74790: GO 74916
// x := GetX ( enemy ) ;
74792: LD_ADDR_VAR 0 4
74796: PUSH
74797: LD_VAR 0 2
74801: PPUSH
74802: CALL_OW 250
74806: ST_TO_ADDR
// y := GetY ( enemy ) ;
74807: LD_ADDR_VAR 0 5
74811: PUSH
74812: LD_VAR 0 2
74816: PPUSH
74817: CALL_OW 251
74821: ST_TO_ADDR
// if ValidHex ( x , y ) then
74822: LD_VAR 0 4
74826: PPUSH
74827: LD_VAR 0 5
74831: PPUSH
74832: CALL_OW 488
74836: IFFALSE 74916
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74838: LD_VAR 0 2
74842: PPUSH
74843: CALL_OW 247
74847: PUSH
74848: LD_INT 3
74850: PUSH
74851: LD_INT 2
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: IN
74858: PUSH
74859: LD_VAR 0 1
74863: PPUSH
74864: CALL_OW 255
74868: PPUSH
74869: LD_VAR 0 2
74873: PPUSH
74874: CALL_OW 292
74878: OR
74879: IFFALSE 74897
// ComAttackUnit ( unit , enemy ) else
74881: LD_VAR 0 1
74885: PPUSH
74886: LD_VAR 0 2
74890: PPUSH
74891: CALL_OW 115
74895: GO 74916
// ComAgressiveMove ( unit , x , y ) ;
74897: LD_VAR 0 1
74901: PPUSH
74902: LD_VAR 0 4
74906: PPUSH
74907: LD_VAR 0 5
74911: PPUSH
74912: CALL_OW 114
// end ;
74916: LD_VAR 0 3
74920: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74921: LD_INT 0
74923: PPUSH
74924: PPUSH
74925: PPUSH
// list := AreaToList ( area , 0 ) ;
74926: LD_ADDR_VAR 0 5
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: LD_INT 0
74938: PPUSH
74939: CALL_OW 517
74943: ST_TO_ADDR
// if not list then
74944: LD_VAR 0 5
74948: NOT
74949: IFFALSE 74953
// exit ;
74951: GO 75083
// if all then
74953: LD_VAR 0 2
74957: IFFALSE 75045
// begin for i := 1 to list [ 1 ] do
74959: LD_ADDR_VAR 0 4
74963: PUSH
74964: DOUBLE
74965: LD_INT 1
74967: DEC
74968: ST_TO_ADDR
74969: LD_VAR 0 5
74973: PUSH
74974: LD_INT 1
74976: ARRAY
74977: PUSH
74978: FOR_TO
74979: IFFALSE 75041
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74981: LD_ADDR_VAR 0 3
74985: PUSH
74986: LD_VAR 0 3
74990: PPUSH
74991: LD_VAR 0 3
74995: PUSH
74996: LD_INT 1
74998: PLUS
74999: PPUSH
75000: LD_VAR 0 5
75004: PUSH
75005: LD_INT 1
75007: ARRAY
75008: PUSH
75009: LD_VAR 0 4
75013: ARRAY
75014: PUSH
75015: LD_VAR 0 5
75019: PUSH
75020: LD_INT 2
75022: ARRAY
75023: PUSH
75024: LD_VAR 0 4
75028: ARRAY
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PPUSH
75034: CALL_OW 1
75038: ST_TO_ADDR
75039: GO 74978
75041: POP
75042: POP
// exit ;
75043: GO 75083
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75045: LD_ADDR_VAR 0 3
75049: PUSH
75050: LD_VAR 0 5
75054: PUSH
75055: LD_INT 1
75057: ARRAY
75058: PUSH
75059: LD_INT 1
75061: ARRAY
75062: PUSH
75063: LD_VAR 0 5
75067: PUSH
75068: LD_INT 2
75070: ARRAY
75071: PUSH
75072: LD_INT 1
75074: ARRAY
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: EMPTY
75081: LIST
75082: ST_TO_ADDR
// end ;
75083: LD_VAR 0 3
75087: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75088: LD_INT 0
75090: PPUSH
75091: PPUSH
// list := AreaToList ( area , 0 ) ;
75092: LD_ADDR_VAR 0 4
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: LD_INT 0
75104: PPUSH
75105: CALL_OW 517
75109: ST_TO_ADDR
// if not list then
75110: LD_VAR 0 4
75114: NOT
75115: IFFALSE 75119
// exit ;
75117: GO 75160
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75119: LD_ADDR_VAR 0 3
75123: PUSH
75124: LD_VAR 0 4
75128: PUSH
75129: LD_INT 1
75131: ARRAY
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: PUSH
75137: LD_VAR 0 4
75141: PUSH
75142: LD_INT 2
75144: ARRAY
75145: PUSH
75146: LD_INT 1
75148: ARRAY
75149: PUSH
75150: LD_VAR 0 2
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: LIST
75159: ST_TO_ADDR
// end ;
75160: LD_VAR 0 3
75164: RET
// export function First ( array ) ; begin
75165: LD_INT 0
75167: PPUSH
// if not array then
75168: LD_VAR 0 1
75172: NOT
75173: IFFALSE 75177
// exit ;
75175: GO 75191
// result := array [ 1 ] ;
75177: LD_ADDR_VAR 0 2
75181: PUSH
75182: LD_VAR 0 1
75186: PUSH
75187: LD_INT 1
75189: ARRAY
75190: ST_TO_ADDR
// end ;
75191: LD_VAR 0 2
75195: RET
// export function Last ( array ) ; begin
75196: LD_INT 0
75198: PPUSH
// if not array then
75199: LD_VAR 0 1
75203: NOT
75204: IFFALSE 75208
// exit ;
75206: GO 75224
// result := array [ array ] ;
75208: LD_ADDR_VAR 0 2
75212: PUSH
75213: LD_VAR 0 1
75217: PUSH
75218: LD_VAR 0 1
75222: ARRAY
75223: ST_TO_ADDR
// end ;
75224: LD_VAR 0 2
75228: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75229: LD_INT 0
75231: PPUSH
75232: PPUSH
// result := [ ] ;
75233: LD_ADDR_VAR 0 5
75237: PUSH
75238: EMPTY
75239: ST_TO_ADDR
// if not array then
75240: LD_VAR 0 1
75244: NOT
75245: IFFALSE 75249
// exit ;
75247: GO 75361
// for i := 1 to array do
75249: LD_ADDR_VAR 0 6
75253: PUSH
75254: DOUBLE
75255: LD_INT 1
75257: DEC
75258: ST_TO_ADDR
75259: LD_VAR 0 1
75263: PUSH
75264: FOR_TO
75265: IFFALSE 75359
// if array [ i ] [ index ] = value then
75267: LD_VAR 0 1
75271: PUSH
75272: LD_VAR 0 6
75276: ARRAY
75277: PUSH
75278: LD_VAR 0 2
75282: ARRAY
75283: PUSH
75284: LD_VAR 0 3
75288: EQUAL
75289: IFFALSE 75357
// begin if indexColumn then
75291: LD_VAR 0 4
75295: IFFALSE 75331
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75297: LD_ADDR_VAR 0 5
75301: PUSH
75302: LD_VAR 0 5
75306: PPUSH
75307: LD_VAR 0 1
75311: PUSH
75312: LD_VAR 0 6
75316: ARRAY
75317: PUSH
75318: LD_VAR 0 4
75322: ARRAY
75323: PPUSH
75324: CALL 70543 0 2
75328: ST_TO_ADDR
75329: GO 75357
// result := Join ( result , array [ i ] ) ;
75331: LD_ADDR_VAR 0 5
75335: PUSH
75336: LD_VAR 0 5
75340: PPUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_VAR 0 6
75350: ARRAY
75351: PPUSH
75352: CALL 70543 0 2
75356: ST_TO_ADDR
// end ;
75357: GO 75264
75359: POP
75360: POP
// end ;
75361: LD_VAR 0 5
75365: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75366: LD_INT 0
75368: PPUSH
// if not vehicles or not parkingPoint then
75369: LD_VAR 0 1
75373: NOT
75374: PUSH
75375: LD_VAR 0 2
75379: NOT
75380: OR
75381: IFFALSE 75385
// exit ;
75383: GO 75483
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75385: LD_ADDR_VAR 0 1
75389: PUSH
75390: LD_VAR 0 1
75394: PPUSH
75395: LD_INT 50
75397: PUSH
75398: EMPTY
75399: LIST
75400: PUSH
75401: LD_INT 3
75403: PUSH
75404: LD_INT 92
75406: PUSH
75407: LD_VAR 0 2
75411: PUSH
75412: LD_INT 1
75414: ARRAY
75415: PUSH
75416: LD_VAR 0 2
75420: PUSH
75421: LD_INT 2
75423: ARRAY
75424: PUSH
75425: LD_INT 8
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PPUSH
75442: CALL_OW 72
75446: ST_TO_ADDR
// if not vehicles then
75447: LD_VAR 0 1
75451: NOT
75452: IFFALSE 75456
// exit ;
75454: GO 75483
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75456: LD_VAR 0 1
75460: PPUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 1
75468: ARRAY
75469: PPUSH
75470: LD_VAR 0 2
75474: PUSH
75475: LD_INT 2
75477: ARRAY
75478: PPUSH
75479: CALL_OW 111
// end ;
75483: LD_VAR 0 3
75487: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75488: LD_INT 0
75490: PPUSH
75491: PPUSH
75492: PPUSH
// if not side or not area then
75493: LD_VAR 0 1
75497: NOT
75498: PUSH
75499: LD_VAR 0 2
75503: NOT
75504: OR
75505: IFFALSE 75509
// exit ;
75507: GO 75628
// tmp := AreaToList ( area , 0 ) ;
75509: LD_ADDR_VAR 0 5
75513: PUSH
75514: LD_VAR 0 2
75518: PPUSH
75519: LD_INT 0
75521: PPUSH
75522: CALL_OW 517
75526: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75527: LD_ADDR_VAR 0 4
75531: PUSH
75532: DOUBLE
75533: LD_INT 1
75535: DEC
75536: ST_TO_ADDR
75537: LD_VAR 0 5
75541: PUSH
75542: LD_INT 1
75544: ARRAY
75545: PUSH
75546: FOR_TO
75547: IFFALSE 75626
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75549: LD_VAR 0 5
75553: PUSH
75554: LD_INT 1
75556: ARRAY
75557: PUSH
75558: LD_VAR 0 4
75562: ARRAY
75563: PPUSH
75564: LD_VAR 0 5
75568: PUSH
75569: LD_INT 2
75571: ARRAY
75572: PUSH
75573: LD_VAR 0 4
75577: ARRAY
75578: PPUSH
75579: CALL_OW 351
75583: IFFALSE 75624
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75585: LD_VAR 0 5
75589: PUSH
75590: LD_INT 1
75592: ARRAY
75593: PUSH
75594: LD_VAR 0 4
75598: ARRAY
75599: PPUSH
75600: LD_VAR 0 5
75604: PUSH
75605: LD_INT 2
75607: ARRAY
75608: PUSH
75609: LD_VAR 0 4
75613: ARRAY
75614: PPUSH
75615: LD_VAR 0 1
75619: PPUSH
75620: CALL_OW 244
// end ;
75624: GO 75546
75626: POP
75627: POP
// end ; end_of_file
75628: LD_VAR 0 3
75632: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75633: LD_VAR 0 1
75637: PUSH
75638: LD_INT 200
75640: DOUBLE
75641: GREATEREQUAL
75642: IFFALSE 75650
75644: LD_INT 299
75646: DOUBLE
75647: LESSEQUAL
75648: IFTRUE 75652
75650: GO 75684
75652: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75653: LD_VAR 0 1
75657: PPUSH
75658: LD_VAR 0 2
75662: PPUSH
75663: LD_VAR 0 3
75667: PPUSH
75668: LD_VAR 0 4
75672: PPUSH
75673: LD_VAR 0 5
75677: PPUSH
75678: CALL 28049 0 5
75682: GO 75761
75684: LD_INT 300
75686: DOUBLE
75687: GREATEREQUAL
75688: IFFALSE 75696
75690: LD_INT 399
75692: DOUBLE
75693: LESSEQUAL
75694: IFTRUE 75698
75696: GO 75760
75698: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_VAR 0 2
75708: PPUSH
75709: LD_VAR 0 3
75713: PPUSH
75714: LD_VAR 0 4
75718: PPUSH
75719: LD_VAR 0 5
75723: PPUSH
75724: LD_VAR 0 6
75728: PPUSH
75729: LD_VAR 0 7
75733: PPUSH
75734: LD_VAR 0 8
75738: PPUSH
75739: LD_VAR 0 9
75743: PPUSH
75744: LD_VAR 0 10
75748: PPUSH
75749: LD_VAR 0 11
75753: PPUSH
75754: CALL 23957 0 11
75758: GO 75761
75760: POP
// end ;
75761: PPOPN 11
75763: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75764: LD_VAR 0 1
75768: PPUSH
75769: LD_VAR 0 2
75773: PPUSH
75774: LD_VAR 0 3
75778: PPUSH
75779: LD_VAR 0 4
75783: PPUSH
75784: LD_VAR 0 5
75788: PPUSH
75789: CALL 27434 0 5
// end ; end_of_file
75793: PPOPN 5
75795: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75796: LD_VAR 0 1
75800: PPUSH
75801: LD_VAR 0 2
75805: PPUSH
75806: LD_VAR 0 3
75810: PPUSH
75811: LD_VAR 0 4
75815: PPUSH
75816: LD_VAR 0 5
75820: PPUSH
75821: LD_VAR 0 6
75825: PPUSH
75826: CALL 11609 0 6
// end ;
75830: PPOPN 6
75832: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75833: LD_INT 0
75835: PPUSH
// begin if not units then
75836: LD_VAR 0 1
75840: NOT
75841: IFFALSE 75845
// exit ;
75843: GO 75845
// end ;
75845: PPOPN 7
75847: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75848: CALL 11496 0 0
// end ;
75852: PPOPN 1
75854: END
