// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 28677 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 28677 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 28677 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 28677 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 28677 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9551 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9551 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9551 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9551 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9551 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9551 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9551 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9551 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9551 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8253: LD_VAR 0 1
8257: PUSH
8258: LD_EXP 11
8262: IN
8263: IFFALSE 8281
// russianTanks := russianTanks diff unit ;
8265: LD_ADDR_EXP 11
8269: PUSH
8270: LD_EXP 11
8274: PUSH
8275: LD_VAR 0 1
8279: DIFF
8280: ST_TO_ADDR
// if unit in russianTimeLapsers then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 12
8290: IN
8291: IFFALSE 8309
// russianTimeLapsers := russianTimeLapsers diff unit ;
8293: LD_ADDR_EXP 12
8297: PUSH
8298: LD_EXP 12
8302: PUSH
8303: LD_VAR 0 1
8307: DIFF
8308: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: PUSH
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 247
8332: PUSH
8333: LD_INT 3
8335: EQUAL
8336: AND
8337: IFFALSE 8801
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 266
8348: PUSH
8349: LD_INT 31
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 36
8357: PUSH
8358: LD_INT 0
8360: PUSH
8361: LD_INT 24
8363: PUSH
8364: LD_INT 17
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 19
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 23
8384: PUSH
8385: LD_INT 16
8387: PUSH
8388: LD_INT 6
8390: PUSH
8391: LD_INT 29
8393: PUSH
8394: LD_INT 26
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 28
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 33
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: IN
8439: IFFALSE 8525
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8441: LD_ADDR_EXP 10
8445: PUSH
8446: LD_EXP 10
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 266
8460: ADD
8461: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8462: LD_ADDR_EXP 10
8466: PUSH
8467: LD_EXP 10
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 250
8481: ADD
8482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8483: LD_ADDR_EXP 10
8487: PUSH
8488: LD_EXP 10
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 251
8502: ADD
8503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8504: LD_ADDR_EXP 10
8508: PUSH
8509: LD_EXP 10
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 254
8523: ADD
8524: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 266
8534: PUSH
8535: LD_INT 1
8537: EQUAL
8538: IFFALSE 8617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8540: LD_ADDR_EXP 10
8544: PUSH
8545: LD_EXP 10
8549: PUSH
8550: LD_INT 0
8552: ADD
8553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8554: LD_ADDR_EXP 10
8558: PUSH
8559: LD_EXP 10
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 250
8573: ADD
8574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8575: LD_ADDR_EXP 10
8579: PUSH
8580: LD_EXP 10
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 251
8594: ADD
8595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8596: LD_ADDR_EXP 10
8600: PUSH
8601: LD_EXP 10
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 254
8615: ADD
8616: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8617: LD_VAR 0 1
8621: PPUSH
8622: CALL_OW 266
8626: PUSH
8627: LD_INT 3
8629: EQUAL
8630: IFFALSE 8709
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8632: LD_ADDR_EXP 10
8636: PUSH
8637: LD_EXP 10
8641: PUSH
8642: LD_INT 2
8644: ADD
8645: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8646: LD_ADDR_EXP 10
8650: PUSH
8651: LD_EXP 10
8655: PUSH
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL_OW 250
8665: ADD
8666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8667: LD_ADDR_EXP 10
8671: PUSH
8672: LD_EXP 10
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 251
8686: ADD
8687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8688: LD_ADDR_EXP 10
8692: PUSH
8693: LD_EXP 10
8697: PUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 254
8707: ADD
8708: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 266
8718: PUSH
8719: LD_INT 5
8721: EQUAL
8722: IFFALSE 8801
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8724: LD_ADDR_EXP 10
8728: PUSH
8729: LD_EXP 10
8733: PUSH
8734: LD_INT 4
8736: ADD
8737: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8738: LD_ADDR_EXP 10
8742: PUSH
8743: LD_EXP 10
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 250
8757: ADD
8758: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8759: LD_ADDR_EXP 10
8763: PUSH
8764: LD_EXP 10
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 251
8778: ADD
8779: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8780: LD_ADDR_EXP 10
8784: PUSH
8785: LD_EXP 10
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 254
8799: ADD
8800: ST_TO_ADDR
// end ; end ; end ;
8801: PPOPN 1
8803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8804: LD_VAR 0 3
8808: PPUSH
8809: CALL_OW 264
8813: PUSH
8814: LD_INT 10
8816: EQUAL
8817: IFFALSE 8833
// destroyCounter := destroyCounter + 1 ;
8819: LD_ADDR_EXP 17
8823: PUSH
8824: LD_EXP 17
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// end ;
8833: PPOPN 3
8835: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: EQUAL
8844: PUSH
8845: LD_VAR 0 2
8849: PUSH
8850: LD_INT 40
8852: EQUAL
8853: OR
8854: IFFALSE 8978
// if GetSide ( vehicle ) = 3 then
8856: LD_VAR 0 1
8860: PPUSH
8861: CALL_OW 255
8865: PUSH
8866: LD_INT 3
8868: EQUAL
8869: IFFALSE 8978
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8871: LD_VAR 0 1
8875: PPUSH
8876: CALL_OW 264
8880: PUSH
8881: LD_INT 47
8883: EQUAL
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 264
8894: PUSH
8895: LD_INT 46
8897: EQUAL
8898: OR
8899: PUSH
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 45
8912: EQUAL
8913: OR
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 264
8924: PUSH
8925: LD_INT 44
8927: EQUAL
8928: OR
8929: IFFALSE 8947
// russianTanks = russianTanks ^ vehicle ;
8931: LD_ADDR_EXP 11
8935: PUSH
8936: LD_EXP 11
8940: PUSH
8941: LD_VAR 0 1
8945: ADD
8946: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 264
8956: PUSH
8957: LD_INT 49
8959: EQUAL
8960: IFFALSE 8978
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8962: LD_ADDR_EXP 12
8966: PUSH
8967: LD_EXP 12
8971: PUSH
8972: LD_VAR 0 1
8976: ADD
8977: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 1
8990: EQUAL
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 264
9001: PUSH
9002: LD_INT 10
9004: EQUAL
9005: AND
9006: IFFALSE 9022
// amLaserCounter = amLaserCounter + 1 ;
9008: LD_ADDR_EXP 9
9012: PUSH
9013: LD_EXP 9
9017: PUSH
9018: LD_INT 1
9020: PLUS
9021: ST_TO_ADDR
// end ;
9022: PPOPN 2
9024: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL 24778 0 1
// end ; end_of_file
9034: PPOPN 1
9036: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9037: LD_EXP 1
9041: PPUSH
9042: CALL_OW 310
9046: PPUSH
9047: LD_INT 12
9049: PPUSH
9050: CALL_OW 308
9054: PUSH
9055: LD_EXP 15
9059: PUSH
9060: LD_INT 0
9062: EQUAL
9063: AND
9064: IFFALSE 9410
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// begin enable ;
9073: ENABLE
// if JMMGirl = 1 then
9074: LD_EXP 7
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9099
// JMMGirlVeh = IsInUnit ( Joan ) ;
9084: LD_ADDR_VAR 0 1
9088: PUSH
9089: LD_EXP 2
9093: PPUSH
9094: CALL_OW 310
9098: ST_TO_ADDR
// if JMMGirl = 2 then
9099: LD_EXP 7
9103: PUSH
9104: LD_INT 2
9106: EQUAL
9107: IFFALSE 9124
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_EXP 3
9118: PPUSH
9119: CALL_OW 310
9123: ST_TO_ADDR
// if JMMGirl = 3 then
9124: LD_EXP 7
9128: PUSH
9129: LD_INT 3
9131: EQUAL
9132: IFFALSE 9149
// JMMGirlVeh = IsInUnit ( Connie ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_EXP 4
9143: PPUSH
9144: CALL_OW 310
9148: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9149: LD_EXP 1
9153: PPUSH
9154: CALL_OW 310
9158: PPUSH
9159: LD_EXP 2
9163: PPUSH
9164: CALL_OW 310
9168: PPUSH
9169: CALL_OW 296
9173: PUSH
9174: LD_INT 10
9176: LESS
9177: PUSH
9178: LD_EXP 1
9182: PPUSH
9183: CALL_OW 310
9187: PPUSH
9188: LD_EXP 3
9192: PPUSH
9193: CALL_OW 310
9197: PPUSH
9198: CALL_OW 296
9202: PUSH
9203: LD_INT 10
9205: LESS
9206: OR
9207: PUSH
9208: LD_EXP 1
9212: PPUSH
9213: CALL_OW 310
9217: PPUSH
9218: LD_EXP 4
9222: PPUSH
9223: CALL_OW 310
9227: PPUSH
9228: CALL_OW 296
9232: PUSH
9233: LD_INT 10
9235: LESS
9236: OR
9237: IFFALSE 9331
// begin case Query ( Q3b ) of 1 :
9239: LD_STRING Q3b
9241: PPUSH
9242: CALL_OW 97
9246: PUSH
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9328
9255: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 265
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 262
9278: PUSH
9279: EMPTY
9280: LIST
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 263
9291: PUSH
9292: EMPTY
9293: LIST
9294: PUSH
9295: LD_VAR 0 1
9299: PPUSH
9300: CALL_OW 264
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: LD_STRING 14_JMMGirlVeh_1
9316: PPUSH
9317: CALL_OW 39
// FinishMission ;
9321: CALL 9551 0 0
// disable ;
9325: DISABLE
// end ; end ;
9326: GO 9329
9328: POP
// end else
9329: GO 9410
// begin if JMMGirl = 1 then
9331: LD_EXP 7
9335: PUSH
9336: LD_INT 1
9338: EQUAL
9339: IFFALSE 9356
// dec := Query ( Q3bJ ) else
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_STRING Q3bJ
9348: PPUSH
9349: CALL_OW 97
9353: ST_TO_ADDR
9354: GO 9394
// if JMMGirl = 2 then
9356: LD_EXP 7
9360: PUSH
9361: LD_INT 2
9363: EQUAL
9364: IFFALSE 9381
// dec := Query ( Q3bL ) else
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_STRING Q3bL
9373: PPUSH
9374: CALL_OW 97
9378: ST_TO_ADDR
9379: GO 9394
// dec := Query ( Q3bX ) ;
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_STRING Q3bX
9388: PPUSH
9389: CALL_OW 97
9393: ST_TO_ADDR
// if dec = 1 then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9410
// begin FinishMission ;
9404: CALL 9551 0 0
// exit ;
9408: GO 9410
// end ; end ; end ;
9410: PPOPN 2
9412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9413: LD_INT 22
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PUSH
9442: LD_INT 0
9444: EQUAL
9445: PUSH
9446: LD_EXP 15
9450: PUSH
9451: LD_INT 0
9453: EQUAL
9454: AND
9455: IFFALSE 9550
9457: GO 9459
9459: DISABLE
// begin DialogueOn ;
9460: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9464: LD_EXP 1
9468: PPUSH
9469: LD_STRING DEnd-JMM-1
9471: PPUSH
9472: CALL_OW 88
// if JMMGirl = 1 then
9476: LD_EXP 7
9480: PUSH
9481: LD_INT 1
9483: EQUAL
9484: IFFALSE 9498
// Say ( Joan , DEnd-Joan-1 ) ;
9486: LD_EXP 2
9490: PPUSH
9491: LD_STRING DEnd-Joan-1
9493: PPUSH
9494: CALL_OW 88
// if JMMGirl = 2 then
9498: LD_EXP 7
9502: PUSH
9503: LD_INT 2
9505: EQUAL
9506: IFFALSE 9520
// Say ( Lisa , DEnd-Lisa-1 ) ;
9508: LD_EXP 3
9512: PPUSH
9513: LD_STRING DEnd-Lisa-1
9515: PPUSH
9516: CALL_OW 88
// if JMMGirl = 3 then
9520: LD_EXP 7
9524: PUSH
9525: LD_INT 3
9527: EQUAL
9528: IFFALSE 9542
// Say ( Connie , DEnd-Con-1 ) ;
9530: LD_EXP 4
9534: PPUSH
9535: LD_STRING DEnd-Con-1
9537: PPUSH
9538: CALL_OW 88
// DialogueOff ;
9542: CALL_OW 7
// FinishMission ;
9546: CALL 9551 0 0
// end ;
9550: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// m1 := false ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// m2 := false ;
9566: LD_ADDR_VAR 0 4
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// m3 := false ;
9574: LD_ADDR_VAR 0 5
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_STRING 14_JMM
9589: PPUSH
9590: CALL_OW 38
// if tick <= 50 50$00 then
9594: LD_OWVAR 1
9598: PUSH
9599: LD_INT 105000
9601: LESSEQUAL
9602: IFFALSE 9611
// SetAchievement ( ACH_ASPEED_14 ) ;
9604: LD_STRING ACH_ASPEED_14
9606: PPUSH
9607: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9611: LD_EXP 1
9615: PPUSH
9616: CALL_OW 310
9620: PUSH
9621: LD_EXP 1
9625: PPUSH
9626: CALL_OW 310
9630: PPUSH
9631: CALL_OW 247
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: AND
9640: IFFALSE 9722
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: LD_EXP 1
9651: PPUSH
9652: CALL_OW 310
9656: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 265
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: LD_VAR 0 2
9674: PPUSH
9675: CALL_OW 262
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_VAR 0 2
9687: PPUSH
9688: CALL_OW 263
9692: PUSH
9693: EMPTY
9694: LIST
9695: PUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: CALL_OW 264
9705: PUSH
9706: EMPTY
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PPUSH
9715: LD_STRING 14_JMMVeh_1
9717: PPUSH
9718: CALL_OW 39
// end ; if fastEnd = 1 then
9722: LD_EXP 15
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9819
// begin AddMedal ( fastend , - 1 ) ;
9732: LD_STRING fastend
9734: PPUSH
9735: LD_INT 1
9737: NEG
9738: PPUSH
9739: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9743: LD_STRING fastend
9745: PPUSH
9746: LD_INT 1
9748: NEG
9749: PPUSH
9750: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9754: LD_STRING fastend
9756: PPUSH
9757: LD_INT 1
9759: NEG
9760: PPUSH
9761: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9765: LD_EXP 7
9769: PPUSH
9770: LD_STRING 14_JMMGirl_1
9772: PPUSH
9773: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9777: LD_INT 0
9779: PPUSH
9780: LD_STRING 14_JMMGirlStatus_1
9782: PPUSH
9783: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9787: LD_INT 0
9789: PPUSH
9790: LD_STRING 14_KappaStatus_1
9792: PPUSH
9793: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9797: LD_STRING Eliminate
9799: PPUSH
9800: CALL_OW 102
// RewardPeople ( JMM ) ;
9804: LD_EXP 1
9808: PPUSH
9809: CALL_OW 43
// YouWin ;
9813: CALL_OW 103
// exit ;
9817: GO 10644
// end ; if fastEnd = 0 then
9819: LD_EXP 15
9823: PUSH
9824: LD_INT 0
9826: EQUAL
9827: IFFALSE 10537
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9829: LD_EXP 7
9833: PPUSH
9834: LD_STRING 14_JMMGirl_1
9836: PPUSH
9837: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_INT 48
9876: PPUSH
9877: CALL_OW 255
9881: PUSH
9882: LD_INT 1
9884: EQUAL
9885: AND
9886: IFFALSE 9900
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9888: LD_INT 1
9890: PPUSH
9891: LD_STRING 14_KappaStatus_1
9893: PPUSH
9894: CALL_OW 39
9898: GO 9910
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9900: LD_INT 0
9902: PPUSH
9903: LD_STRING 14_KappaStatus_1
9905: PPUSH
9906: CALL_OW 39
// case JMMGirl of 1 :
9910: LD_EXP 7
9914: PUSH
9915: LD_INT 1
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 10079
9923: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9924: LD_EXP 2
9928: PPUSH
9929: CALL_OW 302
9933: PUSH
9934: LD_EXP 2
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 1
9946: EQUAL
9947: AND
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 3
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: PUSH
9982: LD_EXP 1
9986: PPUSH
9987: CALL_OW 310
9991: PPUSH
9992: LD_EXP 2
9996: PPUSH
9997: CALL_OW 310
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 10
10009: LESS
10010: OR
10011: AND
10012: IFFALSE 10056
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10014: LD_INT 1
10016: PPUSH
10017: LD_STRING 14_JMMGirlStatus_1
10019: PPUSH
10020: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10024: LD_EXP 2
10028: PPUSH
10029: LD_STRING 14_Joan
10031: PPUSH
10032: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10036: LD_STRING protect
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 101
// m1 := true ;
10046: LD_ADDR_VAR 0 3
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// end else
10054: GO 10077
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10056: LD_INT 0
10058: PPUSH
10059: LD_STRING 14_JMMGirlStatus_1
10061: PPUSH
10062: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10066: LD_STRING protect
10068: PPUSH
10069: LD_INT 1
10071: NEG
10072: PPUSH
10073: CALL_OW 101
// end ; end ; 2 :
10077: GO 10408
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10243
10087: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10088: LD_EXP 3
10092: PPUSH
10093: CALL_OW 302
10097: PUSH
10098: LD_EXP 3
10102: PPUSH
10103: CALL_OW 255
10107: PUSH
10108: LD_INT 1
10110: EQUAL
10111: AND
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: PUSH
10142: LD_INT 0
10144: EQUAL
10145: PUSH
10146: LD_EXP 1
10150: PPUSH
10151: CALL_OW 310
10155: PPUSH
10156: LD_EXP 3
10160: PPUSH
10161: CALL_OW 310
10165: PPUSH
10166: CALL_OW 296
10170: PUSH
10171: LD_INT 10
10173: LESS
10174: OR
10175: AND
10176: IFFALSE 10220
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10178: LD_INT 1
10180: PPUSH
10181: LD_STRING 14_JMMGirlStatus_1
10183: PPUSH
10184: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10188: LD_EXP 3
10192: PPUSH
10193: LD_STRING 14_Lisa
10195: PPUSH
10196: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10200: LD_STRING protect
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 101
// m1 := true ;
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// end else
10218: GO 10241
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10220: LD_INT 0
10222: PPUSH
10223: LD_STRING 14_JMMGirlStatus_1
10225: PPUSH
10226: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10230: LD_STRING protect
10232: PPUSH
10233: LD_INT 2
10235: NEG
10236: PPUSH
10237: CALL_OW 101
// end ; end ; 3 :
10241: GO 10408
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10407
10251: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10252: LD_EXP 4
10256: PPUSH
10257: CALL_OW 302
10261: PUSH
10262: LD_EXP 4
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 1
10274: EQUAL
10275: AND
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 21
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 69
10305: PUSH
10306: LD_INT 0
10308: EQUAL
10309: PUSH
10310: LD_EXP 1
10314: PPUSH
10315: CALL_OW 310
10319: PPUSH
10320: LD_EXP 4
10324: PPUSH
10325: CALL_OW 310
10329: PPUSH
10330: CALL_OW 296
10334: PUSH
10335: LD_INT 10
10337: LESS
10338: OR
10339: AND
10340: IFFALSE 10384
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10342: LD_INT 1
10344: PPUSH
10345: LD_STRING 14_JMMGirlStatus_1
10347: PPUSH
10348: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10352: LD_EXP 4
10356: PPUSH
10357: LD_STRING 14_Connie
10359: PPUSH
10360: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10364: LD_STRING protect
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 101
// m1 := true ;
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// end else
10382: GO 10405
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10384: LD_INT 0
10386: PPUSH
10387: LD_STRING 14_JMMGirlStatus_1
10389: PPUSH
10390: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10394: LD_STRING protect
10396: PPUSH
10397: LD_INT 3
10399: NEG
10400: PPUSH
10401: CALL_OW 101
// end ; end ; end ;
10405: GO 10408
10407: POP
// if amLaserCounter >= 2 then
10408: LD_EXP 9
10412: PUSH
10413: LD_INT 2
10415: GREATEREQUAL
10416: IFFALSE 10438
// begin AddMedal ( double , 1 ) ;
10418: LD_STRING double
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 101
// m2 := true ;
10428: LD_ADDR_VAR 0 4
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// end else
10436: GO 10472
// begin if amLaserCounter = 1 then
10438: LD_EXP 9
10442: PUSH
10443: LD_INT 1
10445: EQUAL
10446: IFFALSE 10461
// AddMedal ( double , - 2 ) else
10448: LD_STRING double
10450: PPUSH
10451: LD_INT 2
10453: NEG
10454: PPUSH
10455: CALL_OW 101
10459: GO 10472
// AddMedal ( double , - 1 ) ;
10461: LD_STRING double
10463: PPUSH
10464: LD_INT 1
10466: NEG
10467: PPUSH
10468: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10472: LD_INT 22
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_INT 0
10503: EQUAL
10504: IFFALSE 10526
// begin AddMedal ( base , 1 ) ;
10506: LD_STRING base
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 101
// m3 := true ;
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// end else
10524: GO 10537
// AddMedal ( base , - 1 ) ;
10526: LD_STRING base
10528: PPUSH
10529: LD_INT 1
10531: NEG
10532: PPUSH
10533: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_VAR 0 4
10546: AND
10547: PUSH
10548: LD_VAR 0 5
10552: AND
10553: PUSH
10554: LD_OWVAR 67
10558: PUSH
10559: LD_INT 3
10561: GREATEREQUAL
10562: AND
10563: IFFALSE 10575
// SetAchievementEX ( ACH_AMER , 14 ) ;
10565: LD_STRING ACH_AMER
10567: PPUSH
10568: LD_INT 14
10570: PPUSH
10571: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10575: LD_STRING Eliminate
10577: PPUSH
10578: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10582: LD_INT 22
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 3
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: CALL_OW 43
// YouWin ;
10640: CALL_OW 103
// end ; end_of_file
10644: LD_VAR 0 1
10648: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10649: LD_EXP 1
10653: PPUSH
10654: CALL_OW 301
10658: IFFALSE 10670
10660: GO 10662
10662: DISABLE
// YouLost ( JMM ) ; end_of_file
10663: LD_STRING JMM
10665: PPUSH
10666: CALL_OW 104
10670: END
// every 1 1$0 do
10671: GO 10673
10673: DISABLE
// begin enable ;
10674: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10675: LD_INT 3
10677: PPUSH
10678: LD_INT 5
10680: PPUSH
10681: CALL_OW 12
10685: PPUSH
10686: LD_INT 13
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 55
// end ; end_of_file
10696: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10697: LD_INT 0
10699: PPUSH
// ar_miner := 81 ;
10700: LD_ADDR_EXP 26
10704: PUSH
10705: LD_INT 81
10707: ST_TO_ADDR
// ar_crane := 88 ;
10708: LD_ADDR_EXP 25
10712: PUSH
10713: LD_INT 88
10715: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10716: LD_ADDR_EXP 20
10720: PUSH
10721: LD_INT 89
10723: ST_TO_ADDR
// us_hack := 99 ;
10724: LD_ADDR_EXP 21
10728: PUSH
10729: LD_INT 99
10731: ST_TO_ADDR
// us_artillery := 97 ;
10732: LD_ADDR_EXP 22
10736: PUSH
10737: LD_INT 97
10739: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10740: LD_ADDR_EXP 23
10744: PUSH
10745: LD_INT 91
10747: ST_TO_ADDR
// ar_mortar := 92 ;
10748: LD_ADDR_EXP 24
10752: PUSH
10753: LD_INT 92
10755: ST_TO_ADDR
// ru_radar := 98 ;
10756: LD_ADDR_EXP 19
10760: PUSH
10761: LD_INT 98
10763: ST_TO_ADDR
// tech_Artillery := 80 ;
10764: LD_ADDR_EXP 27
10768: PUSH
10769: LD_INT 80
10771: ST_TO_ADDR
// tech_RadMat := 81 ;
10772: LD_ADDR_EXP 28
10776: PUSH
10777: LD_INT 81
10779: ST_TO_ADDR
// tech_BasicTools := 82 ;
10780: LD_ADDR_EXP 29
10784: PUSH
10785: LD_INT 82
10787: ST_TO_ADDR
// tech_Cargo := 83 ;
10788: LD_ADDR_EXP 30
10792: PUSH
10793: LD_INT 83
10795: ST_TO_ADDR
// tech_Track := 84 ;
10796: LD_ADDR_EXP 31
10800: PUSH
10801: LD_INT 84
10803: ST_TO_ADDR
// tech_Crane := 85 ;
10804: LD_ADDR_EXP 32
10808: PUSH
10809: LD_INT 85
10811: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10812: LD_ADDR_EXP 33
10816: PUSH
10817: LD_INT 86
10819: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10820: LD_ADDR_EXP 34
10824: PUSH
10825: LD_INT 87
10827: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10828: LD_ADDR_EXP 35
10832: PUSH
10833: LD_INT 88
10835: ST_TO_ADDR
// class_mastodont := 31 ;
10836: LD_ADDR_EXP 36
10840: PUSH
10841: LD_INT 31
10843: ST_TO_ADDR
// class_horse := 21 ;
10844: LD_ADDR_EXP 37
10848: PUSH
10849: LD_INT 21
10851: ST_TO_ADDR
// end ;
10852: LD_VAR 0 1
10856: RET
// every 1 do
10857: GO 10859
10859: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10860: CALL 10697 0 0
10864: END
// every 0 0$1 do
10865: GO 10867
10867: DISABLE
// begin enable ;
10868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10869: LD_STRING updateTimer(
10871: PUSH
10872: LD_OWVAR 1
10876: STR
10877: PUSH
10878: LD_STRING );
10880: STR
10881: PPUSH
10882: CALL_OW 559
// end ;
10886: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10887: LD_INT 0
10889: PPUSH
// if p2 = 100 then
10890: LD_VAR 0 2
10894: PUSH
10895: LD_INT 100
10897: EQUAL
10898: IFFALSE 11901
// begin if not StreamModeActive then
10900: LD_EXP 38
10904: NOT
10905: IFFALSE 10915
// StreamModeActive := true ;
10907: LD_ADDR_EXP 38
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// if p3 = 0 then
10915: LD_VAR 0 3
10919: PUSH
10920: LD_INT 0
10922: EQUAL
10923: IFFALSE 10929
// InitStreamMode ;
10925: CALL 12061 0 0
// if p3 = 1 then
10929: LD_VAR 0 3
10933: PUSH
10934: LD_INT 1
10936: EQUAL
10937: IFFALSE 10947
// sRocket := true ;
10939: LD_ADDR_EXP 43
10943: PUSH
10944: LD_INT 1
10946: ST_TO_ADDR
// if p3 = 2 then
10947: LD_VAR 0 3
10951: PUSH
10952: LD_INT 2
10954: EQUAL
10955: IFFALSE 10965
// sSpeed := true ;
10957: LD_ADDR_EXP 42
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// if p3 = 3 then
10965: LD_VAR 0 3
10969: PUSH
10970: LD_INT 3
10972: EQUAL
10973: IFFALSE 10983
// sEngine := true ;
10975: LD_ADDR_EXP 44
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// if p3 = 4 then
10983: LD_VAR 0 3
10987: PUSH
10988: LD_INT 4
10990: EQUAL
10991: IFFALSE 11001
// sSpec := true ;
10993: LD_ADDR_EXP 41
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// if p3 = 5 then
11001: LD_VAR 0 3
11005: PUSH
11006: LD_INT 5
11008: EQUAL
11009: IFFALSE 11019
// sLevel := true ;
11011: LD_ADDR_EXP 45
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// if p3 = 6 then
11019: LD_VAR 0 3
11023: PUSH
11024: LD_INT 6
11026: EQUAL
11027: IFFALSE 11037
// sArmoury := true ;
11029: LD_ADDR_EXP 46
11033: PUSH
11034: LD_INT 1
11036: ST_TO_ADDR
// if p3 = 7 then
11037: LD_VAR 0 3
11041: PUSH
11042: LD_INT 7
11044: EQUAL
11045: IFFALSE 11055
// sRadar := true ;
11047: LD_ADDR_EXP 47
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// if p3 = 8 then
11055: LD_VAR 0 3
11059: PUSH
11060: LD_INT 8
11062: EQUAL
11063: IFFALSE 11073
// sBunker := true ;
11065: LD_ADDR_EXP 48
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// if p3 = 9 then
11073: LD_VAR 0 3
11077: PUSH
11078: LD_INT 9
11080: EQUAL
11081: IFFALSE 11091
// sHack := true ;
11083: LD_ADDR_EXP 49
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// if p3 = 10 then
11091: LD_VAR 0 3
11095: PUSH
11096: LD_INT 10
11098: EQUAL
11099: IFFALSE 11109
// sFire := true ;
11101: LD_ADDR_EXP 50
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// if p3 = 11 then
11109: LD_VAR 0 3
11113: PUSH
11114: LD_INT 11
11116: EQUAL
11117: IFFALSE 11127
// sRefresh := true ;
11119: LD_ADDR_EXP 51
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// if p3 = 12 then
11127: LD_VAR 0 3
11131: PUSH
11132: LD_INT 12
11134: EQUAL
11135: IFFALSE 11145
// sExp := true ;
11137: LD_ADDR_EXP 52
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// if p3 = 13 then
11145: LD_VAR 0 3
11149: PUSH
11150: LD_INT 13
11152: EQUAL
11153: IFFALSE 11163
// sDepot := true ;
11155: LD_ADDR_EXP 53
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// if p3 = 14 then
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 14
11170: EQUAL
11171: IFFALSE 11181
// sFlag := true ;
11173: LD_ADDR_EXP 54
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// if p3 = 15 then
11181: LD_VAR 0 3
11185: PUSH
11186: LD_INT 15
11188: EQUAL
11189: IFFALSE 11199
// sKamikadze := true ;
11191: LD_ADDR_EXP 62
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// if p3 = 16 then
11199: LD_VAR 0 3
11203: PUSH
11204: LD_INT 16
11206: EQUAL
11207: IFFALSE 11217
// sTroll := true ;
11209: LD_ADDR_EXP 63
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// if p3 = 17 then
11217: LD_VAR 0 3
11221: PUSH
11222: LD_INT 17
11224: EQUAL
11225: IFFALSE 11235
// sSlow := true ;
11227: LD_ADDR_EXP 64
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// if p3 = 18 then
11235: LD_VAR 0 3
11239: PUSH
11240: LD_INT 18
11242: EQUAL
11243: IFFALSE 11253
// sLack := true ;
11245: LD_ADDR_EXP 65
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// if p3 = 19 then
11253: LD_VAR 0 3
11257: PUSH
11258: LD_INT 19
11260: EQUAL
11261: IFFALSE 11271
// sTank := true ;
11263: LD_ADDR_EXP 67
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
// if p3 = 20 then
11271: LD_VAR 0 3
11275: PUSH
11276: LD_INT 20
11278: EQUAL
11279: IFFALSE 11289
// sRemote := true ;
11281: LD_ADDR_EXP 68
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// if p3 = 21 then
11289: LD_VAR 0 3
11293: PUSH
11294: LD_INT 21
11296: EQUAL
11297: IFFALSE 11307
// sPowell := true ;
11299: LD_ADDR_EXP 69
11303: PUSH
11304: LD_INT 1
11306: ST_TO_ADDR
// if p3 = 22 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 22
11314: EQUAL
11315: IFFALSE 11325
// sTeleport := true ;
11317: LD_ADDR_EXP 72
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// if p3 = 23 then
11325: LD_VAR 0 3
11329: PUSH
11330: LD_INT 23
11332: EQUAL
11333: IFFALSE 11343
// sOilTower := true ;
11335: LD_ADDR_EXP 74
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// if p3 = 24 then
11343: LD_VAR 0 3
11347: PUSH
11348: LD_INT 24
11350: EQUAL
11351: IFFALSE 11361
// sShovel := true ;
11353: LD_ADDR_EXP 75
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// if p3 = 25 then
11361: LD_VAR 0 3
11365: PUSH
11366: LD_INT 25
11368: EQUAL
11369: IFFALSE 11379
// sSheik := true ;
11371: LD_ADDR_EXP 76
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// if p3 = 26 then
11379: LD_VAR 0 3
11383: PUSH
11384: LD_INT 26
11386: EQUAL
11387: IFFALSE 11397
// sEarthquake := true ;
11389: LD_ADDR_EXP 78
11393: PUSH
11394: LD_INT 1
11396: ST_TO_ADDR
// if p3 = 27 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 27
11404: EQUAL
11405: IFFALSE 11415
// sAI := true ;
11407: LD_ADDR_EXP 79
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 28 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 28
11422: EQUAL
11423: IFFALSE 11433
// sCargo := true ;
11425: LD_ADDR_EXP 82
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 29 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 29
11440: EQUAL
11441: IFFALSE 11451
// sDLaser := true ;
11443: LD_ADDR_EXP 83
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 30 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 30
11458: EQUAL
11459: IFFALSE 11469
// sExchange := true ;
11461: LD_ADDR_EXP 84
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 31 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 31
11476: EQUAL
11477: IFFALSE 11487
// sFac := true ;
11479: LD_ADDR_EXP 85
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 32 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 32
11494: EQUAL
11495: IFFALSE 11505
// sPower := true ;
11497: LD_ADDR_EXP 86
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 33 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 33
11512: EQUAL
11513: IFFALSE 11523
// sRandom := true ;
11515: LD_ADDR_EXP 87
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 34 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 34
11530: EQUAL
11531: IFFALSE 11541
// sShield := true ;
11533: LD_ADDR_EXP 88
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 35 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 35
11548: EQUAL
11549: IFFALSE 11559
// sTime := true ;
11551: LD_ADDR_EXP 89
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 36 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 36
11566: EQUAL
11567: IFFALSE 11577
// sTools := true ;
11569: LD_ADDR_EXP 90
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 101 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 101
11584: EQUAL
11585: IFFALSE 11595
// sSold := true ;
11587: LD_ADDR_EXP 55
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 102 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 102
11602: EQUAL
11603: IFFALSE 11613
// sDiff := true ;
11605: LD_ADDR_EXP 56
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 103 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 103
11620: EQUAL
11621: IFFALSE 11631
// sFog := true ;
11623: LD_ADDR_EXP 59
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 104 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 104
11638: EQUAL
11639: IFFALSE 11649
// sReset := true ;
11641: LD_ADDR_EXP 60
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 105 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 105
11656: EQUAL
11657: IFFALSE 11667
// sSun := true ;
11659: LD_ADDR_EXP 61
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 106 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 106
11674: EQUAL
11675: IFFALSE 11685
// sTiger := true ;
11677: LD_ADDR_EXP 57
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 107 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 107
11692: EQUAL
11693: IFFALSE 11703
// sBomb := true ;
11695: LD_ADDR_EXP 58
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 108 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 108
11710: EQUAL
11711: IFFALSE 11721
// sWound := true ;
11713: LD_ADDR_EXP 66
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 109 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 109
11728: EQUAL
11729: IFFALSE 11739
// sBetray := true ;
11731: LD_ADDR_EXP 70
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 110 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 110
11746: EQUAL
11747: IFFALSE 11757
// sContamin := true ;
11749: LD_ADDR_EXP 71
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 111 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 111
11764: EQUAL
11765: IFFALSE 11775
// sOil := true ;
11767: LD_ADDR_EXP 73
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 112 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 112
11782: EQUAL
11783: IFFALSE 11793
// sStu := true ;
11785: LD_ADDR_EXP 77
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 113 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 113
11800: EQUAL
11801: IFFALSE 11811
// sBazooka := true ;
11803: LD_ADDR_EXP 80
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 114 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 114
11818: EQUAL
11819: IFFALSE 11829
// sMortar := true ;
11821: LD_ADDR_EXP 81
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 115 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 115
11836: EQUAL
11837: IFFALSE 11847
// sRanger := true ;
11839: LD_ADDR_EXP 91
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 116 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 116
11854: EQUAL
11855: IFFALSE 11865
// sComputer := true ;
11857: LD_ADDR_EXP 92
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 117 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 117
11872: EQUAL
11873: IFFALSE 11883
// s30 := true ;
11875: LD_ADDR_EXP 93
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 118 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 118
11890: EQUAL
11891: IFFALSE 11901
// s60 := true ;
11893: LD_ADDR_EXP 94
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// end ; if p2 = 101 then
11901: LD_VAR 0 2
11905: PUSH
11906: LD_INT 101
11908: EQUAL
11909: IFFALSE 12037
// begin case p3 of 1 :
11911: LD_VAR 0 3
11915: PUSH
11916: LD_INT 1
11918: DOUBLE
11919: EQUAL
11920: IFTRUE 11924
11922: GO 11931
11924: POP
// hHackUnlimitedResources ; 2 :
11925: CALL 23633 0 0
11929: GO 12037
11931: LD_INT 2
11933: DOUBLE
11934: EQUAL
11935: IFTRUE 11939
11937: GO 11946
11939: POP
// hHackSetLevel10 ; 3 :
11940: CALL 23766 0 0
11944: GO 12037
11946: LD_INT 3
11948: DOUBLE
11949: EQUAL
11950: IFTRUE 11954
11952: GO 11961
11954: POP
// hHackSetLevel10YourUnits ; 4 :
11955: CALL 23851 0 0
11959: GO 12037
11961: LD_INT 4
11963: DOUBLE
11964: EQUAL
11965: IFTRUE 11969
11967: GO 11976
11969: POP
// hHackInvincible ; 5 :
11970: CALL 24299 0 0
11974: GO 12037
11976: LD_INT 5
11978: DOUBLE
11979: EQUAL
11980: IFTRUE 11984
11982: GO 11991
11984: POP
// hHackInvisible ; 6 :
11985: CALL 24410 0 0
11989: GO 12037
11991: LD_INT 6
11993: DOUBLE
11994: EQUAL
11995: IFTRUE 11999
11997: GO 12006
11999: POP
// hHackChangeYourSide ; 7 :
12000: CALL 24467 0 0
12004: GO 12037
12006: LD_INT 7
12008: DOUBLE
12009: EQUAL
12010: IFTRUE 12014
12012: GO 12021
12014: POP
// hHackChangeUnitSide ; 8 :
12015: CALL 24509 0 0
12019: GO 12037
12021: LD_INT 8
12023: DOUBLE
12024: EQUAL
12025: IFTRUE 12029
12027: GO 12036
12029: POP
// hHackFog ; end ;
12030: CALL 24610 0 0
12034: GO 12037
12036: POP
// end ; end ;
12037: LD_VAR 0 7
12041: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12042: GO 12044
12044: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12045: LD_STRING initStreamRollete();
12047: PPUSH
12048: CALL_OW 559
// InitStreamMode ;
12052: CALL 12061 0 0
// DefineStreamItems ( ) ;
12056: CALL 12525 0 0
// end ;
12060: END
// function InitStreamMode ; begin
12061: LD_INT 0
12063: PPUSH
// streamModeActive := false ;
12064: LD_ADDR_EXP 38
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// normalCounter := 36 ;
12072: LD_ADDR_EXP 39
12076: PUSH
12077: LD_INT 36
12079: ST_TO_ADDR
// hardcoreCounter := 16 ;
12080: LD_ADDR_EXP 40
12084: PUSH
12085: LD_INT 16
12087: ST_TO_ADDR
// sRocket := false ;
12088: LD_ADDR_EXP 43
12092: PUSH
12093: LD_INT 0
12095: ST_TO_ADDR
// sSpeed := false ;
12096: LD_ADDR_EXP 42
12100: PUSH
12101: LD_INT 0
12103: ST_TO_ADDR
// sEngine := false ;
12104: LD_ADDR_EXP 44
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// sSpec := false ;
12112: LD_ADDR_EXP 41
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// sLevel := false ;
12120: LD_ADDR_EXP 45
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// sArmoury := false ;
12128: LD_ADDR_EXP 46
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// sRadar := false ;
12136: LD_ADDR_EXP 47
12140: PUSH
12141: LD_INT 0
12143: ST_TO_ADDR
// sBunker := false ;
12144: LD_ADDR_EXP 48
12148: PUSH
12149: LD_INT 0
12151: ST_TO_ADDR
// sHack := false ;
12152: LD_ADDR_EXP 49
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// sFire := false ;
12160: LD_ADDR_EXP 50
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// sRefresh := false ;
12168: LD_ADDR_EXP 51
12172: PUSH
12173: LD_INT 0
12175: ST_TO_ADDR
// sExp := false ;
12176: LD_ADDR_EXP 52
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// sDepot := false ;
12184: LD_ADDR_EXP 53
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// sFlag := false ;
12192: LD_ADDR_EXP 54
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// sKamikadze := false ;
12200: LD_ADDR_EXP 62
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// sTroll := false ;
12208: LD_ADDR_EXP 63
12212: PUSH
12213: LD_INT 0
12215: ST_TO_ADDR
// sSlow := false ;
12216: LD_ADDR_EXP 64
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// sLack := false ;
12224: LD_ADDR_EXP 65
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// sTank := false ;
12232: LD_ADDR_EXP 67
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// sRemote := false ;
12240: LD_ADDR_EXP 68
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// sPowell := false ;
12248: LD_ADDR_EXP 69
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// sTeleport := false ;
12256: LD_ADDR_EXP 72
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sOilTower := false ;
12264: LD_ADDR_EXP 74
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sShovel := false ;
12272: LD_ADDR_EXP 75
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sSheik := false ;
12280: LD_ADDR_EXP 76
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sEarthquake := false ;
12288: LD_ADDR_EXP 78
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sAI := false ;
12296: LD_ADDR_EXP 79
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sCargo := false ;
12304: LD_ADDR_EXP 82
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sDLaser := false ;
12312: LD_ADDR_EXP 83
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sExchange := false ;
12320: LD_ADDR_EXP 84
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sFac := false ;
12328: LD_ADDR_EXP 85
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sPower := false ;
12336: LD_ADDR_EXP 86
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sRandom := false ;
12344: LD_ADDR_EXP 87
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sShield := false ;
12352: LD_ADDR_EXP 88
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sTime := false ;
12360: LD_ADDR_EXP 89
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sTools := false ;
12368: LD_ADDR_EXP 90
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sSold := false ;
12376: LD_ADDR_EXP 55
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sDiff := false ;
12384: LD_ADDR_EXP 56
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sFog := false ;
12392: LD_ADDR_EXP 59
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sReset := false ;
12400: LD_ADDR_EXP 60
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sSun := false ;
12408: LD_ADDR_EXP 61
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sTiger := false ;
12416: LD_ADDR_EXP 57
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sBomb := false ;
12424: LD_ADDR_EXP 58
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sWound := false ;
12432: LD_ADDR_EXP 66
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sBetray := false ;
12440: LD_ADDR_EXP 70
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sContamin := false ;
12448: LD_ADDR_EXP 71
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sOil := false ;
12456: LD_ADDR_EXP 73
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sStu := false ;
12464: LD_ADDR_EXP 77
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sBazooka := false ;
12472: LD_ADDR_EXP 80
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sMortar := false ;
12480: LD_ADDR_EXP 81
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sRanger := false ;
12488: LD_ADDR_EXP 91
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sComputer := false ;
12496: LD_ADDR_EXP 92
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// s30 := false ;
12504: LD_ADDR_EXP 93
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// s60 := false ;
12512: LD_ADDR_EXP 94
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// end ;
12520: LD_VAR 0 1
12524: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12525: LD_INT 0
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
// result := [ ] ;
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: EMPTY
12538: ST_TO_ADDR
// if campaign_id = 1 then
12539: LD_OWVAR 69
12543: PUSH
12544: LD_INT 1
12546: EQUAL
12547: IFFALSE 15713
// begin case mission_number of 1 :
12549: LD_OWVAR 70
12553: PUSH
12554: LD_INT 1
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12638
12562: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: LD_INT 11
12576: PUSH
12577: LD_INT 12
12579: PUSH
12580: LD_INT 15
12582: PUSH
12583: LD_INT 16
12585: PUSH
12586: LD_INT 22
12588: PUSH
12589: LD_INT 23
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 101
12608: PUSH
12609: LD_INT 102
12611: PUSH
12612: LD_INT 106
12614: PUSH
12615: LD_INT 116
12617: PUSH
12618: LD_INT 117
12620: PUSH
12621: LD_INT 118
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: ST_TO_ADDR
12636: GO 15711
12638: LD_INT 2
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12730
12646: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 4
12657: PUSH
12658: LD_INT 11
12660: PUSH
12661: LD_INT 12
12663: PUSH
12664: LD_INT 15
12666: PUSH
12667: LD_INT 16
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 23
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 101
12692: PUSH
12693: LD_INT 102
12695: PUSH
12696: LD_INT 105
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 108
12704: PUSH
12705: LD_INT 116
12707: PUSH
12708: LD_INT 117
12710: PUSH
12711: LD_INT 118
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
12728: GO 15711
12730: LD_INT 3
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12826
12738: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_INT 2
12746: PUSH
12747: LD_INT 4
12749: PUSH
12750: LD_INT 5
12752: PUSH
12753: LD_INT 11
12755: PUSH
12756: LD_INT 12
12758: PUSH
12759: LD_INT 15
12761: PUSH
12762: LD_INT 16
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_INT 26
12770: PUSH
12771: LD_INT 36
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 101
12788: PUSH
12789: LD_INT 102
12791: PUSH
12792: LD_INT 105
12794: PUSH
12795: LD_INT 106
12797: PUSH
12798: LD_INT 108
12800: PUSH
12801: LD_INT 116
12803: PUSH
12804: LD_INT 117
12806: PUSH
12807: LD_INT 118
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
12824: GO 15711
12826: LD_INT 4
12828: DOUBLE
12829: EQUAL
12830: IFTRUE 12834
12832: GO 12930
12834: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12835: LD_ADDR_VAR 0 1
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 4
12845: PUSH
12846: LD_INT 5
12848: PUSH
12849: LD_INT 8
12851: PUSH
12852: LD_INT 11
12854: PUSH
12855: LD_INT 12
12857: PUSH
12858: LD_INT 15
12860: PUSH
12861: LD_INT 16
12863: PUSH
12864: LD_INT 22
12866: PUSH
12867: LD_INT 23
12869: PUSH
12870: LD_INT 26
12872: PUSH
12873: LD_INT 36
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 101
12892: PUSH
12893: LD_INT 102
12895: PUSH
12896: LD_INT 105
12898: PUSH
12899: LD_INT 106
12901: PUSH
12902: LD_INT 108
12904: PUSH
12905: LD_INT 116
12907: PUSH
12908: LD_INT 117
12910: PUSH
12911: LD_INT 118
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: ST_TO_ADDR
12928: GO 15711
12930: LD_INT 5
12932: DOUBLE
12933: EQUAL
12934: IFTRUE 12938
12936: GO 13050
12938: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: LD_INT 4
12949: PUSH
12950: LD_INT 5
12952: PUSH
12953: LD_INT 6
12955: PUSH
12956: LD_INT 8
12958: PUSH
12959: LD_INT 11
12961: PUSH
12962: LD_INT 12
12964: PUSH
12965: LD_INT 15
12967: PUSH
12968: LD_INT 16
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 23
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 26
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 101
13004: PUSH
13005: LD_INT 102
13007: PUSH
13008: LD_INT 105
13010: PUSH
13011: LD_INT 106
13013: PUSH
13014: LD_INT 108
13016: PUSH
13017: LD_INT 109
13019: PUSH
13020: LD_INT 112
13022: PUSH
13023: LD_INT 116
13025: PUSH
13026: LD_INT 117
13028: PUSH
13029: LD_INT 118
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 15711
13050: LD_INT 6
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13190
13058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: LD_INT 5
13072: PUSH
13073: LD_INT 6
13075: PUSH
13076: LD_INT 8
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 15
13087: PUSH
13088: LD_INT 16
13090: PUSH
13091: LD_INT 20
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_INT 23
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 31
13114: PUSH
13115: LD_INT 32
13117: PUSH
13118: LD_INT 36
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 101
13144: PUSH
13145: LD_INT 102
13147: PUSH
13148: LD_INT 105
13150: PUSH
13151: LD_INT 106
13153: PUSH
13154: LD_INT 108
13156: PUSH
13157: LD_INT 109
13159: PUSH
13160: LD_INT 112
13162: PUSH
13163: LD_INT 116
13165: PUSH
13166: LD_INT 117
13168: PUSH
13169: LD_INT 118
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 15711
13190: LD_INT 7
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13310
13198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13199: LD_ADDR_VAR 0 1
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: LD_INT 7
13215: PUSH
13216: LD_INT 11
13218: PUSH
13219: LD_INT 12
13221: PUSH
13222: LD_INT 15
13224: PUSH
13225: LD_INT 16
13227: PUSH
13228: LD_INT 20
13230: PUSH
13231: LD_INT 21
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_INT 23
13239: PUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 26
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 101
13264: PUSH
13265: LD_INT 102
13267: PUSH
13268: LD_INT 103
13270: PUSH
13271: LD_INT 105
13273: PUSH
13274: LD_INT 106
13276: PUSH
13277: LD_INT 108
13279: PUSH
13280: LD_INT 112
13282: PUSH
13283: LD_INT 116
13285: PUSH
13286: LD_INT 117
13288: PUSH
13289: LD_INT 118
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: ST_TO_ADDR
13308: GO 15711
13310: LD_INT 8
13312: DOUBLE
13313: EQUAL
13314: IFTRUE 13318
13316: GO 13458
13318: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13319: LD_ADDR_VAR 0 1
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 4
13329: PUSH
13330: LD_INT 5
13332: PUSH
13333: LD_INT 6
13335: PUSH
13336: LD_INT 7
13338: PUSH
13339: LD_INT 8
13341: PUSH
13342: LD_INT 11
13344: PUSH
13345: LD_INT 12
13347: PUSH
13348: LD_INT 15
13350: PUSH
13351: LD_INT 16
13353: PUSH
13354: LD_INT 20
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 23
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 26
13371: PUSH
13372: LD_INT 30
13374: PUSH
13375: LD_INT 31
13377: PUSH
13378: LD_INT 32
13380: PUSH
13381: LD_INT 36
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 101
13408: PUSH
13409: LD_INT 102
13411: PUSH
13412: LD_INT 103
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 109
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: LD_INT 116
13432: PUSH
13433: LD_INT 117
13435: PUSH
13436: LD_INT 118
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: ST_TO_ADDR
13456: GO 15711
13458: LD_INT 9
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13614
13466: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13467: LD_ADDR_VAR 0 1
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 4
13477: PUSH
13478: LD_INT 5
13480: PUSH
13481: LD_INT 6
13483: PUSH
13484: LD_INT 7
13486: PUSH
13487: LD_INT 8
13489: PUSH
13490: LD_INT 11
13492: PUSH
13493: LD_INT 12
13495: PUSH
13496: LD_INT 15
13498: PUSH
13499: LD_INT 16
13501: PUSH
13502: LD_INT 20
13504: PUSH
13505: LD_INT 21
13507: PUSH
13508: LD_INT 22
13510: PUSH
13511: LD_INT 23
13513: PUSH
13514: LD_INT 25
13516: PUSH
13517: LD_INT 26
13519: PUSH
13520: LD_INT 28
13522: PUSH
13523: LD_INT 30
13525: PUSH
13526: LD_INT 31
13528: PUSH
13529: LD_INT 32
13531: PUSH
13532: LD_INT 36
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 101
13560: PUSH
13561: LD_INT 102
13563: PUSH
13564: LD_INT 103
13566: PUSH
13567: LD_INT 105
13569: PUSH
13570: LD_INT 106
13572: PUSH
13573: LD_INT 108
13575: PUSH
13576: LD_INT 109
13578: PUSH
13579: LD_INT 112
13581: PUSH
13582: LD_INT 114
13584: PUSH
13585: LD_INT 116
13587: PUSH
13588: LD_INT 117
13590: PUSH
13591: LD_INT 118
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: ST_TO_ADDR
13612: GO 15711
13614: LD_INT 10
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13818
13622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: LD_INT 4
13633: PUSH
13634: LD_INT 5
13636: PUSH
13637: LD_INT 6
13639: PUSH
13640: LD_INT 7
13642: PUSH
13643: LD_INT 8
13645: PUSH
13646: LD_INT 9
13648: PUSH
13649: LD_INT 10
13651: PUSH
13652: LD_INT 11
13654: PUSH
13655: LD_INT 12
13657: PUSH
13658: LD_INT 13
13660: PUSH
13661: LD_INT 14
13663: PUSH
13664: LD_INT 15
13666: PUSH
13667: LD_INT 16
13669: PUSH
13670: LD_INT 17
13672: PUSH
13673: LD_INT 18
13675: PUSH
13676: LD_INT 19
13678: PUSH
13679: LD_INT 20
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 22
13687: PUSH
13688: LD_INT 23
13690: PUSH
13691: LD_INT 24
13693: PUSH
13694: LD_INT 25
13696: PUSH
13697: LD_INT 26
13699: PUSH
13700: LD_INT 28
13702: PUSH
13703: LD_INT 30
13705: PUSH
13706: LD_INT 31
13708: PUSH
13709: LD_INT 32
13711: PUSH
13712: LD_INT 36
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 101
13748: PUSH
13749: LD_INT 102
13751: PUSH
13752: LD_INT 103
13754: PUSH
13755: LD_INT 104
13757: PUSH
13758: LD_INT 105
13760: PUSH
13761: LD_INT 106
13763: PUSH
13764: LD_INT 107
13766: PUSH
13767: LD_INT 108
13769: PUSH
13770: LD_INT 109
13772: PUSH
13773: LD_INT 110
13775: PUSH
13776: LD_INT 111
13778: PUSH
13779: LD_INT 112
13781: PUSH
13782: LD_INT 114
13784: PUSH
13785: LD_INT 116
13787: PUSH
13788: LD_INT 117
13790: PUSH
13791: LD_INT 118
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: ST_TO_ADDR
13816: GO 15711
13818: LD_INT 11
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 14030
13826: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13827: LD_ADDR_VAR 0 1
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 3
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 6
13846: PUSH
13847: LD_INT 7
13849: PUSH
13850: LD_INT 8
13852: PUSH
13853: LD_INT 9
13855: PUSH
13856: LD_INT 10
13858: PUSH
13859: LD_INT 11
13861: PUSH
13862: LD_INT 12
13864: PUSH
13865: LD_INT 13
13867: PUSH
13868: LD_INT 14
13870: PUSH
13871: LD_INT 15
13873: PUSH
13874: LD_INT 16
13876: PUSH
13877: LD_INT 17
13879: PUSH
13880: LD_INT 18
13882: PUSH
13883: LD_INT 19
13885: PUSH
13886: LD_INT 20
13888: PUSH
13889: LD_INT 21
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_INT 23
13897: PUSH
13898: LD_INT 24
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 26
13906: PUSH
13907: LD_INT 28
13909: PUSH
13910: LD_INT 30
13912: PUSH
13913: LD_INT 31
13915: PUSH
13916: LD_INT 32
13918: PUSH
13919: LD_INT 34
13921: PUSH
13922: LD_INT 36
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 101
13960: PUSH
13961: LD_INT 102
13963: PUSH
13964: LD_INT 103
13966: PUSH
13967: LD_INT 104
13969: PUSH
13970: LD_INT 105
13972: PUSH
13973: LD_INT 106
13975: PUSH
13976: LD_INT 107
13978: PUSH
13979: LD_INT 108
13981: PUSH
13982: LD_INT 109
13984: PUSH
13985: LD_INT 110
13987: PUSH
13988: LD_INT 111
13990: PUSH
13991: LD_INT 112
13993: PUSH
13994: LD_INT 114
13996: PUSH
13997: LD_INT 116
13999: PUSH
14000: LD_INT 117
14002: PUSH
14003: LD_INT 118
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: ST_TO_ADDR
14028: GO 15711
14030: LD_INT 12
14032: DOUBLE
14033: EQUAL
14034: IFTRUE 14038
14036: GO 14258
14038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_INT 1
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: LD_INT 4
14055: PUSH
14056: LD_INT 5
14058: PUSH
14059: LD_INT 6
14061: PUSH
14062: LD_INT 7
14064: PUSH
14065: LD_INT 8
14067: PUSH
14068: LD_INT 9
14070: PUSH
14071: LD_INT 10
14073: PUSH
14074: LD_INT 11
14076: PUSH
14077: LD_INT 12
14079: PUSH
14080: LD_INT 13
14082: PUSH
14083: LD_INT 14
14085: PUSH
14086: LD_INT 15
14088: PUSH
14089: LD_INT 16
14091: PUSH
14092: LD_INT 17
14094: PUSH
14095: LD_INT 18
14097: PUSH
14098: LD_INT 19
14100: PUSH
14101: LD_INT 20
14103: PUSH
14104: LD_INT 21
14106: PUSH
14107: LD_INT 22
14109: PUSH
14110: LD_INT 23
14112: PUSH
14113: LD_INT 24
14115: PUSH
14116: LD_INT 25
14118: PUSH
14119: LD_INT 26
14121: PUSH
14122: LD_INT 27
14124: PUSH
14125: LD_INT 28
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 31
14133: PUSH
14134: LD_INT 32
14136: PUSH
14137: LD_INT 33
14139: PUSH
14140: LD_INT 34
14142: PUSH
14143: LD_INT 36
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 101
14184: PUSH
14185: LD_INT 102
14187: PUSH
14188: LD_INT 103
14190: PUSH
14191: LD_INT 104
14193: PUSH
14194: LD_INT 105
14196: PUSH
14197: LD_INT 106
14199: PUSH
14200: LD_INT 107
14202: PUSH
14203: LD_INT 108
14205: PUSH
14206: LD_INT 109
14208: PUSH
14209: LD_INT 110
14211: PUSH
14212: LD_INT 111
14214: PUSH
14215: LD_INT 112
14217: PUSH
14218: LD_INT 113
14220: PUSH
14221: LD_INT 114
14223: PUSH
14224: LD_INT 116
14226: PUSH
14227: LD_INT 117
14229: PUSH
14230: LD_INT 118
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 15711
14258: LD_INT 13
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14474
14266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 4
14283: PUSH
14284: LD_INT 5
14286: PUSH
14287: LD_INT 8
14289: PUSH
14290: LD_INT 9
14292: PUSH
14293: LD_INT 10
14295: PUSH
14296: LD_INT 11
14298: PUSH
14299: LD_INT 12
14301: PUSH
14302: LD_INT 14
14304: PUSH
14305: LD_INT 15
14307: PUSH
14308: LD_INT 16
14310: PUSH
14311: LD_INT 17
14313: PUSH
14314: LD_INT 18
14316: PUSH
14317: LD_INT 19
14319: PUSH
14320: LD_INT 20
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 23
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 26
14340: PUSH
14341: LD_INT 27
14343: PUSH
14344: LD_INT 28
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 31
14352: PUSH
14353: LD_INT 32
14355: PUSH
14356: LD_INT 33
14358: PUSH
14359: LD_INT 34
14361: PUSH
14362: LD_INT 36
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 101
14400: PUSH
14401: LD_INT 102
14403: PUSH
14404: LD_INT 103
14406: PUSH
14407: LD_INT 104
14409: PUSH
14410: LD_INT 105
14412: PUSH
14413: LD_INT 106
14415: PUSH
14416: LD_INT 107
14418: PUSH
14419: LD_INT 108
14421: PUSH
14422: LD_INT 109
14424: PUSH
14425: LD_INT 110
14427: PUSH
14428: LD_INT 111
14430: PUSH
14431: LD_INT 112
14433: PUSH
14434: LD_INT 113
14436: PUSH
14437: LD_INT 114
14439: PUSH
14440: LD_INT 116
14442: PUSH
14443: LD_INT 117
14445: PUSH
14446: LD_INT 118
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 15711
14474: LD_INT 14
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14706
14482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14483: LD_ADDR_VAR 0 1
14487: PUSH
14488: LD_INT 1
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: LD_INT 4
14499: PUSH
14500: LD_INT 5
14502: PUSH
14503: LD_INT 6
14505: PUSH
14506: LD_INT 7
14508: PUSH
14509: LD_INT 8
14511: PUSH
14512: LD_INT 9
14514: PUSH
14515: LD_INT 10
14517: PUSH
14518: LD_INT 11
14520: PUSH
14521: LD_INT 12
14523: PUSH
14524: LD_INT 13
14526: PUSH
14527: LD_INT 14
14529: PUSH
14530: LD_INT 15
14532: PUSH
14533: LD_INT 16
14535: PUSH
14536: LD_INT 17
14538: PUSH
14539: LD_INT 18
14541: PUSH
14542: LD_INT 19
14544: PUSH
14545: LD_INT 20
14547: PUSH
14548: LD_INT 21
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_INT 23
14556: PUSH
14557: LD_INT 24
14559: PUSH
14560: LD_INT 25
14562: PUSH
14563: LD_INT 26
14565: PUSH
14566: LD_INT 27
14568: PUSH
14569: LD_INT 28
14571: PUSH
14572: LD_INT 29
14574: PUSH
14575: LD_INT 30
14577: PUSH
14578: LD_INT 31
14580: PUSH
14581: LD_INT 32
14583: PUSH
14584: LD_INT 33
14586: PUSH
14587: LD_INT 34
14589: PUSH
14590: LD_INT 36
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 101
14632: PUSH
14633: LD_INT 102
14635: PUSH
14636: LD_INT 103
14638: PUSH
14639: LD_INT 104
14641: PUSH
14642: LD_INT 105
14644: PUSH
14645: LD_INT 106
14647: PUSH
14648: LD_INT 107
14650: PUSH
14651: LD_INT 108
14653: PUSH
14654: LD_INT 109
14656: PUSH
14657: LD_INT 110
14659: PUSH
14660: LD_INT 111
14662: PUSH
14663: LD_INT 112
14665: PUSH
14666: LD_INT 113
14668: PUSH
14669: LD_INT 114
14671: PUSH
14672: LD_INT 116
14674: PUSH
14675: LD_INT 117
14677: PUSH
14678: LD_INT 118
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: ST_TO_ADDR
14704: GO 15711
14706: LD_INT 15
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14938
14714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: LD_INT 3
14728: PUSH
14729: LD_INT 4
14731: PUSH
14732: LD_INT 5
14734: PUSH
14735: LD_INT 6
14737: PUSH
14738: LD_INT 7
14740: PUSH
14741: LD_INT 8
14743: PUSH
14744: LD_INT 9
14746: PUSH
14747: LD_INT 10
14749: PUSH
14750: LD_INT 11
14752: PUSH
14753: LD_INT 12
14755: PUSH
14756: LD_INT 13
14758: PUSH
14759: LD_INT 14
14761: PUSH
14762: LD_INT 15
14764: PUSH
14765: LD_INT 16
14767: PUSH
14768: LD_INT 17
14770: PUSH
14771: LD_INT 18
14773: PUSH
14774: LD_INT 19
14776: PUSH
14777: LD_INT 20
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 24
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 26
14797: PUSH
14798: LD_INT 27
14800: PUSH
14801: LD_INT 28
14803: PUSH
14804: LD_INT 29
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 31
14812: PUSH
14813: LD_INT 32
14815: PUSH
14816: LD_INT 33
14818: PUSH
14819: LD_INT 34
14821: PUSH
14822: LD_INT 36
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 101
14864: PUSH
14865: LD_INT 102
14867: PUSH
14868: LD_INT 103
14870: PUSH
14871: LD_INT 104
14873: PUSH
14874: LD_INT 105
14876: PUSH
14877: LD_INT 106
14879: PUSH
14880: LD_INT 107
14882: PUSH
14883: LD_INT 108
14885: PUSH
14886: LD_INT 109
14888: PUSH
14889: LD_INT 110
14891: PUSH
14892: LD_INT 111
14894: PUSH
14895: LD_INT 112
14897: PUSH
14898: LD_INT 113
14900: PUSH
14901: LD_INT 114
14903: PUSH
14904: LD_INT 116
14906: PUSH
14907: LD_INT 117
14909: PUSH
14910: LD_INT 118
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: ST_TO_ADDR
14936: GO 15711
14938: LD_INT 16
14940: DOUBLE
14941: EQUAL
14942: IFTRUE 14946
14944: GO 15082
14946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: LD_INT 2
14954: PUSH
14955: LD_INT 4
14957: PUSH
14958: LD_INT 5
14960: PUSH
14961: LD_INT 7
14963: PUSH
14964: LD_INT 11
14966: PUSH
14967: LD_INT 12
14969: PUSH
14970: LD_INT 15
14972: PUSH
14973: LD_INT 16
14975: PUSH
14976: LD_INT 20
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 22
14984: PUSH
14985: LD_INT 23
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 26
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 31
14999: PUSH
15000: LD_INT 32
15002: PUSH
15003: LD_INT 33
15005: PUSH
15006: LD_INT 34
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 101
15032: PUSH
15033: LD_INT 102
15035: PUSH
15036: LD_INT 103
15038: PUSH
15039: LD_INT 106
15041: PUSH
15042: LD_INT 108
15044: PUSH
15045: LD_INT 112
15047: PUSH
15048: LD_INT 113
15050: PUSH
15051: LD_INT 114
15053: PUSH
15054: LD_INT 116
15056: PUSH
15057: LD_INT 117
15059: PUSH
15060: LD_INT 118
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: ST_TO_ADDR
15080: GO 15711
15082: LD_INT 17
15084: DOUBLE
15085: EQUAL
15086: IFTRUE 15090
15088: GO 15314
15090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15091: LD_ADDR_VAR 0 1
15095: PUSH
15096: LD_INT 1
15098: PUSH
15099: LD_INT 2
15101: PUSH
15102: LD_INT 3
15104: PUSH
15105: LD_INT 4
15107: PUSH
15108: LD_INT 5
15110: PUSH
15111: LD_INT 6
15113: PUSH
15114: LD_INT 7
15116: PUSH
15117: LD_INT 8
15119: PUSH
15120: LD_INT 9
15122: PUSH
15123: LD_INT 10
15125: PUSH
15126: LD_INT 11
15128: PUSH
15129: LD_INT 12
15131: PUSH
15132: LD_INT 13
15134: PUSH
15135: LD_INT 14
15137: PUSH
15138: LD_INT 15
15140: PUSH
15141: LD_INT 16
15143: PUSH
15144: LD_INT 17
15146: PUSH
15147: LD_INT 18
15149: PUSH
15150: LD_INT 19
15152: PUSH
15153: LD_INT 20
15155: PUSH
15156: LD_INT 21
15158: PUSH
15159: LD_INT 22
15161: PUSH
15162: LD_INT 23
15164: PUSH
15165: LD_INT 24
15167: PUSH
15168: LD_INT 25
15170: PUSH
15171: LD_INT 26
15173: PUSH
15174: LD_INT 27
15176: PUSH
15177: LD_INT 28
15179: PUSH
15180: LD_INT 29
15182: PUSH
15183: LD_INT 30
15185: PUSH
15186: LD_INT 31
15188: PUSH
15189: LD_INT 32
15191: PUSH
15192: LD_INT 33
15194: PUSH
15195: LD_INT 34
15197: PUSH
15198: LD_INT 36
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 101
15240: PUSH
15241: LD_INT 102
15243: PUSH
15244: LD_INT 103
15246: PUSH
15247: LD_INT 104
15249: PUSH
15250: LD_INT 105
15252: PUSH
15253: LD_INT 106
15255: PUSH
15256: LD_INT 107
15258: PUSH
15259: LD_INT 108
15261: PUSH
15262: LD_INT 109
15264: PUSH
15265: LD_INT 110
15267: PUSH
15268: LD_INT 111
15270: PUSH
15271: LD_INT 112
15273: PUSH
15274: LD_INT 113
15276: PUSH
15277: LD_INT 114
15279: PUSH
15280: LD_INT 116
15282: PUSH
15283: LD_INT 117
15285: PUSH
15286: LD_INT 118
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: ST_TO_ADDR
15312: GO 15711
15314: LD_INT 18
15316: DOUBLE
15317: EQUAL
15318: IFTRUE 15322
15320: GO 15470
15322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15323: LD_ADDR_VAR 0 1
15327: PUSH
15328: LD_INT 2
15330: PUSH
15331: LD_INT 4
15333: PUSH
15334: LD_INT 5
15336: PUSH
15337: LD_INT 7
15339: PUSH
15340: LD_INT 11
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: LD_INT 15
15348: PUSH
15349: LD_INT 16
15351: PUSH
15352: LD_INT 20
15354: PUSH
15355: LD_INT 21
15357: PUSH
15358: LD_INT 22
15360: PUSH
15361: LD_INT 23
15363: PUSH
15364: LD_INT 25
15366: PUSH
15367: LD_INT 26
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: LD_INT 31
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: LD_INT 34
15384: PUSH
15385: LD_INT 35
15387: PUSH
15388: LD_INT 36
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 101
15416: PUSH
15417: LD_INT 102
15419: PUSH
15420: LD_INT 103
15422: PUSH
15423: LD_INT 106
15425: PUSH
15426: LD_INT 108
15428: PUSH
15429: LD_INT 112
15431: PUSH
15432: LD_INT 113
15434: PUSH
15435: LD_INT 114
15437: PUSH
15438: LD_INT 115
15440: PUSH
15441: LD_INT 116
15443: PUSH
15444: LD_INT 117
15446: PUSH
15447: LD_INT 118
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: ST_TO_ADDR
15468: GO 15711
15470: LD_INT 19
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15710
15478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15479: LD_ADDR_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: LD_INT 4
15495: PUSH
15496: LD_INT 5
15498: PUSH
15499: LD_INT 6
15501: PUSH
15502: LD_INT 7
15504: PUSH
15505: LD_INT 8
15507: PUSH
15508: LD_INT 9
15510: PUSH
15511: LD_INT 10
15513: PUSH
15514: LD_INT 11
15516: PUSH
15517: LD_INT 12
15519: PUSH
15520: LD_INT 13
15522: PUSH
15523: LD_INT 14
15525: PUSH
15526: LD_INT 15
15528: PUSH
15529: LD_INT 16
15531: PUSH
15532: LD_INT 17
15534: PUSH
15535: LD_INT 18
15537: PUSH
15538: LD_INT 19
15540: PUSH
15541: LD_INT 20
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 23
15552: PUSH
15553: LD_INT 24
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 26
15561: PUSH
15562: LD_INT 27
15564: PUSH
15565: LD_INT 28
15567: PUSH
15568: LD_INT 29
15570: PUSH
15571: LD_INT 30
15573: PUSH
15574: LD_INT 31
15576: PUSH
15577: LD_INT 32
15579: PUSH
15580: LD_INT 33
15582: PUSH
15583: LD_INT 34
15585: PUSH
15586: LD_INT 35
15588: PUSH
15589: LD_INT 36
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 101
15632: PUSH
15633: LD_INT 102
15635: PUSH
15636: LD_INT 103
15638: PUSH
15639: LD_INT 104
15641: PUSH
15642: LD_INT 105
15644: PUSH
15645: LD_INT 106
15647: PUSH
15648: LD_INT 107
15650: PUSH
15651: LD_INT 108
15653: PUSH
15654: LD_INT 109
15656: PUSH
15657: LD_INT 110
15659: PUSH
15660: LD_INT 111
15662: PUSH
15663: LD_INT 112
15665: PUSH
15666: LD_INT 113
15668: PUSH
15669: LD_INT 114
15671: PUSH
15672: LD_INT 115
15674: PUSH
15675: LD_INT 116
15677: PUSH
15678: LD_INT 117
15680: PUSH
15681: LD_INT 118
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: ST_TO_ADDR
15708: GO 15711
15710: POP
// end else
15711: GO 15942
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15713: LD_ADDR_VAR 0 1
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: LD_INT 6
15735: PUSH
15736: LD_INT 7
15738: PUSH
15739: LD_INT 8
15741: PUSH
15742: LD_INT 9
15744: PUSH
15745: LD_INT 10
15747: PUSH
15748: LD_INT 11
15750: PUSH
15751: LD_INT 12
15753: PUSH
15754: LD_INT 13
15756: PUSH
15757: LD_INT 14
15759: PUSH
15760: LD_INT 15
15762: PUSH
15763: LD_INT 16
15765: PUSH
15766: LD_INT 17
15768: PUSH
15769: LD_INT 18
15771: PUSH
15772: LD_INT 19
15774: PUSH
15775: LD_INT 20
15777: PUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_INT 23
15786: PUSH
15787: LD_INT 24
15789: PUSH
15790: LD_INT 25
15792: PUSH
15793: LD_INT 26
15795: PUSH
15796: LD_INT 27
15798: PUSH
15799: LD_INT 28
15801: PUSH
15802: LD_INT 29
15804: PUSH
15805: LD_INT 30
15807: PUSH
15808: LD_INT 31
15810: PUSH
15811: LD_INT 32
15813: PUSH
15814: LD_INT 33
15816: PUSH
15817: LD_INT 34
15819: PUSH
15820: LD_INT 35
15822: PUSH
15823: LD_INT 36
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 101
15866: PUSH
15867: LD_INT 102
15869: PUSH
15870: LD_INT 103
15872: PUSH
15873: LD_INT 104
15875: PUSH
15876: LD_INT 105
15878: PUSH
15879: LD_INT 106
15881: PUSH
15882: LD_INT 107
15884: PUSH
15885: LD_INT 108
15887: PUSH
15888: LD_INT 109
15890: PUSH
15891: LD_INT 110
15893: PUSH
15894: LD_INT 111
15896: PUSH
15897: LD_INT 112
15899: PUSH
15900: LD_INT 113
15902: PUSH
15903: LD_INT 114
15905: PUSH
15906: LD_INT 115
15908: PUSH
15909: LD_INT 116
15911: PUSH
15912: LD_INT 117
15914: PUSH
15915: LD_INT 118
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: ST_TO_ADDR
// if result then
15942: LD_VAR 0 1
15946: IFFALSE 16235
// begin normal :=  ;
15948: LD_ADDR_VAR 0 3
15952: PUSH
15953: LD_STRING 
15955: ST_TO_ADDR
// hardcore :=  ;
15956: LD_ADDR_VAR 0 4
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// for i = 1 to normalCounter do
15964: LD_ADDR_VAR 0 5
15968: PUSH
15969: DOUBLE
15970: LD_INT 1
15972: DEC
15973: ST_TO_ADDR
15974: LD_EXP 39
15978: PUSH
15979: FOR_TO
15980: IFFALSE 16081
// begin tmp := 0 ;
15982: LD_ADDR_VAR 0 2
15986: PUSH
15987: LD_STRING 0
15989: ST_TO_ADDR
// if result [ 1 ] then
15990: LD_VAR 0 1
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: IFFALSE 16063
// if result [ 1 ] [ 1 ] = i then
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PUSH
16013: LD_VAR 0 5
16017: EQUAL
16018: IFFALSE 16063
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: LD_VAR 0 1
16037: PUSH
16038: LD_INT 1
16040: ARRAY
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 3
16049: PPUSH
16050: CALL_OW 1
16054: ST_TO_ADDR
// tmp := 1 ;
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: LD_STRING 1
16062: ST_TO_ADDR
// end ; normal := normal & tmp ;
16063: LD_ADDR_VAR 0 3
16067: PUSH
16068: LD_VAR 0 3
16072: PUSH
16073: LD_VAR 0 2
16077: STR
16078: ST_TO_ADDR
// end ;
16079: GO 15979
16081: POP
16082: POP
// for i = 1 to hardcoreCounter do
16083: LD_ADDR_VAR 0 5
16087: PUSH
16088: DOUBLE
16089: LD_INT 1
16091: DEC
16092: ST_TO_ADDR
16093: LD_EXP 40
16097: PUSH
16098: FOR_TO
16099: IFFALSE 16204
// begin tmp := 0 ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_STRING 0
16108: ST_TO_ADDR
// if result [ 2 ] then
16109: LD_VAR 0 1
16113: PUSH
16114: LD_INT 2
16116: ARRAY
16117: IFFALSE 16186
// if result [ 2 ] [ 1 ] = 100 + i then
16119: LD_VAR 0 1
16123: PUSH
16124: LD_INT 2
16126: ARRAY
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PUSH
16132: LD_INT 100
16134: PUSH
16135: LD_VAR 0 5
16139: PLUS
16140: EQUAL
16141: IFFALSE 16186
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16143: LD_ADDR_VAR 0 1
16147: PUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_INT 2
16155: PPUSH
16156: LD_VAR 0 1
16160: PUSH
16161: LD_INT 2
16163: ARRAY
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 3
16172: PPUSH
16173: CALL_OW 1
16177: ST_TO_ADDR
// tmp := 1 ;
16178: LD_ADDR_VAR 0 2
16182: PUSH
16183: LD_STRING 1
16185: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16186: LD_ADDR_VAR 0 4
16190: PUSH
16191: LD_VAR 0 4
16195: PUSH
16196: LD_VAR 0 2
16200: STR
16201: ST_TO_ADDR
// end ;
16202: GO 16098
16204: POP
16205: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16206: LD_STRING getStreamItemsFromMission("
16208: PUSH
16209: LD_VAR 0 3
16213: STR
16214: PUSH
16215: LD_STRING ","
16217: STR
16218: PUSH
16219: LD_VAR 0 4
16223: STR
16224: PUSH
16225: LD_STRING ")
16227: STR
16228: PPUSH
16229: CALL_OW 559
// end else
16233: GO 16242
// ToLua ( getStreamItemsFromMission("","") ) ;
16235: LD_STRING getStreamItemsFromMission("","")
16237: PPUSH
16238: CALL_OW 559
// end ;
16242: LD_VAR 0 1
16246: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16247: LD_EXP 38
16251: PUSH
16252: LD_EXP 43
16256: AND
16257: IFFALSE 16381
16259: GO 16261
16261: DISABLE
16262: LD_INT 0
16264: PPUSH
16265: PPUSH
// begin enable ;
16266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16267: LD_ADDR_VAR 0 2
16271: PUSH
16272: LD_INT 22
16274: PUSH
16275: LD_OWVAR 2
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 34
16289: PUSH
16290: LD_INT 7
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 34
16299: PUSH
16300: LD_INT 45
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 34
16309: PUSH
16310: LD_INT 28
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 47
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PPUSH
16338: CALL_OW 69
16342: ST_TO_ADDR
// if not tmp then
16343: LD_VAR 0 2
16347: NOT
16348: IFFALSE 16352
// exit ;
16350: GO 16381
// for i in tmp do
16352: LD_ADDR_VAR 0 1
16356: PUSH
16357: LD_VAR 0 2
16361: PUSH
16362: FOR_IN
16363: IFFALSE 16379
// begin SetLives ( i , 0 ) ;
16365: LD_VAR 0 1
16369: PPUSH
16370: LD_INT 0
16372: PPUSH
16373: CALL_OW 234
// end ;
16377: GO 16362
16379: POP
16380: POP
// end ;
16381: PPOPN 2
16383: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16384: LD_EXP 38
16388: PUSH
16389: LD_EXP 44
16393: AND
16394: IFFALSE 16478
16396: GO 16398
16398: DISABLE
16399: LD_INT 0
16401: PPUSH
16402: PPUSH
// begin enable ;
16403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_OWVAR 2
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 32
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PPUSH
16435: CALL_OW 69
16439: ST_TO_ADDR
// if not tmp then
16440: LD_VAR 0 2
16444: NOT
16445: IFFALSE 16449
// exit ;
16447: GO 16478
// for i in tmp do
16449: LD_ADDR_VAR 0 1
16453: PUSH
16454: LD_VAR 0 2
16458: PUSH
16459: FOR_IN
16460: IFFALSE 16476
// begin SetLives ( i , 0 ) ;
16462: LD_VAR 0 1
16466: PPUSH
16467: LD_INT 0
16469: PPUSH
16470: CALL_OW 234
// end ;
16474: GO 16459
16476: POP
16477: POP
// end ;
16478: PPOPN 2
16480: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16481: LD_EXP 38
16485: PUSH
16486: LD_EXP 41
16490: AND
16491: IFFALSE 16584
16493: GO 16495
16495: DISABLE
16496: LD_INT 0
16498: PPUSH
// begin enable ;
16499: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_OWVAR 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 25
16522: PUSH
16523: LD_INT 5
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 25
16532: PUSH
16533: LD_INT 9
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: PUSH
16565: FOR_IN
16566: IFFALSE 16582
// begin SetClass ( i , 1 ) ;
16568: LD_VAR 0 1
16572: PPUSH
16573: LD_INT 1
16575: PPUSH
16576: CALL_OW 336
// end ;
16580: GO 16565
16582: POP
16583: POP
// end ;
16584: PPOPN 1
16586: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16587: LD_EXP 38
16591: PUSH
16592: LD_EXP 42
16596: AND
16597: PUSH
16598: LD_OWVAR 65
16602: PUSH
16603: LD_INT 7
16605: LESS
16606: AND
16607: IFFALSE 16621
16609: GO 16611
16611: DISABLE
// begin enable ;
16612: ENABLE
// game_speed := 7 ;
16613: LD_ADDR_OWVAR 65
16617: PUSH
16618: LD_INT 7
16620: ST_TO_ADDR
// end ;
16621: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16622: LD_EXP 38
16626: PUSH
16627: LD_EXP 45
16631: AND
16632: IFFALSE 16834
16634: GO 16636
16636: DISABLE
16637: LD_INT 0
16639: PPUSH
16640: PPUSH
16641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16642: LD_ADDR_VAR 0 3
16646: PUSH
16647: LD_INT 81
16649: PUSH
16650: LD_OWVAR 2
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 21
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 69
16677: ST_TO_ADDR
// if not tmp then
16678: LD_VAR 0 3
16682: NOT
16683: IFFALSE 16687
// exit ;
16685: GO 16834
// if tmp > 5 then
16687: LD_VAR 0 3
16691: PUSH
16692: LD_INT 5
16694: GREATER
16695: IFFALSE 16707
// k := 5 else
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_INT 5
16704: ST_TO_ADDR
16705: GO 16717
// k := tmp ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_VAR 0 3
16716: ST_TO_ADDR
// for i := 1 to k do
16717: LD_ADDR_VAR 0 1
16721: PUSH
16722: DOUBLE
16723: LD_INT 1
16725: DEC
16726: ST_TO_ADDR
16727: LD_VAR 0 2
16731: PUSH
16732: FOR_TO
16733: IFFALSE 16832
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16735: LD_VAR 0 3
16739: PUSH
16740: LD_VAR 0 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 1
16750: PUSH
16751: LD_INT 4
16753: MOD
16754: PUSH
16755: LD_INT 1
16757: PLUS
16758: PPUSH
16759: CALL_OW 259
16763: PUSH
16764: LD_INT 10
16766: LESS
16767: IFFALSE 16830
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16769: LD_VAR 0 3
16773: PUSH
16774: LD_VAR 0 1
16778: ARRAY
16779: PPUSH
16780: LD_VAR 0 1
16784: PUSH
16785: LD_INT 4
16787: MOD
16788: PUSH
16789: LD_INT 1
16791: PLUS
16792: PPUSH
16793: LD_VAR 0 3
16797: PUSH
16798: LD_VAR 0 1
16802: ARRAY
16803: PPUSH
16804: LD_VAR 0 1
16808: PUSH
16809: LD_INT 4
16811: MOD
16812: PUSH
16813: LD_INT 1
16815: PLUS
16816: PPUSH
16817: CALL_OW 259
16821: PUSH
16822: LD_INT 1
16824: PLUS
16825: PPUSH
16826: CALL_OW 237
16830: GO 16732
16832: POP
16833: POP
// end ;
16834: PPOPN 3
16836: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16837: LD_EXP 38
16841: PUSH
16842: LD_EXP 46
16846: AND
16847: IFFALSE 16867
16849: GO 16851
16851: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16852: LD_INT 4
16854: PPUSH
16855: LD_OWVAR 2
16859: PPUSH
16860: LD_INT 0
16862: PPUSH
16863: CALL_OW 324
16867: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16868: LD_EXP 38
16872: PUSH
16873: LD_EXP 75
16877: AND
16878: IFFALSE 16898
16880: GO 16882
16882: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16883: LD_INT 19
16885: PPUSH
16886: LD_OWVAR 2
16890: PPUSH
16891: LD_INT 0
16893: PPUSH
16894: CALL_OW 324
16898: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16899: LD_EXP 38
16903: PUSH
16904: LD_EXP 47
16908: AND
16909: IFFALSE 17011
16911: GO 16913
16913: DISABLE
16914: LD_INT 0
16916: PPUSH
16917: PPUSH
// begin enable ;
16918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: LD_INT 34
16941: PUSH
16942: LD_INT 11
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 34
16951: PUSH
16952: LD_INT 30
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// if not tmp then
16973: LD_VAR 0 2
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17011
// for i in tmp do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_VAR 0 2
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17009
// begin SetLives ( i , 0 ) ;
16995: LD_VAR 0 1
16999: PPUSH
17000: LD_INT 0
17002: PPUSH
17003: CALL_OW 234
// end ;
17007: GO 16992
17009: POP
17010: POP
// end ;
17011: PPOPN 2
17013: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17014: LD_EXP 38
17018: PUSH
17019: LD_EXP 48
17023: AND
17024: IFFALSE 17044
17026: GO 17028
17028: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17029: LD_INT 32
17031: PPUSH
17032: LD_OWVAR 2
17036: PPUSH
17037: LD_INT 0
17039: PPUSH
17040: CALL_OW 324
17044: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17045: LD_EXP 38
17049: PUSH
17050: LD_EXP 49
17054: AND
17055: IFFALSE 17236
17057: GO 17059
17059: DISABLE
17060: LD_INT 0
17062: PPUSH
17063: PPUSH
17064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17065: LD_ADDR_VAR 0 2
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_OWVAR 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 33
17084: PUSH
17085: LD_INT 3
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PPUSH
17096: CALL_OW 69
17100: ST_TO_ADDR
// if not tmp then
17101: LD_VAR 0 2
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17236
// side := 0 ;
17110: LD_ADDR_VAR 0 3
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// for i := 1 to 8 do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: DOUBLE
17124: LD_INT 1
17126: DEC
17127: ST_TO_ADDR
17128: LD_INT 8
17130: PUSH
17131: FOR_TO
17132: IFFALSE 17180
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17134: LD_OWVAR 2
17138: PUSH
17139: LD_VAR 0 1
17143: NONEQUAL
17144: PUSH
17145: LD_OWVAR 2
17149: PPUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 81
17159: PUSH
17160: LD_INT 2
17162: EQUAL
17163: AND
17164: IFFALSE 17178
// begin side := i ;
17166: LD_ADDR_VAR 0 3
17170: PUSH
17171: LD_VAR 0 1
17175: ST_TO_ADDR
// break ;
17176: GO 17180
// end ;
17178: GO 17131
17180: POP
17181: POP
// if not side then
17182: LD_VAR 0 3
17186: NOT
17187: IFFALSE 17191
// exit ;
17189: GO 17236
// for i := 1 to tmp do
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: DOUBLE
17197: LD_INT 1
17199: DEC
17200: ST_TO_ADDR
17201: LD_VAR 0 2
17205: PUSH
17206: FOR_TO
17207: IFFALSE 17234
// if Prob ( 60 ) then
17209: LD_INT 60
17211: PPUSH
17212: CALL_OW 13
17216: IFFALSE 17232
// SetSide ( i , side ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_VAR 0 3
17227: PPUSH
17228: CALL_OW 235
17232: GO 17206
17234: POP
17235: POP
// end ;
17236: PPOPN 3
17238: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17239: LD_EXP 38
17243: PUSH
17244: LD_EXP 51
17248: AND
17249: IFFALSE 17368
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_OWVAR 2
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 23
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: PUSH
17311: FOR_IN
17312: IFFALSE 17366
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17314: LD_VAR 0 1
17318: PPUSH
17319: CALL_OW 257
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: LD_INT 4
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: IN
17342: IFFALSE 17364
// SetClass ( un , rand ( 1 , 4 ) ) ;
17344: LD_VAR 0 1
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: LD_INT 4
17354: PPUSH
17355: CALL_OW 12
17359: PPUSH
17360: CALL_OW 336
17364: GO 17311
17366: POP
17367: POP
// end ;
17368: PPOPN 1
17370: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17371: LD_EXP 38
17375: PUSH
17376: LD_EXP 50
17380: AND
17381: IFFALSE 17460
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17389: LD_ADDR_VAR 0 1
17393: PUSH
17394: LD_INT 22
17396: PUSH
17397: LD_OWVAR 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 21
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not tmp then
17425: LD_VAR 0 1
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 1
17441: PPUSH
17442: LD_VAR 0 1
17446: PPUSH
17447: CALL_OW 12
17451: ARRAY
17452: PPUSH
17453: LD_INT 100
17455: PPUSH
17456: CALL_OW 234
// end ;
17460: PPOPN 1
17462: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17463: LD_EXP 38
17467: PUSH
17468: LD_EXP 52
17472: AND
17473: IFFALSE 17571
17475: GO 17477
17477: DISABLE
17478: LD_INT 0
17480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_INT 22
17488: PUSH
17489: LD_OWVAR 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 21
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: ST_TO_ADDR
// if not tmp then
17517: LD_VAR 0 1
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17571
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17526: LD_VAR 0 1
17530: PUSH
17531: LD_INT 1
17533: PPUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 12
17543: ARRAY
17544: PPUSH
17545: LD_INT 1
17547: PPUSH
17548: LD_INT 4
17550: PPUSH
17551: CALL_OW 12
17555: PPUSH
17556: LD_INT 3000
17558: PPUSH
17559: LD_INT 9000
17561: PPUSH
17562: CALL_OW 12
17566: PPUSH
17567: CALL_OW 492
// end ;
17571: PPOPN 1
17573: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17574: LD_EXP 38
17578: PUSH
17579: LD_EXP 53
17583: AND
17584: IFFALSE 17604
17586: GO 17588
17588: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17589: LD_INT 1
17591: PPUSH
17592: LD_OWVAR 2
17596: PPUSH
17597: LD_INT 0
17599: PPUSH
17600: CALL_OW 324
17604: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17605: LD_EXP 38
17609: PUSH
17610: LD_EXP 54
17614: AND
17615: IFFALSE 17698
17617: GO 17619
17619: DISABLE
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17624: LD_ADDR_VAR 0 2
17628: PUSH
17629: LD_INT 22
17631: PUSH
17632: LD_OWVAR 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PPUSH
17655: CALL_OW 69
17659: ST_TO_ADDR
// if not tmp then
17660: LD_VAR 0 2
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17698
// for i in tmp do
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: FOR_IN
17680: IFFALSE 17696
// SetBLevel ( i , 10 ) ;
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_INT 10
17689: PPUSH
17690: CALL_OW 241
17694: GO 17679
17696: POP
17697: POP
// end ;
17698: PPOPN 2
17700: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17701: LD_EXP 38
17705: PUSH
17706: LD_EXP 55
17710: AND
17711: IFFALSE 17822
17713: GO 17715
17715: DISABLE
17716: LD_INT 0
17718: PPUSH
17719: PPUSH
17720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_OWVAR 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 25
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PPUSH
17752: CALL_OW 69
17756: ST_TO_ADDR
// if not tmp then
17757: LD_VAR 0 3
17761: NOT
17762: IFFALSE 17766
// exit ;
17764: GO 17822
// un := tmp [ rand ( 1 , tmp ) ] ;
17766: LD_ADDR_VAR 0 2
17770: PUSH
17771: LD_VAR 0 3
17775: PUSH
17776: LD_INT 1
17778: PPUSH
17779: LD_VAR 0 3
17783: PPUSH
17784: CALL_OW 12
17788: ARRAY
17789: ST_TO_ADDR
// if Crawls ( un ) then
17790: LD_VAR 0 2
17794: PPUSH
17795: CALL_OW 318
17799: IFFALSE 17810
// ComWalk ( un ) ;
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17810: LD_VAR 0 2
17814: PPUSH
17815: LD_INT 5
17817: PPUSH
17818: CALL_OW 336
// end ;
17822: PPOPN 3
17824: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17825: LD_EXP 38
17829: PUSH
17830: LD_EXP 56
17834: AND
17835: PUSH
17836: LD_OWVAR 67
17840: PUSH
17841: LD_INT 4
17843: LESS
17844: AND
17845: IFFALSE 17864
17847: GO 17849
17849: DISABLE
// begin Difficulty := Difficulty + 1 ;
17850: LD_ADDR_OWVAR 67
17854: PUSH
17855: LD_OWVAR 67
17859: PUSH
17860: LD_INT 1
17862: PLUS
17863: ST_TO_ADDR
// end ;
17864: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17865: LD_EXP 38
17869: PUSH
17870: LD_EXP 57
17874: AND
17875: IFFALSE 17978
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
// begin for i := 1 to 5 do
17883: LD_ADDR_VAR 0 1
17887: PUSH
17888: DOUBLE
17889: LD_INT 1
17891: DEC
17892: ST_TO_ADDR
17893: LD_INT 5
17895: PUSH
17896: FOR_TO
17897: IFFALSE 17976
// begin uc_nation := nation_nature ;
17899: LD_ADDR_OWVAR 21
17903: PUSH
17904: LD_INT 0
17906: ST_TO_ADDR
// uc_side := 0 ;
17907: LD_ADDR_OWVAR 20
17911: PUSH
17912: LD_INT 0
17914: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17915: LD_ADDR_OWVAR 29
17919: PUSH
17920: LD_INT 12
17922: PUSH
17923: LD_INT 12
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// hc_agressivity := 20 ;
17930: LD_ADDR_OWVAR 35
17934: PUSH
17935: LD_INT 20
17937: ST_TO_ADDR
// hc_class := class_tiger ;
17938: LD_ADDR_OWVAR 28
17942: PUSH
17943: LD_INT 14
17945: ST_TO_ADDR
// hc_gallery :=  ;
17946: LD_ADDR_OWVAR 33
17950: PUSH
17951: LD_STRING 
17953: ST_TO_ADDR
// hc_name :=  ;
17954: LD_ADDR_OWVAR 26
17958: PUSH
17959: LD_STRING 
17961: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17962: CALL_OW 44
17966: PPUSH
17967: LD_INT 0
17969: PPUSH
17970: CALL_OW 51
// end ;
17974: GO 17896
17976: POP
17977: POP
// end ;
17978: PPOPN 1
17980: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17981: LD_EXP 38
17985: PUSH
17986: LD_EXP 58
17990: AND
17991: IFFALSE 18000
17993: GO 17995
17995: DISABLE
// StreamSibBomb ;
17996: CALL 18001 0 0
18000: END
// export function StreamSibBomb ; var i , x , y ; begin
18001: LD_INT 0
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
// result := false ;
18007: LD_ADDR_VAR 0 1
18011: PUSH
18012: LD_INT 0
18014: ST_TO_ADDR
// for i := 1 to 16 do
18015: LD_ADDR_VAR 0 2
18019: PUSH
18020: DOUBLE
18021: LD_INT 1
18023: DEC
18024: ST_TO_ADDR
18025: LD_INT 16
18027: PUSH
18028: FOR_TO
18029: IFFALSE 18228
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_INT 10
18038: PUSH
18039: LD_INT 20
18041: PUSH
18042: LD_INT 30
18044: PUSH
18045: LD_INT 40
18047: PUSH
18048: LD_INT 50
18050: PUSH
18051: LD_INT 60
18053: PUSH
18054: LD_INT 70
18056: PUSH
18057: LD_INT 80
18059: PUSH
18060: LD_INT 90
18062: PUSH
18063: LD_INT 100
18065: PUSH
18066: LD_INT 110
18068: PUSH
18069: LD_INT 120
18071: PUSH
18072: LD_INT 130
18074: PUSH
18075: LD_INT 140
18077: PUSH
18078: LD_INT 150
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: PPUSH
18101: LD_INT 15
18103: PPUSH
18104: CALL_OW 12
18108: ARRAY
18109: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18110: LD_ADDR_VAR 0 4
18114: PUSH
18115: LD_INT 10
18117: PUSH
18118: LD_INT 20
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 40
18126: PUSH
18127: LD_INT 50
18129: PUSH
18130: LD_INT 60
18132: PUSH
18133: LD_INT 70
18135: PUSH
18136: LD_INT 80
18138: PUSH
18139: LD_INT 90
18141: PUSH
18142: LD_INT 100
18144: PUSH
18145: LD_INT 110
18147: PUSH
18148: LD_INT 120
18150: PUSH
18151: LD_INT 130
18153: PUSH
18154: LD_INT 140
18156: PUSH
18157: LD_INT 150
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PPUSH
18180: LD_INT 15
18182: PPUSH
18183: CALL_OW 12
18187: ARRAY
18188: ST_TO_ADDR
// if ValidHex ( x , y ) then
18189: LD_VAR 0 3
18193: PPUSH
18194: LD_VAR 0 4
18198: PPUSH
18199: CALL_OW 488
18203: IFFALSE 18226
// begin result := [ x , y ] ;
18205: LD_ADDR_VAR 0 1
18209: PUSH
18210: LD_VAR 0 3
18214: PUSH
18215: LD_VAR 0 4
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: ST_TO_ADDR
// break ;
18224: GO 18228
// end ; end ;
18226: GO 18028
18228: POP
18229: POP
// if result then
18230: LD_VAR 0 1
18234: IFFALSE 18294
// begin ToLua ( playSibBomb() ) ;
18236: LD_STRING playSibBomb()
18238: PPUSH
18239: CALL_OW 559
// wait ( 0 0$14 ) ;
18243: LD_INT 490
18245: PPUSH
18246: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18250: LD_VAR 0 1
18254: PUSH
18255: LD_INT 1
18257: ARRAY
18258: PPUSH
18259: LD_VAR 0 1
18263: PUSH
18264: LD_INT 2
18266: ARRAY
18267: PPUSH
18268: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18272: LD_VAR 0 1
18276: PUSH
18277: LD_INT 1
18279: ARRAY
18280: PPUSH
18281: LD_VAR 0 1
18285: PUSH
18286: LD_INT 2
18288: ARRAY
18289: PPUSH
18290: CALL_OW 429
// end ; end ;
18294: LD_VAR 0 1
18298: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18299: LD_EXP 38
18303: PUSH
18304: LD_EXP 60
18308: AND
18309: IFFALSE 18321
18311: GO 18313
18313: DISABLE
// YouLost (  ) ;
18314: LD_STRING 
18316: PPUSH
18317: CALL_OW 104
18321: END
// every 0 0$1 trigger StreamModeActive and sFog do
18322: LD_EXP 38
18326: PUSH
18327: LD_EXP 59
18331: AND
18332: IFFALSE 18346
18334: GO 18336
18336: DISABLE
// FogOff ( your_side ) ;
18337: LD_OWVAR 2
18341: PPUSH
18342: CALL_OW 344
18346: END
// every 0 0$1 trigger StreamModeActive and sSun do
18347: LD_EXP 38
18351: PUSH
18352: LD_EXP 61
18356: AND
18357: IFFALSE 18385
18359: GO 18361
18361: DISABLE
// begin solar_recharge_percent := 0 ;
18362: LD_ADDR_OWVAR 79
18366: PUSH
18367: LD_INT 0
18369: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18370: LD_INT 10500
18372: PPUSH
18373: CALL_OW 67
// solar_recharge_percent := 100 ;
18377: LD_ADDR_OWVAR 79
18381: PUSH
18382: LD_INT 100
18384: ST_TO_ADDR
// end ;
18385: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18386: LD_EXP 38
18390: PUSH
18391: LD_EXP 62
18395: AND
18396: IFFALSE 18635
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
18405: PPUSH
// begin tmp := [ ] ;
18406: LD_ADDR_VAR 0 3
18410: PUSH
18411: EMPTY
18412: ST_TO_ADDR
// for i := 1 to 6 do
18413: LD_ADDR_VAR 0 1
18417: PUSH
18418: DOUBLE
18419: LD_INT 1
18421: DEC
18422: ST_TO_ADDR
18423: LD_INT 6
18425: PUSH
18426: FOR_TO
18427: IFFALSE 18532
// begin uc_nation := nation_nature ;
18429: LD_ADDR_OWVAR 21
18433: PUSH
18434: LD_INT 0
18436: ST_TO_ADDR
// uc_side := 0 ;
18437: LD_ADDR_OWVAR 20
18441: PUSH
18442: LD_INT 0
18444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18445: LD_ADDR_OWVAR 29
18449: PUSH
18450: LD_INT 12
18452: PUSH
18453: LD_INT 12
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: ST_TO_ADDR
// hc_agressivity := 20 ;
18460: LD_ADDR_OWVAR 35
18464: PUSH
18465: LD_INT 20
18467: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18468: LD_ADDR_OWVAR 28
18472: PUSH
18473: LD_INT 17
18475: ST_TO_ADDR
// hc_gallery :=  ;
18476: LD_ADDR_OWVAR 33
18480: PUSH
18481: LD_STRING 
18483: ST_TO_ADDR
// hc_name :=  ;
18484: LD_ADDR_OWVAR 26
18488: PUSH
18489: LD_STRING 
18491: ST_TO_ADDR
// un := CreateHuman ;
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: CALL_OW 44
18501: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL_OW 51
// tmp := tmp ^ un ;
18514: LD_ADDR_VAR 0 3
18518: PUSH
18519: LD_VAR 0 3
18523: PUSH
18524: LD_VAR 0 2
18528: ADD
18529: ST_TO_ADDR
// end ;
18530: GO 18426
18532: POP
18533: POP
// repeat wait ( 0 0$1 ) ;
18534: LD_INT 35
18536: PPUSH
18537: CALL_OW 67
// for un in tmp do
18541: LD_ADDR_VAR 0 2
18545: PUSH
18546: LD_VAR 0 3
18550: PUSH
18551: FOR_IN
18552: IFFALSE 18626
// begin if IsDead ( un ) then
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 301
18563: IFFALSE 18583
// begin tmp := tmp diff un ;
18565: LD_ADDR_VAR 0 3
18569: PUSH
18570: LD_VAR 0 3
18574: PUSH
18575: LD_VAR 0 2
18579: DIFF
18580: ST_TO_ADDR
// continue ;
18581: GO 18551
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18583: LD_VAR 0 2
18587: PPUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 22
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: PPUSH
18610: LD_VAR 0 2
18614: PPUSH
18615: CALL_OW 74
18619: PPUSH
18620: CALL_OW 115
// end ;
18624: GO 18551
18626: POP
18627: POP
// until not tmp ;
18628: LD_VAR 0 3
18632: NOT
18633: IFFALSE 18534
// end ;
18635: PPOPN 3
18637: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18638: LD_EXP 38
18642: PUSH
18643: LD_EXP 63
18647: AND
18648: IFFALSE 18702
18650: GO 18652
18652: DISABLE
// begin ToLua ( displayTroll(); ) ;
18653: LD_STRING displayTroll();
18655: PPUSH
18656: CALL_OW 559
// wait ( 3 3$00 ) ;
18660: LD_INT 6300
18662: PPUSH
18663: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18667: LD_STRING hideTroll();
18669: PPUSH
18670: CALL_OW 559
// wait ( 1 1$00 ) ;
18674: LD_INT 2100
18676: PPUSH
18677: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18681: LD_STRING displayTroll();
18683: PPUSH
18684: CALL_OW 559
// wait ( 1 1$00 ) ;
18688: LD_INT 2100
18690: PPUSH
18691: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18695: LD_STRING hideTroll();
18697: PPUSH
18698: CALL_OW 559
// end ;
18702: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18703: LD_EXP 38
18707: PUSH
18708: LD_EXP 64
18712: AND
18713: IFFALSE 18776
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
// begin p := 0 ;
18721: LD_ADDR_VAR 0 1
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// repeat game_speed := 1 ;
18729: LD_ADDR_OWVAR 65
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18737: LD_INT 35
18739: PPUSH
18740: CALL_OW 67
// p := p + 1 ;
18744: LD_ADDR_VAR 0 1
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 1
18756: PLUS
18757: ST_TO_ADDR
// until p >= 60 ;
18758: LD_VAR 0 1
18762: PUSH
18763: LD_INT 60
18765: GREATEREQUAL
18766: IFFALSE 18729
// game_speed := 4 ;
18768: LD_ADDR_OWVAR 65
18772: PUSH
18773: LD_INT 4
18775: ST_TO_ADDR
// end ;
18776: PPOPN 1
18778: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18779: LD_EXP 38
18783: PUSH
18784: LD_EXP 65
18788: AND
18789: IFFALSE 18935
18791: GO 18793
18793: DISABLE
18794: LD_INT 0
18796: PPUSH
18797: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18798: LD_ADDR_VAR 0 1
18802: PUSH
18803: LD_INT 22
18805: PUSH
18806: LD_OWVAR 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: LD_INT 30
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 30
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 69
18851: ST_TO_ADDR
// if not depot then
18852: LD_VAR 0 1
18856: NOT
18857: IFFALSE 18861
// exit ;
18859: GO 18935
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18861: LD_ADDR_VAR 0 2
18865: PUSH
18866: LD_VAR 0 1
18870: PUSH
18871: LD_INT 1
18873: PPUSH
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 12
18883: ARRAY
18884: PPUSH
18885: CALL_OW 274
18889: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: LD_INT 0
18900: PPUSH
18901: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18905: LD_VAR 0 2
18909: PPUSH
18910: LD_INT 2
18912: PPUSH
18913: LD_INT 0
18915: PPUSH
18916: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: LD_INT 0
18930: PPUSH
18931: CALL_OW 277
// end ;
18935: PPOPN 2
18937: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18938: LD_EXP 38
18942: PUSH
18943: LD_EXP 66
18947: AND
18948: IFFALSE 19045
18950: GO 18952
18952: DISABLE
18953: LD_INT 0
18955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18956: LD_ADDR_VAR 0 1
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_OWVAR 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 21
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 3
18985: PUSH
18986: LD_INT 23
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: ST_TO_ADDR
// if not tmp then
19010: LD_VAR 0 1
19014: NOT
19015: IFFALSE 19019
// exit ;
19017: GO 19045
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 1
19026: PPUSH
19027: LD_VAR 0 1
19031: PPUSH
19032: CALL_OW 12
19036: ARRAY
19037: PPUSH
19038: LD_INT 200
19040: PPUSH
19041: CALL_OW 234
// end ;
19045: PPOPN 1
19047: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19048: LD_EXP 38
19052: PUSH
19053: LD_EXP 67
19057: AND
19058: IFFALSE 19137
19060: GO 19062
19062: DISABLE
19063: LD_INT 0
19065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19066: LD_ADDR_VAR 0 1
19070: PUSH
19071: LD_INT 22
19073: PUSH
19074: LD_OWVAR 2
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 21
19085: PUSH
19086: LD_INT 2
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: ST_TO_ADDR
// if not tmp then
19102: LD_VAR 0 1
19106: NOT
19107: IFFALSE 19111
// exit ;
19109: GO 19137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19111: LD_VAR 0 1
19115: PUSH
19116: LD_INT 1
19118: PPUSH
19119: LD_VAR 0 1
19123: PPUSH
19124: CALL_OW 12
19128: ARRAY
19129: PPUSH
19130: LD_INT 60
19132: PPUSH
19133: CALL_OW 234
// end ;
19137: PPOPN 1
19139: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19140: LD_EXP 38
19144: PUSH
19145: LD_EXP 68
19149: AND
19150: IFFALSE 19249
19152: GO 19154
19154: DISABLE
19155: LD_INT 0
19157: PPUSH
19158: PPUSH
// begin enable ;
19159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19160: LD_ADDR_VAR 0 1
19164: PUSH
19165: LD_INT 22
19167: PUSH
19168: LD_OWVAR 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 61
19179: PUSH
19180: EMPTY
19181: LIST
19182: PUSH
19183: LD_INT 33
19185: PUSH
19186: LD_INT 2
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: PPUSH
19198: CALL_OW 69
19202: ST_TO_ADDR
// if not tmp then
19203: LD_VAR 0 1
19207: NOT
19208: IFFALSE 19212
// exit ;
19210: GO 19249
// for i in tmp do
19212: LD_ADDR_VAR 0 2
19216: PUSH
19217: LD_VAR 0 1
19221: PUSH
19222: FOR_IN
19223: IFFALSE 19247
// if IsControledBy ( i ) then
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL_OW 312
19234: IFFALSE 19245
// ComUnlink ( i ) ;
19236: LD_VAR 0 2
19240: PPUSH
19241: CALL_OW 136
19245: GO 19222
19247: POP
19248: POP
// end ;
19249: PPOPN 2
19251: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19252: LD_EXP 38
19256: PUSH
19257: LD_EXP 69
19261: AND
19262: IFFALSE 19402
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
// begin ToLua ( displayPowell(); ) ;
19271: LD_STRING displayPowell();
19273: PPUSH
19274: CALL_OW 559
// uc_side := 0 ;
19278: LD_ADDR_OWVAR 20
19282: PUSH
19283: LD_INT 0
19285: ST_TO_ADDR
// uc_nation := 2 ;
19286: LD_ADDR_OWVAR 21
19290: PUSH
19291: LD_INT 2
19293: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19294: LD_ADDR_OWVAR 37
19298: PUSH
19299: LD_INT 14
19301: ST_TO_ADDR
// vc_engine := engine_siberite ;
19302: LD_ADDR_OWVAR 39
19306: PUSH
19307: LD_INT 3
19309: ST_TO_ADDR
// vc_control := control_apeman ;
19310: LD_ADDR_OWVAR 38
19314: PUSH
19315: LD_INT 5
19317: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19318: LD_ADDR_OWVAR 40
19322: PUSH
19323: LD_INT 29
19325: ST_TO_ADDR
// un := CreateVehicle ;
19326: LD_ADDR_VAR 0 2
19330: PUSH
19331: CALL_OW 45
19335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19336: LD_VAR 0 2
19340: PPUSH
19341: LD_INT 1
19343: PPUSH
19344: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19348: LD_INT 35
19350: PPUSH
19351: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19355: LD_VAR 0 2
19359: PPUSH
19360: LD_INT 22
19362: PUSH
19363: LD_OWVAR 2
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PPUSH
19372: CALL_OW 69
19376: PPUSH
19377: LD_VAR 0 2
19381: PPUSH
19382: CALL_OW 74
19386: PPUSH
19387: CALL_OW 115
// until IsDead ( un ) ;
19391: LD_VAR 0 2
19395: PPUSH
19396: CALL_OW 301
19400: IFFALSE 19348
// end ;
19402: PPOPN 2
19404: END
// every 0 0$1 trigger StreamModeActive and sStu do
19405: LD_EXP 38
19409: PUSH
19410: LD_EXP 77
19414: AND
19415: IFFALSE 19431
19417: GO 19419
19419: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19420: LD_STRING displayStucuk();
19422: PPUSH
19423: CALL_OW 559
// ResetFog ;
19427: CALL_OW 335
// end ;
19431: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19432: LD_EXP 38
19436: PUSH
19437: LD_EXP 70
19441: AND
19442: IFFALSE 19583
19444: GO 19446
19446: DISABLE
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19451: LD_ADDR_VAR 0 2
19455: PUSH
19456: LD_INT 22
19458: PUSH
19459: LD_OWVAR 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PPUSH
19482: CALL_OW 69
19486: ST_TO_ADDR
// if not tmp then
19487: LD_VAR 0 2
19491: NOT
19492: IFFALSE 19496
// exit ;
19494: GO 19583
// un := tmp [ rand ( 1 , tmp ) ] ;
19496: LD_ADDR_VAR 0 1
19500: PUSH
19501: LD_VAR 0 2
19505: PUSH
19506: LD_INT 1
19508: PPUSH
19509: LD_VAR 0 2
19513: PPUSH
19514: CALL_OW 12
19518: ARRAY
19519: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19520: LD_VAR 0 1
19524: PPUSH
19525: LD_INT 0
19527: PPUSH
19528: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19532: LD_VAR 0 1
19536: PPUSH
19537: LD_OWVAR 3
19541: PUSH
19542: LD_VAR 0 1
19546: DIFF
19547: PPUSH
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 74
19557: PPUSH
19558: CALL_OW 115
// wait ( 0 0$20 ) ;
19562: LD_INT 700
19564: PPUSH
19565: CALL_OW 67
// SetSide ( un , your_side ) ;
19569: LD_VAR 0 1
19573: PPUSH
19574: LD_OWVAR 2
19578: PPUSH
19579: CALL_OW 235
// end ;
19583: PPOPN 2
19585: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19586: LD_EXP 38
19590: PUSH
19591: LD_EXP 71
19595: AND
19596: IFFALSE 19702
19598: GO 19600
19600: DISABLE
19601: LD_INT 0
19603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19604: LD_ADDR_VAR 0 1
19608: PUSH
19609: LD_INT 22
19611: PUSH
19612: LD_OWVAR 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 2
19623: PUSH
19624: LD_INT 30
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 30
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 69
19657: ST_TO_ADDR
// if not depot then
19658: LD_VAR 0 1
19662: NOT
19663: IFFALSE 19667
// exit ;
19665: GO 19702
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19667: LD_VAR 0 1
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 250
19680: PPUSH
19681: LD_VAR 0 1
19685: PUSH
19686: LD_INT 1
19688: ARRAY
19689: PPUSH
19690: CALL_OW 251
19694: PPUSH
19695: LD_INT 70
19697: PPUSH
19698: CALL_OW 495
// end ;
19702: PPOPN 1
19704: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19705: LD_EXP 38
19709: PUSH
19710: LD_EXP 72
19714: AND
19715: IFFALSE 19926
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
19723: PPUSH
19724: PPUSH
19725: PPUSH
19726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19727: LD_ADDR_VAR 0 5
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_OWVAR 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 21
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 69
19762: ST_TO_ADDR
// if not tmp then
19763: LD_VAR 0 5
19767: NOT
19768: IFFALSE 19772
// exit ;
19770: GO 19926
// for i in tmp do
19772: LD_ADDR_VAR 0 1
19776: PUSH
19777: LD_VAR 0 5
19781: PUSH
19782: FOR_IN
19783: IFFALSE 19924
// begin d := rand ( 0 , 5 ) ;
19785: LD_ADDR_VAR 0 4
19789: PUSH
19790: LD_INT 0
19792: PPUSH
19793: LD_INT 5
19795: PPUSH
19796: CALL_OW 12
19800: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 250
19815: PPUSH
19816: LD_VAR 0 4
19820: PPUSH
19821: LD_INT 3
19823: PPUSH
19824: LD_INT 12
19826: PPUSH
19827: CALL_OW 12
19831: PPUSH
19832: CALL_OW 272
19836: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 251
19851: PPUSH
19852: LD_VAR 0 4
19856: PPUSH
19857: LD_INT 3
19859: PPUSH
19860: LD_INT 12
19862: PPUSH
19863: CALL_OW 12
19867: PPUSH
19868: CALL_OW 273
19872: ST_TO_ADDR
// if ValidHex ( x , y ) then
19873: LD_VAR 0 2
19877: PPUSH
19878: LD_VAR 0 3
19882: PPUSH
19883: CALL_OW 488
19887: IFFALSE 19922
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19889: LD_VAR 0 1
19893: PPUSH
19894: LD_VAR 0 2
19898: PPUSH
19899: LD_VAR 0 3
19903: PPUSH
19904: LD_INT 3
19906: PPUSH
19907: LD_INT 6
19909: PPUSH
19910: CALL_OW 12
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 483
// end ;
19922: GO 19782
19924: POP
19925: POP
// end ;
19926: PPOPN 5
19928: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19929: LD_EXP 38
19933: PUSH
19934: LD_EXP 73
19938: AND
19939: IFFALSE 20033
19941: GO 19943
19943: DISABLE
19944: LD_INT 0
19946: PPUSH
19947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19948: LD_ADDR_VAR 0 2
19952: PUSH
19953: LD_INT 22
19955: PUSH
19956: LD_OWVAR 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 32
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 21
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 69
19994: ST_TO_ADDR
// if not tmp then
19995: LD_VAR 0 2
19999: NOT
20000: IFFALSE 20004
// exit ;
20002: GO 20033
// for i in tmp do
20004: LD_ADDR_VAR 0 1
20008: PUSH
20009: LD_VAR 0 2
20013: PUSH
20014: FOR_IN
20015: IFFALSE 20031
// SetFuel ( i , 0 ) ;
20017: LD_VAR 0 1
20021: PPUSH
20022: LD_INT 0
20024: PPUSH
20025: CALL_OW 240
20029: GO 20014
20031: POP
20032: POP
// end ;
20033: PPOPN 2
20035: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20036: LD_EXP 38
20040: PUSH
20041: LD_EXP 74
20045: AND
20046: IFFALSE 20112
20048: GO 20050
20050: DISABLE
20051: LD_INT 0
20053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_OWVAR 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 30
20073: PUSH
20074: LD_INT 29
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PPUSH
20085: CALL_OW 69
20089: ST_TO_ADDR
// if not tmp then
20090: LD_VAR 0 1
20094: NOT
20095: IFFALSE 20099
// exit ;
20097: GO 20112
// DestroyUnit ( tmp [ 1 ] ) ;
20099: LD_VAR 0 1
20103: PUSH
20104: LD_INT 1
20106: ARRAY
20107: PPUSH
20108: CALL_OW 65
// end ;
20112: PPOPN 1
20114: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20115: LD_EXP 38
20119: PUSH
20120: LD_EXP 76
20124: AND
20125: IFFALSE 20254
20127: GO 20129
20129: DISABLE
20130: LD_INT 0
20132: PPUSH
// begin uc_side := 0 ;
20133: LD_ADDR_OWVAR 20
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// uc_nation := nation_arabian ;
20141: LD_ADDR_OWVAR 21
20145: PUSH
20146: LD_INT 2
20148: ST_TO_ADDR
// hc_gallery :=  ;
20149: LD_ADDR_OWVAR 33
20153: PUSH
20154: LD_STRING 
20156: ST_TO_ADDR
// hc_name :=  ;
20157: LD_ADDR_OWVAR 26
20161: PUSH
20162: LD_STRING 
20164: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20165: LD_INT 1
20167: PPUSH
20168: LD_INT 11
20170: PPUSH
20171: LD_INT 10
20173: PPUSH
20174: CALL_OW 380
// un := CreateHuman ;
20178: LD_ADDR_VAR 0 1
20182: PUSH
20183: CALL_OW 44
20187: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20188: LD_VAR 0 1
20192: PPUSH
20193: LD_INT 1
20195: PPUSH
20196: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20200: LD_INT 35
20202: PPUSH
20203: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_INT 22
20214: PUSH
20215: LD_OWVAR 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PPUSH
20224: CALL_OW 69
20228: PPUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 74
20238: PPUSH
20239: CALL_OW 115
// until IsDead ( un ) ;
20243: LD_VAR 0 1
20247: PPUSH
20248: CALL_OW 301
20252: IFFALSE 20200
// end ;
20254: PPOPN 1
20256: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20257: LD_EXP 38
20261: PUSH
20262: LD_EXP 78
20266: AND
20267: IFFALSE 20279
20269: GO 20271
20271: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20272: LD_STRING earthquake(getX(game), 0, 32)
20274: PPUSH
20275: CALL_OW 559
20279: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20280: LD_EXP 38
20284: PUSH
20285: LD_EXP 79
20289: AND
20290: IFFALSE 20381
20292: GO 20294
20294: DISABLE
20295: LD_INT 0
20297: PPUSH
// begin enable ;
20298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20299: LD_ADDR_VAR 0 1
20303: PUSH
20304: LD_INT 22
20306: PUSH
20307: LD_OWVAR 2
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 21
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 33
20328: PUSH
20329: LD_INT 3
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: LIST
20340: PPUSH
20341: CALL_OW 69
20345: ST_TO_ADDR
// if not tmp then
20346: LD_VAR 0 1
20350: NOT
20351: IFFALSE 20355
// exit ;
20353: GO 20381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20355: LD_VAR 0 1
20359: PUSH
20360: LD_INT 1
20362: PPUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 12
20372: ARRAY
20373: PPUSH
20374: LD_INT 1
20376: PPUSH
20377: CALL_OW 234
// end ;
20381: PPOPN 1
20383: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20384: LD_EXP 38
20388: PUSH
20389: LD_EXP 80
20393: AND
20394: IFFALSE 20535
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_INT 22
20411: PUSH
20412: LD_OWVAR 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 25
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PPUSH
20435: CALL_OW 69
20439: ST_TO_ADDR
// if not tmp then
20440: LD_VAR 0 3
20444: NOT
20445: IFFALSE 20449
// exit ;
20447: GO 20535
// un := tmp [ rand ( 1 , tmp ) ] ;
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 1
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL_OW 12
20471: ARRAY
20472: ST_TO_ADDR
// if Crawls ( un ) then
20473: LD_VAR 0 2
20477: PPUSH
20478: CALL_OW 318
20482: IFFALSE 20493
// ComWalk ( un ) ;
20484: LD_VAR 0 2
20488: PPUSH
20489: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20493: LD_VAR 0 2
20497: PPUSH
20498: LD_INT 9
20500: PPUSH
20501: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20505: LD_INT 28
20507: PPUSH
20508: LD_OWVAR 2
20512: PPUSH
20513: LD_INT 2
20515: PPUSH
20516: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20520: LD_INT 29
20522: PPUSH
20523: LD_OWVAR 2
20527: PPUSH
20528: LD_INT 2
20530: PPUSH
20531: CALL_OW 322
// end ;
20535: PPOPN 3
20537: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20538: LD_EXP 38
20542: PUSH
20543: LD_EXP 81
20547: AND
20548: IFFALSE 20659
20550: GO 20552
20552: DISABLE
20553: LD_INT 0
20555: PPUSH
20556: PPUSH
20557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20558: LD_ADDR_VAR 0 3
20562: PUSH
20563: LD_INT 22
20565: PUSH
20566: LD_OWVAR 2
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 25
20577: PUSH
20578: LD_INT 1
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PPUSH
20589: CALL_OW 69
20593: ST_TO_ADDR
// if not tmp then
20594: LD_VAR 0 3
20598: NOT
20599: IFFALSE 20603
// exit ;
20601: GO 20659
// un := tmp [ rand ( 1 , tmp ) ] ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 1
20615: PPUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: CALL_OW 12
20625: ARRAY
20626: ST_TO_ADDR
// if Crawls ( un ) then
20627: LD_VAR 0 2
20631: PPUSH
20632: CALL_OW 318
20636: IFFALSE 20647
// ComWalk ( un ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20647: LD_VAR 0 2
20651: PPUSH
20652: LD_INT 8
20654: PPUSH
20655: CALL_OW 336
// end ;
20659: PPOPN 3
20661: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20662: LD_EXP 38
20666: PUSH
20667: LD_EXP 82
20671: AND
20672: IFFALSE 20816
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_OWVAR 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 34
20713: PUSH
20714: LD_INT 12
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 51
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 34
20733: PUSH
20734: LD_INT 32
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: ST_TO_ADDR
// if not tmp then
20757: LD_VAR 0 2
20761: NOT
20762: IFFALSE 20766
// exit ;
20764: GO 20816
// for i in tmp do
20766: LD_ADDR_VAR 0 1
20770: PUSH
20771: LD_VAR 0 2
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20814
// if GetCargo ( i , mat_artifact ) = 0 then
20779: LD_VAR 0 1
20783: PPUSH
20784: LD_INT 4
20786: PPUSH
20787: CALL_OW 289
20791: PUSH
20792: LD_INT 0
20794: EQUAL
20795: IFFALSE 20812
// SetCargo ( i , mat_siberit , 100 ) ;
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_INT 3
20804: PPUSH
20805: LD_INT 100
20807: PPUSH
20808: CALL_OW 290
20812: GO 20776
20814: POP
20815: POP
// end ;
20816: PPOPN 2
20818: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20819: LD_EXP 38
20823: PUSH
20824: LD_EXP 83
20828: AND
20829: IFFALSE 21012
20831: GO 20833
20833: DISABLE
20834: LD_INT 0
20836: PPUSH
20837: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20838: LD_ADDR_VAR 0 2
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_OWVAR 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: ST_TO_ADDR
// if not tmp then
20860: LD_VAR 0 2
20864: NOT
20865: IFFALSE 20869
// exit ;
20867: GO 21012
// for i := 1 to 2 do
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: DOUBLE
20875: LD_INT 1
20877: DEC
20878: ST_TO_ADDR
20879: LD_INT 2
20881: PUSH
20882: FOR_TO
20883: IFFALSE 21010
// begin uc_side := your_side ;
20885: LD_ADDR_OWVAR 20
20889: PUSH
20890: LD_OWVAR 2
20894: ST_TO_ADDR
// uc_nation := nation_american ;
20895: LD_ADDR_OWVAR 21
20899: PUSH
20900: LD_INT 1
20902: ST_TO_ADDR
// vc_chassis := us_morphling ;
20903: LD_ADDR_OWVAR 37
20907: PUSH
20908: LD_INT 5
20910: ST_TO_ADDR
// vc_engine := engine_siberite ;
20911: LD_ADDR_OWVAR 39
20915: PUSH
20916: LD_INT 3
20918: ST_TO_ADDR
// vc_control := control_computer ;
20919: LD_ADDR_OWVAR 38
20923: PUSH
20924: LD_INT 3
20926: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20927: LD_ADDR_OWVAR 40
20931: PUSH
20932: LD_INT 10
20934: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20935: LD_VAR 0 2
20939: PUSH
20940: LD_INT 1
20942: ARRAY
20943: PPUSH
20944: CALL_OW 310
20948: NOT
20949: IFFALSE 20996
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20951: CALL_OW 45
20955: PPUSH
20956: LD_VAR 0 2
20960: PUSH
20961: LD_INT 1
20963: ARRAY
20964: PPUSH
20965: CALL_OW 250
20969: PPUSH
20970: LD_VAR 0 2
20974: PUSH
20975: LD_INT 1
20977: ARRAY
20978: PPUSH
20979: CALL_OW 251
20983: PPUSH
20984: LD_INT 12
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: CALL_OW 50
20994: GO 21008
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20996: CALL_OW 45
21000: PPUSH
21001: LD_INT 1
21003: PPUSH
21004: CALL_OW 51
// end ;
21008: GO 20882
21010: POP
21011: POP
// end ;
21012: PPOPN 2
21014: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21015: LD_EXP 38
21019: PUSH
21020: LD_EXP 84
21024: AND
21025: IFFALSE 21247
21027: GO 21029
21029: DISABLE
21030: LD_INT 0
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21038: LD_ADDR_VAR 0 6
21042: PUSH
21043: LD_INT 22
21045: PUSH
21046: LD_OWVAR 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 21
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 3
21067: PUSH
21068: LD_INT 23
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: PPUSH
21087: CALL_OW 69
21091: ST_TO_ADDR
// if not tmp then
21092: LD_VAR 0 6
21096: NOT
21097: IFFALSE 21101
// exit ;
21099: GO 21247
// s1 := rand ( 1 , 4 ) ;
21101: LD_ADDR_VAR 0 2
21105: PUSH
21106: LD_INT 1
21108: PPUSH
21109: LD_INT 4
21111: PPUSH
21112: CALL_OW 12
21116: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21117: LD_ADDR_VAR 0 4
21121: PUSH
21122: LD_VAR 0 6
21126: PUSH
21127: LD_INT 1
21129: ARRAY
21130: PPUSH
21131: LD_VAR 0 2
21135: PPUSH
21136: CALL_OW 259
21140: ST_TO_ADDR
// if s1 = 1 then
21141: LD_VAR 0 2
21145: PUSH
21146: LD_INT 1
21148: EQUAL
21149: IFFALSE 21169
// s2 := rand ( 2 , 4 ) else
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_INT 2
21158: PPUSH
21159: LD_INT 4
21161: PPUSH
21162: CALL_OW 12
21166: ST_TO_ADDR
21167: GO 21177
// s2 := 1 ;
21169: LD_ADDR_VAR 0 3
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21177: LD_ADDR_VAR 0 5
21181: PUSH
21182: LD_VAR 0 6
21186: PUSH
21187: LD_INT 1
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 259
21200: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21201: LD_VAR 0 6
21205: PUSH
21206: LD_INT 1
21208: ARRAY
21209: PPUSH
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 5
21219: PPUSH
21220: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21224: LD_VAR 0 6
21228: PUSH
21229: LD_INT 1
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 3
21237: PPUSH
21238: LD_VAR 0 4
21242: PPUSH
21243: CALL_OW 237
// end ;
21247: PPOPN 6
21249: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21250: LD_EXP 38
21254: PUSH
21255: LD_EXP 85
21259: AND
21260: IFFALSE 21339
21262: GO 21264
21264: DISABLE
21265: LD_INT 0
21267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21268: LD_ADDR_VAR 0 1
21272: PUSH
21273: LD_INT 22
21275: PUSH
21276: LD_OWVAR 2
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 30
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PPUSH
21299: CALL_OW 69
21303: ST_TO_ADDR
// if not tmp then
21304: LD_VAR 0 1
21308: NOT
21309: IFFALSE 21313
// exit ;
21311: GO 21339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21313: LD_VAR 0 1
21317: PUSH
21318: LD_INT 1
21320: PPUSH
21321: LD_VAR 0 1
21325: PPUSH
21326: CALL_OW 12
21330: ARRAY
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 234
// end ;
21339: PPOPN 1
21341: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21342: LD_EXP 38
21346: PUSH
21347: LD_EXP 86
21351: AND
21352: IFFALSE 21464
21354: GO 21356
21356: DISABLE
21357: LD_INT 0
21359: PPUSH
21360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 22
21368: PUSH
21369: LD_OWVAR 2
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 30
21383: PUSH
21384: LD_INT 27
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 30
21393: PUSH
21394: LD_INT 26
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 28
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: CALL_OW 69
21425: ST_TO_ADDR
// if not tmp then
21426: LD_VAR 0 2
21430: NOT
21431: IFFALSE 21435
// exit ;
21433: GO 21464
// for i in tmp do
21435: LD_ADDR_VAR 0 1
21439: PUSH
21440: LD_VAR 0 2
21444: PUSH
21445: FOR_IN
21446: IFFALSE 21462
// SetLives ( i , 1 ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: LD_INT 1
21455: PPUSH
21456: CALL_OW 234
21460: GO 21445
21462: POP
21463: POP
// end ;
21464: PPOPN 2
21466: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21467: LD_EXP 38
21471: PUSH
21472: LD_EXP 87
21476: AND
21477: IFFALSE 21764
21479: GO 21481
21481: DISABLE
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
// begin i := rand ( 1 , 7 ) ;
21487: LD_ADDR_VAR 0 1
21491: PUSH
21492: LD_INT 1
21494: PPUSH
21495: LD_INT 7
21497: PPUSH
21498: CALL_OW 12
21502: ST_TO_ADDR
// case i of 1 :
21503: LD_VAR 0 1
21507: PUSH
21508: LD_INT 1
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21526
21516: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21517: LD_STRING earthquake(getX(game), 0, 32)
21519: PPUSH
21520: CALL_OW 559
21524: GO 21764
21526: LD_INT 2
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21548
21534: POP
// begin ToLua ( displayStucuk(); ) ;
21535: LD_STRING displayStucuk();
21537: PPUSH
21538: CALL_OW 559
// ResetFog ;
21542: CALL_OW 335
// end ; 3 :
21546: GO 21764
21548: LD_INT 3
21550: DOUBLE
21551: EQUAL
21552: IFTRUE 21556
21554: GO 21660
21556: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21557: LD_ADDR_VAR 0 2
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_OWVAR 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 25
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PPUSH
21588: CALL_OW 69
21592: ST_TO_ADDR
// if not tmp then
21593: LD_VAR 0 2
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 21764
// un := tmp [ rand ( 1 , tmp ) ] ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: LD_VAR 0 2
21611: PUSH
21612: LD_INT 1
21614: PPUSH
21615: LD_VAR 0 2
21619: PPUSH
21620: CALL_OW 12
21624: ARRAY
21625: ST_TO_ADDR
// if Crawls ( un ) then
21626: LD_VAR 0 3
21630: PPUSH
21631: CALL_OW 318
21635: IFFALSE 21646
// ComWalk ( un ) ;
21637: LD_VAR 0 3
21641: PPUSH
21642: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21646: LD_VAR 0 3
21650: PPUSH
21651: LD_INT 8
21653: PPUSH
21654: CALL_OW 336
// end ; 4 :
21658: GO 21764
21660: LD_INT 4
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21742
21668: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21669: LD_ADDR_VAR 0 2
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 30
21688: PUSH
21689: LD_INT 29
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not tmp then
21705: LD_VAR 0 2
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21764
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21714: LD_VAR 0 2
21718: PUSH
21719: LD_INT 1
21721: ARRAY
21722: PPUSH
21723: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21727: LD_VAR 0 2
21731: PUSH
21732: LD_INT 1
21734: ARRAY
21735: PPUSH
21736: CALL_OW 65
// end ; 5 .. 7 :
21740: GO 21764
21742: LD_INT 5
21744: DOUBLE
21745: GREATEREQUAL
21746: IFFALSE 21754
21748: LD_INT 7
21750: DOUBLE
21751: LESSEQUAL
21752: IFTRUE 21756
21754: GO 21763
21756: POP
// StreamSibBomb ; end ;
21757: CALL 18001 0 0
21761: GO 21764
21763: POP
// end ;
21764: PPOPN 3
21766: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21767: LD_EXP 38
21771: PUSH
21772: LD_EXP 88
21776: AND
21777: IFFALSE 21933
21779: GO 21781
21781: DISABLE
21782: LD_INT 0
21784: PPUSH
21785: PPUSH
21786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: LD_INT 81
21794: PUSH
21795: LD_OWVAR 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 21
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 21
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: ST_TO_ADDR
// if not tmp then
21841: LD_VAR 0 2
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 21933
// p := 0 ;
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: LD_INT 0
21857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21858: LD_INT 35
21860: PPUSH
21861: CALL_OW 67
// p := p + 1 ;
21865: LD_ADDR_VAR 0 3
21869: PUSH
21870: LD_VAR 0 3
21874: PUSH
21875: LD_INT 1
21877: PLUS
21878: ST_TO_ADDR
// for i in tmp do
21879: LD_ADDR_VAR 0 1
21883: PUSH
21884: LD_VAR 0 2
21888: PUSH
21889: FOR_IN
21890: IFFALSE 21921
// if GetLives ( i ) < 1000 then
21892: LD_VAR 0 1
21896: PPUSH
21897: CALL_OW 256
21901: PUSH
21902: LD_INT 1000
21904: LESS
21905: IFFALSE 21919
// SetLives ( i , 1000 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 1000
21914: PPUSH
21915: CALL_OW 234
21919: GO 21889
21921: POP
21922: POP
// until p > 20 ;
21923: LD_VAR 0 3
21927: PUSH
21928: LD_INT 20
21930: GREATER
21931: IFFALSE 21858
// end ;
21933: PPOPN 3
21935: END
// every 0 0$1 trigger StreamModeActive and sTime do
21936: LD_EXP 38
21940: PUSH
21941: LD_EXP 89
21945: AND
21946: IFFALSE 21981
21948: GO 21950
21950: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21951: LD_INT 28
21953: PPUSH
21954: LD_OWVAR 2
21958: PPUSH
21959: LD_INT 2
21961: PPUSH
21962: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21966: LD_INT 30
21968: PPUSH
21969: LD_OWVAR 2
21973: PPUSH
21974: LD_INT 2
21976: PPUSH
21977: CALL_OW 322
// end ;
21981: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21982: LD_EXP 38
21986: PUSH
21987: LD_EXP 90
21991: AND
21992: IFFALSE 22113
21994: GO 21996
21996: DISABLE
21997: LD_INT 0
21999: PPUSH
22000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22001: LD_ADDR_VAR 0 2
22005: PUSH
22006: LD_INT 22
22008: PUSH
22009: LD_OWVAR 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 3
22030: PUSH
22031: LD_INT 23
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: PPUSH
22050: CALL_OW 69
22054: ST_TO_ADDR
// if not tmp then
22055: LD_VAR 0 2
22059: NOT
22060: IFFALSE 22064
// exit ;
22062: GO 22113
// for i in tmp do
22064: LD_ADDR_VAR 0 1
22068: PUSH
22069: LD_VAR 0 2
22073: PUSH
22074: FOR_IN
22075: IFFALSE 22111
// begin if Crawls ( i ) then
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 318
22086: IFFALSE 22097
// ComWalk ( i ) ;
22088: LD_VAR 0 1
22092: PPUSH
22093: CALL_OW 138
// SetClass ( i , 2 ) ;
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_INT 2
22104: PPUSH
22105: CALL_OW 336
// end ;
22109: GO 22074
22111: POP
22112: POP
// end ;
22113: PPOPN 2
22115: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22116: LD_EXP 38
22120: PUSH
22121: LD_EXP 91
22125: AND
22126: IFFALSE 22414
22128: GO 22130
22130: DISABLE
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
22135: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22136: LD_OWVAR 2
22140: PPUSH
22141: LD_INT 9
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22154: LD_INT 9
22156: PPUSH
22157: LD_OWVAR 2
22161: PPUSH
22162: CALL_OW 343
// uc_side := 9 ;
22166: LD_ADDR_OWVAR 20
22170: PUSH
22171: LD_INT 9
22173: ST_TO_ADDR
// uc_nation := 2 ;
22174: LD_ADDR_OWVAR 21
22178: PUSH
22179: LD_INT 2
22181: ST_TO_ADDR
// hc_name := Dark Warrior ;
22182: LD_ADDR_OWVAR 26
22186: PUSH
22187: LD_STRING Dark Warrior
22189: ST_TO_ADDR
// hc_gallery :=  ;
22190: LD_ADDR_OWVAR 33
22194: PUSH
22195: LD_STRING 
22197: ST_TO_ADDR
// hc_noskilllimit := true ;
22198: LD_ADDR_OWVAR 76
22202: PUSH
22203: LD_INT 1
22205: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22206: LD_ADDR_OWVAR 31
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 30
22216: PUSH
22217: LD_INT 30
22219: PUSH
22220: LD_INT 30
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: ST_TO_ADDR
// un := CreateHuman ;
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: CALL_OW 44
22238: ST_TO_ADDR
// hc_noskilllimit := false ;
22239: LD_ADDR_OWVAR 76
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22247: LD_VAR 0 3
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 51
// ToLua ( playRanger() ) ;
22259: LD_STRING playRanger()
22261: PPUSH
22262: CALL_OW 559
// p := 0 ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22274: LD_INT 35
22276: PPUSH
22277: CALL_OW 67
// p := p + 1 ;
22281: LD_ADDR_VAR 0 2
22285: PUSH
22286: LD_VAR 0 2
22290: PUSH
22291: LD_INT 1
22293: PLUS
22294: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL_OW 256
22304: PUSH
22305: LD_INT 1000
22307: LESS
22308: IFFALSE 22322
// SetLives ( un , 1000 ) ;
22310: LD_VAR 0 3
22314: PPUSH
22315: LD_INT 1000
22317: PPUSH
22318: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 81
22329: PUSH
22330: LD_OWVAR 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 91
22341: PUSH
22342: LD_VAR 0 3
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: CALL_OW 74
22373: PPUSH
22374: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22378: LD_VAR 0 2
22382: PUSH
22383: LD_INT 80
22385: GREATER
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 301
22396: OR
22397: IFFALSE 22274
// if un then
22399: LD_VAR 0 3
22403: IFFALSE 22414
// RemoveUnit ( un ) ;
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 64
// end ;
22414: PPOPN 3
22416: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22417: LD_EXP 92
22421: IFFALSE 22537
22423: GO 22425
22425: DISABLE
22426: LD_INT 0
22428: PPUSH
22429: PPUSH
22430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 81
22438: PUSH
22439: LD_OWVAR 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 21
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22467: LD_STRING playComputer()
22469: PPUSH
22470: CALL_OW 559
// if not tmp then
22474: LD_VAR 0 2
22478: NOT
22479: IFFALSE 22483
// exit ;
22481: GO 22537
// for i in tmp do
22483: LD_ADDR_VAR 0 1
22487: PUSH
22488: LD_VAR 0 2
22492: PUSH
22493: FOR_IN
22494: IFFALSE 22535
// for j := 1 to 4 do
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: DOUBLE
22502: LD_INT 1
22504: DEC
22505: ST_TO_ADDR
22506: LD_INT 4
22508: PUSH
22509: FOR_TO
22510: IFFALSE 22531
// SetSkill ( i , j , 10 ) ;
22512: LD_VAR 0 1
22516: PPUSH
22517: LD_VAR 0 3
22521: PPUSH
22522: LD_INT 10
22524: PPUSH
22525: CALL_OW 237
22529: GO 22509
22531: POP
22532: POP
22533: GO 22493
22535: POP
22536: POP
// end ;
22537: PPOPN 3
22539: END
// every 0 0$1 trigger s30 do var i , tmp ;
22540: LD_EXP 93
22544: IFFALSE 22613
22546: GO 22548
22548: DISABLE
22549: LD_INT 0
22551: PPUSH
22552: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22553: LD_ADDR_VAR 0 2
22557: PUSH
22558: LD_INT 22
22560: PUSH
22561: LD_OWVAR 2
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PPUSH
22570: CALL_OW 69
22574: ST_TO_ADDR
// if not tmp then
22575: LD_VAR 0 2
22579: NOT
22580: IFFALSE 22584
// exit ;
22582: GO 22613
// for i in tmp do
22584: LD_ADDR_VAR 0 1
22588: PUSH
22589: LD_VAR 0 2
22593: PUSH
22594: FOR_IN
22595: IFFALSE 22611
// SetLives ( i , 300 ) ;
22597: LD_VAR 0 1
22601: PPUSH
22602: LD_INT 300
22604: PPUSH
22605: CALL_OW 234
22609: GO 22594
22611: POP
22612: POP
// end ;
22613: PPOPN 2
22615: END
// every 0 0$1 trigger s60 do var i , tmp ;
22616: LD_EXP 94
22620: IFFALSE 22689
22622: GO 22624
22624: DISABLE
22625: LD_INT 0
22627: PPUSH
22628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_INT 22
22636: PUSH
22637: LD_OWVAR 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PPUSH
22646: CALL_OW 69
22650: ST_TO_ADDR
// if not tmp then
22651: LD_VAR 0 2
22655: NOT
22656: IFFALSE 22660
// exit ;
22658: GO 22689
// for i in tmp do
22660: LD_ADDR_VAR 0 1
22664: PUSH
22665: LD_VAR 0 2
22669: PUSH
22670: FOR_IN
22671: IFFALSE 22687
// SetLives ( i , 600 ) ;
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_INT 600
22680: PPUSH
22681: CALL_OW 234
22685: GO 22670
22687: POP
22688: POP
// end ;
22689: PPOPN 2
22691: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22692: LD_INT 0
22694: PPUSH
// case cmd of 301 :
22695: LD_VAR 0 1
22699: PUSH
22700: LD_INT 301
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22740
22708: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22709: LD_VAR 0 6
22713: PPUSH
22714: LD_VAR 0 7
22718: PPUSH
22719: LD_VAR 0 8
22723: PPUSH
22724: LD_VAR 0 4
22728: PPUSH
22729: LD_VAR 0 5
22733: PPUSH
22734: CALL 23941 0 5
22738: GO 22861
22740: LD_INT 302
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22785
22748: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22749: LD_VAR 0 6
22753: PPUSH
22754: LD_VAR 0 7
22758: PPUSH
22759: LD_VAR 0 8
22763: PPUSH
22764: LD_VAR 0 9
22768: PPUSH
22769: LD_VAR 0 4
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL 24032 0 6
22783: GO 22861
22785: LD_INT 303
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22830
22793: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: LD_VAR 0 9
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 22866 0 6
22828: GO 22861
22830: LD_INT 304
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22860
22838: POP
// hHackTeleport ( unit , x , y ) ; end ;
22839: LD_VAR 0 2
22843: PPUSH
22844: LD_VAR 0 4
22848: PPUSH
22849: LD_VAR 0 5
22853: PPUSH
22854: CALL 24625 0 3
22858: GO 22861
22860: POP
// end ;
22861: LD_VAR 0 12
22865: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22870: LD_VAR 0 1
22874: PUSH
22875: LD_INT 1
22877: LESS
22878: PUSH
22879: LD_VAR 0 1
22883: PUSH
22884: LD_INT 3
22886: GREATER
22887: OR
22888: PUSH
22889: LD_VAR 0 5
22893: PPUSH
22894: LD_VAR 0 6
22898: PPUSH
22899: CALL_OW 428
22903: OR
22904: IFFALSE 22908
// exit ;
22906: GO 23628
// uc_side := your_side ;
22908: LD_ADDR_OWVAR 20
22912: PUSH
22913: LD_OWVAR 2
22917: ST_TO_ADDR
// uc_nation := nation ;
22918: LD_ADDR_OWVAR 21
22922: PUSH
22923: LD_VAR 0 1
22927: ST_TO_ADDR
// bc_level = 1 ;
22928: LD_ADDR_OWVAR 43
22932: PUSH
22933: LD_INT 1
22935: ST_TO_ADDR
// case btype of 1 :
22936: LD_VAR 0 2
22940: PUSH
22941: LD_INT 1
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// bc_type := b_depot ; 2 :
22950: LD_ADDR_OWVAR 42
22954: PUSH
22955: LD_INT 0
22957: ST_TO_ADDR
22958: GO 23572
22960: LD_INT 2
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// bc_type := b_warehouse ; 3 :
22969: LD_ADDR_OWVAR 42
22973: PUSH
22974: LD_INT 1
22976: ST_TO_ADDR
22977: GO 23572
22979: LD_INT 3
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 22998
22987: POP
// bc_type := b_lab ; 4 .. 9 :
22988: LD_ADDR_OWVAR 42
22992: PUSH
22993: LD_INT 6
22995: ST_TO_ADDR
22996: GO 23572
22998: LD_INT 4
23000: DOUBLE
23001: GREATEREQUAL
23002: IFFALSE 23010
23004: LD_INT 9
23006: DOUBLE
23007: LESSEQUAL
23008: IFTRUE 23012
23010: GO 23064
23012: POP
// begin bc_type := b_lab_half ;
23013: LD_ADDR_OWVAR 42
23017: PUSH
23018: LD_INT 7
23020: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23021: LD_ADDR_OWVAR 44
23025: PUSH
23026: LD_INT 10
23028: PUSH
23029: LD_INT 11
23031: PUSH
23032: LD_INT 12
23034: PUSH
23035: LD_INT 15
23037: PUSH
23038: LD_INT 14
23040: PUSH
23041: LD_INT 13
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: LD_VAR 0 2
23056: PUSH
23057: LD_INT 3
23059: MINUS
23060: ARRAY
23061: ST_TO_ADDR
// end ; 10 .. 13 :
23062: GO 23572
23064: LD_INT 10
23066: DOUBLE
23067: GREATEREQUAL
23068: IFFALSE 23076
23070: LD_INT 13
23072: DOUBLE
23073: LESSEQUAL
23074: IFTRUE 23078
23076: GO 23155
23078: POP
// begin bc_type := b_lab_full ;
23079: LD_ADDR_OWVAR 42
23083: PUSH
23084: LD_INT 8
23086: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23087: LD_ADDR_OWVAR 44
23091: PUSH
23092: LD_INT 10
23094: PUSH
23095: LD_INT 12
23097: PUSH
23098: LD_INT 14
23100: PUSH
23101: LD_INT 13
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: LD_VAR 0 2
23114: PUSH
23115: LD_INT 9
23117: MINUS
23118: ARRAY
23119: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23120: LD_ADDR_OWVAR 45
23124: PUSH
23125: LD_INT 11
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 15
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: PUSH
23143: LD_VAR 0 2
23147: PUSH
23148: LD_INT 9
23150: MINUS
23151: ARRAY
23152: ST_TO_ADDR
// end ; 14 :
23153: GO 23572
23155: LD_INT 14
23157: DOUBLE
23158: EQUAL
23159: IFTRUE 23163
23161: GO 23174
23163: POP
// bc_type := b_workshop ; 15 :
23164: LD_ADDR_OWVAR 42
23168: PUSH
23169: LD_INT 2
23171: ST_TO_ADDR
23172: GO 23572
23174: LD_INT 15
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23193
23182: POP
// bc_type := b_factory ; 16 :
23183: LD_ADDR_OWVAR 42
23187: PUSH
23188: LD_INT 3
23190: ST_TO_ADDR
23191: GO 23572
23193: LD_INT 16
23195: DOUBLE
23196: EQUAL
23197: IFTRUE 23201
23199: GO 23212
23201: POP
// bc_type := b_ext_gun ; 17 :
23202: LD_ADDR_OWVAR 42
23206: PUSH
23207: LD_INT 17
23209: ST_TO_ADDR
23210: GO 23572
23212: LD_INT 17
23214: DOUBLE
23215: EQUAL
23216: IFTRUE 23220
23218: GO 23248
23220: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23221: LD_ADDR_OWVAR 42
23225: PUSH
23226: LD_INT 19
23228: PUSH
23229: LD_INT 23
23231: PUSH
23232: LD_INT 19
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_VAR 0 1
23244: ARRAY
23245: ST_TO_ADDR
23246: GO 23572
23248: LD_INT 18
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23267
23256: POP
// bc_type := b_ext_radar ; 19 :
23257: LD_ADDR_OWVAR 42
23261: PUSH
23262: LD_INT 20
23264: ST_TO_ADDR
23265: GO 23572
23267: LD_INT 19
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23286
23275: POP
// bc_type := b_ext_radio ; 20 :
23276: LD_ADDR_OWVAR 42
23280: PUSH
23281: LD_INT 22
23283: ST_TO_ADDR
23284: GO 23572
23286: LD_INT 20
23288: DOUBLE
23289: EQUAL
23290: IFTRUE 23294
23292: GO 23305
23294: POP
// bc_type := b_ext_siberium ; 21 :
23295: LD_ADDR_OWVAR 42
23299: PUSH
23300: LD_INT 21
23302: ST_TO_ADDR
23303: GO 23572
23305: LD_INT 21
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23324
23313: POP
// bc_type := b_ext_computer ; 22 :
23314: LD_ADDR_OWVAR 42
23318: PUSH
23319: LD_INT 24
23321: ST_TO_ADDR
23322: GO 23572
23324: LD_INT 22
23326: DOUBLE
23327: EQUAL
23328: IFTRUE 23332
23330: GO 23343
23332: POP
// bc_type := b_ext_track ; 23 :
23333: LD_ADDR_OWVAR 42
23337: PUSH
23338: LD_INT 16
23340: ST_TO_ADDR
23341: GO 23572
23343: LD_INT 23
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23362
23351: POP
// bc_type := b_ext_laser ; 24 :
23352: LD_ADDR_OWVAR 42
23356: PUSH
23357: LD_INT 25
23359: ST_TO_ADDR
23360: GO 23572
23362: LD_INT 24
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23381
23370: POP
// bc_type := b_control_tower ; 25 :
23371: LD_ADDR_OWVAR 42
23375: PUSH
23376: LD_INT 36
23378: ST_TO_ADDR
23379: GO 23572
23381: LD_INT 25
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23400
23389: POP
// bc_type := b_breastwork ; 26 :
23390: LD_ADDR_OWVAR 42
23394: PUSH
23395: LD_INT 31
23397: ST_TO_ADDR
23398: GO 23572
23400: LD_INT 26
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23419
23408: POP
// bc_type := b_bunker ; 27 :
23409: LD_ADDR_OWVAR 42
23413: PUSH
23414: LD_INT 32
23416: ST_TO_ADDR
23417: GO 23572
23419: LD_INT 27
23421: DOUBLE
23422: EQUAL
23423: IFTRUE 23427
23425: GO 23438
23427: POP
// bc_type := b_turret ; 28 :
23428: LD_ADDR_OWVAR 42
23432: PUSH
23433: LD_INT 33
23435: ST_TO_ADDR
23436: GO 23572
23438: LD_INT 28
23440: DOUBLE
23441: EQUAL
23442: IFTRUE 23446
23444: GO 23457
23446: POP
// bc_type := b_armoury ; 29 :
23447: LD_ADDR_OWVAR 42
23451: PUSH
23452: LD_INT 4
23454: ST_TO_ADDR
23455: GO 23572
23457: LD_INT 29
23459: DOUBLE
23460: EQUAL
23461: IFTRUE 23465
23463: GO 23476
23465: POP
// bc_type := b_barracks ; 30 :
23466: LD_ADDR_OWVAR 42
23470: PUSH
23471: LD_INT 5
23473: ST_TO_ADDR
23474: GO 23572
23476: LD_INT 30
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23495
23484: POP
// bc_type := b_solar_power ; 31 :
23485: LD_ADDR_OWVAR 42
23489: PUSH
23490: LD_INT 27
23492: ST_TO_ADDR
23493: GO 23572
23495: LD_INT 31
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23514
23503: POP
// bc_type := b_oil_power ; 32 :
23504: LD_ADDR_OWVAR 42
23508: PUSH
23509: LD_INT 26
23511: ST_TO_ADDR
23512: GO 23572
23514: LD_INT 32
23516: DOUBLE
23517: EQUAL
23518: IFTRUE 23522
23520: GO 23533
23522: POP
// bc_type := b_siberite_power ; 33 :
23523: LD_ADDR_OWVAR 42
23527: PUSH
23528: LD_INT 28
23530: ST_TO_ADDR
23531: GO 23572
23533: LD_INT 33
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 23552
23541: POP
// bc_type := b_oil_mine ; 34 :
23542: LD_ADDR_OWVAR 42
23546: PUSH
23547: LD_INT 29
23549: ST_TO_ADDR
23550: GO 23572
23552: LD_INT 34
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23571
23560: POP
// bc_type := b_siberite_mine ; end ;
23561: LD_ADDR_OWVAR 42
23565: PUSH
23566: LD_INT 30
23568: ST_TO_ADDR
23569: GO 23572
23571: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23572: LD_ADDR_VAR 0 8
23576: PUSH
23577: LD_VAR 0 5
23581: PPUSH
23582: LD_VAR 0 6
23586: PPUSH
23587: LD_VAR 0 3
23591: PPUSH
23592: CALL_OW 47
23596: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23597: LD_OWVAR 42
23601: PUSH
23602: LD_INT 32
23604: PUSH
23605: LD_INT 33
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: IN
23612: IFFALSE 23628
// PlaceWeaponTurret ( b , weapon ) ;
23614: LD_VAR 0 8
23618: PPUSH
23619: LD_VAR 0 4
23623: PPUSH
23624: CALL_OW 431
// end ;
23628: LD_VAR 0 7
23632: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23633: LD_INT 0
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23639: LD_ADDR_VAR 0 4
23643: PUSH
23644: LD_INT 22
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 30
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 30
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PPUSH
23688: CALL_OW 69
23692: ST_TO_ADDR
// if not tmp then
23693: LD_VAR 0 4
23697: NOT
23698: IFFALSE 23702
// exit ;
23700: GO 23761
// for i in tmp do
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: LD_VAR 0 4
23711: PUSH
23712: FOR_IN
23713: IFFALSE 23759
// for j = 1 to 3 do
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: DOUBLE
23721: LD_INT 1
23723: DEC
23724: ST_TO_ADDR
23725: LD_INT 3
23727: PUSH
23728: FOR_TO
23729: IFFALSE 23755
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23731: LD_VAR 0 2
23735: PPUSH
23736: CALL_OW 274
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: LD_INT 99999
23748: PPUSH
23749: CALL_OW 277
23753: GO 23728
23755: POP
23756: POP
23757: GO 23712
23759: POP
23760: POP
// end ;
23761: LD_VAR 0 1
23765: RET
// export function hHackSetLevel10 ; var i , j ; begin
23766: LD_INT 0
23768: PPUSH
23769: PPUSH
23770: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23771: LD_ADDR_VAR 0 2
23775: PUSH
23776: LD_INT 21
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 69
23790: PUSH
23791: FOR_IN
23792: IFFALSE 23844
// if IsSelected ( i ) then
23794: LD_VAR 0 2
23798: PPUSH
23799: CALL_OW 306
23803: IFFALSE 23842
// begin for j := 1 to 4 do
23805: LD_ADDR_VAR 0 3
23809: PUSH
23810: DOUBLE
23811: LD_INT 1
23813: DEC
23814: ST_TO_ADDR
23815: LD_INT 4
23817: PUSH
23818: FOR_TO
23819: IFFALSE 23840
// SetSkill ( i , j , 10 ) ;
23821: LD_VAR 0 2
23825: PPUSH
23826: LD_VAR 0 3
23830: PPUSH
23831: LD_INT 10
23833: PPUSH
23834: CALL_OW 237
23838: GO 23818
23840: POP
23841: POP
// end ;
23842: GO 23791
23844: POP
23845: POP
// end ;
23846: LD_VAR 0 1
23850: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23851: LD_INT 0
23853: PPUSH
23854: PPUSH
23855: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23856: LD_ADDR_VAR 0 2
23860: PUSH
23861: LD_INT 22
23863: PUSH
23864: LD_OWVAR 2
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 21
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 69
23891: PUSH
23892: FOR_IN
23893: IFFALSE 23934
// begin for j := 1 to 4 do
23895: LD_ADDR_VAR 0 3
23899: PUSH
23900: DOUBLE
23901: LD_INT 1
23903: DEC
23904: ST_TO_ADDR
23905: LD_INT 4
23907: PUSH
23908: FOR_TO
23909: IFFALSE 23930
// SetSkill ( i , j , 10 ) ;
23911: LD_VAR 0 2
23915: PPUSH
23916: LD_VAR 0 3
23920: PPUSH
23921: LD_INT 10
23923: PPUSH
23924: CALL_OW 237
23928: GO 23908
23930: POP
23931: POP
// end ;
23932: GO 23892
23934: POP
23935: POP
// end ;
23936: LD_VAR 0 1
23940: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23941: LD_INT 0
23943: PPUSH
// uc_side := your_side ;
23944: LD_ADDR_OWVAR 20
23948: PUSH
23949: LD_OWVAR 2
23953: ST_TO_ADDR
// uc_nation := nation ;
23954: LD_ADDR_OWVAR 21
23958: PUSH
23959: LD_VAR 0 1
23963: ST_TO_ADDR
// InitHc ;
23964: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23968: LD_INT 0
23970: PPUSH
23971: LD_VAR 0 2
23975: PPUSH
23976: LD_VAR 0 3
23980: PPUSH
23981: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23985: LD_VAR 0 4
23989: PPUSH
23990: LD_VAR 0 5
23994: PPUSH
23995: CALL_OW 428
23999: PUSH
24000: LD_INT 0
24002: EQUAL
24003: IFFALSE 24027
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24005: CALL_OW 44
24009: PPUSH
24010: LD_VAR 0 4
24014: PPUSH
24015: LD_VAR 0 5
24019: PPUSH
24020: LD_INT 1
24022: PPUSH
24023: CALL_OW 48
// end ;
24027: LD_VAR 0 6
24031: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24032: LD_INT 0
24034: PPUSH
24035: PPUSH
// uc_side := your_side ;
24036: LD_ADDR_OWVAR 20
24040: PUSH
24041: LD_OWVAR 2
24045: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24046: LD_VAR 0 1
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 3
24059: PUSH
24060: LD_INT 4
24062: PUSH
24063: LD_INT 5
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: IN
24073: IFFALSE 24085
// uc_nation := nation_american else
24075: LD_ADDR_OWVAR 21
24079: PUSH
24080: LD_INT 1
24082: ST_TO_ADDR
24083: GO 24128
// if chassis in [ 11 , 12 , 13 , 14 ] then
24085: LD_VAR 0 1
24089: PUSH
24090: LD_INT 11
24092: PUSH
24093: LD_INT 12
24095: PUSH
24096: LD_INT 13
24098: PUSH
24099: LD_INT 14
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: IN
24108: IFFALSE 24120
// uc_nation := nation_arabian else
24110: LD_ADDR_OWVAR 21
24114: PUSH
24115: LD_INT 2
24117: ST_TO_ADDR
24118: GO 24128
// uc_nation := nation_russian ;
24120: LD_ADDR_OWVAR 21
24124: PUSH
24125: LD_INT 3
24127: ST_TO_ADDR
// vc_chassis := chassis ;
24128: LD_ADDR_OWVAR 37
24132: PUSH
24133: LD_VAR 0 1
24137: ST_TO_ADDR
// vc_engine := engine ;
24138: LD_ADDR_OWVAR 39
24142: PUSH
24143: LD_VAR 0 2
24147: ST_TO_ADDR
// vc_control := control ;
24148: LD_ADDR_OWVAR 38
24152: PUSH
24153: LD_VAR 0 3
24157: ST_TO_ADDR
// vc_weapon := weapon ;
24158: LD_ADDR_OWVAR 40
24162: PUSH
24163: LD_VAR 0 4
24167: ST_TO_ADDR
// un := CreateVehicle ;
24168: LD_ADDR_VAR 0 8
24172: PUSH
24173: CALL_OW 45
24177: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24178: LD_VAR 0 8
24182: PPUSH
24183: LD_INT 0
24185: PPUSH
24186: LD_INT 5
24188: PPUSH
24189: CALL_OW 12
24193: PPUSH
24194: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24198: LD_VAR 0 8
24202: PPUSH
24203: LD_VAR 0 5
24207: PPUSH
24208: LD_VAR 0 6
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: CALL_OW 48
// end ;
24220: LD_VAR 0 7
24224: RET
// export hInvincible ; every 1 do
24225: GO 24227
24227: DISABLE
// hInvincible := [ ] ;
24228: LD_ADDR_EXP 95
24232: PUSH
24233: EMPTY
24234: ST_TO_ADDR
24235: END
// every 10 do var i ;
24236: GO 24238
24238: DISABLE
24239: LD_INT 0
24241: PPUSH
// begin enable ;
24242: ENABLE
// if not hInvincible then
24243: LD_EXP 95
24247: NOT
24248: IFFALSE 24252
// exit ;
24250: GO 24296
// for i in hInvincible do
24252: LD_ADDR_VAR 0 1
24256: PUSH
24257: LD_EXP 95
24261: PUSH
24262: FOR_IN
24263: IFFALSE 24294
// if GetLives ( i ) < 1000 then
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 256
24274: PUSH
24275: LD_INT 1000
24277: LESS
24278: IFFALSE 24292
// SetLives ( i , 1000 ) ;
24280: LD_VAR 0 1
24284: PPUSH
24285: LD_INT 1000
24287: PPUSH
24288: CALL_OW 234
24292: GO 24262
24294: POP
24295: POP
// end ;
24296: PPOPN 1
24298: END
// export function hHackInvincible ; var i ; begin
24299: LD_INT 0
24301: PPUSH
24302: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24303: LD_ADDR_VAR 0 2
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 21
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 21
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 69
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24403
// if IsSelected ( i ) then
24344: LD_VAR 0 2
24348: PPUSH
24349: CALL_OW 306
24353: IFFALSE 24401
// begin if i in hInvincible then
24355: LD_VAR 0 2
24359: PUSH
24360: LD_EXP 95
24364: IN
24365: IFFALSE 24385
// hInvincible := hInvincible diff i else
24367: LD_ADDR_EXP 95
24371: PUSH
24372: LD_EXP 95
24376: PUSH
24377: LD_VAR 0 2
24381: DIFF
24382: ST_TO_ADDR
24383: GO 24401
// hInvincible := hInvincible union i ;
24385: LD_ADDR_EXP 95
24389: PUSH
24390: LD_EXP 95
24394: PUSH
24395: LD_VAR 0 2
24399: UNION
24400: ST_TO_ADDR
// end ;
24401: GO 24341
24403: POP
24404: POP
// end ;
24405: LD_VAR 0 1
24409: RET
// export function hHackInvisible ; var i , j ; begin
24410: LD_INT 0
24412: PPUSH
24413: PPUSH
24414: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24415: LD_ADDR_VAR 0 2
24419: PUSH
24420: LD_INT 21
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PPUSH
24430: CALL_OW 69
24434: PUSH
24435: FOR_IN
24436: IFFALSE 24460
// if IsSelected ( i ) then
24438: LD_VAR 0 2
24442: PPUSH
24443: CALL_OW 306
24447: IFFALSE 24458
// ComForceInvisible ( i ) ;
24449: LD_VAR 0 2
24453: PPUSH
24454: CALL_OW 496
24458: GO 24435
24460: POP
24461: POP
// end ;
24462: LD_VAR 0 1
24466: RET
// export function hHackChangeYourSide ; begin
24467: LD_INT 0
24469: PPUSH
// if your_side = 8 then
24470: LD_OWVAR 2
24474: PUSH
24475: LD_INT 8
24477: EQUAL
24478: IFFALSE 24490
// your_side := 0 else
24480: LD_ADDR_OWVAR 2
24484: PUSH
24485: LD_INT 0
24487: ST_TO_ADDR
24488: GO 24504
// your_side := your_side + 1 ;
24490: LD_ADDR_OWVAR 2
24494: PUSH
24495: LD_OWVAR 2
24499: PUSH
24500: LD_INT 1
24502: PLUS
24503: ST_TO_ADDR
// end ;
24504: LD_VAR 0 1
24508: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24509: LD_INT 0
24511: PPUSH
24512: PPUSH
24513: PPUSH
// for i in all_units do
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_OWVAR 3
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24603
// if IsSelected ( i ) then
24527: LD_VAR 0 2
24531: PPUSH
24532: CALL_OW 306
24536: IFFALSE 24601
// begin j := GetSide ( i ) ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 255
24552: ST_TO_ADDR
// if j = 8 then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_INT 8
24560: EQUAL
24561: IFFALSE 24573
// j := 0 else
24563: LD_ADDR_VAR 0 3
24567: PUSH
24568: LD_INT 0
24570: ST_TO_ADDR
24571: GO 24587
// j := j + 1 ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_VAR 0 3
24582: PUSH
24583: LD_INT 1
24585: PLUS
24586: ST_TO_ADDR
// SetSide ( i , j ) ;
24587: LD_VAR 0 2
24591: PPUSH
24592: LD_VAR 0 3
24596: PPUSH
24597: CALL_OW 235
// end ;
24601: GO 24524
24603: POP
24604: POP
// end ;
24605: LD_VAR 0 1
24609: RET
// export function hHackFog ; begin
24610: LD_INT 0
24612: PPUSH
// FogOff ( true ) ;
24613: LD_INT 1
24615: PPUSH
24616: CALL_OW 344
// end ;
24620: LD_VAR 0 1
24624: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24625: LD_INT 0
24627: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 3
24642: PPUSH
24643: LD_INT 1
24645: PPUSH
24646: LD_INT 1
24648: PPUSH
24649: CALL_OW 483
// CenterOnXY ( x , y ) ;
24653: LD_VAR 0 2
24657: PPUSH
24658: LD_VAR 0 3
24662: PPUSH
24663: CALL_OW 84
// end ; end_of_file
24667: LD_VAR 0 4
24671: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24672: LD_INT 0
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 264
24687: PUSH
24688: LD_EXP 23
24692: EQUAL
24693: IFFALSE 24765
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24695: LD_INT 68
24697: PPUSH
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 255
24707: PPUSH
24708: CALL_OW 321
24712: PUSH
24713: LD_INT 2
24715: EQUAL
24716: IFFALSE 24728
// eff := 70 else
24718: LD_ADDR_VAR 0 4
24722: PUSH
24723: LD_INT 70
24725: ST_TO_ADDR
24726: GO 24736
// eff := 30 ;
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_INT 30
24735: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: CALL_OW 250
24745: PPUSH
24746: LD_VAR 0 1
24750: PPUSH
24751: CALL_OW 251
24755: PPUSH
24756: LD_VAR 0 4
24760: PPUSH
24761: CALL_OW 495
// end ; end ;
24765: LD_VAR 0 2
24769: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24770: LD_INT 0
24772: PPUSH
// end ;
24773: LD_VAR 0 4
24777: RET
// export function SOS_Command ( cmd ) ; begin
24778: LD_INT 0
24780: PPUSH
// end ;
24781: LD_VAR 0 2
24785: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24786: LD_INT 0
24788: PPUSH
// end ;
24789: LD_VAR 0 6
24793: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24794: LD_INT 0
24796: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24797: LD_VAR 0 1
24801: PUSH
24802: LD_INT 250
24804: EQUAL
24805: PUSH
24806: LD_VAR 0 2
24810: PPUSH
24811: CALL_OW 264
24815: PUSH
24816: LD_EXP 26
24820: EQUAL
24821: AND
24822: IFFALSE 24843
// MinerPlaceMine ( unit , x , y ) ;
24824: LD_VAR 0 2
24828: PPUSH
24829: LD_VAR 0 4
24833: PPUSH
24834: LD_VAR 0 5
24838: PPUSH
24839: CALL 27192 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24843: LD_VAR 0 1
24847: PUSH
24848: LD_INT 251
24850: EQUAL
24851: PUSH
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL_OW 264
24861: PUSH
24862: LD_EXP 26
24866: EQUAL
24867: AND
24868: IFFALSE 24889
// MinerDetonateMine ( unit , x , y ) ;
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_VAR 0 4
24879: PPUSH
24880: LD_VAR 0 5
24884: PPUSH
24885: CALL 27469 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24889: LD_VAR 0 1
24893: PUSH
24894: LD_INT 252
24896: EQUAL
24897: PUSH
24898: LD_VAR 0 2
24902: PPUSH
24903: CALL_OW 264
24907: PUSH
24908: LD_EXP 26
24912: EQUAL
24913: AND
24914: IFFALSE 24935
// MinerCreateMinefield ( unit , x , y ) ;
24916: LD_VAR 0 2
24920: PPUSH
24921: LD_VAR 0 4
24925: PPUSH
24926: LD_VAR 0 5
24930: PPUSH
24931: CALL 27886 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 253
24942: EQUAL
24943: PUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: CALL_OW 257
24953: PUSH
24954: LD_INT 5
24956: EQUAL
24957: AND
24958: IFFALSE 24979
// ComBinocular ( unit , x , y ) ;
24960: LD_VAR 0 2
24964: PPUSH
24965: LD_VAR 0 4
24969: PPUSH
24970: LD_VAR 0 5
24974: PPUSH
24975: CALL 28257 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24979: LD_VAR 0 1
24983: PUSH
24984: LD_INT 254
24986: EQUAL
24987: PUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: CALL_OW 264
24997: PUSH
24998: LD_EXP 21
25002: EQUAL
25003: AND
25004: PUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: CALL_OW 263
25014: PUSH
25015: LD_INT 3
25017: EQUAL
25018: AND
25019: IFFALSE 25035
// HackDestroyVehicle ( unit , selectedUnit ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 3
25030: PPUSH
25031: CALL 26552 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25035: LD_VAR 0 1
25039: PUSH
25040: LD_INT 255
25042: EQUAL
25043: PUSH
25044: LD_VAR 0 2
25048: PPUSH
25049: CALL_OW 264
25053: PUSH
25054: LD_INT 14
25056: PUSH
25057: LD_INT 53
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: IN
25064: AND
25065: PUSH
25066: LD_VAR 0 4
25070: PPUSH
25071: LD_VAR 0 5
25075: PPUSH
25076: CALL_OW 488
25080: AND
25081: IFFALSE 25105
// CutTreeXYR ( unit , x , y , 12 ) ;
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_VAR 0 4
25092: PPUSH
25093: LD_VAR 0 5
25097: PPUSH
25098: LD_INT 12
25100: PPUSH
25101: CALL 25118 0 4
// end ;
25105: LD_VAR 0 6
25109: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25110: LD_INT 0
25112: PPUSH
// end ;
25113: LD_VAR 0 4
25117: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25118: LD_INT 0
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
25128: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25129: LD_VAR 0 1
25133: NOT
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: CALL_OW 488
25149: NOT
25150: OR
25151: PUSH
25152: LD_VAR 0 4
25156: NOT
25157: OR
25158: IFFALSE 25162
// exit ;
25160: GO 25502
// list := [ ] ;
25162: LD_ADDR_VAR 0 13
25166: PUSH
25167: EMPTY
25168: ST_TO_ADDR
// if x - r < 0 then
25169: LD_VAR 0 2
25173: PUSH
25174: LD_VAR 0 4
25178: MINUS
25179: PUSH
25180: LD_INT 0
25182: LESS
25183: IFFALSE 25195
// min_x := 0 else
25185: LD_ADDR_VAR 0 7
25189: PUSH
25190: LD_INT 0
25192: ST_TO_ADDR
25193: GO 25211
// min_x := x - r ;
25195: LD_ADDR_VAR 0 7
25199: PUSH
25200: LD_VAR 0 2
25204: PUSH
25205: LD_VAR 0 4
25209: MINUS
25210: ST_TO_ADDR
// if y - r < 0 then
25211: LD_VAR 0 3
25215: PUSH
25216: LD_VAR 0 4
25220: MINUS
25221: PUSH
25222: LD_INT 0
25224: LESS
25225: IFFALSE 25237
// min_y := 0 else
25227: LD_ADDR_VAR 0 8
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
25235: GO 25253
// min_y := y - r ;
25237: LD_ADDR_VAR 0 8
25241: PUSH
25242: LD_VAR 0 3
25246: PUSH
25247: LD_VAR 0 4
25251: MINUS
25252: ST_TO_ADDR
// max_x := x + r ;
25253: LD_ADDR_VAR 0 9
25257: PUSH
25258: LD_VAR 0 2
25262: PUSH
25263: LD_VAR 0 4
25267: PLUS
25268: ST_TO_ADDR
// max_y := y + r ;
25269: LD_ADDR_VAR 0 10
25273: PUSH
25274: LD_VAR 0 3
25278: PUSH
25279: LD_VAR 0 4
25283: PLUS
25284: ST_TO_ADDR
// for _x = min_x to max_x do
25285: LD_ADDR_VAR 0 11
25289: PUSH
25290: DOUBLE
25291: LD_VAR 0 7
25295: DEC
25296: ST_TO_ADDR
25297: LD_VAR 0 9
25301: PUSH
25302: FOR_TO
25303: IFFALSE 25420
// for _y = min_y to max_y do
25305: LD_ADDR_VAR 0 12
25309: PUSH
25310: DOUBLE
25311: LD_VAR 0 8
25315: DEC
25316: ST_TO_ADDR
25317: LD_VAR 0 10
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25416
// begin if not ValidHex ( _x , _y ) then
25325: LD_VAR 0 11
25329: PPUSH
25330: LD_VAR 0 12
25334: PPUSH
25335: CALL_OW 488
25339: NOT
25340: IFFALSE 25344
// continue ;
25342: GO 25322
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25344: LD_VAR 0 11
25348: PPUSH
25349: LD_VAR 0 12
25353: PPUSH
25354: CALL_OW 351
25358: PUSH
25359: LD_VAR 0 11
25363: PPUSH
25364: LD_VAR 0 12
25368: PPUSH
25369: CALL_OW 554
25373: AND
25374: IFFALSE 25414
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25376: LD_ADDR_VAR 0 13
25380: PUSH
25381: LD_VAR 0 13
25385: PPUSH
25386: LD_VAR 0 13
25390: PUSH
25391: LD_INT 1
25393: PLUS
25394: PPUSH
25395: LD_VAR 0 11
25399: PUSH
25400: LD_VAR 0 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 2
25413: ST_TO_ADDR
// end ;
25414: GO 25322
25416: POP
25417: POP
25418: GO 25302
25420: POP
25421: POP
// if not list then
25422: LD_VAR 0 13
25426: NOT
25427: IFFALSE 25431
// exit ;
25429: GO 25502
// for i in list do
25431: LD_ADDR_VAR 0 6
25435: PUSH
25436: LD_VAR 0 13
25440: PUSH
25441: FOR_IN
25442: IFFALSE 25500
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25444: LD_VAR 0 1
25448: PPUSH
25449: LD_STRING M
25451: PUSH
25452: LD_VAR 0 6
25456: PUSH
25457: LD_INT 1
25459: ARRAY
25460: PUSH
25461: LD_VAR 0 6
25465: PUSH
25466: LD_INT 2
25468: ARRAY
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: PPUSH
25494: CALL_OW 447
25498: GO 25441
25500: POP
25501: POP
// end ;
25502: LD_VAR 0 5
25506: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25507: LD_EXP 98
25511: NOT
25512: IFFALSE 25562
25514: GO 25516
25516: DISABLE
// begin initHack := true ;
25517: LD_ADDR_EXP 98
25521: PUSH
25522: LD_INT 1
25524: ST_TO_ADDR
// hackTanks := [ ] ;
25525: LD_ADDR_EXP 99
25529: PUSH
25530: EMPTY
25531: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25532: LD_ADDR_EXP 100
25536: PUSH
25537: EMPTY
25538: ST_TO_ADDR
// hackLimit := 3 ;
25539: LD_ADDR_EXP 101
25543: PUSH
25544: LD_INT 3
25546: ST_TO_ADDR
// hackDist := 12 ;
25547: LD_ADDR_EXP 102
25551: PUSH
25552: LD_INT 12
25554: ST_TO_ADDR
// hackCounter := [ ] ;
25555: LD_ADDR_EXP 103
25559: PUSH
25560: EMPTY
25561: ST_TO_ADDR
// end ;
25562: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25563: LD_EXP 98
25567: PUSH
25568: LD_INT 34
25570: PUSH
25571: LD_EXP 21
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PPUSH
25580: CALL_OW 69
25584: AND
25585: IFFALSE 25840
25587: GO 25589
25589: DISABLE
25590: LD_INT 0
25592: PPUSH
25593: PPUSH
// begin enable ;
25594: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25595: LD_ADDR_VAR 0 1
25599: PUSH
25600: LD_INT 34
25602: PUSH
25603: LD_EXP 21
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PPUSH
25612: CALL_OW 69
25616: PUSH
25617: FOR_IN
25618: IFFALSE 25838
// begin if not i in hackTanks then
25620: LD_VAR 0 1
25624: PUSH
25625: LD_EXP 99
25629: IN
25630: NOT
25631: IFFALSE 25714
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25633: LD_ADDR_EXP 99
25637: PUSH
25638: LD_EXP 99
25642: PPUSH
25643: LD_EXP 99
25647: PUSH
25648: LD_INT 1
25650: PLUS
25651: PPUSH
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL_OW 1
25661: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25662: LD_ADDR_EXP 100
25666: PUSH
25667: LD_EXP 100
25671: PPUSH
25672: LD_EXP 100
25676: PUSH
25677: LD_INT 1
25679: PLUS
25680: PPUSH
25681: EMPTY
25682: PPUSH
25683: CALL_OW 1
25687: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25688: LD_ADDR_EXP 103
25692: PUSH
25693: LD_EXP 103
25697: PPUSH
25698: LD_EXP 103
25702: PUSH
25703: LD_INT 1
25705: PLUS
25706: PPUSH
25707: EMPTY
25708: PPUSH
25709: CALL_OW 1
25713: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25714: LD_VAR 0 1
25718: PPUSH
25719: CALL_OW 302
25723: NOT
25724: IFFALSE 25737
// begin HackUnlinkAll ( i ) ;
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL 25843 0 1
// continue ;
25735: GO 25617
// end ; HackCheckCapturedStatus ( i ) ;
25737: LD_VAR 0 1
25741: PPUSH
25742: CALL 26286 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25746: LD_ADDR_VAR 0 2
25750: PUSH
25751: LD_INT 81
25753: PUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 255
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 33
25770: PUSH
25771: LD_INT 3
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 91
25780: PUSH
25781: LD_VAR 0 1
25785: PUSH
25786: LD_EXP 102
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 50
25798: PUSH
25799: EMPTY
25800: LIST
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: PPUSH
25808: CALL_OW 69
25812: ST_TO_ADDR
// if not tmp then
25813: LD_VAR 0 2
25817: NOT
25818: IFFALSE 25822
// continue ;
25820: GO 25617
// HackLink ( i , tmp ) ;
25822: LD_VAR 0 1
25826: PPUSH
25827: LD_VAR 0 2
25831: PPUSH
25832: CALL 25979 0 2
// end ;
25836: GO 25617
25838: POP
25839: POP
// end ;
25840: PPOPN 2
25842: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25843: LD_INT 0
25845: PPUSH
25846: PPUSH
25847: PPUSH
// if not hack in hackTanks then
25848: LD_VAR 0 1
25852: PUSH
25853: LD_EXP 99
25857: IN
25858: NOT
25859: IFFALSE 25863
// exit ;
25861: GO 25974
// index := GetElementIndex ( hackTanks , hack ) ;
25863: LD_ADDR_VAR 0 4
25867: PUSH
25868: LD_EXP 99
25872: PPUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: CALL 33448 0 2
25882: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25883: LD_EXP 100
25887: PUSH
25888: LD_VAR 0 4
25892: ARRAY
25893: IFFALSE 25974
// begin for i in hackTanksCaptured [ index ] do
25895: LD_ADDR_VAR 0 3
25899: PUSH
25900: LD_EXP 100
25904: PUSH
25905: LD_VAR 0 4
25909: ARRAY
25910: PUSH
25911: FOR_IN
25912: IFFALSE 25938
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25914: LD_VAR 0 3
25918: PUSH
25919: LD_INT 1
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 3
25927: PUSH
25928: LD_INT 2
25930: ARRAY
25931: PPUSH
25932: CALL_OW 235
25936: GO 25911
25938: POP
25939: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25940: LD_ADDR_EXP 100
25944: PUSH
25945: LD_EXP 100
25949: PPUSH
25950: LD_VAR 0 4
25954: PPUSH
25955: EMPTY
25956: PPUSH
25957: CALL_OW 1
25961: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25962: LD_VAR 0 1
25966: PPUSH
25967: LD_INT 0
25969: PPUSH
25970: CALL_OW 505
// end ; end ;
25974: LD_VAR 0 2
25978: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
// if not hack in hackTanks or not vehicles then
25984: LD_VAR 0 1
25988: PUSH
25989: LD_EXP 99
25993: IN
25994: NOT
25995: PUSH
25996: LD_VAR 0 2
26000: NOT
26001: OR
26002: IFFALSE 26006
// exit ;
26004: GO 26281
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26006: LD_ADDR_VAR 0 2
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_VAR 0 2
26020: PPUSH
26021: LD_INT 1
26023: PPUSH
26024: LD_INT 1
26026: PPUSH
26027: CALL 34098 0 4
26031: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26032: LD_ADDR_VAR 0 5
26036: PUSH
26037: LD_EXP 99
26041: PPUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL 33448 0 2
26051: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26052: LD_EXP 100
26056: PUSH
26057: LD_VAR 0 5
26061: ARRAY
26062: PUSH
26063: LD_EXP 101
26067: LESS
26068: IFFALSE 26257
// begin for i := 1 to vehicles do
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: DOUBLE
26076: LD_INT 1
26078: DEC
26079: ST_TO_ADDR
26080: LD_VAR 0 2
26084: PUSH
26085: FOR_TO
26086: IFFALSE 26255
// begin if hackTanksCaptured [ index ] = hackLimit then
26088: LD_EXP 100
26092: PUSH
26093: LD_VAR 0 5
26097: ARRAY
26098: PUSH
26099: LD_EXP 101
26103: EQUAL
26104: IFFALSE 26108
// break ;
26106: GO 26255
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26108: LD_ADDR_EXP 103
26112: PUSH
26113: LD_EXP 103
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: LD_EXP 103
26127: PUSH
26128: LD_VAR 0 5
26132: ARRAY
26133: PUSH
26134: LD_INT 1
26136: PLUS
26137: PPUSH
26138: CALL_OW 1
26142: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26143: LD_ADDR_EXP 100
26147: PUSH
26148: LD_EXP 100
26152: PPUSH
26153: LD_VAR 0 5
26157: PUSH
26158: LD_EXP 100
26162: PUSH
26163: LD_VAR 0 5
26167: ARRAY
26168: PUSH
26169: LD_INT 1
26171: PLUS
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PPUSH
26177: LD_VAR 0 2
26181: PUSH
26182: LD_VAR 0 4
26186: ARRAY
26187: PUSH
26188: LD_VAR 0 2
26192: PUSH
26193: LD_VAR 0 4
26197: ARRAY
26198: PPUSH
26199: CALL_OW 255
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PPUSH
26208: CALL 33663 0 3
26212: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26213: LD_VAR 0 2
26217: PUSH
26218: LD_VAR 0 4
26222: ARRAY
26223: PPUSH
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 255
26233: PPUSH
26234: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26238: LD_VAR 0 2
26242: PUSH
26243: LD_VAR 0 4
26247: ARRAY
26248: PPUSH
26249: CALL_OW 141
// end ;
26253: GO 26085
26255: POP
26256: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26257: LD_VAR 0 1
26261: PPUSH
26262: LD_EXP 100
26266: PUSH
26267: LD_VAR 0 5
26271: ARRAY
26272: PUSH
26273: LD_INT 0
26275: PLUS
26276: PPUSH
26277: CALL_OW 505
// end ;
26281: LD_VAR 0 3
26285: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26286: LD_INT 0
26288: PPUSH
26289: PPUSH
26290: PPUSH
26291: PPUSH
// if not hack in hackTanks then
26292: LD_VAR 0 1
26296: PUSH
26297: LD_EXP 99
26301: IN
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26547
// index := GetElementIndex ( hackTanks , hack ) ;
26307: LD_ADDR_VAR 0 4
26311: PUSH
26312: LD_EXP 99
26316: PPUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL 33448 0 2
26326: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26327: LD_ADDR_VAR 0 3
26331: PUSH
26332: DOUBLE
26333: LD_EXP 100
26337: PUSH
26338: LD_VAR 0 4
26342: ARRAY
26343: INC
26344: ST_TO_ADDR
26345: LD_INT 1
26347: PUSH
26348: FOR_DOWNTO
26349: IFFALSE 26521
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26351: LD_ADDR_VAR 0 5
26355: PUSH
26356: LD_EXP 100
26360: PUSH
26361: LD_VAR 0 4
26365: ARRAY
26366: PUSH
26367: LD_VAR 0 3
26371: ARRAY
26372: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26373: LD_VAR 0 5
26377: PUSH
26378: LD_INT 1
26380: ARRAY
26381: PPUSH
26382: CALL_OW 302
26386: NOT
26387: PUSH
26388: LD_VAR 0 5
26392: PUSH
26393: LD_INT 1
26395: ARRAY
26396: PPUSH
26397: CALL_OW 255
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 255
26411: NONEQUAL
26412: OR
26413: IFFALSE 26519
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26415: LD_VAR 0 5
26419: PUSH
26420: LD_INT 1
26422: ARRAY
26423: PPUSH
26424: CALL_OW 305
26428: PUSH
26429: LD_VAR 0 5
26433: PUSH
26434: LD_INT 1
26436: ARRAY
26437: PPUSH
26438: CALL_OW 255
26442: PUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 255
26452: EQUAL
26453: AND
26454: IFFALSE 26478
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26456: LD_VAR 0 5
26460: PUSH
26461: LD_INT 1
26463: ARRAY
26464: PPUSH
26465: LD_VAR 0 5
26469: PUSH
26470: LD_INT 2
26472: ARRAY
26473: PPUSH
26474: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26478: LD_ADDR_EXP 100
26482: PUSH
26483: LD_EXP 100
26487: PPUSH
26488: LD_VAR 0 4
26492: PPUSH
26493: LD_EXP 100
26497: PUSH
26498: LD_VAR 0 4
26502: ARRAY
26503: PPUSH
26504: LD_VAR 0 3
26508: PPUSH
26509: CALL_OW 3
26513: PPUSH
26514: CALL_OW 1
26518: ST_TO_ADDR
// end ; end ;
26519: GO 26348
26521: POP
26522: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26523: LD_VAR 0 1
26527: PPUSH
26528: LD_EXP 100
26532: PUSH
26533: LD_VAR 0 4
26537: ARRAY
26538: PUSH
26539: LD_INT 0
26541: PLUS
26542: PPUSH
26543: CALL_OW 505
// end ;
26547: LD_VAR 0 2
26551: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
// if not hack in hackTanks then
26558: LD_VAR 0 1
26562: PUSH
26563: LD_EXP 99
26567: IN
26568: NOT
26569: IFFALSE 26573
// exit ;
26571: GO 26658
// index := GetElementIndex ( hackTanks , hack ) ;
26573: LD_ADDR_VAR 0 5
26577: PUSH
26578: LD_EXP 99
26582: PPUSH
26583: LD_VAR 0 1
26587: PPUSH
26588: CALL 33448 0 2
26592: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26593: LD_ADDR_VAR 0 4
26597: PUSH
26598: DOUBLE
26599: LD_INT 1
26601: DEC
26602: ST_TO_ADDR
26603: LD_EXP 100
26607: PUSH
26608: LD_VAR 0 5
26612: ARRAY
26613: PUSH
26614: FOR_TO
26615: IFFALSE 26656
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26617: LD_EXP 100
26621: PUSH
26622: LD_VAR 0 5
26626: ARRAY
26627: PUSH
26628: LD_VAR 0 4
26632: ARRAY
26633: PUSH
26634: LD_INT 1
26636: ARRAY
26637: PUSH
26638: LD_VAR 0 2
26642: EQUAL
26643: IFFALSE 26654
// KillUnit ( vehicle ) ;
26645: LD_VAR 0 2
26649: PPUSH
26650: CALL_OW 66
26654: GO 26614
26656: POP
26657: POP
// end ;
26658: LD_VAR 0 3
26662: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26663: LD_EXP 104
26667: NOT
26668: IFFALSE 26703
26670: GO 26672
26672: DISABLE
// begin initMiner := true ;
26673: LD_ADDR_EXP 104
26677: PUSH
26678: LD_INT 1
26680: ST_TO_ADDR
// minersList := [ ] ;
26681: LD_ADDR_EXP 105
26685: PUSH
26686: EMPTY
26687: ST_TO_ADDR
// minerMinesList := [ ] ;
26688: LD_ADDR_EXP 106
26692: PUSH
26693: EMPTY
26694: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26695: LD_ADDR_EXP 107
26699: PUSH
26700: LD_INT 5
26702: ST_TO_ADDR
// end ;
26703: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26704: LD_EXP 104
26708: PUSH
26709: LD_INT 34
26711: PUSH
26712: LD_EXP 26
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PPUSH
26721: CALL_OW 69
26725: AND
26726: IFFALSE 27189
26728: GO 26730
26730: DISABLE
26731: LD_INT 0
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
// begin enable ;
26737: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26738: LD_ADDR_VAR 0 1
26742: PUSH
26743: LD_INT 34
26745: PUSH
26746: LD_EXP 26
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PPUSH
26755: CALL_OW 69
26759: PUSH
26760: FOR_IN
26761: IFFALSE 26833
// begin if not i in minersList then
26763: LD_VAR 0 1
26767: PUSH
26768: LD_EXP 105
26772: IN
26773: NOT
26774: IFFALSE 26831
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26776: LD_ADDR_EXP 105
26780: PUSH
26781: LD_EXP 105
26785: PPUSH
26786: LD_EXP 105
26790: PUSH
26791: LD_INT 1
26793: PLUS
26794: PPUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 1
26804: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26805: LD_ADDR_EXP 106
26809: PUSH
26810: LD_EXP 106
26814: PPUSH
26815: LD_EXP 106
26819: PUSH
26820: LD_INT 1
26822: PLUS
26823: PPUSH
26824: EMPTY
26825: PPUSH
26826: CALL_OW 1
26830: ST_TO_ADDR
// end end ;
26831: GO 26760
26833: POP
26834: POP
// for i := minerMinesList downto 1 do
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: DOUBLE
26841: LD_EXP 106
26845: INC
26846: ST_TO_ADDR
26847: LD_INT 1
26849: PUSH
26850: FOR_DOWNTO
26851: IFFALSE 27187
// begin if IsLive ( minersList [ i ] ) then
26853: LD_EXP 105
26857: PUSH
26858: LD_VAR 0 1
26862: ARRAY
26863: PPUSH
26864: CALL_OW 300
26868: IFFALSE 26896
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26870: LD_EXP 105
26874: PUSH
26875: LD_VAR 0 1
26879: ARRAY
26880: PPUSH
26881: LD_EXP 106
26885: PUSH
26886: LD_VAR 0 1
26890: ARRAY
26891: PPUSH
26892: CALL_OW 505
// if not minerMinesList [ i ] then
26896: LD_EXP 106
26900: PUSH
26901: LD_VAR 0 1
26905: ARRAY
26906: NOT
26907: IFFALSE 26911
// continue ;
26909: GO 26850
// for j := minerMinesList [ i ] downto 1 do
26911: LD_ADDR_VAR 0 2
26915: PUSH
26916: DOUBLE
26917: LD_EXP 106
26921: PUSH
26922: LD_VAR 0 1
26926: ARRAY
26927: INC
26928: ST_TO_ADDR
26929: LD_INT 1
26931: PUSH
26932: FOR_DOWNTO
26933: IFFALSE 27183
// begin side := GetSide ( minersList [ i ] ) ;
26935: LD_ADDR_VAR 0 3
26939: PUSH
26940: LD_EXP 105
26944: PUSH
26945: LD_VAR 0 1
26949: ARRAY
26950: PPUSH
26951: CALL_OW 255
26955: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26956: LD_ADDR_VAR 0 4
26960: PUSH
26961: LD_EXP 106
26965: PUSH
26966: LD_VAR 0 1
26970: ARRAY
26971: PUSH
26972: LD_VAR 0 2
26976: ARRAY
26977: PUSH
26978: LD_INT 1
26980: ARRAY
26981: PPUSH
26982: LD_EXP 106
26986: PUSH
26987: LD_VAR 0 1
26991: ARRAY
26992: PUSH
26993: LD_VAR 0 2
26997: ARRAY
26998: PUSH
26999: LD_INT 2
27001: ARRAY
27002: PPUSH
27003: CALL_OW 428
27007: ST_TO_ADDR
// if not tmp then
27008: LD_VAR 0 4
27012: NOT
27013: IFFALSE 27017
// continue ;
27015: GO 26932
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27017: LD_VAR 0 4
27021: PUSH
27022: LD_INT 81
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: IN
27039: PUSH
27040: LD_EXP 106
27044: PUSH
27045: LD_VAR 0 1
27049: ARRAY
27050: PUSH
27051: LD_VAR 0 2
27055: ARRAY
27056: PUSH
27057: LD_INT 1
27059: ARRAY
27060: PPUSH
27061: LD_EXP 106
27065: PUSH
27066: LD_VAR 0 1
27070: ARRAY
27071: PUSH
27072: LD_VAR 0 2
27076: ARRAY
27077: PUSH
27078: LD_INT 2
27080: ARRAY
27081: PPUSH
27082: CALL_OW 458
27086: AND
27087: IFFALSE 27181
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27089: LD_EXP 106
27093: PUSH
27094: LD_VAR 0 1
27098: ARRAY
27099: PUSH
27100: LD_VAR 0 2
27104: ARRAY
27105: PUSH
27106: LD_INT 1
27108: ARRAY
27109: PPUSH
27110: LD_EXP 106
27114: PUSH
27115: LD_VAR 0 1
27119: ARRAY
27120: PUSH
27121: LD_VAR 0 2
27125: ARRAY
27126: PUSH
27127: LD_INT 2
27129: ARRAY
27130: PPUSH
27131: LD_VAR 0 3
27135: PPUSH
27136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27140: LD_ADDR_EXP 106
27144: PUSH
27145: LD_EXP 106
27149: PPUSH
27150: LD_VAR 0 1
27154: PPUSH
27155: LD_EXP 106
27159: PUSH
27160: LD_VAR 0 1
27164: ARRAY
27165: PPUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 3
27175: PPUSH
27176: CALL_OW 1
27180: ST_TO_ADDR
// end ; end ;
27181: GO 26932
27183: POP
27184: POP
// end ;
27185: GO 26850
27187: POP
27188: POP
// end ;
27189: PPOPN 4
27191: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27192: LD_INT 0
27194: PPUSH
27195: PPUSH
// result := false ;
27196: LD_ADDR_VAR 0 4
27200: PUSH
27201: LD_INT 0
27203: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 264
27213: PUSH
27214: LD_EXP 26
27218: EQUAL
27219: NOT
27220: IFFALSE 27224
// exit ;
27222: GO 27464
// index := GetElementIndex ( minersList , unit ) ;
27224: LD_ADDR_VAR 0 5
27228: PUSH
27229: LD_EXP 105
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL 33448 0 2
27243: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27244: LD_EXP 106
27248: PUSH
27249: LD_VAR 0 5
27253: ARRAY
27254: PUSH
27255: LD_EXP 107
27259: GREATEREQUAL
27260: IFFALSE 27264
// exit ;
27262: GO 27464
// ComMoveXY ( unit , x , y ) ;
27264: LD_VAR 0 1
27268: PPUSH
27269: LD_VAR 0 2
27273: PPUSH
27274: LD_VAR 0 3
27278: PPUSH
27279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27283: LD_INT 35
27285: PPUSH
27286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: LD_VAR 0 3
27304: PPUSH
27305: CALL 64220 0 3
27309: NOT
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 314
27320: AND
27321: IFFALSE 27325
// exit ;
27323: GO 27464
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: LD_VAR 0 3
27334: PPUSH
27335: CALL_OW 428
27339: PUSH
27340: LD_VAR 0 1
27344: EQUAL
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 314
27355: NOT
27356: AND
27357: IFFALSE 27283
// PlaySoundXY ( x , y , PlantMine ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_VAR 0 3
27368: PPUSH
27369: LD_STRING PlantMine
27371: PPUSH
27372: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27376: LD_VAR 0 2
27380: PPUSH
27381: LD_VAR 0 3
27385: PPUSH
27386: LD_VAR 0 1
27390: PPUSH
27391: CALL_OW 255
27395: PPUSH
27396: LD_INT 0
27398: PPUSH
27399: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27403: LD_ADDR_EXP 106
27407: PUSH
27408: LD_EXP 106
27412: PPUSH
27413: LD_VAR 0 5
27417: PUSH
27418: LD_EXP 106
27422: PUSH
27423: LD_VAR 0 5
27427: ARRAY
27428: PUSH
27429: LD_INT 1
27431: PLUS
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PPUSH
27437: LD_VAR 0 2
27441: PUSH
27442: LD_VAR 0 3
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL 33663 0 3
27455: ST_TO_ADDR
// result := true ;
27456: LD_ADDR_VAR 0 4
27460: PUSH
27461: LD_INT 1
27463: ST_TO_ADDR
// end ;
27464: LD_VAR 0 4
27468: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
27473: PPUSH
// if not unit in minersList then
27474: LD_VAR 0 1
27478: PUSH
27479: LD_EXP 105
27483: IN
27484: NOT
27485: IFFALSE 27489
// exit ;
27487: GO 27881
// index := GetElementIndex ( minersList , unit ) ;
27489: LD_ADDR_VAR 0 6
27493: PUSH
27494: LD_EXP 105
27498: PPUSH
27499: LD_VAR 0 1
27503: PPUSH
27504: CALL 33448 0 2
27508: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27509: LD_ADDR_VAR 0 5
27513: PUSH
27514: DOUBLE
27515: LD_EXP 106
27519: PUSH
27520: LD_VAR 0 6
27524: ARRAY
27525: INC
27526: ST_TO_ADDR
27527: LD_INT 1
27529: PUSH
27530: FOR_DOWNTO
27531: IFFALSE 27692
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27533: LD_EXP 106
27537: PUSH
27538: LD_VAR 0 6
27542: ARRAY
27543: PUSH
27544: LD_VAR 0 5
27548: ARRAY
27549: PUSH
27550: LD_INT 1
27552: ARRAY
27553: PUSH
27554: LD_VAR 0 2
27558: EQUAL
27559: PUSH
27560: LD_EXP 106
27564: PUSH
27565: LD_VAR 0 6
27569: ARRAY
27570: PUSH
27571: LD_VAR 0 5
27575: ARRAY
27576: PUSH
27577: LD_INT 2
27579: ARRAY
27580: PUSH
27581: LD_VAR 0 3
27585: EQUAL
27586: AND
27587: IFFALSE 27690
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27589: LD_EXP 106
27593: PUSH
27594: LD_VAR 0 6
27598: ARRAY
27599: PUSH
27600: LD_VAR 0 5
27604: ARRAY
27605: PUSH
27606: LD_INT 1
27608: ARRAY
27609: PPUSH
27610: LD_EXP 106
27614: PUSH
27615: LD_VAR 0 6
27619: ARRAY
27620: PUSH
27621: LD_VAR 0 5
27625: ARRAY
27626: PUSH
27627: LD_INT 2
27629: ARRAY
27630: PPUSH
27631: LD_VAR 0 1
27635: PPUSH
27636: CALL_OW 255
27640: PPUSH
27641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27645: LD_ADDR_EXP 106
27649: PUSH
27650: LD_EXP 106
27654: PPUSH
27655: LD_VAR 0 6
27659: PPUSH
27660: LD_EXP 106
27664: PUSH
27665: LD_VAR 0 6
27669: ARRAY
27670: PPUSH
27671: LD_VAR 0 5
27675: PPUSH
27676: CALL_OW 3
27680: PPUSH
27681: CALL_OW 1
27685: ST_TO_ADDR
// exit ;
27686: POP
27687: POP
27688: GO 27881
// end ; end ;
27690: GO 27530
27692: POP
27693: POP
// for i := minerMinesList [ index ] downto 1 do
27694: LD_ADDR_VAR 0 5
27698: PUSH
27699: DOUBLE
27700: LD_EXP 106
27704: PUSH
27705: LD_VAR 0 6
27709: ARRAY
27710: INC
27711: ST_TO_ADDR
27712: LD_INT 1
27714: PUSH
27715: FOR_DOWNTO
27716: IFFALSE 27879
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27718: LD_EXP 106
27722: PUSH
27723: LD_VAR 0 6
27727: ARRAY
27728: PUSH
27729: LD_VAR 0 5
27733: ARRAY
27734: PUSH
27735: LD_INT 1
27737: ARRAY
27738: PPUSH
27739: LD_EXP 106
27743: PUSH
27744: LD_VAR 0 6
27748: ARRAY
27749: PUSH
27750: LD_VAR 0 5
27754: ARRAY
27755: PUSH
27756: LD_INT 2
27758: ARRAY
27759: PPUSH
27760: LD_VAR 0 2
27764: PPUSH
27765: LD_VAR 0 3
27769: PPUSH
27770: CALL_OW 298
27774: PUSH
27775: LD_INT 6
27777: LESS
27778: IFFALSE 27877
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27780: LD_EXP 106
27784: PUSH
27785: LD_VAR 0 6
27789: ARRAY
27790: PUSH
27791: LD_VAR 0 5
27795: ARRAY
27796: PUSH
27797: LD_INT 1
27799: ARRAY
27800: PPUSH
27801: LD_EXP 106
27805: PUSH
27806: LD_VAR 0 6
27810: ARRAY
27811: PUSH
27812: LD_VAR 0 5
27816: ARRAY
27817: PUSH
27818: LD_INT 2
27820: ARRAY
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 255
27831: PPUSH
27832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27836: LD_ADDR_EXP 106
27840: PUSH
27841: LD_EXP 106
27845: PPUSH
27846: LD_VAR 0 6
27850: PPUSH
27851: LD_EXP 106
27855: PUSH
27856: LD_VAR 0 6
27860: ARRAY
27861: PPUSH
27862: LD_VAR 0 5
27866: PPUSH
27867: CALL_OW 3
27871: PPUSH
27872: CALL_OW 1
27876: ST_TO_ADDR
// end ; end ;
27877: GO 27715
27879: POP
27880: POP
// end ;
27881: LD_VAR 0 4
27885: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 264
27906: PUSH
27907: LD_EXP 26
27911: EQUAL
27912: NOT
27913: PUSH
27914: LD_VAR 0 1
27918: PUSH
27919: LD_EXP 105
27923: IN
27924: NOT
27925: OR
27926: IFFALSE 27930
// exit ;
27928: GO 28252
// index := GetElementIndex ( minersList , unit ) ;
27930: LD_ADDR_VAR 0 6
27934: PUSH
27935: LD_EXP 105
27939: PPUSH
27940: LD_VAR 0 1
27944: PPUSH
27945: CALL 33448 0 2
27949: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27950: LD_ADDR_VAR 0 8
27954: PUSH
27955: LD_EXP 107
27959: PUSH
27960: LD_EXP 106
27964: PUSH
27965: LD_VAR 0 6
27969: ARRAY
27970: MINUS
27971: ST_TO_ADDR
// if not minesFreeAmount then
27972: LD_VAR 0 8
27976: NOT
27977: IFFALSE 27981
// exit ;
27979: GO 28252
// tmp := [ ] ;
27981: LD_ADDR_VAR 0 7
27985: PUSH
27986: EMPTY
27987: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27988: LD_ADDR_VAR 0 5
27992: PUSH
27993: DOUBLE
27994: LD_INT 1
27996: DEC
27997: ST_TO_ADDR
27998: LD_VAR 0 8
28002: PUSH
28003: FOR_TO
28004: IFFALSE 28199
// begin _d := rand ( 0 , 5 ) ;
28006: LD_ADDR_VAR 0 11
28010: PUSH
28011: LD_INT 0
28013: PPUSH
28014: LD_INT 5
28016: PPUSH
28017: CALL_OW 12
28021: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28022: LD_ADDR_VAR 0 12
28026: PUSH
28027: LD_INT 2
28029: PPUSH
28030: LD_INT 6
28032: PPUSH
28033: CALL_OW 12
28037: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28038: LD_ADDR_VAR 0 9
28042: PUSH
28043: LD_VAR 0 2
28047: PPUSH
28048: LD_VAR 0 11
28052: PPUSH
28053: LD_VAR 0 12
28057: PPUSH
28058: CALL_OW 272
28062: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28063: LD_ADDR_VAR 0 10
28067: PUSH
28068: LD_VAR 0 3
28072: PPUSH
28073: LD_VAR 0 11
28077: PPUSH
28078: LD_VAR 0 12
28082: PPUSH
28083: CALL_OW 273
28087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28088: LD_VAR 0 9
28092: PPUSH
28093: LD_VAR 0 10
28097: PPUSH
28098: CALL_OW 488
28102: PUSH
28103: LD_VAR 0 9
28107: PUSH
28108: LD_VAR 0 10
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_VAR 0 7
28121: IN
28122: NOT
28123: AND
28124: PUSH
28125: LD_VAR 0 9
28129: PPUSH
28130: LD_VAR 0 10
28134: PPUSH
28135: CALL_OW 458
28139: NOT
28140: AND
28141: IFFALSE 28183
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28143: LD_ADDR_VAR 0 7
28147: PUSH
28148: LD_VAR 0 7
28152: PPUSH
28153: LD_VAR 0 7
28157: PUSH
28158: LD_INT 1
28160: PLUS
28161: PPUSH
28162: LD_VAR 0 9
28166: PUSH
28167: LD_VAR 0 10
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PPUSH
28176: CALL_OW 1
28180: ST_TO_ADDR
28181: GO 28197
// i := i - 1 ;
28183: LD_ADDR_VAR 0 5
28187: PUSH
28188: LD_VAR 0 5
28192: PUSH
28193: LD_INT 1
28195: MINUS
28196: ST_TO_ADDR
// end ;
28197: GO 28003
28199: POP
28200: POP
// for i in tmp do
28201: LD_ADDR_VAR 0 5
28205: PUSH
28206: LD_VAR 0 7
28210: PUSH
28211: FOR_IN
28212: IFFALSE 28250
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28214: LD_VAR 0 1
28218: PPUSH
28219: LD_VAR 0 5
28223: PUSH
28224: LD_INT 1
28226: ARRAY
28227: PPUSH
28228: LD_VAR 0 5
28232: PUSH
28233: LD_INT 2
28235: ARRAY
28236: PPUSH
28237: CALL 27192 0 3
28241: NOT
28242: IFFALSE 28248
// exit ;
28244: POP
28245: POP
28246: GO 28252
28248: GO 28211
28250: POP
28251: POP
// end ;
28252: LD_VAR 0 4
28256: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28257: LD_INT 0
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
28263: PPUSH
28264: PPUSH
28265: PPUSH
// if not GetClass ( unit ) = class_sniper then
28266: LD_VAR 0 1
28270: PPUSH
28271: CALL_OW 257
28275: PUSH
28276: LD_INT 5
28278: EQUAL
28279: NOT
28280: IFFALSE 28284
// exit ;
28282: GO 28672
// dist := 8 ;
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: LD_INT 8
28291: ST_TO_ADDR
// viewRange := 12 ;
28292: LD_ADDR_VAR 0 7
28296: PUSH
28297: LD_INT 12
28299: ST_TO_ADDR
// side := GetSide ( unit ) ;
28300: LD_ADDR_VAR 0 6
28304: PUSH
28305: LD_VAR 0 1
28309: PPUSH
28310: CALL_OW 255
28314: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28315: LD_INT 61
28317: PPUSH
28318: LD_VAR 0 6
28322: PPUSH
28323: CALL_OW 321
28327: PUSH
28328: LD_INT 2
28330: EQUAL
28331: IFFALSE 28341
// viewRange := 16 ;
28333: LD_ADDR_VAR 0 7
28337: PUSH
28338: LD_INT 16
28340: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28341: LD_VAR 0 1
28345: PPUSH
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_VAR 0 3
28355: PPUSH
28356: CALL_OW 297
28360: PUSH
28361: LD_VAR 0 5
28365: GREATER
28366: IFFALSE 28445
// begin ComMoveXY ( unit , x , y ) ;
28368: LD_VAR 0 1
28372: PPUSH
28373: LD_VAR 0 2
28377: PPUSH
28378: LD_VAR 0 3
28382: PPUSH
28383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28387: LD_INT 35
28389: PPUSH
28390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_VAR 0 2
28403: PPUSH
28404: LD_VAR 0 3
28408: PPUSH
28409: CALL 64220 0 3
28413: NOT
28414: IFFALSE 28418
// exit ;
28416: GO 28672
// until GetDistUnitXY ( unit , x , y ) < dist ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_VAR 0 2
28427: PPUSH
28428: LD_VAR 0 3
28432: PPUSH
28433: CALL_OW 297
28437: PUSH
28438: LD_VAR 0 5
28442: LESS
28443: IFFALSE 28387
// end ; ComTurnXY ( unit , x , y ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: CALL_OW 118
// wait ( 5 ) ;
28464: LD_INT 5
28466: PPUSH
28467: CALL_OW 67
// _d := GetDir ( unit ) ;
28471: LD_ADDR_VAR 0 10
28475: PUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 254
28485: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28486: LD_ADDR_VAR 0 8
28490: PUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 250
28500: PPUSH
28501: LD_VAR 0 10
28505: PPUSH
28506: LD_VAR 0 5
28510: PPUSH
28511: CALL_OW 272
28515: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_VAR 0 1
28525: PPUSH
28526: CALL_OW 251
28530: PPUSH
28531: LD_VAR 0 10
28535: PPUSH
28536: LD_VAR 0 5
28540: PPUSH
28541: CALL_OW 273
28545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28546: LD_VAR 0 8
28550: PPUSH
28551: LD_VAR 0 9
28555: PPUSH
28556: CALL_OW 488
28560: NOT
28561: IFFALSE 28565
// exit ;
28563: GO 28672
// ComAnimCustom ( unit , 1 ) ;
28565: LD_VAR 0 1
28569: PPUSH
28570: LD_INT 1
28572: PPUSH
28573: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28577: LD_VAR 0 8
28581: PPUSH
28582: LD_VAR 0 9
28586: PPUSH
28587: LD_VAR 0 6
28591: PPUSH
28592: LD_VAR 0 7
28596: PPUSH
28597: CALL_OW 330
// repeat wait ( 1 ) ;
28601: LD_INT 1
28603: PPUSH
28604: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 316
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 314
28627: OR
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 302
28638: NOT
28639: OR
28640: PUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 301
28650: OR
28651: IFFALSE 28601
// RemoveSeeing ( _x , _y , side ) ;
28653: LD_VAR 0 8
28657: PPUSH
28658: LD_VAR 0 9
28662: PPUSH
28663: LD_VAR 0 6
28667: PPUSH
28668: CALL_OW 331
// end ; end_of_file
28672: LD_VAR 0 4
28676: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28677: LD_INT 0
28679: PPUSH
28680: PPUSH
// if exist_mode then
28681: LD_VAR 0 2
28685: IFFALSE 28710
// unit := CreateCharacter ( prefix & ident ) else
28687: LD_ADDR_VAR 0 5
28691: PUSH
28692: LD_VAR 0 3
28696: PUSH
28697: LD_VAR 0 1
28701: STR
28702: PPUSH
28703: CALL_OW 34
28707: ST_TO_ADDR
28708: GO 28725
// unit := NewCharacter ( ident ) ;
28710: LD_ADDR_VAR 0 5
28714: PUSH
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 25
28724: ST_TO_ADDR
// result := unit ;
28725: LD_ADDR_VAR 0 4
28729: PUSH
28730: LD_VAR 0 5
28734: ST_TO_ADDR
// end ;
28735: LD_VAR 0 4
28739: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28740: LD_INT 0
28742: PPUSH
28743: PPUSH
// if not side or not nation then
28744: LD_VAR 0 1
28748: NOT
28749: PUSH
28750: LD_VAR 0 2
28754: NOT
28755: OR
28756: IFFALSE 28760
// exit ;
28758: GO 29528
// case nation of nation_american :
28760: LD_VAR 0 2
28764: PUSH
28765: LD_INT 1
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28987
28773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28774: LD_ADDR_VAR 0 4
28778: PUSH
28779: LD_INT 35
28781: PUSH
28782: LD_INT 45
28784: PUSH
28785: LD_INT 46
28787: PUSH
28788: LD_INT 47
28790: PUSH
28791: LD_INT 82
28793: PUSH
28794: LD_INT 83
28796: PUSH
28797: LD_INT 84
28799: PUSH
28800: LD_INT 85
28802: PUSH
28803: LD_INT 86
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 6
28814: PUSH
28815: LD_INT 15
28817: PUSH
28818: LD_INT 16
28820: PUSH
28821: LD_INT 7
28823: PUSH
28824: LD_INT 12
28826: PUSH
28827: LD_INT 13
28829: PUSH
28830: LD_INT 10
28832: PUSH
28833: LD_INT 14
28835: PUSH
28836: LD_INT 20
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 22
28844: PUSH
28845: LD_INT 25
28847: PUSH
28848: LD_INT 32
28850: PUSH
28851: LD_INT 27
28853: PUSH
28854: LD_INT 36
28856: PUSH
28857: LD_INT 69
28859: PUSH
28860: LD_INT 39
28862: PUSH
28863: LD_INT 34
28865: PUSH
28866: LD_INT 40
28868: PUSH
28869: LD_INT 48
28871: PUSH
28872: LD_INT 49
28874: PUSH
28875: LD_INT 50
28877: PUSH
28878: LD_INT 51
28880: PUSH
28881: LD_INT 52
28883: PUSH
28884: LD_INT 53
28886: PUSH
28887: LD_INT 54
28889: PUSH
28890: LD_INT 55
28892: PUSH
28893: LD_INT 56
28895: PUSH
28896: LD_INT 57
28898: PUSH
28899: LD_INT 58
28901: PUSH
28902: LD_INT 59
28904: PUSH
28905: LD_INT 60
28907: PUSH
28908: LD_INT 61
28910: PUSH
28911: LD_INT 62
28913: PUSH
28914: LD_INT 80
28916: PUSH
28917: LD_INT 82
28919: PUSH
28920: LD_INT 83
28922: PUSH
28923: LD_INT 84
28925: PUSH
28926: LD_INT 85
28928: PUSH
28929: LD_INT 86
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
28985: GO 29452
28987: LD_INT 2
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29221
28995: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28996: LD_ADDR_VAR 0 4
29000: PUSH
29001: LD_INT 35
29003: PUSH
29004: LD_INT 45
29006: PUSH
29007: LD_INT 46
29009: PUSH
29010: LD_INT 47
29012: PUSH
29013: LD_INT 82
29015: PUSH
29016: LD_INT 83
29018: PUSH
29019: LD_INT 84
29021: PUSH
29022: LD_INT 85
29024: PUSH
29025: LD_INT 87
29027: PUSH
29028: LD_INT 70
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 11
29036: PUSH
29037: LD_INT 3
29039: PUSH
29040: LD_INT 4
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: LD_INT 6
29048: PUSH
29049: LD_INT 15
29051: PUSH
29052: LD_INT 18
29054: PUSH
29055: LD_INT 7
29057: PUSH
29058: LD_INT 17
29060: PUSH
29061: LD_INT 8
29063: PUSH
29064: LD_INT 20
29066: PUSH
29067: LD_INT 21
29069: PUSH
29070: LD_INT 22
29072: PUSH
29073: LD_INT 72
29075: PUSH
29076: LD_INT 26
29078: PUSH
29079: LD_INT 69
29081: PUSH
29082: LD_INT 39
29084: PUSH
29085: LD_INT 40
29087: PUSH
29088: LD_INT 41
29090: PUSH
29091: LD_INT 42
29093: PUSH
29094: LD_INT 43
29096: PUSH
29097: LD_INT 48
29099: PUSH
29100: LD_INT 49
29102: PUSH
29103: LD_INT 50
29105: PUSH
29106: LD_INT 51
29108: PUSH
29109: LD_INT 52
29111: PUSH
29112: LD_INT 53
29114: PUSH
29115: LD_INT 54
29117: PUSH
29118: LD_INT 55
29120: PUSH
29121: LD_INT 56
29123: PUSH
29124: LD_INT 60
29126: PUSH
29127: LD_INT 61
29129: PUSH
29130: LD_INT 62
29132: PUSH
29133: LD_INT 66
29135: PUSH
29136: LD_INT 67
29138: PUSH
29139: LD_INT 68
29141: PUSH
29142: LD_INT 81
29144: PUSH
29145: LD_INT 82
29147: PUSH
29148: LD_INT 83
29150: PUSH
29151: LD_INT 84
29153: PUSH
29154: LD_INT 85
29156: PUSH
29157: LD_INT 87
29159: PUSH
29160: LD_INT 88
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: ST_TO_ADDR
29219: GO 29452
29221: LD_INT 3
29223: DOUBLE
29224: EQUAL
29225: IFTRUE 29229
29227: GO 29451
29229: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29230: LD_ADDR_VAR 0 4
29234: PUSH
29235: LD_INT 46
29237: PUSH
29238: LD_INT 47
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 82
29249: PUSH
29250: LD_INT 83
29252: PUSH
29253: LD_INT 84
29255: PUSH
29256: LD_INT 85
29258: PUSH
29259: LD_INT 86
29261: PUSH
29262: LD_INT 11
29264: PUSH
29265: LD_INT 9
29267: PUSH
29268: LD_INT 20
29270: PUSH
29271: LD_INT 19
29273: PUSH
29274: LD_INT 21
29276: PUSH
29277: LD_INT 24
29279: PUSH
29280: LD_INT 22
29282: PUSH
29283: LD_INT 25
29285: PUSH
29286: LD_INT 28
29288: PUSH
29289: LD_INT 29
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 31
29297: PUSH
29298: LD_INT 37
29300: PUSH
29301: LD_INT 38
29303: PUSH
29304: LD_INT 32
29306: PUSH
29307: LD_INT 27
29309: PUSH
29310: LD_INT 33
29312: PUSH
29313: LD_INT 69
29315: PUSH
29316: LD_INT 39
29318: PUSH
29319: LD_INT 34
29321: PUSH
29322: LD_INT 40
29324: PUSH
29325: LD_INT 71
29327: PUSH
29328: LD_INT 23
29330: PUSH
29331: LD_INT 44
29333: PUSH
29334: LD_INT 48
29336: PUSH
29337: LD_INT 49
29339: PUSH
29340: LD_INT 50
29342: PUSH
29343: LD_INT 51
29345: PUSH
29346: LD_INT 52
29348: PUSH
29349: LD_INT 53
29351: PUSH
29352: LD_INT 54
29354: PUSH
29355: LD_INT 55
29357: PUSH
29358: LD_INT 56
29360: PUSH
29361: LD_INT 57
29363: PUSH
29364: LD_INT 58
29366: PUSH
29367: LD_INT 59
29369: PUSH
29370: LD_INT 63
29372: PUSH
29373: LD_INT 64
29375: PUSH
29376: LD_INT 65
29378: PUSH
29379: LD_INT 82
29381: PUSH
29382: LD_INT 83
29384: PUSH
29385: LD_INT 84
29387: PUSH
29388: LD_INT 85
29390: PUSH
29391: LD_INT 86
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
29449: GO 29452
29451: POP
// if state > - 1 and state < 3 then
29452: LD_VAR 0 3
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: GREATER
29461: PUSH
29462: LD_VAR 0 3
29466: PUSH
29467: LD_INT 3
29469: LESS
29470: AND
29471: IFFALSE 29528
// for i in result do
29473: LD_ADDR_VAR 0 5
29477: PUSH
29478: LD_VAR 0 4
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29526
// if GetTech ( i , side ) <> state then
29486: LD_VAR 0 5
29490: PPUSH
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL_OW 321
29500: PUSH
29501: LD_VAR 0 3
29505: NONEQUAL
29506: IFFALSE 29524
// result := result diff i ;
29508: LD_ADDR_VAR 0 4
29512: PUSH
29513: LD_VAR 0 4
29517: PUSH
29518: LD_VAR 0 5
29522: DIFF
29523: ST_TO_ADDR
29524: GO 29483
29526: POP
29527: POP
// end ;
29528: LD_VAR 0 4
29532: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29533: LD_INT 0
29535: PPUSH
29536: PPUSH
29537: PPUSH
// result := true ;
29538: LD_ADDR_VAR 0 3
29542: PUSH
29543: LD_INT 1
29545: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: LD_VAR 0 2
29555: PPUSH
29556: CALL_OW 480
29560: ST_TO_ADDR
// if not tmp then
29561: LD_VAR 0 5
29565: NOT
29566: IFFALSE 29570
// exit ;
29568: GO 29619
// for i in tmp do
29570: LD_ADDR_VAR 0 4
29574: PUSH
29575: LD_VAR 0 5
29579: PUSH
29580: FOR_IN
29581: IFFALSE 29617
// if GetTech ( i , side ) <> state_researched then
29583: LD_VAR 0 4
29587: PPUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 321
29597: PUSH
29598: LD_INT 2
29600: NONEQUAL
29601: IFFALSE 29615
// begin result := false ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 0
29610: ST_TO_ADDR
// exit ;
29611: POP
29612: POP
29613: GO 29619
// end ;
29615: GO 29580
29617: POP
29618: POP
// end ;
29619: LD_VAR 0 3
29623: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29639: LD_VAR 0 1
29643: NOT
29644: PUSH
29645: LD_VAR 0 1
29649: PPUSH
29650: CALL_OW 257
29654: PUSH
29655: LD_INT 9
29657: NONEQUAL
29658: OR
29659: IFFALSE 29663
// exit ;
29661: GO 30236
// side := GetSide ( unit ) ;
29663: LD_ADDR_VAR 0 9
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: CALL_OW 255
29677: ST_TO_ADDR
// tech_space := tech_spacanom ;
29678: LD_ADDR_VAR 0 12
29682: PUSH
29683: LD_INT 29
29685: ST_TO_ADDR
// tech_time := tech_taurad ;
29686: LD_ADDR_VAR 0 13
29690: PUSH
29691: LD_INT 28
29693: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29694: LD_ADDR_VAR 0 11
29698: PUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 310
29708: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29709: LD_VAR 0 11
29713: PPUSH
29714: CALL_OW 247
29718: PUSH
29719: LD_INT 2
29721: EQUAL
29722: IFFALSE 29726
// exit ;
29724: GO 30236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29726: LD_ADDR_VAR 0 8
29730: PUSH
29731: LD_INT 81
29733: PUSH
29734: LD_VAR 0 9
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 21
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PPUSH
29764: CALL_OW 69
29768: ST_TO_ADDR
// if not tmp then
29769: LD_VAR 0 8
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 30236
// if in_unit then
29778: LD_VAR 0 11
29782: IFFALSE 29806
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29784: LD_ADDR_VAR 0 10
29788: PUSH
29789: LD_VAR 0 8
29793: PPUSH
29794: LD_VAR 0 11
29798: PPUSH
29799: CALL_OW 74
29803: ST_TO_ADDR
29804: GO 29826
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29806: LD_ADDR_VAR 0 10
29810: PUSH
29811: LD_VAR 0 8
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 74
29825: ST_TO_ADDR
// if not enemy then
29826: LD_VAR 0 10
29830: NOT
29831: IFFALSE 29835
// exit ;
29833: GO 30236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29835: LD_VAR 0 11
29839: PUSH
29840: LD_VAR 0 11
29844: PPUSH
29845: LD_VAR 0 10
29849: PPUSH
29850: CALL_OW 296
29854: PUSH
29855: LD_INT 13
29857: GREATER
29858: AND
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: LD_VAR 0 10
29869: PPUSH
29870: CALL_OW 296
29874: PUSH
29875: LD_INT 12
29877: GREATER
29878: OR
29879: IFFALSE 29883
// exit ;
29881: GO 30236
// missile := [ 1 ] ;
29883: LD_ADDR_VAR 0 14
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29894: LD_VAR 0 9
29898: PPUSH
29899: LD_VAR 0 12
29903: PPUSH
29904: CALL_OW 325
29908: IFFALSE 29937
// missile := Insert ( missile , missile + 1 , 2 ) ;
29910: LD_ADDR_VAR 0 14
29914: PUSH
29915: LD_VAR 0 14
29919: PPUSH
29920: LD_VAR 0 14
29924: PUSH
29925: LD_INT 1
29927: PLUS
29928: PPUSH
29929: LD_INT 2
29931: PPUSH
29932: CALL_OW 2
29936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29937: LD_VAR 0 9
29941: PPUSH
29942: LD_VAR 0 13
29946: PPUSH
29947: CALL_OW 325
29951: PUSH
29952: LD_VAR 0 10
29956: PPUSH
29957: CALL_OW 255
29961: PPUSH
29962: LD_VAR 0 13
29966: PPUSH
29967: CALL_OW 325
29971: NOT
29972: AND
29973: IFFALSE 30002
// missile := Insert ( missile , missile + 1 , 3 ) ;
29975: LD_ADDR_VAR 0 14
29979: PUSH
29980: LD_VAR 0 14
29984: PPUSH
29985: LD_VAR 0 14
29989: PUSH
29990: LD_INT 1
29992: PLUS
29993: PPUSH
29994: LD_INT 3
29996: PPUSH
29997: CALL_OW 2
30001: ST_TO_ADDR
// if missile < 2 then
30002: LD_VAR 0 14
30006: PUSH
30007: LD_INT 2
30009: LESS
30010: IFFALSE 30014
// exit ;
30012: GO 30236
// x := GetX ( enemy ) ;
30014: LD_ADDR_VAR 0 4
30018: PUSH
30019: LD_VAR 0 10
30023: PPUSH
30024: CALL_OW 250
30028: ST_TO_ADDR
// y := GetY ( enemy ) ;
30029: LD_ADDR_VAR 0 5
30033: PUSH
30034: LD_VAR 0 10
30038: PPUSH
30039: CALL_OW 251
30043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30044: LD_ADDR_VAR 0 6
30048: PUSH
30049: LD_VAR 0 4
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PPUSH
30058: LD_INT 1
30060: PPUSH
30061: CALL_OW 12
30065: PLUS
30066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30067: LD_ADDR_VAR 0 7
30071: PUSH
30072: LD_VAR 0 5
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PPUSH
30081: LD_INT 1
30083: PPUSH
30084: CALL_OW 12
30088: PLUS
30089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30090: LD_VAR 0 6
30094: PPUSH
30095: LD_VAR 0 7
30099: PPUSH
30100: CALL_OW 488
30104: NOT
30105: IFFALSE 30127
// begin _x := x ;
30107: LD_ADDR_VAR 0 6
30111: PUSH
30112: LD_VAR 0 4
30116: ST_TO_ADDR
// _y := y ;
30117: LD_ADDR_VAR 0 7
30121: PUSH
30122: LD_VAR 0 5
30126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_INT 1
30134: PPUSH
30135: LD_VAR 0 14
30139: PPUSH
30140: CALL_OW 12
30144: ST_TO_ADDR
// case i of 1 :
30145: LD_VAR 0 3
30149: PUSH
30150: LD_INT 1
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30175
30158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_VAR 0 10
30168: PPUSH
30169: CALL_OW 115
30173: GO 30236
30175: LD_INT 2
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30205
30183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 6
30193: PPUSH
30194: LD_VAR 0 7
30198: PPUSH
30199: CALL_OW 153
30203: GO 30236
30205: LD_INT 3
30207: DOUBLE
30208: EQUAL
30209: IFTRUE 30213
30211: GO 30235
30213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30214: LD_VAR 0 1
30218: PPUSH
30219: LD_VAR 0 6
30223: PPUSH
30224: LD_VAR 0 7
30228: PPUSH
30229: CALL_OW 154
30233: GO 30236
30235: POP
// end ;
30236: LD_VAR 0 2
30240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30241: LD_INT 0
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
// if not unit or not building then
30249: LD_VAR 0 1
30253: NOT
30254: PUSH
30255: LD_VAR 0 2
30259: NOT
30260: OR
30261: IFFALSE 30265
// exit ;
30263: GO 30423
// x := GetX ( building ) ;
30265: LD_ADDR_VAR 0 5
30269: PUSH
30270: LD_VAR 0 2
30274: PPUSH
30275: CALL_OW 250
30279: ST_TO_ADDR
// y := GetY ( building ) ;
30280: LD_ADDR_VAR 0 6
30284: PUSH
30285: LD_VAR 0 2
30289: PPUSH
30290: CALL_OW 251
30294: ST_TO_ADDR
// for i = 0 to 5 do
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: DOUBLE
30301: LD_INT 0
30303: DEC
30304: ST_TO_ADDR
30305: LD_INT 5
30307: PUSH
30308: FOR_TO
30309: IFFALSE 30421
// begin _x := ShiftX ( x , i , 3 ) ;
30311: LD_ADDR_VAR 0 7
30315: PUSH
30316: LD_VAR 0 5
30320: PPUSH
30321: LD_VAR 0 4
30325: PPUSH
30326: LD_INT 3
30328: PPUSH
30329: CALL_OW 272
30333: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30334: LD_ADDR_VAR 0 8
30338: PUSH
30339: LD_VAR 0 6
30343: PPUSH
30344: LD_VAR 0 4
30348: PPUSH
30349: LD_INT 3
30351: PPUSH
30352: CALL_OW 273
30356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30357: LD_VAR 0 7
30361: PPUSH
30362: LD_VAR 0 8
30366: PPUSH
30367: CALL_OW 488
30371: NOT
30372: IFFALSE 30376
// continue ;
30374: GO 30308
// if HexInfo ( _x , _y ) = 0 then
30376: LD_VAR 0 7
30380: PPUSH
30381: LD_VAR 0 8
30385: PPUSH
30386: CALL_OW 428
30390: PUSH
30391: LD_INT 0
30393: EQUAL
30394: IFFALSE 30419
// begin ComMoveXY ( unit , _x , _y ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_VAR 0 7
30405: PPUSH
30406: LD_VAR 0 8
30410: PPUSH
30411: CALL_OW 111
// exit ;
30415: POP
30416: POP
30417: GO 30423
// end ; end ;
30419: GO 30308
30421: POP
30422: POP
// end ;
30423: LD_VAR 0 3
30427: RET
// export function ScanBase ( side , base_area ) ; begin
30428: LD_INT 0
30430: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30431: LD_ADDR_VAR 0 3
30435: PUSH
30436: LD_VAR 0 2
30440: PPUSH
30441: LD_INT 81
30443: PUSH
30444: LD_VAR 0 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PPUSH
30453: CALL_OW 70
30457: ST_TO_ADDR
// end ;
30458: LD_VAR 0 3
30462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30463: LD_INT 0
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
// result := false ;
30469: LD_ADDR_VAR 0 2
30473: PUSH
30474: LD_INT 0
30476: ST_TO_ADDR
// side := GetSide ( unit ) ;
30477: LD_ADDR_VAR 0 3
30481: PUSH
30482: LD_VAR 0 1
30486: PPUSH
30487: CALL_OW 255
30491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30492: LD_ADDR_VAR 0 4
30496: PUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 248
30506: ST_TO_ADDR
// case nat of 1 :
30507: LD_VAR 0 4
30511: PUSH
30512: LD_INT 1
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 30531
30520: POP
// tech := tech_lassight ; 2 :
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: LD_INT 12
30528: ST_TO_ADDR
30529: GO 30570
30531: LD_INT 2
30533: DOUBLE
30534: EQUAL
30535: IFTRUE 30539
30537: GO 30550
30539: POP
// tech := tech_mortar ; 3 :
30540: LD_ADDR_VAR 0 5
30544: PUSH
30545: LD_INT 41
30547: ST_TO_ADDR
30548: GO 30570
30550: LD_INT 3
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30569
30558: POP
// tech := tech_bazooka ; end ;
30559: LD_ADDR_VAR 0 5
30563: PUSH
30564: LD_INT 44
30566: ST_TO_ADDR
30567: GO 30570
30569: POP
// if Researched ( side , tech ) then
30570: LD_VAR 0 3
30574: PPUSH
30575: LD_VAR 0 5
30579: PPUSH
30580: CALL_OW 325
30584: IFFALSE 30611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30586: LD_ADDR_VAR 0 2
30590: PUSH
30591: LD_INT 5
30593: PUSH
30594: LD_INT 8
30596: PUSH
30597: LD_INT 9
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: PUSH
30605: LD_VAR 0 4
30609: ARRAY
30610: ST_TO_ADDR
// end ;
30611: LD_VAR 0 2
30615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30616: LD_INT 0
30618: PPUSH
30619: PPUSH
30620: PPUSH
// if not mines then
30621: LD_VAR 0 2
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 30774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_INT 81
30637: PUSH
30638: LD_VAR 0 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 21
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PPUSH
30668: CALL_OW 69
30672: ST_TO_ADDR
// for i in mines do
30673: LD_ADDR_VAR 0 4
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: FOR_IN
30684: IFFALSE 30772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30686: LD_VAR 0 4
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PPUSH
30695: LD_VAR 0 4
30699: PUSH
30700: LD_INT 2
30702: ARRAY
30703: PPUSH
30704: CALL_OW 458
30708: NOT
30709: IFFALSE 30713
// continue ;
30711: GO 30683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30713: LD_VAR 0 4
30717: PUSH
30718: LD_INT 1
30720: ARRAY
30721: PPUSH
30722: LD_VAR 0 4
30726: PUSH
30727: LD_INT 2
30729: ARRAY
30730: PPUSH
30731: CALL_OW 428
30735: PUSH
30736: LD_VAR 0 5
30740: IN
30741: IFFALSE 30770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30743: LD_VAR 0 4
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 4
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: LD_VAR 0 1
30765: PPUSH
30766: CALL_OW 456
// end ;
30770: GO 30683
30772: POP
30773: POP
// end ;
30774: LD_VAR 0 3
30778: RET
// export function Count ( array ) ; var i ; begin
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// result := 0 ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 0
30790: ST_TO_ADDR
// for i in array do
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_VAR 0 1
30800: PUSH
30801: FOR_IN
30802: IFFALSE 30826
// if i then
30804: LD_VAR 0 3
30808: IFFALSE 30824
// result := result + 1 ;
30810: LD_ADDR_VAR 0 2
30814: PUSH
30815: LD_VAR 0 2
30819: PUSH
30820: LD_INT 1
30822: PLUS
30823: ST_TO_ADDR
30824: GO 30801
30826: POP
30827: POP
// end ;
30828: LD_VAR 0 2
30832: RET
// export function IsEmpty ( building ) ; begin
30833: LD_INT 0
30835: PPUSH
// if not building then
30836: LD_VAR 0 1
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 30888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30845: LD_ADDR_VAR 0 2
30849: PUSH
30850: LD_VAR 0 1
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_VAR 0 1
30862: PPUSH
30863: CALL_OW 255
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 58
30874: PUSH
30875: EMPTY
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PPUSH
30882: CALL_OW 69
30886: IN
30887: ST_TO_ADDR
// end ;
30888: LD_VAR 0 2
30892: RET
// export function IsNotFull ( building ) ; begin
30893: LD_INT 0
30895: PPUSH
// if not building then
30896: LD_VAR 0 1
30900: NOT
30901: IFFALSE 30905
// exit ;
30903: GO 30924
// result := UnitsInside ( building ) < 6 ;
30905: LD_ADDR_VAR 0 2
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 313
30919: PUSH
30920: LD_INT 6
30922: LESS
30923: ST_TO_ADDR
// end ;
30924: LD_VAR 0 2
30928: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30929: LD_INT 0
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
// tmp := [ ] ;
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: EMPTY
30941: ST_TO_ADDR
// list := [ ] ;
30942: LD_ADDR_VAR 0 5
30946: PUSH
30947: EMPTY
30948: ST_TO_ADDR
// for i = 16 to 25 do
30949: LD_ADDR_VAR 0 4
30953: PUSH
30954: DOUBLE
30955: LD_INT 16
30957: DEC
30958: ST_TO_ADDR
30959: LD_INT 25
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31036
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_INT 22
30977: PUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 255
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 91
30994: PUSH
30995: LD_VAR 0 1
30999: PUSH
31000: LD_INT 6
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 30
31010: PUSH
31011: LD_VAR 0 4
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: PPUSH
31028: CALL_OW 69
31032: ADD
31033: ST_TO_ADDR
31034: GO 30962
31036: POP
31037: POP
// for i = 1 to tmp do
31038: LD_ADDR_VAR 0 4
31042: PUSH
31043: DOUBLE
31044: LD_INT 1
31046: DEC
31047: ST_TO_ADDR
31048: LD_VAR 0 3
31052: PUSH
31053: FOR_TO
31054: IFFALSE 31142
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31056: LD_ADDR_VAR 0 5
31060: PUSH
31061: LD_VAR 0 5
31065: PUSH
31066: LD_VAR 0 3
31070: PUSH
31071: LD_VAR 0 4
31075: ARRAY
31076: PPUSH
31077: CALL_OW 266
31081: PUSH
31082: LD_VAR 0 3
31086: PUSH
31087: LD_VAR 0 4
31091: ARRAY
31092: PPUSH
31093: CALL_OW 250
31097: PUSH
31098: LD_VAR 0 3
31102: PUSH
31103: LD_VAR 0 4
31107: ARRAY
31108: PPUSH
31109: CALL_OW 251
31113: PUSH
31114: LD_VAR 0 3
31118: PUSH
31119: LD_VAR 0 4
31123: ARRAY
31124: PPUSH
31125: CALL_OW 254
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: ADD
31139: ST_TO_ADDR
31140: GO 31053
31142: POP
31143: POP
// result := list ;
31144: LD_ADDR_VAR 0 2
31148: PUSH
31149: LD_VAR 0 5
31153: ST_TO_ADDR
// end ;
31154: LD_VAR 0 2
31158: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
// if not factory then
31168: LD_VAR 0 1
31172: NOT
31173: IFFALSE 31177
// exit ;
31175: GO 31770
// if control = control_apeman then
31177: LD_VAR 0 4
31181: PUSH
31182: LD_INT 5
31184: EQUAL
31185: IFFALSE 31294
// begin tmp := UnitsInside ( factory ) ;
31187: LD_ADDR_VAR 0 8
31191: PUSH
31192: LD_VAR 0 1
31196: PPUSH
31197: CALL_OW 313
31201: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31202: LD_VAR 0 8
31206: PPUSH
31207: LD_INT 25
31209: PUSH
31210: LD_INT 12
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 72
31221: NOT
31222: IFFALSE 31232
// control := control_manual ;
31224: LD_ADDR_VAR 0 4
31228: PUSH
31229: LD_INT 1
31231: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31232: LD_ADDR_VAR 0 8
31236: PUSH
31237: LD_VAR 0 1
31241: PPUSH
31242: CALL 30929 0 1
31246: ST_TO_ADDR
// if tmp then
31247: LD_VAR 0 8
31251: IFFALSE 31294
// begin for i in tmp do
31253: LD_ADDR_VAR 0 7
31257: PUSH
31258: LD_VAR 0 8
31262: PUSH
31263: FOR_IN
31264: IFFALSE 31292
// if i [ 1 ] = b_ext_radio then
31266: LD_VAR 0 7
31270: PUSH
31271: LD_INT 1
31273: ARRAY
31274: PUSH
31275: LD_INT 22
31277: EQUAL
31278: IFFALSE 31290
// begin control := control_remote ;
31280: LD_ADDR_VAR 0 4
31284: PUSH
31285: LD_INT 2
31287: ST_TO_ADDR
// break ;
31288: GO 31292
// end ;
31290: GO 31263
31292: POP
31293: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_VAR 0 4
31313: PPUSH
31314: LD_VAR 0 5
31318: PPUSH
31319: CALL_OW 448
31323: IFFALSE 31358
// begin result := [ chassis , engine , control , weapon ] ;
31325: LD_ADDR_VAR 0 6
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: LD_VAR 0 3
31339: PUSH
31340: LD_VAR 0 4
31344: PUSH
31345: LD_VAR 0 5
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// exit ;
31356: GO 31770
// end ; _chassis := AvailableChassisList ( factory ) ;
31358: LD_ADDR_VAR 0 9
31362: PUSH
31363: LD_VAR 0 1
31367: PPUSH
31368: CALL_OW 475
31372: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31373: LD_ADDR_VAR 0 11
31377: PUSH
31378: LD_VAR 0 1
31382: PPUSH
31383: CALL_OW 476
31387: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31388: LD_ADDR_VAR 0 12
31392: PUSH
31393: LD_VAR 0 1
31397: PPUSH
31398: CALL_OW 477
31402: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31403: LD_ADDR_VAR 0 10
31407: PUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 478
31417: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31418: LD_VAR 0 9
31422: NOT
31423: PUSH
31424: LD_VAR 0 11
31428: NOT
31429: OR
31430: PUSH
31431: LD_VAR 0 12
31435: NOT
31436: OR
31437: PUSH
31438: LD_VAR 0 10
31442: NOT
31443: OR
31444: IFFALSE 31479
// begin result := [ chassis , engine , control , weapon ] ;
31446: LD_ADDR_VAR 0 6
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 3
31460: PUSH
31461: LD_VAR 0 4
31465: PUSH
31466: LD_VAR 0 5
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// exit ;
31477: GO 31770
// end ; if not chassis in _chassis then
31479: LD_VAR 0 2
31483: PUSH
31484: LD_VAR 0 9
31488: IN
31489: NOT
31490: IFFALSE 31516
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_VAR 0 9
31501: PUSH
31502: LD_INT 1
31504: PPUSH
31505: LD_VAR 0 9
31509: PPUSH
31510: CALL_OW 12
31514: ARRAY
31515: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31516: LD_VAR 0 2
31520: PPUSH
31521: LD_VAR 0 3
31525: PPUSH
31526: CALL 31775 0 2
31530: NOT
31531: IFFALSE 31590
// repeat engine := _engine [ 1 ] ;
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_VAR 0 11
31542: PUSH
31543: LD_INT 1
31545: ARRAY
31546: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31547: LD_ADDR_VAR 0 11
31551: PUSH
31552: LD_VAR 0 11
31556: PPUSH
31557: LD_INT 1
31559: PPUSH
31560: CALL_OW 3
31564: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31565: LD_VAR 0 2
31569: PPUSH
31570: LD_VAR 0 3
31574: PPUSH
31575: CALL 31775 0 2
31579: PUSH
31580: LD_VAR 0 11
31584: PUSH
31585: EMPTY
31586: EQUAL
31587: OR
31588: IFFALSE 31533
// if not control in _control then
31590: LD_VAR 0 4
31594: PUSH
31595: LD_VAR 0 12
31599: IN
31600: NOT
31601: IFFALSE 31627
// control := _control [ rand ( 1 , _control ) ] ;
31603: LD_ADDR_VAR 0 4
31607: PUSH
31608: LD_VAR 0 12
31612: PUSH
31613: LD_INT 1
31615: PPUSH
31616: LD_VAR 0 12
31620: PPUSH
31621: CALL_OW 12
31625: ARRAY
31626: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31627: LD_VAR 0 2
31631: PPUSH
31632: LD_VAR 0 5
31636: PPUSH
31637: CALL 31995 0 2
31641: NOT
31642: IFFALSE 31701
// repeat weapon := _weapon [ 1 ] ;
31644: LD_ADDR_VAR 0 5
31648: PUSH
31649: LD_VAR 0 10
31653: PUSH
31654: LD_INT 1
31656: ARRAY
31657: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31658: LD_ADDR_VAR 0 10
31662: PUSH
31663: LD_VAR 0 10
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: CALL_OW 3
31675: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31676: LD_VAR 0 2
31680: PPUSH
31681: LD_VAR 0 5
31685: PPUSH
31686: CALL 31995 0 2
31690: PUSH
31691: LD_VAR 0 10
31695: PUSH
31696: EMPTY
31697: EQUAL
31698: OR
31699: IFFALSE 31644
// result := [ ] ;
31701: LD_ADDR_VAR 0 6
31705: PUSH
31706: EMPTY
31707: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31708: LD_VAR 0 1
31712: PPUSH
31713: LD_VAR 0 2
31717: PPUSH
31718: LD_VAR 0 3
31722: PPUSH
31723: LD_VAR 0 4
31727: PPUSH
31728: LD_VAR 0 5
31732: PPUSH
31733: CALL_OW 448
31737: IFFALSE 31770
// result := [ chassis , engine , control , weapon ] ;
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: LD_VAR 0 2
31748: PUSH
31749: LD_VAR 0 3
31753: PUSH
31754: LD_VAR 0 4
31758: PUSH
31759: LD_VAR 0 5
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// end ;
31770: LD_VAR 0 6
31774: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31775: LD_INT 0
31777: PPUSH
// if not chassis or not engine then
31778: LD_VAR 0 1
31782: NOT
31783: PUSH
31784: LD_VAR 0 2
31788: NOT
31789: OR
31790: IFFALSE 31794
// exit ;
31792: GO 31990
// case engine of engine_solar :
31794: LD_VAR 0 2
31798: PUSH
31799: LD_INT 2
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31845
31807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31808: LD_ADDR_VAR 0 3
31812: PUSH
31813: LD_INT 11
31815: PUSH
31816: LD_INT 12
31818: PUSH
31819: LD_INT 13
31821: PUSH
31822: LD_INT 14
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
31843: GO 31974
31845: LD_INT 1
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31915
31853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31854: LD_ADDR_VAR 0 3
31858: PUSH
31859: LD_INT 11
31861: PUSH
31862: LD_INT 12
31864: PUSH
31865: LD_INT 13
31867: PUSH
31868: LD_INT 14
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 4
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: LD_INT 21
31888: PUSH
31889: LD_INT 23
31891: PUSH
31892: LD_INT 22
31894: PUSH
31895: LD_INT 24
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
31913: GO 31974
31915: LD_INT 3
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 31973
31923: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31924: LD_ADDR_VAR 0 3
31928: PUSH
31929: LD_INT 13
31931: PUSH
31932: LD_INT 14
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 4
31943: PUSH
31944: LD_INT 5
31946: PUSH
31947: LD_INT 21
31949: PUSH
31950: LD_INT 22
31952: PUSH
31953: LD_INT 23
31955: PUSH
31956: LD_INT 24
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 31974
31973: POP
// result := ( chassis in result ) ;
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_VAR 0 1
31983: PUSH
31984: LD_VAR 0 3
31988: IN
31989: ST_TO_ADDR
// end ;
31990: LD_VAR 0 3
31994: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31995: LD_INT 0
31997: PPUSH
// if not chassis or not weapon then
31998: LD_VAR 0 1
32002: NOT
32003: PUSH
32004: LD_VAR 0 2
32008: NOT
32009: OR
32010: IFFALSE 32014
// exit ;
32012: GO 33076
// case weapon of us_machine_gun :
32014: LD_VAR 0 2
32018: PUSH
32019: LD_INT 2
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32057
32027: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32028: LD_ADDR_VAR 0 3
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: LD_INT 3
32041: PUSH
32042: LD_INT 4
32044: PUSH
32045: LD_INT 5
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
32055: GO 33060
32057: LD_INT 3
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32095
32065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: LD_INT 5
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
32093: GO 33060
32095: LD_INT 11
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32133
32103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32104: LD_ADDR_VAR 0 3
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: ST_TO_ADDR
32131: GO 33060
32133: LD_INT 4
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32167
32141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 33060
32167: LD_INT 5
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32201
32175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
32199: GO 33060
32201: LD_INT 9
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32235
32209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
32233: GO 33060
32235: LD_INT 7
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32269
32243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: LD_INT 4
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
32267: GO 33060
32269: LD_INT 12
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32303
32277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32278: LD_ADDR_VAR 0 3
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: LD_INT 4
32291: PUSH
32292: LD_INT 5
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
32301: GO 33060
32303: LD_INT 13
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32337
32311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 5
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
32335: GO 33060
32337: LD_INT 14
32339: DOUBLE
32340: EQUAL
32341: IFTRUE 32345
32343: GO 32363
32345: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32346: LD_ADDR_VAR 0 3
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: LD_INT 5
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: ST_TO_ADDR
32361: GO 33060
32363: LD_INT 6
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32389
32371: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32372: LD_ADDR_VAR 0 3
32376: PUSH
32377: LD_INT 4
32379: PUSH
32380: LD_INT 5
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: ST_TO_ADDR
32387: GO 33060
32389: LD_INT 10
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32415
32397: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: LD_INT 4
32405: PUSH
32406: LD_INT 5
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: ST_TO_ADDR
32413: GO 33060
32415: LD_INT 22
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32423
32421: GO 32449
32423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_INT 11
32431: PUSH
32432: LD_INT 12
32434: PUSH
32435: LD_INT 13
32437: PUSH
32438: LD_INT 14
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: ST_TO_ADDR
32447: GO 33060
32449: LD_INT 23
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32483
32457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32458: LD_ADDR_VAR 0 3
32462: PUSH
32463: LD_INT 11
32465: PUSH
32466: LD_INT 12
32468: PUSH
32469: LD_INT 13
32471: PUSH
32472: LD_INT 14
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
32481: GO 33060
32483: LD_INT 24
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32517
32491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32492: LD_ADDR_VAR 0 3
32496: PUSH
32497: LD_INT 11
32499: PUSH
32500: LD_INT 12
32502: PUSH
32503: LD_INT 13
32505: PUSH
32506: LD_INT 14
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
32515: GO 33060
32517: LD_INT 30
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32551
32525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 11
32533: PUSH
32534: LD_INT 12
32536: PUSH
32537: LD_INT 13
32539: PUSH
32540: LD_INT 14
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
32549: GO 33060
32551: LD_INT 25
32553: DOUBLE
32554: EQUAL
32555: IFTRUE 32559
32557: GO 32577
32559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32560: LD_ADDR_VAR 0 3
32564: PUSH
32565: LD_INT 13
32567: PUSH
32568: LD_INT 14
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: ST_TO_ADDR
32575: GO 33060
32577: LD_INT 27
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32585
32583: GO 32603
32585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32586: LD_ADDR_VAR 0 3
32590: PUSH
32591: LD_INT 13
32593: PUSH
32594: LD_INT 14
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: ST_TO_ADDR
32601: GO 33060
32603: LD_EXP 24
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32639
32613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32614: LD_ADDR_VAR 0 3
32618: PUSH
32619: LD_INT 11
32621: PUSH
32622: LD_INT 12
32624: PUSH
32625: LD_INT 13
32627: PUSH
32628: LD_INT 14
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
32637: GO 33060
32639: LD_INT 28
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32665
32647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32648: LD_ADDR_VAR 0 3
32652: PUSH
32653: LD_INT 13
32655: PUSH
32656: LD_INT 14
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: ST_TO_ADDR
32663: GO 33060
32665: LD_INT 29
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32673
32671: GO 32691
32673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32674: LD_ADDR_VAR 0 3
32678: PUSH
32679: LD_INT 13
32681: PUSH
32682: LD_INT 14
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: ST_TO_ADDR
32689: GO 33060
32691: LD_INT 31
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32699
32697: GO 32717
32699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_INT 13
32707: PUSH
32708: LD_INT 14
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: ST_TO_ADDR
32715: GO 33060
32717: LD_INT 26
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32743
32725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_INT 13
32733: PUSH
32734: LD_INT 14
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: ST_TO_ADDR
32741: GO 33060
32743: LD_INT 42
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32751
32749: GO 32777
32751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_INT 21
32759: PUSH
32760: LD_INT 22
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 24
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
32775: GO 33060
32777: LD_INT 43
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32811
32785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32786: LD_ADDR_VAR 0 3
32790: PUSH
32791: LD_INT 21
32793: PUSH
32794: LD_INT 22
32796: PUSH
32797: LD_INT 23
32799: PUSH
32800: LD_INT 24
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: ST_TO_ADDR
32809: GO 33060
32811: LD_INT 44
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 32845
32819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32820: LD_ADDR_VAR 0 3
32824: PUSH
32825: LD_INT 21
32827: PUSH
32828: LD_INT 22
32830: PUSH
32831: LD_INT 23
32833: PUSH
32834: LD_INT 24
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: ST_TO_ADDR
32843: GO 33060
32845: LD_INT 45
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32879
32853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_INT 21
32861: PUSH
32862: LD_INT 22
32864: PUSH
32865: LD_INT 23
32867: PUSH
32868: LD_INT 24
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: ST_TO_ADDR
32877: GO 33060
32879: LD_INT 49
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32913
32887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32888: LD_ADDR_VAR 0 3
32892: PUSH
32893: LD_INT 21
32895: PUSH
32896: LD_INT 22
32898: PUSH
32899: LD_INT 23
32901: PUSH
32902: LD_INT 24
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: ST_TO_ADDR
32911: GO 33060
32913: LD_INT 51
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 32947
32921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32922: LD_ADDR_VAR 0 3
32926: PUSH
32927: LD_INT 21
32929: PUSH
32930: LD_INT 22
32932: PUSH
32933: LD_INT 23
32935: PUSH
32936: LD_INT 24
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
32945: GO 33060
32947: LD_INT 52
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32981
32955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_INT 21
32963: PUSH
32964: LD_INT 22
32966: PUSH
32967: LD_INT 23
32969: PUSH
32970: LD_INT 24
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
32979: GO 33060
32981: LD_INT 53
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33007
32989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: LD_INT 23
32997: PUSH
32998: LD_INT 24
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: ST_TO_ADDR
33005: GO 33060
33007: LD_INT 46
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33033
33015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 23
33023: PUSH
33024: LD_INT 24
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: ST_TO_ADDR
33031: GO 33060
33033: LD_INT 47
33035: DOUBLE
33036: EQUAL
33037: IFTRUE 33041
33039: GO 33059
33041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_INT 23
33049: PUSH
33050: LD_INT 24
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: ST_TO_ADDR
33057: GO 33060
33059: POP
// result := ( chassis in result ) ;
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_VAR 0 1
33069: PUSH
33070: LD_VAR 0 3
33074: IN
33075: ST_TO_ADDR
// end ;
33076: LD_VAR 0 3
33080: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
// result := array ;
33090: LD_ADDR_VAR 0 5
33094: PUSH
33095: LD_VAR 0 1
33099: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33100: LD_VAR 0 1
33104: NOT
33105: PUSH
33106: LD_VAR 0 2
33110: NOT
33111: OR
33112: PUSH
33113: LD_VAR 0 3
33117: NOT
33118: OR
33119: PUSH
33120: LD_VAR 0 2
33124: PUSH
33125: LD_VAR 0 1
33129: GREATER
33130: OR
33131: PUSH
33132: LD_VAR 0 3
33136: PUSH
33137: LD_VAR 0 1
33141: GREATER
33142: OR
33143: IFFALSE 33147
// exit ;
33145: GO 33443
// if direction then
33147: LD_VAR 0 4
33151: IFFALSE 33215
// begin d := 1 ;
33153: LD_ADDR_VAR 0 9
33157: PUSH
33158: LD_INT 1
33160: ST_TO_ADDR
// if i_from > i_to then
33161: LD_VAR 0 2
33165: PUSH
33166: LD_VAR 0 3
33170: GREATER
33171: IFFALSE 33197
// length := ( array - i_from ) + i_to else
33173: LD_ADDR_VAR 0 11
33177: PUSH
33178: LD_VAR 0 1
33182: PUSH
33183: LD_VAR 0 2
33187: MINUS
33188: PUSH
33189: LD_VAR 0 3
33193: PLUS
33194: ST_TO_ADDR
33195: GO 33213
// length := i_to - i_from ;
33197: LD_ADDR_VAR 0 11
33201: PUSH
33202: LD_VAR 0 3
33206: PUSH
33207: LD_VAR 0 2
33211: MINUS
33212: ST_TO_ADDR
// end else
33213: GO 33276
// begin d := - 1 ;
33215: LD_ADDR_VAR 0 9
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: ST_TO_ADDR
// if i_from > i_to then
33224: LD_VAR 0 2
33228: PUSH
33229: LD_VAR 0 3
33233: GREATER
33234: IFFALSE 33254
// length := i_from - i_to else
33236: LD_ADDR_VAR 0 11
33240: PUSH
33241: LD_VAR 0 2
33245: PUSH
33246: LD_VAR 0 3
33250: MINUS
33251: ST_TO_ADDR
33252: GO 33276
// length := ( array - i_to ) + i_from ;
33254: LD_ADDR_VAR 0 11
33258: PUSH
33259: LD_VAR 0 1
33263: PUSH
33264: LD_VAR 0 3
33268: MINUS
33269: PUSH
33270: LD_VAR 0 2
33274: PLUS
33275: ST_TO_ADDR
// end ; if not length then
33276: LD_VAR 0 11
33280: NOT
33281: IFFALSE 33285
// exit ;
33283: GO 33443
// tmp := array ;
33285: LD_ADDR_VAR 0 10
33289: PUSH
33290: LD_VAR 0 1
33294: ST_TO_ADDR
// for i = 1 to length do
33295: LD_ADDR_VAR 0 6
33299: PUSH
33300: DOUBLE
33301: LD_INT 1
33303: DEC
33304: ST_TO_ADDR
33305: LD_VAR 0 11
33309: PUSH
33310: FOR_TO
33311: IFFALSE 33431
// begin for j = 1 to array do
33313: LD_ADDR_VAR 0 7
33317: PUSH
33318: DOUBLE
33319: LD_INT 1
33321: DEC
33322: ST_TO_ADDR
33323: LD_VAR 0 1
33327: PUSH
33328: FOR_TO
33329: IFFALSE 33417
// begin k := j + d ;
33331: LD_ADDR_VAR 0 8
33335: PUSH
33336: LD_VAR 0 7
33340: PUSH
33341: LD_VAR 0 9
33345: PLUS
33346: ST_TO_ADDR
// if k > array then
33347: LD_VAR 0 8
33351: PUSH
33352: LD_VAR 0 1
33356: GREATER
33357: IFFALSE 33367
// k := 1 ;
33359: LD_ADDR_VAR 0 8
33363: PUSH
33364: LD_INT 1
33366: ST_TO_ADDR
// if not k then
33367: LD_VAR 0 8
33371: NOT
33372: IFFALSE 33384
// k := array ;
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_VAR 0 1
33383: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33384: LD_ADDR_VAR 0 10
33388: PUSH
33389: LD_VAR 0 10
33393: PPUSH
33394: LD_VAR 0 8
33398: PPUSH
33399: LD_VAR 0 1
33403: PUSH
33404: LD_VAR 0 7
33408: ARRAY
33409: PPUSH
33410: CALL_OW 1
33414: ST_TO_ADDR
// end ;
33415: GO 33328
33417: POP
33418: POP
// array := tmp ;
33419: LD_ADDR_VAR 0 1
33423: PUSH
33424: LD_VAR 0 10
33428: ST_TO_ADDR
// end ;
33429: GO 33310
33431: POP
33432: POP
// result := array ;
33433: LD_ADDR_VAR 0 5
33437: PUSH
33438: LD_VAR 0 1
33442: ST_TO_ADDR
// end ;
33443: LD_VAR 0 5
33447: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33448: LD_INT 0
33450: PPUSH
33451: PPUSH
// result := 0 ;
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 0
33459: ST_TO_ADDR
// if not array or not value in array then
33460: LD_VAR 0 1
33464: NOT
33465: PUSH
33466: LD_VAR 0 2
33470: PUSH
33471: LD_VAR 0 1
33475: IN
33476: NOT
33477: OR
33478: IFFALSE 33482
// exit ;
33480: GO 33536
// for i = 1 to array do
33482: LD_ADDR_VAR 0 4
33486: PUSH
33487: DOUBLE
33488: LD_INT 1
33490: DEC
33491: ST_TO_ADDR
33492: LD_VAR 0 1
33496: PUSH
33497: FOR_TO
33498: IFFALSE 33534
// if value = array [ i ] then
33500: LD_VAR 0 2
33504: PUSH
33505: LD_VAR 0 1
33509: PUSH
33510: LD_VAR 0 4
33514: ARRAY
33515: EQUAL
33516: IFFALSE 33532
// begin result := i ;
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_VAR 0 4
33527: ST_TO_ADDR
// exit ;
33528: POP
33529: POP
33530: GO 33536
// end ;
33532: GO 33497
33534: POP
33535: POP
// end ;
33536: LD_VAR 0 3
33540: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33541: LD_INT 0
33543: PPUSH
// vc_chassis := chassis ;
33544: LD_ADDR_OWVAR 37
33548: PUSH
33549: LD_VAR 0 1
33553: ST_TO_ADDR
// vc_engine := engine ;
33554: LD_ADDR_OWVAR 39
33558: PUSH
33559: LD_VAR 0 2
33563: ST_TO_ADDR
// vc_control := control ;
33564: LD_ADDR_OWVAR 38
33568: PUSH
33569: LD_VAR 0 3
33573: ST_TO_ADDR
// vc_weapon := weapon ;
33574: LD_ADDR_OWVAR 40
33578: PUSH
33579: LD_VAR 0 4
33583: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33584: LD_ADDR_OWVAR 41
33588: PUSH
33589: LD_VAR 0 5
33593: ST_TO_ADDR
// end ;
33594: LD_VAR 0 6
33598: RET
// export function WantPlant ( unit ) ; var task ; begin
33599: LD_INT 0
33601: PPUSH
33602: PPUSH
// result := false ;
33603: LD_ADDR_VAR 0 2
33607: PUSH
33608: LD_INT 0
33610: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 437
33625: ST_TO_ADDR
// if task then
33626: LD_VAR 0 3
33630: IFFALSE 33658
// if task [ 1 ] [ 1 ] = p then
33632: LD_VAR 0 3
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: PUSH
33641: LD_INT 1
33643: ARRAY
33644: PUSH
33645: LD_STRING p
33647: EQUAL
33648: IFFALSE 33658
// result := true ;
33650: LD_ADDR_VAR 0 2
33654: PUSH
33655: LD_INT 1
33657: ST_TO_ADDR
// end ;
33658: LD_VAR 0 2
33662: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33663: LD_INT 0
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
// if pos < 1 then
33669: LD_VAR 0 2
33673: PUSH
33674: LD_INT 1
33676: LESS
33677: IFFALSE 33681
// exit ;
33679: GO 33984
// if pos = 1 then
33681: LD_VAR 0 2
33685: PUSH
33686: LD_INT 1
33688: EQUAL
33689: IFFALSE 33722
// result := Replace ( arr , pos [ 1 ] , value ) else
33691: LD_ADDR_VAR 0 4
33695: PUSH
33696: LD_VAR 0 1
33700: PPUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 1
33708: ARRAY
33709: PPUSH
33710: LD_VAR 0 3
33714: PPUSH
33715: CALL_OW 1
33719: ST_TO_ADDR
33720: GO 33984
// begin tmp := arr ;
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 1
33731: ST_TO_ADDR
// s_arr := [ tmp ] ;
33732: LD_ADDR_VAR 0 7
33736: PUSH
33737: LD_VAR 0 6
33741: PUSH
33742: EMPTY
33743: LIST
33744: ST_TO_ADDR
// for i = 1 to pos - 1 do
33745: LD_ADDR_VAR 0 5
33749: PUSH
33750: DOUBLE
33751: LD_INT 1
33753: DEC
33754: ST_TO_ADDR
33755: LD_VAR 0 2
33759: PUSH
33760: LD_INT 1
33762: MINUS
33763: PUSH
33764: FOR_TO
33765: IFFALSE 33810
// begin tmp := tmp [ pos [ i ] ] ;
33767: LD_ADDR_VAR 0 6
33771: PUSH
33772: LD_VAR 0 6
33776: PUSH
33777: LD_VAR 0 2
33781: PUSH
33782: LD_VAR 0 5
33786: ARRAY
33787: ARRAY
33788: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33789: LD_ADDR_VAR 0 7
33793: PUSH
33794: LD_VAR 0 7
33798: PUSH
33799: LD_VAR 0 6
33803: PUSH
33804: EMPTY
33805: LIST
33806: ADD
33807: ST_TO_ADDR
// end ;
33808: GO 33764
33810: POP
33811: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33812: LD_ADDR_VAR 0 6
33816: PUSH
33817: LD_VAR 0 6
33821: PPUSH
33822: LD_VAR 0 2
33826: PUSH
33827: LD_VAR 0 2
33831: ARRAY
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL_OW 1
33842: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33843: LD_ADDR_VAR 0 7
33847: PUSH
33848: LD_VAR 0 7
33852: PPUSH
33853: LD_VAR 0 7
33857: PPUSH
33858: LD_VAR 0 6
33862: PPUSH
33863: CALL_OW 1
33867: ST_TO_ADDR
// for i = s_arr downto 2 do
33868: LD_ADDR_VAR 0 5
33872: PUSH
33873: DOUBLE
33874: LD_VAR 0 7
33878: INC
33879: ST_TO_ADDR
33880: LD_INT 2
33882: PUSH
33883: FOR_DOWNTO
33884: IFFALSE 33968
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33886: LD_ADDR_VAR 0 6
33890: PUSH
33891: LD_VAR 0 7
33895: PUSH
33896: LD_VAR 0 5
33900: PUSH
33901: LD_INT 1
33903: MINUS
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 2
33910: PUSH
33911: LD_VAR 0 5
33915: PUSH
33916: LD_INT 1
33918: MINUS
33919: ARRAY
33920: PPUSH
33921: LD_VAR 0 7
33925: PUSH
33926: LD_VAR 0 5
33930: ARRAY
33931: PPUSH
33932: CALL_OW 1
33936: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33937: LD_ADDR_VAR 0 7
33941: PUSH
33942: LD_VAR 0 7
33946: PPUSH
33947: LD_VAR 0 5
33951: PUSH
33952: LD_INT 1
33954: MINUS
33955: PPUSH
33956: LD_VAR 0 6
33960: PPUSH
33961: CALL_OW 1
33965: ST_TO_ADDR
// end ;
33966: GO 33883
33968: POP
33969: POP
// result := s_arr [ 1 ] ;
33970: LD_ADDR_VAR 0 4
33974: PUSH
33975: LD_VAR 0 7
33979: PUSH
33980: LD_INT 1
33982: ARRAY
33983: ST_TO_ADDR
// end ; end ;
33984: LD_VAR 0 4
33988: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33989: LD_INT 0
33991: PPUSH
33992: PPUSH
// if not list then
33993: LD_VAR 0 1
33997: NOT
33998: IFFALSE 34002
// exit ;
34000: GO 34093
// i := list [ pos1 ] ;
34002: LD_ADDR_VAR 0 5
34006: PUSH
34007: LD_VAR 0 1
34011: PUSH
34012: LD_VAR 0 2
34016: ARRAY
34017: ST_TO_ADDR
// if not i then
34018: LD_VAR 0 5
34022: NOT
34023: IFFALSE 34027
// exit ;
34025: GO 34093
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34027: LD_ADDR_VAR 0 1
34031: PUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: LD_VAR 0 2
34041: PPUSH
34042: LD_VAR 0 1
34046: PUSH
34047: LD_VAR 0 3
34051: ARRAY
34052: PPUSH
34053: CALL_OW 1
34057: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34058: LD_ADDR_VAR 0 1
34062: PUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: LD_VAR 0 3
34072: PPUSH
34073: LD_VAR 0 5
34077: PPUSH
34078: CALL_OW 1
34082: ST_TO_ADDR
// result := list ;
34083: LD_ADDR_VAR 0 4
34087: PUSH
34088: LD_VAR 0 1
34092: ST_TO_ADDR
// end ;
34093: LD_VAR 0 4
34097: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34098: LD_INT 0
34100: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34101: LD_ADDR_VAR 0 5
34105: PUSH
34106: LD_VAR 0 1
34110: PPUSH
34111: CALL_OW 250
34115: PPUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: CALL_OW 251
34125: PPUSH
34126: LD_VAR 0 2
34130: PPUSH
34131: LD_VAR 0 3
34135: PPUSH
34136: LD_VAR 0 4
34140: PPUSH
34141: CALL 34151 0 5
34145: ST_TO_ADDR
// end ;
34146: LD_VAR 0 5
34150: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34151: LD_INT 0
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
// if not list then
34157: LD_VAR 0 3
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34554
// result := [ ] ;
34166: LD_ADDR_VAR 0 6
34170: PUSH
34171: EMPTY
34172: ST_TO_ADDR
// for i in list do
34173: LD_ADDR_VAR 0 7
34177: PUSH
34178: LD_VAR 0 3
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34386
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34186: LD_ADDR_VAR 0 9
34190: PUSH
34191: LD_VAR 0 7
34195: PPUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 297
34210: ST_TO_ADDR
// if not result then
34211: LD_VAR 0 6
34215: NOT
34216: IFFALSE 34242
// result := [ [ i , tmp ] ] else
34218: LD_ADDR_VAR 0 6
34222: PUSH
34223: LD_VAR 0 7
34227: PUSH
34228: LD_VAR 0 9
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: ST_TO_ADDR
34240: GO 34384
// begin if result [ result ] [ 2 ] < tmp then
34242: LD_VAR 0 6
34246: PUSH
34247: LD_VAR 0 6
34251: ARRAY
34252: PUSH
34253: LD_INT 2
34255: ARRAY
34256: PUSH
34257: LD_VAR 0 9
34261: LESS
34262: IFFALSE 34304
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34264: LD_ADDR_VAR 0 6
34268: PUSH
34269: LD_VAR 0 6
34273: PPUSH
34274: LD_VAR 0 6
34278: PUSH
34279: LD_INT 1
34281: PLUS
34282: PPUSH
34283: LD_VAR 0 7
34287: PUSH
34288: LD_VAR 0 9
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PPUSH
34297: CALL_OW 2
34301: ST_TO_ADDR
34302: GO 34384
// for j = 1 to result do
34304: LD_ADDR_VAR 0 8
34308: PUSH
34309: DOUBLE
34310: LD_INT 1
34312: DEC
34313: ST_TO_ADDR
34314: LD_VAR 0 6
34318: PUSH
34319: FOR_TO
34320: IFFALSE 34382
// begin if tmp < result [ j ] [ 2 ] then
34322: LD_VAR 0 9
34326: PUSH
34327: LD_VAR 0 6
34331: PUSH
34332: LD_VAR 0 8
34336: ARRAY
34337: PUSH
34338: LD_INT 2
34340: ARRAY
34341: LESS
34342: IFFALSE 34380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34344: LD_ADDR_VAR 0 6
34348: PUSH
34349: LD_VAR 0 6
34353: PPUSH
34354: LD_VAR 0 8
34358: PPUSH
34359: LD_VAR 0 7
34363: PUSH
34364: LD_VAR 0 9
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PPUSH
34373: CALL_OW 2
34377: ST_TO_ADDR
// break ;
34378: GO 34382
// end ; end ;
34380: GO 34319
34382: POP
34383: POP
// end ; end ;
34384: GO 34183
34386: POP
34387: POP
// if result and not asc then
34388: LD_VAR 0 6
34392: PUSH
34393: LD_VAR 0 4
34397: NOT
34398: AND
34399: IFFALSE 34474
// begin tmp := result ;
34401: LD_ADDR_VAR 0 9
34405: PUSH
34406: LD_VAR 0 6
34410: ST_TO_ADDR
// for i = tmp downto 1 do
34411: LD_ADDR_VAR 0 7
34415: PUSH
34416: DOUBLE
34417: LD_VAR 0 9
34421: INC
34422: ST_TO_ADDR
34423: LD_INT 1
34425: PUSH
34426: FOR_DOWNTO
34427: IFFALSE 34472
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34429: LD_ADDR_VAR 0 6
34433: PUSH
34434: LD_VAR 0 6
34438: PPUSH
34439: LD_VAR 0 9
34443: PUSH
34444: LD_VAR 0 7
34448: MINUS
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: PPUSH
34454: LD_VAR 0 9
34458: PUSH
34459: LD_VAR 0 7
34463: ARRAY
34464: PPUSH
34465: CALL_OW 1
34469: ST_TO_ADDR
34470: GO 34426
34472: POP
34473: POP
// end ; tmp := [ ] ;
34474: LD_ADDR_VAR 0 9
34478: PUSH
34479: EMPTY
34480: ST_TO_ADDR
// if mode then
34481: LD_VAR 0 5
34485: IFFALSE 34554
// begin for i = 1 to result do
34487: LD_ADDR_VAR 0 7
34491: PUSH
34492: DOUBLE
34493: LD_INT 1
34495: DEC
34496: ST_TO_ADDR
34497: LD_VAR 0 6
34501: PUSH
34502: FOR_TO
34503: IFFALSE 34542
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34505: LD_ADDR_VAR 0 9
34509: PUSH
34510: LD_VAR 0 9
34514: PPUSH
34515: LD_VAR 0 7
34519: PPUSH
34520: LD_VAR 0 6
34524: PUSH
34525: LD_VAR 0 7
34529: ARRAY
34530: PUSH
34531: LD_INT 1
34533: ARRAY
34534: PPUSH
34535: CALL_OW 1
34539: ST_TO_ADDR
34540: GO 34502
34542: POP
34543: POP
// result := tmp ;
34544: LD_ADDR_VAR 0 6
34548: PUSH
34549: LD_VAR 0 9
34553: ST_TO_ADDR
// end ; end ;
34554: LD_VAR 0 6
34558: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
34566: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34567: LD_ADDR_VAR 0 5
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
// if not x or not y then
34589: LD_VAR 0 2
34593: NOT
34594: PUSH
34595: LD_VAR 0 3
34599: NOT
34600: OR
34601: IFFALSE 34605
// exit ;
34603: GO 36257
// if not range then
34605: LD_VAR 0 4
34609: NOT
34610: IFFALSE 34620
// range := 10 ;
34612: LD_ADDR_VAR 0 4
34616: PUSH
34617: LD_INT 10
34619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34620: LD_ADDR_VAR 0 8
34624: PUSH
34625: LD_INT 81
34627: PUSH
34628: LD_VAR 0 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 92
34639: PUSH
34640: LD_VAR 0 2
34644: PUSH
34645: LD_VAR 0 3
34649: PUSH
34650: LD_VAR 0 4
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: LD_INT 21
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: PPUSH
34683: CALL_OW 69
34687: ST_TO_ADDR
// if not tmp then
34688: LD_VAR 0 8
34692: NOT
34693: IFFALSE 34697
// exit ;
34695: GO 36257
// for i in tmp do
34697: LD_ADDR_VAR 0 6
34701: PUSH
34702: LD_VAR 0 8
34706: PUSH
34707: FOR_IN
34708: IFFALSE 36232
// begin points := [ 0 , 0 , 0 ] ;
34710: LD_ADDR_VAR 0 9
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: ST_TO_ADDR
// bpoints := 1 ;
34729: LD_ADDR_VAR 0 10
34733: PUSH
34734: LD_INT 1
34736: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34737: LD_VAR 0 6
34741: PPUSH
34742: CALL_OW 247
34746: PUSH
34747: LD_INT 1
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 35333
34755: POP
// begin if GetClass ( i ) = 1 then
34756: LD_VAR 0 6
34760: PPUSH
34761: CALL_OW 257
34765: PUSH
34766: LD_INT 1
34768: EQUAL
34769: IFFALSE 34790
// points := [ 10 , 5 , 3 ] ;
34771: LD_ADDR_VAR 0 9
34775: PUSH
34776: LD_INT 10
34778: PUSH
34779: LD_INT 5
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34790: LD_VAR 0 6
34794: PPUSH
34795: CALL_OW 257
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: IN
34814: IFFALSE 34835
// points := [ 3 , 2 , 1 ] ;
34816: LD_ADDR_VAR 0 9
34820: PUSH
34821: LD_INT 3
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34835: LD_VAR 0 6
34839: PPUSH
34840: CALL_OW 257
34844: PUSH
34845: LD_INT 5
34847: EQUAL
34848: IFFALSE 34869
// points := [ 130 , 5 , 2 ] ;
34850: LD_ADDR_VAR 0 9
34854: PUSH
34855: LD_INT 130
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34869: LD_VAR 0 6
34873: PPUSH
34874: CALL_OW 257
34878: PUSH
34879: LD_INT 8
34881: EQUAL
34882: IFFALSE 34903
// points := [ 35 , 35 , 30 ] ;
34884: LD_ADDR_VAR 0 9
34888: PUSH
34889: LD_INT 35
34891: PUSH
34892: LD_INT 35
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34903: LD_VAR 0 6
34907: PPUSH
34908: CALL_OW 257
34912: PUSH
34913: LD_INT 9
34915: EQUAL
34916: IFFALSE 34937
// points := [ 20 , 55 , 40 ] ;
34918: LD_ADDR_VAR 0 9
34922: PUSH
34923: LD_INT 20
34925: PUSH
34926: LD_INT 55
34928: PUSH
34929: LD_INT 40
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34937: LD_VAR 0 6
34941: PPUSH
34942: CALL_OW 257
34946: PUSH
34947: LD_INT 12
34949: PUSH
34950: LD_INT 16
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: IN
34957: IFFALSE 34978
// points := [ 5 , 3 , 2 ] ;
34959: LD_ADDR_VAR 0 9
34963: PUSH
34964: LD_INT 5
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34978: LD_VAR 0 6
34982: PPUSH
34983: CALL_OW 257
34987: PUSH
34988: LD_INT 17
34990: EQUAL
34991: IFFALSE 35012
// points := [ 100 , 50 , 75 ] ;
34993: LD_ADDR_VAR 0 9
34997: PUSH
34998: LD_INT 100
35000: PUSH
35001: LD_INT 50
35003: PUSH
35004: LD_INT 75
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35012: LD_VAR 0 6
35016: PPUSH
35017: CALL_OW 257
35021: PUSH
35022: LD_INT 15
35024: EQUAL
35025: IFFALSE 35046
// points := [ 10 , 5 , 3 ] ;
35027: LD_ADDR_VAR 0 9
35031: PUSH
35032: LD_INT 10
35034: PUSH
35035: LD_INT 5
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35046: LD_VAR 0 6
35050: PPUSH
35051: CALL_OW 257
35055: PUSH
35056: LD_INT 14
35058: EQUAL
35059: IFFALSE 35080
// points := [ 10 , 0 , 0 ] ;
35061: LD_ADDR_VAR 0 9
35065: PUSH
35066: LD_INT 10
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35080: LD_VAR 0 6
35084: PPUSH
35085: CALL_OW 257
35089: PUSH
35090: LD_INT 11
35092: EQUAL
35093: IFFALSE 35114
// points := [ 30 , 10 , 5 ] ;
35095: LD_ADDR_VAR 0 9
35099: PUSH
35100: LD_INT 30
35102: PUSH
35103: LD_INT 10
35105: PUSH
35106: LD_INT 5
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35114: LD_VAR 0 1
35118: PPUSH
35119: LD_INT 5
35121: PPUSH
35122: CALL_OW 321
35126: PUSH
35127: LD_INT 2
35129: EQUAL
35130: IFFALSE 35147
// bpoints := bpoints * 1.8 ;
35132: LD_ADDR_VAR 0 10
35136: PUSH
35137: LD_VAR 0 10
35141: PUSH
35142: LD_REAL  1.80000000000000E+0000
35145: MUL
35146: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35147: LD_VAR 0 6
35151: PPUSH
35152: CALL_OW 257
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: LD_INT 3
35165: PUSH
35166: LD_INT 4
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: IN
35175: PUSH
35176: LD_VAR 0 1
35180: PPUSH
35181: LD_INT 51
35183: PPUSH
35184: CALL_OW 321
35188: PUSH
35189: LD_INT 2
35191: EQUAL
35192: AND
35193: IFFALSE 35210
// bpoints := bpoints * 1.2 ;
35195: LD_ADDR_VAR 0 10
35199: PUSH
35200: LD_VAR 0 10
35204: PUSH
35205: LD_REAL  1.20000000000000E+0000
35208: MUL
35209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: LD_INT 7
35225: PUSH
35226: LD_INT 9
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: IN
35234: PUSH
35235: LD_VAR 0 1
35239: PPUSH
35240: LD_INT 52
35242: PPUSH
35243: CALL_OW 321
35247: PUSH
35248: LD_INT 2
35250: EQUAL
35251: AND
35252: IFFALSE 35269
// bpoints := bpoints * 1.5 ;
35254: LD_ADDR_VAR 0 10
35258: PUSH
35259: LD_VAR 0 10
35263: PUSH
35264: LD_REAL  1.50000000000000E+0000
35267: MUL
35268: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35269: LD_VAR 0 1
35273: PPUSH
35274: LD_INT 66
35276: PPUSH
35277: CALL_OW 321
35281: PUSH
35282: LD_INT 2
35284: EQUAL
35285: IFFALSE 35302
// bpoints := bpoints * 1.1 ;
35287: LD_ADDR_VAR 0 10
35291: PUSH
35292: LD_VAR 0 10
35296: PUSH
35297: LD_REAL  1.10000000000000E+0000
35300: MUL
35301: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35302: LD_ADDR_VAR 0 10
35306: PUSH
35307: LD_VAR 0 10
35311: PUSH
35312: LD_VAR 0 6
35316: PPUSH
35317: LD_INT 1
35319: PPUSH
35320: CALL_OW 259
35324: PUSH
35325: LD_REAL  1.15000000000000E+0000
35328: MUL
35329: MUL
35330: ST_TO_ADDR
// end ; unit_vehicle :
35331: GO 36161
35333: LD_INT 2
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 36149
35341: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35342: LD_VAR 0 6
35346: PPUSH
35347: CALL_OW 264
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 42
35357: PUSH
35358: LD_INT 24
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: IN
35366: IFFALSE 35387
// points := [ 25 , 5 , 3 ] ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_INT 25
35375: PUSH
35376: LD_INT 5
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35387: LD_VAR 0 6
35391: PPUSH
35392: CALL_OW 264
35396: PUSH
35397: LD_INT 4
35399: PUSH
35400: LD_INT 43
35402: PUSH
35403: LD_INT 25
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: IN
35411: IFFALSE 35432
// points := [ 40 , 15 , 5 ] ;
35413: LD_ADDR_VAR 0 9
35417: PUSH
35418: LD_INT 40
35420: PUSH
35421: LD_INT 15
35423: PUSH
35424: LD_INT 5
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35432: LD_VAR 0 6
35436: PPUSH
35437: CALL_OW 264
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 23
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: IN
35452: IFFALSE 35473
// points := [ 7 , 25 , 8 ] ;
35454: LD_ADDR_VAR 0 9
35458: PUSH
35459: LD_INT 7
35461: PUSH
35462: LD_INT 25
35464: PUSH
35465: LD_INT 8
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35473: LD_VAR 0 6
35477: PPUSH
35478: CALL_OW 264
35482: PUSH
35483: LD_INT 5
35485: PUSH
35486: LD_INT 27
35488: PUSH
35489: LD_INT 44
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: IN
35497: IFFALSE 35518
// points := [ 14 , 50 , 16 ] ;
35499: LD_ADDR_VAR 0 9
35503: PUSH
35504: LD_INT 14
35506: PUSH
35507: LD_INT 50
35509: PUSH
35510: LD_INT 16
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35518: LD_VAR 0 6
35522: PPUSH
35523: CALL_OW 264
35527: PUSH
35528: LD_INT 6
35530: PUSH
35531: LD_INT 46
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: IN
35538: IFFALSE 35559
// points := [ 32 , 120 , 70 ] ;
35540: LD_ADDR_VAR 0 9
35544: PUSH
35545: LD_INT 32
35547: PUSH
35548: LD_INT 120
35550: PUSH
35551: LD_INT 70
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35559: LD_VAR 0 6
35563: PPUSH
35564: CALL_OW 264
35568: PUSH
35569: LD_INT 7
35571: PUSH
35572: LD_INT 28
35574: PUSH
35575: LD_INT 45
35577: PUSH
35578: LD_EXP 24
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: IN
35589: IFFALSE 35610
// points := [ 35 , 20 , 45 ] ;
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_INT 35
35598: PUSH
35599: LD_INT 20
35601: PUSH
35602: LD_INT 45
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35610: LD_VAR 0 6
35614: PPUSH
35615: CALL_OW 264
35619: PUSH
35620: LD_INT 47
35622: PUSH
35623: EMPTY
35624: LIST
35625: IN
35626: IFFALSE 35647
// points := [ 67 , 45 , 75 ] ;
35628: LD_ADDR_VAR 0 9
35632: PUSH
35633: LD_INT 67
35635: PUSH
35636: LD_INT 45
35638: PUSH
35639: LD_INT 75
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35647: LD_VAR 0 6
35651: PPUSH
35652: CALL_OW 264
35656: PUSH
35657: LD_INT 26
35659: PUSH
35660: EMPTY
35661: LIST
35662: IN
35663: IFFALSE 35684
// points := [ 120 , 30 , 80 ] ;
35665: LD_ADDR_VAR 0 9
35669: PUSH
35670: LD_INT 120
35672: PUSH
35673: LD_INT 30
35675: PUSH
35676: LD_INT 80
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35684: LD_VAR 0 6
35688: PPUSH
35689: CALL_OW 264
35693: PUSH
35694: LD_INT 22
35696: PUSH
35697: EMPTY
35698: LIST
35699: IN
35700: IFFALSE 35721
// points := [ 40 , 1 , 1 ] ;
35702: LD_ADDR_VAR 0 9
35706: PUSH
35707: LD_INT 40
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 29
35733: PUSH
35734: EMPTY
35735: LIST
35736: IN
35737: IFFALSE 35758
// points := [ 70 , 200 , 400 ] ;
35739: LD_ADDR_VAR 0 9
35743: PUSH
35744: LD_INT 70
35746: PUSH
35747: LD_INT 200
35749: PUSH
35750: LD_INT 400
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35758: LD_VAR 0 6
35762: PPUSH
35763: CALL_OW 264
35767: PUSH
35768: LD_INT 14
35770: PUSH
35771: LD_INT 53
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: IN
35778: IFFALSE 35799
// points := [ 40 , 10 , 20 ] ;
35780: LD_ADDR_VAR 0 9
35784: PUSH
35785: LD_INT 40
35787: PUSH
35788: LD_INT 10
35790: PUSH
35791: LD_INT 20
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35799: LD_VAR 0 6
35803: PPUSH
35804: CALL_OW 264
35808: PUSH
35809: LD_INT 9
35811: PUSH
35812: EMPTY
35813: LIST
35814: IN
35815: IFFALSE 35836
// points := [ 5 , 70 , 20 ] ;
35817: LD_ADDR_VAR 0 9
35821: PUSH
35822: LD_INT 5
35824: PUSH
35825: LD_INT 70
35827: PUSH
35828: LD_INT 20
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35836: LD_VAR 0 6
35840: PPUSH
35841: CALL_OW 264
35845: PUSH
35846: LD_INT 10
35848: PUSH
35849: EMPTY
35850: LIST
35851: IN
35852: IFFALSE 35873
// points := [ 35 , 110 , 70 ] ;
35854: LD_ADDR_VAR 0 9
35858: PUSH
35859: LD_INT 35
35861: PUSH
35862: LD_INT 110
35864: PUSH
35865: LD_INT 70
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35873: LD_VAR 0 6
35877: PPUSH
35878: CALL_OW 265
35882: PUSH
35883: LD_INT 25
35885: EQUAL
35886: IFFALSE 35907
// points := [ 80 , 65 , 100 ] ;
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_INT 80
35895: PUSH
35896: LD_INT 65
35898: PUSH
35899: LD_INT 100
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35907: LD_VAR 0 6
35911: PPUSH
35912: CALL_OW 263
35916: PUSH
35917: LD_INT 1
35919: EQUAL
35920: IFFALSE 35955
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35922: LD_ADDR_VAR 0 10
35926: PUSH
35927: LD_VAR 0 10
35931: PUSH
35932: LD_VAR 0 6
35936: PPUSH
35937: CALL_OW 311
35941: PPUSH
35942: LD_INT 3
35944: PPUSH
35945: CALL_OW 259
35949: PUSH
35950: LD_INT 4
35952: MUL
35953: MUL
35954: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35955: LD_VAR 0 6
35959: PPUSH
35960: CALL_OW 263
35964: PUSH
35965: LD_INT 2
35967: EQUAL
35968: IFFALSE 36019
// begin j := IsControledBy ( i ) ;
35970: LD_ADDR_VAR 0 7
35974: PUSH
35975: LD_VAR 0 6
35979: PPUSH
35980: CALL_OW 312
35984: ST_TO_ADDR
// if j then
35985: LD_VAR 0 7
35989: IFFALSE 36019
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 10
36000: PUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: LD_INT 3
36008: PPUSH
36009: CALL_OW 259
36013: PUSH
36014: LD_INT 3
36016: MUL
36017: MUL
36018: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36019: LD_VAR 0 6
36023: PPUSH
36024: CALL_OW 264
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: LD_INT 6
36034: PUSH
36035: LD_INT 46
36037: PUSH
36038: LD_INT 44
36040: PUSH
36041: LD_INT 47
36043: PUSH
36044: LD_INT 45
36046: PUSH
36047: LD_INT 28
36049: PUSH
36050: LD_INT 7
36052: PUSH
36053: LD_INT 27
36055: PUSH
36056: LD_INT 29
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: IN
36071: PUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_INT 52
36079: PPUSH
36080: CALL_OW 321
36084: PUSH
36085: LD_INT 2
36087: EQUAL
36088: AND
36089: IFFALSE 36106
// bpoints := bpoints * 1.2 ;
36091: LD_ADDR_VAR 0 10
36095: PUSH
36096: LD_VAR 0 10
36100: PUSH
36101: LD_REAL  1.20000000000000E+0000
36104: MUL
36105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36106: LD_VAR 0 6
36110: PPUSH
36111: CALL_OW 264
36115: PUSH
36116: LD_INT 6
36118: PUSH
36119: LD_INT 46
36121: PUSH
36122: LD_INT 47
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: IN
36130: IFFALSE 36147
// bpoints := bpoints * 1.2 ;
36132: LD_ADDR_VAR 0 10
36136: PUSH
36137: LD_VAR 0 10
36141: PUSH
36142: LD_REAL  1.20000000000000E+0000
36145: MUL
36146: ST_TO_ADDR
// end ; unit_building :
36147: GO 36161
36149: LD_INT 3
36151: DOUBLE
36152: EQUAL
36153: IFTRUE 36157
36155: GO 36160
36157: POP
// ; end ;
36158: GO 36161
36160: POP
// for j = 1 to 3 do
36161: LD_ADDR_VAR 0 7
36165: PUSH
36166: DOUBLE
36167: LD_INT 1
36169: DEC
36170: ST_TO_ADDR
36171: LD_INT 3
36173: PUSH
36174: FOR_TO
36175: IFFALSE 36228
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36177: LD_ADDR_VAR 0 5
36181: PUSH
36182: LD_VAR 0 5
36186: PPUSH
36187: LD_VAR 0 7
36191: PPUSH
36192: LD_VAR 0 5
36196: PUSH
36197: LD_VAR 0 7
36201: ARRAY
36202: PUSH
36203: LD_VAR 0 9
36207: PUSH
36208: LD_VAR 0 7
36212: ARRAY
36213: PUSH
36214: LD_VAR 0 10
36218: MUL
36219: PLUS
36220: PPUSH
36221: CALL_OW 1
36225: ST_TO_ADDR
36226: GO 36174
36228: POP
36229: POP
// end ;
36230: GO 34707
36232: POP
36233: POP
// result := Replace ( result , 4 , tmp ) ;
36234: LD_ADDR_VAR 0 5
36238: PUSH
36239: LD_VAR 0 5
36243: PPUSH
36244: LD_INT 4
36246: PPUSH
36247: LD_VAR 0 8
36251: PPUSH
36252: CALL_OW 1
36256: ST_TO_ADDR
// end ;
36257: LD_VAR 0 5
36261: RET
// export function DangerAtRange ( unit , range ) ; begin
36262: LD_INT 0
36264: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL_OW 255
36279: PPUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL_OW 250
36289: PPUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 251
36299: PPUSH
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL 34559 0 4
36309: ST_TO_ADDR
// end ;
36310: LD_VAR 0 3
36314: RET
// export function DangerInArea ( side , area ) ; begin
36315: LD_INT 0
36317: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36318: LD_ADDR_VAR 0 3
36322: PUSH
36323: LD_VAR 0 2
36327: PPUSH
36328: LD_INT 81
36330: PUSH
36331: LD_VAR 0 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PPUSH
36340: CALL_OW 70
36344: ST_TO_ADDR
// end ;
36345: LD_VAR 0 3
36349: RET
// export function IsExtension ( b ) ; begin
36350: LD_INT 0
36352: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36353: LD_ADDR_VAR 0 2
36357: PUSH
36358: LD_VAR 0 1
36362: PUSH
36363: LD_INT 23
36365: PUSH
36366: LD_INT 20
36368: PUSH
36369: LD_INT 22
36371: PUSH
36372: LD_INT 17
36374: PUSH
36375: LD_INT 24
36377: PUSH
36378: LD_INT 21
36380: PUSH
36381: LD_INT 19
36383: PUSH
36384: LD_INT 16
36386: PUSH
36387: LD_INT 25
36389: PUSH
36390: LD_INT 18
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: IN
36405: ST_TO_ADDR
// end ;
36406: LD_VAR 0 2
36410: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36411: LD_INT 0
36413: PPUSH
36414: PPUSH
36415: PPUSH
// result := [ ] ;
36416: LD_ADDR_VAR 0 4
36420: PUSH
36421: EMPTY
36422: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36423: LD_ADDR_VAR 0 5
36427: PUSH
36428: LD_VAR 0 2
36432: PPUSH
36433: LD_INT 21
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PPUSH
36443: CALL_OW 70
36447: ST_TO_ADDR
// if not tmp then
36448: LD_VAR 0 5
36452: NOT
36453: IFFALSE 36457
// exit ;
36455: GO 36521
// if checkLink then
36457: LD_VAR 0 3
36461: IFFALSE 36511
// begin for i in tmp do
36463: LD_ADDR_VAR 0 6
36467: PUSH
36468: LD_VAR 0 5
36472: PUSH
36473: FOR_IN
36474: IFFALSE 36509
// if GetBase ( i ) <> base then
36476: LD_VAR 0 6
36480: PPUSH
36481: CALL_OW 274
36485: PUSH
36486: LD_VAR 0 1
36490: NONEQUAL
36491: IFFALSE 36507
// ComLinkToBase ( base , i ) ;
36493: LD_VAR 0 1
36497: PPUSH
36498: LD_VAR 0 6
36502: PPUSH
36503: CALL_OW 169
36507: GO 36473
36509: POP
36510: POP
// end ; result := tmp ;
36511: LD_ADDR_VAR 0 4
36515: PUSH
36516: LD_VAR 0 5
36520: ST_TO_ADDR
// end ;
36521: LD_VAR 0 4
36525: RET
// export function ComComplete ( units , b ) ; var i ; begin
36526: LD_INT 0
36528: PPUSH
36529: PPUSH
// if not units then
36530: LD_VAR 0 1
36534: NOT
36535: IFFALSE 36539
// exit ;
36537: GO 36629
// for i in units do
36539: LD_ADDR_VAR 0 4
36543: PUSH
36544: LD_VAR 0 1
36548: PUSH
36549: FOR_IN
36550: IFFALSE 36627
// if BuildingStatus ( b ) = bs_build then
36552: LD_VAR 0 2
36556: PPUSH
36557: CALL_OW 461
36561: PUSH
36562: LD_INT 1
36564: EQUAL
36565: IFFALSE 36625
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36567: LD_VAR 0 4
36571: PPUSH
36572: LD_STRING h
36574: PUSH
36575: LD_VAR 0 2
36579: PPUSH
36580: CALL_OW 250
36584: PUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: CALL_OW 251
36594: PUSH
36595: LD_VAR 0 2
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: EMPTY
36619: LIST
36620: PPUSH
36621: CALL_OW 446
36625: GO 36549
36627: POP
36628: POP
// end ;
36629: LD_VAR 0 3
36633: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36634: LD_INT 0
36636: PPUSH
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36642: LD_VAR 0 1
36646: NOT
36647: PUSH
36648: LD_VAR 0 1
36652: PPUSH
36653: CALL_OW 263
36657: PUSH
36658: LD_INT 2
36660: NONEQUAL
36661: OR
36662: IFFALSE 36666
// exit ;
36664: GO 36982
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36666: LD_ADDR_VAR 0 6
36670: PUSH
36671: LD_INT 22
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 255
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: LD_INT 30
36693: PUSH
36694: LD_INT 36
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 34
36703: PUSH
36704: LD_INT 31
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PPUSH
36720: CALL_OW 69
36724: ST_TO_ADDR
// if not tmp then
36725: LD_VAR 0 6
36729: NOT
36730: IFFALSE 36734
// exit ;
36732: GO 36982
// result := [ ] ;
36734: LD_ADDR_VAR 0 2
36738: PUSH
36739: EMPTY
36740: ST_TO_ADDR
// for i in tmp do
36741: LD_ADDR_VAR 0 3
36745: PUSH
36746: LD_VAR 0 6
36750: PUSH
36751: FOR_IN
36752: IFFALSE 36823
// begin t := UnitsInside ( i ) ;
36754: LD_ADDR_VAR 0 4
36758: PUSH
36759: LD_VAR 0 3
36763: PPUSH
36764: CALL_OW 313
36768: ST_TO_ADDR
// if t then
36769: LD_VAR 0 4
36773: IFFALSE 36821
// for j in t do
36775: LD_ADDR_VAR 0 7
36779: PUSH
36780: LD_VAR 0 4
36784: PUSH
36785: FOR_IN
36786: IFFALSE 36819
// result := Replace ( result , result + 1 , j ) ;
36788: LD_ADDR_VAR 0 2
36792: PUSH
36793: LD_VAR 0 2
36797: PPUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 1
36805: PLUS
36806: PPUSH
36807: LD_VAR 0 7
36811: PPUSH
36812: CALL_OW 1
36816: ST_TO_ADDR
36817: GO 36785
36819: POP
36820: POP
// end ;
36821: GO 36751
36823: POP
36824: POP
// if not result then
36825: LD_VAR 0 2
36829: NOT
36830: IFFALSE 36834
// exit ;
36832: GO 36982
// mech := result [ 1 ] ;
36834: LD_ADDR_VAR 0 5
36838: PUSH
36839: LD_VAR 0 2
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: ST_TO_ADDR
// if result > 1 then
36848: LD_VAR 0 2
36852: PUSH
36853: LD_INT 1
36855: GREATER
36856: IFFALSE 36968
// begin for i = 2 to result do
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: DOUBLE
36864: LD_INT 2
36866: DEC
36867: ST_TO_ADDR
36868: LD_VAR 0 2
36872: PUSH
36873: FOR_TO
36874: IFFALSE 36966
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_VAR 0 2
36885: PUSH
36886: LD_VAR 0 3
36890: ARRAY
36891: PPUSH
36892: LD_INT 3
36894: PPUSH
36895: CALL_OW 259
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_VAR 0 3
36909: ARRAY
36910: PPUSH
36911: CALL_OW 432
36915: MINUS
36916: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36917: LD_VAR 0 4
36921: PUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: LD_INT 3
36929: PPUSH
36930: CALL_OW 259
36934: PUSH
36935: LD_VAR 0 5
36939: PPUSH
36940: CALL_OW 432
36944: MINUS
36945: GREATEREQUAL
36946: IFFALSE 36964
// mech := result [ i ] ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_VAR 0 2
36957: PUSH
36958: LD_VAR 0 3
36962: ARRAY
36963: ST_TO_ADDR
// end ;
36964: GO 36873
36966: POP
36967: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36968: LD_VAR 0 1
36972: PPUSH
36973: LD_VAR 0 5
36977: PPUSH
36978: CALL_OW 135
// end ;
36982: LD_VAR 0 2
36986: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36987: LD_INT 0
36989: PPUSH
36990: PPUSH
36991: PPUSH
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
// result := [ ] ;
37002: LD_ADDR_VAR 0 7
37006: PUSH
37007: EMPTY
37008: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37009: LD_VAR 0 1
37013: PPUSH
37014: CALL_OW 266
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: IN
37029: NOT
37030: IFFALSE 37034
// exit ;
37032: GO 38668
// if name then
37034: LD_VAR 0 3
37038: IFFALSE 37054
// SetBName ( base_dep , name ) ;
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_VAR 0 3
37049: PPUSH
37050: CALL_OW 500
// base := GetBase ( base_dep ) ;
37054: LD_ADDR_VAR 0 15
37058: PUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 274
37068: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37069: LD_ADDR_VAR 0 16
37073: PUSH
37074: LD_VAR 0 1
37078: PPUSH
37079: CALL_OW 255
37083: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37084: LD_ADDR_VAR 0 17
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 248
37098: ST_TO_ADDR
// if sources then
37099: LD_VAR 0 5
37103: IFFALSE 37150
// for i = 1 to 3 do
37105: LD_ADDR_VAR 0 8
37109: PUSH
37110: DOUBLE
37111: LD_INT 1
37113: DEC
37114: ST_TO_ADDR
37115: LD_INT 3
37117: PUSH
37118: FOR_TO
37119: IFFALSE 37148
// AddResourceType ( base , i , sources [ i ] ) ;
37121: LD_VAR 0 15
37125: PPUSH
37126: LD_VAR 0 8
37130: PPUSH
37131: LD_VAR 0 5
37135: PUSH
37136: LD_VAR 0 8
37140: ARRAY
37141: PPUSH
37142: CALL_OW 276
37146: GO 37118
37148: POP
37149: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37150: LD_ADDR_VAR 0 18
37154: PUSH
37155: LD_VAR 0 15
37159: PPUSH
37160: LD_VAR 0 2
37164: PPUSH
37165: LD_INT 1
37167: PPUSH
37168: CALL 36411 0 3
37172: ST_TO_ADDR
// InitHc ;
37173: CALL_OW 19
// InitUc ;
37177: CALL_OW 18
// uc_side := side ;
37181: LD_ADDR_OWVAR 20
37185: PUSH
37186: LD_VAR 0 16
37190: ST_TO_ADDR
// uc_nation := nation ;
37191: LD_ADDR_OWVAR 21
37195: PUSH
37196: LD_VAR 0 17
37200: ST_TO_ADDR
// if buildings then
37201: LD_VAR 0 18
37205: IFFALSE 38527
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37207: LD_ADDR_VAR 0 19
37211: PUSH
37212: LD_VAR 0 18
37216: PPUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 30
37222: PUSH
37223: LD_INT 29
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 30
37232: PUSH
37233: LD_INT 30
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: PPUSH
37245: CALL_OW 72
37249: ST_TO_ADDR
// if tmp then
37250: LD_VAR 0 19
37254: IFFALSE 37302
// for i in tmp do
37256: LD_ADDR_VAR 0 8
37260: PUSH
37261: LD_VAR 0 19
37265: PUSH
37266: FOR_IN
37267: IFFALSE 37300
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37269: LD_VAR 0 8
37273: PPUSH
37274: CALL_OW 250
37278: PPUSH
37279: LD_VAR 0 8
37283: PPUSH
37284: CALL_OW 251
37288: PPUSH
37289: LD_VAR 0 16
37293: PPUSH
37294: CALL_OW 441
37298: GO 37266
37300: POP
37301: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37302: LD_VAR 0 18
37306: PPUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 30
37312: PUSH
37313: LD_INT 32
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: LD_INT 33
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: PPUSH
37335: CALL_OW 72
37339: IFFALSE 37427
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37341: LD_ADDR_VAR 0 8
37345: PUSH
37346: LD_VAR 0 18
37350: PPUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: LD_INT 32
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 30
37366: PUSH
37367: LD_INT 33
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: PPUSH
37379: CALL_OW 72
37383: PUSH
37384: FOR_IN
37385: IFFALSE 37425
// begin if not GetBWeapon ( i ) then
37387: LD_VAR 0 8
37391: PPUSH
37392: CALL_OW 269
37396: NOT
37397: IFFALSE 37423
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37399: LD_VAR 0 8
37403: PPUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: LD_VAR 0 2
37413: PPUSH
37414: CALL 38673 0 2
37418: PPUSH
37419: CALL_OW 431
// end ;
37423: GO 37384
37425: POP
37426: POP
// end ; for i = 1 to personel do
37427: LD_ADDR_VAR 0 8
37431: PUSH
37432: DOUBLE
37433: LD_INT 1
37435: DEC
37436: ST_TO_ADDR
37437: LD_VAR 0 6
37441: PUSH
37442: FOR_TO
37443: IFFALSE 38507
// begin if i > 4 then
37445: LD_VAR 0 8
37449: PUSH
37450: LD_INT 4
37452: GREATER
37453: IFFALSE 37457
// break ;
37455: GO 38507
// case i of 1 :
37457: LD_VAR 0 8
37461: PUSH
37462: LD_INT 1
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37470
37468: GO 37550
37470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37471: LD_ADDR_VAR 0 12
37475: PUSH
37476: LD_VAR 0 18
37480: PPUSH
37481: LD_INT 22
37483: PUSH
37484: LD_VAR 0 16
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 58
37495: PUSH
37496: EMPTY
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 30
37504: PUSH
37505: LD_INT 32
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 30
37514: PUSH
37515: LD_INT 4
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 30
37524: PUSH
37525: LD_INT 5
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PPUSH
37543: CALL_OW 72
37547: ST_TO_ADDR
37548: GO 37772
37550: LD_INT 2
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37620
37558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37559: LD_ADDR_VAR 0 12
37563: PUSH
37564: LD_VAR 0 18
37568: PPUSH
37569: LD_INT 22
37571: PUSH
37572: LD_VAR 0 16
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 30
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 30
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PPUSH
37613: CALL_OW 72
37617: ST_TO_ADDR
37618: GO 37772
37620: LD_INT 3
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37628
37626: GO 37690
37628: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37629: LD_ADDR_VAR 0 12
37633: PUSH
37634: LD_VAR 0 18
37638: PPUSH
37639: LD_INT 22
37641: PUSH
37642: LD_VAR 0 16
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: LD_INT 30
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 30
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PPUSH
37683: CALL_OW 72
37687: ST_TO_ADDR
37688: GO 37772
37690: LD_INT 4
37692: DOUBLE
37693: EQUAL
37694: IFTRUE 37698
37696: GO 37771
37698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37699: LD_ADDR_VAR 0 12
37703: PUSH
37704: LD_VAR 0 18
37708: PPUSH
37709: LD_INT 22
37711: PUSH
37712: LD_VAR 0 16
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 30
37726: PUSH
37727: LD_INT 6
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 30
37736: PUSH
37737: LD_INT 7
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 8
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PPUSH
37764: CALL_OW 72
37768: ST_TO_ADDR
37769: GO 37772
37771: POP
// if i = 1 then
37772: LD_VAR 0 8
37776: PUSH
37777: LD_INT 1
37779: EQUAL
37780: IFFALSE 37891
// begin tmp := [ ] ;
37782: LD_ADDR_VAR 0 19
37786: PUSH
37787: EMPTY
37788: ST_TO_ADDR
// for j in f do
37789: LD_ADDR_VAR 0 9
37793: PUSH
37794: LD_VAR 0 12
37798: PUSH
37799: FOR_IN
37800: IFFALSE 37873
// if GetBType ( j ) = b_bunker then
37802: LD_VAR 0 9
37806: PPUSH
37807: CALL_OW 266
37811: PUSH
37812: LD_INT 32
37814: EQUAL
37815: IFFALSE 37842
// tmp := Insert ( tmp , 1 , j ) else
37817: LD_ADDR_VAR 0 19
37821: PUSH
37822: LD_VAR 0 19
37826: PPUSH
37827: LD_INT 1
37829: PPUSH
37830: LD_VAR 0 9
37834: PPUSH
37835: CALL_OW 2
37839: ST_TO_ADDR
37840: GO 37871
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37842: LD_ADDR_VAR 0 19
37846: PUSH
37847: LD_VAR 0 19
37851: PPUSH
37852: LD_VAR 0 19
37856: PUSH
37857: LD_INT 1
37859: PLUS
37860: PPUSH
37861: LD_VAR 0 9
37865: PPUSH
37866: CALL_OW 2
37870: ST_TO_ADDR
37871: GO 37799
37873: POP
37874: POP
// if tmp then
37875: LD_VAR 0 19
37879: IFFALSE 37891
// f := tmp ;
37881: LD_ADDR_VAR 0 12
37885: PUSH
37886: LD_VAR 0 19
37890: ST_TO_ADDR
// end ; x := personel [ i ] ;
37891: LD_ADDR_VAR 0 13
37895: PUSH
37896: LD_VAR 0 6
37900: PUSH
37901: LD_VAR 0 8
37905: ARRAY
37906: ST_TO_ADDR
// if x = - 1 then
37907: LD_VAR 0 13
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: EQUAL
37916: IFFALSE 38125
// begin for j in f do
37918: LD_ADDR_VAR 0 9
37922: PUSH
37923: LD_VAR 0 12
37927: PUSH
37928: FOR_IN
37929: IFFALSE 38121
// repeat InitHc ;
37931: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37935: LD_VAR 0 9
37939: PPUSH
37940: CALL_OW 266
37944: PUSH
37945: LD_INT 5
37947: EQUAL
37948: IFFALSE 38018
// begin if UnitsInside ( j ) < 3 then
37950: LD_VAR 0 9
37954: PPUSH
37955: CALL_OW 313
37959: PUSH
37960: LD_INT 3
37962: LESS
37963: IFFALSE 37999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37965: LD_INT 0
37967: PPUSH
37968: LD_INT 5
37970: PUSH
37971: LD_INT 8
37973: PUSH
37974: LD_INT 9
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: PUSH
37982: LD_VAR 0 17
37986: ARRAY
37987: PPUSH
37988: LD_VAR 0 4
37992: PPUSH
37993: CALL_OW 380
37997: GO 38016
// PrepareHuman ( false , i , skill ) ;
37999: LD_INT 0
38001: PPUSH
38002: LD_VAR 0 8
38006: PPUSH
38007: LD_VAR 0 4
38011: PPUSH
38012: CALL_OW 380
// end else
38016: GO 38035
// PrepareHuman ( false , i , skill ) ;
38018: LD_INT 0
38020: PPUSH
38021: LD_VAR 0 8
38025: PPUSH
38026: LD_VAR 0 4
38030: PPUSH
38031: CALL_OW 380
// un := CreateHuman ;
38035: LD_ADDR_VAR 0 14
38039: PUSH
38040: CALL_OW 44
38044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38045: LD_ADDR_VAR 0 7
38049: PUSH
38050: LD_VAR 0 7
38054: PPUSH
38055: LD_INT 1
38057: PPUSH
38058: LD_VAR 0 14
38062: PPUSH
38063: CALL_OW 2
38067: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38068: LD_VAR 0 14
38072: PPUSH
38073: LD_VAR 0 9
38077: PPUSH
38078: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38082: LD_VAR 0 9
38086: PPUSH
38087: CALL_OW 313
38091: PUSH
38092: LD_INT 6
38094: EQUAL
38095: PUSH
38096: LD_VAR 0 9
38100: PPUSH
38101: CALL_OW 266
38105: PUSH
38106: LD_INT 32
38108: PUSH
38109: LD_INT 31
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: IN
38116: OR
38117: IFFALSE 37931
38119: GO 37928
38121: POP
38122: POP
// end else
38123: GO 38505
// for j = 1 to x do
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: DOUBLE
38131: LD_INT 1
38133: DEC
38134: ST_TO_ADDR
38135: LD_VAR 0 13
38139: PUSH
38140: FOR_TO
38141: IFFALSE 38503
// begin InitHc ;
38143: CALL_OW 19
// if not f then
38147: LD_VAR 0 12
38151: NOT
38152: IFFALSE 38241
// begin PrepareHuman ( false , i , skill ) ;
38154: LD_INT 0
38156: PPUSH
38157: LD_VAR 0 8
38161: PPUSH
38162: LD_VAR 0 4
38166: PPUSH
38167: CALL_OW 380
// un := CreateHuman ;
38171: LD_ADDR_VAR 0 14
38175: PUSH
38176: CALL_OW 44
38180: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38181: LD_ADDR_VAR 0 7
38185: PUSH
38186: LD_VAR 0 7
38190: PPUSH
38191: LD_INT 1
38193: PPUSH
38194: LD_VAR 0 14
38198: PPUSH
38199: CALL_OW 2
38203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38204: LD_VAR 0 14
38208: PPUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: CALL_OW 250
38218: PPUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 251
38228: PPUSH
38229: LD_INT 10
38231: PPUSH
38232: LD_INT 0
38234: PPUSH
38235: CALL_OW 50
// continue ;
38239: GO 38140
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38241: LD_VAR 0 12
38245: PUSH
38246: LD_INT 1
38248: ARRAY
38249: PPUSH
38250: CALL_OW 313
38254: PUSH
38255: LD_VAR 0 12
38259: PUSH
38260: LD_INT 1
38262: ARRAY
38263: PPUSH
38264: CALL_OW 266
38268: PUSH
38269: LD_INT 32
38271: PUSH
38272: LD_INT 31
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: IN
38279: AND
38280: PUSH
38281: LD_VAR 0 12
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: CALL_OW 313
38294: PUSH
38295: LD_INT 6
38297: EQUAL
38298: OR
38299: IFFALSE 38319
// f := Delete ( f , 1 ) ;
38301: LD_ADDR_VAR 0 12
38305: PUSH
38306: LD_VAR 0 12
38310: PPUSH
38311: LD_INT 1
38313: PPUSH
38314: CALL_OW 3
38318: ST_TO_ADDR
// if not f then
38319: LD_VAR 0 12
38323: NOT
38324: IFFALSE 38342
// begin x := x + 2 ;
38326: LD_ADDR_VAR 0 13
38330: PUSH
38331: LD_VAR 0 13
38335: PUSH
38336: LD_INT 2
38338: PLUS
38339: ST_TO_ADDR
// continue ;
38340: GO 38140
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38342: LD_VAR 0 12
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: PPUSH
38351: CALL_OW 266
38355: PUSH
38356: LD_INT 5
38358: EQUAL
38359: IFFALSE 38433
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38361: LD_VAR 0 12
38365: PUSH
38366: LD_INT 1
38368: ARRAY
38369: PPUSH
38370: CALL_OW 313
38374: PUSH
38375: LD_INT 3
38377: LESS
38378: IFFALSE 38414
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38380: LD_INT 0
38382: PPUSH
38383: LD_INT 5
38385: PUSH
38386: LD_INT 8
38388: PUSH
38389: LD_INT 9
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: LD_VAR 0 17
38401: ARRAY
38402: PPUSH
38403: LD_VAR 0 4
38407: PPUSH
38408: CALL_OW 380
38412: GO 38431
// PrepareHuman ( false , i , skill ) ;
38414: LD_INT 0
38416: PPUSH
38417: LD_VAR 0 8
38421: PPUSH
38422: LD_VAR 0 4
38426: PPUSH
38427: CALL_OW 380
// end else
38431: GO 38450
// PrepareHuman ( false , i , skill ) ;
38433: LD_INT 0
38435: PPUSH
38436: LD_VAR 0 8
38440: PPUSH
38441: LD_VAR 0 4
38445: PPUSH
38446: CALL_OW 380
// un := CreateHuman ;
38450: LD_ADDR_VAR 0 14
38454: PUSH
38455: CALL_OW 44
38459: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38460: LD_ADDR_VAR 0 7
38464: PUSH
38465: LD_VAR 0 7
38469: PPUSH
38470: LD_INT 1
38472: PPUSH
38473: LD_VAR 0 14
38477: PPUSH
38478: CALL_OW 2
38482: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38483: LD_VAR 0 14
38487: PPUSH
38488: LD_VAR 0 12
38492: PUSH
38493: LD_INT 1
38495: ARRAY
38496: PPUSH
38497: CALL_OW 52
// end ;
38501: GO 38140
38503: POP
38504: POP
// end ;
38505: GO 37442
38507: POP
38508: POP
// result := result ^ buildings ;
38509: LD_ADDR_VAR 0 7
38513: PUSH
38514: LD_VAR 0 7
38518: PUSH
38519: LD_VAR 0 18
38523: ADD
38524: ST_TO_ADDR
// end else
38525: GO 38668
// begin for i = 1 to personel do
38527: LD_ADDR_VAR 0 8
38531: PUSH
38532: DOUBLE
38533: LD_INT 1
38535: DEC
38536: ST_TO_ADDR
38537: LD_VAR 0 6
38541: PUSH
38542: FOR_TO
38543: IFFALSE 38666
// begin if i > 4 then
38545: LD_VAR 0 8
38549: PUSH
38550: LD_INT 4
38552: GREATER
38553: IFFALSE 38557
// break ;
38555: GO 38666
// x := personel [ i ] ;
38557: LD_ADDR_VAR 0 13
38561: PUSH
38562: LD_VAR 0 6
38566: PUSH
38567: LD_VAR 0 8
38571: ARRAY
38572: ST_TO_ADDR
// if x = - 1 then
38573: LD_VAR 0 13
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: EQUAL
38582: IFFALSE 38586
// continue ;
38584: GO 38542
// PrepareHuman ( false , i , skill ) ;
38586: LD_INT 0
38588: PPUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_VAR 0 4
38598: PPUSH
38599: CALL_OW 380
// un := CreateHuman ;
38603: LD_ADDR_VAR 0 14
38607: PUSH
38608: CALL_OW 44
38612: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38613: LD_VAR 0 14
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 250
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 251
38637: PPUSH
38638: LD_INT 10
38640: PPUSH
38641: LD_INT 0
38643: PPUSH
38644: CALL_OW 50
// result := result ^ un ;
38648: LD_ADDR_VAR 0 7
38652: PUSH
38653: LD_VAR 0 7
38657: PUSH
38658: LD_VAR 0 14
38662: ADD
38663: ST_TO_ADDR
// end ;
38664: GO 38542
38666: POP
38667: POP
// end ; end ;
38668: LD_VAR 0 7
38672: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38673: LD_INT 0
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
// result := false ;
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: LD_INT 0
38698: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38699: LD_VAR 0 1
38703: NOT
38704: PUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 266
38714: PUSH
38715: LD_INT 32
38717: PUSH
38718: LD_INT 33
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: IN
38725: NOT
38726: OR
38727: IFFALSE 38731
// exit ;
38729: GO 39840
// nat := GetNation ( tower ) ;
38731: LD_ADDR_VAR 0 12
38735: PUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 248
38745: ST_TO_ADDR
// side := GetSide ( tower ) ;
38746: LD_ADDR_VAR 0 16
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 255
38760: ST_TO_ADDR
// x := GetX ( tower ) ;
38761: LD_ADDR_VAR 0 10
38765: PUSH
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL_OW 250
38775: ST_TO_ADDR
// y := GetY ( tower ) ;
38776: LD_ADDR_VAR 0 11
38780: PUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 251
38790: ST_TO_ADDR
// if not x or not y then
38791: LD_VAR 0 10
38795: NOT
38796: PUSH
38797: LD_VAR 0 11
38801: NOT
38802: OR
38803: IFFALSE 38807
// exit ;
38805: GO 39840
// weapon := 0 ;
38807: LD_ADDR_VAR 0 18
38811: PUSH
38812: LD_INT 0
38814: ST_TO_ADDR
// fac_list := [ ] ;
38815: LD_ADDR_VAR 0 17
38819: PUSH
38820: EMPTY
38821: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38822: LD_ADDR_VAR 0 6
38826: PUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 274
38836: PPUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_INT 0
38844: PPUSH
38845: CALL 36411 0 3
38849: PPUSH
38850: LD_INT 30
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PPUSH
38860: CALL_OW 72
38864: ST_TO_ADDR
// if not factories then
38865: LD_VAR 0 6
38869: NOT
38870: IFFALSE 38874
// exit ;
38872: GO 39840
// for i in factories do
38874: LD_ADDR_VAR 0 8
38878: PUSH
38879: LD_VAR 0 6
38883: PUSH
38884: FOR_IN
38885: IFFALSE 38910
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38887: LD_ADDR_VAR 0 17
38891: PUSH
38892: LD_VAR 0 17
38896: PUSH
38897: LD_VAR 0 8
38901: PPUSH
38902: CALL_OW 478
38906: UNION
38907: ST_TO_ADDR
38908: GO 38884
38910: POP
38911: POP
// if not fac_list then
38912: LD_VAR 0 17
38916: NOT
38917: IFFALSE 38921
// exit ;
38919: GO 39840
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38921: LD_ADDR_VAR 0 5
38925: PUSH
38926: LD_INT 4
38928: PUSH
38929: LD_INT 5
38931: PUSH
38932: LD_INT 9
38934: PUSH
38935: LD_INT 10
38937: PUSH
38938: LD_INT 6
38940: PUSH
38941: LD_INT 7
38943: PUSH
38944: LD_INT 11
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 27
38958: PUSH
38959: LD_INT 28
38961: PUSH
38962: LD_INT 26
38964: PUSH
38965: LD_INT 30
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 43
38976: PUSH
38977: LD_INT 44
38979: PUSH
38980: LD_INT 46
38982: PUSH
38983: LD_INT 45
38985: PUSH
38986: LD_INT 47
38988: PUSH
38989: LD_INT 49
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: LD_VAR 0 12
39009: ARRAY
39010: ST_TO_ADDR
// list := list isect fac_list ;
39011: LD_ADDR_VAR 0 5
39015: PUSH
39016: LD_VAR 0 5
39020: PUSH
39021: LD_VAR 0 17
39025: ISECT
39026: ST_TO_ADDR
// if not list then
39027: LD_VAR 0 5
39031: NOT
39032: IFFALSE 39036
// exit ;
39034: GO 39840
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39036: LD_VAR 0 12
39040: PUSH
39041: LD_INT 3
39043: EQUAL
39044: PUSH
39045: LD_INT 49
39047: PUSH
39048: LD_VAR 0 5
39052: IN
39053: AND
39054: PUSH
39055: LD_INT 31
39057: PPUSH
39058: LD_VAR 0 16
39062: PPUSH
39063: CALL_OW 321
39067: PUSH
39068: LD_INT 2
39070: EQUAL
39071: AND
39072: IFFALSE 39132
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39074: LD_INT 22
39076: PUSH
39077: LD_VAR 0 16
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 35
39088: PUSH
39089: LD_INT 49
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 91
39098: PUSH
39099: LD_VAR 0 1
39103: PUSH
39104: LD_INT 10
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PPUSH
39117: CALL_OW 69
39121: NOT
39122: IFFALSE 39132
// weapon := ru_time_lapser ;
39124: LD_ADDR_VAR 0 18
39128: PUSH
39129: LD_INT 49
39131: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39132: LD_VAR 0 12
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: IN
39147: PUSH
39148: LD_INT 11
39150: PUSH
39151: LD_VAR 0 5
39155: IN
39156: PUSH
39157: LD_INT 30
39159: PUSH
39160: LD_VAR 0 5
39164: IN
39165: OR
39166: AND
39167: PUSH
39168: LD_INT 6
39170: PPUSH
39171: LD_VAR 0 16
39175: PPUSH
39176: CALL_OW 321
39180: PUSH
39181: LD_INT 2
39183: EQUAL
39184: AND
39185: IFFALSE 39350
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39187: LD_INT 22
39189: PUSH
39190: LD_VAR 0 16
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 35
39204: PUSH
39205: LD_INT 11
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 35
39214: PUSH
39215: LD_INT 30
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 91
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: LD_INT 18
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: PPUSH
39248: CALL_OW 69
39252: NOT
39253: PUSH
39254: LD_INT 22
39256: PUSH
39257: LD_VAR 0 16
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 30
39271: PUSH
39272: LD_INT 32
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 30
39281: PUSH
39282: LD_INT 33
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 91
39296: PUSH
39297: LD_VAR 0 1
39301: PUSH
39302: LD_INT 12
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: PPUSH
39318: CALL_OW 69
39322: PUSH
39323: LD_INT 2
39325: GREATER
39326: AND
39327: IFFALSE 39350
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39329: LD_ADDR_VAR 0 18
39333: PUSH
39334: LD_INT 11
39336: PUSH
39337: LD_INT 30
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_VAR 0 12
39348: ARRAY
39349: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39350: LD_VAR 0 18
39354: NOT
39355: PUSH
39356: LD_INT 40
39358: PPUSH
39359: LD_VAR 0 16
39363: PPUSH
39364: CALL_OW 321
39368: PUSH
39369: LD_INT 2
39371: EQUAL
39372: AND
39373: PUSH
39374: LD_INT 7
39376: PUSH
39377: LD_VAR 0 5
39381: IN
39382: PUSH
39383: LD_INT 28
39385: PUSH
39386: LD_VAR 0 5
39390: IN
39391: OR
39392: PUSH
39393: LD_INT 45
39395: PUSH
39396: LD_VAR 0 5
39400: IN
39401: OR
39402: AND
39403: IFFALSE 39657
// begin hex := GetHexInfo ( x , y ) ;
39405: LD_ADDR_VAR 0 4
39409: PUSH
39410: LD_VAR 0 10
39414: PPUSH
39415: LD_VAR 0 11
39419: PPUSH
39420: CALL_OW 546
39424: ST_TO_ADDR
// if hex [ 1 ] then
39425: LD_VAR 0 4
39429: PUSH
39430: LD_INT 1
39432: ARRAY
39433: IFFALSE 39437
// exit ;
39435: GO 39840
// height := hex [ 2 ] ;
39437: LD_ADDR_VAR 0 15
39441: PUSH
39442: LD_VAR 0 4
39446: PUSH
39447: LD_INT 2
39449: ARRAY
39450: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39451: LD_ADDR_VAR 0 14
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: LD_INT 5
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// for i in tmp do
39474: LD_ADDR_VAR 0 8
39478: PUSH
39479: LD_VAR 0 14
39483: PUSH
39484: FOR_IN
39485: IFFALSE 39655
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39487: LD_ADDR_VAR 0 9
39491: PUSH
39492: LD_VAR 0 10
39496: PPUSH
39497: LD_VAR 0 8
39501: PPUSH
39502: LD_INT 5
39504: PPUSH
39505: CALL_OW 272
39509: PUSH
39510: LD_VAR 0 11
39514: PPUSH
39515: LD_VAR 0 8
39519: PPUSH
39520: LD_INT 5
39522: PPUSH
39523: CALL_OW 273
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39532: LD_VAR 0 9
39536: PUSH
39537: LD_INT 1
39539: ARRAY
39540: PPUSH
39541: LD_VAR 0 9
39545: PUSH
39546: LD_INT 2
39548: ARRAY
39549: PPUSH
39550: CALL_OW 488
39554: IFFALSE 39653
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39556: LD_ADDR_VAR 0 4
39560: PUSH
39561: LD_VAR 0 9
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: PPUSH
39570: LD_VAR 0 9
39574: PUSH
39575: LD_INT 2
39577: ARRAY
39578: PPUSH
39579: CALL_OW 546
39583: ST_TO_ADDR
// if hex [ 1 ] then
39584: LD_VAR 0 4
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: IFFALSE 39596
// continue ;
39594: GO 39484
// h := hex [ 2 ] ;
39596: LD_ADDR_VAR 0 13
39600: PUSH
39601: LD_VAR 0 4
39605: PUSH
39606: LD_INT 2
39608: ARRAY
39609: ST_TO_ADDR
// if h + 7 < height then
39610: LD_VAR 0 13
39614: PUSH
39615: LD_INT 7
39617: PLUS
39618: PUSH
39619: LD_VAR 0 15
39623: LESS
39624: IFFALSE 39653
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39626: LD_ADDR_VAR 0 18
39630: PUSH
39631: LD_INT 7
39633: PUSH
39634: LD_INT 28
39636: PUSH
39637: LD_INT 45
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: PUSH
39645: LD_VAR 0 12
39649: ARRAY
39650: ST_TO_ADDR
// break ;
39651: GO 39655
// end ; end ; end ;
39653: GO 39484
39655: POP
39656: POP
// end ; if not weapon then
39657: LD_VAR 0 18
39661: NOT
39662: IFFALSE 39722
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39664: LD_ADDR_VAR 0 5
39668: PUSH
39669: LD_VAR 0 5
39673: PUSH
39674: LD_INT 11
39676: PUSH
39677: LD_INT 30
39679: PUSH
39680: LD_INT 49
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: DIFF
39688: ST_TO_ADDR
// if not list then
39689: LD_VAR 0 5
39693: NOT
39694: IFFALSE 39698
// exit ;
39696: GO 39840
// weapon := list [ rand ( 1 , list ) ] ;
39698: LD_ADDR_VAR 0 18
39702: PUSH
39703: LD_VAR 0 5
39707: PUSH
39708: LD_INT 1
39710: PPUSH
39711: LD_VAR 0 5
39715: PPUSH
39716: CALL_OW 12
39720: ARRAY
39721: ST_TO_ADDR
// end ; if weapon then
39722: LD_VAR 0 18
39726: IFFALSE 39840
// begin tmp := CostOfWeapon ( weapon ) ;
39728: LD_ADDR_VAR 0 14
39732: PUSH
39733: LD_VAR 0 18
39737: PPUSH
39738: CALL_OW 451
39742: ST_TO_ADDR
// j := GetBase ( tower ) ;
39743: LD_ADDR_VAR 0 9
39747: PUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 274
39757: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39758: LD_VAR 0 9
39762: PPUSH
39763: LD_INT 1
39765: PPUSH
39766: CALL_OW 275
39770: PUSH
39771: LD_VAR 0 14
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: GREATEREQUAL
39780: PUSH
39781: LD_VAR 0 9
39785: PPUSH
39786: LD_INT 2
39788: PPUSH
39789: CALL_OW 275
39793: PUSH
39794: LD_VAR 0 14
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: GREATEREQUAL
39803: AND
39804: PUSH
39805: LD_VAR 0 9
39809: PPUSH
39810: LD_INT 3
39812: PPUSH
39813: CALL_OW 275
39817: PUSH
39818: LD_VAR 0 14
39822: PUSH
39823: LD_INT 3
39825: ARRAY
39826: GREATEREQUAL
39827: AND
39828: IFFALSE 39840
// result := weapon ;
39830: LD_ADDR_VAR 0 3
39834: PUSH
39835: LD_VAR 0 18
39839: ST_TO_ADDR
// end ; end ;
39840: LD_VAR 0 3
39844: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
// result := true ;
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 1
39856: ST_TO_ADDR
// if array1 = array2 then
39857: LD_VAR 0 1
39861: PUSH
39862: LD_VAR 0 2
39866: EQUAL
39867: IFFALSE 39927
// begin for i = 1 to array1 do
39869: LD_ADDR_VAR 0 4
39873: PUSH
39874: DOUBLE
39875: LD_INT 1
39877: DEC
39878: ST_TO_ADDR
39879: LD_VAR 0 1
39883: PUSH
39884: FOR_TO
39885: IFFALSE 39923
// if array1 [ i ] <> array2 [ i ] then
39887: LD_VAR 0 1
39891: PUSH
39892: LD_VAR 0 4
39896: ARRAY
39897: PUSH
39898: LD_VAR 0 2
39902: PUSH
39903: LD_VAR 0 4
39907: ARRAY
39908: NONEQUAL
39909: IFFALSE 39921
// begin result := false ;
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 0
39918: ST_TO_ADDR
// break ;
39919: GO 39923
// end ;
39921: GO 39884
39923: POP
39924: POP
// end else
39925: GO 39935
// result := false ;
39927: LD_ADDR_VAR 0 3
39931: PUSH
39932: LD_INT 0
39934: ST_TO_ADDR
// end ;
39935: LD_VAR 0 3
39939: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39940: LD_INT 0
39942: PPUSH
39943: PPUSH
// if not array1 or not array2 then
39944: LD_VAR 0 1
39948: NOT
39949: PUSH
39950: LD_VAR 0 2
39954: NOT
39955: OR
39956: IFFALSE 39960
// exit ;
39958: GO 40024
// result := true ;
39960: LD_ADDR_VAR 0 3
39964: PUSH
39965: LD_INT 1
39967: ST_TO_ADDR
// for i = 1 to array1 do
39968: LD_ADDR_VAR 0 4
39972: PUSH
39973: DOUBLE
39974: LD_INT 1
39976: DEC
39977: ST_TO_ADDR
39978: LD_VAR 0 1
39982: PUSH
39983: FOR_TO
39984: IFFALSE 40022
// if array1 [ i ] <> array2 [ i ] then
39986: LD_VAR 0 1
39990: PUSH
39991: LD_VAR 0 4
39995: ARRAY
39996: PUSH
39997: LD_VAR 0 2
40001: PUSH
40002: LD_VAR 0 4
40006: ARRAY
40007: NONEQUAL
40008: IFFALSE 40020
// begin result := false ;
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_INT 0
40017: ST_TO_ADDR
// break ;
40018: GO 40022
// end ;
40020: GO 39983
40022: POP
40023: POP
// end ;
40024: LD_VAR 0 3
40028: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40029: LD_INT 0
40031: PPUSH
40032: PPUSH
40033: PPUSH
// pom := GetBase ( fac ) ;
40034: LD_ADDR_VAR 0 5
40038: PUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 274
40048: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40049: LD_ADDR_VAR 0 4
40053: PUSH
40054: LD_VAR 0 2
40058: PUSH
40059: LD_INT 1
40061: ARRAY
40062: PPUSH
40063: LD_VAR 0 2
40067: PUSH
40068: LD_INT 2
40070: ARRAY
40071: PPUSH
40072: LD_VAR 0 2
40076: PUSH
40077: LD_INT 3
40079: ARRAY
40080: PPUSH
40081: LD_VAR 0 2
40085: PUSH
40086: LD_INT 4
40088: ARRAY
40089: PPUSH
40090: CALL_OW 449
40094: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_VAR 0 5
40104: PPUSH
40105: LD_INT 1
40107: PPUSH
40108: CALL_OW 275
40112: PUSH
40113: LD_VAR 0 4
40117: PUSH
40118: LD_INT 1
40120: ARRAY
40121: GREATEREQUAL
40122: PUSH
40123: LD_VAR 0 5
40127: PPUSH
40128: LD_INT 2
40130: PPUSH
40131: CALL_OW 275
40135: PUSH
40136: LD_VAR 0 4
40140: PUSH
40141: LD_INT 2
40143: ARRAY
40144: GREATEREQUAL
40145: AND
40146: PUSH
40147: LD_VAR 0 5
40151: PPUSH
40152: LD_INT 3
40154: PPUSH
40155: CALL_OW 275
40159: PUSH
40160: LD_VAR 0 4
40164: PUSH
40165: LD_INT 3
40167: ARRAY
40168: GREATEREQUAL
40169: AND
40170: ST_TO_ADDR
// end ;
40171: LD_VAR 0 3
40175: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40176: LD_INT 0
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
// pom := GetBase ( building ) ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 274
40196: ST_TO_ADDR
// if not pom then
40197: LD_VAR 0 3
40201: NOT
40202: IFFALSE 40206
// exit ;
40204: GO 40376
// btype := GetBType ( building ) ;
40206: LD_ADDR_VAR 0 5
40210: PUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 266
40220: ST_TO_ADDR
// if btype = b_armoury then
40221: LD_VAR 0 5
40225: PUSH
40226: LD_INT 4
40228: EQUAL
40229: IFFALSE 40239
// btype := b_barracks ;
40231: LD_ADDR_VAR 0 5
40235: PUSH
40236: LD_INT 5
40238: ST_TO_ADDR
// if btype = b_depot then
40239: LD_VAR 0 5
40243: PUSH
40244: LD_INT 0
40246: EQUAL
40247: IFFALSE 40257
// btype := b_warehouse ;
40249: LD_ADDR_VAR 0 5
40253: PUSH
40254: LD_INT 1
40256: ST_TO_ADDR
// if btype = b_workshop then
40257: LD_VAR 0 5
40261: PUSH
40262: LD_INT 2
40264: EQUAL
40265: IFFALSE 40275
// btype := b_factory ;
40267: LD_ADDR_VAR 0 5
40271: PUSH
40272: LD_INT 3
40274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40275: LD_ADDR_VAR 0 4
40279: PUSH
40280: LD_VAR 0 5
40284: PPUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 248
40294: PPUSH
40295: CALL_OW 450
40299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40300: LD_ADDR_VAR 0 2
40304: PUSH
40305: LD_VAR 0 3
40309: PPUSH
40310: LD_INT 1
40312: PPUSH
40313: CALL_OW 275
40317: PUSH
40318: LD_VAR 0 4
40322: PUSH
40323: LD_INT 1
40325: ARRAY
40326: GREATEREQUAL
40327: PUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_INT 2
40335: PPUSH
40336: CALL_OW 275
40340: PUSH
40341: LD_VAR 0 4
40345: PUSH
40346: LD_INT 2
40348: ARRAY
40349: GREATEREQUAL
40350: AND
40351: PUSH
40352: LD_VAR 0 3
40356: PPUSH
40357: LD_INT 3
40359: PPUSH
40360: CALL_OW 275
40364: PUSH
40365: LD_VAR 0 4
40369: PUSH
40370: LD_INT 3
40372: ARRAY
40373: GREATEREQUAL
40374: AND
40375: ST_TO_ADDR
// end ;
40376: LD_VAR 0 2
40380: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40381: LD_INT 0
40383: PPUSH
40384: PPUSH
40385: PPUSH
// pom := GetBase ( building ) ;
40386: LD_ADDR_VAR 0 4
40390: PUSH
40391: LD_VAR 0 1
40395: PPUSH
40396: CALL_OW 274
40400: ST_TO_ADDR
// if not pom then
40401: LD_VAR 0 4
40405: NOT
40406: IFFALSE 40410
// exit ;
40408: GO 40511
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40410: LD_ADDR_VAR 0 5
40414: PUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 248
40429: PPUSH
40430: CALL_OW 450
40434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_VAR 0 4
40444: PPUSH
40445: LD_INT 1
40447: PPUSH
40448: CALL_OW 275
40452: PUSH
40453: LD_VAR 0 5
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: GREATEREQUAL
40462: PUSH
40463: LD_VAR 0 4
40467: PPUSH
40468: LD_INT 2
40470: PPUSH
40471: CALL_OW 275
40475: PUSH
40476: LD_VAR 0 5
40480: PUSH
40481: LD_INT 2
40483: ARRAY
40484: GREATEREQUAL
40485: AND
40486: PUSH
40487: LD_VAR 0 4
40491: PPUSH
40492: LD_INT 3
40494: PPUSH
40495: CALL_OW 275
40499: PUSH
40500: LD_VAR 0 5
40504: PUSH
40505: LD_INT 3
40507: ARRAY
40508: GREATEREQUAL
40509: AND
40510: ST_TO_ADDR
// end ;
40511: LD_VAR 0 3
40515: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40516: LD_INT 0
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
// result := false ;
40529: LD_ADDR_VAR 0 8
40533: PUSH
40534: LD_INT 0
40536: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40537: LD_VAR 0 5
40541: NOT
40542: PUSH
40543: LD_VAR 0 1
40547: NOT
40548: OR
40549: PUSH
40550: LD_VAR 0 2
40554: NOT
40555: OR
40556: PUSH
40557: LD_VAR 0 3
40561: NOT
40562: OR
40563: IFFALSE 40567
// exit ;
40565: GO 41381
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40567: LD_ADDR_VAR 0 14
40571: PUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_VAR 0 3
40586: PPUSH
40587: LD_VAR 0 4
40591: PPUSH
40592: LD_VAR 0 5
40596: PUSH
40597: LD_INT 1
40599: ARRAY
40600: PPUSH
40601: CALL_OW 248
40605: PPUSH
40606: LD_INT 0
40608: PPUSH
40609: CALL 42618 0 6
40613: ST_TO_ADDR
// if not hexes then
40614: LD_VAR 0 14
40618: NOT
40619: IFFALSE 40623
// exit ;
40621: GO 41381
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40623: LD_ADDR_VAR 0 17
40627: PUSH
40628: LD_VAR 0 5
40632: PPUSH
40633: LD_INT 22
40635: PUSH
40636: LD_VAR 0 13
40640: PPUSH
40641: CALL_OW 255
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 30
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 30
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PPUSH
40682: CALL_OW 72
40686: ST_TO_ADDR
// for i = 1 to hexes do
40687: LD_ADDR_VAR 0 9
40691: PUSH
40692: DOUBLE
40693: LD_INT 1
40695: DEC
40696: ST_TO_ADDR
40697: LD_VAR 0 14
40701: PUSH
40702: FOR_TO
40703: IFFALSE 41379
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40705: LD_ADDR_VAR 0 13
40709: PUSH
40710: LD_VAR 0 14
40714: PUSH
40715: LD_VAR 0 9
40719: ARRAY
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: PPUSH
40725: LD_VAR 0 14
40729: PUSH
40730: LD_VAR 0 9
40734: ARRAY
40735: PUSH
40736: LD_INT 2
40738: ARRAY
40739: PPUSH
40740: CALL_OW 428
40744: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40745: LD_VAR 0 14
40749: PUSH
40750: LD_VAR 0 9
40754: ARRAY
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: PPUSH
40760: LD_VAR 0 14
40764: PUSH
40765: LD_VAR 0 9
40769: ARRAY
40770: PUSH
40771: LD_INT 2
40773: ARRAY
40774: PPUSH
40775: CALL_OW 351
40779: PUSH
40780: LD_VAR 0 14
40784: PUSH
40785: LD_VAR 0 9
40789: ARRAY
40790: PUSH
40791: LD_INT 1
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 14
40799: PUSH
40800: LD_VAR 0 9
40804: ARRAY
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: PPUSH
40810: CALL_OW 488
40814: NOT
40815: OR
40816: PUSH
40817: LD_VAR 0 13
40821: PPUSH
40822: CALL_OW 247
40826: PUSH
40827: LD_INT 3
40829: EQUAL
40830: OR
40831: IFFALSE 40837
// exit ;
40833: POP
40834: POP
40835: GO 41381
// if not tmp then
40837: LD_VAR 0 13
40841: NOT
40842: IFFALSE 40846
// continue ;
40844: GO 40702
// result := true ;
40846: LD_ADDR_VAR 0 8
40850: PUSH
40851: LD_INT 1
40853: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40854: LD_VAR 0 6
40858: PUSH
40859: LD_VAR 0 13
40863: PPUSH
40864: CALL_OW 247
40868: PUSH
40869: LD_INT 2
40871: EQUAL
40872: AND
40873: PUSH
40874: LD_VAR 0 13
40878: PPUSH
40879: CALL_OW 263
40883: PUSH
40884: LD_INT 1
40886: EQUAL
40887: AND
40888: IFFALSE 41052
// begin if IsDrivenBy ( tmp ) then
40890: LD_VAR 0 13
40894: PPUSH
40895: CALL_OW 311
40899: IFFALSE 40903
// continue ;
40901: GO 40702
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40903: LD_VAR 0 6
40907: PPUSH
40908: LD_INT 3
40910: PUSH
40911: LD_INT 60
40913: PUSH
40914: EMPTY
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 55
40926: PUSH
40927: EMPTY
40928: LIST
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PPUSH
40938: CALL_OW 72
40942: IFFALSE 41050
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40944: LD_ADDR_VAR 0 18
40948: PUSH
40949: LD_VAR 0 6
40953: PPUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 60
40959: PUSH
40960: EMPTY
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: LD_INT 55
40972: PUSH
40973: EMPTY
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PPUSH
40984: CALL_OW 72
40988: PUSH
40989: LD_INT 1
40991: ARRAY
40992: ST_TO_ADDR
// if IsInUnit ( driver ) then
40993: LD_VAR 0 18
40997: PPUSH
40998: CALL_OW 310
41002: IFFALSE 41013
// ComExit ( driver ) ;
41004: LD_VAR 0 18
41008: PPUSH
41009: CALL 65802 0 1
// AddComEnterUnit ( driver , tmp ) ;
41013: LD_VAR 0 18
41017: PPUSH
41018: LD_VAR 0 13
41022: PPUSH
41023: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41027: LD_VAR 0 18
41031: PPUSH
41032: LD_VAR 0 7
41036: PPUSH
41037: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41041: LD_VAR 0 18
41045: PPUSH
41046: CALL_OW 181
// end ; continue ;
41050: GO 40702
// end ; if not cleaners or not tmp in cleaners then
41052: LD_VAR 0 6
41056: NOT
41057: PUSH
41058: LD_VAR 0 13
41062: PUSH
41063: LD_VAR 0 6
41067: IN
41068: NOT
41069: OR
41070: IFFALSE 41377
// begin if dep then
41072: LD_VAR 0 17
41076: IFFALSE 41212
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41078: LD_ADDR_VAR 0 16
41082: PUSH
41083: LD_VAR 0 17
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PPUSH
41092: CALL_OW 250
41096: PPUSH
41097: LD_VAR 0 17
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: CALL_OW 254
41110: PPUSH
41111: LD_INT 5
41113: PPUSH
41114: CALL_OW 272
41118: PUSH
41119: LD_VAR 0 17
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: CALL_OW 251
41132: PPUSH
41133: LD_VAR 0 17
41137: PUSH
41138: LD_INT 1
41140: ARRAY
41141: PPUSH
41142: CALL_OW 254
41146: PPUSH
41147: LD_INT 5
41149: PPUSH
41150: CALL_OW 273
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41159: LD_VAR 0 16
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PPUSH
41168: LD_VAR 0 16
41172: PUSH
41173: LD_INT 2
41175: ARRAY
41176: PPUSH
41177: CALL_OW 488
41181: IFFALSE 41212
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41183: LD_VAR 0 13
41187: PPUSH
41188: LD_VAR 0 16
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PPUSH
41197: LD_VAR 0 16
41201: PUSH
41202: LD_INT 2
41204: ARRAY
41205: PPUSH
41206: CALL_OW 111
// continue ;
41210: GO 40702
// end ; end ; r := GetDir ( tmp ) ;
41212: LD_ADDR_VAR 0 15
41216: PUSH
41217: LD_VAR 0 13
41221: PPUSH
41222: CALL_OW 254
41226: ST_TO_ADDR
// if r = 5 then
41227: LD_VAR 0 15
41231: PUSH
41232: LD_INT 5
41234: EQUAL
41235: IFFALSE 41245
// r := 0 ;
41237: LD_ADDR_VAR 0 15
41241: PUSH
41242: LD_INT 0
41244: ST_TO_ADDR
// for j = r to 5 do
41245: LD_ADDR_VAR 0 10
41249: PUSH
41250: DOUBLE
41251: LD_VAR 0 15
41255: DEC
41256: ST_TO_ADDR
41257: LD_INT 5
41259: PUSH
41260: FOR_TO
41261: IFFALSE 41375
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41263: LD_ADDR_VAR 0 11
41267: PUSH
41268: LD_VAR 0 13
41272: PPUSH
41273: CALL_OW 250
41277: PPUSH
41278: LD_VAR 0 10
41282: PPUSH
41283: LD_INT 2
41285: PPUSH
41286: CALL_OW 272
41290: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41291: LD_ADDR_VAR 0 12
41295: PUSH
41296: LD_VAR 0 13
41300: PPUSH
41301: CALL_OW 251
41305: PPUSH
41306: LD_VAR 0 10
41310: PPUSH
41311: LD_INT 2
41313: PPUSH
41314: CALL_OW 273
41318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41319: LD_VAR 0 11
41323: PPUSH
41324: LD_VAR 0 12
41328: PPUSH
41329: CALL_OW 488
41333: PUSH
41334: LD_VAR 0 11
41338: PPUSH
41339: LD_VAR 0 12
41343: PPUSH
41344: CALL_OW 428
41348: NOT
41349: AND
41350: IFFALSE 41373
// begin ComMoveXY ( tmp , _x , _y ) ;
41352: LD_VAR 0 13
41356: PPUSH
41357: LD_VAR 0 11
41361: PPUSH
41362: LD_VAR 0 12
41366: PPUSH
41367: CALL_OW 111
// break ;
41371: GO 41375
// end ; end ;
41373: GO 41260
41375: POP
41376: POP
// end ; end ;
41377: GO 40702
41379: POP
41380: POP
// end ;
41381: LD_VAR 0 8
41385: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41386: LD_INT 0
41388: PPUSH
// result := true ;
41389: LD_ADDR_VAR 0 3
41393: PUSH
41394: LD_INT 1
41396: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41397: LD_VAR 0 2
41401: PUSH
41402: LD_INT 24
41404: DOUBLE
41405: EQUAL
41406: IFTRUE 41416
41408: LD_INT 33
41410: DOUBLE
41411: EQUAL
41412: IFTRUE 41416
41414: GO 41441
41416: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_INT 32
41424: PPUSH
41425: LD_VAR 0 1
41429: PPUSH
41430: CALL_OW 321
41434: PUSH
41435: LD_INT 2
41437: EQUAL
41438: ST_TO_ADDR
41439: GO 41761
41441: LD_INT 20
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41449
41447: GO 41474
41449: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: LD_INT 6
41457: PPUSH
41458: LD_VAR 0 1
41462: PPUSH
41463: CALL_OW 321
41467: PUSH
41468: LD_INT 2
41470: EQUAL
41471: ST_TO_ADDR
41472: GO 41761
41474: LD_INT 22
41476: DOUBLE
41477: EQUAL
41478: IFTRUE 41488
41480: LD_INT 36
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41488
41486: GO 41513
41488: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_INT 15
41496: PPUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 321
41506: PUSH
41507: LD_INT 2
41509: EQUAL
41510: ST_TO_ADDR
41511: GO 41761
41513: LD_INT 30
41515: DOUBLE
41516: EQUAL
41517: IFTRUE 41521
41519: GO 41546
41521: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41522: LD_ADDR_VAR 0 3
41526: PUSH
41527: LD_INT 20
41529: PPUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 321
41539: PUSH
41540: LD_INT 2
41542: EQUAL
41543: ST_TO_ADDR
41544: GO 41761
41546: LD_INT 28
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41560
41552: LD_INT 21
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41585
41560: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41561: LD_ADDR_VAR 0 3
41565: PUSH
41566: LD_INT 21
41568: PPUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 321
41578: PUSH
41579: LD_INT 2
41581: EQUAL
41582: ST_TO_ADDR
41583: GO 41761
41585: LD_INT 16
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 41620
41593: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_EXP 31
41603: PPUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 321
41613: PUSH
41614: LD_INT 2
41616: EQUAL
41617: ST_TO_ADDR
41618: GO 41761
41620: LD_INT 19
41622: DOUBLE
41623: EQUAL
41624: IFTRUE 41634
41626: LD_INT 23
41628: DOUBLE
41629: EQUAL
41630: IFTRUE 41634
41632: GO 41661
41634: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_EXP 30
41644: PPUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 321
41654: PUSH
41655: LD_INT 2
41657: EQUAL
41658: ST_TO_ADDR
41659: GO 41761
41661: LD_INT 17
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41694
41669: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 39
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL_OW 321
41687: PUSH
41688: LD_INT 2
41690: EQUAL
41691: ST_TO_ADDR
41692: GO 41761
41694: LD_INT 18
41696: DOUBLE
41697: EQUAL
41698: IFTRUE 41702
41700: GO 41727
41702: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41703: LD_ADDR_VAR 0 3
41707: PUSH
41708: LD_INT 40
41710: PPUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 321
41720: PUSH
41721: LD_INT 2
41723: EQUAL
41724: ST_TO_ADDR
41725: GO 41761
41727: LD_INT 27
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41735
41733: GO 41760
41735: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 35
41743: PPUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 321
41753: PUSH
41754: LD_INT 2
41756: EQUAL
41757: ST_TO_ADDR
41758: GO 41761
41760: POP
// end ;
41761: LD_VAR 0 3
41765: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41766: LD_INT 0
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
// result := false ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_INT 0
41786: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41787: LD_VAR 0 1
41791: NOT
41792: PUSH
41793: LD_VAR 0 1
41797: PPUSH
41798: CALL_OW 266
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: IN
41813: NOT
41814: OR
41815: PUSH
41816: LD_VAR 0 2
41820: NOT
41821: OR
41822: PUSH
41823: LD_VAR 0 5
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 4
41842: PUSH
41843: LD_INT 5
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: IN
41854: NOT
41855: OR
41856: PUSH
41857: LD_VAR 0 3
41861: PPUSH
41862: LD_VAR 0 4
41866: PPUSH
41867: CALL_OW 488
41871: NOT
41872: OR
41873: IFFALSE 41877
// exit ;
41875: GO 42613
// side := GetSide ( depot ) ;
41877: LD_ADDR_VAR 0 9
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 255
41891: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41892: LD_VAR 0 9
41896: PPUSH
41897: LD_VAR 0 2
41901: PPUSH
41902: CALL 41386 0 2
41906: NOT
41907: IFFALSE 41911
// exit ;
41909: GO 42613
// pom := GetBase ( depot ) ;
41911: LD_ADDR_VAR 0 10
41915: PUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 274
41925: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41926: LD_ADDR_VAR 0 11
41930: PUSH
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 248
41945: PPUSH
41946: CALL_OW 450
41950: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41951: LD_VAR 0 10
41955: PPUSH
41956: LD_INT 1
41958: PPUSH
41959: CALL_OW 275
41963: PUSH
41964: LD_VAR 0 11
41968: PUSH
41969: LD_INT 1
41971: ARRAY
41972: GREATEREQUAL
41973: PUSH
41974: LD_VAR 0 10
41978: PPUSH
41979: LD_INT 2
41981: PPUSH
41982: CALL_OW 275
41986: PUSH
41987: LD_VAR 0 11
41991: PUSH
41992: LD_INT 2
41994: ARRAY
41995: GREATEREQUAL
41996: AND
41997: PUSH
41998: LD_VAR 0 10
42002: PPUSH
42003: LD_INT 3
42005: PPUSH
42006: CALL_OW 275
42010: PUSH
42011: LD_VAR 0 11
42015: PUSH
42016: LD_INT 3
42018: ARRAY
42019: GREATEREQUAL
42020: AND
42021: NOT
42022: IFFALSE 42026
// exit ;
42024: GO 42613
// if GetBType ( depot ) = b_depot then
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 266
42035: PUSH
42036: LD_INT 0
42038: EQUAL
42039: IFFALSE 42051
// dist := 28 else
42041: LD_ADDR_VAR 0 14
42045: PUSH
42046: LD_INT 28
42048: ST_TO_ADDR
42049: GO 42059
// dist := 36 ;
42051: LD_ADDR_VAR 0 14
42055: PUSH
42056: LD_INT 36
42058: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42059: LD_VAR 0 1
42063: PPUSH
42064: LD_VAR 0 3
42068: PPUSH
42069: LD_VAR 0 4
42073: PPUSH
42074: CALL_OW 297
42078: PUSH
42079: LD_VAR 0 14
42083: GREATER
42084: IFFALSE 42088
// exit ;
42086: GO 42613
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42088: LD_ADDR_VAR 0 12
42092: PUSH
42093: LD_VAR 0 2
42097: PPUSH
42098: LD_VAR 0 3
42102: PPUSH
42103: LD_VAR 0 4
42107: PPUSH
42108: LD_VAR 0 5
42112: PPUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 248
42122: PPUSH
42123: LD_INT 0
42125: PPUSH
42126: CALL 42618 0 6
42130: ST_TO_ADDR
// if not hexes then
42131: LD_VAR 0 12
42135: NOT
42136: IFFALSE 42140
// exit ;
42138: GO 42613
// hex := GetHexInfo ( x , y ) ;
42140: LD_ADDR_VAR 0 15
42144: PUSH
42145: LD_VAR 0 3
42149: PPUSH
42150: LD_VAR 0 4
42154: PPUSH
42155: CALL_OW 546
42159: ST_TO_ADDR
// if hex [ 1 ] then
42160: LD_VAR 0 15
42164: PUSH
42165: LD_INT 1
42167: ARRAY
42168: IFFALSE 42172
// exit ;
42170: GO 42613
// height := hex [ 2 ] ;
42172: LD_ADDR_VAR 0 13
42176: PUSH
42177: LD_VAR 0 15
42181: PUSH
42182: LD_INT 2
42184: ARRAY
42185: ST_TO_ADDR
// for i = 1 to hexes do
42186: LD_ADDR_VAR 0 7
42190: PUSH
42191: DOUBLE
42192: LD_INT 1
42194: DEC
42195: ST_TO_ADDR
42196: LD_VAR 0 12
42200: PUSH
42201: FOR_TO
42202: IFFALSE 42532
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42204: LD_VAR 0 12
42208: PUSH
42209: LD_VAR 0 7
42213: ARRAY
42214: PUSH
42215: LD_INT 1
42217: ARRAY
42218: PPUSH
42219: LD_VAR 0 12
42223: PUSH
42224: LD_VAR 0 7
42228: ARRAY
42229: PUSH
42230: LD_INT 2
42232: ARRAY
42233: PPUSH
42234: CALL_OW 488
42238: NOT
42239: PUSH
42240: LD_VAR 0 12
42244: PUSH
42245: LD_VAR 0 7
42249: ARRAY
42250: PUSH
42251: LD_INT 1
42253: ARRAY
42254: PPUSH
42255: LD_VAR 0 12
42259: PUSH
42260: LD_VAR 0 7
42264: ARRAY
42265: PUSH
42266: LD_INT 2
42268: ARRAY
42269: PPUSH
42270: CALL_OW 428
42274: PUSH
42275: LD_INT 0
42277: GREATER
42278: OR
42279: PUSH
42280: LD_VAR 0 12
42284: PUSH
42285: LD_VAR 0 7
42289: ARRAY
42290: PUSH
42291: LD_INT 1
42293: ARRAY
42294: PPUSH
42295: LD_VAR 0 12
42299: PUSH
42300: LD_VAR 0 7
42304: ARRAY
42305: PUSH
42306: LD_INT 2
42308: ARRAY
42309: PPUSH
42310: CALL_OW 351
42314: OR
42315: IFFALSE 42321
// exit ;
42317: POP
42318: POP
42319: GO 42613
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42321: LD_ADDR_VAR 0 8
42325: PUSH
42326: LD_VAR 0 12
42330: PUSH
42331: LD_VAR 0 7
42335: ARRAY
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: PPUSH
42341: LD_VAR 0 12
42345: PUSH
42346: LD_VAR 0 7
42350: ARRAY
42351: PUSH
42352: LD_INT 2
42354: ARRAY
42355: PPUSH
42356: CALL_OW 546
42360: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42361: LD_VAR 0 8
42365: PUSH
42366: LD_INT 1
42368: ARRAY
42369: PUSH
42370: LD_VAR 0 8
42374: PUSH
42375: LD_INT 2
42377: ARRAY
42378: PUSH
42379: LD_VAR 0 13
42383: PUSH
42384: LD_INT 2
42386: PLUS
42387: GREATER
42388: OR
42389: PUSH
42390: LD_VAR 0 8
42394: PUSH
42395: LD_INT 2
42397: ARRAY
42398: PUSH
42399: LD_VAR 0 13
42403: PUSH
42404: LD_INT 2
42406: MINUS
42407: LESS
42408: OR
42409: PUSH
42410: LD_VAR 0 8
42414: PUSH
42415: LD_INT 3
42417: ARRAY
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 8
42424: PUSH
42425: LD_INT 9
42427: PUSH
42428: LD_INT 10
42430: PUSH
42431: LD_INT 11
42433: PUSH
42434: LD_INT 12
42436: PUSH
42437: LD_INT 13
42439: PUSH
42440: LD_INT 16
42442: PUSH
42443: LD_INT 17
42445: PUSH
42446: LD_INT 18
42448: PUSH
42449: LD_INT 19
42451: PUSH
42452: LD_INT 20
42454: PUSH
42455: LD_INT 21
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: IN
42473: NOT
42474: OR
42475: PUSH
42476: LD_VAR 0 8
42480: PUSH
42481: LD_INT 5
42483: ARRAY
42484: NOT
42485: OR
42486: PUSH
42487: LD_VAR 0 8
42491: PUSH
42492: LD_INT 6
42494: ARRAY
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 7
42504: PUSH
42505: LD_INT 9
42507: PUSH
42508: LD_INT 10
42510: PUSH
42511: LD_INT 11
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: IN
42522: NOT
42523: OR
42524: IFFALSE 42530
// exit ;
42526: POP
42527: POP
42528: GO 42613
// end ;
42530: GO 42201
42532: POP
42533: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42534: LD_VAR 0 9
42538: PPUSH
42539: LD_VAR 0 3
42543: PPUSH
42544: LD_VAR 0 4
42548: PPUSH
42549: LD_INT 20
42551: PPUSH
42552: CALL 34559 0 4
42556: PUSH
42557: LD_INT 4
42559: ARRAY
42560: IFFALSE 42564
// exit ;
42562: GO 42613
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42564: LD_VAR 0 2
42568: PUSH
42569: LD_INT 29
42571: PUSH
42572: LD_INT 30
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: IN
42579: PUSH
42580: LD_VAR 0 3
42584: PPUSH
42585: LD_VAR 0 4
42589: PPUSH
42590: LD_VAR 0 9
42594: PPUSH
42595: CALL_OW 440
42599: NOT
42600: AND
42601: IFFALSE 42605
// exit ;
42603: GO 42613
// result := true ;
42605: LD_ADDR_VAR 0 6
42609: PUSH
42610: LD_INT 1
42612: ST_TO_ADDR
// end ;
42613: LD_VAR 0 6
42617: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42618: LD_INT 0
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
// result = [ ] ;
42678: LD_ADDR_VAR 0 7
42682: PUSH
42683: EMPTY
42684: ST_TO_ADDR
// temp_list = [ ] ;
42685: LD_ADDR_VAR 0 9
42689: PUSH
42690: EMPTY
42691: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42692: LD_VAR 0 4
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 4
42711: PUSH
42712: LD_INT 5
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: IN
42723: NOT
42724: PUSH
42725: LD_VAR 0 1
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: IN
42740: PUSH
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: IN
42760: NOT
42761: AND
42762: OR
42763: IFFALSE 42767
// exit ;
42765: GO 61158
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42767: LD_VAR 0 1
42771: PUSH
42772: LD_INT 6
42774: PUSH
42775: LD_INT 7
42777: PUSH
42778: LD_INT 8
42780: PUSH
42781: LD_INT 13
42783: PUSH
42784: LD_INT 12
42786: PUSH
42787: LD_INT 15
42789: PUSH
42790: LD_INT 11
42792: PUSH
42793: LD_INT 14
42795: PUSH
42796: LD_INT 10
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: IN
42810: IFFALSE 42820
// btype = b_lab ;
42812: LD_ADDR_VAR 0 1
42816: PUSH
42817: LD_INT 6
42819: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42820: LD_VAR 0 6
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: IN
42839: NOT
42840: PUSH
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 6
42860: PUSH
42861: LD_INT 36
42863: PUSH
42864: LD_INT 4
42866: PUSH
42867: LD_INT 5
42869: PUSH
42870: LD_INT 31
42872: PUSH
42873: LD_INT 32
42875: PUSH
42876: LD_INT 33
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: IN
42892: NOT
42893: PUSH
42894: LD_VAR 0 6
42898: PUSH
42899: LD_INT 1
42901: EQUAL
42902: AND
42903: OR
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: IN
42920: NOT
42921: PUSH
42922: LD_VAR 0 6
42926: PUSH
42927: LD_INT 2
42929: EQUAL
42930: AND
42931: OR
42932: IFFALSE 42942
// mode = 0 ;
42934: LD_ADDR_VAR 0 6
42938: PUSH
42939: LD_INT 0
42941: ST_TO_ADDR
// case mode of 0 :
42942: LD_VAR 0 6
42946: PUSH
42947: LD_INT 0
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 54408
42955: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42956: LD_ADDR_VAR 0 11
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43149: LD_ADDR_VAR 0 12
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43345: LD_ADDR_VAR 0 13
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43544: LD_ADDR_VAR 0 14
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 3
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43740: LD_ADDR_VAR 0 15
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43933: LD_ADDR_VAR 0 16
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44126: LD_ADDR_VAR 0 17
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44356: LD_ADDR_VAR 0 18
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44586: LD_ADDR_VAR 0 19
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44816: LD_ADDR_VAR 0 20
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45046: LD_ADDR_VAR 0 21
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45276: LD_ADDR_VAR 0 22
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45506: LD_ADDR_VAR 0 23
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 3
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45786: LD_ADDR_VAR 0 24
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 3
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46062: LD_ADDR_VAR 0 25
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46336: LD_ADDR_VAR 0 26
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46612: LD_ADDR_VAR 0 27
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46892: LD_ADDR_VAR 0 28
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47174: LD_ADDR_VAR 0 29
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 3
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47453: LD_ADDR_VAR 0 30
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47731: LD_ADDR_VAR 0 31
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48009: LD_ADDR_VAR 0 32
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48287: LD_ADDR_VAR 0 33
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48566: LD_ADDR_VAR 0 34
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 3
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48846: LD_ADDR_VAR 0 35
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48958: LD_ADDR_VAR 0 36
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49070: LD_ADDR_VAR 0 37
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49182: LD_ADDR_VAR 0 38
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49294: LD_ADDR_VAR 0 39
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49406: LD_ADDR_VAR 0 40
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49518: LD_ADDR_VAR 0 41
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49868: LD_ADDR_VAR 0 42
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 3
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50218: LD_ADDR_VAR 0 43
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50566: LD_ADDR_VAR 0 44
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: LD_INT 3
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50916: LD_ADDR_VAR 0 45
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 3
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51266: LD_ADDR_VAR 0 46
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51614: LD_ADDR_VAR 0 47
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51765: LD_ADDR_VAR 0 48
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51912: LD_ADDR_VAR 0 49
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52056: LD_ADDR_VAR 0 50
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52200: LD_ADDR_VAR 0 51
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52347: LD_ADDR_VAR 0 52
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52498: LD_ADDR_VAR 0 53
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52728: LD_ADDR_VAR 0 54
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52958: LD_ADDR_VAR 0 55
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53188: LD_ADDR_VAR 0 56
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53418: LD_ADDR_VAR 0 57
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53648: LD_ADDR_VAR 0 58
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53878: LD_ADDR_VAR 0 59
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53966: LD_ADDR_VAR 0 60
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54054: LD_ADDR_VAR 0 61
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54142: LD_ADDR_VAR 0 62
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54230: LD_ADDR_VAR 0 63
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54318: LD_ADDR_VAR 0 64
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// end ; 1 :
54406: GO 60303
54408: LD_INT 1
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54416
54414: GO 57039
54416: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54417: LD_ADDR_VAR 0 11
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54461: LD_ADDR_VAR 0 12
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54502: LD_ADDR_VAR 0 13
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54542: LD_ADDR_VAR 0 14
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54583: LD_ADDR_VAR 0 15
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54627: LD_ADDR_VAR 0 16
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54673: LD_ADDR_VAR 0 17
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54717: LD_ADDR_VAR 0 18
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54758: LD_ADDR_VAR 0 19
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54798: LD_ADDR_VAR 0 20
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54839: LD_ADDR_VAR 0 21
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54883: LD_ADDR_VAR 0 22
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54929: LD_ADDR_VAR 0 23
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 4
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54973: LD_ADDR_VAR 0 24
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 4
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55014: LD_ADDR_VAR 0 25
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: LD_INT 4
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55054: LD_ADDR_VAR 0 26
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55095: LD_ADDR_VAR 0 27
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 4
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55139: LD_ADDR_VAR 0 28
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55185: LD_ADDR_VAR 0 29
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 4
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 5
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 4
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 6
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 6
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 5
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55340: LD_ADDR_VAR 0 30
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 5
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 5
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 6
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 6
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55483: LD_ADDR_VAR 0 31
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 5
55550: PUSH
55551: LD_INT 4
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 5
55560: PUSH
55561: LD_INT 5
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 4
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: LD_INT 5
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 6
55590: PUSH
55591: LD_INT 6
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 5
55600: PUSH
55601: LD_INT 6
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55622: LD_ADDR_VAR 0 32
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 4
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 6
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 6
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 5
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55765: LD_ADDR_VAR 0 33
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: NEG
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 4
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: NEG
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 5
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 5
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 6
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 6
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55920: LD_ADDR_VAR 0 34
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: LD_INT 4
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: LD_INT 4
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 5
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 5
56011: NEG
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 5
56023: NEG
56024: PUSH
56025: LD_INT 5
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 5
56035: NEG
56036: PUSH
56037: LD_INT 6
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 6
56047: NEG
56048: PUSH
56049: LD_INT 5
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 6
56059: NEG
56060: PUSH
56061: LD_INT 6
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56083: LD_ADDR_VAR 0 41
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56127: LD_ADDR_VAR 0 42
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56168: LD_ADDR_VAR 0 43
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56208: LD_ADDR_VAR 0 44
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56249: LD_ADDR_VAR 0 45
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56293: LD_ADDR_VAR 0 46
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 3
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56339: LD_ADDR_VAR 0 47
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56372: LD_ADDR_VAR 0 48
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56403: LD_ADDR_VAR 0 49
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56432: LD_ADDR_VAR 0 50
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56461: LD_ADDR_VAR 0 51
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56492: LD_ADDR_VAR 0 52
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56525: LD_ADDR_VAR 0 53
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56569: LD_ADDR_VAR 0 54
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56610: LD_ADDR_VAR 0 55
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56650: LD_ADDR_VAR 0 56
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56691: LD_ADDR_VAR 0 57
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56735: LD_ADDR_VAR 0 58
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56781: LD_ADDR_VAR 0 59
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56825: LD_ADDR_VAR 0 60
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56866: LD_ADDR_VAR 0 61
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56906: LD_ADDR_VAR 0 62
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56947: LD_ADDR_VAR 0 63
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56991: LD_ADDR_VAR 0 64
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// end ; 2 :
57037: GO 60303
57039: LD_INT 2
57041: DOUBLE
57042: EQUAL
57043: IFTRUE 57047
57045: GO 60302
57047: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57048: LD_ADDR_VAR 0 29
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 5
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 5
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 4
57178: PUSH
57179: LD_INT 4
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 4
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 4
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 4
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 5
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 5
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 4
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 4
57410: NEG
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 4
57433: NEG
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: LD_INT 5
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: LD_INT 4
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: NEG
57494: PUSH
57495: LD_INT 4
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: NEG
57506: PUSH
57507: LD_INT 5
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 5
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 5
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57586: LD_ADDR_VAR 0 30
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 5
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: LD_INT 5
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 4
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: LD_INT 5
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 4
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 5
57832: NEG
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 5
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 5
57855: NEG
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 4
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 4
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 4
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 5
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 5
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58133: LD_ADDR_VAR 0 31
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 4
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 5
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 5
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 4
58335: NEG
58336: PUSH
58337: LD_INT 4
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 4
58347: NEG
58348: PUSH
58349: LD_INT 5
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: LD_INT 4
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 5
58395: NEG
58396: PUSH
58397: LD_INT 4
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 5
58407: NEG
58408: PUSH
58409: LD_INT 5
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: LD_INT 5
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 5
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 4
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 4
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 4
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 5
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58683: LD_ADDR_VAR 0 32
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 4
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 4
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 5
58746: NEG
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 5
58757: NEG
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 5
58769: NEG
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: LD_INT 4
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 4
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 5
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 5
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 5
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 4
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: LD_INT 5
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 4
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: LD_INT 5
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59230: LD_ADDR_VAR 0 33
59234: PUSH
59235: LD_INT 4
59237: NEG
59238: PUSH
59239: LD_INT 4
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 4
59249: NEG
59250: PUSH
59251: LD_INT 5
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: NEG
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 5
59309: NEG
59310: PUSH
59311: LD_INT 5
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 5
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 5
59333: NEG
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 5
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 5
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 4
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 5
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 4
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: PUSH
59571: LD_INT 4
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: LD_INT 4
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 4
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 4
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 4
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 5
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 5
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 5
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59768: LD_ADDR_VAR 0 34
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 5
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 5
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 5
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 4
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 4
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 5
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: NEG
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// end ; end ;
60300: GO 60303
60302: POP
// case btype of b_depot , b_warehouse :
60303: LD_VAR 0 1
60307: PUSH
60308: LD_INT 0
60310: DOUBLE
60311: EQUAL
60312: IFTRUE 60322
60314: LD_INT 1
60316: DOUBLE
60317: EQUAL
60318: IFTRUE 60322
60320: GO 60523
60322: POP
// case nation of nation_american :
60323: LD_VAR 0 5
60327: PUSH
60328: LD_INT 1
60330: DOUBLE
60331: EQUAL
60332: IFTRUE 60336
60334: GO 60392
60336: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60337: LD_ADDR_VAR 0 9
60341: PUSH
60342: LD_VAR 0 11
60346: PUSH
60347: LD_VAR 0 12
60351: PUSH
60352: LD_VAR 0 13
60356: PUSH
60357: LD_VAR 0 14
60361: PUSH
60362: LD_VAR 0 15
60366: PUSH
60367: LD_VAR 0 16
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: PUSH
60380: LD_VAR 0 4
60384: PUSH
60385: LD_INT 1
60387: PLUS
60388: ARRAY
60389: ST_TO_ADDR
60390: GO 60521
60392: LD_INT 2
60394: DOUBLE
60395: EQUAL
60396: IFTRUE 60400
60398: GO 60456
60400: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60401: LD_ADDR_VAR 0 9
60405: PUSH
60406: LD_VAR 0 17
60410: PUSH
60411: LD_VAR 0 18
60415: PUSH
60416: LD_VAR 0 19
60420: PUSH
60421: LD_VAR 0 20
60425: PUSH
60426: LD_VAR 0 21
60430: PUSH
60431: LD_VAR 0 22
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: PUSH
60444: LD_VAR 0 4
60448: PUSH
60449: LD_INT 1
60451: PLUS
60452: ARRAY
60453: ST_TO_ADDR
60454: GO 60521
60456: LD_INT 3
60458: DOUBLE
60459: EQUAL
60460: IFTRUE 60464
60462: GO 60520
60464: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60465: LD_ADDR_VAR 0 9
60469: PUSH
60470: LD_VAR 0 23
60474: PUSH
60475: LD_VAR 0 24
60479: PUSH
60480: LD_VAR 0 25
60484: PUSH
60485: LD_VAR 0 26
60489: PUSH
60490: LD_VAR 0 27
60494: PUSH
60495: LD_VAR 0 28
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: PUSH
60508: LD_VAR 0 4
60512: PUSH
60513: LD_INT 1
60515: PLUS
60516: ARRAY
60517: ST_TO_ADDR
60518: GO 60521
60520: POP
60521: GO 61076
60523: LD_INT 2
60525: DOUBLE
60526: EQUAL
60527: IFTRUE 60537
60529: LD_INT 3
60531: DOUBLE
60532: EQUAL
60533: IFTRUE 60537
60535: GO 60593
60537: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60538: LD_ADDR_VAR 0 9
60542: PUSH
60543: LD_VAR 0 29
60547: PUSH
60548: LD_VAR 0 30
60552: PUSH
60553: LD_VAR 0 31
60557: PUSH
60558: LD_VAR 0 32
60562: PUSH
60563: LD_VAR 0 33
60567: PUSH
60568: LD_VAR 0 34
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: PUSH
60581: LD_VAR 0 4
60585: PUSH
60586: LD_INT 1
60588: PLUS
60589: ARRAY
60590: ST_TO_ADDR
60591: GO 61076
60593: LD_INT 16
60595: DOUBLE
60596: EQUAL
60597: IFTRUE 60655
60599: LD_INT 17
60601: DOUBLE
60602: EQUAL
60603: IFTRUE 60655
60605: LD_INT 18
60607: DOUBLE
60608: EQUAL
60609: IFTRUE 60655
60611: LD_INT 19
60613: DOUBLE
60614: EQUAL
60615: IFTRUE 60655
60617: LD_INT 22
60619: DOUBLE
60620: EQUAL
60621: IFTRUE 60655
60623: LD_INT 20
60625: DOUBLE
60626: EQUAL
60627: IFTRUE 60655
60629: LD_INT 21
60631: DOUBLE
60632: EQUAL
60633: IFTRUE 60655
60635: LD_INT 23
60637: DOUBLE
60638: EQUAL
60639: IFTRUE 60655
60641: LD_INT 24
60643: DOUBLE
60644: EQUAL
60645: IFTRUE 60655
60647: LD_INT 25
60649: DOUBLE
60650: EQUAL
60651: IFTRUE 60655
60653: GO 60711
60655: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60656: LD_ADDR_VAR 0 9
60660: PUSH
60661: LD_VAR 0 35
60665: PUSH
60666: LD_VAR 0 36
60670: PUSH
60671: LD_VAR 0 37
60675: PUSH
60676: LD_VAR 0 38
60680: PUSH
60681: LD_VAR 0 39
60685: PUSH
60686: LD_VAR 0 40
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: LD_VAR 0 4
60703: PUSH
60704: LD_INT 1
60706: PLUS
60707: ARRAY
60708: ST_TO_ADDR
60709: GO 61076
60711: LD_INT 6
60713: DOUBLE
60714: EQUAL
60715: IFTRUE 60767
60717: LD_INT 7
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60767
60723: LD_INT 8
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60767
60729: LD_INT 13
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60767
60735: LD_INT 12
60737: DOUBLE
60738: EQUAL
60739: IFTRUE 60767
60741: LD_INT 15
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60767
60747: LD_INT 11
60749: DOUBLE
60750: EQUAL
60751: IFTRUE 60767
60753: LD_INT 14
60755: DOUBLE
60756: EQUAL
60757: IFTRUE 60767
60759: LD_INT 10
60761: DOUBLE
60762: EQUAL
60763: IFTRUE 60767
60765: GO 60823
60767: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60768: LD_ADDR_VAR 0 9
60772: PUSH
60773: LD_VAR 0 41
60777: PUSH
60778: LD_VAR 0 42
60782: PUSH
60783: LD_VAR 0 43
60787: PUSH
60788: LD_VAR 0 44
60792: PUSH
60793: LD_VAR 0 45
60797: PUSH
60798: LD_VAR 0 46
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: LD_VAR 0 4
60815: PUSH
60816: LD_INT 1
60818: PLUS
60819: ARRAY
60820: ST_TO_ADDR
60821: GO 61076
60823: LD_INT 36
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60831
60829: GO 60887
60831: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60832: LD_ADDR_VAR 0 9
60836: PUSH
60837: LD_VAR 0 47
60841: PUSH
60842: LD_VAR 0 48
60846: PUSH
60847: LD_VAR 0 49
60851: PUSH
60852: LD_VAR 0 50
60856: PUSH
60857: LD_VAR 0 51
60861: PUSH
60862: LD_VAR 0 52
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: PUSH
60875: LD_VAR 0 4
60879: PUSH
60880: LD_INT 1
60882: PLUS
60883: ARRAY
60884: ST_TO_ADDR
60885: GO 61076
60887: LD_INT 4
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60913
60893: LD_INT 5
60895: DOUBLE
60896: EQUAL
60897: IFTRUE 60913
60899: LD_INT 34
60901: DOUBLE
60902: EQUAL
60903: IFTRUE 60913
60905: LD_INT 37
60907: DOUBLE
60908: EQUAL
60909: IFTRUE 60913
60911: GO 60969
60913: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60914: LD_ADDR_VAR 0 9
60918: PUSH
60919: LD_VAR 0 53
60923: PUSH
60924: LD_VAR 0 54
60928: PUSH
60929: LD_VAR 0 55
60933: PUSH
60934: LD_VAR 0 56
60938: PUSH
60939: LD_VAR 0 57
60943: PUSH
60944: LD_VAR 0 58
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: PUSH
60957: LD_VAR 0 4
60961: PUSH
60962: LD_INT 1
60964: PLUS
60965: ARRAY
60966: ST_TO_ADDR
60967: GO 61076
60969: LD_INT 31
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 61019
60975: LD_INT 32
60977: DOUBLE
60978: EQUAL
60979: IFTRUE 61019
60981: LD_INT 33
60983: DOUBLE
60984: EQUAL
60985: IFTRUE 61019
60987: LD_INT 27
60989: DOUBLE
60990: EQUAL
60991: IFTRUE 61019
60993: LD_INT 26
60995: DOUBLE
60996: EQUAL
60997: IFTRUE 61019
60999: LD_INT 28
61001: DOUBLE
61002: EQUAL
61003: IFTRUE 61019
61005: LD_INT 29
61007: DOUBLE
61008: EQUAL
61009: IFTRUE 61019
61011: LD_INT 30
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61019
61017: GO 61075
61019: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61020: LD_ADDR_VAR 0 9
61024: PUSH
61025: LD_VAR 0 59
61029: PUSH
61030: LD_VAR 0 60
61034: PUSH
61035: LD_VAR 0 61
61039: PUSH
61040: LD_VAR 0 62
61044: PUSH
61045: LD_VAR 0 63
61049: PUSH
61050: LD_VAR 0 64
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 4
61067: PUSH
61068: LD_INT 1
61070: PLUS
61071: ARRAY
61072: ST_TO_ADDR
61073: GO 61076
61075: POP
// temp_list2 = [ ] ;
61076: LD_ADDR_VAR 0 10
61080: PUSH
61081: EMPTY
61082: ST_TO_ADDR
// for i in temp_list do
61083: LD_ADDR_VAR 0 8
61087: PUSH
61088: LD_VAR 0 9
61092: PUSH
61093: FOR_IN
61094: IFFALSE 61146
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61096: LD_ADDR_VAR 0 10
61100: PUSH
61101: LD_VAR 0 10
61105: PUSH
61106: LD_VAR 0 8
61110: PUSH
61111: LD_INT 1
61113: ARRAY
61114: PUSH
61115: LD_VAR 0 2
61119: PLUS
61120: PUSH
61121: LD_VAR 0 8
61125: PUSH
61126: LD_INT 2
61128: ARRAY
61129: PUSH
61130: LD_VAR 0 3
61134: PLUS
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: ADD
61143: ST_TO_ADDR
61144: GO 61093
61146: POP
61147: POP
// result = temp_list2 ;
61148: LD_ADDR_VAR 0 7
61152: PUSH
61153: LD_VAR 0 10
61157: ST_TO_ADDR
// end ;
61158: LD_VAR 0 7
61162: RET
// export function EnemyInRange ( unit , dist ) ; begin
61163: LD_INT 0
61165: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61166: LD_ADDR_VAR 0 3
61170: PUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 255
61180: PPUSH
61181: LD_VAR 0 1
61185: PPUSH
61186: CALL_OW 250
61190: PPUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: CALL_OW 251
61200: PPUSH
61201: LD_VAR 0 2
61205: PPUSH
61206: CALL 34559 0 4
61210: PUSH
61211: LD_INT 4
61213: ARRAY
61214: ST_TO_ADDR
// end ;
61215: LD_VAR 0 3
61219: RET
// export function PlayerSeeMe ( unit ) ; begin
61220: LD_INT 0
61222: PPUSH
// result := See ( your_side , unit ) ;
61223: LD_ADDR_VAR 0 2
61227: PUSH
61228: LD_OWVAR 2
61232: PPUSH
61233: LD_VAR 0 1
61237: PPUSH
61238: CALL_OW 292
61242: ST_TO_ADDR
// end ;
61243: LD_VAR 0 2
61247: RET
// export function ReverseDir ( unit ) ; begin
61248: LD_INT 0
61250: PPUSH
// if not unit then
61251: LD_VAR 0 1
61255: NOT
61256: IFFALSE 61260
// exit ;
61258: GO 61283
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61260: LD_ADDR_VAR 0 2
61264: PUSH
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL_OW 254
61274: PUSH
61275: LD_INT 3
61277: PLUS
61278: PUSH
61279: LD_INT 6
61281: MOD
61282: ST_TO_ADDR
// end ;
61283: LD_VAR 0 2
61287: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61288: LD_INT 0
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
// if not hexes then
61295: LD_VAR 0 2
61299: NOT
61300: IFFALSE 61304
// exit ;
61302: GO 61452
// dist := 9999 ;
61304: LD_ADDR_VAR 0 5
61308: PUSH
61309: LD_INT 9999
61311: ST_TO_ADDR
// for i = 1 to hexes do
61312: LD_ADDR_VAR 0 4
61316: PUSH
61317: DOUBLE
61318: LD_INT 1
61320: DEC
61321: ST_TO_ADDR
61322: LD_VAR 0 2
61326: PUSH
61327: FOR_TO
61328: IFFALSE 61440
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61330: LD_VAR 0 1
61334: PPUSH
61335: LD_VAR 0 2
61339: PUSH
61340: LD_VAR 0 4
61344: ARRAY
61345: PUSH
61346: LD_INT 1
61348: ARRAY
61349: PPUSH
61350: LD_VAR 0 2
61354: PUSH
61355: LD_VAR 0 4
61359: ARRAY
61360: PUSH
61361: LD_INT 2
61363: ARRAY
61364: PPUSH
61365: CALL_OW 297
61369: PUSH
61370: LD_VAR 0 5
61374: LESS
61375: IFFALSE 61438
// begin hex := hexes [ i ] ;
61377: LD_ADDR_VAR 0 7
61381: PUSH
61382: LD_VAR 0 2
61386: PUSH
61387: LD_VAR 0 4
61391: ARRAY
61392: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61393: LD_ADDR_VAR 0 5
61397: PUSH
61398: LD_VAR 0 1
61402: PPUSH
61403: LD_VAR 0 2
61407: PUSH
61408: LD_VAR 0 4
61412: ARRAY
61413: PUSH
61414: LD_INT 1
61416: ARRAY
61417: PPUSH
61418: LD_VAR 0 2
61422: PUSH
61423: LD_VAR 0 4
61427: ARRAY
61428: PUSH
61429: LD_INT 2
61431: ARRAY
61432: PPUSH
61433: CALL_OW 297
61437: ST_TO_ADDR
// end ; end ;
61438: GO 61327
61440: POP
61441: POP
// result := hex ;
61442: LD_ADDR_VAR 0 3
61446: PUSH
61447: LD_VAR 0 7
61451: ST_TO_ADDR
// end ;
61452: LD_VAR 0 3
61456: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61457: LD_INT 0
61459: PPUSH
61460: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61461: LD_VAR 0 1
61465: NOT
61466: PUSH
61467: LD_VAR 0 1
61471: PUSH
61472: LD_INT 21
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 23
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PPUSH
61496: CALL_OW 69
61500: IN
61501: NOT
61502: OR
61503: IFFALSE 61507
// exit ;
61505: GO 61554
// for i = 1 to 3 do
61507: LD_ADDR_VAR 0 3
61511: PUSH
61512: DOUBLE
61513: LD_INT 1
61515: DEC
61516: ST_TO_ADDR
61517: LD_INT 3
61519: PUSH
61520: FOR_TO
61521: IFFALSE 61552
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL_OW 250
61532: PPUSH
61533: LD_VAR 0 1
61537: PPUSH
61538: CALL_OW 251
61542: PPUSH
61543: LD_INT 1
61545: PPUSH
61546: CALL_OW 453
61550: GO 61520
61552: POP
61553: POP
// end ;
61554: LD_VAR 0 2
61558: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61559: LD_INT 0
61561: PPUSH
61562: PPUSH
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61567: LD_VAR 0 1
61571: NOT
61572: PUSH
61573: LD_VAR 0 2
61577: NOT
61578: OR
61579: PUSH
61580: LD_VAR 0 1
61584: PPUSH
61585: CALL_OW 314
61589: OR
61590: IFFALSE 61594
// exit ;
61592: GO 62035
// x := GetX ( enemy_unit ) ;
61594: LD_ADDR_VAR 0 7
61598: PUSH
61599: LD_VAR 0 2
61603: PPUSH
61604: CALL_OW 250
61608: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61609: LD_ADDR_VAR 0 8
61613: PUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: CALL_OW 251
61623: ST_TO_ADDR
// if not x or not y then
61624: LD_VAR 0 7
61628: NOT
61629: PUSH
61630: LD_VAR 0 8
61634: NOT
61635: OR
61636: IFFALSE 61640
// exit ;
61638: GO 62035
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61640: LD_ADDR_VAR 0 6
61644: PUSH
61645: LD_VAR 0 7
61649: PPUSH
61650: LD_INT 0
61652: PPUSH
61653: LD_INT 4
61655: PPUSH
61656: CALL_OW 272
61660: PUSH
61661: LD_VAR 0 8
61665: PPUSH
61666: LD_INT 0
61668: PPUSH
61669: LD_INT 4
61671: PPUSH
61672: CALL_OW 273
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_VAR 0 7
61685: PPUSH
61686: LD_INT 1
61688: PPUSH
61689: LD_INT 4
61691: PPUSH
61692: CALL_OW 272
61696: PUSH
61697: LD_VAR 0 8
61701: PPUSH
61702: LD_INT 1
61704: PPUSH
61705: LD_INT 4
61707: PPUSH
61708: CALL_OW 273
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_VAR 0 7
61721: PPUSH
61722: LD_INT 2
61724: PPUSH
61725: LD_INT 4
61727: PPUSH
61728: CALL_OW 272
61732: PUSH
61733: LD_VAR 0 8
61737: PPUSH
61738: LD_INT 2
61740: PPUSH
61741: LD_INT 4
61743: PPUSH
61744: CALL_OW 273
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 7
61757: PPUSH
61758: LD_INT 3
61760: PPUSH
61761: LD_INT 4
61763: PPUSH
61764: CALL_OW 272
61768: PUSH
61769: LD_VAR 0 8
61773: PPUSH
61774: LD_INT 3
61776: PPUSH
61777: LD_INT 4
61779: PPUSH
61780: CALL_OW 273
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_VAR 0 7
61793: PPUSH
61794: LD_INT 4
61796: PPUSH
61797: LD_INT 4
61799: PPUSH
61800: CALL_OW 272
61804: PUSH
61805: LD_VAR 0 8
61809: PPUSH
61810: LD_INT 4
61812: PPUSH
61813: LD_INT 4
61815: PPUSH
61816: CALL_OW 273
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_VAR 0 7
61829: PPUSH
61830: LD_INT 5
61832: PPUSH
61833: LD_INT 4
61835: PPUSH
61836: CALL_OW 272
61840: PUSH
61841: LD_VAR 0 8
61845: PPUSH
61846: LD_INT 5
61848: PPUSH
61849: LD_INT 4
61851: PPUSH
61852: CALL_OW 273
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// for i = tmp downto 1 do
61869: LD_ADDR_VAR 0 4
61873: PUSH
61874: DOUBLE
61875: LD_VAR 0 6
61879: INC
61880: ST_TO_ADDR
61881: LD_INT 1
61883: PUSH
61884: FOR_DOWNTO
61885: IFFALSE 61986
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61887: LD_VAR 0 6
61891: PUSH
61892: LD_VAR 0 4
61896: ARRAY
61897: PUSH
61898: LD_INT 1
61900: ARRAY
61901: PPUSH
61902: LD_VAR 0 6
61906: PUSH
61907: LD_VAR 0 4
61911: ARRAY
61912: PUSH
61913: LD_INT 2
61915: ARRAY
61916: PPUSH
61917: CALL_OW 488
61921: NOT
61922: PUSH
61923: LD_VAR 0 6
61927: PUSH
61928: LD_VAR 0 4
61932: ARRAY
61933: PUSH
61934: LD_INT 1
61936: ARRAY
61937: PPUSH
61938: LD_VAR 0 6
61942: PUSH
61943: LD_VAR 0 4
61947: ARRAY
61948: PUSH
61949: LD_INT 2
61951: ARRAY
61952: PPUSH
61953: CALL_OW 428
61957: PUSH
61958: LD_INT 0
61960: NONEQUAL
61961: OR
61962: IFFALSE 61984
// tmp := Delete ( tmp , i ) ;
61964: LD_ADDR_VAR 0 6
61968: PUSH
61969: LD_VAR 0 6
61973: PPUSH
61974: LD_VAR 0 4
61978: PPUSH
61979: CALL_OW 3
61983: ST_TO_ADDR
61984: GO 61884
61986: POP
61987: POP
// j := GetClosestHex ( unit , tmp ) ;
61988: LD_ADDR_VAR 0 5
61992: PUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: LD_VAR 0 6
62002: PPUSH
62003: CALL 61288 0 2
62007: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 5
62017: PUSH
62018: LD_INT 1
62020: ARRAY
62021: PPUSH
62022: LD_VAR 0 5
62026: PUSH
62027: LD_INT 2
62029: ARRAY
62030: PPUSH
62031: CALL_OW 111
// end ;
62035: LD_VAR 0 3
62039: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62040: LD_INT 0
62042: PPUSH
62043: PPUSH
62044: PPUSH
// uc_side = 0 ;
62045: LD_ADDR_OWVAR 20
62049: PUSH
62050: LD_INT 0
62052: ST_TO_ADDR
// uc_nation = 0 ;
62053: LD_ADDR_OWVAR 21
62057: PUSH
62058: LD_INT 0
62060: ST_TO_ADDR
// InitHc_All ( ) ;
62061: CALL_OW 584
// InitVc ;
62065: CALL_OW 20
// if mastodonts then
62069: LD_VAR 0 6
62073: IFFALSE 62140
// for i = 1 to mastodonts do
62075: LD_ADDR_VAR 0 11
62079: PUSH
62080: DOUBLE
62081: LD_INT 1
62083: DEC
62084: ST_TO_ADDR
62085: LD_VAR 0 6
62089: PUSH
62090: FOR_TO
62091: IFFALSE 62138
// begin vc_chassis := 31 ;
62093: LD_ADDR_OWVAR 37
62097: PUSH
62098: LD_INT 31
62100: ST_TO_ADDR
// vc_control := control_rider ;
62101: LD_ADDR_OWVAR 38
62105: PUSH
62106: LD_INT 4
62108: ST_TO_ADDR
// animal := CreateVehicle ;
62109: LD_ADDR_VAR 0 12
62113: PUSH
62114: CALL_OW 45
62118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62119: LD_VAR 0 12
62123: PPUSH
62124: LD_VAR 0 8
62128: PPUSH
62129: LD_INT 0
62131: PPUSH
62132: CALL 64328 0 3
// end ;
62136: GO 62090
62138: POP
62139: POP
// if horses then
62140: LD_VAR 0 5
62144: IFFALSE 62211
// for i = 1 to horses do
62146: LD_ADDR_VAR 0 11
62150: PUSH
62151: DOUBLE
62152: LD_INT 1
62154: DEC
62155: ST_TO_ADDR
62156: LD_VAR 0 5
62160: PUSH
62161: FOR_TO
62162: IFFALSE 62209
// begin hc_class := 21 ;
62164: LD_ADDR_OWVAR 28
62168: PUSH
62169: LD_INT 21
62171: ST_TO_ADDR
// hc_gallery :=  ;
62172: LD_ADDR_OWVAR 33
62176: PUSH
62177: LD_STRING 
62179: ST_TO_ADDR
// animal := CreateHuman ;
62180: LD_ADDR_VAR 0 12
62184: PUSH
62185: CALL_OW 44
62189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62190: LD_VAR 0 12
62194: PPUSH
62195: LD_VAR 0 8
62199: PPUSH
62200: LD_INT 0
62202: PPUSH
62203: CALL 64328 0 3
// end ;
62207: GO 62161
62209: POP
62210: POP
// if birds then
62211: LD_VAR 0 1
62215: IFFALSE 62282
// for i = 1 to birds do
62217: LD_ADDR_VAR 0 11
62221: PUSH
62222: DOUBLE
62223: LD_INT 1
62225: DEC
62226: ST_TO_ADDR
62227: LD_VAR 0 1
62231: PUSH
62232: FOR_TO
62233: IFFALSE 62280
// begin hc_class = 18 ;
62235: LD_ADDR_OWVAR 28
62239: PUSH
62240: LD_INT 18
62242: ST_TO_ADDR
// hc_gallery =  ;
62243: LD_ADDR_OWVAR 33
62247: PUSH
62248: LD_STRING 
62250: ST_TO_ADDR
// animal := CreateHuman ;
62251: LD_ADDR_VAR 0 12
62255: PUSH
62256: CALL_OW 44
62260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62261: LD_VAR 0 12
62265: PPUSH
62266: LD_VAR 0 8
62270: PPUSH
62271: LD_INT 0
62273: PPUSH
62274: CALL 64328 0 3
// end ;
62278: GO 62232
62280: POP
62281: POP
// if tigers then
62282: LD_VAR 0 2
62286: IFFALSE 62370
// for i = 1 to tigers do
62288: LD_ADDR_VAR 0 11
62292: PUSH
62293: DOUBLE
62294: LD_INT 1
62296: DEC
62297: ST_TO_ADDR
62298: LD_VAR 0 2
62302: PUSH
62303: FOR_TO
62304: IFFALSE 62368
// begin hc_class = class_tiger ;
62306: LD_ADDR_OWVAR 28
62310: PUSH
62311: LD_INT 14
62313: ST_TO_ADDR
// hc_gallery =  ;
62314: LD_ADDR_OWVAR 33
62318: PUSH
62319: LD_STRING 
62321: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62322: LD_ADDR_OWVAR 35
62326: PUSH
62327: LD_INT 7
62329: NEG
62330: PPUSH
62331: LD_INT 7
62333: PPUSH
62334: CALL_OW 12
62338: ST_TO_ADDR
// animal := CreateHuman ;
62339: LD_ADDR_VAR 0 12
62343: PUSH
62344: CALL_OW 44
62348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62349: LD_VAR 0 12
62353: PPUSH
62354: LD_VAR 0 8
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: CALL 64328 0 3
// end ;
62366: GO 62303
62368: POP
62369: POP
// if apemans then
62370: LD_VAR 0 3
62374: IFFALSE 62497
// for i = 1 to apemans do
62376: LD_ADDR_VAR 0 11
62380: PUSH
62381: DOUBLE
62382: LD_INT 1
62384: DEC
62385: ST_TO_ADDR
62386: LD_VAR 0 3
62390: PUSH
62391: FOR_TO
62392: IFFALSE 62495
// begin hc_class = class_apeman ;
62394: LD_ADDR_OWVAR 28
62398: PUSH
62399: LD_INT 12
62401: ST_TO_ADDR
// hc_gallery =  ;
62402: LD_ADDR_OWVAR 33
62406: PUSH
62407: LD_STRING 
62409: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62410: LD_ADDR_OWVAR 35
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PPUSH
62419: LD_INT 2
62421: PPUSH
62422: CALL_OW 12
62426: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62427: LD_ADDR_OWVAR 31
62431: PUSH
62432: LD_INT 1
62434: PPUSH
62435: LD_INT 3
62437: PPUSH
62438: CALL_OW 12
62442: PUSH
62443: LD_INT 1
62445: PPUSH
62446: LD_INT 3
62448: PPUSH
62449: CALL_OW 12
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: ST_TO_ADDR
// animal := CreateHuman ;
62466: LD_ADDR_VAR 0 12
62470: PUSH
62471: CALL_OW 44
62475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62476: LD_VAR 0 12
62480: PPUSH
62481: LD_VAR 0 8
62485: PPUSH
62486: LD_INT 0
62488: PPUSH
62489: CALL 64328 0 3
// end ;
62493: GO 62391
62495: POP
62496: POP
// if enchidnas then
62497: LD_VAR 0 4
62501: IFFALSE 62568
// for i = 1 to enchidnas do
62503: LD_ADDR_VAR 0 11
62507: PUSH
62508: DOUBLE
62509: LD_INT 1
62511: DEC
62512: ST_TO_ADDR
62513: LD_VAR 0 4
62517: PUSH
62518: FOR_TO
62519: IFFALSE 62566
// begin hc_class = 13 ;
62521: LD_ADDR_OWVAR 28
62525: PUSH
62526: LD_INT 13
62528: ST_TO_ADDR
// hc_gallery =  ;
62529: LD_ADDR_OWVAR 33
62533: PUSH
62534: LD_STRING 
62536: ST_TO_ADDR
// animal := CreateHuman ;
62537: LD_ADDR_VAR 0 12
62541: PUSH
62542: CALL_OW 44
62546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62547: LD_VAR 0 12
62551: PPUSH
62552: LD_VAR 0 8
62556: PPUSH
62557: LD_INT 0
62559: PPUSH
62560: CALL 64328 0 3
// end ;
62564: GO 62518
62566: POP
62567: POP
// if fishes then
62568: LD_VAR 0 7
62572: IFFALSE 62639
// for i = 1 to fishes do
62574: LD_ADDR_VAR 0 11
62578: PUSH
62579: DOUBLE
62580: LD_INT 1
62582: DEC
62583: ST_TO_ADDR
62584: LD_VAR 0 7
62588: PUSH
62589: FOR_TO
62590: IFFALSE 62637
// begin hc_class = 20 ;
62592: LD_ADDR_OWVAR 28
62596: PUSH
62597: LD_INT 20
62599: ST_TO_ADDR
// hc_gallery =  ;
62600: LD_ADDR_OWVAR 33
62604: PUSH
62605: LD_STRING 
62607: ST_TO_ADDR
// animal := CreateHuman ;
62608: LD_ADDR_VAR 0 12
62612: PUSH
62613: CALL_OW 44
62617: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62618: LD_VAR 0 12
62622: PPUSH
62623: LD_VAR 0 9
62627: PPUSH
62628: LD_INT 0
62630: PPUSH
62631: CALL 64328 0 3
// end ;
62635: GO 62589
62637: POP
62638: POP
// end ;
62639: LD_VAR 0 10
62643: RET
// export function WantHeal ( sci , unit ) ; begin
62644: LD_INT 0
62646: PPUSH
// if GetTaskList ( sci ) > 0 then
62647: LD_VAR 0 1
62651: PPUSH
62652: CALL_OW 437
62656: PUSH
62657: LD_INT 0
62659: GREATER
62660: IFFALSE 62730
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 437
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PUSH
62680: LD_STRING l
62682: EQUAL
62683: PUSH
62684: LD_VAR 0 1
62688: PPUSH
62689: CALL_OW 437
62693: PUSH
62694: LD_INT 1
62696: ARRAY
62697: PUSH
62698: LD_INT 4
62700: ARRAY
62701: PUSH
62702: LD_VAR 0 2
62706: EQUAL
62707: AND
62708: IFFALSE 62720
// result := true else
62710: LD_ADDR_VAR 0 3
62714: PUSH
62715: LD_INT 1
62717: ST_TO_ADDR
62718: GO 62728
// result := false ;
62720: LD_ADDR_VAR 0 3
62724: PUSH
62725: LD_INT 0
62727: ST_TO_ADDR
// end else
62728: GO 62738
// result := false ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: LD_INT 0
62737: ST_TO_ADDR
// end ;
62738: LD_VAR 0 3
62742: RET
// export function HealTarget ( sci ) ; begin
62743: LD_INT 0
62745: PPUSH
// if not sci then
62746: LD_VAR 0 1
62750: NOT
62751: IFFALSE 62755
// exit ;
62753: GO 62820
// result := 0 ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: LD_INT 0
62762: ST_TO_ADDR
// if GetTaskList ( sci ) then
62763: LD_VAR 0 1
62767: PPUSH
62768: CALL_OW 437
62772: IFFALSE 62820
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62774: LD_VAR 0 1
62778: PPUSH
62779: CALL_OW 437
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PUSH
62792: LD_STRING l
62794: EQUAL
62795: IFFALSE 62820
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62797: LD_ADDR_VAR 0 2
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: CALL_OW 437
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 4
62818: ARRAY
62819: ST_TO_ADDR
// end ;
62820: LD_VAR 0 2
62824: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62825: LD_INT 0
62827: PPUSH
62828: PPUSH
62829: PPUSH
62830: PPUSH
// if not base_units then
62831: LD_VAR 0 1
62835: NOT
62836: IFFALSE 62840
// exit ;
62838: GO 62927
// result := false ;
62840: LD_ADDR_VAR 0 2
62844: PUSH
62845: LD_INT 0
62847: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62848: LD_ADDR_VAR 0 5
62852: PUSH
62853: LD_VAR 0 1
62857: PPUSH
62858: LD_INT 21
62860: PUSH
62861: LD_INT 3
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PPUSH
62868: CALL_OW 72
62872: ST_TO_ADDR
// if not tmp then
62873: LD_VAR 0 5
62877: NOT
62878: IFFALSE 62882
// exit ;
62880: GO 62927
// for i in tmp do
62882: LD_ADDR_VAR 0 3
62886: PUSH
62887: LD_VAR 0 5
62891: PUSH
62892: FOR_IN
62893: IFFALSE 62925
// begin result := EnemyInRange ( i , 22 ) ;
62895: LD_ADDR_VAR 0 2
62899: PUSH
62900: LD_VAR 0 3
62904: PPUSH
62905: LD_INT 22
62907: PPUSH
62908: CALL 61163 0 2
62912: ST_TO_ADDR
// if result then
62913: LD_VAR 0 2
62917: IFFALSE 62923
// exit ;
62919: POP
62920: POP
62921: GO 62927
// end ;
62923: GO 62892
62925: POP
62926: POP
// end ;
62927: LD_VAR 0 2
62931: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62932: LD_INT 0
62934: PPUSH
62935: PPUSH
// if not units then
62936: LD_VAR 0 1
62940: NOT
62941: IFFALSE 62945
// exit ;
62943: GO 63015
// result := [ ] ;
62945: LD_ADDR_VAR 0 3
62949: PUSH
62950: EMPTY
62951: ST_TO_ADDR
// for i in units do
62952: LD_ADDR_VAR 0 4
62956: PUSH
62957: LD_VAR 0 1
62961: PUSH
62962: FOR_IN
62963: IFFALSE 63013
// if GetTag ( i ) = tag then
62965: LD_VAR 0 4
62969: PPUSH
62970: CALL_OW 110
62974: PUSH
62975: LD_VAR 0 2
62979: EQUAL
62980: IFFALSE 63011
// result := Replace ( result , result + 1 , i ) ;
62982: LD_ADDR_VAR 0 3
62986: PUSH
62987: LD_VAR 0 3
62991: PPUSH
62992: LD_VAR 0 3
62996: PUSH
62997: LD_INT 1
62999: PLUS
63000: PPUSH
63001: LD_VAR 0 4
63005: PPUSH
63006: CALL_OW 1
63010: ST_TO_ADDR
63011: GO 62962
63013: POP
63014: POP
// end ;
63015: LD_VAR 0 3
63019: RET
// export function IsDriver ( un ) ; begin
63020: LD_INT 0
63022: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: LD_VAR 0 1
63032: PUSH
63033: LD_INT 55
63035: PUSH
63036: EMPTY
63037: LIST
63038: PPUSH
63039: CALL_OW 69
63043: IN
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 2
63049: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
// list := [ ] ;
63054: LD_ADDR_VAR 0 5
63058: PUSH
63059: EMPTY
63060: ST_TO_ADDR
// case d of 0 :
63061: LD_VAR 0 3
63065: PUSH
63066: LD_INT 0
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63207
63074: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63075: LD_ADDR_VAR 0 5
63079: PUSH
63080: LD_VAR 0 1
63084: PUSH
63085: LD_INT 4
63087: MINUS
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_INT 4
63096: MINUS
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 3
63113: MINUS
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 4
63135: PLUS
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 3
63157: PLUS
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 3
63166: PLUS
63167: PUSH
63168: LD_INT 5
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: LD_VAR 0 2
63185: PUSH
63186: LD_INT 4
63188: PLUS
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// end ; 1 :
63205: GO 63905
63207: LD_INT 1
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63348
63215: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63216: LD_ADDR_VAR 0 5
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_VAR 0 2
63230: PUSH
63231: LD_INT 4
63233: MINUS
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 3
63250: MINUS
63251: PUSH
63252: LD_VAR 0 2
63256: PUSH
63257: LD_INT 3
63259: MINUS
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_INT 4
63276: MINUS
63277: PUSH
63278: LD_VAR 0 2
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 2
63300: PUSH
63301: LD_INT 3
63303: PLUS
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 4
63320: PLUS
63321: PUSH
63322: LD_VAR 0 2
63326: PUSH
63327: LD_INT 4
63329: PLUS
63330: PUSH
63331: LD_INT 5
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// end ; 2 :
63346: GO 63905
63348: LD_INT 2
63350: DOUBLE
63351: EQUAL
63352: IFTRUE 63356
63354: GO 63485
63356: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63357: LD_ADDR_VAR 0 5
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 3
63374: MINUS
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: LIST
63383: PUSH
63384: LD_VAR 0 1
63388: PUSH
63389: LD_INT 4
63391: PLUS
63392: PUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: PUSH
63406: LD_VAR 0 1
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_INT 4
63418: PLUS
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 3
63435: MINUS
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: PUSH
63450: LD_VAR 0 1
63454: PUSH
63455: LD_INT 4
63457: MINUS
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_INT 4
63466: MINUS
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// end ; 3 :
63483: GO 63905
63485: LD_INT 3
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63493
63491: GO 63626
63493: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63494: LD_ADDR_VAR 0 5
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 3
63506: PLUS
63507: PUSH
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 4
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: PUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_INT 4
63528: PLUS
63529: PUSH
63530: LD_VAR 0 2
63534: PUSH
63535: LD_INT 4
63537: PLUS
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_INT 4
63554: MINUS
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_VAR 0 2
63578: PUSH
63579: LD_INT 4
63581: MINUS
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: PUSH
63591: LD_VAR 0 1
63595: PUSH
63596: LD_INT 3
63598: MINUS
63599: PUSH
63600: LD_VAR 0 2
63604: PUSH
63605: LD_INT 3
63607: MINUS
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: ST_TO_ADDR
// end ; 4 :
63624: GO 63905
63626: LD_INT 4
63628: DOUBLE
63629: EQUAL
63630: IFTRUE 63634
63632: GO 63767
63634: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63635: LD_ADDR_VAR 0 5
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_VAR 0 2
63649: PUSH
63650: LD_INT 4
63652: PLUS
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: PUSH
63662: LD_VAR 0 1
63666: PUSH
63667: LD_INT 3
63669: PLUS
63670: PUSH
63671: LD_VAR 0 2
63675: PUSH
63676: LD_INT 3
63678: PLUS
63679: PUSH
63680: LD_INT 5
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: LD_INT 4
63695: PLUS
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_INT 3
63722: MINUS
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 4
63739: MINUS
63740: PUSH
63741: LD_VAR 0 2
63745: PUSH
63746: LD_INT 4
63748: MINUS
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: ST_TO_ADDR
// end ; 5 :
63765: GO 63905
63767: LD_INT 5
63769: DOUBLE
63770: EQUAL
63771: IFTRUE 63775
63773: GO 63904
63775: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_INT 4
63788: MINUS
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: PUSH
63803: LD_VAR 0 1
63807: PUSH
63808: LD_VAR 0 2
63812: PUSH
63813: LD_INT 4
63815: MINUS
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: PUSH
63825: LD_VAR 0 1
63829: PUSH
63830: LD_INT 4
63832: PLUS
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_INT 4
63841: PLUS
63842: PUSH
63843: LD_INT 5
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 3
63858: PLUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 4
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_INT 3
63885: PLUS
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// end ; end ;
63902: GO 63905
63904: POP
// result := list ;
63905: LD_ADDR_VAR 0 4
63909: PUSH
63910: LD_VAR 0 5
63914: ST_TO_ADDR
// end ;
63915: LD_VAR 0 4
63919: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63920: LD_INT 0
63922: PPUSH
63923: PPUSH
63924: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63925: LD_VAR 0 1
63929: NOT
63930: PUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: LD_INT 4
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: IN
63954: NOT
63955: OR
63956: IFFALSE 63960
// exit ;
63958: GO 64052
// tmp := [ ] ;
63960: LD_ADDR_VAR 0 5
63964: PUSH
63965: EMPTY
63966: ST_TO_ADDR
// for i in units do
63967: LD_ADDR_VAR 0 4
63971: PUSH
63972: LD_VAR 0 1
63976: PUSH
63977: FOR_IN
63978: IFFALSE 64021
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63980: LD_ADDR_VAR 0 5
63984: PUSH
63985: LD_VAR 0 5
63989: PPUSH
63990: LD_VAR 0 5
63994: PUSH
63995: LD_INT 1
63997: PLUS
63998: PPUSH
63999: LD_VAR 0 4
64003: PPUSH
64004: LD_VAR 0 2
64008: PPUSH
64009: CALL_OW 259
64013: PPUSH
64014: CALL_OW 2
64018: ST_TO_ADDR
64019: GO 63977
64021: POP
64022: POP
// if not tmp then
64023: LD_VAR 0 5
64027: NOT
64028: IFFALSE 64032
// exit ;
64030: GO 64052
// result := SortListByListDesc ( units , tmp ) ;
64032: LD_ADDR_VAR 0 3
64036: PUSH
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_VAR 0 5
64046: PPUSH
64047: CALL_OW 77
64051: ST_TO_ADDR
// end ;
64052: LD_VAR 0 3
64056: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64057: LD_INT 0
64059: PPUSH
64060: PPUSH
64061: PPUSH
// result := false ;
64062: LD_ADDR_VAR 0 3
64066: PUSH
64067: LD_INT 0
64069: ST_TO_ADDR
// x := GetX ( building ) ;
64070: LD_ADDR_VAR 0 4
64074: PUSH
64075: LD_VAR 0 2
64079: PPUSH
64080: CALL_OW 250
64084: ST_TO_ADDR
// y := GetY ( building ) ;
64085: LD_ADDR_VAR 0 5
64089: PUSH
64090: LD_VAR 0 2
64094: PPUSH
64095: CALL_OW 251
64099: ST_TO_ADDR
// if not building or not x or not y then
64100: LD_VAR 0 2
64104: NOT
64105: PUSH
64106: LD_VAR 0 4
64110: NOT
64111: OR
64112: PUSH
64113: LD_VAR 0 5
64117: NOT
64118: OR
64119: IFFALSE 64123
// exit ;
64121: GO 64215
// if GetTaskList ( unit ) then
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL_OW 437
64132: IFFALSE 64215
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64134: LD_STRING e
64136: PUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: CALL_OW 437
64146: PUSH
64147: LD_INT 1
64149: ARRAY
64150: PUSH
64151: LD_INT 1
64153: ARRAY
64154: EQUAL
64155: PUSH
64156: LD_VAR 0 4
64160: PUSH
64161: LD_VAR 0 1
64165: PPUSH
64166: CALL_OW 437
64170: PUSH
64171: LD_INT 1
64173: ARRAY
64174: PUSH
64175: LD_INT 2
64177: ARRAY
64178: EQUAL
64179: AND
64180: PUSH
64181: LD_VAR 0 5
64185: PUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 437
64195: PUSH
64196: LD_INT 1
64198: ARRAY
64199: PUSH
64200: LD_INT 3
64202: ARRAY
64203: EQUAL
64204: AND
64205: IFFALSE 64215
// result := true end ;
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_INT 1
64214: ST_TO_ADDR
// end ;
64215: LD_VAR 0 3
64219: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64220: LD_INT 0
64222: PPUSH
// result := false ;
64223: LD_ADDR_VAR 0 4
64227: PUSH
64228: LD_INT 0
64230: ST_TO_ADDR
// if GetTaskList ( unit ) then
64231: LD_VAR 0 1
64235: PPUSH
64236: CALL_OW 437
64240: IFFALSE 64323
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64242: LD_STRING M
64244: PUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: CALL_OW 437
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: PUSH
64259: LD_INT 1
64261: ARRAY
64262: EQUAL
64263: PUSH
64264: LD_VAR 0 2
64268: PUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 437
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PUSH
64283: LD_INT 2
64285: ARRAY
64286: EQUAL
64287: AND
64288: PUSH
64289: LD_VAR 0 3
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PUSH
64308: LD_INT 3
64310: ARRAY
64311: EQUAL
64312: AND
64313: IFFALSE 64323
// result := true ;
64315: LD_ADDR_VAR 0 4
64319: PUSH
64320: LD_INT 1
64322: ST_TO_ADDR
// end ; end ;
64323: LD_VAR 0 4
64327: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64328: LD_INT 0
64330: PPUSH
64331: PPUSH
64332: PPUSH
64333: PPUSH
// if not unit or not area then
64334: LD_VAR 0 1
64338: NOT
64339: PUSH
64340: LD_VAR 0 2
64344: NOT
64345: OR
64346: IFFALSE 64350
// exit ;
64348: GO 64514
// tmp := AreaToList ( area , i ) ;
64350: LD_ADDR_VAR 0 6
64354: PUSH
64355: LD_VAR 0 2
64359: PPUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: CALL_OW 517
64369: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64370: LD_ADDR_VAR 0 5
64374: PUSH
64375: DOUBLE
64376: LD_INT 1
64378: DEC
64379: ST_TO_ADDR
64380: LD_VAR 0 6
64384: PUSH
64385: LD_INT 1
64387: ARRAY
64388: PUSH
64389: FOR_TO
64390: IFFALSE 64512
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64392: LD_ADDR_VAR 0 7
64396: PUSH
64397: LD_VAR 0 6
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PUSH
64406: LD_VAR 0 5
64410: ARRAY
64411: PUSH
64412: LD_VAR 0 6
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: PUSH
64421: LD_VAR 0 5
64425: ARRAY
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64431: LD_VAR 0 7
64435: PUSH
64436: LD_INT 1
64438: ARRAY
64439: PPUSH
64440: LD_VAR 0 7
64444: PUSH
64445: LD_INT 2
64447: ARRAY
64448: PPUSH
64449: CALL_OW 428
64453: PUSH
64454: LD_INT 0
64456: EQUAL
64457: IFFALSE 64510
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_VAR 0 7
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PPUSH
64473: LD_VAR 0 7
64477: PUSH
64478: LD_INT 2
64480: ARRAY
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: CALL_OW 48
// result := IsPlaced ( unit ) ;
64491: LD_ADDR_VAR 0 4
64495: PUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 305
64505: ST_TO_ADDR
// exit ;
64506: POP
64507: POP
64508: GO 64514
// end ; end ;
64510: GO 64389
64512: POP
64513: POP
// end ;
64514: LD_VAR 0 4
64518: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64519: LD_INT 0
64521: PPUSH
64522: PPUSH
64523: PPUSH
// if not side or side > 8 then
64524: LD_VAR 0 1
64528: NOT
64529: PUSH
64530: LD_VAR 0 1
64534: PUSH
64535: LD_INT 8
64537: GREATER
64538: OR
64539: IFFALSE 64543
// exit ;
64541: GO 64730
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64543: LD_ADDR_VAR 0 4
64547: PUSH
64548: LD_INT 22
64550: PUSH
64551: LD_VAR 0 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 21
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 69
64578: ST_TO_ADDR
// if not tmp then
64579: LD_VAR 0 4
64583: NOT
64584: IFFALSE 64588
// exit ;
64586: GO 64730
// enable_addtolog := true ;
64588: LD_ADDR_OWVAR 81
64592: PUSH
64593: LD_INT 1
64595: ST_TO_ADDR
// AddToLog ( [ ) ;
64596: LD_STRING [
64598: PPUSH
64599: CALL_OW 561
// for i in tmp do
64603: LD_ADDR_VAR 0 3
64607: PUSH
64608: LD_VAR 0 4
64612: PUSH
64613: FOR_IN
64614: IFFALSE 64721
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64616: LD_STRING [
64618: PUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: CALL_OW 266
64628: STR
64629: PUSH
64630: LD_STRING , 
64632: STR
64633: PUSH
64634: LD_VAR 0 3
64638: PPUSH
64639: CALL_OW 250
64643: STR
64644: PUSH
64645: LD_STRING , 
64647: STR
64648: PUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL_OW 251
64658: STR
64659: PUSH
64660: LD_STRING , 
64662: STR
64663: PUSH
64664: LD_VAR 0 3
64668: PPUSH
64669: CALL_OW 254
64673: STR
64674: PUSH
64675: LD_STRING , 
64677: STR
64678: PUSH
64679: LD_VAR 0 3
64683: PPUSH
64684: LD_INT 1
64686: PPUSH
64687: CALL_OW 268
64691: STR
64692: PUSH
64693: LD_STRING , 
64695: STR
64696: PUSH
64697: LD_VAR 0 3
64701: PPUSH
64702: LD_INT 2
64704: PPUSH
64705: CALL_OW 268
64709: STR
64710: PUSH
64711: LD_STRING ],
64713: STR
64714: PPUSH
64715: CALL_OW 561
// end ;
64719: GO 64613
64721: POP
64722: POP
// AddToLog ( ]; ) ;
64723: LD_STRING ];
64725: PPUSH
64726: CALL_OW 561
// end ;
64730: LD_VAR 0 2
64734: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64735: LD_INT 0
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not area or not rate or not max then
64742: LD_VAR 0 1
64746: NOT
64747: PUSH
64748: LD_VAR 0 2
64752: NOT
64753: OR
64754: PUSH
64755: LD_VAR 0 4
64759: NOT
64760: OR
64761: IFFALSE 64765
// exit ;
64763: GO 64957
// while 1 do
64765: LD_INT 1
64767: IFFALSE 64957
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64769: LD_ADDR_VAR 0 9
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: LD_INT 1
64781: PPUSH
64782: CALL_OW 287
64786: PUSH
64787: LD_INT 10
64789: MUL
64790: ST_TO_ADDR
// r := rate / 10 ;
64791: LD_ADDR_VAR 0 7
64795: PUSH
64796: LD_VAR 0 2
64800: PUSH
64801: LD_INT 10
64803: DIVREAL
64804: ST_TO_ADDR
// time := 1 1$00 ;
64805: LD_ADDR_VAR 0 8
64809: PUSH
64810: LD_INT 2100
64812: ST_TO_ADDR
// if amount < min then
64813: LD_VAR 0 9
64817: PUSH
64818: LD_VAR 0 3
64822: LESS
64823: IFFALSE 64841
// r := r * 2 else
64825: LD_ADDR_VAR 0 7
64829: PUSH
64830: LD_VAR 0 7
64834: PUSH
64835: LD_INT 2
64837: MUL
64838: ST_TO_ADDR
64839: GO 64867
// if amount > max then
64841: LD_VAR 0 9
64845: PUSH
64846: LD_VAR 0 4
64850: GREATER
64851: IFFALSE 64867
// r := r / 2 ;
64853: LD_ADDR_VAR 0 7
64857: PUSH
64858: LD_VAR 0 7
64862: PUSH
64863: LD_INT 2
64865: DIVREAL
64866: ST_TO_ADDR
// time := time / r ;
64867: LD_ADDR_VAR 0 8
64871: PUSH
64872: LD_VAR 0 8
64876: PUSH
64877: LD_VAR 0 7
64881: DIVREAL
64882: ST_TO_ADDR
// if time < 0 then
64883: LD_VAR 0 8
64887: PUSH
64888: LD_INT 0
64890: LESS
64891: IFFALSE 64908
// time := time * - 1 ;
64893: LD_ADDR_VAR 0 8
64897: PUSH
64898: LD_VAR 0 8
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: MUL
64907: ST_TO_ADDR
// wait ( time ) ;
64908: LD_VAR 0 8
64912: PPUSH
64913: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64917: LD_INT 35
64919: PPUSH
64920: LD_INT 875
64922: PPUSH
64923: CALL_OW 12
64927: PPUSH
64928: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64932: LD_INT 1
64934: PPUSH
64935: LD_INT 5
64937: PPUSH
64938: CALL_OW 12
64942: PPUSH
64943: LD_VAR 0 1
64947: PPUSH
64948: LD_INT 1
64950: PPUSH
64951: CALL_OW 55
// end ;
64955: GO 64765
// end ;
64957: LD_VAR 0 5
64961: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64962: LD_INT 0
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
// if not turrets or not factories then
64972: LD_VAR 0 1
64976: NOT
64977: PUSH
64978: LD_VAR 0 2
64982: NOT
64983: OR
64984: IFFALSE 64988
// exit ;
64986: GO 65295
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64988: LD_ADDR_VAR 0 10
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: LD_INT 6
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 4
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 5
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 24
65030: PUSH
65031: LD_INT 25
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 23
65040: PUSH
65041: LD_INT 27
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 42
65054: PUSH
65055: LD_INT 43
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 44
65064: PUSH
65065: LD_INT 46
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 45
65074: PUSH
65075: LD_INT 47
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: ST_TO_ADDR
// result := [ ] ;
65092: LD_ADDR_VAR 0 3
65096: PUSH
65097: EMPTY
65098: ST_TO_ADDR
// for i in turrets do
65099: LD_ADDR_VAR 0 4
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: FOR_IN
65110: IFFALSE 65293
// begin nat := GetNation ( i ) ;
65112: LD_ADDR_VAR 0 7
65116: PUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: CALL_OW 248
65126: ST_TO_ADDR
// weapon := 0 ;
65127: LD_ADDR_VAR 0 8
65131: PUSH
65132: LD_INT 0
65134: ST_TO_ADDR
// if not nat then
65135: LD_VAR 0 7
65139: NOT
65140: IFFALSE 65144
// continue ;
65142: GO 65109
// for j in list [ nat ] do
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_VAR 0 10
65153: PUSH
65154: LD_VAR 0 7
65158: ARRAY
65159: PUSH
65160: FOR_IN
65161: IFFALSE 65202
// if GetBWeapon ( i ) = j [ 1 ] then
65163: LD_VAR 0 4
65167: PPUSH
65168: CALL_OW 269
65172: PUSH
65173: LD_VAR 0 5
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: EQUAL
65182: IFFALSE 65200
// begin weapon := j [ 2 ] ;
65184: LD_ADDR_VAR 0 8
65188: PUSH
65189: LD_VAR 0 5
65193: PUSH
65194: LD_INT 2
65196: ARRAY
65197: ST_TO_ADDR
// break ;
65198: GO 65202
// end ;
65200: GO 65160
65202: POP
65203: POP
// if not weapon then
65204: LD_VAR 0 8
65208: NOT
65209: IFFALSE 65213
// continue ;
65211: GO 65109
// for k in factories do
65213: LD_ADDR_VAR 0 6
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: FOR_IN
65224: IFFALSE 65289
// begin weapons := AvailableWeaponList ( k ) ;
65226: LD_ADDR_VAR 0 9
65230: PUSH
65231: LD_VAR 0 6
65235: PPUSH
65236: CALL_OW 478
65240: ST_TO_ADDR
// if not weapons then
65241: LD_VAR 0 9
65245: NOT
65246: IFFALSE 65250
// continue ;
65248: GO 65223
// if weapon in weapons then
65250: LD_VAR 0 8
65254: PUSH
65255: LD_VAR 0 9
65259: IN
65260: IFFALSE 65287
// begin result := [ i , weapon ] ;
65262: LD_ADDR_VAR 0 3
65266: PUSH
65267: LD_VAR 0 4
65271: PUSH
65272: LD_VAR 0 8
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: ST_TO_ADDR
// exit ;
65281: POP
65282: POP
65283: POP
65284: POP
65285: GO 65295
// end ; end ;
65287: GO 65223
65289: POP
65290: POP
// end ;
65291: GO 65109
65293: POP
65294: POP
// end ;
65295: LD_VAR 0 3
65299: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65300: LD_INT 0
65302: PPUSH
// if not side or side > 8 then
65303: LD_VAR 0 3
65307: NOT
65308: PUSH
65309: LD_VAR 0 3
65313: PUSH
65314: LD_INT 8
65316: GREATER
65317: OR
65318: IFFALSE 65322
// exit ;
65320: GO 65381
// if not range then
65322: LD_VAR 0 4
65326: NOT
65327: IFFALSE 65338
// range := - 12 ;
65329: LD_ADDR_VAR 0 4
65333: PUSH
65334: LD_INT 12
65336: NEG
65337: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65338: LD_VAR 0 1
65342: PPUSH
65343: LD_VAR 0 2
65347: PPUSH
65348: LD_VAR 0 3
65352: PPUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65362: LD_VAR 0 1
65366: PPUSH
65367: LD_VAR 0 2
65371: PPUSH
65372: LD_VAR 0 3
65376: PPUSH
65377: CALL_OW 331
// end ;
65381: LD_VAR 0 5
65385: RET
// export function Video ( mode ) ; begin
65386: LD_INT 0
65388: PPUSH
// ingame_video = mode ;
65389: LD_ADDR_OWVAR 52
65393: PUSH
65394: LD_VAR 0 1
65398: ST_TO_ADDR
// interface_hidden = mode ;
65399: LD_ADDR_OWVAR 54
65403: PUSH
65404: LD_VAR 0 1
65408: ST_TO_ADDR
// end ;
65409: LD_VAR 0 2
65413: RET
// export function Join ( array , element ) ; begin
65414: LD_INT 0
65416: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65417: LD_ADDR_VAR 0 3
65421: PUSH
65422: LD_VAR 0 1
65426: PPUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_INT 1
65434: PLUS
65435: PPUSH
65436: LD_VAR 0 2
65440: PPUSH
65441: CALL_OW 1
65445: ST_TO_ADDR
// end ;
65446: LD_VAR 0 3
65450: RET
// export function JoinUnion ( array , element ) ; begin
65451: LD_INT 0
65453: PPUSH
// result := array union element ;
65454: LD_ADDR_VAR 0 3
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_VAR 0 2
65468: UNION
65469: ST_TO_ADDR
// end ;
65470: LD_VAR 0 3
65474: RET
// export function GetBehemoths ( side ) ; begin
65475: LD_INT 0
65477: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65478: LD_ADDR_VAR 0 2
65482: PUSH
65483: LD_INT 22
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 31
65497: PUSH
65498: LD_INT 25
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PPUSH
65509: CALL_OW 69
65513: ST_TO_ADDR
// end ;
65514: LD_VAR 0 2
65518: RET
// export function Shuffle ( array ) ; var i , index ; begin
65519: LD_INT 0
65521: PPUSH
65522: PPUSH
65523: PPUSH
// result := [ ] ;
65524: LD_ADDR_VAR 0 2
65528: PUSH
65529: EMPTY
65530: ST_TO_ADDR
// if not array then
65531: LD_VAR 0 1
65535: NOT
65536: IFFALSE 65540
// exit ;
65538: GO 65639
// Randomize ;
65540: CALL_OW 10
// for i = array downto 1 do
65544: LD_ADDR_VAR 0 3
65548: PUSH
65549: DOUBLE
65550: LD_VAR 0 1
65554: INC
65555: ST_TO_ADDR
65556: LD_INT 1
65558: PUSH
65559: FOR_DOWNTO
65560: IFFALSE 65637
// begin index := rand ( 1 , array ) ;
65562: LD_ADDR_VAR 0 4
65566: PUSH
65567: LD_INT 1
65569: PPUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 12
65579: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65580: LD_ADDR_VAR 0 2
65584: PUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 1
65597: PLUS
65598: PPUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_VAR 0 4
65608: ARRAY
65609: PPUSH
65610: CALL_OW 2
65614: ST_TO_ADDR
// array := Delete ( array , index ) ;
65615: LD_ADDR_VAR 0 1
65619: PUSH
65620: LD_VAR 0 1
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: CALL_OW 3
65634: ST_TO_ADDR
// end ;
65635: GO 65559
65637: POP
65638: POP
// end ;
65639: LD_VAR 0 2
65643: RET
// export function GetBaseMaterials ( base ) ; begin
65644: LD_INT 0
65646: PPUSH
// result := [ 0 , 0 , 0 ] ;
65647: LD_ADDR_VAR 0 2
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: ST_TO_ADDR
// if not base then
65666: LD_VAR 0 1
65670: NOT
65671: IFFALSE 65675
// exit ;
65673: GO 65724
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65675: LD_ADDR_VAR 0 2
65679: PUSH
65680: LD_VAR 0 1
65684: PPUSH
65685: LD_INT 1
65687: PPUSH
65688: CALL_OW 275
65692: PUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: LD_INT 2
65700: PPUSH
65701: CALL_OW 275
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_INT 3
65713: PPUSH
65714: CALL_OW 275
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// end ;
65724: LD_VAR 0 2
65728: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
// result := array ;
65733: LD_ADDR_VAR 0 3
65737: PUSH
65738: LD_VAR 0 1
65742: ST_TO_ADDR
// if size > 0 then
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 0
65750: GREATER
65751: IFFALSE 65797
// for i := array downto size do
65753: LD_ADDR_VAR 0 4
65757: PUSH
65758: DOUBLE
65759: LD_VAR 0 1
65763: INC
65764: ST_TO_ADDR
65765: LD_VAR 0 2
65769: PUSH
65770: FOR_DOWNTO
65771: IFFALSE 65795
// result := Delete ( result , result ) ;
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: LD_VAR 0 3
65787: PPUSH
65788: CALL_OW 3
65792: ST_TO_ADDR
65793: GO 65770
65795: POP
65796: POP
// end ;
65797: LD_VAR 0 3
65801: RET
// export function ComExit ( unit ) ; var tmp ; begin
65802: LD_INT 0
65804: PPUSH
65805: PPUSH
// if not IsInUnit ( unit ) then
65806: LD_VAR 0 1
65810: PPUSH
65811: CALL_OW 310
65815: NOT
65816: IFFALSE 65820
// exit ;
65818: GO 65880
// tmp := IsInUnit ( unit ) ;
65820: LD_ADDR_VAR 0 3
65824: PUSH
65825: LD_VAR 0 1
65829: PPUSH
65830: CALL_OW 310
65834: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65835: LD_VAR 0 3
65839: PPUSH
65840: CALL_OW 247
65844: PUSH
65845: LD_INT 2
65847: EQUAL
65848: IFFALSE 65861
// ComExitVehicle ( unit ) else
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 121
65859: GO 65870
// ComExitBuilding ( unit ) ;
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 122
// result := tmp ;
65870: LD_ADDR_VAR 0 2
65874: PUSH
65875: LD_VAR 0 3
65879: ST_TO_ADDR
// end ;
65880: LD_VAR 0 2
65884: RET
// export function ComExitAll ( units ) ; var i ; begin
65885: LD_INT 0
65887: PPUSH
65888: PPUSH
// if not units then
65889: LD_VAR 0 1
65893: NOT
65894: IFFALSE 65898
// exit ;
65896: GO 65924
// for i in units do
65898: LD_ADDR_VAR 0 3
65902: PUSH
65903: LD_VAR 0 1
65907: PUSH
65908: FOR_IN
65909: IFFALSE 65922
// ComExit ( i ) ;
65911: LD_VAR 0 3
65915: PPUSH
65916: CALL 65802 0 1
65920: GO 65908
65922: POP
65923: POP
// end ;
65924: LD_VAR 0 2
65928: RET
// export function ResetHc ; begin
65929: LD_INT 0
65931: PPUSH
// InitHc ;
65932: CALL_OW 19
// hc_importance := 0 ;
65936: LD_ADDR_OWVAR 32
65940: PUSH
65941: LD_INT 0
65943: ST_TO_ADDR
// end ;
65944: LD_VAR 0 1
65948: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65949: LD_INT 0
65951: PPUSH
65952: PPUSH
65953: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65954: LD_ADDR_VAR 0 6
65958: PUSH
65959: LD_VAR 0 1
65963: PUSH
65964: LD_VAR 0 3
65968: PLUS
65969: PUSH
65970: LD_INT 2
65972: DIV
65973: ST_TO_ADDR
// if _x < 0 then
65974: LD_VAR 0 6
65978: PUSH
65979: LD_INT 0
65981: LESS
65982: IFFALSE 65999
// _x := _x * - 1 ;
65984: LD_ADDR_VAR 0 6
65988: PUSH
65989: LD_VAR 0 6
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: MUL
65998: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65999: LD_ADDR_VAR 0 7
66003: PUSH
66004: LD_VAR 0 2
66008: PUSH
66009: LD_VAR 0 4
66013: PLUS
66014: PUSH
66015: LD_INT 2
66017: DIV
66018: ST_TO_ADDR
// if _y < 0 then
66019: LD_VAR 0 7
66023: PUSH
66024: LD_INT 0
66026: LESS
66027: IFFALSE 66044
// _y := _y * - 1 ;
66029: LD_ADDR_VAR 0 7
66033: PUSH
66034: LD_VAR 0 7
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: MUL
66043: ST_TO_ADDR
// result := [ _x , _y ] ;
66044: LD_ADDR_VAR 0 5
66048: PUSH
66049: LD_VAR 0 6
66053: PUSH
66054: LD_VAR 0 7
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// end ;
66063: LD_VAR 0 5
66067: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66068: LD_INT 0
66070: PPUSH
66071: PPUSH
66072: PPUSH
66073: PPUSH
// task := GetTaskList ( unit ) ;
66074: LD_ADDR_VAR 0 7
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 437
66088: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66089: LD_VAR 0 7
66093: NOT
66094: PUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: LD_VAR 0 2
66104: PPUSH
66105: CALL_OW 308
66109: NOT
66110: AND
66111: IFFALSE 66115
// exit ;
66113: GO 66233
// if IsInArea ( unit , area ) then
66115: LD_VAR 0 1
66119: PPUSH
66120: LD_VAR 0 2
66124: PPUSH
66125: CALL_OW 308
66129: IFFALSE 66147
// begin ComMoveToArea ( unit , goAway ) ;
66131: LD_VAR 0 1
66135: PPUSH
66136: LD_VAR 0 3
66140: PPUSH
66141: CALL_OW 113
// exit ;
66145: GO 66233
// end ; if task [ 1 ] [ 1 ] <> M then
66147: LD_VAR 0 7
66151: PUSH
66152: LD_INT 1
66154: ARRAY
66155: PUSH
66156: LD_INT 1
66158: ARRAY
66159: PUSH
66160: LD_STRING M
66162: NONEQUAL
66163: IFFALSE 66167
// exit ;
66165: GO 66233
// x := task [ 1 ] [ 2 ] ;
66167: LD_ADDR_VAR 0 5
66171: PUSH
66172: LD_VAR 0 7
66176: PUSH
66177: LD_INT 1
66179: ARRAY
66180: PUSH
66181: LD_INT 2
66183: ARRAY
66184: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66185: LD_ADDR_VAR 0 6
66189: PUSH
66190: LD_VAR 0 7
66194: PUSH
66195: LD_INT 1
66197: ARRAY
66198: PUSH
66199: LD_INT 3
66201: ARRAY
66202: ST_TO_ADDR
// if InArea ( x , y , area ) then
66203: LD_VAR 0 5
66207: PPUSH
66208: LD_VAR 0 6
66212: PPUSH
66213: LD_VAR 0 2
66217: PPUSH
66218: CALL_OW 309
66222: IFFALSE 66233
// ComStop ( unit ) ;
66224: LD_VAR 0 1
66228: PPUSH
66229: CALL_OW 141
// end ;
66233: LD_VAR 0 4
66237: RET
// export function Abs ( value ) ; begin
66238: LD_INT 0
66240: PPUSH
// result := value ;
66241: LD_ADDR_VAR 0 2
66245: PUSH
66246: LD_VAR 0 1
66250: ST_TO_ADDR
// if value < 0 then
66251: LD_VAR 0 1
66255: PUSH
66256: LD_INT 0
66258: LESS
66259: IFFALSE 66276
// result := value * - 1 ;
66261: LD_ADDR_VAR 0 2
66265: PUSH
66266: LD_VAR 0 1
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: MUL
66275: ST_TO_ADDR
// end ;
66276: LD_VAR 0 2
66280: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66281: LD_INT 0
66283: PPUSH
66284: PPUSH
66285: PPUSH
66286: PPUSH
66287: PPUSH
66288: PPUSH
66289: PPUSH
66290: PPUSH
// if not unit or not building then
66291: LD_VAR 0 1
66295: NOT
66296: PUSH
66297: LD_VAR 0 2
66301: NOT
66302: OR
66303: IFFALSE 66307
// exit ;
66305: GO 66533
// x := GetX ( building ) ;
66307: LD_ADDR_VAR 0 4
66311: PUSH
66312: LD_VAR 0 2
66316: PPUSH
66317: CALL_OW 250
66321: ST_TO_ADDR
// y := GetY ( building ) ;
66322: LD_ADDR_VAR 0 6
66326: PUSH
66327: LD_VAR 0 2
66331: PPUSH
66332: CALL_OW 251
66336: ST_TO_ADDR
// d := GetDir ( building ) ;
66337: LD_ADDR_VAR 0 8
66341: PUSH
66342: LD_VAR 0 2
66346: PPUSH
66347: CALL_OW 254
66351: ST_TO_ADDR
// r := 4 ;
66352: LD_ADDR_VAR 0 9
66356: PUSH
66357: LD_INT 4
66359: ST_TO_ADDR
// for i := 1 to 5 do
66360: LD_ADDR_VAR 0 10
66364: PUSH
66365: DOUBLE
66366: LD_INT 1
66368: DEC
66369: ST_TO_ADDR
66370: LD_INT 5
66372: PUSH
66373: FOR_TO
66374: IFFALSE 66531
// begin _x := ShiftX ( x , d , r + i ) ;
66376: LD_ADDR_VAR 0 5
66380: PUSH
66381: LD_VAR 0 4
66385: PPUSH
66386: LD_VAR 0 8
66390: PPUSH
66391: LD_VAR 0 9
66395: PUSH
66396: LD_VAR 0 10
66400: PLUS
66401: PPUSH
66402: CALL_OW 272
66406: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66407: LD_ADDR_VAR 0 7
66411: PUSH
66412: LD_VAR 0 6
66416: PPUSH
66417: LD_VAR 0 8
66421: PPUSH
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 10
66431: PLUS
66432: PPUSH
66433: CALL_OW 273
66437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66438: LD_VAR 0 5
66442: PPUSH
66443: LD_VAR 0 7
66447: PPUSH
66448: CALL_OW 488
66452: PUSH
66453: LD_VAR 0 5
66457: PPUSH
66458: LD_VAR 0 7
66462: PPUSH
66463: CALL_OW 428
66467: PPUSH
66468: CALL_OW 247
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: IN
66483: NOT
66484: AND
66485: IFFALSE 66529
// begin ComMoveXY ( unit , _x , _y ) ;
66487: LD_VAR 0 1
66491: PPUSH
66492: LD_VAR 0 5
66496: PPUSH
66497: LD_VAR 0 7
66501: PPUSH
66502: CALL_OW 111
// result := [ _x , _y ] ;
66506: LD_ADDR_VAR 0 3
66510: PUSH
66511: LD_VAR 0 5
66515: PUSH
66516: LD_VAR 0 7
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// exit ;
66525: POP
66526: POP
66527: GO 66533
// end ; end ;
66529: GO 66373
66531: POP
66532: POP
// end ;
66533: LD_VAR 0 3
66537: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66538: LD_INT 0
66540: PPUSH
66541: PPUSH
66542: PPUSH
// result := 0 ;
66543: LD_ADDR_VAR 0 3
66547: PUSH
66548: LD_INT 0
66550: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66551: LD_VAR 0 1
66555: PUSH
66556: LD_INT 0
66558: LESS
66559: PUSH
66560: LD_VAR 0 1
66564: PUSH
66565: LD_INT 8
66567: GREATER
66568: OR
66569: PUSH
66570: LD_VAR 0 2
66574: PUSH
66575: LD_INT 0
66577: LESS
66578: OR
66579: PUSH
66580: LD_VAR 0 2
66584: PUSH
66585: LD_INT 8
66587: GREATER
66588: OR
66589: IFFALSE 66593
// exit ;
66591: GO 66668
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66593: LD_ADDR_VAR 0 4
66597: PUSH
66598: LD_INT 22
66600: PUSH
66601: LD_VAR 0 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PPUSH
66610: CALL_OW 69
66614: PUSH
66615: FOR_IN
66616: IFFALSE 66666
// begin un := UnitShoot ( i ) ;
66618: LD_ADDR_VAR 0 5
66622: PUSH
66623: LD_VAR 0 4
66627: PPUSH
66628: CALL_OW 504
66632: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66633: LD_VAR 0 5
66637: PPUSH
66638: CALL_OW 255
66642: PUSH
66643: LD_VAR 0 1
66647: EQUAL
66648: IFFALSE 66664
// begin result := un ;
66650: LD_ADDR_VAR 0 3
66654: PUSH
66655: LD_VAR 0 5
66659: ST_TO_ADDR
// exit ;
66660: POP
66661: POP
66662: GO 66668
// end ; end ;
66664: GO 66615
66666: POP
66667: POP
// end ;
66668: LD_VAR 0 3
66672: RET
// export function GetCargoBay ( units ) ; begin
66673: LD_INT 0
66675: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66676: LD_ADDR_VAR 0 2
66680: PUSH
66681: LD_VAR 0 1
66685: PPUSH
66686: LD_INT 2
66688: PUSH
66689: LD_INT 34
66691: PUSH
66692: LD_INT 12
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 34
66701: PUSH
66702: LD_INT 51
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 34
66711: PUSH
66712: LD_INT 32
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 34
66721: PUSH
66722: LD_EXP 20
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: PPUSH
66738: CALL_OW 72
66742: ST_TO_ADDR
// end ;
66743: LD_VAR 0 2
66747: RET
// export function Negate ( value ) ; begin
66748: LD_INT 0
66750: PPUSH
// result := not value ;
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 1
66760: NOT
66761: ST_TO_ADDR
// end ;
66762: LD_VAR 0 2
66766: RET
// export function Inc ( value ) ; begin
66767: LD_INT 0
66769: PPUSH
// result := value + 1 ;
66770: LD_ADDR_VAR 0 2
66774: PUSH
66775: LD_VAR 0 1
66779: PUSH
66780: LD_INT 1
66782: PLUS
66783: ST_TO_ADDR
// end ;
66784: LD_VAR 0 2
66788: RET
// export function Dec ( value ) ; begin
66789: LD_INT 0
66791: PPUSH
// result := value - 1 ;
66792: LD_ADDR_VAR 0 2
66796: PUSH
66797: LD_VAR 0 1
66801: PUSH
66802: LD_INT 1
66804: MINUS
66805: ST_TO_ADDR
// end ;
66806: LD_VAR 0 2
66810: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66811: LD_INT 0
66813: PPUSH
66814: PPUSH
66815: PPUSH
66816: PPUSH
66817: PPUSH
66818: PPUSH
66819: PPUSH
66820: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66821: LD_VAR 0 1
66825: PPUSH
66826: LD_VAR 0 2
66830: PPUSH
66831: CALL_OW 488
66835: NOT
66836: PUSH
66837: LD_VAR 0 3
66841: PPUSH
66842: LD_VAR 0 4
66846: PPUSH
66847: CALL_OW 488
66851: NOT
66852: OR
66853: IFFALSE 66866
// begin result := - 1 ;
66855: LD_ADDR_VAR 0 5
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: ST_TO_ADDR
// exit ;
66864: GO 67101
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66866: LD_ADDR_VAR 0 12
66870: PUSH
66871: LD_VAR 0 1
66875: PPUSH
66876: LD_VAR 0 2
66880: PPUSH
66881: LD_VAR 0 3
66885: PPUSH
66886: LD_VAR 0 4
66890: PPUSH
66891: CALL 65949 0 4
66895: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66896: LD_ADDR_VAR 0 11
66900: PUSH
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_VAR 0 2
66910: PPUSH
66911: LD_VAR 0 12
66915: PUSH
66916: LD_INT 1
66918: ARRAY
66919: PPUSH
66920: LD_VAR 0 12
66924: PUSH
66925: LD_INT 2
66927: ARRAY
66928: PPUSH
66929: CALL_OW 298
66933: ST_TO_ADDR
// distance := 9999 ;
66934: LD_ADDR_VAR 0 10
66938: PUSH
66939: LD_INT 9999
66941: ST_TO_ADDR
// for i := 0 to 5 do
66942: LD_ADDR_VAR 0 6
66946: PUSH
66947: DOUBLE
66948: LD_INT 0
66950: DEC
66951: ST_TO_ADDR
66952: LD_INT 5
66954: PUSH
66955: FOR_TO
66956: IFFALSE 67099
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66958: LD_ADDR_VAR 0 7
66962: PUSH
66963: LD_VAR 0 1
66967: PPUSH
66968: LD_VAR 0 6
66972: PPUSH
66973: LD_VAR 0 11
66977: PPUSH
66978: CALL_OW 272
66982: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66983: LD_ADDR_VAR 0 8
66987: PUSH
66988: LD_VAR 0 2
66992: PPUSH
66993: LD_VAR 0 6
66997: PPUSH
66998: LD_VAR 0 11
67002: PPUSH
67003: CALL_OW 273
67007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67008: LD_VAR 0 7
67012: PPUSH
67013: LD_VAR 0 8
67017: PPUSH
67018: CALL_OW 488
67022: NOT
67023: IFFALSE 67027
// continue ;
67025: GO 66955
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67027: LD_ADDR_VAR 0 9
67031: PUSH
67032: LD_VAR 0 12
67036: PUSH
67037: LD_INT 1
67039: ARRAY
67040: PPUSH
67041: LD_VAR 0 12
67045: PUSH
67046: LD_INT 2
67048: ARRAY
67049: PPUSH
67050: LD_VAR 0 7
67054: PPUSH
67055: LD_VAR 0 8
67059: PPUSH
67060: CALL_OW 298
67064: ST_TO_ADDR
// if tmp < distance then
67065: LD_VAR 0 9
67069: PUSH
67070: LD_VAR 0 10
67074: LESS
67075: IFFALSE 67097
// begin result := i ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: LD_VAR 0 6
67086: ST_TO_ADDR
// distance := tmp ;
67087: LD_ADDR_VAR 0 10
67091: PUSH
67092: LD_VAR 0 9
67096: ST_TO_ADDR
// end ; end ;
67097: GO 66955
67099: POP
67100: POP
// end ;
67101: LD_VAR 0 5
67105: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67106: LD_INT 0
67108: PPUSH
67109: PPUSH
// if not driver or not IsInUnit ( driver ) then
67110: LD_VAR 0 1
67114: NOT
67115: PUSH
67116: LD_VAR 0 1
67120: PPUSH
67121: CALL_OW 310
67125: NOT
67126: OR
67127: IFFALSE 67131
// exit ;
67129: GO 67221
// vehicle := IsInUnit ( driver ) ;
67131: LD_ADDR_VAR 0 3
67135: PUSH
67136: LD_VAR 0 1
67140: PPUSH
67141: CALL_OW 310
67145: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_STRING \
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: PUSH
67181: LD_STRING E
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: LD_VAR 0 3
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PPUSH
67217: CALL_OW 446
// end ;
67221: LD_VAR 0 2
67225: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67226: LD_INT 0
67228: PPUSH
67229: PPUSH
// if not driver or not IsInUnit ( driver ) then
67230: LD_VAR 0 1
67234: NOT
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 310
67245: NOT
67246: OR
67247: IFFALSE 67251
// exit ;
67249: GO 67341
// vehicle := IsInUnit ( driver ) ;
67251: LD_ADDR_VAR 0 3
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: CALL_OW 310
67265: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67266: LD_VAR 0 1
67270: PPUSH
67271: LD_STRING \
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: PUSH
67301: LD_STRING E
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_VAR 0 3
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PPUSH
67337: CALL_OW 447
// end ;
67341: LD_VAR 0 2
67345: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67346: LD_INT 0
67348: PPUSH
67349: PPUSH
67350: PPUSH
// tmp := [ ] ;
67351: LD_ADDR_VAR 0 5
67355: PUSH
67356: EMPTY
67357: ST_TO_ADDR
// for i in units do
67358: LD_ADDR_VAR 0 4
67362: PUSH
67363: LD_VAR 0 1
67367: PUSH
67368: FOR_IN
67369: IFFALSE 67407
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67371: LD_ADDR_VAR 0 5
67375: PUSH
67376: LD_VAR 0 5
67380: PPUSH
67381: LD_VAR 0 5
67385: PUSH
67386: LD_INT 1
67388: PLUS
67389: PPUSH
67390: LD_VAR 0 4
67394: PPUSH
67395: CALL_OW 256
67399: PPUSH
67400: CALL_OW 2
67404: ST_TO_ADDR
67405: GO 67368
67407: POP
67408: POP
// if not tmp then
67409: LD_VAR 0 5
67413: NOT
67414: IFFALSE 67418
// exit ;
67416: GO 67466
// if asc then
67418: LD_VAR 0 2
67422: IFFALSE 67446
// result := SortListByListAsc ( units , tmp ) else
67424: LD_ADDR_VAR 0 3
67428: PUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: LD_VAR 0 5
67438: PPUSH
67439: CALL_OW 76
67443: ST_TO_ADDR
67444: GO 67466
// result := SortListByListDesc ( units , tmp ) ;
67446: LD_ADDR_VAR 0 3
67450: PUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: LD_VAR 0 5
67460: PPUSH
67461: CALL_OW 77
67465: ST_TO_ADDR
// end ;
67466: LD_VAR 0 3
67470: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67471: LD_INT 0
67473: PPUSH
67474: PPUSH
// task := GetTaskList ( mech ) ;
67475: LD_ADDR_VAR 0 4
67479: PUSH
67480: LD_VAR 0 1
67484: PPUSH
67485: CALL_OW 437
67489: ST_TO_ADDR
// if not task then
67490: LD_VAR 0 4
67494: NOT
67495: IFFALSE 67499
// exit ;
67497: GO 67541
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_VAR 0 4
67508: PUSH
67509: LD_INT 1
67511: ARRAY
67512: PUSH
67513: LD_INT 1
67515: ARRAY
67516: PUSH
67517: LD_STRING r
67519: EQUAL
67520: PUSH
67521: LD_VAR 0 4
67525: PUSH
67526: LD_INT 1
67528: ARRAY
67529: PUSH
67530: LD_INT 4
67532: ARRAY
67533: PUSH
67534: LD_VAR 0 2
67538: EQUAL
67539: AND
67540: ST_TO_ADDR
// end ;
67541: LD_VAR 0 3
67545: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67546: LD_INT 0
67548: PPUSH
// SetDir ( unit , d ) ;
67549: LD_VAR 0 1
67553: PPUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67563: LD_VAR 0 1
67567: PPUSH
67568: LD_VAR 0 2
67572: PPUSH
67573: LD_VAR 0 3
67577: PPUSH
67578: LD_VAR 0 5
67582: PPUSH
67583: CALL_OW 48
// end ;
67587: LD_VAR 0 6
67591: RET
// export function ToNaturalNumber ( number ) ; begin
67592: LD_INT 0
67594: PPUSH
// result := number div 1 ;
67595: LD_ADDR_VAR 0 2
67599: PUSH
67600: LD_VAR 0 1
67604: PUSH
67605: LD_INT 1
67607: DIV
67608: ST_TO_ADDR
// if number < 0 then
67609: LD_VAR 0 1
67613: PUSH
67614: LD_INT 0
67616: LESS
67617: IFFALSE 67627
// result := 0 ;
67619: LD_ADDR_VAR 0 2
67623: PUSH
67624: LD_INT 0
67626: ST_TO_ADDR
// end ;
67627: LD_VAR 0 2
67631: RET
// export function SortByClass ( units , class ) ; var un ; begin
67632: LD_INT 0
67634: PPUSH
67635: PPUSH
// if not units or not class then
67636: LD_VAR 0 1
67640: NOT
67641: PUSH
67642: LD_VAR 0 2
67646: NOT
67647: OR
67648: IFFALSE 67652
// exit ;
67650: GO 67747
// result := [ ] ;
67652: LD_ADDR_VAR 0 3
67656: PUSH
67657: EMPTY
67658: ST_TO_ADDR
// for un in units do
67659: LD_ADDR_VAR 0 4
67663: PUSH
67664: LD_VAR 0 1
67668: PUSH
67669: FOR_IN
67670: IFFALSE 67745
// if GetClass ( un ) = class then
67672: LD_VAR 0 4
67676: PPUSH
67677: CALL_OW 257
67681: PUSH
67682: LD_VAR 0 2
67686: EQUAL
67687: IFFALSE 67714
// result := Insert ( result , 1 , un ) else
67689: LD_ADDR_VAR 0 3
67693: PUSH
67694: LD_VAR 0 3
67698: PPUSH
67699: LD_INT 1
67701: PPUSH
67702: LD_VAR 0 4
67706: PPUSH
67707: CALL_OW 2
67711: ST_TO_ADDR
67712: GO 67743
// result := Replace ( result , result + 1 , un ) ;
67714: LD_ADDR_VAR 0 3
67718: PUSH
67719: LD_VAR 0 3
67723: PPUSH
67724: LD_VAR 0 3
67728: PUSH
67729: LD_INT 1
67731: PLUS
67732: PPUSH
67733: LD_VAR 0 4
67737: PPUSH
67738: CALL_OW 1
67742: ST_TO_ADDR
67743: GO 67669
67745: POP
67746: POP
// end ;
67747: LD_VAR 0 3
67751: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
67758: PPUSH
67759: PPUSH
67760: PPUSH
// result := [ ] ;
67761: LD_ADDR_VAR 0 4
67765: PUSH
67766: EMPTY
67767: ST_TO_ADDR
// if x - r < 0 then
67768: LD_VAR 0 1
67772: PUSH
67773: LD_VAR 0 3
67777: MINUS
67778: PUSH
67779: LD_INT 0
67781: LESS
67782: IFFALSE 67794
// min_x := 0 else
67784: LD_ADDR_VAR 0 8
67788: PUSH
67789: LD_INT 0
67791: ST_TO_ADDR
67792: GO 67810
// min_x := x - r ;
67794: LD_ADDR_VAR 0 8
67798: PUSH
67799: LD_VAR 0 1
67803: PUSH
67804: LD_VAR 0 3
67808: MINUS
67809: ST_TO_ADDR
// if y - r < 0 then
67810: LD_VAR 0 2
67814: PUSH
67815: LD_VAR 0 3
67819: MINUS
67820: PUSH
67821: LD_INT 0
67823: LESS
67824: IFFALSE 67836
// min_y := 0 else
67826: LD_ADDR_VAR 0 7
67830: PUSH
67831: LD_INT 0
67833: ST_TO_ADDR
67834: GO 67852
// min_y := y - r ;
67836: LD_ADDR_VAR 0 7
67840: PUSH
67841: LD_VAR 0 2
67845: PUSH
67846: LD_VAR 0 3
67850: MINUS
67851: ST_TO_ADDR
// max_x := x + r ;
67852: LD_ADDR_VAR 0 9
67856: PUSH
67857: LD_VAR 0 1
67861: PUSH
67862: LD_VAR 0 3
67866: PLUS
67867: ST_TO_ADDR
// max_y := y + r ;
67868: LD_ADDR_VAR 0 10
67872: PUSH
67873: LD_VAR 0 2
67877: PUSH
67878: LD_VAR 0 3
67882: PLUS
67883: ST_TO_ADDR
// for _x = min_x to max_x do
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: DOUBLE
67890: LD_VAR 0 8
67894: DEC
67895: ST_TO_ADDR
67896: LD_VAR 0 9
67900: PUSH
67901: FOR_TO
67902: IFFALSE 68003
// for _y = min_y to max_y do
67904: LD_ADDR_VAR 0 6
67908: PUSH
67909: DOUBLE
67910: LD_VAR 0 7
67914: DEC
67915: ST_TO_ADDR
67916: LD_VAR 0 10
67920: PUSH
67921: FOR_TO
67922: IFFALSE 67999
// begin if not ValidHex ( _x , _y ) then
67924: LD_VAR 0 5
67928: PPUSH
67929: LD_VAR 0 6
67933: PPUSH
67934: CALL_OW 488
67938: NOT
67939: IFFALSE 67943
// continue ;
67941: GO 67921
// if GetResourceTypeXY ( _x , _y ) then
67943: LD_VAR 0 5
67947: PPUSH
67948: LD_VAR 0 6
67952: PPUSH
67953: CALL_OW 283
67957: IFFALSE 67997
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67959: LD_ADDR_VAR 0 4
67963: PUSH
67964: LD_VAR 0 4
67968: PPUSH
67969: LD_VAR 0 4
67973: PUSH
67974: LD_INT 1
67976: PLUS
67977: PPUSH
67978: LD_VAR 0 5
67982: PUSH
67983: LD_VAR 0 6
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PPUSH
67992: CALL_OW 1
67996: ST_TO_ADDR
// end ;
67997: GO 67921
67999: POP
68000: POP
68001: GO 67901
68003: POP
68004: POP
// end ;
68005: LD_VAR 0 4
68009: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68010: LD_INT 0
68012: PPUSH
68013: PPUSH
68014: PPUSH
68015: PPUSH
68016: PPUSH
68017: PPUSH
68018: PPUSH
68019: PPUSH
// if not units then
68020: LD_VAR 0 1
68024: NOT
68025: IFFALSE 68029
// exit ;
68027: GO 68454
// result := UnitFilter ( units , [ f_ok ] ) ;
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: LD_INT 50
68041: PUSH
68042: EMPTY
68043: LIST
68044: PPUSH
68045: CALL_OW 72
68049: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68050: LD_ADDR_VAR 0 8
68054: PUSH
68055: LD_VAR 0 1
68059: PUSH
68060: LD_INT 1
68062: ARRAY
68063: PPUSH
68064: CALL_OW 255
68068: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68069: LD_ADDR_VAR 0 10
68073: PUSH
68074: LD_INT 29
68076: PUSH
68077: LD_EXP 23
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: ST_TO_ADDR
// if not result then
68086: LD_VAR 0 3
68090: NOT
68091: IFFALSE 68095
// exit ;
68093: GO 68454
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68095: LD_ADDR_VAR 0 5
68099: PUSH
68100: LD_INT 81
68102: PUSH
68103: LD_VAR 0 8
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PPUSH
68112: CALL_OW 69
68116: ST_TO_ADDR
// for i in result do
68117: LD_ADDR_VAR 0 4
68121: PUSH
68122: LD_VAR 0 3
68126: PUSH
68127: FOR_IN
68128: IFFALSE 68452
// begin tag := GetTag ( i ) + 1 ;
68130: LD_ADDR_VAR 0 9
68134: PUSH
68135: LD_VAR 0 4
68139: PPUSH
68140: CALL_OW 110
68144: PUSH
68145: LD_INT 1
68147: PLUS
68148: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68149: LD_ADDR_VAR 0 7
68153: PUSH
68154: LD_VAR 0 4
68158: PPUSH
68159: CALL_OW 250
68163: PPUSH
68164: LD_VAR 0 4
68168: PPUSH
68169: CALL_OW 251
68173: PPUSH
68174: LD_INT 6
68176: PPUSH
68177: CALL 67752 0 3
68181: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68182: LD_VAR 0 7
68186: PUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 264
68196: PUSH
68197: LD_VAR 0 10
68201: IN
68202: NOT
68203: AND
68204: IFFALSE 68243
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68206: LD_VAR 0 4
68210: PPUSH
68211: LD_VAR 0 7
68215: PUSH
68216: LD_INT 1
68218: ARRAY
68219: PUSH
68220: LD_INT 1
68222: ARRAY
68223: PPUSH
68224: LD_VAR 0 7
68228: PUSH
68229: LD_INT 1
68231: ARRAY
68232: PUSH
68233: LD_INT 2
68235: ARRAY
68236: PPUSH
68237: CALL_OW 116
68241: GO 68450
// if path > tag then
68243: LD_VAR 0 2
68247: PUSH
68248: LD_VAR 0 9
68252: GREATER
68253: IFFALSE 68420
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68255: LD_ADDR_VAR 0 6
68259: PUSH
68260: LD_VAR 0 5
68264: PPUSH
68265: LD_INT 91
68267: PUSH
68268: LD_VAR 0 4
68272: PUSH
68273: LD_INT 12
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: PPUSH
68281: CALL_OW 72
68285: ST_TO_ADDR
// if nearEnemy then
68286: LD_VAR 0 6
68290: IFFALSE 68318
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68292: LD_VAR 0 4
68296: PPUSH
68297: LD_VAR 0 6
68301: PPUSH
68302: LD_VAR 0 4
68306: PPUSH
68307: CALL_OW 74
68311: PPUSH
68312: CALL_OW 115
68316: GO 68418
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68318: LD_VAR 0 4
68322: PPUSH
68323: LD_VAR 0 2
68327: PUSH
68328: LD_VAR 0 9
68332: ARRAY
68333: PUSH
68334: LD_INT 1
68336: ARRAY
68337: PPUSH
68338: LD_VAR 0 2
68342: PUSH
68343: LD_VAR 0 9
68347: ARRAY
68348: PUSH
68349: LD_INT 2
68351: ARRAY
68352: PPUSH
68353: CALL_OW 297
68357: PUSH
68358: LD_INT 6
68360: GREATER
68361: IFFALSE 68404
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68363: LD_VAR 0 4
68367: PPUSH
68368: LD_VAR 0 2
68372: PUSH
68373: LD_VAR 0 9
68377: ARRAY
68378: PUSH
68379: LD_INT 1
68381: ARRAY
68382: PPUSH
68383: LD_VAR 0 2
68387: PUSH
68388: LD_VAR 0 9
68392: ARRAY
68393: PUSH
68394: LD_INT 2
68396: ARRAY
68397: PPUSH
68398: CALL_OW 114
68402: GO 68418
// SetTag ( i , tag ) ;
68404: LD_VAR 0 4
68408: PPUSH
68409: LD_VAR 0 9
68413: PPUSH
68414: CALL_OW 109
// end else
68418: GO 68450
// if enemy then
68420: LD_VAR 0 5
68424: IFFALSE 68450
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68426: LD_VAR 0 4
68430: PPUSH
68431: LD_VAR 0 5
68435: PPUSH
68436: LD_VAR 0 4
68440: PPUSH
68441: CALL_OW 74
68445: PPUSH
68446: CALL_OW 115
// end ;
68450: GO 68127
68452: POP
68453: POP
// end ;
68454: LD_VAR 0 3
68458: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68459: LD_INT 0
68461: PPUSH
68462: PPUSH
68463: PPUSH
// if not unit or IsInUnit ( unit ) then
68464: LD_VAR 0 1
68468: NOT
68469: PUSH
68470: LD_VAR 0 1
68474: PPUSH
68475: CALL_OW 310
68479: OR
68480: IFFALSE 68484
// exit ;
68482: GO 68575
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68484: LD_ADDR_VAR 0 4
68488: PUSH
68489: LD_VAR 0 1
68493: PPUSH
68494: CALL_OW 250
68498: PPUSH
68499: LD_VAR 0 2
68503: PPUSH
68504: LD_INT 1
68506: PPUSH
68507: CALL_OW 272
68511: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: CALL_OW 251
68526: PPUSH
68527: LD_VAR 0 2
68531: PPUSH
68532: LD_INT 1
68534: PPUSH
68535: CALL_OW 273
68539: ST_TO_ADDR
// if ValidHex ( x , y ) then
68540: LD_VAR 0 4
68544: PPUSH
68545: LD_VAR 0 5
68549: PPUSH
68550: CALL_OW 488
68554: IFFALSE 68575
// ComTurnXY ( unit , x , y ) ;
68556: LD_VAR 0 1
68560: PPUSH
68561: LD_VAR 0 4
68565: PPUSH
68566: LD_VAR 0 5
68570: PPUSH
68571: CALL_OW 118
// end ;
68575: LD_VAR 0 3
68579: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68580: LD_INT 0
68582: PPUSH
68583: PPUSH
// result := false ;
68584: LD_ADDR_VAR 0 3
68588: PUSH
68589: LD_INT 0
68591: ST_TO_ADDR
// if not units then
68592: LD_VAR 0 2
68596: NOT
68597: IFFALSE 68601
// exit ;
68599: GO 68646
// for i in units do
68601: LD_ADDR_VAR 0 4
68605: PUSH
68606: LD_VAR 0 2
68610: PUSH
68611: FOR_IN
68612: IFFALSE 68644
// if See ( side , i ) then
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_VAR 0 4
68623: PPUSH
68624: CALL_OW 292
68628: IFFALSE 68642
// begin result := true ;
68630: LD_ADDR_VAR 0 3
68634: PUSH
68635: LD_INT 1
68637: ST_TO_ADDR
// exit ;
68638: POP
68639: POP
68640: GO 68646
// end ;
68642: GO 68611
68644: POP
68645: POP
// end ;
68646: LD_VAR 0 3
68650: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68651: LD_INT 0
68653: PPUSH
68654: PPUSH
68655: PPUSH
68656: PPUSH
// if not unit or not points then
68657: LD_VAR 0 1
68661: NOT
68662: PUSH
68663: LD_VAR 0 2
68667: NOT
68668: OR
68669: IFFALSE 68673
// exit ;
68671: GO 68763
// dist := 99999 ;
68673: LD_ADDR_VAR 0 5
68677: PUSH
68678: LD_INT 99999
68680: ST_TO_ADDR
// for i in points do
68681: LD_ADDR_VAR 0 4
68685: PUSH
68686: LD_VAR 0 2
68690: PUSH
68691: FOR_IN
68692: IFFALSE 68761
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68694: LD_ADDR_VAR 0 6
68698: PUSH
68699: LD_VAR 0 1
68703: PPUSH
68704: LD_VAR 0 4
68708: PUSH
68709: LD_INT 1
68711: ARRAY
68712: PPUSH
68713: LD_VAR 0 4
68717: PUSH
68718: LD_INT 2
68720: ARRAY
68721: PPUSH
68722: CALL_OW 297
68726: ST_TO_ADDR
// if tmpDist < dist then
68727: LD_VAR 0 6
68731: PUSH
68732: LD_VAR 0 5
68736: LESS
68737: IFFALSE 68759
// begin result := i ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_VAR 0 4
68748: ST_TO_ADDR
// dist := tmpDist ;
68749: LD_ADDR_VAR 0 5
68753: PUSH
68754: LD_VAR 0 6
68758: ST_TO_ADDR
// end ; end ;
68759: GO 68691
68761: POP
68762: POP
// end ; end_of_file
68763: LD_VAR 0 3
68767: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68768: LD_VAR 0 1
68772: PUSH
68773: LD_INT 200
68775: DOUBLE
68776: GREATEREQUAL
68777: IFFALSE 68785
68779: LD_INT 299
68781: DOUBLE
68782: LESSEQUAL
68783: IFTRUE 68787
68785: GO 68819
68787: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68788: LD_VAR 0 1
68792: PPUSH
68793: LD_VAR 0 2
68797: PPUSH
68798: LD_VAR 0 3
68802: PPUSH
68803: LD_VAR 0 4
68807: PPUSH
68808: LD_VAR 0 5
68812: PPUSH
68813: CALL 24794 0 5
68817: GO 68896
68819: LD_INT 300
68821: DOUBLE
68822: GREATEREQUAL
68823: IFFALSE 68831
68825: LD_INT 399
68827: DOUBLE
68828: LESSEQUAL
68829: IFTRUE 68833
68831: GO 68895
68833: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68834: LD_VAR 0 1
68838: PPUSH
68839: LD_VAR 0 2
68843: PPUSH
68844: LD_VAR 0 3
68848: PPUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: LD_VAR 0 5
68858: PPUSH
68859: LD_VAR 0 6
68863: PPUSH
68864: LD_VAR 0 7
68868: PPUSH
68869: LD_VAR 0 8
68873: PPUSH
68874: LD_VAR 0 9
68878: PPUSH
68879: LD_VAR 0 10
68883: PPUSH
68884: LD_VAR 0 11
68888: PPUSH
68889: CALL 22692 0 11
68893: GO 68896
68895: POP
// end ;
68896: PPOPN 11
68898: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_VAR 0 2
68908: PPUSH
68909: LD_VAR 0 3
68913: PPUSH
68914: LD_VAR 0 4
68918: PPUSH
68919: LD_VAR 0 5
68923: PPUSH
68924: CALL 24786 0 5
// end ; end_of_file
68928: PPOPN 5
68930: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_VAR 0 2
68940: PPUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: LD_VAR 0 4
68950: PPUSH
68951: LD_VAR 0 5
68955: PPUSH
68956: LD_VAR 0 6
68960: PPUSH
68961: CALL 10887 0 6
// end ;
68965: PPOPN 6
68967: END
