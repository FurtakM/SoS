// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1365 0 0
// PrepareDifficulty ;
 115: CALL 1661 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 25026 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 25026 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 25026 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 25026 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side = 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation = 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 25026 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1128: LD_INT 0
1130: PPUSH
// uc_nation := 3 ;
1131: LD_ADDR_OWVAR 21
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_side := 3 ;
1139: LD_ADDR_OWVAR 20
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// if Difficulty > 1 then
1147: LD_OWVAR 67
1151: PUSH
1152: LD_INT 1
1154: GREATER
1155: IFFALSE 1215
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 8
1168: PUSH
1169: LD_INT 9
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_OWVAR 67
1181: ARRAY
1182: PPUSH
1183: CALL_OW 380
// baseGuard := CreateHuman ;
1187: LD_ADDR_EXP 18
1191: PUSH
1192: CALL_OW 44
1196: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1197: LD_EXP 18
1201: PPUSH
1202: LD_INT 39
1204: PPUSH
1205: LD_INT 67
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1215: LD_INT 116
1217: PPUSH
1218: LD_INT 50
1220: PPUSH
1221: LD_INT 74
1223: PPUSH
1224: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1228: LD_INT 3
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 45
1236: PPUSH
1237: LD_INT 10
1239: PPUSH
1240: LD_INT 9
1242: PPUSH
1243: LD_INT 2
1245: PPUSH
1246: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1250: LD_INT 3
1252: PPUSH
1253: LD_INT 3
1255: PPUSH
1256: LD_INT 22
1258: PPUSH
1259: LD_INT 10
1261: PPUSH
1262: LD_INT 2
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1272: LD_INT 3
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 10
1283: PPUSH
1284: LD_INT 3
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 3
1299: PPUSH
1300: LD_INT 40
1302: PPUSH
1303: LD_INT 10
1305: PPUSH
1306: LD_INT 3
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1316: LD_INT 3
1318: PPUSH
1319: LD_INT 3
1321: PPUSH
1322: LD_INT 14
1324: PPUSH
1325: LD_INT 10
1327: PPUSH
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: LD_INT 15
1346: PPUSH
1347: LD_INT 10
1349: PPUSH
1350: LD_INT 4
1352: PPUSH
1353: LD_INT 2
1355: PPUSH
1356: CALL 1551 0 6
// end ; end_of_file
1360: LD_VAR 0 1
1364: RET
// export function CreateNature ; var i ; begin
1365: LD_INT 0
1367: PPUSH
1368: PPUSH
// uc_side := 0 ;
1369: LD_ADDR_OWVAR 20
1373: PUSH
1374: LD_INT 0
1376: ST_TO_ADDR
// uc_nation := 0 ;
1377: LD_ADDR_OWVAR 21
1381: PUSH
1382: LD_INT 0
1384: ST_TO_ADDR
// hc_class := class_apeman ;
1385: LD_ADDR_OWVAR 28
1389: PUSH
1390: LD_INT 12
1392: ST_TO_ADDR
// hc_gallery :=  ;
1393: LD_ADDR_OWVAR 33
1397: PUSH
1398: LD_STRING 
1400: ST_TO_ADDR
// hc_name :=  ;
1401: LD_ADDR_OWVAR 26
1405: PUSH
1406: LD_STRING 
1408: ST_TO_ADDR
// for i = 1 to 7 do
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_INT 7
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1504
// begin hc_class := class_apeman ;
1425: LD_ADDR_OWVAR 28
1429: PUSH
1430: LD_INT 12
1432: ST_TO_ADDR
// hc_gallery :=  ;
1433: LD_ADDR_OWVAR 33
1437: PUSH
1438: LD_STRING 
1440: ST_TO_ADDR
// hc_name :=  ;
1441: LD_ADDR_OWVAR 26
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: LD_INT 0
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1472: LD_ADDR_OWVAR 29
1476: PUSH
1477: LD_INT 11
1479: PUSH
1480: LD_INT 10
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1487: CALL_OW 44
1491: PPUSH
1492: LD_INT 16
1494: PPUSH
1495: LD_INT 0
1497: PPUSH
1498: CALL_OW 49
// end ;
1502: GO 1422
1504: POP
1505: POP
// end ;
1506: LD_VAR 0 1
1510: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
// for i in charactersList do
1515: LD_ADDR_VAR 0 4
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1544
// SaveCharacters ( i , ident ) ;
1528: LD_VAR 0 4
1532: PPUSH
1533: LD_VAR 0 2
1537: PPUSH
1538: CALL_OW 38
1542: GO 1525
1544: POP
1545: POP
// end ;
1546: LD_VAR 0 3
1550: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1551: LD_INT 0
1553: PPUSH
1554: PPUSH
1555: PPUSH
1556: PPUSH
// for i = 1 to count do
1557: LD_ADDR_VAR 0 8
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_VAR 0 6
1571: PUSH
1572: FOR_TO
1573: IFFALSE 1654
// begin uc_side = side ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_VAR 0 1
1584: ST_TO_ADDR
// uc_nation = nation ;
1585: LD_ADDR_OWVAR 21
1589: PUSH
1590: LD_VAR 0 2
1594: ST_TO_ADDR
// hc_gallery =  ;
1595: LD_ADDR_OWVAR 33
1599: PUSH
1600: LD_STRING 
1602: ST_TO_ADDR
// hc_name =  ;
1603: LD_ADDR_OWVAR 26
1607: PUSH
1608: LD_STRING 
1610: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1611: LD_INT 0
1613: PPUSH
1614: LD_VAR 0 5
1618: PPUSH
1619: LD_VAR 0 4
1623: PPUSH
1624: CALL_OW 380
// un = CreateHuman ;
1628: LD_ADDR_VAR 0 10
1632: PUSH
1633: CALL_OW 44
1637: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1638: LD_VAR 0 10
1642: PPUSH
1643: LD_VAR 0 3
1647: PPUSH
1648: CALL_OW 52
// end ;
1652: GO 1572
1654: POP
1655: POP
// end ;
1656: LD_VAR 0 7
1660: RET
// export function PrepareDifficulty ; begin
1661: LD_INT 0
1663: PPUSH
// if difficulty = 1 then
1664: LD_OWVAR 67
1668: PUSH
1669: LD_INT 1
1671: EQUAL
1672: IFFALSE 1752
// begin SetTech ( 57 , 3 , state_disabled ) ;
1674: LD_INT 57
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1687: LD_INT 58
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1700: LD_INT 59
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 3
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1726: LD_INT 52
1728: PPUSH
1729: LD_INT 3
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1739: LD_INT 53
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 322
// end ; if difficulty = 2 then
1752: LD_OWVAR 67
1756: PUSH
1757: LD_INT 2
1759: EQUAL
1760: IFFALSE 1840
// begin SetTech ( 57 , 3 , state_enabled ) ;
1762: LD_INT 57
1764: PPUSH
1765: LD_INT 3
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1775: LD_INT 58
1777: PPUSH
1778: LD_INT 3
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1788: LD_INT 59
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1801: LD_INT 51
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1814: LD_INT 52
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1827: LD_INT 53
1829: PPUSH
1830: LD_INT 3
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 322
// end ; if difficulty = 3 then
1840: LD_OWVAR 67
1844: PUSH
1845: LD_INT 3
1847: EQUAL
1848: IFFALSE 1928
// begin SetTech ( 57 , 3 , state_enabled ) ;
1850: LD_INT 57
1852: PPUSH
1853: LD_INT 3
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1863: LD_INT 58
1865: PPUSH
1866: LD_INT 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1876: LD_INT 59
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1889: LD_INT 51
1891: PPUSH
1892: LD_INT 3
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1902: LD_INT 52
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1915: LD_INT 53
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 322
// end ; end ;
1928: LD_VAR 0 1
1932: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1940: LD_ADDR_VAR 0 8
1944: PUSH
1945: LD_INT 48
1947: PUSH
1948: LD_INT 49
1950: PUSH
1951: LD_INT 50
1953: PUSH
1954: LD_INT 20
1956: PUSH
1957: LD_INT 1
1959: PUSH
1960: LD_INT 69
1962: PUSH
1963: LD_INT 39
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 40
1971: PUSH
1972: LD_INT 71
1974: PUSH
1975: LD_INT 57
1977: PUSH
1978: LD_INT 58
1980: PUSH
1981: LD_INT 44
1983: PUSH
1984: LD_INT 32
1986: PUSH
1987: LD_INT 27
1989: PUSH
1990: LD_INT 23
1992: PUSH
1993: LD_INT 33
1995: PUSH
1996: LD_INT 54
1998: PUSH
1999: LD_INT 55
2001: PUSH
2002: LD_INT 56
2004: PUSH
2005: LD_INT 63
2007: PUSH
2008: LD_INT 64
2010: PUSH
2011: LD_INT 65
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 25
2028: PUSH
2029: LD_INT 51
2031: PUSH
2032: LD_INT 52
2034: PUSH
2035: LD_INT 59
2037: PUSH
2038: LD_INT 53
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: DOUBLE
2081: LD_INT 1
2083: DEC
2084: ST_TO_ADDR
2085: LD_VAR 0 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2167
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2093: LD_VAR 0 8
2097: PUSH
2098: LD_VAR 0 5
2102: ARRAY
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: CALL_OW 321
2113: PUSH
2114: LD_INT 1
2116: EQUAL
2117: PUSH
2118: LD_VAR 0 8
2122: PUSH
2123: LD_VAR 0 5
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 482
2138: PUSH
2139: LD_INT 1
2141: EQUAL
2142: AND
2143: IFFALSE 2165
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 8
2154: PUSH
2155: LD_VAR 0 5
2159: ARRAY
2160: PPUSH
2161: CALL_OW 184
2165: GO 2090
2167: POP
2168: POP
// end ;
2169: LD_VAR 0 4
2173: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2182: LD_ADDR_VAR 0 8
2186: PUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 313
2196: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2197: LD_ADDR_VAR 0 9
2201: PUSH
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_INT 22
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 25
2221: PUSH
2222: LD_INT 2
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 24
2231: PUSH
2232: LD_INT 750
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 3
2241: PUSH
2242: LD_INT 54
2244: PUSH
2245: EMPTY
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 70
2262: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2263: LD_ADDR_VAR 0 6
2267: PUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_INT 22
2275: PUSH
2276: LD_VAR 0 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 21
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 3
2297: PUSH
2298: LD_INT 24
2300: PUSH
2301: LD_INT 1000
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: PPUSH
2320: CALL_OW 70
2324: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2325: LD_VAR 0 6
2329: NOT
2330: PUSH
2331: LD_INT 22
2333: PUSH
2334: LD_VAR 0 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 25
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 24
2355: PUSH
2356: LD_INT 250
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: NOT
2373: AND
2374: IFFALSE 2378
// exit ;
2376: GO 2560
// if buildings_list > 0 and engineerOkInside then
2378: LD_VAR 0 6
2382: PUSH
2383: LD_INT 0
2385: GREATER
2386: PUSH
2387: LD_VAR 0 8
2391: AND
2392: IFFALSE 2403
// ComExitBuilding ( engineerOkInside ) ;
2394: LD_VAR 0 8
2398: PPUSH
2399: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2403: LD_VAR 0 6
2407: PUSH
2408: LD_INT 0
2410: GREATER
2411: PUSH
2412: LD_VAR 0 9
2416: PUSH
2417: LD_INT 0
2419: GREATER
2420: AND
2421: IFFALSE 2441
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2423: LD_VAR 0 9
2427: PPUSH
2428: LD_VAR 0 6
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2441: LD_VAR 0 6
2445: PUSH
2446: LD_INT 0
2448: EQUAL
2449: PUSH
2450: LD_VAR 0 4
2454: PUSH
2455: LD_INT 0
2457: EQUAL
2458: AND
2459: PUSH
2460: LD_VAR 0 9
2464: PUSH
2465: LD_INT 0
2467: GREATER
2468: AND
2469: IFFALSE 2485
// ComEnterUnit ( engineerOkOutside , building ) ;
2471: LD_VAR 0 9
2475: PPUSH
2476: LD_VAR 0 2
2480: PPUSH
2481: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2485: LD_VAR 0 9
2489: PUSH
2490: LD_INT 0
2492: GREATER
2493: PUSH
2494: LD_VAR 0 6
2498: PUSH
2499: LD_INT 0
2501: EQUAL
2502: AND
2503: PUSH
2504: LD_VAR 0 4
2508: PUSH
2509: LD_INT 0
2511: GREATER
2512: AND
2513: IFFALSE 2560
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2515: LD_VAR 0 9
2519: PPUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: LD_VAR 0 4
2533: PUSH
2534: LD_INT 2
2536: ARRAY
2537: PPUSH
2538: LD_VAR 0 4
2542: PUSH
2543: LD_INT 3
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 4
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 145
// end ;
2560: LD_VAR 0 5
2564: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2565: LD_INT 0
2567: PPUSH
2568: PPUSH
2569: PPUSH
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
2574: PPUSH
2575: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 22
2583: PUSH
2584: LD_VAR 0 1
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 25
2595: PUSH
2596: LD_INT 4
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 23
2605: PUSH
2606: LD_INT 2
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 24
2615: PUSH
2616: LD_INT 251
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2634: LD_ADDR_VAR 0 7
2638: PUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 22
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 23
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 25
2668: PUSH
2669: LD_INT 4
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 50
2678: PUSH
2679: EMPTY
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 70
2692: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2693: LD_ADDR_VAR 0 10
2697: PUSH
2698: LD_VAR 0 3
2702: PPUSH
2703: LD_INT 22
2705: PUSH
2706: LD_VAR 0 1
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 25
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: LD_INT 24
2747: PUSH
2748: LD_INT 750
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 70
2769: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2770: LD_ADDR_VAR 0 11
2774: PUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: LD_INT 22
2782: PUSH
2783: LD_VAR 0 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 21
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 3
2804: PUSH
2805: LD_INT 25
2807: PUSH
2808: LD_INT 3
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 24
2824: PUSH
2825: LD_INT 1000
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 70
2846: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2847: LD_VAR 0 10
2851: NOT
2852: PUSH
2853: LD_VAR 0 11
2857: NOT
2858: AND
2859: PUSH
2860: LD_VAR 0 6
2864: NOT
2865: AND
2866: IFFALSE 2870
// exit ;
2868: GO 3104
// if damageUnits > 0 and sci_list > 0 then
2870: LD_VAR 0 10
2874: PUSH
2875: LD_INT 0
2877: GREATER
2878: PUSH
2879: LD_VAR 0 6
2883: PUSH
2884: LD_INT 0
2886: GREATER
2887: AND
2888: IFFALSE 2904
// ComMoveToArea ( damageUnits , healArea ) ;
2890: LD_VAR 0 10
2894: PPUSH
2895: LD_VAR 0 2
2899: PPUSH
2900: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2904: LD_VAR 0 11
2908: PUSH
2909: LD_INT 0
2911: GREATER
2912: PUSH
2913: LD_VAR 0 6
2917: PUSH
2918: LD_INT 0
2920: GREATER
2921: AND
2922: IFFALSE 2933
// ComExitBuilding ( sci_list ) ;
2924: LD_VAR 0 6
2928: PPUSH
2929: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2933: LD_VAR 0 11
2937: PUSH
2938: LD_INT 0
2940: GREATER
2941: PUSH
2942: LD_VAR 0 7
2946: PUSH
2947: LD_INT 0
2949: GREATER
2950: AND
2951: IFFALSE 2971
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2953: LD_VAR 0 7
2957: PPUSH
2958: LD_VAR 0 11
2962: PUSH
2963: LD_INT 1
2965: ARRAY
2966: PPUSH
2967: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2971: LD_VAR 0 10
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: PUSH
2980: LD_VAR 0 11
2984: PUSH
2985: LD_INT 0
2987: EQUAL
2988: AND
2989: PUSH
2990: LD_VAR 0 7
2994: PUSH
2995: LD_INT 0
2997: GREATER
2998: AND
2999: IFFALSE 3104
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3001: LD_ADDR_VAR 0 12
3005: PUSH
3006: LD_INT 22
3008: PUSH
3009: LD_VAR 0 1
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 21
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 8
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 69
3047: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3048: LD_ADDR_VAR 0 13
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_VAR 0 12
3060: PPUSH
3061: CALL_OW 12
3065: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3066: LD_VAR 0 7
3070: PPUSH
3071: LD_INT 3
3073: PUSH
3074: LD_INT 60
3076: PUSH
3077: EMPTY
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 72
3088: PPUSH
3089: LD_VAR 0 12
3093: PUSH
3094: LD_VAR 0 13
3098: ARRAY
3099: PPUSH
3100: CALL_OW 120
// end ; end ;
3104: LD_VAR 0 5
3108: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3109: LD_INT 0
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
// tmpTab = [ ] ;
3115: LD_ADDR_VAR 0 6
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3122: LD_INT 22
3124: PUSH
3125: LD_VAR 0 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 32
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: PUSH
3153: LD_INT 0
3155: GREATER
3156: IFFALSE 3239
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3158: LD_ADDR_VAR 0 4
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_VAR 0 1
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PUSH
3175: LD_INT 30
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PPUSH
3189: CALL_OW 69
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3237
// begin for j in UnitsInside ( i ) do
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 313
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3233
// tmpTab = tmpTab ^ j ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_VAR 0 6
3224: PUSH
3225: LD_VAR 0 5
3229: ADD
3230: ST_TO_ADDR
3231: GO 3212
3233: POP
3234: POP
// end ;
3235: GO 3194
3237: POP
3238: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3239: LD_VAR 0 6
3243: PPUSH
3244: LD_VAR 0 2
3248: PPUSH
3249: CALL_OW 250
3253: PPUSH
3254: LD_VAR 0 2
3258: PPUSH
3259: CALL_OW 251
3263: PPUSH
3264: CALL_OW 114
// end ;
3268: LD_VAR 0 3
3272: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3273: LD_INT 0
3275: PPUSH
3276: PPUSH
3277: PPUSH
3278: PPUSH
// enable ;
3279: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3280: LD_ADDR_VAR 0 7
3284: PUSH
3285: LD_VAR 0 3
3289: PPUSH
3290: CALL_OW 435
3294: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3295: LD_ADDR_VAR 0 6
3299: PUSH
3300: LD_INT 22
3302: PUSH
3303: LD_VAR 0 1
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 34
3314: PUSH
3315: LD_VAR 0 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3333: LD_VAR 0 6
3337: PUSH
3338: LD_INT 0
3340: GREATER
3341: PUSH
3342: LD_VAR 0 3
3346: PPUSH
3347: CALL_OW 435
3351: AND
3352: PUSH
3353: LD_VAR 0 7
3357: PUSH
3358: LD_INT 0
3360: GREATER
3361: AND
3362: IFFALSE 3411
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3364: LD_VAR 0 6
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: LD_VAR 0 7
3377: PUSH
3378: LD_INT 1
3380: ARRAY
3381: PPUSH
3382: LD_VAR 0 7
3386: PUSH
3387: LD_INT 2
3389: ARRAY
3390: PPUSH
3391: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3395: LD_VAR 0 6
3399: PUSH
3400: LD_INT 1
3402: ARRAY
3403: PPUSH
3404: LD_INT 100
3406: PPUSH
3407: CALL_OW 240
// end ; end ;
3411: LD_VAR 0 4
3415: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
// for i = 1 to vehCount do
3420: LD_ADDR_VAR 0 9
3424: PUSH
3425: DOUBLE
3426: LD_INT 1
3428: DEC
3429: ST_TO_ADDR
3430: LD_VAR 0 3
3434: PUSH
3435: FOR_TO
3436: IFFALSE 3483
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_VAR 0 7
3447: PPUSH
3448: LD_VAR 0 5
3452: PPUSH
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 4
3462: PUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_VAR 0 4
3470: PPUSH
3471: CALL_OW 12
3475: ARRAY
3476: PPUSH
3477: CALL_OW 185
3481: GO 3435
3483: POP
3484: POP
// end ;
3485: LD_VAR 0 8
3489: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3498: LD_ADDR_VAR 0 6
3502: PUSH
3503: LD_INT 22
3505: PUSH
3506: LD_VAR 0 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 9
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3534: LD_ADDR_VAR 0 7
3538: PUSH
3539: LD_INT 81
3541: PUSH
3542: LD_VAR 0 1
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3577: LD_ADDR_VAR 0 4
3581: PUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: CALL_OW 12
3592: ST_TO_ADDR
// for i = 1 to list do
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_VAR 0 6
3607: PUSH
3608: FOR_TO
3609: IFFALSE 3811
// for ta in filter do
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_VAR 0 7
3620: PUSH
3621: FOR_IN
3622: IFFALSE 3807
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3624: LD_VAR 0 6
3628: PUSH
3629: LD_VAR 0 5
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL_OW 296
3644: PUSH
3645: LD_INT 15
3647: LESSEQUAL
3648: IFFALSE 3805
// begin case c of 1 :
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3701
3663: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3664: LD_VAR 0 6
3668: PUSH
3669: LD_VAR 0 5
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 250
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 251
3694: PPUSH
3695: CALL_OW 154
3699: GO 3805
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3773
3709: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3710: LD_VAR 0 6
3714: PUSH
3715: LD_VAR 0 5
3719: ARRAY
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL_OW 250
3730: PUSH
3731: LD_INT 1
3733: NEG
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 12
3742: PLUS
3743: PPUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: CALL_OW 251
3753: PUSH
3754: LD_INT 1
3756: NEG
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: CALL_OW 12
3765: PLUS
3766: PPUSH
3767: CALL_OW 153
3771: GO 3805
3773: LD_INT 3
3775: DOUBLE
3776: EQUAL
3777: IFTRUE 3781
3779: GO 3804
3781: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3782: LD_VAR 0 6
3786: PUSH
3787: LD_VAR 0 5
3791: ARRAY
3792: PPUSH
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL_OW 115
3802: GO 3805
3804: POP
// end ; end ;
3805: GO 3621
3807: POP
3808: POP
3809: GO 3608
3811: POP
3812: POP
// end ;
3813: LD_VAR 0 2
3817: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
3822: PPUSH
3823: PPUSH
3824: PPUSH
3825: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3826: LD_ADDR_VAR 0 7
3830: PUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_INT 22
3838: PUSH
3839: LD_VAR 0 1
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 21
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 34
3860: PUSH
3861: LD_INT 52
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PPUSH
3873: CALL_OW 70
3877: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3878: LD_ADDR_VAR 0 8
3882: PUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 22
3890: PUSH
3891: LD_VAR 0 1
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 21
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 24
3915: PUSH
3916: LD_INT 1000
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: EMPTY
3933: LIST
3934: PPUSH
3935: CALL_OW 70
3939: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
3940: LD_VAR 0 8
3944: PUSH
3945: LD_INT 0
3947: GREATER
3948: PUSH
3949: LD_VAR 0 7
3953: PPUSH
3954: LD_INT 24
3956: PUSH
3957: LD_INT 750
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PPUSH
3964: CALL_OW 72
3968: PUSH
3969: LD_INT 0
3971: GREATER
3972: AND
3973: IFFALSE 3993
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
3975: LD_VAR 0 7
3979: PPUSH
3980: LD_VAR 0 8
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: PPUSH
3989: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
3993: LD_VAR 0 7
3997: PUSH
3998: LD_INT 0
4000: GREATER
4001: PUSH
4002: LD_VAR 0 8
4006: PUSH
4007: LD_INT 0
4009: EQUAL
4010: AND
4011: PUSH
4012: LD_EXP 10
4016: PUSH
4017: LD_INT 0
4019: GREATER
4020: AND
4021: IFFALSE 4068
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4023: LD_VAR 0 7
4027: PPUSH
4028: LD_EXP 10
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_EXP 10
4041: PUSH
4042: LD_INT 2
4044: ARRAY
4045: PPUSH
4046: LD_EXP 10
4050: PUSH
4051: LD_INT 3
4053: ARRAY
4054: PPUSH
4055: LD_EXP 10
4059: PUSH
4060: LD_INT 4
4062: ARRAY
4063: PPUSH
4064: CALL_OW 567
// end ; end_of_file
4068: LD_VAR 0 3
4072: RET
// every 0 0$1 do
4073: GO 4075
4075: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 14
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL 1933 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: CALL 1933 0 3
// end ;
4102: END
// every 0 0$1 trigger russianAI = 1 do
4103: LD_EXP 13
4107: PUSH
4108: LD_INT 1
4110: EQUAL
4111: IFFALSE 4200
4113: GO 4115
4115: DISABLE
// begin enable ;
4116: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 22
4122: PPUSH
4123: LD_INT 7
4125: PPUSH
4126: LD_EXP 10
4130: PPUSH
4131: CALL 2174 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4135: LD_INT 3
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: LD_INT 7
4143: PPUSH
4144: LD_INT 14
4146: PUSH
4147: LD_INT 15
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL_OW 12
4164: ARRAY
4165: PPUSH
4166: CALL 2565 0 4
// IntBazooka ( 3 ) ;
4170: LD_INT 3
4172: PPUSH
4173: CALL 3490 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 51
4182: PPUSH
4183: LD_INT 14
4185: PPUSH
4186: CALL 3273 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 7
4195: PPUSH
4196: CALL 3818 0 2
// end ;
4200: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4201: LD_EXP 11
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 5
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_OWVAR 67
4224: ARRAY
4225: GREATEREQUAL
4226: PUSH
4227: LD_EXP 12
4231: PUSH
4232: LD_INT 1
4234: PUSH
4235: LD_INT 2
4237: PUSH
4238: LD_INT 3
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: PUSH
4246: LD_OWVAR 67
4250: ARRAY
4251: GREATEREQUAL
4252: AND
4253: IFFALSE 4711
4255: GO 4257
4257: DISABLE
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
4262: PPUSH
4263: PPUSH
// begin enable ;
4264: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4265: LD_ADDR_VAR 0 2
4269: PUSH
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 12
4279: UNION
4280: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4281: LD_ADDR_EXP 11
4285: PUSH
4286: LD_EXP 11
4290: PUSH
4291: LD_VAR 0 2
4295: DIFF
4296: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4297: LD_ADDR_EXP 12
4301: PUSH
4302: LD_EXP 12
4306: PUSH
4307: LD_VAR 0 2
4311: DIFF
4312: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4313: LD_INT 116
4315: PPUSH
4316: CALL_OW 302
4320: IFFALSE 4389
// begin for j in tmp do
4322: LD_ADDR_VAR 0 1
4326: PUSH
4327: LD_VAR 0 2
4331: PUSH
4332: FOR_IN
4333: IFFALSE 4380
// if j mod 3 = 0 then
4335: LD_VAR 0 1
4339: PUSH
4340: LD_INT 3
4342: MOD
4343: PUSH
4344: LD_INT 0
4346: EQUAL
4347: IFFALSE 4363
// ComEnterUnit ( j , ruTeleport ) else
4349: LD_VAR 0 1
4353: PPUSH
4354: LD_INT 116
4356: PPUSH
4357: CALL_OW 120
4361: GO 4378
// ComAgressiveMove ( j , 117 , 92 ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_INT 117
4370: PPUSH
4371: LD_INT 92
4373: PPUSH
4374: CALL_OW 114
4378: GO 4332
4380: POP
4381: POP
// wait ( 0 0$8 ) ;
4382: LD_INT 280
4384: PPUSH
4385: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4389: LD_INT 35
4391: PPUSH
4392: CALL_OW 67
// for j in tmp do
4396: LD_ADDR_VAR 0 1
4400: PUSH
4401: LD_VAR 0 2
4405: PUSH
4406: FOR_IN
4407: IFFALSE 4702
// begin if IsDead ( j ) then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 301
4418: IFFALSE 4436
// tmp := tmp diff j ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_VAR 0 2
4429: PUSH
4430: LD_VAR 0 1
4434: DIFF
4435: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_INT 81
4443: PUSH
4444: LD_INT 3
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: PPUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 74
4465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_INT 81
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 1
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 74
4512: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 264
4522: PUSH
4523: LD_INT 49
4525: EQUAL
4526: IFFALSE 4634
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 34
4538: PUSH
4539: LD_INT 49
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PPUSH
4550: CALL_OW 72
4554: PUSH
4555: LD_INT 1
4557: GREATER
4558: IFFALSE 4608
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4560: LD_VAR 0 1
4564: PPUSH
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 49
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 72
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: CALL_OW 74
4601: PPUSH
4602: CALL_OW 112
4606: GO 4632
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4608: LD_VAR 0 1
4612: PPUSH
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 74
4627: PPUSH
4628: CALL_OW 112
// end else
4632: GO 4700
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4634: LD_VAR 0 1
4638: PPUSH
4639: LD_VAR 0 4
4643: PPUSH
4644: CALL_OW 296
4648: PUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_VAR 0 3
4658: PPUSH
4659: CALL_OW 296
4663: PUSH
4664: LD_INT 2
4666: PLUS
4667: LESS
4668: IFFALSE 4686
// ComAttackUnit ( j , target2 ) else
4670: LD_VAR 0 1
4674: PPUSH
4675: LD_VAR 0 4
4679: PPUSH
4680: CALL_OW 115
4684: GO 4700
// ComAttackUnit ( j , target1 ) ;
4686: LD_VAR 0 1
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 115
// end ; end ;
4700: GO 4406
4702: POP
4703: POP
// until not tmp ;
4704: LD_VAR 0 2
4708: NOT
4709: IFFALSE 4389
// end ;
4711: PPOPN 4
4713: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4714: LD_INT 22
4716: PPUSH
4717: CALL_OW 303
4721: PUSH
4722: LD_INT 22
4724: PPUSH
4725: CALL_OW 255
4729: PUSH
4730: LD_INT 1
4732: EQUAL
4733: OR
4734: IFFALSE 4749
4736: GO 4738
4738: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4739: LD_INT 3
4741: PPUSH
4742: LD_INT 22
4744: PPUSH
4745: CALL 3109 0 2
4749: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4750: LD_EXP 13
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 21
4771: PUSH
4772: LD_INT 2
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 50
4781: PUSH
4782: EMPTY
4783: LIST
4784: PUSH
4785: LD_INT 33
4787: PUSH
4788: LD_INT 3
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 34
4800: PUSH
4801: LD_INT 46
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 34
4810: PUSH
4811: LD_INT 45
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 44
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 34
4830: PUSH
4831: LD_INT 49
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 47
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 3
4870: LESS
4871: AND
4872: IFFALSE 5059
4874: GO 4876
4876: DISABLE
// begin enable ;
4877: ENABLE
// if russianRocketsAvalaible = 1 then
4878: LD_EXP 14
4882: PUSH
4883: LD_INT 1
4885: EQUAL
4886: IFFALSE 4943
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: LD_INT 3
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: LD_INT 5
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_OWVAR 67
4912: ARRAY
4913: PPUSH
4914: LD_INT 46
4916: PUSH
4917: LD_INT 45
4919: PUSH
4920: LD_INT 44
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PPUSH
4928: LD_INT 3
4930: PPUSH
4931: LD_INT 3
4933: PPUSH
4934: LD_INT 24
4936: PPUSH
4937: CALL 3416 0 7
4941: GO 5000
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: LD_INT 3
4951: PUSH
4952: LD_INT 4
4954: PUSH
4955: LD_INT 5
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PUSH
4963: LD_OWVAR 67
4967: ARRAY
4968: PPUSH
4969: LD_INT 46
4971: PUSH
4972: LD_INT 45
4974: PUSH
4975: LD_INT 44
4977: PUSH
4978: LD_INT 47
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: LD_INT 3
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 24
4995: PPUSH
4996: CALL 3416 0 7
// if russianTimeLapsers = 0 then
5000: LD_EXP 12
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: IFFALSE 5059
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 40
5015: PPUSH
5016: LD_INT 1
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: LD_OWVAR 67
5034: ARRAY
5035: PPUSH
5036: LD_INT 49
5038: PUSH
5039: LD_INT 49
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: LD_INT 3
5051: PPUSH
5052: LD_INT 24
5054: PPUSH
5055: CALL 3416 0 7
// end ;
5059: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5060: LD_EXP 18
5064: PUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_INT 58
5087: PUSH
5088: EMPTY
5089: LIST
5090: PUSH
5091: LD_INT 33
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 91
5103: PUSH
5104: LD_EXP 18
5108: PUSH
5109: LD_INT 45
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: AND
5129: IFFALSE 5233
5131: GO 5133
5133: DISABLE
// begin wait ( 0 0$5 ) ;
5134: LD_INT 175
5136: PPUSH
5137: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5141: LD_EXP 18
5145: PPUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 21
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 58
5168: PUSH
5169: EMPTY
5170: LIST
5171: PUSH
5172: LD_INT 33
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 91
5184: PUSH
5185: LD_EXP 18
5189: PUSH
5190: LD_INT 45
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 69
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5218: LD_EXP 18
5222: PPUSH
5223: LD_INT 127
5225: PPUSH
5226: LD_INT 63
5228: PPUSH
5229: CALL_OW 171
// end ; end_of_file
5233: END
// every 1 do var dec1 , dec2 ;
5234: GO 5236
5236: DISABLE
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
// begin InGameOn ;
5241: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5245: LD_INT 48
5247: PPUSH
5248: LD_STRING deltakappa
5250: PPUSH
5251: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5255: LD_INT 95
5257: PPUSH
5258: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5262: LD_INT 95
5264: PPUSH
5265: LD_INT 30
5267: PPUSH
5268: LD_INT 11
5270: PPUSH
5271: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5275: LD_INT 30
5277: PPUSH
5278: LD_INT 11
5280: PPUSH
5281: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5285: LD_EXP 5
5289: PPUSH
5290: LD_STRING D1-Pow-1
5292: PPUSH
5293: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5306: LD_EXP 1
5310: PPUSH
5311: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5315: LD_EXP 1
5319: PPUSH
5320: LD_STRING D1-JMM-1
5322: PPUSH
5323: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5327: LD_EXP 5
5331: PPUSH
5332: LD_STRING D1-Pow-2
5334: PPUSH
5335: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D1-JMM-2
5346: PPUSH
5347: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5351: LD_EXP 1
5355: PPUSH
5356: LD_INT 95
5358: PPUSH
5359: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5363: LD_STRING M1
5365: PPUSH
5366: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5370: LD_INT 35
5372: PPUSH
5373: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5377: LD_EXP 1
5381: PPUSH
5382: LD_INT 95
5384: PPUSH
5385: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5389: LD_INT 95
5391: PPUSH
5392: LD_INT 51
5394: PPUSH
5395: LD_INT 21
5397: PPUSH
5398: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5402: LD_INT 95
5404: PPUSH
5405: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5409: LD_INT 95
5411: PPUSH
5412: LD_INT 5
5414: PPUSH
5415: CALL_OW 308
5419: IFFALSE 5370
// if JMMGirl = 1 then
5421: LD_EXP 7
5425: PUSH
5426: LD_INT 1
5428: EQUAL
5429: IFFALSE 5742
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D2J-Joan-1
5438: PPUSH
5439: CALL_OW 94
// dec1 = query ( Q1 ) ;
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_STRING Q1
5450: PPUSH
5451: CALL_OW 97
5455: ST_TO_ADDR
// if dec1 = 1 then
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: EQUAL
5464: IFFALSE 5718
// begin ComExitVehicle ( JMM ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D2J-JMM-1
5482: PPUSH
5483: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5487: LD_EXP 2
5491: PPUSH
5492: LD_STRING D2J-Joan-2
5494: PPUSH
5495: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5499: LD_EXP 1
5503: PPUSH
5504: LD_STRING D2J-JMM-2
5506: PPUSH
5507: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5511: LD_EXP 2
5515: PPUSH
5516: LD_STRING D2J-Joan-3
5518: PPUSH
5519: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5523: LD_EXP 5
5527: PPUSH
5528: LD_STRING DPowell-Pow-1
5530: PPUSH
5531: CALL_OW 94
// dec2 = query ( Q2J ) ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_STRING Q2J
5542: PPUSH
5543: CALL_OW 97
5547: ST_TO_ADDR
// if dec2 = 1 then
5548: LD_VAR 0 2
5552: PUSH
5553: LD_INT 1
5555: EQUAL
5556: IFFALSE 5598
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5558: LD_EXP 1
5562: PPUSH
5563: LD_STRING D2Ja-JMM-1
5565: PPUSH
5566: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5570: LD_EXP 2
5574: PPUSH
5575: LD_STRING D2Ja-Joan-1
5577: PPUSH
5578: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D2Ja-JMM-2
5589: PPUSH
5590: CALL_OW 88
// InGameOff ;
5594: CALL_OW 9
// end ; if dec2 = 2 then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_INT 2
5605: EQUAL
5606: IFFALSE 5682
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5608: LD_EXP 1
5612: PPUSH
5613: LD_STRING D2Jb-JMM-1
5615: PPUSH
5616: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5620: LD_EXP 2
5624: PPUSH
5625: LD_STRING D2Jb-Joan-1
5627: PPUSH
5628: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5632: LD_EXP 1
5636: PPUSH
5637: LD_STRING D2Jb-JMM-2
5639: PPUSH
5640: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5644: LD_EXP 2
5648: PPUSH
5649: LD_STRING D2Jb-Joan-2
5651: PPUSH
5652: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5656: LD_EXP 1
5660: PPUSH
5661: LD_STRING D2Jb-JMM-3
5663: PPUSH
5664: CALL_OW 88
// fastEnd = 1 ;
5668: LD_ADDR_EXP 15
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// FinishMission ;
5676: CALL 9298 0 0
// exit ;
5680: GO 6312
// end ; if dec2 = 3 then
5682: LD_VAR 0 2
5686: PUSH
5687: LD_INT 3
5689: EQUAL
5690: IFFALSE 5718
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5692: LD_EXP 2
5696: PPUSH
5697: LD_STRING D2Jc-Joan-1
5699: PPUSH
5700: CALL_OW 94
// fastEnd = 1 ;
5704: LD_ADDR_EXP 15
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// FinishMission ;
5712: CALL 9298 0 0
// exit ;
5716: GO 6312
// end ; end ; if dec1 = 2 then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_INT 2
5725: EQUAL
5726: IFFALSE 5742
// begin fastEnd = 1 ;
5728: LD_ADDR_EXP 15
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// FinishMission ;
5736: CALL 9298 0 0
// exit ;
5740: GO 6312
// end ; end ; if JMMGirl = 2 then
5742: LD_EXP 7
5746: PUSH
5747: LD_INT 2
5749: EQUAL
5750: IFFALSE 6075
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5752: LD_EXP 3
5756: PPUSH
5757: LD_STRING D2L-Lisa-1
5759: PPUSH
5760: CALL_OW 94
// dec1 = query ( Q1 ) ;
5764: LD_ADDR_VAR 0 1
5768: PUSH
5769: LD_STRING Q1
5771: PPUSH
5772: CALL_OW 97
5776: ST_TO_ADDR
// if dec1 = 1 then
5777: LD_VAR 0 1
5781: PUSH
5782: LD_INT 1
5784: EQUAL
5785: IFFALSE 6051
// begin ComExitVehicle ( JMM ) ;
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5796: LD_EXP 1
5800: PPUSH
5801: LD_STRING D2L-JMM-1
5803: PPUSH
5804: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5808: LD_EXP 3
5812: PPUSH
5813: LD_STRING D2L-Lisa-2
5815: PPUSH
5816: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5820: LD_EXP 1
5824: PPUSH
5825: LD_STRING D2L-JMM-2
5827: PPUSH
5828: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5832: LD_EXP 3
5836: PPUSH
5837: LD_STRING D2L-Lisa-3
5839: PPUSH
5840: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5844: LD_EXP 5
5848: PPUSH
5849: LD_STRING DPowell-Pow-1
5851: PPUSH
5852: CALL_OW 94
// dec2 = query ( Q2L ) ;
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_STRING Q2L
5863: PPUSH
5864: CALL_OW 97
5868: ST_TO_ADDR
// if dec2 = 1 then
5869: LD_VAR 0 2
5873: PUSH
5874: LD_INT 1
5876: EQUAL
5877: IFFALSE 5943
// begin Say ( JMM , D2La-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D2La-JMM-1
5886: PPUSH
5887: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5891: LD_EXP 3
5895: PPUSH
5896: LD_STRING D2La-Lisa-1
5898: PPUSH
5899: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D2La-JMM-2
5910: PPUSH
5911: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5915: LD_EXP 3
5919: PPUSH
5920: LD_STRING D2La-Lisa-2
5922: PPUSH
5923: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D2La-JMM-3
5934: PPUSH
5935: CALL_OW 88
// InGameOff ;
5939: CALL_OW 9
// end ; if dec2 = 2 then
5943: LD_VAR 0 2
5947: PUSH
5948: LD_INT 2
5950: EQUAL
5951: IFFALSE 6015
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5953: LD_EXP 1
5957: PPUSH
5958: LD_STRING D2Lb-JMM-1
5960: PPUSH
5961: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5965: LD_EXP 3
5969: PPUSH
5970: LD_STRING D2Lb-Lisa-1
5972: PPUSH
5973: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5977: LD_EXP 1
5981: PPUSH
5982: LD_STRING D2Lb-JMM-2
5984: PPUSH
5985: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5989: LD_EXP 3
5993: PPUSH
5994: LD_STRING D2Lb-Lisa-2
5996: PPUSH
5997: CALL_OW 94
// fastEnd = 1 ;
6001: LD_ADDR_EXP 15
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// FinishMission ;
6009: CALL 9298 0 0
// exit ;
6013: GO 6312
// end ; if dec2 = 3 then
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: EQUAL
6023: IFFALSE 6051
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6025: LD_EXP 3
6029: PPUSH
6030: LD_STRING D2Lc-Lisa-1
6032: PPUSH
6033: CALL_OW 94
// fastEnd = 1 ;
6037: LD_ADDR_EXP 15
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// FinishMission ;
6045: CALL 9298 0 0
// exit ;
6049: GO 6312
// end ; end ; if dec1 = 2 then
6051: LD_VAR 0 1
6055: PUSH
6056: LD_INT 2
6058: EQUAL
6059: IFFALSE 6075
// begin fastEnd = 1 ;
6061: LD_ADDR_EXP 15
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// FinishMission ;
6069: CALL 9298 0 0
// exit ;
6073: GO 6312
// end ; end ; if JMMGirl = 3 then
6075: LD_EXP 7
6079: PUSH
6080: LD_INT 3
6082: EQUAL
6083: IFFALSE 6312
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6085: LD_EXP 4
6089: PPUSH
6090: LD_STRING D2X-Con-1
6092: PPUSH
6093: CALL_OW 94
// dec1 = query ( Q1 ) ;
6097: LD_ADDR_VAR 0 1
6101: PUSH
6102: LD_STRING Q1
6104: PPUSH
6105: CALL_OW 97
6109: ST_TO_ADDR
// if dec1 = 1 then
6110: LD_VAR 0 1
6114: PUSH
6115: LD_INT 1
6117: EQUAL
6118: IFFALSE 6288
// begin ComExitVehicle ( JMM ) ;
6120: LD_EXP 1
6124: PPUSH
6125: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D2X-JMM-1
6136: PPUSH
6137: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6141: LD_EXP 4
6145: PPUSH
6146: LD_STRING D2X-Con-2
6148: PPUSH
6149: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6153: LD_EXP 5
6157: PPUSH
6158: LD_STRING DPowell-Pow-1
6160: PPUSH
6161: CALL_OW 94
// dec2 = query ( Q2X ) ;
6165: LD_ADDR_VAR 0 2
6169: PUSH
6170: LD_STRING Q2X
6172: PPUSH
6173: CALL_OW 97
6177: ST_TO_ADDR
// if dec2 = 1 then
6178: LD_VAR 0 2
6182: PUSH
6183: LD_INT 1
6185: EQUAL
6186: IFFALSE 6204
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2Xa-JMM-1
6195: PPUSH
6196: CALL_OW 88
// InGameOff ;
6200: CALL_OW 9
// end ; if dec2 = 2 then
6204: LD_VAR 0 2
6208: PUSH
6209: LD_INT 2
6211: EQUAL
6212: IFFALSE 6252
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6214: LD_EXP 1
6218: PPUSH
6219: LD_STRING D2Xb-JMM-1
6221: PPUSH
6222: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6226: LD_EXP 4
6230: PPUSH
6231: LD_STRING D2Xb-Con-1
6233: PPUSH
6234: CALL_OW 94
// fastEnd = 1 ;
6238: LD_ADDR_EXP 15
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// FinishMission ;
6246: CALL 9298 0 0
// exit ;
6250: GO 6312
// end ; if dec2 = 3 then
6252: LD_VAR 0 2
6256: PUSH
6257: LD_INT 3
6259: EQUAL
6260: IFFALSE 6288
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6262: LD_EXP 4
6266: PPUSH
6267: LD_STRING D2Xc-Con-1
6269: PPUSH
6270: CALL_OW 94
// fastEnd = 1 ;
6274: LD_ADDR_EXP 15
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// FinishMission ;
6282: CALL 9298 0 0
// exit ;
6286: GO 6312
// end ; end ; if dec1 = 2 then
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6312
// begin fastEnd = 1 ;
6298: LD_ADDR_EXP 15
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// FinishMission ;
6306: CALL 9298 0 0
// exit ;
6310: GO 6312
// end ; end ; end ;
6312: PPOPN 2
6314: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6315: LD_EXP 1
6319: PPUSH
6320: LD_INT 6
6322: PPUSH
6323: CALL_OW 308
6327: IFFALSE 7069
6329: GO 6331
6331: DISABLE
// begin InGameOn ;
6332: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6336: LD_INT 35
6338: PPUSH
6339: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6343: LD_EXP 1
6347: PPUSH
6348: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6352: LD_EXP 1
6356: PPUSH
6357: LD_INT 62
6359: PPUSH
6360: LD_INT 104
6362: PPUSH
6363: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6367: LD_EXP 1
6371: PPUSH
6372: LD_EXP 2
6376: PPUSH
6377: CALL_OW 296
6381: PUSH
6382: LD_INT 4
6384: LESS
6385: PUSH
6386: LD_EXP 1
6390: PPUSH
6391: LD_EXP 3
6395: PPUSH
6396: CALL_OW 296
6400: PUSH
6401: LD_INT 4
6403: LESS
6404: OR
6405: PUSH
6406: LD_EXP 1
6410: PPUSH
6411: LD_EXP 4
6415: PPUSH
6416: CALL_OW 296
6420: PUSH
6421: LD_INT 4
6423: LESS
6424: OR
6425: IFFALSE 6336
// case JMMGirl of 1 :
6427: LD_EXP 7
6431: PUSH
6432: LD_INT 1
6434: DOUBLE
6435: EQUAL
6436: IFTRUE 6440
6438: GO 6652
6440: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6441: LD_INT 22
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6463: LD_EXP 2
6467: PPUSH
6468: LD_EXP 1
6472: PPUSH
6473: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6477: LD_EXP 1
6481: PPUSH
6482: LD_EXP 2
6486: PPUSH
6487: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6491: LD_EXP 2
6495: PUSH
6496: LD_EXP 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 87
// wait ( 0 0$1 ) ;
6509: LD_INT 35
6511: PPUSH
6512: CALL_OW 67
// DialogueOn ;
6516: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6520: LD_EXP 2
6524: PPUSH
6525: LD_STRING D3J-Joan-1
6527: PPUSH
6528: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D3J-JMM-1
6539: PPUSH
6540: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6544: LD_EXP 2
6548: PPUSH
6549: LD_STRING D3J-Joan-2
6551: PPUSH
6552: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D3J-JMM-2
6563: PPUSH
6564: CALL_OW 88
// wait ( 0 0$1 ) ;
6568: LD_INT 35
6570: PPUSH
6571: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6575: LD_EXP 1
6579: PPUSH
6580: LD_STRING D4-JMM-1
6582: PPUSH
6583: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6587: LD_EXP 2
6591: PPUSH
6592: LD_STRING D4-Joan-1
6594: PPUSH
6595: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6599: LD_EXP 1
6603: PPUSH
6604: LD_STRING D4-JMM-2
6606: PPUSH
6607: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6611: LD_EXP 2
6615: PPUSH
6616: LD_STRING D4-Joan-2
6618: PPUSH
6619: CALL_OW 88
// DialogueOff ;
6623: CALL_OW 7
// InGameOff ;
6627: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6631: LD_STRING M2J
6633: PPUSH
6634: CALL_OW 337
// SaveForQuickRestart ;
6638: CALL_OW 22
// russianAI = 1 ;
6642: LD_ADDR_EXP 13
6646: PUSH
6647: LD_INT 1
6649: ST_TO_ADDR
// end ; 2 :
6650: GO 7069
6652: LD_INT 2
6654: DOUBLE
6655: EQUAL
6656: IFTRUE 6660
6658: GO 6872
6660: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6661: LD_INT 22
6663: PUSH
6664: LD_INT 4
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 69
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6683: LD_EXP 3
6687: PPUSH
6688: LD_EXP 1
6692: PPUSH
6693: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6697: LD_EXP 1
6701: PPUSH
6702: LD_EXP 3
6706: PPUSH
6707: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6711: LD_EXP 3
6715: PUSH
6716: LD_EXP 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 87
// wait ( 0 0$1 ) ;
6729: LD_INT 35
6731: PPUSH
6732: CALL_OW 67
// DialogueOn ;
6736: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6740: LD_EXP 3
6744: PPUSH
6745: LD_STRING D3L-Lisa-1
6747: PPUSH
6748: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6752: LD_EXP 1
6756: PPUSH
6757: LD_STRING D3L-JMM-1
6759: PPUSH
6760: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6764: LD_EXP 3
6768: PPUSH
6769: LD_STRING D3L-Lisa-2
6771: PPUSH
6772: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6776: LD_EXP 1
6780: PPUSH
6781: LD_STRING D3L-JMM-2
6783: PPUSH
6784: CALL_OW 88
// wait ( 0 0$1 ) ;
6788: LD_INT 35
6790: PPUSH
6791: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6795: LD_EXP 1
6799: PPUSH
6800: LD_STRING D4-JMM-1
6802: PPUSH
6803: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6807: LD_EXP 3
6811: PPUSH
6812: LD_STRING D4-Lisa-1
6814: PPUSH
6815: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6819: LD_EXP 1
6823: PPUSH
6824: LD_STRING D4-JMM-1
6826: PPUSH
6827: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6831: LD_EXP 3
6835: PPUSH
6836: LD_STRING D4-Lisa-2
6838: PPUSH
6839: CALL_OW 88
// DialogueOff ;
6843: CALL_OW 7
// InGameOff ;
6847: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6851: LD_STRING M2L
6853: PPUSH
6854: CALL_OW 337
// SaveForQuickRestart ;
6858: CALL_OW 22
// russianAI = 1 ;
6862: LD_ADDR_EXP 13
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// end ; 3 :
6870: GO 7069
6872: LD_INT 3
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 7068
6880: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6881: LD_INT 22
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6903: LD_EXP 4
6907: PPUSH
6908: LD_EXP 1
6912: PPUSH
6913: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6917: LD_EXP 1
6921: PPUSH
6922: LD_EXP 4
6926: PPUSH
6927: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6931: LD_EXP 2
6935: PUSH
6936: LD_EXP 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 87
// wait ( 0 0$1 ) ;
6949: LD_INT 35
6951: PPUSH
6952: CALL_OW 67
// DialogueOn ;
6956: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6960: LD_EXP 4
6964: PPUSH
6965: LD_STRING D3X-Con-1
6967: PPUSH
6968: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D3J-JMM-1
6979: PPUSH
6980: CALL_OW 88
// wait ( 0 0$1 ) ;
6984: LD_INT 35
6986: PPUSH
6987: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6991: LD_EXP 1
6995: PPUSH
6996: LD_STRING D4-JMM-1
6998: PPUSH
6999: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7003: LD_EXP 4
7007: PPUSH
7008: LD_STRING D4-Con-1
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7015: LD_EXP 1
7019: PPUSH
7020: LD_STRING D4-JMM-2
7022: PPUSH
7023: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7027: LD_EXP 4
7031: PPUSH
7032: LD_STRING D4-Con-2
7034: PPUSH
7035: CALL_OW 88
// DialogueOff ;
7039: CALL_OW 7
// InGameOff ;
7043: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7047: LD_STRING M2X
7049: PPUSH
7050: CALL_OW 337
// SaveForQuickRestart ;
7054: CALL_OW 22
// russianAI = 1 ;
7058: LD_ADDR_EXP 13
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// end ; end ;
7066: GO 7069
7068: POP
// end ;
7069: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7070: LD_INT 32
7072: PPUSH
7073: CALL_OW 306
7077: IFFALSE 7410
7079: GO 7081
7081: DISABLE
// begin case JMMGirl of 1 :
7082: LD_EXP 7
7086: PUSH
7087: LD_INT 1
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7217
7095: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7096: LD_EXP 1
7100: PPUSH
7101: LD_STRING D6J-JMM-1
7103: PPUSH
7104: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7108: LD_STRING 13f_Denis
7110: PPUSH
7111: CALL_OW 28
7115: PUSH
7116: LD_INT 1
7118: EQUAL
7119: PUSH
7120: LD_STRING 13s_Denis
7122: PPUSH
7123: CALL_OW 28
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: OR
7132: IFFALSE 7172
// begin Say ( Joan , D6J-Joan-1 ) ;
7134: LD_EXP 2
7138: PPUSH
7139: LD_STRING D6J-Joan-1
7141: PPUSH
7142: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6J-JMM-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7158: LD_EXP 2
7162: PPUSH
7163: LD_STRING D6J-Joan-2
7165: PPUSH
7166: CALL_OW 88
// end else
7170: GO 7184
// begin Say ( Joan , D6J-Joan-2a ) ;
7172: LD_EXP 2
7176: PPUSH
7177: LD_STRING D6J-Joan-2a
7179: PPUSH
7180: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D6J-JMM-3
7191: PPUSH
7192: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7196: LD_EXP 2
7200: PPUSH
7201: LD_STRING D6J-Joan-3
7203: PPUSH
7204: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7208: LD_STRING M3
7210: PPUSH
7211: CALL_OW 337
// end ; 2 :
7215: GO 7410
7217: LD_INT 2
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7283
7225: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D6L-JMM-1
7233: PPUSH
7234: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7238: LD_EXP 3
7242: PPUSH
7243: LD_STRING D6L-Lisa-1
7245: PPUSH
7246: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7250: LD_EXP 1
7254: PPUSH
7255: LD_STRING D6L-JMM-2
7257: PPUSH
7258: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7262: LD_EXP 3
7266: PPUSH
7267: LD_STRING D6L-Lisa-2
7269: PPUSH
7270: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7274: LD_STRING M3
7276: PPUSH
7277: CALL_OW 337
// end ; 3 :
7281: GO 7410
7283: LD_INT 3
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7409
7291: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7292: LD_EXP 1
7296: PPUSH
7297: LD_STRING D6X-JMM-1
7299: PPUSH
7300: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7304: LD_EXP 4
7308: PPUSH
7309: LD_STRING D6X-Con-1
7311: PPUSH
7312: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7316: LD_EXP 1
7320: PPUSH
7321: LD_STRING D6X-JMM-2
7323: PPUSH
7324: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7328: LD_EXP 4
7332: PPUSH
7333: LD_STRING D6X-Con-2
7335: PPUSH
7336: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7340: LD_EXP 1
7344: PPUSH
7345: LD_STRING D6X-JMM-3
7347: PPUSH
7348: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7352: LD_EXP 4
7356: PPUSH
7357: LD_STRING D6X-Con-3
7359: PPUSH
7360: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7364: LD_EXP 1
7368: PPUSH
7369: LD_STRING D6X-JMM-4
7371: PPUSH
7372: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7376: LD_EXP 4
7380: PPUSH
7381: LD_STRING D6X-Con-4
7383: PPUSH
7384: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7388: LD_EXP 1
7392: PPUSH
7393: LD_STRING D6X-JMM-5
7395: PPUSH
7396: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7400: LD_STRING M3
7402: PPUSH
7403: CALL_OW 337
// end ; end ;
7407: GO 7410
7409: POP
// end ;
7410: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7411: LD_INT 22
7413: PUSH
7414: LD_INT 1
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 33
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PPUSH
7440: CALL_OW 306
7444: IFFALSE 7590
7446: GO 7448
7448: DISABLE
// begin case JMMGirl of 1 :
7449: LD_EXP 7
7453: PUSH
7454: LD_INT 1
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7499
7462: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7463: LD_EXP 1
7467: PPUSH
7468: LD_STRING D5-JMM-1
7470: PPUSH
7471: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7475: LD_INT 77
7477: PPUSH
7478: LD_INT 87
7480: PPUSH
7481: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7485: LD_EXP 2
7489: PPUSH
7490: LD_STRING D5-Joan-1
7492: PPUSH
7493: CALL_OW 88
// end ; 2 :
7497: GO 7590
7499: LD_INT 2
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7544
7507: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7508: LD_EXP 1
7512: PPUSH
7513: LD_STRING D5-JMM-1
7515: PPUSH
7516: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7520: LD_INT 77
7522: PPUSH
7523: LD_INT 87
7525: PPUSH
7526: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7530: LD_EXP 3
7534: PPUSH
7535: LD_STRING D5-Lisa-1
7537: PPUSH
7538: CALL_OW 88
// end ; 3 :
7542: GO 7590
7544: LD_INT 3
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7589
7552: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7553: LD_EXP 1
7557: PPUSH
7558: LD_STRING D5-JMM-1
7560: PPUSH
7561: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7565: LD_INT 77
7567: PPUSH
7568: LD_INT 87
7570: PPUSH
7571: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7575: LD_EXP 4
7579: PPUSH
7580: LD_STRING D5-Con-1
7582: PPUSH
7583: CALL_OW 88
// end ; end ;
7587: GO 7590
7589: POP
// end ;
7590: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7591: LD_INT 48
7593: PPUSH
7594: CALL_OW 255
7598: PUSH
7599: LD_INT 1
7601: EQUAL
7602: IFFALSE 7699
7604: GO 7606
7606: DISABLE
// begin DialogueOn ;
7607: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7611: LD_EXP 5
7615: PPUSH
7616: LD_STRING D7-Pow-1
7618: PPUSH
7619: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7623: LD_EXP 1
7627: PPUSH
7628: LD_STRING D7-JMM-1
7630: PPUSH
7631: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7635: LD_EXP 5
7639: PPUSH
7640: LD_STRING D7-Pow-2
7642: PPUSH
7643: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7647: LD_EXP 1
7651: PPUSH
7652: LD_STRING D7-JMM-2
7654: PPUSH
7655: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7659: LD_EXP 5
7663: PPUSH
7664: LD_STRING D7-Pow-3
7666: PPUSH
7667: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7671: LD_EXP 1
7675: PPUSH
7676: LD_STRING D7-JMM-3
7678: PPUSH
7679: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7683: LD_EXP 5
7687: PPUSH
7688: LD_STRING D7-Pow-4
7690: PPUSH
7691: CALL_OW 94
// DialogueOff ;
7695: CALL_OW 7
// end ; end_of_file
7699: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: LD_INT 3
7712: EQUAL
7713: IFFALSE 7787
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7715: LD_ADDR_EXP 10
7719: PUSH
7720: LD_EXP 10
7724: PPUSH
7725: LD_INT 1
7727: PPUSH
7728: CALL_OW 3
7732: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7733: LD_ADDR_EXP 10
7737: PUSH
7738: LD_EXP 10
7742: PPUSH
7743: LD_INT 1
7745: PPUSH
7746: CALL_OW 3
7750: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7751: LD_ADDR_EXP 10
7755: PUSH
7756: LD_EXP 10
7760: PPUSH
7761: LD_INT 1
7763: PPUSH
7764: CALL_OW 3
7768: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7769: LD_ADDR_EXP 10
7773: PUSH
7774: LD_EXP 10
7778: PPUSH
7779: LD_INT 1
7781: PPUSH
7782: CALL_OW 3
7786: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 255
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_INT 0
7813: EQUAL
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 2
7827: EQUAL
7828: OR
7829: PUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 266
7839: PUSH
7840: LD_INT 4
7842: EQUAL
7843: OR
7844: PUSH
7845: EMPTY
7846: LIST
7847: AND
7848: IFFALSE 7859
// ComUpgrade ( building ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 255
7868: PUSH
7869: LD_INT 3
7871: EQUAL
7872: PUSH
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 266
7882: PUSH
7883: LD_INT 32
7885: EQUAL
7886: AND
7887: IFFALSE 7928
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_INT 42
7896: PUSH
7897: LD_INT 43
7899: PUSH
7900: LD_INT 44
7902: PUSH
7903: LD_INT 46
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 1
7914: PPUSH
7915: LD_INT 4
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7928: LD_VAR 0 1
7932: PPUSH
7933: CALL_OW 255
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: PUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 266
7951: PUSH
7952: LD_INT 33
7954: EQUAL
7955: AND
7956: IFFALSE 7997
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 42
7965: PUSH
7966: LD_INT 43
7968: PUSH
7969: LD_INT 44
7971: PUSH
7972: LD_INT 46
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 1
7983: PPUSH
7984: LD_INT 4
7986: PPUSH
7987: CALL_OW 12
7991: ARRAY
7992: PPUSH
7993: CALL_OW 208
// end ;
7997: PPOPN 1
7999: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8000: LD_VAR 0 1
8004: PUSH
8005: LD_EXP 11
8009: IN
8010: IFFALSE 8028
// russianTanks := russianTanks diff unit ;
8012: LD_ADDR_EXP 11
8016: PUSH
8017: LD_EXP 11
8021: PUSH
8022: LD_VAR 0 1
8026: DIFF
8027: ST_TO_ADDR
// if unit in russianTimeLapsers then
8028: LD_VAR 0 1
8032: PUSH
8033: LD_EXP 12
8037: IN
8038: IFFALSE 8056
// russianTimeLapsers := russianTimeLapsers diff unit ;
8040: LD_ADDR_EXP 12
8044: PUSH
8045: LD_EXP 12
8049: PUSH
8050: LD_VAR 0 1
8054: DIFF
8055: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 255
8065: PUSH
8066: LD_INT 3
8068: EQUAL
8069: PUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 247
8079: PUSH
8080: LD_INT 3
8082: EQUAL
8083: AND
8084: IFFALSE 8548
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 31
8098: PUSH
8099: LD_INT 32
8101: PUSH
8102: LD_INT 36
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: LD_INT 24
8110: PUSH
8111: LD_INT 17
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 19
8119: PUSH
8120: LD_INT 20
8122: PUSH
8123: LD_INT 18
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 23
8131: PUSH
8132: LD_INT 16
8134: PUSH
8135: LD_INT 6
8137: PUSH
8138: LD_INT 29
8140: PUSH
8141: LD_INT 26
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 28
8149: PUSH
8150: LD_INT 27
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: IN
8186: IFFALSE 8272
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8188: LD_ADDR_EXP 10
8192: PUSH
8193: LD_EXP 10
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 266
8207: ADD
8208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8209: LD_ADDR_EXP 10
8213: PUSH
8214: LD_EXP 10
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 250
8228: ADD
8229: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8230: LD_ADDR_EXP 10
8234: PUSH
8235: LD_EXP 10
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 251
8249: ADD
8250: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8251: LD_ADDR_EXP 10
8255: PUSH
8256: LD_EXP 10
8260: PUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 254
8270: ADD
8271: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 266
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8364
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8287: LD_ADDR_EXP 10
8291: PUSH
8292: LD_EXP 10
8296: PUSH
8297: LD_INT 0
8299: ADD
8300: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8301: LD_ADDR_EXP 10
8305: PUSH
8306: LD_EXP 10
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 250
8320: ADD
8321: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8322: LD_ADDR_EXP 10
8326: PUSH
8327: LD_EXP 10
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 251
8341: ADD
8342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8343: LD_ADDR_EXP 10
8347: PUSH
8348: LD_EXP 10
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 254
8362: ADD
8363: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 266
8373: PUSH
8374: LD_INT 3
8376: EQUAL
8377: IFFALSE 8456
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8379: LD_ADDR_EXP 10
8383: PUSH
8384: LD_EXP 10
8388: PUSH
8389: LD_INT 2
8391: ADD
8392: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8393: LD_ADDR_EXP 10
8397: PUSH
8398: LD_EXP 10
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 250
8412: ADD
8413: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8414: LD_ADDR_EXP 10
8418: PUSH
8419: LD_EXP 10
8423: PUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 251
8433: ADD
8434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8435: LD_ADDR_EXP 10
8439: PUSH
8440: LD_EXP 10
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 254
8454: ADD
8455: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 266
8465: PUSH
8466: LD_INT 5
8468: EQUAL
8469: IFFALSE 8548
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8471: LD_ADDR_EXP 10
8475: PUSH
8476: LD_EXP 10
8480: PUSH
8481: LD_INT 4
8483: ADD
8484: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8485: LD_ADDR_EXP 10
8489: PUSH
8490: LD_EXP 10
8494: PUSH
8495: LD_VAR 0 1
8499: PPUSH
8500: CALL_OW 250
8504: ADD
8505: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8506: LD_ADDR_EXP 10
8510: PUSH
8511: LD_EXP 10
8515: PUSH
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 251
8525: ADD
8526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8527: LD_ADDR_EXP 10
8531: PUSH
8532: LD_EXP 10
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: CALL_OW 254
8546: ADD
8547: ST_TO_ADDR
// end ; end ; end ;
8548: PPOPN 1
8550: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8551: LD_VAR 0 3
8555: PPUSH
8556: CALL_OW 264
8560: PUSH
8561: LD_INT 10
8563: EQUAL
8564: IFFALSE 8580
// destroyCounter := destroyCounter + 1 ;
8566: LD_ADDR_EXP 17
8570: PUSH
8571: LD_EXP 17
8575: PUSH
8576: LD_INT 1
8578: PLUS
8579: ST_TO_ADDR
// end ;
8580: PPOPN 3
8582: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_INT 1
8590: EQUAL
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: LD_INT 40
8599: EQUAL
8600: OR
8601: IFFALSE 8725
// if GetSide ( vehicle ) = 3 then
8603: LD_VAR 0 1
8607: PPUSH
8608: CALL_OW 255
8612: PUSH
8613: LD_INT 3
8615: EQUAL
8616: IFFALSE 8725
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 264
8627: PUSH
8628: LD_INT 47
8630: EQUAL
8631: PUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 264
8641: PUSH
8642: LD_INT 46
8644: EQUAL
8645: OR
8646: PUSH
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 264
8656: PUSH
8657: LD_INT 45
8659: EQUAL
8660: OR
8661: PUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 264
8671: PUSH
8672: LD_INT 44
8674: EQUAL
8675: OR
8676: IFFALSE 8694
// russianTanks = russianTanks ^ vehicle ;
8678: LD_ADDR_EXP 11
8682: PUSH
8683: LD_EXP 11
8687: PUSH
8688: LD_VAR 0 1
8692: ADD
8693: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 264
8703: PUSH
8704: LD_INT 49
8706: EQUAL
8707: IFFALSE 8725
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8709: LD_ADDR_EXP 12
8713: PUSH
8714: LD_EXP 12
8718: PUSH
8719: LD_VAR 0 1
8723: ADD
8724: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 255
8734: PUSH
8735: LD_INT 1
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 264
8748: PUSH
8749: LD_INT 10
8751: EQUAL
8752: AND
8753: IFFALSE 8769
// amLaserCounter = amLaserCounter + 1 ;
8755: LD_ADDR_EXP 9
8759: PUSH
8760: LD_EXP 9
8764: PUSH
8765: LD_INT 1
8767: PLUS
8768: ST_TO_ADDR
// end ;
8769: PPOPN 2
8771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL 23344 0 1
// end ; end_of_file
8781: PPOPN 1
8783: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8784: LD_EXP 1
8788: PPUSH
8789: CALL_OW 310
8793: PPUSH
8794: LD_INT 12
8796: PPUSH
8797: CALL_OW 308
8801: PUSH
8802: LD_EXP 15
8806: PUSH
8807: LD_INT 0
8809: EQUAL
8810: AND
8811: IFFALSE 9157
8813: GO 8815
8815: DISABLE
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
// begin enable ;
8820: ENABLE
// if JMMGirl = 1 then
8821: LD_EXP 7
8825: PUSH
8826: LD_INT 1
8828: EQUAL
8829: IFFALSE 8846
// JMMGirlVeh = IsInUnit ( Joan ) ;
8831: LD_ADDR_VAR 0 1
8835: PUSH
8836: LD_EXP 2
8840: PPUSH
8841: CALL_OW 310
8845: ST_TO_ADDR
// if JMMGirl = 2 then
8846: LD_EXP 7
8850: PUSH
8851: LD_INT 2
8853: EQUAL
8854: IFFALSE 8871
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8856: LD_ADDR_VAR 0 1
8860: PUSH
8861: LD_EXP 3
8865: PPUSH
8866: CALL_OW 310
8870: ST_TO_ADDR
// if JMMGirl = 3 then
8871: LD_EXP 7
8875: PUSH
8876: LD_INT 3
8878: EQUAL
8879: IFFALSE 8896
// JMMGirlVeh = IsInUnit ( Connie ) ;
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_EXP 4
8890: PPUSH
8891: CALL_OW 310
8895: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8896: LD_EXP 1
8900: PPUSH
8901: CALL_OW 310
8905: PPUSH
8906: LD_EXP 2
8910: PPUSH
8911: CALL_OW 310
8915: PPUSH
8916: CALL_OW 296
8920: PUSH
8921: LD_INT 10
8923: LESS
8924: PUSH
8925: LD_EXP 1
8929: PPUSH
8930: CALL_OW 310
8934: PPUSH
8935: LD_EXP 3
8939: PPUSH
8940: CALL_OW 310
8944: PPUSH
8945: CALL_OW 296
8949: PUSH
8950: LD_INT 10
8952: LESS
8953: OR
8954: PUSH
8955: LD_EXP 1
8959: PPUSH
8960: CALL_OW 310
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 310
8974: PPUSH
8975: CALL_OW 296
8979: PUSH
8980: LD_INT 10
8982: LESS
8983: OR
8984: IFFALSE 9078
// begin case Query ( Q3b ) of 1 :
8986: LD_STRING Q3b
8988: PPUSH
8989: CALL_OW 97
8993: PUSH
8994: LD_INT 1
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9075
9002: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 265
9012: PUSH
9013: EMPTY
9014: LIST
9015: PUSH
9016: LD_VAR 0 1
9020: PPUSH
9021: CALL_OW 262
9025: PUSH
9026: EMPTY
9027: LIST
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 263
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 264
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: LD_STRING 14_JMMGirlVeh_1
9063: PPUSH
9064: CALL_OW 39
// FinishMission ;
9068: CALL 9298 0 0
// disable ;
9072: DISABLE
// end ; end ;
9073: GO 9076
9075: POP
// end else
9076: GO 9157
// begin if JMMGirl = 1 then
9078: LD_EXP 7
9082: PUSH
9083: LD_INT 1
9085: EQUAL
9086: IFFALSE 9103
// dec := Query ( Q3bJ ) else
9088: LD_ADDR_VAR 0 2
9092: PUSH
9093: LD_STRING Q3bJ
9095: PPUSH
9096: CALL_OW 97
9100: ST_TO_ADDR
9101: GO 9141
// if JMMGirl = 2 then
9103: LD_EXP 7
9107: PUSH
9108: LD_INT 2
9110: EQUAL
9111: IFFALSE 9128
// dec := Query ( Q3bL ) else
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_STRING Q3bL
9120: PPUSH
9121: CALL_OW 97
9125: ST_TO_ADDR
9126: GO 9141
// dec := Query ( Q3bX ) ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_STRING Q3bX
9135: PPUSH
9136: CALL_OW 97
9140: ST_TO_ADDR
// if dec = 1 then
9141: LD_VAR 0 2
9145: PUSH
9146: LD_INT 1
9148: EQUAL
9149: IFFALSE 9157
// begin FinishMission ;
9151: CALL 9298 0 0
// exit ;
9155: GO 9157
// end ; end ; end ;
9157: PPOPN 2
9159: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9160: LD_INT 22
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 21
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PPUSH
9184: CALL_OW 69
9188: PUSH
9189: LD_INT 0
9191: EQUAL
9192: PUSH
9193: LD_EXP 15
9197: PUSH
9198: LD_INT 0
9200: EQUAL
9201: AND
9202: IFFALSE 9297
9204: GO 9206
9206: DISABLE
// begin DialogueOn ;
9207: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9211: LD_EXP 1
9215: PPUSH
9216: LD_STRING DEnd-JMM-1
9218: PPUSH
9219: CALL_OW 88
// if JMMGirl = 1 then
9223: LD_EXP 7
9227: PUSH
9228: LD_INT 1
9230: EQUAL
9231: IFFALSE 9245
// Say ( Joan , DEnd-Joan-1 ) ;
9233: LD_EXP 2
9237: PPUSH
9238: LD_STRING DEnd-Joan-1
9240: PPUSH
9241: CALL_OW 88
// if JMMGirl = 2 then
9245: LD_EXP 7
9249: PUSH
9250: LD_INT 2
9252: EQUAL
9253: IFFALSE 9267
// Say ( Lisa , DEnd-Lisa-1 ) ;
9255: LD_EXP 3
9259: PPUSH
9260: LD_STRING DEnd-Lisa-1
9262: PPUSH
9263: CALL_OW 88
// if JMMGirl = 3 then
9267: LD_EXP 7
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9289
// Say ( Connie , DEnd-Con-1 ) ;
9277: LD_EXP 4
9281: PPUSH
9282: LD_STRING DEnd-Con-1
9284: PPUSH
9285: CALL_OW 88
// DialogueOff ;
9289: CALL_OW 7
// FinishMission ;
9293: CALL 9298 0 0
// end ;
9297: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
// m1 := false ;
9305: LD_ADDR_VAR 0 3
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// m2 := false ;
9313: LD_ADDR_VAR 0 4
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// m3 := false ;
9321: LD_ADDR_VAR 0 5
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9329: LD_EXP 1
9333: PPUSH
9334: LD_STRING 14_JMM
9336: PPUSH
9337: CALL_OW 38
// if tick <= 50 50$00 then
9341: LD_OWVAR 1
9345: PUSH
9346: LD_INT 105000
9348: LESSEQUAL
9349: IFFALSE 9358
// SetAchievement ( ACH_ASPEED_14 ) ;
9351: LD_STRING ACH_ASPEED_14
9353: PPUSH
9354: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9358: LD_EXP 1
9362: PPUSH
9363: CALL_OW 310
9367: PUSH
9368: LD_EXP 1
9372: PPUSH
9373: CALL_OW 310
9377: PPUSH
9378: CALL_OW 247
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: AND
9387: IFFALSE 9469
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_EXP 1
9398: PPUSH
9399: CALL_OW 310
9403: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9404: LD_VAR 0 2
9408: PPUSH
9409: CALL_OW 265
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 262
9426: PUSH
9427: EMPTY
9428: LIST
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: CALL_OW 263
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 264
9452: PUSH
9453: EMPTY
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_STRING 14_JMMVeh_1
9464: PPUSH
9465: CALL_OW 39
// end ; if fastEnd = 1 then
9469: LD_EXP 15
9473: PUSH
9474: LD_INT 1
9476: EQUAL
9477: IFFALSE 9566
// begin AddMedal ( fastend , - 1 ) ;
9479: LD_STRING fastend
9481: PPUSH
9482: LD_INT 1
9484: NEG
9485: PPUSH
9486: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9490: LD_STRING fastend
9492: PPUSH
9493: LD_INT 1
9495: NEG
9496: PPUSH
9497: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9501: LD_STRING fastend
9503: PPUSH
9504: LD_INT 1
9506: NEG
9507: PPUSH
9508: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9512: LD_EXP 7
9516: PPUSH
9517: LD_STRING 14_JMMGirl_1
9519: PPUSH
9520: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9524: LD_INT 0
9526: PPUSH
9527: LD_STRING 14_JMMGirlStatus_1
9529: PPUSH
9530: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9534: LD_INT 0
9536: PPUSH
9537: LD_STRING 14_KappaStatus_1
9539: PPUSH
9540: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9544: LD_STRING Eliminate
9546: PPUSH
9547: CALL_OW 102
// RewardPeople ( JMM ) ;
9551: LD_EXP 1
9555: PPUSH
9556: CALL_OW 43
// YouWin ;
9560: CALL_OW 103
// exit ;
9564: GO 10391
// end ; if fastEnd = 0 then
9566: LD_EXP 15
9570: PUSH
9571: LD_INT 0
9573: EQUAL
9574: IFFALSE 10284
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9576: LD_EXP 7
9580: PPUSH
9581: LD_STRING 14_JMMGirl_1
9583: PPUSH
9584: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9588: LD_INT 22
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 21
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 69
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: PUSH
9621: LD_INT 48
9623: PPUSH
9624: CALL_OW 255
9628: PUSH
9629: LD_INT 1
9631: EQUAL
9632: AND
9633: IFFALSE 9647
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9635: LD_INT 1
9637: PPUSH
9638: LD_STRING 14_KappaStatus_1
9640: PPUSH
9641: CALL_OW 39
9645: GO 9657
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9647: LD_INT 0
9649: PPUSH
9650: LD_STRING 14_KappaStatus_1
9652: PPUSH
9653: CALL_OW 39
// case JMMGirl of 1 :
9657: LD_EXP 7
9661: PUSH
9662: LD_INT 1
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9826
9670: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9671: LD_EXP 2
9675: PPUSH
9676: CALL_OW 302
9680: PUSH
9681: LD_EXP 2
9685: PPUSH
9686: CALL_OW 255
9690: PUSH
9691: LD_INT 1
9693: EQUAL
9694: AND
9695: PUSH
9696: LD_INT 22
9698: PUSH
9699: LD_INT 3
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 21
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: PUSH
9725: LD_INT 0
9727: EQUAL
9728: PUSH
9729: LD_EXP 1
9733: PPUSH
9734: CALL_OW 310
9738: PPUSH
9739: LD_EXP 2
9743: PPUSH
9744: CALL_OW 310
9748: PPUSH
9749: CALL_OW 296
9753: PUSH
9754: LD_INT 10
9756: LESS
9757: OR
9758: AND
9759: IFFALSE 9803
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9761: LD_INT 1
9763: PPUSH
9764: LD_STRING 14_JMMGirlStatus_1
9766: PPUSH
9767: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9771: LD_EXP 2
9775: PPUSH
9776: LD_STRING 14_Joan
9778: PPUSH
9779: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9783: LD_STRING protect
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 101
// m1 := true ;
9793: LD_ADDR_VAR 0 3
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// end else
9801: GO 9824
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9803: LD_INT 0
9805: PPUSH
9806: LD_STRING 14_JMMGirlStatus_1
9808: PPUSH
9809: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9813: LD_STRING protect
9815: PPUSH
9816: LD_INT 1
9818: NEG
9819: PPUSH
9820: CALL_OW 101
// end ; end ; 2 :
9824: GO 10155
9826: LD_INT 2
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9990
9834: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9835: LD_EXP 3
9839: PPUSH
9840: CALL_OW 302
9844: PUSH
9845: LD_EXP 3
9849: PPUSH
9850: CALL_OW 255
9854: PUSH
9855: LD_INT 1
9857: EQUAL
9858: AND
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 3
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 69
9888: PUSH
9889: LD_INT 0
9891: EQUAL
9892: PUSH
9893: LD_EXP 1
9897: PPUSH
9898: CALL_OW 310
9902: PPUSH
9903: LD_EXP 3
9907: PPUSH
9908: CALL_OW 310
9912: PPUSH
9913: CALL_OW 296
9917: PUSH
9918: LD_INT 10
9920: LESS
9921: OR
9922: AND
9923: IFFALSE 9967
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 1
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9935: LD_EXP 3
9939: PPUSH
9940: LD_STRING 14_Lisa
9942: PPUSH
9943: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9947: LD_STRING protect
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 101
// m1 := true ;
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// end else
9965: GO 9988
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9967: LD_INT 0
9969: PPUSH
9970: LD_STRING 14_JMMGirlStatus_1
9972: PPUSH
9973: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9977: LD_STRING protect
9979: PPUSH
9980: LD_INT 2
9982: NEG
9983: PPUSH
9984: CALL_OW 101
// end ; end ; 3 :
9988: GO 10155
9990: LD_INT 3
9992: DOUBLE
9993: EQUAL
9994: IFTRUE 9998
9996: GO 10154
9998: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9999: LD_EXP 4
10003: PPUSH
10004: CALL_OW 302
10008: PUSH
10009: LD_EXP 4
10013: PPUSH
10014: CALL_OW 255
10018: PUSH
10019: LD_INT 1
10021: EQUAL
10022: AND
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PUSH
10053: LD_INT 0
10055: EQUAL
10056: PUSH
10057: LD_EXP 1
10061: PPUSH
10062: CALL_OW 310
10066: PPUSH
10067: LD_EXP 4
10071: PPUSH
10072: CALL_OW 310
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 10
10084: LESS
10085: OR
10086: AND
10087: IFFALSE 10131
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10089: LD_INT 1
10091: PPUSH
10092: LD_STRING 14_JMMGirlStatus_1
10094: PPUSH
10095: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10099: LD_EXP 4
10103: PPUSH
10104: LD_STRING 14_Connie
10106: PPUSH
10107: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10111: LD_STRING protect
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 101
// m1 := true ;
10121: LD_ADDR_VAR 0 3
10125: PUSH
10126: LD_INT 1
10128: ST_TO_ADDR
// end else
10129: GO 10152
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10131: LD_INT 0
10133: PPUSH
10134: LD_STRING 14_JMMGirlStatus_1
10136: PPUSH
10137: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10141: LD_STRING protect
10143: PPUSH
10144: LD_INT 3
10146: NEG
10147: PPUSH
10148: CALL_OW 101
// end ; end ; end ;
10152: GO 10155
10154: POP
// if amLaserCounter >= 2 then
10155: LD_EXP 9
10159: PUSH
10160: LD_INT 2
10162: GREATEREQUAL
10163: IFFALSE 10185
// begin AddMedal ( double , 1 ) ;
10165: LD_STRING double
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 101
// m2 := true ;
10175: LD_ADDR_VAR 0 4
10179: PUSH
10180: LD_INT 1
10182: ST_TO_ADDR
// end else
10183: GO 10219
// begin if amLaserCounter = 1 then
10185: LD_EXP 9
10189: PUSH
10190: LD_INT 1
10192: EQUAL
10193: IFFALSE 10208
// AddMedal ( double , - 2 ) else
10195: LD_STRING double
10197: PPUSH
10198: LD_INT 2
10200: NEG
10201: PPUSH
10202: CALL_OW 101
10206: GO 10219
// AddMedal ( double , - 1 ) ;
10208: LD_STRING double
10210: PPUSH
10211: LD_INT 1
10213: NEG
10214: PPUSH
10215: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10219: LD_INT 22
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 69
10247: PUSH
10248: LD_INT 0
10250: EQUAL
10251: IFFALSE 10273
// begin AddMedal ( base , 1 ) ;
10253: LD_STRING base
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 101
// m3 := true ;
10263: LD_ADDR_VAR 0 5
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// end else
10271: GO 10284
// AddMedal ( base , - 1 ) ;
10273: LD_STRING base
10275: PPUSH
10276: LD_INT 1
10278: NEG
10279: PPUSH
10280: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_VAR 0 4
10293: AND
10294: PUSH
10295: LD_VAR 0 5
10299: AND
10300: PUSH
10301: LD_OWVAR 67
10305: PUSH
10306: LD_INT 3
10308: EQUAL
10309: AND
10310: IFFALSE 10322
// SetAchievementEX ( ACH_AMER , 14 ) ;
10312: LD_STRING ACH_AMER
10314: PPUSH
10315: LD_INT 14
10317: PPUSH
10318: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10322: LD_STRING Eliminate
10324: PPUSH
10325: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10329: LD_INT 22
10331: PUSH
10332: LD_INT 1
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 3
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: LD_INT 25
10361: PUSH
10362: LD_INT 16
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PPUSH
10383: CALL_OW 43
// YouWin ;
10387: CALL_OW 103
// end ; end_of_file
10391: LD_VAR 0 1
10395: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10396: LD_EXP 1
10400: PPUSH
10401: CALL_OW 301
10405: IFFALSE 10417
10407: GO 10409
10409: DISABLE
// YouLost ( JMM ) ; end_of_file
10410: LD_STRING JMM
10412: PPUSH
10413: CALL_OW 104
10417: END
// every 1 1$0 do
10418: GO 10420
10420: DISABLE
// begin enable ;
10421: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10422: LD_INT 3
10424: PPUSH
10425: LD_INT 5
10427: PPUSH
10428: CALL_OW 12
10432: PPUSH
10433: LD_INT 13
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 55
// end ; end_of_file
10443: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
10444: LD_INT 0
10446: PPUSH
// ar_crane := 88 ;
10447: LD_ADDR_EXP 25
10451: PUSH
10452: LD_INT 88
10454: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10455: LD_ADDR_EXP 20
10459: PUSH
10460: LD_INT 89
10462: ST_TO_ADDR
// us_hack := 99 ;
10463: LD_ADDR_EXP 21
10467: PUSH
10468: LD_INT 99
10470: ST_TO_ADDR
// us_artillery := 97 ;
10471: LD_ADDR_EXP 22
10475: PUSH
10476: LD_INT 97
10478: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10479: LD_ADDR_EXP 23
10483: PUSH
10484: LD_INT 91
10486: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
10487: LD_ADDR_EXP 24
10491: PUSH
10492: LD_INT 92
10494: ST_TO_ADDR
// ru_radar := 98 ;
10495: LD_ADDR_EXP 19
10499: PUSH
10500: LD_INT 98
10502: ST_TO_ADDR
// tech_Artillery := 80 ;
10503: LD_ADDR_EXP 26
10507: PUSH
10508: LD_INT 80
10510: ST_TO_ADDR
// tech_RadMat := 81 ;
10511: LD_ADDR_EXP 27
10515: PUSH
10516: LD_INT 81
10518: ST_TO_ADDR
// tech_BasicTools := 82 ;
10519: LD_ADDR_EXP 28
10523: PUSH
10524: LD_INT 82
10526: ST_TO_ADDR
// tech_Cargo := 83 ;
10527: LD_ADDR_EXP 29
10531: PUSH
10532: LD_INT 83
10534: ST_TO_ADDR
// tech_Track := 84 ;
10535: LD_ADDR_EXP 30
10539: PUSH
10540: LD_INT 84
10542: ST_TO_ADDR
// tech_Crane := 85 ;
10543: LD_ADDR_EXP 31
10547: PUSH
10548: LD_INT 85
10550: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10551: LD_ADDR_EXP 32
10555: PUSH
10556: LD_INT 86
10558: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10559: LD_ADDR_EXP 33
10563: PUSH
10564: LD_INT 87
10566: ST_TO_ADDR
// end ;
10567: LD_VAR 0 1
10571: RET
// every 1 do
10572: GO 10574
10574: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10575: CALL 10444 0 0
10579: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10580: LD_VAR 0 2
10584: PUSH
10585: LD_INT 100
10587: EQUAL
10588: IFFALSE 11537
// begin if not StreamModeActive then
10590: LD_EXP 34
10594: NOT
10595: IFFALSE 10605
// StreamModeActive := true ;
10597: LD_ADDR_EXP 34
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// if p3 = 0 then
10605: LD_VAR 0 3
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10619
// InitStreamMode ;
10615: CALL 11770 0 0
// if p3 = 1 then
10619: LD_VAR 0 3
10623: PUSH
10624: LD_INT 1
10626: EQUAL
10627: IFFALSE 10637
// sRocket := true ;
10629: LD_ADDR_EXP 39
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// if p3 = 2 then
10637: LD_VAR 0 3
10641: PUSH
10642: LD_INT 2
10644: EQUAL
10645: IFFALSE 10655
// sSpeed := true ;
10647: LD_ADDR_EXP 38
10651: PUSH
10652: LD_INT 1
10654: ST_TO_ADDR
// if p3 = 3 then
10655: LD_VAR 0 3
10659: PUSH
10660: LD_INT 3
10662: EQUAL
10663: IFFALSE 10673
// sEngine := true ;
10665: LD_ADDR_EXP 40
10669: PUSH
10670: LD_INT 1
10672: ST_TO_ADDR
// if p3 = 4 then
10673: LD_VAR 0 3
10677: PUSH
10678: LD_INT 4
10680: EQUAL
10681: IFFALSE 10691
// sSpec := true ;
10683: LD_ADDR_EXP 37
10687: PUSH
10688: LD_INT 1
10690: ST_TO_ADDR
// if p3 = 5 then
10691: LD_VAR 0 3
10695: PUSH
10696: LD_INT 5
10698: EQUAL
10699: IFFALSE 10709
// sLevel := true ;
10701: LD_ADDR_EXP 41
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
// if p3 = 6 then
10709: LD_VAR 0 3
10713: PUSH
10714: LD_INT 6
10716: EQUAL
10717: IFFALSE 10727
// sArmoury := true ;
10719: LD_ADDR_EXP 42
10723: PUSH
10724: LD_INT 1
10726: ST_TO_ADDR
// if p3 = 7 then
10727: LD_VAR 0 3
10731: PUSH
10732: LD_INT 7
10734: EQUAL
10735: IFFALSE 10745
// sRadar := true ;
10737: LD_ADDR_EXP 43
10741: PUSH
10742: LD_INT 1
10744: ST_TO_ADDR
// if p3 = 8 then
10745: LD_VAR 0 3
10749: PUSH
10750: LD_INT 8
10752: EQUAL
10753: IFFALSE 10763
// sBunker := true ;
10755: LD_ADDR_EXP 44
10759: PUSH
10760: LD_INT 1
10762: ST_TO_ADDR
// if p3 = 9 then
10763: LD_VAR 0 3
10767: PUSH
10768: LD_INT 9
10770: EQUAL
10771: IFFALSE 10781
// sHack := true ;
10773: LD_ADDR_EXP 45
10777: PUSH
10778: LD_INT 1
10780: ST_TO_ADDR
// if p3 = 10 then
10781: LD_VAR 0 3
10785: PUSH
10786: LD_INT 10
10788: EQUAL
10789: IFFALSE 10799
// sFire := true ;
10791: LD_ADDR_EXP 46
10795: PUSH
10796: LD_INT 1
10798: ST_TO_ADDR
// if p3 = 11 then
10799: LD_VAR 0 3
10803: PUSH
10804: LD_INT 11
10806: EQUAL
10807: IFFALSE 10817
// sRefresh := true ;
10809: LD_ADDR_EXP 47
10813: PUSH
10814: LD_INT 1
10816: ST_TO_ADDR
// if p3 = 12 then
10817: LD_VAR 0 3
10821: PUSH
10822: LD_INT 12
10824: EQUAL
10825: IFFALSE 10835
// sExp := true ;
10827: LD_ADDR_EXP 48
10831: PUSH
10832: LD_INT 1
10834: ST_TO_ADDR
// if p3 = 13 then
10835: LD_VAR 0 3
10839: PUSH
10840: LD_INT 13
10842: EQUAL
10843: IFFALSE 10853
// sDepot := true ;
10845: LD_ADDR_EXP 49
10849: PUSH
10850: LD_INT 1
10852: ST_TO_ADDR
// if p3 = 14 then
10853: LD_VAR 0 3
10857: PUSH
10858: LD_INT 14
10860: EQUAL
10861: IFFALSE 10871
// sFlag := true ;
10863: LD_ADDR_EXP 50
10867: PUSH
10868: LD_INT 1
10870: ST_TO_ADDR
// if p3 = 15 then
10871: LD_VAR 0 3
10875: PUSH
10876: LD_INT 15
10878: EQUAL
10879: IFFALSE 10889
// sKamikadze := true ;
10881: LD_ADDR_EXP 58
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// if p3 = 16 then
10889: LD_VAR 0 3
10893: PUSH
10894: LD_INT 16
10896: EQUAL
10897: IFFALSE 10907
// sTroll := true ;
10899: LD_ADDR_EXP 59
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// if p3 = 17 then
10907: LD_VAR 0 3
10911: PUSH
10912: LD_INT 17
10914: EQUAL
10915: IFFALSE 10925
// sSlow := true ;
10917: LD_ADDR_EXP 60
10921: PUSH
10922: LD_INT 1
10924: ST_TO_ADDR
// if p3 = 18 then
10925: LD_VAR 0 3
10929: PUSH
10930: LD_INT 18
10932: EQUAL
10933: IFFALSE 10943
// sLack := true ;
10935: LD_ADDR_EXP 61
10939: PUSH
10940: LD_INT 1
10942: ST_TO_ADDR
// if p3 = 19 then
10943: LD_VAR 0 3
10947: PUSH
10948: LD_INT 19
10950: EQUAL
10951: IFFALSE 10961
// sTank := true ;
10953: LD_ADDR_EXP 63
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// if p3 = 20 then
10961: LD_VAR 0 3
10965: PUSH
10966: LD_INT 20
10968: EQUAL
10969: IFFALSE 10979
// sRemote := true ;
10971: LD_ADDR_EXP 64
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// if p3 = 21 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 21
10986: EQUAL
10987: IFFALSE 10997
// sPowell := true ;
10989: LD_ADDR_EXP 65
10993: PUSH
10994: LD_INT 1
10996: ST_TO_ADDR
// if p3 = 22 then
10997: LD_VAR 0 3
11001: PUSH
11002: LD_INT 22
11004: EQUAL
11005: IFFALSE 11015
// sTeleport := true ;
11007: LD_ADDR_EXP 68
11011: PUSH
11012: LD_INT 1
11014: ST_TO_ADDR
// if p3 = 23 then
11015: LD_VAR 0 3
11019: PUSH
11020: LD_INT 23
11022: EQUAL
11023: IFFALSE 11033
// sOilTower := true ;
11025: LD_ADDR_EXP 70
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// if p3 = 24 then
11033: LD_VAR 0 3
11037: PUSH
11038: LD_INT 24
11040: EQUAL
11041: IFFALSE 11051
// sShovel := true ;
11043: LD_ADDR_EXP 71
11047: PUSH
11048: LD_INT 1
11050: ST_TO_ADDR
// if p3 = 25 then
11051: LD_VAR 0 3
11055: PUSH
11056: LD_INT 25
11058: EQUAL
11059: IFFALSE 11069
// sSheik := true ;
11061: LD_ADDR_EXP 72
11065: PUSH
11066: LD_INT 1
11068: ST_TO_ADDR
// if p3 = 26 then
11069: LD_VAR 0 3
11073: PUSH
11074: LD_INT 26
11076: EQUAL
11077: IFFALSE 11087
// sEarthquake := true ;
11079: LD_ADDR_EXP 74
11083: PUSH
11084: LD_INT 1
11086: ST_TO_ADDR
// if p3 = 27 then
11087: LD_VAR 0 3
11091: PUSH
11092: LD_INT 27
11094: EQUAL
11095: IFFALSE 11105
// sAI := true ;
11097: LD_ADDR_EXP 75
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// if p3 = 28 then
11105: LD_VAR 0 3
11109: PUSH
11110: LD_INT 28
11112: EQUAL
11113: IFFALSE 11123
// sCargo := true ;
11115: LD_ADDR_EXP 78
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// if p3 = 29 then
11123: LD_VAR 0 3
11127: PUSH
11128: LD_INT 29
11130: EQUAL
11131: IFFALSE 11141
// sDLaser := true ;
11133: LD_ADDR_EXP 79
11137: PUSH
11138: LD_INT 1
11140: ST_TO_ADDR
// if p3 = 30 then
11141: LD_VAR 0 3
11145: PUSH
11146: LD_INT 30
11148: EQUAL
11149: IFFALSE 11159
// sExchange := true ;
11151: LD_ADDR_EXP 80
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// if p3 = 31 then
11159: LD_VAR 0 3
11163: PUSH
11164: LD_INT 31
11166: EQUAL
11167: IFFALSE 11177
// sFac := true ;
11169: LD_ADDR_EXP 81
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// if p3 = 32 then
11177: LD_VAR 0 3
11181: PUSH
11182: LD_INT 32
11184: EQUAL
11185: IFFALSE 11195
// sPower := true ;
11187: LD_ADDR_EXP 82
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// if p3 = 33 then
11195: LD_VAR 0 3
11199: PUSH
11200: LD_INT 33
11202: EQUAL
11203: IFFALSE 11213
// sRandom := true ;
11205: LD_ADDR_EXP 83
11209: PUSH
11210: LD_INT 1
11212: ST_TO_ADDR
// if p3 = 34 then
11213: LD_VAR 0 3
11217: PUSH
11218: LD_INT 34
11220: EQUAL
11221: IFFALSE 11231
// sShield := true ;
11223: LD_ADDR_EXP 84
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// if p3 = 35 then
11231: LD_VAR 0 3
11235: PUSH
11236: LD_INT 35
11238: EQUAL
11239: IFFALSE 11249
// sTime := true ;
11241: LD_ADDR_EXP 85
11245: PUSH
11246: LD_INT 1
11248: ST_TO_ADDR
// if p3 = 36 then
11249: LD_VAR 0 3
11253: PUSH
11254: LD_INT 36
11256: EQUAL
11257: IFFALSE 11267
// sTools := true ;
11259: LD_ADDR_EXP 86
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// if p3 = 101 then
11267: LD_VAR 0 3
11271: PUSH
11272: LD_INT 101
11274: EQUAL
11275: IFFALSE 11285
// sSold := true ;
11277: LD_ADDR_EXP 51
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// if p3 = 102 then
11285: LD_VAR 0 3
11289: PUSH
11290: LD_INT 102
11292: EQUAL
11293: IFFALSE 11303
// sDiff := true ;
11295: LD_ADDR_EXP 52
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// if p3 = 103 then
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 103
11310: EQUAL
11311: IFFALSE 11321
// sFog := true ;
11313: LD_ADDR_EXP 55
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// if p3 = 104 then
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 104
11328: EQUAL
11329: IFFALSE 11339
// sReset := true ;
11331: LD_ADDR_EXP 56
11335: PUSH
11336: LD_INT 1
11338: ST_TO_ADDR
// if p3 = 105 then
11339: LD_VAR 0 3
11343: PUSH
11344: LD_INT 105
11346: EQUAL
11347: IFFALSE 11357
// sSun := true ;
11349: LD_ADDR_EXP 57
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// if p3 = 106 then
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 106
11364: EQUAL
11365: IFFALSE 11375
// sTiger := true ;
11367: LD_ADDR_EXP 53
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// if p3 = 107 then
11375: LD_VAR 0 3
11379: PUSH
11380: LD_INT 107
11382: EQUAL
11383: IFFALSE 11393
// sBomb := true ;
11385: LD_ADDR_EXP 54
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// if p3 = 108 then
11393: LD_VAR 0 3
11397: PUSH
11398: LD_INT 108
11400: EQUAL
11401: IFFALSE 11411
// sWound := true ;
11403: LD_ADDR_EXP 62
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// if p3 = 109 then
11411: LD_VAR 0 3
11415: PUSH
11416: LD_INT 109
11418: EQUAL
11419: IFFALSE 11429
// sBetray := true ;
11421: LD_ADDR_EXP 66
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// if p3 = 110 then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 110
11436: EQUAL
11437: IFFALSE 11447
// sContamin := true ;
11439: LD_ADDR_EXP 67
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// if p3 = 111 then
11447: LD_VAR 0 3
11451: PUSH
11452: LD_INT 111
11454: EQUAL
11455: IFFALSE 11465
// sOil := true ;
11457: LD_ADDR_EXP 69
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// if p3 = 112 then
11465: LD_VAR 0 3
11469: PUSH
11470: LD_INT 112
11472: EQUAL
11473: IFFALSE 11483
// sStu := true ;
11475: LD_ADDR_EXP 73
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// if p3 = 113 then
11483: LD_VAR 0 3
11487: PUSH
11488: LD_INT 113
11490: EQUAL
11491: IFFALSE 11501
// sBazooka := true ;
11493: LD_ADDR_EXP 76
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// if p3 = 114 then
11501: LD_VAR 0 3
11505: PUSH
11506: LD_INT 114
11508: EQUAL
11509: IFFALSE 11519
// sMortar := true ;
11511: LD_ADDR_EXP 77
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// if p3 = 115 then
11519: LD_VAR 0 3
11523: PUSH
11524: LD_INT 115
11526: EQUAL
11527: IFFALSE 11537
// sRanger := true ;
11529: LD_ADDR_EXP 87
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ; if p2 = 101 then
11537: LD_VAR 0 2
11541: PUSH
11542: LD_INT 101
11544: EQUAL
11545: IFFALSE 11748
// begin case p3 of 1 :
11547: LD_VAR 0 3
11551: PUSH
11552: LD_INT 1
11554: DOUBLE
11555: EQUAL
11556: IFTRUE 11560
11558: GO 11567
11560: POP
// hHackUnlimitedResources ; 2 :
11561: CALL 21842 0 0
11565: GO 11748
11567: LD_INT 2
11569: DOUBLE
11570: EQUAL
11571: IFTRUE 11575
11573: GO 11582
11575: POP
// hHackSetLevel10 ; 3 :
11576: CALL 21975 0 0
11580: GO 11748
11582: LD_INT 3
11584: DOUBLE
11585: EQUAL
11586: IFTRUE 11590
11588: GO 11597
11590: POP
// hHackSetLevel10YourUnits ; 4 :
11591: CALL 22060 0 0
11595: GO 11748
11597: LD_INT 4
11599: DOUBLE
11600: EQUAL
11601: IFTRUE 11605
11603: GO 11627
11605: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
11606: LD_VAR 0 4
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: LD_VAR 0 6
11620: PPUSH
11621: CALL 22150 0 3
11625: GO 11748
11627: LD_INT 5
11629: DOUBLE
11630: EQUAL
11631: IFTRUE 11635
11633: GO 11642
11635: POP
// hHackSpawnVehicle ; 6 :
11636: CALL 22211 0 0
11640: GO 11748
11642: LD_INT 6
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11657
11650: POP
// hHackInvincible ; 7 :
11651: CALL 22757 0 0
11655: GO 11748
11657: LD_INT 7
11659: DOUBLE
11660: EQUAL
11661: IFTRUE 11665
11663: GO 11672
11665: POP
// hHackInvisible ; 8 :
11666: CALL 22868 0 0
11670: GO 11748
11672: LD_INT 8
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11687
11680: POP
// hHackChangeYourSide ; 9 :
11681: CALL 22925 0 0
11685: GO 11748
11687: LD_INT 9
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11702
11695: POP
// hHackChangeUnitSide ; 10 :
11696: CALL 22967 0 0
11700: GO 11748
11702: LD_INT 10
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11717
11710: POP
// hHackFog ; 11 :
11711: CALL 23068 0 0
11715: GO 11748
11717: LD_INT 11
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11732
11725: POP
// hHackApeman ; 12 :
11726: CALL 23083 0 0
11730: GO 11748
11732: LD_INT 12
11734: DOUBLE
11735: EQUAL
11736: IFTRUE 11740
11738: GO 11747
11740: POP
// hHackBoom ; end ;
11741: CALL 23168 0 0
11745: GO 11748
11747: POP
// end ; end ;
11748: PPOPN 6
11750: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11751: GO 11753
11753: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11754: LD_STRING initStreamRollete();
11756: PPUSH
11757: CALL_OW 559
// InitStreamMode ;
11761: CALL 11770 0 0
// DefineStreamItems ( ) ;
11765: CALL 12210 0 0
// end ;
11769: END
// function InitStreamMode ; begin
11770: LD_INT 0
11772: PPUSH
// streamModeActive := false ;
11773: LD_ADDR_EXP 34
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// normalCounter := 36 ;
11781: LD_ADDR_EXP 35
11785: PUSH
11786: LD_INT 36
11788: ST_TO_ADDR
// hardcoreCounter := 16 ;
11789: LD_ADDR_EXP 36
11793: PUSH
11794: LD_INT 16
11796: ST_TO_ADDR
// sRocket := false ;
11797: LD_ADDR_EXP 39
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// sSpeed := false ;
11805: LD_ADDR_EXP 38
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// sEngine := false ;
11813: LD_ADDR_EXP 40
11817: PUSH
11818: LD_INT 0
11820: ST_TO_ADDR
// sSpec := false ;
11821: LD_ADDR_EXP 37
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// sLevel := false ;
11829: LD_ADDR_EXP 41
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// sArmoury := false ;
11837: LD_ADDR_EXP 42
11841: PUSH
11842: LD_INT 0
11844: ST_TO_ADDR
// sRadar := false ;
11845: LD_ADDR_EXP 43
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// sBunker := false ;
11853: LD_ADDR_EXP 44
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// sHack := false ;
11861: LD_ADDR_EXP 45
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// sFire := false ;
11869: LD_ADDR_EXP 46
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// sRefresh := false ;
11877: LD_ADDR_EXP 47
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// sExp := false ;
11885: LD_ADDR_EXP 48
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// sDepot := false ;
11893: LD_ADDR_EXP 49
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// sFlag := false ;
11901: LD_ADDR_EXP 50
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// sKamikadze := false ;
11909: LD_ADDR_EXP 58
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// sTroll := false ;
11917: LD_ADDR_EXP 59
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// sSlow := false ;
11925: LD_ADDR_EXP 60
11929: PUSH
11930: LD_INT 0
11932: ST_TO_ADDR
// sLack := false ;
11933: LD_ADDR_EXP 61
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// sTank := false ;
11941: LD_ADDR_EXP 63
11945: PUSH
11946: LD_INT 0
11948: ST_TO_ADDR
// sRemote := false ;
11949: LD_ADDR_EXP 64
11953: PUSH
11954: LD_INT 0
11956: ST_TO_ADDR
// sPowell := false ;
11957: LD_ADDR_EXP 65
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// sTeleport := false ;
11965: LD_ADDR_EXP 68
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// sOilTower := false ;
11973: LD_ADDR_EXP 70
11977: PUSH
11978: LD_INT 0
11980: ST_TO_ADDR
// sShovel := false ;
11981: LD_ADDR_EXP 71
11985: PUSH
11986: LD_INT 0
11988: ST_TO_ADDR
// sSheik := false ;
11989: LD_ADDR_EXP 72
11993: PUSH
11994: LD_INT 0
11996: ST_TO_ADDR
// sEarthquake := false ;
11997: LD_ADDR_EXP 74
12001: PUSH
12002: LD_INT 0
12004: ST_TO_ADDR
// sAI := false ;
12005: LD_ADDR_EXP 75
12009: PUSH
12010: LD_INT 0
12012: ST_TO_ADDR
// sCargo := false ;
12013: LD_ADDR_EXP 78
12017: PUSH
12018: LD_INT 0
12020: ST_TO_ADDR
// sDLaser := false ;
12021: LD_ADDR_EXP 79
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// sExchange := false ;
12029: LD_ADDR_EXP 80
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// sFac := false ;
12037: LD_ADDR_EXP 81
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// sPower := false ;
12045: LD_ADDR_EXP 82
12049: PUSH
12050: LD_INT 0
12052: ST_TO_ADDR
// sRandom := false ;
12053: LD_ADDR_EXP 83
12057: PUSH
12058: LD_INT 0
12060: ST_TO_ADDR
// sShield := false ;
12061: LD_ADDR_EXP 84
12065: PUSH
12066: LD_INT 0
12068: ST_TO_ADDR
// sTime := false ;
12069: LD_ADDR_EXP 85
12073: PUSH
12074: LD_INT 0
12076: ST_TO_ADDR
// sTools := false ;
12077: LD_ADDR_EXP 86
12081: PUSH
12082: LD_INT 0
12084: ST_TO_ADDR
// sSold := false ;
12085: LD_ADDR_EXP 51
12089: PUSH
12090: LD_INT 0
12092: ST_TO_ADDR
// sDiff := false ;
12093: LD_ADDR_EXP 52
12097: PUSH
12098: LD_INT 0
12100: ST_TO_ADDR
// sFog := false ;
12101: LD_ADDR_EXP 55
12105: PUSH
12106: LD_INT 0
12108: ST_TO_ADDR
// sReset := false ;
12109: LD_ADDR_EXP 56
12113: PUSH
12114: LD_INT 0
12116: ST_TO_ADDR
// sSun := false ;
12117: LD_ADDR_EXP 57
12121: PUSH
12122: LD_INT 0
12124: ST_TO_ADDR
// sTiger := false ;
12125: LD_ADDR_EXP 53
12129: PUSH
12130: LD_INT 0
12132: ST_TO_ADDR
// sBomb := false ;
12133: LD_ADDR_EXP 54
12137: PUSH
12138: LD_INT 0
12140: ST_TO_ADDR
// sWound := false ;
12141: LD_ADDR_EXP 62
12145: PUSH
12146: LD_INT 0
12148: ST_TO_ADDR
// sBetray := false ;
12149: LD_ADDR_EXP 66
12153: PUSH
12154: LD_INT 0
12156: ST_TO_ADDR
// sContamin := false ;
12157: LD_ADDR_EXP 67
12161: PUSH
12162: LD_INT 0
12164: ST_TO_ADDR
// sOil := false ;
12165: LD_ADDR_EXP 69
12169: PUSH
12170: LD_INT 0
12172: ST_TO_ADDR
// sStu := false ;
12173: LD_ADDR_EXP 73
12177: PUSH
12178: LD_INT 0
12180: ST_TO_ADDR
// sBazooka := false ;
12181: LD_ADDR_EXP 76
12185: PUSH
12186: LD_INT 0
12188: ST_TO_ADDR
// sMortar := false ;
12189: LD_ADDR_EXP 77
12193: PUSH
12194: LD_INT 0
12196: ST_TO_ADDR
// sRanger := false ;
12197: LD_ADDR_EXP 87
12201: PUSH
12202: LD_INT 0
12204: ST_TO_ADDR
// end ;
12205: LD_VAR 0 1
12209: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12210: LD_INT 0
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
12216: PPUSH
// result := [ ] ;
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: EMPTY
12223: ST_TO_ADDR
// if campaign_id = 1 then
12224: LD_OWVAR 69
12228: PUSH
12229: LD_INT 1
12231: EQUAL
12232: IFFALSE 15170
// begin case mission_number of 1 :
12234: LD_OWVAR 70
12238: PUSH
12239: LD_INT 1
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12311
12247: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12248: LD_ADDR_VAR 0 1
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 4
12258: PUSH
12259: LD_INT 11
12261: PUSH
12262: LD_INT 12
12264: PUSH
12265: LD_INT 15
12267: PUSH
12268: LD_INT 16
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 23
12276: PUSH
12277: LD_INT 26
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 101
12293: PUSH
12294: LD_INT 102
12296: PUSH
12297: LD_INT 106
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: ST_TO_ADDR
12309: GO 15168
12311: LD_INT 2
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12391
12319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12320: LD_ADDR_VAR 0 1
12324: PUSH
12325: LD_INT 2
12327: PUSH
12328: LD_INT 4
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: LD_INT 15
12339: PUSH
12340: LD_INT 16
12342: PUSH
12343: LD_INT 22
12345: PUSH
12346: LD_INT 23
12348: PUSH
12349: LD_INT 26
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 101
12365: PUSH
12366: LD_INT 102
12368: PUSH
12369: LD_INT 105
12371: PUSH
12372: LD_INT 106
12374: PUSH
12375: LD_INT 108
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: ST_TO_ADDR
12389: GO 15168
12391: LD_INT 3
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12399
12397: GO 12475
12399: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12400: LD_ADDR_VAR 0 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 4
12410: PUSH
12411: LD_INT 5
12413: PUSH
12414: LD_INT 11
12416: PUSH
12417: LD_INT 12
12419: PUSH
12420: LD_INT 15
12422: PUSH
12423: LD_INT 16
12425: PUSH
12426: LD_INT 22
12428: PUSH
12429: LD_INT 26
12431: PUSH
12432: LD_INT 36
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 101
12449: PUSH
12450: LD_INT 102
12452: PUSH
12453: LD_INT 105
12455: PUSH
12456: LD_INT 106
12458: PUSH
12459: LD_INT 108
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: ST_TO_ADDR
12473: GO 15168
12475: LD_INT 4
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12567
12483: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 8
12500: PUSH
12501: LD_INT 11
12503: PUSH
12504: LD_INT 12
12506: PUSH
12507: LD_INT 15
12509: PUSH
12510: LD_INT 16
12512: PUSH
12513: LD_INT 22
12515: PUSH
12516: LD_INT 23
12518: PUSH
12519: LD_INT 26
12521: PUSH
12522: LD_INT 36
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 101
12541: PUSH
12542: LD_INT 102
12544: PUSH
12545: LD_INT 105
12547: PUSH
12548: LD_INT 106
12550: PUSH
12551: LD_INT 108
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 15168
12567: LD_INT 5
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12675
12575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: LD_INT 2
12583: PUSH
12584: LD_INT 4
12586: PUSH
12587: LD_INT 5
12589: PUSH
12590: LD_INT 6
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 11
12598: PUSH
12599: LD_INT 12
12601: PUSH
12602: LD_INT 15
12604: PUSH
12605: LD_INT 16
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 23
12613: PUSH
12614: LD_INT 25
12616: PUSH
12617: LD_INT 26
12619: PUSH
12620: LD_INT 36
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 101
12641: PUSH
12642: LD_INT 102
12644: PUSH
12645: LD_INT 105
12647: PUSH
12648: LD_INT 106
12650: PUSH
12651: LD_INT 108
12653: PUSH
12654: LD_INT 109
12656: PUSH
12657: LD_INT 112
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 15168
12675: LD_INT 6
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12803
12683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: LD_INT 4
12694: PUSH
12695: LD_INT 5
12697: PUSH
12698: LD_INT 6
12700: PUSH
12701: LD_INT 8
12703: PUSH
12704: LD_INT 11
12706: PUSH
12707: LD_INT 12
12709: PUSH
12710: LD_INT 15
12712: PUSH
12713: LD_INT 16
12715: PUSH
12716: LD_INT 20
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 25
12730: PUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: LD_INT 31
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: LD_INT 36
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 101
12769: PUSH
12770: LD_INT 102
12772: PUSH
12773: LD_INT 105
12775: PUSH
12776: LD_INT 106
12778: PUSH
12779: LD_INT 108
12781: PUSH
12782: LD_INT 109
12784: PUSH
12785: LD_INT 112
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: ST_TO_ADDR
12801: GO 15168
12803: LD_INT 7
12805: DOUBLE
12806: EQUAL
12807: IFTRUE 12811
12809: GO 12911
12811: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_INT 2
12819: PUSH
12820: LD_INT 4
12822: PUSH
12823: LD_INT 5
12825: PUSH
12826: LD_INT 7
12828: PUSH
12829: LD_INT 11
12831: PUSH
12832: LD_INT 12
12834: PUSH
12835: LD_INT 15
12837: PUSH
12838: LD_INT 16
12840: PUSH
12841: LD_INT 20
12843: PUSH
12844: LD_INT 21
12846: PUSH
12847: LD_INT 22
12849: PUSH
12850: LD_INT 23
12852: PUSH
12853: LD_INT 25
12855: PUSH
12856: LD_INT 26
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 101
12877: PUSH
12878: LD_INT 102
12880: PUSH
12881: LD_INT 103
12883: PUSH
12884: LD_INT 105
12886: PUSH
12887: LD_INT 106
12889: PUSH
12890: LD_INT 108
12892: PUSH
12893: LD_INT 112
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: ST_TO_ADDR
12909: GO 15168
12911: LD_INT 8
12913: DOUBLE
12914: EQUAL
12915: IFTRUE 12919
12917: GO 13047
12919: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12920: LD_ADDR_VAR 0 1
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: LD_INT 4
12930: PUSH
12931: LD_INT 5
12933: PUSH
12934: LD_INT 6
12936: PUSH
12937: LD_INT 7
12939: PUSH
12940: LD_INT 8
12942: PUSH
12943: LD_INT 11
12945: PUSH
12946: LD_INT 12
12948: PUSH
12949: LD_INT 15
12951: PUSH
12952: LD_INT 16
12954: PUSH
12955: LD_INT 20
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 22
12963: PUSH
12964: LD_INT 23
12966: PUSH
12967: LD_INT 25
12969: PUSH
12970: LD_INT 26
12972: PUSH
12973: LD_INT 30
12975: PUSH
12976: LD_INT 31
12978: PUSH
12979: LD_INT 32
12981: PUSH
12982: LD_INT 36
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 101
13009: PUSH
13010: LD_INT 102
13012: PUSH
13013: LD_INT 103
13015: PUSH
13016: LD_INT 105
13018: PUSH
13019: LD_INT 106
13021: PUSH
13022: LD_INT 108
13024: PUSH
13025: LD_INT 109
13027: PUSH
13028: LD_INT 112
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: ST_TO_ADDR
13045: GO 15168
13047: LD_INT 9
13049: DOUBLE
13050: EQUAL
13051: IFTRUE 13055
13053: GO 13191
13055: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13056: LD_ADDR_VAR 0 1
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 7
13075: PUSH
13076: LD_INT 8
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 15
13087: PUSH
13088: LD_INT 16
13090: PUSH
13091: LD_INT 20
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_INT 23
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: LD_INT 28
13111: PUSH
13112: LD_INT 30
13114: PUSH
13115: LD_INT 31
13117: PUSH
13118: LD_INT 32
13120: PUSH
13121: LD_INT 36
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 101
13149: PUSH
13150: LD_INT 102
13152: PUSH
13153: LD_INT 103
13155: PUSH
13156: LD_INT 105
13158: PUSH
13159: LD_INT 106
13161: PUSH
13162: LD_INT 108
13164: PUSH
13165: LD_INT 109
13167: PUSH
13168: LD_INT 112
13170: PUSH
13171: LD_INT 114
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: ST_TO_ADDR
13189: GO 15168
13191: LD_INT 10
13193: DOUBLE
13194: EQUAL
13195: IFTRUE 13199
13197: GO 13383
13199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13200: LD_ADDR_VAR 0 1
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: LD_INT 4
13210: PUSH
13211: LD_INT 5
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: LD_INT 7
13219: PUSH
13220: LD_INT 8
13222: PUSH
13223: LD_INT 9
13225: PUSH
13226: LD_INT 10
13228: PUSH
13229: LD_INT 11
13231: PUSH
13232: LD_INT 12
13234: PUSH
13235: LD_INT 13
13237: PUSH
13238: LD_INT 14
13240: PUSH
13241: LD_INT 15
13243: PUSH
13244: LD_INT 16
13246: PUSH
13247: LD_INT 17
13249: PUSH
13250: LD_INT 18
13252: PUSH
13253: LD_INT 19
13255: PUSH
13256: LD_INT 20
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 22
13264: PUSH
13265: LD_INT 23
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 26
13276: PUSH
13277: LD_INT 28
13279: PUSH
13280: LD_INT 30
13282: PUSH
13283: LD_INT 31
13285: PUSH
13286: LD_INT 32
13288: PUSH
13289: LD_INT 36
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 101
13325: PUSH
13326: LD_INT 102
13328: PUSH
13329: LD_INT 103
13331: PUSH
13332: LD_INT 104
13334: PUSH
13335: LD_INT 105
13337: PUSH
13338: LD_INT 106
13340: PUSH
13341: LD_INT 107
13343: PUSH
13344: LD_INT 108
13346: PUSH
13347: LD_INT 109
13349: PUSH
13350: LD_INT 110
13352: PUSH
13353: LD_INT 111
13355: PUSH
13356: LD_INT 112
13358: PUSH
13359: LD_INT 114
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: ST_TO_ADDR
13381: GO 15168
13383: LD_INT 11
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13583
13391: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13392: LD_ADDR_VAR 0 1
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: LD_INT 3
13402: PUSH
13403: LD_INT 4
13405: PUSH
13406: LD_INT 5
13408: PUSH
13409: LD_INT 6
13411: PUSH
13412: LD_INT 7
13414: PUSH
13415: LD_INT 8
13417: PUSH
13418: LD_INT 9
13420: PUSH
13421: LD_INT 10
13423: PUSH
13424: LD_INT 11
13426: PUSH
13427: LD_INT 12
13429: PUSH
13430: LD_INT 13
13432: PUSH
13433: LD_INT 14
13435: PUSH
13436: LD_INT 15
13438: PUSH
13439: LD_INT 16
13441: PUSH
13442: LD_INT 17
13444: PUSH
13445: LD_INT 18
13447: PUSH
13448: LD_INT 19
13450: PUSH
13451: LD_INT 20
13453: PUSH
13454: LD_INT 21
13456: PUSH
13457: LD_INT 22
13459: PUSH
13460: LD_INT 23
13462: PUSH
13463: LD_INT 24
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 26
13471: PUSH
13472: LD_INT 28
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 31
13480: PUSH
13481: LD_INT 32
13483: PUSH
13484: LD_INT 34
13486: PUSH
13487: LD_INT 36
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 101
13525: PUSH
13526: LD_INT 102
13528: PUSH
13529: LD_INT 103
13531: PUSH
13532: LD_INT 104
13534: PUSH
13535: LD_INT 105
13537: PUSH
13538: LD_INT 106
13540: PUSH
13541: LD_INT 107
13543: PUSH
13544: LD_INT 108
13546: PUSH
13547: LD_INT 109
13549: PUSH
13550: LD_INT 110
13552: PUSH
13553: LD_INT 111
13555: PUSH
13556: LD_INT 112
13558: PUSH
13559: LD_INT 114
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: ST_TO_ADDR
13581: GO 15168
13583: LD_INT 12
13585: DOUBLE
13586: EQUAL
13587: IFTRUE 13591
13589: GO 13799
13591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13592: LD_ADDR_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 6
13614: PUSH
13615: LD_INT 7
13617: PUSH
13618: LD_INT 8
13620: PUSH
13621: LD_INT 9
13623: PUSH
13624: LD_INT 10
13626: PUSH
13627: LD_INT 11
13629: PUSH
13630: LD_INT 12
13632: PUSH
13633: LD_INT 13
13635: PUSH
13636: LD_INT 14
13638: PUSH
13639: LD_INT 15
13641: PUSH
13642: LD_INT 16
13644: PUSH
13645: LD_INT 17
13647: PUSH
13648: LD_INT 18
13650: PUSH
13651: LD_INT 19
13653: PUSH
13654: LD_INT 20
13656: PUSH
13657: LD_INT 21
13659: PUSH
13660: LD_INT 22
13662: PUSH
13663: LD_INT 23
13665: PUSH
13666: LD_INT 24
13668: PUSH
13669: LD_INT 25
13671: PUSH
13672: LD_INT 26
13674: PUSH
13675: LD_INT 27
13677: PUSH
13678: LD_INT 28
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: LD_INT 31
13686: PUSH
13687: LD_INT 32
13689: PUSH
13690: LD_INT 33
13692: PUSH
13693: LD_INT 34
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 101
13737: PUSH
13738: LD_INT 102
13740: PUSH
13741: LD_INT 103
13743: PUSH
13744: LD_INT 104
13746: PUSH
13747: LD_INT 105
13749: PUSH
13750: LD_INT 106
13752: PUSH
13753: LD_INT 107
13755: PUSH
13756: LD_INT 108
13758: PUSH
13759: LD_INT 109
13761: PUSH
13762: LD_INT 110
13764: PUSH
13765: LD_INT 111
13767: PUSH
13768: LD_INT 112
13770: PUSH
13771: LD_INT 113
13773: PUSH
13774: LD_INT 114
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: ST_TO_ADDR
13797: GO 15168
13799: LD_INT 13
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 14003
13807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13808: LD_ADDR_VAR 0 1
13812: PUSH
13813: LD_INT 1
13815: PUSH
13816: LD_INT 2
13818: PUSH
13819: LD_INT 3
13821: PUSH
13822: LD_INT 4
13824: PUSH
13825: LD_INT 5
13827: PUSH
13828: LD_INT 8
13830: PUSH
13831: LD_INT 9
13833: PUSH
13834: LD_INT 10
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: LD_INT 12
13842: PUSH
13843: LD_INT 14
13845: PUSH
13846: LD_INT 15
13848: PUSH
13849: LD_INT 16
13851: PUSH
13852: LD_INT 17
13854: PUSH
13855: LD_INT 18
13857: PUSH
13858: LD_INT 19
13860: PUSH
13861: LD_INT 20
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 22
13869: PUSH
13870: LD_INT 23
13872: PUSH
13873: LD_INT 24
13875: PUSH
13876: LD_INT 25
13878: PUSH
13879: LD_INT 26
13881: PUSH
13882: LD_INT 27
13884: PUSH
13885: LD_INT 28
13887: PUSH
13888: LD_INT 30
13890: PUSH
13891: LD_INT 31
13893: PUSH
13894: LD_INT 32
13896: PUSH
13897: LD_INT 33
13899: PUSH
13900: LD_INT 34
13902: PUSH
13903: LD_INT 36
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 101
13941: PUSH
13942: LD_INT 102
13944: PUSH
13945: LD_INT 103
13947: PUSH
13948: LD_INT 104
13950: PUSH
13951: LD_INT 105
13953: PUSH
13954: LD_INT 106
13956: PUSH
13957: LD_INT 107
13959: PUSH
13960: LD_INT 108
13962: PUSH
13963: LD_INT 109
13965: PUSH
13966: LD_INT 110
13968: PUSH
13969: LD_INT 111
13971: PUSH
13972: LD_INT 112
13974: PUSH
13975: LD_INT 113
13977: PUSH
13978: LD_INT 114
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: ST_TO_ADDR
14001: GO 15168
14003: LD_INT 14
14005: DOUBLE
14006: EQUAL
14007: IFTRUE 14011
14009: GO 14223
14011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14012: LD_ADDR_VAR 0 1
14016: PUSH
14017: LD_INT 1
14019: PUSH
14020: LD_INT 2
14022: PUSH
14023: LD_INT 3
14025: PUSH
14026: LD_INT 4
14028: PUSH
14029: LD_INT 5
14031: PUSH
14032: LD_INT 6
14034: PUSH
14035: LD_INT 7
14037: PUSH
14038: LD_INT 8
14040: PUSH
14041: LD_INT 9
14043: PUSH
14044: LD_INT 10
14046: PUSH
14047: LD_INT 11
14049: PUSH
14050: LD_INT 12
14052: PUSH
14053: LD_INT 13
14055: PUSH
14056: LD_INT 14
14058: PUSH
14059: LD_INT 15
14061: PUSH
14062: LD_INT 16
14064: PUSH
14065: LD_INT 17
14067: PUSH
14068: LD_INT 18
14070: PUSH
14071: LD_INT 19
14073: PUSH
14074: LD_INT 20
14076: PUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 23
14085: PUSH
14086: LD_INT 24
14088: PUSH
14089: LD_INT 25
14091: PUSH
14092: LD_INT 26
14094: PUSH
14095: LD_INT 27
14097: PUSH
14098: LD_INT 28
14100: PUSH
14101: LD_INT 29
14103: PUSH
14104: LD_INT 30
14106: PUSH
14107: LD_INT 31
14109: PUSH
14110: LD_INT 32
14112: PUSH
14113: LD_INT 33
14115: PUSH
14116: LD_INT 34
14118: PUSH
14119: LD_INT 36
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 101
14161: PUSH
14162: LD_INT 102
14164: PUSH
14165: LD_INT 103
14167: PUSH
14168: LD_INT 104
14170: PUSH
14171: LD_INT 105
14173: PUSH
14174: LD_INT 106
14176: PUSH
14177: LD_INT 107
14179: PUSH
14180: LD_INT 108
14182: PUSH
14183: LD_INT 109
14185: PUSH
14186: LD_INT 110
14188: PUSH
14189: LD_INT 111
14191: PUSH
14192: LD_INT 112
14194: PUSH
14195: LD_INT 113
14197: PUSH
14198: LD_INT 114
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: ST_TO_ADDR
14221: GO 15168
14223: LD_INT 15
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14443
14231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: LD_INT 4
14248: PUSH
14249: LD_INT 5
14251: PUSH
14252: LD_INT 6
14254: PUSH
14255: LD_INT 7
14257: PUSH
14258: LD_INT 8
14260: PUSH
14261: LD_INT 9
14263: PUSH
14264: LD_INT 10
14266: PUSH
14267: LD_INT 11
14269: PUSH
14270: LD_INT 12
14272: PUSH
14273: LD_INT 13
14275: PUSH
14276: LD_INT 14
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 16
14284: PUSH
14285: LD_INT 17
14287: PUSH
14288: LD_INT 18
14290: PUSH
14291: LD_INT 19
14293: PUSH
14294: LD_INT 20
14296: PUSH
14297: LD_INT 21
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 23
14305: PUSH
14306: LD_INT 24
14308: PUSH
14309: LD_INT 25
14311: PUSH
14312: LD_INT 26
14314: PUSH
14315: LD_INT 27
14317: PUSH
14318: LD_INT 28
14320: PUSH
14321: LD_INT 29
14323: PUSH
14324: LD_INT 30
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 32
14332: PUSH
14333: LD_INT 33
14335: PUSH
14336: LD_INT 34
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 101
14381: PUSH
14382: LD_INT 102
14384: PUSH
14385: LD_INT 103
14387: PUSH
14388: LD_INT 104
14390: PUSH
14391: LD_INT 105
14393: PUSH
14394: LD_INT 106
14396: PUSH
14397: LD_INT 107
14399: PUSH
14400: LD_INT 108
14402: PUSH
14403: LD_INT 109
14405: PUSH
14406: LD_INT 110
14408: PUSH
14409: LD_INT 111
14411: PUSH
14412: LD_INT 112
14414: PUSH
14415: LD_INT 113
14417: PUSH
14418: LD_INT 114
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: ST_TO_ADDR
14441: GO 15168
14443: LD_INT 16
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14575
14451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14452: LD_ADDR_VAR 0 1
14456: PUSH
14457: LD_INT 2
14459: PUSH
14460: LD_INT 4
14462: PUSH
14463: LD_INT 5
14465: PUSH
14466: LD_INT 7
14468: PUSH
14469: LD_INT 11
14471: PUSH
14472: LD_INT 12
14474: PUSH
14475: LD_INT 15
14477: PUSH
14478: LD_INT 16
14480: PUSH
14481: LD_INT 20
14483: PUSH
14484: LD_INT 21
14486: PUSH
14487: LD_INT 22
14489: PUSH
14490: LD_INT 23
14492: PUSH
14493: LD_INT 25
14495: PUSH
14496: LD_INT 26
14498: PUSH
14499: LD_INT 30
14501: PUSH
14502: LD_INT 31
14504: PUSH
14505: LD_INT 32
14507: PUSH
14508: LD_INT 33
14510: PUSH
14511: LD_INT 34
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 101
14537: PUSH
14538: LD_INT 102
14540: PUSH
14541: LD_INT 103
14543: PUSH
14544: LD_INT 106
14546: PUSH
14547: LD_INT 108
14549: PUSH
14550: LD_INT 112
14552: PUSH
14553: LD_INT 113
14555: PUSH
14556: LD_INT 114
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: ST_TO_ADDR
14573: GO 15168
14575: LD_INT 17
14577: DOUBLE
14578: EQUAL
14579: IFTRUE 14583
14581: GO 14795
14583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14584: LD_ADDR_VAR 0 1
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 4
14600: PUSH
14601: LD_INT 5
14603: PUSH
14604: LD_INT 6
14606: PUSH
14607: LD_INT 7
14609: PUSH
14610: LD_INT 8
14612: PUSH
14613: LD_INT 9
14615: PUSH
14616: LD_INT 10
14618: PUSH
14619: LD_INT 11
14621: PUSH
14622: LD_INT 12
14624: PUSH
14625: LD_INT 13
14627: PUSH
14628: LD_INT 14
14630: PUSH
14631: LD_INT 15
14633: PUSH
14634: LD_INT 16
14636: PUSH
14637: LD_INT 17
14639: PUSH
14640: LD_INT 18
14642: PUSH
14643: LD_INT 19
14645: PUSH
14646: LD_INT 20
14648: PUSH
14649: LD_INT 21
14651: PUSH
14652: LD_INT 22
14654: PUSH
14655: LD_INT 23
14657: PUSH
14658: LD_INT 24
14660: PUSH
14661: LD_INT 25
14663: PUSH
14664: LD_INT 26
14666: PUSH
14667: LD_INT 27
14669: PUSH
14670: LD_INT 28
14672: PUSH
14673: LD_INT 29
14675: PUSH
14676: LD_INT 30
14678: PUSH
14679: LD_INT 31
14681: PUSH
14682: LD_INT 32
14684: PUSH
14685: LD_INT 33
14687: PUSH
14688: LD_INT 34
14690: PUSH
14691: LD_INT 36
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 101
14733: PUSH
14734: LD_INT 102
14736: PUSH
14737: LD_INT 103
14739: PUSH
14740: LD_INT 104
14742: PUSH
14743: LD_INT 105
14745: PUSH
14746: LD_INT 106
14748: PUSH
14749: LD_INT 107
14751: PUSH
14752: LD_INT 108
14754: PUSH
14755: LD_INT 109
14757: PUSH
14758: LD_INT 110
14760: PUSH
14761: LD_INT 111
14763: PUSH
14764: LD_INT 112
14766: PUSH
14767: LD_INT 113
14769: PUSH
14770: LD_INT 114
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 15168
14795: LD_INT 18
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 14939
14803: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14804: LD_ADDR_VAR 0 1
14808: PUSH
14809: LD_INT 2
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 7
14820: PUSH
14821: LD_INT 11
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 15
14829: PUSH
14830: LD_INT 16
14832: PUSH
14833: LD_INT 20
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_INT 23
14844: PUSH
14845: LD_INT 25
14847: PUSH
14848: LD_INT 26
14850: PUSH
14851: LD_INT 30
14853: PUSH
14854: LD_INT 31
14856: PUSH
14857: LD_INT 32
14859: PUSH
14860: LD_INT 33
14862: PUSH
14863: LD_INT 34
14865: PUSH
14866: LD_INT 35
14868: PUSH
14869: LD_INT 36
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 101
14897: PUSH
14898: LD_INT 102
14900: PUSH
14901: LD_INT 103
14903: PUSH
14904: LD_INT 106
14906: PUSH
14907: LD_INT 108
14909: PUSH
14910: LD_INT 112
14912: PUSH
14913: LD_INT 113
14915: PUSH
14916: LD_INT 114
14918: PUSH
14919: LD_INT 115
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 15168
14939: LD_INT 19
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 15167
14947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: LD_INT 4
14964: PUSH
14965: LD_INT 5
14967: PUSH
14968: LD_INT 6
14970: PUSH
14971: LD_INT 7
14973: PUSH
14974: LD_INT 8
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: LD_INT 10
14982: PUSH
14983: LD_INT 11
14985: PUSH
14986: LD_INT 12
14988: PUSH
14989: LD_INT 13
14991: PUSH
14992: LD_INT 14
14994: PUSH
14995: LD_INT 15
14997: PUSH
14998: LD_INT 16
15000: PUSH
15001: LD_INT 17
15003: PUSH
15004: LD_INT 18
15006: PUSH
15007: LD_INT 19
15009: PUSH
15010: LD_INT 20
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 22
15018: PUSH
15019: LD_INT 23
15021: PUSH
15022: LD_INT 24
15024: PUSH
15025: LD_INT 25
15027: PUSH
15028: LD_INT 26
15030: PUSH
15031: LD_INT 27
15033: PUSH
15034: LD_INT 28
15036: PUSH
15037: LD_INT 29
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: LD_INT 31
15045: PUSH
15046: LD_INT 32
15048: PUSH
15049: LD_INT 33
15051: PUSH
15052: LD_INT 34
15054: PUSH
15055: LD_INT 35
15057: PUSH
15058: LD_INT 36
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 101
15101: PUSH
15102: LD_INT 102
15104: PUSH
15105: LD_INT 103
15107: PUSH
15108: LD_INT 104
15110: PUSH
15111: LD_INT 105
15113: PUSH
15114: LD_INT 106
15116: PUSH
15117: LD_INT 107
15119: PUSH
15120: LD_INT 108
15122: PUSH
15123: LD_INT 109
15125: PUSH
15126: LD_INT 110
15128: PUSH
15129: LD_INT 111
15131: PUSH
15132: LD_INT 112
15134: PUSH
15135: LD_INT 113
15137: PUSH
15138: LD_INT 114
15140: PUSH
15141: LD_INT 115
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: ST_TO_ADDR
15165: GO 15168
15167: POP
// end else
15168: GO 15387
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: LD_INT 2
15180: PUSH
15181: LD_INT 3
15183: PUSH
15184: LD_INT 4
15186: PUSH
15187: LD_INT 5
15189: PUSH
15190: LD_INT 6
15192: PUSH
15193: LD_INT 7
15195: PUSH
15196: LD_INT 8
15198: PUSH
15199: LD_INT 9
15201: PUSH
15202: LD_INT 10
15204: PUSH
15205: LD_INT 11
15207: PUSH
15208: LD_INT 12
15210: PUSH
15211: LD_INT 13
15213: PUSH
15214: LD_INT 14
15216: PUSH
15217: LD_INT 15
15219: PUSH
15220: LD_INT 16
15222: PUSH
15223: LD_INT 17
15225: PUSH
15226: LD_INT 18
15228: PUSH
15229: LD_INT 19
15231: PUSH
15232: LD_INT 20
15234: PUSH
15235: LD_INT 21
15237: PUSH
15238: LD_INT 22
15240: PUSH
15241: LD_INT 23
15243: PUSH
15244: LD_INT 24
15246: PUSH
15247: LD_INT 25
15249: PUSH
15250: LD_INT 26
15252: PUSH
15253: LD_INT 27
15255: PUSH
15256: LD_INT 28
15258: PUSH
15259: LD_INT 29
15261: PUSH
15262: LD_INT 30
15264: PUSH
15265: LD_INT 31
15267: PUSH
15268: LD_INT 32
15270: PUSH
15271: LD_INT 33
15273: PUSH
15274: LD_INT 34
15276: PUSH
15277: LD_INT 35
15279: PUSH
15280: LD_INT 36
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 101
15323: PUSH
15324: LD_INT 102
15326: PUSH
15327: LD_INT 103
15329: PUSH
15330: LD_INT 104
15332: PUSH
15333: LD_INT 105
15335: PUSH
15336: LD_INT 106
15338: PUSH
15339: LD_INT 107
15341: PUSH
15342: LD_INT 108
15344: PUSH
15345: LD_INT 109
15347: PUSH
15348: LD_INT 110
15350: PUSH
15351: LD_INT 111
15353: PUSH
15354: LD_INT 112
15356: PUSH
15357: LD_INT 113
15359: PUSH
15360: LD_INT 114
15362: PUSH
15363: LD_INT 115
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: ST_TO_ADDR
// if result then
15387: LD_VAR 0 1
15391: IFFALSE 15680
// begin normal :=  ;
15393: LD_ADDR_VAR 0 3
15397: PUSH
15398: LD_STRING 
15400: ST_TO_ADDR
// hardcore :=  ;
15401: LD_ADDR_VAR 0 4
15405: PUSH
15406: LD_STRING 
15408: ST_TO_ADDR
// for i = 1 to normalCounter do
15409: LD_ADDR_VAR 0 5
15413: PUSH
15414: DOUBLE
15415: LD_INT 1
15417: DEC
15418: ST_TO_ADDR
15419: LD_EXP 35
15423: PUSH
15424: FOR_TO
15425: IFFALSE 15526
// begin tmp := 0 ;
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_STRING 0
15434: ST_TO_ADDR
// if result [ 1 ] then
15435: LD_VAR 0 1
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: IFFALSE 15508
// if result [ 1 ] [ 1 ] = i then
15445: LD_VAR 0 1
15449: PUSH
15450: LD_INT 1
15452: ARRAY
15453: PUSH
15454: LD_INT 1
15456: ARRAY
15457: PUSH
15458: LD_VAR 0 5
15462: EQUAL
15463: IFFALSE 15508
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15465: LD_ADDR_VAR 0 1
15469: PUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PPUSH
15487: LD_INT 1
15489: PPUSH
15490: CALL_OW 3
15494: PPUSH
15495: CALL_OW 1
15499: ST_TO_ADDR
// tmp := 1 ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_STRING 1
15507: ST_TO_ADDR
// end ; normal := normal & tmp ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_VAR 0 3
15517: PUSH
15518: LD_VAR 0 2
15522: STR
15523: ST_TO_ADDR
// end ;
15524: GO 15424
15526: POP
15527: POP
// for i = 1 to hardcoreCounter do
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: DOUBLE
15534: LD_INT 1
15536: DEC
15537: ST_TO_ADDR
15538: LD_EXP 36
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15649
// begin tmp := 0 ;
15546: LD_ADDR_VAR 0 2
15550: PUSH
15551: LD_STRING 0
15553: ST_TO_ADDR
// if result [ 2 ] then
15554: LD_VAR 0 1
15558: PUSH
15559: LD_INT 2
15561: ARRAY
15562: IFFALSE 15631
// if result [ 2 ] [ 1 ] = 100 + i then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_INT 2
15571: ARRAY
15572: PUSH
15573: LD_INT 1
15575: ARRAY
15576: PUSH
15577: LD_INT 100
15579: PUSH
15580: LD_VAR 0 5
15584: PLUS
15585: EQUAL
15586: IFFALSE 15631
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_VAR 0 1
15597: PPUSH
15598: LD_INT 2
15600: PPUSH
15601: LD_VAR 0 1
15605: PUSH
15606: LD_INT 2
15608: ARRAY
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 3
15617: PPUSH
15618: CALL_OW 1
15622: ST_TO_ADDR
// tmp := 1 ;
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_STRING 1
15630: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15631: LD_ADDR_VAR 0 4
15635: PUSH
15636: LD_VAR 0 4
15640: PUSH
15641: LD_VAR 0 2
15645: STR
15646: ST_TO_ADDR
// end ;
15647: GO 15543
15649: POP
15650: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15651: LD_STRING getStreamItemsFromMission("
15653: PUSH
15654: LD_VAR 0 3
15658: STR
15659: PUSH
15660: LD_STRING ","
15662: STR
15663: PUSH
15664: LD_VAR 0 4
15668: STR
15669: PUSH
15670: LD_STRING ")
15672: STR
15673: PPUSH
15674: CALL_OW 559
// end else
15678: GO 15687
// ToLua ( getStreamItemsFromMission("","") ) ;
15680: LD_STRING getStreamItemsFromMission("","")
15682: PPUSH
15683: CALL_OW 559
// end ;
15687: LD_VAR 0 1
15691: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15692: LD_EXP 34
15696: PUSH
15697: LD_EXP 39
15701: AND
15702: IFFALSE 15826
15704: GO 15706
15706: DISABLE
15707: LD_INT 0
15709: PPUSH
15710: PPUSH
// begin enable ;
15711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15712: LD_ADDR_VAR 0 2
15716: PUSH
15717: LD_INT 22
15719: PUSH
15720: LD_OWVAR 2
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 2
15731: PUSH
15732: LD_INT 34
15734: PUSH
15735: LD_INT 7
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 34
15744: PUSH
15745: LD_INT 45
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 34
15754: PUSH
15755: LD_INT 28
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 34
15764: PUSH
15765: LD_INT 47
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: ST_TO_ADDR
// if not tmp then
15788: LD_VAR 0 2
15792: NOT
15793: IFFALSE 15797
// exit ;
15795: GO 15826
// for i in tmp do
15797: LD_ADDR_VAR 0 1
15801: PUSH
15802: LD_VAR 0 2
15806: PUSH
15807: FOR_IN
15808: IFFALSE 15824
// begin SetLives ( i , 0 ) ;
15810: LD_VAR 0 1
15814: PPUSH
15815: LD_INT 0
15817: PPUSH
15818: CALL_OW 234
// end ;
15822: GO 15807
15824: POP
15825: POP
// end ;
15826: PPOPN 2
15828: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15829: LD_EXP 34
15833: PUSH
15834: LD_EXP 40
15838: AND
15839: IFFALSE 15923
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
// begin enable ;
15848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15849: LD_ADDR_VAR 0 2
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: LD_OWVAR 2
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 32
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: ST_TO_ADDR
// if not tmp then
15885: LD_VAR 0 2
15889: NOT
15890: IFFALSE 15894
// exit ;
15892: GO 15923
// for i in tmp do
15894: LD_ADDR_VAR 0 1
15898: PUSH
15899: LD_VAR 0 2
15903: PUSH
15904: FOR_IN
15905: IFFALSE 15921
// begin SetLives ( i , 0 ) ;
15907: LD_VAR 0 1
15911: PPUSH
15912: LD_INT 0
15914: PPUSH
15915: CALL_OW 234
// end ;
15919: GO 15904
15921: POP
15922: POP
// end ;
15923: PPOPN 2
15925: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15926: LD_EXP 34
15930: PUSH
15931: LD_EXP 37
15935: AND
15936: IFFALSE 16029
15938: GO 15940
15940: DISABLE
15941: LD_INT 0
15943: PPUSH
// begin enable ;
15944: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15945: LD_ADDR_VAR 0 1
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 25
15967: PUSH
15968: LD_INT 5
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 25
15977: PUSH
15978: LD_INT 9
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 25
15987: PUSH
15988: LD_INT 8
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: PUSH
16010: FOR_IN
16011: IFFALSE 16027
// begin SetClass ( i , 1 ) ;
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_INT 1
16020: PPUSH
16021: CALL_OW 336
// end ;
16025: GO 16010
16027: POP
16028: POP
// end ;
16029: PPOPN 1
16031: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16032: LD_EXP 34
16036: PUSH
16037: LD_EXP 38
16041: AND
16042: PUSH
16043: LD_OWVAR 65
16047: PUSH
16048: LD_INT 7
16050: LESS
16051: AND
16052: IFFALSE 16066
16054: GO 16056
16056: DISABLE
// begin enable ;
16057: ENABLE
// game_speed := 7 ;
16058: LD_ADDR_OWVAR 65
16062: PUSH
16063: LD_INT 7
16065: ST_TO_ADDR
// end ;
16066: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16067: LD_EXP 34
16071: PUSH
16072: LD_EXP 41
16076: AND
16077: IFFALSE 16279
16079: GO 16081
16081: DISABLE
16082: LD_INT 0
16084: PPUSH
16085: PPUSH
16086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_INT 81
16094: PUSH
16095: LD_OWVAR 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 69
16122: ST_TO_ADDR
// if not tmp then
16123: LD_VAR 0 3
16127: NOT
16128: IFFALSE 16132
// exit ;
16130: GO 16279
// if tmp > 5 then
16132: LD_VAR 0 3
16136: PUSH
16137: LD_INT 5
16139: GREATER
16140: IFFALSE 16152
// k := 5 else
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 5
16149: ST_TO_ADDR
16150: GO 16162
// k := tmp ;
16152: LD_ADDR_VAR 0 2
16156: PUSH
16157: LD_VAR 0 3
16161: ST_TO_ADDR
// for i := 1 to k do
16162: LD_ADDR_VAR 0 1
16166: PUSH
16167: DOUBLE
16168: LD_INT 1
16170: DEC
16171: ST_TO_ADDR
16172: LD_VAR 0 2
16176: PUSH
16177: FOR_TO
16178: IFFALSE 16277
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_VAR 0 1
16189: ARRAY
16190: PPUSH
16191: LD_VAR 0 1
16195: PUSH
16196: LD_INT 4
16198: MOD
16199: PUSH
16200: LD_INT 1
16202: PLUS
16203: PPUSH
16204: CALL_OW 259
16208: PUSH
16209: LD_INT 10
16211: LESS
16212: IFFALSE 16275
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16214: LD_VAR 0 3
16218: PUSH
16219: LD_VAR 0 1
16223: ARRAY
16224: PPUSH
16225: LD_VAR 0 1
16229: PUSH
16230: LD_INT 4
16232: MOD
16233: PUSH
16234: LD_INT 1
16236: PLUS
16237: PPUSH
16238: LD_VAR 0 3
16242: PUSH
16243: LD_VAR 0 1
16247: ARRAY
16248: PPUSH
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 4
16256: MOD
16257: PUSH
16258: LD_INT 1
16260: PLUS
16261: PPUSH
16262: CALL_OW 259
16266: PUSH
16267: LD_INT 1
16269: PLUS
16270: PPUSH
16271: CALL_OW 237
16275: GO 16177
16277: POP
16278: POP
// end ;
16279: PPOPN 3
16281: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16282: LD_EXP 34
16286: PUSH
16287: LD_EXP 42
16291: AND
16292: IFFALSE 16312
16294: GO 16296
16296: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16297: LD_INT 4
16299: PPUSH
16300: LD_OWVAR 2
16304: PPUSH
16305: LD_INT 0
16307: PPUSH
16308: CALL_OW 324
16312: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16313: LD_EXP 34
16317: PUSH
16318: LD_EXP 71
16322: AND
16323: IFFALSE 16343
16325: GO 16327
16327: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16328: LD_INT 19
16330: PPUSH
16331: LD_OWVAR 2
16335: PPUSH
16336: LD_INT 0
16338: PPUSH
16339: CALL_OW 324
16343: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16344: LD_EXP 34
16348: PUSH
16349: LD_EXP 43
16353: AND
16354: IFFALSE 16456
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin enable ;
16363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: LD_INT 22
16371: PUSH
16372: LD_OWVAR 2
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 34
16386: PUSH
16387: LD_INT 11
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 34
16396: PUSH
16397: LD_INT 30
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 69
16417: ST_TO_ADDR
// if not tmp then
16418: LD_VAR 0 2
16422: NOT
16423: IFFALSE 16427
// exit ;
16425: GO 16456
// for i in tmp do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16454
// begin SetLives ( i , 0 ) ;
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_INT 0
16447: PPUSH
16448: CALL_OW 234
// end ;
16452: GO 16437
16454: POP
16455: POP
// end ;
16456: PPOPN 2
16458: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16459: LD_EXP 34
16463: PUSH
16464: LD_EXP 44
16468: AND
16469: IFFALSE 16489
16471: GO 16473
16473: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16474: LD_INT 32
16476: PPUSH
16477: LD_OWVAR 2
16481: PPUSH
16482: LD_INT 0
16484: PPUSH
16485: CALL_OW 324
16489: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16490: LD_EXP 34
16494: PUSH
16495: LD_EXP 45
16499: AND
16500: IFFALSE 16681
16502: GO 16504
16504: DISABLE
16505: LD_INT 0
16507: PPUSH
16508: PPUSH
16509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16510: LD_ADDR_VAR 0 2
16514: PUSH
16515: LD_INT 22
16517: PUSH
16518: LD_OWVAR 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 33
16529: PUSH
16530: LD_INT 3
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 69
16545: ST_TO_ADDR
// if not tmp then
16546: LD_VAR 0 2
16550: NOT
16551: IFFALSE 16555
// exit ;
16553: GO 16681
// side := 0 ;
16555: LD_ADDR_VAR 0 3
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// for i := 1 to 8 do
16563: LD_ADDR_VAR 0 1
16567: PUSH
16568: DOUBLE
16569: LD_INT 1
16571: DEC
16572: ST_TO_ADDR
16573: LD_INT 8
16575: PUSH
16576: FOR_TO
16577: IFFALSE 16625
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16579: LD_OWVAR 2
16583: PUSH
16584: LD_VAR 0 1
16588: NONEQUAL
16589: PUSH
16590: LD_OWVAR 2
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 81
16604: PUSH
16605: LD_INT 2
16607: EQUAL
16608: AND
16609: IFFALSE 16623
// begin side := i ;
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_VAR 0 1
16620: ST_TO_ADDR
// break ;
16621: GO 16625
// end ;
16623: GO 16576
16625: POP
16626: POP
// if not side then
16627: LD_VAR 0 3
16631: NOT
16632: IFFALSE 16636
// exit ;
16634: GO 16681
// for i := 1 to tmp do
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: DOUBLE
16642: LD_INT 1
16644: DEC
16645: ST_TO_ADDR
16646: LD_VAR 0 2
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16679
// if Prob ( 60 ) then
16654: LD_INT 60
16656: PPUSH
16657: CALL_OW 13
16661: IFFALSE 16677
// SetSide ( i , side ) ;
16663: LD_VAR 0 1
16667: PPUSH
16668: LD_VAR 0 3
16672: PPUSH
16673: CALL_OW 235
16677: GO 16651
16679: POP
16680: POP
// end ;
16681: PPOPN 3
16683: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16684: LD_EXP 34
16688: PUSH
16689: LD_EXP 47
16693: AND
16694: IFFALSE 16813
16696: GO 16698
16698: DISABLE
16699: LD_INT 0
16701: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_INT 22
16709: PUSH
16710: LD_OWVAR 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 21
16721: PUSH
16722: LD_INT 1
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16811
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16759: LD_VAR 0 1
16763: PPUSH
16764: CALL_OW 257
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 3
16777: PUSH
16778: LD_INT 4
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: IN
16787: IFFALSE 16809
// SetClass ( un , rand ( 1 , 4 ) ) ;
16789: LD_VAR 0 1
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: CALL_OW 12
16804: PPUSH
16805: CALL_OW 336
16809: GO 16756
16811: POP
16812: POP
// end ;
16813: PPOPN 1
16815: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16816: LD_EXP 34
16820: PUSH
16821: LD_EXP 46
16825: AND
16826: IFFALSE 16905
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16834: LD_ADDR_VAR 0 1
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_OWVAR 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL_OW 69
16869: ST_TO_ADDR
// if not tmp then
16870: LD_VAR 0 1
16874: NOT
16875: IFFALSE 16879
// exit ;
16877: GO 16905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16879: LD_VAR 0 1
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 12
16896: ARRAY
16897: PPUSH
16898: LD_INT 100
16900: PPUSH
16901: CALL_OW 234
// end ;
16905: PPOPN 1
16907: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16908: LD_EXP 34
16912: PUSH
16913: LD_EXP 48
16917: AND
16918: IFFALSE 17016
16920: GO 16922
16922: DISABLE
16923: LD_INT 0
16925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16926: LD_ADDR_VAR 0 1
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 21
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 1
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17016
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16971: LD_VAR 0 1
16975: PUSH
16976: LD_INT 1
16978: PPUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 12
16988: ARRAY
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: LD_INT 4
16995: PPUSH
16996: CALL_OW 12
17000: PPUSH
17001: LD_INT 3000
17003: PPUSH
17004: LD_INT 9000
17006: PPUSH
17007: CALL_OW 12
17011: PPUSH
17012: CALL_OW 492
// end ;
17016: PPOPN 1
17018: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17019: LD_EXP 34
17023: PUSH
17024: LD_EXP 49
17028: AND
17029: IFFALSE 17049
17031: GO 17033
17033: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17034: LD_INT 1
17036: PPUSH
17037: LD_OWVAR 2
17041: PPUSH
17042: LD_INT 0
17044: PPUSH
17045: CALL_OW 324
17049: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17050: LD_EXP 34
17054: PUSH
17055: LD_EXP 50
17059: AND
17060: IFFALSE 17143
17062: GO 17064
17064: DISABLE
17065: LD_INT 0
17067: PPUSH
17068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17069: LD_ADDR_VAR 0 2
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_OWVAR 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 21
17088: PUSH
17089: LD_INT 3
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: ST_TO_ADDR
// if not tmp then
17105: LD_VAR 0 2
17109: NOT
17110: IFFALSE 17114
// exit ;
17112: GO 17143
// for i in tmp do
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_VAR 0 2
17123: PUSH
17124: FOR_IN
17125: IFFALSE 17141
// SetBLevel ( i , 10 ) ;
17127: LD_VAR 0 1
17131: PPUSH
17132: LD_INT 10
17134: PPUSH
17135: CALL_OW 241
17139: GO 17124
17141: POP
17142: POP
// end ;
17143: PPOPN 2
17145: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17146: LD_EXP 34
17150: PUSH
17151: LD_EXP 51
17155: AND
17156: IFFALSE 17267
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17166: LD_ADDR_VAR 0 3
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_OWVAR 2
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 25
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PPUSH
17197: CALL_OW 69
17201: ST_TO_ADDR
// if not tmp then
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17211
// exit ;
17209: GO 17267
// un := tmp [ rand ( 1 , tmp ) ] ;
17211: LD_ADDR_VAR 0 2
17215: PUSH
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 1
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: CALL_OW 12
17233: ARRAY
17234: ST_TO_ADDR
// if Crawls ( un ) then
17235: LD_VAR 0 2
17239: PPUSH
17240: CALL_OW 318
17244: IFFALSE 17255
// ComWalk ( un ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17255: LD_VAR 0 2
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 336
// end ;
17267: PPOPN 3
17269: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17270: LD_EXP 34
17274: PUSH
17275: LD_EXP 52
17279: AND
17280: PUSH
17281: LD_OWVAR 67
17285: PUSH
17286: LD_INT 3
17288: LESS
17289: AND
17290: IFFALSE 17309
17292: GO 17294
17294: DISABLE
// Difficulty := Difficulty + 1 ;
17295: LD_ADDR_OWVAR 67
17299: PUSH
17300: LD_OWVAR 67
17304: PUSH
17305: LD_INT 1
17307: PLUS
17308: ST_TO_ADDR
17309: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17310: LD_EXP 34
17314: PUSH
17315: LD_EXP 53
17319: AND
17320: IFFALSE 17423
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
// begin for i := 1 to 5 do
17328: LD_ADDR_VAR 0 1
17332: PUSH
17333: DOUBLE
17334: LD_INT 1
17336: DEC
17337: ST_TO_ADDR
17338: LD_INT 5
17340: PUSH
17341: FOR_TO
17342: IFFALSE 17421
// begin uc_nation := nation_nature ;
17344: LD_ADDR_OWVAR 21
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// uc_side := 0 ;
17352: LD_ADDR_OWVAR 20
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17360: LD_ADDR_OWVAR 29
17364: PUSH
17365: LD_INT 12
17367: PUSH
17368: LD_INT 12
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// hc_agressivity := 20 ;
17375: LD_ADDR_OWVAR 35
17379: PUSH
17380: LD_INT 20
17382: ST_TO_ADDR
// hc_class := class_tiger ;
17383: LD_ADDR_OWVAR 28
17387: PUSH
17388: LD_INT 14
17390: ST_TO_ADDR
// hc_gallery :=  ;
17391: LD_ADDR_OWVAR 33
17395: PUSH
17396: LD_STRING 
17398: ST_TO_ADDR
// hc_name :=  ;
17399: LD_ADDR_OWVAR 26
17403: PUSH
17404: LD_STRING 
17406: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17407: CALL_OW 44
17411: PPUSH
17412: LD_INT 0
17414: PPUSH
17415: CALL_OW 51
// end ;
17419: GO 17341
17421: POP
17422: POP
// end ;
17423: PPOPN 1
17425: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17426: LD_EXP 34
17430: PUSH
17431: LD_EXP 54
17435: AND
17436: IFFALSE 17445
17438: GO 17440
17440: DISABLE
// StreamSibBomb ;
17441: CALL 17446 0 0
17445: END
// export function StreamSibBomb ; var i , x , y ; begin
17446: LD_INT 0
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
// result := false ;
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 0
17459: ST_TO_ADDR
// for i := 1 to 16 do
17460: LD_ADDR_VAR 0 2
17464: PUSH
17465: DOUBLE
17466: LD_INT 1
17468: DEC
17469: ST_TO_ADDR
17470: LD_INT 16
17472: PUSH
17473: FOR_TO
17474: IFFALSE 17673
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_INT 10
17483: PUSH
17484: LD_INT 20
17486: PUSH
17487: LD_INT 30
17489: PUSH
17490: LD_INT 40
17492: PUSH
17493: LD_INT 50
17495: PUSH
17496: LD_INT 60
17498: PUSH
17499: LD_INT 70
17501: PUSH
17502: LD_INT 80
17504: PUSH
17505: LD_INT 90
17507: PUSH
17508: LD_INT 100
17510: PUSH
17511: LD_INT 110
17513: PUSH
17514: LD_INT 120
17516: PUSH
17517: LD_INT 130
17519: PUSH
17520: LD_INT 140
17522: PUSH
17523: LD_INT 150
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_INT 15
17548: PPUSH
17549: CALL_OW 12
17553: ARRAY
17554: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17555: LD_ADDR_VAR 0 4
17559: PUSH
17560: LD_INT 10
17562: PUSH
17563: LD_INT 20
17565: PUSH
17566: LD_INT 30
17568: PUSH
17569: LD_INT 40
17571: PUSH
17572: LD_INT 50
17574: PUSH
17575: LD_INT 60
17577: PUSH
17578: LD_INT 70
17580: PUSH
17581: LD_INT 80
17583: PUSH
17584: LD_INT 90
17586: PUSH
17587: LD_INT 100
17589: PUSH
17590: LD_INT 110
17592: PUSH
17593: LD_INT 120
17595: PUSH
17596: LD_INT 130
17598: PUSH
17599: LD_INT 140
17601: PUSH
17602: LD_INT 150
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: PPUSH
17625: LD_INT 15
17627: PPUSH
17628: CALL_OW 12
17632: ARRAY
17633: ST_TO_ADDR
// if ValidHex ( x , y ) then
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_VAR 0 4
17643: PPUSH
17644: CALL_OW 488
17648: IFFALSE 17671
// begin result := [ x , y ] ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: LD_VAR 0 3
17659: PUSH
17660: LD_VAR 0 4
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: ST_TO_ADDR
// break ;
17669: GO 17673
// end ; end ;
17671: GO 17473
17673: POP
17674: POP
// if result then
17675: LD_VAR 0 1
17679: IFFALSE 17739
// begin ToLua ( playSibBomb() ) ;
17681: LD_STRING playSibBomb()
17683: PPUSH
17684: CALL_OW 559
// wait ( 0 0$14 ) ;
17688: LD_INT 490
17690: PPUSH
17691: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17695: LD_VAR 0 1
17699: PUSH
17700: LD_INT 1
17702: ARRAY
17703: PPUSH
17704: LD_VAR 0 1
17708: PUSH
17709: LD_INT 2
17711: ARRAY
17712: PPUSH
17713: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 1
17724: ARRAY
17725: PPUSH
17726: LD_VAR 0 1
17730: PUSH
17731: LD_INT 2
17733: ARRAY
17734: PPUSH
17735: CALL_OW 429
// end ; end ;
17739: LD_VAR 0 1
17743: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17744: LD_EXP 34
17748: PUSH
17749: LD_EXP 56
17753: AND
17754: IFFALSE 17766
17756: GO 17758
17758: DISABLE
// YouLost (  ) ;
17759: LD_STRING 
17761: PPUSH
17762: CALL_OW 104
17766: END
// every 0 0$1 trigger StreamModeActive and sFog do
17767: LD_EXP 34
17771: PUSH
17772: LD_EXP 55
17776: AND
17777: IFFALSE 17791
17779: GO 17781
17781: DISABLE
// FogOff ( your_side ) ;
17782: LD_OWVAR 2
17786: PPUSH
17787: CALL_OW 344
17791: END
// every 0 0$1 trigger StreamModeActive and sSun do
17792: LD_EXP 34
17796: PUSH
17797: LD_EXP 57
17801: AND
17802: IFFALSE 17830
17804: GO 17806
17806: DISABLE
// begin solar_recharge_percent := 0 ;
17807: LD_ADDR_OWVAR 79
17811: PUSH
17812: LD_INT 0
17814: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17815: LD_INT 10500
17817: PPUSH
17818: CALL_OW 67
// solar_recharge_percent := 100 ;
17822: LD_ADDR_OWVAR 79
17826: PUSH
17827: LD_INT 100
17829: ST_TO_ADDR
// end ;
17830: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17831: LD_EXP 34
17835: PUSH
17836: LD_EXP 58
17840: AND
17841: IFFALSE 18080
17843: GO 17845
17845: DISABLE
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
// begin tmp := [ ] ;
17851: LD_ADDR_VAR 0 3
17855: PUSH
17856: EMPTY
17857: ST_TO_ADDR
// for i := 1 to 6 do
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: DOUBLE
17864: LD_INT 1
17866: DEC
17867: ST_TO_ADDR
17868: LD_INT 6
17870: PUSH
17871: FOR_TO
17872: IFFALSE 17977
// begin uc_nation := nation_nature ;
17874: LD_ADDR_OWVAR 21
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// uc_side := 0 ;
17882: LD_ADDR_OWVAR 20
17886: PUSH
17887: LD_INT 0
17889: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17890: LD_ADDR_OWVAR 29
17894: PUSH
17895: LD_INT 12
17897: PUSH
17898: LD_INT 12
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: ST_TO_ADDR
// hc_agressivity := 20 ;
17905: LD_ADDR_OWVAR 35
17909: PUSH
17910: LD_INT 20
17912: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17913: LD_ADDR_OWVAR 28
17917: PUSH
17918: LD_INT 17
17920: ST_TO_ADDR
// hc_gallery :=  ;
17921: LD_ADDR_OWVAR 33
17925: PUSH
17926: LD_STRING 
17928: ST_TO_ADDR
// hc_name :=  ;
17929: LD_ADDR_OWVAR 26
17933: PUSH
17934: LD_STRING 
17936: ST_TO_ADDR
// un := CreateHuman ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: CALL_OW 44
17946: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 51
// tmp := tmp ^ un ;
17959: LD_ADDR_VAR 0 3
17963: PUSH
17964: LD_VAR 0 3
17968: PUSH
17969: LD_VAR 0 2
17973: ADD
17974: ST_TO_ADDR
// end ;
17975: GO 17871
17977: POP
17978: POP
// repeat wait ( 0 0$1 ) ;
17979: LD_INT 35
17981: PPUSH
17982: CALL_OW 67
// for un in tmp do
17986: LD_ADDR_VAR 0 2
17990: PUSH
17991: LD_VAR 0 3
17995: PUSH
17996: FOR_IN
17997: IFFALSE 18071
// begin if IsDead ( un ) then
17999: LD_VAR 0 2
18003: PPUSH
18004: CALL_OW 301
18008: IFFALSE 18028
// begin tmp := tmp diff un ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_VAR 0 2
18024: DIFF
18025: ST_TO_ADDR
// continue ;
18026: GO 17996
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18028: LD_VAR 0 2
18032: PPUSH
18033: LD_INT 3
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PPUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 74
18064: PPUSH
18065: CALL_OW 115
// end ;
18069: GO 17996
18071: POP
18072: POP
// until not tmp ;
18073: LD_VAR 0 3
18077: NOT
18078: IFFALSE 17979
// end ;
18080: PPOPN 3
18082: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18083: LD_EXP 34
18087: PUSH
18088: LD_EXP 59
18092: AND
18093: IFFALSE 18147
18095: GO 18097
18097: DISABLE
// begin ToLua ( displayTroll(); ) ;
18098: LD_STRING displayTroll();
18100: PPUSH
18101: CALL_OW 559
// wait ( 3 3$00 ) ;
18105: LD_INT 6300
18107: PPUSH
18108: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18112: LD_STRING hideTroll();
18114: PPUSH
18115: CALL_OW 559
// wait ( 1 1$00 ) ;
18119: LD_INT 2100
18121: PPUSH
18122: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18126: LD_STRING displayTroll();
18128: PPUSH
18129: CALL_OW 559
// wait ( 1 1$00 ) ;
18133: LD_INT 2100
18135: PPUSH
18136: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18140: LD_STRING hideTroll();
18142: PPUSH
18143: CALL_OW 559
// end ;
18147: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18148: LD_EXP 34
18152: PUSH
18153: LD_EXP 60
18157: AND
18158: IFFALSE 18221
18160: GO 18162
18162: DISABLE
18163: LD_INT 0
18165: PPUSH
// begin p := 0 ;
18166: LD_ADDR_VAR 0 1
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// repeat game_speed := 1 ;
18174: LD_ADDR_OWVAR 65
18178: PUSH
18179: LD_INT 1
18181: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18182: LD_INT 35
18184: PPUSH
18185: CALL_OW 67
// p := p + 1 ;
18189: LD_ADDR_VAR 0 1
18193: PUSH
18194: LD_VAR 0 1
18198: PUSH
18199: LD_INT 1
18201: PLUS
18202: ST_TO_ADDR
// until p >= 60 ;
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 60
18210: GREATEREQUAL
18211: IFFALSE 18174
// game_speed := 4 ;
18213: LD_ADDR_OWVAR 65
18217: PUSH
18218: LD_INT 4
18220: ST_TO_ADDR
// end ;
18221: PPOPN 1
18223: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18224: LD_EXP 34
18228: PUSH
18229: LD_EXP 61
18233: AND
18234: IFFALSE 18380
18236: GO 18238
18238: DISABLE
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18243: LD_ADDR_VAR 0 1
18247: PUSH
18248: LD_INT 22
18250: PUSH
18251: LD_OWVAR 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 30
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PPUSH
18292: CALL_OW 69
18296: ST_TO_ADDR
// if not depot then
18297: LD_VAR 0 1
18301: NOT
18302: IFFALSE 18306
// exit ;
18304: GO 18380
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18306: LD_ADDR_VAR 0 2
18310: PUSH
18311: LD_VAR 0 1
18315: PUSH
18316: LD_INT 1
18318: PPUSH
18319: LD_VAR 0 1
18323: PPUSH
18324: CALL_OW 12
18328: ARRAY
18329: PPUSH
18330: CALL_OW 274
18334: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: LD_INT 0
18345: PPUSH
18346: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_INT 2
18357: PPUSH
18358: LD_INT 0
18360: PPUSH
18361: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18365: LD_VAR 0 2
18369: PPUSH
18370: LD_INT 3
18372: PPUSH
18373: LD_INT 0
18375: PPUSH
18376: CALL_OW 277
// end ;
18380: PPOPN 2
18382: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18383: LD_EXP 34
18387: PUSH
18388: LD_EXP 62
18392: AND
18393: IFFALSE 18490
18395: GO 18397
18397: DISABLE
18398: LD_INT 0
18400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18401: LD_ADDR_VAR 0 1
18405: PUSH
18406: LD_INT 22
18408: PUSH
18409: LD_OWVAR 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 21
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 23
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: ST_TO_ADDR
// if not tmp then
18455: LD_VAR 0 1
18459: NOT
18460: IFFALSE 18464
// exit ;
18462: GO 18490
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18464: LD_VAR 0 1
18468: PUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 12
18481: ARRAY
18482: PPUSH
18483: LD_INT 200
18485: PPUSH
18486: CALL_OW 234
// end ;
18490: PPOPN 1
18492: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18493: LD_EXP 34
18497: PUSH
18498: LD_EXP 63
18502: AND
18503: IFFALSE 18582
18505: GO 18507
18507: DISABLE
18508: LD_INT 0
18510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18511: LD_ADDR_VAR 0 1
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_OWVAR 2
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 1
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18582
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18556: LD_VAR 0 1
18560: PUSH
18561: LD_INT 1
18563: PPUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 12
18573: ARRAY
18574: PPUSH
18575: LD_INT 60
18577: PPUSH
18578: CALL_OW 234
// end ;
18582: PPOPN 1
18584: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18585: LD_EXP 34
18589: PUSH
18590: LD_EXP 64
18594: AND
18595: IFFALSE 18694
18597: GO 18599
18599: DISABLE
18600: LD_INT 0
18602: PPUSH
18603: PPUSH
// begin enable ;
18604: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_OWVAR 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 61
18624: PUSH
18625: EMPTY
18626: LIST
18627: PUSH
18628: LD_INT 33
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: ST_TO_ADDR
// if not tmp then
18648: LD_VAR 0 1
18652: NOT
18653: IFFALSE 18657
// exit ;
18655: GO 18694
// for i in tmp do
18657: LD_ADDR_VAR 0 2
18661: PUSH
18662: LD_VAR 0 1
18666: PUSH
18667: FOR_IN
18668: IFFALSE 18692
// if IsControledBy ( i ) then
18670: LD_VAR 0 2
18674: PPUSH
18675: CALL_OW 312
18679: IFFALSE 18690
// ComUnlink ( i ) ;
18681: LD_VAR 0 2
18685: PPUSH
18686: CALL_OW 136
18690: GO 18667
18692: POP
18693: POP
// end ;
18694: PPOPN 2
18696: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18697: LD_EXP 34
18701: PUSH
18702: LD_EXP 65
18706: AND
18707: IFFALSE 18847
18709: GO 18711
18711: DISABLE
18712: LD_INT 0
18714: PPUSH
18715: PPUSH
// begin ToLua ( displayPowell(); ) ;
18716: LD_STRING displayPowell();
18718: PPUSH
18719: CALL_OW 559
// uc_side := 0 ;
18723: LD_ADDR_OWVAR 20
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// uc_nation := 2 ;
18731: LD_ADDR_OWVAR 21
18735: PUSH
18736: LD_INT 2
18738: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18739: LD_ADDR_OWVAR 37
18743: PUSH
18744: LD_INT 14
18746: ST_TO_ADDR
// vc_engine := engine_siberite ;
18747: LD_ADDR_OWVAR 39
18751: PUSH
18752: LD_INT 3
18754: ST_TO_ADDR
// vc_control := control_apeman ;
18755: LD_ADDR_OWVAR 38
18759: PUSH
18760: LD_INT 5
18762: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18763: LD_ADDR_OWVAR 40
18767: PUSH
18768: LD_INT 29
18770: ST_TO_ADDR
// un := CreateVehicle ;
18771: LD_ADDR_VAR 0 2
18775: PUSH
18776: CALL_OW 45
18780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18781: LD_VAR 0 2
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18793: LD_INT 35
18795: PPUSH
18796: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18800: LD_VAR 0 2
18804: PPUSH
18805: LD_INT 22
18807: PUSH
18808: LD_OWVAR 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PPUSH
18817: CALL_OW 69
18821: PPUSH
18822: LD_VAR 0 2
18826: PPUSH
18827: CALL_OW 74
18831: PPUSH
18832: CALL_OW 115
// until IsDead ( un ) ;
18836: LD_VAR 0 2
18840: PPUSH
18841: CALL_OW 301
18845: IFFALSE 18793
// end ;
18847: PPOPN 2
18849: END
// every 0 0$1 trigger StreamModeActive and sStu do
18850: LD_EXP 34
18854: PUSH
18855: LD_EXP 73
18859: AND
18860: IFFALSE 18876
18862: GO 18864
18864: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18865: LD_STRING displayStucuk();
18867: PPUSH
18868: CALL_OW 559
// ResetFog ;
18872: CALL_OW 335
// end ;
18876: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18877: LD_EXP 34
18881: PUSH
18882: LD_EXP 66
18886: AND
18887: IFFALSE 19028
18889: GO 18891
18891: DISABLE
18892: LD_INT 0
18894: PPUSH
18895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18896: LD_ADDR_VAR 0 2
18900: PUSH
18901: LD_INT 22
18903: PUSH
18904: LD_OWVAR 2
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 21
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if not tmp then
18932: LD_VAR 0 2
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 19028
// un := tmp [ rand ( 1 , tmp ) ] ;
18941: LD_ADDR_VAR 0 1
18945: PUSH
18946: LD_VAR 0 2
18950: PUSH
18951: LD_INT 1
18953: PPUSH
18954: LD_VAR 0 2
18958: PPUSH
18959: CALL_OW 12
18963: ARRAY
18964: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18965: LD_VAR 0 1
18969: PPUSH
18970: LD_INT 0
18972: PPUSH
18973: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18977: LD_VAR 0 1
18981: PPUSH
18982: LD_OWVAR 3
18986: PUSH
18987: LD_VAR 0 1
18991: DIFF
18992: PPUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 74
19002: PPUSH
19003: CALL_OW 115
// wait ( 0 0$20 ) ;
19007: LD_INT 700
19009: PPUSH
19010: CALL_OW 67
// SetSide ( un , your_side ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_OWVAR 2
19023: PPUSH
19024: CALL_OW 235
// end ;
19028: PPOPN 2
19030: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19031: LD_EXP 34
19035: PUSH
19036: LD_EXP 67
19040: AND
19041: IFFALSE 19147
19043: GO 19045
19045: DISABLE
19046: LD_INT 0
19048: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19049: LD_ADDR_VAR 0 1
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 69
19102: ST_TO_ADDR
// if not depot then
19103: LD_VAR 0 1
19107: NOT
19108: IFFALSE 19112
// exit ;
19110: GO 19147
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19112: LD_VAR 0 1
19116: PUSH
19117: LD_INT 1
19119: ARRAY
19120: PPUSH
19121: CALL_OW 250
19125: PPUSH
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: CALL_OW 251
19139: PPUSH
19140: LD_INT 70
19142: PPUSH
19143: CALL_OW 495
// end ;
19147: PPOPN 1
19149: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19150: LD_EXP 34
19154: PUSH
19155: LD_EXP 68
19159: AND
19160: IFFALSE 19371
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19172: LD_ADDR_VAR 0 5
19176: PUSH
19177: LD_INT 22
19179: PUSH
19180: LD_OWVAR 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 21
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: ST_TO_ADDR
// if not tmp then
19208: LD_VAR 0 5
19212: NOT
19213: IFFALSE 19217
// exit ;
19215: GO 19371
// for i in tmp do
19217: LD_ADDR_VAR 0 1
19221: PUSH
19222: LD_VAR 0 5
19226: PUSH
19227: FOR_IN
19228: IFFALSE 19369
// begin d := rand ( 0 , 5 ) ;
19230: LD_ADDR_VAR 0 4
19234: PUSH
19235: LD_INT 0
19237: PPUSH
19238: LD_INT 5
19240: PPUSH
19241: CALL_OW 12
19245: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19246: LD_ADDR_VAR 0 2
19250: PUSH
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL_OW 250
19260: PPUSH
19261: LD_VAR 0 4
19265: PPUSH
19266: LD_INT 3
19268: PPUSH
19269: LD_INT 12
19271: PPUSH
19272: CALL_OW 12
19276: PPUSH
19277: CALL_OW 272
19281: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 251
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: LD_INT 3
19304: PPUSH
19305: LD_INT 12
19307: PPUSH
19308: CALL_OW 12
19312: PPUSH
19313: CALL_OW 273
19317: ST_TO_ADDR
// if ValidHex ( x , y ) then
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: CALL_OW 488
19332: IFFALSE 19367
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: LD_VAR 0 2
19343: PPUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 3
19351: PPUSH
19352: LD_INT 6
19354: PPUSH
19355: CALL_OW 12
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL_OW 483
// end ;
19367: GO 19227
19369: POP
19370: POP
// end ;
19371: PPOPN 5
19373: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19374: LD_EXP 34
19378: PUSH
19379: LD_EXP 69
19383: AND
19384: IFFALSE 19478
19386: GO 19388
19388: DISABLE
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19393: LD_ADDR_VAR 0 2
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_OWVAR 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 32
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: ST_TO_ADDR
// if not tmp then
19440: LD_VAR 0 2
19444: NOT
19445: IFFALSE 19449
// exit ;
19447: GO 19478
// for i in tmp do
19449: LD_ADDR_VAR 0 1
19453: PUSH
19454: LD_VAR 0 2
19458: PUSH
19459: FOR_IN
19460: IFFALSE 19476
// SetFuel ( i , 0 ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_INT 0
19469: PPUSH
19470: CALL_OW 240
19474: GO 19459
19476: POP
19477: POP
// end ;
19478: PPOPN 2
19480: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19481: LD_EXP 34
19485: PUSH
19486: LD_EXP 70
19490: AND
19491: IFFALSE 19557
19493: GO 19495
19495: DISABLE
19496: LD_INT 0
19498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19499: LD_ADDR_VAR 0 1
19503: PUSH
19504: LD_INT 22
19506: PUSH
19507: LD_OWVAR 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 30
19518: PUSH
19519: LD_INT 29
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: ST_TO_ADDR
// if not tmp then
19535: LD_VAR 0 1
19539: NOT
19540: IFFALSE 19544
// exit ;
19542: GO 19557
// DestroyUnit ( tmp [ 1 ] ) ;
19544: LD_VAR 0 1
19548: PUSH
19549: LD_INT 1
19551: ARRAY
19552: PPUSH
19553: CALL_OW 65
// end ;
19557: PPOPN 1
19559: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19560: LD_EXP 34
19564: PUSH
19565: LD_EXP 72
19569: AND
19570: IFFALSE 19699
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
// begin uc_side := 0 ;
19578: LD_ADDR_OWVAR 20
19582: PUSH
19583: LD_INT 0
19585: ST_TO_ADDR
// uc_nation := nation_arabian ;
19586: LD_ADDR_OWVAR 21
19590: PUSH
19591: LD_INT 2
19593: ST_TO_ADDR
// hc_gallery :=  ;
19594: LD_ADDR_OWVAR 33
19598: PUSH
19599: LD_STRING 
19601: ST_TO_ADDR
// hc_name :=  ;
19602: LD_ADDR_OWVAR 26
19606: PUSH
19607: LD_STRING 
19609: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19610: LD_INT 1
19612: PPUSH
19613: LD_INT 11
19615: PPUSH
19616: LD_INT 10
19618: PPUSH
19619: CALL_OW 380
// un := CreateHuman ;
19623: LD_ADDR_VAR 0 1
19627: PUSH
19628: CALL_OW 44
19632: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19633: LD_VAR 0 1
19637: PPUSH
19638: LD_INT 1
19640: PPUSH
19641: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19645: LD_INT 35
19647: PPUSH
19648: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19652: LD_VAR 0 1
19656: PPUSH
19657: LD_INT 22
19659: PUSH
19660: LD_OWVAR 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: PPUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 74
19683: PPUSH
19684: CALL_OW 115
// until IsDead ( un ) ;
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 301
19697: IFFALSE 19645
// end ;
19699: PPOPN 1
19701: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19702: LD_EXP 34
19706: PUSH
19707: LD_EXP 74
19711: AND
19712: IFFALSE 19724
19714: GO 19716
19716: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19717: LD_STRING earthquake(getX(game), 0, 32)
19719: PPUSH
19720: CALL_OW 559
19724: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19725: LD_EXP 34
19729: PUSH
19730: LD_EXP 75
19734: AND
19735: IFFALSE 19826
19737: GO 19739
19739: DISABLE
19740: LD_INT 0
19742: PPUSH
// begin enable ;
19743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19744: LD_ADDR_VAR 0 1
19748: PUSH
19749: LD_INT 22
19751: PUSH
19752: LD_OWVAR 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 21
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 33
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: ST_TO_ADDR
// if not tmp then
19791: LD_VAR 0 1
19795: NOT
19796: IFFALSE 19800
// exit ;
19798: GO 19826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19800: LD_VAR 0 1
19804: PUSH
19805: LD_INT 1
19807: PPUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 12
19817: ARRAY
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: CALL_OW 234
// end ;
19826: PPOPN 1
19828: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19829: LD_EXP 34
19833: PUSH
19834: LD_EXP 76
19838: AND
19839: IFFALSE 19980
19841: GO 19843
19843: DISABLE
19844: LD_INT 0
19846: PPUSH
19847: PPUSH
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19849: LD_ADDR_VAR 0 3
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 25
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 3
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19980
// un := tmp [ rand ( 1 , tmp ) ] ;
19894: LD_ADDR_VAR 0 2
19898: PUSH
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 1
19906: PPUSH
19907: LD_VAR 0 3
19911: PPUSH
19912: CALL_OW 12
19916: ARRAY
19917: ST_TO_ADDR
// if Crawls ( un ) then
19918: LD_VAR 0 2
19922: PPUSH
19923: CALL_OW 318
19927: IFFALSE 19938
// ComWalk ( un ) ;
19929: LD_VAR 0 2
19933: PPUSH
19934: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19938: LD_VAR 0 2
19942: PPUSH
19943: LD_INT 9
19945: PPUSH
19946: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19950: LD_INT 28
19952: PPUSH
19953: LD_OWVAR 2
19957: PPUSH
19958: LD_INT 2
19960: PPUSH
19961: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19965: LD_INT 29
19967: PPUSH
19968: LD_OWVAR 2
19972: PPUSH
19973: LD_INT 2
19975: PPUSH
19976: CALL_OW 322
// end ;
19980: PPOPN 3
19982: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19983: LD_EXP 34
19987: PUSH
19988: LD_EXP 77
19992: AND
19993: IFFALSE 20104
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
20002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20003: LD_ADDR_VAR 0 3
20007: PUSH
20008: LD_INT 22
20010: PUSH
20011: LD_OWVAR 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 25
20022: PUSH
20023: LD_INT 1
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: ST_TO_ADDR
// if not tmp then
20039: LD_VAR 0 3
20043: NOT
20044: IFFALSE 20048
// exit ;
20046: GO 20104
// un := tmp [ rand ( 1 , tmp ) ] ;
20048: LD_ADDR_VAR 0 2
20052: PUSH
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 1
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: CALL_OW 12
20070: ARRAY
20071: ST_TO_ADDR
// if Crawls ( un ) then
20072: LD_VAR 0 2
20076: PPUSH
20077: CALL_OW 318
20081: IFFALSE 20092
// ComWalk ( un ) ;
20083: LD_VAR 0 2
20087: PPUSH
20088: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20092: LD_VAR 0 2
20096: PPUSH
20097: LD_INT 8
20099: PPUSH
20100: CALL_OW 336
// end ;
20104: PPOPN 3
20106: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20107: LD_EXP 34
20111: PUSH
20112: LD_EXP 78
20116: AND
20117: IFFALSE 20261
20119: GO 20121
20121: DISABLE
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_OWVAR 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 21
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 34
20158: PUSH
20159: LD_INT 12
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 34
20168: PUSH
20169: LD_INT 51
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 34
20178: PUSH
20179: LD_INT 32
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: ST_TO_ADDR
// if not tmp then
20202: LD_VAR 0 2
20206: NOT
20207: IFFALSE 20211
// exit ;
20209: GO 20261
// for i in tmp do
20211: LD_ADDR_VAR 0 1
20215: PUSH
20216: LD_VAR 0 2
20220: PUSH
20221: FOR_IN
20222: IFFALSE 20259
// if GetCargo ( i , mat_artifact ) = 0 then
20224: LD_VAR 0 1
20228: PPUSH
20229: LD_INT 4
20231: PPUSH
20232: CALL_OW 289
20236: PUSH
20237: LD_INT 0
20239: EQUAL
20240: IFFALSE 20257
// SetCargo ( i , mat_siberit , 100 ) ;
20242: LD_VAR 0 1
20246: PPUSH
20247: LD_INT 3
20249: PPUSH
20250: LD_INT 100
20252: PPUSH
20253: CALL_OW 290
20257: GO 20221
20259: POP
20260: POP
// end ;
20261: PPOPN 2
20263: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20264: LD_EXP 34
20268: PUSH
20269: LD_EXP 79
20273: AND
20274: IFFALSE 20457
20276: GO 20278
20278: DISABLE
20279: LD_INT 0
20281: PPUSH
20282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20283: LD_ADDR_VAR 0 2
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_OWVAR 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: ST_TO_ADDR
// if not tmp then
20305: LD_VAR 0 2
20309: NOT
20310: IFFALSE 20314
// exit ;
20312: GO 20457
// for i := 1 to 2 do
20314: LD_ADDR_VAR 0 1
20318: PUSH
20319: DOUBLE
20320: LD_INT 1
20322: DEC
20323: ST_TO_ADDR
20324: LD_INT 2
20326: PUSH
20327: FOR_TO
20328: IFFALSE 20455
// begin uc_side := your_side ;
20330: LD_ADDR_OWVAR 20
20334: PUSH
20335: LD_OWVAR 2
20339: ST_TO_ADDR
// uc_nation := nation_american ;
20340: LD_ADDR_OWVAR 21
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// vc_chassis := us_morphling ;
20348: LD_ADDR_OWVAR 37
20352: PUSH
20353: LD_INT 5
20355: ST_TO_ADDR
// vc_engine := engine_siberite ;
20356: LD_ADDR_OWVAR 39
20360: PUSH
20361: LD_INT 3
20363: ST_TO_ADDR
// vc_control := control_computer ;
20364: LD_ADDR_OWVAR 38
20368: PUSH
20369: LD_INT 3
20371: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20372: LD_ADDR_OWVAR 40
20376: PUSH
20377: LD_INT 10
20379: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20380: LD_VAR 0 2
20384: PUSH
20385: LD_INT 1
20387: ARRAY
20388: PPUSH
20389: CALL_OW 310
20393: NOT
20394: IFFALSE 20441
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20396: CALL_OW 45
20400: PPUSH
20401: LD_VAR 0 2
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PPUSH
20410: CALL_OW 250
20414: PPUSH
20415: LD_VAR 0 2
20419: PUSH
20420: LD_INT 1
20422: ARRAY
20423: PPUSH
20424: CALL_OW 251
20428: PPUSH
20429: LD_INT 12
20431: PPUSH
20432: LD_INT 1
20434: PPUSH
20435: CALL_OW 50
20439: GO 20453
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20441: CALL_OW 45
20445: PPUSH
20446: LD_INT 1
20448: PPUSH
20449: CALL_OW 51
// end ;
20453: GO 20327
20455: POP
20456: POP
// end ;
20457: PPOPN 2
20459: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20460: LD_EXP 34
20464: PUSH
20465: LD_EXP 80
20469: AND
20470: IFFALSE 20692
20472: GO 20474
20474: DISABLE
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20483: LD_ADDR_VAR 0 6
20487: PUSH
20488: LD_INT 22
20490: PUSH
20491: LD_OWVAR 2
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 21
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 3
20512: PUSH
20513: LD_INT 23
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 69
20536: ST_TO_ADDR
// if not tmp then
20537: LD_VAR 0 6
20541: NOT
20542: IFFALSE 20546
// exit ;
20544: GO 20692
// s1 := rand ( 1 , 4 ) ;
20546: LD_ADDR_VAR 0 2
20550: PUSH
20551: LD_INT 1
20553: PPUSH
20554: LD_INT 4
20556: PPUSH
20557: CALL_OW 12
20561: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20562: LD_ADDR_VAR 0 4
20566: PUSH
20567: LD_VAR 0 6
20571: PUSH
20572: LD_INT 1
20574: ARRAY
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: CALL_OW 259
20585: ST_TO_ADDR
// if s1 = 1 then
20586: LD_VAR 0 2
20590: PUSH
20591: LD_INT 1
20593: EQUAL
20594: IFFALSE 20614
// s2 := rand ( 2 , 4 ) else
20596: LD_ADDR_VAR 0 3
20600: PUSH
20601: LD_INT 2
20603: PPUSH
20604: LD_INT 4
20606: PPUSH
20607: CALL_OW 12
20611: ST_TO_ADDR
20612: GO 20622
// s2 := 1 ;
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: LD_INT 1
20621: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20622: LD_ADDR_VAR 0 5
20626: PUSH
20627: LD_VAR 0 6
20631: PUSH
20632: LD_INT 1
20634: ARRAY
20635: PPUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL_OW 259
20645: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20646: LD_VAR 0 6
20650: PUSH
20651: LD_INT 1
20653: ARRAY
20654: PPUSH
20655: LD_VAR 0 2
20659: PPUSH
20660: LD_VAR 0 5
20664: PPUSH
20665: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20669: LD_VAR 0 6
20673: PUSH
20674: LD_INT 1
20676: ARRAY
20677: PPUSH
20678: LD_VAR 0 3
20682: PPUSH
20683: LD_VAR 0 4
20687: PPUSH
20688: CALL_OW 237
// end ;
20692: PPOPN 6
20694: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20695: LD_EXP 34
20699: PUSH
20700: LD_EXP 81
20704: AND
20705: IFFALSE 20784
20707: GO 20709
20709: DISABLE
20710: LD_INT 0
20712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_INT 22
20720: PUSH
20721: LD_OWVAR 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PPUSH
20744: CALL_OW 69
20748: ST_TO_ADDR
// if not tmp then
20749: LD_VAR 0 1
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 20784
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20758: LD_VAR 0 1
20762: PUSH
20763: LD_INT 1
20765: PPUSH
20766: LD_VAR 0 1
20770: PPUSH
20771: CALL_OW 12
20775: ARRAY
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 234
// end ;
20784: PPOPN 1
20786: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20787: LD_EXP 34
20791: PUSH
20792: LD_EXP 82
20796: AND
20797: IFFALSE 20909
20799: GO 20801
20801: DISABLE
20802: LD_INT 0
20804: PPUSH
20805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20806: LD_ADDR_VAR 0 2
20810: PUSH
20811: LD_INT 22
20813: PUSH
20814: LD_OWVAR 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 27
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 26
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 30
20848: PUSH
20849: LD_INT 28
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: ST_TO_ADDR
// if not tmp then
20871: LD_VAR 0 2
20875: NOT
20876: IFFALSE 20880
// exit ;
20878: GO 20909
// for i in tmp do
20880: LD_ADDR_VAR 0 1
20884: PUSH
20885: LD_VAR 0 2
20889: PUSH
20890: FOR_IN
20891: IFFALSE 20907
// SetLives ( i , 1 ) ;
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 234
20905: GO 20890
20907: POP
20908: POP
// end ;
20909: PPOPN 2
20911: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20912: LD_EXP 34
20916: PUSH
20917: LD_EXP 83
20921: AND
20922: IFFALSE 21196
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
20931: PPUSH
// begin i := rand ( 1 , 7 ) ;
20932: LD_ADDR_VAR 0 1
20936: PUSH
20937: LD_INT 1
20939: PPUSH
20940: LD_INT 7
20942: PPUSH
20943: CALL_OW 12
20947: ST_TO_ADDR
// case i of 1 :
20948: LD_VAR 0 1
20952: PUSH
20953: LD_INT 1
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20971
20961: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20962: LD_STRING earthquake(getX(game), 0, 32)
20964: PPUSH
20965: CALL_OW 559
20969: GO 21196
20971: LD_INT 2
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 20993
20979: POP
// begin ToLua ( displayStucuk(); ) ;
20980: LD_STRING displayStucuk();
20982: PPUSH
20983: CALL_OW 559
// ResetFog ;
20987: CALL_OW 335
// end ; 3 :
20991: GO 21196
20993: LD_INT 3
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21105
21001: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21002: LD_ADDR_VAR 0 2
21006: PUSH
21007: LD_INT 22
21009: PUSH
21010: LD_OWVAR 2
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 25
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PPUSH
21033: CALL_OW 69
21037: ST_TO_ADDR
// if not tmp then
21038: LD_VAR 0 2
21042: NOT
21043: IFFALSE 21047
// exit ;
21045: GO 21196
// un := tmp [ rand ( 1 , tmp ) ] ;
21047: LD_ADDR_VAR 0 3
21051: PUSH
21052: LD_VAR 0 2
21056: PUSH
21057: LD_INT 1
21059: PPUSH
21060: LD_VAR 0 2
21064: PPUSH
21065: CALL_OW 12
21069: ARRAY
21070: ST_TO_ADDR
// if Crawls ( un ) then
21071: LD_VAR 0 3
21075: PPUSH
21076: CALL_OW 318
21080: IFFALSE 21091
// ComWalk ( un ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_INT 8
21098: PPUSH
21099: CALL_OW 336
// end ; 4 :
21103: GO 21196
21105: LD_INT 4
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21174
21113: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_OWVAR 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 30
21133: PUSH
21134: LD_INT 29
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: ST_TO_ADDR
// if not tmp then
21150: LD_VAR 0 2
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 21196
// DestroyUnit ( tmp [ 1 ] ) ;
21159: LD_VAR 0 2
21163: PUSH
21164: LD_INT 1
21166: ARRAY
21167: PPUSH
21168: CALL_OW 65
// end ; 5 .. 7 :
21172: GO 21196
21174: LD_INT 5
21176: DOUBLE
21177: GREATEREQUAL
21178: IFFALSE 21186
21180: LD_INT 7
21182: DOUBLE
21183: LESSEQUAL
21184: IFTRUE 21188
21186: GO 21195
21188: POP
// StreamSibBomb ; end ;
21189: CALL 17446 0 0
21193: GO 21196
21195: POP
// end ;
21196: PPOPN 3
21198: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21199: LD_EXP 34
21203: PUSH
21204: LD_EXP 84
21208: AND
21209: IFFALSE 21365
21211: GO 21213
21213: DISABLE
21214: LD_INT 0
21216: PPUSH
21217: PPUSH
21218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21219: LD_ADDR_VAR 0 2
21223: PUSH
21224: LD_INT 81
21226: PUSH
21227: LD_OWVAR 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 21
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 21
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: ST_TO_ADDR
// if not tmp then
21273: LD_VAR 0 2
21277: NOT
21278: IFFALSE 21282
// exit ;
21280: GO 21365
// p := 0 ;
21282: LD_ADDR_VAR 0 3
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21290: LD_INT 35
21292: PPUSH
21293: CALL_OW 67
// p := p + 1 ;
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_VAR 0 3
21306: PUSH
21307: LD_INT 1
21309: PLUS
21310: ST_TO_ADDR
// for i in tmp do
21311: LD_ADDR_VAR 0 1
21315: PUSH
21316: LD_VAR 0 2
21320: PUSH
21321: FOR_IN
21322: IFFALSE 21353
// if GetLives ( i ) < 1000 then
21324: LD_VAR 0 1
21328: PPUSH
21329: CALL_OW 256
21333: PUSH
21334: LD_INT 1000
21336: LESS
21337: IFFALSE 21351
// SetLives ( i , 1000 ) ;
21339: LD_VAR 0 1
21343: PPUSH
21344: LD_INT 1000
21346: PPUSH
21347: CALL_OW 234
21351: GO 21321
21353: POP
21354: POP
// until p > 20 ;
21355: LD_VAR 0 3
21359: PUSH
21360: LD_INT 20
21362: GREATER
21363: IFFALSE 21290
// end ;
21365: PPOPN 3
21367: END
// every 0 0$1 trigger StreamModeActive and sTime do
21368: LD_EXP 34
21372: PUSH
21373: LD_EXP 85
21377: AND
21378: IFFALSE 21413
21380: GO 21382
21382: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21383: LD_INT 28
21385: PPUSH
21386: LD_OWVAR 2
21390: PPUSH
21391: LD_INT 2
21393: PPUSH
21394: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21398: LD_INT 30
21400: PPUSH
21401: LD_OWVAR 2
21405: PPUSH
21406: LD_INT 2
21408: PPUSH
21409: CALL_OW 322
// end ;
21413: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21414: LD_EXP 34
21418: PUSH
21419: LD_EXP 86
21423: AND
21424: IFFALSE 21545
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 21
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 3
21462: PUSH
21463: LD_INT 23
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: ST_TO_ADDR
// if not tmp then
21487: LD_VAR 0 2
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21545
// for i in tmp do
21496: LD_ADDR_VAR 0 1
21500: PUSH
21501: LD_VAR 0 2
21505: PUSH
21506: FOR_IN
21507: IFFALSE 21543
// begin if Crawls ( i ) then
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 318
21518: IFFALSE 21529
// ComWalk ( i ) ;
21520: LD_VAR 0 1
21524: PPUSH
21525: CALL_OW 138
// SetClass ( i , 2 ) ;
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_INT 2
21536: PPUSH
21537: CALL_OW 336
// end ;
21541: GO 21506
21543: POP
21544: POP
// end ;
21545: PPOPN 2
21547: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21548: LD_EXP 34
21552: PUSH
21553: LD_EXP 87
21557: AND
21558: IFFALSE 21839
21560: GO 21562
21562: DISABLE
21563: LD_INT 0
21565: PPUSH
21566: PPUSH
21567: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21568: LD_OWVAR 2
21572: PPUSH
21573: LD_INT 9
21575: PPUSH
21576: LD_INT 1
21578: PPUSH
21579: LD_INT 1
21581: PPUSH
21582: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21586: LD_INT 9
21588: PPUSH
21589: LD_OWVAR 2
21593: PPUSH
21594: CALL_OW 343
// uc_side := 9 ;
21598: LD_ADDR_OWVAR 20
21602: PUSH
21603: LD_INT 9
21605: ST_TO_ADDR
// uc_nation := 2 ;
21606: LD_ADDR_OWVAR 21
21610: PUSH
21611: LD_INT 2
21613: ST_TO_ADDR
// hc_name := Dark Warrior ;
21614: LD_ADDR_OWVAR 26
21618: PUSH
21619: LD_STRING Dark Warrior
21621: ST_TO_ADDR
// hc_gallery :=  ;
21622: LD_ADDR_OWVAR 33
21626: PUSH
21627: LD_STRING 
21629: ST_TO_ADDR
// hc_noskilllimit := true ;
21630: LD_ADDR_OWVAR 76
21634: PUSH
21635: LD_INT 1
21637: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21638: LD_ADDR_OWVAR 31
21642: PUSH
21643: LD_INT 30
21645: PUSH
21646: LD_INT 30
21648: PUSH
21649: LD_INT 30
21651: PUSH
21652: LD_INT 30
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: ST_TO_ADDR
// un := CreateHuman ;
21661: LD_ADDR_VAR 0 3
21665: PUSH
21666: CALL_OW 44
21670: ST_TO_ADDR
// hc_noskilllimit := false ;
21671: LD_ADDR_OWVAR 76
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21679: LD_VAR 0 3
21683: PPUSH
21684: LD_INT 1
21686: PPUSH
21687: CALL_OW 51
// p := 0 ;
21691: LD_ADDR_VAR 0 2
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21699: LD_INT 35
21701: PPUSH
21702: CALL_OW 67
// p := p + 1 ;
21706: LD_ADDR_VAR 0 2
21710: PUSH
21711: LD_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: PLUS
21719: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21720: LD_VAR 0 3
21724: PPUSH
21725: CALL_OW 256
21729: PUSH
21730: LD_INT 1000
21732: LESS
21733: IFFALSE 21747
// SetLives ( un , 1000 ) ;
21735: LD_VAR 0 3
21739: PPUSH
21740: LD_INT 1000
21742: PPUSH
21743: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21747: LD_VAR 0 3
21751: PPUSH
21752: LD_INT 81
21754: PUSH
21755: LD_OWVAR 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 91
21766: PUSH
21767: LD_VAR 0 3
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: PPUSH
21789: LD_VAR 0 3
21793: PPUSH
21794: CALL_OW 74
21798: PPUSH
21799: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21803: LD_VAR 0 2
21807: PUSH
21808: LD_INT 60
21810: GREATER
21811: PUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: CALL_OW 301
21821: OR
21822: IFFALSE 21699
// if un then
21824: LD_VAR 0 3
21828: IFFALSE 21839
// RemoveUnit ( un ) ;
21830: LD_VAR 0 3
21834: PPUSH
21835: CALL_OW 64
// end ;
21839: PPOPN 3
21841: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21848: LD_ADDR_VAR 0 4
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_OWVAR 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 30
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 30
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PPUSH
21897: CALL_OW 69
21901: ST_TO_ADDR
// if not tmp then
21902: LD_VAR 0 4
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 21970
// for i in tmp do
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_VAR 0 4
21920: PUSH
21921: FOR_IN
21922: IFFALSE 21968
// for j = 1 to 3 do
21924: LD_ADDR_VAR 0 3
21928: PUSH
21929: DOUBLE
21930: LD_INT 1
21932: DEC
21933: ST_TO_ADDR
21934: LD_INT 3
21936: PUSH
21937: FOR_TO
21938: IFFALSE 21964
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21940: LD_VAR 0 2
21944: PPUSH
21945: CALL_OW 274
21949: PPUSH
21950: LD_VAR 0 3
21954: PPUSH
21955: LD_INT 99999
21957: PPUSH
21958: CALL_OW 277
21962: GO 21937
21964: POP
21965: POP
21966: GO 21921
21968: POP
21969: POP
// end ;
21970: LD_VAR 0 1
21974: RET
// export function hHackSetLevel10 ; var i , j ; begin
21975: LD_INT 0
21977: PPUSH
21978: PPUSH
21979: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21980: LD_ADDR_VAR 0 2
21984: PUSH
21985: LD_INT 21
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 69
21999: PUSH
22000: FOR_IN
22001: IFFALSE 22053
// if IsSelected ( i ) then
22003: LD_VAR 0 2
22007: PPUSH
22008: CALL_OW 306
22012: IFFALSE 22051
// begin for j := 1 to 4 do
22014: LD_ADDR_VAR 0 3
22018: PUSH
22019: DOUBLE
22020: LD_INT 1
22022: DEC
22023: ST_TO_ADDR
22024: LD_INT 4
22026: PUSH
22027: FOR_TO
22028: IFFALSE 22049
// SetSkill ( i , j , 10 ) ;
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 10
22042: PPUSH
22043: CALL_OW 237
22047: GO 22027
22049: POP
22050: POP
// end ;
22051: GO 22000
22053: POP
22054: POP
// end ;
22055: LD_VAR 0 1
22059: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22060: LD_INT 0
22062: PPUSH
22063: PPUSH
22064: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 22
22072: PUSH
22073: LD_OWVAR 2
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL_OW 69
22100: PUSH
22101: FOR_IN
22102: IFFALSE 22143
// begin for j := 1 to 4 do
22104: LD_ADDR_VAR 0 3
22108: PUSH
22109: DOUBLE
22110: LD_INT 1
22112: DEC
22113: ST_TO_ADDR
22114: LD_INT 4
22116: PUSH
22117: FOR_TO
22118: IFFALSE 22139
// SetSkill ( i , j , 10 ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_INT 10
22132: PPUSH
22133: CALL_OW 237
22137: GO 22117
22139: POP
22140: POP
// end ;
22141: GO 22101
22143: POP
22144: POP
// end ;
22145: LD_VAR 0 1
22149: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
22150: LD_INT 0
22152: PPUSH
// uc_side := your_side ;
22153: LD_ADDR_OWVAR 20
22157: PUSH
22158: LD_OWVAR 2
22162: ST_TO_ADDR
// uc_nation := nation ;
22163: LD_ADDR_OWVAR 21
22167: PUSH
22168: LD_VAR 0 1
22172: ST_TO_ADDR
// InitHc ;
22173: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22177: LD_INT 0
22179: PPUSH
22180: LD_VAR 0 2
22184: PPUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22194: CALL_OW 44
22198: PPUSH
22199: LD_INT 1
22201: PPUSH
22202: CALL_OW 51
// end ;
22206: LD_VAR 0 4
22210: RET
// export function hHackSpawnVehicle ; begin
22211: LD_INT 0
22213: PPUSH
// uc_side := your_side ;
22214: LD_ADDR_OWVAR 20
22218: PUSH
22219: LD_OWVAR 2
22223: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
22224: LD_ADDR_OWVAR 21
22228: PUSH
22229: LD_INT 1
22231: PPUSH
22232: LD_INT 3
22234: PPUSH
22235: CALL_OW 12
22239: ST_TO_ADDR
// InitVc ;
22240: CALL_OW 20
// case uc_nation of 1 :
22244: LD_OWVAR 21
22248: PUSH
22249: LD_INT 1
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22401
22257: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
22258: LD_ADDR_OWVAR 37
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: LD_INT 4
22274: PUSH
22275: LD_INT 5
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: PPUSH
22288: LD_INT 5
22290: PPUSH
22291: CALL_OW 12
22295: ARRAY
22296: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22297: LD_ADDR_OWVAR 39
22301: PUSH
22302: LD_INT 1
22304: PPUSH
22305: LD_INT 3
22307: PPUSH
22308: CALL_OW 12
22312: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
22313: LD_ADDR_OWVAR 38
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 3
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: PPUSH
22335: LD_INT 3
22337: PPUSH
22338: CALL_OW 12
22342: ARRAY
22343: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
22344: LD_ADDR_OWVAR 40
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 4
22354: PUSH
22355: LD_INT 5
22357: PUSH
22358: LD_INT 3
22360: PUSH
22361: LD_INT 7
22363: PUSH
22364: LD_INT 8
22366: PUSH
22367: LD_INT 9
22369: PUSH
22370: LD_INT 10
22372: PUSH
22373: LD_INT 6
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PPUSH
22390: LD_INT 9
22392: PPUSH
22393: CALL_OW 12
22397: ARRAY
22398: ST_TO_ADDR
// end ; 2 :
22399: GO 22666
22401: LD_INT 2
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22533
22409: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
22410: LD_ADDR_OWVAR 37
22414: PUSH
22415: LD_INT 11
22417: PUSH
22418: LD_INT 12
22420: PUSH
22421: LD_INT 13
22423: PUSH
22424: LD_INT 14
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PPUSH
22436: LD_INT 4
22438: PPUSH
22439: CALL_OW 12
22443: ARRAY
22444: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22445: LD_ADDR_OWVAR 39
22449: PUSH
22450: LD_INT 1
22452: PPUSH
22453: LD_INT 3
22455: PPUSH
22456: CALL_OW 12
22460: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
22461: LD_ADDR_OWVAR 38
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 5
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PPUSH
22483: LD_INT 3
22485: PPUSH
22486: CALL_OW 12
22490: ARRAY
22491: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
22492: LD_ADDR_OWVAR 40
22496: PUSH
22497: LD_INT 24
22499: PUSH
22500: LD_INT 26
22502: PUSH
22503: LD_INT 27
22505: PUSH
22506: LD_INT 28
22508: PUSH
22509: LD_INT 29
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PPUSH
22522: LD_INT 5
22524: PPUSH
22525: CALL_OW 12
22529: ARRAY
22530: ST_TO_ADDR
// end ; 3 :
22531: GO 22666
22533: LD_INT 3
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22665
22541: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
22542: LD_ADDR_OWVAR 37
22546: PUSH
22547: LD_INT 21
22549: PUSH
22550: LD_INT 23
22552: PUSH
22553: LD_INT 22
22555: PUSH
22556: LD_INT 24
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: PPUSH
22568: LD_INT 4
22570: PPUSH
22571: CALL_OW 12
22575: ARRAY
22576: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22577: LD_ADDR_OWVAR 39
22581: PUSH
22582: LD_INT 1
22584: PPUSH
22585: LD_INT 3
22587: PPUSH
22588: CALL_OW 12
22592: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
22593: LD_ADDR_OWVAR 38
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PPUSH
22611: LD_INT 2
22613: PPUSH
22614: CALL_OW 12
22618: ARRAY
22619: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
22620: LD_ADDR_OWVAR 40
22624: PUSH
22625: LD_INT 42
22627: PUSH
22628: LD_INT 43
22630: PUSH
22631: LD_INT 44
22633: PUSH
22634: LD_INT 46
22636: PUSH
22637: LD_INT 48
22639: PUSH
22640: LD_INT 47
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PPUSH
22654: LD_INT 6
22656: PPUSH
22657: CALL_OW 12
22661: ARRAY
22662: ST_TO_ADDR
// end ; end ;
22663: GO 22666
22665: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22666: CALL_OW 45
22670: PPUSH
22671: LD_INT 1
22673: PPUSH
22674: CALL_OW 51
// end ;
22678: LD_VAR 0 1
22682: RET
// export hInvincible ; every 1 do
22683: GO 22685
22685: DISABLE
// hInvincible := [ ] ;
22686: LD_ADDR_EXP 88
22690: PUSH
22691: EMPTY
22692: ST_TO_ADDR
22693: END
// every 10 do var i ;
22694: GO 22696
22696: DISABLE
22697: LD_INT 0
22699: PPUSH
// begin enable ;
22700: ENABLE
// if not hInvincible then
22701: LD_EXP 88
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22754
// for i in hInvincible do
22710: LD_ADDR_VAR 0 1
22714: PUSH
22715: LD_EXP 88
22719: PUSH
22720: FOR_IN
22721: IFFALSE 22752
// if GetLives ( i ) < 1000 then
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 256
22732: PUSH
22733: LD_INT 1000
22735: LESS
22736: IFFALSE 22750
// SetLives ( i , 1000 ) ;
22738: LD_VAR 0 1
22742: PPUSH
22743: LD_INT 1000
22745: PPUSH
22746: CALL_OW 234
22750: GO 22720
22752: POP
22753: POP
// end ;
22754: PPOPN 1
22756: END
// export function hHackInvincible ; var i ; begin
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 21
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 21
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: PPUSH
22794: CALL_OW 69
22798: PUSH
22799: FOR_IN
22800: IFFALSE 22861
// if IsSelected ( i ) then
22802: LD_VAR 0 2
22806: PPUSH
22807: CALL_OW 306
22811: IFFALSE 22859
// begin if i in hInvincible then
22813: LD_VAR 0 2
22817: PUSH
22818: LD_EXP 88
22822: IN
22823: IFFALSE 22843
// hInvincible := hInvincible diff i else
22825: LD_ADDR_EXP 88
22829: PUSH
22830: LD_EXP 88
22834: PUSH
22835: LD_VAR 0 2
22839: DIFF
22840: ST_TO_ADDR
22841: GO 22859
// hInvincible := hInvincible union i ;
22843: LD_ADDR_EXP 88
22847: PUSH
22848: LD_EXP 88
22852: PUSH
22853: LD_VAR 0 2
22857: UNION
22858: ST_TO_ADDR
// end ;
22859: GO 22799
22861: POP
22862: POP
// end ;
22863: LD_VAR 0 1
22867: RET
// export function hHackInvisible ; var i , j ; begin
22868: LD_INT 0
22870: PPUSH
22871: PPUSH
22872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 21
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: PUSH
22893: FOR_IN
22894: IFFALSE 22918
// if IsSelected ( i ) then
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 306
22905: IFFALSE 22916
// ComForceInvisible ( i ) ;
22907: LD_VAR 0 2
22911: PPUSH
22912: CALL_OW 496
22916: GO 22893
22918: POP
22919: POP
// end ;
22920: LD_VAR 0 1
22924: RET
// export function hHackChangeYourSide ; begin
22925: LD_INT 0
22927: PPUSH
// if your_side = 8 then
22928: LD_OWVAR 2
22932: PUSH
22933: LD_INT 8
22935: EQUAL
22936: IFFALSE 22948
// your_side := 0 else
22938: LD_ADDR_OWVAR 2
22942: PUSH
22943: LD_INT 0
22945: ST_TO_ADDR
22946: GO 22962
// your_side := your_side + 1 ;
22948: LD_ADDR_OWVAR 2
22952: PUSH
22953: LD_OWVAR 2
22957: PUSH
22958: LD_INT 1
22960: PLUS
22961: ST_TO_ADDR
// end ;
22962: LD_VAR 0 1
22966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22967: LD_INT 0
22969: PPUSH
22970: PPUSH
22971: PPUSH
// for i in all_units do
22972: LD_ADDR_VAR 0 2
22976: PUSH
22977: LD_OWVAR 3
22981: PUSH
22982: FOR_IN
22983: IFFALSE 23061
// if IsSelected ( i ) then
22985: LD_VAR 0 2
22989: PPUSH
22990: CALL_OW 306
22994: IFFALSE 23059
// begin j := GetSide ( i ) ;
22996: LD_ADDR_VAR 0 3
23000: PUSH
23001: LD_VAR 0 2
23005: PPUSH
23006: CALL_OW 255
23010: ST_TO_ADDR
// if j = 8 then
23011: LD_VAR 0 3
23015: PUSH
23016: LD_INT 8
23018: EQUAL
23019: IFFALSE 23031
// j := 0 else
23021: LD_ADDR_VAR 0 3
23025: PUSH
23026: LD_INT 0
23028: ST_TO_ADDR
23029: GO 23045
// j := j + 1 ;
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_VAR 0 3
23040: PUSH
23041: LD_INT 1
23043: PLUS
23044: ST_TO_ADDR
// SetSide ( i , j ) ;
23045: LD_VAR 0 2
23049: PPUSH
23050: LD_VAR 0 3
23054: PPUSH
23055: CALL_OW 235
// end ;
23059: GO 22982
23061: POP
23062: POP
// end ;
23063: LD_VAR 0 1
23067: RET
// export function hHackFog ; begin
23068: LD_INT 0
23070: PPUSH
// FogOff ( true ) ;
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 344
// end ;
23078: LD_VAR 0 1
23082: RET
// export function hHackApeman ; begin
23083: LD_INT 0
23085: PPUSH
// uc_side := your_side ;
23086: LD_ADDR_OWVAR 20
23090: PUSH
23091: LD_OWVAR 2
23095: ST_TO_ADDR
// uc_nation := 0 ;
23096: LD_ADDR_OWVAR 21
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// hc_name :=  ;
23104: LD_ADDR_OWVAR 26
23108: PUSH
23109: LD_STRING 
23111: ST_TO_ADDR
// hc_gallery :=  ;
23112: LD_ADDR_OWVAR 33
23116: PUSH
23117: LD_STRING 
23119: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
23120: LD_ADDR_OWVAR 31
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: ST_TO_ADDR
// hc_class := class_apeman ;
23143: LD_ADDR_OWVAR 28
23147: PUSH
23148: LD_INT 12
23150: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23151: CALL_OW 44
23155: PPUSH
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 51
// end ;
23163: LD_VAR 0 1
23167: RET
// export function hHackBoom ; begin
23168: LD_INT 0
23170: PPUSH
// uc_side := your_side ;
23171: LD_ADDR_OWVAR 20
23175: PUSH
23176: LD_OWVAR 2
23180: ST_TO_ADDR
// uc_nation := 1 ;
23181: LD_ADDR_OWVAR 21
23185: PUSH
23186: LD_INT 1
23188: ST_TO_ADDR
// vc_chassis := us_morphling ;
23189: LD_ADDR_OWVAR 37
23193: PUSH
23194: LD_INT 5
23196: ST_TO_ADDR
// vc_engine := engine_siberite ;
23197: LD_ADDR_OWVAR 39
23201: PUSH
23202: LD_INT 3
23204: ST_TO_ADDR
// vc_control := control_computer ;
23205: LD_ADDR_OWVAR 38
23209: PUSH
23210: LD_INT 3
23212: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
23213: LD_ADDR_OWVAR 40
23217: PUSH
23218: LD_INT 8
23220: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23221: CALL_OW 45
23225: PPUSH
23226: LD_INT 1
23228: PPUSH
23229: CALL_OW 51
// end ; end_of_file
23233: LD_VAR 0 1
23237: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23244: LD_VAR 0 1
23248: PPUSH
23249: CALL_OW 264
23253: PUSH
23254: LD_EXP 23
23258: EQUAL
23259: IFFALSE 23331
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23261: LD_INT 68
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 255
23273: PPUSH
23274: CALL_OW 321
23278: PUSH
23279: LD_INT 2
23281: EQUAL
23282: IFFALSE 23294
// eff := 70 else
23284: LD_ADDR_VAR 0 4
23288: PUSH
23289: LD_INT 70
23291: ST_TO_ADDR
23292: GO 23302
// eff := 30 ;
23294: LD_ADDR_VAR 0 4
23298: PUSH
23299: LD_INT 30
23301: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 250
23311: PPUSH
23312: LD_VAR 0 1
23316: PPUSH
23317: CALL_OW 251
23321: PPUSH
23322: LD_VAR 0 4
23326: PPUSH
23327: CALL_OW 495
// end ; end ;
23331: LD_VAR 0 2
23335: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23336: LD_INT 0
23338: PPUSH
// end ;
23339: LD_VAR 0 4
23343: RET
// export function SOS_Command ( cmd ) ; begin
23344: LD_INT 0
23346: PPUSH
// end ;
23347: LD_VAR 0 2
23351: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23352: LD_VAR 0 1
23356: PUSH
23357: LD_INT 254
23359: EQUAL
23360: PUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: CALL_OW 264
23370: PUSH
23371: LD_EXP 21
23375: EQUAL
23376: AND
23377: PUSH
23378: LD_VAR 0 3
23382: PPUSH
23383: CALL_OW 263
23387: PUSH
23388: LD_INT 3
23390: EQUAL
23391: AND
23392: IFFALSE 23408
// HackDestroyVehicle ( unit , selectedUnit ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: CALL 24915 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23408: LD_VAR 0 1
23412: PUSH
23413: LD_INT 255
23415: EQUAL
23416: PUSH
23417: LD_VAR 0 2
23421: PPUSH
23422: CALL_OW 264
23426: PUSH
23427: LD_INT 14
23429: PUSH
23430: LD_INT 53
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: IN
23437: AND
23438: PUSH
23439: LD_VAR 0 4
23443: PPUSH
23444: LD_VAR 0 5
23448: PPUSH
23449: CALL_OW 488
23453: AND
23454: IFFALSE 23478
// CutTreeXYR ( unit , x , y , 12 ) ;
23456: LD_VAR 0 2
23460: PPUSH
23461: LD_VAR 0 4
23465: PPUSH
23466: LD_VAR 0 5
23470: PPUSH
23471: LD_INT 12
23473: PPUSH
23474: CALL 23481 0 4
// end ;
23478: PPOPN 5
23480: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23481: LD_INT 0
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23492: LD_VAR 0 1
23496: NOT
23497: PUSH
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: CALL_OW 488
23512: NOT
23513: OR
23514: PUSH
23515: LD_VAR 0 4
23519: NOT
23520: OR
23521: IFFALSE 23525
// exit ;
23523: GO 23865
// list := [ ] ;
23525: LD_ADDR_VAR 0 13
23529: PUSH
23530: EMPTY
23531: ST_TO_ADDR
// if x - r < 0 then
23532: LD_VAR 0 2
23536: PUSH
23537: LD_VAR 0 4
23541: MINUS
23542: PUSH
23543: LD_INT 0
23545: LESS
23546: IFFALSE 23558
// min_x := 0 else
23548: LD_ADDR_VAR 0 7
23552: PUSH
23553: LD_INT 0
23555: ST_TO_ADDR
23556: GO 23574
// min_x := x - r ;
23558: LD_ADDR_VAR 0 7
23562: PUSH
23563: LD_VAR 0 2
23567: PUSH
23568: LD_VAR 0 4
23572: MINUS
23573: ST_TO_ADDR
// if y - r < 0 then
23574: LD_VAR 0 3
23578: PUSH
23579: LD_VAR 0 4
23583: MINUS
23584: PUSH
23585: LD_INT 0
23587: LESS
23588: IFFALSE 23600
// min_y := 0 else
23590: LD_ADDR_VAR 0 8
23594: PUSH
23595: LD_INT 0
23597: ST_TO_ADDR
23598: GO 23616
// min_y := y - r ;
23600: LD_ADDR_VAR 0 8
23604: PUSH
23605: LD_VAR 0 3
23609: PUSH
23610: LD_VAR 0 4
23614: MINUS
23615: ST_TO_ADDR
// max_x := x + r ;
23616: LD_ADDR_VAR 0 9
23620: PUSH
23621: LD_VAR 0 2
23625: PUSH
23626: LD_VAR 0 4
23630: PLUS
23631: ST_TO_ADDR
// max_y := y + r ;
23632: LD_ADDR_VAR 0 10
23636: PUSH
23637: LD_VAR 0 3
23641: PUSH
23642: LD_VAR 0 4
23646: PLUS
23647: ST_TO_ADDR
// for _x = min_x to max_x do
23648: LD_ADDR_VAR 0 11
23652: PUSH
23653: DOUBLE
23654: LD_VAR 0 7
23658: DEC
23659: ST_TO_ADDR
23660: LD_VAR 0 9
23664: PUSH
23665: FOR_TO
23666: IFFALSE 23783
// for _y = min_y to max_y do
23668: LD_ADDR_VAR 0 12
23672: PUSH
23673: DOUBLE
23674: LD_VAR 0 8
23678: DEC
23679: ST_TO_ADDR
23680: LD_VAR 0 10
23684: PUSH
23685: FOR_TO
23686: IFFALSE 23779
// begin if not ValidHex ( _x , _y ) then
23688: LD_VAR 0 11
23692: PPUSH
23693: LD_VAR 0 12
23697: PPUSH
23698: CALL_OW 488
23702: NOT
23703: IFFALSE 23707
// continue ;
23705: GO 23685
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23707: LD_VAR 0 11
23711: PPUSH
23712: LD_VAR 0 12
23716: PPUSH
23717: CALL_OW 351
23721: PUSH
23722: LD_VAR 0 11
23726: PPUSH
23727: LD_VAR 0 12
23731: PPUSH
23732: CALL_OW 554
23736: AND
23737: IFFALSE 23777
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23739: LD_ADDR_VAR 0 13
23743: PUSH
23744: LD_VAR 0 13
23748: PPUSH
23749: LD_VAR 0 13
23753: PUSH
23754: LD_INT 1
23756: PLUS
23757: PPUSH
23758: LD_VAR 0 11
23762: PUSH
23763: LD_VAR 0 12
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PPUSH
23772: CALL_OW 2
23776: ST_TO_ADDR
// end ;
23777: GO 23685
23779: POP
23780: POP
23781: GO 23665
23783: POP
23784: POP
// if not list then
23785: LD_VAR 0 13
23789: NOT
23790: IFFALSE 23794
// exit ;
23792: GO 23865
// for i in list do
23794: LD_ADDR_VAR 0 6
23798: PUSH
23799: LD_VAR 0 13
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23863
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23807: LD_VAR 0 1
23811: PPUSH
23812: LD_STRING M
23814: PUSH
23815: LD_VAR 0 6
23819: PUSH
23820: LD_INT 1
23822: ARRAY
23823: PUSH
23824: LD_VAR 0 6
23828: PUSH
23829: LD_INT 2
23831: ARRAY
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: PPUSH
23857: CALL_OW 447
23861: GO 23804
23863: POP
23864: POP
// end ;
23865: LD_VAR 0 5
23869: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23870: LD_EXP 89
23874: NOT
23875: IFFALSE 23925
23877: GO 23879
23879: DISABLE
// begin initHack := true ;
23880: LD_ADDR_EXP 89
23884: PUSH
23885: LD_INT 1
23887: ST_TO_ADDR
// hackTanks := [ ] ;
23888: LD_ADDR_EXP 90
23892: PUSH
23893: EMPTY
23894: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23895: LD_ADDR_EXP 91
23899: PUSH
23900: EMPTY
23901: ST_TO_ADDR
// hackLimit := 3 ;
23902: LD_ADDR_EXP 92
23906: PUSH
23907: LD_INT 3
23909: ST_TO_ADDR
// hackDist := 12 ;
23910: LD_ADDR_EXP 93
23914: PUSH
23915: LD_INT 12
23917: ST_TO_ADDR
// hackCounter := [ ] ;
23918: LD_ADDR_EXP 94
23922: PUSH
23923: EMPTY
23924: ST_TO_ADDR
// end ;
23925: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23926: LD_EXP 89
23930: PUSH
23931: LD_INT 34
23933: PUSH
23934: LD_EXP 21
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PPUSH
23943: CALL_OW 69
23947: AND
23948: IFFALSE 24203
23950: GO 23952
23952: DISABLE
23953: LD_INT 0
23955: PPUSH
23956: PPUSH
// begin enable ;
23957: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23958: LD_ADDR_VAR 0 1
23962: PUSH
23963: LD_INT 34
23965: PUSH
23966: LD_EXP 21
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 69
23979: PUSH
23980: FOR_IN
23981: IFFALSE 24201
// begin if not i in hackTanks then
23983: LD_VAR 0 1
23987: PUSH
23988: LD_EXP 90
23992: IN
23993: NOT
23994: IFFALSE 24077
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23996: LD_ADDR_EXP 90
24000: PUSH
24001: LD_EXP 90
24005: PPUSH
24006: LD_EXP 90
24010: PUSH
24011: LD_INT 1
24013: PLUS
24014: PPUSH
24015: LD_VAR 0 1
24019: PPUSH
24020: CALL_OW 1
24024: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24025: LD_ADDR_EXP 91
24029: PUSH
24030: LD_EXP 91
24034: PPUSH
24035: LD_EXP 91
24039: PUSH
24040: LD_INT 1
24042: PLUS
24043: PPUSH
24044: EMPTY
24045: PPUSH
24046: CALL_OW 1
24050: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24051: LD_ADDR_EXP 94
24055: PUSH
24056: LD_EXP 94
24060: PPUSH
24061: LD_EXP 94
24065: PUSH
24066: LD_INT 1
24068: PLUS
24069: PPUSH
24070: EMPTY
24071: PPUSH
24072: CALL_OW 1
24076: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL_OW 302
24086: NOT
24087: IFFALSE 24100
// begin HackUnlinkAll ( i ) ;
24089: LD_VAR 0 1
24093: PPUSH
24094: CALL 24206 0 1
// continue ;
24098: GO 23980
// end ; HackCheckCapturedStatus ( i ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: CALL 24649 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24109: LD_ADDR_VAR 0 2
24113: PUSH
24114: LD_INT 81
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 255
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 33
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 91
24143: PUSH
24144: LD_VAR 0 1
24148: PUSH
24149: LD_EXP 93
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 50
24161: PUSH
24162: EMPTY
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PPUSH
24171: CALL_OW 69
24175: ST_TO_ADDR
// if not tmp then
24176: LD_VAR 0 2
24180: NOT
24181: IFFALSE 24185
// continue ;
24183: GO 23980
// HackLink ( i , tmp ) ;
24185: LD_VAR 0 1
24189: PPUSH
24190: LD_VAR 0 2
24194: PPUSH
24195: CALL 24342 0 2
// end ;
24199: GO 23980
24201: POP
24202: POP
// end ;
24203: PPOPN 2
24205: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
24210: PPUSH
// if not hack in hackTanks then
24211: LD_VAR 0 1
24215: PUSH
24216: LD_EXP 90
24220: IN
24221: NOT
24222: IFFALSE 24226
// exit ;
24224: GO 24337
// index := GetElementIndex ( hackTanks , hack ) ;
24226: LD_ADDR_VAR 0 4
24230: PUSH
24231: LD_EXP 90
24235: PPUSH
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL 29757 0 2
24245: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24246: LD_EXP 91
24250: PUSH
24251: LD_VAR 0 4
24255: ARRAY
24256: IFFALSE 24337
// begin for i in hackTanksCaptured [ index ] do
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_EXP 91
24267: PUSH
24268: LD_VAR 0 4
24272: ARRAY
24273: PUSH
24274: FOR_IN
24275: IFFALSE 24301
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24277: LD_VAR 0 3
24281: PUSH
24282: LD_INT 1
24284: ARRAY
24285: PPUSH
24286: LD_VAR 0 3
24290: PUSH
24291: LD_INT 2
24293: ARRAY
24294: PPUSH
24295: CALL_OW 235
24299: GO 24274
24301: POP
24302: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24303: LD_ADDR_EXP 91
24307: PUSH
24308: LD_EXP 91
24312: PPUSH
24313: LD_VAR 0 4
24317: PPUSH
24318: EMPTY
24319: PPUSH
24320: CALL_OW 1
24324: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 0
24332: PPUSH
24333: CALL_OW 505
// end ; end ;
24337: LD_VAR 0 2
24341: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24342: LD_INT 0
24344: PPUSH
24345: PPUSH
24346: PPUSH
// if not hack in hackTanks or not vehicles then
24347: LD_VAR 0 1
24351: PUSH
24352: LD_EXP 90
24356: IN
24357: NOT
24358: PUSH
24359: LD_VAR 0 2
24363: NOT
24364: OR
24365: IFFALSE 24369
// exit ;
24367: GO 24644
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_INT 1
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL 30407 0 4
24394: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24395: LD_ADDR_VAR 0 5
24399: PUSH
24400: LD_EXP 90
24404: PPUSH
24405: LD_VAR 0 1
24409: PPUSH
24410: CALL 29757 0 2
24414: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24415: LD_EXP 91
24419: PUSH
24420: LD_VAR 0 5
24424: ARRAY
24425: PUSH
24426: LD_EXP 92
24430: LESS
24431: IFFALSE 24620
// begin for i := 1 to vehicles do
24433: LD_ADDR_VAR 0 4
24437: PUSH
24438: DOUBLE
24439: LD_INT 1
24441: DEC
24442: ST_TO_ADDR
24443: LD_VAR 0 2
24447: PUSH
24448: FOR_TO
24449: IFFALSE 24618
// begin if hackTanksCaptured [ index ] = hackLimit then
24451: LD_EXP 91
24455: PUSH
24456: LD_VAR 0 5
24460: ARRAY
24461: PUSH
24462: LD_EXP 92
24466: EQUAL
24467: IFFALSE 24471
// break ;
24469: GO 24618
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24471: LD_ADDR_EXP 94
24475: PUSH
24476: LD_EXP 94
24480: PPUSH
24481: LD_VAR 0 5
24485: PPUSH
24486: LD_EXP 94
24490: PUSH
24491: LD_VAR 0 5
24495: ARRAY
24496: PUSH
24497: LD_INT 1
24499: PLUS
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24506: LD_ADDR_EXP 91
24510: PUSH
24511: LD_EXP 91
24515: PPUSH
24516: LD_VAR 0 5
24520: PUSH
24521: LD_EXP 91
24525: PUSH
24526: LD_VAR 0 5
24530: ARRAY
24531: PUSH
24532: LD_INT 1
24534: PLUS
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PPUSH
24540: LD_VAR 0 2
24544: PUSH
24545: LD_VAR 0 4
24549: ARRAY
24550: PUSH
24551: LD_VAR 0 2
24555: PUSH
24556: LD_VAR 0 4
24560: ARRAY
24561: PPUSH
24562: CALL_OW 255
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL 29972 0 3
24575: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24576: LD_VAR 0 2
24580: PUSH
24581: LD_VAR 0 4
24585: ARRAY
24586: PPUSH
24587: LD_VAR 0 1
24591: PPUSH
24592: CALL_OW 255
24596: PPUSH
24597: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24601: LD_VAR 0 2
24605: PUSH
24606: LD_VAR 0 4
24610: ARRAY
24611: PPUSH
24612: CALL_OW 141
// end ;
24616: GO 24448
24618: POP
24619: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24620: LD_VAR 0 1
24624: PPUSH
24625: LD_EXP 91
24629: PUSH
24630: LD_VAR 0 5
24634: ARRAY
24635: PUSH
24636: LD_INT 0
24638: PLUS
24639: PPUSH
24640: CALL_OW 505
// end ;
24644: LD_VAR 0 3
24648: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
// if not hack in hackTanks then
24655: LD_VAR 0 1
24659: PUSH
24660: LD_EXP 90
24664: IN
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24910
// index := GetElementIndex ( hackTanks , hack ) ;
24670: LD_ADDR_VAR 0 4
24674: PUSH
24675: LD_EXP 90
24679: PPUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL 29757 0 2
24689: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: DOUBLE
24696: LD_EXP 91
24700: PUSH
24701: LD_VAR 0 4
24705: ARRAY
24706: INC
24707: ST_TO_ADDR
24708: LD_INT 1
24710: PUSH
24711: FOR_DOWNTO
24712: IFFALSE 24884
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24714: LD_ADDR_VAR 0 5
24718: PUSH
24719: LD_EXP 91
24723: PUSH
24724: LD_VAR 0 4
24728: ARRAY
24729: PUSH
24730: LD_VAR 0 3
24734: ARRAY
24735: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24736: LD_VAR 0 5
24740: PUSH
24741: LD_INT 1
24743: ARRAY
24744: PPUSH
24745: CALL_OW 302
24749: NOT
24750: PUSH
24751: LD_VAR 0 5
24755: PUSH
24756: LD_INT 1
24758: ARRAY
24759: PPUSH
24760: CALL_OW 255
24764: PUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 255
24774: NONEQUAL
24775: OR
24776: IFFALSE 24882
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24778: LD_VAR 0 5
24782: PUSH
24783: LD_INT 1
24785: ARRAY
24786: PPUSH
24787: CALL_OW 305
24791: PUSH
24792: LD_VAR 0 5
24796: PUSH
24797: LD_INT 1
24799: ARRAY
24800: PPUSH
24801: CALL_OW 255
24805: PUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 255
24815: EQUAL
24816: AND
24817: IFFALSE 24841
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24819: LD_VAR 0 5
24823: PUSH
24824: LD_INT 1
24826: ARRAY
24827: PPUSH
24828: LD_VAR 0 5
24832: PUSH
24833: LD_INT 2
24835: ARRAY
24836: PPUSH
24837: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24841: LD_ADDR_EXP 91
24845: PUSH
24846: LD_EXP 91
24850: PPUSH
24851: LD_VAR 0 4
24855: PPUSH
24856: LD_EXP 91
24860: PUSH
24861: LD_VAR 0 4
24865: ARRAY
24866: PPUSH
24867: LD_VAR 0 3
24871: PPUSH
24872: CALL_OW 3
24876: PPUSH
24877: CALL_OW 1
24881: ST_TO_ADDR
// end ; end ;
24882: GO 24711
24884: POP
24885: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_EXP 91
24895: PUSH
24896: LD_VAR 0 4
24900: ARRAY
24901: PUSH
24902: LD_INT 0
24904: PLUS
24905: PPUSH
24906: CALL_OW 505
// end ;
24910: LD_VAR 0 2
24914: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24915: LD_INT 0
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
// if not hack in hackTanks then
24921: LD_VAR 0 1
24925: PUSH
24926: LD_EXP 90
24930: IN
24931: NOT
24932: IFFALSE 24936
// exit ;
24934: GO 25021
// index := GetElementIndex ( hackTanks , hack ) ;
24936: LD_ADDR_VAR 0 5
24940: PUSH
24941: LD_EXP 90
24945: PPUSH
24946: LD_VAR 0 1
24950: PPUSH
24951: CALL 29757 0 2
24955: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: DOUBLE
24962: LD_INT 1
24964: DEC
24965: ST_TO_ADDR
24966: LD_EXP 91
24970: PUSH
24971: LD_VAR 0 5
24975: ARRAY
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25019
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24980: LD_EXP 91
24984: PUSH
24985: LD_VAR 0 5
24989: ARRAY
24990: PUSH
24991: LD_VAR 0 4
24995: ARRAY
24996: PUSH
24997: LD_INT 1
24999: ARRAY
25000: PUSH
25001: LD_VAR 0 2
25005: EQUAL
25006: IFFALSE 25017
// KillUnit ( vehicle ) ;
25008: LD_VAR 0 2
25012: PPUSH
25013: CALL_OW 66
25017: GO 24977
25019: POP
25020: POP
// end ; end_of_file
25021: LD_VAR 0 3
25025: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25026: LD_INT 0
25028: PPUSH
25029: PPUSH
// if exist_mode then
25030: LD_VAR 0 2
25034: IFFALSE 25059
// unit := CreateCharacter ( prefix & ident ) else
25036: LD_ADDR_VAR 0 5
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: LD_VAR 0 1
25050: STR
25051: PPUSH
25052: CALL_OW 34
25056: ST_TO_ADDR
25057: GO 25074
// unit := NewCharacter ( ident ) ;
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 25
25073: ST_TO_ADDR
// result := unit ;
25074: LD_ADDR_VAR 0 4
25078: PUSH
25079: LD_VAR 0 5
25083: ST_TO_ADDR
// end ;
25084: LD_VAR 0 4
25088: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
// if not side or not nation then
25093: LD_VAR 0 1
25097: NOT
25098: PUSH
25099: LD_VAR 0 2
25103: NOT
25104: OR
25105: IFFALSE 25109
// exit ;
25107: GO 25873
// case nation of nation_american :
25109: LD_VAR 0 2
25113: PUSH
25114: LD_INT 1
25116: DOUBLE
25117: EQUAL
25118: IFTRUE 25122
25120: GO 25336
25122: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25123: LD_ADDR_VAR 0 4
25127: PUSH
25128: LD_INT 35
25130: PUSH
25131: LD_INT 45
25133: PUSH
25134: LD_INT 46
25136: PUSH
25137: LD_INT 47
25139: PUSH
25140: LD_INT 82
25142: PUSH
25143: LD_INT 83
25145: PUSH
25146: LD_INT 84
25148: PUSH
25149: LD_INT 85
25151: PUSH
25152: LD_INT 86
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: LD_INT 6
25163: PUSH
25164: LD_INT 15
25166: PUSH
25167: LD_INT 16
25169: PUSH
25170: LD_INT 7
25172: PUSH
25173: LD_INT 12
25175: PUSH
25176: LD_INT 13
25178: PUSH
25179: LD_INT 10
25181: PUSH
25182: LD_INT 14
25184: PUSH
25185: LD_INT 20
25187: PUSH
25188: LD_INT 21
25190: PUSH
25191: LD_INT 22
25193: PUSH
25194: LD_INT 25
25196: PUSH
25197: LD_INT 32
25199: PUSH
25200: LD_INT 27
25202: PUSH
25203: LD_INT 36
25205: PUSH
25206: LD_INT 69
25208: PUSH
25209: LD_INT 39
25211: PUSH
25212: LD_INT 34
25214: PUSH
25215: LD_INT 40
25217: PUSH
25218: LD_INT 48
25220: PUSH
25221: LD_INT 49
25223: PUSH
25224: LD_INT 50
25226: PUSH
25227: LD_INT 51
25229: PUSH
25230: LD_INT 52
25232: PUSH
25233: LD_INT 53
25235: PUSH
25236: LD_INT 54
25238: PUSH
25239: LD_INT 55
25241: PUSH
25242: LD_INT 56
25244: PUSH
25245: LD_INT 57
25247: PUSH
25248: LD_INT 58
25250: PUSH
25251: LD_INT 59
25253: PUSH
25254: LD_INT 60
25256: PUSH
25257: LD_INT 61
25259: PUSH
25260: LD_INT 62
25262: PUSH
25263: LD_INT 80
25265: PUSH
25266: LD_INT 82
25268: PUSH
25269: LD_INT 83
25271: PUSH
25272: LD_INT 84
25274: PUSH
25275: LD_INT 85
25277: PUSH
25278: LD_INT 86
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
25334: GO 25797
25336: LD_INT 2
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 25566
25344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: LD_INT 35
25352: PUSH
25353: LD_INT 45
25355: PUSH
25356: LD_INT 46
25358: PUSH
25359: LD_INT 47
25361: PUSH
25362: LD_INT 82
25364: PUSH
25365: LD_INT 83
25367: PUSH
25368: LD_INT 84
25370: PUSH
25371: LD_INT 85
25373: PUSH
25374: LD_INT 87
25376: PUSH
25377: LD_INT 70
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: LD_INT 11
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: LD_INT 4
25391: PUSH
25392: LD_INT 5
25394: PUSH
25395: LD_INT 6
25397: PUSH
25398: LD_INT 15
25400: PUSH
25401: LD_INT 18
25403: PUSH
25404: LD_INT 7
25406: PUSH
25407: LD_INT 17
25409: PUSH
25410: LD_INT 8
25412: PUSH
25413: LD_INT 20
25415: PUSH
25416: LD_INT 21
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_INT 72
25424: PUSH
25425: LD_INT 26
25427: PUSH
25428: LD_INT 69
25430: PUSH
25431: LD_INT 39
25433: PUSH
25434: LD_INT 40
25436: PUSH
25437: LD_INT 41
25439: PUSH
25440: LD_INT 42
25442: PUSH
25443: LD_INT 43
25445: PUSH
25446: LD_INT 48
25448: PUSH
25449: LD_INT 49
25451: PUSH
25452: LD_INT 50
25454: PUSH
25455: LD_INT 51
25457: PUSH
25458: LD_INT 52
25460: PUSH
25461: LD_INT 53
25463: PUSH
25464: LD_INT 54
25466: PUSH
25467: LD_INT 55
25469: PUSH
25470: LD_INT 56
25472: PUSH
25473: LD_INT 60
25475: PUSH
25476: LD_INT 61
25478: PUSH
25479: LD_INT 62
25481: PUSH
25482: LD_INT 66
25484: PUSH
25485: LD_INT 67
25487: PUSH
25488: LD_INT 68
25490: PUSH
25491: LD_INT 81
25493: PUSH
25494: LD_INT 82
25496: PUSH
25497: LD_INT 83
25499: PUSH
25500: LD_INT 84
25502: PUSH
25503: LD_INT 85
25505: PUSH
25506: LD_INT 87
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: ST_TO_ADDR
25564: GO 25797
25566: LD_INT 3
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25796
25574: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25575: LD_ADDR_VAR 0 4
25579: PUSH
25580: LD_INT 46
25582: PUSH
25583: LD_INT 47
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 82
25594: PUSH
25595: LD_INT 83
25597: PUSH
25598: LD_INT 84
25600: PUSH
25601: LD_INT 85
25603: PUSH
25604: LD_INT 86
25606: PUSH
25607: LD_INT 11
25609: PUSH
25610: LD_INT 9
25612: PUSH
25613: LD_INT 20
25615: PUSH
25616: LD_INT 19
25618: PUSH
25619: LD_INT 21
25621: PUSH
25622: LD_INT 24
25624: PUSH
25625: LD_INT 22
25627: PUSH
25628: LD_INT 25
25630: PUSH
25631: LD_INT 28
25633: PUSH
25634: LD_INT 29
25636: PUSH
25637: LD_INT 30
25639: PUSH
25640: LD_INT 31
25642: PUSH
25643: LD_INT 37
25645: PUSH
25646: LD_INT 38
25648: PUSH
25649: LD_INT 32
25651: PUSH
25652: LD_INT 27
25654: PUSH
25655: LD_INT 33
25657: PUSH
25658: LD_INT 69
25660: PUSH
25661: LD_INT 39
25663: PUSH
25664: LD_INT 34
25666: PUSH
25667: LD_INT 40
25669: PUSH
25670: LD_INT 71
25672: PUSH
25673: LD_INT 23
25675: PUSH
25676: LD_INT 44
25678: PUSH
25679: LD_INT 48
25681: PUSH
25682: LD_INT 49
25684: PUSH
25685: LD_INT 50
25687: PUSH
25688: LD_INT 51
25690: PUSH
25691: LD_INT 52
25693: PUSH
25694: LD_INT 53
25696: PUSH
25697: LD_INT 54
25699: PUSH
25700: LD_INT 55
25702: PUSH
25703: LD_INT 56
25705: PUSH
25706: LD_INT 57
25708: PUSH
25709: LD_INT 58
25711: PUSH
25712: LD_INT 59
25714: PUSH
25715: LD_INT 63
25717: PUSH
25718: LD_INT 64
25720: PUSH
25721: LD_INT 65
25723: PUSH
25724: LD_INT 82
25726: PUSH
25727: LD_INT 83
25729: PUSH
25730: LD_INT 84
25732: PUSH
25733: LD_INT 85
25735: PUSH
25736: LD_INT 86
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: ST_TO_ADDR
25794: GO 25797
25796: POP
// if state > - 1 and state < 3 then
25797: LD_VAR 0 3
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: GREATER
25806: PUSH
25807: LD_VAR 0 3
25811: PUSH
25812: LD_INT 3
25814: LESS
25815: AND
25816: IFFALSE 25873
// for i in result do
25818: LD_ADDR_VAR 0 5
25822: PUSH
25823: LD_VAR 0 4
25827: PUSH
25828: FOR_IN
25829: IFFALSE 25871
// if GetTech ( i , side ) <> state then
25831: LD_VAR 0 5
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 321
25845: PUSH
25846: LD_VAR 0 3
25850: NONEQUAL
25851: IFFALSE 25869
// result := result diff i ;
25853: LD_ADDR_VAR 0 4
25857: PUSH
25858: LD_VAR 0 4
25862: PUSH
25863: LD_VAR 0 5
25867: DIFF
25868: ST_TO_ADDR
25869: GO 25828
25871: POP
25872: POP
// end ;
25873: LD_VAR 0 4
25877: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
// result := true ;
25883: LD_ADDR_VAR 0 3
25887: PUSH
25888: LD_INT 1
25890: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25891: LD_ADDR_VAR 0 5
25895: PUSH
25896: LD_VAR 0 2
25900: PPUSH
25901: CALL_OW 480
25905: ST_TO_ADDR
// if not tmp then
25906: LD_VAR 0 5
25910: NOT
25911: IFFALSE 25915
// exit ;
25913: GO 25964
// for i in tmp do
25915: LD_ADDR_VAR 0 4
25919: PUSH
25920: LD_VAR 0 5
25924: PUSH
25925: FOR_IN
25926: IFFALSE 25962
// if GetTech ( i , side ) <> state_researched then
25928: LD_VAR 0 4
25932: PPUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 321
25942: PUSH
25943: LD_INT 2
25945: NONEQUAL
25946: IFFALSE 25960
// begin result := false ;
25948: LD_ADDR_VAR 0 3
25952: PUSH
25953: LD_INT 0
25955: ST_TO_ADDR
// exit ;
25956: POP
25957: POP
25958: GO 25964
// end ;
25960: GO 25925
25962: POP
25963: POP
// end ;
25964: LD_VAR 0 3
25968: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25969: LD_INT 0
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25984: LD_VAR 0 1
25988: NOT
25989: PUSH
25990: LD_VAR 0 1
25994: PPUSH
25995: CALL_OW 257
25999: PUSH
26000: LD_INT 9
26002: NONEQUAL
26003: OR
26004: IFFALSE 26008
// exit ;
26006: GO 26581
// side := GetSide ( unit ) ;
26008: LD_ADDR_VAR 0 9
26012: PUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL_OW 255
26022: ST_TO_ADDR
// tech_space := tech_spacanom ;
26023: LD_ADDR_VAR 0 12
26027: PUSH
26028: LD_INT 29
26030: ST_TO_ADDR
// tech_time := tech_taurad ;
26031: LD_ADDR_VAR 0 13
26035: PUSH
26036: LD_INT 28
26038: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26039: LD_ADDR_VAR 0 11
26043: PUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 310
26053: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26054: LD_VAR 0 11
26058: PPUSH
26059: CALL_OW 247
26063: PUSH
26064: LD_INT 2
26066: EQUAL
26067: IFFALSE 26071
// exit ;
26069: GO 26581
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26071: LD_ADDR_VAR 0 8
26075: PUSH
26076: LD_INT 81
26078: PUSH
26079: LD_VAR 0 9
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 3
26090: PUSH
26091: LD_INT 21
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 69
26113: ST_TO_ADDR
// if not tmp then
26114: LD_VAR 0 8
26118: NOT
26119: IFFALSE 26123
// exit ;
26121: GO 26581
// if in_unit then
26123: LD_VAR 0 11
26127: IFFALSE 26151
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26129: LD_ADDR_VAR 0 10
26133: PUSH
26134: LD_VAR 0 8
26138: PPUSH
26139: LD_VAR 0 11
26143: PPUSH
26144: CALL_OW 74
26148: ST_TO_ADDR
26149: GO 26171
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26151: LD_ADDR_VAR 0 10
26155: PUSH
26156: LD_VAR 0 8
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 74
26170: ST_TO_ADDR
// if not enemy then
26171: LD_VAR 0 10
26175: NOT
26176: IFFALSE 26180
// exit ;
26178: GO 26581
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26180: LD_VAR 0 11
26184: PUSH
26185: LD_VAR 0 11
26189: PPUSH
26190: LD_VAR 0 10
26194: PPUSH
26195: CALL_OW 296
26199: PUSH
26200: LD_INT 13
26202: GREATER
26203: AND
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: LD_VAR 0 10
26214: PPUSH
26215: CALL_OW 296
26219: PUSH
26220: LD_INT 12
26222: GREATER
26223: OR
26224: IFFALSE 26228
// exit ;
26226: GO 26581
// missile := [ 1 ] ;
26228: LD_ADDR_VAR 0 14
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26239: LD_VAR 0 9
26243: PPUSH
26244: LD_VAR 0 12
26248: PPUSH
26249: CALL_OW 325
26253: IFFALSE 26282
// missile := Insert ( missile , missile + 1 , 2 ) ;
26255: LD_ADDR_VAR 0 14
26259: PUSH
26260: LD_VAR 0 14
26264: PPUSH
26265: LD_VAR 0 14
26269: PUSH
26270: LD_INT 1
26272: PLUS
26273: PPUSH
26274: LD_INT 2
26276: PPUSH
26277: CALL_OW 2
26281: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26282: LD_VAR 0 9
26286: PPUSH
26287: LD_VAR 0 13
26291: PPUSH
26292: CALL_OW 325
26296: PUSH
26297: LD_VAR 0 10
26301: PPUSH
26302: CALL_OW 255
26306: PPUSH
26307: LD_VAR 0 13
26311: PPUSH
26312: CALL_OW 325
26316: NOT
26317: AND
26318: IFFALSE 26347
// missile := Insert ( missile , missile + 1 , 3 ) ;
26320: LD_ADDR_VAR 0 14
26324: PUSH
26325: LD_VAR 0 14
26329: PPUSH
26330: LD_VAR 0 14
26334: PUSH
26335: LD_INT 1
26337: PLUS
26338: PPUSH
26339: LD_INT 3
26341: PPUSH
26342: CALL_OW 2
26346: ST_TO_ADDR
// if missile < 2 then
26347: LD_VAR 0 14
26351: PUSH
26352: LD_INT 2
26354: LESS
26355: IFFALSE 26359
// exit ;
26357: GO 26581
// x := GetX ( enemy ) ;
26359: LD_ADDR_VAR 0 4
26363: PUSH
26364: LD_VAR 0 10
26368: PPUSH
26369: CALL_OW 250
26373: ST_TO_ADDR
// y := GetY ( enemy ) ;
26374: LD_ADDR_VAR 0 5
26378: PUSH
26379: LD_VAR 0 10
26383: PPUSH
26384: CALL_OW 251
26388: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26389: LD_ADDR_VAR 0 6
26393: PUSH
26394: LD_VAR 0 4
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PPUSH
26403: LD_INT 1
26405: PPUSH
26406: CALL_OW 12
26410: PLUS
26411: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26412: LD_ADDR_VAR 0 7
26416: PUSH
26417: LD_VAR 0 5
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PPUSH
26426: LD_INT 1
26428: PPUSH
26429: CALL_OW 12
26433: PLUS
26434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26435: LD_VAR 0 6
26439: PPUSH
26440: LD_VAR 0 7
26444: PPUSH
26445: CALL_OW 488
26449: NOT
26450: IFFALSE 26472
// begin _x := x ;
26452: LD_ADDR_VAR 0 6
26456: PUSH
26457: LD_VAR 0 4
26461: ST_TO_ADDR
// _y := y ;
26462: LD_ADDR_VAR 0 7
26466: PUSH
26467: LD_VAR 0 5
26471: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_INT 1
26479: PPUSH
26480: LD_VAR 0 14
26484: PPUSH
26485: CALL_OW 12
26489: ST_TO_ADDR
// case i of 1 :
26490: LD_VAR 0 3
26494: PUSH
26495: LD_INT 1
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26503
26501: GO 26520
26503: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26504: LD_VAR 0 1
26508: PPUSH
26509: LD_VAR 0 10
26513: PPUSH
26514: CALL_OW 115
26518: GO 26581
26520: LD_INT 2
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26528
26526: GO 26550
26528: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26529: LD_VAR 0 1
26533: PPUSH
26534: LD_VAR 0 6
26538: PPUSH
26539: LD_VAR 0 7
26543: PPUSH
26544: CALL_OW 153
26548: GO 26581
26550: LD_INT 3
26552: DOUBLE
26553: EQUAL
26554: IFTRUE 26558
26556: GO 26580
26558: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26559: LD_VAR 0 1
26563: PPUSH
26564: LD_VAR 0 6
26568: PPUSH
26569: LD_VAR 0 7
26573: PPUSH
26574: CALL_OW 154
26578: GO 26581
26580: POP
// end ;
26581: LD_VAR 0 2
26585: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26586: LD_INT 0
26588: PPUSH
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
26593: PPUSH
// if not unit or not building then
26594: LD_VAR 0 1
26598: NOT
26599: PUSH
26600: LD_VAR 0 2
26604: NOT
26605: OR
26606: IFFALSE 26610
// exit ;
26608: GO 26768
// x := GetX ( building ) ;
26610: LD_ADDR_VAR 0 5
26614: PUSH
26615: LD_VAR 0 2
26619: PPUSH
26620: CALL_OW 250
26624: ST_TO_ADDR
// y := GetY ( building ) ;
26625: LD_ADDR_VAR 0 6
26629: PUSH
26630: LD_VAR 0 2
26634: PPUSH
26635: CALL_OW 251
26639: ST_TO_ADDR
// for i = 0 to 5 do
26640: LD_ADDR_VAR 0 4
26644: PUSH
26645: DOUBLE
26646: LD_INT 0
26648: DEC
26649: ST_TO_ADDR
26650: LD_INT 5
26652: PUSH
26653: FOR_TO
26654: IFFALSE 26766
// begin _x := ShiftX ( x , i , 3 ) ;
26656: LD_ADDR_VAR 0 7
26660: PUSH
26661: LD_VAR 0 5
26665: PPUSH
26666: LD_VAR 0 4
26670: PPUSH
26671: LD_INT 3
26673: PPUSH
26674: CALL_OW 272
26678: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26679: LD_ADDR_VAR 0 8
26683: PUSH
26684: LD_VAR 0 6
26688: PPUSH
26689: LD_VAR 0 4
26693: PPUSH
26694: LD_INT 3
26696: PPUSH
26697: CALL_OW 273
26701: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26702: LD_VAR 0 7
26706: PPUSH
26707: LD_VAR 0 8
26711: PPUSH
26712: CALL_OW 488
26716: NOT
26717: IFFALSE 26721
// continue ;
26719: GO 26653
// if HexInfo ( _x , _y ) = 0 then
26721: LD_VAR 0 7
26725: PPUSH
26726: LD_VAR 0 8
26730: PPUSH
26731: CALL_OW 428
26735: PUSH
26736: LD_INT 0
26738: EQUAL
26739: IFFALSE 26764
// begin ComMoveXY ( unit , _x , _y ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: LD_VAR 0 7
26750: PPUSH
26751: LD_VAR 0 8
26755: PPUSH
26756: CALL_OW 111
// exit ;
26760: POP
26761: POP
26762: GO 26768
// end ; end ;
26764: GO 26653
26766: POP
26767: POP
// end ;
26768: LD_VAR 0 3
26772: RET
// export function ScanBase ( side , base_area ) ; begin
26773: LD_INT 0
26775: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26776: LD_ADDR_VAR 0 3
26780: PUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: LD_INT 81
26788: PUSH
26789: LD_VAR 0 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 70
26802: ST_TO_ADDR
// end ;
26803: LD_VAR 0 3
26807: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
// result := false ;
26814: LD_ADDR_VAR 0 2
26818: PUSH
26819: LD_INT 0
26821: ST_TO_ADDR
// side := GetSide ( unit ) ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 255
26836: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26837: LD_ADDR_VAR 0 4
26841: PUSH
26842: LD_VAR 0 1
26846: PPUSH
26847: CALL_OW 248
26851: ST_TO_ADDR
// case nat of 1 :
26852: LD_VAR 0 4
26856: PUSH
26857: LD_INT 1
26859: DOUBLE
26860: EQUAL
26861: IFTRUE 26865
26863: GO 26876
26865: POP
// tech := tech_lassight ; 2 :
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_INT 12
26873: ST_TO_ADDR
26874: GO 26915
26876: LD_INT 2
26878: DOUBLE
26879: EQUAL
26880: IFTRUE 26884
26882: GO 26895
26884: POP
// tech := tech_mortar ; 3 :
26885: LD_ADDR_VAR 0 5
26889: PUSH
26890: LD_INT 41
26892: ST_TO_ADDR
26893: GO 26915
26895: LD_INT 3
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 26914
26903: POP
// tech := tech_bazooka ; end ;
26904: LD_ADDR_VAR 0 5
26908: PUSH
26909: LD_INT 44
26911: ST_TO_ADDR
26912: GO 26915
26914: POP
// if Researched ( side , tech ) then
26915: LD_VAR 0 3
26919: PPUSH
26920: LD_VAR 0 5
26924: PPUSH
26925: CALL_OW 325
26929: IFFALSE 26956
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_INT 5
26938: PUSH
26939: LD_INT 8
26941: PUSH
26942: LD_INT 9
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: PUSH
26950: LD_VAR 0 4
26954: ARRAY
26955: ST_TO_ADDR
// end ;
26956: LD_VAR 0 2
26960: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
26965: PPUSH
// if not mines then
26966: LD_VAR 0 2
26970: NOT
26971: IFFALSE 26975
// exit ;
26973: GO 27119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26975: LD_ADDR_VAR 0 5
26979: PUSH
26980: LD_INT 81
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: LD_INT 21
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PPUSH
27013: CALL_OW 69
27017: ST_TO_ADDR
// for i in mines do
27018: LD_ADDR_VAR 0 4
27022: PUSH
27023: LD_VAR 0 2
27027: PUSH
27028: FOR_IN
27029: IFFALSE 27117
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27031: LD_VAR 0 4
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: LD_VAR 0 4
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: PPUSH
27049: CALL_OW 458
27053: NOT
27054: IFFALSE 27058
// continue ;
27056: GO 27028
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27058: LD_VAR 0 4
27062: PUSH
27063: LD_INT 1
27065: ARRAY
27066: PPUSH
27067: LD_VAR 0 4
27071: PUSH
27072: LD_INT 2
27074: ARRAY
27075: PPUSH
27076: CALL_OW 428
27080: PUSH
27081: LD_VAR 0 5
27085: IN
27086: IFFALSE 27115
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27088: LD_VAR 0 4
27092: PUSH
27093: LD_INT 1
27095: ARRAY
27096: PPUSH
27097: LD_VAR 0 4
27101: PUSH
27102: LD_INT 2
27104: ARRAY
27105: PPUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 456
// end ;
27115: GO 27028
27117: POP
27118: POP
// end ;
27119: LD_VAR 0 3
27123: RET
// export function Count ( array ) ; var i ; begin
27124: LD_INT 0
27126: PPUSH
27127: PPUSH
// result := 0 ;
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: LD_INT 0
27135: ST_TO_ADDR
// for i in array do
27136: LD_ADDR_VAR 0 3
27140: PUSH
27141: LD_VAR 0 1
27145: PUSH
27146: FOR_IN
27147: IFFALSE 27171
// if i then
27149: LD_VAR 0 3
27153: IFFALSE 27169
// result := result + 1 ;
27155: LD_ADDR_VAR 0 2
27159: PUSH
27160: LD_VAR 0 2
27164: PUSH
27165: LD_INT 1
27167: PLUS
27168: ST_TO_ADDR
27169: GO 27146
27171: POP
27172: POP
// end ;
27173: LD_VAR 0 2
27177: RET
// export function IsEmpty ( building ) ; begin
27178: LD_INT 0
27180: PPUSH
// if not building then
27181: LD_VAR 0 1
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27233
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27190: LD_ADDR_VAR 0 2
27194: PUSH
27195: LD_VAR 0 1
27199: PUSH
27200: LD_INT 22
27202: PUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 255
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 58
27219: PUSH
27220: EMPTY
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PPUSH
27227: CALL_OW 69
27231: IN
27232: ST_TO_ADDR
// end ;
27233: LD_VAR 0 2
27237: RET
// export function IsNotFull ( building ) ; begin
27238: LD_INT 0
27240: PPUSH
// if not building then
27241: LD_VAR 0 1
27245: NOT
27246: IFFALSE 27250
// exit ;
27248: GO 27269
// result := UnitsInside ( building ) < 6 ;
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 313
27264: PUSH
27265: LD_INT 6
27267: LESS
27268: ST_TO_ADDR
// end ;
27269: LD_VAR 0 2
27273: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
27278: PPUSH
27279: PPUSH
// tmp := [ ] ;
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: EMPTY
27286: ST_TO_ADDR
// list := [ ] ;
27287: LD_ADDR_VAR 0 5
27291: PUSH
27292: EMPTY
27293: ST_TO_ADDR
// for i = 16 to 25 do
27294: LD_ADDR_VAR 0 4
27298: PUSH
27299: DOUBLE
27300: LD_INT 16
27302: DEC
27303: ST_TO_ADDR
27304: LD_INT 25
27306: PUSH
27307: FOR_TO
27308: IFFALSE 27381
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: LD_VAR 0 3
27319: PUSH
27320: LD_INT 22
27322: PUSH
27323: LD_VAR 0 1
27327: PPUSH
27328: CALL_OW 255
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 91
27339: PUSH
27340: LD_VAR 0 1
27344: PUSH
27345: LD_INT 6
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 30
27355: PUSH
27356: LD_VAR 0 4
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ADD
27378: ST_TO_ADDR
27379: GO 27307
27381: POP
27382: POP
// for i = 1 to tmp do
27383: LD_ADDR_VAR 0 4
27387: PUSH
27388: DOUBLE
27389: LD_INT 1
27391: DEC
27392: ST_TO_ADDR
27393: LD_VAR 0 3
27397: PUSH
27398: FOR_TO
27399: IFFALSE 27487
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27401: LD_ADDR_VAR 0 5
27405: PUSH
27406: LD_VAR 0 5
27410: PUSH
27411: LD_VAR 0 3
27415: PUSH
27416: LD_VAR 0 4
27420: ARRAY
27421: PPUSH
27422: CALL_OW 266
27426: PUSH
27427: LD_VAR 0 3
27431: PUSH
27432: LD_VAR 0 4
27436: ARRAY
27437: PPUSH
27438: CALL_OW 250
27442: PUSH
27443: LD_VAR 0 3
27447: PUSH
27448: LD_VAR 0 4
27452: ARRAY
27453: PPUSH
27454: CALL_OW 251
27458: PUSH
27459: LD_VAR 0 3
27463: PUSH
27464: LD_VAR 0 4
27468: ARRAY
27469: PPUSH
27470: CALL_OW 254
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: ADD
27484: ST_TO_ADDR
27485: GO 27398
27487: POP
27488: POP
// result := list ;
27489: LD_ADDR_VAR 0 2
27493: PUSH
27494: LD_VAR 0 5
27498: ST_TO_ADDR
// end ;
27499: LD_VAR 0 2
27503: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27504: LD_INT 0
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
27512: PPUSH
// if not factory then
27513: LD_VAR 0 1
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 28115
// if control = control_apeman then
27522: LD_VAR 0 4
27526: PUSH
27527: LD_INT 5
27529: EQUAL
27530: IFFALSE 27639
// begin tmp := UnitsInside ( factory ) ;
27532: LD_ADDR_VAR 0 8
27536: PUSH
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL_OW 313
27546: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27547: LD_VAR 0 8
27551: PPUSH
27552: LD_INT 25
27554: PUSH
27555: LD_INT 12
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PPUSH
27562: CALL_OW 72
27566: NOT
27567: IFFALSE 27577
// control := control_manual ;
27569: LD_ADDR_VAR 0 4
27573: PUSH
27574: LD_INT 1
27576: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27577: LD_ADDR_VAR 0 8
27581: PUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL 27274 0 1
27591: ST_TO_ADDR
// if tmp then
27592: LD_VAR 0 8
27596: IFFALSE 27639
// begin for i in tmp do
27598: LD_ADDR_VAR 0 7
27602: PUSH
27603: LD_VAR 0 8
27607: PUSH
27608: FOR_IN
27609: IFFALSE 27637
// if i [ 1 ] = b_ext_radio then
27611: LD_VAR 0 7
27615: PUSH
27616: LD_INT 1
27618: ARRAY
27619: PUSH
27620: LD_INT 22
27622: EQUAL
27623: IFFALSE 27635
// begin control := control_remote ;
27625: LD_ADDR_VAR 0 4
27629: PUSH
27630: LD_INT 2
27632: ST_TO_ADDR
// break ;
27633: GO 27637
// end ;
27635: GO 27608
27637: POP
27638: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27639: LD_VAR 0 1
27643: PPUSH
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_VAR 0 3
27653: PPUSH
27654: LD_VAR 0 4
27658: PPUSH
27659: LD_VAR 0 5
27663: PPUSH
27664: CALL_OW 448
27668: IFFALSE 27703
// begin result := [ chassis , engine , control , weapon ] ;
27670: LD_ADDR_VAR 0 6
27674: PUSH
27675: LD_VAR 0 2
27679: PUSH
27680: LD_VAR 0 3
27684: PUSH
27685: LD_VAR 0 4
27689: PUSH
27690: LD_VAR 0 5
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
// exit ;
27701: GO 28115
// end ; _chassis := AvailableChassisList ( factory ) ;
27703: LD_ADDR_VAR 0 9
27707: PUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 475
27717: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27718: LD_ADDR_VAR 0 11
27722: PUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 476
27732: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27733: LD_ADDR_VAR 0 12
27737: PUSH
27738: LD_VAR 0 1
27742: PPUSH
27743: CALL_OW 477
27747: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27748: LD_ADDR_VAR 0 10
27752: PUSH
27753: LD_VAR 0 1
27757: PPUSH
27758: CALL_OW 478
27762: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27763: LD_VAR 0 9
27767: NOT
27768: PUSH
27769: LD_VAR 0 11
27773: NOT
27774: OR
27775: PUSH
27776: LD_VAR 0 12
27780: NOT
27781: OR
27782: PUSH
27783: LD_VAR 0 10
27787: NOT
27788: OR
27789: IFFALSE 27824
// begin result := [ chassis , engine , control , weapon ] ;
27791: LD_ADDR_VAR 0 6
27795: PUSH
27796: LD_VAR 0 2
27800: PUSH
27801: LD_VAR 0 3
27805: PUSH
27806: LD_VAR 0 4
27810: PUSH
27811: LD_VAR 0 5
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
// exit ;
27822: GO 28115
// end ; if not chassis in _chassis then
27824: LD_VAR 0 2
27828: PUSH
27829: LD_VAR 0 9
27833: IN
27834: NOT
27835: IFFALSE 27861
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27837: LD_ADDR_VAR 0 2
27841: PUSH
27842: LD_VAR 0 9
27846: PUSH
27847: LD_INT 1
27849: PPUSH
27850: LD_VAR 0 9
27854: PPUSH
27855: CALL_OW 12
27859: ARRAY
27860: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_VAR 0 3
27870: PPUSH
27871: CALL 28120 0 2
27875: NOT
27876: IFFALSE 27935
// repeat engine := _engine [ 1 ] ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_VAR 0 11
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27892: LD_ADDR_VAR 0 11
27896: PUSH
27897: LD_VAR 0 11
27901: PPUSH
27902: LD_INT 1
27904: PPUSH
27905: CALL_OW 3
27909: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27910: LD_VAR 0 2
27914: PPUSH
27915: LD_VAR 0 3
27919: PPUSH
27920: CALL 28120 0 2
27924: PUSH
27925: LD_VAR 0 11
27929: PUSH
27930: EMPTY
27931: EQUAL
27932: OR
27933: IFFALSE 27878
// if not control in _control then
27935: LD_VAR 0 4
27939: PUSH
27940: LD_VAR 0 12
27944: IN
27945: NOT
27946: IFFALSE 27972
// control := _control [ rand ( 1 , _control ) ] ;
27948: LD_ADDR_VAR 0 4
27952: PUSH
27953: LD_VAR 0 12
27957: PUSH
27958: LD_INT 1
27960: PPUSH
27961: LD_VAR 0 12
27965: PPUSH
27966: CALL_OW 12
27970: ARRAY
27971: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 5
27981: PPUSH
27982: CALL 28340 0 2
27986: NOT
27987: IFFALSE 28046
// repeat weapon := _weapon [ 1 ] ;
27989: LD_ADDR_VAR 0 5
27993: PUSH
27994: LD_VAR 0 10
27998: PUSH
27999: LD_INT 1
28001: ARRAY
28002: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28003: LD_ADDR_VAR 0 10
28007: PUSH
28008: LD_VAR 0 10
28012: PPUSH
28013: LD_INT 1
28015: PPUSH
28016: CALL_OW 3
28020: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28021: LD_VAR 0 2
28025: PPUSH
28026: LD_VAR 0 5
28030: PPUSH
28031: CALL 28340 0 2
28035: PUSH
28036: LD_VAR 0 10
28040: PUSH
28041: EMPTY
28042: EQUAL
28043: OR
28044: IFFALSE 27989
// result := [ ] ;
28046: LD_ADDR_VAR 0 6
28050: PUSH
28051: EMPTY
28052: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28053: LD_VAR 0 1
28057: PPUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_VAR 0 3
28067: PPUSH
28068: LD_VAR 0 4
28072: PPUSH
28073: LD_VAR 0 5
28077: PPUSH
28078: CALL_OW 448
28082: IFFALSE 28115
// result := [ chassis , engine , control , weapon ] ;
28084: LD_ADDR_VAR 0 6
28088: PUSH
28089: LD_VAR 0 2
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 4
28103: PUSH
28104: LD_VAR 0 5
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// end ;
28115: LD_VAR 0 6
28119: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28120: LD_INT 0
28122: PPUSH
// if not chassis or not engine then
28123: LD_VAR 0 1
28127: NOT
28128: PUSH
28129: LD_VAR 0 2
28133: NOT
28134: OR
28135: IFFALSE 28139
// exit ;
28137: GO 28335
// case engine of engine_solar :
28139: LD_VAR 0 2
28143: PUSH
28144: LD_INT 2
28146: DOUBLE
28147: EQUAL
28148: IFTRUE 28152
28150: GO 28190
28152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: LD_INT 11
28160: PUSH
28161: LD_INT 12
28163: PUSH
28164: LD_INT 13
28166: PUSH
28167: LD_INT 14
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 3
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
28188: GO 28319
28190: LD_INT 1
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28260
28198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28199: LD_ADDR_VAR 0 3
28203: PUSH
28204: LD_INT 11
28206: PUSH
28207: LD_INT 12
28209: PUSH
28210: LD_INT 13
28212: PUSH
28213: LD_INT 14
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 3
28224: PUSH
28225: LD_INT 4
28227: PUSH
28228: LD_INT 5
28230: PUSH
28231: LD_INT 21
28233: PUSH
28234: LD_INT 23
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_INT 24
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: ST_TO_ADDR
28258: GO 28319
28260: LD_INT 3
28262: DOUBLE
28263: EQUAL
28264: IFTRUE 28268
28266: GO 28318
28268: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28269: LD_ADDR_VAR 0 3
28273: PUSH
28274: LD_INT 13
28276: PUSH
28277: LD_INT 14
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 4
28288: PUSH
28289: LD_INT 5
28291: PUSH
28292: LD_INT 21
28294: PUSH
28295: LD_INT 22
28297: PUSH
28298: LD_INT 23
28300: PUSH
28301: LD_INT 24
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
28316: GO 28319
28318: POP
// result := ( chassis in result ) ;
28319: LD_ADDR_VAR 0 3
28323: PUSH
28324: LD_VAR 0 1
28328: PUSH
28329: LD_VAR 0 3
28333: IN
28334: ST_TO_ADDR
// end ;
28335: LD_VAR 0 3
28339: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28340: LD_INT 0
28342: PPUSH
// if not chassis or not weapon then
28343: LD_VAR 0 1
28347: NOT
28348: PUSH
28349: LD_VAR 0 2
28353: NOT
28354: OR
28355: IFFALSE 28359
// exit ;
28357: GO 29385
// case weapon of us_machine_gun :
28359: LD_VAR 0 2
28363: PUSH
28364: LD_INT 2
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28372
28370: GO 28402
28372: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 4
28389: PUSH
28390: LD_INT 5
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
28400: GO 29369
28402: LD_INT 3
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28440
28410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 4
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
28438: GO 29369
28440: LD_INT 11
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28478
28448: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: LD_INT 5
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
28476: GO 29369
28478: LD_INT 4
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28512
28486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28487: LD_ADDR_VAR 0 3
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
28510: GO 29369
28512: LD_INT 5
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28546
28520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: LD_INT 4
28534: PUSH
28535: LD_INT 5
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
28544: GO 29369
28546: LD_INT 9
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28580
28554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: LD_INT 3
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: LD_INT 5
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
28578: GO 29369
28580: LD_INT 7
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28614
28588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28589: LD_ADDR_VAR 0 3
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: LD_INT 4
28602: PUSH
28603: LD_INT 5
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
28612: GO 29369
28614: LD_INT 12
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28648
28622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 3
28633: PUSH
28634: LD_INT 4
28636: PUSH
28637: LD_INT 5
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
28646: GO 29369
28648: LD_INT 13
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28682
28656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: LD_INT 3
28667: PUSH
28668: LD_INT 4
28670: PUSH
28671: LD_INT 5
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: ST_TO_ADDR
28680: GO 29369
28682: LD_INT 14
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28690
28688: GO 28708
28690: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_INT 4
28698: PUSH
28699: LD_INT 5
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: ST_TO_ADDR
28706: GO 29369
28708: LD_INT 6
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28734
28716: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 4
28724: PUSH
28725: LD_INT 5
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 29369
28734: LD_INT 10
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28760
28742: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_INT 4
28750: PUSH
28751: LD_INT 5
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: ST_TO_ADDR
28758: GO 29369
28760: LD_INT 22
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28794
28768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_INT 11
28776: PUSH
28777: LD_INT 12
28779: PUSH
28780: LD_INT 13
28782: PUSH
28783: LD_INT 14
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: ST_TO_ADDR
28792: GO 29369
28794: LD_INT 23
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28828
28802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28803: LD_ADDR_VAR 0 3
28807: PUSH
28808: LD_INT 11
28810: PUSH
28811: LD_INT 12
28813: PUSH
28814: LD_INT 13
28816: PUSH
28817: LD_INT 14
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
28826: GO 29369
28828: LD_INT 24
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28862
28836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28837: LD_ADDR_VAR 0 3
28841: PUSH
28842: LD_INT 11
28844: PUSH
28845: LD_INT 12
28847: PUSH
28848: LD_INT 13
28850: PUSH
28851: LD_INT 14
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 29369
28862: LD_INT 30
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28896
28870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28871: LD_ADDR_VAR 0 3
28875: PUSH
28876: LD_INT 11
28878: PUSH
28879: LD_INT 12
28881: PUSH
28882: LD_INT 13
28884: PUSH
28885: LD_INT 14
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
28894: GO 29369
28896: LD_INT 25
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28922
28904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_INT 13
28912: PUSH
28913: LD_INT 14
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: ST_TO_ADDR
28920: GO 29369
28922: LD_INT 27
28924: DOUBLE
28925: EQUAL
28926: IFTRUE 28930
28928: GO 28948
28930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28931: LD_ADDR_VAR 0 3
28935: PUSH
28936: LD_INT 13
28938: PUSH
28939: LD_INT 14
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: ST_TO_ADDR
28946: GO 29369
28948: LD_INT 28
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 28974
28956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28957: LD_ADDR_VAR 0 3
28961: PUSH
28962: LD_INT 13
28964: PUSH
28965: LD_INT 14
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: ST_TO_ADDR
28972: GO 29369
28974: LD_INT 29
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 29000
28982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_INT 13
28990: PUSH
28991: LD_INT 14
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: ST_TO_ADDR
28998: GO 29369
29000: LD_INT 31
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29026
29008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: LD_INT 13
29016: PUSH
29017: LD_INT 14
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: ST_TO_ADDR
29024: GO 29369
29026: LD_INT 26
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29052
29034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29035: LD_ADDR_VAR 0 3
29039: PUSH
29040: LD_INT 13
29042: PUSH
29043: LD_INT 14
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: ST_TO_ADDR
29050: GO 29369
29052: LD_INT 42
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29086
29060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 22
29071: PUSH
29072: LD_INT 23
29074: PUSH
29075: LD_INT 24
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29369
29086: LD_INT 43
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29120
29094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29095: LD_ADDR_VAR 0 3
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_INT 23
29108: PUSH
29109: LD_INT 24
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
29118: GO 29369
29120: LD_INT 44
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29154
29128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_INT 23
29142: PUSH
29143: LD_INT 24
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
29152: GO 29369
29154: LD_INT 45
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 29188
29162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29163: LD_ADDR_VAR 0 3
29167: PUSH
29168: LD_INT 21
29170: PUSH
29171: LD_INT 22
29173: PUSH
29174: LD_INT 23
29176: PUSH
29177: LD_INT 24
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
29186: GO 29369
29188: LD_INT 49
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29222
29196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 22
29207: PUSH
29208: LD_INT 23
29210: PUSH
29211: LD_INT 24
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 29369
29222: LD_INT 51
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29256
29230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 21
29238: PUSH
29239: LD_INT 22
29241: PUSH
29242: LD_INT 23
29244: PUSH
29245: LD_INT 24
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
29254: GO 29369
29256: LD_INT 52
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29290
29264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 21
29272: PUSH
29273: LD_INT 22
29275: PUSH
29276: LD_INT 23
29278: PUSH
29279: LD_INT 24
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
29288: GO 29369
29290: LD_INT 53
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29316
29298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 23
29306: PUSH
29307: LD_INT 24
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: ST_TO_ADDR
29314: GO 29369
29316: LD_INT 46
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29342
29324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29325: LD_ADDR_VAR 0 3
29329: PUSH
29330: LD_INT 23
29332: PUSH
29333: LD_INT 24
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: ST_TO_ADDR
29340: GO 29369
29342: LD_INT 47
29344: DOUBLE
29345: EQUAL
29346: IFTRUE 29350
29348: GO 29368
29350: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_INT 23
29358: PUSH
29359: LD_INT 24
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: ST_TO_ADDR
29366: GO 29369
29368: POP
// result := ( chassis in result ) ;
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_VAR 0 3
29383: IN
29384: ST_TO_ADDR
// end ;
29385: LD_VAR 0 3
29389: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
// result := array ;
29399: LD_ADDR_VAR 0 5
29403: PUSH
29404: LD_VAR 0 1
29408: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29409: LD_VAR 0 1
29413: NOT
29414: PUSH
29415: LD_VAR 0 2
29419: NOT
29420: OR
29421: PUSH
29422: LD_VAR 0 3
29426: NOT
29427: OR
29428: PUSH
29429: LD_VAR 0 2
29433: PUSH
29434: LD_VAR 0 1
29438: GREATER
29439: OR
29440: PUSH
29441: LD_VAR 0 3
29445: PUSH
29446: LD_VAR 0 1
29450: GREATER
29451: OR
29452: IFFALSE 29456
// exit ;
29454: GO 29752
// if direction then
29456: LD_VAR 0 4
29460: IFFALSE 29524
// begin d := 1 ;
29462: LD_ADDR_VAR 0 9
29466: PUSH
29467: LD_INT 1
29469: ST_TO_ADDR
// if i_from > i_to then
29470: LD_VAR 0 2
29474: PUSH
29475: LD_VAR 0 3
29479: GREATER
29480: IFFALSE 29506
// length := ( array - i_from ) + i_to else
29482: LD_ADDR_VAR 0 11
29486: PUSH
29487: LD_VAR 0 1
29491: PUSH
29492: LD_VAR 0 2
29496: MINUS
29497: PUSH
29498: LD_VAR 0 3
29502: PLUS
29503: ST_TO_ADDR
29504: GO 29522
// length := i_to - i_from ;
29506: LD_ADDR_VAR 0 11
29510: PUSH
29511: LD_VAR 0 3
29515: PUSH
29516: LD_VAR 0 2
29520: MINUS
29521: ST_TO_ADDR
// end else
29522: GO 29585
// begin d := - 1 ;
29524: LD_ADDR_VAR 0 9
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: ST_TO_ADDR
// if i_from > i_to then
29533: LD_VAR 0 2
29537: PUSH
29538: LD_VAR 0 3
29542: GREATER
29543: IFFALSE 29563
// length := i_from - i_to else
29545: LD_ADDR_VAR 0 11
29549: PUSH
29550: LD_VAR 0 2
29554: PUSH
29555: LD_VAR 0 3
29559: MINUS
29560: ST_TO_ADDR
29561: GO 29585
// length := ( array - i_to ) + i_from ;
29563: LD_ADDR_VAR 0 11
29567: PUSH
29568: LD_VAR 0 1
29572: PUSH
29573: LD_VAR 0 3
29577: MINUS
29578: PUSH
29579: LD_VAR 0 2
29583: PLUS
29584: ST_TO_ADDR
// end ; if not length then
29585: LD_VAR 0 11
29589: NOT
29590: IFFALSE 29594
// exit ;
29592: GO 29752
// tmp := array ;
29594: LD_ADDR_VAR 0 10
29598: PUSH
29599: LD_VAR 0 1
29603: ST_TO_ADDR
// for i = 1 to length do
29604: LD_ADDR_VAR 0 6
29608: PUSH
29609: DOUBLE
29610: LD_INT 1
29612: DEC
29613: ST_TO_ADDR
29614: LD_VAR 0 11
29618: PUSH
29619: FOR_TO
29620: IFFALSE 29740
// begin for j = 1 to array do
29622: LD_ADDR_VAR 0 7
29626: PUSH
29627: DOUBLE
29628: LD_INT 1
29630: DEC
29631: ST_TO_ADDR
29632: LD_VAR 0 1
29636: PUSH
29637: FOR_TO
29638: IFFALSE 29726
// begin k := j + d ;
29640: LD_ADDR_VAR 0 8
29644: PUSH
29645: LD_VAR 0 7
29649: PUSH
29650: LD_VAR 0 9
29654: PLUS
29655: ST_TO_ADDR
// if k > array then
29656: LD_VAR 0 8
29660: PUSH
29661: LD_VAR 0 1
29665: GREATER
29666: IFFALSE 29676
// k := 1 ;
29668: LD_ADDR_VAR 0 8
29672: PUSH
29673: LD_INT 1
29675: ST_TO_ADDR
// if not k then
29676: LD_VAR 0 8
29680: NOT
29681: IFFALSE 29693
// k := array ;
29683: LD_ADDR_VAR 0 8
29687: PUSH
29688: LD_VAR 0 1
29692: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29693: LD_ADDR_VAR 0 10
29697: PUSH
29698: LD_VAR 0 10
29702: PPUSH
29703: LD_VAR 0 8
29707: PPUSH
29708: LD_VAR 0 1
29712: PUSH
29713: LD_VAR 0 7
29717: ARRAY
29718: PPUSH
29719: CALL_OW 1
29723: ST_TO_ADDR
// end ;
29724: GO 29637
29726: POP
29727: POP
// array := tmp ;
29728: LD_ADDR_VAR 0 1
29732: PUSH
29733: LD_VAR 0 10
29737: ST_TO_ADDR
// end ;
29738: GO 29619
29740: POP
29741: POP
// result := array ;
29742: LD_ADDR_VAR 0 5
29746: PUSH
29747: LD_VAR 0 1
29751: ST_TO_ADDR
// end ;
29752: LD_VAR 0 5
29756: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
// result := 0 ;
29761: LD_ADDR_VAR 0 3
29765: PUSH
29766: LD_INT 0
29768: ST_TO_ADDR
// if not array or not value in array then
29769: LD_VAR 0 1
29773: NOT
29774: PUSH
29775: LD_VAR 0 2
29779: PUSH
29780: LD_VAR 0 1
29784: IN
29785: NOT
29786: OR
29787: IFFALSE 29791
// exit ;
29789: GO 29845
// for i = 1 to array do
29791: LD_ADDR_VAR 0 4
29795: PUSH
29796: DOUBLE
29797: LD_INT 1
29799: DEC
29800: ST_TO_ADDR
29801: LD_VAR 0 1
29805: PUSH
29806: FOR_TO
29807: IFFALSE 29843
// if value = array [ i ] then
29809: LD_VAR 0 2
29813: PUSH
29814: LD_VAR 0 1
29818: PUSH
29819: LD_VAR 0 4
29823: ARRAY
29824: EQUAL
29825: IFFALSE 29841
// begin result := i ;
29827: LD_ADDR_VAR 0 3
29831: PUSH
29832: LD_VAR 0 4
29836: ST_TO_ADDR
// exit ;
29837: POP
29838: POP
29839: GO 29845
// end ;
29841: GO 29806
29843: POP
29844: POP
// end ;
29845: LD_VAR 0 3
29849: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29850: LD_INT 0
29852: PPUSH
// vc_chassis := chassis ;
29853: LD_ADDR_OWVAR 37
29857: PUSH
29858: LD_VAR 0 1
29862: ST_TO_ADDR
// vc_engine := engine ;
29863: LD_ADDR_OWVAR 39
29867: PUSH
29868: LD_VAR 0 2
29872: ST_TO_ADDR
// vc_control := control ;
29873: LD_ADDR_OWVAR 38
29877: PUSH
29878: LD_VAR 0 3
29882: ST_TO_ADDR
// vc_weapon := weapon ;
29883: LD_ADDR_OWVAR 40
29887: PUSH
29888: LD_VAR 0 4
29892: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29893: LD_ADDR_OWVAR 41
29897: PUSH
29898: LD_VAR 0 5
29902: ST_TO_ADDR
// end ;
29903: LD_VAR 0 6
29907: RET
// export function WantPlant ( unit ) ; var task ; begin
29908: LD_INT 0
29910: PPUSH
29911: PPUSH
// result := false ;
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_INT 0
29919: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 437
29934: ST_TO_ADDR
// if task then
29935: LD_VAR 0 3
29939: IFFALSE 29967
// if task [ 1 ] [ 1 ] = p then
29941: LD_VAR 0 3
29945: PUSH
29946: LD_INT 1
29948: ARRAY
29949: PUSH
29950: LD_INT 1
29952: ARRAY
29953: PUSH
29954: LD_STRING p
29956: EQUAL
29957: IFFALSE 29967
// result := true ;
29959: LD_ADDR_VAR 0 2
29963: PUSH
29964: LD_INT 1
29966: ST_TO_ADDR
// end ;
29967: LD_VAR 0 2
29971: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29972: LD_INT 0
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
// if pos < 1 then
29978: LD_VAR 0 2
29982: PUSH
29983: LD_INT 1
29985: LESS
29986: IFFALSE 29990
// exit ;
29988: GO 30293
// if pos = 1 then
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: EQUAL
29998: IFFALSE 30031
// result := Replace ( arr , pos [ 1 ] , value ) else
30000: LD_ADDR_VAR 0 4
30004: PUSH
30005: LD_VAR 0 1
30009: PPUSH
30010: LD_VAR 0 2
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: LD_VAR 0 3
30023: PPUSH
30024: CALL_OW 1
30028: ST_TO_ADDR
30029: GO 30293
// begin tmp := arr ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 1
30040: ST_TO_ADDR
// s_arr := [ tmp ] ;
30041: LD_ADDR_VAR 0 7
30045: PUSH
30046: LD_VAR 0 6
30050: PUSH
30051: EMPTY
30052: LIST
30053: ST_TO_ADDR
// for i = 1 to pos - 1 do
30054: LD_ADDR_VAR 0 5
30058: PUSH
30059: DOUBLE
30060: LD_INT 1
30062: DEC
30063: ST_TO_ADDR
30064: LD_VAR 0 2
30068: PUSH
30069: LD_INT 1
30071: MINUS
30072: PUSH
30073: FOR_TO
30074: IFFALSE 30119
// begin tmp := tmp [ pos [ i ] ] ;
30076: LD_ADDR_VAR 0 6
30080: PUSH
30081: LD_VAR 0 6
30085: PUSH
30086: LD_VAR 0 2
30090: PUSH
30091: LD_VAR 0 5
30095: ARRAY
30096: ARRAY
30097: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: LD_VAR 0 7
30107: PUSH
30108: LD_VAR 0 6
30112: PUSH
30113: EMPTY
30114: LIST
30115: ADD
30116: ST_TO_ADDR
// end ;
30117: GO 30073
30119: POP
30120: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30121: LD_ADDR_VAR 0 6
30125: PUSH
30126: LD_VAR 0 6
30130: PPUSH
30131: LD_VAR 0 2
30135: PUSH
30136: LD_VAR 0 2
30140: ARRAY
30141: PPUSH
30142: LD_VAR 0 3
30146: PPUSH
30147: CALL_OW 1
30151: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30152: LD_ADDR_VAR 0 7
30156: PUSH
30157: LD_VAR 0 7
30161: PPUSH
30162: LD_VAR 0 7
30166: PPUSH
30167: LD_VAR 0 6
30171: PPUSH
30172: CALL_OW 1
30176: ST_TO_ADDR
// for i = s_arr downto 2 do
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: DOUBLE
30183: LD_VAR 0 7
30187: INC
30188: ST_TO_ADDR
30189: LD_INT 2
30191: PUSH
30192: FOR_DOWNTO
30193: IFFALSE 30277
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30195: LD_ADDR_VAR 0 6
30199: PUSH
30200: LD_VAR 0 7
30204: PUSH
30205: LD_VAR 0 5
30209: PUSH
30210: LD_INT 1
30212: MINUS
30213: ARRAY
30214: PPUSH
30215: LD_VAR 0 2
30219: PUSH
30220: LD_VAR 0 5
30224: PUSH
30225: LD_INT 1
30227: MINUS
30228: ARRAY
30229: PPUSH
30230: LD_VAR 0 7
30234: PUSH
30235: LD_VAR 0 5
30239: ARRAY
30240: PPUSH
30241: CALL_OW 1
30245: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30246: LD_ADDR_VAR 0 7
30250: PUSH
30251: LD_VAR 0 7
30255: PPUSH
30256: LD_VAR 0 5
30260: PUSH
30261: LD_INT 1
30263: MINUS
30264: PPUSH
30265: LD_VAR 0 6
30269: PPUSH
30270: CALL_OW 1
30274: ST_TO_ADDR
// end ;
30275: GO 30192
30277: POP
30278: POP
// result := s_arr [ 1 ] ;
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_VAR 0 7
30288: PUSH
30289: LD_INT 1
30291: ARRAY
30292: ST_TO_ADDR
// end ; end ;
30293: LD_VAR 0 4
30297: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
// if not list then
30302: LD_VAR 0 1
30306: NOT
30307: IFFALSE 30311
// exit ;
30309: GO 30402
// i := list [ pos1 ] ;
30311: LD_ADDR_VAR 0 5
30315: PUSH
30316: LD_VAR 0 1
30320: PUSH
30321: LD_VAR 0 2
30325: ARRAY
30326: ST_TO_ADDR
// if not i then
30327: LD_VAR 0 5
30331: NOT
30332: IFFALSE 30336
// exit ;
30334: GO 30402
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: LD_VAR 0 2
30350: PPUSH
30351: LD_VAR 0 1
30355: PUSH
30356: LD_VAR 0 3
30360: ARRAY
30361: PPUSH
30362: CALL_OW 1
30366: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30367: LD_ADDR_VAR 0 1
30371: PUSH
30372: LD_VAR 0 1
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: LD_VAR 0 5
30386: PPUSH
30387: CALL_OW 1
30391: ST_TO_ADDR
// result := list ;
30392: LD_ADDR_VAR 0 4
30396: PUSH
30397: LD_VAR 0 1
30401: ST_TO_ADDR
// end ;
30402: LD_VAR 0 4
30406: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30407: LD_INT 0
30409: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30410: LD_ADDR_VAR 0 5
30414: PUSH
30415: LD_VAR 0 1
30419: PPUSH
30420: CALL_OW 250
30424: PPUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 251
30434: PPUSH
30435: LD_VAR 0 2
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: LD_VAR 0 4
30449: PPUSH
30450: CALL 30460 0 5
30454: ST_TO_ADDR
// end ;
30455: LD_VAR 0 5
30459: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30460: LD_INT 0
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
// if not list then
30466: LD_VAR 0 3
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30863
// result := [ ] ;
30475: LD_ADDR_VAR 0 6
30479: PUSH
30480: EMPTY
30481: ST_TO_ADDR
// for i in list do
30482: LD_ADDR_VAR 0 7
30486: PUSH
30487: LD_VAR 0 3
30491: PUSH
30492: FOR_IN
30493: IFFALSE 30695
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30495: LD_ADDR_VAR 0 9
30499: PUSH
30500: LD_VAR 0 7
30504: PPUSH
30505: LD_VAR 0 1
30509: PPUSH
30510: LD_VAR 0 2
30514: PPUSH
30515: CALL_OW 297
30519: ST_TO_ADDR
// if not result then
30520: LD_VAR 0 6
30524: NOT
30525: IFFALSE 30551
// result := [ [ i , tmp ] ] else
30527: LD_ADDR_VAR 0 6
30531: PUSH
30532: LD_VAR 0 7
30536: PUSH
30537: LD_VAR 0 9
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: ST_TO_ADDR
30549: GO 30693
// begin if result [ result ] [ 2 ] < tmp then
30551: LD_VAR 0 6
30555: PUSH
30556: LD_VAR 0 6
30560: ARRAY
30561: PUSH
30562: LD_INT 2
30564: ARRAY
30565: PUSH
30566: LD_VAR 0 9
30570: LESS
30571: IFFALSE 30613
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30573: LD_ADDR_VAR 0 6
30577: PUSH
30578: LD_VAR 0 6
30582: PPUSH
30583: LD_VAR 0 6
30587: PUSH
30588: LD_INT 1
30590: PLUS
30591: PPUSH
30592: LD_VAR 0 7
30596: PUSH
30597: LD_VAR 0 9
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 2
30610: ST_TO_ADDR
30611: GO 30693
// for j = 1 to result do
30613: LD_ADDR_VAR 0 8
30617: PUSH
30618: DOUBLE
30619: LD_INT 1
30621: DEC
30622: ST_TO_ADDR
30623: LD_VAR 0 6
30627: PUSH
30628: FOR_TO
30629: IFFALSE 30691
// begin if tmp < result [ j ] [ 2 ] then
30631: LD_VAR 0 9
30635: PUSH
30636: LD_VAR 0 6
30640: PUSH
30641: LD_VAR 0 8
30645: ARRAY
30646: PUSH
30647: LD_INT 2
30649: ARRAY
30650: LESS
30651: IFFALSE 30689
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30653: LD_ADDR_VAR 0 6
30657: PUSH
30658: LD_VAR 0 6
30662: PPUSH
30663: LD_VAR 0 8
30667: PPUSH
30668: LD_VAR 0 7
30672: PUSH
30673: LD_VAR 0 9
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PPUSH
30682: CALL_OW 2
30686: ST_TO_ADDR
// break ;
30687: GO 30691
// end ; end ;
30689: GO 30628
30691: POP
30692: POP
// end ; end ;
30693: GO 30492
30695: POP
30696: POP
// if result and not asc then
30697: LD_VAR 0 6
30701: PUSH
30702: LD_VAR 0 4
30706: NOT
30707: AND
30708: IFFALSE 30783
// begin tmp := result ;
30710: LD_ADDR_VAR 0 9
30714: PUSH
30715: LD_VAR 0 6
30719: ST_TO_ADDR
// for i = tmp downto 1 do
30720: LD_ADDR_VAR 0 7
30724: PUSH
30725: DOUBLE
30726: LD_VAR 0 9
30730: INC
30731: ST_TO_ADDR
30732: LD_INT 1
30734: PUSH
30735: FOR_DOWNTO
30736: IFFALSE 30781
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30738: LD_ADDR_VAR 0 6
30742: PUSH
30743: LD_VAR 0 6
30747: PPUSH
30748: LD_VAR 0 9
30752: PUSH
30753: LD_VAR 0 7
30757: MINUS
30758: PUSH
30759: LD_INT 1
30761: PLUS
30762: PPUSH
30763: LD_VAR 0 9
30767: PUSH
30768: LD_VAR 0 7
30772: ARRAY
30773: PPUSH
30774: CALL_OW 1
30778: ST_TO_ADDR
30779: GO 30735
30781: POP
30782: POP
// end ; tmp := [ ] ;
30783: LD_ADDR_VAR 0 9
30787: PUSH
30788: EMPTY
30789: ST_TO_ADDR
// if mode then
30790: LD_VAR 0 5
30794: IFFALSE 30863
// begin for i = 1 to result do
30796: LD_ADDR_VAR 0 7
30800: PUSH
30801: DOUBLE
30802: LD_INT 1
30804: DEC
30805: ST_TO_ADDR
30806: LD_VAR 0 6
30810: PUSH
30811: FOR_TO
30812: IFFALSE 30851
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30814: LD_ADDR_VAR 0 9
30818: PUSH
30819: LD_VAR 0 9
30823: PPUSH
30824: LD_VAR 0 7
30828: PPUSH
30829: LD_VAR 0 6
30833: PUSH
30834: LD_VAR 0 7
30838: ARRAY
30839: PUSH
30840: LD_INT 1
30842: ARRAY
30843: PPUSH
30844: CALL_OW 1
30848: ST_TO_ADDR
30849: GO 30811
30851: POP
30852: POP
// result := tmp ;
30853: LD_ADDR_VAR 0 6
30857: PUSH
30858: LD_VAR 0 9
30862: ST_TO_ADDR
// end ; end ;
30863: LD_VAR 0 6
30867: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30868: LD_INT 0
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30876: LD_ADDR_VAR 0 5
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// if not x or not y then
30898: LD_VAR 0 2
30902: NOT
30903: PUSH
30904: LD_VAR 0 3
30908: NOT
30909: OR
30910: IFFALSE 30914
// exit ;
30912: GO 32560
// if not range then
30914: LD_VAR 0 4
30918: NOT
30919: IFFALSE 30929
// range := 10 ;
30921: LD_ADDR_VAR 0 4
30925: PUSH
30926: LD_INT 10
30928: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30929: LD_ADDR_VAR 0 8
30933: PUSH
30934: LD_INT 81
30936: PUSH
30937: LD_VAR 0 1
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 92
30948: PUSH
30949: LD_VAR 0 2
30953: PUSH
30954: LD_VAR 0 3
30958: PUSH
30959: LD_VAR 0 4
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 21
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: PPUSH
30992: CALL_OW 69
30996: ST_TO_ADDR
// if not tmp then
30997: LD_VAR 0 8
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 32560
// for i in tmp do
31006: LD_ADDR_VAR 0 6
31010: PUSH
31011: LD_VAR 0 8
31015: PUSH
31016: FOR_IN
31017: IFFALSE 32535
// begin points := [ 0 , 0 , 0 ] ;
31019: LD_ADDR_VAR 0 9
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: ST_TO_ADDR
// bpoints := 1 ;
31038: LD_ADDR_VAR 0 10
31042: PUSH
31043: LD_INT 1
31045: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31046: LD_VAR 0 6
31050: PPUSH
31051: CALL_OW 247
31055: PUSH
31056: LD_INT 1
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31642
31064: POP
// begin if GetClass ( i ) = 1 then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 257
31074: PUSH
31075: LD_INT 1
31077: EQUAL
31078: IFFALSE 31099
// points := [ 10 , 5 , 3 ] ;
31080: LD_ADDR_VAR 0 9
31084: PUSH
31085: LD_INT 10
31087: PUSH
31088: LD_INT 5
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31099: LD_VAR 0 6
31103: PPUSH
31104: CALL_OW 257
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: IN
31123: IFFALSE 31144
// points := [ 3 , 2 , 1 ] ;
31125: LD_ADDR_VAR 0 9
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31144: LD_VAR 0 6
31148: PPUSH
31149: CALL_OW 257
31153: PUSH
31154: LD_INT 5
31156: EQUAL
31157: IFFALSE 31178
// points := [ 130 , 5 , 2 ] ;
31159: LD_ADDR_VAR 0 9
31163: PUSH
31164: LD_INT 130
31166: PUSH
31167: LD_INT 5
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31178: LD_VAR 0 6
31182: PPUSH
31183: CALL_OW 257
31187: PUSH
31188: LD_INT 8
31190: EQUAL
31191: IFFALSE 31212
// points := [ 35 , 35 , 30 ] ;
31193: LD_ADDR_VAR 0 9
31197: PUSH
31198: LD_INT 35
31200: PUSH
31201: LD_INT 35
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31212: LD_VAR 0 6
31216: PPUSH
31217: CALL_OW 257
31221: PUSH
31222: LD_INT 9
31224: EQUAL
31225: IFFALSE 31246
// points := [ 20 , 55 , 40 ] ;
31227: LD_ADDR_VAR 0 9
31231: PUSH
31232: LD_INT 20
31234: PUSH
31235: LD_INT 55
31237: PUSH
31238: LD_INT 40
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31246: LD_VAR 0 6
31250: PPUSH
31251: CALL_OW 257
31255: PUSH
31256: LD_INT 12
31258: PUSH
31259: LD_INT 16
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: IN
31266: IFFALSE 31287
// points := [ 5 , 3 , 2 ] ;
31268: LD_ADDR_VAR 0 9
31272: PUSH
31273: LD_INT 5
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31287: LD_VAR 0 6
31291: PPUSH
31292: CALL_OW 257
31296: PUSH
31297: LD_INT 17
31299: EQUAL
31300: IFFALSE 31321
// points := [ 100 , 50 , 75 ] ;
31302: LD_ADDR_VAR 0 9
31306: PUSH
31307: LD_INT 100
31309: PUSH
31310: LD_INT 50
31312: PUSH
31313: LD_INT 75
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31321: LD_VAR 0 6
31325: PPUSH
31326: CALL_OW 257
31330: PUSH
31331: LD_INT 15
31333: EQUAL
31334: IFFALSE 31355
// points := [ 10 , 5 , 3 ] ;
31336: LD_ADDR_VAR 0 9
31340: PUSH
31341: LD_INT 10
31343: PUSH
31344: LD_INT 5
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31355: LD_VAR 0 6
31359: PPUSH
31360: CALL_OW 257
31364: PUSH
31365: LD_INT 14
31367: EQUAL
31368: IFFALSE 31389
// points := [ 10 , 0 , 0 ] ;
31370: LD_ADDR_VAR 0 9
31374: PUSH
31375: LD_INT 10
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31389: LD_VAR 0 6
31393: PPUSH
31394: CALL_OW 257
31398: PUSH
31399: LD_INT 11
31401: EQUAL
31402: IFFALSE 31423
// points := [ 30 , 10 , 5 ] ;
31404: LD_ADDR_VAR 0 9
31408: PUSH
31409: LD_INT 30
31411: PUSH
31412: LD_INT 10
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31423: LD_VAR 0 1
31427: PPUSH
31428: LD_INT 5
31430: PPUSH
31431: CALL_OW 321
31435: PUSH
31436: LD_INT 2
31438: EQUAL
31439: IFFALSE 31456
// bpoints := bpoints * 1.8 ;
31441: LD_ADDR_VAR 0 10
31445: PUSH
31446: LD_VAR 0 10
31450: PUSH
31451: LD_REAL  1.80000000000000E+0000
31454: MUL
31455: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31456: LD_VAR 0 6
31460: PPUSH
31461: CALL_OW 257
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: LD_INT 4
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: IN
31484: PUSH
31485: LD_VAR 0 1
31489: PPUSH
31490: LD_INT 51
31492: PPUSH
31493: CALL_OW 321
31497: PUSH
31498: LD_INT 2
31500: EQUAL
31501: AND
31502: IFFALSE 31519
// bpoints := bpoints * 1.2 ;
31504: LD_ADDR_VAR 0 10
31508: PUSH
31509: LD_VAR 0 10
31513: PUSH
31514: LD_REAL  1.20000000000000E+0000
31517: MUL
31518: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31519: LD_VAR 0 6
31523: PPUSH
31524: CALL_OW 257
31528: PUSH
31529: LD_INT 5
31531: PUSH
31532: LD_INT 7
31534: PUSH
31535: LD_INT 9
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: IN
31543: PUSH
31544: LD_VAR 0 1
31548: PPUSH
31549: LD_INT 52
31551: PPUSH
31552: CALL_OW 321
31556: PUSH
31557: LD_INT 2
31559: EQUAL
31560: AND
31561: IFFALSE 31578
// bpoints := bpoints * 1.5 ;
31563: LD_ADDR_VAR 0 10
31567: PUSH
31568: LD_VAR 0 10
31572: PUSH
31573: LD_REAL  1.50000000000000E+0000
31576: MUL
31577: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31578: LD_VAR 0 1
31582: PPUSH
31583: LD_INT 66
31585: PPUSH
31586: CALL_OW 321
31590: PUSH
31591: LD_INT 2
31593: EQUAL
31594: IFFALSE 31611
// bpoints := bpoints * 1.1 ;
31596: LD_ADDR_VAR 0 10
31600: PUSH
31601: LD_VAR 0 10
31605: PUSH
31606: LD_REAL  1.10000000000000E+0000
31609: MUL
31610: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31611: LD_ADDR_VAR 0 10
31615: PUSH
31616: LD_VAR 0 10
31620: PUSH
31621: LD_VAR 0 6
31625: PPUSH
31626: LD_INT 1
31628: PPUSH
31629: CALL_OW 259
31633: PUSH
31634: LD_REAL  1.15000000000000E+0000
31637: MUL
31638: MUL
31639: ST_TO_ADDR
// end ; unit_vehicle :
31640: GO 32464
31642: LD_INT 2
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 32452
31650: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31651: LD_VAR 0 6
31655: PPUSH
31656: CALL_OW 264
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: LD_INT 42
31666: PUSH
31667: LD_INT 24
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: IN
31675: IFFALSE 31696
// points := [ 25 , 5 , 3 ] ;
31677: LD_ADDR_VAR 0 9
31681: PUSH
31682: LD_INT 25
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31696: LD_VAR 0 6
31700: PPUSH
31701: CALL_OW 264
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 43
31711: PUSH
31712: LD_INT 25
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: IN
31720: IFFALSE 31741
// points := [ 40 , 15 , 5 ] ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_INT 40
31729: PUSH
31730: LD_INT 15
31732: PUSH
31733: LD_INT 5
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 264
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 23
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: IN
31761: IFFALSE 31782
// points := [ 7 , 25 , 8 ] ;
31763: LD_ADDR_VAR 0 9
31767: PUSH
31768: LD_INT 7
31770: PUSH
31771: LD_INT 25
31773: PUSH
31774: LD_INT 8
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31782: LD_VAR 0 6
31786: PPUSH
31787: CALL_OW 264
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: LD_INT 27
31797: PUSH
31798: LD_INT 44
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: IN
31806: IFFALSE 31827
// points := [ 14 , 50 , 16 ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_INT 14
31815: PUSH
31816: LD_INT 50
31818: PUSH
31819: LD_INT 16
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31827: LD_VAR 0 6
31831: PPUSH
31832: CALL_OW 264
31836: PUSH
31837: LD_INT 6
31839: PUSH
31840: LD_INT 46
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: IN
31847: IFFALSE 31868
// points := [ 32 , 120 , 70 ] ;
31849: LD_ADDR_VAR 0 9
31853: PUSH
31854: LD_INT 32
31856: PUSH
31857: LD_INT 120
31859: PUSH
31860: LD_INT 70
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31868: LD_VAR 0 6
31872: PPUSH
31873: CALL_OW 264
31877: PUSH
31878: LD_INT 7
31880: PUSH
31881: LD_INT 28
31883: PUSH
31884: LD_INT 45
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: IN
31892: IFFALSE 31913
// points := [ 35 , 20 , 45 ] ;
31894: LD_ADDR_VAR 0 9
31898: PUSH
31899: LD_INT 35
31901: PUSH
31902: LD_INT 20
31904: PUSH
31905: LD_INT 45
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31913: LD_VAR 0 6
31917: PPUSH
31918: CALL_OW 264
31922: PUSH
31923: LD_INT 47
31925: PUSH
31926: EMPTY
31927: LIST
31928: IN
31929: IFFALSE 31950
// points := [ 67 , 45 , 75 ] ;
31931: LD_ADDR_VAR 0 9
31935: PUSH
31936: LD_INT 67
31938: PUSH
31939: LD_INT 45
31941: PUSH
31942: LD_INT 75
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31950: LD_VAR 0 6
31954: PPUSH
31955: CALL_OW 264
31959: PUSH
31960: LD_INT 26
31962: PUSH
31963: EMPTY
31964: LIST
31965: IN
31966: IFFALSE 31987
// points := [ 120 , 30 , 80 ] ;
31968: LD_ADDR_VAR 0 9
31972: PUSH
31973: LD_INT 120
31975: PUSH
31976: LD_INT 30
31978: PUSH
31979: LD_INT 80
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31987: LD_VAR 0 6
31991: PPUSH
31992: CALL_OW 264
31996: PUSH
31997: LD_INT 22
31999: PUSH
32000: EMPTY
32001: LIST
32002: IN
32003: IFFALSE 32024
// points := [ 40 , 1 , 1 ] ;
32005: LD_ADDR_VAR 0 9
32009: PUSH
32010: LD_INT 40
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32024: LD_VAR 0 6
32028: PPUSH
32029: CALL_OW 264
32033: PUSH
32034: LD_INT 29
32036: PUSH
32037: EMPTY
32038: LIST
32039: IN
32040: IFFALSE 32061
// points := [ 70 , 200 , 400 ] ;
32042: LD_ADDR_VAR 0 9
32046: PUSH
32047: LD_INT 70
32049: PUSH
32050: LD_INT 200
32052: PUSH
32053: LD_INT 400
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32061: LD_VAR 0 6
32065: PPUSH
32066: CALL_OW 264
32070: PUSH
32071: LD_INT 14
32073: PUSH
32074: LD_INT 53
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: IN
32081: IFFALSE 32102
// points := [ 40 , 10 , 20 ] ;
32083: LD_ADDR_VAR 0 9
32087: PUSH
32088: LD_INT 40
32090: PUSH
32091: LD_INT 10
32093: PUSH
32094: LD_INT 20
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32102: LD_VAR 0 6
32106: PPUSH
32107: CALL_OW 264
32111: PUSH
32112: LD_INT 9
32114: PUSH
32115: EMPTY
32116: LIST
32117: IN
32118: IFFALSE 32139
// points := [ 5 , 70 , 20 ] ;
32120: LD_ADDR_VAR 0 9
32124: PUSH
32125: LD_INT 5
32127: PUSH
32128: LD_INT 70
32130: PUSH
32131: LD_INT 20
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32139: LD_VAR 0 6
32143: PPUSH
32144: CALL_OW 264
32148: PUSH
32149: LD_INT 10
32151: PUSH
32152: EMPTY
32153: LIST
32154: IN
32155: IFFALSE 32176
// points := [ 35 , 110 , 70 ] ;
32157: LD_ADDR_VAR 0 9
32161: PUSH
32162: LD_INT 35
32164: PUSH
32165: LD_INT 110
32167: PUSH
32168: LD_INT 70
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32176: LD_VAR 0 6
32180: PPUSH
32181: CALL_OW 265
32185: PUSH
32186: LD_INT 25
32188: EQUAL
32189: IFFALSE 32210
// points := [ 80 , 65 , 100 ] ;
32191: LD_ADDR_VAR 0 9
32195: PUSH
32196: LD_INT 80
32198: PUSH
32199: LD_INT 65
32201: PUSH
32202: LD_INT 100
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32210: LD_VAR 0 6
32214: PPUSH
32215: CALL_OW 263
32219: PUSH
32220: LD_INT 1
32222: EQUAL
32223: IFFALSE 32258
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32225: LD_ADDR_VAR 0 10
32229: PUSH
32230: LD_VAR 0 10
32234: PUSH
32235: LD_VAR 0 6
32239: PPUSH
32240: CALL_OW 311
32244: PPUSH
32245: LD_INT 3
32247: PPUSH
32248: CALL_OW 259
32252: PUSH
32253: LD_INT 4
32255: MUL
32256: MUL
32257: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 263
32267: PUSH
32268: LD_INT 2
32270: EQUAL
32271: IFFALSE 32322
// begin j := IsControledBy ( i ) ;
32273: LD_ADDR_VAR 0 7
32277: PUSH
32278: LD_VAR 0 6
32282: PPUSH
32283: CALL_OW 312
32287: ST_TO_ADDR
// if j then
32288: LD_VAR 0 7
32292: IFFALSE 32322
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32294: LD_ADDR_VAR 0 10
32298: PUSH
32299: LD_VAR 0 10
32303: PUSH
32304: LD_VAR 0 7
32308: PPUSH
32309: LD_INT 3
32311: PPUSH
32312: CALL_OW 259
32316: PUSH
32317: LD_INT 3
32319: MUL
32320: MUL
32321: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32322: LD_VAR 0 6
32326: PPUSH
32327: CALL_OW 264
32331: PUSH
32332: LD_INT 5
32334: PUSH
32335: LD_INT 6
32337: PUSH
32338: LD_INT 46
32340: PUSH
32341: LD_INT 44
32343: PUSH
32344: LD_INT 47
32346: PUSH
32347: LD_INT 45
32349: PUSH
32350: LD_INT 28
32352: PUSH
32353: LD_INT 7
32355: PUSH
32356: LD_INT 27
32358: PUSH
32359: LD_INT 29
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: IN
32374: PUSH
32375: LD_VAR 0 1
32379: PPUSH
32380: LD_INT 52
32382: PPUSH
32383: CALL_OW 321
32387: PUSH
32388: LD_INT 2
32390: EQUAL
32391: AND
32392: IFFALSE 32409
// bpoints := bpoints * 1.2 ;
32394: LD_ADDR_VAR 0 10
32398: PUSH
32399: LD_VAR 0 10
32403: PUSH
32404: LD_REAL  1.20000000000000E+0000
32407: MUL
32408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32409: LD_VAR 0 6
32413: PPUSH
32414: CALL_OW 264
32418: PUSH
32419: LD_INT 6
32421: PUSH
32422: LD_INT 46
32424: PUSH
32425: LD_INT 47
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: IN
32433: IFFALSE 32450
// bpoints := bpoints * 1.2 ;
32435: LD_ADDR_VAR 0 10
32439: PUSH
32440: LD_VAR 0 10
32444: PUSH
32445: LD_REAL  1.20000000000000E+0000
32448: MUL
32449: ST_TO_ADDR
// end ; unit_building :
32450: GO 32464
32452: LD_INT 3
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32463
32460: POP
// ; end ;
32461: GO 32464
32463: POP
// for j = 1 to 3 do
32464: LD_ADDR_VAR 0 7
32468: PUSH
32469: DOUBLE
32470: LD_INT 1
32472: DEC
32473: ST_TO_ADDR
32474: LD_INT 3
32476: PUSH
32477: FOR_TO
32478: IFFALSE 32531
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: LD_VAR 0 5
32489: PPUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: LD_VAR 0 5
32499: PUSH
32500: LD_VAR 0 7
32504: ARRAY
32505: PUSH
32506: LD_VAR 0 9
32510: PUSH
32511: LD_VAR 0 7
32515: ARRAY
32516: PUSH
32517: LD_VAR 0 10
32521: MUL
32522: PLUS
32523: PPUSH
32524: CALL_OW 1
32528: ST_TO_ADDR
32529: GO 32477
32531: POP
32532: POP
// end ;
32533: GO 31016
32535: POP
32536: POP
// result := Replace ( result , 4 , tmp ) ;
32537: LD_ADDR_VAR 0 5
32541: PUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: LD_INT 4
32549: PPUSH
32550: LD_VAR 0 8
32554: PPUSH
32555: CALL_OW 1
32559: ST_TO_ADDR
// end ;
32560: LD_VAR 0 5
32564: RET
// export function DangerAtRange ( unit , range ) ; begin
32565: LD_INT 0
32567: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32568: LD_ADDR_VAR 0 3
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 255
32582: PPUSH
32583: LD_VAR 0 1
32587: PPUSH
32588: CALL_OW 250
32592: PPUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 251
32602: PPUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: CALL 30868 0 4
32612: ST_TO_ADDR
// end ;
32613: LD_VAR 0 3
32617: RET
// export function DangerInArea ( side , area ) ; begin
32618: LD_INT 0
32620: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_INT 81
32633: PUSH
32634: LD_VAR 0 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 70
32647: ST_TO_ADDR
// end ;
32648: LD_VAR 0 3
32652: RET
// export function IsExtension ( b ) ; begin
32653: LD_INT 0
32655: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32656: LD_ADDR_VAR 0 2
32660: PUSH
32661: LD_VAR 0 1
32665: PUSH
32666: LD_INT 23
32668: PUSH
32669: LD_INT 20
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 17
32677: PUSH
32678: LD_INT 24
32680: PUSH
32681: LD_INT 21
32683: PUSH
32684: LD_INT 19
32686: PUSH
32687: LD_INT 16
32689: PUSH
32690: LD_INT 25
32692: PUSH
32693: LD_INT 18
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: IN
32708: ST_TO_ADDR
// end ;
32709: LD_VAR 0 2
32713: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32714: LD_INT 0
32716: PPUSH
32717: PPUSH
32718: PPUSH
// result := [ ] ;
32719: LD_ADDR_VAR 0 3
32723: PUSH
32724: EMPTY
32725: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32726: LD_ADDR_VAR 0 4
32730: PUSH
32731: LD_VAR 0 2
32735: PPUSH
32736: LD_INT 21
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PPUSH
32746: CALL_OW 70
32750: ST_TO_ADDR
// if not tmp then
32751: LD_VAR 0 4
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 32818
// for i in tmp do
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_VAR 0 4
32769: PUSH
32770: FOR_IN
32771: IFFALSE 32806
// if GetBase ( i ) <> base then
32773: LD_VAR 0 5
32777: PPUSH
32778: CALL_OW 274
32782: PUSH
32783: LD_VAR 0 1
32787: NONEQUAL
32788: IFFALSE 32804
// ComLinkToBase ( base , i ) ;
32790: LD_VAR 0 1
32794: PPUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: CALL_OW 169
32804: GO 32770
32806: POP
32807: POP
// result := tmp ;
32808: LD_ADDR_VAR 0 3
32812: PUSH
32813: LD_VAR 0 4
32817: ST_TO_ADDR
// end ;
32818: LD_VAR 0 3
32822: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32823: LD_INT 0
32825: PPUSH
32826: PPUSH
// if BuildingStatus ( b ) = bs_build then
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 461
32836: PUSH
32837: LD_INT 1
32839: EQUAL
32840: IFFALSE 32900
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32842: LD_VAR 0 1
32846: PPUSH
32847: LD_STRING h
32849: PUSH
32850: LD_VAR 0 2
32854: PPUSH
32855: CALL_OW 250
32859: PUSH
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 251
32869: PUSH
32870: LD_VAR 0 2
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: PUSH
32893: EMPTY
32894: LIST
32895: PPUSH
32896: CALL_OW 446
// end ;
32900: LD_VAR 0 3
32904: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32905: LD_INT 0
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32913: LD_VAR 0 1
32917: NOT
32918: PUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL_OW 263
32928: PUSH
32929: LD_INT 2
32931: EQUAL
32932: NOT
32933: OR
32934: IFFALSE 32938
// exit ;
32936: GO 33254
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32938: LD_ADDR_VAR 0 6
32942: PUSH
32943: LD_INT 22
32945: PUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 255
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 36
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 34
32975: PUSH
32976: LD_INT 31
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 69
32996: ST_TO_ADDR
// if not tmp then
32997: LD_VAR 0 6
33001: NOT
33002: IFFALSE 33006
// exit ;
33004: GO 33254
// result := [ ] ;
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: EMPTY
33012: ST_TO_ADDR
// for i in tmp do
33013: LD_ADDR_VAR 0 3
33017: PUSH
33018: LD_VAR 0 6
33022: PUSH
33023: FOR_IN
33024: IFFALSE 33095
// begin t := UnitsInside ( i ) ;
33026: LD_ADDR_VAR 0 4
33030: PUSH
33031: LD_VAR 0 3
33035: PPUSH
33036: CALL_OW 313
33040: ST_TO_ADDR
// if t then
33041: LD_VAR 0 4
33045: IFFALSE 33093
// for j in t do
33047: LD_ADDR_VAR 0 7
33051: PUSH
33052: LD_VAR 0 4
33056: PUSH
33057: FOR_IN
33058: IFFALSE 33091
// result := Insert ( result , result + 1 , j ) ;
33060: LD_ADDR_VAR 0 2
33064: PUSH
33065: LD_VAR 0 2
33069: PPUSH
33070: LD_VAR 0 2
33074: PUSH
33075: LD_INT 1
33077: PLUS
33078: PPUSH
33079: LD_VAR 0 7
33083: PPUSH
33084: CALL_OW 2
33088: ST_TO_ADDR
33089: GO 33057
33091: POP
33092: POP
// end ;
33093: GO 33023
33095: POP
33096: POP
// if not result then
33097: LD_VAR 0 2
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33254
// mech := result [ 1 ] ;
33106: LD_ADDR_VAR 0 5
33110: PUSH
33111: LD_VAR 0 2
33115: PUSH
33116: LD_INT 1
33118: ARRAY
33119: ST_TO_ADDR
// if result > 1 then
33120: LD_VAR 0 2
33124: PUSH
33125: LD_INT 1
33127: GREATER
33128: IFFALSE 33240
// for i = 2 to result do
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: DOUBLE
33136: LD_INT 2
33138: DEC
33139: ST_TO_ADDR
33140: LD_VAR 0 2
33144: PUSH
33145: FOR_TO
33146: IFFALSE 33238
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33148: LD_ADDR_VAR 0 4
33152: PUSH
33153: LD_VAR 0 2
33157: PUSH
33158: LD_VAR 0 3
33162: ARRAY
33163: PPUSH
33164: LD_INT 3
33166: PPUSH
33167: CALL_OW 259
33171: PUSH
33172: LD_VAR 0 2
33176: PUSH
33177: LD_VAR 0 3
33181: ARRAY
33182: PPUSH
33183: CALL_OW 432
33187: MINUS
33188: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33189: LD_VAR 0 4
33193: PUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: LD_INT 3
33201: PPUSH
33202: CALL_OW 259
33206: PUSH
33207: LD_VAR 0 5
33211: PPUSH
33212: CALL_OW 432
33216: MINUS
33217: GREATEREQUAL
33218: IFFALSE 33236
// mech := result [ i ] ;
33220: LD_ADDR_VAR 0 5
33224: PUSH
33225: LD_VAR 0 2
33229: PUSH
33230: LD_VAR 0 3
33234: ARRAY
33235: ST_TO_ADDR
// end ;
33236: GO 33145
33238: POP
33239: POP
// ComLinkTo ( vehicle , mech ) ;
33240: LD_VAR 0 1
33244: PPUSH
33245: LD_VAR 0 5
33249: PPUSH
33250: CALL_OW 135
// end ;
33254: LD_VAR 0 2
33258: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33259: LD_INT 0
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
// result := [ ] ;
33274: LD_ADDR_VAR 0 7
33278: PUSH
33279: EMPTY
33280: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33281: LD_VAR 0 1
33285: PPUSH
33286: CALL_OW 266
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: IN
33301: NOT
33302: IFFALSE 33306
// exit ;
33304: GO 34937
// if name then
33306: LD_VAR 0 3
33310: IFFALSE 33326
// SetBName ( base_dep , name ) ;
33312: LD_VAR 0 1
33316: PPUSH
33317: LD_VAR 0 3
33321: PPUSH
33322: CALL_OW 500
// base := GetBase ( base_dep ) ;
33326: LD_ADDR_VAR 0 15
33330: PUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 274
33340: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33341: LD_ADDR_VAR 0 16
33345: PUSH
33346: LD_VAR 0 1
33350: PPUSH
33351: CALL_OW 255
33355: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33356: LD_ADDR_VAR 0 17
33360: PUSH
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 248
33370: ST_TO_ADDR
// if sources then
33371: LD_VAR 0 5
33375: IFFALSE 33422
// for i = 1 to 3 do
33377: LD_ADDR_VAR 0 8
33381: PUSH
33382: DOUBLE
33383: LD_INT 1
33385: DEC
33386: ST_TO_ADDR
33387: LD_INT 3
33389: PUSH
33390: FOR_TO
33391: IFFALSE 33420
// AddResourceType ( base , i , sources [ i ] ) ;
33393: LD_VAR 0 15
33397: PPUSH
33398: LD_VAR 0 8
33402: PPUSH
33403: LD_VAR 0 5
33407: PUSH
33408: LD_VAR 0 8
33412: ARRAY
33413: PPUSH
33414: CALL_OW 276
33418: GO 33390
33420: POP
33421: POP
// buildings := GetBaseBuildings ( base , area ) ;
33422: LD_ADDR_VAR 0 18
33426: PUSH
33427: LD_VAR 0 15
33431: PPUSH
33432: LD_VAR 0 2
33436: PPUSH
33437: CALL 32714 0 2
33441: ST_TO_ADDR
// InitHc ;
33442: CALL_OW 19
// InitUc ;
33446: CALL_OW 18
// uc_side := side ;
33450: LD_ADDR_OWVAR 20
33454: PUSH
33455: LD_VAR 0 16
33459: ST_TO_ADDR
// uc_nation := nation ;
33460: LD_ADDR_OWVAR 21
33464: PUSH
33465: LD_VAR 0 17
33469: ST_TO_ADDR
// if buildings then
33470: LD_VAR 0 18
33474: IFFALSE 34796
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33476: LD_ADDR_VAR 0 19
33480: PUSH
33481: LD_VAR 0 18
33485: PPUSH
33486: LD_INT 2
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 29
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 30
33501: PUSH
33502: LD_INT 30
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: PPUSH
33514: CALL_OW 72
33518: ST_TO_ADDR
// if tmp then
33519: LD_VAR 0 19
33523: IFFALSE 33571
// for i in tmp do
33525: LD_ADDR_VAR 0 8
33529: PUSH
33530: LD_VAR 0 19
33534: PUSH
33535: FOR_IN
33536: IFFALSE 33569
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33538: LD_VAR 0 8
33542: PPUSH
33543: CALL_OW 250
33547: PPUSH
33548: LD_VAR 0 8
33552: PPUSH
33553: CALL_OW 251
33557: PPUSH
33558: LD_VAR 0 16
33562: PPUSH
33563: CALL_OW 441
33567: GO 33535
33569: POP
33570: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33571: LD_VAR 0 18
33575: PPUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 30
33581: PUSH
33582: LD_INT 32
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 30
33591: PUSH
33592: LD_INT 33
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: PPUSH
33604: CALL_OW 72
33608: IFFALSE 33696
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33610: LD_ADDR_VAR 0 8
33614: PUSH
33615: LD_VAR 0 18
33619: PPUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 30
33625: PUSH
33626: LD_INT 32
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 30
33635: PUSH
33636: LD_INT 33
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: PPUSH
33648: CALL_OW 72
33652: PUSH
33653: FOR_IN
33654: IFFALSE 33694
// begin if not GetBWeapon ( i ) then
33656: LD_VAR 0 8
33660: PPUSH
33661: CALL_OW 269
33665: NOT
33666: IFFALSE 33692
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33668: LD_VAR 0 8
33672: PPUSH
33673: LD_VAR 0 8
33677: PPUSH
33678: LD_VAR 0 2
33682: PPUSH
33683: CALL 34942 0 2
33687: PPUSH
33688: CALL_OW 431
// end ;
33692: GO 33653
33694: POP
33695: POP
// end ; for i = 1 to personel do
33696: LD_ADDR_VAR 0 8
33700: PUSH
33701: DOUBLE
33702: LD_INT 1
33704: DEC
33705: ST_TO_ADDR
33706: LD_VAR 0 6
33710: PUSH
33711: FOR_TO
33712: IFFALSE 34776
// begin if i > 4 then
33714: LD_VAR 0 8
33718: PUSH
33719: LD_INT 4
33721: GREATER
33722: IFFALSE 33726
// break ;
33724: GO 34776
// case i of 1 :
33726: LD_VAR 0 8
33730: PUSH
33731: LD_INT 1
33733: DOUBLE
33734: EQUAL
33735: IFTRUE 33739
33737: GO 33819
33739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33740: LD_ADDR_VAR 0 12
33744: PUSH
33745: LD_VAR 0 18
33749: PPUSH
33750: LD_INT 22
33752: PUSH
33753: LD_VAR 0 16
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 58
33764: PUSH
33765: EMPTY
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 30
33773: PUSH
33774: LD_INT 32
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 30
33783: PUSH
33784: LD_INT 4
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 30
33793: PUSH
33794: LD_INT 5
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: PPUSH
33812: CALL_OW 72
33816: ST_TO_ADDR
33817: GO 34041
33819: LD_INT 2
33821: DOUBLE
33822: EQUAL
33823: IFTRUE 33827
33825: GO 33889
33827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33828: LD_ADDR_VAR 0 12
33832: PUSH
33833: LD_VAR 0 18
33837: PPUSH
33838: LD_INT 22
33840: PUSH
33841: LD_VAR 0 16
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 30
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 30
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PPUSH
33882: CALL_OW 72
33886: ST_TO_ADDR
33887: GO 34041
33889: LD_INT 3
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33959
33897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33898: LD_ADDR_VAR 0 12
33902: PUSH
33903: LD_VAR 0 18
33907: PPUSH
33908: LD_INT 22
33910: PUSH
33911: LD_VAR 0 16
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 30
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 30
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 72
33956: ST_TO_ADDR
33957: GO 34041
33959: LD_INT 4
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 34040
33967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33968: LD_ADDR_VAR 0 12
33972: PUSH
33973: LD_VAR 0 18
33977: PPUSH
33978: LD_INT 22
33980: PUSH
33981: LD_VAR 0 16
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: PUSH
33993: LD_INT 30
33995: PUSH
33996: LD_INT 6
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 30
34005: PUSH
34006: LD_INT 7
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 30
34015: PUSH
34016: LD_INT 8
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PPUSH
34033: CALL_OW 72
34037: ST_TO_ADDR
34038: GO 34041
34040: POP
// if i = 1 then
34041: LD_VAR 0 8
34045: PUSH
34046: LD_INT 1
34048: EQUAL
34049: IFFALSE 34160
// begin tmp := [ ] ;
34051: LD_ADDR_VAR 0 19
34055: PUSH
34056: EMPTY
34057: ST_TO_ADDR
// for j in f do
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_VAR 0 12
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34142
// if GetBType ( j ) = b_bunker then
34071: LD_VAR 0 9
34075: PPUSH
34076: CALL_OW 266
34080: PUSH
34081: LD_INT 32
34083: EQUAL
34084: IFFALSE 34111
// tmp := Insert ( tmp , 1 , j ) else
34086: LD_ADDR_VAR 0 19
34090: PUSH
34091: LD_VAR 0 19
34095: PPUSH
34096: LD_INT 1
34098: PPUSH
34099: LD_VAR 0 9
34103: PPUSH
34104: CALL_OW 2
34108: ST_TO_ADDR
34109: GO 34140
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34111: LD_ADDR_VAR 0 19
34115: PUSH
34116: LD_VAR 0 19
34120: PPUSH
34121: LD_VAR 0 19
34125: PUSH
34126: LD_INT 1
34128: PLUS
34129: PPUSH
34130: LD_VAR 0 9
34134: PPUSH
34135: CALL_OW 2
34139: ST_TO_ADDR
34140: GO 34068
34142: POP
34143: POP
// if tmp then
34144: LD_VAR 0 19
34148: IFFALSE 34160
// f := tmp ;
34150: LD_ADDR_VAR 0 12
34154: PUSH
34155: LD_VAR 0 19
34159: ST_TO_ADDR
// end ; x := personel [ i ] ;
34160: LD_ADDR_VAR 0 13
34164: PUSH
34165: LD_VAR 0 6
34169: PUSH
34170: LD_VAR 0 8
34174: ARRAY
34175: ST_TO_ADDR
// if x = - 1 then
34176: LD_VAR 0 13
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: EQUAL
34185: IFFALSE 34394
// begin for j in f do
34187: LD_ADDR_VAR 0 9
34191: PUSH
34192: LD_VAR 0 12
34196: PUSH
34197: FOR_IN
34198: IFFALSE 34390
// repeat InitHc ;
34200: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34204: LD_VAR 0 9
34208: PPUSH
34209: CALL_OW 266
34213: PUSH
34214: LD_INT 5
34216: EQUAL
34217: IFFALSE 34287
// begin if UnitsInside ( j ) < 3 then
34219: LD_VAR 0 9
34223: PPUSH
34224: CALL_OW 313
34228: PUSH
34229: LD_INT 3
34231: LESS
34232: IFFALSE 34268
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34234: LD_INT 0
34236: PPUSH
34237: LD_INT 5
34239: PUSH
34240: LD_INT 8
34242: PUSH
34243: LD_INT 9
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: PUSH
34251: LD_VAR 0 17
34255: ARRAY
34256: PPUSH
34257: LD_VAR 0 4
34261: PPUSH
34262: CALL_OW 380
34266: GO 34285
// PrepareHuman ( false , i , skill ) ;
34268: LD_INT 0
34270: PPUSH
34271: LD_VAR 0 8
34275: PPUSH
34276: LD_VAR 0 4
34280: PPUSH
34281: CALL_OW 380
// end else
34285: GO 34304
// PrepareHuman ( false , i , skill ) ;
34287: LD_INT 0
34289: PPUSH
34290: LD_VAR 0 8
34294: PPUSH
34295: LD_VAR 0 4
34299: PPUSH
34300: CALL_OW 380
// un := CreateHuman ;
34304: LD_ADDR_VAR 0 14
34308: PUSH
34309: CALL_OW 44
34313: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34314: LD_ADDR_VAR 0 7
34318: PUSH
34319: LD_VAR 0 7
34323: PPUSH
34324: LD_INT 1
34326: PPUSH
34327: LD_VAR 0 14
34331: PPUSH
34332: CALL_OW 2
34336: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34337: LD_VAR 0 14
34341: PPUSH
34342: LD_VAR 0 9
34346: PPUSH
34347: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34351: LD_VAR 0 9
34355: PPUSH
34356: CALL_OW 313
34360: PUSH
34361: LD_INT 6
34363: EQUAL
34364: PUSH
34365: LD_VAR 0 9
34369: PPUSH
34370: CALL_OW 266
34374: PUSH
34375: LD_INT 32
34377: PUSH
34378: LD_INT 31
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: IN
34385: OR
34386: IFFALSE 34200
34388: GO 34197
34390: POP
34391: POP
// end else
34392: GO 34774
// for j = 1 to x do
34394: LD_ADDR_VAR 0 9
34398: PUSH
34399: DOUBLE
34400: LD_INT 1
34402: DEC
34403: ST_TO_ADDR
34404: LD_VAR 0 13
34408: PUSH
34409: FOR_TO
34410: IFFALSE 34772
// begin InitHc ;
34412: CALL_OW 19
// if not f then
34416: LD_VAR 0 12
34420: NOT
34421: IFFALSE 34510
// begin PrepareHuman ( false , i , skill ) ;
34423: LD_INT 0
34425: PPUSH
34426: LD_VAR 0 8
34430: PPUSH
34431: LD_VAR 0 4
34435: PPUSH
34436: CALL_OW 380
// un := CreateHuman ;
34440: LD_ADDR_VAR 0 14
34444: PUSH
34445: CALL_OW 44
34449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34450: LD_ADDR_VAR 0 7
34454: PUSH
34455: LD_VAR 0 7
34459: PPUSH
34460: LD_INT 1
34462: PPUSH
34463: LD_VAR 0 14
34467: PPUSH
34468: CALL_OW 2
34472: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34473: LD_VAR 0 14
34477: PPUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 250
34487: PPUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 251
34497: PPUSH
34498: LD_INT 10
34500: PPUSH
34501: LD_INT 0
34503: PPUSH
34504: CALL_OW 50
// continue ;
34508: GO 34409
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34510: LD_VAR 0 12
34514: PUSH
34515: LD_INT 1
34517: ARRAY
34518: PPUSH
34519: CALL_OW 313
34523: PUSH
34524: LD_VAR 0 12
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 266
34537: PUSH
34538: LD_INT 32
34540: PUSH
34541: LD_INT 31
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: IN
34548: AND
34549: PUSH
34550: LD_VAR 0 12
34554: PUSH
34555: LD_INT 1
34557: ARRAY
34558: PPUSH
34559: CALL_OW 313
34563: PUSH
34564: LD_INT 6
34566: EQUAL
34567: OR
34568: IFFALSE 34588
// f := Delete ( f , 1 ) ;
34570: LD_ADDR_VAR 0 12
34574: PUSH
34575: LD_VAR 0 12
34579: PPUSH
34580: LD_INT 1
34582: PPUSH
34583: CALL_OW 3
34587: ST_TO_ADDR
// if not f then
34588: LD_VAR 0 12
34592: NOT
34593: IFFALSE 34611
// begin x := x + 2 ;
34595: LD_ADDR_VAR 0 13
34599: PUSH
34600: LD_VAR 0 13
34604: PUSH
34605: LD_INT 2
34607: PLUS
34608: ST_TO_ADDR
// continue ;
34609: GO 34409
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34611: LD_VAR 0 12
34615: PUSH
34616: LD_INT 1
34618: ARRAY
34619: PPUSH
34620: CALL_OW 266
34624: PUSH
34625: LD_INT 5
34627: EQUAL
34628: IFFALSE 34702
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34630: LD_VAR 0 12
34634: PUSH
34635: LD_INT 1
34637: ARRAY
34638: PPUSH
34639: CALL_OW 313
34643: PUSH
34644: LD_INT 3
34646: LESS
34647: IFFALSE 34683
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34649: LD_INT 0
34651: PPUSH
34652: LD_INT 5
34654: PUSH
34655: LD_INT 8
34657: PUSH
34658: LD_INT 9
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: PUSH
34666: LD_VAR 0 17
34670: ARRAY
34671: PPUSH
34672: LD_VAR 0 4
34676: PPUSH
34677: CALL_OW 380
34681: GO 34700
// PrepareHuman ( false , i , skill ) ;
34683: LD_INT 0
34685: PPUSH
34686: LD_VAR 0 8
34690: PPUSH
34691: LD_VAR 0 4
34695: PPUSH
34696: CALL_OW 380
// end else
34700: GO 34719
// PrepareHuman ( false , i , skill ) ;
34702: LD_INT 0
34704: PPUSH
34705: LD_VAR 0 8
34709: PPUSH
34710: LD_VAR 0 4
34714: PPUSH
34715: CALL_OW 380
// un := CreateHuman ;
34719: LD_ADDR_VAR 0 14
34723: PUSH
34724: CALL_OW 44
34728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34729: LD_ADDR_VAR 0 7
34733: PUSH
34734: LD_VAR 0 7
34738: PPUSH
34739: LD_INT 1
34741: PPUSH
34742: LD_VAR 0 14
34746: PPUSH
34747: CALL_OW 2
34751: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34752: LD_VAR 0 14
34756: PPUSH
34757: LD_VAR 0 12
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PPUSH
34766: CALL_OW 52
// end ;
34770: GO 34409
34772: POP
34773: POP
// end ;
34774: GO 33711
34776: POP
34777: POP
// result := result ^ buildings ;
34778: LD_ADDR_VAR 0 7
34782: PUSH
34783: LD_VAR 0 7
34787: PUSH
34788: LD_VAR 0 18
34792: ADD
34793: ST_TO_ADDR
// end else
34794: GO 34937
// begin for i = 1 to personel do
34796: LD_ADDR_VAR 0 8
34800: PUSH
34801: DOUBLE
34802: LD_INT 1
34804: DEC
34805: ST_TO_ADDR
34806: LD_VAR 0 6
34810: PUSH
34811: FOR_TO
34812: IFFALSE 34935
// begin if i > 4 then
34814: LD_VAR 0 8
34818: PUSH
34819: LD_INT 4
34821: GREATER
34822: IFFALSE 34826
// break ;
34824: GO 34935
// x := personel [ i ] ;
34826: LD_ADDR_VAR 0 13
34830: PUSH
34831: LD_VAR 0 6
34835: PUSH
34836: LD_VAR 0 8
34840: ARRAY
34841: ST_TO_ADDR
// if x = - 1 then
34842: LD_VAR 0 13
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: EQUAL
34851: IFFALSE 34855
// continue ;
34853: GO 34811
// PrepareHuman ( false , i , skill ) ;
34855: LD_INT 0
34857: PPUSH
34858: LD_VAR 0 8
34862: PPUSH
34863: LD_VAR 0 4
34867: PPUSH
34868: CALL_OW 380
// un := CreateHuman ;
34872: LD_ADDR_VAR 0 14
34876: PUSH
34877: CALL_OW 44
34881: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34882: LD_VAR 0 14
34886: PPUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 250
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 251
34906: PPUSH
34907: LD_INT 10
34909: PPUSH
34910: LD_INT 0
34912: PPUSH
34913: CALL_OW 50
// result := result ^ un ;
34917: LD_ADDR_VAR 0 7
34921: PUSH
34922: LD_VAR 0 7
34926: PUSH
34927: LD_VAR 0 14
34931: ADD
34932: ST_TO_ADDR
// end ;
34933: GO 34811
34935: POP
34936: POP
// end ; end ;
34937: LD_VAR 0 7
34941: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34942: LD_INT 0
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
// result := false ;
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 0
34967: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34968: LD_VAR 0 1
34972: NOT
34973: PUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 266
34983: PUSH
34984: LD_INT 32
34986: PUSH
34987: LD_INT 33
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: IN
34994: NOT
34995: OR
34996: IFFALSE 35000
// exit ;
34998: GO 36136
// nat := GetNation ( tower ) ;
35000: LD_ADDR_VAR 0 12
35004: PUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 248
35014: ST_TO_ADDR
// side := GetSide ( tower ) ;
35015: LD_ADDR_VAR 0 16
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 255
35029: ST_TO_ADDR
// x := GetX ( tower ) ;
35030: LD_ADDR_VAR 0 10
35034: PUSH
35035: LD_VAR 0 1
35039: PPUSH
35040: CALL_OW 250
35044: ST_TO_ADDR
// y := GetY ( tower ) ;
35045: LD_ADDR_VAR 0 11
35049: PUSH
35050: LD_VAR 0 1
35054: PPUSH
35055: CALL_OW 251
35059: ST_TO_ADDR
// if not x or not y then
35060: LD_VAR 0 10
35064: NOT
35065: PUSH
35066: LD_VAR 0 11
35070: NOT
35071: OR
35072: IFFALSE 35076
// exit ;
35074: GO 36136
// weapon := 0 ;
35076: LD_ADDR_VAR 0 18
35080: PUSH
35081: LD_INT 0
35083: ST_TO_ADDR
// fac_list := [ ] ;
35084: LD_ADDR_VAR 0 17
35088: PUSH
35089: EMPTY
35090: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35091: LD_ADDR_VAR 0 6
35095: PUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 274
35105: PPUSH
35106: LD_VAR 0 2
35110: PPUSH
35111: CALL 32714 0 2
35115: PPUSH
35116: LD_INT 30
35118: PUSH
35119: LD_INT 3
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 72
35130: ST_TO_ADDR
// if not factories then
35131: LD_VAR 0 6
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 36136
// for i in factories do
35140: LD_ADDR_VAR 0 8
35144: PUSH
35145: LD_VAR 0 6
35149: PUSH
35150: FOR_IN
35151: IFFALSE 35176
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35153: LD_ADDR_VAR 0 17
35157: PUSH
35158: LD_VAR 0 17
35162: PUSH
35163: LD_VAR 0 8
35167: PPUSH
35168: CALL_OW 478
35172: UNION
35173: ST_TO_ADDR
35174: GO 35150
35176: POP
35177: POP
// if not fac_list then
35178: LD_VAR 0 17
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 36136
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: LD_INT 4
35194: PUSH
35195: LD_INT 5
35197: PUSH
35198: LD_INT 9
35200: PUSH
35201: LD_INT 10
35203: PUSH
35204: LD_INT 6
35206: PUSH
35207: LD_INT 7
35209: PUSH
35210: LD_INT 11
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 27
35224: PUSH
35225: LD_INT 28
35227: PUSH
35228: LD_INT 26
35230: PUSH
35231: LD_INT 30
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 43
35242: PUSH
35243: LD_INT 44
35245: PUSH
35246: LD_INT 46
35248: PUSH
35249: LD_INT 45
35251: PUSH
35252: LD_INT 47
35254: PUSH
35255: LD_INT 49
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: LD_VAR 0 12
35275: ARRAY
35276: ST_TO_ADDR
// for i in list do
35277: LD_ADDR_VAR 0 8
35281: PUSH
35282: LD_VAR 0 5
35286: PUSH
35287: FOR_IN
35288: IFFALSE 35321
// if not i in fac_list then
35290: LD_VAR 0 8
35294: PUSH
35295: LD_VAR 0 17
35299: IN
35300: NOT
35301: IFFALSE 35319
// list := list diff i ;
35303: LD_ADDR_VAR 0 5
35307: PUSH
35308: LD_VAR 0 5
35312: PUSH
35313: LD_VAR 0 8
35317: DIFF
35318: ST_TO_ADDR
35319: GO 35287
35321: POP
35322: POP
// if not list then
35323: LD_VAR 0 5
35327: NOT
35328: IFFALSE 35332
// exit ;
35330: GO 36136
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35332: LD_VAR 0 12
35336: PUSH
35337: LD_INT 3
35339: EQUAL
35340: PUSH
35341: LD_INT 49
35343: PUSH
35344: LD_VAR 0 5
35348: IN
35349: AND
35350: PUSH
35351: LD_INT 31
35353: PPUSH
35354: LD_VAR 0 16
35358: PPUSH
35359: CALL_OW 321
35363: PUSH
35364: LD_INT 2
35366: EQUAL
35367: AND
35368: IFFALSE 35428
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35370: LD_INT 22
35372: PUSH
35373: LD_VAR 0 16
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 35
35384: PUSH
35385: LD_INT 49
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 91
35394: PUSH
35395: LD_VAR 0 1
35399: PUSH
35400: LD_INT 10
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: PPUSH
35413: CALL_OW 69
35417: NOT
35418: IFFALSE 35428
// weapon := ru_time_lapser ;
35420: LD_ADDR_VAR 0 18
35424: PUSH
35425: LD_INT 49
35427: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35428: LD_VAR 0 12
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: IN
35443: PUSH
35444: LD_INT 11
35446: PUSH
35447: LD_VAR 0 5
35451: IN
35452: PUSH
35453: LD_INT 30
35455: PUSH
35456: LD_VAR 0 5
35460: IN
35461: OR
35462: AND
35463: PUSH
35464: LD_INT 6
35466: PPUSH
35467: LD_VAR 0 16
35471: PPUSH
35472: CALL_OW 321
35476: PUSH
35477: LD_INT 2
35479: EQUAL
35480: AND
35481: IFFALSE 35646
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35483: LD_INT 22
35485: PUSH
35486: LD_VAR 0 16
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 35
35500: PUSH
35501: LD_INT 11
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 35
35510: PUSH
35511: LD_INT 30
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 91
35525: PUSH
35526: LD_VAR 0 1
35530: PUSH
35531: LD_INT 18
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: PPUSH
35544: CALL_OW 69
35548: NOT
35549: PUSH
35550: LD_INT 22
35552: PUSH
35553: LD_VAR 0 16
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 30
35567: PUSH
35568: LD_INT 32
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 30
35577: PUSH
35578: LD_INT 33
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 91
35592: PUSH
35593: LD_VAR 0 1
35597: PUSH
35598: LD_INT 12
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: PPUSH
35614: CALL_OW 69
35618: PUSH
35619: LD_INT 2
35621: GREATER
35622: AND
35623: IFFALSE 35646
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35625: LD_ADDR_VAR 0 18
35629: PUSH
35630: LD_INT 11
35632: PUSH
35633: LD_INT 30
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_VAR 0 12
35644: ARRAY
35645: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35646: LD_VAR 0 18
35650: NOT
35651: PUSH
35652: LD_INT 40
35654: PPUSH
35655: LD_VAR 0 16
35659: PPUSH
35660: CALL_OW 321
35664: PUSH
35665: LD_INT 2
35667: EQUAL
35668: AND
35669: PUSH
35670: LD_INT 7
35672: PUSH
35673: LD_VAR 0 5
35677: IN
35678: PUSH
35679: LD_INT 28
35681: PUSH
35682: LD_VAR 0 5
35686: IN
35687: OR
35688: PUSH
35689: LD_INT 45
35691: PUSH
35692: LD_VAR 0 5
35696: IN
35697: OR
35698: AND
35699: IFFALSE 35953
// begin hex := GetHexInfo ( x , y ) ;
35701: LD_ADDR_VAR 0 4
35705: PUSH
35706: LD_VAR 0 10
35710: PPUSH
35711: LD_VAR 0 11
35715: PPUSH
35716: CALL_OW 546
35720: ST_TO_ADDR
// if hex [ 1 ] then
35721: LD_VAR 0 4
35725: PUSH
35726: LD_INT 1
35728: ARRAY
35729: IFFALSE 35733
// exit ;
35731: GO 36136
// height := hex [ 2 ] ;
35733: LD_ADDR_VAR 0 15
35737: PUSH
35738: LD_VAR 0 4
35742: PUSH
35743: LD_INT 2
35745: ARRAY
35746: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35747: LD_ADDR_VAR 0 14
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: LD_INT 5
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
// for i in tmp do
35770: LD_ADDR_VAR 0 8
35774: PUSH
35775: LD_VAR 0 14
35779: PUSH
35780: FOR_IN
35781: IFFALSE 35951
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35783: LD_ADDR_VAR 0 9
35787: PUSH
35788: LD_VAR 0 10
35792: PPUSH
35793: LD_VAR 0 8
35797: PPUSH
35798: LD_INT 5
35800: PPUSH
35801: CALL_OW 272
35805: PUSH
35806: LD_VAR 0 11
35810: PPUSH
35811: LD_VAR 0 8
35815: PPUSH
35816: LD_INT 5
35818: PPUSH
35819: CALL_OW 273
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35828: LD_VAR 0 9
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: PPUSH
35837: LD_VAR 0 9
35841: PUSH
35842: LD_INT 2
35844: ARRAY
35845: PPUSH
35846: CALL_OW 488
35850: IFFALSE 35949
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35852: LD_ADDR_VAR 0 4
35856: PUSH
35857: LD_VAR 0 9
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: PPUSH
35866: LD_VAR 0 9
35870: PUSH
35871: LD_INT 2
35873: ARRAY
35874: PPUSH
35875: CALL_OW 546
35879: ST_TO_ADDR
// if hex [ 1 ] then
35880: LD_VAR 0 4
35884: PUSH
35885: LD_INT 1
35887: ARRAY
35888: IFFALSE 35892
// continue ;
35890: GO 35780
// h := hex [ 2 ] ;
35892: LD_ADDR_VAR 0 13
35896: PUSH
35897: LD_VAR 0 4
35901: PUSH
35902: LD_INT 2
35904: ARRAY
35905: ST_TO_ADDR
// if h + 7 < height then
35906: LD_VAR 0 13
35910: PUSH
35911: LD_INT 7
35913: PLUS
35914: PUSH
35915: LD_VAR 0 15
35919: LESS
35920: IFFALSE 35949
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35922: LD_ADDR_VAR 0 18
35926: PUSH
35927: LD_INT 7
35929: PUSH
35930: LD_INT 28
35932: PUSH
35933: LD_INT 45
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PUSH
35941: LD_VAR 0 12
35945: ARRAY
35946: ST_TO_ADDR
// break ;
35947: GO 35951
// end ; end ; end ;
35949: GO 35780
35951: POP
35952: POP
// end ; if not weapon then
35953: LD_VAR 0 18
35957: NOT
35958: IFFALSE 36018
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: LD_VAR 0 5
35969: PUSH
35970: LD_INT 11
35972: PUSH
35973: LD_INT 30
35975: PUSH
35976: LD_INT 49
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: DIFF
35984: ST_TO_ADDR
// if not list then
35985: LD_VAR 0 5
35989: NOT
35990: IFFALSE 35994
// exit ;
35992: GO 36136
// weapon := list [ rand ( 1 , list ) ] ;
35994: LD_ADDR_VAR 0 18
35998: PUSH
35999: LD_VAR 0 5
36003: PUSH
36004: LD_INT 1
36006: PPUSH
36007: LD_VAR 0 5
36011: PPUSH
36012: CALL_OW 12
36016: ARRAY
36017: ST_TO_ADDR
// end ; if weapon then
36018: LD_VAR 0 18
36022: IFFALSE 36136
// begin tmp := CostOfWeapon ( weapon ) ;
36024: LD_ADDR_VAR 0 14
36028: PUSH
36029: LD_VAR 0 18
36033: PPUSH
36034: CALL_OW 451
36038: ST_TO_ADDR
// j := GetBase ( tower ) ;
36039: LD_ADDR_VAR 0 9
36043: PUSH
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 274
36053: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36054: LD_VAR 0 9
36058: PPUSH
36059: LD_INT 1
36061: PPUSH
36062: CALL_OW 275
36066: PUSH
36067: LD_VAR 0 14
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: GREATEREQUAL
36076: PUSH
36077: LD_VAR 0 9
36081: PPUSH
36082: LD_INT 2
36084: PPUSH
36085: CALL_OW 275
36089: PUSH
36090: LD_VAR 0 14
36094: PUSH
36095: LD_INT 2
36097: ARRAY
36098: GREATEREQUAL
36099: AND
36100: PUSH
36101: LD_VAR 0 9
36105: PPUSH
36106: LD_INT 3
36108: PPUSH
36109: CALL_OW 275
36113: PUSH
36114: LD_VAR 0 14
36118: PUSH
36119: LD_INT 3
36121: ARRAY
36122: GREATEREQUAL
36123: AND
36124: IFFALSE 36136
// result := weapon ;
36126: LD_ADDR_VAR 0 3
36130: PUSH
36131: LD_VAR 0 18
36135: ST_TO_ADDR
// end ; end ;
36136: LD_VAR 0 3
36140: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36141: LD_INT 0
36143: PPUSH
36144: PPUSH
// result := true ;
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_INT 1
36152: ST_TO_ADDR
// if array1 = array2 then
36153: LD_VAR 0 1
36157: PUSH
36158: LD_VAR 0 2
36162: EQUAL
36163: IFFALSE 36223
// begin for i = 1 to array1 do
36165: LD_ADDR_VAR 0 4
36169: PUSH
36170: DOUBLE
36171: LD_INT 1
36173: DEC
36174: ST_TO_ADDR
36175: LD_VAR 0 1
36179: PUSH
36180: FOR_TO
36181: IFFALSE 36219
// if array1 [ i ] <> array2 [ i ] then
36183: LD_VAR 0 1
36187: PUSH
36188: LD_VAR 0 4
36192: ARRAY
36193: PUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_VAR 0 4
36203: ARRAY
36204: NONEQUAL
36205: IFFALSE 36217
// begin result := false ;
36207: LD_ADDR_VAR 0 3
36211: PUSH
36212: LD_INT 0
36214: ST_TO_ADDR
// break ;
36215: GO 36219
// end ;
36217: GO 36180
36219: POP
36220: POP
// end else
36221: GO 36231
// result := false ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_INT 0
36230: ST_TO_ADDR
// end ;
36231: LD_VAR 0 3
36235: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36236: LD_INT 0
36238: PPUSH
36239: PPUSH
36240: PPUSH
// pom := GetBase ( fac ) ;
36241: LD_ADDR_VAR 0 5
36245: PUSH
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 274
36255: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36256: LD_ADDR_VAR 0 4
36260: PUSH
36261: LD_VAR 0 2
36265: PUSH
36266: LD_INT 1
36268: ARRAY
36269: PPUSH
36270: LD_VAR 0 2
36274: PUSH
36275: LD_INT 2
36277: ARRAY
36278: PPUSH
36279: LD_VAR 0 2
36283: PUSH
36284: LD_INT 3
36286: ARRAY
36287: PPUSH
36288: LD_VAR 0 2
36292: PUSH
36293: LD_INT 4
36295: ARRAY
36296: PPUSH
36297: CALL_OW 449
36301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36302: LD_ADDR_VAR 0 3
36306: PUSH
36307: LD_VAR 0 5
36311: PPUSH
36312: LD_INT 1
36314: PPUSH
36315: CALL_OW 275
36319: PUSH
36320: LD_VAR 0 4
36324: PUSH
36325: LD_INT 1
36327: ARRAY
36328: GREATEREQUAL
36329: PUSH
36330: LD_VAR 0 5
36334: PPUSH
36335: LD_INT 2
36337: PPUSH
36338: CALL_OW 275
36342: PUSH
36343: LD_VAR 0 4
36347: PUSH
36348: LD_INT 2
36350: ARRAY
36351: GREATEREQUAL
36352: AND
36353: PUSH
36354: LD_VAR 0 5
36358: PPUSH
36359: LD_INT 3
36361: PPUSH
36362: CALL_OW 275
36366: PUSH
36367: LD_VAR 0 4
36371: PUSH
36372: LD_INT 3
36374: ARRAY
36375: GREATEREQUAL
36376: AND
36377: ST_TO_ADDR
// end ;
36378: LD_VAR 0 3
36382: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
// pom := GetBase ( building ) ;
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_VAR 0 1
36398: PPUSH
36399: CALL_OW 274
36403: ST_TO_ADDR
// if not pom then
36404: LD_VAR 0 3
36408: NOT
36409: IFFALSE 36413
// exit ;
36411: GO 36583
// btype := GetBType ( building ) ;
36413: LD_ADDR_VAR 0 5
36417: PUSH
36418: LD_VAR 0 1
36422: PPUSH
36423: CALL_OW 266
36427: ST_TO_ADDR
// if btype = b_armoury then
36428: LD_VAR 0 5
36432: PUSH
36433: LD_INT 4
36435: EQUAL
36436: IFFALSE 36446
// btype := b_barracks ;
36438: LD_ADDR_VAR 0 5
36442: PUSH
36443: LD_INT 5
36445: ST_TO_ADDR
// if btype = b_depot then
36446: LD_VAR 0 5
36450: PUSH
36451: LD_INT 0
36453: EQUAL
36454: IFFALSE 36464
// btype := b_warehouse ;
36456: LD_ADDR_VAR 0 5
36460: PUSH
36461: LD_INT 1
36463: ST_TO_ADDR
// if btype = b_workshop then
36464: LD_VAR 0 5
36468: PUSH
36469: LD_INT 2
36471: EQUAL
36472: IFFALSE 36482
// btype := b_factory ;
36474: LD_ADDR_VAR 0 5
36478: PUSH
36479: LD_INT 3
36481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36482: LD_ADDR_VAR 0 4
36486: PUSH
36487: LD_VAR 0 5
36491: PPUSH
36492: LD_VAR 0 1
36496: PPUSH
36497: CALL_OW 248
36501: PPUSH
36502: CALL_OW 450
36506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36507: LD_ADDR_VAR 0 2
36511: PUSH
36512: LD_VAR 0 3
36516: PPUSH
36517: LD_INT 1
36519: PPUSH
36520: CALL_OW 275
36524: PUSH
36525: LD_VAR 0 4
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: GREATEREQUAL
36534: PUSH
36535: LD_VAR 0 3
36539: PPUSH
36540: LD_INT 2
36542: PPUSH
36543: CALL_OW 275
36547: PUSH
36548: LD_VAR 0 4
36552: PUSH
36553: LD_INT 2
36555: ARRAY
36556: GREATEREQUAL
36557: AND
36558: PUSH
36559: LD_VAR 0 3
36563: PPUSH
36564: LD_INT 3
36566: PPUSH
36567: CALL_OW 275
36571: PUSH
36572: LD_VAR 0 4
36576: PUSH
36577: LD_INT 3
36579: ARRAY
36580: GREATEREQUAL
36581: AND
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 2
36587: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36588: LD_INT 0
36590: PPUSH
36591: PPUSH
36592: PPUSH
// pom := GetBase ( building ) ;
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 274
36607: ST_TO_ADDR
// if not pom then
36608: LD_VAR 0 4
36612: NOT
36613: IFFALSE 36617
// exit ;
36615: GO 36718
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36617: LD_ADDR_VAR 0 5
36621: PUSH
36622: LD_VAR 0 2
36626: PPUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 248
36636: PPUSH
36637: CALL_OW 450
36641: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36642: LD_ADDR_VAR 0 3
36646: PUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_INT 1
36654: PPUSH
36655: CALL_OW 275
36659: PUSH
36660: LD_VAR 0 5
36664: PUSH
36665: LD_INT 1
36667: ARRAY
36668: GREATEREQUAL
36669: PUSH
36670: LD_VAR 0 4
36674: PPUSH
36675: LD_INT 2
36677: PPUSH
36678: CALL_OW 275
36682: PUSH
36683: LD_VAR 0 5
36687: PUSH
36688: LD_INT 2
36690: ARRAY
36691: GREATEREQUAL
36692: AND
36693: PUSH
36694: LD_VAR 0 4
36698: PPUSH
36699: LD_INT 3
36701: PPUSH
36702: CALL_OW 275
36706: PUSH
36707: LD_VAR 0 5
36711: PUSH
36712: LD_INT 3
36714: ARRAY
36715: GREATEREQUAL
36716: AND
36717: ST_TO_ADDR
// end ;
36718: LD_VAR 0 3
36722: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36723: LD_INT 0
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
// result := false ;
36735: LD_ADDR_VAR 0 6
36739: PUSH
36740: LD_INT 0
36742: ST_TO_ADDR
// if not base or not btype or not x or not y then
36743: LD_VAR 0 1
36747: NOT
36748: PUSH
36749: LD_VAR 0 2
36753: NOT
36754: OR
36755: PUSH
36756: LD_VAR 0 3
36760: NOT
36761: OR
36762: PUSH
36763: LD_VAR 0 4
36767: NOT
36768: OR
36769: IFFALSE 36773
// exit ;
36771: GO 37382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36773: LD_ADDR_VAR 0 12
36777: PUSH
36778: LD_VAR 0 2
36782: PPUSH
36783: LD_VAR 0 3
36787: PPUSH
36788: LD_VAR 0 4
36792: PPUSH
36793: LD_VAR 0 5
36797: PPUSH
36798: LD_VAR 0 1
36802: PUSH
36803: LD_INT 1
36805: ARRAY
36806: PPUSH
36807: CALL_OW 248
36811: PPUSH
36812: LD_INT 0
36814: PPUSH
36815: CALL 38219 0 6
36819: ST_TO_ADDR
// if not hexes then
36820: LD_VAR 0 12
36824: NOT
36825: IFFALSE 36829
// exit ;
36827: GO 37382
// for i = 1 to hexes do
36829: LD_ADDR_VAR 0 7
36833: PUSH
36834: DOUBLE
36835: LD_INT 1
36837: DEC
36838: ST_TO_ADDR
36839: LD_VAR 0 12
36843: PUSH
36844: FOR_TO
36845: IFFALSE 37380
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36847: LD_ADDR_VAR 0 11
36851: PUSH
36852: LD_VAR 0 12
36856: PUSH
36857: LD_VAR 0 7
36861: ARRAY
36862: PUSH
36863: LD_INT 1
36865: ARRAY
36866: PPUSH
36867: LD_VAR 0 12
36871: PUSH
36872: LD_VAR 0 7
36876: ARRAY
36877: PUSH
36878: LD_INT 2
36880: ARRAY
36881: PPUSH
36882: CALL_OW 428
36886: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36887: LD_VAR 0 12
36891: PUSH
36892: LD_VAR 0 7
36896: ARRAY
36897: PUSH
36898: LD_INT 1
36900: ARRAY
36901: PPUSH
36902: LD_VAR 0 12
36906: PUSH
36907: LD_VAR 0 7
36911: ARRAY
36912: PUSH
36913: LD_INT 2
36915: ARRAY
36916: PPUSH
36917: CALL_OW 351
36921: PUSH
36922: LD_VAR 0 12
36926: PUSH
36927: LD_VAR 0 7
36931: ARRAY
36932: PUSH
36933: LD_INT 1
36935: ARRAY
36936: PPUSH
36937: LD_VAR 0 12
36941: PUSH
36942: LD_VAR 0 7
36946: ARRAY
36947: PUSH
36948: LD_INT 2
36950: ARRAY
36951: PPUSH
36952: CALL_OW 488
36956: NOT
36957: OR
36958: PUSH
36959: LD_VAR 0 11
36963: PPUSH
36964: CALL_OW 247
36968: PUSH
36969: LD_INT 3
36971: EQUAL
36972: OR
36973: IFFALSE 36979
// exit ;
36975: POP
36976: POP
36977: GO 37382
// if not tmp or not tmp in base then
36979: LD_VAR 0 11
36983: NOT
36984: PUSH
36985: LD_VAR 0 11
36989: PUSH
36990: LD_VAR 0 1
36994: IN
36995: NOT
36996: OR
36997: IFFALSE 37001
// continue ;
36999: GO 36844
// result := true ;
37001: LD_ADDR_VAR 0 6
37005: PUSH
37006: LD_INT 1
37008: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37009: LD_ADDR_VAR 0 15
37013: PUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: LD_INT 22
37021: PUSH
37022: LD_VAR 0 11
37026: PPUSH
37027: CALL_OW 255
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 30
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 30
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 72
37072: ST_TO_ADDR
// if dep then
37073: LD_VAR 0 15
37077: IFFALSE 37213
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37079: LD_ADDR_VAR 0 14
37083: PUSH
37084: LD_VAR 0 15
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: PPUSH
37093: CALL_OW 250
37097: PPUSH
37098: LD_VAR 0 15
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: PPUSH
37107: CALL_OW 254
37111: PPUSH
37112: LD_INT 5
37114: PPUSH
37115: CALL_OW 272
37119: PUSH
37120: LD_VAR 0 15
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PPUSH
37129: CALL_OW 251
37133: PPUSH
37134: LD_VAR 0 15
37138: PUSH
37139: LD_INT 1
37141: ARRAY
37142: PPUSH
37143: CALL_OW 254
37147: PPUSH
37148: LD_INT 5
37150: PPUSH
37151: CALL_OW 273
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37160: LD_VAR 0 14
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_VAR 0 14
37173: PUSH
37174: LD_INT 2
37176: ARRAY
37177: PPUSH
37178: CALL_OW 488
37182: IFFALSE 37213
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37184: LD_VAR 0 11
37188: PPUSH
37189: LD_VAR 0 14
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: LD_VAR 0 14
37202: PUSH
37203: LD_INT 2
37205: ARRAY
37206: PPUSH
37207: CALL_OW 111
// continue ;
37211: GO 36844
// end ; end ; r := GetDir ( tmp ) ;
37213: LD_ADDR_VAR 0 13
37217: PUSH
37218: LD_VAR 0 11
37222: PPUSH
37223: CALL_OW 254
37227: ST_TO_ADDR
// if r = 5 then
37228: LD_VAR 0 13
37232: PUSH
37233: LD_INT 5
37235: EQUAL
37236: IFFALSE 37246
// r := 0 ;
37238: LD_ADDR_VAR 0 13
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// for j = r to 5 do
37246: LD_ADDR_VAR 0 8
37250: PUSH
37251: DOUBLE
37252: LD_VAR 0 13
37256: DEC
37257: ST_TO_ADDR
37258: LD_INT 5
37260: PUSH
37261: FOR_TO
37262: IFFALSE 37376
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37264: LD_ADDR_VAR 0 9
37268: PUSH
37269: LD_VAR 0 11
37273: PPUSH
37274: CALL_OW 250
37278: PPUSH
37279: LD_VAR 0 8
37283: PPUSH
37284: LD_INT 2
37286: PPUSH
37287: CALL_OW 272
37291: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37292: LD_ADDR_VAR 0 10
37296: PUSH
37297: LD_VAR 0 11
37301: PPUSH
37302: CALL_OW 251
37306: PPUSH
37307: LD_VAR 0 8
37311: PPUSH
37312: LD_INT 2
37314: PPUSH
37315: CALL_OW 273
37319: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37320: LD_VAR 0 9
37324: PPUSH
37325: LD_VAR 0 10
37329: PPUSH
37330: CALL_OW 488
37334: PUSH
37335: LD_VAR 0 9
37339: PPUSH
37340: LD_VAR 0 10
37344: PPUSH
37345: CALL_OW 428
37349: NOT
37350: AND
37351: IFFALSE 37374
// begin ComMoveXY ( tmp , _x , _y ) ;
37353: LD_VAR 0 11
37357: PPUSH
37358: LD_VAR 0 9
37362: PPUSH
37363: LD_VAR 0 10
37367: PPUSH
37368: CALL_OW 111
// break ;
37372: GO 37376
// end ; end ;
37374: GO 37261
37376: POP
37377: POP
// end ;
37378: GO 36844
37380: POP
37381: POP
// end ;
37382: LD_VAR 0 6
37386: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37387: LD_INT 0
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
// result := false ;
37399: LD_ADDR_VAR 0 6
37403: PUSH
37404: LD_INT 0
37406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37407: LD_VAR 0 1
37411: NOT
37412: PUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 266
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: IN
37433: NOT
37434: OR
37435: PUSH
37436: LD_VAR 0 2
37440: NOT
37441: OR
37442: PUSH
37443: LD_VAR 0 5
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 4
37462: PUSH
37463: LD_INT 5
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: IN
37474: NOT
37475: OR
37476: PUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: LD_VAR 0 4
37486: PPUSH
37487: CALL_OW 488
37491: NOT
37492: OR
37493: IFFALSE 37497
// exit ;
37495: GO 38214
// pom := GetBase ( depot ) ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 274
37511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37512: LD_ADDR_VAR 0 11
37516: PUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 248
37531: PPUSH
37532: CALL_OW 450
37536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37537: LD_VAR 0 10
37541: PPUSH
37542: LD_INT 1
37544: PPUSH
37545: CALL_OW 275
37549: PUSH
37550: LD_VAR 0 11
37554: PUSH
37555: LD_INT 1
37557: ARRAY
37558: GREATEREQUAL
37559: PUSH
37560: LD_VAR 0 10
37564: PPUSH
37565: LD_INT 2
37567: PPUSH
37568: CALL_OW 275
37572: PUSH
37573: LD_VAR 0 11
37577: PUSH
37578: LD_INT 2
37580: ARRAY
37581: GREATEREQUAL
37582: AND
37583: PUSH
37584: LD_VAR 0 10
37588: PPUSH
37589: LD_INT 3
37591: PPUSH
37592: CALL_OW 275
37596: PUSH
37597: LD_VAR 0 11
37601: PUSH
37602: LD_INT 3
37604: ARRAY
37605: GREATEREQUAL
37606: AND
37607: NOT
37608: IFFALSE 37612
// exit ;
37610: GO 38214
// if GetBType ( depot ) = b_depot then
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 266
37621: PUSH
37622: LD_INT 0
37624: EQUAL
37625: IFFALSE 37637
// dist := 28 else
37627: LD_ADDR_VAR 0 14
37631: PUSH
37632: LD_INT 28
37634: ST_TO_ADDR
37635: GO 37645
// dist := 36 ;
37637: LD_ADDR_VAR 0 14
37641: PUSH
37642: LD_INT 36
37644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37645: LD_VAR 0 1
37649: PPUSH
37650: LD_VAR 0 3
37654: PPUSH
37655: LD_VAR 0 4
37659: PPUSH
37660: CALL_OW 297
37664: PUSH
37665: LD_VAR 0 14
37669: GREATER
37670: IFFALSE 37674
// exit ;
37672: GO 38214
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37674: LD_ADDR_VAR 0 12
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_VAR 0 3
37688: PPUSH
37689: LD_VAR 0 4
37693: PPUSH
37694: LD_VAR 0 5
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 248
37708: PPUSH
37709: LD_INT 0
37711: PPUSH
37712: CALL 38219 0 6
37716: ST_TO_ADDR
// if not hexes then
37717: LD_VAR 0 12
37721: NOT
37722: IFFALSE 37726
// exit ;
37724: GO 38214
// hex := GetHexInfo ( x , y ) ;
37726: LD_ADDR_VAR 0 15
37730: PUSH
37731: LD_VAR 0 3
37735: PPUSH
37736: LD_VAR 0 4
37740: PPUSH
37741: CALL_OW 546
37745: ST_TO_ADDR
// if hex [ 1 ] then
37746: LD_VAR 0 15
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: IFFALSE 37758
// exit ;
37756: GO 38214
// height := hex [ 2 ] ;
37758: LD_ADDR_VAR 0 13
37762: PUSH
37763: LD_VAR 0 15
37767: PUSH
37768: LD_INT 2
37770: ARRAY
37771: ST_TO_ADDR
// for i = 1 to hexes do
37772: LD_ADDR_VAR 0 7
37776: PUSH
37777: DOUBLE
37778: LD_INT 1
37780: DEC
37781: ST_TO_ADDR
37782: LD_VAR 0 12
37786: PUSH
37787: FOR_TO
37788: IFFALSE 38118
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37790: LD_VAR 0 12
37794: PUSH
37795: LD_VAR 0 7
37799: ARRAY
37800: PUSH
37801: LD_INT 1
37803: ARRAY
37804: PPUSH
37805: LD_VAR 0 12
37809: PUSH
37810: LD_VAR 0 7
37814: ARRAY
37815: PUSH
37816: LD_INT 2
37818: ARRAY
37819: PPUSH
37820: CALL_OW 488
37824: NOT
37825: PUSH
37826: LD_VAR 0 12
37830: PUSH
37831: LD_VAR 0 7
37835: ARRAY
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: LD_VAR 0 12
37845: PUSH
37846: LD_VAR 0 7
37850: ARRAY
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: PPUSH
37856: CALL_OW 428
37860: PUSH
37861: LD_INT 0
37863: GREATER
37864: OR
37865: PUSH
37866: LD_VAR 0 12
37870: PUSH
37871: LD_VAR 0 7
37875: ARRAY
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: PPUSH
37881: LD_VAR 0 12
37885: PUSH
37886: LD_VAR 0 7
37890: ARRAY
37891: PUSH
37892: LD_INT 2
37894: ARRAY
37895: PPUSH
37896: CALL_OW 351
37900: OR
37901: IFFALSE 37907
// exit ;
37903: POP
37904: POP
37905: GO 38214
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37907: LD_ADDR_VAR 0 8
37911: PUSH
37912: LD_VAR 0 12
37916: PUSH
37917: LD_VAR 0 7
37921: ARRAY
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PPUSH
37927: LD_VAR 0 12
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: CALL_OW 546
37946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37947: LD_VAR 0 8
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 8
37960: PUSH
37961: LD_INT 2
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 13
37969: PUSH
37970: LD_INT 2
37972: PLUS
37973: GREATER
37974: OR
37975: PUSH
37976: LD_VAR 0 8
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PUSH
37985: LD_VAR 0 13
37989: PUSH
37990: LD_INT 2
37992: MINUS
37993: LESS
37994: OR
37995: PUSH
37996: LD_VAR 0 8
38000: PUSH
38001: LD_INT 3
38003: ARRAY
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 8
38010: PUSH
38011: LD_INT 9
38013: PUSH
38014: LD_INT 10
38016: PUSH
38017: LD_INT 11
38019: PUSH
38020: LD_INT 12
38022: PUSH
38023: LD_INT 13
38025: PUSH
38026: LD_INT 16
38028: PUSH
38029: LD_INT 17
38031: PUSH
38032: LD_INT 18
38034: PUSH
38035: LD_INT 19
38037: PUSH
38038: LD_INT 20
38040: PUSH
38041: LD_INT 21
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: IN
38059: NOT
38060: OR
38061: PUSH
38062: LD_VAR 0 8
38066: PUSH
38067: LD_INT 5
38069: ARRAY
38070: NOT
38071: OR
38072: PUSH
38073: LD_VAR 0 8
38077: PUSH
38078: LD_INT 6
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 7
38090: PUSH
38091: LD_INT 9
38093: PUSH
38094: LD_INT 10
38096: PUSH
38097: LD_INT 11
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: IN
38108: NOT
38109: OR
38110: IFFALSE 38116
// exit ;
38112: POP
38113: POP
38114: GO 38214
// end ;
38116: GO 37787
38118: POP
38119: POP
// side := GetSide ( depot ) ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 255
38134: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38135: LD_VAR 0 9
38139: PPUSH
38140: LD_VAR 0 3
38144: PPUSH
38145: LD_VAR 0 4
38149: PPUSH
38150: LD_INT 20
38152: PPUSH
38153: CALL 30868 0 4
38157: PUSH
38158: LD_INT 4
38160: ARRAY
38161: IFFALSE 38165
// exit ;
38163: GO 38214
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38165: LD_VAR 0 2
38169: PUSH
38170: LD_INT 29
38172: PUSH
38173: LD_INT 30
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: IN
38180: PUSH
38181: LD_VAR 0 3
38185: PPUSH
38186: LD_VAR 0 4
38190: PPUSH
38191: LD_VAR 0 9
38195: PPUSH
38196: CALL_OW 440
38200: NOT
38201: AND
38202: IFFALSE 38206
// exit ;
38204: GO 38214
// result := true ;
38206: LD_ADDR_VAR 0 6
38210: PUSH
38211: LD_INT 1
38213: ST_TO_ADDR
// end ;
38214: LD_VAR 0 6
38218: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
38219: LD_INT 0
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
// result = [ ] ;
38279: LD_ADDR_VAR 0 7
38283: PUSH
38284: EMPTY
38285: ST_TO_ADDR
// temp_list = [ ] ;
38286: LD_ADDR_VAR 0 9
38290: PUSH
38291: EMPTY
38292: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38293: LD_VAR 0 4
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: LD_INT 4
38312: PUSH
38313: LD_INT 5
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: IN
38324: NOT
38325: PUSH
38326: LD_VAR 0 1
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: IN
38341: PUSH
38342: LD_VAR 0 5
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: IN
38361: NOT
38362: AND
38363: OR
38364: IFFALSE 38368
// exit ;
38366: GO 56759
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38368: LD_VAR 0 1
38372: PUSH
38373: LD_INT 6
38375: PUSH
38376: LD_INT 7
38378: PUSH
38379: LD_INT 8
38381: PUSH
38382: LD_INT 13
38384: PUSH
38385: LD_INT 12
38387: PUSH
38388: LD_INT 15
38390: PUSH
38391: LD_INT 11
38393: PUSH
38394: LD_INT 14
38396: PUSH
38397: LD_INT 10
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: IN
38411: IFFALSE 38421
// btype = b_lab ;
38413: LD_ADDR_VAR 0 1
38417: PUSH
38418: LD_INT 6
38420: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38421: LD_VAR 0 6
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: IN
38440: NOT
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: LD_INT 6
38461: PUSH
38462: LD_INT 36
38464: PUSH
38465: LD_INT 4
38467: PUSH
38468: LD_INT 5
38470: PUSH
38471: LD_INT 31
38473: PUSH
38474: LD_INT 32
38476: PUSH
38477: LD_INT 33
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: IN
38493: NOT
38494: PUSH
38495: LD_VAR 0 6
38499: PUSH
38500: LD_INT 1
38502: EQUAL
38503: AND
38504: OR
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: IN
38521: NOT
38522: PUSH
38523: LD_VAR 0 6
38527: PUSH
38528: LD_INT 2
38530: EQUAL
38531: AND
38532: OR
38533: IFFALSE 38543
// mode = 0 ;
38535: LD_ADDR_VAR 0 6
38539: PUSH
38540: LD_INT 0
38542: ST_TO_ADDR
// case mode of 0 :
38543: LD_VAR 0 6
38547: PUSH
38548: LD_INT 0
38550: DOUBLE
38551: EQUAL
38552: IFTRUE 38556
38554: GO 50009
38556: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38557: LD_ADDR_VAR 0 11
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38750: LD_ADDR_VAR 0 12
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38946: LD_ADDR_VAR 0 13
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: LD_INT 2
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 3
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39145: LD_ADDR_VAR 0 14
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 3
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39341: LD_ADDR_VAR 0 15
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39534: LD_ADDR_VAR 0 16
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39727: LD_ADDR_VAR 0 17
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39957: LD_ADDR_VAR 0 18
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40187: LD_ADDR_VAR 0 19
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 2
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40417: LD_ADDR_VAR 0 20
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40647: LD_ADDR_VAR 0 21
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40877: LD_ADDR_VAR 0 22
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41107: LD_ADDR_VAR 0 23
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: LD_INT 3
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 3
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41387: LD_ADDR_VAR 0 24
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 3
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41663: LD_ADDR_VAR 0 25
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41937: LD_ADDR_VAR 0 26
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42213: LD_ADDR_VAR 0 27
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 3
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42493: LD_ADDR_VAR 0 28
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 2
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 3
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 3
42740: NEG
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42775: LD_ADDR_VAR 0 29
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43054: LD_ADDR_VAR 0 30
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 3
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 3
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43332: LD_ADDR_VAR 0 31
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43610: LD_ADDR_VAR 0 32
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 3
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 3
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43888: LD_ADDR_VAR 0 33
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 3
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44167: LD_ADDR_VAR 0 34
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44447: LD_ADDR_VAR 0 35
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44559: LD_ADDR_VAR 0 36
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44671: LD_ADDR_VAR 0 37
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44783: LD_ADDR_VAR 0 38
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44895: LD_ADDR_VAR 0 39
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45007: LD_ADDR_VAR 0 40
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45119: LD_ADDR_VAR 0 41
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 3
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 3
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45469: LD_ADDR_VAR 0 42
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 3
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 3
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45819: LD_ADDR_VAR 0 43
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 3
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46167: LD_ADDR_VAR 0 44
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 3
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46517: LD_ADDR_VAR 0 45
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 3
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46867: LD_ADDR_VAR 0 46
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 3
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47215: LD_ADDR_VAR 0 47
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47366: LD_ADDR_VAR 0 48
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47513: LD_ADDR_VAR 0 49
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47657: LD_ADDR_VAR 0 50
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47801: LD_ADDR_VAR 0 51
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 52
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48099: LD_ADDR_VAR 0 53
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48329: LD_ADDR_VAR 0 54
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48559: LD_ADDR_VAR 0 55
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48789: LD_ADDR_VAR 0 56
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49019: LD_ADDR_VAR 0 57
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49249: LD_ADDR_VAR 0 58
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49479: LD_ADDR_VAR 0 59
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49567: LD_ADDR_VAR 0 60
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49655: LD_ADDR_VAR 0 61
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49743: LD_ADDR_VAR 0 62
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49831: LD_ADDR_VAR 0 63
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49919: LD_ADDR_VAR 0 64
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// end ; 1 :
50007: GO 55904
50009: LD_INT 1
50011: DOUBLE
50012: EQUAL
50013: IFTRUE 50017
50015: GO 52640
50017: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50018: LD_ADDR_VAR 0 11
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50062: LD_ADDR_VAR 0 12
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50103: LD_ADDR_VAR 0 13
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50143: LD_ADDR_VAR 0 14
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50184: LD_ADDR_VAR 0 15
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50228: LD_ADDR_VAR 0 16
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50274: LD_ADDR_VAR 0 17
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: LIST
50317: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50318: LD_ADDR_VAR 0 18
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 3
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50359: LD_ADDR_VAR 0 19
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50399: LD_ADDR_VAR 0 20
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50440: LD_ADDR_VAR 0 21
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50484: LD_ADDR_VAR 0 22
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50530: LD_ADDR_VAR 0 23
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 4
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50574: LD_ADDR_VAR 0 24
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50615: LD_ADDR_VAR 0 25
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 4
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: LD_INT 4
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50655: LD_ADDR_VAR 0 26
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 4
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50696: LD_ADDR_VAR 0 27
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 4
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50740: LD_ADDR_VAR 0 28
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: LD_INT 4
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 4
50771: NEG
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50786: LD_ADDR_VAR 0 29
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 4
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 5
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 5
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 4
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 6
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 6
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50941: LD_ADDR_VAR 0 30
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 4
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 5
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 5
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 5
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 6
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 6
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51084: LD_ADDR_VAR 0 31
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 4
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 4
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: LD_INT 4
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 5
51161: PUSH
51162: LD_INT 5
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: LD_INT 5
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 6
51181: PUSH
51182: LD_INT 5
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 6
51191: PUSH
51192: LD_INT 6
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 5
51201: PUSH
51202: LD_INT 6
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51223: LD_ADDR_VAR 0 32
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 4
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 4
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 5
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 5
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 6
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 6
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 5
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51366: LD_ADDR_VAR 0 33
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 4
51418: NEG
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 4
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 5
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 5
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 6
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 6
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51521: LD_ADDR_VAR 0 34
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 4
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 4
51576: NEG
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: NEG
51589: PUSH
51590: LD_INT 4
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 4
51600: NEG
51601: PUSH
51602: LD_INT 5
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 5
51612: NEG
51613: PUSH
51614: LD_INT 4
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 5
51624: NEG
51625: PUSH
51626: LD_INT 5
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 5
51636: NEG
51637: PUSH
51638: LD_INT 6
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 6
51648: NEG
51649: PUSH
51650: LD_INT 5
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 6
51660: NEG
51661: PUSH
51662: LD_INT 6
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51684: LD_ADDR_VAR 0 41
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51728: LD_ADDR_VAR 0 42
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51769: LD_ADDR_VAR 0 43
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51809: LD_ADDR_VAR 0 44
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51850: LD_ADDR_VAR 0 45
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51894: LD_ADDR_VAR 0 46
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51940: LD_ADDR_VAR 0 47
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 3
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51973: LD_ADDR_VAR 0 48
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52004: LD_ADDR_VAR 0 49
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52033: LD_ADDR_VAR 0 50
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52062: LD_ADDR_VAR 0 51
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52093: LD_ADDR_VAR 0 52
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52126: LD_ADDR_VAR 0 53
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52170: LD_ADDR_VAR 0 54
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52211: LD_ADDR_VAR 0 55
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52251: LD_ADDR_VAR 0 56
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52292: LD_ADDR_VAR 0 57
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52336: LD_ADDR_VAR 0 58
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52382: LD_ADDR_VAR 0 59
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52426: LD_ADDR_VAR 0 60
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52467: LD_ADDR_VAR 0 61
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52507: LD_ADDR_VAR 0 62
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52548: LD_ADDR_VAR 0 63
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52592: LD_ADDR_VAR 0 64
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: ST_TO_ADDR
// end ; 2 :
52638: GO 55904
52640: LD_INT 2
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 55903
52648: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52649: LD_ADDR_VAR 0 29
52653: PUSH
52654: LD_INT 4
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 5
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 5
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 5
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: LD_INT 4
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 4
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 5
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 5
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 5
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 4
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 4
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: NEG
53035: PUSH
53036: LD_INT 4
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: LD_INT 5
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: LD_INT 4
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 4
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 5
53094: NEG
53095: PUSH
53096: LD_INT 4
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 5
53106: NEG
53107: PUSH
53108: LD_INT 5
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: LD_INT 5
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 5
53130: NEG
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53187: LD_ADDR_VAR 0 30
53191: PUSH
53192: LD_INT 4
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 5
53214: PUSH
53215: LD_INT 4
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 5
53224: PUSH
53225: LD_INT 5
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: LD_INT 5
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 5
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 4
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 4
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 4
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 4
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 5
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 5
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 5
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: NEG
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: LD_INT 4
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 4
53539: NEG
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 4
53551: NEG
53552: PUSH
53553: LD_INT 4
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 4
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 5
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 4
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 4
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 5
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 5
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53734: LD_ADDR_VAR 0 31
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 5
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 5
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 4
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 4
53890: NEG
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 4
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 4
53936: NEG
53937: PUSH
53938: LD_INT 4
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: NEG
53949: PUSH
53950: LD_INT 5
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 4
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 5
53996: NEG
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 5
54008: NEG
54009: PUSH
54010: LD_INT 5
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 5
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: NEG
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 4
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 5
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 5
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 4
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 3
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 5
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54284: LD_ADDR_VAR 0 32
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 4
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 5
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 5
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 4
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 4
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 4
54465: NEG
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 4
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 5
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 4
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 5
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: LD_INT 4
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 4
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 5
54716: PUSH
54717: LD_INT 4
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 5
54726: PUSH
54727: LD_INT 5
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 4
54736: PUSH
54737: LD_INT 5
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: LD_INT 4
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 5
54766: PUSH
54767: LD_INT 3
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: LD_INT 5
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54831: LD_ADDR_VAR 0 33
54835: PUSH
54836: LD_INT 4
54838: NEG
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 4
54850: NEG
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 5
54898: NEG
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 5
54910: NEG
54911: PUSH
54912: LD_INT 5
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: LD_INT 5
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 4
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 5
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 5
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 4
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 4
55171: PUSH
55172: LD_INT 4
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: LD_INT 4
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 4
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 5
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 5
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 4
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 5
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55369: LD_ADDR_VAR 0 34
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 4
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 5
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 4
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 4
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 5
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 5
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 4
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 5
55591: PUSH
55592: LD_INT 4
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 5
55601: PUSH
55602: LD_INT 5
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 4
55611: PUSH
55612: LD_INT 5
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 5
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 4
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 4
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 4
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 5
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// end ; end ;
55901: GO 55904
55903: POP
// case btype of b_depot , b_warehouse :
55904: LD_VAR 0 1
55908: PUSH
55909: LD_INT 0
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55923
55915: LD_INT 1
55917: DOUBLE
55918: EQUAL
55919: IFTRUE 55923
55921: GO 56124
55923: POP
// case nation of nation_american :
55924: LD_VAR 0 5
55928: PUSH
55929: LD_INT 1
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55937
55935: GO 55993
55937: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
55938: LD_ADDR_VAR 0 9
55942: PUSH
55943: LD_VAR 0 11
55947: PUSH
55948: LD_VAR 0 12
55952: PUSH
55953: LD_VAR 0 13
55957: PUSH
55958: LD_VAR 0 14
55962: PUSH
55963: LD_VAR 0 15
55967: PUSH
55968: LD_VAR 0 16
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_VAR 0 4
55985: PUSH
55986: LD_INT 1
55988: PLUS
55989: ARRAY
55990: ST_TO_ADDR
55991: GO 56122
55993: LD_INT 2
55995: DOUBLE
55996: EQUAL
55997: IFTRUE 56001
55999: GO 56057
56001: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56002: LD_ADDR_VAR 0 9
56006: PUSH
56007: LD_VAR 0 17
56011: PUSH
56012: LD_VAR 0 18
56016: PUSH
56017: LD_VAR 0 19
56021: PUSH
56022: LD_VAR 0 20
56026: PUSH
56027: LD_VAR 0 21
56031: PUSH
56032: LD_VAR 0 22
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: PUSH
56045: LD_VAR 0 4
56049: PUSH
56050: LD_INT 1
56052: PLUS
56053: ARRAY
56054: ST_TO_ADDR
56055: GO 56122
56057: LD_INT 3
56059: DOUBLE
56060: EQUAL
56061: IFTRUE 56065
56063: GO 56121
56065: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56066: LD_ADDR_VAR 0 9
56070: PUSH
56071: LD_VAR 0 23
56075: PUSH
56076: LD_VAR 0 24
56080: PUSH
56081: LD_VAR 0 25
56085: PUSH
56086: LD_VAR 0 26
56090: PUSH
56091: LD_VAR 0 27
56095: PUSH
56096: LD_VAR 0 28
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: PUSH
56109: LD_VAR 0 4
56113: PUSH
56114: LD_INT 1
56116: PLUS
56117: ARRAY
56118: ST_TO_ADDR
56119: GO 56122
56121: POP
56122: GO 56677
56124: LD_INT 2
56126: DOUBLE
56127: EQUAL
56128: IFTRUE 56138
56130: LD_INT 3
56132: DOUBLE
56133: EQUAL
56134: IFTRUE 56138
56136: GO 56194
56138: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56139: LD_ADDR_VAR 0 9
56143: PUSH
56144: LD_VAR 0 29
56148: PUSH
56149: LD_VAR 0 30
56153: PUSH
56154: LD_VAR 0 31
56158: PUSH
56159: LD_VAR 0 32
56163: PUSH
56164: LD_VAR 0 33
56168: PUSH
56169: LD_VAR 0 34
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: PUSH
56182: LD_VAR 0 4
56186: PUSH
56187: LD_INT 1
56189: PLUS
56190: ARRAY
56191: ST_TO_ADDR
56192: GO 56677
56194: LD_INT 16
56196: DOUBLE
56197: EQUAL
56198: IFTRUE 56256
56200: LD_INT 17
56202: DOUBLE
56203: EQUAL
56204: IFTRUE 56256
56206: LD_INT 18
56208: DOUBLE
56209: EQUAL
56210: IFTRUE 56256
56212: LD_INT 19
56214: DOUBLE
56215: EQUAL
56216: IFTRUE 56256
56218: LD_INT 22
56220: DOUBLE
56221: EQUAL
56222: IFTRUE 56256
56224: LD_INT 20
56226: DOUBLE
56227: EQUAL
56228: IFTRUE 56256
56230: LD_INT 21
56232: DOUBLE
56233: EQUAL
56234: IFTRUE 56256
56236: LD_INT 23
56238: DOUBLE
56239: EQUAL
56240: IFTRUE 56256
56242: LD_INT 24
56244: DOUBLE
56245: EQUAL
56246: IFTRUE 56256
56248: LD_INT 25
56250: DOUBLE
56251: EQUAL
56252: IFTRUE 56256
56254: GO 56312
56256: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56257: LD_ADDR_VAR 0 9
56261: PUSH
56262: LD_VAR 0 35
56266: PUSH
56267: LD_VAR 0 36
56271: PUSH
56272: LD_VAR 0 37
56276: PUSH
56277: LD_VAR 0 38
56281: PUSH
56282: LD_VAR 0 39
56286: PUSH
56287: LD_VAR 0 40
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: PUSH
56300: LD_VAR 0 4
56304: PUSH
56305: LD_INT 1
56307: PLUS
56308: ARRAY
56309: ST_TO_ADDR
56310: GO 56677
56312: LD_INT 6
56314: DOUBLE
56315: EQUAL
56316: IFTRUE 56368
56318: LD_INT 7
56320: DOUBLE
56321: EQUAL
56322: IFTRUE 56368
56324: LD_INT 8
56326: DOUBLE
56327: EQUAL
56328: IFTRUE 56368
56330: LD_INT 13
56332: DOUBLE
56333: EQUAL
56334: IFTRUE 56368
56336: LD_INT 12
56338: DOUBLE
56339: EQUAL
56340: IFTRUE 56368
56342: LD_INT 15
56344: DOUBLE
56345: EQUAL
56346: IFTRUE 56368
56348: LD_INT 11
56350: DOUBLE
56351: EQUAL
56352: IFTRUE 56368
56354: LD_INT 14
56356: DOUBLE
56357: EQUAL
56358: IFTRUE 56368
56360: LD_INT 10
56362: DOUBLE
56363: EQUAL
56364: IFTRUE 56368
56366: GO 56424
56368: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
56369: LD_ADDR_VAR 0 9
56373: PUSH
56374: LD_VAR 0 41
56378: PUSH
56379: LD_VAR 0 42
56383: PUSH
56384: LD_VAR 0 43
56388: PUSH
56389: LD_VAR 0 44
56393: PUSH
56394: LD_VAR 0 45
56398: PUSH
56399: LD_VAR 0 46
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: PUSH
56412: LD_VAR 0 4
56416: PUSH
56417: LD_INT 1
56419: PLUS
56420: ARRAY
56421: ST_TO_ADDR
56422: GO 56677
56424: LD_INT 36
56426: DOUBLE
56427: EQUAL
56428: IFTRUE 56432
56430: GO 56488
56432: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56433: LD_ADDR_VAR 0 9
56437: PUSH
56438: LD_VAR 0 47
56442: PUSH
56443: LD_VAR 0 48
56447: PUSH
56448: LD_VAR 0 49
56452: PUSH
56453: LD_VAR 0 50
56457: PUSH
56458: LD_VAR 0 51
56462: PUSH
56463: LD_VAR 0 52
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: PUSH
56476: LD_VAR 0 4
56480: PUSH
56481: LD_INT 1
56483: PLUS
56484: ARRAY
56485: ST_TO_ADDR
56486: GO 56677
56488: LD_INT 4
56490: DOUBLE
56491: EQUAL
56492: IFTRUE 56514
56494: LD_INT 5
56496: DOUBLE
56497: EQUAL
56498: IFTRUE 56514
56500: LD_INT 34
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56514
56506: LD_INT 37
56508: DOUBLE
56509: EQUAL
56510: IFTRUE 56514
56512: GO 56570
56514: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56515: LD_ADDR_VAR 0 9
56519: PUSH
56520: LD_VAR 0 53
56524: PUSH
56525: LD_VAR 0 54
56529: PUSH
56530: LD_VAR 0 55
56534: PUSH
56535: LD_VAR 0 56
56539: PUSH
56540: LD_VAR 0 57
56544: PUSH
56545: LD_VAR 0 58
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: PUSH
56558: LD_VAR 0 4
56562: PUSH
56563: LD_INT 1
56565: PLUS
56566: ARRAY
56567: ST_TO_ADDR
56568: GO 56677
56570: LD_INT 31
56572: DOUBLE
56573: EQUAL
56574: IFTRUE 56620
56576: LD_INT 32
56578: DOUBLE
56579: EQUAL
56580: IFTRUE 56620
56582: LD_INT 33
56584: DOUBLE
56585: EQUAL
56586: IFTRUE 56620
56588: LD_INT 27
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56620
56594: LD_INT 26
56596: DOUBLE
56597: EQUAL
56598: IFTRUE 56620
56600: LD_INT 28
56602: DOUBLE
56603: EQUAL
56604: IFTRUE 56620
56606: LD_INT 29
56608: DOUBLE
56609: EQUAL
56610: IFTRUE 56620
56612: LD_INT 30
56614: DOUBLE
56615: EQUAL
56616: IFTRUE 56620
56618: GO 56676
56620: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
56621: LD_ADDR_VAR 0 9
56625: PUSH
56626: LD_VAR 0 59
56630: PUSH
56631: LD_VAR 0 60
56635: PUSH
56636: LD_VAR 0 61
56640: PUSH
56641: LD_VAR 0 62
56645: PUSH
56646: LD_VAR 0 63
56650: PUSH
56651: LD_VAR 0 64
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: PUSH
56664: LD_VAR 0 4
56668: PUSH
56669: LD_INT 1
56671: PLUS
56672: ARRAY
56673: ST_TO_ADDR
56674: GO 56677
56676: POP
// temp_list2 = [ ] ;
56677: LD_ADDR_VAR 0 10
56681: PUSH
56682: EMPTY
56683: ST_TO_ADDR
// for i in temp_list do
56684: LD_ADDR_VAR 0 8
56688: PUSH
56689: LD_VAR 0 9
56693: PUSH
56694: FOR_IN
56695: IFFALSE 56747
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56697: LD_ADDR_VAR 0 10
56701: PUSH
56702: LD_VAR 0 10
56706: PUSH
56707: LD_VAR 0 8
56711: PUSH
56712: LD_INT 1
56714: ARRAY
56715: PUSH
56716: LD_VAR 0 2
56720: PLUS
56721: PUSH
56722: LD_VAR 0 8
56726: PUSH
56727: LD_INT 2
56729: ARRAY
56730: PUSH
56731: LD_VAR 0 3
56735: PLUS
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: ADD
56744: ST_TO_ADDR
56745: GO 56694
56747: POP
56748: POP
// result = temp_list2 ;
56749: LD_ADDR_VAR 0 7
56753: PUSH
56754: LD_VAR 0 10
56758: ST_TO_ADDR
// end ;
56759: LD_VAR 0 7
56763: RET
// export function EnemyInRange ( unit , dist ) ; begin
56764: LD_INT 0
56766: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56767: LD_ADDR_VAR 0 3
56771: PUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: CALL_OW 255
56781: PPUSH
56782: LD_VAR 0 1
56786: PPUSH
56787: CALL_OW 250
56791: PPUSH
56792: LD_VAR 0 1
56796: PPUSH
56797: CALL_OW 251
56801: PPUSH
56802: LD_VAR 0 2
56806: PPUSH
56807: CALL 30868 0 4
56811: PUSH
56812: LD_INT 4
56814: ARRAY
56815: ST_TO_ADDR
// end ;
56816: LD_VAR 0 3
56820: RET
// export function PlayerSeeMe ( unit ) ; begin
56821: LD_INT 0
56823: PPUSH
// result := See ( your_side , unit ) ;
56824: LD_ADDR_VAR 0 2
56828: PUSH
56829: LD_OWVAR 2
56833: PPUSH
56834: LD_VAR 0 1
56838: PPUSH
56839: CALL_OW 292
56843: ST_TO_ADDR
// end ;
56844: LD_VAR 0 2
56848: RET
// export function ReverseDir ( unit ) ; begin
56849: LD_INT 0
56851: PPUSH
// if not unit then
56852: LD_VAR 0 1
56856: NOT
56857: IFFALSE 56861
// exit ;
56859: GO 56884
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56861: LD_ADDR_VAR 0 2
56865: PUSH
56866: LD_VAR 0 1
56870: PPUSH
56871: CALL_OW 254
56875: PUSH
56876: LD_INT 3
56878: PLUS
56879: PUSH
56880: LD_INT 6
56882: MOD
56883: ST_TO_ADDR
// end ;
56884: LD_VAR 0 2
56888: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56889: LD_INT 0
56891: PPUSH
56892: PPUSH
56893: PPUSH
56894: PPUSH
56895: PPUSH
// if not hexes then
56896: LD_VAR 0 2
56900: NOT
56901: IFFALSE 56905
// exit ;
56903: GO 57053
// dist := 9999 ;
56905: LD_ADDR_VAR 0 5
56909: PUSH
56910: LD_INT 9999
56912: ST_TO_ADDR
// for i = 1 to hexes do
56913: LD_ADDR_VAR 0 4
56917: PUSH
56918: DOUBLE
56919: LD_INT 1
56921: DEC
56922: ST_TO_ADDR
56923: LD_VAR 0 2
56927: PUSH
56928: FOR_TO
56929: IFFALSE 57041
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56931: LD_VAR 0 1
56935: PPUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_VAR 0 4
56945: ARRAY
56946: PUSH
56947: LD_INT 1
56949: ARRAY
56950: PPUSH
56951: LD_VAR 0 2
56955: PUSH
56956: LD_VAR 0 4
56960: ARRAY
56961: PUSH
56962: LD_INT 2
56964: ARRAY
56965: PPUSH
56966: CALL_OW 297
56970: PUSH
56971: LD_VAR 0 5
56975: LESS
56976: IFFALSE 57039
// begin hex := hexes [ i ] ;
56978: LD_ADDR_VAR 0 7
56982: PUSH
56983: LD_VAR 0 2
56987: PUSH
56988: LD_VAR 0 4
56992: ARRAY
56993: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56994: LD_ADDR_VAR 0 5
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: LD_VAR 0 2
57008: PUSH
57009: LD_VAR 0 4
57013: ARRAY
57014: PUSH
57015: LD_INT 1
57017: ARRAY
57018: PPUSH
57019: LD_VAR 0 2
57023: PUSH
57024: LD_VAR 0 4
57028: ARRAY
57029: PUSH
57030: LD_INT 2
57032: ARRAY
57033: PPUSH
57034: CALL_OW 297
57038: ST_TO_ADDR
// end ; end ;
57039: GO 56928
57041: POP
57042: POP
// result := hex ;
57043: LD_ADDR_VAR 0 3
57047: PUSH
57048: LD_VAR 0 7
57052: ST_TO_ADDR
// end ;
57053: LD_VAR 0 3
57057: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57058: LD_INT 0
57060: PPUSH
57061: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57062: LD_VAR 0 1
57066: NOT
57067: PUSH
57068: LD_VAR 0 1
57072: PUSH
57073: LD_INT 21
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 23
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PPUSH
57097: CALL_OW 69
57101: IN
57102: NOT
57103: OR
57104: IFFALSE 57108
// exit ;
57106: GO 57155
// for i = 1 to 3 do
57108: LD_ADDR_VAR 0 3
57112: PUSH
57113: DOUBLE
57114: LD_INT 1
57116: DEC
57117: ST_TO_ADDR
57118: LD_INT 3
57120: PUSH
57121: FOR_TO
57122: IFFALSE 57153
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57124: LD_VAR 0 1
57128: PPUSH
57129: CALL_OW 250
57133: PPUSH
57134: LD_VAR 0 1
57138: PPUSH
57139: CALL_OW 251
57143: PPUSH
57144: LD_INT 1
57146: PPUSH
57147: CALL_OW 453
57151: GO 57121
57153: POP
57154: POP
// end ;
57155: LD_VAR 0 2
57159: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57160: LD_INT 0
57162: PPUSH
57163: PPUSH
57164: PPUSH
57165: PPUSH
57166: PPUSH
57167: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57168: LD_VAR 0 1
57172: NOT
57173: PUSH
57174: LD_VAR 0 2
57178: NOT
57179: OR
57180: PUSH
57181: LD_VAR 0 1
57185: PPUSH
57186: CALL_OW 314
57190: OR
57191: IFFALSE 57195
// exit ;
57193: GO 57636
// x := GetX ( enemy_unit ) ;
57195: LD_ADDR_VAR 0 7
57199: PUSH
57200: LD_VAR 0 2
57204: PPUSH
57205: CALL_OW 250
57209: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57210: LD_ADDR_VAR 0 8
57214: PUSH
57215: LD_VAR 0 2
57219: PPUSH
57220: CALL_OW 251
57224: ST_TO_ADDR
// if not x or not y then
57225: LD_VAR 0 7
57229: NOT
57230: PUSH
57231: LD_VAR 0 8
57235: NOT
57236: OR
57237: IFFALSE 57241
// exit ;
57239: GO 57636
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57241: LD_ADDR_VAR 0 6
57245: PUSH
57246: LD_VAR 0 7
57250: PPUSH
57251: LD_INT 0
57253: PPUSH
57254: LD_INT 4
57256: PPUSH
57257: CALL_OW 272
57261: PUSH
57262: LD_VAR 0 8
57266: PPUSH
57267: LD_INT 0
57269: PPUSH
57270: LD_INT 4
57272: PPUSH
57273: CALL_OW 273
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_VAR 0 7
57286: PPUSH
57287: LD_INT 1
57289: PPUSH
57290: LD_INT 4
57292: PPUSH
57293: CALL_OW 272
57297: PUSH
57298: LD_VAR 0 8
57302: PPUSH
57303: LD_INT 1
57305: PPUSH
57306: LD_INT 4
57308: PPUSH
57309: CALL_OW 273
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_VAR 0 7
57322: PPUSH
57323: LD_INT 2
57325: PPUSH
57326: LD_INT 4
57328: PPUSH
57329: CALL_OW 272
57333: PUSH
57334: LD_VAR 0 8
57338: PPUSH
57339: LD_INT 2
57341: PPUSH
57342: LD_INT 4
57344: PPUSH
57345: CALL_OW 273
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_VAR 0 7
57358: PPUSH
57359: LD_INT 3
57361: PPUSH
57362: LD_INT 4
57364: PPUSH
57365: CALL_OW 272
57369: PUSH
57370: LD_VAR 0 8
57374: PPUSH
57375: LD_INT 3
57377: PPUSH
57378: LD_INT 4
57380: PPUSH
57381: CALL_OW 273
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_VAR 0 7
57394: PPUSH
57395: LD_INT 4
57397: PPUSH
57398: LD_INT 4
57400: PPUSH
57401: CALL_OW 272
57405: PUSH
57406: LD_VAR 0 8
57410: PPUSH
57411: LD_INT 4
57413: PPUSH
57414: LD_INT 4
57416: PPUSH
57417: CALL_OW 273
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_VAR 0 7
57430: PPUSH
57431: LD_INT 5
57433: PPUSH
57434: LD_INT 4
57436: PPUSH
57437: CALL_OW 272
57441: PUSH
57442: LD_VAR 0 8
57446: PPUSH
57447: LD_INT 5
57449: PPUSH
57450: LD_INT 4
57452: PPUSH
57453: CALL_OW 273
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// for i = tmp downto 1 do
57470: LD_ADDR_VAR 0 4
57474: PUSH
57475: DOUBLE
57476: LD_VAR 0 6
57480: INC
57481: ST_TO_ADDR
57482: LD_INT 1
57484: PUSH
57485: FOR_DOWNTO
57486: IFFALSE 57587
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57488: LD_VAR 0 6
57492: PUSH
57493: LD_VAR 0 4
57497: ARRAY
57498: PUSH
57499: LD_INT 1
57501: ARRAY
57502: PPUSH
57503: LD_VAR 0 6
57507: PUSH
57508: LD_VAR 0 4
57512: ARRAY
57513: PUSH
57514: LD_INT 2
57516: ARRAY
57517: PPUSH
57518: CALL_OW 488
57522: NOT
57523: PUSH
57524: LD_VAR 0 6
57528: PUSH
57529: LD_VAR 0 4
57533: ARRAY
57534: PUSH
57535: LD_INT 1
57537: ARRAY
57538: PPUSH
57539: LD_VAR 0 6
57543: PUSH
57544: LD_VAR 0 4
57548: ARRAY
57549: PUSH
57550: LD_INT 2
57552: ARRAY
57553: PPUSH
57554: CALL_OW 428
57558: PUSH
57559: LD_INT 0
57561: NONEQUAL
57562: OR
57563: IFFALSE 57585
// tmp := Delete ( tmp , i ) ;
57565: LD_ADDR_VAR 0 6
57569: PUSH
57570: LD_VAR 0 6
57574: PPUSH
57575: LD_VAR 0 4
57579: PPUSH
57580: CALL_OW 3
57584: ST_TO_ADDR
57585: GO 57485
57587: POP
57588: POP
// j := GetClosestHex ( unit , tmp ) ;
57589: LD_ADDR_VAR 0 5
57593: PUSH
57594: LD_VAR 0 1
57598: PPUSH
57599: LD_VAR 0 6
57603: PPUSH
57604: CALL 56889 0 2
57608: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57609: LD_VAR 0 1
57613: PPUSH
57614: LD_VAR 0 5
57618: PUSH
57619: LD_INT 1
57621: ARRAY
57622: PPUSH
57623: LD_VAR 0 5
57627: PUSH
57628: LD_INT 2
57630: ARRAY
57631: PPUSH
57632: CALL_OW 111
// end ;
57636: LD_VAR 0 3
57640: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57641: LD_INT 0
57643: PPUSH
57644: PPUSH
57645: PPUSH
// uc_side = 0 ;
57646: LD_ADDR_OWVAR 20
57650: PUSH
57651: LD_INT 0
57653: ST_TO_ADDR
// uc_nation = 0 ;
57654: LD_ADDR_OWVAR 21
57658: PUSH
57659: LD_INT 0
57661: ST_TO_ADDR
// InitHc ;
57662: CALL_OW 19
// InitVc ;
57666: CALL_OW 20
// if mastodonts then
57670: LD_VAR 0 6
57674: IFFALSE 57741
// for i = 1 to mastodonts do
57676: LD_ADDR_VAR 0 11
57680: PUSH
57681: DOUBLE
57682: LD_INT 1
57684: DEC
57685: ST_TO_ADDR
57686: LD_VAR 0 6
57690: PUSH
57691: FOR_TO
57692: IFFALSE 57739
// begin vc_chassis := 31 ;
57694: LD_ADDR_OWVAR 37
57698: PUSH
57699: LD_INT 31
57701: ST_TO_ADDR
// vc_control := control_rider ;
57702: LD_ADDR_OWVAR 38
57706: PUSH
57707: LD_INT 4
57709: ST_TO_ADDR
// animal := CreateVehicle ;
57710: LD_ADDR_VAR 0 12
57714: PUSH
57715: CALL_OW 45
57719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57720: LD_VAR 0 12
57724: PPUSH
57725: LD_VAR 0 8
57729: PPUSH
57730: LD_INT 0
57732: PPUSH
57733: CALL 59810 0 3
// end ;
57737: GO 57691
57739: POP
57740: POP
// if horses then
57741: LD_VAR 0 5
57745: IFFALSE 57812
// for i = 1 to horses do
57747: LD_ADDR_VAR 0 11
57751: PUSH
57752: DOUBLE
57753: LD_INT 1
57755: DEC
57756: ST_TO_ADDR
57757: LD_VAR 0 5
57761: PUSH
57762: FOR_TO
57763: IFFALSE 57810
// begin hc_class := 21 ;
57765: LD_ADDR_OWVAR 28
57769: PUSH
57770: LD_INT 21
57772: ST_TO_ADDR
// hc_gallery :=  ;
57773: LD_ADDR_OWVAR 33
57777: PUSH
57778: LD_STRING 
57780: ST_TO_ADDR
// animal := CreateHuman ;
57781: LD_ADDR_VAR 0 12
57785: PUSH
57786: CALL_OW 44
57790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57791: LD_VAR 0 12
57795: PPUSH
57796: LD_VAR 0 8
57800: PPUSH
57801: LD_INT 0
57803: PPUSH
57804: CALL 59810 0 3
// end ;
57808: GO 57762
57810: POP
57811: POP
// if birds then
57812: LD_VAR 0 1
57816: IFFALSE 57883
// for i = 1 to birds do
57818: LD_ADDR_VAR 0 11
57822: PUSH
57823: DOUBLE
57824: LD_INT 1
57826: DEC
57827: ST_TO_ADDR
57828: LD_VAR 0 1
57832: PUSH
57833: FOR_TO
57834: IFFALSE 57881
// begin hc_class = 18 ;
57836: LD_ADDR_OWVAR 28
57840: PUSH
57841: LD_INT 18
57843: ST_TO_ADDR
// hc_gallery =  ;
57844: LD_ADDR_OWVAR 33
57848: PUSH
57849: LD_STRING 
57851: ST_TO_ADDR
// animal := CreateHuman ;
57852: LD_ADDR_VAR 0 12
57856: PUSH
57857: CALL_OW 44
57861: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57862: LD_VAR 0 12
57866: PPUSH
57867: LD_VAR 0 8
57871: PPUSH
57872: LD_INT 0
57874: PPUSH
57875: CALL 59810 0 3
// end ;
57879: GO 57833
57881: POP
57882: POP
// if tigers then
57883: LD_VAR 0 2
57887: IFFALSE 57971
// for i = 1 to tigers do
57889: LD_ADDR_VAR 0 11
57893: PUSH
57894: DOUBLE
57895: LD_INT 1
57897: DEC
57898: ST_TO_ADDR
57899: LD_VAR 0 2
57903: PUSH
57904: FOR_TO
57905: IFFALSE 57969
// begin hc_class = class_tiger ;
57907: LD_ADDR_OWVAR 28
57911: PUSH
57912: LD_INT 14
57914: ST_TO_ADDR
// hc_gallery =  ;
57915: LD_ADDR_OWVAR 33
57919: PUSH
57920: LD_STRING 
57922: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57923: LD_ADDR_OWVAR 35
57927: PUSH
57928: LD_INT 7
57930: NEG
57931: PPUSH
57932: LD_INT 7
57934: PPUSH
57935: CALL_OW 12
57939: ST_TO_ADDR
// animal := CreateHuman ;
57940: LD_ADDR_VAR 0 12
57944: PUSH
57945: CALL_OW 44
57949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57950: LD_VAR 0 12
57954: PPUSH
57955: LD_VAR 0 8
57959: PPUSH
57960: LD_INT 0
57962: PPUSH
57963: CALL 59810 0 3
// end ;
57967: GO 57904
57969: POP
57970: POP
// if apemans then
57971: LD_VAR 0 3
57975: IFFALSE 58098
// for i = 1 to apemans do
57977: LD_ADDR_VAR 0 11
57981: PUSH
57982: DOUBLE
57983: LD_INT 1
57985: DEC
57986: ST_TO_ADDR
57987: LD_VAR 0 3
57991: PUSH
57992: FOR_TO
57993: IFFALSE 58096
// begin hc_class = class_apeman ;
57995: LD_ADDR_OWVAR 28
57999: PUSH
58000: LD_INT 12
58002: ST_TO_ADDR
// hc_gallery =  ;
58003: LD_ADDR_OWVAR 33
58007: PUSH
58008: LD_STRING 
58010: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58011: LD_ADDR_OWVAR 35
58015: PUSH
58016: LD_INT 5
58018: NEG
58019: PPUSH
58020: LD_INT 5
58022: PPUSH
58023: CALL_OW 12
58027: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58028: LD_ADDR_OWVAR 31
58032: PUSH
58033: LD_INT 1
58035: PPUSH
58036: LD_INT 3
58038: PPUSH
58039: CALL_OW 12
58043: PUSH
58044: LD_INT 1
58046: PPUSH
58047: LD_INT 3
58049: PPUSH
58050: CALL_OW 12
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// animal := CreateHuman ;
58067: LD_ADDR_VAR 0 12
58071: PUSH
58072: CALL_OW 44
58076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58077: LD_VAR 0 12
58081: PPUSH
58082: LD_VAR 0 8
58086: PPUSH
58087: LD_INT 0
58089: PPUSH
58090: CALL 59810 0 3
// end ;
58094: GO 57992
58096: POP
58097: POP
// if enchidnas then
58098: LD_VAR 0 4
58102: IFFALSE 58169
// for i = 1 to enchidnas do
58104: LD_ADDR_VAR 0 11
58108: PUSH
58109: DOUBLE
58110: LD_INT 1
58112: DEC
58113: ST_TO_ADDR
58114: LD_VAR 0 4
58118: PUSH
58119: FOR_TO
58120: IFFALSE 58167
// begin hc_class = 13 ;
58122: LD_ADDR_OWVAR 28
58126: PUSH
58127: LD_INT 13
58129: ST_TO_ADDR
// hc_gallery =  ;
58130: LD_ADDR_OWVAR 33
58134: PUSH
58135: LD_STRING 
58137: ST_TO_ADDR
// animal := CreateHuman ;
58138: LD_ADDR_VAR 0 12
58142: PUSH
58143: CALL_OW 44
58147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58148: LD_VAR 0 12
58152: PPUSH
58153: LD_VAR 0 8
58157: PPUSH
58158: LD_INT 0
58160: PPUSH
58161: CALL 59810 0 3
// end ;
58165: GO 58119
58167: POP
58168: POP
// if fishes then
58169: LD_VAR 0 7
58173: IFFALSE 58240
// for i = 1 to fishes do
58175: LD_ADDR_VAR 0 11
58179: PUSH
58180: DOUBLE
58181: LD_INT 1
58183: DEC
58184: ST_TO_ADDR
58185: LD_VAR 0 7
58189: PUSH
58190: FOR_TO
58191: IFFALSE 58238
// begin hc_class = 20 ;
58193: LD_ADDR_OWVAR 28
58197: PUSH
58198: LD_INT 20
58200: ST_TO_ADDR
// hc_gallery =  ;
58201: LD_ADDR_OWVAR 33
58205: PUSH
58206: LD_STRING 
58208: ST_TO_ADDR
// animal := CreateHuman ;
58209: LD_ADDR_VAR 0 12
58213: PUSH
58214: CALL_OW 44
58218: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58219: LD_VAR 0 12
58223: PPUSH
58224: LD_VAR 0 9
58228: PPUSH
58229: LD_INT 0
58231: PPUSH
58232: CALL 59810 0 3
// end ;
58236: GO 58190
58238: POP
58239: POP
// end ;
58240: LD_VAR 0 10
58244: RET
// export function WantHeal ( sci , unit ) ; begin
58245: LD_INT 0
58247: PPUSH
// if GetTaskList ( sci ) > 0 then
58248: LD_VAR 0 1
58252: PPUSH
58253: CALL_OW 437
58257: PUSH
58258: LD_INT 0
58260: GREATER
58261: IFFALSE 58331
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58263: LD_VAR 0 1
58267: PPUSH
58268: CALL_OW 437
58272: PUSH
58273: LD_INT 1
58275: ARRAY
58276: PUSH
58277: LD_INT 1
58279: ARRAY
58280: PUSH
58281: LD_STRING l
58283: EQUAL
58284: PUSH
58285: LD_VAR 0 1
58289: PPUSH
58290: CALL_OW 437
58294: PUSH
58295: LD_INT 1
58297: ARRAY
58298: PUSH
58299: LD_INT 4
58301: ARRAY
58302: PUSH
58303: LD_VAR 0 2
58307: EQUAL
58308: AND
58309: IFFALSE 58321
// result := true else
58311: LD_ADDR_VAR 0 3
58315: PUSH
58316: LD_INT 1
58318: ST_TO_ADDR
58319: GO 58329
// result := false ;
58321: LD_ADDR_VAR 0 3
58325: PUSH
58326: LD_INT 0
58328: ST_TO_ADDR
// end else
58329: GO 58339
// result := false ;
58331: LD_ADDR_VAR 0 3
58335: PUSH
58336: LD_INT 0
58338: ST_TO_ADDR
// end ;
58339: LD_VAR 0 3
58343: RET
// export function HealTarget ( sci ) ; begin
58344: LD_INT 0
58346: PPUSH
// if not sci then
58347: LD_VAR 0 1
58351: NOT
58352: IFFALSE 58356
// exit ;
58354: GO 58421
// result := 0 ;
58356: LD_ADDR_VAR 0 2
58360: PUSH
58361: LD_INT 0
58363: ST_TO_ADDR
// if GetTaskList ( sci ) then
58364: LD_VAR 0 1
58368: PPUSH
58369: CALL_OW 437
58373: IFFALSE 58421
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58375: LD_VAR 0 1
58379: PPUSH
58380: CALL_OW 437
58384: PUSH
58385: LD_INT 1
58387: ARRAY
58388: PUSH
58389: LD_INT 1
58391: ARRAY
58392: PUSH
58393: LD_STRING l
58395: EQUAL
58396: IFFALSE 58421
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58398: LD_ADDR_VAR 0 2
58402: PUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 437
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PUSH
58417: LD_INT 4
58419: ARRAY
58420: ST_TO_ADDR
// end ;
58421: LD_VAR 0 2
58425: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58426: LD_INT 0
58428: PPUSH
58429: PPUSH
58430: PPUSH
58431: PPUSH
// if not base_units then
58432: LD_VAR 0 1
58436: NOT
58437: IFFALSE 58441
// exit ;
58439: GO 58528
// result := false ;
58441: LD_ADDR_VAR 0 2
58445: PUSH
58446: LD_INT 0
58448: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58449: LD_ADDR_VAR 0 5
58453: PUSH
58454: LD_VAR 0 1
58458: PPUSH
58459: LD_INT 21
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PPUSH
58469: CALL_OW 72
58473: ST_TO_ADDR
// if not tmp then
58474: LD_VAR 0 5
58478: NOT
58479: IFFALSE 58483
// exit ;
58481: GO 58528
// for i in tmp do
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_VAR 0 5
58492: PUSH
58493: FOR_IN
58494: IFFALSE 58526
// begin result := EnemyInRange ( i , 22 ) ;
58496: LD_ADDR_VAR 0 2
58500: PUSH
58501: LD_VAR 0 3
58505: PPUSH
58506: LD_INT 22
58508: PPUSH
58509: CALL 56764 0 2
58513: ST_TO_ADDR
// if result then
58514: LD_VAR 0 2
58518: IFFALSE 58524
// exit ;
58520: POP
58521: POP
58522: GO 58528
// end ;
58524: GO 58493
58526: POP
58527: POP
// end ;
58528: LD_VAR 0 2
58532: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58533: LD_INT 0
58535: PPUSH
58536: PPUSH
// if not units then
58537: LD_VAR 0 1
58541: NOT
58542: IFFALSE 58546
// exit ;
58544: GO 58616
// result := [ ] ;
58546: LD_ADDR_VAR 0 3
58550: PUSH
58551: EMPTY
58552: ST_TO_ADDR
// for i in units do
58553: LD_ADDR_VAR 0 4
58557: PUSH
58558: LD_VAR 0 1
58562: PUSH
58563: FOR_IN
58564: IFFALSE 58614
// if GetTag ( i ) = tag then
58566: LD_VAR 0 4
58570: PPUSH
58571: CALL_OW 110
58575: PUSH
58576: LD_VAR 0 2
58580: EQUAL
58581: IFFALSE 58612
// result := Insert ( result , result + 1 , i ) ;
58583: LD_ADDR_VAR 0 3
58587: PUSH
58588: LD_VAR 0 3
58592: PPUSH
58593: LD_VAR 0 3
58597: PUSH
58598: LD_INT 1
58600: PLUS
58601: PPUSH
58602: LD_VAR 0 4
58606: PPUSH
58607: CALL_OW 2
58611: ST_TO_ADDR
58612: GO 58563
58614: POP
58615: POP
// end ;
58616: LD_VAR 0 3
58620: RET
// export function IsDriver ( un ) ; begin
58621: LD_INT 0
58623: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58624: LD_ADDR_VAR 0 2
58628: PUSH
58629: LD_VAR 0 1
58633: PUSH
58634: LD_INT 55
58636: PUSH
58637: EMPTY
58638: LIST
58639: PPUSH
58640: CALL_OW 69
58644: IN
58645: ST_TO_ADDR
// end ;
58646: LD_VAR 0 2
58650: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58651: LD_INT 0
58653: PPUSH
58654: PPUSH
// list := [ ] ;
58655: LD_ADDR_VAR 0 5
58659: PUSH
58660: EMPTY
58661: ST_TO_ADDR
// case d of 0 :
58662: LD_VAR 0 3
58666: PUSH
58667: LD_INT 0
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58675
58673: GO 58808
58675: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58676: LD_ADDR_VAR 0 5
58680: PUSH
58681: LD_VAR 0 1
58685: PUSH
58686: LD_INT 4
58688: MINUS
58689: PUSH
58690: LD_VAR 0 2
58694: PUSH
58695: LD_INT 4
58697: MINUS
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: PUSH
58707: LD_VAR 0 1
58711: PUSH
58712: LD_INT 3
58714: MINUS
58715: PUSH
58716: LD_VAR 0 2
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 4
58736: PLUS
58737: PUSH
58738: LD_VAR 0 2
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: PUSH
58751: LD_VAR 0 1
58755: PUSH
58756: LD_INT 3
58758: PLUS
58759: PUSH
58760: LD_VAR 0 2
58764: PUSH
58765: LD_INT 3
58767: PLUS
58768: PUSH
58769: LD_INT 5
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: PUSH
58777: LD_VAR 0 1
58781: PUSH
58782: LD_VAR 0 2
58786: PUSH
58787: LD_INT 4
58789: PLUS
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
// end ; 1 :
58806: GO 59506
58808: LD_INT 1
58810: DOUBLE
58811: EQUAL
58812: IFTRUE 58816
58814: GO 58949
58816: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58817: LD_ADDR_VAR 0 5
58821: PUSH
58822: LD_VAR 0 1
58826: PUSH
58827: LD_VAR 0 2
58831: PUSH
58832: LD_INT 4
58834: MINUS
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: PUSH
58844: LD_VAR 0 1
58848: PUSH
58849: LD_INT 3
58851: MINUS
58852: PUSH
58853: LD_VAR 0 2
58857: PUSH
58858: LD_INT 3
58860: MINUS
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: PUSH
58870: LD_VAR 0 1
58874: PUSH
58875: LD_INT 4
58877: MINUS
58878: PUSH
58879: LD_VAR 0 2
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: PUSH
58892: LD_VAR 0 1
58896: PUSH
58897: LD_VAR 0 2
58901: PUSH
58902: LD_INT 3
58904: PLUS
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: PUSH
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 4
58921: PLUS
58922: PUSH
58923: LD_VAR 0 2
58927: PUSH
58928: LD_INT 4
58930: PLUS
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: ST_TO_ADDR
// end ; 2 :
58947: GO 59506
58949: LD_INT 2
58951: DOUBLE
58952: EQUAL
58953: IFTRUE 58957
58955: GO 59086
58957: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58958: LD_ADDR_VAR 0 5
58962: PUSH
58963: LD_VAR 0 1
58967: PUSH
58968: LD_VAR 0 2
58972: PUSH
58973: LD_INT 3
58975: MINUS
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: PUSH
58985: LD_VAR 0 1
58989: PUSH
58990: LD_INT 4
58992: PLUS
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_INT 4
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_VAR 0 2
59016: PUSH
59017: LD_INT 4
59019: PLUS
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: PUSH
59029: LD_VAR 0 1
59033: PUSH
59034: LD_INT 3
59036: MINUS
59037: PUSH
59038: LD_VAR 0 2
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: PUSH
59051: LD_VAR 0 1
59055: PUSH
59056: LD_INT 4
59058: MINUS
59059: PUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_INT 4
59067: MINUS
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: ST_TO_ADDR
// end ; 3 :
59084: GO 59506
59086: LD_INT 3
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59094
59092: GO 59227
59094: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59095: LD_ADDR_VAR 0 5
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: LD_INT 3
59107: PLUS
59108: PUSH
59109: LD_VAR 0 2
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 4
59129: PLUS
59130: PUSH
59131: LD_VAR 0 2
59135: PUSH
59136: LD_INT 4
59138: PLUS
59139: PUSH
59140: LD_INT 5
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: PUSH
59148: LD_VAR 0 1
59152: PUSH
59153: LD_INT 4
59155: MINUS
59156: PUSH
59157: LD_VAR 0 2
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: PUSH
59170: LD_VAR 0 1
59174: PUSH
59175: LD_VAR 0 2
59179: PUSH
59180: LD_INT 4
59182: MINUS
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: LD_VAR 0 1
59196: PUSH
59197: LD_INT 3
59199: MINUS
59200: PUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_INT 3
59208: MINUS
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// end ; 4 :
59225: GO 59506
59227: LD_INT 4
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59368
59235: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59236: LD_ADDR_VAR 0 5
59240: PUSH
59241: LD_VAR 0 1
59245: PUSH
59246: LD_VAR 0 2
59250: PUSH
59251: LD_INT 4
59253: PLUS
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: PUSH
59263: LD_VAR 0 1
59267: PUSH
59268: LD_INT 3
59270: PLUS
59271: PUSH
59272: LD_VAR 0 2
59276: PUSH
59277: LD_INT 3
59279: PLUS
59280: PUSH
59281: LD_INT 5
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: PUSH
59289: LD_VAR 0 1
59293: PUSH
59294: LD_INT 4
59296: PLUS
59297: PUSH
59298: LD_VAR 0 2
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: PUSH
59311: LD_VAR 0 1
59315: PUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_INT 3
59323: MINUS
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: PUSH
59333: LD_VAR 0 1
59337: PUSH
59338: LD_INT 4
59340: MINUS
59341: PUSH
59342: LD_VAR 0 2
59346: PUSH
59347: LD_INT 4
59349: MINUS
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// end ; 5 :
59366: GO 59506
59368: LD_INT 5
59370: DOUBLE
59371: EQUAL
59372: IFTRUE 59376
59374: GO 59505
59376: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59377: LD_ADDR_VAR 0 5
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: LD_INT 4
59389: MINUS
59390: PUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: PUSH
59404: LD_VAR 0 1
59408: PUSH
59409: LD_VAR 0 2
59413: PUSH
59414: LD_INT 4
59416: MINUS
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: LD_VAR 0 1
59430: PUSH
59431: LD_INT 4
59433: PLUS
59434: PUSH
59435: LD_VAR 0 2
59439: PUSH
59440: LD_INT 4
59442: PLUS
59443: PUSH
59444: LD_INT 5
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: PUSH
59452: LD_VAR 0 1
59456: PUSH
59457: LD_INT 3
59459: PLUS
59460: PUSH
59461: LD_VAR 0 2
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: LIST
59473: PUSH
59474: LD_VAR 0 1
59478: PUSH
59479: LD_VAR 0 2
59483: PUSH
59484: LD_INT 3
59486: PLUS
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// end ; end ;
59503: GO 59506
59505: POP
// result := list ;
59506: LD_ADDR_VAR 0 4
59510: PUSH
59511: LD_VAR 0 5
59515: ST_TO_ADDR
// end ;
59516: LD_VAR 0 4
59520: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59521: LD_INT 0
59523: PPUSH
59524: PPUSH
59525: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59526: LD_VAR 0 1
59530: NOT
59531: PUSH
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: IN
59555: NOT
59556: OR
59557: IFFALSE 59561
// exit ;
59559: GO 59653
// tmp := [ ] ;
59561: LD_ADDR_VAR 0 5
59565: PUSH
59566: EMPTY
59567: ST_TO_ADDR
// for i in units do
59568: LD_ADDR_VAR 0 4
59572: PUSH
59573: LD_VAR 0 1
59577: PUSH
59578: FOR_IN
59579: IFFALSE 59622
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59581: LD_ADDR_VAR 0 5
59585: PUSH
59586: LD_VAR 0 5
59590: PPUSH
59591: LD_VAR 0 5
59595: PUSH
59596: LD_INT 1
59598: PLUS
59599: PPUSH
59600: LD_VAR 0 4
59604: PPUSH
59605: LD_VAR 0 2
59609: PPUSH
59610: CALL_OW 259
59614: PPUSH
59615: CALL_OW 2
59619: ST_TO_ADDR
59620: GO 59578
59622: POP
59623: POP
// if not tmp then
59624: LD_VAR 0 5
59628: NOT
59629: IFFALSE 59633
// exit ;
59631: GO 59653
// result := SortListByListDesc ( units , tmp ) ;
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_VAR 0 1
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: CALL_OW 77
59652: ST_TO_ADDR
// end ;
59653: LD_VAR 0 3
59657: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59658: LD_INT 0
59660: PPUSH
59661: PPUSH
59662: PPUSH
// x := GetX ( building ) ;
59663: LD_ADDR_VAR 0 4
59667: PUSH
59668: LD_VAR 0 2
59672: PPUSH
59673: CALL_OW 250
59677: ST_TO_ADDR
// y := GetY ( building ) ;
59678: LD_ADDR_VAR 0 5
59682: PUSH
59683: LD_VAR 0 2
59687: PPUSH
59688: CALL_OW 251
59692: ST_TO_ADDR
// if GetTaskList ( unit ) then
59693: LD_VAR 0 1
59697: PPUSH
59698: CALL_OW 437
59702: IFFALSE 59797
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59704: LD_STRING e
59706: PUSH
59707: LD_VAR 0 1
59711: PPUSH
59712: CALL_OW 437
59716: PUSH
59717: LD_INT 1
59719: ARRAY
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: EQUAL
59725: PUSH
59726: LD_VAR 0 4
59730: PUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 437
59740: PUSH
59741: LD_INT 1
59743: ARRAY
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: EQUAL
59749: AND
59750: PUSH
59751: LD_VAR 0 5
59755: PUSH
59756: LD_VAR 0 1
59760: PPUSH
59761: CALL_OW 437
59765: PUSH
59766: LD_INT 1
59768: ARRAY
59769: PUSH
59770: LD_INT 3
59772: ARRAY
59773: EQUAL
59774: AND
59775: IFFALSE 59787
// result := true else
59777: LD_ADDR_VAR 0 3
59781: PUSH
59782: LD_INT 1
59784: ST_TO_ADDR
59785: GO 59795
// result := false ;
59787: LD_ADDR_VAR 0 3
59791: PUSH
59792: LD_INT 0
59794: ST_TO_ADDR
// end else
59795: GO 59805
// result := false ;
59797: LD_ADDR_VAR 0 3
59801: PUSH
59802: LD_INT 0
59804: ST_TO_ADDR
// end ;
59805: LD_VAR 0 3
59809: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59810: LD_INT 0
59812: PPUSH
59813: PPUSH
59814: PPUSH
59815: PPUSH
// if not unit or not area then
59816: LD_VAR 0 1
59820: NOT
59821: PUSH
59822: LD_VAR 0 2
59826: NOT
59827: OR
59828: IFFALSE 59832
// exit ;
59830: GO 59996
// tmp := AreaToList ( area , i ) ;
59832: LD_ADDR_VAR 0 6
59836: PUSH
59837: LD_VAR 0 2
59841: PPUSH
59842: LD_VAR 0 5
59846: PPUSH
59847: CALL_OW 517
59851: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59852: LD_ADDR_VAR 0 5
59856: PUSH
59857: DOUBLE
59858: LD_INT 1
59860: DEC
59861: ST_TO_ADDR
59862: LD_VAR 0 6
59866: PUSH
59867: LD_INT 1
59869: ARRAY
59870: PUSH
59871: FOR_TO
59872: IFFALSE 59994
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59874: LD_ADDR_VAR 0 7
59878: PUSH
59879: LD_VAR 0 6
59883: PUSH
59884: LD_INT 1
59886: ARRAY
59887: PUSH
59888: LD_VAR 0 5
59892: ARRAY
59893: PUSH
59894: LD_VAR 0 6
59898: PUSH
59899: LD_INT 2
59901: ARRAY
59902: PUSH
59903: LD_VAR 0 5
59907: ARRAY
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59913: LD_VAR 0 7
59917: PUSH
59918: LD_INT 1
59920: ARRAY
59921: PPUSH
59922: LD_VAR 0 7
59926: PUSH
59927: LD_INT 2
59929: ARRAY
59930: PPUSH
59931: CALL_OW 428
59935: PUSH
59936: LD_INT 0
59938: EQUAL
59939: IFFALSE 59992
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59941: LD_VAR 0 1
59945: PPUSH
59946: LD_VAR 0 7
59950: PUSH
59951: LD_INT 1
59953: ARRAY
59954: PPUSH
59955: LD_VAR 0 7
59959: PUSH
59960: LD_INT 2
59962: ARRAY
59963: PPUSH
59964: LD_VAR 0 3
59968: PPUSH
59969: CALL_OW 48
// result := IsPlaced ( unit ) ;
59973: LD_ADDR_VAR 0 4
59977: PUSH
59978: LD_VAR 0 1
59982: PPUSH
59983: CALL_OW 305
59987: ST_TO_ADDR
// exit ;
59988: POP
59989: POP
59990: GO 59996
// end ; end ;
59992: GO 59871
59994: POP
59995: POP
// end ;
59996: LD_VAR 0 4
60000: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60001: LD_INT 0
60003: PPUSH
60004: PPUSH
60005: PPUSH
// if not side or side > 8 then
60006: LD_VAR 0 1
60010: NOT
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_INT 8
60019: GREATER
60020: OR
60021: IFFALSE 60025
// exit ;
60023: GO 60212
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_INT 22
60032: PUSH
60033: LD_VAR 0 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 21
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PPUSH
60056: CALL_OW 69
60060: ST_TO_ADDR
// if not tmp then
60061: LD_VAR 0 4
60065: NOT
60066: IFFALSE 60070
// exit ;
60068: GO 60212
// enable_addtolog := true ;
60070: LD_ADDR_OWVAR 81
60074: PUSH
60075: LD_INT 1
60077: ST_TO_ADDR
// AddToLog ( [ ) ;
60078: LD_STRING [
60080: PPUSH
60081: CALL_OW 561
// for i in tmp do
60085: LD_ADDR_VAR 0 3
60089: PUSH
60090: LD_VAR 0 4
60094: PUSH
60095: FOR_IN
60096: IFFALSE 60203
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60098: LD_STRING [
60100: PUSH
60101: LD_VAR 0 3
60105: PPUSH
60106: CALL_OW 266
60110: STR
60111: PUSH
60112: LD_STRING , 
60114: STR
60115: PUSH
60116: LD_VAR 0 3
60120: PPUSH
60121: CALL_OW 250
60125: STR
60126: PUSH
60127: LD_STRING , 
60129: STR
60130: PUSH
60131: LD_VAR 0 3
60135: PPUSH
60136: CALL_OW 251
60140: STR
60141: PUSH
60142: LD_STRING , 
60144: STR
60145: PUSH
60146: LD_VAR 0 3
60150: PPUSH
60151: CALL_OW 254
60155: STR
60156: PUSH
60157: LD_STRING , 
60159: STR
60160: PUSH
60161: LD_VAR 0 3
60165: PPUSH
60166: LD_INT 1
60168: PPUSH
60169: CALL_OW 268
60173: STR
60174: PUSH
60175: LD_STRING , 
60177: STR
60178: PUSH
60179: LD_VAR 0 3
60183: PPUSH
60184: LD_INT 2
60186: PPUSH
60187: CALL_OW 268
60191: STR
60192: PUSH
60193: LD_STRING ],
60195: STR
60196: PPUSH
60197: CALL_OW 561
// end ;
60201: GO 60095
60203: POP
60204: POP
// AddToLog ( ]; ) ;
60205: LD_STRING ];
60207: PPUSH
60208: CALL_OW 561
// end ;
60212: LD_VAR 0 2
60216: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60217: LD_INT 0
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
// if not area or not rate or not max then
60224: LD_VAR 0 1
60228: NOT
60229: PUSH
60230: LD_VAR 0 2
60234: NOT
60235: OR
60236: PUSH
60237: LD_VAR 0 4
60241: NOT
60242: OR
60243: IFFALSE 60247
// exit ;
60245: GO 60439
// while 1 do
60247: LD_INT 1
60249: IFFALSE 60439
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60251: LD_ADDR_VAR 0 9
60255: PUSH
60256: LD_VAR 0 1
60260: PPUSH
60261: LD_INT 1
60263: PPUSH
60264: CALL_OW 287
60268: PUSH
60269: LD_INT 10
60271: MUL
60272: ST_TO_ADDR
// r := rate / 10 ;
60273: LD_ADDR_VAR 0 7
60277: PUSH
60278: LD_VAR 0 2
60282: PUSH
60283: LD_INT 10
60285: DIVREAL
60286: ST_TO_ADDR
// time := 1 1$00 ;
60287: LD_ADDR_VAR 0 8
60291: PUSH
60292: LD_INT 2100
60294: ST_TO_ADDR
// if amount < min then
60295: LD_VAR 0 9
60299: PUSH
60300: LD_VAR 0 3
60304: LESS
60305: IFFALSE 60323
// r := r * 2 else
60307: LD_ADDR_VAR 0 7
60311: PUSH
60312: LD_VAR 0 7
60316: PUSH
60317: LD_INT 2
60319: MUL
60320: ST_TO_ADDR
60321: GO 60349
// if amount > max then
60323: LD_VAR 0 9
60327: PUSH
60328: LD_VAR 0 4
60332: GREATER
60333: IFFALSE 60349
// r := r / 2 ;
60335: LD_ADDR_VAR 0 7
60339: PUSH
60340: LD_VAR 0 7
60344: PUSH
60345: LD_INT 2
60347: DIVREAL
60348: ST_TO_ADDR
// time := time / r ;
60349: LD_ADDR_VAR 0 8
60353: PUSH
60354: LD_VAR 0 8
60358: PUSH
60359: LD_VAR 0 7
60363: DIVREAL
60364: ST_TO_ADDR
// if time < 0 then
60365: LD_VAR 0 8
60369: PUSH
60370: LD_INT 0
60372: LESS
60373: IFFALSE 60390
// time := time * - 1 ;
60375: LD_ADDR_VAR 0 8
60379: PUSH
60380: LD_VAR 0 8
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: MUL
60389: ST_TO_ADDR
// wait ( time ) ;
60390: LD_VAR 0 8
60394: PPUSH
60395: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60399: LD_INT 35
60401: PPUSH
60402: LD_INT 875
60404: PPUSH
60405: CALL_OW 12
60409: PPUSH
60410: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60414: LD_INT 1
60416: PPUSH
60417: LD_INT 5
60419: PPUSH
60420: CALL_OW 12
60424: PPUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: LD_INT 1
60432: PPUSH
60433: CALL_OW 55
// end ;
60437: GO 60247
// end ;
60439: LD_VAR 0 5
60443: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60444: LD_INT 0
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
// if not turrets or not factories then
60454: LD_VAR 0 1
60458: NOT
60459: PUSH
60460: LD_VAR 0 2
60464: NOT
60465: OR
60466: IFFALSE 60470
// exit ;
60468: GO 60777
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60470: LD_ADDR_VAR 0 10
60474: PUSH
60475: LD_INT 5
60477: PUSH
60478: LD_INT 6
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 24
60512: PUSH
60513: LD_INT 25
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 23
60522: PUSH
60523: LD_INT 27
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 42
60536: PUSH
60537: LD_INT 43
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 44
60546: PUSH
60547: LD_INT 46
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 45
60556: PUSH
60557: LD_INT 47
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: ST_TO_ADDR
// result := [ ] ;
60574: LD_ADDR_VAR 0 3
60578: PUSH
60579: EMPTY
60580: ST_TO_ADDR
// for i in turrets do
60581: LD_ADDR_VAR 0 4
60585: PUSH
60586: LD_VAR 0 1
60590: PUSH
60591: FOR_IN
60592: IFFALSE 60775
// begin nat := GetNation ( i ) ;
60594: LD_ADDR_VAR 0 7
60598: PUSH
60599: LD_VAR 0 4
60603: PPUSH
60604: CALL_OW 248
60608: ST_TO_ADDR
// weapon := 0 ;
60609: LD_ADDR_VAR 0 8
60613: PUSH
60614: LD_INT 0
60616: ST_TO_ADDR
// if not nat then
60617: LD_VAR 0 7
60621: NOT
60622: IFFALSE 60626
// continue ;
60624: GO 60591
// for j in list [ nat ] do
60626: LD_ADDR_VAR 0 5
60630: PUSH
60631: LD_VAR 0 10
60635: PUSH
60636: LD_VAR 0 7
60640: ARRAY
60641: PUSH
60642: FOR_IN
60643: IFFALSE 60684
// if GetBWeapon ( i ) = j [ 1 ] then
60645: LD_VAR 0 4
60649: PPUSH
60650: CALL_OW 269
60654: PUSH
60655: LD_VAR 0 5
60659: PUSH
60660: LD_INT 1
60662: ARRAY
60663: EQUAL
60664: IFFALSE 60682
// begin weapon := j [ 2 ] ;
60666: LD_ADDR_VAR 0 8
60670: PUSH
60671: LD_VAR 0 5
60675: PUSH
60676: LD_INT 2
60678: ARRAY
60679: ST_TO_ADDR
// break ;
60680: GO 60684
// end ;
60682: GO 60642
60684: POP
60685: POP
// if not weapon then
60686: LD_VAR 0 8
60690: NOT
60691: IFFALSE 60695
// continue ;
60693: GO 60591
// for k in factories do
60695: LD_ADDR_VAR 0 6
60699: PUSH
60700: LD_VAR 0 2
60704: PUSH
60705: FOR_IN
60706: IFFALSE 60771
// begin weapons := AvailableWeaponList ( k ) ;
60708: LD_ADDR_VAR 0 9
60712: PUSH
60713: LD_VAR 0 6
60717: PPUSH
60718: CALL_OW 478
60722: ST_TO_ADDR
// if not weapons then
60723: LD_VAR 0 9
60727: NOT
60728: IFFALSE 60732
// continue ;
60730: GO 60705
// if weapon in weapons then
60732: LD_VAR 0 8
60736: PUSH
60737: LD_VAR 0 9
60741: IN
60742: IFFALSE 60769
// begin result := [ i , weapon ] ;
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: LD_VAR 0 4
60753: PUSH
60754: LD_VAR 0 8
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// exit ;
60763: POP
60764: POP
60765: POP
60766: POP
60767: GO 60777
// end ; end ;
60769: GO 60705
60771: POP
60772: POP
// end ;
60773: GO 60591
60775: POP
60776: POP
// end ;
60777: LD_VAR 0 3
60781: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60782: LD_INT 0
60784: PPUSH
// if not side or side > 8 then
60785: LD_VAR 0 3
60789: NOT
60790: PUSH
60791: LD_VAR 0 3
60795: PUSH
60796: LD_INT 8
60798: GREATER
60799: OR
60800: IFFALSE 60804
// exit ;
60802: GO 60863
// if not range then
60804: LD_VAR 0 4
60808: NOT
60809: IFFALSE 60820
// range := - 12 ;
60811: LD_ADDR_VAR 0 4
60815: PUSH
60816: LD_INT 12
60818: NEG
60819: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60820: LD_VAR 0 1
60824: PPUSH
60825: LD_VAR 0 2
60829: PPUSH
60830: LD_VAR 0 3
60834: PPUSH
60835: LD_VAR 0 4
60839: PPUSH
60840: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_VAR 0 2
60853: PPUSH
60854: LD_VAR 0 3
60858: PPUSH
60859: CALL_OW 331
// end ;
60863: LD_VAR 0 5
60867: RET
// export function Video ( mode ) ; begin
60868: LD_INT 0
60870: PPUSH
// ingame_video = mode ;
60871: LD_ADDR_OWVAR 52
60875: PUSH
60876: LD_VAR 0 1
60880: ST_TO_ADDR
// interface_hidden = mode ;
60881: LD_ADDR_OWVAR 54
60885: PUSH
60886: LD_VAR 0 1
60890: ST_TO_ADDR
// end ;
60891: LD_VAR 0 2
60895: RET
// export function Join ( array , element ) ; begin
60896: LD_INT 0
60898: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60899: LD_ADDR_VAR 0 3
60903: PUSH
60904: LD_VAR 0 1
60908: PPUSH
60909: LD_VAR 0 1
60913: PUSH
60914: LD_INT 1
60916: PLUS
60917: PPUSH
60918: LD_VAR 0 2
60922: PPUSH
60923: CALL_OW 1
60927: ST_TO_ADDR
// end ;
60928: LD_VAR 0 3
60932: RET
// export function JoinUnion ( array , element ) ; begin
60933: LD_INT 0
60935: PPUSH
// result := array union element ;
60936: LD_ADDR_VAR 0 3
60940: PUSH
60941: LD_VAR 0 1
60945: PUSH
60946: LD_VAR 0 2
60950: UNION
60951: ST_TO_ADDR
// end ;
60952: LD_VAR 0 3
60956: RET
// export function GetBehemoths ( side ) ; begin
60957: LD_INT 0
60959: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60960: LD_ADDR_VAR 0 2
60964: PUSH
60965: LD_INT 22
60967: PUSH
60968: LD_VAR 0 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 31
60979: PUSH
60980: LD_INT 25
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PPUSH
60991: CALL_OW 69
60995: ST_TO_ADDR
// end ;
60996: LD_VAR 0 2
61000: RET
// export function Shuffle ( array ) ; var i , index ; begin
61001: LD_INT 0
61003: PPUSH
61004: PPUSH
61005: PPUSH
// result := [ ] ;
61006: LD_ADDR_VAR 0 2
61010: PUSH
61011: EMPTY
61012: ST_TO_ADDR
// if not array then
61013: LD_VAR 0 1
61017: NOT
61018: IFFALSE 61022
// exit ;
61020: GO 61121
// Randomize ;
61022: CALL_OW 10
// for i = array downto 1 do
61026: LD_ADDR_VAR 0 3
61030: PUSH
61031: DOUBLE
61032: LD_VAR 0 1
61036: INC
61037: ST_TO_ADDR
61038: LD_INT 1
61040: PUSH
61041: FOR_DOWNTO
61042: IFFALSE 61119
// begin index := rand ( 1 , array ) ;
61044: LD_ADDR_VAR 0 4
61048: PUSH
61049: LD_INT 1
61051: PPUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: CALL_OW 12
61061: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61062: LD_ADDR_VAR 0 2
61066: PUSH
61067: LD_VAR 0 2
61071: PPUSH
61072: LD_VAR 0 2
61076: PUSH
61077: LD_INT 1
61079: PLUS
61080: PPUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_VAR 0 4
61090: ARRAY
61091: PPUSH
61092: CALL_OW 2
61096: ST_TO_ADDR
// array := Delete ( array , index ) ;
61097: LD_ADDR_VAR 0 1
61101: PUSH
61102: LD_VAR 0 1
61106: PPUSH
61107: LD_VAR 0 4
61111: PPUSH
61112: CALL_OW 3
61116: ST_TO_ADDR
// end ;
61117: GO 61041
61119: POP
61120: POP
// end ;
61121: LD_VAR 0 2
61125: RET
// export function GetBaseMaterials ( base ) ; begin
61126: LD_INT 0
61128: PPUSH
// result := [ 0 , 0 , 0 ] ;
61129: LD_ADDR_VAR 0 2
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// if not base then
61148: LD_VAR 0 1
61152: NOT
61153: IFFALSE 61157
// exit ;
61155: GO 61206
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: LD_VAR 0 1
61166: PPUSH
61167: LD_INT 1
61169: PPUSH
61170: CALL_OW 275
61174: PUSH
61175: LD_VAR 0 1
61179: PPUSH
61180: LD_INT 2
61182: PPUSH
61183: CALL_OW 275
61187: PUSH
61188: LD_VAR 0 1
61192: PPUSH
61193: LD_INT 3
61195: PPUSH
61196: CALL_OW 275
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// end ;
61206: LD_VAR 0 2
61210: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61211: LD_INT 0
61213: PPUSH
61214: PPUSH
// result := array ;
61215: LD_ADDR_VAR 0 3
61219: PUSH
61220: LD_VAR 0 1
61224: ST_TO_ADDR
// if size > 0 then
61225: LD_VAR 0 2
61229: PUSH
61230: LD_INT 0
61232: GREATER
61233: IFFALSE 61279
// for i := array downto size do
61235: LD_ADDR_VAR 0 4
61239: PUSH
61240: DOUBLE
61241: LD_VAR 0 1
61245: INC
61246: ST_TO_ADDR
61247: LD_VAR 0 2
61251: PUSH
61252: FOR_DOWNTO
61253: IFFALSE 61277
// result := Delete ( result , result ) ;
61255: LD_ADDR_VAR 0 3
61259: PUSH
61260: LD_VAR 0 3
61264: PPUSH
61265: LD_VAR 0 3
61269: PPUSH
61270: CALL_OW 3
61274: ST_TO_ADDR
61275: GO 61252
61277: POP
61278: POP
// end ;
61279: LD_VAR 0 3
61283: RET
// export function ComExit ( unit ) ; var tmp ; begin
61284: LD_INT 0
61286: PPUSH
61287: PPUSH
// if not IsInUnit ( unit ) then
61288: LD_VAR 0 1
61292: PPUSH
61293: CALL_OW 310
61297: NOT
61298: IFFALSE 61302
// exit ;
61300: GO 61362
// tmp := IsInUnit ( unit ) ;
61302: LD_ADDR_VAR 0 3
61306: PUSH
61307: LD_VAR 0 1
61311: PPUSH
61312: CALL_OW 310
61316: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61317: LD_VAR 0 3
61321: PPUSH
61322: CALL_OW 247
61326: PUSH
61327: LD_INT 2
61329: EQUAL
61330: IFFALSE 61343
// ComExitVehicle ( unit ) else
61332: LD_VAR 0 1
61336: PPUSH
61337: CALL_OW 121
61341: GO 61352
// ComExitBuilding ( unit ) ;
61343: LD_VAR 0 1
61347: PPUSH
61348: CALL_OW 122
// result := tmp ;
61352: LD_ADDR_VAR 0 2
61356: PUSH
61357: LD_VAR 0 3
61361: ST_TO_ADDR
// end ;
61362: LD_VAR 0 2
61366: RET
// export function ResetHc ; begin
61367: LD_INT 0
61369: PPUSH
// InitHc ;
61370: CALL_OW 19
// hc_importance := 0 ;
61374: LD_ADDR_OWVAR 32
61378: PUSH
61379: LD_INT 0
61381: ST_TO_ADDR
// end ;
61382: LD_VAR 0 1
61386: RET
