// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10620 0 0
// PrepareAmerican ;
  19: CALL 253 0 0
// PrepareRussian ;
  23: CALL 1537 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6273 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := LoadVariable ( 12_SciDed_1 , false ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 12_SciDed_1
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// end ;
 112: LD_VAR 0 1
 116: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 117: LD_INT 22
 119: PUSH
 120: LD_INT 1
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 33
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 69
 145: PUSH
 146: LD_INT 15
 148: GREATEREQUAL
 149: IFFALSE 161
 151: GO 153
 153: DISABLE
// SetAchievement ( ACH_FORT ) ;
 154: LD_STRING ACH_FORT
 156: PPUSH
 157: CALL_OW 543
 161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 162: LD_INT 22
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 25
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PPUSH
 186: CALL_OW 69
 190: PUSH
 191: LD_INT 0
 193: EQUAL
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// SetAchievement ( ACH_APE ) ;
 199: LD_STRING ACH_APE
 201: PPUSH
 202: CALL_OW 543
 206: END
// every 0 0$1 trigger killCounter >= 20 do
 207: LD_EXP 5
 211: PUSH
 212: LD_INT 20
 214: GREATEREQUAL
 215: IFFALSE 227
 217: GO 219
 219: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 220: LD_STRING ACH_DOUBLE
 222: PPUSH
 223: CALL_OW 543
 227: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 228: LD_EXP 9
 232: PPUSH
 233: LD_INT 15
 235: PPUSH
 236: CALL_OW 308
 240: IFFALSE 252
 242: GO 244
 244: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 245: LD_STRING ACH_AMASHA
 247: PPUSH
 248: CALL_OW 543
 252: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
// uc_side := 1 ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// uc_nation := 1 ;
 268: LD_ADDR_OWVAR 21
 272: PUSH
 273: LD_INT 1
 275: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 276: LD_INT 48
 278: PPUSH
 279: LD_STRING deltakappa
 281: PPUSH
 282: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 286: LD_INT 48
 288: PPUSH
 289: CALL_OW 274
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 2000
 299: PUSH
 300: LD_INT 1600
 302: PUSH
 303: LD_INT 1200
 305: PUSH
 306: LD_INT 900
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: LD_OWVAR 67
 319: ARRAY
 320: PPUSH
 321: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 325: LD_INT 48
 327: PPUSH
 328: CALL_OW 274
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 20
 338: PPUSH
 339: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 343: LD_INT 48
 345: PPUSH
 346: CALL_OW 274
 350: PPUSH
 351: LD_INT 3
 353: PPUSH
 354: LD_INT 100
 356: PPUSH
 357: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 361: LD_ADDR_EXP 8
 365: PUSH
 366: LD_STRING JMM
 368: PPUSH
 369: LD_EXP 1
 373: NOT
 374: PPUSH
 375: LD_STRING 13f_
 377: PPUSH
 378: CALL 31317 0 3
 382: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 383: LD_EXP 8
 387: PPUSH
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 395: LD_INT 5
 397: PUSH
 398: LD_INT 5
 400: PUSH
 401: LD_INT 3
 403: PUSH
 404: LD_INT 3
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_OWVAR 67
 417: ARRAY
 418: PPUSH
 419: LD_INT 3
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: LD_INT 9
 427: PUSH
 428: LD_INT 9
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: PPUSH
 449: LD_INT 100
 451: PPUSH
 452: CALL 36334 0 5
// JMMVeh := CreateVehicle ;
 456: LD_ADDR_EXP 9
 460: PUSH
 461: CALL_OW 45
 465: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 466: LD_EXP 9
 470: PPUSH
 471: LD_INT 1
 473: PPUSH
 474: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 5 , 5 , false ) ;
 478: LD_EXP 9
 482: PPUSH
 483: LD_INT 5
 485: PPUSH
 486: LD_INT 5
 488: PPUSH
 489: LD_INT 0
 491: PPUSH
 492: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 496: LD_EXP 8
 500: PPUSH
 501: LD_EXP 9
 505: PPUSH
 506: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 510: LD_EXP 9
 514: PPUSH
 515: LD_INT 1
 517: NEG
 518: PPUSH
 519: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 523: LD_EXP 9
 527: PPUSH
 528: LD_INT 21
 530: PPUSH
 531: LD_INT 8
 533: PPUSH
 534: CALL_OW 111
// uc_side := 4 ;
 538: LD_ADDR_OWVAR 20
 542: PUSH
 543: LD_INT 4
 545: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 546: LD_ADDR_EXP 13
 550: PUSH
 551: LD_STRING Powell
 553: PPUSH
 554: LD_INT 0
 556: PPUSH
 557: LD_STRING 
 559: PPUSH
 560: CALL 31317 0 3
 564: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING Joan
 572: PPUSH
 573: LD_EXP 1
 577: NOT
 578: PPUSH
 579: LD_STRING 10c_
 581: PPUSH
 582: CALL 31317 0 3
 586: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 587: LD_ADDR_EXP 11
 591: PUSH
 592: LD_STRING Lisa
 594: PPUSH
 595: LD_EXP 1
 599: NOT
 600: PPUSH
 601: LD_STRING 13s_
 603: PPUSH
 604: CALL 31317 0 3
 608: ST_TO_ADDR
// if Joan then
 609: LD_EXP 10
 613: IFFALSE 652
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 615: LD_EXP 10
 619: PPUSH
 620: LD_INT 4
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 630: LD_EXP 10
 634: PPUSH
 635: LD_INT 4
 637: PPUSH
 638: CALL_OW 336
// JMMGirl = 1 ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 1
 649: ST_TO_ADDR
// end else
 650: GO 743
// if Lisa then
 652: LD_EXP 11
 656: IFFALSE 695
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 658: LD_EXP 11
 662: PPUSH
 663: LD_INT 4
 665: PPUSH
 666: LD_INT 0
 668: PPUSH
 669: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 673: LD_EXP 11
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL_OW 336
// JMMGirl := 2 ;
 685: LD_ADDR_EXP 2
 689: PUSH
 690: LD_INT 2
 692: ST_TO_ADDR
// end else
 693: GO 743
// begin Connie := NewCharacter ( Coonie ) ;
 695: LD_ADDR_EXP 12
 699: PUSH
 700: LD_STRING Coonie
 702: PPUSH
 703: CALL_OW 25
 707: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 708: LD_EXP 12
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 723: LD_EXP 12
 727: PPUSH
 728: LD_INT 3
 730: PPUSH
 731: CALL_OW 336
// JMMGirl := 3 ;
 735: LD_ADDR_EXP 2
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: DOUBLE
 749: LD_INT 1
 751: DEC
 752: ST_TO_ADDR
 753: LD_INT 4
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 3
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_OWVAR 67
 775: ARRAY
 776: PUSH
 777: FOR_TO
 778: IFFALSE 932
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 780: LD_INT 4
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: PUSH
 798: LD_VAR 0 2
 802: PUSH
 803: LD_INT 4
 805: MOD
 806: PUSH
 807: LD_INT 1
 809: PLUS
 810: ARRAY
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 7
 823: PUSH
 824: LD_INT 4
 826: PUSH
 827: LD_INT 5
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: PUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 4
 843: MOD
 844: PUSH
 845: LD_INT 1
 847: PLUS
 848: ARRAY
 849: PPUSH
 850: LD_INT 33
 852: PPUSH
 853: LD_INT 55
 855: PPUSH
 856: CALL_OW 12
 860: PPUSH
 861: CALL 36334 0 5
// veh := CreateVehicle ;
 865: LD_ADDR_VAR 0 4
 869: PUSH
 870: CALL_OW 45
 874: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 875: LD_VAR 0 4
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: LD_INT 5
 885: PPUSH
 886: CALL_OW 12
 890: PPUSH
 891: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 895: LD_VAR 0 4
 899: PPUSH
 900: LD_INT 500
 902: PPUSH
 903: LD_INT 950
 905: PPUSH
 906: CALL_OW 12
 910: PPUSH
 911: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 915: LD_VAR 0 4
 919: PPUSH
 920: LD_INT 5
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL_OW 49
// end ;
 930: GO 777
 932: POP
 933: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 934: LD_ADDR_VAR 0 2
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_INT 3
 946: PUSH
 947: LD_INT 3
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: LD_INT 2
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_OWVAR 67
 966: ARRAY
 967: PUSH
 968: FOR_TO
 969: IFFALSE 1091
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 971: LD_INT 3
 973: PUSH
 974: LD_INT 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: MOD
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 3
1000: PPUSH
1001: LD_INT 9
1003: PUSH
1004: LD_INT 5
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_VAR 0 2
1015: PUSH
1016: LD_INT 2
1018: MOD
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: ARRAY
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL 36334 0 5
// veh := CreateVehicle ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: CALL_OW 45
1041: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1042: LD_VAR 0 4
1046: PPUSH
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 5
1052: PPUSH
1053: CALL_OW 12
1057: PPUSH
1058: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1062: LD_VAR 0 4
1066: PPUSH
1067: LD_INT 1000
1069: PPUSH
1070: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1074: LD_VAR 0 4
1078: PPUSH
1079: LD_INT 17
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: CALL_OW 49
// end ;
1089: GO 968
1091: POP
1092: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1093: LD_ADDR_VAR 0 2
1097: PUSH
1098: DOUBLE
1099: LD_INT 1
1101: DEC
1102: ST_TO_ADDR
1103: LD_INT 3
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1176
// begin PrepareApeman ( 1 ) ;
1130: LD_INT 1
1132: PPUSH
1133: CALL 64991 0 1
// uc_side := 4 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 4
1144: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1145: LD_ADDR_OWVAR 28
1149: PUSH
1150: LD_INT 16
1152: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1153: CALL_OW 44
1157: PPUSH
1158: LD_INT 84
1160: PPUSH
1161: LD_INT 127
1163: PPUSH
1164: LD_INT 5
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 50
// end ;
1174: GO 1127
1176: POP
1177: POP
// uc_side := 4 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 4
1185: ST_TO_ADDR
// uc_nation := 1 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1194: LD_INT 2
1196: PPUSH
1197: LD_INT 3
1199: PPUSH
1200: LD_INT 1
1202: PPUSH
1203: LD_INT 12
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL 36334 0 5
// veh := CreateVehicle ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: CALL_OW 45
1222: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1223: LD_VAR 0 4
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 100
1233: PPUSH
1234: CALL_OW 290
// SetLives ( veh , 450 ) ;
1238: LD_VAR 0 4
1242: PPUSH
1243: LD_INT 450
1245: PPUSH
1246: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1250: LD_VAR 0 4
1254: PPUSH
1255: LD_INT 122
1257: PPUSH
1258: LD_INT 118
1260: PPUSH
1261: LD_INT 4
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 70860 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 2
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1284: CALL_OW 44
1288: PPUSH
1289: LD_INT 124
1291: PPUSH
1292: LD_INT 120
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1302: LD_ADDR_VAR 0 5
1306: PUSH
1307: LD_INT 18
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 517
1317: ST_TO_ADDR
// for i := 1 to 4 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 4
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1440
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1334: LD_INT 1
1336: PPUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 2
1352: PPUSH
1353: CALL_OW 12
1357: ARRAY
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// un := CreateHuman ;
1366: LD_ADDR_VAR 0 3
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1376: LD_VAR 0 3
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: LD_INT 5
1386: PPUSH
1387: CALL_OW 12
1391: PPUSH
1392: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1396: LD_VAR 0 3
1400: PPUSH
1401: LD_VAR 0 5
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_VAR 0 2
1414: ARRAY
1415: PPUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PUSH
1425: LD_VAR 0 2
1429: ARRAY
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL_OW 601
// end ;
1438: GO 1331
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function ChangeSideKappaBase ; begin
1447: LD_INT 0
1449: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1450: LD_INT 70
1452: PPUSH
1453: LD_INT 138
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: LD_INT 80
1461: NEG
1462: PPUSH
1463: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1467: LD_INT 70
1469: PPUSH
1470: LD_INT 138
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1480: LD_INT 147
1482: PPUSH
1483: LD_INT 122
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_INT 40
1491: NEG
1492: PPUSH
1493: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1497: LD_INT 147
1499: PPUSH
1500: LD_INT 122
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1510: LD_INT 22
1512: PUSH
1513: LD_INT 4
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 235
// end ; end_of_file
1532: LD_VAR 0 1
1536: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
1544: PPUSH
// uc_side := 3 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// uc_nation := 3 ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1561: LD_ADDR_EXP 15
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 11
1571: PUSH
1572: LD_INT 14
1574: PUSH
1575: LD_INT 17
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_OWVAR 67
1588: ARRAY
1589: ST_TO_ADDR
// ruMobile := [ ] ;
1590: LD_ADDR_EXP 16
1594: PUSH
1595: EMPTY
1596: ST_TO_ADDR
// ruBuildList := [ ] ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: EMPTY
1603: ST_TO_ADDR
// ruAttackers := [ ] ;
1604: LD_ADDR_EXP 18
1608: PUSH
1609: EMPTY
1610: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1611: LD_ADDR_EXP 19
1615: PUSH
1616: LD_INT 3
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL 31380 0 3
1629: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1630: LD_ADDR_VAR 0 6
1634: PUSH
1635: LD_INT 43
1637: PUSH
1638: LD_INT 46
1640: PUSH
1641: LD_INT 45
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1649: LD_ADDR_EXP 20
1653: PUSH
1654: LD_INT 46
1656: PUSH
1657: LD_INT 70
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 121
1666: PUSH
1667: LD_INT 95
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 68
1676: PUSH
1677: LD_INT 65
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// if not russianRocketsDisabled then
1689: LD_EXP 6
1693: NOT
1694: IFFALSE 1710
// weapons := weapons ^ ru_rocket ;
1696: LD_ADDR_VAR 0 6
1700: PUSH
1701: LD_VAR 0 6
1705: PUSH
1706: LD_INT 47
1708: ADD
1709: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1710: LD_ADDR_EXP 14
1714: PUSH
1715: LD_STRING Eisenstein
1717: PPUSH
1718: CALL_OW 25
1722: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1723: LD_EXP 14
1727: PPUSH
1728: LD_INT 22
1730: PPUSH
1731: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1735: LD_INT 22
1737: PPUSH
1738: CALL_OW 274
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1250
1748: PUSH
1749: LD_INT 2500
1751: PUSH
1752: LD_INT 3500
1754: PUSH
1755: LD_INT 5000
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_OWVAR 67
1768: ARRAY
1769: PPUSH
1770: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1774: LD_INT 22
1776: PPUSH
1777: CALL_OW 274
1781: PPUSH
1782: LD_INT 2
1784: PPUSH
1785: LD_INT 600
1787: PPUSH
1788: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1792: LD_INT 22
1794: PPUSH
1795: CALL_OW 274
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: LD_INT 100
1805: PPUSH
1806: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1810: LD_INT 116
1812: PPUSH
1813: LD_INT 46
1815: PPUSH
1816: LD_INT 70
1818: PPUSH
1819: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1823: LD_ADDR_VAR 0 2
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_INT 3
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 21
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PPUSH
1852: CALL_OW 69
1856: PUSH
1857: FOR_IN
1858: IFFALSE 1880
// SetBLevel ( i , 6 + Difficulty ) ;
1860: LD_VAR 0 2
1864: PPUSH
1865: LD_INT 6
1867: PUSH
1868: LD_OWVAR 67
1872: PLUS
1873: PPUSH
1874: CALL_OW 241
1878: GO 1857
1880: POP
1881: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1882: LD_ADDR_VAR 0 4
1886: PUSH
1887: LD_INT 22
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: LD_INT 30
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 30
1912: PUSH
1913: LD_INT 33
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: ST_TO_ADDR
// if russianRocketsDisabled then
1934: LD_EXP 6
1938: IFFALSE 2014
// begin ruTechList := ruTechList diff tech_advrocket ;
1940: LD_ADDR_EXP 19
1944: PUSH
1945: LD_EXP 19
1949: PUSH
1950: LD_INT 71
1952: DIFF
1953: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_VAR 0 4
1963: PPUSH
1964: LD_INT 35
1966: PUSH
1967: LD_INT 47
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PPUSH
1974: CALL_OW 72
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2012
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_VAR 0 6
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 6
1999: PPUSH
2000: CALL_OW 12
2004: ARRAY
2005: PPUSH
2006: CALL_OW 431
2010: GO 1979
2012: POP
2013: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 30
2031: PUSH
2032: LD_INT 32
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PUSH
2048: FOR_IN
2049: IFFALSE 2098
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 5
2056: PUSH
2057: LD_INT 6
2059: PUSH
2060: LD_INT 7
2062: PUSH
2063: LD_INT 8
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_OWVAR 67
2076: ARRAY
2077: PPUSH
2078: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2082: CALL_OW 44
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 52
// end ;
2096: GO 2048
2098: POP
2099: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 3
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 30
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 69
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2269
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2137: LD_ADDR_VAR 0 3
2141: PUSH
2142: DOUBLE
2143: LD_INT 1
2145: DEC
2146: ST_TO_ADDR
2147: LD_INT 2
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: PUSH
2165: LD_OWVAR 67
2169: ARRAY
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2265
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 5
2179: PUSH
2180: LD_INT 6
2182: PUSH
2183: LD_INT 7
2185: PUSH
2186: LD_INT 8
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_OWVAR 67
2199: ARRAY
2200: PPUSH
2201: CALL_OW 381
// un := CreateHuman ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: CALL_OW 44
2214: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2215: LD_VAR 0 5
2219: PPUSH
2220: LD_VAR 0 2
2224: PPUSH
2225: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2229: LD_VAR 0 5
2233: PPUSH
2234: LD_INT 9
2236: PPUSH
2237: CALL_OW 336
// if j = 2 then
2241: LD_VAR 0 3
2245: PUSH
2246: LD_INT 2
2248: EQUAL
2249: IFFALSE 2263
// SetUnitAttackType ( un , 3 ) ;
2251: LD_VAR 0 5
2255: PPUSH
2256: LD_INT 3
2258: PPUSH
2259: CALL_OW 603
// end ;
2263: GO 2171
2265: POP
2266: POP
// end ;
2267: GO 2134
2269: POP
2270: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 5
2283: PUSH
2284: LD_INT 6
2286: PUSH
2287: LD_INT 6
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PUSH
2299: LD_OWVAR 67
2303: ARRAY
2304: PUSH
2305: FOR_TO
2306: IFFALSE 2353
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 6
2313: PUSH
2314: LD_INT 7
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_OWVAR 67
2333: ARRAY
2334: PPUSH
2335: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2339: CALL_OW 44
2343: PPUSH
2344: LD_INT 22
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2305
2353: POP
2354: POP
// for i := 1 to 2 do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_INT 2
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2449
// for j := 1 to 6 do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 6
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2445
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2387: LD_INT 0
2389: PPUSH
2390: LD_INT 6
2392: PUSH
2393: LD_INT 7
2395: PUSH
2396: LD_INT 9
2398: PUSH
2399: LD_INT 10
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: PUSH
2408: LD_OWVAR 67
2412: ARRAY
2413: PPUSH
2414: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2418: CALL_OW 44
2422: PPUSH
2423: LD_INT 1
2425: PUSH
2426: LD_INT 40
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_VAR 0 2
2437: ARRAY
2438: PPUSH
2439: CALL_OW 52
// end ;
2443: GO 2384
2445: POP
2446: POP
2447: GO 2368
2449: POP
2450: POP
// for i := 1 to 6 do
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: DOUBLE
2457: LD_INT 1
2459: DEC
2460: ST_TO_ADDR
2461: LD_INT 6
2463: PUSH
2464: FOR_TO
2465: IFFALSE 2512
// begin PrepareScientist ( false , 6 ) ;
2467: LD_INT 0
2469: PPUSH
2470: LD_INT 6
2472: PPUSH
2473: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2477: CALL_OW 44
2481: PPUSH
2482: LD_INT 14
2484: PUSH
2485: LD_INT 15
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_VAR 0 2
2496: PUSH
2497: LD_INT 2
2499: MOD
2500: PUSH
2501: LD_INT 1
2503: PLUS
2504: ARRAY
2505: PPUSH
2506: CALL_OW 52
// end ;
2510: GO 2464
2512: POP
2513: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2514: LD_INT 22
2516: PPUSH
2517: LD_INT 3
2519: PPUSH
2520: LD_INT 3
2522: PPUSH
2523: LD_INT 51
2525: PPUSH
2526: LD_INT 100
2528: PPUSH
2529: CALL 36334 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2533: CALL_OW 45
2537: PPUSH
2538: LD_INT 116
2540: PPUSH
2541: LD_INT 58
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 50
// for i := 1 to 2 do
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: DOUBLE
2560: LD_INT 1
2562: DEC
2563: ST_TO_ADDR
2564: LD_INT 2
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2612
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2570: LD_INT 22
2572: PPUSH
2573: LD_INT 3
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 52
2581: PPUSH
2582: LD_INT 100
2584: PPUSH
2585: CALL 36334 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 111
2596: PPUSH
2597: LD_INT 58
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// end ;
2610: GO 2567
2612: POP
2613: POP
// for i := 1 to 4 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 4
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2657
// begin PrepareApemanEngineer ( ) ;
2630: CALL 64912 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2634: CALL_OW 44
2638: PPUSH
2639: LD_INT 118
2641: PPUSH
2642: LD_INT 50
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 50
// end ;
2655: GO 2627
2657: POP
2658: POP
// end ;
2659: LD_VAR 0 1
2663: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2664: LD_EXP 19
2668: IFFALSE 2796
2670: GO 2672
2672: DISABLE
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
// begin enable ;
2678: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: LD_INT 14
2686: PUSH
2687: LD_INT 15
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 50
2696: PUSH
2697: EMPTY
2698: LIST
2699: PPUSH
2700: CALL_OW 72
2704: ST_TO_ADDR
// if not labs then
2705: LD_VAR 0 3
2709: NOT
2710: IFFALSE 2715
// begin disable ;
2712: DISABLE
// exit ;
2713: GO 2796
// end ; for i in labs do
2715: LD_ADDR_VAR 0 1
2719: PUSH
2720: LD_VAR 0 3
2724: PUSH
2725: FOR_IN
2726: IFFALSE 2794
// if BuildingStatus ( i ) = bs_idle then
2728: LD_VAR 0 1
2732: PPUSH
2733: CALL_OW 461
2737: PUSH
2738: LD_INT 2
2740: EQUAL
2741: IFFALSE 2792
// for t in ruTechList do
2743: LD_ADDR_VAR 0 2
2747: PUSH
2748: LD_EXP 19
2752: PUSH
2753: FOR_IN
2754: IFFALSE 2790
// if CanBeResearched ( i , t ) then
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_VAR 0 2
2765: PPUSH
2766: CALL_OW 430
2770: IFFALSE 2788
// begin ComResearch ( i , t ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_VAR 0 2
2781: PPUSH
2782: CALL_OW 124
// break ;
2786: GO 2790
// end ;
2788: GO 2753
2790: POP
2791: POP
2792: GO 2725
2794: POP
2795: POP
// end ;
2796: PPOPN 3
2798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2799: LD_INT 3
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 32
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: IFFALSE 2918
2836: GO 2838
2838: DISABLE
2839: LD_INT 0
2841: PPUSH
// begin enable ;
2842: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2843: LD_ADDR_VAR 0 1
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2916
// if GetFuel ( i ) < 3 then
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 261
2896: PUSH
2897: LD_INT 3
2899: LESS
2900: IFFALSE 2914
// SetFuel ( i , 3 ) ;
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_INT 3
2909: PPUSH
2910: CALL_OW 240
2914: GO 2884
2916: POP
2917: POP
// end ;
2918: PPOPN 1
2920: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) and ruAttackers < [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , chassis , weapon ;
2921: LD_INT 1
2923: PUSH
2924: LD_INT 40
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: LD_INT 50
2933: PUSH
2934: EMPTY
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: PUSH
2942: LD_EXP 18
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: LD_OWVAR 67
2969: ARRAY
2970: LESS
2971: AND
2972: IFFALSE 3308
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
2981: PPUSH
// begin enable ;
2982: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_INT 1
2990: PUSH
2991: LD_INT 40
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PPUSH
2998: LD_INT 50
3000: PUSH
3001: EMPTY
3002: LIST
3003: PPUSH
3004: CALL_OW 72
3008: PUSH
3009: FOR_IN
3010: IFFALSE 3306
// begin if BuildingStatus ( i ) <> bs_idle then
3012: LD_VAR 0 1
3016: PPUSH
3017: CALL_OW 461
3021: PUSH
3022: LD_INT 2
3024: NONEQUAL
3025: IFFALSE 3029
// continue ;
3027: GO 3009
// if i = ruFac1 then
3029: LD_VAR 0 1
3033: PUSH
3034: LD_INT 1
3036: EQUAL
3037: IFFALSE 3080
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: LD_INT 21
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 23
3052: PUSH
3053: LD_INT 23
3055: PUSH
3056: LD_INT 24
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 1
3068: PPUSH
3069: LD_INT 5
3071: PPUSH
3072: CALL_OW 12
3076: ARRAY
3077: ST_TO_ADDR
3078: GO 3107
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_INT 21
3087: PUSH
3088: LD_INT 23
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 12
3105: ARRAY
3106: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 49
3114: PUSH
3115: LD_INT 44
3117: PUSH
3118: LD_INT 43
3120: PUSH
3121: LD_INT 46
3123: PUSH
3124: LD_INT 45
3126: PUSH
3127: LD_INT 46
3129: PUSH
3130: LD_INT 45
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: ST_TO_ADDR
// if not russianRocketsDisabled then
3142: LD_EXP 6
3146: NOT
3147: IFFALSE 3167
// weapon := Join ( weapon , ru_rocket ) ;
3149: LD_ADDR_VAR 0 3
3153: PUSH
3154: LD_VAR 0 3
3158: PPUSH
3159: LD_INT 47
3161: PPUSH
3162: CALL 68718 0 2
3166: ST_TO_ADDR
// weapon := weapon [ Difficulty + rand ( 0 , 3 ) ] ;
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: LD_VAR 0 3
3176: PUSH
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 0
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: CALL_OW 12
3192: PLUS
3193: ARRAY
3194: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3195: LD_VAR 0 2
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 22
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: IN
3210: PUSH
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 46
3218: PUSH
3219: LD_INT 47
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: IN
3226: AND
3227: IFFALSE 3260
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3229: LD_ADDR_VAR 0 3
3233: PUSH
3234: LD_INT 44
3236: PUSH
3237: LD_INT 45
3239: PUSH
3240: LD_INT 49
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: CALL_OW 12
3258: ARRAY
3259: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3260: LD_VAR 0 1
3264: PPUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: CALL_OW 12
3290: ARRAY
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: LD_VAR 0 3
3299: PPUSH
3300: CALL_OW 185
// end ;
3304: GO 3009
3306: POP
3307: POP
// end ;
3308: PPOPN 3
3310: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3311: LD_INT 22
3313: PPUSH
3314: CALL_OW 302
3318: IFFALSE 4175
3320: GO 3322
3322: DISABLE
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
// begin enable ;
3333: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: LD_INT 12
3341: PPUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 24
3347: PUSH
3348: LD_INT 1000
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 70
3377: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 25
3395: PUSH
3396: LD_INT 2
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PPUSH
3407: CALL_OW 69
3411: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 22
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 34
3429: PUSH
3430: LD_INT 52
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3446: LD_ADDR_VAR 0 7
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3480: LD_ADDR_VAR 0 8
3484: PUSH
3485: LD_INT 14
3487: PUSH
3488: LD_INT 15
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3495: LD_VAR 0 7
3499: PUSH
3500: LD_VAR 0 4
3504: PPUSH
3505: LD_INT 120
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 72
3519: AND
3520: IFFALSE 3533
// ComExitAll ( sci ) else
3522: LD_VAR 0 7
3526: PPUSH
3527: CALL 69199 0 1
3531: GO 3615
// if sci then
3533: LD_VAR 0 7
3537: IFFALSE 3615
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3539: LD_VAR 0 7
3543: PPUSH
3544: LD_INT 3
3546: PUSH
3547: LD_INT 54
3549: PUSH
3550: EMPTY
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 72
3561: PUSH
3562: LD_VAR 0 8
3566: AND
3567: IFFALSE 3615
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: PPUSH
3592: LD_VAR 0 8
3596: PUSH
3597: LD_INT 1
3599: PPUSH
3600: LD_VAR 0 8
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: PPUSH
3611: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3615: LD_VAR 0 5
3619: PPUSH
3620: LD_INT 50
3622: PUSH
3623: EMPTY
3624: LIST
3625: PPUSH
3626: CALL_OW 72
3630: PUSH
3631: LD_VAR 0 3
3635: AND
3636: IFFALSE 3677
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 50
3645: PUSH
3646: EMPTY
3647: LIST
3648: PPUSH
3649: CALL_OW 72
3653: PPUSH
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 5
3663: PUSH
3664: LD_INT 1
3666: ARRAY
3667: PPUSH
3668: CALL_OW 74
3672: PPUSH
3673: CALL_OW 130
// if eng then
3677: LD_VAR 0 4
3681: IFFALSE 4175
// begin for i in eng do
3683: LD_ADDR_VAR 0 1
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: FOR_IN
3694: IFFALSE 4173
// begin tag := GetTag ( i ) ;
3696: LD_ADDR_VAR 0 6
3700: PUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 110
3710: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3711: LD_VAR 0 3
3715: NOT
3716: PUSH
3717: LD_EXP 17
3721: NOT
3722: AND
3723: PUSH
3724: LD_VAR 0 6
3728: PUSH
3729: LD_INT 1
3731: EQUAL
3732: AND
3733: IFFALSE 3759
// begin SetTag ( i , 0 ) ;
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_INT 0
3742: PPUSH
3743: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 22
3754: PPUSH
3755: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3759: LD_VAR 0 3
3763: PUSH
3764: LD_EXP 17
3768: OR
3769: PUSH
3770: LD_VAR 0 6
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: AND
3779: IFFALSE 3793
// SetTag ( i , 1 ) ;
3781: LD_VAR 0 1
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 310
3802: PUSH
3803: LD_VAR 0 6
3807: PUSH
3808: LD_INT 1
3810: EQUAL
3811: AND
3812: IFFALSE 3823
// ComExit ( i ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL 69116 0 1
// if GetLives ( i ) < 500 and tag = 1 then
3823: LD_VAR 0 1
3827: PPUSH
3828: CALL_OW 256
3832: PUSH
3833: LD_INT 500
3835: LESS
3836: PUSH
3837: LD_VAR 0 6
3841: PUSH
3842: LD_INT 1
3844: EQUAL
3845: AND
3846: IFFALSE 3860
// SetTag ( i , 2 ) ;
3848: LD_VAR 0 1
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3860: LD_VAR 0 1
3864: PPUSH
3865: CALL_OW 256
3869: PUSH
3870: LD_INT 1000
3872: EQUAL
3873: PUSH
3874: LD_VAR 0 6
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3897
// SetTag ( i , 1 ) ;
3885: LD_VAR 0 1
3889: PPUSH
3890: LD_INT 1
3892: PPUSH
3893: CALL_OW 109
// if tag = 2 then
3897: LD_VAR 0 6
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: IFFALSE 3952
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 110
3914: PPUSH
3915: LD_INT 41
3917: PPUSH
3918: CALL_OW 297
3922: PUSH
3923: LD_INT 6
3925: GREATER
3926: IFFALSE 3952
// begin ComMoveXY ( i , 110 , 41 ) ;
3928: LD_VAR 0 1
3932: PPUSH
3933: LD_INT 110
3935: PPUSH
3936: LD_INT 41
3938: PPUSH
3939: CALL_OW 111
// AddComHold ( i ) ;
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3952: LD_VAR 0 1
3956: PPUSH
3957: LD_INT 11
3959: PPUSH
3960: CALL_OW 308
3964: IFFALSE 3978
// ComMoveToArea ( i , ruBaseArea ) ;
3966: LD_VAR 0 1
3970: PPUSH
3971: LD_INT 12
3973: PPUSH
3974: CALL_OW 113
// if tag = 1 then
3978: LD_VAR 0 6
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: IFFALSE 4171
// begin if b then
3988: LD_VAR 0 3
3992: IFFALSE 4020
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
3994: LD_VAR 0 1
3998: PPUSH
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: CALL_OW 74
4013: PPUSH
4014: CALL_OW 130
4018: GO 4171
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4020: LD_EXP 17
4024: PUSH
4025: LD_INT 11
4027: PPUSH
4028: LD_INT 81
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: LD_INT 0
4045: EQUAL
4046: AND
4047: PUSH
4048: LD_INT 22
4050: PPUSH
4051: LD_EXP 17
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 17
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: PUSH
4073: LD_INT 2
4075: ARRAY
4076: PPUSH
4077: LD_EXP 17
4081: PUSH
4082: LD_INT 1
4084: ARRAY
4085: PUSH
4086: LD_INT 3
4088: ARRAY
4089: PPUSH
4090: LD_EXP 17
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: PUSH
4099: LD_INT 4
4101: ARRAY
4102: PPUSH
4103: CALL 44559 0 5
4107: AND
4108: IFFALSE 4171
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_EXP 17
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: LD_EXP 17
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: PPUSH
4141: LD_EXP 17
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PUSH
4150: LD_INT 3
4152: ARRAY
4153: PPUSH
4154: LD_EXP 17
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 4
4165: ARRAY
4166: PPUSH
4167: CALL_OW 145
// end ; end ;
4171: GO 3693
4173: POP
4174: POP
// end ; end ;
4175: PPOPN 8
4177: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: LD_INT 60
4193: PUSH
4194: EMPTY
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 50
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 16
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 69
4227: PUSH
4228: LD_INT 14
4230: PPUSH
4231: CALL_OW 435
4235: AND
4236: IFFALSE 4348
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// begin enable ;
4245: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 435
4258: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4259: LD_ADDR_VAR 0 1
4263: PUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 60
4279: PUSH
4280: EMPTY
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 50
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 16
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PUSH
4314: FOR_IN
4315: IFFALSE 4346
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4317: LD_VAR 0 1
4321: PPUSH
4322: LD_VAR 0 2
4326: PUSH
4327: LD_INT 1
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 117
4344: GO 4314
4346: POP
4347: POP
// end ;
4348: PPOPN 2
4350: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: LD_INT 60
4366: PUSH
4367: EMPTY
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 50
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: LD_INT 34
4382: PUSH
4383: LD_INT 51
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PUSH
4401: LD_INT 13
4403: PPUSH
4404: CALL_OW 435
4408: AND
4409: IFFALSE 4521
4411: GO 4413
4413: DISABLE
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
// begin enable ;
4418: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: LD_INT 13
4426: PPUSH
4427: CALL_OW 435
4431: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4432: LD_ADDR_VAR 0 1
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 3
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 60
4452: PUSH
4453: EMPTY
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 50
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: LD_INT 34
4468: PUSH
4469: LD_INT 51
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PPUSH
4482: CALL_OW 69
4486: PUSH
4487: FOR_IN
4488: IFFALSE 4519
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4490: LD_VAR 0 1
4494: PPUSH
4495: LD_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 2
4511: ARRAY
4512: PPUSH
4513: CALL_OW 117
4517: GO 4487
4519: POP
4520: POP
// end ;
4521: PPOPN 2
4523: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4524: LD_OWVAR 67
4528: PUSH
4529: LD_INT 1
4531: GREATER
4532: PUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 302
4540: AND
4541: IFFALSE 4697
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4549: LD_ADDR_VAR 0 1
4553: PUSH
4554: DOUBLE
4555: LD_INT 1
4557: DEC
4558: ST_TO_ADDR
4559: LD_INT 3
4561: PUSH
4562: LD_INT 4
4564: PUSH
4565: LD_INT 5
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4628
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4586: LD_INT 1
4588: PUSH
4589: LD_INT 40
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_VAR 0 1
4600: PUSH
4601: LD_INT 2
4603: MOD
4604: PUSH
4605: LD_INT 1
4607: PLUS
4608: ARRAY
4609: PPUSH
4610: LD_INT 21
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: LD_INT 45
4621: PPUSH
4622: CALL_OW 185
// end ;
4626: GO 4583
4628: POP
4629: POP
// wait ( 12 12$00 ) ;
4630: LD_INT 25200
4632: PPUSH
4633: CALL_OW 67
// for i := 1 to 2 do
4637: LD_ADDR_VAR 0 1
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 2
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4695
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4653: LD_INT 1
4655: PUSH
4656: LD_INT 40
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 1
4667: PUSH
4668: LD_INT 2
4670: MOD
4671: PUSH
4672: LD_INT 1
4674: PLUS
4675: ARRAY
4676: PPUSH
4677: LD_INT 21
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 45
4688: PPUSH
4689: CALL_OW 185
// end ;
4693: GO 4650
4695: POP
4696: POP
// end ;
4697: PPOPN 1
4699: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4700: LD_EXP 16
4704: IFFALSE 5290
4706: GO 4708
4708: DISABLE
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// begin enable ;
4714: ENABLE
// if not ruMobile then
4715: LD_EXP 16
4719: NOT
4720: IFFALSE 4724
// exit ;
4722: GO 5290
// for i in ruMobile do
4724: LD_ADDR_VAR 0 1
4728: PUSH
4729: LD_EXP 16
4733: PUSH
4734: FOR_IN
4735: IFFALSE 5288
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 302
4746: NOT
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: LD_INT 3
4760: NONEQUAL
4761: OR
4762: IFFALSE 4782
// begin ruMobile := ruMobile diff i ;
4764: LD_ADDR_EXP 16
4768: PUSH
4769: LD_EXP 16
4773: PUSH
4774: LD_VAR 0 1
4778: DIFF
4779: ST_TO_ADDR
// continue ;
4780: GO 4734
// end ; if GetTag ( i ) = 300 then
4782: LD_VAR 0 1
4786: PPUSH
4787: CALL_OW 110
4791: PUSH
4792: LD_INT 300
4794: EQUAL
4795: IFFALSE 4925
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 261
4806: PUSH
4807: LD_INT 50
4809: LESS
4810: PUSH
4811: LD_VAR 0 1
4815: PPUSH
4816: CALL_OW 262
4820: PUSH
4821: LD_INT 1
4823: EQUAL
4824: AND
4825: IFFALSE 4884
// begin ComMoveXY ( i , 120 , 58 ) ;
4827: LD_VAR 0 1
4831: PPUSH
4832: LD_INT 120
4834: PPUSH
4835: LD_INT 58
4837: PPUSH
4838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4842: LD_INT 35
4844: PPUSH
4845: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 120
4856: PPUSH
4857: LD_INT 58
4859: PPUSH
4860: CALL_OW 297
4864: PUSH
4865: LD_INT 4
4867: LESS
4868: IFFALSE 4842
// SetFuel ( i , 100 ) ;
4870: LD_VAR 0 1
4874: PPUSH
4875: LD_INT 100
4877: PPUSH
4878: CALL_OW 240
// end else
4882: GO 4925
// if not IsInArea ( i , ruParkingArea ) then
4884: LD_VAR 0 1
4888: PPUSH
4889: LD_INT 10
4891: PPUSH
4892: CALL_OW 308
4896: NOT
4897: IFFALSE 4913
// ComMoveToArea ( i , ruParkingArea ) else
4899: LD_VAR 0 1
4903: PPUSH
4904: LD_INT 10
4906: PPUSH
4907: CALL_OW 113
4911: GO 4925
// SetTag ( i , 301 ) ;
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_INT 301
4920: PPUSH
4921: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 110
4934: PUSH
4935: LD_INT 301
4937: EQUAL
4938: IFFALSE 5068
// begin if GetLives ( i ) < 1000 then
4940: LD_VAR 0 1
4944: PPUSH
4945: CALL_OW 256
4949: PUSH
4950: LD_INT 1000
4952: LESS
4953: IFFALSE 5045
// begin if not IsDrivenBy ( i ) then
4955: LD_VAR 0 1
4959: PPUSH
4960: CALL_OW 311
4964: NOT
4965: IFFALSE 4969
// continue ;
4967: GO 4734
// mech := IsDrivenBy ( i ) ;
4969: LD_ADDR_VAR 0 2
4973: PUSH
4974: LD_VAR 0 1
4978: PPUSH
4979: CALL_OW 311
4983: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4993: LD_VAR 0 2
4997: PPUSH
4998: LD_VAR 0 1
5002: PPUSH
5003: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5007: LD_INT 35
5009: PPUSH
5010: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 256
5023: PUSH
5024: LD_INT 1000
5026: EQUAL
5027: IFFALSE 5007
// ComEnterUnit ( mech , i ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_VAR 0 1
5038: PPUSH
5039: CALL_OW 120
// end else
5043: GO 5068
// if IsDrivenBy ( i ) then
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 311
5054: IFFALSE 5068
// SetTag ( i , 0 ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 0
5063: PPUSH
5064: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5068: LD_VAR 0 1
5072: PPUSH
5073: CALL_OW 110
5077: PUSH
5078: LD_INT 300
5080: LESS
5081: IFFALSE 5286
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_INT 11
5090: PPUSH
5091: LD_INT 81
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 70
5105: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL_OW 256
5115: PUSH
5116: LD_INT 650
5118: LESS
5119: IFFALSE 5144
// begin ComStop ( i ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: CALL_OW 141
// SetTag ( i , 300 ) ;
5130: LD_VAR 0 1
5134: PPUSH
5135: LD_INT 300
5137: PPUSH
5138: CALL_OW 109
// continue ;
5142: GO 4734
// end ; if enemy then
5144: LD_VAR 0 3
5148: IFFALSE 5188
// begin if not HasTask ( i ) then
5150: LD_VAR 0 1
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: IFFALSE 5186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 74
5181: PPUSH
5182: CALL_OW 115
// end else
5186: GO 5286
// if ruMobile then
5188: LD_EXP 16
5192: IFFALSE 5286
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: LD_INT 81
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 69
5213: ST_TO_ADDR
// if enemy then
5214: LD_VAR 0 3
5218: IFFALSE 5286
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5220: LD_VAR 0 1
5224: PPUSH
5225: LD_INT 113
5227: PUSH
5228: LD_INT 80
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 118
5237: PUSH
5238: LD_INT 100
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 102
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 114
5257: PUSH
5258: LD_INT 120
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 86
5267: PUSH
5268: LD_INT 116
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: PPUSH
5282: CALL 71324 0 2
// end ; end ; end ;
5286: GO 4734
5288: POP
5289: POP
// end ;
5290: PPOPN 3
5292: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5293: LD_EXP 18
5297: IFFALSE 5343
5299: GO 5301
5301: DISABLE
5302: LD_INT 0
5304: PPUSH
// begin enable ;
5305: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5306: LD_ADDR_VAR 0 1
5310: PUSH
5311: LD_EXP 18
5315: PPUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PPUSH
5322: CALL_OW 72
5326: ST_TO_ADDR
// ruAttackers := [ ] ;
5327: LD_ADDR_EXP 18
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// SendAttack ( tmp ) ;
5334: LD_VAR 0 1
5338: PPUSH
5339: CALL 5346 0 1
// end ;
5343: PPOPN 1
5345: END
// function SendAttack ( group ) ; var i , tmp ; begin
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
// for i in group do
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: FOR_IN
5362: IFFALSE 5428
// begin SetTag ( i , 0 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 0
5371: PPUSH
5372: CALL_OW 109
// if Prob ( 30 ) then
5376: LD_INT 30
5378: PPUSH
5379: CALL_OW 13
5383: IFFALSE 5411
// begin SetTag ( i , 1 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 116
5404: PPUSH
5405: CALL_OW 120
// end else
5409: GO 5426
// ComAgressiveMove ( i , 118 , 93 ) ;
5411: LD_VAR 0 3
5415: PPUSH
5416: LD_INT 118
5418: PPUSH
5419: LD_INT 93
5421: PPUSH
5422: CALL_OW 114
// end ;
5426: GO 5361
5428: POP
5429: POP
// repeat wait ( 0 0$1 ) ;
5430: LD_INT 35
5432: PPUSH
5433: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5437: LD_ADDR_VAR 0 4
5441: PUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 120
5449: PUSH
5450: LD_INT 0
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 72
5461: ST_TO_ADDR
// for i in tmp do
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_VAR 0 4
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5620
// begin if not IsOk ( i ) then
5475: LD_VAR 0 3
5479: PPUSH
5480: CALL_OW 302
5484: NOT
5485: IFFALSE 5505
// begin tmp := tmp diff i ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_VAR 0 4
5496: PUSH
5497: LD_VAR 0 3
5501: DIFF
5502: ST_TO_ADDR
// continue ;
5503: GO 5472
// end ; if GetDistUnits ( i , usDep ) < 8 then
5505: LD_VAR 0 3
5509: PPUSH
5510: LD_INT 48
5512: PPUSH
5513: CALL_OW 296
5517: PUSH
5518: LD_INT 8
5520: LESS
5521: IFFALSE 5537
// begin ComAttackUnit ( i , usDep ) ;
5523: LD_VAR 0 3
5527: PPUSH
5528: LD_INT 48
5530: PPUSH
5531: CALL_OW 115
// continue ;
5535: GO 5472
// end ; if not See ( 1 , i ) then
5537: LD_INT 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: CALL_OW 292
5549: NOT
5550: IFFALSE 5569
// ComAgressiveMove ( i , 86 , 116 ) else
5552: LD_VAR 0 3
5556: PPUSH
5557: LD_INT 86
5559: PPUSH
5560: LD_INT 116
5562: PPUSH
5563: CALL_OW 114
5567: GO 5618
// if GetWeapon ( i ) <> ru_time_lapser then
5569: LD_VAR 0 3
5573: PPUSH
5574: CALL_OW 264
5578: PUSH
5579: LD_INT 49
5581: NONEQUAL
5582: IFFALSE 5618
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_INT 81
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 3
5608: PPUSH
5609: CALL_OW 74
5613: PPUSH
5614: CALL_OW 115
// end ;
5618: GO 5472
5620: POP
5621: POP
// until not tmp ;
5622: LD_VAR 0 4
5626: NOT
5627: IFFALSE 5430
// end ; end_of_file
5629: LD_VAR 0 2
5633: RET
// on UnitDestroyed ( unit ) do var i ;
5634: LD_INT 0
5636: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL 27006 0 1
// if unit = JMM then
5646: LD_VAR 0 1
5650: PUSH
5651: LD_EXP 8
5655: EQUAL
5656: IFFALSE 5665
// YouLost ( JMM ) ;
5658: LD_STRING JMM
5660: PPUSH
5661: CALL_OW 104
// if GetSide ( unit ) = 4 then
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 255
5674: PUSH
5675: LD_INT 4
5677: EQUAL
5678: IFFALSE 5737
// begin if unit = Joan then
5680: LD_VAR 0 1
5684: PUSH
5685: LD_EXP 10
5689: EQUAL
5690: IFFALSE 5699
// YouLost ( Joan ) ;
5692: LD_STRING Joan
5694: PPUSH
5695: CALL_OW 104
// if unit = Connie then
5699: LD_VAR 0 1
5703: PUSH
5704: LD_EXP 12
5708: EQUAL
5709: IFFALSE 5718
// YouLost ( Connie ) ;
5711: LD_STRING Connie
5713: PPUSH
5714: CALL_OW 104
// if unit = Lisa then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_EXP 11
5727: EQUAL
5728: IFFALSE 5737
// YouLost ( Lisa ) ;
5730: LD_STRING Lisa
5732: PPUSH
5733: CALL_OW 104
// end ; if unit in ruAttackers then
5737: LD_VAR 0 1
5741: PUSH
5742: LD_EXP 18
5746: IN
5747: IFFALSE 5765
// ruAttackers := ruAttackers diff unit ;
5749: LD_ADDR_EXP 18
5753: PUSH
5754: LD_EXP 18
5758: PUSH
5759: LD_VAR 0 1
5763: DIFF
5764: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 264
5774: PUSH
5775: LD_INT 51
5777: EQUAL
5778: PUSH
5779: LD_INT 40
5781: PPUSH
5782: CALL_OW 302
5786: AND
5787: IFFALSE 5827
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5789: LD_INT 40
5791: PPUSH
5792: LD_INT 21
5794: PPUSH
5795: LD_INT 1
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_INT 2
5810: PPUSH
5811: CALL_OW 12
5815: ARRAY
5816: PPUSH
5817: LD_INT 3
5819: PPUSH
5820: LD_INT 51
5822: PPUSH
5823: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 264
5836: PUSH
5837: LD_INT 52
5839: EQUAL
5840: PUSH
5841: LD_INT 40
5843: PPUSH
5844: CALL_OW 302
5848: AND
5849: IFFALSE 5889
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5851: LD_INT 40
5853: PPUSH
5854: LD_INT 21
5856: PPUSH
5857: LD_INT 1
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL_OW 12
5877: ARRAY
5878: PPUSH
5879: LD_INT 3
5881: PPUSH
5882: LD_INT 52
5884: PPUSH
5885: CALL_OW 185
// if unit in ruMobile then
5889: LD_VAR 0 1
5893: PUSH
5894: LD_EXP 16
5898: IN
5899: IFFALSE 5917
// ruMobile := ruMobile diff i ;
5901: LD_ADDR_EXP 16
5905: PUSH
5906: LD_EXP 16
5910: PUSH
5911: LD_VAR 0 2
5915: DIFF
5916: ST_TO_ADDR
// end ;
5917: PPOPN 2
5919: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
5920: LD_VAR 0 2
5924: PPUSH
5925: CALL_OW 255
5929: PUSH
5930: LD_INT 3
5932: EQUAL
5933: IFFALSE 5947
// SetTag ( unit , 0 ) ;
5935: LD_VAR 0 2
5939: PPUSH
5940: LD_INT 0
5942: PPUSH
5943: CALL_OW 109
// end ;
5947: PPOPN 2
5949: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 255
5959: PUSH
5960: LD_INT 3
5962: EQUAL
5963: PUSH
5964: LD_VAR 0 1
5968: PUSH
5969: LD_EXP 19
5973: IN
5974: AND
5975: IFFALSE 5993
// ruTechList := ruTechList diff tech ;
5977: LD_ADDR_EXP 19
5981: PUSH
5982: LD_EXP 19
5986: PUSH
5987: LD_VAR 0 1
5991: DIFF
5992: ST_TO_ADDR
// end ;
5993: PPOPN 2
5995: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
5996: LD_INT 0
5998: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL 27128 0 2
// if GetSide ( vehicle ) <> 3 then
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 255
6022: PUSH
6023: LD_INT 3
6025: NONEQUAL
6026: IFFALSE 6097
// begin if GetWeapon ( vehicle ) = us_double_laser then
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 264
6037: PUSH
6038: LD_INT 10
6040: EQUAL
6041: IFFALSE 6095
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6043: LD_ADDR_EXP 7
6047: PUSH
6048: LD_EXP 7
6052: PPUSH
6053: CALL 70081 0 1
6057: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL_OW 313
6072: PUSH
6073: FOR_IN
6074: IFFALSE 6093
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_INT 3
6083: PPUSH
6084: LD_INT 1000
6086: PPUSH
6087: CALL_OW 591
6091: GO 6073
6093: POP
6094: POP
// end ; exit ;
6095: GO 6191
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6097: LD_VAR 0 1
6101: PPUSH
6102: CALL_OW 264
6106: PUSH
6107: LD_INT 51
6109: PUSH
6110: LD_INT 52
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: IN
6117: IFFALSE 6121
// exit ;
6119: GO 6191
// if GetControl ( vehicle ) = control_computer then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL_OW 263
6130: PUSH
6131: LD_INT 3
6133: EQUAL
6134: IFFALSE 6156
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6136: LD_ADDR_EXP 18
6140: PUSH
6141: LD_EXP 18
6145: PPUSH
6146: LD_VAR 0 1
6150: PPUSH
6151: CALL 68718 0 2
6155: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 263
6165: PUSH
6166: LD_INT 1
6168: EQUAL
6169: IFFALSE 6191
// ruMobile := Join ( ruMobile , vehicle ) ;
6171: LD_ADDR_EXP 16
6175: PUSH
6176: LD_EXP 16
6180: PPUSH
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL 68718 0 2
6190: ST_TO_ADDR
// end ;
6191: PPOPN 3
6193: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 255
6203: PUSH
6204: LD_INT 3
6206: EQUAL
6207: PUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 257
6217: PUSH
6218: LD_INT 3
6220: EQUAL
6221: AND
6222: PUSH
6223: LD_INT 1
6225: PPUSH
6226: CALL_OW 255
6230: PUSH
6231: LD_INT 3
6233: EQUAL
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: IFFALSE 6258
// ComEnterUnit ( human , ruFac1 ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 120
// end ;
6258: PPOPN 4
6260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL 27112 0 1
// end ; end_of_file
6270: PPOPN 1
6272: END
// export function Action ; var dec1 , dec2 , veh ; begin
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
// veh := IsInUnit ( JMM ) ;
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOn ;
6294: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 30
6314: PPUSH
6315: LD_INT 11
6317: PPUSH
6318: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6322: LD_VAR 0 4
6326: PPUSH
6327: LD_INT 69
6329: PPUSH
6330: LD_INT 34
6332: PPUSH
6333: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6337: LD_INT 30
6339: PPUSH
6340: LD_INT 11
6342: PPUSH
6343: CALL_OW 84
// wait ( 0 0$3 ) ;
6347: LD_INT 105
6349: PPUSH
6350: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6354: LD_EXP 13
6358: PPUSH
6359: LD_STRING D1-Pow-1
6361: PPUSH
6362: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6366: LD_EXP 8
6370: PPUSH
6371: CALL_OW 121
// AddComHold ( JMM ) ;
6375: LD_EXP 8
6379: PPUSH
6380: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6384: LD_EXP 8
6388: PPUSH
6389: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6393: LD_EXP 8
6397: PPUSH
6398: LD_STRING D1-JMM-1
6400: PPUSH
6401: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6405: LD_EXP 13
6409: PPUSH
6410: LD_STRING D1-Pow-2
6412: PPUSH
6413: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6417: LD_EXP 8
6421: PPUSH
6422: LD_STRING D1-JMM-2
6424: PPUSH
6425: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6429: LD_EXP 8
6433: PPUSH
6434: LD_VAR 0 4
6438: PPUSH
6439: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6443: LD_STRING M1
6445: PPUSH
6446: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6450: LD_INT 16
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6460: LD_INT 35
6462: PPUSH
6463: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6467: LD_EXP 8
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6481: LD_VAR 0 4
6485: PPUSH
6486: LD_INT 51
6488: PPUSH
6489: LD_INT 21
6491: PPUSH
6492: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6505: LD_VAR 0 4
6509: PPUSH
6510: LD_INT 51
6512: PPUSH
6513: LD_INT 21
6515: PPUSH
6516: CALL_OW 297
6520: PUSH
6521: LD_INT 6
6523: LESS
6524: IFFALSE 6460
// if JMMGirl = 1 then
6526: LD_EXP 2
6530: PUSH
6531: LD_INT 1
6533: EQUAL
6534: IFFALSE 6833
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6536: LD_EXP 10
6540: PPUSH
6541: LD_STRING D2J-Joan-1
6543: PPUSH
6544: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_STRING Q1
6555: PPUSH
6556: CALL_OW 97
6560: ST_TO_ADDR
// if dec1 = 1 then
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 1
6568: EQUAL
6569: IFFALSE 6824
// begin ComExitVehicle ( JMM ) ;
6571: LD_EXP 8
6575: PPUSH
6576: CALL_OW 121
// AddComHold ( JMM ) ;
6580: LD_EXP 8
6584: PPUSH
6585: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6589: LD_EXP 8
6593: PPUSH
6594: LD_STRING D2J-JMM-1
6596: PPUSH
6597: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6601: LD_EXP 10
6605: PPUSH
6606: LD_STRING D2J-Joan-2
6608: PPUSH
6609: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6613: LD_EXP 8
6617: PPUSH
6618: LD_STRING D2J-JMM-2
6620: PPUSH
6621: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6625: LD_EXP 10
6629: PPUSH
6630: LD_STRING D2J-Joan-3
6632: PPUSH
6633: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6637: LD_EXP 13
6641: PPUSH
6642: LD_STRING DPowell-Pow-1
6644: PPUSH
6645: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_STRING Q2J
6656: PPUSH
6657: CALL_OW 97
6661: ST_TO_ADDR
// if dec2 = 1 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 1
6669: EQUAL
6670: IFFALSE 6712
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6672: LD_EXP 8
6676: PPUSH
6677: LD_STRING D2Ja-JMM-1
6679: PPUSH
6680: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6684: LD_EXP 10
6688: PPUSH
6689: LD_STRING D2Ja-Joan-1
6691: PPUSH
6692: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6696: LD_EXP 8
6700: PPUSH
6701: LD_STRING D2Ja-JMM-2
6703: PPUSH
6704: CALL_OW 88
// InGameOff ;
6708: CALL_OW 9
// end ; if dec2 = 2 then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 2
6719: EQUAL
6720: IFFALSE 6791
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6722: LD_EXP 8
6726: PPUSH
6727: LD_STRING D2Jb-JMM-1
6729: PPUSH
6730: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6734: LD_EXP 10
6738: PPUSH
6739: LD_STRING D2Jb-Joan-1
6741: PPUSH
6742: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6746: LD_EXP 8
6750: PPUSH
6751: LD_STRING D2Jb-JMM-2
6753: PPUSH
6754: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6758: LD_EXP 10
6762: PPUSH
6763: LD_STRING D2Jb-Joan-2
6765: PPUSH
6766: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6770: LD_EXP 8
6774: PPUSH
6775: LD_STRING D2Jb-JMM-3
6777: PPUSH
6778: CALL_OW 88
// FinishMission ( true ) ;
6782: LD_INT 1
6784: PPUSH
6785: CALL 9664 0 1
// exit ;
6789: GO 7373
// end ; if dec2 = 3 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: IFFALSE 6822
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
6801: LD_EXP 10
6805: PPUSH
6806: LD_STRING D2Jc-Joan-1
6808: PPUSH
6809: CALL_OW 94
// FinishMission ( true ) ;
6813: LD_INT 1
6815: PPUSH
6816: CALL 9664 0 1
// exit ;
6820: GO 7373
// end ; end else
6822: GO 6833
// begin FinishMission ( true ) ;
6824: LD_INT 1
6826: PPUSH
6827: CALL 9664 0 1
// exit ;
6831: GO 7373
// end ; end ; if JMMGirl = 2 then
6833: LD_EXP 2
6837: PUSH
6838: LD_INT 2
6840: EQUAL
6841: IFFALSE 7152
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6843: LD_EXP 11
6847: PPUSH
6848: LD_STRING D2L-Lisa-1
6850: PPUSH
6851: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_STRING Q1
6862: PPUSH
6863: CALL_OW 97
6867: ST_TO_ADDR
// if dec1 = 1 then
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 1
6875: EQUAL
6876: IFFALSE 7143
// begin ComExitVehicle ( JMM ) ;
6878: LD_EXP 8
6882: PPUSH
6883: CALL_OW 121
// AddComHold ( JMM ) ;
6887: LD_EXP 8
6891: PPUSH
6892: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
6896: LD_EXP 8
6900: PPUSH
6901: LD_STRING D2L-JMM-1
6903: PPUSH
6904: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6908: LD_EXP 11
6912: PPUSH
6913: LD_STRING D2L-Lisa-2
6915: PPUSH
6916: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6920: LD_EXP 8
6924: PPUSH
6925: LD_STRING D2L-JMM-2
6927: PPUSH
6928: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
6932: LD_EXP 11
6936: PPUSH
6937: LD_STRING DL-Lisa-3
6939: PPUSH
6940: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6944: LD_EXP 13
6948: PPUSH
6949: LD_STRING DPowell-Pow-1
6951: PPUSH
6952: CALL_OW 94
// dec2 := Query ( Q2L ) ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_STRING Q2L
6963: PPUSH
6964: CALL_OW 97
6968: ST_TO_ADDR
// if dec2 = 1 then
6969: LD_VAR 0 3
6973: PUSH
6974: LD_INT 1
6976: EQUAL
6977: IFFALSE 7043
// begin Say ( JMM , D2La-JMM-1 ) ;
6979: LD_EXP 8
6983: PPUSH
6984: LD_STRING D2La-JMM-1
6986: PPUSH
6987: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6991: LD_EXP 11
6995: PPUSH
6996: LD_STRING D2La-Lisa-1
6998: PPUSH
6999: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7003: LD_EXP 8
7007: PPUSH
7008: LD_STRING D2La-JMM-2
7010: PPUSH
7011: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7015: LD_EXP 11
7019: PPUSH
7020: LD_STRING D2La-Lisa-2
7022: PPUSH
7023: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7027: LD_EXP 8
7031: PPUSH
7032: LD_STRING D2La-JMM-3
7034: PPUSH
7035: CALL_OW 88
// InGameOff ;
7039: CALL_OW 9
// end ; if dec2 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7110
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7053: LD_EXP 8
7057: PPUSH
7058: LD_STRING D2Lb-JMM-1
7060: PPUSH
7061: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7065: LD_EXP 11
7069: PPUSH
7070: LD_STRING D2Lb-Lisa-1
7072: PPUSH
7073: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7077: LD_EXP 8
7081: PPUSH
7082: LD_STRING D2Lb-JMM-2
7084: PPUSH
7085: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7089: LD_EXP 11
7093: PPUSH
7094: LD_STRING D2Lb-Lisa-2
7096: PPUSH
7097: CALL_OW 94
// FinishMission ( true ) ;
7101: LD_INT 1
7103: PPUSH
7104: CALL 9664 0 1
// exit ;
7108: GO 7373
// end ; if dec2 = 3 then
7110: LD_VAR 0 3
7114: PUSH
7115: LD_INT 3
7117: EQUAL
7118: IFFALSE 7141
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7120: LD_EXP 11
7124: PPUSH
7125: LD_STRING D2Lc-Lisa-1
7127: PPUSH
7128: CALL_OW 94
// FinishMission ( true ) ;
7132: LD_INT 1
7134: PPUSH
7135: CALL 9664 0 1
// exit ;
7139: GO 7373
// end ; end else
7141: GO 7152
// begin FinishMission ( true ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL 9664 0 1
// exit ;
7150: GO 7373
// end ; end ; if JMMGirl = 3 then
7152: LD_EXP 2
7156: PUSH
7157: LD_INT 3
7159: EQUAL
7160: IFFALSE 7373
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7162: LD_EXP 12
7166: PPUSH
7167: LD_STRING D2X-Con-1
7169: PPUSH
7170: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_STRING Q1
7181: PPUSH
7182: CALL_OW 97
7186: ST_TO_ADDR
// if dec1 = 1 then
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: EQUAL
7195: IFFALSE 7366
// begin ComExitVehicle ( JMM ) ;
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 121
// AddComHold ( JMM ) ;
7206: LD_EXP 8
7210: PPUSH
7211: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7215: LD_EXP 8
7219: PPUSH
7220: LD_STRING D2X-JMM-1
7222: PPUSH
7223: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7227: LD_EXP 12
7231: PPUSH
7232: LD_STRING D2X-Con-2
7234: PPUSH
7235: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7239: LD_EXP 13
7243: PPUSH
7244: LD_STRING DPowell-Pow-1
7246: PPUSH
7247: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_STRING Q2X
7258: PPUSH
7259: CALL_OW 97
7263: ST_TO_ADDR
// if dec2 = 1 then
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 1
7271: EQUAL
7272: IFFALSE 7290
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_STRING D2Xa-JMM-1
7281: PPUSH
7282: CALL_OW 88
// InGameOff ;
7286: CALL_OW 9
// end ; if dec2 = 2 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 2
7297: EQUAL
7298: IFFALSE 7333
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7300: LD_EXP 8
7304: PPUSH
7305: LD_STRING D2Xb-JMM-1
7307: PPUSH
7308: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7312: LD_EXP 12
7316: PPUSH
7317: LD_STRING D2Xb-Con-1
7319: PPUSH
7320: CALL_OW 94
// FinishMission ( true ) ;
7324: LD_INT 1
7326: PPUSH
7327: CALL 9664 0 1
// exit ;
7331: GO 7373
// end ; if dec2 = 3 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 3
7340: EQUAL
7341: IFFALSE 7364
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7343: LD_EXP 12
7347: PPUSH
7348: LD_STRING D2Xc-Con-1
7350: PPUSH
7351: CALL_OW 94
// FinishMission ( true ) ;
7355: LD_INT 1
7357: PPUSH
7358: CALL 9664 0 1
// exit ;
7362: GO 7373
// end ; end else
7364: GO 7373
// begin FinishMission ( true ) ;
7366: LD_INT 1
7368: PPUSH
7369: CALL 9664 0 1
// end ; end ; end ;
7373: LD_VAR 0 1
7377: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7378: LD_EXP 8
7382: PPUSH
7383: LD_INT 15
7385: PPUSH
7386: CALL_OW 308
7390: IFFALSE 8638
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
// begin if tick < 5 5$00 then
7398: LD_OWVAR 1
7402: PUSH
7403: LD_INT 10500
7405: LESS
7406: IFFALSE 7658
// begin uc_side := 6 ;
7408: LD_ADDR_OWVAR 20
7412: PUSH
7413: LD_INT 6
7415: ST_TO_ADDR
// uc_nation := 3 ;
7416: LD_ADDR_OWVAR 21
7420: PUSH
7421: LD_INT 3
7423: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7424: LD_INT 1
7426: PPUSH
7427: LD_INT 105
7429: PPUSH
7430: LD_INT 97
7432: PPUSH
7433: CALL_OW 293
7437: NOT
7438: IFFALSE 7502
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 3
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 40
7454: PPUSH
7455: CALL 36334 0 5
// veh := CreateVehicle ;
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: CALL_OW 45
7468: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7469: LD_VAR 0 1
7473: PPUSH
7474: LD_INT 200
7476: PPUSH
7477: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_INT 105
7488: PPUSH
7489: LD_INT 97
7491: PPUSH
7492: LD_INT 3
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL 70860 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 116
7507: PPUSH
7508: LD_INT 120
7510: PPUSH
7511: CALL_OW 293
7515: NOT
7516: IFFALSE 7580
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7518: LD_INT 22
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 3
7526: PPUSH
7527: LD_INT 45
7529: PPUSH
7530: LD_INT 40
7532: PPUSH
7533: CALL 36334 0 5
// veh := CreateVehicle ;
7537: LD_ADDR_VAR 0 1
7541: PUSH
7542: CALL_OW 45
7546: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7547: LD_VAR 0 1
7551: PPUSH
7552: LD_INT 200
7554: PPUSH
7555: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7559: LD_VAR 0 1
7563: PPUSH
7564: LD_INT 116
7566: PPUSH
7567: LD_INT 120
7569: PPUSH
7570: LD_INT 4
7572: PPUSH
7573: LD_INT 0
7575: PPUSH
7576: CALL 70860 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7580: LD_INT 1
7582: PPUSH
7583: LD_INT 116
7585: PPUSH
7586: LD_INT 120
7588: PPUSH
7589: CALL_OW 293
7593: NOT
7594: IFFALSE 7658
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7596: LD_INT 24
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: LD_INT 3
7604: PPUSH
7605: LD_INT 45
7607: PPUSH
7608: LD_INT 30
7610: PPUSH
7611: CALL 36334 0 5
// veh := CreateVehicle ;
7615: LD_ADDR_VAR 0 1
7619: PUSH
7620: CALL_OW 45
7624: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 200
7632: PPUSH
7633: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_INT 116
7644: PPUSH
7645: LD_INT 120
7647: PPUSH
7648: LD_INT 4
7650: PPUSH
7651: LD_INT 0
7653: PPUSH
7654: CALL 70860 0 5
// end ; end ; InGameOn ;
7658: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7662: LD_INT 35
7664: PPUSH
7665: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7669: LD_EXP 8
7673: PPUSH
7674: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7678: LD_EXP 8
7682: PPUSH
7683: LD_INT 81
7685: PPUSH
7686: LD_INT 109
7688: PPUSH
7689: CALL_OW 111
// AddComHold ( JMM ) ;
7693: LD_EXP 8
7697: PPUSH
7698: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7702: LD_EXP 10
7706: PUSH
7707: LD_EXP 11
7711: PUSH
7712: LD_EXP 12
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: PPUSH
7722: LD_EXP 8
7726: PPUSH
7727: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7731: LD_EXP 10
7735: PUSH
7736: LD_EXP 11
7740: PUSH
7741: LD_EXP 12
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: LD_INT 91
7753: PUSH
7754: LD_EXP 8
7758: PUSH
7759: LD_INT 6
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: IFFALSE 7662
// case JMMGirl of 1 :
7773: LD_EXP 2
7777: PUSH
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 8071
7786: POP
// begin ChangeSideKappaBase ;
7787: CALL 1447 0 0
// ComTurnUnit ( Joan , JMM ) ;
7791: LD_EXP 10
7795: PPUSH
7796: LD_EXP 8
7800: PPUSH
7801: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
7805: LD_EXP 8
7809: PPUSH
7810: LD_EXP 10
7814: PPUSH
7815: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7819: LD_EXP 10
7823: PUSH
7824: LD_EXP 8
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 87
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// DialogueOn ;
7844: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
7848: LD_EXP 10
7852: PPUSH
7853: LD_STRING D3J-Joan-1
7855: PPUSH
7856: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7860: LD_EXP 8
7864: PPUSH
7865: LD_STRING D3J-JMM-1
7867: PPUSH
7868: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
7872: LD_EXP 10
7876: PPUSH
7877: LD_STRING D3J-Joan-2
7879: PPUSH
7880: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
7884: LD_EXP 8
7888: PPUSH
7889: LD_STRING D3J-JMM-2
7891: PPUSH
7892: CALL_OW 88
// wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7903: LD_EXP 8
7907: PPUSH
7908: LD_STRING D4-JMM-1
7910: PPUSH
7911: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
7915: LD_EXP 10
7919: PPUSH
7920: LD_STRING D4-Joan-1
7922: PPUSH
7923: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7927: LD_EXP 8
7931: PPUSH
7932: LD_STRING D4-JMM-2
7934: PPUSH
7935: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
7939: LD_EXP 10
7943: PPUSH
7944: LD_STRING D4-Joan-2
7946: PPUSH
7947: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7951: LD_EXP 8
7955: PPUSH
7956: LD_STRING D4-JMM-3
7958: PPUSH
7959: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
7963: LD_INT 10
7965: PPUSH
7966: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
7970: LD_EXP 13
7974: PPUSH
7975: LD_STRING D7-Pow-1
7977: PPUSH
7978: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7982: LD_EXP 8
7986: PPUSH
7987: LD_STRING D7-JMM-1
7989: PPUSH
7990: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7994: LD_EXP 13
7998: PPUSH
7999: LD_STRING D7-Pow-2
8001: PPUSH
8002: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8006: LD_EXP 8
8010: PPUSH
8011: LD_STRING D7-JMM-2
8013: PPUSH
8014: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8018: LD_EXP 13
8022: PPUSH
8023: LD_STRING D7-Pow-3
8025: PPUSH
8026: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8030: LD_EXP 8
8034: PPUSH
8035: LD_STRING D7-JMM-3
8037: PPUSH
8038: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8042: LD_EXP 13
8046: PPUSH
8047: LD_STRING D7-Pow-4
8049: PPUSH
8050: CALL_OW 94
// DialogueOff ;
8054: CALL_OW 7
// InGameOff ;
8058: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8062: LD_STRING M2J
8064: PPUSH
8065: CALL_OW 337
// end ; 2 :
8069: GO 8634
8071: LD_INT 2
8073: DOUBLE
8074: EQUAL
8075: IFTRUE 8079
8077: GO 8364
8079: POP
// begin ChangeSideKappaBase ;
8080: CALL 1447 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8084: LD_EXP 11
8088: PPUSH
8089: LD_EXP 8
8093: PPUSH
8094: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8098: LD_EXP 8
8102: PPUSH
8103: LD_EXP 11
8107: PPUSH
8108: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8112: LD_EXP 11
8116: PUSH
8117: LD_EXP 8
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 87
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// DialogueOn ;
8137: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8141: LD_EXP 11
8145: PPUSH
8146: LD_STRING D3L-Lisa-1
8148: PPUSH
8149: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8153: LD_EXP 8
8157: PPUSH
8158: LD_STRING D3L-JMM-1
8160: PPUSH
8161: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8165: LD_EXP 11
8169: PPUSH
8170: LD_STRING D3L-Lisa-2
8172: PPUSH
8173: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8177: LD_EXP 8
8181: PPUSH
8182: LD_STRING D3L-JMM-2
8184: PPUSH
8185: CALL_OW 88
// wait ( 0 0$1 ) ;
8189: LD_INT 35
8191: PPUSH
8192: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D4-JMM-1
8203: PPUSH
8204: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8208: LD_EXP 11
8212: PPUSH
8213: LD_STRING D4-Lisa-1
8215: PPUSH
8216: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8220: LD_EXP 8
8224: PPUSH
8225: LD_STRING D4-JMM-1
8227: PPUSH
8228: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8232: LD_EXP 11
8236: PPUSH
8237: LD_STRING D4-Lisa-2
8239: PPUSH
8240: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8244: LD_EXP 8
8248: PPUSH
8249: LD_STRING D4-JMM-3
8251: PPUSH
8252: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8256: LD_INT 10
8258: PPUSH
8259: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8263: LD_EXP 13
8267: PPUSH
8268: LD_STRING D7-Pow-1
8270: PPUSH
8271: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8275: LD_EXP 8
8279: PPUSH
8280: LD_STRING D7-JMM-1
8282: PPUSH
8283: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8287: LD_EXP 13
8291: PPUSH
8292: LD_STRING D7-Pow-2
8294: PPUSH
8295: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8299: LD_EXP 8
8303: PPUSH
8304: LD_STRING D7-JMM-2
8306: PPUSH
8307: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8311: LD_EXP 13
8315: PPUSH
8316: LD_STRING D7-Pow-3
8318: PPUSH
8319: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8323: LD_EXP 8
8327: PPUSH
8328: LD_STRING D7-JMM-3
8330: PPUSH
8331: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8335: LD_EXP 13
8339: PPUSH
8340: LD_STRING D7-Pow-4
8342: PPUSH
8343: CALL_OW 94
// DialogueOff ;
8347: CALL_OW 7
// InGameOff ;
8351: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8355: LD_STRING M2L
8357: PPUSH
8358: CALL_OW 337
// end ; 3 :
8362: GO 8634
8364: LD_INT 3
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8633
8372: POP
// begin ChangeSideKappaBase ;
8373: CALL 1447 0 0
// ComTurnUnit ( Connie , JMM ) ;
8377: LD_EXP 12
8381: PPUSH
8382: LD_EXP 8
8386: PPUSH
8387: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8391: LD_EXP 8
8395: PPUSH
8396: LD_EXP 12
8400: PPUSH
8401: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8405: LD_EXP 10
8409: PUSH
8410: LD_EXP 8
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 87
// wait ( 0 0$1 ) ;
8423: LD_INT 35
8425: PPUSH
8426: CALL_OW 67
// DialogueOn ;
8430: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8434: LD_EXP 12
8438: PPUSH
8439: LD_STRING D3X-Con-1
8441: PPUSH
8442: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8446: LD_EXP 8
8450: PPUSH
8451: LD_STRING D3J-JMM-1
8453: PPUSH
8454: CALL_OW 88
// wait ( 0 0$1 ) ;
8458: LD_INT 35
8460: PPUSH
8461: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D4-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8477: LD_EXP 12
8481: PPUSH
8482: LD_STRING D4-Con-1
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D4-JMM-2
8496: PPUSH
8497: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8501: LD_EXP 12
8505: PPUSH
8506: LD_STRING D4-Con-2
8508: PPUSH
8509: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8513: LD_EXP 8
8517: PPUSH
8518: LD_STRING D4-JMM-3
8520: PPUSH
8521: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8532: LD_EXP 13
8536: PPUSH
8537: LD_STRING D7-Pow-1
8539: PPUSH
8540: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8544: LD_EXP 8
8548: PPUSH
8549: LD_STRING D7-JMM-1
8551: PPUSH
8552: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8556: LD_EXP 13
8560: PPUSH
8561: LD_STRING D7-Pow-2
8563: PPUSH
8564: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8568: LD_EXP 8
8572: PPUSH
8573: LD_STRING D7-JMM-2
8575: PPUSH
8576: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8580: LD_EXP 13
8584: PPUSH
8585: LD_STRING D7-Pow-3
8587: PPUSH
8588: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8592: LD_EXP 8
8596: PPUSH
8597: LD_STRING D7-JMM-3
8599: PPUSH
8600: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8604: LD_EXP 13
8608: PPUSH
8609: LD_STRING D7-Pow-4
8611: PPUSH
8612: CALL_OW 94
// DialogueOff ;
8616: CALL_OW 7
// InGameOff ;
8620: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8624: LD_STRING M2X
8626: PPUSH
8627: CALL_OW 337
// end ; end ;
8631: GO 8634
8633: POP
// SaveForQuickRestart ;
8634: CALL_OW 22
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8641: LD_INT 32
8643: PPUSH
8644: CALL_OW 306
8648: IFFALSE 8973
8650: GO 8652
8652: DISABLE
// begin case JMMGirl of 1 :
8653: LD_EXP 2
8657: PUSH
8658: LD_INT 1
8660: DOUBLE
8661: EQUAL
8662: IFTRUE 8666
8664: GO 8780
8666: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8667: LD_EXP 8
8671: PPUSH
8672: LD_STRING D6J-JMM-1
8674: PPUSH
8675: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8679: LD_STRING 13f_Denis
8681: PPUSH
8682: CALL_OW 28
8686: PUSH
8687: LD_STRING 13s_Denis
8689: PPUSH
8690: CALL_OW 28
8694: OR
8695: IFFALSE 8735
// begin Say ( Joan , D6J-Joan-1 ) ;
8697: LD_EXP 10
8701: PPUSH
8702: LD_STRING D6J-Joan-1
8704: PPUSH
8705: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8709: LD_EXP 8
8713: PPUSH
8714: LD_STRING D6J-JMM-2
8716: PPUSH
8717: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8721: LD_EXP 10
8725: PPUSH
8726: LD_STRING D6J-Joan-2
8728: PPUSH
8729: CALL_OW 88
// end else
8733: GO 8747
// Say ( Joan , D6J-Joan-2a ) ;
8735: LD_EXP 10
8739: PPUSH
8740: LD_STRING D6J-Joan-2a
8742: PPUSH
8743: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8747: LD_EXP 8
8751: PPUSH
8752: LD_STRING D6J-JMM-3
8754: PPUSH
8755: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8759: LD_EXP 10
8763: PPUSH
8764: LD_STRING D6J-Joan-3
8766: PPUSH
8767: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8771: LD_STRING M3
8773: PPUSH
8774: CALL_OW 337
// end ; 2 :
8778: GO 8973
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8846
8788: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
8789: LD_EXP 8
8793: PPUSH
8794: LD_STRING D6L-JMM-1
8796: PPUSH
8797: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
8801: LD_EXP 11
8805: PPUSH
8806: LD_STRING D6L-Lisa-1
8808: PPUSH
8809: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
8813: LD_EXP 8
8817: PPUSH
8818: LD_STRING D6L-JMM-2
8820: PPUSH
8821: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
8825: LD_EXP 11
8829: PPUSH
8830: LD_STRING D6L-Lisa-2
8832: PPUSH
8833: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8837: LD_STRING M3
8839: PPUSH
8840: CALL_OW 337
// end ; 3 :
8844: GO 8973
8846: LD_INT 3
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 8972
8854: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
8855: LD_EXP 8
8859: PPUSH
8860: LD_STRING D6X-JMM-1
8862: PPUSH
8863: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
8867: LD_EXP 12
8871: PPUSH
8872: LD_STRING D6X-Con-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
8879: LD_EXP 8
8883: PPUSH
8884: LD_STRING D6X-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
8891: LD_EXP 12
8895: PPUSH
8896: LD_STRING D6X-Con-2
8898: PPUSH
8899: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
8903: LD_EXP 8
8907: PPUSH
8908: LD_STRING D6X-JMM-3
8910: PPUSH
8911: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
8915: LD_EXP 12
8919: PPUSH
8920: LD_STRING D6X-Con-3
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
8927: LD_EXP 8
8931: PPUSH
8932: LD_STRING D6X-JMM-4
8934: PPUSH
8935: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
8939: LD_EXP 12
8943: PPUSH
8944: LD_STRING D6X-Con-4
8946: PPUSH
8947: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
8951: LD_EXP 8
8955: PPUSH
8956: LD_STRING D6X-JMM-5
8958: PPUSH
8959: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8963: LD_STRING M3
8965: PPUSH
8966: CALL_OW 337
// end ; end ;
8970: GO 8973
8972: POP
// end ;
8973: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
8974: LD_INT 22
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 33
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 69
9002: PPUSH
9003: CALL_OW 306
9007: IFFALSE 9153
9009: GO 9011
9011: DISABLE
// begin case JMMGirl of 1 :
9012: LD_EXP 2
9016: PUSH
9017: LD_INT 1
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9062
9025: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D5-JMM-1
9033: PPUSH
9034: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9038: LD_INT 77
9040: PPUSH
9041: LD_INT 87
9043: PPUSH
9044: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9048: LD_EXP 10
9052: PPUSH
9053: LD_STRING D5-Joan-1
9055: PPUSH
9056: CALL_OW 88
// end ; 2 :
9060: GO 9153
9062: LD_INT 2
9064: DOUBLE
9065: EQUAL
9066: IFTRUE 9070
9068: GO 9107
9070: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9071: LD_EXP 8
9075: PPUSH
9076: LD_STRING D5-JMM-1
9078: PPUSH
9079: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9083: LD_INT 77
9085: PPUSH
9086: LD_INT 87
9088: PPUSH
9089: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9093: LD_EXP 11
9097: PPUSH
9098: LD_STRING D5-Lisa-1
9100: PPUSH
9101: CALL_OW 88
// end ; 3 :
9105: GO 9153
9107: LD_INT 3
9109: DOUBLE
9110: EQUAL
9111: IFTRUE 9115
9113: GO 9152
9115: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D5-JMM-1
9123: PPUSH
9124: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9128: LD_INT 77
9130: PPUSH
9131: LD_INT 87
9133: PPUSH
9134: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9138: LD_EXP 12
9142: PPUSH
9143: LD_STRING D5-Con-1
9145: PPUSH
9146: CALL_OW 88
// end ; end ;
9150: GO 9153
9152: POP
// end ;
9153: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9154: LD_EXP 8
9158: PPUSH
9159: CALL_OW 310
9163: PPUSH
9164: LD_INT 16
9166: PPUSH
9167: CALL_OW 308
9171: IFFALSE 9521
9173: GO 9175
9175: DISABLE
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
// begin enable ;
9180: ENABLE
// if JMMGirl = 1 then
9181: LD_EXP 2
9185: PUSH
9186: LD_INT 1
9188: EQUAL
9189: IFFALSE 9206
// JMMGirlVeh := IsInUnit ( Joan ) ;
9191: LD_ADDR_VAR 0 1
9195: PUSH
9196: LD_EXP 10
9200: PPUSH
9201: CALL_OW 310
9205: ST_TO_ADDR
// if JMMGirl = 2 then
9206: LD_EXP 2
9210: PUSH
9211: LD_INT 2
9213: EQUAL
9214: IFFALSE 9231
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9216: LD_ADDR_VAR 0 1
9220: PUSH
9221: LD_EXP 11
9225: PPUSH
9226: CALL_OW 310
9230: ST_TO_ADDR
// if JMMGirl = 3 then
9231: LD_EXP 2
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9256
// JMMGirlVeh := IsInUnit ( Connie ) ;
9241: LD_ADDR_VAR 0 1
9245: PUSH
9246: LD_EXP 12
9250: PPUSH
9251: CALL_OW 310
9255: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9256: LD_EXP 8
9260: PPUSH
9261: CALL_OW 310
9265: PPUSH
9266: LD_EXP 10
9270: PPUSH
9271: CALL_OW 310
9275: PPUSH
9276: CALL_OW 296
9280: PUSH
9281: LD_INT 10
9283: LESS
9284: PUSH
9285: LD_EXP 8
9289: PPUSH
9290: CALL_OW 310
9294: PPUSH
9295: LD_EXP 11
9299: PPUSH
9300: CALL_OW 310
9304: PPUSH
9305: CALL_OW 296
9309: PUSH
9310: LD_INT 10
9312: LESS
9313: OR
9314: PUSH
9315: LD_EXP 8
9319: PPUSH
9320: CALL_OW 310
9324: PPUSH
9325: LD_EXP 12
9329: PPUSH
9330: CALL_OW 310
9334: PPUSH
9335: CALL_OW 296
9339: PUSH
9340: LD_INT 10
9342: LESS
9343: OR
9344: IFFALSE 9441
// begin case Query ( Q3b ) of 1 :
9346: LD_STRING Q3b
9348: PPUSH
9349: CALL_OW 97
9353: PUSH
9354: LD_INT 1
9356: DOUBLE
9357: EQUAL
9358: IFTRUE 9362
9360: GO 9438
9362: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 265
9372: PUSH
9373: EMPTY
9374: LIST
9375: PUSH
9376: LD_VAR 0 1
9380: PPUSH
9381: CALL_OW 262
9385: PUSH
9386: EMPTY
9387: LIST
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 263
9398: PUSH
9399: EMPTY
9400: LIST
9401: PUSH
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 264
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: PPUSH
9421: LD_STRING 14_JMMGirlVeh_1
9423: PPUSH
9424: CALL_OW 39
// FinishMission ( false ) ;
9428: LD_INT 0
9430: PPUSH
9431: CALL 9664 0 1
// disable ;
9435: DISABLE
// end ; end ;
9436: GO 9439
9438: POP
// end else
9439: GO 9521
// begin if JMMGirl = 1 then
9441: LD_EXP 2
9445: PUSH
9446: LD_INT 1
9448: EQUAL
9449: IFFALSE 9466
// dec := Query ( Q3bJ ) else
9451: LD_ADDR_VAR 0 2
9455: PUSH
9456: LD_STRING Q3bJ
9458: PPUSH
9459: CALL_OW 97
9463: ST_TO_ADDR
9464: GO 9504
// if JMMGirl = 2 then
9466: LD_EXP 2
9470: PUSH
9471: LD_INT 2
9473: EQUAL
9474: IFFALSE 9491
// dec := Query ( Q3bL ) else
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_STRING Q3bL
9483: PPUSH
9484: CALL_OW 97
9488: ST_TO_ADDR
9489: GO 9504
// dec := Query ( Q3bX ) ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_STRING Q3bX
9498: PPUSH
9499: CALL_OW 97
9503: ST_TO_ADDR
// if dec = 1 then
9504: LD_VAR 0 2
9508: PUSH
9509: LD_INT 1
9511: EQUAL
9512: IFFALSE 9521
// FinishMission ( false ) ;
9514: LD_INT 0
9516: PPUSH
9517: CALL 9664 0 1
// end ; end ;
9521: PPOPN 2
9523: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9524: LD_INT 22
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 1
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: PUSH
9553: LD_INT 0
9555: EQUAL
9556: IFFALSE 9663
9558: GO 9560
9560: DISABLE
// begin DialogueOn ;
9561: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9565: LD_EXP 8
9569: PPUSH
9570: LD_STRING DEnd-JMM-1
9572: PPUSH
9573: CALL_OW 88
// case JMMGirl of 1 :
9577: LD_EXP 2
9581: PUSH
9582: LD_INT 1
9584: DOUBLE
9585: EQUAL
9586: IFTRUE 9590
9588: GO 9605
9590: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9591: LD_EXP 10
9595: PPUSH
9596: LD_STRING DEnd-Joan-1
9598: PPUSH
9599: CALL_OW 88
9603: GO 9652
9605: LD_INT 2
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9628
9613: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9614: LD_EXP 11
9618: PPUSH
9619: LD_STRING DEnd-Lisa-1
9621: PPUSH
9622: CALL_OW 88
9626: GO 9652
9628: LD_INT 3
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9651
9636: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9637: LD_EXP 12
9641: PPUSH
9642: LD_STRING DEnd-Con-1
9644: PPUSH
9645: CALL_OW 88
9649: GO 9652
9651: POP
// DialogueOff ;
9652: CALL_OW 7
// FinishMission ( false ) ;
9656: LD_INT 0
9658: PPUSH
9659: CALL 9664 0 1
// end ;
9663: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9664: LD_INT 0
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
// m1 := false ;
9672: LD_ADDR_VAR 0 4
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// m2 := false ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// m3 := false ;
9688: LD_ADDR_VAR 0 6
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9696: LD_ADDR_VAR 0 7
9700: PUSH
9701: LD_INT 22
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 21
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: PUSH
9730: LD_INT 0
9732: EQUAL
9733: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9734: LD_EXP 8
9738: PPUSH
9739: LD_STRING 14_JMM
9741: PPUSH
9742: CALL_OW 38
// if tick <= 50 50$00 then
9746: LD_OWVAR 1
9750: PUSH
9751: LD_INT 105000
9753: LESSEQUAL
9754: IFFALSE 9763
// SetAchievement ( ACH_ASPEED_14 ) ;
9756: LD_STRING ACH_ASPEED_14
9758: PPUSH
9759: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9763: LD_EXP 8
9767: PPUSH
9768: CALL_OW 310
9772: PUSH
9773: LD_EXP 8
9777: PPUSH
9778: CALL_OW 310
9782: PPUSH
9783: CALL_OW 247
9787: PUSH
9788: LD_INT 2
9790: EQUAL
9791: AND
9792: IFFALSE 9874
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_EXP 8
9803: PPUSH
9804: CALL_OW 310
9808: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9809: LD_VAR 0 3
9813: PPUSH
9814: CALL_OW 265
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: CALL_OW 262
9831: PUSH
9832: EMPTY
9833: LIST
9834: PUSH
9835: LD_VAR 0 3
9839: PPUSH
9840: CALL_OW 263
9844: PUSH
9845: EMPTY
9846: LIST
9847: PUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: CALL_OW 264
9857: PUSH
9858: EMPTY
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: LD_STRING 14_JMMVeh_1
9869: PPUSH
9870: CALL_OW 39
// end ; if fastEnd then
9874: LD_VAR 0 1
9878: IFFALSE 9969
// begin AddMedal ( fastend , - 1 ) ;
9880: LD_STRING fastend
9882: PPUSH
9883: LD_INT 1
9885: NEG
9886: PPUSH
9887: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9891: LD_STRING fastend
9893: PPUSH
9894: LD_INT 1
9896: NEG
9897: PPUSH
9898: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9902: LD_STRING fastend
9904: PPUSH
9905: LD_INT 1
9907: NEG
9908: PPUSH
9909: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9913: LD_EXP 2
9917: PPUSH
9918: LD_STRING 14_JMMGirl_1
9920: PPUSH
9921: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 0
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9935: LD_INT 0
9937: PPUSH
9938: LD_STRING 14_KappaStatus_1
9940: PPUSH
9941: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9945: LD_STRING Eliminate
9947: PPUSH
9948: CALL_OW 102
// RewardPeople ( JMM ) ;
9952: LD_EXP 8
9956: PPUSH
9957: CALL_OW 43
// YouWin ;
9961: CALL_OW 103
// exit ;
9965: GO 10615
// end else
9967: GO 10508
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9969: LD_EXP 2
9973: PPUSH
9974: LD_STRING 14_JMMGirl_1
9976: PPUSH
9977: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
9981: LD_VAR 0 7
9985: PPUSH
9986: LD_STRING 14_KappaStatus_1
9988: PPUSH
9989: CALL_OW 39
// case JMMGirl of 1 :
9993: LD_EXP 2
9997: PUSH
9998: LD_INT 1
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10006
10004: GO 10134
10006: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10007: LD_EXP 10
10011: PPUSH
10012: CALL_OW 302
10016: PUSH
10017: LD_EXP 10
10021: PPUSH
10022: CALL_OW 255
10026: PUSH
10027: LD_INT 1
10029: EQUAL
10030: AND
10031: PUSH
10032: LD_VAR 0 7
10036: PUSH
10037: LD_EXP 8
10041: PPUSH
10042: CALL_OW 310
10046: PPUSH
10047: LD_EXP 10
10051: PPUSH
10052: CALL_OW 310
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 10
10064: LESS
10065: OR
10066: AND
10067: IFFALSE 10111
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10069: LD_INT 1
10071: PPUSH
10072: LD_STRING 14_JMMGirlStatus_1
10074: PPUSH
10075: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10079: LD_EXP 10
10083: PPUSH
10084: LD_STRING 14_Joan
10086: PPUSH
10087: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10091: LD_STRING protect
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 101
// m1 := true ;
10101: LD_ADDR_VAR 0 4
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// end else
10109: GO 10132
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10111: LD_INT 0
10113: PPUSH
10114: LD_STRING 14_JMMGirlStatus_1
10116: PPUSH
10117: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10121: LD_STRING protect
10123: PPUSH
10124: LD_INT 1
10126: NEG
10127: PPUSH
10128: CALL_OW 101
// end ; end ; 2 :
10132: GO 10407
10134: LD_INT 2
10136: DOUBLE
10137: EQUAL
10138: IFTRUE 10142
10140: GO 10270
10142: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10143: LD_EXP 11
10147: PPUSH
10148: CALL_OW 302
10152: PUSH
10153: LD_EXP 11
10157: PPUSH
10158: CALL_OW 255
10162: PUSH
10163: LD_INT 1
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_VAR 0 7
10172: PUSH
10173: LD_EXP 8
10177: PPUSH
10178: CALL_OW 310
10182: PPUSH
10183: LD_EXP 11
10187: PPUSH
10188: CALL_OW 310
10192: PPUSH
10193: CALL_OW 296
10197: PUSH
10198: LD_INT 10
10200: LESS
10201: OR
10202: AND
10203: IFFALSE 10247
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10205: LD_INT 1
10207: PPUSH
10208: LD_STRING 14_JMMGirlStatus_1
10210: PPUSH
10211: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10215: LD_EXP 11
10219: PPUSH
10220: LD_STRING 14_Lisa
10222: PPUSH
10223: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10227: LD_STRING protect
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: CALL_OW 101
// m1 := true ;
10237: LD_ADDR_VAR 0 4
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// end else
10245: GO 10268
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10247: LD_INT 0
10249: PPUSH
10250: LD_STRING 14_JMMGirlStatus_1
10252: PPUSH
10253: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10257: LD_STRING protect
10259: PPUSH
10260: LD_INT 2
10262: NEG
10263: PPUSH
10264: CALL_OW 101
// end ; end ; 3 :
10268: GO 10407
10270: LD_INT 3
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10406
10278: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10279: LD_EXP 12
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 12
10293: PPUSH
10294: CALL_OW 255
10298: PUSH
10299: LD_INT 1
10301: EQUAL
10302: AND
10303: PUSH
10304: LD_VAR 0 7
10308: PUSH
10309: LD_EXP 8
10313: PPUSH
10314: CALL_OW 310
10318: PPUSH
10319: LD_EXP 12
10323: PPUSH
10324: CALL_OW 310
10328: PPUSH
10329: CALL_OW 296
10333: PUSH
10334: LD_INT 10
10336: LESS
10337: OR
10338: AND
10339: IFFALSE 10383
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10341: LD_INT 1
10343: PPUSH
10344: LD_STRING 14_JMMGirlStatus_1
10346: PPUSH
10347: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10351: LD_EXP 12
10355: PPUSH
10356: LD_STRING 14_Connie
10358: PPUSH
10359: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10363: LD_STRING protect
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 101
// m1 := true ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// end else
10381: GO 10404
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10383: LD_INT 0
10385: PPUSH
10386: LD_STRING 14_JMMGirlStatus_1
10388: PPUSH
10389: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10393: LD_STRING protect
10395: PPUSH
10396: LD_INT 3
10398: NEG
10399: PPUSH
10400: CALL_OW 101
// end ; end ; end ;
10404: GO 10407
10406: POP
// if amLaserCounter >= 2 then
10407: LD_EXP 7
10411: PUSH
10412: LD_INT 2
10414: GREATEREQUAL
10415: IFFALSE 10437
// begin AddMedal ( double , 1 ) ;
10417: LD_STRING double
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 101
// m2 := true ;
10427: LD_ADDR_VAR 0 5
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// end else
10435: GO 10471
// begin if amLaserCounter = 1 then
10437: LD_EXP 7
10441: PUSH
10442: LD_INT 1
10444: EQUAL
10445: IFFALSE 10460
// AddMedal ( double , - 2 ) else
10447: LD_STRING double
10449: PPUSH
10450: LD_INT 2
10452: NEG
10453: PPUSH
10454: CALL_OW 101
10458: GO 10471
// AddMedal ( double , - 1 ) ;
10460: LD_STRING double
10462: PPUSH
10463: LD_INT 1
10465: NEG
10466: PPUSH
10467: CALL_OW 101
// end ; if ruEliminated then
10471: LD_VAR 0 7
10475: IFFALSE 10497
// begin AddMedal ( base , 1 ) ;
10477: LD_STRING base
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 101
// m3 := true ;
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// end else
10495: GO 10508
// AddMedal ( base , - 1 ) ;
10497: LD_STRING base
10499: PPUSH
10500: LD_INT 1
10502: NEG
10503: PPUSH
10504: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10508: LD_VAR 0 4
10512: PUSH
10513: LD_VAR 0 5
10517: AND
10518: PUSH
10519: LD_VAR 0 6
10523: AND
10524: PUSH
10525: LD_OWVAR 67
10529: PUSH
10530: LD_INT 3
10532: GREATEREQUAL
10533: AND
10534: IFFALSE 10546
// SetAchievementEX ( ACH_AMER , 14 ) ;
10536: LD_STRING ACH_AMER
10538: PPUSH
10539: LD_INT 14
10541: PPUSH
10542: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10546: LD_STRING Eliminate
10548: PPUSH
10549: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10553: LD_INT 22
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 3
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 16
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: CALL_OW 43
// YouWin ;
10611: CALL_OW 103
// end ; end_of_file
10615: LD_VAR 0 2
10619: RET
// export function CreateNature ; var i , un ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
// PrepareEnchidna ;
10625: CALL 65160 0 0
// for i := 1 to 3 do
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_INT 3
10641: PUSH
10642: FOR_TO
10643: IFFALSE 10692
// begin un := CreateHuman ;
10645: LD_ADDR_VAR 0 3
10649: PUSH
10650: CALL_OW 44
10654: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 5
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 9
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 49
// end ;
10690: GO 10642
10692: POP
10693: POP
// PrepareHorse ;
10694: CALL 65320 0 0
// for i := 1 to 2 do
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: DOUBLE
10704: LD_INT 1
10706: DEC
10707: ST_TO_ADDR
10708: LD_INT 2
10710: PUSH
10711: FOR_TO
10712: IFFALSE 10761
// begin un := CreateHuman ;
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: LD_INT 5
10734: PPUSH
10735: CALL_OW 12
10739: PPUSH
10740: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 9
10751: PPUSH
10752: LD_INT 0
10754: PPUSH
10755: CALL_OW 49
// end ;
10759: GO 10711
10761: POP
10762: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: DOUBLE
10769: LD_INT 1
10771: DEC
10772: ST_TO_ADDR
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 5
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_OWVAR 67
10795: ARRAY
10796: PUSH
10797: FOR_TO
10798: IFFALSE 10862
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
10800: LD_INT 0
10802: PPUSH
10803: LD_INT 5
10805: PPUSH
10806: CALL_OW 12
10810: PPUSH
10811: CALL 64991 0 1
// un := CreateHuman ;
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 0
10832: PPUSH
10833: LD_INT 5
10835: PPUSH
10836: CALL_OW 12
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 8
10852: PPUSH
10853: LD_INT 0
10855: PPUSH
10856: CALL_OW 49
// end ;
10860: GO 10797
10862: POP
10863: POP
// PrepareFish ;
10864: CALL 65240 0 0
// for i := 1 to 2 do
10868: LD_ADDR_VAR 0 2
10872: PUSH
10873: DOUBLE
10874: LD_INT 1
10876: DEC
10877: ST_TO_ADDR
10878: LD_INT 2
10880: PUSH
10881: FOR_TO
10882: IFFALSE 10931
// begin un := CreateHuman ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 0
10901: PPUSH
10902: LD_INT 5
10904: PPUSH
10905: CALL_OW 12
10909: PPUSH
10910: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 6
10921: PPUSH
10922: LD_INT 0
10924: PPUSH
10925: CALL_OW 49
// end ;
10929: GO 10881
10931: POP
10932: POP
// PrepareFrog ;
10933: CALL 65200 0 0
// for i := 1 to 2 do
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_INT 2
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11000
// begin un := CreateHuman ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: PPUSH
10979: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 7
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// end ;
10998: GO 10950
11000: POP
11001: POP
// PrepareMastodont ;
11002: CALL 65360 0 0
// un := CreateVehicle ;
11006: LD_ADDR_VAR 0 3
11010: PUSH
11011: CALL_OW 45
11015: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 166
11023: PPUSH
11024: LD_INT 134
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL 70860 0 5
// end ; end_of_file
11037: LD_VAR 0 1
11041: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11042: LD_INT 14
11044: PPUSH
11045: CALL_OW 435
11049: PUSH
11050: LD_INT 20
11052: LESS
11053: IFFALSE 11095
11055: GO 11057
11057: DISABLE
// begin enable ;
11058: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11059: LD_INT 35
11061: PPUSH
11062: LD_INT 735
11064: PPUSH
11065: CALL_OW 12
11069: PPUSH
11070: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11074: LD_INT 1
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 12
11084: PPUSH
11085: LD_INT 14
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 55
// end ;
11095: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11096: LD_INT 13
11098: PPUSH
11099: CALL_OW 435
11103: PUSH
11104: LD_INT 30
11106: LESS
11107: IFFALSE 11149
11109: GO 11111
11111: DISABLE
// begin enable ;
11112: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11113: LD_INT 35
11115: PPUSH
11116: LD_INT 735
11118: PPUSH
11119: CALL_OW 12
11123: PPUSH
11124: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 5
11133: PPUSH
11134: CALL_OW 12
11138: PPUSH
11139: LD_INT 13
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 55
// end ;
11149: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11150: LD_INT 13
11152: PPUSH
11153: CALL_OW 435
11157: PUSH
11158: LD_INT 30
11160: LESS
11161: IFFALSE 11194
11163: GO 11165
11165: DISABLE
// begin enable ;
11166: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11167: LD_INT 1
11169: PPUSH
11170: LD_INT 5
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: LD_INT 133
11180: PPUSH
11181: LD_INT 122
11183: PPUSH
11184: LD_INT 20
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 56
// end ; end_of_file
11194: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
11195: LD_INT 0
11197: PPUSH
// ar_miner := 81 ;
11198: LD_ADDR_EXP 28
11202: PUSH
11203: LD_INT 81
11205: ST_TO_ADDR
// ar_crane := 88 ;
11206: LD_ADDR_EXP 27
11210: PUSH
11211: LD_INT 88
11213: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11214: LD_ADDR_EXP 22
11218: PUSH
11219: LD_INT 89
11221: ST_TO_ADDR
// us_hack := 99 ;
11222: LD_ADDR_EXP 23
11226: PUSH
11227: LD_INT 99
11229: ST_TO_ADDR
// us_artillery := 97 ;
11230: LD_ADDR_EXP 24
11234: PUSH
11235: LD_INT 97
11237: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11238: LD_ADDR_EXP 25
11242: PUSH
11243: LD_INT 91
11245: ST_TO_ADDR
// ar_mortar := 92 ;
11246: LD_ADDR_EXP 26
11250: PUSH
11251: LD_INT 92
11253: ST_TO_ADDR
// ru_flamethrower := 93 ;
11254: LD_ADDR_EXP 29
11258: PUSH
11259: LD_INT 93
11261: ST_TO_ADDR
// ru_radar := 98 ;
11262: LD_ADDR_EXP 21
11266: PUSH
11267: LD_INT 98
11269: ST_TO_ADDR
// tech_Artillery := 80 ;
11270: LD_ADDR_EXP 30
11274: PUSH
11275: LD_INT 80
11277: ST_TO_ADDR
// tech_RadMat := 81 ;
11278: LD_ADDR_EXP 31
11282: PUSH
11283: LD_INT 81
11285: ST_TO_ADDR
// tech_BasicTools := 82 ;
11286: LD_ADDR_EXP 32
11290: PUSH
11291: LD_INT 82
11293: ST_TO_ADDR
// tech_Cargo := 83 ;
11294: LD_ADDR_EXP 33
11298: PUSH
11299: LD_INT 83
11301: ST_TO_ADDR
// tech_Track := 84 ;
11302: LD_ADDR_EXP 34
11306: PUSH
11307: LD_INT 84
11309: ST_TO_ADDR
// tech_Crane := 85 ;
11310: LD_ADDR_EXP 35
11314: PUSH
11315: LD_INT 85
11317: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11318: LD_ADDR_EXP 36
11322: PUSH
11323: LD_INT 86
11325: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11326: LD_ADDR_EXP 37
11330: PUSH
11331: LD_INT 87
11333: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11334: LD_ADDR_EXP 38
11338: PUSH
11339: LD_INT 88
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 1 do
11347: GO 11349
11349: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11350: CALL 11195 0 0
11354: END
// every 0 0$1 do
11355: GO 11357
11357: DISABLE
// begin enable ;
11358: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11359: LD_STRING updateTimer(
11361: PUSH
11362: LD_OWVAR 1
11366: STR
11367: PUSH
11368: LD_STRING );
11370: STR
11371: PPUSH
11372: CALL_OW 559
// end ;
11376: END
// export function SOS_MapStart ( ) ; begin
11377: LD_INT 0
11379: PPUSH
// if streamModeActive then
11380: LD_EXP 39
11384: IFFALSE 11393
// DefineStreamItems ( true ) ;
11386: LD_INT 1
11388: PPUSH
11389: CALL 13047 0 1
// UpdateFactoryWaypoints ( ) ;
11393: CALL 25908 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11397: CALL 26165 0 0
// end ;
11401: LD_VAR 0 1
11405: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11406: LD_INT 0
11408: PPUSH
// if p2 = 100 then
11409: LD_VAR 0 2
11413: PUSH
11414: LD_INT 100
11416: EQUAL
11417: IFFALSE 12420
// begin if not StreamModeActive then
11419: LD_EXP 39
11423: NOT
11424: IFFALSE 11434
// StreamModeActive := true ;
11426: LD_ADDR_EXP 39
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// if p3 = 0 then
11434: LD_VAR 0 3
11438: PUSH
11439: LD_INT 0
11441: EQUAL
11442: IFFALSE 11448
// InitStreamMode ;
11444: CALL 12583 0 0
// if p3 = 1 then
11448: LD_VAR 0 3
11452: PUSH
11453: LD_INT 1
11455: EQUAL
11456: IFFALSE 11466
// sRocket := true ;
11458: LD_ADDR_EXP 44
11462: PUSH
11463: LD_INT 1
11465: ST_TO_ADDR
// if p3 = 2 then
11466: LD_VAR 0 3
11470: PUSH
11471: LD_INT 2
11473: EQUAL
11474: IFFALSE 11484
// sSpeed := true ;
11476: LD_ADDR_EXP 43
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// if p3 = 3 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 3
11491: EQUAL
11492: IFFALSE 11502
// sEngine := true ;
11494: LD_ADDR_EXP 45
11498: PUSH
11499: LD_INT 1
11501: ST_TO_ADDR
// if p3 = 4 then
11502: LD_VAR 0 3
11506: PUSH
11507: LD_INT 4
11509: EQUAL
11510: IFFALSE 11520
// sSpec := true ;
11512: LD_ADDR_EXP 42
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// if p3 = 5 then
11520: LD_VAR 0 3
11524: PUSH
11525: LD_INT 5
11527: EQUAL
11528: IFFALSE 11538
// sLevel := true ;
11530: LD_ADDR_EXP 46
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// if p3 = 6 then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 6
11545: EQUAL
11546: IFFALSE 11556
// sArmoury := true ;
11548: LD_ADDR_EXP 47
11552: PUSH
11553: LD_INT 1
11555: ST_TO_ADDR
// if p3 = 7 then
11556: LD_VAR 0 3
11560: PUSH
11561: LD_INT 7
11563: EQUAL
11564: IFFALSE 11574
// sRadar := true ;
11566: LD_ADDR_EXP 48
11570: PUSH
11571: LD_INT 1
11573: ST_TO_ADDR
// if p3 = 8 then
11574: LD_VAR 0 3
11578: PUSH
11579: LD_INT 8
11581: EQUAL
11582: IFFALSE 11592
// sBunker := true ;
11584: LD_ADDR_EXP 49
11588: PUSH
11589: LD_INT 1
11591: ST_TO_ADDR
// if p3 = 9 then
11592: LD_VAR 0 3
11596: PUSH
11597: LD_INT 9
11599: EQUAL
11600: IFFALSE 11610
// sHack := true ;
11602: LD_ADDR_EXP 50
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// if p3 = 10 then
11610: LD_VAR 0 3
11614: PUSH
11615: LD_INT 10
11617: EQUAL
11618: IFFALSE 11628
// sFire := true ;
11620: LD_ADDR_EXP 51
11624: PUSH
11625: LD_INT 1
11627: ST_TO_ADDR
// if p3 = 11 then
11628: LD_VAR 0 3
11632: PUSH
11633: LD_INT 11
11635: EQUAL
11636: IFFALSE 11646
// sRefresh := true ;
11638: LD_ADDR_EXP 52
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// if p3 = 12 then
11646: LD_VAR 0 3
11650: PUSH
11651: LD_INT 12
11653: EQUAL
11654: IFFALSE 11664
// sExp := true ;
11656: LD_ADDR_EXP 53
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// if p3 = 13 then
11664: LD_VAR 0 3
11668: PUSH
11669: LD_INT 13
11671: EQUAL
11672: IFFALSE 11682
// sDepot := true ;
11674: LD_ADDR_EXP 54
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
// if p3 = 14 then
11682: LD_VAR 0 3
11686: PUSH
11687: LD_INT 14
11689: EQUAL
11690: IFFALSE 11700
// sFlag := true ;
11692: LD_ADDR_EXP 55
11696: PUSH
11697: LD_INT 1
11699: ST_TO_ADDR
// if p3 = 15 then
11700: LD_VAR 0 3
11704: PUSH
11705: LD_INT 15
11707: EQUAL
11708: IFFALSE 11718
// sKamikadze := true ;
11710: LD_ADDR_EXP 63
11714: PUSH
11715: LD_INT 1
11717: ST_TO_ADDR
// if p3 = 16 then
11718: LD_VAR 0 3
11722: PUSH
11723: LD_INT 16
11725: EQUAL
11726: IFFALSE 11736
// sTroll := true ;
11728: LD_ADDR_EXP 64
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// if p3 = 17 then
11736: LD_VAR 0 3
11740: PUSH
11741: LD_INT 17
11743: EQUAL
11744: IFFALSE 11754
// sSlow := true ;
11746: LD_ADDR_EXP 65
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// if p3 = 18 then
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 18
11761: EQUAL
11762: IFFALSE 11772
// sLack := true ;
11764: LD_ADDR_EXP 66
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// if p3 = 19 then
11772: LD_VAR 0 3
11776: PUSH
11777: LD_INT 19
11779: EQUAL
11780: IFFALSE 11790
// sTank := true ;
11782: LD_ADDR_EXP 68
11786: PUSH
11787: LD_INT 1
11789: ST_TO_ADDR
// if p3 = 20 then
11790: LD_VAR 0 3
11794: PUSH
11795: LD_INT 20
11797: EQUAL
11798: IFFALSE 11808
// sRemote := true ;
11800: LD_ADDR_EXP 69
11804: PUSH
11805: LD_INT 1
11807: ST_TO_ADDR
// if p3 = 21 then
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 21
11815: EQUAL
11816: IFFALSE 11826
// sPowell := true ;
11818: LD_ADDR_EXP 70
11822: PUSH
11823: LD_INT 1
11825: ST_TO_ADDR
// if p3 = 22 then
11826: LD_VAR 0 3
11830: PUSH
11831: LD_INT 22
11833: EQUAL
11834: IFFALSE 11844
// sTeleport := true ;
11836: LD_ADDR_EXP 73
11840: PUSH
11841: LD_INT 1
11843: ST_TO_ADDR
// if p3 = 23 then
11844: LD_VAR 0 3
11848: PUSH
11849: LD_INT 23
11851: EQUAL
11852: IFFALSE 11862
// sOilTower := true ;
11854: LD_ADDR_EXP 75
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// if p3 = 24 then
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 24
11869: EQUAL
11870: IFFALSE 11880
// sShovel := true ;
11872: LD_ADDR_EXP 76
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// if p3 = 25 then
11880: LD_VAR 0 3
11884: PUSH
11885: LD_INT 25
11887: EQUAL
11888: IFFALSE 11898
// sSheik := true ;
11890: LD_ADDR_EXP 77
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// if p3 = 26 then
11898: LD_VAR 0 3
11902: PUSH
11903: LD_INT 26
11905: EQUAL
11906: IFFALSE 11916
// sEarthquake := true ;
11908: LD_ADDR_EXP 79
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// if p3 = 27 then
11916: LD_VAR 0 3
11920: PUSH
11921: LD_INT 27
11923: EQUAL
11924: IFFALSE 11934
// sAI := true ;
11926: LD_ADDR_EXP 80
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// if p3 = 28 then
11934: LD_VAR 0 3
11938: PUSH
11939: LD_INT 28
11941: EQUAL
11942: IFFALSE 11952
// sCargo := true ;
11944: LD_ADDR_EXP 83
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if p3 = 29 then
11952: LD_VAR 0 3
11956: PUSH
11957: LD_INT 29
11959: EQUAL
11960: IFFALSE 11970
// sDLaser := true ;
11962: LD_ADDR_EXP 84
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// if p3 = 30 then
11970: LD_VAR 0 3
11974: PUSH
11975: LD_INT 30
11977: EQUAL
11978: IFFALSE 11988
// sExchange := true ;
11980: LD_ADDR_EXP 85
11984: PUSH
11985: LD_INT 1
11987: ST_TO_ADDR
// if p3 = 31 then
11988: LD_VAR 0 3
11992: PUSH
11993: LD_INT 31
11995: EQUAL
11996: IFFALSE 12006
// sFac := true ;
11998: LD_ADDR_EXP 86
12002: PUSH
12003: LD_INT 1
12005: ST_TO_ADDR
// if p3 = 32 then
12006: LD_VAR 0 3
12010: PUSH
12011: LD_INT 32
12013: EQUAL
12014: IFFALSE 12024
// sPower := true ;
12016: LD_ADDR_EXP 87
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// if p3 = 33 then
12024: LD_VAR 0 3
12028: PUSH
12029: LD_INT 33
12031: EQUAL
12032: IFFALSE 12042
// sRandom := true ;
12034: LD_ADDR_EXP 88
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// if p3 = 34 then
12042: LD_VAR 0 3
12046: PUSH
12047: LD_INT 34
12049: EQUAL
12050: IFFALSE 12060
// sShield := true ;
12052: LD_ADDR_EXP 89
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// if p3 = 35 then
12060: LD_VAR 0 3
12064: PUSH
12065: LD_INT 35
12067: EQUAL
12068: IFFALSE 12078
// sTime := true ;
12070: LD_ADDR_EXP 90
12074: PUSH
12075: LD_INT 1
12077: ST_TO_ADDR
// if p3 = 36 then
12078: LD_VAR 0 3
12082: PUSH
12083: LD_INT 36
12085: EQUAL
12086: IFFALSE 12096
// sTools := true ;
12088: LD_ADDR_EXP 91
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// if p3 = 101 then
12096: LD_VAR 0 3
12100: PUSH
12101: LD_INT 101
12103: EQUAL
12104: IFFALSE 12114
// sSold := true ;
12106: LD_ADDR_EXP 56
12110: PUSH
12111: LD_INT 1
12113: ST_TO_ADDR
// if p3 = 102 then
12114: LD_VAR 0 3
12118: PUSH
12119: LD_INT 102
12121: EQUAL
12122: IFFALSE 12132
// sDiff := true ;
12124: LD_ADDR_EXP 57
12128: PUSH
12129: LD_INT 1
12131: ST_TO_ADDR
// if p3 = 103 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 103
12139: EQUAL
12140: IFFALSE 12150
// sFog := true ;
12142: LD_ADDR_EXP 60
12146: PUSH
12147: LD_INT 1
12149: ST_TO_ADDR
// if p3 = 104 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 104
12157: EQUAL
12158: IFFALSE 12168
// sReset := true ;
12160: LD_ADDR_EXP 61
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// if p3 = 105 then
12168: LD_VAR 0 3
12172: PUSH
12173: LD_INT 105
12175: EQUAL
12176: IFFALSE 12186
// sSun := true ;
12178: LD_ADDR_EXP 62
12182: PUSH
12183: LD_INT 1
12185: ST_TO_ADDR
// if p3 = 106 then
12186: LD_VAR 0 3
12190: PUSH
12191: LD_INT 106
12193: EQUAL
12194: IFFALSE 12204
// sTiger := true ;
12196: LD_ADDR_EXP 58
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// if p3 = 107 then
12204: LD_VAR 0 3
12208: PUSH
12209: LD_INT 107
12211: EQUAL
12212: IFFALSE 12222
// sBomb := true ;
12214: LD_ADDR_EXP 59
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// if p3 = 108 then
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 108
12229: EQUAL
12230: IFFALSE 12240
// sWound := true ;
12232: LD_ADDR_EXP 67
12236: PUSH
12237: LD_INT 1
12239: ST_TO_ADDR
// if p3 = 109 then
12240: LD_VAR 0 3
12244: PUSH
12245: LD_INT 109
12247: EQUAL
12248: IFFALSE 12258
// sBetray := true ;
12250: LD_ADDR_EXP 71
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// if p3 = 110 then
12258: LD_VAR 0 3
12262: PUSH
12263: LD_INT 110
12265: EQUAL
12266: IFFALSE 12276
// sContamin := true ;
12268: LD_ADDR_EXP 72
12272: PUSH
12273: LD_INT 1
12275: ST_TO_ADDR
// if p3 = 111 then
12276: LD_VAR 0 3
12280: PUSH
12281: LD_INT 111
12283: EQUAL
12284: IFFALSE 12294
// sOil := true ;
12286: LD_ADDR_EXP 74
12290: PUSH
12291: LD_INT 1
12293: ST_TO_ADDR
// if p3 = 112 then
12294: LD_VAR 0 3
12298: PUSH
12299: LD_INT 112
12301: EQUAL
12302: IFFALSE 12312
// sStu := true ;
12304: LD_ADDR_EXP 78
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// if p3 = 113 then
12312: LD_VAR 0 3
12316: PUSH
12317: LD_INT 113
12319: EQUAL
12320: IFFALSE 12330
// sBazooka := true ;
12322: LD_ADDR_EXP 81
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// if p3 = 114 then
12330: LD_VAR 0 3
12334: PUSH
12335: LD_INT 114
12337: EQUAL
12338: IFFALSE 12348
// sMortar := true ;
12340: LD_ADDR_EXP 82
12344: PUSH
12345: LD_INT 1
12347: ST_TO_ADDR
// if p3 = 115 then
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 115
12355: EQUAL
12356: IFFALSE 12366
// sRanger := true ;
12358: LD_ADDR_EXP 92
12362: PUSH
12363: LD_INT 1
12365: ST_TO_ADDR
// if p3 = 116 then
12366: LD_VAR 0 3
12370: PUSH
12371: LD_INT 116
12373: EQUAL
12374: IFFALSE 12384
// sComputer := true ;
12376: LD_ADDR_EXP 93
12380: PUSH
12381: LD_INT 1
12383: ST_TO_ADDR
// if p3 = 117 then
12384: LD_VAR 0 3
12388: PUSH
12389: LD_INT 117
12391: EQUAL
12392: IFFALSE 12402
// s30 := true ;
12394: LD_ADDR_EXP 94
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// if p3 = 118 then
12402: LD_VAR 0 3
12406: PUSH
12407: LD_INT 118
12409: EQUAL
12410: IFFALSE 12420
// s60 := true ;
12412: LD_ADDR_EXP 95
12416: PUSH
12417: LD_INT 1
12419: ST_TO_ADDR
// end ; if p2 = 101 then
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 101
12427: EQUAL
12428: IFFALSE 12556
// begin case p3 of 1 :
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 1
12437: DOUBLE
12438: EQUAL
12439: IFTRUE 12443
12441: GO 12450
12443: POP
// hHackUnlimitedResources ; 2 :
12444: CALL 24654 0 0
12448: GO 12556
12450: LD_INT 2
12452: DOUBLE
12453: EQUAL
12454: IFTRUE 12458
12456: GO 12465
12458: POP
// hHackSetLevel10 ; 3 :
12459: CALL 24787 0 0
12463: GO 12556
12465: LD_INT 3
12467: DOUBLE
12468: EQUAL
12469: IFTRUE 12473
12471: GO 12480
12473: POP
// hHackSetLevel10YourUnits ; 4 :
12474: CALL 24872 0 0
12478: GO 12556
12480: LD_INT 4
12482: DOUBLE
12483: EQUAL
12484: IFTRUE 12488
12486: GO 12495
12488: POP
// hHackInvincible ; 5 :
12489: CALL 25320 0 0
12493: GO 12556
12495: LD_INT 5
12497: DOUBLE
12498: EQUAL
12499: IFTRUE 12503
12501: GO 12510
12503: POP
// hHackInvisible ; 6 :
12504: CALL 25431 0 0
12508: GO 12556
12510: LD_INT 6
12512: DOUBLE
12513: EQUAL
12514: IFTRUE 12518
12516: GO 12525
12518: POP
// hHackChangeYourSide ; 7 :
12519: CALL 25488 0 0
12523: GO 12556
12525: LD_INT 7
12527: DOUBLE
12528: EQUAL
12529: IFTRUE 12533
12531: GO 12540
12533: POP
// hHackChangeUnitSide ; 8 :
12534: CALL 25530 0 0
12538: GO 12556
12540: LD_INT 8
12542: DOUBLE
12543: EQUAL
12544: IFTRUE 12548
12546: GO 12555
12548: POP
// hHackFog ; end ;
12549: CALL 25631 0 0
12553: GO 12556
12555: POP
// end ; end ;
12556: LD_VAR 0 7
12560: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12561: GO 12563
12563: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12564: LD_STRING initStreamRollete();
12566: PPUSH
12567: CALL_OW 559
// InitStreamMode ;
12571: CALL 12583 0 0
// DefineStreamItems ( false ) ;
12575: LD_INT 0
12577: PPUSH
12578: CALL 13047 0 1
// end ;
12582: END
// function InitStreamMode ; begin
12583: LD_INT 0
12585: PPUSH
// streamModeActive := false ;
12586: LD_ADDR_EXP 39
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// normalCounter := 36 ;
12594: LD_ADDR_EXP 40
12598: PUSH
12599: LD_INT 36
12601: ST_TO_ADDR
// hardcoreCounter := 18 ;
12602: LD_ADDR_EXP 41
12606: PUSH
12607: LD_INT 18
12609: ST_TO_ADDR
// sRocket := false ;
12610: LD_ADDR_EXP 44
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sSpeed := false ;
12618: LD_ADDR_EXP 43
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sEngine := false ;
12626: LD_ADDR_EXP 45
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sSpec := false ;
12634: LD_ADDR_EXP 42
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sLevel := false ;
12642: LD_ADDR_EXP 46
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sArmoury := false ;
12650: LD_ADDR_EXP 47
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sRadar := false ;
12658: LD_ADDR_EXP 48
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sBunker := false ;
12666: LD_ADDR_EXP 49
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sHack := false ;
12674: LD_ADDR_EXP 50
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sFire := false ;
12682: LD_ADDR_EXP 51
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sRefresh := false ;
12690: LD_ADDR_EXP 52
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sExp := false ;
12698: LD_ADDR_EXP 53
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sDepot := false ;
12706: LD_ADDR_EXP 54
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sFlag := false ;
12714: LD_ADDR_EXP 55
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sKamikadze := false ;
12722: LD_ADDR_EXP 63
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sTroll := false ;
12730: LD_ADDR_EXP 64
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sSlow := false ;
12738: LD_ADDR_EXP 65
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sLack := false ;
12746: LD_ADDR_EXP 66
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sTank := false ;
12754: LD_ADDR_EXP 68
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sRemote := false ;
12762: LD_ADDR_EXP 69
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sPowell := false ;
12770: LD_ADDR_EXP 70
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sTeleport := false ;
12778: LD_ADDR_EXP 73
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sOilTower := false ;
12786: LD_ADDR_EXP 75
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sShovel := false ;
12794: LD_ADDR_EXP 76
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sSheik := false ;
12802: LD_ADDR_EXP 77
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sEarthquake := false ;
12810: LD_ADDR_EXP 79
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// sAI := false ;
12818: LD_ADDR_EXP 80
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// sCargo := false ;
12826: LD_ADDR_EXP 83
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// sDLaser := false ;
12834: LD_ADDR_EXP 84
12838: PUSH
12839: LD_INT 0
12841: ST_TO_ADDR
// sExchange := false ;
12842: LD_ADDR_EXP 85
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// sFac := false ;
12850: LD_ADDR_EXP 86
12854: PUSH
12855: LD_INT 0
12857: ST_TO_ADDR
// sPower := false ;
12858: LD_ADDR_EXP 87
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// sRandom := false ;
12866: LD_ADDR_EXP 88
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// sShield := false ;
12874: LD_ADDR_EXP 89
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// sTime := false ;
12882: LD_ADDR_EXP 90
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// sTools := false ;
12890: LD_ADDR_EXP 91
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// sSold := false ;
12898: LD_ADDR_EXP 56
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// sDiff := false ;
12906: LD_ADDR_EXP 57
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// sFog := false ;
12914: LD_ADDR_EXP 60
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// sReset := false ;
12922: LD_ADDR_EXP 61
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// sSun := false ;
12930: LD_ADDR_EXP 62
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// sTiger := false ;
12938: LD_ADDR_EXP 58
12942: PUSH
12943: LD_INT 0
12945: ST_TO_ADDR
// sBomb := false ;
12946: LD_ADDR_EXP 59
12950: PUSH
12951: LD_INT 0
12953: ST_TO_ADDR
// sWound := false ;
12954: LD_ADDR_EXP 67
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// sBetray := false ;
12962: LD_ADDR_EXP 71
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// sContamin := false ;
12970: LD_ADDR_EXP 72
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// sOil := false ;
12978: LD_ADDR_EXP 74
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// sStu := false ;
12986: LD_ADDR_EXP 78
12990: PUSH
12991: LD_INT 0
12993: ST_TO_ADDR
// sBazooka := false ;
12994: LD_ADDR_EXP 81
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// sMortar := false ;
13002: LD_ADDR_EXP 82
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// sRanger := false ;
13010: LD_ADDR_EXP 92
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// sComputer := false ;
13018: LD_ADDR_EXP 93
13022: PUSH
13023: LD_INT 0
13025: ST_TO_ADDR
// s30 := false ;
13026: LD_ADDR_EXP 94
13030: PUSH
13031: LD_INT 0
13033: ST_TO_ADDR
// s60 := false ;
13034: LD_ADDR_EXP 95
13038: PUSH
13039: LD_INT 0
13041: ST_TO_ADDR
// end ;
13042: LD_VAR 0 1
13046: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13047: LD_INT 0
13049: PPUSH
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
// result := [ ] ;
13056: LD_ADDR_VAR 0 2
13060: PUSH
13061: EMPTY
13062: ST_TO_ADDR
// if campaign_id = 1 then
13063: LD_OWVAR 69
13067: PUSH
13068: LD_INT 1
13070: EQUAL
13071: IFFALSE 16237
// begin case mission_number of 1 :
13073: LD_OWVAR 70
13077: PUSH
13078: LD_INT 1
13080: DOUBLE
13081: EQUAL
13082: IFTRUE 13086
13084: GO 13162
13086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13087: LD_ADDR_VAR 0 2
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: LD_INT 4
13097: PUSH
13098: LD_INT 11
13100: PUSH
13101: LD_INT 12
13103: PUSH
13104: LD_INT 15
13106: PUSH
13107: LD_INT 16
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 26
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 101
13132: PUSH
13133: LD_INT 102
13135: PUSH
13136: LD_INT 106
13138: PUSH
13139: LD_INT 116
13141: PUSH
13142: LD_INT 117
13144: PUSH
13145: LD_INT 118
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: ST_TO_ADDR
13160: GO 16235
13162: LD_INT 2
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13254
13170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 11
13184: PUSH
13185: LD_INT 12
13187: PUSH
13188: LD_INT 15
13190: PUSH
13191: LD_INT 16
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 23
13199: PUSH
13200: LD_INT 26
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 101
13216: PUSH
13217: LD_INT 102
13219: PUSH
13220: LD_INT 105
13222: PUSH
13223: LD_INT 106
13225: PUSH
13226: LD_INT 108
13228: PUSH
13229: LD_INT 116
13231: PUSH
13232: LD_INT 117
13234: PUSH
13235: LD_INT 118
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: ST_TO_ADDR
13252: GO 16235
13254: LD_INT 3
13256: DOUBLE
13257: EQUAL
13258: IFTRUE 13262
13260: GO 13350
13262: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 4
13273: PUSH
13274: LD_INT 5
13276: PUSH
13277: LD_INT 11
13279: PUSH
13280: LD_INT 12
13282: PUSH
13283: LD_INT 15
13285: PUSH
13286: LD_INT 16
13288: PUSH
13289: LD_INT 22
13291: PUSH
13292: LD_INT 26
13294: PUSH
13295: LD_INT 36
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 101
13312: PUSH
13313: LD_INT 102
13315: PUSH
13316: LD_INT 105
13318: PUSH
13319: LD_INT 106
13321: PUSH
13322: LD_INT 108
13324: PUSH
13325: LD_INT 116
13327: PUSH
13328: LD_INT 117
13330: PUSH
13331: LD_INT 118
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: ST_TO_ADDR
13348: GO 16235
13350: LD_INT 4
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13454
13358: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: LD_INT 4
13369: PUSH
13370: LD_INT 5
13372: PUSH
13373: LD_INT 8
13375: PUSH
13376: LD_INT 11
13378: PUSH
13379: LD_INT 12
13381: PUSH
13382: LD_INT 15
13384: PUSH
13385: LD_INT 16
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_INT 23
13393: PUSH
13394: LD_INT 26
13396: PUSH
13397: LD_INT 36
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 101
13416: PUSH
13417: LD_INT 102
13419: PUSH
13420: LD_INT 105
13422: PUSH
13423: LD_INT 106
13425: PUSH
13426: LD_INT 108
13428: PUSH
13429: LD_INT 116
13431: PUSH
13432: LD_INT 117
13434: PUSH
13435: LD_INT 118
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: ST_TO_ADDR
13452: GO 16235
13454: LD_INT 5
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13574
13462: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13463: LD_ADDR_VAR 0 2
13467: PUSH
13468: LD_INT 2
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 6
13479: PUSH
13480: LD_INT 8
13482: PUSH
13483: LD_INT 11
13485: PUSH
13486: LD_INT 12
13488: PUSH
13489: LD_INT 15
13491: PUSH
13492: LD_INT 16
13494: PUSH
13495: LD_INT 22
13497: PUSH
13498: LD_INT 23
13500: PUSH
13501: LD_INT 25
13503: PUSH
13504: LD_INT 26
13506: PUSH
13507: LD_INT 36
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 101
13528: PUSH
13529: LD_INT 102
13531: PUSH
13532: LD_INT 105
13534: PUSH
13535: LD_INT 106
13537: PUSH
13538: LD_INT 108
13540: PUSH
13541: LD_INT 109
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 116
13549: PUSH
13550: LD_INT 117
13552: PUSH
13553: LD_INT 118
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: ST_TO_ADDR
13572: GO 16235
13574: LD_INT 6
13576: DOUBLE
13577: EQUAL
13578: IFTRUE 13582
13580: GO 13714
13582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_INT 2
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: LD_INT 5
13596: PUSH
13597: LD_INT 6
13599: PUSH
13600: LD_INT 8
13602: PUSH
13603: LD_INT 11
13605: PUSH
13606: LD_INT 12
13608: PUSH
13609: LD_INT 15
13611: PUSH
13612: LD_INT 16
13614: PUSH
13615: LD_INT 20
13617: PUSH
13618: LD_INT 21
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 23
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 26
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 31
13638: PUSH
13639: LD_INT 32
13641: PUSH
13642: LD_INT 36
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 101
13668: PUSH
13669: LD_INT 102
13671: PUSH
13672: LD_INT 105
13674: PUSH
13675: LD_INT 106
13677: PUSH
13678: LD_INT 108
13680: PUSH
13681: LD_INT 109
13683: PUSH
13684: LD_INT 112
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: ST_TO_ADDR
13712: GO 16235
13714: LD_INT 7
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13834
13722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 4
13733: PUSH
13734: LD_INT 5
13736: PUSH
13737: LD_INT 7
13739: PUSH
13740: LD_INT 11
13742: PUSH
13743: LD_INT 12
13745: PUSH
13746: LD_INT 15
13748: PUSH
13749: LD_INT 16
13751: PUSH
13752: LD_INT 20
13754: PUSH
13755: LD_INT 21
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_INT 23
13763: PUSH
13764: LD_INT 25
13766: PUSH
13767: LD_INT 26
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 101
13788: PUSH
13789: LD_INT 102
13791: PUSH
13792: LD_INT 103
13794: PUSH
13795: LD_INT 105
13797: PUSH
13798: LD_INT 106
13800: PUSH
13801: LD_INT 108
13803: PUSH
13804: LD_INT 112
13806: PUSH
13807: LD_INT 116
13809: PUSH
13810: LD_INT 117
13812: PUSH
13813: LD_INT 118
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 16235
13834: LD_INT 8
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13982
13842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 4
13853: PUSH
13854: LD_INT 5
13856: PUSH
13857: LD_INT 6
13859: PUSH
13860: LD_INT 7
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: LD_INT 11
13868: PUSH
13869: LD_INT 12
13871: PUSH
13872: LD_INT 15
13874: PUSH
13875: LD_INT 16
13877: PUSH
13878: LD_INT 20
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 22
13886: PUSH
13887: LD_INT 23
13889: PUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 26
13895: PUSH
13896: LD_INT 30
13898: PUSH
13899: LD_INT 31
13901: PUSH
13902: LD_INT 32
13904: PUSH
13905: LD_INT 36
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 101
13932: PUSH
13933: LD_INT 102
13935: PUSH
13936: LD_INT 103
13938: PUSH
13939: LD_INT 105
13941: PUSH
13942: LD_INT 106
13944: PUSH
13945: LD_INT 108
13947: PUSH
13948: LD_INT 109
13950: PUSH
13951: LD_INT 112
13953: PUSH
13954: LD_INT 116
13956: PUSH
13957: LD_INT 117
13959: PUSH
13960: LD_INT 118
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: ST_TO_ADDR
13980: GO 16235
13982: LD_INT 9
13984: DOUBLE
13985: EQUAL
13986: IFTRUE 13990
13988: GO 14138
13990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13991: LD_ADDR_VAR 0 2
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: LD_INT 4
14001: PUSH
14002: LD_INT 5
14004: PUSH
14005: LD_INT 6
14007: PUSH
14008: LD_INT 7
14010: PUSH
14011: LD_INT 8
14013: PUSH
14014: LD_INT 11
14016: PUSH
14017: LD_INT 12
14019: PUSH
14020: LD_INT 15
14022: PUSH
14023: LD_INT 16
14025: PUSH
14026: LD_INT 20
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 22
14034: PUSH
14035: LD_INT 23
14037: PUSH
14038: LD_INT 25
14040: PUSH
14041: LD_INT 26
14043: PUSH
14044: LD_INT 28
14046: PUSH
14047: LD_INT 30
14049: PUSH
14050: LD_INT 31
14052: PUSH
14053: LD_INT 32
14055: PUSH
14056: LD_INT 36
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 101
14084: PUSH
14085: LD_INT 102
14087: PUSH
14088: LD_INT 103
14090: PUSH
14091: LD_INT 105
14093: PUSH
14094: LD_INT 106
14096: PUSH
14097: LD_INT 108
14099: PUSH
14100: LD_INT 109
14102: PUSH
14103: LD_INT 112
14105: PUSH
14106: LD_INT 114
14108: PUSH
14109: LD_INT 116
14111: PUSH
14112: LD_INT 117
14114: PUSH
14115: LD_INT 118
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: ST_TO_ADDR
14136: GO 16235
14138: LD_INT 10
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14342
14146: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14147: LD_ADDR_VAR 0 2
14151: PUSH
14152: LD_INT 2
14154: PUSH
14155: LD_INT 4
14157: PUSH
14158: LD_INT 5
14160: PUSH
14161: LD_INT 6
14163: PUSH
14164: LD_INT 7
14166: PUSH
14167: LD_INT 8
14169: PUSH
14170: LD_INT 9
14172: PUSH
14173: LD_INT 10
14175: PUSH
14176: LD_INT 11
14178: PUSH
14179: LD_INT 12
14181: PUSH
14182: LD_INT 13
14184: PUSH
14185: LD_INT 14
14187: PUSH
14188: LD_INT 15
14190: PUSH
14191: LD_INT 16
14193: PUSH
14194: LD_INT 17
14196: PUSH
14197: LD_INT 18
14199: PUSH
14200: LD_INT 19
14202: PUSH
14203: LD_INT 20
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 24
14217: PUSH
14218: LD_INT 25
14220: PUSH
14221: LD_INT 26
14223: PUSH
14224: LD_INT 28
14226: PUSH
14227: LD_INT 30
14229: PUSH
14230: LD_INT 31
14232: PUSH
14233: LD_INT 32
14235: PUSH
14236: LD_INT 36
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 101
14272: PUSH
14273: LD_INT 102
14275: PUSH
14276: LD_INT 103
14278: PUSH
14279: LD_INT 104
14281: PUSH
14282: LD_INT 105
14284: PUSH
14285: LD_INT 106
14287: PUSH
14288: LD_INT 107
14290: PUSH
14291: LD_INT 108
14293: PUSH
14294: LD_INT 109
14296: PUSH
14297: LD_INT 110
14299: PUSH
14300: LD_INT 111
14302: PUSH
14303: LD_INT 112
14305: PUSH
14306: LD_INT 114
14308: PUSH
14309: LD_INT 116
14311: PUSH
14312: LD_INT 117
14314: PUSH
14315: LD_INT 118
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: ST_TO_ADDR
14340: GO 16235
14342: LD_INT 11
14344: DOUBLE
14345: EQUAL
14346: IFTRUE 14350
14348: GO 14554
14350: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: LD_INT 4
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: LD_INT 7
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 9
14379: PUSH
14380: LD_INT 10
14382: PUSH
14383: LD_INT 11
14385: PUSH
14386: LD_INT 12
14388: PUSH
14389: LD_INT 13
14391: PUSH
14392: LD_INT 14
14394: PUSH
14395: LD_INT 15
14397: PUSH
14398: LD_INT 16
14400: PUSH
14401: LD_INT 17
14403: PUSH
14404: LD_INT 18
14406: PUSH
14407: LD_INT 19
14409: PUSH
14410: LD_INT 20
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_INT 23
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 26
14430: PUSH
14431: LD_INT 28
14433: PUSH
14434: LD_INT 30
14436: PUSH
14437: LD_INT 31
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 34
14445: PUSH
14446: LD_INT 36
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 101
14484: PUSH
14485: LD_INT 102
14487: PUSH
14488: LD_INT 103
14490: PUSH
14491: LD_INT 104
14493: PUSH
14494: LD_INT 105
14496: PUSH
14497: LD_INT 106
14499: PUSH
14500: LD_INT 107
14502: PUSH
14503: LD_INT 108
14505: PUSH
14506: LD_INT 109
14508: PUSH
14509: LD_INT 110
14511: PUSH
14512: LD_INT 111
14514: PUSH
14515: LD_INT 112
14517: PUSH
14518: LD_INT 114
14520: PUSH
14521: LD_INT 116
14523: PUSH
14524: LD_INT 117
14526: PUSH
14527: LD_INT 118
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: ST_TO_ADDR
14552: GO 16235
14554: LD_INT 12
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14782
14562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14563: LD_ADDR_VAR 0 2
14567: PUSH
14568: LD_INT 1
14570: PUSH
14571: LD_INT 2
14573: PUSH
14574: LD_INT 3
14576: PUSH
14577: LD_INT 4
14579: PUSH
14580: LD_INT 5
14582: PUSH
14583: LD_INT 6
14585: PUSH
14586: LD_INT 7
14588: PUSH
14589: LD_INT 8
14591: PUSH
14592: LD_INT 9
14594: PUSH
14595: LD_INT 10
14597: PUSH
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 13
14606: PUSH
14607: LD_INT 14
14609: PUSH
14610: LD_INT 15
14612: PUSH
14613: LD_INT 16
14615: PUSH
14616: LD_INT 17
14618: PUSH
14619: LD_INT 18
14621: PUSH
14622: LD_INT 19
14624: PUSH
14625: LD_INT 20
14627: PUSH
14628: LD_INT 21
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 23
14636: PUSH
14637: LD_INT 24
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: LD_INT 26
14645: PUSH
14646: LD_INT 27
14648: PUSH
14649: LD_INT 28
14651: PUSH
14652: LD_INT 30
14654: PUSH
14655: LD_INT 31
14657: PUSH
14658: LD_INT 32
14660: PUSH
14661: LD_INT 33
14663: PUSH
14664: LD_INT 34
14666: PUSH
14667: LD_INT 36
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 101
14708: PUSH
14709: LD_INT 102
14711: PUSH
14712: LD_INT 103
14714: PUSH
14715: LD_INT 104
14717: PUSH
14718: LD_INT 105
14720: PUSH
14721: LD_INT 106
14723: PUSH
14724: LD_INT 107
14726: PUSH
14727: LD_INT 108
14729: PUSH
14730: LD_INT 109
14732: PUSH
14733: LD_INT 110
14735: PUSH
14736: LD_INT 111
14738: PUSH
14739: LD_INT 112
14741: PUSH
14742: LD_INT 113
14744: PUSH
14745: LD_INT 114
14747: PUSH
14748: LD_INT 116
14750: PUSH
14751: LD_INT 117
14753: PUSH
14754: LD_INT 118
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: ST_TO_ADDR
14780: GO 16235
14782: LD_INT 13
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14998
14790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14791: LD_ADDR_VAR 0 2
14795: PUSH
14796: LD_INT 1
14798: PUSH
14799: LD_INT 2
14801: PUSH
14802: LD_INT 3
14804: PUSH
14805: LD_INT 4
14807: PUSH
14808: LD_INT 5
14810: PUSH
14811: LD_INT 8
14813: PUSH
14814: LD_INT 9
14816: PUSH
14817: LD_INT 10
14819: PUSH
14820: LD_INT 11
14822: PUSH
14823: LD_INT 12
14825: PUSH
14826: LD_INT 14
14828: PUSH
14829: LD_INT 15
14831: PUSH
14832: LD_INT 16
14834: PUSH
14835: LD_INT 17
14837: PUSH
14838: LD_INT 18
14840: PUSH
14841: LD_INT 19
14843: PUSH
14844: LD_INT 20
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_INT 23
14855: PUSH
14856: LD_INT 24
14858: PUSH
14859: LD_INT 25
14861: PUSH
14862: LD_INT 26
14864: PUSH
14865: LD_INT 27
14867: PUSH
14868: LD_INT 28
14870: PUSH
14871: LD_INT 30
14873: PUSH
14874: LD_INT 31
14876: PUSH
14877: LD_INT 32
14879: PUSH
14880: LD_INT 33
14882: PUSH
14883: LD_INT 34
14885: PUSH
14886: LD_INT 36
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 101
14924: PUSH
14925: LD_INT 102
14927: PUSH
14928: LD_INT 103
14930: PUSH
14931: LD_INT 104
14933: PUSH
14934: LD_INT 105
14936: PUSH
14937: LD_INT 106
14939: PUSH
14940: LD_INT 107
14942: PUSH
14943: LD_INT 108
14945: PUSH
14946: LD_INT 109
14948: PUSH
14949: LD_INT 110
14951: PUSH
14952: LD_INT 111
14954: PUSH
14955: LD_INT 112
14957: PUSH
14958: LD_INT 113
14960: PUSH
14961: LD_INT 114
14963: PUSH
14964: LD_INT 116
14966: PUSH
14967: LD_INT 117
14969: PUSH
14970: LD_INT 118
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: ST_TO_ADDR
14996: GO 16235
14998: LD_INT 14
15000: DOUBLE
15001: EQUAL
15002: IFTRUE 15006
15004: GO 15230
15006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15007: LD_ADDR_VAR 0 2
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: LD_INT 2
15017: PUSH
15018: LD_INT 3
15020: PUSH
15021: LD_INT 4
15023: PUSH
15024: LD_INT 5
15026: PUSH
15027: LD_INT 6
15029: PUSH
15030: LD_INT 7
15032: PUSH
15033: LD_INT 8
15035: PUSH
15036: LD_INT 9
15038: PUSH
15039: LD_INT 10
15041: PUSH
15042: LD_INT 11
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 13
15050: PUSH
15051: LD_INT 14
15053: PUSH
15054: LD_INT 15
15056: PUSH
15057: LD_INT 16
15059: PUSH
15060: LD_INT 17
15062: PUSH
15063: LD_INT 18
15065: PUSH
15066: LD_INT 19
15068: PUSH
15069: LD_INT 20
15071: PUSH
15072: LD_INT 21
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_INT 23
15080: PUSH
15081: LD_INT 24
15083: PUSH
15084: LD_INT 25
15086: PUSH
15087: LD_INT 26
15089: PUSH
15090: LD_INT 27
15092: PUSH
15093: LD_INT 28
15095: PUSH
15096: LD_INT 29
15098: PUSH
15099: LD_INT 30
15101: PUSH
15102: LD_INT 31
15104: PUSH
15105: LD_INT 32
15107: PUSH
15108: LD_INT 33
15110: PUSH
15111: LD_INT 34
15113: PUSH
15114: LD_INT 36
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 101
15156: PUSH
15157: LD_INT 102
15159: PUSH
15160: LD_INT 103
15162: PUSH
15163: LD_INT 104
15165: PUSH
15166: LD_INT 105
15168: PUSH
15169: LD_INT 106
15171: PUSH
15172: LD_INT 107
15174: PUSH
15175: LD_INT 108
15177: PUSH
15178: LD_INT 109
15180: PUSH
15181: LD_INT 110
15183: PUSH
15184: LD_INT 111
15186: PUSH
15187: LD_INT 112
15189: PUSH
15190: LD_INT 113
15192: PUSH
15193: LD_INT 114
15195: PUSH
15196: LD_INT 116
15198: PUSH
15199: LD_INT 117
15201: PUSH
15202: LD_INT 118
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: ST_TO_ADDR
15228: GO 16235
15230: LD_INT 15
15232: DOUBLE
15233: EQUAL
15234: IFTRUE 15238
15236: GO 15462
15238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15239: LD_ADDR_VAR 0 2
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: LD_INT 2
15249: PUSH
15250: LD_INT 3
15252: PUSH
15253: LD_INT 4
15255: PUSH
15256: LD_INT 5
15258: PUSH
15259: LD_INT 6
15261: PUSH
15262: LD_INT 7
15264: PUSH
15265: LD_INT 8
15267: PUSH
15268: LD_INT 9
15270: PUSH
15271: LD_INT 10
15273: PUSH
15274: LD_INT 11
15276: PUSH
15277: LD_INT 12
15279: PUSH
15280: LD_INT 13
15282: PUSH
15283: LD_INT 14
15285: PUSH
15286: LD_INT 15
15288: PUSH
15289: LD_INT 16
15291: PUSH
15292: LD_INT 17
15294: PUSH
15295: LD_INT 18
15297: PUSH
15298: LD_INT 19
15300: PUSH
15301: LD_INT 20
15303: PUSH
15304: LD_INT 21
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 23
15312: PUSH
15313: LD_INT 24
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 26
15321: PUSH
15322: LD_INT 27
15324: PUSH
15325: LD_INT 28
15327: PUSH
15328: LD_INT 29
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 31
15336: PUSH
15337: LD_INT 32
15339: PUSH
15340: LD_INT 33
15342: PUSH
15343: LD_INT 34
15345: PUSH
15346: LD_INT 36
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 101
15388: PUSH
15389: LD_INT 102
15391: PUSH
15392: LD_INT 103
15394: PUSH
15395: LD_INT 104
15397: PUSH
15398: LD_INT 105
15400: PUSH
15401: LD_INT 106
15403: PUSH
15404: LD_INT 107
15406: PUSH
15407: LD_INT 108
15409: PUSH
15410: LD_INT 109
15412: PUSH
15413: LD_INT 110
15415: PUSH
15416: LD_INT 111
15418: PUSH
15419: LD_INT 112
15421: PUSH
15422: LD_INT 113
15424: PUSH
15425: LD_INT 114
15427: PUSH
15428: LD_INT 116
15430: PUSH
15431: LD_INT 117
15433: PUSH
15434: LD_INT 118
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: ST_TO_ADDR
15460: GO 16235
15462: LD_INT 16
15464: DOUBLE
15465: EQUAL
15466: IFTRUE 15470
15468: GO 15606
15470: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: LD_INT 4
15481: PUSH
15482: LD_INT 5
15484: PUSH
15485: LD_INT 7
15487: PUSH
15488: LD_INT 11
15490: PUSH
15491: LD_INT 12
15493: PUSH
15494: LD_INT 15
15496: PUSH
15497: LD_INT 16
15499: PUSH
15500: LD_INT 20
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_INT 23
15511: PUSH
15512: LD_INT 25
15514: PUSH
15515: LD_INT 26
15517: PUSH
15518: LD_INT 30
15520: PUSH
15521: LD_INT 31
15523: PUSH
15524: LD_INT 32
15526: PUSH
15527: LD_INT 33
15529: PUSH
15530: LD_INT 34
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 101
15556: PUSH
15557: LD_INT 102
15559: PUSH
15560: LD_INT 103
15562: PUSH
15563: LD_INT 106
15565: PUSH
15566: LD_INT 108
15568: PUSH
15569: LD_INT 112
15571: PUSH
15572: LD_INT 113
15574: PUSH
15575: LD_INT 114
15577: PUSH
15578: LD_INT 116
15580: PUSH
15581: LD_INT 117
15583: PUSH
15584: LD_INT 118
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: ST_TO_ADDR
15604: GO 16235
15606: LD_INT 17
15608: DOUBLE
15609: EQUAL
15610: IFTRUE 15614
15612: GO 15838
15614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15615: LD_ADDR_VAR 0 2
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: LD_INT 4
15631: PUSH
15632: LD_INT 5
15634: PUSH
15635: LD_INT 6
15637: PUSH
15638: LD_INT 7
15640: PUSH
15641: LD_INT 8
15643: PUSH
15644: LD_INT 9
15646: PUSH
15647: LD_INT 10
15649: PUSH
15650: LD_INT 11
15652: PUSH
15653: LD_INT 12
15655: PUSH
15656: LD_INT 13
15658: PUSH
15659: LD_INT 14
15661: PUSH
15662: LD_INT 15
15664: PUSH
15665: LD_INT 16
15667: PUSH
15668: LD_INT 17
15670: PUSH
15671: LD_INT 18
15673: PUSH
15674: LD_INT 19
15676: PUSH
15677: LD_INT 20
15679: PUSH
15680: LD_INT 21
15682: PUSH
15683: LD_INT 22
15685: PUSH
15686: LD_INT 23
15688: PUSH
15689: LD_INT 24
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 26
15697: PUSH
15698: LD_INT 27
15700: PUSH
15701: LD_INT 28
15703: PUSH
15704: LD_INT 29
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: LD_INT 31
15712: PUSH
15713: LD_INT 32
15715: PUSH
15716: LD_INT 33
15718: PUSH
15719: LD_INT 34
15721: PUSH
15722: LD_INT 36
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 101
15764: PUSH
15765: LD_INT 102
15767: PUSH
15768: LD_INT 103
15770: PUSH
15771: LD_INT 104
15773: PUSH
15774: LD_INT 105
15776: PUSH
15777: LD_INT 106
15779: PUSH
15780: LD_INT 107
15782: PUSH
15783: LD_INT 108
15785: PUSH
15786: LD_INT 109
15788: PUSH
15789: LD_INT 110
15791: PUSH
15792: LD_INT 111
15794: PUSH
15795: LD_INT 112
15797: PUSH
15798: LD_INT 113
15800: PUSH
15801: LD_INT 114
15803: PUSH
15804: LD_INT 116
15806: PUSH
15807: LD_INT 117
15809: PUSH
15810: LD_INT 118
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: ST_TO_ADDR
15836: GO 16235
15838: LD_INT 18
15840: DOUBLE
15841: EQUAL
15842: IFTRUE 15846
15844: GO 15994
15846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: LD_INT 4
15857: PUSH
15858: LD_INT 5
15860: PUSH
15861: LD_INT 7
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 15
15872: PUSH
15873: LD_INT 16
15875: PUSH
15876: LD_INT 20
15878: PUSH
15879: LD_INT 21
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_INT 23
15887: PUSH
15888: LD_INT 25
15890: PUSH
15891: LD_INT 26
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 31
15899: PUSH
15900: LD_INT 32
15902: PUSH
15903: LD_INT 33
15905: PUSH
15906: LD_INT 34
15908: PUSH
15909: LD_INT 35
15911: PUSH
15912: LD_INT 36
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 101
15940: PUSH
15941: LD_INT 102
15943: PUSH
15944: LD_INT 103
15946: PUSH
15947: LD_INT 106
15949: PUSH
15950: LD_INT 108
15952: PUSH
15953: LD_INT 112
15955: PUSH
15956: LD_INT 113
15958: PUSH
15959: LD_INT 114
15961: PUSH
15962: LD_INT 115
15964: PUSH
15965: LD_INT 116
15967: PUSH
15968: LD_INT 117
15970: PUSH
15971: LD_INT 118
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16235
15994: LD_INT 19
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16234
16002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16003: LD_ADDR_VAR 0 2
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: LD_INT 3
16016: PUSH
16017: LD_INT 4
16019: PUSH
16020: LD_INT 5
16022: PUSH
16023: LD_INT 6
16025: PUSH
16026: LD_INT 7
16028: PUSH
16029: LD_INT 8
16031: PUSH
16032: LD_INT 9
16034: PUSH
16035: LD_INT 10
16037: PUSH
16038: LD_INT 11
16040: PUSH
16041: LD_INT 12
16043: PUSH
16044: LD_INT 13
16046: PUSH
16047: LD_INT 14
16049: PUSH
16050: LD_INT 15
16052: PUSH
16053: LD_INT 16
16055: PUSH
16056: LD_INT 17
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 19
16064: PUSH
16065: LD_INT 20
16067: PUSH
16068: LD_INT 21
16070: PUSH
16071: LD_INT 22
16073: PUSH
16074: LD_INT 23
16076: PUSH
16077: LD_INT 24
16079: PUSH
16080: LD_INT 25
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 27
16088: PUSH
16089: LD_INT 28
16091: PUSH
16092: LD_INT 29
16094: PUSH
16095: LD_INT 30
16097: PUSH
16098: LD_INT 31
16100: PUSH
16101: LD_INT 32
16103: PUSH
16104: LD_INT 33
16106: PUSH
16107: LD_INT 34
16109: PUSH
16110: LD_INT 35
16112: PUSH
16113: LD_INT 36
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 101
16156: PUSH
16157: LD_INT 102
16159: PUSH
16160: LD_INT 103
16162: PUSH
16163: LD_INT 104
16165: PUSH
16166: LD_INT 105
16168: PUSH
16169: LD_INT 106
16171: PUSH
16172: LD_INT 107
16174: PUSH
16175: LD_INT 108
16177: PUSH
16178: LD_INT 109
16180: PUSH
16181: LD_INT 110
16183: PUSH
16184: LD_INT 111
16186: PUSH
16187: LD_INT 112
16189: PUSH
16190: LD_INT 113
16192: PUSH
16193: LD_INT 114
16195: PUSH
16196: LD_INT 115
16198: PUSH
16199: LD_INT 116
16201: PUSH
16202: LD_INT 117
16204: PUSH
16205: LD_INT 118
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: ST_TO_ADDR
16232: GO 16235
16234: POP
// end else
16235: GO 16466
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: LD_INT 4
16253: PUSH
16254: LD_INT 5
16256: PUSH
16257: LD_INT 6
16259: PUSH
16260: LD_INT 7
16262: PUSH
16263: LD_INT 8
16265: PUSH
16266: LD_INT 9
16268: PUSH
16269: LD_INT 10
16271: PUSH
16272: LD_INT 11
16274: PUSH
16275: LD_INT 12
16277: PUSH
16278: LD_INT 13
16280: PUSH
16281: LD_INT 14
16283: PUSH
16284: LD_INT 15
16286: PUSH
16287: LD_INT 16
16289: PUSH
16290: LD_INT 17
16292: PUSH
16293: LD_INT 18
16295: PUSH
16296: LD_INT 19
16298: PUSH
16299: LD_INT 20
16301: PUSH
16302: LD_INT 21
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_INT 23
16310: PUSH
16311: LD_INT 24
16313: PUSH
16314: LD_INT 25
16316: PUSH
16317: LD_INT 26
16319: PUSH
16320: LD_INT 27
16322: PUSH
16323: LD_INT 28
16325: PUSH
16326: LD_INT 29
16328: PUSH
16329: LD_INT 30
16331: PUSH
16332: LD_INT 31
16334: PUSH
16335: LD_INT 32
16337: PUSH
16338: LD_INT 33
16340: PUSH
16341: LD_INT 34
16343: PUSH
16344: LD_INT 35
16346: PUSH
16347: LD_INT 36
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 101
16390: PUSH
16391: LD_INT 102
16393: PUSH
16394: LD_INT 103
16396: PUSH
16397: LD_INT 104
16399: PUSH
16400: LD_INT 105
16402: PUSH
16403: LD_INT 106
16405: PUSH
16406: LD_INT 107
16408: PUSH
16409: LD_INT 108
16411: PUSH
16412: LD_INT 109
16414: PUSH
16415: LD_INT 110
16417: PUSH
16418: LD_INT 111
16420: PUSH
16421: LD_INT 112
16423: PUSH
16424: LD_INT 113
16426: PUSH
16427: LD_INT 114
16429: PUSH
16430: LD_INT 115
16432: PUSH
16433: LD_INT 116
16435: PUSH
16436: LD_INT 117
16438: PUSH
16439: LD_INT 118
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: ST_TO_ADDR
// if result then
16466: LD_VAR 0 2
16470: IFFALSE 17256
// begin normal :=  ;
16472: LD_ADDR_VAR 0 5
16476: PUSH
16477: LD_STRING 
16479: ST_TO_ADDR
// hardcore :=  ;
16480: LD_ADDR_VAR 0 6
16484: PUSH
16485: LD_STRING 
16487: ST_TO_ADDR
// active :=  ;
16488: LD_ADDR_VAR 0 7
16492: PUSH
16493: LD_STRING 
16495: ST_TO_ADDR
// for i = 1 to normalCounter do
16496: LD_ADDR_VAR 0 8
16500: PUSH
16501: DOUBLE
16502: LD_INT 1
16504: DEC
16505: ST_TO_ADDR
16506: LD_EXP 40
16510: PUSH
16511: FOR_TO
16512: IFFALSE 16613
// begin tmp := 0 ;
16514: LD_ADDR_VAR 0 3
16518: PUSH
16519: LD_STRING 0
16521: ST_TO_ADDR
// if result [ 1 ] then
16522: LD_VAR 0 2
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: IFFALSE 16595
// if result [ 1 ] [ 1 ] = i then
16532: LD_VAR 0 2
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PUSH
16545: LD_VAR 0 8
16549: EQUAL
16550: IFFALSE 16595
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16552: LD_ADDR_VAR 0 2
16556: PUSH
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_VAR 0 2
16569: PUSH
16570: LD_INT 1
16572: ARRAY
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 3
16581: PPUSH
16582: CALL_OW 1
16586: ST_TO_ADDR
// tmp := 1 ;
16587: LD_ADDR_VAR 0 3
16591: PUSH
16592: LD_STRING 1
16594: ST_TO_ADDR
// end ; normal := normal & tmp ;
16595: LD_ADDR_VAR 0 5
16599: PUSH
16600: LD_VAR 0 5
16604: PUSH
16605: LD_VAR 0 3
16609: STR
16610: ST_TO_ADDR
// end ;
16611: GO 16511
16613: POP
16614: POP
// for i = 1 to hardcoreCounter do
16615: LD_ADDR_VAR 0 8
16619: PUSH
16620: DOUBLE
16621: LD_INT 1
16623: DEC
16624: ST_TO_ADDR
16625: LD_EXP 41
16629: PUSH
16630: FOR_TO
16631: IFFALSE 16736
// begin tmp := 0 ;
16633: LD_ADDR_VAR 0 3
16637: PUSH
16638: LD_STRING 0
16640: ST_TO_ADDR
// if result [ 2 ] then
16641: LD_VAR 0 2
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: IFFALSE 16718
// if result [ 2 ] [ 1 ] = 100 + i then
16651: LD_VAR 0 2
16655: PUSH
16656: LD_INT 2
16658: ARRAY
16659: PUSH
16660: LD_INT 1
16662: ARRAY
16663: PUSH
16664: LD_INT 100
16666: PUSH
16667: LD_VAR 0 8
16671: PLUS
16672: EQUAL
16673: IFFALSE 16718
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16675: LD_ADDR_VAR 0 2
16679: PUSH
16680: LD_VAR 0 2
16684: PPUSH
16685: LD_INT 2
16687: PPUSH
16688: LD_VAR 0 2
16692: PUSH
16693: LD_INT 2
16695: ARRAY
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 3
16704: PPUSH
16705: CALL_OW 1
16709: ST_TO_ADDR
// tmp := 1 ;
16710: LD_ADDR_VAR 0 3
16714: PUSH
16715: LD_STRING 1
16717: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16718: LD_ADDR_VAR 0 6
16722: PUSH
16723: LD_VAR 0 6
16727: PUSH
16728: LD_VAR 0 3
16732: STR
16733: ST_TO_ADDR
// end ;
16734: GO 16630
16736: POP
16737: POP
// if isGameLoad then
16738: LD_VAR 0 1
16742: IFFALSE 17217
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16744: LD_ADDR_VAR 0 4
16748: PUSH
16749: LD_EXP 44
16753: PUSH
16754: LD_EXP 43
16758: PUSH
16759: LD_EXP 45
16763: PUSH
16764: LD_EXP 42
16768: PUSH
16769: LD_EXP 46
16773: PUSH
16774: LD_EXP 47
16778: PUSH
16779: LD_EXP 48
16783: PUSH
16784: LD_EXP 49
16788: PUSH
16789: LD_EXP 50
16793: PUSH
16794: LD_EXP 51
16798: PUSH
16799: LD_EXP 52
16803: PUSH
16804: LD_EXP 53
16808: PUSH
16809: LD_EXP 54
16813: PUSH
16814: LD_EXP 55
16818: PUSH
16819: LD_EXP 63
16823: PUSH
16824: LD_EXP 64
16828: PUSH
16829: LD_EXP 65
16833: PUSH
16834: LD_EXP 66
16838: PUSH
16839: LD_EXP 68
16843: PUSH
16844: LD_EXP 69
16848: PUSH
16849: LD_EXP 70
16853: PUSH
16854: LD_EXP 73
16858: PUSH
16859: LD_EXP 75
16863: PUSH
16864: LD_EXP 76
16868: PUSH
16869: LD_EXP 77
16873: PUSH
16874: LD_EXP 79
16878: PUSH
16879: LD_EXP 80
16883: PUSH
16884: LD_EXP 83
16888: PUSH
16889: LD_EXP 84
16893: PUSH
16894: LD_EXP 85
16898: PUSH
16899: LD_EXP 86
16903: PUSH
16904: LD_EXP 87
16908: PUSH
16909: LD_EXP 88
16913: PUSH
16914: LD_EXP 89
16918: PUSH
16919: LD_EXP 90
16923: PUSH
16924: LD_EXP 91
16928: PUSH
16929: LD_EXP 56
16933: PUSH
16934: LD_EXP 57
16938: PUSH
16939: LD_EXP 60
16943: PUSH
16944: LD_EXP 61
16948: PUSH
16949: LD_EXP 62
16953: PUSH
16954: LD_EXP 58
16958: PUSH
16959: LD_EXP 59
16963: PUSH
16964: LD_EXP 67
16968: PUSH
16969: LD_EXP 71
16973: PUSH
16974: LD_EXP 72
16978: PUSH
16979: LD_EXP 74
16983: PUSH
16984: LD_EXP 78
16988: PUSH
16989: LD_EXP 81
16993: PUSH
16994: LD_EXP 82
16998: PUSH
16999: LD_EXP 92
17003: PUSH
17004: LD_EXP 93
17008: PUSH
17009: LD_EXP 94
17013: PUSH
17014: LD_EXP 95
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: ST_TO_ADDR
// tmp :=  ;
17075: LD_ADDR_VAR 0 3
17079: PUSH
17080: LD_STRING 
17082: ST_TO_ADDR
// for i = 1 to normalCounter do
17083: LD_ADDR_VAR 0 8
17087: PUSH
17088: DOUBLE
17089: LD_INT 1
17091: DEC
17092: ST_TO_ADDR
17093: LD_EXP 40
17097: PUSH
17098: FOR_TO
17099: IFFALSE 17135
// begin if flags [ i ] then
17101: LD_VAR 0 4
17105: PUSH
17106: LD_VAR 0 8
17110: ARRAY
17111: IFFALSE 17133
// tmp := tmp & i & ; ;
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_VAR 0 3
17122: PUSH
17123: LD_VAR 0 8
17127: STR
17128: PUSH
17129: LD_STRING ;
17131: STR
17132: ST_TO_ADDR
// end ;
17133: GO 17098
17135: POP
17136: POP
// for i = 1 to hardcoreCounter do
17137: LD_ADDR_VAR 0 8
17141: PUSH
17142: DOUBLE
17143: LD_INT 1
17145: DEC
17146: ST_TO_ADDR
17147: LD_EXP 41
17151: PUSH
17152: FOR_TO
17153: IFFALSE 17199
// begin if flags [ normalCounter + i ] then
17155: LD_VAR 0 4
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_VAR 0 8
17169: PLUS
17170: ARRAY
17171: IFFALSE 17197
// tmp := tmp & ( 100 + i ) & ; ;
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 100
17185: PUSH
17186: LD_VAR 0 8
17190: PLUS
17191: STR
17192: PUSH
17193: LD_STRING ;
17195: STR
17196: ST_TO_ADDR
// end ;
17197: GO 17152
17199: POP
17200: POP
// if tmp then
17201: LD_VAR 0 3
17205: IFFALSE 17217
// active := tmp ;
17207: LD_ADDR_VAR 0 7
17211: PUSH
17212: LD_VAR 0 3
17216: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17217: LD_STRING getStreamItemsFromMission("
17219: PUSH
17220: LD_VAR 0 5
17224: STR
17225: PUSH
17226: LD_STRING ","
17228: STR
17229: PUSH
17230: LD_VAR 0 6
17234: STR
17235: PUSH
17236: LD_STRING ","
17238: STR
17239: PUSH
17240: LD_VAR 0 7
17244: STR
17245: PUSH
17246: LD_STRING ")
17248: STR
17249: PPUSH
17250: CALL_OW 559
// end else
17254: GO 17263
// ToLua ( getStreamItemsFromMission("","","") ) ;
17256: LD_STRING getStreamItemsFromMission("","","")
17258: PPUSH
17259: CALL_OW 559
// end ;
17263: LD_VAR 0 2
17267: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17268: LD_EXP 39
17272: PUSH
17273: LD_EXP 44
17277: AND
17278: IFFALSE 17402
17280: GO 17282
17282: DISABLE
17283: LD_INT 0
17285: PPUSH
17286: PPUSH
// begin enable ;
17287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_INT 22
17295: PUSH
17296: LD_OWVAR 2
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: LD_INT 34
17310: PUSH
17311: LD_INT 7
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 45
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 28
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 47
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: ST_TO_ADDR
// if not tmp then
17364: LD_VAR 0 2
17368: NOT
17369: IFFALSE 17373
// exit ;
17371: GO 17402
// for i in tmp do
17373: LD_ADDR_VAR 0 1
17377: PUSH
17378: LD_VAR 0 2
17382: PUSH
17383: FOR_IN
17384: IFFALSE 17400
// begin SetLives ( i , 0 ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 234
// end ;
17398: GO 17383
17400: POP
17401: POP
// end ;
17402: PPOPN 2
17404: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17405: LD_EXP 39
17409: PUSH
17410: LD_EXP 45
17414: AND
17415: IFFALSE 17499
17417: GO 17419
17419: DISABLE
17420: LD_INT 0
17422: PPUSH
17423: PPUSH
// begin enable ;
17424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17425: LD_ADDR_VAR 0 2
17429: PUSH
17430: LD_INT 22
17432: PUSH
17433: LD_OWVAR 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 32
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 69
17460: ST_TO_ADDR
// if not tmp then
17461: LD_VAR 0 2
17465: NOT
17466: IFFALSE 17470
// exit ;
17468: GO 17499
// for i in tmp do
17470: LD_ADDR_VAR 0 1
17474: PUSH
17475: LD_VAR 0 2
17479: PUSH
17480: FOR_IN
17481: IFFALSE 17497
// begin SetLives ( i , 0 ) ;
17483: LD_VAR 0 1
17487: PPUSH
17488: LD_INT 0
17490: PPUSH
17491: CALL_OW 234
// end ;
17495: GO 17480
17497: POP
17498: POP
// end ;
17499: PPOPN 2
17501: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17502: LD_EXP 39
17506: PUSH
17507: LD_EXP 42
17511: AND
17512: IFFALSE 17605
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
// begin enable ;
17520: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17521: LD_ADDR_VAR 0 1
17525: PUSH
17526: LD_INT 22
17528: PUSH
17529: LD_OWVAR 2
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: LD_INT 25
17543: PUSH
17544: LD_INT 5
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 25
17553: PUSH
17554: LD_INT 9
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 25
17563: PUSH
17564: LD_INT 8
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 69
17585: PUSH
17586: FOR_IN
17587: IFFALSE 17603
// begin SetClass ( i , 1 ) ;
17589: LD_VAR 0 1
17593: PPUSH
17594: LD_INT 1
17596: PPUSH
17597: CALL_OW 336
// end ;
17601: GO 17586
17603: POP
17604: POP
// end ;
17605: PPOPN 1
17607: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17608: LD_EXP 39
17612: PUSH
17613: LD_EXP 43
17617: AND
17618: PUSH
17619: LD_OWVAR 65
17623: PUSH
17624: LD_INT 7
17626: LESS
17627: AND
17628: IFFALSE 17642
17630: GO 17632
17632: DISABLE
// begin enable ;
17633: ENABLE
// game_speed := 7 ;
17634: LD_ADDR_OWVAR 65
17638: PUSH
17639: LD_INT 7
17641: ST_TO_ADDR
// end ;
17642: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17643: LD_EXP 39
17647: PUSH
17648: LD_EXP 46
17652: AND
17653: IFFALSE 17855
17655: GO 17657
17657: DISABLE
17658: LD_INT 0
17660: PPUSH
17661: PPUSH
17662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17663: LD_ADDR_VAR 0 3
17667: PUSH
17668: LD_INT 81
17670: PUSH
17671: LD_OWVAR 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 21
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PPUSH
17694: CALL_OW 69
17698: ST_TO_ADDR
// if not tmp then
17699: LD_VAR 0 3
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17855
// if tmp > 5 then
17708: LD_VAR 0 3
17712: PUSH
17713: LD_INT 5
17715: GREATER
17716: IFFALSE 17728
// k := 5 else
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_INT 5
17725: ST_TO_ADDR
17726: GO 17738
// k := tmp ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_VAR 0 3
17737: ST_TO_ADDR
// for i := 1 to k do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: DOUBLE
17744: LD_INT 1
17746: DEC
17747: ST_TO_ADDR
17748: LD_VAR 0 2
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17853
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17756: LD_VAR 0 3
17760: PUSH
17761: LD_VAR 0 1
17765: ARRAY
17766: PPUSH
17767: LD_VAR 0 1
17771: PUSH
17772: LD_INT 4
17774: MOD
17775: PUSH
17776: LD_INT 1
17778: PLUS
17779: PPUSH
17780: CALL_OW 259
17784: PUSH
17785: LD_INT 10
17787: LESS
17788: IFFALSE 17851
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17790: LD_VAR 0 3
17794: PUSH
17795: LD_VAR 0 1
17799: ARRAY
17800: PPUSH
17801: LD_VAR 0 1
17805: PUSH
17806: LD_INT 4
17808: MOD
17809: PUSH
17810: LD_INT 1
17812: PLUS
17813: PPUSH
17814: LD_VAR 0 3
17818: PUSH
17819: LD_VAR 0 1
17823: ARRAY
17824: PPUSH
17825: LD_VAR 0 1
17829: PUSH
17830: LD_INT 4
17832: MOD
17833: PUSH
17834: LD_INT 1
17836: PLUS
17837: PPUSH
17838: CALL_OW 259
17842: PUSH
17843: LD_INT 1
17845: PLUS
17846: PPUSH
17847: CALL_OW 237
17851: GO 17753
17853: POP
17854: POP
// end ;
17855: PPOPN 3
17857: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17858: LD_EXP 39
17862: PUSH
17863: LD_EXP 47
17867: AND
17868: IFFALSE 17888
17870: GO 17872
17872: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17873: LD_INT 4
17875: PPUSH
17876: LD_OWVAR 2
17880: PPUSH
17881: LD_INT 0
17883: PPUSH
17884: CALL_OW 324
17888: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17889: LD_EXP 39
17893: PUSH
17894: LD_EXP 76
17898: AND
17899: IFFALSE 17919
17901: GO 17903
17903: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17904: LD_INT 19
17906: PPUSH
17907: LD_OWVAR 2
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 324
17919: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17920: LD_EXP 39
17924: PUSH
17925: LD_EXP 48
17929: AND
17930: IFFALSE 18032
17932: GO 17934
17934: DISABLE
17935: LD_INT 0
17937: PPUSH
17938: PPUSH
// begin enable ;
17939: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 34
17962: PUSH
17963: LD_INT 11
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 34
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: ST_TO_ADDR
// if not tmp then
17994: LD_VAR 0 2
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18032
// for i in tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: LD_VAR 0 2
18012: PUSH
18013: FOR_IN
18014: IFFALSE 18030
// begin SetLives ( i , 0 ) ;
18016: LD_VAR 0 1
18020: PPUSH
18021: LD_INT 0
18023: PPUSH
18024: CALL_OW 234
// end ;
18028: GO 18013
18030: POP
18031: POP
// end ;
18032: PPOPN 2
18034: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18035: LD_EXP 39
18039: PUSH
18040: LD_EXP 49
18044: AND
18045: IFFALSE 18065
18047: GO 18049
18049: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18050: LD_INT 32
18052: PPUSH
18053: LD_OWVAR 2
18057: PPUSH
18058: LD_INT 0
18060: PPUSH
18061: CALL_OW 324
18065: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18066: LD_EXP 39
18070: PUSH
18071: LD_EXP 50
18075: AND
18076: IFFALSE 18257
18078: GO 18080
18080: DISABLE
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
18085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18086: LD_ADDR_VAR 0 2
18090: PUSH
18091: LD_INT 22
18093: PUSH
18094: LD_OWVAR 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 33
18105: PUSH
18106: LD_INT 3
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PPUSH
18117: CALL_OW 69
18121: ST_TO_ADDR
// if not tmp then
18122: LD_VAR 0 2
18126: NOT
18127: IFFALSE 18131
// exit ;
18129: GO 18257
// side := 0 ;
18131: LD_ADDR_VAR 0 3
18135: PUSH
18136: LD_INT 0
18138: ST_TO_ADDR
// for i := 1 to 8 do
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: DOUBLE
18145: LD_INT 1
18147: DEC
18148: ST_TO_ADDR
18149: LD_INT 8
18151: PUSH
18152: FOR_TO
18153: IFFALSE 18201
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18155: LD_OWVAR 2
18159: PUSH
18160: LD_VAR 0 1
18164: NONEQUAL
18165: PUSH
18166: LD_OWVAR 2
18170: PPUSH
18171: LD_VAR 0 1
18175: PPUSH
18176: CALL_OW 81
18180: PUSH
18181: LD_INT 2
18183: EQUAL
18184: AND
18185: IFFALSE 18199
// begin side := i ;
18187: LD_ADDR_VAR 0 3
18191: PUSH
18192: LD_VAR 0 1
18196: ST_TO_ADDR
// break ;
18197: GO 18201
// end ;
18199: GO 18152
18201: POP
18202: POP
// if not side then
18203: LD_VAR 0 3
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18257
// for i := 1 to tmp do
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: DOUBLE
18218: LD_INT 1
18220: DEC
18221: ST_TO_ADDR
18222: LD_VAR 0 2
18226: PUSH
18227: FOR_TO
18228: IFFALSE 18255
// if Prob ( 60 ) then
18230: LD_INT 60
18232: PPUSH
18233: CALL_OW 13
18237: IFFALSE 18253
// SetSide ( i , side ) ;
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_VAR 0 3
18248: PPUSH
18249: CALL_OW 235
18253: GO 18227
18255: POP
18256: POP
// end ;
18257: PPOPN 3
18259: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18260: LD_EXP 39
18264: PUSH
18265: LD_EXP 52
18269: AND
18270: IFFALSE 18389
18272: GO 18274
18274: DISABLE
18275: LD_INT 0
18277: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 21
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: LD_INT 23
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: PUSH
18332: FOR_IN
18333: IFFALSE 18387
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 257
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: LD_INT 3
18353: PUSH
18354: LD_INT 4
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: IN
18363: IFFALSE 18385
// SetClass ( un , rand ( 1 , 4 ) ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_INT 1
18372: PPUSH
18373: LD_INT 4
18375: PPUSH
18376: CALL_OW 12
18380: PPUSH
18381: CALL_OW 336
18385: GO 18332
18387: POP
18388: POP
// end ;
18389: PPOPN 1
18391: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18392: LD_EXP 39
18396: PUSH
18397: LD_EXP 51
18401: AND
18402: IFFALSE 18481
18404: GO 18406
18406: DISABLE
18407: LD_INT 0
18409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18410: LD_ADDR_VAR 0 1
18414: PUSH
18415: LD_INT 22
18417: PUSH
18418: LD_OWVAR 2
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 21
18429: PUSH
18430: LD_INT 3
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PPUSH
18441: CALL_OW 69
18445: ST_TO_ADDR
// if not tmp then
18446: LD_VAR 0 1
18450: NOT
18451: IFFALSE 18455
// exit ;
18453: GO 18481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18455: LD_VAR 0 1
18459: PUSH
18460: LD_INT 1
18462: PPUSH
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 12
18472: ARRAY
18473: PPUSH
18474: LD_INT 100
18476: PPUSH
18477: CALL_OW 234
// end ;
18481: PPOPN 1
18483: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18484: LD_EXP 39
18488: PUSH
18489: LD_EXP 53
18493: AND
18494: IFFALSE 18592
18496: GO 18498
18498: DISABLE
18499: LD_INT 0
18501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18502: LD_ADDR_VAR 0 1
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_OWVAR 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 21
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: ST_TO_ADDR
// if not tmp then
18538: LD_VAR 0 1
18542: NOT
18543: IFFALSE 18547
// exit ;
18545: GO 18592
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18547: LD_VAR 0 1
18551: PUSH
18552: LD_INT 1
18554: PPUSH
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 12
18564: ARRAY
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 4
18571: PPUSH
18572: CALL_OW 12
18576: PPUSH
18577: LD_INT 3000
18579: PPUSH
18580: LD_INT 9000
18582: PPUSH
18583: CALL_OW 12
18587: PPUSH
18588: CALL_OW 492
// end ;
18592: PPOPN 1
18594: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18595: LD_EXP 39
18599: PUSH
18600: LD_EXP 54
18604: AND
18605: IFFALSE 18625
18607: GO 18609
18609: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18610: LD_INT 1
18612: PPUSH
18613: LD_OWVAR 2
18617: PPUSH
18618: LD_INT 0
18620: PPUSH
18621: CALL_OW 324
18625: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18626: LD_EXP 39
18630: PUSH
18631: LD_EXP 55
18635: AND
18636: IFFALSE 18719
18638: GO 18640
18640: DISABLE
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 22
18652: PUSH
18653: LD_OWVAR 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 21
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 69
18680: ST_TO_ADDR
// if not tmp then
18681: LD_VAR 0 2
18685: NOT
18686: IFFALSE 18690
// exit ;
18688: GO 18719
// for i in tmp do
18690: LD_ADDR_VAR 0 1
18694: PUSH
18695: LD_VAR 0 2
18699: PUSH
18700: FOR_IN
18701: IFFALSE 18717
// SetBLevel ( i , 10 ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_INT 10
18710: PPUSH
18711: CALL_OW 241
18715: GO 18700
18717: POP
18718: POP
// end ;
18719: PPOPN 2
18721: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18722: LD_EXP 39
18726: PUSH
18727: LD_EXP 56
18731: AND
18732: IFFALSE 18843
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
18741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18742: LD_ADDR_VAR 0 3
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 25
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: ST_TO_ADDR
// if not tmp then
18778: LD_VAR 0 3
18782: NOT
18783: IFFALSE 18787
// exit ;
18785: GO 18843
// un := tmp [ rand ( 1 , tmp ) ] ;
18787: LD_ADDR_VAR 0 2
18791: PUSH
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: ST_TO_ADDR
// if Crawls ( un ) then
18811: LD_VAR 0 2
18815: PPUSH
18816: CALL_OW 318
18820: IFFALSE 18831
// ComWalk ( un ) ;
18822: LD_VAR 0 2
18826: PPUSH
18827: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18831: LD_VAR 0 2
18835: PPUSH
18836: LD_INT 5
18838: PPUSH
18839: CALL_OW 336
// end ;
18843: PPOPN 3
18845: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18846: LD_EXP 39
18850: PUSH
18851: LD_EXP 57
18855: AND
18856: PUSH
18857: LD_OWVAR 67
18861: PUSH
18862: LD_INT 4
18864: LESS
18865: AND
18866: IFFALSE 18885
18868: GO 18870
18870: DISABLE
// begin Difficulty := Difficulty + 1 ;
18871: LD_ADDR_OWVAR 67
18875: PUSH
18876: LD_OWVAR 67
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: ST_TO_ADDR
// end ;
18885: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18886: LD_EXP 39
18890: PUSH
18891: LD_EXP 58
18895: AND
18896: IFFALSE 18999
18898: GO 18900
18900: DISABLE
18901: LD_INT 0
18903: PPUSH
// begin for i := 1 to 5 do
18904: LD_ADDR_VAR 0 1
18908: PUSH
18909: DOUBLE
18910: LD_INT 1
18912: DEC
18913: ST_TO_ADDR
18914: LD_INT 5
18916: PUSH
18917: FOR_TO
18918: IFFALSE 18997
// begin uc_nation := nation_nature ;
18920: LD_ADDR_OWVAR 21
18924: PUSH
18925: LD_INT 0
18927: ST_TO_ADDR
// uc_side := 0 ;
18928: LD_ADDR_OWVAR 20
18932: PUSH
18933: LD_INT 0
18935: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18936: LD_ADDR_OWVAR 29
18940: PUSH
18941: LD_INT 12
18943: PUSH
18944: LD_INT 12
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// hc_agressivity := 20 ;
18951: LD_ADDR_OWVAR 35
18955: PUSH
18956: LD_INT 20
18958: ST_TO_ADDR
// hc_class := class_tiger ;
18959: LD_ADDR_OWVAR 28
18963: PUSH
18964: LD_INT 14
18966: ST_TO_ADDR
// hc_gallery :=  ;
18967: LD_ADDR_OWVAR 33
18971: PUSH
18972: LD_STRING 
18974: ST_TO_ADDR
// hc_name :=  ;
18975: LD_ADDR_OWVAR 26
18979: PUSH
18980: LD_STRING 
18982: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18983: CALL_OW 44
18987: PPUSH
18988: LD_INT 0
18990: PPUSH
18991: CALL_OW 51
// end ;
18995: GO 18917
18997: POP
18998: POP
// end ;
18999: PPOPN 1
19001: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19002: LD_EXP 39
19006: PUSH
19007: LD_EXP 59
19011: AND
19012: IFFALSE 19021
19014: GO 19016
19016: DISABLE
// StreamSibBomb ;
19017: CALL 19022 0 0
19021: END
// export function StreamSibBomb ; var i , x , y ; begin
19022: LD_INT 0
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
// result := false ;
19028: LD_ADDR_VAR 0 1
19032: PUSH
19033: LD_INT 0
19035: ST_TO_ADDR
// for i := 1 to 16 do
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: DOUBLE
19042: LD_INT 1
19044: DEC
19045: ST_TO_ADDR
19046: LD_INT 16
19048: PUSH
19049: FOR_TO
19050: IFFALSE 19249
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_INT 10
19059: PUSH
19060: LD_INT 20
19062: PUSH
19063: LD_INT 30
19065: PUSH
19066: LD_INT 40
19068: PUSH
19069: LD_INT 50
19071: PUSH
19072: LD_INT 60
19074: PUSH
19075: LD_INT 70
19077: PUSH
19078: LD_INT 80
19080: PUSH
19081: LD_INT 90
19083: PUSH
19084: LD_INT 100
19086: PUSH
19087: LD_INT 110
19089: PUSH
19090: LD_INT 120
19092: PUSH
19093: LD_INT 130
19095: PUSH
19096: LD_INT 140
19098: PUSH
19099: LD_INT 150
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: PPUSH
19122: LD_INT 15
19124: PPUSH
19125: CALL_OW 12
19129: ARRAY
19130: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19131: LD_ADDR_VAR 0 4
19135: PUSH
19136: LD_INT 10
19138: PUSH
19139: LD_INT 20
19141: PUSH
19142: LD_INT 30
19144: PUSH
19145: LD_INT 40
19147: PUSH
19148: LD_INT 50
19150: PUSH
19151: LD_INT 60
19153: PUSH
19154: LD_INT 70
19156: PUSH
19157: LD_INT 80
19159: PUSH
19160: LD_INT 90
19162: PUSH
19163: LD_INT 100
19165: PUSH
19166: LD_INT 110
19168: PUSH
19169: LD_INT 120
19171: PUSH
19172: LD_INT 130
19174: PUSH
19175: LD_INT 140
19177: PUSH
19178: LD_INT 150
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 15
19203: PPUSH
19204: CALL_OW 12
19208: ARRAY
19209: ST_TO_ADDR
// if ValidHex ( x , y ) then
19210: LD_VAR 0 3
19214: PPUSH
19215: LD_VAR 0 4
19219: PPUSH
19220: CALL_OW 488
19224: IFFALSE 19247
// begin result := [ x , y ] ;
19226: LD_ADDR_VAR 0 1
19230: PUSH
19231: LD_VAR 0 3
19235: PUSH
19236: LD_VAR 0 4
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: ST_TO_ADDR
// break ;
19245: GO 19249
// end ; end ;
19247: GO 19049
19249: POP
19250: POP
// if result then
19251: LD_VAR 0 1
19255: IFFALSE 19315
// begin ToLua ( playSibBomb() ) ;
19257: LD_STRING playSibBomb()
19259: PPUSH
19260: CALL_OW 559
// wait ( 0 0$14 ) ;
19264: LD_INT 490
19266: PPUSH
19267: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19271: LD_VAR 0 1
19275: PUSH
19276: LD_INT 1
19278: ARRAY
19279: PPUSH
19280: LD_VAR 0 1
19284: PUSH
19285: LD_INT 2
19287: ARRAY
19288: PPUSH
19289: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19293: LD_VAR 0 1
19297: PUSH
19298: LD_INT 1
19300: ARRAY
19301: PPUSH
19302: LD_VAR 0 1
19306: PUSH
19307: LD_INT 2
19309: ARRAY
19310: PPUSH
19311: CALL_OW 429
// end ; end ;
19315: LD_VAR 0 1
19319: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19320: LD_EXP 39
19324: PUSH
19325: LD_EXP 61
19329: AND
19330: IFFALSE 19342
19332: GO 19334
19334: DISABLE
// YouLost (  ) ;
19335: LD_STRING 
19337: PPUSH
19338: CALL_OW 104
19342: END
// every 0 0$1 trigger StreamModeActive and sFog do
19343: LD_EXP 39
19347: PUSH
19348: LD_EXP 60
19352: AND
19353: IFFALSE 19367
19355: GO 19357
19357: DISABLE
// FogOff ( your_side ) ;
19358: LD_OWVAR 2
19362: PPUSH
19363: CALL_OW 344
19367: END
// every 0 0$1 trigger StreamModeActive and sSun do
19368: LD_EXP 39
19372: PUSH
19373: LD_EXP 62
19377: AND
19378: IFFALSE 19406
19380: GO 19382
19382: DISABLE
// begin solar_recharge_percent := 0 ;
19383: LD_ADDR_OWVAR 79
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19391: LD_INT 10500
19393: PPUSH
19394: CALL_OW 67
// solar_recharge_percent := 100 ;
19398: LD_ADDR_OWVAR 79
19402: PUSH
19403: LD_INT 100
19405: ST_TO_ADDR
// end ;
19406: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19407: LD_EXP 39
19411: PUSH
19412: LD_EXP 63
19416: AND
19417: IFFALSE 19656
19419: GO 19421
19421: DISABLE
19422: LD_INT 0
19424: PPUSH
19425: PPUSH
19426: PPUSH
// begin tmp := [ ] ;
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: EMPTY
19433: ST_TO_ADDR
// for i := 1 to 6 do
19434: LD_ADDR_VAR 0 1
19438: PUSH
19439: DOUBLE
19440: LD_INT 1
19442: DEC
19443: ST_TO_ADDR
19444: LD_INT 6
19446: PUSH
19447: FOR_TO
19448: IFFALSE 19553
// begin uc_nation := nation_nature ;
19450: LD_ADDR_OWVAR 21
19454: PUSH
19455: LD_INT 0
19457: ST_TO_ADDR
// uc_side := 0 ;
19458: LD_ADDR_OWVAR 20
19462: PUSH
19463: LD_INT 0
19465: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19466: LD_ADDR_OWVAR 29
19470: PUSH
19471: LD_INT 12
19473: PUSH
19474: LD_INT 12
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: ST_TO_ADDR
// hc_agressivity := 20 ;
19481: LD_ADDR_OWVAR 35
19485: PUSH
19486: LD_INT 20
19488: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19489: LD_ADDR_OWVAR 28
19493: PUSH
19494: LD_INT 17
19496: ST_TO_ADDR
// hc_gallery :=  ;
19497: LD_ADDR_OWVAR 33
19501: PUSH
19502: LD_STRING 
19504: ST_TO_ADDR
// hc_name :=  ;
19505: LD_ADDR_OWVAR 26
19509: PUSH
19510: LD_STRING 
19512: ST_TO_ADDR
// un := CreateHuman ;
19513: LD_ADDR_VAR 0 2
19517: PUSH
19518: CALL_OW 44
19522: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19523: LD_VAR 0 2
19527: PPUSH
19528: LD_INT 1
19530: PPUSH
19531: CALL_OW 51
// tmp := tmp ^ un ;
19535: LD_ADDR_VAR 0 3
19539: PUSH
19540: LD_VAR 0 3
19544: PUSH
19545: LD_VAR 0 2
19549: ADD
19550: ST_TO_ADDR
// end ;
19551: GO 19447
19553: POP
19554: POP
// repeat wait ( 0 0$1 ) ;
19555: LD_INT 35
19557: PPUSH
19558: CALL_OW 67
// for un in tmp do
19562: LD_ADDR_VAR 0 2
19566: PUSH
19567: LD_VAR 0 3
19571: PUSH
19572: FOR_IN
19573: IFFALSE 19647
// begin if IsDead ( un ) then
19575: LD_VAR 0 2
19579: PPUSH
19580: CALL_OW 301
19584: IFFALSE 19604
// begin tmp := tmp diff un ;
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_VAR 0 3
19595: PUSH
19596: LD_VAR 0 2
19600: DIFF
19601: ST_TO_ADDR
// continue ;
19602: GO 19572
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19604: LD_VAR 0 2
19608: PPUSH
19609: LD_INT 3
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PPUSH
19626: CALL_OW 69
19630: PPUSH
19631: LD_VAR 0 2
19635: PPUSH
19636: CALL_OW 74
19640: PPUSH
19641: CALL_OW 115
// end ;
19645: GO 19572
19647: POP
19648: POP
// until not tmp ;
19649: LD_VAR 0 3
19653: NOT
19654: IFFALSE 19555
// end ;
19656: PPOPN 3
19658: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19659: LD_EXP 39
19663: PUSH
19664: LD_EXP 64
19668: AND
19669: IFFALSE 19723
19671: GO 19673
19673: DISABLE
// begin ToLua ( displayTroll(); ) ;
19674: LD_STRING displayTroll();
19676: PPUSH
19677: CALL_OW 559
// wait ( 3 3$00 ) ;
19681: LD_INT 6300
19683: PPUSH
19684: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19688: LD_STRING hideTroll();
19690: PPUSH
19691: CALL_OW 559
// wait ( 1 1$00 ) ;
19695: LD_INT 2100
19697: PPUSH
19698: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19702: LD_STRING displayTroll();
19704: PPUSH
19705: CALL_OW 559
// wait ( 1 1$00 ) ;
19709: LD_INT 2100
19711: PPUSH
19712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19716: LD_STRING hideTroll();
19718: PPUSH
19719: CALL_OW 559
// end ;
19723: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19724: LD_EXP 39
19728: PUSH
19729: LD_EXP 65
19733: AND
19734: IFFALSE 19797
19736: GO 19738
19738: DISABLE
19739: LD_INT 0
19741: PPUSH
// begin p := 0 ;
19742: LD_ADDR_VAR 0 1
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// repeat game_speed := 1 ;
19750: LD_ADDR_OWVAR 65
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19758: LD_INT 35
19760: PPUSH
19761: CALL_OW 67
// p := p + 1 ;
19765: LD_ADDR_VAR 0 1
19769: PUSH
19770: LD_VAR 0 1
19774: PUSH
19775: LD_INT 1
19777: PLUS
19778: ST_TO_ADDR
// until p >= 60 ;
19779: LD_VAR 0 1
19783: PUSH
19784: LD_INT 60
19786: GREATEREQUAL
19787: IFFALSE 19750
// game_speed := 4 ;
19789: LD_ADDR_OWVAR 65
19793: PUSH
19794: LD_INT 4
19796: ST_TO_ADDR
// end ;
19797: PPOPN 1
19799: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19800: LD_EXP 39
19804: PUSH
19805: LD_EXP 66
19809: AND
19810: IFFALSE 19956
19812: GO 19814
19814: DISABLE
19815: LD_INT 0
19817: PPUSH
19818: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19819: LD_ADDR_VAR 0 1
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_OWVAR 2
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not depot then
19873: LD_VAR 0 1
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 19956
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: LD_VAR 0 1
19891: PUSH
19892: LD_INT 1
19894: PPUSH
19895: LD_VAR 0 1
19899: PPUSH
19900: CALL_OW 12
19904: ARRAY
19905: PPUSH
19906: CALL_OW 274
19910: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19911: LD_VAR 0 2
19915: PPUSH
19916: LD_INT 1
19918: PPUSH
19919: LD_INT 0
19921: PPUSH
19922: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_INT 2
19933: PPUSH
19934: LD_INT 0
19936: PPUSH
19937: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19941: LD_VAR 0 2
19945: PPUSH
19946: LD_INT 3
19948: PPUSH
19949: LD_INT 0
19951: PPUSH
19952: CALL_OW 277
// end ;
19956: PPOPN 2
19958: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19959: LD_EXP 39
19963: PUSH
19964: LD_EXP 67
19968: AND
19969: IFFALSE 20066
19971: GO 19973
19973: DISABLE
19974: LD_INT 0
19976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_INT 22
19984: PUSH
19985: LD_OWVAR 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 21
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 3
20006: PUSH
20007: LD_INT 23
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 1
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20040: LD_VAR 0 1
20044: PUSH
20045: LD_INT 1
20047: PPUSH
20048: LD_VAR 0 1
20052: PPUSH
20053: CALL_OW 12
20057: ARRAY
20058: PPUSH
20059: LD_INT 200
20061: PPUSH
20062: CALL_OW 234
// end ;
20066: PPOPN 1
20068: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20069: LD_EXP 39
20073: PUSH
20074: LD_EXP 68
20078: AND
20079: IFFALSE 20158
20081: GO 20083
20083: DISABLE
20084: LD_INT 0
20086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20087: LD_ADDR_VAR 0 1
20091: PUSH
20092: LD_INT 22
20094: PUSH
20095: LD_OWVAR 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 21
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 1
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20132: LD_VAR 0 1
20136: PUSH
20137: LD_INT 1
20139: PPUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 12
20149: ARRAY
20150: PPUSH
20151: LD_INT 60
20153: PPUSH
20154: CALL_OW 234
// end ;
20158: PPOPN 1
20160: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20161: LD_EXP 39
20165: PUSH
20166: LD_EXP 69
20170: AND
20171: IFFALSE 20270
20173: GO 20175
20175: DISABLE
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
// begin enable ;
20180: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20181: LD_ADDR_VAR 0 1
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_OWVAR 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 61
20200: PUSH
20201: EMPTY
20202: LIST
20203: PUSH
20204: LD_INT 33
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: PPUSH
20219: CALL_OW 69
20223: ST_TO_ADDR
// if not tmp then
20224: LD_VAR 0 1
20228: NOT
20229: IFFALSE 20233
// exit ;
20231: GO 20270
// for i in tmp do
20233: LD_ADDR_VAR 0 2
20237: PUSH
20238: LD_VAR 0 1
20242: PUSH
20243: FOR_IN
20244: IFFALSE 20268
// if IsControledBy ( i ) then
20246: LD_VAR 0 2
20250: PPUSH
20251: CALL_OW 312
20255: IFFALSE 20266
// ComUnlink ( i ) ;
20257: LD_VAR 0 2
20261: PPUSH
20262: CALL_OW 136
20266: GO 20243
20268: POP
20269: POP
// end ;
20270: PPOPN 2
20272: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20273: LD_EXP 39
20277: PUSH
20278: LD_EXP 70
20282: AND
20283: IFFALSE 20423
20285: GO 20287
20287: DISABLE
20288: LD_INT 0
20290: PPUSH
20291: PPUSH
// begin ToLua ( displayPowell(); ) ;
20292: LD_STRING displayPowell();
20294: PPUSH
20295: CALL_OW 559
// uc_side := 0 ;
20299: LD_ADDR_OWVAR 20
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// uc_nation := 2 ;
20307: LD_ADDR_OWVAR 21
20311: PUSH
20312: LD_INT 2
20314: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20315: LD_ADDR_OWVAR 37
20319: PUSH
20320: LD_INT 14
20322: ST_TO_ADDR
// vc_engine := engine_siberite ;
20323: LD_ADDR_OWVAR 39
20327: PUSH
20328: LD_INT 3
20330: ST_TO_ADDR
// vc_control := control_apeman ;
20331: LD_ADDR_OWVAR 38
20335: PUSH
20336: LD_INT 5
20338: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20339: LD_ADDR_OWVAR 40
20343: PUSH
20344: LD_INT 29
20346: ST_TO_ADDR
// un := CreateVehicle ;
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: CALL_OW 45
20356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20357: LD_VAR 0 2
20361: PPUSH
20362: LD_INT 1
20364: PPUSH
20365: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20369: LD_INT 35
20371: PPUSH
20372: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20376: LD_VAR 0 2
20380: PPUSH
20381: LD_INT 22
20383: PUSH
20384: LD_OWVAR 2
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 69
20397: PPUSH
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 74
20407: PPUSH
20408: CALL_OW 115
// until IsDead ( un ) ;
20412: LD_VAR 0 2
20416: PPUSH
20417: CALL_OW 301
20421: IFFALSE 20369
// end ;
20423: PPOPN 2
20425: END
// every 0 0$1 trigger StreamModeActive and sStu do
20426: LD_EXP 39
20430: PUSH
20431: LD_EXP 78
20435: AND
20436: IFFALSE 20452
20438: GO 20440
20440: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20441: LD_STRING displayStucuk();
20443: PPUSH
20444: CALL_OW 559
// ResetFog ;
20448: CALL_OW 335
// end ;
20452: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20453: LD_EXP 39
20457: PUSH
20458: LD_EXP 71
20462: AND
20463: IFFALSE 20604
20465: GO 20467
20467: DISABLE
20468: LD_INT 0
20470: PPUSH
20471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: LD_INT 22
20479: PUSH
20480: LD_OWVAR 2
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 21
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PPUSH
20503: CALL_OW 69
20507: ST_TO_ADDR
// if not tmp then
20508: LD_VAR 0 2
20512: NOT
20513: IFFALSE 20517
// exit ;
20515: GO 20604
// un := tmp [ rand ( 1 , tmp ) ] ;
20517: LD_ADDR_VAR 0 1
20521: PUSH
20522: LD_VAR 0 2
20526: PUSH
20527: LD_INT 1
20529: PPUSH
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 12
20539: ARRAY
20540: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_INT 0
20548: PPUSH
20549: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20553: LD_VAR 0 1
20557: PPUSH
20558: LD_OWVAR 3
20562: PUSH
20563: LD_VAR 0 1
20567: DIFF
20568: PPUSH
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 74
20578: PPUSH
20579: CALL_OW 115
// wait ( 0 0$20 ) ;
20583: LD_INT 700
20585: PPUSH
20586: CALL_OW 67
// SetSide ( un , your_side ) ;
20590: LD_VAR 0 1
20594: PPUSH
20595: LD_OWVAR 2
20599: PPUSH
20600: CALL_OW 235
// end ;
20604: PPOPN 2
20606: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20607: LD_EXP 39
20611: PUSH
20612: LD_EXP 72
20616: AND
20617: IFFALSE 20723
20619: GO 20621
20621: DISABLE
20622: LD_INT 0
20624: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20625: LD_ADDR_VAR 0 1
20629: PUSH
20630: LD_INT 22
20632: PUSH
20633: LD_OWVAR 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 30
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: ST_TO_ADDR
// if not depot then
20679: LD_VAR 0 1
20683: NOT
20684: IFFALSE 20688
// exit ;
20686: GO 20723
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20688: LD_VAR 0 1
20692: PUSH
20693: LD_INT 1
20695: ARRAY
20696: PPUSH
20697: CALL_OW 250
20701: PPUSH
20702: LD_VAR 0 1
20706: PUSH
20707: LD_INT 1
20709: ARRAY
20710: PPUSH
20711: CALL_OW 251
20715: PPUSH
20716: LD_INT 70
20718: PPUSH
20719: CALL_OW 495
// end ;
20723: PPOPN 1
20725: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20726: LD_EXP 39
20730: PUSH
20731: LD_EXP 73
20735: AND
20736: IFFALSE 20947
20738: GO 20740
20740: DISABLE
20741: LD_INT 0
20743: PPUSH
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20748: LD_ADDR_VAR 0 5
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_OWVAR 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 21
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PPUSH
20779: CALL_OW 69
20783: ST_TO_ADDR
// if not tmp then
20784: LD_VAR 0 5
20788: NOT
20789: IFFALSE 20793
// exit ;
20791: GO 20947
// for i in tmp do
20793: LD_ADDR_VAR 0 1
20797: PUSH
20798: LD_VAR 0 5
20802: PUSH
20803: FOR_IN
20804: IFFALSE 20945
// begin d := rand ( 0 , 5 ) ;
20806: LD_ADDR_VAR 0 4
20810: PUSH
20811: LD_INT 0
20813: PPUSH
20814: LD_INT 5
20816: PPUSH
20817: CALL_OW 12
20821: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 250
20836: PPUSH
20837: LD_VAR 0 4
20841: PPUSH
20842: LD_INT 3
20844: PPUSH
20845: LD_INT 12
20847: PPUSH
20848: CALL_OW 12
20852: PPUSH
20853: CALL_OW 272
20857: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20858: LD_ADDR_VAR 0 3
20862: PUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 251
20872: PPUSH
20873: LD_VAR 0 4
20877: PPUSH
20878: LD_INT 3
20880: PPUSH
20881: LD_INT 12
20883: PPUSH
20884: CALL_OW 12
20888: PPUSH
20889: CALL_OW 273
20893: ST_TO_ADDR
// if ValidHex ( x , y ) then
20894: LD_VAR 0 2
20898: PPUSH
20899: LD_VAR 0 3
20903: PPUSH
20904: CALL_OW 488
20908: IFFALSE 20943
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20910: LD_VAR 0 1
20914: PPUSH
20915: LD_VAR 0 2
20919: PPUSH
20920: LD_VAR 0 3
20924: PPUSH
20925: LD_INT 3
20927: PPUSH
20928: LD_INT 6
20930: PPUSH
20931: CALL_OW 12
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 483
// end ;
20943: GO 20803
20945: POP
20946: POP
// end ;
20947: PPOPN 5
20949: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20950: LD_EXP 39
20954: PUSH
20955: LD_EXP 74
20959: AND
20960: IFFALSE 21054
20962: GO 20964
20964: DISABLE
20965: LD_INT 0
20967: PPUSH
20968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_INT 22
20976: PUSH
20977: LD_OWVAR 2
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 32
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 21
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: PPUSH
21011: CALL_OW 69
21015: ST_TO_ADDR
// if not tmp then
21016: LD_VAR 0 2
21020: NOT
21021: IFFALSE 21025
// exit ;
21023: GO 21054
// for i in tmp do
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: LD_VAR 0 2
21034: PUSH
21035: FOR_IN
21036: IFFALSE 21052
// SetFuel ( i , 0 ) ;
21038: LD_VAR 0 1
21042: PPUSH
21043: LD_INT 0
21045: PPUSH
21046: CALL_OW 240
21050: GO 21035
21052: POP
21053: POP
// end ;
21054: PPOPN 2
21056: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21057: LD_EXP 39
21061: PUSH
21062: LD_EXP 75
21066: AND
21067: IFFALSE 21133
21069: GO 21071
21071: DISABLE
21072: LD_INT 0
21074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21075: LD_ADDR_VAR 0 1
21079: PUSH
21080: LD_INT 22
21082: PUSH
21083: LD_OWVAR 2
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 30
21094: PUSH
21095: LD_INT 29
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PPUSH
21106: CALL_OW 69
21110: ST_TO_ADDR
// if not tmp then
21111: LD_VAR 0 1
21115: NOT
21116: IFFALSE 21120
// exit ;
21118: GO 21133
// DestroyUnit ( tmp [ 1 ] ) ;
21120: LD_VAR 0 1
21124: PUSH
21125: LD_INT 1
21127: ARRAY
21128: PPUSH
21129: CALL_OW 65
// end ;
21133: PPOPN 1
21135: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21136: LD_EXP 39
21140: PUSH
21141: LD_EXP 77
21145: AND
21146: IFFALSE 21275
21148: GO 21150
21150: DISABLE
21151: LD_INT 0
21153: PPUSH
// begin uc_side := 0 ;
21154: LD_ADDR_OWVAR 20
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// uc_nation := nation_arabian ;
21162: LD_ADDR_OWVAR 21
21166: PUSH
21167: LD_INT 2
21169: ST_TO_ADDR
// hc_gallery :=  ;
21170: LD_ADDR_OWVAR 33
21174: PUSH
21175: LD_STRING 
21177: ST_TO_ADDR
// hc_name :=  ;
21178: LD_ADDR_OWVAR 26
21182: PUSH
21183: LD_STRING 
21185: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21186: LD_INT 1
21188: PPUSH
21189: LD_INT 11
21191: PPUSH
21192: LD_INT 10
21194: PPUSH
21195: CALL_OW 380
// un := CreateHuman ;
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: CALL_OW 44
21208: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21209: LD_VAR 0 1
21213: PPUSH
21214: LD_INT 1
21216: PPUSH
21217: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21221: LD_INT 35
21223: PPUSH
21224: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21228: LD_VAR 0 1
21232: PPUSH
21233: LD_INT 22
21235: PUSH
21236: LD_OWVAR 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 69
21249: PPUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 74
21259: PPUSH
21260: CALL_OW 115
// until IsDead ( un ) ;
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 301
21273: IFFALSE 21221
// end ;
21275: PPOPN 1
21277: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21278: LD_EXP 39
21282: PUSH
21283: LD_EXP 79
21287: AND
21288: IFFALSE 21300
21290: GO 21292
21292: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21293: LD_STRING earthquake(getX(game), 0, 32)
21295: PPUSH
21296: CALL_OW 559
21300: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21301: LD_EXP 39
21305: PUSH
21306: LD_EXP 80
21310: AND
21311: IFFALSE 21402
21313: GO 21315
21315: DISABLE
21316: LD_INT 0
21318: PPUSH
// begin enable ;
21319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_INT 22
21327: PUSH
21328: LD_OWVAR 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 21
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 33
21349: PUSH
21350: LD_INT 3
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: PPUSH
21362: CALL_OW 69
21366: ST_TO_ADDR
// if not tmp then
21367: LD_VAR 0 1
21371: NOT
21372: IFFALSE 21376
// exit ;
21374: GO 21402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21376: LD_VAR 0 1
21380: PUSH
21381: LD_INT 1
21383: PPUSH
21384: LD_VAR 0 1
21388: PPUSH
21389: CALL_OW 12
21393: ARRAY
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 234
// end ;
21402: PPOPN 1
21404: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21405: LD_EXP 39
21409: PUSH
21410: LD_EXP 81
21414: AND
21415: IFFALSE 21556
21417: GO 21419
21419: DISABLE
21420: LD_INT 0
21422: PPUSH
21423: PPUSH
21424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_OWVAR 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: ST_TO_ADDR
// if not tmp then
21461: LD_VAR 0 3
21465: NOT
21466: IFFALSE 21470
// exit ;
21468: GO 21556
// un := tmp [ rand ( 1 , tmp ) ] ;
21470: LD_ADDR_VAR 0 2
21474: PUSH
21475: LD_VAR 0 3
21479: PUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_VAR 0 3
21487: PPUSH
21488: CALL_OW 12
21492: ARRAY
21493: ST_TO_ADDR
// if Crawls ( un ) then
21494: LD_VAR 0 2
21498: PPUSH
21499: CALL_OW 318
21503: IFFALSE 21514
// ComWalk ( un ) ;
21505: LD_VAR 0 2
21509: PPUSH
21510: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21514: LD_VAR 0 2
21518: PPUSH
21519: LD_INT 9
21521: PPUSH
21522: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21526: LD_INT 28
21528: PPUSH
21529: LD_OWVAR 2
21533: PPUSH
21534: LD_INT 2
21536: PPUSH
21537: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21541: LD_INT 29
21543: PPUSH
21544: LD_OWVAR 2
21548: PPUSH
21549: LD_INT 2
21551: PPUSH
21552: CALL_OW 322
// end ;
21556: PPOPN 3
21558: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21559: LD_EXP 39
21563: PUSH
21564: LD_EXP 82
21568: AND
21569: IFFALSE 21680
21571: GO 21573
21573: DISABLE
21574: LD_INT 0
21576: PPUSH
21577: PPUSH
21578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21579: LD_ADDR_VAR 0 3
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_OWVAR 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PPUSH
21610: CALL_OW 69
21614: ST_TO_ADDR
// if not tmp then
21615: LD_VAR 0 3
21619: NOT
21620: IFFALSE 21624
// exit ;
21622: GO 21680
// un := tmp [ rand ( 1 , tmp ) ] ;
21624: LD_ADDR_VAR 0 2
21628: PUSH
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 1
21636: PPUSH
21637: LD_VAR 0 3
21641: PPUSH
21642: CALL_OW 12
21646: ARRAY
21647: ST_TO_ADDR
// if Crawls ( un ) then
21648: LD_VAR 0 2
21652: PPUSH
21653: CALL_OW 318
21657: IFFALSE 21668
// ComWalk ( un ) ;
21659: LD_VAR 0 2
21663: PPUSH
21664: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21668: LD_VAR 0 2
21672: PPUSH
21673: LD_INT 8
21675: PPUSH
21676: CALL_OW 336
// end ;
21680: PPOPN 3
21682: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21683: LD_EXP 39
21687: PUSH
21688: LD_EXP 83
21692: AND
21693: IFFALSE 21837
21695: GO 21697
21697: DISABLE
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_INT 22
21709: PUSH
21710: LD_OWVAR 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 21
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 34
21744: PUSH
21745: LD_INT 51
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 34
21754: PUSH
21755: LD_INT 32
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: ST_TO_ADDR
// if not tmp then
21778: LD_VAR 0 2
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 21837
// for i in tmp do
21787: LD_ADDR_VAR 0 1
21791: PUSH
21792: LD_VAR 0 2
21796: PUSH
21797: FOR_IN
21798: IFFALSE 21835
// if GetCargo ( i , mat_artifact ) = 0 then
21800: LD_VAR 0 1
21804: PPUSH
21805: LD_INT 4
21807: PPUSH
21808: CALL_OW 289
21812: PUSH
21813: LD_INT 0
21815: EQUAL
21816: IFFALSE 21833
// SetCargo ( i , mat_siberit , 100 ) ;
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 3
21825: PPUSH
21826: LD_INT 100
21828: PPUSH
21829: CALL_OW 290
21833: GO 21797
21835: POP
21836: POP
// end ;
21837: PPOPN 2
21839: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21840: LD_EXP 39
21844: PUSH
21845: LD_EXP 84
21849: AND
21850: IFFALSE 22033
21852: GO 21854
21854: DISABLE
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21859: LD_ADDR_VAR 0 2
21863: PUSH
21864: LD_INT 22
21866: PUSH
21867: LD_OWVAR 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 69
21880: ST_TO_ADDR
// if not tmp then
21881: LD_VAR 0 2
21885: NOT
21886: IFFALSE 21890
// exit ;
21888: GO 22033
// for i := 1 to 2 do
21890: LD_ADDR_VAR 0 1
21894: PUSH
21895: DOUBLE
21896: LD_INT 1
21898: DEC
21899: ST_TO_ADDR
21900: LD_INT 2
21902: PUSH
21903: FOR_TO
21904: IFFALSE 22031
// begin uc_side := your_side ;
21906: LD_ADDR_OWVAR 20
21910: PUSH
21911: LD_OWVAR 2
21915: ST_TO_ADDR
// uc_nation := nation_american ;
21916: LD_ADDR_OWVAR 21
21920: PUSH
21921: LD_INT 1
21923: ST_TO_ADDR
// vc_chassis := us_morphling ;
21924: LD_ADDR_OWVAR 37
21928: PUSH
21929: LD_INT 5
21931: ST_TO_ADDR
// vc_engine := engine_siberite ;
21932: LD_ADDR_OWVAR 39
21936: PUSH
21937: LD_INT 3
21939: ST_TO_ADDR
// vc_control := control_computer ;
21940: LD_ADDR_OWVAR 38
21944: PUSH
21945: LD_INT 3
21947: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21948: LD_ADDR_OWVAR 40
21952: PUSH
21953: LD_INT 10
21955: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21956: LD_VAR 0 2
21960: PUSH
21961: LD_INT 1
21963: ARRAY
21964: PPUSH
21965: CALL_OW 310
21969: NOT
21970: IFFALSE 22017
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21972: CALL_OW 45
21976: PPUSH
21977: LD_VAR 0 2
21981: PUSH
21982: LD_INT 1
21984: ARRAY
21985: PPUSH
21986: CALL_OW 250
21990: PPUSH
21991: LD_VAR 0 2
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 251
22004: PPUSH
22005: LD_INT 12
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: CALL_OW 50
22015: GO 22029
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22017: CALL_OW 45
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: CALL_OW 51
// end ;
22029: GO 21903
22031: POP
22032: POP
// end ;
22033: PPOPN 2
22035: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22036: LD_EXP 39
22040: PUSH
22041: LD_EXP 85
22045: AND
22046: IFFALSE 22268
22048: GO 22050
22050: DISABLE
22051: LD_INT 0
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22059: LD_ADDR_VAR 0 6
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_OWVAR 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 21
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: LD_INT 23
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 69
22112: ST_TO_ADDR
// if not tmp then
22113: LD_VAR 0 6
22117: NOT
22118: IFFALSE 22122
// exit ;
22120: GO 22268
// s1 := rand ( 1 , 4 ) ;
22122: LD_ADDR_VAR 0 2
22126: PUSH
22127: LD_INT 1
22129: PPUSH
22130: LD_INT 4
22132: PPUSH
22133: CALL_OW 12
22137: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22138: LD_ADDR_VAR 0 4
22142: PUSH
22143: LD_VAR 0 6
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: CALL_OW 259
22161: ST_TO_ADDR
// if s1 = 1 then
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 1
22169: EQUAL
22170: IFFALSE 22190
// s2 := rand ( 2 , 4 ) else
22172: LD_ADDR_VAR 0 3
22176: PUSH
22177: LD_INT 2
22179: PPUSH
22180: LD_INT 4
22182: PPUSH
22183: CALL_OW 12
22187: ST_TO_ADDR
22188: GO 22198
// s2 := 1 ;
22190: LD_ADDR_VAR 0 3
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22198: LD_ADDR_VAR 0 5
22202: PUSH
22203: LD_VAR 0 6
22207: PUSH
22208: LD_INT 1
22210: ARRAY
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 259
22221: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22222: LD_VAR 0 6
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_VAR 0 5
22240: PPUSH
22241: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22245: LD_VAR 0 6
22249: PUSH
22250: LD_INT 1
22252: ARRAY
22253: PPUSH
22254: LD_VAR 0 3
22258: PPUSH
22259: LD_VAR 0 4
22263: PPUSH
22264: CALL_OW 237
// end ;
22268: PPOPN 6
22270: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22271: LD_EXP 39
22275: PUSH
22276: LD_EXP 86
22280: AND
22281: IFFALSE 22360
22283: GO 22285
22285: DISABLE
22286: LD_INT 0
22288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_INT 22
22296: PUSH
22297: LD_OWVAR 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 30
22308: PUSH
22309: LD_INT 3
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PPUSH
22320: CALL_OW 69
22324: ST_TO_ADDR
// if not tmp then
22325: LD_VAR 0 1
22329: NOT
22330: IFFALSE 22334
// exit ;
22332: GO 22360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22334: LD_VAR 0 1
22338: PUSH
22339: LD_INT 1
22341: PPUSH
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 12
22351: ARRAY
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 234
// end ;
22360: PPOPN 1
22362: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22363: LD_EXP 39
22367: PUSH
22368: LD_EXP 87
22372: AND
22373: IFFALSE 22485
22375: GO 22377
22377: DISABLE
22378: LD_INT 0
22380: PPUSH
22381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22382: LD_ADDR_VAR 0 2
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_OWVAR 2
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 27
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 30
22414: PUSH
22415: LD_INT 26
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: LD_INT 28
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PPUSH
22442: CALL_OW 69
22446: ST_TO_ADDR
// if not tmp then
22447: LD_VAR 0 2
22451: NOT
22452: IFFALSE 22456
// exit ;
22454: GO 22485
// for i in tmp do
22456: LD_ADDR_VAR 0 1
22460: PUSH
22461: LD_VAR 0 2
22465: PUSH
22466: FOR_IN
22467: IFFALSE 22483
// SetLives ( i , 1 ) ;
22469: LD_VAR 0 1
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL_OW 234
22481: GO 22466
22483: POP
22484: POP
// end ;
22485: PPOPN 2
22487: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22488: LD_EXP 39
22492: PUSH
22493: LD_EXP 88
22497: AND
22498: IFFALSE 22785
22500: GO 22502
22502: DISABLE
22503: LD_INT 0
22505: PPUSH
22506: PPUSH
22507: PPUSH
// begin i := rand ( 1 , 7 ) ;
22508: LD_ADDR_VAR 0 1
22512: PUSH
22513: LD_INT 1
22515: PPUSH
22516: LD_INT 7
22518: PPUSH
22519: CALL_OW 12
22523: ST_TO_ADDR
// case i of 1 :
22524: LD_VAR 0 1
22528: PUSH
22529: LD_INT 1
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22547
22537: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22538: LD_STRING earthquake(getX(game), 0, 32)
22540: PPUSH
22541: CALL_OW 559
22545: GO 22785
22547: LD_INT 2
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22569
22555: POP
// begin ToLua ( displayStucuk(); ) ;
22556: LD_STRING displayStucuk();
22558: PPUSH
22559: CALL_OW 559
// ResetFog ;
22563: CALL_OW 335
// end ; 3 :
22567: GO 22785
22569: LD_INT 3
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22681
22577: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_INT 22
22585: PUSH
22586: LD_OWVAR 2
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 25
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PPUSH
22609: CALL_OW 69
22613: ST_TO_ADDR
// if not tmp then
22614: LD_VAR 0 2
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 22785
// un := tmp [ rand ( 1 , tmp ) ] ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_VAR 0 2
22632: PUSH
22633: LD_INT 1
22635: PPUSH
22636: LD_VAR 0 2
22640: PPUSH
22641: CALL_OW 12
22645: ARRAY
22646: ST_TO_ADDR
// if Crawls ( un ) then
22647: LD_VAR 0 3
22651: PPUSH
22652: CALL_OW 318
22656: IFFALSE 22667
// ComWalk ( un ) ;
22658: LD_VAR 0 3
22662: PPUSH
22663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22667: LD_VAR 0 3
22671: PPUSH
22672: LD_INT 8
22674: PPUSH
22675: CALL_OW 336
// end ; 4 :
22679: GO 22785
22681: LD_INT 4
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22763
22689: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22690: LD_ADDR_VAR 0 2
22694: PUSH
22695: LD_INT 22
22697: PUSH
22698: LD_OWVAR 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 30
22709: PUSH
22710: LD_INT 29
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PPUSH
22721: CALL_OW 69
22725: ST_TO_ADDR
// if not tmp then
22726: LD_VAR 0 2
22730: NOT
22731: IFFALSE 22735
// exit ;
22733: GO 22785
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22735: LD_VAR 0 2
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22748: LD_VAR 0 2
22752: PUSH
22753: LD_INT 1
22755: ARRAY
22756: PPUSH
22757: CALL_OW 65
// end ; 5 .. 7 :
22761: GO 22785
22763: LD_INT 5
22765: DOUBLE
22766: GREATEREQUAL
22767: IFFALSE 22775
22769: LD_INT 7
22771: DOUBLE
22772: LESSEQUAL
22773: IFTRUE 22777
22775: GO 22784
22777: POP
// StreamSibBomb ; end ;
22778: CALL 19022 0 0
22782: GO 22785
22784: POP
// end ;
22785: PPOPN 3
22787: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22788: LD_EXP 39
22792: PUSH
22793: LD_EXP 89
22797: AND
22798: IFFALSE 22954
22800: GO 22802
22802: DISABLE
22803: LD_INT 0
22805: PPUSH
22806: PPUSH
22807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22808: LD_ADDR_VAR 0 2
22812: PUSH
22813: LD_INT 81
22815: PUSH
22816: LD_OWVAR 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 21
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PPUSH
22857: CALL_OW 69
22861: ST_TO_ADDR
// if not tmp then
22862: LD_VAR 0 2
22866: NOT
22867: IFFALSE 22871
// exit ;
22869: GO 22954
// p := 0 ;
22871: LD_ADDR_VAR 0 3
22875: PUSH
22876: LD_INT 0
22878: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22879: LD_INT 35
22881: PPUSH
22882: CALL_OW 67
// p := p + 1 ;
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: LD_VAR 0 3
22895: PUSH
22896: LD_INT 1
22898: PLUS
22899: ST_TO_ADDR
// for i in tmp do
22900: LD_ADDR_VAR 0 1
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: FOR_IN
22911: IFFALSE 22942
// if GetLives ( i ) < 1000 then
22913: LD_VAR 0 1
22917: PPUSH
22918: CALL_OW 256
22922: PUSH
22923: LD_INT 1000
22925: LESS
22926: IFFALSE 22940
// SetLives ( i , 1000 ) ;
22928: LD_VAR 0 1
22932: PPUSH
22933: LD_INT 1000
22935: PPUSH
22936: CALL_OW 234
22940: GO 22910
22942: POP
22943: POP
// until p > 20 ;
22944: LD_VAR 0 3
22948: PUSH
22949: LD_INT 20
22951: GREATER
22952: IFFALSE 22879
// end ;
22954: PPOPN 3
22956: END
// every 0 0$1 trigger StreamModeActive and sTime do
22957: LD_EXP 39
22961: PUSH
22962: LD_EXP 90
22966: AND
22967: IFFALSE 23002
22969: GO 22971
22971: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22972: LD_INT 28
22974: PPUSH
22975: LD_OWVAR 2
22979: PPUSH
22980: LD_INT 2
22982: PPUSH
22983: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22987: LD_INT 30
22989: PPUSH
22990: LD_OWVAR 2
22994: PPUSH
22995: LD_INT 2
22997: PPUSH
22998: CALL_OW 322
// end ;
23002: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23003: LD_EXP 39
23007: PUSH
23008: LD_EXP 91
23012: AND
23013: IFFALSE 23134
23015: GO 23017
23017: DISABLE
23018: LD_INT 0
23020: PPUSH
23021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23022: LD_ADDR_VAR 0 2
23026: PUSH
23027: LD_INT 22
23029: PUSH
23030: LD_OWVAR 2
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 21
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: LD_INT 23
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: PPUSH
23071: CALL_OW 69
23075: ST_TO_ADDR
// if not tmp then
23076: LD_VAR 0 2
23080: NOT
23081: IFFALSE 23085
// exit ;
23083: GO 23134
// for i in tmp do
23085: LD_ADDR_VAR 0 1
23089: PUSH
23090: LD_VAR 0 2
23094: PUSH
23095: FOR_IN
23096: IFFALSE 23132
// begin if Crawls ( i ) then
23098: LD_VAR 0 1
23102: PPUSH
23103: CALL_OW 318
23107: IFFALSE 23118
// ComWalk ( i ) ;
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL_OW 138
// SetClass ( i , 2 ) ;
23118: LD_VAR 0 1
23122: PPUSH
23123: LD_INT 2
23125: PPUSH
23126: CALL_OW 336
// end ;
23130: GO 23095
23132: POP
23133: POP
// end ;
23134: PPOPN 2
23136: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23137: LD_EXP 39
23141: PUSH
23142: LD_EXP 92
23146: AND
23147: IFFALSE 23435
23149: GO 23151
23151: DISABLE
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23157: LD_OWVAR 2
23161: PPUSH
23162: LD_INT 9
23164: PPUSH
23165: LD_INT 1
23167: PPUSH
23168: LD_INT 1
23170: PPUSH
23171: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23175: LD_INT 9
23177: PPUSH
23178: LD_OWVAR 2
23182: PPUSH
23183: CALL_OW 343
// uc_side := 9 ;
23187: LD_ADDR_OWVAR 20
23191: PUSH
23192: LD_INT 9
23194: ST_TO_ADDR
// uc_nation := 2 ;
23195: LD_ADDR_OWVAR 21
23199: PUSH
23200: LD_INT 2
23202: ST_TO_ADDR
// hc_name := Dark Warrior ;
23203: LD_ADDR_OWVAR 26
23207: PUSH
23208: LD_STRING Dark Warrior
23210: ST_TO_ADDR
// hc_gallery :=  ;
23211: LD_ADDR_OWVAR 33
23215: PUSH
23216: LD_STRING 
23218: ST_TO_ADDR
// hc_noskilllimit := true ;
23219: LD_ADDR_OWVAR 76
23223: PUSH
23224: LD_INT 1
23226: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23227: LD_ADDR_OWVAR 31
23231: PUSH
23232: LD_INT 30
23234: PUSH
23235: LD_INT 30
23237: PUSH
23238: LD_INT 30
23240: PUSH
23241: LD_INT 30
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
// un := CreateHuman ;
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: CALL_OW 44
23259: ST_TO_ADDR
// hc_noskilllimit := false ;
23260: LD_ADDR_OWVAR 76
23264: PUSH
23265: LD_INT 0
23267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23268: LD_VAR 0 3
23272: PPUSH
23273: LD_INT 1
23275: PPUSH
23276: CALL_OW 51
// ToLua ( playRanger() ) ;
23280: LD_STRING playRanger()
23282: PPUSH
23283: CALL_OW 559
// p := 0 ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 0
23294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23295: LD_INT 35
23297: PPUSH
23298: CALL_OW 67
// p := p + 1 ;
23302: LD_ADDR_VAR 0 2
23306: PUSH
23307: LD_VAR 0 2
23311: PUSH
23312: LD_INT 1
23314: PLUS
23315: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23316: LD_VAR 0 3
23320: PPUSH
23321: CALL_OW 256
23325: PUSH
23326: LD_INT 1000
23328: LESS
23329: IFFALSE 23343
// SetLives ( un , 1000 ) ;
23331: LD_VAR 0 3
23335: PPUSH
23336: LD_INT 1000
23338: PPUSH
23339: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23343: LD_VAR 0 3
23347: PPUSH
23348: LD_INT 81
23350: PUSH
23351: LD_OWVAR 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 91
23362: PUSH
23363: LD_VAR 0 3
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PPUSH
23380: CALL_OW 69
23384: PPUSH
23385: LD_VAR 0 3
23389: PPUSH
23390: CALL_OW 74
23394: PPUSH
23395: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23399: LD_VAR 0 2
23403: PUSH
23404: LD_INT 80
23406: GREATER
23407: PUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: CALL_OW 301
23417: OR
23418: IFFALSE 23295
// if un then
23420: LD_VAR 0 3
23424: IFFALSE 23435
// RemoveUnit ( un ) ;
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL_OW 64
// end ;
23435: PPOPN 3
23437: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23438: LD_EXP 93
23442: IFFALSE 23558
23444: GO 23446
23446: DISABLE
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
23451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_INT 81
23459: PUSH
23460: LD_OWVAR 2
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 21
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 69
23487: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23488: LD_STRING playComputer()
23490: PPUSH
23491: CALL_OW 559
// if not tmp then
23495: LD_VAR 0 2
23499: NOT
23500: IFFALSE 23504
// exit ;
23502: GO 23558
// for i in tmp do
23504: LD_ADDR_VAR 0 1
23508: PUSH
23509: LD_VAR 0 2
23513: PUSH
23514: FOR_IN
23515: IFFALSE 23556
// for j := 1 to 4 do
23517: LD_ADDR_VAR 0 3
23521: PUSH
23522: DOUBLE
23523: LD_INT 1
23525: DEC
23526: ST_TO_ADDR
23527: LD_INT 4
23529: PUSH
23530: FOR_TO
23531: IFFALSE 23552
// SetSkill ( i , j , 10 ) ;
23533: LD_VAR 0 1
23537: PPUSH
23538: LD_VAR 0 3
23542: PPUSH
23543: LD_INT 10
23545: PPUSH
23546: CALL_OW 237
23550: GO 23530
23552: POP
23553: POP
23554: GO 23514
23556: POP
23557: POP
// end ;
23558: PPOPN 3
23560: END
// every 0 0$1 trigger s30 do var i , tmp ;
23561: LD_EXP 94
23565: IFFALSE 23634
23567: GO 23569
23569: DISABLE
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23574: LD_ADDR_VAR 0 2
23578: PUSH
23579: LD_INT 22
23581: PUSH
23582: LD_OWVAR 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 2
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23634
// for i in tmp do
23605: LD_ADDR_VAR 0 1
23609: PUSH
23610: LD_VAR 0 2
23614: PUSH
23615: FOR_IN
23616: IFFALSE 23632
// SetLives ( i , 300 ) ;
23618: LD_VAR 0 1
23622: PPUSH
23623: LD_INT 300
23625: PPUSH
23626: CALL_OW 234
23630: GO 23615
23632: POP
23633: POP
// end ;
23634: PPOPN 2
23636: END
// every 0 0$1 trigger s60 do var i , tmp ;
23637: LD_EXP 95
23641: IFFALSE 23710
23643: GO 23645
23645: DISABLE
23646: LD_INT 0
23648: PPUSH
23649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23650: LD_ADDR_VAR 0 2
23654: PUSH
23655: LD_INT 22
23657: PUSH
23658: LD_OWVAR 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 69
23671: ST_TO_ADDR
// if not tmp then
23672: LD_VAR 0 2
23676: NOT
23677: IFFALSE 23681
// exit ;
23679: GO 23710
// for i in tmp do
23681: LD_ADDR_VAR 0 1
23685: PUSH
23686: LD_VAR 0 2
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23708
// SetLives ( i , 600 ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 600
23701: PPUSH
23702: CALL_OW 234
23706: GO 23691
23708: POP
23709: POP
// end ;
23710: PPOPN 2
23712: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23713: LD_INT 0
23715: PPUSH
// case cmd of 301 :
23716: LD_VAR 0 1
23720: PUSH
23721: LD_INT 301
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23761
23729: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23730: LD_VAR 0 6
23734: PPUSH
23735: LD_VAR 0 7
23739: PPUSH
23740: LD_VAR 0 8
23744: PPUSH
23745: LD_VAR 0 4
23749: PPUSH
23750: LD_VAR 0 5
23754: PPUSH
23755: CALL 24962 0 5
23759: GO 23882
23761: LD_INT 302
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23806
23769: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23770: LD_VAR 0 6
23774: PPUSH
23775: LD_VAR 0 7
23779: PPUSH
23780: LD_VAR 0 8
23784: PPUSH
23785: LD_VAR 0 9
23789: PPUSH
23790: LD_VAR 0 4
23794: PPUSH
23795: LD_VAR 0 5
23799: PPUSH
23800: CALL 25053 0 6
23804: GO 23882
23806: LD_INT 303
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23851
23814: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23815: LD_VAR 0 6
23819: PPUSH
23820: LD_VAR 0 7
23824: PPUSH
23825: LD_VAR 0 8
23829: PPUSH
23830: LD_VAR 0 9
23834: PPUSH
23835: LD_VAR 0 4
23839: PPUSH
23840: LD_VAR 0 5
23844: PPUSH
23845: CALL 23887 0 6
23849: GO 23882
23851: LD_INT 304
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23881
23859: POP
// hHackTeleport ( unit , x , y ) ; end ;
23860: LD_VAR 0 2
23864: PPUSH
23865: LD_VAR 0 4
23869: PPUSH
23870: LD_VAR 0 5
23874: PPUSH
23875: CALL 25646 0 3
23879: GO 23882
23881: POP
// end ;
23882: LD_VAR 0 12
23886: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23887: LD_INT 0
23889: PPUSH
23890: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23891: LD_VAR 0 1
23895: PUSH
23896: LD_INT 1
23898: LESS
23899: PUSH
23900: LD_VAR 0 1
23904: PUSH
23905: LD_INT 3
23907: GREATER
23908: OR
23909: PUSH
23910: LD_VAR 0 5
23914: PPUSH
23915: LD_VAR 0 6
23919: PPUSH
23920: CALL_OW 428
23924: OR
23925: IFFALSE 23929
// exit ;
23927: GO 24649
// uc_side := your_side ;
23929: LD_ADDR_OWVAR 20
23933: PUSH
23934: LD_OWVAR 2
23938: ST_TO_ADDR
// uc_nation := nation ;
23939: LD_ADDR_OWVAR 21
23943: PUSH
23944: LD_VAR 0 1
23948: ST_TO_ADDR
// bc_level = 1 ;
23949: LD_ADDR_OWVAR 43
23953: PUSH
23954: LD_INT 1
23956: ST_TO_ADDR
// case btype of 1 :
23957: LD_VAR 0 2
23961: PUSH
23962: LD_INT 1
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23981
23970: POP
// bc_type := b_depot ; 2 :
23971: LD_ADDR_OWVAR 42
23975: PUSH
23976: LD_INT 0
23978: ST_TO_ADDR
23979: GO 24593
23981: LD_INT 2
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24000
23989: POP
// bc_type := b_warehouse ; 3 :
23990: LD_ADDR_OWVAR 42
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
23998: GO 24593
24000: LD_INT 3
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24019
24008: POP
// bc_type := b_lab ; 4 .. 9 :
24009: LD_ADDR_OWVAR 42
24013: PUSH
24014: LD_INT 6
24016: ST_TO_ADDR
24017: GO 24593
24019: LD_INT 4
24021: DOUBLE
24022: GREATEREQUAL
24023: IFFALSE 24031
24025: LD_INT 9
24027: DOUBLE
24028: LESSEQUAL
24029: IFTRUE 24033
24031: GO 24085
24033: POP
// begin bc_type := b_lab_half ;
24034: LD_ADDR_OWVAR 42
24038: PUSH
24039: LD_INT 7
24041: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24042: LD_ADDR_OWVAR 44
24046: PUSH
24047: LD_INT 10
24049: PUSH
24050: LD_INT 11
24052: PUSH
24053: LD_INT 12
24055: PUSH
24056: LD_INT 15
24058: PUSH
24059: LD_INT 14
24061: PUSH
24062: LD_INT 13
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: PUSH
24073: LD_VAR 0 2
24077: PUSH
24078: LD_INT 3
24080: MINUS
24081: ARRAY
24082: ST_TO_ADDR
// end ; 10 .. 13 :
24083: GO 24593
24085: LD_INT 10
24087: DOUBLE
24088: GREATEREQUAL
24089: IFFALSE 24097
24091: LD_INT 13
24093: DOUBLE
24094: LESSEQUAL
24095: IFTRUE 24099
24097: GO 24176
24099: POP
// begin bc_type := b_lab_full ;
24100: LD_ADDR_OWVAR 42
24104: PUSH
24105: LD_INT 8
24107: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24108: LD_ADDR_OWVAR 44
24112: PUSH
24113: LD_INT 10
24115: PUSH
24116: LD_INT 12
24118: PUSH
24119: LD_INT 14
24121: PUSH
24122: LD_INT 13
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: LD_VAR 0 2
24135: PUSH
24136: LD_INT 9
24138: MINUS
24139: ARRAY
24140: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24141: LD_ADDR_OWVAR 45
24145: PUSH
24146: LD_INT 11
24148: PUSH
24149: LD_INT 15
24151: PUSH
24152: LD_INT 12
24154: PUSH
24155: LD_INT 15
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: PUSH
24164: LD_VAR 0 2
24168: PUSH
24169: LD_INT 9
24171: MINUS
24172: ARRAY
24173: ST_TO_ADDR
// end ; 14 :
24174: GO 24593
24176: LD_INT 14
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24195
24184: POP
// bc_type := b_workshop ; 15 :
24185: LD_ADDR_OWVAR 42
24189: PUSH
24190: LD_INT 2
24192: ST_TO_ADDR
24193: GO 24593
24195: LD_INT 15
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24214
24203: POP
// bc_type := b_factory ; 16 :
24204: LD_ADDR_OWVAR 42
24208: PUSH
24209: LD_INT 3
24211: ST_TO_ADDR
24212: GO 24593
24214: LD_INT 16
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24233
24222: POP
// bc_type := b_ext_gun ; 17 :
24223: LD_ADDR_OWVAR 42
24227: PUSH
24228: LD_INT 17
24230: ST_TO_ADDR
24231: GO 24593
24233: LD_INT 17
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24269
24241: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24242: LD_ADDR_OWVAR 42
24246: PUSH
24247: LD_INT 19
24249: PUSH
24250: LD_INT 23
24252: PUSH
24253: LD_INT 19
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: LD_VAR 0 1
24265: ARRAY
24266: ST_TO_ADDR
24267: GO 24593
24269: LD_INT 18
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24288
24277: POP
// bc_type := b_ext_radar ; 19 :
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 20
24285: ST_TO_ADDR
24286: GO 24593
24288: LD_INT 19
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24307
24296: POP
// bc_type := b_ext_radio ; 20 :
24297: LD_ADDR_OWVAR 42
24301: PUSH
24302: LD_INT 22
24304: ST_TO_ADDR
24305: GO 24593
24307: LD_INT 20
24309: DOUBLE
24310: EQUAL
24311: IFTRUE 24315
24313: GO 24326
24315: POP
// bc_type := b_ext_siberium ; 21 :
24316: LD_ADDR_OWVAR 42
24320: PUSH
24321: LD_INT 21
24323: ST_TO_ADDR
24324: GO 24593
24326: LD_INT 21
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24345
24334: POP
// bc_type := b_ext_computer ; 22 :
24335: LD_ADDR_OWVAR 42
24339: PUSH
24340: LD_INT 24
24342: ST_TO_ADDR
24343: GO 24593
24345: LD_INT 22
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24364
24353: POP
// bc_type := b_ext_track ; 23 :
24354: LD_ADDR_OWVAR 42
24358: PUSH
24359: LD_INT 16
24361: ST_TO_ADDR
24362: GO 24593
24364: LD_INT 23
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_ext_laser ; 24 :
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 25
24380: ST_TO_ADDR
24381: GO 24593
24383: LD_INT 24
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24402
24391: POP
// bc_type := b_control_tower ; 25 :
24392: LD_ADDR_OWVAR 42
24396: PUSH
24397: LD_INT 36
24399: ST_TO_ADDR
24400: GO 24593
24402: LD_INT 25
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24421
24410: POP
// bc_type := b_breastwork ; 26 :
24411: LD_ADDR_OWVAR 42
24415: PUSH
24416: LD_INT 31
24418: ST_TO_ADDR
24419: GO 24593
24421: LD_INT 26
24423: DOUBLE
24424: EQUAL
24425: IFTRUE 24429
24427: GO 24440
24429: POP
// bc_type := b_bunker ; 27 :
24430: LD_ADDR_OWVAR 42
24434: PUSH
24435: LD_INT 32
24437: ST_TO_ADDR
24438: GO 24593
24440: LD_INT 27
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24459
24448: POP
// bc_type := b_turret ; 28 :
24449: LD_ADDR_OWVAR 42
24453: PUSH
24454: LD_INT 33
24456: ST_TO_ADDR
24457: GO 24593
24459: LD_INT 28
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24478
24467: POP
// bc_type := b_armoury ; 29 :
24468: LD_ADDR_OWVAR 42
24472: PUSH
24473: LD_INT 4
24475: ST_TO_ADDR
24476: GO 24593
24478: LD_INT 29
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24497
24486: POP
// bc_type := b_barracks ; 30 :
24487: LD_ADDR_OWVAR 42
24491: PUSH
24492: LD_INT 5
24494: ST_TO_ADDR
24495: GO 24593
24497: LD_INT 30
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24516
24505: POP
// bc_type := b_solar_power ; 31 :
24506: LD_ADDR_OWVAR 42
24510: PUSH
24511: LD_INT 27
24513: ST_TO_ADDR
24514: GO 24593
24516: LD_INT 31
24518: DOUBLE
24519: EQUAL
24520: IFTRUE 24524
24522: GO 24535
24524: POP
// bc_type := b_oil_power ; 32 :
24525: LD_ADDR_OWVAR 42
24529: PUSH
24530: LD_INT 26
24532: ST_TO_ADDR
24533: GO 24593
24535: LD_INT 32
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24554
24543: POP
// bc_type := b_siberite_power ; 33 :
24544: LD_ADDR_OWVAR 42
24548: PUSH
24549: LD_INT 28
24551: ST_TO_ADDR
24552: GO 24593
24554: LD_INT 33
24556: DOUBLE
24557: EQUAL
24558: IFTRUE 24562
24560: GO 24573
24562: POP
// bc_type := b_oil_mine ; 34 :
24563: LD_ADDR_OWVAR 42
24567: PUSH
24568: LD_INT 29
24570: ST_TO_ADDR
24571: GO 24593
24573: LD_INT 34
24575: DOUBLE
24576: EQUAL
24577: IFTRUE 24581
24579: GO 24592
24581: POP
// bc_type := b_siberite_mine ; end ;
24582: LD_ADDR_OWVAR 42
24586: PUSH
24587: LD_INT 30
24589: ST_TO_ADDR
24590: GO 24593
24592: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24593: LD_ADDR_VAR 0 8
24597: PUSH
24598: LD_VAR 0 5
24602: PPUSH
24603: LD_VAR 0 6
24607: PPUSH
24608: LD_VAR 0 3
24612: PPUSH
24613: CALL_OW 47
24617: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24618: LD_OWVAR 42
24622: PUSH
24623: LD_INT 32
24625: PUSH
24626: LD_INT 33
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: IN
24633: IFFALSE 24649
// PlaceWeaponTurret ( b , weapon ) ;
24635: LD_VAR 0 8
24639: PPUSH
24640: LD_VAR 0 4
24644: PPUSH
24645: CALL_OW 431
// end ;
24649: LD_VAR 0 7
24653: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24654: LD_INT 0
24656: PPUSH
24657: PPUSH
24658: PPUSH
24659: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24660: LD_ADDR_VAR 0 4
24664: PUSH
24665: LD_INT 22
24667: PUSH
24668: LD_OWVAR 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 30
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: ST_TO_ADDR
// if not tmp then
24714: LD_VAR 0 4
24718: NOT
24719: IFFALSE 24723
// exit ;
24721: GO 24782
// for i in tmp do
24723: LD_ADDR_VAR 0 2
24727: PUSH
24728: LD_VAR 0 4
24732: PUSH
24733: FOR_IN
24734: IFFALSE 24780
// for j = 1 to 3 do
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: DOUBLE
24742: LD_INT 1
24744: DEC
24745: ST_TO_ADDR
24746: LD_INT 3
24748: PUSH
24749: FOR_TO
24750: IFFALSE 24776
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24752: LD_VAR 0 2
24756: PPUSH
24757: CALL_OW 274
24761: PPUSH
24762: LD_VAR 0 3
24766: PPUSH
24767: LD_INT 99999
24769: PPUSH
24770: CALL_OW 277
24774: GO 24749
24776: POP
24777: POP
24778: GO 24733
24780: POP
24781: POP
// end ;
24782: LD_VAR 0 1
24786: RET
// export function hHackSetLevel10 ; var i , j ; begin
24787: LD_INT 0
24789: PPUSH
24790: PPUSH
24791: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24792: LD_ADDR_VAR 0 2
24796: PUSH
24797: LD_INT 21
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 69
24811: PUSH
24812: FOR_IN
24813: IFFALSE 24865
// if IsSelected ( i ) then
24815: LD_VAR 0 2
24819: PPUSH
24820: CALL_OW 306
24824: IFFALSE 24863
// begin for j := 1 to 4 do
24826: LD_ADDR_VAR 0 3
24830: PUSH
24831: DOUBLE
24832: LD_INT 1
24834: DEC
24835: ST_TO_ADDR
24836: LD_INT 4
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24861
// SetSkill ( i , j , 10 ) ;
24842: LD_VAR 0 2
24846: PPUSH
24847: LD_VAR 0 3
24851: PPUSH
24852: LD_INT 10
24854: PPUSH
24855: CALL_OW 237
24859: GO 24839
24861: POP
24862: POP
// end ;
24863: GO 24812
24865: POP
24866: POP
// end ;
24867: LD_VAR 0 1
24871: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_OWVAR 2
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 21
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PPUSH
24908: CALL_OW 69
24912: PUSH
24913: FOR_IN
24914: IFFALSE 24955
// begin for j := 1 to 4 do
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: DOUBLE
24922: LD_INT 1
24924: DEC
24925: ST_TO_ADDR
24926: LD_INT 4
24928: PUSH
24929: FOR_TO
24930: IFFALSE 24951
// SetSkill ( i , j , 10 ) ;
24932: LD_VAR 0 2
24936: PPUSH
24937: LD_VAR 0 3
24941: PPUSH
24942: LD_INT 10
24944: PPUSH
24945: CALL_OW 237
24949: GO 24929
24951: POP
24952: POP
// end ;
24953: GO 24913
24955: POP
24956: POP
// end ;
24957: LD_VAR 0 1
24961: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24962: LD_INT 0
24964: PPUSH
// uc_side := your_side ;
24965: LD_ADDR_OWVAR 20
24969: PUSH
24970: LD_OWVAR 2
24974: ST_TO_ADDR
// uc_nation := nation ;
24975: LD_ADDR_OWVAR 21
24979: PUSH
24980: LD_VAR 0 1
24984: ST_TO_ADDR
// InitHc ;
24985: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24989: LD_INT 0
24991: PPUSH
24992: LD_VAR 0 2
24996: PPUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25006: LD_VAR 0 4
25010: PPUSH
25011: LD_VAR 0 5
25015: PPUSH
25016: CALL_OW 428
25020: PUSH
25021: LD_INT 0
25023: EQUAL
25024: IFFALSE 25048
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25026: CALL_OW 44
25030: PPUSH
25031: LD_VAR 0 4
25035: PPUSH
25036: LD_VAR 0 5
25040: PPUSH
25041: LD_INT 1
25043: PPUSH
25044: CALL_OW 48
// end ;
25048: LD_VAR 0 6
25052: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25053: LD_INT 0
25055: PPUSH
25056: PPUSH
// uc_side := your_side ;
25057: LD_ADDR_OWVAR 20
25061: PUSH
25062: LD_OWVAR 2
25066: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25067: LD_VAR 0 1
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: LD_INT 4
25083: PUSH
25084: LD_INT 5
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: IN
25094: IFFALSE 25106
// uc_nation := nation_american else
25096: LD_ADDR_OWVAR 21
25100: PUSH
25101: LD_INT 1
25103: ST_TO_ADDR
25104: GO 25149
// if chassis in [ 11 , 12 , 13 , 14 ] then
25106: LD_VAR 0 1
25110: PUSH
25111: LD_INT 11
25113: PUSH
25114: LD_INT 12
25116: PUSH
25117: LD_INT 13
25119: PUSH
25120: LD_INT 14
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: IN
25129: IFFALSE 25141
// uc_nation := nation_arabian else
25131: LD_ADDR_OWVAR 21
25135: PUSH
25136: LD_INT 2
25138: ST_TO_ADDR
25139: GO 25149
// uc_nation := nation_russian ;
25141: LD_ADDR_OWVAR 21
25145: PUSH
25146: LD_INT 3
25148: ST_TO_ADDR
// vc_chassis := chassis ;
25149: LD_ADDR_OWVAR 37
25153: PUSH
25154: LD_VAR 0 1
25158: ST_TO_ADDR
// vc_engine := engine ;
25159: LD_ADDR_OWVAR 39
25163: PUSH
25164: LD_VAR 0 2
25168: ST_TO_ADDR
// vc_control := control ;
25169: LD_ADDR_OWVAR 38
25173: PUSH
25174: LD_VAR 0 3
25178: ST_TO_ADDR
// vc_weapon := weapon ;
25179: LD_ADDR_OWVAR 40
25183: PUSH
25184: LD_VAR 0 4
25188: ST_TO_ADDR
// un := CreateVehicle ;
25189: LD_ADDR_VAR 0 8
25193: PUSH
25194: CALL_OW 45
25198: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25199: LD_VAR 0 8
25203: PPUSH
25204: LD_INT 0
25206: PPUSH
25207: LD_INT 5
25209: PPUSH
25210: CALL_OW 12
25214: PPUSH
25215: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25219: LD_VAR 0 8
25223: PPUSH
25224: LD_VAR 0 5
25228: PPUSH
25229: LD_VAR 0 6
25233: PPUSH
25234: LD_INT 1
25236: PPUSH
25237: CALL_OW 48
// end ;
25241: LD_VAR 0 7
25245: RET
// export hInvincible ; every 1 do
25246: GO 25248
25248: DISABLE
// hInvincible := [ ] ;
25249: LD_ADDR_EXP 96
25253: PUSH
25254: EMPTY
25255: ST_TO_ADDR
25256: END
// every 10 do var i ;
25257: GO 25259
25259: DISABLE
25260: LD_INT 0
25262: PPUSH
// begin enable ;
25263: ENABLE
// if not hInvincible then
25264: LD_EXP 96
25268: NOT
25269: IFFALSE 25273
// exit ;
25271: GO 25317
// for i in hInvincible do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: LD_EXP 96
25282: PUSH
25283: FOR_IN
25284: IFFALSE 25315
// if GetLives ( i ) < 1000 then
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 256
25295: PUSH
25296: LD_INT 1000
25298: LESS
25299: IFFALSE 25313
// SetLives ( i , 1000 ) ;
25301: LD_VAR 0 1
25305: PPUSH
25306: LD_INT 1000
25308: PPUSH
25309: CALL_OW 234
25313: GO 25283
25315: POP
25316: POP
// end ;
25317: PPOPN 1
25319: END
// export function hHackInvincible ; var i ; begin
25320: LD_INT 0
25322: PPUSH
25323: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25324: LD_ADDR_VAR 0 2
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 21
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 21
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: PUSH
25362: FOR_IN
25363: IFFALSE 25424
// if IsSelected ( i ) then
25365: LD_VAR 0 2
25369: PPUSH
25370: CALL_OW 306
25374: IFFALSE 25422
// begin if i in hInvincible then
25376: LD_VAR 0 2
25380: PUSH
25381: LD_EXP 96
25385: IN
25386: IFFALSE 25406
// hInvincible := hInvincible diff i else
25388: LD_ADDR_EXP 96
25392: PUSH
25393: LD_EXP 96
25397: PUSH
25398: LD_VAR 0 2
25402: DIFF
25403: ST_TO_ADDR
25404: GO 25422
// hInvincible := hInvincible union i ;
25406: LD_ADDR_EXP 96
25410: PUSH
25411: LD_EXP 96
25415: PUSH
25416: LD_VAR 0 2
25420: UNION
25421: ST_TO_ADDR
// end ;
25422: GO 25362
25424: POP
25425: POP
// end ;
25426: LD_VAR 0 1
25430: RET
// export function hHackInvisible ; var i , j ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
25435: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25436: LD_ADDR_VAR 0 2
25440: PUSH
25441: LD_INT 21
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: PUSH
25456: FOR_IN
25457: IFFALSE 25481
// if IsSelected ( i ) then
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 306
25468: IFFALSE 25479
// ComForceInvisible ( i ) ;
25470: LD_VAR 0 2
25474: PPUSH
25475: CALL_OW 496
25479: GO 25456
25481: POP
25482: POP
// end ;
25483: LD_VAR 0 1
25487: RET
// export function hHackChangeYourSide ; begin
25488: LD_INT 0
25490: PPUSH
// if your_side = 8 then
25491: LD_OWVAR 2
25495: PUSH
25496: LD_INT 8
25498: EQUAL
25499: IFFALSE 25511
// your_side := 0 else
25501: LD_ADDR_OWVAR 2
25505: PUSH
25506: LD_INT 0
25508: ST_TO_ADDR
25509: GO 25525
// your_side := your_side + 1 ;
25511: LD_ADDR_OWVAR 2
25515: PUSH
25516: LD_OWVAR 2
25520: PUSH
25521: LD_INT 1
25523: PLUS
25524: ST_TO_ADDR
// end ;
25525: LD_VAR 0 1
25529: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25530: LD_INT 0
25532: PPUSH
25533: PPUSH
25534: PPUSH
// for i in all_units do
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_OWVAR 3
25544: PUSH
25545: FOR_IN
25546: IFFALSE 25624
// if IsSelected ( i ) then
25548: LD_VAR 0 2
25552: PPUSH
25553: CALL_OW 306
25557: IFFALSE 25622
// begin j := GetSide ( i ) ;
25559: LD_ADDR_VAR 0 3
25563: PUSH
25564: LD_VAR 0 2
25568: PPUSH
25569: CALL_OW 255
25573: ST_TO_ADDR
// if j = 8 then
25574: LD_VAR 0 3
25578: PUSH
25579: LD_INT 8
25581: EQUAL
25582: IFFALSE 25594
// j := 0 else
25584: LD_ADDR_VAR 0 3
25588: PUSH
25589: LD_INT 0
25591: ST_TO_ADDR
25592: GO 25608
// j := j + 1 ;
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_VAR 0 3
25603: PUSH
25604: LD_INT 1
25606: PLUS
25607: ST_TO_ADDR
// SetSide ( i , j ) ;
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_VAR 0 3
25617: PPUSH
25618: CALL_OW 235
// end ;
25622: GO 25545
25624: POP
25625: POP
// end ;
25626: LD_VAR 0 1
25630: RET
// export function hHackFog ; begin
25631: LD_INT 0
25633: PPUSH
// FogOff ( true ) ;
25634: LD_INT 1
25636: PPUSH
25637: CALL_OW 344
// end ;
25641: LD_VAR 0 1
25645: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25646: LD_INT 0
25648: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_VAR 0 2
25658: PPUSH
25659: LD_VAR 0 3
25663: PPUSH
25664: LD_INT 1
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: CALL_OW 483
// CenterOnXY ( x , y ) ;
25674: LD_VAR 0 2
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: CALL_OW 84
// end ;
25688: LD_VAR 0 4
25692: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25693: LD_INT 0
25695: PPUSH
25696: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25697: LD_VAR 0 1
25701: NOT
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: CALL_OW 488
25717: NOT
25718: OR
25719: PUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: CALL_OW 266
25729: PUSH
25730: LD_INT 3
25732: NONEQUAL
25733: PUSH
25734: LD_VAR 0 1
25738: PPUSH
25739: CALL_OW 247
25743: PUSH
25744: LD_INT 1
25746: EQUAL
25747: NOT
25748: AND
25749: OR
25750: IFFALSE 25754
// exit ;
25752: GO 25903
// if GetType ( factory ) = unit_human then
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 247
25763: PUSH
25764: LD_INT 1
25766: EQUAL
25767: IFFALSE 25784
// factory := IsInUnit ( factory ) ;
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 310
25783: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 266
25793: PUSH
25794: LD_INT 3
25796: NONEQUAL
25797: IFFALSE 25801
// exit ;
25799: GO 25903
// if HexInfo ( x , y ) = factory then
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: CALL_OW 428
25815: PUSH
25816: LD_VAR 0 1
25820: EQUAL
25821: IFFALSE 25848
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25823: LD_ADDR_EXP 97
25827: PUSH
25828: LD_EXP 97
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: LD_INT 0
25840: PPUSH
25841: CALL_OW 1
25845: ST_TO_ADDR
25846: GO 25899
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25848: LD_ADDR_EXP 97
25852: PUSH
25853: LD_EXP 97
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_VAR 0 1
25867: PPUSH
25868: CALL_OW 255
25872: PUSH
25873: LD_VAR 0 1
25877: PUSH
25878: LD_VAR 0 2
25882: PUSH
25883: LD_VAR 0 3
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 1
25898: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25899: CALL 25908 0 0
// end ;
25903: LD_VAR 0 4
25907: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
25912: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25913: LD_STRING resetFactoryWaypoint();
25915: PPUSH
25916: CALL_OW 559
// if factoryWaypoints then
25920: LD_EXP 97
25924: IFFALSE 26050
// begin list := PrepareArray ( factoryWaypoints ) ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_EXP 97
25935: PPUSH
25936: CALL 72482 0 1
25940: ST_TO_ADDR
// for i := 1 to list do
25941: LD_ADDR_VAR 0 2
25945: PUSH
25946: DOUBLE
25947: LD_INT 1
25949: DEC
25950: ST_TO_ADDR
25951: LD_VAR 0 3
25955: PUSH
25956: FOR_TO
25957: IFFALSE 26048
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25959: LD_STRING setFactoryWaypointXY(
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_VAR 0 2
25971: ARRAY
25972: PUSH
25973: LD_INT 1
25975: ARRAY
25976: STR
25977: PUSH
25978: LD_STRING ,
25980: STR
25981: PUSH
25982: LD_VAR 0 3
25986: PUSH
25987: LD_VAR 0 2
25991: ARRAY
25992: PUSH
25993: LD_INT 2
25995: ARRAY
25996: STR
25997: PUSH
25998: LD_STRING ,
26000: STR
26001: PUSH
26002: LD_VAR 0 3
26006: PUSH
26007: LD_VAR 0 2
26011: ARRAY
26012: PUSH
26013: LD_INT 3
26015: ARRAY
26016: STR
26017: PUSH
26018: LD_STRING ,
26020: STR
26021: PUSH
26022: LD_VAR 0 3
26026: PUSH
26027: LD_VAR 0 2
26031: ARRAY
26032: PUSH
26033: LD_INT 4
26035: ARRAY
26036: STR
26037: PUSH
26038: LD_STRING )
26040: STR
26041: PPUSH
26042: CALL_OW 559
26046: GO 25956
26048: POP
26049: POP
// end ; end ;
26050: LD_VAR 0 1
26054: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26055: LD_INT 0
26057: PPUSH
// if HexInfo ( x , y ) = warehouse then
26058: LD_VAR 0 2
26062: PPUSH
26063: LD_VAR 0 3
26067: PPUSH
26068: CALL_OW 428
26072: PUSH
26073: LD_VAR 0 1
26077: EQUAL
26078: IFFALSE 26105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26080: LD_ADDR_EXP 98
26084: PUSH
26085: LD_EXP 98
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 1
26102: ST_TO_ADDR
26103: GO 26156
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26105: LD_ADDR_EXP 98
26109: PUSH
26110: LD_EXP 98
26114: PPUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 255
26129: PUSH
26130: LD_VAR 0 1
26134: PUSH
26135: LD_VAR 0 2
26139: PUSH
26140: LD_VAR 0 3
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: PPUSH
26151: CALL_OW 1
26155: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26156: CALL 26165 0 0
// end ;
26160: LD_VAR 0 4
26164: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26165: LD_INT 0
26167: PPUSH
26168: PPUSH
26169: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26170: LD_STRING resetWarehouseGatheringPoints();
26172: PPUSH
26173: CALL_OW 559
// if warehouseGatheringPoints then
26177: LD_EXP 98
26181: IFFALSE 26307
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26183: LD_ADDR_VAR 0 3
26187: PUSH
26188: LD_EXP 98
26192: PPUSH
26193: CALL 72482 0 1
26197: ST_TO_ADDR
// for i := 1 to list do
26198: LD_ADDR_VAR 0 2
26202: PUSH
26203: DOUBLE
26204: LD_INT 1
26206: DEC
26207: ST_TO_ADDR
26208: LD_VAR 0 3
26212: PUSH
26213: FOR_TO
26214: IFFALSE 26305
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26216: LD_STRING setWarehouseGatheringPointXY(
26218: PUSH
26219: LD_VAR 0 3
26223: PUSH
26224: LD_VAR 0 2
26228: ARRAY
26229: PUSH
26230: LD_INT 1
26232: ARRAY
26233: STR
26234: PUSH
26235: LD_STRING ,
26237: STR
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 2
26248: ARRAY
26249: PUSH
26250: LD_INT 2
26252: ARRAY
26253: STR
26254: PUSH
26255: LD_STRING ,
26257: STR
26258: PUSH
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 2
26268: ARRAY
26269: PUSH
26270: LD_INT 3
26272: ARRAY
26273: STR
26274: PUSH
26275: LD_STRING ,
26277: STR
26278: PUSH
26279: LD_VAR 0 3
26283: PUSH
26284: LD_VAR 0 2
26288: ARRAY
26289: PUSH
26290: LD_INT 4
26292: ARRAY
26293: STR
26294: PUSH
26295: LD_STRING )
26297: STR
26298: PPUSH
26299: CALL_OW 559
26303: GO 26213
26305: POP
26306: POP
// end ; end ;
26307: LD_VAR 0 1
26311: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26312: LD_EXP 98
26316: IFFALSE 27003
26318: GO 26320
26320: DISABLE
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
26330: PPUSH
26331: PPUSH
// begin enable ;
26332: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26333: LD_ADDR_VAR 0 3
26337: PUSH
26338: LD_EXP 98
26342: PPUSH
26343: CALL 72482 0 1
26347: ST_TO_ADDR
// if not list then
26348: LD_VAR 0 3
26352: NOT
26353: IFFALSE 26357
// exit ;
26355: GO 27003
// for i := 1 to list do
26357: LD_ADDR_VAR 0 1
26361: PUSH
26362: DOUBLE
26363: LD_INT 1
26365: DEC
26366: ST_TO_ADDR
26367: LD_VAR 0 3
26371: PUSH
26372: FOR_TO
26373: IFFALSE 27001
// begin depot := list [ i ] [ 2 ] ;
26375: LD_ADDR_VAR 0 8
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_VAR 0 1
26389: ARRAY
26390: PUSH
26391: LD_INT 2
26393: ARRAY
26394: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26395: LD_ADDR_VAR 0 5
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 1
26409: ARRAY
26410: PUSH
26411: LD_INT 1
26413: ARRAY
26414: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26415: LD_VAR 0 8
26419: PPUSH
26420: CALL_OW 301
26424: PUSH
26425: LD_VAR 0 5
26429: PUSH
26430: LD_VAR 0 8
26434: PPUSH
26435: CALL_OW 255
26439: NONEQUAL
26440: OR
26441: IFFALSE 26470
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26443: LD_ADDR_EXP 98
26447: PUSH
26448: LD_EXP 98
26452: PPUSH
26453: LD_VAR 0 8
26457: PPUSH
26458: LD_INT 0
26460: PPUSH
26461: CALL_OW 1
26465: ST_TO_ADDR
// exit ;
26466: POP
26467: POP
26468: GO 27003
// end ; x := list [ i ] [ 3 ] ;
26470: LD_ADDR_VAR 0 6
26474: PUSH
26475: LD_VAR 0 3
26479: PUSH
26480: LD_VAR 0 1
26484: ARRAY
26485: PUSH
26486: LD_INT 3
26488: ARRAY
26489: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26490: LD_ADDR_VAR 0 7
26494: PUSH
26495: LD_VAR 0 3
26499: PUSH
26500: LD_VAR 0 1
26504: ARRAY
26505: PUSH
26506: LD_INT 4
26508: ARRAY
26509: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26510: LD_ADDR_VAR 0 9
26514: PUSH
26515: LD_VAR 0 6
26519: PPUSH
26520: LD_VAR 0 7
26524: PPUSH
26525: LD_INT 16
26527: PPUSH
26528: CALL 71066 0 3
26532: ST_TO_ADDR
// if not cratesNearbyPoint then
26533: LD_VAR 0 9
26537: NOT
26538: IFFALSE 26544
// exit ;
26540: POP
26541: POP
26542: GO 27003
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26544: LD_ADDR_VAR 0 4
26548: PUSH
26549: LD_INT 22
26551: PUSH
26552: LD_VAR 0 5
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: PUSH
26564: LD_INT 60
26566: PUSH
26567: EMPTY
26568: LIST
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 91
26576: PUSH
26577: LD_VAR 0 8
26581: PUSH
26582: LD_INT 6
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: PUSH
26593: LD_INT 25
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 25
26605: PUSH
26606: LD_INT 16
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: PUSH
26629: LD_VAR 0 8
26633: PPUSH
26634: CALL_OW 313
26638: PPUSH
26639: LD_INT 3
26641: PUSH
26642: LD_INT 60
26644: PUSH
26645: EMPTY
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: LD_INT 25
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 25
26667: PUSH
26668: LD_INT 16
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PPUSH
26684: CALL_OW 72
26688: UNION
26689: ST_TO_ADDR
// if tmp then
26690: LD_VAR 0 4
26694: IFFALSE 26774
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26696: LD_ADDR_VAR 0 4
26700: PUSH
26701: LD_VAR 0 4
26705: PPUSH
26706: LD_INT 3
26708: PPUSH
26709: CALL 69033 0 2
26713: ST_TO_ADDR
// for j in tmp do
26714: LD_ADDR_VAR 0 2
26718: PUSH
26719: LD_VAR 0 4
26723: PUSH
26724: FOR_IN
26725: IFFALSE 26768
// begin if IsInUnit ( j ) then
26727: LD_VAR 0 2
26731: PPUSH
26732: CALL_OW 310
26736: IFFALSE 26747
// ComExit ( j ) ;
26738: LD_VAR 0 2
26742: PPUSH
26743: CALL 69116 0 1
// AddComCollect ( j , x , y ) ;
26747: LD_VAR 0 2
26751: PPUSH
26752: LD_VAR 0 6
26756: PPUSH
26757: LD_VAR 0 7
26761: PPUSH
26762: CALL_OW 177
// end ;
26766: GO 26724
26768: POP
26769: POP
// exit ;
26770: POP
26771: POP
26772: GO 27003
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26774: LD_ADDR_VAR 0 4
26778: PUSH
26779: LD_INT 22
26781: PUSH
26782: LD_VAR 0 5
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 91
26793: PUSH
26794: LD_VAR 0 8
26798: PUSH
26799: LD_INT 8
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 34
26812: PUSH
26813: LD_INT 12
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 34
26822: PUSH
26823: LD_INT 51
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 34
26832: PUSH
26833: LD_INT 32
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 34
26842: PUSH
26843: LD_EXP 22
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: PPUSH
26864: CALL_OW 69
26868: ST_TO_ADDR
// if tmp then
26869: LD_VAR 0 4
26873: IFFALSE 26999
// begin for j in tmp do
26875: LD_ADDR_VAR 0 2
26879: PUSH
26880: LD_VAR 0 4
26884: PUSH
26885: FOR_IN
26886: IFFALSE 26997
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26888: LD_VAR 0 2
26892: PPUSH
26893: CALL_OW 262
26897: PUSH
26898: LD_INT 3
26900: EQUAL
26901: PUSH
26902: LD_VAR 0 2
26906: PPUSH
26907: CALL_OW 261
26911: PUSH
26912: LD_INT 20
26914: GREATER
26915: OR
26916: PUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: CALL_OW 314
26926: NOT
26927: AND
26928: PUSH
26929: LD_VAR 0 2
26933: PPUSH
26934: CALL_OW 263
26938: PUSH
26939: LD_INT 1
26941: NONEQUAL
26942: PUSH
26943: LD_VAR 0 2
26947: PPUSH
26948: CALL_OW 311
26952: OR
26953: AND
26954: IFFALSE 26995
// begin ComCollect ( j , x , y ) ;
26956: LD_VAR 0 2
26960: PPUSH
26961: LD_VAR 0 6
26965: PPUSH
26966: LD_VAR 0 7
26970: PPUSH
26971: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26975: LD_VAR 0 2
26979: PPUSH
26980: LD_VAR 0 8
26984: PPUSH
26985: CALL_OW 172
// exit ;
26989: POP
26990: POP
26991: POP
26992: POP
26993: GO 27003
// end ;
26995: GO 26885
26997: POP
26998: POP
// end ; end ;
26999: GO 26372
27001: POP
27002: POP
// end ; end_of_file
27003: PPOPN 9
27005: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
27010: PPUSH
27011: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 264
27021: PUSH
27022: LD_EXP 25
27026: EQUAL
27027: IFFALSE 27099
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27029: LD_INT 68
27031: PPUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL_OW 255
27041: PPUSH
27042: CALL_OW 321
27046: PUSH
27047: LD_INT 2
27049: EQUAL
27050: IFFALSE 27062
// eff := 70 else
27052: LD_ADDR_VAR 0 4
27056: PUSH
27057: LD_INT 70
27059: ST_TO_ADDR
27060: GO 27070
// eff := 30 ;
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: LD_INT 30
27069: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 250
27079: PPUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 251
27089: PPUSH
27090: LD_VAR 0 4
27094: PPUSH
27095: CALL_OW 495
// end ; end ;
27099: LD_VAR 0 2
27103: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27104: LD_INT 0
27106: PPUSH
// end ;
27107: LD_VAR 0 4
27111: RET
// export function SOS_Command ( cmd ) ; begin
27112: LD_INT 0
27114: PPUSH
// end ;
27115: LD_VAR 0 2
27119: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27120: LD_INT 0
27122: PPUSH
// end ;
27123: LD_VAR 0 6
27127: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
// if not vehicle or not factory then
27132: LD_VAR 0 1
27136: NOT
27137: PUSH
27138: LD_VAR 0 2
27142: NOT
27143: OR
27144: IFFALSE 27148
// exit ;
27146: GO 27379
// if factoryWaypoints >= factory then
27148: LD_EXP 97
27152: PUSH
27153: LD_VAR 0 2
27157: GREATEREQUAL
27158: IFFALSE 27379
// if factoryWaypoints [ factory ] then
27160: LD_EXP 97
27164: PUSH
27165: LD_VAR 0 2
27169: ARRAY
27170: IFFALSE 27379
// begin if GetControl ( vehicle ) = control_manual then
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 263
27181: PUSH
27182: LD_INT 1
27184: EQUAL
27185: IFFALSE 27266
// begin driver := IsDrivenBy ( vehicle ) ;
27187: LD_ADDR_VAR 0 4
27191: PUSH
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 311
27201: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27202: LD_VAR 0 4
27206: PPUSH
27207: LD_EXP 97
27211: PUSH
27212: LD_VAR 0 2
27216: ARRAY
27217: PUSH
27218: LD_INT 3
27220: ARRAY
27221: PPUSH
27222: LD_EXP 97
27226: PUSH
27227: LD_VAR 0 2
27231: ARRAY
27232: PUSH
27233: LD_INT 4
27235: ARRAY
27236: PPUSH
27237: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27241: LD_VAR 0 4
27245: PPUSH
27246: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27250: LD_VAR 0 4
27254: PPUSH
27255: LD_VAR 0 2
27259: PPUSH
27260: CALL_OW 180
// end else
27264: GO 27379
// if GetControl ( vehicle ) = control_remote then
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL_OW 263
27275: PUSH
27276: LD_INT 2
27278: EQUAL
27279: IFFALSE 27340
// begin wait ( 0 0$2 ) ;
27281: LD_INT 70
27283: PPUSH
27284: CALL_OW 67
// if Connect ( vehicle ) then
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL 39427 0 1
27297: IFFALSE 27338
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27299: LD_VAR 0 1
27303: PPUSH
27304: LD_EXP 97
27308: PUSH
27309: LD_VAR 0 2
27313: ARRAY
27314: PUSH
27315: LD_INT 3
27317: ARRAY
27318: PPUSH
27319: LD_EXP 97
27323: PUSH
27324: LD_VAR 0 2
27328: ARRAY
27329: PUSH
27330: LD_INT 4
27332: ARRAY
27333: PPUSH
27334: CALL_OW 171
// end else
27338: GO 27379
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_EXP 97
27349: PUSH
27350: LD_VAR 0 2
27354: ARRAY
27355: PUSH
27356: LD_INT 3
27358: ARRAY
27359: PPUSH
27360: LD_EXP 97
27364: PUSH
27365: LD_VAR 0 2
27369: ARRAY
27370: PUSH
27371: LD_INT 4
27373: ARRAY
27374: PPUSH
27375: CALL_OW 171
// end ; end ;
27379: LD_VAR 0 3
27383: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27384: LD_INT 0
27386: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 250
27394: EQUAL
27395: PUSH
27396: LD_VAR 0 2
27400: PPUSH
27401: CALL_OW 264
27405: PUSH
27406: LD_EXP 28
27410: EQUAL
27411: AND
27412: IFFALSE 27433
// MinerPlaceMine ( unit , x , y ) ;
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 4
27423: PPUSH
27424: LD_VAR 0 5
27428: PPUSH
27429: CALL 29832 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27433: LD_VAR 0 1
27437: PUSH
27438: LD_INT 251
27440: EQUAL
27441: PUSH
27442: LD_VAR 0 2
27446: PPUSH
27447: CALL_OW 264
27451: PUSH
27452: LD_EXP 28
27456: EQUAL
27457: AND
27458: IFFALSE 27479
// MinerDetonateMine ( unit , x , y ) ;
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 4
27469: PPUSH
27470: LD_VAR 0 5
27474: PPUSH
27475: CALL 30109 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27479: LD_VAR 0 1
27483: PUSH
27484: LD_INT 252
27486: EQUAL
27487: PUSH
27488: LD_VAR 0 2
27492: PPUSH
27493: CALL_OW 264
27497: PUSH
27498: LD_EXP 28
27502: EQUAL
27503: AND
27504: IFFALSE 27525
// MinerCreateMinefield ( unit , x , y ) ;
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_VAR 0 4
27515: PPUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: CALL 30526 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27525: LD_VAR 0 1
27529: PUSH
27530: LD_INT 253
27532: EQUAL
27533: PUSH
27534: LD_VAR 0 2
27538: PPUSH
27539: CALL_OW 257
27543: PUSH
27544: LD_INT 5
27546: EQUAL
27547: AND
27548: IFFALSE 27569
// ComBinocular ( unit , x , y ) ;
27550: LD_VAR 0 2
27554: PPUSH
27555: LD_VAR 0 4
27559: PPUSH
27560: LD_VAR 0 5
27564: PPUSH
27565: CALL 30897 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 254
27576: EQUAL
27577: PUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: CALL_OW 264
27587: PUSH
27588: LD_EXP 23
27592: EQUAL
27593: AND
27594: PUSH
27595: LD_VAR 0 3
27599: PPUSH
27600: CALL_OW 263
27604: PUSH
27605: LD_INT 3
27607: EQUAL
27608: AND
27609: IFFALSE 27625
// HackDestroyVehicle ( unit , selectedUnit ) ;
27611: LD_VAR 0 2
27615: PPUSH
27616: LD_VAR 0 3
27620: PPUSH
27621: CALL 29192 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27625: LD_VAR 0 1
27629: PUSH
27630: LD_INT 255
27632: EQUAL
27633: PUSH
27634: LD_VAR 0 2
27638: PPUSH
27639: CALL_OW 264
27643: PUSH
27644: LD_INT 14
27646: PUSH
27647: LD_INT 53
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: IN
27654: AND
27655: PUSH
27656: LD_VAR 0 4
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL_OW 488
27670: AND
27671: IFFALSE 27695
// CutTreeXYR ( unit , x , y , 12 ) ;
27673: LD_VAR 0 2
27677: PPUSH
27678: LD_VAR 0 4
27682: PPUSH
27683: LD_VAR 0 5
27687: PPUSH
27688: LD_INT 12
27690: PPUSH
27691: CALL 27758 0 4
// if cmd = 256 then
27695: LD_VAR 0 1
27699: PUSH
27700: LD_INT 256
27702: EQUAL
27703: IFFALSE 27724
// SetFactoryWaypoint ( unit , x , y ) ;
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 4
27714: PPUSH
27715: LD_VAR 0 5
27719: PPUSH
27720: CALL 25693 0 3
// if cmd = 257 then
27724: LD_VAR 0 1
27728: PUSH
27729: LD_INT 257
27731: EQUAL
27732: IFFALSE 27753
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27734: LD_VAR 0 2
27738: PPUSH
27739: LD_VAR 0 4
27743: PPUSH
27744: LD_VAR 0 5
27748: PPUSH
27749: CALL 26055 0 3
// end ;
27753: LD_VAR 0 6
27757: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27758: LD_INT 0
27760: PPUSH
27761: PPUSH
27762: PPUSH
27763: PPUSH
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27769: LD_VAR 0 1
27773: NOT
27774: PUSH
27775: LD_VAR 0 2
27779: PPUSH
27780: LD_VAR 0 3
27784: PPUSH
27785: CALL_OW 488
27789: NOT
27790: OR
27791: PUSH
27792: LD_VAR 0 4
27796: NOT
27797: OR
27798: IFFALSE 27802
// exit ;
27800: GO 28142
// list := [ ] ;
27802: LD_ADDR_VAR 0 13
27806: PUSH
27807: EMPTY
27808: ST_TO_ADDR
// if x - r < 0 then
27809: LD_VAR 0 2
27813: PUSH
27814: LD_VAR 0 4
27818: MINUS
27819: PUSH
27820: LD_INT 0
27822: LESS
27823: IFFALSE 27835
// min_x := 0 else
27825: LD_ADDR_VAR 0 7
27829: PUSH
27830: LD_INT 0
27832: ST_TO_ADDR
27833: GO 27851
// min_x := x - r ;
27835: LD_ADDR_VAR 0 7
27839: PUSH
27840: LD_VAR 0 2
27844: PUSH
27845: LD_VAR 0 4
27849: MINUS
27850: ST_TO_ADDR
// if y - r < 0 then
27851: LD_VAR 0 3
27855: PUSH
27856: LD_VAR 0 4
27860: MINUS
27861: PUSH
27862: LD_INT 0
27864: LESS
27865: IFFALSE 27877
// min_y := 0 else
27867: LD_ADDR_VAR 0 8
27871: PUSH
27872: LD_INT 0
27874: ST_TO_ADDR
27875: GO 27893
// min_y := y - r ;
27877: LD_ADDR_VAR 0 8
27881: PUSH
27882: LD_VAR 0 3
27886: PUSH
27887: LD_VAR 0 4
27891: MINUS
27892: ST_TO_ADDR
// max_x := x + r ;
27893: LD_ADDR_VAR 0 9
27897: PUSH
27898: LD_VAR 0 2
27902: PUSH
27903: LD_VAR 0 4
27907: PLUS
27908: ST_TO_ADDR
// max_y := y + r ;
27909: LD_ADDR_VAR 0 10
27913: PUSH
27914: LD_VAR 0 3
27918: PUSH
27919: LD_VAR 0 4
27923: PLUS
27924: ST_TO_ADDR
// for _x = min_x to max_x do
27925: LD_ADDR_VAR 0 11
27929: PUSH
27930: DOUBLE
27931: LD_VAR 0 7
27935: DEC
27936: ST_TO_ADDR
27937: LD_VAR 0 9
27941: PUSH
27942: FOR_TO
27943: IFFALSE 28060
// for _y = min_y to max_y do
27945: LD_ADDR_VAR 0 12
27949: PUSH
27950: DOUBLE
27951: LD_VAR 0 8
27955: DEC
27956: ST_TO_ADDR
27957: LD_VAR 0 10
27961: PUSH
27962: FOR_TO
27963: IFFALSE 28056
// begin if not ValidHex ( _x , _y ) then
27965: LD_VAR 0 11
27969: PPUSH
27970: LD_VAR 0 12
27974: PPUSH
27975: CALL_OW 488
27979: NOT
27980: IFFALSE 27984
// continue ;
27982: GO 27962
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27984: LD_VAR 0 11
27988: PPUSH
27989: LD_VAR 0 12
27993: PPUSH
27994: CALL_OW 351
27998: PUSH
27999: LD_VAR 0 11
28003: PPUSH
28004: LD_VAR 0 12
28008: PPUSH
28009: CALL_OW 554
28013: AND
28014: IFFALSE 28054
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28016: LD_ADDR_VAR 0 13
28020: PUSH
28021: LD_VAR 0 13
28025: PPUSH
28026: LD_VAR 0 13
28030: PUSH
28031: LD_INT 1
28033: PLUS
28034: PPUSH
28035: LD_VAR 0 11
28039: PUSH
28040: LD_VAR 0 12
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 2
28053: ST_TO_ADDR
// end ;
28054: GO 27962
28056: POP
28057: POP
28058: GO 27942
28060: POP
28061: POP
// if not list then
28062: LD_VAR 0 13
28066: NOT
28067: IFFALSE 28071
// exit ;
28069: GO 28142
// for i in list do
28071: LD_ADDR_VAR 0 6
28075: PUSH
28076: LD_VAR 0 13
28080: PUSH
28081: FOR_IN
28082: IFFALSE 28140
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28084: LD_VAR 0 1
28088: PPUSH
28089: LD_STRING M
28091: PUSH
28092: LD_VAR 0 6
28096: PUSH
28097: LD_INT 1
28099: ARRAY
28100: PUSH
28101: LD_VAR 0 6
28105: PUSH
28106: LD_INT 2
28108: ARRAY
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: PPUSH
28134: CALL_OW 447
28138: GO 28081
28140: POP
28141: POP
// end ;
28142: LD_VAR 0 5
28146: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28147: LD_EXP 100
28151: NOT
28152: IFFALSE 28202
28154: GO 28156
28156: DISABLE
// begin initHack := true ;
28157: LD_ADDR_EXP 100
28161: PUSH
28162: LD_INT 1
28164: ST_TO_ADDR
// hackTanks := [ ] ;
28165: LD_ADDR_EXP 101
28169: PUSH
28170: EMPTY
28171: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28172: LD_ADDR_EXP 102
28176: PUSH
28177: EMPTY
28178: ST_TO_ADDR
// hackLimit := 3 ;
28179: LD_ADDR_EXP 103
28183: PUSH
28184: LD_INT 3
28186: ST_TO_ADDR
// hackDist := 12 ;
28187: LD_ADDR_EXP 104
28191: PUSH
28192: LD_INT 12
28194: ST_TO_ADDR
// hackCounter := [ ] ;
28195: LD_ADDR_EXP 105
28199: PUSH
28200: EMPTY
28201: ST_TO_ADDR
// end ;
28202: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28203: LD_EXP 100
28207: PUSH
28208: LD_INT 34
28210: PUSH
28211: LD_EXP 23
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PPUSH
28220: CALL_OW 69
28224: AND
28225: IFFALSE 28480
28227: GO 28229
28229: DISABLE
28230: LD_INT 0
28232: PPUSH
28233: PPUSH
// begin enable ;
28234: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: LD_INT 34
28242: PUSH
28243: LD_EXP 23
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PPUSH
28252: CALL_OW 69
28256: PUSH
28257: FOR_IN
28258: IFFALSE 28478
// begin if not i in hackTanks then
28260: LD_VAR 0 1
28264: PUSH
28265: LD_EXP 101
28269: IN
28270: NOT
28271: IFFALSE 28354
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28273: LD_ADDR_EXP 101
28277: PUSH
28278: LD_EXP 101
28282: PPUSH
28283: LD_EXP 101
28287: PUSH
28288: LD_INT 1
28290: PLUS
28291: PPUSH
28292: LD_VAR 0 1
28296: PPUSH
28297: CALL_OW 1
28301: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28302: LD_ADDR_EXP 102
28306: PUSH
28307: LD_EXP 102
28311: PPUSH
28312: LD_EXP 102
28316: PUSH
28317: LD_INT 1
28319: PLUS
28320: PPUSH
28321: EMPTY
28322: PPUSH
28323: CALL_OW 1
28327: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28328: LD_ADDR_EXP 105
28332: PUSH
28333: LD_EXP 105
28337: PPUSH
28338: LD_EXP 105
28342: PUSH
28343: LD_INT 1
28345: PLUS
28346: PPUSH
28347: EMPTY
28348: PPUSH
28349: CALL_OW 1
28353: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 302
28363: NOT
28364: IFFALSE 28377
// begin HackUnlinkAll ( i ) ;
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL 28483 0 1
// continue ;
28375: GO 28257
// end ; HackCheckCapturedStatus ( i ) ;
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL 28926 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28386: LD_ADDR_VAR 0 2
28390: PUSH
28391: LD_INT 81
28393: PUSH
28394: LD_VAR 0 1
28398: PPUSH
28399: CALL_OW 255
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 33
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 91
28420: PUSH
28421: LD_VAR 0 1
28425: PUSH
28426: LD_EXP 104
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 50
28438: PUSH
28439: EMPTY
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: PPUSH
28448: CALL_OW 69
28452: ST_TO_ADDR
// if not tmp then
28453: LD_VAR 0 2
28457: NOT
28458: IFFALSE 28462
// continue ;
28460: GO 28257
// HackLink ( i , tmp ) ;
28462: LD_VAR 0 1
28466: PPUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: CALL 28619 0 2
// end ;
28476: GO 28257
28478: POP
28479: POP
// end ;
28480: PPOPN 2
28482: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
28487: PPUSH
// if not hack in hackTanks then
28488: LD_VAR 0 1
28492: PUSH
28493: LD_EXP 101
28497: IN
28498: NOT
28499: IFFALSE 28503
// exit ;
28501: GO 28614
// index := GetElementIndex ( hackTanks , hack ) ;
28503: LD_ADDR_VAR 0 4
28507: PUSH
28508: LD_EXP 101
28512: PPUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL 36241 0 2
28522: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28523: LD_EXP 102
28527: PUSH
28528: LD_VAR 0 4
28532: ARRAY
28533: IFFALSE 28614
// begin for i in hackTanksCaptured [ index ] do
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_EXP 102
28544: PUSH
28545: LD_VAR 0 4
28549: ARRAY
28550: PUSH
28551: FOR_IN
28552: IFFALSE 28578
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28554: LD_VAR 0 3
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: LD_VAR 0 3
28567: PUSH
28568: LD_INT 2
28570: ARRAY
28571: PPUSH
28572: CALL_OW 235
28576: GO 28551
28578: POP
28579: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28580: LD_ADDR_EXP 102
28584: PUSH
28585: LD_EXP 102
28589: PPUSH
28590: LD_VAR 0 4
28594: PPUSH
28595: EMPTY
28596: PPUSH
28597: CALL_OW 1
28601: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28602: LD_VAR 0 1
28606: PPUSH
28607: LD_INT 0
28609: PPUSH
28610: CALL_OW 505
// end ; end ;
28614: LD_VAR 0 2
28618: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28619: LD_INT 0
28621: PPUSH
28622: PPUSH
28623: PPUSH
// if not hack in hackTanks or not vehicles then
28624: LD_VAR 0 1
28628: PUSH
28629: LD_EXP 101
28633: IN
28634: NOT
28635: PUSH
28636: LD_VAR 0 2
28640: NOT
28641: OR
28642: IFFALSE 28646
// exit ;
28644: GO 28921
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28646: LD_ADDR_VAR 0 2
28650: PUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_INT 1
28663: PPUSH
28664: LD_INT 1
28666: PPUSH
28667: CALL 36891 0 4
28671: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28672: LD_ADDR_VAR 0 5
28676: PUSH
28677: LD_EXP 101
28681: PPUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL 36241 0 2
28691: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28692: LD_EXP 102
28696: PUSH
28697: LD_VAR 0 5
28701: ARRAY
28702: PUSH
28703: LD_EXP 103
28707: LESS
28708: IFFALSE 28897
// begin for i := 1 to vehicles do
28710: LD_ADDR_VAR 0 4
28714: PUSH
28715: DOUBLE
28716: LD_INT 1
28718: DEC
28719: ST_TO_ADDR
28720: LD_VAR 0 2
28724: PUSH
28725: FOR_TO
28726: IFFALSE 28895
// begin if hackTanksCaptured [ index ] = hackLimit then
28728: LD_EXP 102
28732: PUSH
28733: LD_VAR 0 5
28737: ARRAY
28738: PUSH
28739: LD_EXP 103
28743: EQUAL
28744: IFFALSE 28748
// break ;
28746: GO 28895
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28748: LD_ADDR_EXP 105
28752: PUSH
28753: LD_EXP 105
28757: PPUSH
28758: LD_VAR 0 5
28762: PPUSH
28763: LD_EXP 105
28767: PUSH
28768: LD_VAR 0 5
28772: ARRAY
28773: PUSH
28774: LD_INT 1
28776: PLUS
28777: PPUSH
28778: CALL_OW 1
28782: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28783: LD_ADDR_EXP 102
28787: PUSH
28788: LD_EXP 102
28792: PPUSH
28793: LD_VAR 0 5
28797: PUSH
28798: LD_EXP 102
28802: PUSH
28803: LD_VAR 0 5
28807: ARRAY
28808: PUSH
28809: LD_INT 1
28811: PLUS
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PPUSH
28817: LD_VAR 0 2
28821: PUSH
28822: LD_VAR 0 4
28826: ARRAY
28827: PUSH
28828: LD_VAR 0 2
28832: PUSH
28833: LD_VAR 0 4
28837: ARRAY
28838: PPUSH
28839: CALL_OW 255
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PPUSH
28848: CALL 36456 0 3
28852: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28853: LD_VAR 0 2
28857: PUSH
28858: LD_VAR 0 4
28862: ARRAY
28863: PPUSH
28864: LD_VAR 0 1
28868: PPUSH
28869: CALL_OW 255
28873: PPUSH
28874: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28878: LD_VAR 0 2
28882: PUSH
28883: LD_VAR 0 4
28887: ARRAY
28888: PPUSH
28889: CALL_OW 141
// end ;
28893: GO 28725
28895: POP
28896: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28897: LD_VAR 0 1
28901: PPUSH
28902: LD_EXP 102
28906: PUSH
28907: LD_VAR 0 5
28911: ARRAY
28912: PUSH
28913: LD_INT 0
28915: PLUS
28916: PPUSH
28917: CALL_OW 505
// end ;
28921: LD_VAR 0 3
28925: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28926: LD_INT 0
28928: PPUSH
28929: PPUSH
28930: PPUSH
28931: PPUSH
// if not hack in hackTanks then
28932: LD_VAR 0 1
28936: PUSH
28937: LD_EXP 101
28941: IN
28942: NOT
28943: IFFALSE 28947
// exit ;
28945: GO 29187
// index := GetElementIndex ( hackTanks , hack ) ;
28947: LD_ADDR_VAR 0 4
28951: PUSH
28952: LD_EXP 101
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL 36241 0 2
28966: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28967: LD_ADDR_VAR 0 3
28971: PUSH
28972: DOUBLE
28973: LD_EXP 102
28977: PUSH
28978: LD_VAR 0 4
28982: ARRAY
28983: INC
28984: ST_TO_ADDR
28985: LD_INT 1
28987: PUSH
28988: FOR_DOWNTO
28989: IFFALSE 29161
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28991: LD_ADDR_VAR 0 5
28995: PUSH
28996: LD_EXP 102
29000: PUSH
29001: LD_VAR 0 4
29005: ARRAY
29006: PUSH
29007: LD_VAR 0 3
29011: ARRAY
29012: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29013: LD_VAR 0 5
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: PPUSH
29022: CALL_OW 302
29026: NOT
29027: PUSH
29028: LD_VAR 0 5
29032: PUSH
29033: LD_INT 1
29035: ARRAY
29036: PPUSH
29037: CALL_OW 255
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 255
29051: NONEQUAL
29052: OR
29053: IFFALSE 29159
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29055: LD_VAR 0 5
29059: PUSH
29060: LD_INT 1
29062: ARRAY
29063: PPUSH
29064: CALL_OW 305
29068: PUSH
29069: LD_VAR 0 5
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PPUSH
29078: CALL_OW 255
29082: PUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 255
29092: EQUAL
29093: AND
29094: IFFALSE 29118
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29096: LD_VAR 0 5
29100: PUSH
29101: LD_INT 1
29103: ARRAY
29104: PPUSH
29105: LD_VAR 0 5
29109: PUSH
29110: LD_INT 2
29112: ARRAY
29113: PPUSH
29114: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29118: LD_ADDR_EXP 102
29122: PUSH
29123: LD_EXP 102
29127: PPUSH
29128: LD_VAR 0 4
29132: PPUSH
29133: LD_EXP 102
29137: PUSH
29138: LD_VAR 0 4
29142: ARRAY
29143: PPUSH
29144: LD_VAR 0 3
29148: PPUSH
29149: CALL_OW 3
29153: PPUSH
29154: CALL_OW 1
29158: ST_TO_ADDR
// end ; end ;
29159: GO 28988
29161: POP
29162: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29163: LD_VAR 0 1
29167: PPUSH
29168: LD_EXP 102
29172: PUSH
29173: LD_VAR 0 4
29177: ARRAY
29178: PUSH
29179: LD_INT 0
29181: PLUS
29182: PPUSH
29183: CALL_OW 505
// end ;
29187: LD_VAR 0 2
29191: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29192: LD_INT 0
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
// if not hack in hackTanks then
29198: LD_VAR 0 1
29202: PUSH
29203: LD_EXP 101
29207: IN
29208: NOT
29209: IFFALSE 29213
// exit ;
29211: GO 29298
// index := GetElementIndex ( hackTanks , hack ) ;
29213: LD_ADDR_VAR 0 5
29217: PUSH
29218: LD_EXP 101
29222: PPUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL 36241 0 2
29232: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: DOUBLE
29239: LD_INT 1
29241: DEC
29242: ST_TO_ADDR
29243: LD_EXP 102
29247: PUSH
29248: LD_VAR 0 5
29252: ARRAY
29253: PUSH
29254: FOR_TO
29255: IFFALSE 29296
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29257: LD_EXP 102
29261: PUSH
29262: LD_VAR 0 5
29266: ARRAY
29267: PUSH
29268: LD_VAR 0 4
29272: ARRAY
29273: PUSH
29274: LD_INT 1
29276: ARRAY
29277: PUSH
29278: LD_VAR 0 2
29282: EQUAL
29283: IFFALSE 29294
// KillUnit ( vehicle ) ;
29285: LD_VAR 0 2
29289: PPUSH
29290: CALL_OW 66
29294: GO 29254
29296: POP
29297: POP
// end ;
29298: LD_VAR 0 3
29302: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29303: LD_EXP 106
29307: NOT
29308: IFFALSE 29343
29310: GO 29312
29312: DISABLE
// begin initMiner := true ;
29313: LD_ADDR_EXP 106
29317: PUSH
29318: LD_INT 1
29320: ST_TO_ADDR
// minersList := [ ] ;
29321: LD_ADDR_EXP 107
29325: PUSH
29326: EMPTY
29327: ST_TO_ADDR
// minerMinesList := [ ] ;
29328: LD_ADDR_EXP 108
29332: PUSH
29333: EMPTY
29334: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29335: LD_ADDR_EXP 109
29339: PUSH
29340: LD_INT 5
29342: ST_TO_ADDR
// end ;
29343: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29344: LD_EXP 106
29348: PUSH
29349: LD_INT 34
29351: PUSH
29352: LD_EXP 28
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PPUSH
29361: CALL_OW 69
29365: AND
29366: IFFALSE 29829
29368: GO 29370
29370: DISABLE
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
// begin enable ;
29377: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29378: LD_ADDR_VAR 0 1
29382: PUSH
29383: LD_INT 34
29385: PUSH
29386: LD_EXP 28
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PPUSH
29395: CALL_OW 69
29399: PUSH
29400: FOR_IN
29401: IFFALSE 29473
// begin if not i in minersList then
29403: LD_VAR 0 1
29407: PUSH
29408: LD_EXP 107
29412: IN
29413: NOT
29414: IFFALSE 29471
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29416: LD_ADDR_EXP 107
29420: PUSH
29421: LD_EXP 107
29425: PPUSH
29426: LD_EXP 107
29430: PUSH
29431: LD_INT 1
29433: PLUS
29434: PPUSH
29435: LD_VAR 0 1
29439: PPUSH
29440: CALL_OW 1
29444: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29445: LD_ADDR_EXP 108
29449: PUSH
29450: LD_EXP 108
29454: PPUSH
29455: LD_EXP 108
29459: PUSH
29460: LD_INT 1
29462: PLUS
29463: PPUSH
29464: EMPTY
29465: PPUSH
29466: CALL_OW 1
29470: ST_TO_ADDR
// end end ;
29471: GO 29400
29473: POP
29474: POP
// for i := minerMinesList downto 1 do
29475: LD_ADDR_VAR 0 1
29479: PUSH
29480: DOUBLE
29481: LD_EXP 108
29485: INC
29486: ST_TO_ADDR
29487: LD_INT 1
29489: PUSH
29490: FOR_DOWNTO
29491: IFFALSE 29827
// begin if IsLive ( minersList [ i ] ) then
29493: LD_EXP 107
29497: PUSH
29498: LD_VAR 0 1
29502: ARRAY
29503: PPUSH
29504: CALL_OW 300
29508: IFFALSE 29536
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29510: LD_EXP 107
29514: PUSH
29515: LD_VAR 0 1
29519: ARRAY
29520: PPUSH
29521: LD_EXP 108
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PPUSH
29532: CALL_OW 505
// if not minerMinesList [ i ] then
29536: LD_EXP 108
29540: PUSH
29541: LD_VAR 0 1
29545: ARRAY
29546: NOT
29547: IFFALSE 29551
// continue ;
29549: GO 29490
// for j := minerMinesList [ i ] downto 1 do
29551: LD_ADDR_VAR 0 2
29555: PUSH
29556: DOUBLE
29557: LD_EXP 108
29561: PUSH
29562: LD_VAR 0 1
29566: ARRAY
29567: INC
29568: ST_TO_ADDR
29569: LD_INT 1
29571: PUSH
29572: FOR_DOWNTO
29573: IFFALSE 29823
// begin side := GetSide ( minersList [ i ] ) ;
29575: LD_ADDR_VAR 0 3
29579: PUSH
29580: LD_EXP 107
29584: PUSH
29585: LD_VAR 0 1
29589: ARRAY
29590: PPUSH
29591: CALL_OW 255
29595: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29596: LD_ADDR_VAR 0 4
29600: PUSH
29601: LD_EXP 108
29605: PUSH
29606: LD_VAR 0 1
29610: ARRAY
29611: PUSH
29612: LD_VAR 0 2
29616: ARRAY
29617: PUSH
29618: LD_INT 1
29620: ARRAY
29621: PPUSH
29622: LD_EXP 108
29626: PUSH
29627: LD_VAR 0 1
29631: ARRAY
29632: PUSH
29633: LD_VAR 0 2
29637: ARRAY
29638: PUSH
29639: LD_INT 2
29641: ARRAY
29642: PPUSH
29643: CALL_OW 428
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 4
29652: NOT
29653: IFFALSE 29657
// continue ;
29655: GO 29572
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29657: LD_VAR 0 4
29661: PUSH
29662: LD_INT 81
29664: PUSH
29665: LD_VAR 0 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PPUSH
29674: CALL_OW 69
29678: IN
29679: PUSH
29680: LD_EXP 108
29684: PUSH
29685: LD_VAR 0 1
29689: ARRAY
29690: PUSH
29691: LD_VAR 0 2
29695: ARRAY
29696: PUSH
29697: LD_INT 1
29699: ARRAY
29700: PPUSH
29701: LD_EXP 108
29705: PUSH
29706: LD_VAR 0 1
29710: ARRAY
29711: PUSH
29712: LD_VAR 0 2
29716: ARRAY
29717: PUSH
29718: LD_INT 2
29720: ARRAY
29721: PPUSH
29722: CALL_OW 458
29726: AND
29727: IFFALSE 29821
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29729: LD_EXP 108
29733: PUSH
29734: LD_VAR 0 1
29738: ARRAY
29739: PUSH
29740: LD_VAR 0 2
29744: ARRAY
29745: PUSH
29746: LD_INT 1
29748: ARRAY
29749: PPUSH
29750: LD_EXP 108
29754: PUSH
29755: LD_VAR 0 1
29759: ARRAY
29760: PUSH
29761: LD_VAR 0 2
29765: ARRAY
29766: PUSH
29767: LD_INT 2
29769: ARRAY
29770: PPUSH
29771: LD_VAR 0 3
29775: PPUSH
29776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29780: LD_ADDR_EXP 108
29784: PUSH
29785: LD_EXP 108
29789: PPUSH
29790: LD_VAR 0 1
29794: PPUSH
29795: LD_EXP 108
29799: PUSH
29800: LD_VAR 0 1
29804: ARRAY
29805: PPUSH
29806: LD_VAR 0 2
29810: PPUSH
29811: CALL_OW 3
29815: PPUSH
29816: CALL_OW 1
29820: ST_TO_ADDR
// end ; end ;
29821: GO 29572
29823: POP
29824: POP
// end ;
29825: GO 29490
29827: POP
29828: POP
// end ;
29829: PPOPN 4
29831: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
// result := false ;
29836: LD_ADDR_VAR 0 4
29840: PUSH
29841: LD_INT 0
29843: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 264
29853: PUSH
29854: LD_EXP 28
29858: EQUAL
29859: NOT
29860: IFFALSE 29864
// exit ;
29862: GO 30104
// index := GetElementIndex ( minersList , unit ) ;
29864: LD_ADDR_VAR 0 5
29868: PUSH
29869: LD_EXP 107
29873: PPUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL 36241 0 2
29883: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29884: LD_EXP 108
29888: PUSH
29889: LD_VAR 0 5
29893: ARRAY
29894: PUSH
29895: LD_EXP 109
29899: GREATEREQUAL
29900: IFFALSE 29904
// exit ;
29902: GO 30104
// ComMoveXY ( unit , x , y ) ;
29904: LD_VAR 0 1
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29923: LD_INT 35
29925: PPUSH
29926: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29930: LD_VAR 0 1
29934: PPUSH
29935: LD_VAR 0 2
29939: PPUSH
29940: LD_VAR 0 3
29944: PPUSH
29945: CALL 67527 0 3
29949: NOT
29950: PUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 314
29960: AND
29961: IFFALSE 29965
// exit ;
29963: GO 30104
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29965: LD_VAR 0 2
29969: PPUSH
29970: LD_VAR 0 3
29974: PPUSH
29975: CALL_OW 428
29979: PUSH
29980: LD_VAR 0 1
29984: EQUAL
29985: PUSH
29986: LD_VAR 0 1
29990: PPUSH
29991: CALL_OW 314
29995: NOT
29996: AND
29997: IFFALSE 29923
// PlaySoundXY ( x , y , PlantMine ) ;
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: LD_STRING PlantMine
30011: PPUSH
30012: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30016: LD_VAR 0 2
30020: PPUSH
30021: LD_VAR 0 3
30025: PPUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 255
30035: PPUSH
30036: LD_INT 0
30038: PPUSH
30039: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30043: LD_ADDR_EXP 108
30047: PUSH
30048: LD_EXP 108
30052: PPUSH
30053: LD_VAR 0 5
30057: PUSH
30058: LD_EXP 108
30062: PUSH
30063: LD_VAR 0 5
30067: ARRAY
30068: PUSH
30069: LD_INT 1
30071: PLUS
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PPUSH
30077: LD_VAR 0 2
30081: PUSH
30082: LD_VAR 0 3
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL 36456 0 3
30095: ST_TO_ADDR
// result := true ;
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_INT 1
30103: ST_TO_ADDR
// end ;
30104: LD_VAR 0 4
30108: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30109: LD_INT 0
30111: PPUSH
30112: PPUSH
30113: PPUSH
// if not unit in minersList then
30114: LD_VAR 0 1
30118: PUSH
30119: LD_EXP 107
30123: IN
30124: NOT
30125: IFFALSE 30129
// exit ;
30127: GO 30521
// index := GetElementIndex ( minersList , unit ) ;
30129: LD_ADDR_VAR 0 6
30133: PUSH
30134: LD_EXP 107
30138: PPUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: CALL 36241 0 2
30148: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30149: LD_ADDR_VAR 0 5
30153: PUSH
30154: DOUBLE
30155: LD_EXP 108
30159: PUSH
30160: LD_VAR 0 6
30164: ARRAY
30165: INC
30166: ST_TO_ADDR
30167: LD_INT 1
30169: PUSH
30170: FOR_DOWNTO
30171: IFFALSE 30332
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30173: LD_EXP 108
30177: PUSH
30178: LD_VAR 0 6
30182: ARRAY
30183: PUSH
30184: LD_VAR 0 5
30188: ARRAY
30189: PUSH
30190: LD_INT 1
30192: ARRAY
30193: PUSH
30194: LD_VAR 0 2
30198: EQUAL
30199: PUSH
30200: LD_EXP 108
30204: PUSH
30205: LD_VAR 0 6
30209: ARRAY
30210: PUSH
30211: LD_VAR 0 5
30215: ARRAY
30216: PUSH
30217: LD_INT 2
30219: ARRAY
30220: PUSH
30221: LD_VAR 0 3
30225: EQUAL
30226: AND
30227: IFFALSE 30330
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30229: LD_EXP 108
30233: PUSH
30234: LD_VAR 0 6
30238: ARRAY
30239: PUSH
30240: LD_VAR 0 5
30244: ARRAY
30245: PUSH
30246: LD_INT 1
30248: ARRAY
30249: PPUSH
30250: LD_EXP 108
30254: PUSH
30255: LD_VAR 0 6
30259: ARRAY
30260: PUSH
30261: LD_VAR 0 5
30265: ARRAY
30266: PUSH
30267: LD_INT 2
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 1
30275: PPUSH
30276: CALL_OW 255
30280: PPUSH
30281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30285: LD_ADDR_EXP 108
30289: PUSH
30290: LD_EXP 108
30294: PPUSH
30295: LD_VAR 0 6
30299: PPUSH
30300: LD_EXP 108
30304: PUSH
30305: LD_VAR 0 6
30309: ARRAY
30310: PPUSH
30311: LD_VAR 0 5
30315: PPUSH
30316: CALL_OW 3
30320: PPUSH
30321: CALL_OW 1
30325: ST_TO_ADDR
// exit ;
30326: POP
30327: POP
30328: GO 30521
// end ; end ;
30330: GO 30170
30332: POP
30333: POP
// for i := minerMinesList [ index ] downto 1 do
30334: LD_ADDR_VAR 0 5
30338: PUSH
30339: DOUBLE
30340: LD_EXP 108
30344: PUSH
30345: LD_VAR 0 6
30349: ARRAY
30350: INC
30351: ST_TO_ADDR
30352: LD_INT 1
30354: PUSH
30355: FOR_DOWNTO
30356: IFFALSE 30519
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30358: LD_EXP 108
30362: PUSH
30363: LD_VAR 0 6
30367: ARRAY
30368: PUSH
30369: LD_VAR 0 5
30373: ARRAY
30374: PUSH
30375: LD_INT 1
30377: ARRAY
30378: PPUSH
30379: LD_EXP 108
30383: PUSH
30384: LD_VAR 0 6
30388: ARRAY
30389: PUSH
30390: LD_VAR 0 5
30394: ARRAY
30395: PUSH
30396: LD_INT 2
30398: ARRAY
30399: PPUSH
30400: LD_VAR 0 2
30404: PPUSH
30405: LD_VAR 0 3
30409: PPUSH
30410: CALL_OW 298
30414: PUSH
30415: LD_INT 6
30417: LESS
30418: IFFALSE 30517
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30420: LD_EXP 108
30424: PUSH
30425: LD_VAR 0 6
30429: ARRAY
30430: PUSH
30431: LD_VAR 0 5
30435: ARRAY
30436: PUSH
30437: LD_INT 1
30439: ARRAY
30440: PPUSH
30441: LD_EXP 108
30445: PUSH
30446: LD_VAR 0 6
30450: ARRAY
30451: PUSH
30452: LD_VAR 0 5
30456: ARRAY
30457: PUSH
30458: LD_INT 2
30460: ARRAY
30461: PPUSH
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 255
30471: PPUSH
30472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30476: LD_ADDR_EXP 108
30480: PUSH
30481: LD_EXP 108
30485: PPUSH
30486: LD_VAR 0 6
30490: PPUSH
30491: LD_EXP 108
30495: PUSH
30496: LD_VAR 0 6
30500: ARRAY
30501: PPUSH
30502: LD_VAR 0 5
30506: PPUSH
30507: CALL_OW 3
30511: PPUSH
30512: CALL_OW 1
30516: ST_TO_ADDR
// end ; end ;
30517: GO 30355
30519: POP
30520: POP
// end ;
30521: LD_VAR 0 4
30525: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30537: LD_VAR 0 1
30541: PPUSH
30542: CALL_OW 264
30546: PUSH
30547: LD_EXP 28
30551: EQUAL
30552: NOT
30553: PUSH
30554: LD_VAR 0 1
30558: PUSH
30559: LD_EXP 107
30563: IN
30564: NOT
30565: OR
30566: IFFALSE 30570
// exit ;
30568: GO 30892
// index := GetElementIndex ( minersList , unit ) ;
30570: LD_ADDR_VAR 0 6
30574: PUSH
30575: LD_EXP 107
30579: PPUSH
30580: LD_VAR 0 1
30584: PPUSH
30585: CALL 36241 0 2
30589: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30590: LD_ADDR_VAR 0 8
30594: PUSH
30595: LD_EXP 109
30599: PUSH
30600: LD_EXP 108
30604: PUSH
30605: LD_VAR 0 6
30609: ARRAY
30610: MINUS
30611: ST_TO_ADDR
// if not minesFreeAmount then
30612: LD_VAR 0 8
30616: NOT
30617: IFFALSE 30621
// exit ;
30619: GO 30892
// tmp := [ ] ;
30621: LD_ADDR_VAR 0 7
30625: PUSH
30626: EMPTY
30627: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30628: LD_ADDR_VAR 0 5
30632: PUSH
30633: DOUBLE
30634: LD_INT 1
30636: DEC
30637: ST_TO_ADDR
30638: LD_VAR 0 8
30642: PUSH
30643: FOR_TO
30644: IFFALSE 30839
// begin _d := rand ( 0 , 5 ) ;
30646: LD_ADDR_VAR 0 11
30650: PUSH
30651: LD_INT 0
30653: PPUSH
30654: LD_INT 5
30656: PPUSH
30657: CALL_OW 12
30661: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30662: LD_ADDR_VAR 0 12
30666: PUSH
30667: LD_INT 2
30669: PPUSH
30670: LD_INT 6
30672: PPUSH
30673: CALL_OW 12
30677: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30678: LD_ADDR_VAR 0 9
30682: PUSH
30683: LD_VAR 0 2
30687: PPUSH
30688: LD_VAR 0 11
30692: PPUSH
30693: LD_VAR 0 12
30697: PPUSH
30698: CALL_OW 272
30702: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30703: LD_ADDR_VAR 0 10
30707: PUSH
30708: LD_VAR 0 3
30712: PPUSH
30713: LD_VAR 0 11
30717: PPUSH
30718: LD_VAR 0 12
30722: PPUSH
30723: CALL_OW 273
30727: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30728: LD_VAR 0 9
30732: PPUSH
30733: LD_VAR 0 10
30737: PPUSH
30738: CALL_OW 488
30742: PUSH
30743: LD_VAR 0 9
30747: PUSH
30748: LD_VAR 0 10
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_VAR 0 7
30761: IN
30762: NOT
30763: AND
30764: PUSH
30765: LD_VAR 0 9
30769: PPUSH
30770: LD_VAR 0 10
30774: PPUSH
30775: CALL_OW 458
30779: NOT
30780: AND
30781: IFFALSE 30823
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30783: LD_ADDR_VAR 0 7
30787: PUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: LD_VAR 0 7
30797: PUSH
30798: LD_INT 1
30800: PLUS
30801: PPUSH
30802: LD_VAR 0 9
30806: PUSH
30807: LD_VAR 0 10
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 1
30820: ST_TO_ADDR
30821: GO 30837
// i := i - 1 ;
30823: LD_ADDR_VAR 0 5
30827: PUSH
30828: LD_VAR 0 5
30832: PUSH
30833: LD_INT 1
30835: MINUS
30836: ST_TO_ADDR
// end ;
30837: GO 30643
30839: POP
30840: POP
// for i in tmp do
30841: LD_ADDR_VAR 0 5
30845: PUSH
30846: LD_VAR 0 7
30850: PUSH
30851: FOR_IN
30852: IFFALSE 30890
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30854: LD_VAR 0 1
30858: PPUSH
30859: LD_VAR 0 5
30863: PUSH
30864: LD_INT 1
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 5
30872: PUSH
30873: LD_INT 2
30875: ARRAY
30876: PPUSH
30877: CALL 29832 0 3
30881: NOT
30882: IFFALSE 30888
// exit ;
30884: POP
30885: POP
30886: GO 30892
30888: GO 30851
30890: POP
30891: POP
// end ;
30892: LD_VAR 0 4
30896: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30897: LD_INT 0
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
// if not GetClass ( unit ) = class_sniper then
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 257
30915: PUSH
30916: LD_INT 5
30918: EQUAL
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 31312
// dist := 8 ;
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: LD_INT 8
30931: ST_TO_ADDR
// viewRange := 12 ;
30932: LD_ADDR_VAR 0 7
30936: PUSH
30937: LD_INT 12
30939: ST_TO_ADDR
// side := GetSide ( unit ) ;
30940: LD_ADDR_VAR 0 6
30944: PUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 255
30954: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30955: LD_INT 61
30957: PPUSH
30958: LD_VAR 0 6
30962: PPUSH
30963: CALL_OW 321
30967: PUSH
30968: LD_INT 2
30970: EQUAL
30971: IFFALSE 30981
// viewRange := 16 ;
30973: LD_ADDR_VAR 0 7
30977: PUSH
30978: LD_INT 16
30980: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30981: LD_VAR 0 1
30985: PPUSH
30986: LD_VAR 0 2
30990: PPUSH
30991: LD_VAR 0 3
30995: PPUSH
30996: CALL_OW 297
31000: PUSH
31001: LD_VAR 0 5
31005: GREATER
31006: IFFALSE 31085
// begin ComMoveXY ( unit , x , y ) ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 3
31022: PPUSH
31023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31027: LD_INT 35
31029: PPUSH
31030: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_VAR 0 2
31043: PPUSH
31044: LD_VAR 0 3
31048: PPUSH
31049: CALL 67527 0 3
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31312
// until GetDistUnitXY ( unit , x , y ) < dist ;
31058: LD_VAR 0 1
31062: PPUSH
31063: LD_VAR 0 2
31067: PPUSH
31068: LD_VAR 0 3
31072: PPUSH
31073: CALL_OW 297
31077: PUSH
31078: LD_VAR 0 5
31082: LESS
31083: IFFALSE 31027
// end ; ComTurnXY ( unit , x , y ) ;
31085: LD_VAR 0 1
31089: PPUSH
31090: LD_VAR 0 2
31094: PPUSH
31095: LD_VAR 0 3
31099: PPUSH
31100: CALL_OW 118
// wait ( 5 ) ;
31104: LD_INT 5
31106: PPUSH
31107: CALL_OW 67
// _d := GetDir ( unit ) ;
31111: LD_ADDR_VAR 0 10
31115: PUSH
31116: LD_VAR 0 1
31120: PPUSH
31121: CALL_OW 254
31125: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31126: LD_ADDR_VAR 0 8
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 250
31140: PPUSH
31141: LD_VAR 0 10
31145: PPUSH
31146: LD_VAR 0 5
31150: PPUSH
31151: CALL_OW 272
31155: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31156: LD_ADDR_VAR 0 9
31160: PUSH
31161: LD_VAR 0 1
31165: PPUSH
31166: CALL_OW 251
31170: PPUSH
31171: LD_VAR 0 10
31175: PPUSH
31176: LD_VAR 0 5
31180: PPUSH
31181: CALL_OW 273
31185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31186: LD_VAR 0 8
31190: PPUSH
31191: LD_VAR 0 9
31195: PPUSH
31196: CALL_OW 488
31200: NOT
31201: IFFALSE 31205
// exit ;
31203: GO 31312
// ComAnimCustom ( unit , 1 ) ;
31205: LD_VAR 0 1
31209: PPUSH
31210: LD_INT 1
31212: PPUSH
31213: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31217: LD_VAR 0 8
31221: PPUSH
31222: LD_VAR 0 9
31226: PPUSH
31227: LD_VAR 0 6
31231: PPUSH
31232: LD_VAR 0 7
31236: PPUSH
31237: CALL_OW 330
// repeat wait ( 1 ) ;
31241: LD_INT 1
31243: PPUSH
31244: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL_OW 316
31257: PUSH
31258: LD_VAR 0 1
31262: PPUSH
31263: CALL_OW 314
31267: OR
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 302
31278: NOT
31279: OR
31280: PUSH
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 301
31290: OR
31291: IFFALSE 31241
// RemoveSeeing ( _x , _y , side ) ;
31293: LD_VAR 0 8
31297: PPUSH
31298: LD_VAR 0 9
31302: PPUSH
31303: LD_VAR 0 6
31307: PPUSH
31308: CALL_OW 331
// end ; end_of_file
31312: LD_VAR 0 4
31316: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31317: LD_INT 0
31319: PPUSH
31320: PPUSH
// if exist_mode then
31321: LD_VAR 0 2
31325: IFFALSE 31350
// unit := CreateCharacter ( prefix & ident ) else
31327: LD_ADDR_VAR 0 5
31331: PUSH
31332: LD_VAR 0 3
31336: PUSH
31337: LD_VAR 0 1
31341: STR
31342: PPUSH
31343: CALL_OW 34
31347: ST_TO_ADDR
31348: GO 31365
// unit := NewCharacter ( ident ) ;
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 25
31364: ST_TO_ADDR
// result := unit ;
31365: LD_ADDR_VAR 0 4
31369: PUSH
31370: LD_VAR 0 5
31374: ST_TO_ADDR
// end ;
31375: LD_VAR 0 4
31379: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31380: LD_INT 0
31382: PPUSH
31383: PPUSH
// if not side or not nation then
31384: LD_VAR 0 1
31388: NOT
31389: PUSH
31390: LD_VAR 0 2
31394: NOT
31395: OR
31396: IFFALSE 31400
// exit ;
31398: GO 32168
// case nation of nation_american :
31400: LD_VAR 0 2
31404: PUSH
31405: LD_INT 1
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 31627
31413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31414: LD_ADDR_VAR 0 4
31418: PUSH
31419: LD_INT 35
31421: PUSH
31422: LD_INT 45
31424: PUSH
31425: LD_INT 46
31427: PUSH
31428: LD_INT 47
31430: PUSH
31431: LD_INT 82
31433: PUSH
31434: LD_INT 83
31436: PUSH
31437: LD_INT 84
31439: PUSH
31440: LD_INT 85
31442: PUSH
31443: LD_INT 86
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 6
31454: PUSH
31455: LD_INT 15
31457: PUSH
31458: LD_INT 16
31460: PUSH
31461: LD_INT 7
31463: PUSH
31464: LD_INT 12
31466: PUSH
31467: LD_INT 13
31469: PUSH
31470: LD_INT 10
31472: PUSH
31473: LD_INT 14
31475: PUSH
31476: LD_INT 20
31478: PUSH
31479: LD_INT 21
31481: PUSH
31482: LD_INT 22
31484: PUSH
31485: LD_INT 25
31487: PUSH
31488: LD_INT 32
31490: PUSH
31491: LD_INT 27
31493: PUSH
31494: LD_INT 36
31496: PUSH
31497: LD_INT 69
31499: PUSH
31500: LD_INT 39
31502: PUSH
31503: LD_INT 34
31505: PUSH
31506: LD_INT 40
31508: PUSH
31509: LD_INT 48
31511: PUSH
31512: LD_INT 49
31514: PUSH
31515: LD_INT 50
31517: PUSH
31518: LD_INT 51
31520: PUSH
31521: LD_INT 52
31523: PUSH
31524: LD_INT 53
31526: PUSH
31527: LD_INT 54
31529: PUSH
31530: LD_INT 55
31532: PUSH
31533: LD_INT 56
31535: PUSH
31536: LD_INT 57
31538: PUSH
31539: LD_INT 58
31541: PUSH
31542: LD_INT 59
31544: PUSH
31545: LD_INT 60
31547: PUSH
31548: LD_INT 61
31550: PUSH
31551: LD_INT 62
31553: PUSH
31554: LD_INT 80
31556: PUSH
31557: LD_INT 82
31559: PUSH
31560: LD_INT 83
31562: PUSH
31563: LD_INT 84
31565: PUSH
31566: LD_INT 85
31568: PUSH
31569: LD_INT 86
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
31625: GO 32092
31627: LD_INT 2
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31861
31635: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31636: LD_ADDR_VAR 0 4
31640: PUSH
31641: LD_INT 35
31643: PUSH
31644: LD_INT 45
31646: PUSH
31647: LD_INT 46
31649: PUSH
31650: LD_INT 47
31652: PUSH
31653: LD_INT 82
31655: PUSH
31656: LD_INT 83
31658: PUSH
31659: LD_INT 84
31661: PUSH
31662: LD_INT 85
31664: PUSH
31665: LD_INT 87
31667: PUSH
31668: LD_INT 70
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 11
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: LD_INT 4
31682: PUSH
31683: LD_INT 5
31685: PUSH
31686: LD_INT 6
31688: PUSH
31689: LD_INT 15
31691: PUSH
31692: LD_INT 18
31694: PUSH
31695: LD_INT 7
31697: PUSH
31698: LD_INT 17
31700: PUSH
31701: LD_INT 8
31703: PUSH
31704: LD_INT 20
31706: PUSH
31707: LD_INT 21
31709: PUSH
31710: LD_INT 22
31712: PUSH
31713: LD_INT 72
31715: PUSH
31716: LD_INT 26
31718: PUSH
31719: LD_INT 69
31721: PUSH
31722: LD_INT 39
31724: PUSH
31725: LD_INT 40
31727: PUSH
31728: LD_INT 41
31730: PUSH
31731: LD_INT 42
31733: PUSH
31734: LD_INT 43
31736: PUSH
31737: LD_INT 48
31739: PUSH
31740: LD_INT 49
31742: PUSH
31743: LD_INT 50
31745: PUSH
31746: LD_INT 51
31748: PUSH
31749: LD_INT 52
31751: PUSH
31752: LD_INT 53
31754: PUSH
31755: LD_INT 54
31757: PUSH
31758: LD_INT 55
31760: PUSH
31761: LD_INT 56
31763: PUSH
31764: LD_INT 60
31766: PUSH
31767: LD_INT 61
31769: PUSH
31770: LD_INT 62
31772: PUSH
31773: LD_INT 66
31775: PUSH
31776: LD_INT 67
31778: PUSH
31779: LD_INT 68
31781: PUSH
31782: LD_INT 81
31784: PUSH
31785: LD_INT 82
31787: PUSH
31788: LD_INT 83
31790: PUSH
31791: LD_INT 84
31793: PUSH
31794: LD_INT 85
31796: PUSH
31797: LD_INT 87
31799: PUSH
31800: LD_INT 88
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
31859: GO 32092
31861: LD_INT 3
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 32091
31869: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: LD_INT 46
31877: PUSH
31878: LD_INT 47
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 82
31889: PUSH
31890: LD_INT 83
31892: PUSH
31893: LD_INT 84
31895: PUSH
31896: LD_INT 85
31898: PUSH
31899: LD_INT 86
31901: PUSH
31902: LD_INT 11
31904: PUSH
31905: LD_INT 9
31907: PUSH
31908: LD_INT 20
31910: PUSH
31911: LD_INT 19
31913: PUSH
31914: LD_INT 21
31916: PUSH
31917: LD_INT 24
31919: PUSH
31920: LD_INT 22
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 28
31928: PUSH
31929: LD_INT 29
31931: PUSH
31932: LD_INT 30
31934: PUSH
31935: LD_INT 31
31937: PUSH
31938: LD_INT 37
31940: PUSH
31941: LD_INT 38
31943: PUSH
31944: LD_INT 32
31946: PUSH
31947: LD_INT 27
31949: PUSH
31950: LD_INT 33
31952: PUSH
31953: LD_INT 69
31955: PUSH
31956: LD_INT 39
31958: PUSH
31959: LD_INT 34
31961: PUSH
31962: LD_INT 40
31964: PUSH
31965: LD_INT 71
31967: PUSH
31968: LD_INT 23
31970: PUSH
31971: LD_INT 44
31973: PUSH
31974: LD_INT 48
31976: PUSH
31977: LD_INT 49
31979: PUSH
31980: LD_INT 50
31982: PUSH
31983: LD_INT 51
31985: PUSH
31986: LD_INT 52
31988: PUSH
31989: LD_INT 53
31991: PUSH
31992: LD_INT 54
31994: PUSH
31995: LD_INT 55
31997: PUSH
31998: LD_INT 56
32000: PUSH
32001: LD_INT 57
32003: PUSH
32004: LD_INT 58
32006: PUSH
32007: LD_INT 59
32009: PUSH
32010: LD_INT 63
32012: PUSH
32013: LD_INT 64
32015: PUSH
32016: LD_INT 65
32018: PUSH
32019: LD_INT 82
32021: PUSH
32022: LD_INT 83
32024: PUSH
32025: LD_INT 84
32027: PUSH
32028: LD_INT 85
32030: PUSH
32031: LD_INT 86
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: ST_TO_ADDR
32089: GO 32092
32091: POP
// if state > - 1 and state < 3 then
32092: LD_VAR 0 3
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: GREATER
32101: PUSH
32102: LD_VAR 0 3
32106: PUSH
32107: LD_INT 3
32109: LESS
32110: AND
32111: IFFALSE 32168
// for i in result do
32113: LD_ADDR_VAR 0 5
32117: PUSH
32118: LD_VAR 0 4
32122: PUSH
32123: FOR_IN
32124: IFFALSE 32166
// if GetTech ( i , side ) <> state then
32126: LD_VAR 0 5
32130: PPUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 321
32140: PUSH
32141: LD_VAR 0 3
32145: NONEQUAL
32146: IFFALSE 32164
// result := result diff i ;
32148: LD_ADDR_VAR 0 4
32152: PUSH
32153: LD_VAR 0 4
32157: PUSH
32158: LD_VAR 0 5
32162: DIFF
32163: ST_TO_ADDR
32164: GO 32123
32166: POP
32167: POP
// end ;
32168: LD_VAR 0 4
32172: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32173: LD_INT 0
32175: PPUSH
32176: PPUSH
32177: PPUSH
// result := true ;
32178: LD_ADDR_VAR 0 3
32182: PUSH
32183: LD_INT 1
32185: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32186: LD_ADDR_VAR 0 5
32190: PUSH
32191: LD_VAR 0 2
32195: PPUSH
32196: CALL_OW 480
32200: ST_TO_ADDR
// if not tmp then
32201: LD_VAR 0 5
32205: NOT
32206: IFFALSE 32210
// exit ;
32208: GO 32259
// for i in tmp do
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_VAR 0 5
32219: PUSH
32220: FOR_IN
32221: IFFALSE 32257
// if GetTech ( i , side ) <> state_researched then
32223: LD_VAR 0 4
32227: PPUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 321
32237: PUSH
32238: LD_INT 2
32240: NONEQUAL
32241: IFFALSE 32255
// begin result := false ;
32243: LD_ADDR_VAR 0 3
32247: PUSH
32248: LD_INT 0
32250: ST_TO_ADDR
// exit ;
32251: POP
32252: POP
32253: GO 32259
// end ;
32255: GO 32220
32257: POP
32258: POP
// end ;
32259: LD_VAR 0 3
32263: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32264: LD_INT 0
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32279: LD_VAR 0 1
32283: NOT
32284: PUSH
32285: LD_VAR 0 1
32289: PPUSH
32290: CALL_OW 257
32294: PUSH
32295: LD_INT 9
32297: NONEQUAL
32298: OR
32299: IFFALSE 32303
// exit ;
32301: GO 32876
// side := GetSide ( unit ) ;
32303: LD_ADDR_VAR 0 9
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 255
32317: ST_TO_ADDR
// tech_space := tech_spacanom ;
32318: LD_ADDR_VAR 0 12
32322: PUSH
32323: LD_INT 29
32325: ST_TO_ADDR
// tech_time := tech_taurad ;
32326: LD_ADDR_VAR 0 13
32330: PUSH
32331: LD_INT 28
32333: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32334: LD_ADDR_VAR 0 11
32338: PUSH
32339: LD_VAR 0 1
32343: PPUSH
32344: CALL_OW 310
32348: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32349: LD_VAR 0 11
32353: PPUSH
32354: CALL_OW 247
32358: PUSH
32359: LD_INT 2
32361: EQUAL
32362: IFFALSE 32366
// exit ;
32364: GO 32876
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32366: LD_ADDR_VAR 0 8
32370: PUSH
32371: LD_INT 81
32373: PUSH
32374: LD_VAR 0 9
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 21
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// if not tmp then
32409: LD_VAR 0 8
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32876
// if in_unit then
32418: LD_VAR 0 11
32422: IFFALSE 32446
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32424: LD_ADDR_VAR 0 10
32428: PUSH
32429: LD_VAR 0 8
32433: PPUSH
32434: LD_VAR 0 11
32438: PPUSH
32439: CALL_OW 74
32443: ST_TO_ADDR
32444: GO 32466
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32446: LD_ADDR_VAR 0 10
32450: PUSH
32451: LD_VAR 0 8
32455: PPUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: CALL_OW 74
32465: ST_TO_ADDR
// if not enemy then
32466: LD_VAR 0 10
32470: NOT
32471: IFFALSE 32475
// exit ;
32473: GO 32876
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32475: LD_VAR 0 11
32479: PUSH
32480: LD_VAR 0 11
32484: PPUSH
32485: LD_VAR 0 10
32489: PPUSH
32490: CALL_OW 296
32494: PUSH
32495: LD_INT 13
32497: GREATER
32498: AND
32499: PUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: LD_VAR 0 10
32509: PPUSH
32510: CALL_OW 296
32514: PUSH
32515: LD_INT 12
32517: GREATER
32518: OR
32519: IFFALSE 32523
// exit ;
32521: GO 32876
// missile := [ 1 ] ;
32523: LD_ADDR_VAR 0 14
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32534: LD_VAR 0 9
32538: PPUSH
32539: LD_VAR 0 12
32543: PPUSH
32544: CALL_OW 325
32548: IFFALSE 32577
// missile := Replace ( missile , missile + 1 , 2 ) ;
32550: LD_ADDR_VAR 0 14
32554: PUSH
32555: LD_VAR 0 14
32559: PPUSH
32560: LD_VAR 0 14
32564: PUSH
32565: LD_INT 1
32567: PLUS
32568: PPUSH
32569: LD_INT 2
32571: PPUSH
32572: CALL_OW 1
32576: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32577: LD_VAR 0 9
32581: PPUSH
32582: LD_VAR 0 13
32586: PPUSH
32587: CALL_OW 325
32591: PUSH
32592: LD_VAR 0 10
32596: PPUSH
32597: CALL_OW 255
32601: PPUSH
32602: LD_VAR 0 13
32606: PPUSH
32607: CALL_OW 325
32611: NOT
32612: AND
32613: IFFALSE 32642
// missile := Replace ( missile , missile + 1 , 3 ) ;
32615: LD_ADDR_VAR 0 14
32619: PUSH
32620: LD_VAR 0 14
32624: PPUSH
32625: LD_VAR 0 14
32629: PUSH
32630: LD_INT 1
32632: PLUS
32633: PPUSH
32634: LD_INT 3
32636: PPUSH
32637: CALL_OW 1
32641: ST_TO_ADDR
// if missile < 2 then
32642: LD_VAR 0 14
32646: PUSH
32647: LD_INT 2
32649: LESS
32650: IFFALSE 32654
// exit ;
32652: GO 32876
// x := GetX ( enemy ) ;
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: LD_VAR 0 10
32663: PPUSH
32664: CALL_OW 250
32668: ST_TO_ADDR
// y := GetY ( enemy ) ;
32669: LD_ADDR_VAR 0 5
32673: PUSH
32674: LD_VAR 0 10
32678: PPUSH
32679: CALL_OW 251
32683: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32684: LD_ADDR_VAR 0 6
32688: PUSH
32689: LD_VAR 0 4
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PPUSH
32698: LD_INT 1
32700: PPUSH
32701: CALL_OW 12
32705: PLUS
32706: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32707: LD_ADDR_VAR 0 7
32711: PUSH
32712: LD_VAR 0 5
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PPUSH
32721: LD_INT 1
32723: PPUSH
32724: CALL_OW 12
32728: PLUS
32729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32730: LD_VAR 0 6
32734: PPUSH
32735: LD_VAR 0 7
32739: PPUSH
32740: CALL_OW 488
32744: NOT
32745: IFFALSE 32767
// begin _x := x ;
32747: LD_ADDR_VAR 0 6
32751: PUSH
32752: LD_VAR 0 4
32756: ST_TO_ADDR
// _y := y ;
32757: LD_ADDR_VAR 0 7
32761: PUSH
32762: LD_VAR 0 5
32766: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_INT 1
32774: PPUSH
32775: LD_VAR 0 14
32779: PPUSH
32780: CALL_OW 12
32784: ST_TO_ADDR
// case i of 1 :
32785: LD_VAR 0 3
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32815
32798: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32799: LD_VAR 0 1
32803: PPUSH
32804: LD_VAR 0 10
32808: PPUSH
32809: CALL_OW 115
32813: GO 32876
32815: LD_INT 2
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32845
32823: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32824: LD_VAR 0 1
32828: PPUSH
32829: LD_VAR 0 6
32833: PPUSH
32834: LD_VAR 0 7
32838: PPUSH
32839: CALL_OW 153
32843: GO 32876
32845: LD_INT 3
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32875
32853: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32854: LD_VAR 0 1
32858: PPUSH
32859: LD_VAR 0 6
32863: PPUSH
32864: LD_VAR 0 7
32868: PPUSH
32869: CALL_OW 154
32873: GO 32876
32875: POP
// end ;
32876: LD_VAR 0 2
32880: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32881: LD_INT 0
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
// if not unit or not building then
32889: LD_VAR 0 1
32893: NOT
32894: PUSH
32895: LD_VAR 0 2
32899: NOT
32900: OR
32901: IFFALSE 32905
// exit ;
32903: GO 33063
// x := GetX ( building ) ;
32905: LD_ADDR_VAR 0 5
32909: PUSH
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL_OW 250
32919: ST_TO_ADDR
// y := GetY ( building ) ;
32920: LD_ADDR_VAR 0 6
32924: PUSH
32925: LD_VAR 0 2
32929: PPUSH
32930: CALL_OW 251
32934: ST_TO_ADDR
// for i = 0 to 5 do
32935: LD_ADDR_VAR 0 4
32939: PUSH
32940: DOUBLE
32941: LD_INT 0
32943: DEC
32944: ST_TO_ADDR
32945: LD_INT 5
32947: PUSH
32948: FOR_TO
32949: IFFALSE 33061
// begin _x := ShiftX ( x , i , 3 ) ;
32951: LD_ADDR_VAR 0 7
32955: PUSH
32956: LD_VAR 0 5
32960: PPUSH
32961: LD_VAR 0 4
32965: PPUSH
32966: LD_INT 3
32968: PPUSH
32969: CALL_OW 272
32973: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32974: LD_ADDR_VAR 0 8
32978: PUSH
32979: LD_VAR 0 6
32983: PPUSH
32984: LD_VAR 0 4
32988: PPUSH
32989: LD_INT 3
32991: PPUSH
32992: CALL_OW 273
32996: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32997: LD_VAR 0 7
33001: PPUSH
33002: LD_VAR 0 8
33006: PPUSH
33007: CALL_OW 488
33011: NOT
33012: IFFALSE 33016
// continue ;
33014: GO 32948
// if HexInfo ( _x , _y ) = 0 then
33016: LD_VAR 0 7
33020: PPUSH
33021: LD_VAR 0 8
33025: PPUSH
33026: CALL_OW 428
33030: PUSH
33031: LD_INT 0
33033: EQUAL
33034: IFFALSE 33059
// begin ComMoveXY ( unit , _x , _y ) ;
33036: LD_VAR 0 1
33040: PPUSH
33041: LD_VAR 0 7
33045: PPUSH
33046: LD_VAR 0 8
33050: PPUSH
33051: CALL_OW 111
// exit ;
33055: POP
33056: POP
33057: GO 33063
// end ; end ;
33059: GO 32948
33061: POP
33062: POP
// end ;
33063: LD_VAR 0 3
33067: RET
// export function ScanBase ( side , base_area ) ; begin
33068: LD_INT 0
33070: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_VAR 0 2
33080: PPUSH
33081: LD_INT 81
33083: PUSH
33084: LD_VAR 0 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PPUSH
33093: CALL_OW 70
33097: ST_TO_ADDR
// end ;
33098: LD_VAR 0 3
33102: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33103: LD_INT 0
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
// result := false ;
33109: LD_ADDR_VAR 0 2
33113: PUSH
33114: LD_INT 0
33116: ST_TO_ADDR
// side := GetSide ( unit ) ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 255
33131: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33132: LD_ADDR_VAR 0 4
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 248
33146: ST_TO_ADDR
// case nat of 1 :
33147: LD_VAR 0 4
33151: PUSH
33152: LD_INT 1
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33171
33160: POP
// tech := tech_lassight ; 2 :
33161: LD_ADDR_VAR 0 5
33165: PUSH
33166: LD_INT 12
33168: ST_TO_ADDR
33169: GO 33210
33171: LD_INT 2
33173: DOUBLE
33174: EQUAL
33175: IFTRUE 33179
33177: GO 33190
33179: POP
// tech := tech_mortar ; 3 :
33180: LD_ADDR_VAR 0 5
33184: PUSH
33185: LD_INT 41
33187: ST_TO_ADDR
33188: GO 33210
33190: LD_INT 3
33192: DOUBLE
33193: EQUAL
33194: IFTRUE 33198
33196: GO 33209
33198: POP
// tech := tech_bazooka ; end ;
33199: LD_ADDR_VAR 0 5
33203: PUSH
33204: LD_INT 44
33206: ST_TO_ADDR
33207: GO 33210
33209: POP
// if Researched ( side , tech ) then
33210: LD_VAR 0 3
33214: PPUSH
33215: LD_VAR 0 5
33219: PPUSH
33220: CALL_OW 325
33224: IFFALSE 33251
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33226: LD_ADDR_VAR 0 2
33230: PUSH
33231: LD_INT 5
33233: PUSH
33234: LD_INT 8
33236: PUSH
33237: LD_INT 9
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: PUSH
33245: LD_VAR 0 4
33249: ARRAY
33250: ST_TO_ADDR
// end ;
33251: LD_VAR 0 2
33255: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33256: LD_INT 0
33258: PPUSH
33259: PPUSH
33260: PPUSH
// if not mines then
33261: LD_VAR 0 2
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33414
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_INT 81
33277: PUSH
33278: LD_VAR 0 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: LD_INT 21
33292: PUSH
33293: LD_INT 3
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 69
33312: ST_TO_ADDR
// for i in mines do
33313: LD_ADDR_VAR 0 4
33317: PUSH
33318: LD_VAR 0 2
33322: PUSH
33323: FOR_IN
33324: IFFALSE 33412
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33326: LD_VAR 0 4
33330: PUSH
33331: LD_INT 1
33333: ARRAY
33334: PPUSH
33335: LD_VAR 0 4
33339: PUSH
33340: LD_INT 2
33342: ARRAY
33343: PPUSH
33344: CALL_OW 458
33348: NOT
33349: IFFALSE 33353
// continue ;
33351: GO 33323
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33353: LD_VAR 0 4
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: PPUSH
33362: LD_VAR 0 4
33366: PUSH
33367: LD_INT 2
33369: ARRAY
33370: PPUSH
33371: CALL_OW 428
33375: PUSH
33376: LD_VAR 0 5
33380: IN
33381: IFFALSE 33410
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33383: LD_VAR 0 4
33387: PUSH
33388: LD_INT 1
33390: ARRAY
33391: PPUSH
33392: LD_VAR 0 4
33396: PUSH
33397: LD_INT 2
33399: ARRAY
33400: PPUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: CALL_OW 456
// end ;
33410: GO 33323
33412: POP
33413: POP
// end ;
33414: LD_VAR 0 3
33418: RET
// export function Count ( array ) ; var i ; begin
33419: LD_INT 0
33421: PPUSH
33422: PPUSH
// result := 0 ;
33423: LD_ADDR_VAR 0 2
33427: PUSH
33428: LD_INT 0
33430: ST_TO_ADDR
// for i in array do
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_VAR 0 1
33440: PUSH
33441: FOR_IN
33442: IFFALSE 33466
// if i then
33444: LD_VAR 0 3
33448: IFFALSE 33464
// result := result + 1 ;
33450: LD_ADDR_VAR 0 2
33454: PUSH
33455: LD_VAR 0 2
33459: PUSH
33460: LD_INT 1
33462: PLUS
33463: ST_TO_ADDR
33464: GO 33441
33466: POP
33467: POP
// end ;
33468: LD_VAR 0 2
33472: RET
// export function IsEmpty ( building ) ; begin
33473: LD_INT 0
33475: PPUSH
// if not building then
33476: LD_VAR 0 1
33480: NOT
33481: IFFALSE 33485
// exit ;
33483: GO 33528
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33485: LD_ADDR_VAR 0 2
33489: PUSH
33490: LD_VAR 0 1
33494: PUSH
33495: LD_INT 22
33497: PUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 255
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 58
33514: PUSH
33515: EMPTY
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 69
33526: IN
33527: ST_TO_ADDR
// end ;
33528: LD_VAR 0 2
33532: RET
// export function IsNotFull ( building ) ; var places ; begin
33533: LD_INT 0
33535: PPUSH
33536: PPUSH
// if not building then
33537: LD_VAR 0 1
33541: NOT
33542: IFFALSE 33546
// exit ;
33544: GO 33717
// result := false ;
33546: LD_ADDR_VAR 0 2
33550: PUSH
33551: LD_INT 0
33553: ST_TO_ADDR
// places := 0 ;
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_INT 0
33561: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 266
33571: PUSH
33572: LD_INT 0
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33634
33578: LD_INT 1
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33634
33584: LD_INT 6
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33634
33590: LD_INT 7
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33634
33596: LD_INT 8
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33634
33602: LD_INT 4
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33634
33608: LD_INT 5
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33634
33614: LD_INT 2
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33634
33620: LD_INT 3
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33634
33626: LD_INT 35
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33645
33634: POP
// places := 6 ; b_bunker , b_breastwork :
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_INT 6
33642: ST_TO_ADDR
33643: GO 33690
33645: LD_INT 32
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33659
33651: LD_INT 31
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33670
33659: POP
// places := 1 ; b_control_tower :
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 1
33667: ST_TO_ADDR
33668: GO 33690
33670: LD_INT 36
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33689
33678: POP
// places := 3 ; end ;
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 3
33686: ST_TO_ADDR
33687: GO 33690
33689: POP
// if places then
33690: LD_VAR 0 3
33694: IFFALSE 33717
// result := UnitsInside ( building ) < places ;
33696: LD_ADDR_VAR 0 2
33700: PUSH
33701: LD_VAR 0 1
33705: PPUSH
33706: CALL_OW 313
33710: PUSH
33711: LD_VAR 0 3
33715: LESS
33716: ST_TO_ADDR
// end ;
33717: LD_VAR 0 2
33721: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33722: LD_INT 0
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
// tmp := [ ] ;
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: EMPTY
33734: ST_TO_ADDR
// list := [ ] ;
33735: LD_ADDR_VAR 0 5
33739: PUSH
33740: EMPTY
33741: ST_TO_ADDR
// for i = 16 to 25 do
33742: LD_ADDR_VAR 0 4
33746: PUSH
33747: DOUBLE
33748: LD_INT 16
33750: DEC
33751: ST_TO_ADDR
33752: LD_INT 25
33754: PUSH
33755: FOR_TO
33756: IFFALSE 33829
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_VAR 0 3
33767: PUSH
33768: LD_INT 22
33770: PUSH
33771: LD_VAR 0 1
33775: PPUSH
33776: CALL_OW 255
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 91
33787: PUSH
33788: LD_VAR 0 1
33792: PUSH
33793: LD_INT 6
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 30
33803: PUSH
33804: LD_VAR 0 4
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: EMPTY
33819: LIST
33820: PPUSH
33821: CALL_OW 69
33825: ADD
33826: ST_TO_ADDR
33827: GO 33755
33829: POP
33830: POP
// for i = 1 to tmp do
33831: LD_ADDR_VAR 0 4
33835: PUSH
33836: DOUBLE
33837: LD_INT 1
33839: DEC
33840: ST_TO_ADDR
33841: LD_VAR 0 3
33845: PUSH
33846: FOR_TO
33847: IFFALSE 33935
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33849: LD_ADDR_VAR 0 5
33853: PUSH
33854: LD_VAR 0 5
33858: PUSH
33859: LD_VAR 0 3
33863: PUSH
33864: LD_VAR 0 4
33868: ARRAY
33869: PPUSH
33870: CALL_OW 266
33874: PUSH
33875: LD_VAR 0 3
33879: PUSH
33880: LD_VAR 0 4
33884: ARRAY
33885: PPUSH
33886: CALL_OW 250
33890: PUSH
33891: LD_VAR 0 3
33895: PUSH
33896: LD_VAR 0 4
33900: ARRAY
33901: PPUSH
33902: CALL_OW 251
33906: PUSH
33907: LD_VAR 0 3
33911: PUSH
33912: LD_VAR 0 4
33916: ARRAY
33917: PPUSH
33918: CALL_OW 254
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: ADD
33932: ST_TO_ADDR
33933: GO 33846
33935: POP
33936: POP
// result := list ;
33937: LD_ADDR_VAR 0 2
33941: PUSH
33942: LD_VAR 0 5
33946: ST_TO_ADDR
// end ;
33947: LD_VAR 0 2
33951: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33952: LD_INT 0
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
// if not factory then
33961: LD_VAR 0 1
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 34563
// if control = control_apeman then
33970: LD_VAR 0 4
33974: PUSH
33975: LD_INT 5
33977: EQUAL
33978: IFFALSE 34087
// begin tmp := UnitsInside ( factory ) ;
33980: LD_ADDR_VAR 0 8
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 313
33994: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33995: LD_VAR 0 8
33999: PPUSH
34000: LD_INT 25
34002: PUSH
34003: LD_INT 12
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PPUSH
34010: CALL_OW 72
34014: NOT
34015: IFFALSE 34025
// control := control_manual ;
34017: LD_ADDR_VAR 0 4
34021: PUSH
34022: LD_INT 1
34024: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL 33722 0 1
34039: ST_TO_ADDR
// if tmp then
34040: LD_VAR 0 8
34044: IFFALSE 34087
// begin for i in tmp do
34046: LD_ADDR_VAR 0 7
34050: PUSH
34051: LD_VAR 0 8
34055: PUSH
34056: FOR_IN
34057: IFFALSE 34085
// if i [ 1 ] = b_ext_radio then
34059: LD_VAR 0 7
34063: PUSH
34064: LD_INT 1
34066: ARRAY
34067: PUSH
34068: LD_INT 22
34070: EQUAL
34071: IFFALSE 34083
// begin control := control_remote ;
34073: LD_ADDR_VAR 0 4
34077: PUSH
34078: LD_INT 2
34080: ST_TO_ADDR
// break ;
34081: GO 34085
// end ;
34083: GO 34056
34085: POP
34086: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34087: LD_VAR 0 1
34091: PPUSH
34092: LD_VAR 0 2
34096: PPUSH
34097: LD_VAR 0 3
34101: PPUSH
34102: LD_VAR 0 4
34106: PPUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: CALL_OW 448
34116: IFFALSE 34151
// begin result := [ chassis , engine , control , weapon ] ;
34118: LD_ADDR_VAR 0 6
34122: PUSH
34123: LD_VAR 0 2
34127: PUSH
34128: LD_VAR 0 3
34132: PUSH
34133: LD_VAR 0 4
34137: PUSH
34138: LD_VAR 0 5
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
// exit ;
34149: GO 34563
// end ; _chassis := AvailableChassisList ( factory ) ;
34151: LD_ADDR_VAR 0 9
34155: PUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 475
34165: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34166: LD_ADDR_VAR 0 11
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 476
34180: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34181: LD_ADDR_VAR 0 12
34185: PUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 477
34195: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34196: LD_ADDR_VAR 0 10
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 478
34210: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34211: LD_VAR 0 9
34215: NOT
34216: PUSH
34217: LD_VAR 0 11
34221: NOT
34222: OR
34223: PUSH
34224: LD_VAR 0 12
34228: NOT
34229: OR
34230: PUSH
34231: LD_VAR 0 10
34235: NOT
34236: OR
34237: IFFALSE 34272
// begin result := [ chassis , engine , control , weapon ] ;
34239: LD_ADDR_VAR 0 6
34243: PUSH
34244: LD_VAR 0 2
34248: PUSH
34249: LD_VAR 0 3
34253: PUSH
34254: LD_VAR 0 4
34258: PUSH
34259: LD_VAR 0 5
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// exit ;
34270: GO 34563
// end ; if not chassis in _chassis then
34272: LD_VAR 0 2
34276: PUSH
34277: LD_VAR 0 9
34281: IN
34282: NOT
34283: IFFALSE 34309
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34285: LD_ADDR_VAR 0 2
34289: PUSH
34290: LD_VAR 0 9
34294: PUSH
34295: LD_INT 1
34297: PPUSH
34298: LD_VAR 0 9
34302: PPUSH
34303: CALL_OW 12
34307: ARRAY
34308: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34309: LD_VAR 0 2
34313: PPUSH
34314: LD_VAR 0 3
34318: PPUSH
34319: CALL 34568 0 2
34323: NOT
34324: IFFALSE 34383
// repeat engine := _engine [ 1 ] ;
34326: LD_ADDR_VAR 0 3
34330: PUSH
34331: LD_VAR 0 11
34335: PUSH
34336: LD_INT 1
34338: ARRAY
34339: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34340: LD_ADDR_VAR 0 11
34344: PUSH
34345: LD_VAR 0 11
34349: PPUSH
34350: LD_INT 1
34352: PPUSH
34353: CALL_OW 3
34357: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 3
34367: PPUSH
34368: CALL 34568 0 2
34372: PUSH
34373: LD_VAR 0 11
34377: PUSH
34378: EMPTY
34379: EQUAL
34380: OR
34381: IFFALSE 34326
// if not control in _control then
34383: LD_VAR 0 4
34387: PUSH
34388: LD_VAR 0 12
34392: IN
34393: NOT
34394: IFFALSE 34420
// control := _control [ rand ( 1 , _control ) ] ;
34396: LD_ADDR_VAR 0 4
34400: PUSH
34401: LD_VAR 0 12
34405: PUSH
34406: LD_INT 1
34408: PPUSH
34409: LD_VAR 0 12
34413: PPUSH
34414: CALL_OW 12
34418: ARRAY
34419: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34420: LD_VAR 0 2
34424: PPUSH
34425: LD_VAR 0 5
34429: PPUSH
34430: CALL 34788 0 2
34434: NOT
34435: IFFALSE 34494
// repeat weapon := _weapon [ 1 ] ;
34437: LD_ADDR_VAR 0 5
34441: PUSH
34442: LD_VAR 0 10
34446: PUSH
34447: LD_INT 1
34449: ARRAY
34450: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34451: LD_ADDR_VAR 0 10
34455: PUSH
34456: LD_VAR 0 10
34460: PPUSH
34461: LD_INT 1
34463: PPUSH
34464: CALL_OW 3
34468: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34469: LD_VAR 0 2
34473: PPUSH
34474: LD_VAR 0 5
34478: PPUSH
34479: CALL 34788 0 2
34483: PUSH
34484: LD_VAR 0 10
34488: PUSH
34489: EMPTY
34490: EQUAL
34491: OR
34492: IFFALSE 34437
// result := [ ] ;
34494: LD_ADDR_VAR 0 6
34498: PUSH
34499: EMPTY
34500: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34501: LD_VAR 0 1
34505: PPUSH
34506: LD_VAR 0 2
34510: PPUSH
34511: LD_VAR 0 3
34515: PPUSH
34516: LD_VAR 0 4
34520: PPUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: CALL_OW 448
34530: IFFALSE 34563
// result := [ chassis , engine , control , weapon ] ;
34532: LD_ADDR_VAR 0 6
34536: PUSH
34537: LD_VAR 0 2
34541: PUSH
34542: LD_VAR 0 3
34546: PUSH
34547: LD_VAR 0 4
34551: PUSH
34552: LD_VAR 0 5
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
// end ;
34563: LD_VAR 0 6
34567: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34568: LD_INT 0
34570: PPUSH
// if not chassis or not engine then
34571: LD_VAR 0 1
34575: NOT
34576: PUSH
34577: LD_VAR 0 2
34581: NOT
34582: OR
34583: IFFALSE 34587
// exit ;
34585: GO 34783
// case engine of engine_solar :
34587: LD_VAR 0 2
34591: PUSH
34592: LD_INT 2
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34638
34600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_INT 11
34608: PUSH
34609: LD_INT 12
34611: PUSH
34612: LD_INT 13
34614: PUSH
34615: LD_INT 14
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
34636: GO 34767
34638: LD_INT 1
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34708
34646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34647: LD_ADDR_VAR 0 3
34651: PUSH
34652: LD_INT 11
34654: PUSH
34655: LD_INT 12
34657: PUSH
34658: LD_INT 13
34660: PUSH
34661: LD_INT 14
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: LD_INT 4
34675: PUSH
34676: LD_INT 5
34678: PUSH
34679: LD_INT 21
34681: PUSH
34682: LD_INT 23
34684: PUSH
34685: LD_INT 22
34687: PUSH
34688: LD_INT 24
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
34706: GO 34767
34708: LD_INT 3
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34766
34716: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 13
34724: PUSH
34725: LD_INT 14
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: LD_INT 4
34736: PUSH
34737: LD_INT 5
34739: PUSH
34740: LD_INT 21
34742: PUSH
34743: LD_INT 22
34745: PUSH
34746: LD_INT 23
34748: PUSH
34749: LD_INT 24
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
34764: GO 34767
34766: POP
// result := ( chassis in result ) ;
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_VAR 0 1
34776: PUSH
34777: LD_VAR 0 3
34781: IN
34782: ST_TO_ADDR
// end ;
34783: LD_VAR 0 3
34787: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34788: LD_INT 0
34790: PPUSH
// if not chassis or not weapon then
34791: LD_VAR 0 1
34795: NOT
34796: PUSH
34797: LD_VAR 0 2
34801: NOT
34802: OR
34803: IFFALSE 34807
// exit ;
34805: GO 35869
// case weapon of us_machine_gun :
34807: LD_VAR 0 2
34811: PUSH
34812: LD_INT 2
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 34850
34820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35853
34850: LD_INT 3
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34888
34858: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: LD_INT 5
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
34886: GO 35853
34888: LD_INT 11
34890: DOUBLE
34891: EQUAL
34892: IFTRUE 34896
34894: GO 34926
34896: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34897: LD_ADDR_VAR 0 3
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
34924: GO 35853
34926: LD_INT 4
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34960
34934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35853
34960: LD_INT 5
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34994
34968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35853
34994: LD_INT 9
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35028
35002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: LD_INT 4
35016: PUSH
35017: LD_INT 5
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
35026: GO 35853
35028: LD_INT 7
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35062
35036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 4
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 35853
35062: LD_INT 12
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35096
35070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: LD_INT 4
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35853
35096: LD_INT 13
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35130
35104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: LD_INT 5
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
35128: GO 35853
35130: LD_INT 14
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35156
35138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 4
35146: PUSH
35147: LD_INT 5
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: ST_TO_ADDR
35154: GO 35853
35156: LD_INT 6
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35182
35164: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_INT 4
35172: PUSH
35173: LD_INT 5
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: ST_TO_ADDR
35180: GO 35853
35182: LD_INT 10
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35208
35190: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35191: LD_ADDR_VAR 0 3
35195: PUSH
35196: LD_INT 4
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35853
35208: LD_INT 22
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35242
35216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 11
35224: PUSH
35225: LD_INT 12
35227: PUSH
35228: LD_INT 13
35230: PUSH
35231: LD_INT 14
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35853
35242: LD_INT 23
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35276
35250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 11
35258: PUSH
35259: LD_INT 12
35261: PUSH
35262: LD_INT 13
35264: PUSH
35265: LD_INT 14
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
35274: GO 35853
35276: LD_INT 24
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35310
35284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_INT 11
35292: PUSH
35293: LD_INT 12
35295: PUSH
35296: LD_INT 13
35298: PUSH
35299: LD_INT 14
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
35308: GO 35853
35310: LD_INT 30
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35344
35318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35319: LD_ADDR_VAR 0 3
35323: PUSH
35324: LD_INT 11
35326: PUSH
35327: LD_INT 12
35329: PUSH
35330: LD_INT 13
35332: PUSH
35333: LD_INT 14
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: ST_TO_ADDR
35342: GO 35853
35344: LD_INT 25
35346: DOUBLE
35347: EQUAL
35348: IFTRUE 35352
35350: GO 35370
35352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35353: LD_ADDR_VAR 0 3
35357: PUSH
35358: LD_INT 13
35360: PUSH
35361: LD_INT 14
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: ST_TO_ADDR
35368: GO 35853
35370: LD_INT 27
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35378
35376: GO 35396
35378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35379: LD_ADDR_VAR 0 3
35383: PUSH
35384: LD_INT 13
35386: PUSH
35387: LD_INT 14
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: ST_TO_ADDR
35394: GO 35853
35396: LD_EXP 26
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35406
35404: GO 35432
35406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 11
35414: PUSH
35415: LD_INT 12
35417: PUSH
35418: LD_INT 13
35420: PUSH
35421: LD_INT 14
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
35430: GO 35853
35432: LD_INT 28
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35458
35440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_INT 13
35448: PUSH
35449: LD_INT 14
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 35853
35458: LD_INT 29
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35484
35466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 13
35474: PUSH
35475: LD_INT 14
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: ST_TO_ADDR
35482: GO 35853
35484: LD_INT 31
35486: DOUBLE
35487: EQUAL
35488: IFTRUE 35492
35490: GO 35510
35492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35493: LD_ADDR_VAR 0 3
35497: PUSH
35498: LD_INT 13
35500: PUSH
35501: LD_INT 14
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: ST_TO_ADDR
35508: GO 35853
35510: LD_INT 26
35512: DOUBLE
35513: EQUAL
35514: IFTRUE 35518
35516: GO 35536
35518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35519: LD_ADDR_VAR 0 3
35523: PUSH
35524: LD_INT 13
35526: PUSH
35527: LD_INT 14
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: ST_TO_ADDR
35534: GO 35853
35536: LD_INT 42
35538: DOUBLE
35539: EQUAL
35540: IFTRUE 35544
35542: GO 35570
35544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35545: LD_ADDR_VAR 0 3
35549: PUSH
35550: LD_INT 21
35552: PUSH
35553: LD_INT 22
35555: PUSH
35556: LD_INT 23
35558: PUSH
35559: LD_INT 24
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: ST_TO_ADDR
35568: GO 35853
35570: LD_INT 43
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35578
35576: GO 35604
35578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35579: LD_ADDR_VAR 0 3
35583: PUSH
35584: LD_INT 21
35586: PUSH
35587: LD_INT 22
35589: PUSH
35590: LD_INT 23
35592: PUSH
35593: LD_INT 24
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
35602: GO 35853
35604: LD_INT 44
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35612
35610: GO 35638
35612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_INT 21
35620: PUSH
35621: LD_INT 22
35623: PUSH
35624: LD_INT 23
35626: PUSH
35627: LD_INT 24
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
35636: GO 35853
35638: LD_INT 45
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35646
35644: GO 35672
35646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 21
35654: PUSH
35655: LD_INT 22
35657: PUSH
35658: LD_INT 23
35660: PUSH
35661: LD_INT 24
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
35670: GO 35853
35672: LD_INT 49
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35706
35680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 21
35688: PUSH
35689: LD_INT 22
35691: PUSH
35692: LD_INT 23
35694: PUSH
35695: LD_INT 24
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
35704: GO 35853
35706: LD_INT 51
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35714
35712: GO 35740
35714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_INT 21
35722: PUSH
35723: LD_INT 22
35725: PUSH
35726: LD_INT 23
35728: PUSH
35729: LD_INT 24
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
35738: GO 35853
35740: LD_INT 52
35742: DOUBLE
35743: EQUAL
35744: IFTRUE 35748
35746: GO 35774
35748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35749: LD_ADDR_VAR 0 3
35753: PUSH
35754: LD_INT 21
35756: PUSH
35757: LD_INT 22
35759: PUSH
35760: LD_INT 23
35762: PUSH
35763: LD_INT 24
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
35772: GO 35853
35774: LD_INT 53
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35782
35780: GO 35800
35782: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35783: LD_ADDR_VAR 0 3
35787: PUSH
35788: LD_INT 23
35790: PUSH
35791: LD_INT 24
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: ST_TO_ADDR
35798: GO 35853
35800: LD_INT 46
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35826
35808: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35809: LD_ADDR_VAR 0 3
35813: PUSH
35814: LD_INT 23
35816: PUSH
35817: LD_INT 24
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: ST_TO_ADDR
35824: GO 35853
35826: LD_INT 47
35828: DOUBLE
35829: EQUAL
35830: IFTRUE 35834
35832: GO 35852
35834: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35835: LD_ADDR_VAR 0 3
35839: PUSH
35840: LD_INT 23
35842: PUSH
35843: LD_INT 24
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: ST_TO_ADDR
35850: GO 35853
35852: POP
// result := ( chassis in result ) ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_VAR 0 1
35862: PUSH
35863: LD_VAR 0 3
35867: IN
35868: ST_TO_ADDR
// end ;
35869: LD_VAR 0 3
35873: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35874: LD_INT 0
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
// result := array ;
35883: LD_ADDR_VAR 0 5
35887: PUSH
35888: LD_VAR 0 1
35892: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35893: LD_VAR 0 1
35897: NOT
35898: PUSH
35899: LD_VAR 0 2
35903: NOT
35904: OR
35905: PUSH
35906: LD_VAR 0 3
35910: NOT
35911: OR
35912: PUSH
35913: LD_VAR 0 2
35917: PUSH
35918: LD_VAR 0 1
35922: GREATER
35923: OR
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_VAR 0 1
35934: GREATER
35935: OR
35936: IFFALSE 35940
// exit ;
35938: GO 36236
// if direction then
35940: LD_VAR 0 4
35944: IFFALSE 36008
// begin d := 1 ;
35946: LD_ADDR_VAR 0 9
35950: PUSH
35951: LD_INT 1
35953: ST_TO_ADDR
// if i_from > i_to then
35954: LD_VAR 0 2
35958: PUSH
35959: LD_VAR 0 3
35963: GREATER
35964: IFFALSE 35990
// length := ( array - i_from ) + i_to else
35966: LD_ADDR_VAR 0 11
35970: PUSH
35971: LD_VAR 0 1
35975: PUSH
35976: LD_VAR 0 2
35980: MINUS
35981: PUSH
35982: LD_VAR 0 3
35986: PLUS
35987: ST_TO_ADDR
35988: GO 36006
// length := i_to - i_from ;
35990: LD_ADDR_VAR 0 11
35994: PUSH
35995: LD_VAR 0 3
35999: PUSH
36000: LD_VAR 0 2
36004: MINUS
36005: ST_TO_ADDR
// end else
36006: GO 36069
// begin d := - 1 ;
36008: LD_ADDR_VAR 0 9
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: ST_TO_ADDR
// if i_from > i_to then
36017: LD_VAR 0 2
36021: PUSH
36022: LD_VAR 0 3
36026: GREATER
36027: IFFALSE 36047
// length := i_from - i_to else
36029: LD_ADDR_VAR 0 11
36033: PUSH
36034: LD_VAR 0 2
36038: PUSH
36039: LD_VAR 0 3
36043: MINUS
36044: ST_TO_ADDR
36045: GO 36069
// length := ( array - i_to ) + i_from ;
36047: LD_ADDR_VAR 0 11
36051: PUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_VAR 0 3
36061: MINUS
36062: PUSH
36063: LD_VAR 0 2
36067: PLUS
36068: ST_TO_ADDR
// end ; if not length then
36069: LD_VAR 0 11
36073: NOT
36074: IFFALSE 36078
// exit ;
36076: GO 36236
// tmp := array ;
36078: LD_ADDR_VAR 0 10
36082: PUSH
36083: LD_VAR 0 1
36087: ST_TO_ADDR
// for i = 1 to length do
36088: LD_ADDR_VAR 0 6
36092: PUSH
36093: DOUBLE
36094: LD_INT 1
36096: DEC
36097: ST_TO_ADDR
36098: LD_VAR 0 11
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36224
// begin for j = 1 to array do
36106: LD_ADDR_VAR 0 7
36110: PUSH
36111: DOUBLE
36112: LD_INT 1
36114: DEC
36115: ST_TO_ADDR
36116: LD_VAR 0 1
36120: PUSH
36121: FOR_TO
36122: IFFALSE 36210
// begin k := j + d ;
36124: LD_ADDR_VAR 0 8
36128: PUSH
36129: LD_VAR 0 7
36133: PUSH
36134: LD_VAR 0 9
36138: PLUS
36139: ST_TO_ADDR
// if k > array then
36140: LD_VAR 0 8
36144: PUSH
36145: LD_VAR 0 1
36149: GREATER
36150: IFFALSE 36160
// k := 1 ;
36152: LD_ADDR_VAR 0 8
36156: PUSH
36157: LD_INT 1
36159: ST_TO_ADDR
// if not k then
36160: LD_VAR 0 8
36164: NOT
36165: IFFALSE 36177
// k := array ;
36167: LD_ADDR_VAR 0 8
36171: PUSH
36172: LD_VAR 0 1
36176: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36177: LD_ADDR_VAR 0 10
36181: PUSH
36182: LD_VAR 0 10
36186: PPUSH
36187: LD_VAR 0 8
36191: PPUSH
36192: LD_VAR 0 1
36196: PUSH
36197: LD_VAR 0 7
36201: ARRAY
36202: PPUSH
36203: CALL_OW 1
36207: ST_TO_ADDR
// end ;
36208: GO 36121
36210: POP
36211: POP
// array := tmp ;
36212: LD_ADDR_VAR 0 1
36216: PUSH
36217: LD_VAR 0 10
36221: ST_TO_ADDR
// end ;
36222: GO 36103
36224: POP
36225: POP
// result := array ;
36226: LD_ADDR_VAR 0 5
36230: PUSH
36231: LD_VAR 0 1
36235: ST_TO_ADDR
// end ;
36236: LD_VAR 0 5
36240: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36241: LD_INT 0
36243: PPUSH
36244: PPUSH
// result := 0 ;
36245: LD_ADDR_VAR 0 3
36249: PUSH
36250: LD_INT 0
36252: ST_TO_ADDR
// if not array or not value in array then
36253: LD_VAR 0 1
36257: NOT
36258: PUSH
36259: LD_VAR 0 2
36263: PUSH
36264: LD_VAR 0 1
36268: IN
36269: NOT
36270: OR
36271: IFFALSE 36275
// exit ;
36273: GO 36329
// for i = 1 to array do
36275: LD_ADDR_VAR 0 4
36279: PUSH
36280: DOUBLE
36281: LD_INT 1
36283: DEC
36284: ST_TO_ADDR
36285: LD_VAR 0 1
36289: PUSH
36290: FOR_TO
36291: IFFALSE 36327
// if value = array [ i ] then
36293: LD_VAR 0 2
36297: PUSH
36298: LD_VAR 0 1
36302: PUSH
36303: LD_VAR 0 4
36307: ARRAY
36308: EQUAL
36309: IFFALSE 36325
// begin result := i ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 4
36320: ST_TO_ADDR
// exit ;
36321: POP
36322: POP
36323: GO 36329
// end ;
36325: GO 36290
36327: POP
36328: POP
// end ;
36329: LD_VAR 0 3
36333: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36334: LD_INT 0
36336: PPUSH
// vc_chassis := chassis ;
36337: LD_ADDR_OWVAR 37
36341: PUSH
36342: LD_VAR 0 1
36346: ST_TO_ADDR
// vc_engine := engine ;
36347: LD_ADDR_OWVAR 39
36351: PUSH
36352: LD_VAR 0 2
36356: ST_TO_ADDR
// vc_control := control ;
36357: LD_ADDR_OWVAR 38
36361: PUSH
36362: LD_VAR 0 3
36366: ST_TO_ADDR
// vc_weapon := weapon ;
36367: LD_ADDR_OWVAR 40
36371: PUSH
36372: LD_VAR 0 4
36376: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36377: LD_ADDR_OWVAR 41
36381: PUSH
36382: LD_VAR 0 5
36386: ST_TO_ADDR
// end ;
36387: LD_VAR 0 6
36391: RET
// export function WantPlant ( unit ) ; var task ; begin
36392: LD_INT 0
36394: PPUSH
36395: PPUSH
// result := false ;
36396: LD_ADDR_VAR 0 2
36400: PUSH
36401: LD_INT 0
36403: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36404: LD_ADDR_VAR 0 3
36408: PUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: CALL_OW 437
36418: ST_TO_ADDR
// if task then
36419: LD_VAR 0 3
36423: IFFALSE 36451
// if task [ 1 ] [ 1 ] = p then
36425: LD_VAR 0 3
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PUSH
36434: LD_INT 1
36436: ARRAY
36437: PUSH
36438: LD_STRING p
36440: EQUAL
36441: IFFALSE 36451
// result := true ;
36443: LD_ADDR_VAR 0 2
36447: PUSH
36448: LD_INT 1
36450: ST_TO_ADDR
// end ;
36451: LD_VAR 0 2
36455: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36456: LD_INT 0
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
// if pos < 1 then
36462: LD_VAR 0 2
36466: PUSH
36467: LD_INT 1
36469: LESS
36470: IFFALSE 36474
// exit ;
36472: GO 36777
// if pos = 1 then
36474: LD_VAR 0 2
36478: PUSH
36479: LD_INT 1
36481: EQUAL
36482: IFFALSE 36515
// result := Replace ( arr , pos [ 1 ] , value ) else
36484: LD_ADDR_VAR 0 4
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: LD_VAR 0 2
36498: PUSH
36499: LD_INT 1
36501: ARRAY
36502: PPUSH
36503: LD_VAR 0 3
36507: PPUSH
36508: CALL_OW 1
36512: ST_TO_ADDR
36513: GO 36777
// begin tmp := arr ;
36515: LD_ADDR_VAR 0 6
36519: PUSH
36520: LD_VAR 0 1
36524: ST_TO_ADDR
// s_arr := [ tmp ] ;
36525: LD_ADDR_VAR 0 7
36529: PUSH
36530: LD_VAR 0 6
36534: PUSH
36535: EMPTY
36536: LIST
36537: ST_TO_ADDR
// for i = 1 to pos - 1 do
36538: LD_ADDR_VAR 0 5
36542: PUSH
36543: DOUBLE
36544: LD_INT 1
36546: DEC
36547: ST_TO_ADDR
36548: LD_VAR 0 2
36552: PUSH
36553: LD_INT 1
36555: MINUS
36556: PUSH
36557: FOR_TO
36558: IFFALSE 36603
// begin tmp := tmp [ pos [ i ] ] ;
36560: LD_ADDR_VAR 0 6
36564: PUSH
36565: LD_VAR 0 6
36569: PUSH
36570: LD_VAR 0 2
36574: PUSH
36575: LD_VAR 0 5
36579: ARRAY
36580: ARRAY
36581: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36582: LD_ADDR_VAR 0 7
36586: PUSH
36587: LD_VAR 0 7
36591: PUSH
36592: LD_VAR 0 6
36596: PUSH
36597: EMPTY
36598: LIST
36599: ADD
36600: ST_TO_ADDR
// end ;
36601: GO 36557
36603: POP
36604: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36605: LD_ADDR_VAR 0 6
36609: PUSH
36610: LD_VAR 0 6
36614: PPUSH
36615: LD_VAR 0 2
36619: PUSH
36620: LD_VAR 0 2
36624: ARRAY
36625: PPUSH
36626: LD_VAR 0 3
36630: PPUSH
36631: CALL_OW 1
36635: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36636: LD_ADDR_VAR 0 7
36640: PUSH
36641: LD_VAR 0 7
36645: PPUSH
36646: LD_VAR 0 7
36650: PPUSH
36651: LD_VAR 0 6
36655: PPUSH
36656: CALL_OW 1
36660: ST_TO_ADDR
// for i = s_arr downto 2 do
36661: LD_ADDR_VAR 0 5
36665: PUSH
36666: DOUBLE
36667: LD_VAR 0 7
36671: INC
36672: ST_TO_ADDR
36673: LD_INT 2
36675: PUSH
36676: FOR_DOWNTO
36677: IFFALSE 36761
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36679: LD_ADDR_VAR 0 6
36683: PUSH
36684: LD_VAR 0 7
36688: PUSH
36689: LD_VAR 0 5
36693: PUSH
36694: LD_INT 1
36696: MINUS
36697: ARRAY
36698: PPUSH
36699: LD_VAR 0 2
36703: PUSH
36704: LD_VAR 0 5
36708: PUSH
36709: LD_INT 1
36711: MINUS
36712: ARRAY
36713: PPUSH
36714: LD_VAR 0 7
36718: PUSH
36719: LD_VAR 0 5
36723: ARRAY
36724: PPUSH
36725: CALL_OW 1
36729: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: LD_VAR 0 7
36739: PPUSH
36740: LD_VAR 0 5
36744: PUSH
36745: LD_INT 1
36747: MINUS
36748: PPUSH
36749: LD_VAR 0 6
36753: PPUSH
36754: CALL_OW 1
36758: ST_TO_ADDR
// end ;
36759: GO 36676
36761: POP
36762: POP
// result := s_arr [ 1 ] ;
36763: LD_ADDR_VAR 0 4
36767: PUSH
36768: LD_VAR 0 7
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: ST_TO_ADDR
// end ; end ;
36777: LD_VAR 0 4
36781: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36782: LD_INT 0
36784: PPUSH
36785: PPUSH
// if not list then
36786: LD_VAR 0 1
36790: NOT
36791: IFFALSE 36795
// exit ;
36793: GO 36886
// i := list [ pos1 ] ;
36795: LD_ADDR_VAR 0 5
36799: PUSH
36800: LD_VAR 0 1
36804: PUSH
36805: LD_VAR 0 2
36809: ARRAY
36810: ST_TO_ADDR
// if not i then
36811: LD_VAR 0 5
36815: NOT
36816: IFFALSE 36820
// exit ;
36818: GO 36886
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36820: LD_ADDR_VAR 0 1
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 2
36834: PPUSH
36835: LD_VAR 0 1
36839: PUSH
36840: LD_VAR 0 3
36844: ARRAY
36845: PPUSH
36846: CALL_OW 1
36850: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36851: LD_ADDR_VAR 0 1
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: LD_VAR 0 3
36865: PPUSH
36866: LD_VAR 0 5
36870: PPUSH
36871: CALL_OW 1
36875: ST_TO_ADDR
// result := list ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_VAR 0 1
36885: ST_TO_ADDR
// end ;
36886: LD_VAR 0 4
36890: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36891: LD_INT 0
36893: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36894: LD_ADDR_VAR 0 5
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 250
36908: PPUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 251
36918: PPUSH
36919: LD_VAR 0 2
36923: PPUSH
36924: LD_VAR 0 3
36928: PPUSH
36929: LD_VAR 0 4
36933: PPUSH
36934: CALL 36944 0 5
36938: ST_TO_ADDR
// end ;
36939: LD_VAR 0 5
36943: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36944: LD_INT 0
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
// if not list then
36950: LD_VAR 0 3
36954: NOT
36955: IFFALSE 36959
// exit ;
36957: GO 37347
// result := [ ] ;
36959: LD_ADDR_VAR 0 6
36963: PUSH
36964: EMPTY
36965: ST_TO_ADDR
// for i in list do
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: LD_VAR 0 3
36975: PUSH
36976: FOR_IN
36977: IFFALSE 37179
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36979: LD_ADDR_VAR 0 9
36983: PUSH
36984: LD_VAR 0 7
36988: PPUSH
36989: LD_VAR 0 1
36993: PPUSH
36994: LD_VAR 0 2
36998: PPUSH
36999: CALL_OW 297
37003: ST_TO_ADDR
// if not result then
37004: LD_VAR 0 6
37008: NOT
37009: IFFALSE 37035
// result := [ [ i , tmp ] ] else
37011: LD_ADDR_VAR 0 6
37015: PUSH
37016: LD_VAR 0 7
37020: PUSH
37021: LD_VAR 0 9
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: EMPTY
37031: LIST
37032: ST_TO_ADDR
37033: GO 37177
// begin if result [ result ] [ 2 ] < tmp then
37035: LD_VAR 0 6
37039: PUSH
37040: LD_VAR 0 6
37044: ARRAY
37045: PUSH
37046: LD_INT 2
37048: ARRAY
37049: PUSH
37050: LD_VAR 0 9
37054: LESS
37055: IFFALSE 37097
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37057: LD_ADDR_VAR 0 6
37061: PUSH
37062: LD_VAR 0 6
37066: PPUSH
37067: LD_VAR 0 6
37071: PUSH
37072: LD_INT 1
37074: PLUS
37075: PPUSH
37076: LD_VAR 0 7
37080: PUSH
37081: LD_VAR 0 9
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PPUSH
37090: CALL_OW 2
37094: ST_TO_ADDR
37095: GO 37177
// for j = 1 to result do
37097: LD_ADDR_VAR 0 8
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_VAR 0 6
37111: PUSH
37112: FOR_TO
37113: IFFALSE 37175
// begin if tmp < result [ j ] [ 2 ] then
37115: LD_VAR 0 9
37119: PUSH
37120: LD_VAR 0 6
37124: PUSH
37125: LD_VAR 0 8
37129: ARRAY
37130: PUSH
37131: LD_INT 2
37133: ARRAY
37134: LESS
37135: IFFALSE 37173
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37137: LD_ADDR_VAR 0 6
37141: PUSH
37142: LD_VAR 0 6
37146: PPUSH
37147: LD_VAR 0 8
37151: PPUSH
37152: LD_VAR 0 7
37156: PUSH
37157: LD_VAR 0 9
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PPUSH
37166: CALL_OW 2
37170: ST_TO_ADDR
// break ;
37171: GO 37175
// end ; end ;
37173: GO 37112
37175: POP
37176: POP
// end ; end ;
37177: GO 36976
37179: POP
37180: POP
// if result and not asc then
37181: LD_VAR 0 6
37185: PUSH
37186: LD_VAR 0 4
37190: NOT
37191: AND
37192: IFFALSE 37267
// begin tmp := result ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_VAR 0 6
37203: ST_TO_ADDR
// for i = tmp downto 1 do
37204: LD_ADDR_VAR 0 7
37208: PUSH
37209: DOUBLE
37210: LD_VAR 0 9
37214: INC
37215: ST_TO_ADDR
37216: LD_INT 1
37218: PUSH
37219: FOR_DOWNTO
37220: IFFALSE 37265
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37222: LD_ADDR_VAR 0 6
37226: PUSH
37227: LD_VAR 0 6
37231: PPUSH
37232: LD_VAR 0 9
37236: PUSH
37237: LD_VAR 0 7
37241: MINUS
37242: PUSH
37243: LD_INT 1
37245: PLUS
37246: PPUSH
37247: LD_VAR 0 9
37251: PUSH
37252: LD_VAR 0 7
37256: ARRAY
37257: PPUSH
37258: CALL_OW 1
37262: ST_TO_ADDR
37263: GO 37219
37265: POP
37266: POP
// end ; tmp := [ ] ;
37267: LD_ADDR_VAR 0 9
37271: PUSH
37272: EMPTY
37273: ST_TO_ADDR
// if mode then
37274: LD_VAR 0 5
37278: IFFALSE 37347
// begin for i = 1 to result do
37280: LD_ADDR_VAR 0 7
37284: PUSH
37285: DOUBLE
37286: LD_INT 1
37288: DEC
37289: ST_TO_ADDR
37290: LD_VAR 0 6
37294: PUSH
37295: FOR_TO
37296: IFFALSE 37335
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_VAR 0 9
37307: PPUSH
37308: LD_VAR 0 7
37312: PPUSH
37313: LD_VAR 0 6
37317: PUSH
37318: LD_VAR 0 7
37322: ARRAY
37323: PUSH
37324: LD_INT 1
37326: ARRAY
37327: PPUSH
37328: CALL_OW 1
37332: ST_TO_ADDR
37333: GO 37295
37335: POP
37336: POP
// result := tmp ;
37337: LD_ADDR_VAR 0 6
37341: PUSH
37342: LD_VAR 0 9
37346: ST_TO_ADDR
// end ; end ;
37347: LD_VAR 0 6
37351: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37352: LD_INT 0
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37360: LD_ADDR_VAR 0 5
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// if not x or not y then
37382: LD_VAR 0 2
37386: NOT
37387: PUSH
37388: LD_VAR 0 3
37392: NOT
37393: OR
37394: IFFALSE 37398
// exit ;
37396: GO 39050
// if not range then
37398: LD_VAR 0 4
37402: NOT
37403: IFFALSE 37413
// range := 10 ;
37405: LD_ADDR_VAR 0 4
37409: PUSH
37410: LD_INT 10
37412: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37413: LD_ADDR_VAR 0 8
37417: PUSH
37418: LD_INT 81
37420: PUSH
37421: LD_VAR 0 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 92
37432: PUSH
37433: LD_VAR 0 2
37437: PUSH
37438: LD_VAR 0 3
37442: PUSH
37443: LD_VAR 0 4
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: LD_INT 21
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: PPUSH
37476: CALL_OW 69
37480: ST_TO_ADDR
// if not tmp then
37481: LD_VAR 0 8
37485: NOT
37486: IFFALSE 37490
// exit ;
37488: GO 39050
// for i in tmp do
37490: LD_ADDR_VAR 0 6
37494: PUSH
37495: LD_VAR 0 8
37499: PUSH
37500: FOR_IN
37501: IFFALSE 39025
// begin points := [ 0 , 0 , 0 ] ;
37503: LD_ADDR_VAR 0 9
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
// bpoints := 1 ;
37522: LD_ADDR_VAR 0 10
37526: PUSH
37527: LD_INT 1
37529: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL_OW 247
37539: PUSH
37540: LD_INT 1
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 38126
37548: POP
// begin if GetClass ( i ) = 1 then
37549: LD_VAR 0 6
37553: PPUSH
37554: CALL_OW 257
37558: PUSH
37559: LD_INT 1
37561: EQUAL
37562: IFFALSE 37583
// points := [ 10 , 5 , 3 ] ;
37564: LD_ADDR_VAR 0 9
37568: PUSH
37569: LD_INT 10
37571: PUSH
37572: LD_INT 5
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37583: LD_VAR 0 6
37587: PPUSH
37588: CALL_OW 257
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: LD_INT 4
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: IN
37607: IFFALSE 37628
// points := [ 3 , 2 , 1 ] ;
37609: LD_ADDR_VAR 0 9
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37628: LD_VAR 0 6
37632: PPUSH
37633: CALL_OW 257
37637: PUSH
37638: LD_INT 5
37640: EQUAL
37641: IFFALSE 37662
// points := [ 130 , 5 , 2 ] ;
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: LD_INT 130
37650: PUSH
37651: LD_INT 5
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37662: LD_VAR 0 6
37666: PPUSH
37667: CALL_OW 257
37671: PUSH
37672: LD_INT 8
37674: EQUAL
37675: IFFALSE 37696
// points := [ 35 , 35 , 30 ] ;
37677: LD_ADDR_VAR 0 9
37681: PUSH
37682: LD_INT 35
37684: PUSH
37685: LD_INT 35
37687: PUSH
37688: LD_INT 30
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37696: LD_VAR 0 6
37700: PPUSH
37701: CALL_OW 257
37705: PUSH
37706: LD_INT 9
37708: EQUAL
37709: IFFALSE 37730
// points := [ 20 , 55 , 40 ] ;
37711: LD_ADDR_VAR 0 9
37715: PUSH
37716: LD_INT 20
37718: PUSH
37719: LD_INT 55
37721: PUSH
37722: LD_INT 40
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37730: LD_VAR 0 6
37734: PPUSH
37735: CALL_OW 257
37739: PUSH
37740: LD_INT 12
37742: PUSH
37743: LD_INT 16
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: IN
37750: IFFALSE 37771
// points := [ 5 , 3 , 2 ] ;
37752: LD_ADDR_VAR 0 9
37756: PUSH
37757: LD_INT 5
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37771: LD_VAR 0 6
37775: PPUSH
37776: CALL_OW 257
37780: PUSH
37781: LD_INT 17
37783: EQUAL
37784: IFFALSE 37805
// points := [ 100 , 50 , 75 ] ;
37786: LD_ADDR_VAR 0 9
37790: PUSH
37791: LD_INT 100
37793: PUSH
37794: LD_INT 50
37796: PUSH
37797: LD_INT 75
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37805: LD_VAR 0 6
37809: PPUSH
37810: CALL_OW 257
37814: PUSH
37815: LD_INT 15
37817: EQUAL
37818: IFFALSE 37839
// points := [ 10 , 5 , 3 ] ;
37820: LD_ADDR_VAR 0 9
37824: PUSH
37825: LD_INT 10
37827: PUSH
37828: LD_INT 5
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37839: LD_VAR 0 6
37843: PPUSH
37844: CALL_OW 257
37848: PUSH
37849: LD_INT 14
37851: EQUAL
37852: IFFALSE 37873
// points := [ 10 , 0 , 0 ] ;
37854: LD_ADDR_VAR 0 9
37858: PUSH
37859: LD_INT 10
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37873: LD_VAR 0 6
37877: PPUSH
37878: CALL_OW 257
37882: PUSH
37883: LD_INT 11
37885: EQUAL
37886: IFFALSE 37907
// points := [ 30 , 10 , 5 ] ;
37888: LD_ADDR_VAR 0 9
37892: PUSH
37893: LD_INT 30
37895: PUSH
37896: LD_INT 10
37898: PUSH
37899: LD_INT 5
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37907: LD_VAR 0 1
37911: PPUSH
37912: LD_INT 5
37914: PPUSH
37915: CALL_OW 321
37919: PUSH
37920: LD_INT 2
37922: EQUAL
37923: IFFALSE 37940
// bpoints := bpoints * 1.8 ;
37925: LD_ADDR_VAR 0 10
37929: PUSH
37930: LD_VAR 0 10
37934: PUSH
37935: LD_REAL  1.80000000000000E+0000
37938: MUL
37939: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37940: LD_VAR 0 6
37944: PPUSH
37945: CALL_OW 257
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 4
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: IN
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_INT 51
37976: PPUSH
37977: CALL_OW 321
37981: PUSH
37982: LD_INT 2
37984: EQUAL
37985: AND
37986: IFFALSE 38003
// bpoints := bpoints * 1.2 ;
37988: LD_ADDR_VAR 0 10
37992: PUSH
37993: LD_VAR 0 10
37997: PUSH
37998: LD_REAL  1.20000000000000E+0000
38001: MUL
38002: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38003: LD_VAR 0 6
38007: PPUSH
38008: CALL_OW 257
38012: PUSH
38013: LD_INT 5
38015: PUSH
38016: LD_INT 7
38018: PUSH
38019: LD_INT 9
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: IN
38027: PUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: LD_INT 52
38035: PPUSH
38036: CALL_OW 321
38040: PUSH
38041: LD_INT 2
38043: EQUAL
38044: AND
38045: IFFALSE 38062
// bpoints := bpoints * 1.5 ;
38047: LD_ADDR_VAR 0 10
38051: PUSH
38052: LD_VAR 0 10
38056: PUSH
38057: LD_REAL  1.50000000000000E+0000
38060: MUL
38061: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38062: LD_VAR 0 1
38066: PPUSH
38067: LD_INT 66
38069: PPUSH
38070: CALL_OW 321
38074: PUSH
38075: LD_INT 2
38077: EQUAL
38078: IFFALSE 38095
// bpoints := bpoints * 1.1 ;
38080: LD_ADDR_VAR 0 10
38084: PUSH
38085: LD_VAR 0 10
38089: PUSH
38090: LD_REAL  1.10000000000000E+0000
38093: MUL
38094: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38095: LD_ADDR_VAR 0 10
38099: PUSH
38100: LD_VAR 0 10
38104: PUSH
38105: LD_VAR 0 6
38109: PPUSH
38110: LD_INT 1
38112: PPUSH
38113: CALL_OW 259
38117: PUSH
38118: LD_REAL  1.15000000000000E+0000
38121: MUL
38122: MUL
38123: ST_TO_ADDR
// end ; unit_vehicle :
38124: GO 38954
38126: LD_INT 2
38128: DOUBLE
38129: EQUAL
38130: IFTRUE 38134
38132: GO 38942
38134: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38135: LD_VAR 0 6
38139: PPUSH
38140: CALL_OW 264
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 42
38150: PUSH
38151: LD_INT 24
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: IN
38159: IFFALSE 38180
// points := [ 25 , 5 , 3 ] ;
38161: LD_ADDR_VAR 0 9
38165: PUSH
38166: LD_INT 25
38168: PUSH
38169: LD_INT 5
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38180: LD_VAR 0 6
38184: PPUSH
38185: CALL_OW 264
38189: PUSH
38190: LD_INT 4
38192: PUSH
38193: LD_INT 43
38195: PUSH
38196: LD_INT 25
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: IN
38204: IFFALSE 38225
// points := [ 40 , 15 , 5 ] ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_INT 40
38213: PUSH
38214: LD_INT 15
38216: PUSH
38217: LD_INT 5
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 264
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: LD_INT 23
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: IN
38245: IFFALSE 38266
// points := [ 7 , 25 , 8 ] ;
38247: LD_ADDR_VAR 0 9
38251: PUSH
38252: LD_INT 7
38254: PUSH
38255: LD_INT 25
38257: PUSH
38258: LD_INT 8
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38266: LD_VAR 0 6
38270: PPUSH
38271: CALL_OW 264
38275: PUSH
38276: LD_INT 5
38278: PUSH
38279: LD_INT 27
38281: PUSH
38282: LD_INT 44
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: IN
38290: IFFALSE 38311
// points := [ 14 , 50 , 16 ] ;
38292: LD_ADDR_VAR 0 9
38296: PUSH
38297: LD_INT 14
38299: PUSH
38300: LD_INT 50
38302: PUSH
38303: LD_INT 16
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38311: LD_VAR 0 6
38315: PPUSH
38316: CALL_OW 264
38320: PUSH
38321: LD_INT 6
38323: PUSH
38324: LD_INT 46
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: IN
38331: IFFALSE 38352
// points := [ 32 , 120 , 70 ] ;
38333: LD_ADDR_VAR 0 9
38337: PUSH
38338: LD_INT 32
38340: PUSH
38341: LD_INT 120
38343: PUSH
38344: LD_INT 70
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38352: LD_VAR 0 6
38356: PPUSH
38357: CALL_OW 264
38361: PUSH
38362: LD_INT 7
38364: PUSH
38365: LD_INT 28
38367: PUSH
38368: LD_INT 45
38370: PUSH
38371: LD_EXP 26
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: IN
38382: IFFALSE 38403
// points := [ 35 , 20 , 45 ] ;
38384: LD_ADDR_VAR 0 9
38388: PUSH
38389: LD_INT 35
38391: PUSH
38392: LD_INT 20
38394: PUSH
38395: LD_INT 45
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38403: LD_VAR 0 6
38407: PPUSH
38408: CALL_OW 264
38412: PUSH
38413: LD_INT 47
38415: PUSH
38416: EMPTY
38417: LIST
38418: IN
38419: IFFALSE 38440
// points := [ 67 , 45 , 75 ] ;
38421: LD_ADDR_VAR 0 9
38425: PUSH
38426: LD_INT 67
38428: PUSH
38429: LD_INT 45
38431: PUSH
38432: LD_INT 75
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38440: LD_VAR 0 6
38444: PPUSH
38445: CALL_OW 264
38449: PUSH
38450: LD_INT 26
38452: PUSH
38453: EMPTY
38454: LIST
38455: IN
38456: IFFALSE 38477
// points := [ 120 , 30 , 80 ] ;
38458: LD_ADDR_VAR 0 9
38462: PUSH
38463: LD_INT 120
38465: PUSH
38466: LD_INT 30
38468: PUSH
38469: LD_INT 80
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38477: LD_VAR 0 6
38481: PPUSH
38482: CALL_OW 264
38486: PUSH
38487: LD_INT 22
38489: PUSH
38490: EMPTY
38491: LIST
38492: IN
38493: IFFALSE 38514
// points := [ 40 , 1 , 1 ] ;
38495: LD_ADDR_VAR 0 9
38499: PUSH
38500: LD_INT 40
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38514: LD_VAR 0 6
38518: PPUSH
38519: CALL_OW 264
38523: PUSH
38524: LD_INT 29
38526: PUSH
38527: EMPTY
38528: LIST
38529: IN
38530: IFFALSE 38551
// points := [ 70 , 200 , 400 ] ;
38532: LD_ADDR_VAR 0 9
38536: PUSH
38537: LD_INT 70
38539: PUSH
38540: LD_INT 200
38542: PUSH
38543: LD_INT 400
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38551: LD_VAR 0 6
38555: PPUSH
38556: CALL_OW 264
38560: PUSH
38561: LD_INT 14
38563: PUSH
38564: LD_INT 53
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: IN
38571: IFFALSE 38592
// points := [ 40 , 10 , 20 ] ;
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: LD_INT 40
38580: PUSH
38581: LD_INT 10
38583: PUSH
38584: LD_INT 20
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38592: LD_VAR 0 6
38596: PPUSH
38597: CALL_OW 264
38601: PUSH
38602: LD_INT 9
38604: PUSH
38605: EMPTY
38606: LIST
38607: IN
38608: IFFALSE 38629
// points := [ 5 , 70 , 20 ] ;
38610: LD_ADDR_VAR 0 9
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: LD_INT 70
38620: PUSH
38621: LD_INT 20
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38629: LD_VAR 0 6
38633: PPUSH
38634: CALL_OW 264
38638: PUSH
38639: LD_INT 10
38641: PUSH
38642: EMPTY
38643: LIST
38644: IN
38645: IFFALSE 38666
// points := [ 35 , 110 , 70 ] ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_INT 35
38654: PUSH
38655: LD_INT 110
38657: PUSH
38658: LD_INT 70
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38666: LD_VAR 0 6
38670: PPUSH
38671: CALL_OW 265
38675: PUSH
38676: LD_INT 25
38678: EQUAL
38679: IFFALSE 38700
// points := [ 80 , 65 , 100 ] ;
38681: LD_ADDR_VAR 0 9
38685: PUSH
38686: LD_INT 80
38688: PUSH
38689: LD_INT 65
38691: PUSH
38692: LD_INT 100
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38700: LD_VAR 0 6
38704: PPUSH
38705: CALL_OW 263
38709: PUSH
38710: LD_INT 1
38712: EQUAL
38713: IFFALSE 38748
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38715: LD_ADDR_VAR 0 10
38719: PUSH
38720: LD_VAR 0 10
38724: PUSH
38725: LD_VAR 0 6
38729: PPUSH
38730: CALL_OW 311
38734: PPUSH
38735: LD_INT 3
38737: PPUSH
38738: CALL_OW 259
38742: PUSH
38743: LD_INT 4
38745: MUL
38746: MUL
38747: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38748: LD_VAR 0 6
38752: PPUSH
38753: CALL_OW 263
38757: PUSH
38758: LD_INT 2
38760: EQUAL
38761: IFFALSE 38812
// begin j := IsControledBy ( i ) ;
38763: LD_ADDR_VAR 0 7
38767: PUSH
38768: LD_VAR 0 6
38772: PPUSH
38773: CALL_OW 312
38777: ST_TO_ADDR
// if j then
38778: LD_VAR 0 7
38782: IFFALSE 38812
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38784: LD_ADDR_VAR 0 10
38788: PUSH
38789: LD_VAR 0 10
38793: PUSH
38794: LD_VAR 0 7
38798: PPUSH
38799: LD_INT 3
38801: PPUSH
38802: CALL_OW 259
38806: PUSH
38807: LD_INT 3
38809: MUL
38810: MUL
38811: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38812: LD_VAR 0 6
38816: PPUSH
38817: CALL_OW 264
38821: PUSH
38822: LD_INT 5
38824: PUSH
38825: LD_INT 6
38827: PUSH
38828: LD_INT 46
38830: PUSH
38831: LD_INT 44
38833: PUSH
38834: LD_INT 47
38836: PUSH
38837: LD_INT 45
38839: PUSH
38840: LD_INT 28
38842: PUSH
38843: LD_INT 7
38845: PUSH
38846: LD_INT 27
38848: PUSH
38849: LD_INT 29
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: IN
38864: PUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_INT 52
38872: PPUSH
38873: CALL_OW 321
38877: PUSH
38878: LD_INT 2
38880: EQUAL
38881: AND
38882: IFFALSE 38899
// bpoints := bpoints * 1.2 ;
38884: LD_ADDR_VAR 0 10
38888: PUSH
38889: LD_VAR 0 10
38893: PUSH
38894: LD_REAL  1.20000000000000E+0000
38897: MUL
38898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38899: LD_VAR 0 6
38903: PPUSH
38904: CALL_OW 264
38908: PUSH
38909: LD_INT 6
38911: PUSH
38912: LD_INT 46
38914: PUSH
38915: LD_INT 47
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: IN
38923: IFFALSE 38940
// bpoints := bpoints * 1.2 ;
38925: LD_ADDR_VAR 0 10
38929: PUSH
38930: LD_VAR 0 10
38934: PUSH
38935: LD_REAL  1.20000000000000E+0000
38938: MUL
38939: ST_TO_ADDR
// end ; unit_building :
38940: GO 38954
38942: LD_INT 3
38944: DOUBLE
38945: EQUAL
38946: IFTRUE 38950
38948: GO 38953
38950: POP
// ; end ;
38951: GO 38954
38953: POP
// for j = 1 to 3 do
38954: LD_ADDR_VAR 0 7
38958: PUSH
38959: DOUBLE
38960: LD_INT 1
38962: DEC
38963: ST_TO_ADDR
38964: LD_INT 3
38966: PUSH
38967: FOR_TO
38968: IFFALSE 39021
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38970: LD_ADDR_VAR 0 5
38974: PUSH
38975: LD_VAR 0 5
38979: PPUSH
38980: LD_VAR 0 7
38984: PPUSH
38985: LD_VAR 0 5
38989: PUSH
38990: LD_VAR 0 7
38994: ARRAY
38995: PUSH
38996: LD_VAR 0 9
39000: PUSH
39001: LD_VAR 0 7
39005: ARRAY
39006: PUSH
39007: LD_VAR 0 10
39011: MUL
39012: PLUS
39013: PPUSH
39014: CALL_OW 1
39018: ST_TO_ADDR
39019: GO 38967
39021: POP
39022: POP
// end ;
39023: GO 37500
39025: POP
39026: POP
// result := Replace ( result , 4 , tmp ) ;
39027: LD_ADDR_VAR 0 5
39031: PUSH
39032: LD_VAR 0 5
39036: PPUSH
39037: LD_INT 4
39039: PPUSH
39040: LD_VAR 0 8
39044: PPUSH
39045: CALL_OW 1
39049: ST_TO_ADDR
// end ;
39050: LD_VAR 0 5
39054: RET
// export function DangerAtRange ( unit , range ) ; begin
39055: LD_INT 0
39057: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39058: LD_ADDR_VAR 0 3
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 255
39072: PPUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: CALL_OW 250
39082: PPUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: CALL_OW 251
39092: PPUSH
39093: LD_VAR 0 2
39097: PPUSH
39098: CALL 37352 0 4
39102: ST_TO_ADDR
// end ;
39103: LD_VAR 0 3
39107: RET
// export function DangerInArea ( side , area ) ; begin
39108: LD_INT 0
39110: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39111: LD_ADDR_VAR 0 3
39115: PUSH
39116: LD_VAR 0 2
39120: PPUSH
39121: LD_INT 81
39123: PUSH
39124: LD_VAR 0 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PPUSH
39133: CALL_OW 70
39137: ST_TO_ADDR
// end ;
39138: LD_VAR 0 3
39142: RET
// export function IsExtension ( b ) ; begin
39143: LD_INT 0
39145: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39146: LD_ADDR_VAR 0 2
39150: PUSH
39151: LD_VAR 0 1
39155: PUSH
39156: LD_INT 23
39158: PUSH
39159: LD_INT 20
39161: PUSH
39162: LD_INT 22
39164: PUSH
39165: LD_INT 17
39167: PUSH
39168: LD_INT 24
39170: PUSH
39171: LD_INT 21
39173: PUSH
39174: LD_INT 19
39176: PUSH
39177: LD_INT 16
39179: PUSH
39180: LD_INT 25
39182: PUSH
39183: LD_INT 18
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: IN
39198: ST_TO_ADDR
// end ;
39199: LD_VAR 0 2
39203: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39204: LD_INT 0
39206: PPUSH
39207: PPUSH
39208: PPUSH
// result := [ ] ;
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: EMPTY
39215: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39216: LD_ADDR_VAR 0 5
39220: PUSH
39221: LD_VAR 0 2
39225: PPUSH
39226: LD_INT 21
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PPUSH
39236: CALL_OW 70
39240: ST_TO_ADDR
// if not tmp then
39241: LD_VAR 0 5
39245: NOT
39246: IFFALSE 39250
// exit ;
39248: GO 39314
// if checkLink then
39250: LD_VAR 0 3
39254: IFFALSE 39304
// begin for i in tmp do
39256: LD_ADDR_VAR 0 6
39260: PUSH
39261: LD_VAR 0 5
39265: PUSH
39266: FOR_IN
39267: IFFALSE 39302
// if GetBase ( i ) <> base then
39269: LD_VAR 0 6
39273: PPUSH
39274: CALL_OW 274
39278: PUSH
39279: LD_VAR 0 1
39283: NONEQUAL
39284: IFFALSE 39300
// ComLinkToBase ( base , i ) ;
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_VAR 0 6
39295: PPUSH
39296: CALL_OW 169
39300: GO 39266
39302: POP
39303: POP
// end ; result := tmp ;
39304: LD_ADDR_VAR 0 4
39308: PUSH
39309: LD_VAR 0 5
39313: ST_TO_ADDR
// end ;
39314: LD_VAR 0 4
39318: RET
// export function ComComplete ( units , b ) ; var i ; begin
39319: LD_INT 0
39321: PPUSH
39322: PPUSH
// if not units then
39323: LD_VAR 0 1
39327: NOT
39328: IFFALSE 39332
// exit ;
39330: GO 39422
// for i in units do
39332: LD_ADDR_VAR 0 4
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: FOR_IN
39343: IFFALSE 39420
// if BuildingStatus ( b ) = bs_build then
39345: LD_VAR 0 2
39349: PPUSH
39350: CALL_OW 461
39354: PUSH
39355: LD_INT 1
39357: EQUAL
39358: IFFALSE 39418
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39360: LD_VAR 0 4
39364: PPUSH
39365: LD_STRING h
39367: PUSH
39368: LD_VAR 0 2
39372: PPUSH
39373: CALL_OW 250
39377: PUSH
39378: LD_VAR 0 2
39382: PPUSH
39383: CALL_OW 251
39387: PUSH
39388: LD_VAR 0 2
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: PUSH
39411: EMPTY
39412: LIST
39413: PPUSH
39414: CALL_OW 446
39418: GO 39342
39420: POP
39421: POP
// end ;
39422: LD_VAR 0 3
39426: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39427: LD_INT 0
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39435: LD_VAR 0 1
39439: NOT
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 263
39450: PUSH
39451: LD_INT 2
39453: NONEQUAL
39454: OR
39455: IFFALSE 39459
// exit ;
39457: GO 39775
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39459: LD_ADDR_VAR 0 6
39463: PUSH
39464: LD_INT 22
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 255
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 30
39486: PUSH
39487: LD_INT 36
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 34
39496: PUSH
39497: LD_INT 31
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PPUSH
39513: CALL_OW 69
39517: ST_TO_ADDR
// if not tmp then
39518: LD_VAR 0 6
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 39775
// result := [ ] ;
39527: LD_ADDR_VAR 0 2
39531: PUSH
39532: EMPTY
39533: ST_TO_ADDR
// for i in tmp do
39534: LD_ADDR_VAR 0 3
39538: PUSH
39539: LD_VAR 0 6
39543: PUSH
39544: FOR_IN
39545: IFFALSE 39616
// begin t := UnitsInside ( i ) ;
39547: LD_ADDR_VAR 0 4
39551: PUSH
39552: LD_VAR 0 3
39556: PPUSH
39557: CALL_OW 313
39561: ST_TO_ADDR
// if t then
39562: LD_VAR 0 4
39566: IFFALSE 39614
// for j in t do
39568: LD_ADDR_VAR 0 7
39572: PUSH
39573: LD_VAR 0 4
39577: PUSH
39578: FOR_IN
39579: IFFALSE 39612
// result := Replace ( result , result + 1 , j ) ;
39581: LD_ADDR_VAR 0 2
39585: PUSH
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_INT 1
39598: PLUS
39599: PPUSH
39600: LD_VAR 0 7
39604: PPUSH
39605: CALL_OW 1
39609: ST_TO_ADDR
39610: GO 39578
39612: POP
39613: POP
// end ;
39614: GO 39544
39616: POP
39617: POP
// if not result then
39618: LD_VAR 0 2
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 39775
// mech := result [ 1 ] ;
39627: LD_ADDR_VAR 0 5
39631: PUSH
39632: LD_VAR 0 2
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: ST_TO_ADDR
// if result > 1 then
39641: LD_VAR 0 2
39645: PUSH
39646: LD_INT 1
39648: GREATER
39649: IFFALSE 39761
// begin for i = 2 to result do
39651: LD_ADDR_VAR 0 3
39655: PUSH
39656: DOUBLE
39657: LD_INT 2
39659: DEC
39660: ST_TO_ADDR
39661: LD_VAR 0 2
39665: PUSH
39666: FOR_TO
39667: IFFALSE 39759
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39669: LD_ADDR_VAR 0 4
39673: PUSH
39674: LD_VAR 0 2
39678: PUSH
39679: LD_VAR 0 3
39683: ARRAY
39684: PPUSH
39685: LD_INT 3
39687: PPUSH
39688: CALL_OW 259
39692: PUSH
39693: LD_VAR 0 2
39697: PUSH
39698: LD_VAR 0 3
39702: ARRAY
39703: PPUSH
39704: CALL_OW 432
39708: MINUS
39709: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39710: LD_VAR 0 4
39714: PUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: LD_INT 3
39722: PPUSH
39723: CALL_OW 259
39727: PUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: CALL_OW 432
39737: MINUS
39738: GREATEREQUAL
39739: IFFALSE 39757
// mech := result [ i ] ;
39741: LD_ADDR_VAR 0 5
39745: PUSH
39746: LD_VAR 0 2
39750: PUSH
39751: LD_VAR 0 3
39755: ARRAY
39756: ST_TO_ADDR
// end ;
39757: GO 39666
39759: POP
39760: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39761: LD_VAR 0 1
39765: PPUSH
39766: LD_VAR 0 5
39770: PPUSH
39771: CALL_OW 135
// end ;
39775: LD_VAR 0 2
39779: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39780: LD_INT 0
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
// result := [ ] ;
39795: LD_ADDR_VAR 0 7
39799: PUSH
39800: EMPTY
39801: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 266
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: IN
39822: NOT
39823: IFFALSE 39827
// exit ;
39825: GO 41461
// if name then
39827: LD_VAR 0 3
39831: IFFALSE 39847
// SetBName ( base_dep , name ) ;
39833: LD_VAR 0 1
39837: PPUSH
39838: LD_VAR 0 3
39842: PPUSH
39843: CALL_OW 500
// base := GetBase ( base_dep ) ;
39847: LD_ADDR_VAR 0 15
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 274
39861: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39862: LD_ADDR_VAR 0 16
39866: PUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 255
39876: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39877: LD_ADDR_VAR 0 17
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 248
39891: ST_TO_ADDR
// if sources then
39892: LD_VAR 0 5
39896: IFFALSE 39943
// for i = 1 to 3 do
39898: LD_ADDR_VAR 0 8
39902: PUSH
39903: DOUBLE
39904: LD_INT 1
39906: DEC
39907: ST_TO_ADDR
39908: LD_INT 3
39910: PUSH
39911: FOR_TO
39912: IFFALSE 39941
// AddResourceType ( base , i , sources [ i ] ) ;
39914: LD_VAR 0 15
39918: PPUSH
39919: LD_VAR 0 8
39923: PPUSH
39924: LD_VAR 0 5
39928: PUSH
39929: LD_VAR 0 8
39933: ARRAY
39934: PPUSH
39935: CALL_OW 276
39939: GO 39911
39941: POP
39942: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39943: LD_ADDR_VAR 0 18
39947: PUSH
39948: LD_VAR 0 15
39952: PPUSH
39953: LD_VAR 0 2
39957: PPUSH
39958: LD_INT 1
39960: PPUSH
39961: CALL 39204 0 3
39965: ST_TO_ADDR
// InitHc ;
39966: CALL_OW 19
// InitUc ;
39970: CALL_OW 18
// uc_side := side ;
39974: LD_ADDR_OWVAR 20
39978: PUSH
39979: LD_VAR 0 16
39983: ST_TO_ADDR
// uc_nation := nation ;
39984: LD_ADDR_OWVAR 21
39988: PUSH
39989: LD_VAR 0 17
39993: ST_TO_ADDR
// if buildings then
39994: LD_VAR 0 18
39998: IFFALSE 41320
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40000: LD_ADDR_VAR 0 19
40004: PUSH
40005: LD_VAR 0 18
40009: PPUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 30
40015: PUSH
40016: LD_INT 29
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 30
40025: PUSH
40026: LD_INT 30
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: PPUSH
40038: CALL_OW 72
40042: ST_TO_ADDR
// if tmp then
40043: LD_VAR 0 19
40047: IFFALSE 40095
// for i in tmp do
40049: LD_ADDR_VAR 0 8
40053: PUSH
40054: LD_VAR 0 19
40058: PUSH
40059: FOR_IN
40060: IFFALSE 40093
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40062: LD_VAR 0 8
40066: PPUSH
40067: CALL_OW 250
40071: PPUSH
40072: LD_VAR 0 8
40076: PPUSH
40077: CALL_OW 251
40081: PPUSH
40082: LD_VAR 0 16
40086: PPUSH
40087: CALL_OW 441
40091: GO 40059
40093: POP
40094: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40095: LD_VAR 0 18
40099: PPUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 30
40105: PUSH
40106: LD_INT 32
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 30
40115: PUSH
40116: LD_INT 33
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: PPUSH
40128: CALL_OW 72
40132: IFFALSE 40220
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40134: LD_ADDR_VAR 0 8
40138: PUSH
40139: LD_VAR 0 18
40143: PPUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 30
40149: PUSH
40150: LD_INT 32
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 30
40159: PUSH
40160: LD_INT 33
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PPUSH
40172: CALL_OW 72
40176: PUSH
40177: FOR_IN
40178: IFFALSE 40218
// begin if not GetBWeapon ( i ) then
40180: LD_VAR 0 8
40184: PPUSH
40185: CALL_OW 269
40189: NOT
40190: IFFALSE 40216
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40192: LD_VAR 0 8
40196: PPUSH
40197: LD_VAR 0 8
40201: PPUSH
40202: LD_VAR 0 2
40206: PPUSH
40207: CALL 41466 0 2
40211: PPUSH
40212: CALL_OW 431
// end ;
40216: GO 40177
40218: POP
40219: POP
// end ; for i = 1 to personel do
40220: LD_ADDR_VAR 0 8
40224: PUSH
40225: DOUBLE
40226: LD_INT 1
40228: DEC
40229: ST_TO_ADDR
40230: LD_VAR 0 6
40234: PUSH
40235: FOR_TO
40236: IFFALSE 41300
// begin if i > 4 then
40238: LD_VAR 0 8
40242: PUSH
40243: LD_INT 4
40245: GREATER
40246: IFFALSE 40250
// break ;
40248: GO 41300
// case i of 1 :
40250: LD_VAR 0 8
40254: PUSH
40255: LD_INT 1
40257: DOUBLE
40258: EQUAL
40259: IFTRUE 40263
40261: GO 40343
40263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40264: LD_ADDR_VAR 0 12
40268: PUSH
40269: LD_VAR 0 18
40273: PPUSH
40274: LD_INT 22
40276: PUSH
40277: LD_VAR 0 16
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 58
40288: PUSH
40289: EMPTY
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 30
40297: PUSH
40298: LD_INT 32
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 30
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 30
40317: PUSH
40318: LD_INT 5
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: PPUSH
40336: CALL_OW 72
40340: ST_TO_ADDR
40341: GO 40565
40343: LD_INT 2
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40413
40351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40352: LD_ADDR_VAR 0 12
40356: PUSH
40357: LD_VAR 0 18
40361: PPUSH
40362: LD_INT 22
40364: PUSH
40365: LD_VAR 0 16
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 30
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 30
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PPUSH
40406: CALL_OW 72
40410: ST_TO_ADDR
40411: GO 40565
40413: LD_INT 3
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40483
40421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40422: LD_ADDR_VAR 0 12
40426: PUSH
40427: LD_VAR 0 18
40431: PPUSH
40432: LD_INT 22
40434: PUSH
40435: LD_VAR 0 16
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: LD_INT 30
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 30
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PPUSH
40476: CALL_OW 72
40480: ST_TO_ADDR
40481: GO 40565
40483: LD_INT 4
40485: DOUBLE
40486: EQUAL
40487: IFTRUE 40491
40489: GO 40564
40491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40492: LD_ADDR_VAR 0 12
40496: PUSH
40497: LD_VAR 0 18
40501: PPUSH
40502: LD_INT 22
40504: PUSH
40505: LD_VAR 0 16
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 30
40519: PUSH
40520: LD_INT 6
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 30
40529: PUSH
40530: LD_INT 7
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 30
40539: PUSH
40540: LD_INT 8
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PPUSH
40557: CALL_OW 72
40561: ST_TO_ADDR
40562: GO 40565
40564: POP
// if i = 1 then
40565: LD_VAR 0 8
40569: PUSH
40570: LD_INT 1
40572: EQUAL
40573: IFFALSE 40684
// begin tmp := [ ] ;
40575: LD_ADDR_VAR 0 19
40579: PUSH
40580: EMPTY
40581: ST_TO_ADDR
// for j in f do
40582: LD_ADDR_VAR 0 9
40586: PUSH
40587: LD_VAR 0 12
40591: PUSH
40592: FOR_IN
40593: IFFALSE 40666
// if GetBType ( j ) = b_bunker then
40595: LD_VAR 0 9
40599: PPUSH
40600: CALL_OW 266
40604: PUSH
40605: LD_INT 32
40607: EQUAL
40608: IFFALSE 40635
// tmp := Insert ( tmp , 1 , j ) else
40610: LD_ADDR_VAR 0 19
40614: PUSH
40615: LD_VAR 0 19
40619: PPUSH
40620: LD_INT 1
40622: PPUSH
40623: LD_VAR 0 9
40627: PPUSH
40628: CALL_OW 2
40632: ST_TO_ADDR
40633: GO 40664
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40635: LD_ADDR_VAR 0 19
40639: PUSH
40640: LD_VAR 0 19
40644: PPUSH
40645: LD_VAR 0 19
40649: PUSH
40650: LD_INT 1
40652: PLUS
40653: PPUSH
40654: LD_VAR 0 9
40658: PPUSH
40659: CALL_OW 2
40663: ST_TO_ADDR
40664: GO 40592
40666: POP
40667: POP
// if tmp then
40668: LD_VAR 0 19
40672: IFFALSE 40684
// f := tmp ;
40674: LD_ADDR_VAR 0 12
40678: PUSH
40679: LD_VAR 0 19
40683: ST_TO_ADDR
// end ; x := personel [ i ] ;
40684: LD_ADDR_VAR 0 13
40688: PUSH
40689: LD_VAR 0 6
40693: PUSH
40694: LD_VAR 0 8
40698: ARRAY
40699: ST_TO_ADDR
// if x = - 1 then
40700: LD_VAR 0 13
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: EQUAL
40709: IFFALSE 40918
// begin for j in f do
40711: LD_ADDR_VAR 0 9
40715: PUSH
40716: LD_VAR 0 12
40720: PUSH
40721: FOR_IN
40722: IFFALSE 40914
// repeat InitHc ;
40724: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40728: LD_VAR 0 9
40732: PPUSH
40733: CALL_OW 266
40737: PUSH
40738: LD_INT 5
40740: EQUAL
40741: IFFALSE 40811
// begin if UnitsInside ( j ) < 3 then
40743: LD_VAR 0 9
40747: PPUSH
40748: CALL_OW 313
40752: PUSH
40753: LD_INT 3
40755: LESS
40756: IFFALSE 40792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40758: LD_INT 0
40760: PPUSH
40761: LD_INT 5
40763: PUSH
40764: LD_INT 8
40766: PUSH
40767: LD_INT 9
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: PUSH
40775: LD_VAR 0 17
40779: ARRAY
40780: PPUSH
40781: LD_VAR 0 4
40785: PPUSH
40786: CALL_OW 380
40790: GO 40809
// PrepareHuman ( false , i , skill ) ;
40792: LD_INT 0
40794: PPUSH
40795: LD_VAR 0 8
40799: PPUSH
40800: LD_VAR 0 4
40804: PPUSH
40805: CALL_OW 380
// end else
40809: GO 40828
// PrepareHuman ( false , i , skill ) ;
40811: LD_INT 0
40813: PPUSH
40814: LD_VAR 0 8
40818: PPUSH
40819: LD_VAR 0 4
40823: PPUSH
40824: CALL_OW 380
// un := CreateHuman ;
40828: LD_ADDR_VAR 0 14
40832: PUSH
40833: CALL_OW 44
40837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: LD_VAR 0 7
40847: PPUSH
40848: LD_INT 1
40850: PPUSH
40851: LD_VAR 0 14
40855: PPUSH
40856: CALL_OW 2
40860: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40861: LD_VAR 0 14
40865: PPUSH
40866: LD_VAR 0 9
40870: PPUSH
40871: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40875: LD_VAR 0 9
40879: PPUSH
40880: CALL_OW 313
40884: PUSH
40885: LD_INT 6
40887: EQUAL
40888: PUSH
40889: LD_VAR 0 9
40893: PPUSH
40894: CALL_OW 266
40898: PUSH
40899: LD_INT 32
40901: PUSH
40902: LD_INT 31
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: IN
40909: OR
40910: IFFALSE 40724
40912: GO 40721
40914: POP
40915: POP
// end else
40916: GO 41298
// for j = 1 to x do
40918: LD_ADDR_VAR 0 9
40922: PUSH
40923: DOUBLE
40924: LD_INT 1
40926: DEC
40927: ST_TO_ADDR
40928: LD_VAR 0 13
40932: PUSH
40933: FOR_TO
40934: IFFALSE 41296
// begin InitHc ;
40936: CALL_OW 19
// if not f then
40940: LD_VAR 0 12
40944: NOT
40945: IFFALSE 41034
// begin PrepareHuman ( false , i , skill ) ;
40947: LD_INT 0
40949: PPUSH
40950: LD_VAR 0 8
40954: PPUSH
40955: LD_VAR 0 4
40959: PPUSH
40960: CALL_OW 380
// un := CreateHuman ;
40964: LD_ADDR_VAR 0 14
40968: PUSH
40969: CALL_OW 44
40973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40974: LD_ADDR_VAR 0 7
40978: PUSH
40979: LD_VAR 0 7
40983: PPUSH
40984: LD_INT 1
40986: PPUSH
40987: LD_VAR 0 14
40991: PPUSH
40992: CALL_OW 2
40996: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40997: LD_VAR 0 14
41001: PPUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 250
41011: PPUSH
41012: LD_VAR 0 1
41016: PPUSH
41017: CALL_OW 251
41021: PPUSH
41022: LD_INT 10
41024: PPUSH
41025: LD_INT 0
41027: PPUSH
41028: CALL_OW 50
// continue ;
41032: GO 40933
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41034: LD_VAR 0 12
41038: PUSH
41039: LD_INT 1
41041: ARRAY
41042: PPUSH
41043: CALL_OW 313
41047: PUSH
41048: LD_VAR 0 12
41052: PUSH
41053: LD_INT 1
41055: ARRAY
41056: PPUSH
41057: CALL_OW 266
41061: PUSH
41062: LD_INT 32
41064: PUSH
41065: LD_INT 31
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: IN
41072: AND
41073: PUSH
41074: LD_VAR 0 12
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PPUSH
41083: CALL_OW 313
41087: PUSH
41088: LD_INT 6
41090: EQUAL
41091: OR
41092: IFFALSE 41112
// f := Delete ( f , 1 ) ;
41094: LD_ADDR_VAR 0 12
41098: PUSH
41099: LD_VAR 0 12
41103: PPUSH
41104: LD_INT 1
41106: PPUSH
41107: CALL_OW 3
41111: ST_TO_ADDR
// if not f then
41112: LD_VAR 0 12
41116: NOT
41117: IFFALSE 41135
// begin x := x + 2 ;
41119: LD_ADDR_VAR 0 13
41123: PUSH
41124: LD_VAR 0 13
41128: PUSH
41129: LD_INT 2
41131: PLUS
41132: ST_TO_ADDR
// continue ;
41133: GO 40933
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41135: LD_VAR 0 12
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: CALL_OW 266
41148: PUSH
41149: LD_INT 5
41151: EQUAL
41152: IFFALSE 41226
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41154: LD_VAR 0 12
41158: PUSH
41159: LD_INT 1
41161: ARRAY
41162: PPUSH
41163: CALL_OW 313
41167: PUSH
41168: LD_INT 3
41170: LESS
41171: IFFALSE 41207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41173: LD_INT 0
41175: PPUSH
41176: LD_INT 5
41178: PUSH
41179: LD_INT 8
41181: PUSH
41182: LD_INT 9
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: PUSH
41190: LD_VAR 0 17
41194: ARRAY
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: CALL_OW 380
41205: GO 41224
// PrepareHuman ( false , i , skill ) ;
41207: LD_INT 0
41209: PPUSH
41210: LD_VAR 0 8
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 380
// end else
41224: GO 41243
// PrepareHuman ( false , i , skill ) ;
41226: LD_INT 0
41228: PPUSH
41229: LD_VAR 0 8
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: CALL_OW 380
// un := CreateHuman ;
41243: LD_ADDR_VAR 0 14
41247: PUSH
41248: CALL_OW 44
41252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41253: LD_ADDR_VAR 0 7
41257: PUSH
41258: LD_VAR 0 7
41262: PPUSH
41263: LD_INT 1
41265: PPUSH
41266: LD_VAR 0 14
41270: PPUSH
41271: CALL_OW 2
41275: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41276: LD_VAR 0 14
41280: PPUSH
41281: LD_VAR 0 12
41285: PUSH
41286: LD_INT 1
41288: ARRAY
41289: PPUSH
41290: CALL_OW 52
// end ;
41294: GO 40933
41296: POP
41297: POP
// end ;
41298: GO 40235
41300: POP
41301: POP
// result := result ^ buildings ;
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: LD_VAR 0 7
41311: PUSH
41312: LD_VAR 0 18
41316: ADD
41317: ST_TO_ADDR
// end else
41318: GO 41461
// begin for i = 1 to personel do
41320: LD_ADDR_VAR 0 8
41324: PUSH
41325: DOUBLE
41326: LD_INT 1
41328: DEC
41329: ST_TO_ADDR
41330: LD_VAR 0 6
41334: PUSH
41335: FOR_TO
41336: IFFALSE 41459
// begin if i > 4 then
41338: LD_VAR 0 8
41342: PUSH
41343: LD_INT 4
41345: GREATER
41346: IFFALSE 41350
// break ;
41348: GO 41459
// x := personel [ i ] ;
41350: LD_ADDR_VAR 0 13
41354: PUSH
41355: LD_VAR 0 6
41359: PUSH
41360: LD_VAR 0 8
41364: ARRAY
41365: ST_TO_ADDR
// if x = - 1 then
41366: LD_VAR 0 13
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: EQUAL
41375: IFFALSE 41379
// continue ;
41377: GO 41335
// PrepareHuman ( false , i , skill ) ;
41379: LD_INT 0
41381: PPUSH
41382: LD_VAR 0 8
41386: PPUSH
41387: LD_VAR 0 4
41391: PPUSH
41392: CALL_OW 380
// un := CreateHuman ;
41396: LD_ADDR_VAR 0 14
41400: PUSH
41401: CALL_OW 44
41405: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41406: LD_VAR 0 14
41410: PPUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 250
41420: PPUSH
41421: LD_VAR 0 1
41425: PPUSH
41426: CALL_OW 251
41430: PPUSH
41431: LD_INT 10
41433: PPUSH
41434: LD_INT 0
41436: PPUSH
41437: CALL_OW 50
// result := result ^ un ;
41441: LD_ADDR_VAR 0 7
41445: PUSH
41446: LD_VAR 0 7
41450: PUSH
41451: LD_VAR 0 14
41455: ADD
41456: ST_TO_ADDR
// end ;
41457: GO 41335
41459: POP
41460: POP
// end ; end ;
41461: LD_VAR 0 7
41465: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41466: LD_INT 0
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
// result := false ;
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_INT 0
41491: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41492: LD_VAR 0 1
41496: NOT
41497: PUSH
41498: LD_VAR 0 1
41502: PPUSH
41503: CALL_OW 266
41507: PUSH
41508: LD_INT 32
41510: PUSH
41511: LD_INT 33
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: IN
41518: NOT
41519: OR
41520: IFFALSE 41524
// exit ;
41522: GO 42633
// nat := GetNation ( tower ) ;
41524: LD_ADDR_VAR 0 12
41528: PUSH
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 248
41538: ST_TO_ADDR
// side := GetSide ( tower ) ;
41539: LD_ADDR_VAR 0 16
41543: PUSH
41544: LD_VAR 0 1
41548: PPUSH
41549: CALL_OW 255
41553: ST_TO_ADDR
// x := GetX ( tower ) ;
41554: LD_ADDR_VAR 0 10
41558: PUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 250
41568: ST_TO_ADDR
// y := GetY ( tower ) ;
41569: LD_ADDR_VAR 0 11
41573: PUSH
41574: LD_VAR 0 1
41578: PPUSH
41579: CALL_OW 251
41583: ST_TO_ADDR
// if not x or not y then
41584: LD_VAR 0 10
41588: NOT
41589: PUSH
41590: LD_VAR 0 11
41594: NOT
41595: OR
41596: IFFALSE 41600
// exit ;
41598: GO 42633
// weapon := 0 ;
41600: LD_ADDR_VAR 0 18
41604: PUSH
41605: LD_INT 0
41607: ST_TO_ADDR
// fac_list := [ ] ;
41608: LD_ADDR_VAR 0 17
41612: PUSH
41613: EMPTY
41614: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41615: LD_ADDR_VAR 0 6
41619: PUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 274
41629: PPUSH
41630: LD_VAR 0 2
41634: PPUSH
41635: LD_INT 0
41637: PPUSH
41638: CALL 39204 0 3
41642: PPUSH
41643: LD_INT 30
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PPUSH
41653: CALL_OW 72
41657: ST_TO_ADDR
// if not factories then
41658: LD_VAR 0 6
41662: NOT
41663: IFFALSE 41667
// exit ;
41665: GO 42633
// for i in factories do
41667: LD_ADDR_VAR 0 8
41671: PUSH
41672: LD_VAR 0 6
41676: PUSH
41677: FOR_IN
41678: IFFALSE 41703
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41680: LD_ADDR_VAR 0 17
41684: PUSH
41685: LD_VAR 0 17
41689: PUSH
41690: LD_VAR 0 8
41694: PPUSH
41695: CALL_OW 478
41699: UNION
41700: ST_TO_ADDR
41701: GO 41677
41703: POP
41704: POP
// if not fac_list then
41705: LD_VAR 0 17
41709: NOT
41710: IFFALSE 41714
// exit ;
41712: GO 42633
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_INT 4
41721: PUSH
41722: LD_INT 5
41724: PUSH
41725: LD_INT 9
41727: PUSH
41728: LD_INT 10
41730: PUSH
41731: LD_INT 6
41733: PUSH
41734: LD_INT 7
41736: PUSH
41737: LD_INT 11
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 27
41751: PUSH
41752: LD_INT 28
41754: PUSH
41755: LD_INT 26
41757: PUSH
41758: LD_INT 30
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 43
41769: PUSH
41770: LD_INT 44
41772: PUSH
41773: LD_INT 46
41775: PUSH
41776: LD_INT 45
41778: PUSH
41779: LD_INT 47
41781: PUSH
41782: LD_INT 49
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: PUSH
41798: LD_VAR 0 12
41802: ARRAY
41803: ST_TO_ADDR
// list := list isect fac_list ;
41804: LD_ADDR_VAR 0 5
41808: PUSH
41809: LD_VAR 0 5
41813: PUSH
41814: LD_VAR 0 17
41818: ISECT
41819: ST_TO_ADDR
// if not list then
41820: LD_VAR 0 5
41824: NOT
41825: IFFALSE 41829
// exit ;
41827: GO 42633
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41829: LD_VAR 0 12
41833: PUSH
41834: LD_INT 3
41836: EQUAL
41837: PUSH
41838: LD_INT 49
41840: PUSH
41841: LD_VAR 0 5
41845: IN
41846: AND
41847: PUSH
41848: LD_INT 31
41850: PPUSH
41851: LD_VAR 0 16
41855: PPUSH
41856: CALL_OW 321
41860: PUSH
41861: LD_INT 2
41863: EQUAL
41864: AND
41865: IFFALSE 41925
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41867: LD_INT 22
41869: PUSH
41870: LD_VAR 0 16
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 35
41881: PUSH
41882: LD_INT 49
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 91
41891: PUSH
41892: LD_VAR 0 1
41896: PUSH
41897: LD_INT 10
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: PPUSH
41910: CALL_OW 69
41914: NOT
41915: IFFALSE 41925
// weapon := ru_time_lapser ;
41917: LD_ADDR_VAR 0 18
41921: PUSH
41922: LD_INT 49
41924: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41925: LD_VAR 0 12
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: IN
41940: PUSH
41941: LD_INT 11
41943: PUSH
41944: LD_VAR 0 5
41948: IN
41949: PUSH
41950: LD_INT 30
41952: PUSH
41953: LD_VAR 0 5
41957: IN
41958: OR
41959: AND
41960: PUSH
41961: LD_INT 6
41963: PPUSH
41964: LD_VAR 0 16
41968: PPUSH
41969: CALL_OW 321
41973: PUSH
41974: LD_INT 2
41976: EQUAL
41977: AND
41978: IFFALSE 42143
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41980: LD_INT 22
41982: PUSH
41983: LD_VAR 0 16
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: LD_INT 35
41997: PUSH
41998: LD_INT 11
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 35
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 91
42022: PUSH
42023: LD_VAR 0 1
42027: PUSH
42028: LD_INT 18
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: PPUSH
42041: CALL_OW 69
42045: NOT
42046: PUSH
42047: LD_INT 22
42049: PUSH
42050: LD_VAR 0 16
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 30
42064: PUSH
42065: LD_INT 32
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_INT 33
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 91
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: LD_INT 12
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: PPUSH
42111: CALL_OW 69
42115: PUSH
42116: LD_INT 2
42118: GREATER
42119: AND
42120: IFFALSE 42143
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42122: LD_ADDR_VAR 0 18
42126: PUSH
42127: LD_INT 11
42129: PUSH
42130: LD_INT 30
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_VAR 0 12
42141: ARRAY
42142: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42143: LD_VAR 0 18
42147: NOT
42148: PUSH
42149: LD_INT 40
42151: PPUSH
42152: LD_VAR 0 16
42156: PPUSH
42157: CALL_OW 321
42161: PUSH
42162: LD_INT 2
42164: EQUAL
42165: AND
42166: PUSH
42167: LD_INT 7
42169: PUSH
42170: LD_VAR 0 5
42174: IN
42175: PUSH
42176: LD_INT 28
42178: PUSH
42179: LD_VAR 0 5
42183: IN
42184: OR
42185: PUSH
42186: LD_INT 45
42188: PUSH
42189: LD_VAR 0 5
42193: IN
42194: OR
42195: AND
42196: IFFALSE 42450
// begin hex := GetHexInfo ( x , y ) ;
42198: LD_ADDR_VAR 0 4
42202: PUSH
42203: LD_VAR 0 10
42207: PPUSH
42208: LD_VAR 0 11
42212: PPUSH
42213: CALL_OW 546
42217: ST_TO_ADDR
// if hex [ 1 ] then
42218: LD_VAR 0 4
42222: PUSH
42223: LD_INT 1
42225: ARRAY
42226: IFFALSE 42230
// exit ;
42228: GO 42633
// height := hex [ 2 ] ;
42230: LD_ADDR_VAR 0 15
42234: PUSH
42235: LD_VAR 0 4
42239: PUSH
42240: LD_INT 2
42242: ARRAY
42243: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42244: LD_ADDR_VAR 0 14
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: LD_INT 5
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: ST_TO_ADDR
// for i in tmp do
42267: LD_ADDR_VAR 0 8
42271: PUSH
42272: LD_VAR 0 14
42276: PUSH
42277: FOR_IN
42278: IFFALSE 42448
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42280: LD_ADDR_VAR 0 9
42284: PUSH
42285: LD_VAR 0 10
42289: PPUSH
42290: LD_VAR 0 8
42294: PPUSH
42295: LD_INT 5
42297: PPUSH
42298: CALL_OW 272
42302: PUSH
42303: LD_VAR 0 11
42307: PPUSH
42308: LD_VAR 0 8
42312: PPUSH
42313: LD_INT 5
42315: PPUSH
42316: CALL_OW 273
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42325: LD_VAR 0 9
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 9
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: CALL_OW 488
42347: IFFALSE 42446
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42349: LD_ADDR_VAR 0 4
42353: PUSH
42354: LD_VAR 0 9
42358: PUSH
42359: LD_INT 1
42361: ARRAY
42362: PPUSH
42363: LD_VAR 0 9
42367: PUSH
42368: LD_INT 2
42370: ARRAY
42371: PPUSH
42372: CALL_OW 546
42376: ST_TO_ADDR
// if hex [ 1 ] then
42377: LD_VAR 0 4
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: IFFALSE 42389
// continue ;
42387: GO 42277
// h := hex [ 2 ] ;
42389: LD_ADDR_VAR 0 13
42393: PUSH
42394: LD_VAR 0 4
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: ST_TO_ADDR
// if h + 7 < height then
42403: LD_VAR 0 13
42407: PUSH
42408: LD_INT 7
42410: PLUS
42411: PUSH
42412: LD_VAR 0 15
42416: LESS
42417: IFFALSE 42446
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42419: LD_ADDR_VAR 0 18
42423: PUSH
42424: LD_INT 7
42426: PUSH
42427: LD_INT 28
42429: PUSH
42430: LD_INT 45
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: PUSH
42438: LD_VAR 0 12
42442: ARRAY
42443: ST_TO_ADDR
// break ;
42444: GO 42448
// end ; end ; end ;
42446: GO 42277
42448: POP
42449: POP
// end ; if not weapon then
42450: LD_VAR 0 18
42454: NOT
42455: IFFALSE 42515
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42457: LD_ADDR_VAR 0 5
42461: PUSH
42462: LD_VAR 0 5
42466: PUSH
42467: LD_INT 11
42469: PUSH
42470: LD_INT 30
42472: PUSH
42473: LD_INT 49
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: DIFF
42481: ST_TO_ADDR
// if not list then
42482: LD_VAR 0 5
42486: NOT
42487: IFFALSE 42491
// exit ;
42489: GO 42633
// weapon := list [ rand ( 1 , list ) ] ;
42491: LD_ADDR_VAR 0 18
42495: PUSH
42496: LD_VAR 0 5
42500: PUSH
42501: LD_INT 1
42503: PPUSH
42504: LD_VAR 0 5
42508: PPUSH
42509: CALL_OW 12
42513: ARRAY
42514: ST_TO_ADDR
// end ; if weapon then
42515: LD_VAR 0 18
42519: IFFALSE 42633
// begin tmp := CostOfWeapon ( weapon ) ;
42521: LD_ADDR_VAR 0 14
42525: PUSH
42526: LD_VAR 0 18
42530: PPUSH
42531: CALL_OW 451
42535: ST_TO_ADDR
// j := GetBase ( tower ) ;
42536: LD_ADDR_VAR 0 9
42540: PUSH
42541: LD_VAR 0 1
42545: PPUSH
42546: CALL_OW 274
42550: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42551: LD_VAR 0 9
42555: PPUSH
42556: LD_INT 1
42558: PPUSH
42559: CALL_OW 275
42563: PUSH
42564: LD_VAR 0 14
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: GREATEREQUAL
42573: PUSH
42574: LD_VAR 0 9
42578: PPUSH
42579: LD_INT 2
42581: PPUSH
42582: CALL_OW 275
42586: PUSH
42587: LD_VAR 0 14
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: GREATEREQUAL
42596: AND
42597: PUSH
42598: LD_VAR 0 9
42602: PPUSH
42603: LD_INT 3
42605: PPUSH
42606: CALL_OW 275
42610: PUSH
42611: LD_VAR 0 14
42615: PUSH
42616: LD_INT 3
42618: ARRAY
42619: GREATEREQUAL
42620: AND
42621: IFFALSE 42633
// result := weapon ;
42623: LD_ADDR_VAR 0 3
42627: PUSH
42628: LD_VAR 0 18
42632: ST_TO_ADDR
// end ; end ;
42633: LD_VAR 0 3
42637: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42638: LD_INT 0
42640: PPUSH
42641: PPUSH
// result := true ;
42642: LD_ADDR_VAR 0 3
42646: PUSH
42647: LD_INT 1
42649: ST_TO_ADDR
// if array1 = array2 then
42650: LD_VAR 0 1
42654: PUSH
42655: LD_VAR 0 2
42659: EQUAL
42660: IFFALSE 42720
// begin for i = 1 to array1 do
42662: LD_ADDR_VAR 0 4
42666: PUSH
42667: DOUBLE
42668: LD_INT 1
42670: DEC
42671: ST_TO_ADDR
42672: LD_VAR 0 1
42676: PUSH
42677: FOR_TO
42678: IFFALSE 42716
// if array1 [ i ] <> array2 [ i ] then
42680: LD_VAR 0 1
42684: PUSH
42685: LD_VAR 0 4
42689: ARRAY
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 4
42700: ARRAY
42701: NONEQUAL
42702: IFFALSE 42714
// begin result := false ;
42704: LD_ADDR_VAR 0 3
42708: PUSH
42709: LD_INT 0
42711: ST_TO_ADDR
// break ;
42712: GO 42716
// end ;
42714: GO 42677
42716: POP
42717: POP
// end else
42718: GO 42728
// result := false ;
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// end ;
42728: LD_VAR 0 3
42732: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42733: LD_INT 0
42735: PPUSH
42736: PPUSH
// if not array1 or not array2 then
42737: LD_VAR 0 1
42741: NOT
42742: PUSH
42743: LD_VAR 0 2
42747: NOT
42748: OR
42749: IFFALSE 42753
// exit ;
42751: GO 42817
// result := true ;
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 1
42760: ST_TO_ADDR
// for i = 1 to array1 do
42761: LD_ADDR_VAR 0 4
42765: PUSH
42766: DOUBLE
42767: LD_INT 1
42769: DEC
42770: ST_TO_ADDR
42771: LD_VAR 0 1
42775: PUSH
42776: FOR_TO
42777: IFFALSE 42815
// if array1 [ i ] <> array2 [ i ] then
42779: LD_VAR 0 1
42783: PUSH
42784: LD_VAR 0 4
42788: ARRAY
42789: PUSH
42790: LD_VAR 0 2
42794: PUSH
42795: LD_VAR 0 4
42799: ARRAY
42800: NONEQUAL
42801: IFFALSE 42813
// begin result := false ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_INT 0
42810: ST_TO_ADDR
// break ;
42811: GO 42815
// end ;
42813: GO 42776
42815: POP
42816: POP
// end ;
42817: LD_VAR 0 3
42821: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42822: LD_INT 0
42824: PPUSH
42825: PPUSH
42826: PPUSH
// pom := GetBase ( fac ) ;
42827: LD_ADDR_VAR 0 5
42831: PUSH
42832: LD_VAR 0 1
42836: PPUSH
42837: CALL_OW 274
42841: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42842: LD_ADDR_VAR 0 4
42846: PUSH
42847: LD_VAR 0 2
42851: PUSH
42852: LD_INT 1
42854: ARRAY
42855: PPUSH
42856: LD_VAR 0 2
42860: PUSH
42861: LD_INT 2
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 2
42869: PUSH
42870: LD_INT 3
42872: ARRAY
42873: PPUSH
42874: LD_VAR 0 2
42878: PUSH
42879: LD_INT 4
42881: ARRAY
42882: PPUSH
42883: CALL_OW 449
42887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_VAR 0 5
42897: PPUSH
42898: LD_INT 1
42900: PPUSH
42901: CALL_OW 275
42905: PUSH
42906: LD_VAR 0 4
42910: PUSH
42911: LD_INT 1
42913: ARRAY
42914: GREATEREQUAL
42915: PUSH
42916: LD_VAR 0 5
42920: PPUSH
42921: LD_INT 2
42923: PPUSH
42924: CALL_OW 275
42928: PUSH
42929: LD_VAR 0 4
42933: PUSH
42934: LD_INT 2
42936: ARRAY
42937: GREATEREQUAL
42938: AND
42939: PUSH
42940: LD_VAR 0 5
42944: PPUSH
42945: LD_INT 3
42947: PPUSH
42948: CALL_OW 275
42952: PUSH
42953: LD_VAR 0 4
42957: PUSH
42958: LD_INT 3
42960: ARRAY
42961: GREATEREQUAL
42962: AND
42963: ST_TO_ADDR
// end ;
42964: LD_VAR 0 3
42968: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42969: LD_INT 0
42971: PPUSH
42972: PPUSH
42973: PPUSH
42974: PPUSH
// pom := GetBase ( building ) ;
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_VAR 0 1
42984: PPUSH
42985: CALL_OW 274
42989: ST_TO_ADDR
// if not pom then
42990: LD_VAR 0 3
42994: NOT
42995: IFFALSE 42999
// exit ;
42997: GO 43169
// btype := GetBType ( building ) ;
42999: LD_ADDR_VAR 0 5
43003: PUSH
43004: LD_VAR 0 1
43008: PPUSH
43009: CALL_OW 266
43013: ST_TO_ADDR
// if btype = b_armoury then
43014: LD_VAR 0 5
43018: PUSH
43019: LD_INT 4
43021: EQUAL
43022: IFFALSE 43032
// btype := b_barracks ;
43024: LD_ADDR_VAR 0 5
43028: PUSH
43029: LD_INT 5
43031: ST_TO_ADDR
// if btype = b_depot then
43032: LD_VAR 0 5
43036: PUSH
43037: LD_INT 0
43039: EQUAL
43040: IFFALSE 43050
// btype := b_warehouse ;
43042: LD_ADDR_VAR 0 5
43046: PUSH
43047: LD_INT 1
43049: ST_TO_ADDR
// if btype = b_workshop then
43050: LD_VAR 0 5
43054: PUSH
43055: LD_INT 2
43057: EQUAL
43058: IFFALSE 43068
// btype := b_factory ;
43060: LD_ADDR_VAR 0 5
43064: PUSH
43065: LD_INT 3
43067: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43068: LD_ADDR_VAR 0 4
43072: PUSH
43073: LD_VAR 0 5
43077: PPUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: CALL_OW 248
43087: PPUSH
43088: CALL_OW 450
43092: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43093: LD_ADDR_VAR 0 2
43097: PUSH
43098: LD_VAR 0 3
43102: PPUSH
43103: LD_INT 1
43105: PPUSH
43106: CALL_OW 275
43110: PUSH
43111: LD_VAR 0 4
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: GREATEREQUAL
43120: PUSH
43121: LD_VAR 0 3
43125: PPUSH
43126: LD_INT 2
43128: PPUSH
43129: CALL_OW 275
43133: PUSH
43134: LD_VAR 0 4
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: GREATEREQUAL
43143: AND
43144: PUSH
43145: LD_VAR 0 3
43149: PPUSH
43150: LD_INT 3
43152: PPUSH
43153: CALL_OW 275
43157: PUSH
43158: LD_VAR 0 4
43162: PUSH
43163: LD_INT 3
43165: ARRAY
43166: GREATEREQUAL
43167: AND
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 2
43173: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43174: LD_INT 0
43176: PPUSH
43177: PPUSH
43178: PPUSH
// pom := GetBase ( building ) ;
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 1
43188: PPUSH
43189: CALL_OW 274
43193: ST_TO_ADDR
// if not pom then
43194: LD_VAR 0 4
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43304
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43203: LD_ADDR_VAR 0 5
43207: PUSH
43208: LD_VAR 0 2
43212: PPUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 248
43222: PPUSH
43223: CALL_OW 450
43227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43228: LD_ADDR_VAR 0 3
43232: PUSH
43233: LD_VAR 0 4
43237: PPUSH
43238: LD_INT 1
43240: PPUSH
43241: CALL_OW 275
43245: PUSH
43246: LD_VAR 0 5
43250: PUSH
43251: LD_INT 1
43253: ARRAY
43254: GREATEREQUAL
43255: PUSH
43256: LD_VAR 0 4
43260: PPUSH
43261: LD_INT 2
43263: PPUSH
43264: CALL_OW 275
43268: PUSH
43269: LD_VAR 0 5
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: GREATEREQUAL
43278: AND
43279: PUSH
43280: LD_VAR 0 4
43284: PPUSH
43285: LD_INT 3
43287: PPUSH
43288: CALL_OW 275
43292: PUSH
43293: LD_VAR 0 5
43297: PUSH
43298: LD_INT 3
43300: ARRAY
43301: GREATEREQUAL
43302: AND
43303: ST_TO_ADDR
// end ;
43304: LD_VAR 0 3
43308: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
// result := false ;
43322: LD_ADDR_VAR 0 8
43326: PUSH
43327: LD_INT 0
43329: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43330: LD_VAR 0 5
43334: NOT
43335: PUSH
43336: LD_VAR 0 1
43340: NOT
43341: OR
43342: PUSH
43343: LD_VAR 0 2
43347: NOT
43348: OR
43349: PUSH
43350: LD_VAR 0 3
43354: NOT
43355: OR
43356: IFFALSE 43360
// exit ;
43358: GO 44174
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43360: LD_ADDR_VAR 0 14
43364: PUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: LD_VAR 0 2
43374: PPUSH
43375: LD_VAR 0 3
43379: PPUSH
43380: LD_VAR 0 4
43384: PPUSH
43385: LD_VAR 0 5
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PPUSH
43394: CALL_OW 248
43398: PPUSH
43399: LD_INT 0
43401: PPUSH
43402: CALL 45411 0 6
43406: ST_TO_ADDR
// if not hexes then
43407: LD_VAR 0 14
43411: NOT
43412: IFFALSE 43416
// exit ;
43414: GO 44174
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43416: LD_ADDR_VAR 0 17
43420: PUSH
43421: LD_VAR 0 5
43425: PPUSH
43426: LD_INT 22
43428: PUSH
43429: LD_VAR 0 13
43433: PPUSH
43434: CALL_OW 255
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 30
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 30
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 72
43479: ST_TO_ADDR
// for i = 1 to hexes do
43480: LD_ADDR_VAR 0 9
43484: PUSH
43485: DOUBLE
43486: LD_INT 1
43488: DEC
43489: ST_TO_ADDR
43490: LD_VAR 0 14
43494: PUSH
43495: FOR_TO
43496: IFFALSE 44172
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43498: LD_ADDR_VAR 0 13
43502: PUSH
43503: LD_VAR 0 14
43507: PUSH
43508: LD_VAR 0 9
43512: ARRAY
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PPUSH
43518: LD_VAR 0 14
43522: PUSH
43523: LD_VAR 0 9
43527: ARRAY
43528: PUSH
43529: LD_INT 2
43531: ARRAY
43532: PPUSH
43533: CALL_OW 428
43537: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43538: LD_VAR 0 14
43542: PUSH
43543: LD_VAR 0 9
43547: ARRAY
43548: PUSH
43549: LD_INT 1
43551: ARRAY
43552: PPUSH
43553: LD_VAR 0 14
43557: PUSH
43558: LD_VAR 0 9
43562: ARRAY
43563: PUSH
43564: LD_INT 2
43566: ARRAY
43567: PPUSH
43568: CALL_OW 351
43572: PUSH
43573: LD_VAR 0 14
43577: PUSH
43578: LD_VAR 0 9
43582: ARRAY
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: LD_VAR 0 14
43592: PUSH
43593: LD_VAR 0 9
43597: ARRAY
43598: PUSH
43599: LD_INT 2
43601: ARRAY
43602: PPUSH
43603: CALL_OW 488
43607: NOT
43608: OR
43609: PUSH
43610: LD_VAR 0 13
43614: PPUSH
43615: CALL_OW 247
43619: PUSH
43620: LD_INT 3
43622: EQUAL
43623: OR
43624: IFFALSE 43630
// exit ;
43626: POP
43627: POP
43628: GO 44174
// if not tmp then
43630: LD_VAR 0 13
43634: NOT
43635: IFFALSE 43639
// continue ;
43637: GO 43495
// result := true ;
43639: LD_ADDR_VAR 0 8
43643: PUSH
43644: LD_INT 1
43646: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43647: LD_VAR 0 6
43651: PUSH
43652: LD_VAR 0 13
43656: PPUSH
43657: CALL_OW 247
43661: PUSH
43662: LD_INT 2
43664: EQUAL
43665: AND
43666: PUSH
43667: LD_VAR 0 13
43671: PPUSH
43672: CALL_OW 263
43676: PUSH
43677: LD_INT 1
43679: EQUAL
43680: AND
43681: IFFALSE 43845
// begin if IsDrivenBy ( tmp ) then
43683: LD_VAR 0 13
43687: PPUSH
43688: CALL_OW 311
43692: IFFALSE 43696
// continue ;
43694: GO 43495
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43696: LD_VAR 0 6
43700: PPUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 60
43706: PUSH
43707: EMPTY
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: LD_INT 55
43719: PUSH
43720: EMPTY
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PPUSH
43731: CALL_OW 72
43735: IFFALSE 43843
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43737: LD_ADDR_VAR 0 18
43741: PUSH
43742: LD_VAR 0 6
43746: PPUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 60
43752: PUSH
43753: EMPTY
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: LD_INT 55
43765: PUSH
43766: EMPTY
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PPUSH
43777: CALL_OW 72
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: ST_TO_ADDR
// if IsInUnit ( driver ) then
43786: LD_VAR 0 18
43790: PPUSH
43791: CALL_OW 310
43795: IFFALSE 43806
// ComExit ( driver ) ;
43797: LD_VAR 0 18
43801: PPUSH
43802: CALL 69116 0 1
// AddComEnterUnit ( driver , tmp ) ;
43806: LD_VAR 0 18
43810: PPUSH
43811: LD_VAR 0 13
43815: PPUSH
43816: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43820: LD_VAR 0 18
43824: PPUSH
43825: LD_VAR 0 7
43829: PPUSH
43830: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43834: LD_VAR 0 18
43838: PPUSH
43839: CALL_OW 181
// end ; continue ;
43843: GO 43495
// end ; if not cleaners or not tmp in cleaners then
43845: LD_VAR 0 6
43849: NOT
43850: PUSH
43851: LD_VAR 0 13
43855: PUSH
43856: LD_VAR 0 6
43860: IN
43861: NOT
43862: OR
43863: IFFALSE 44170
// begin if dep then
43865: LD_VAR 0 17
43869: IFFALSE 44005
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43871: LD_ADDR_VAR 0 16
43875: PUSH
43876: LD_VAR 0 17
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: CALL_OW 250
43889: PPUSH
43890: LD_VAR 0 17
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PPUSH
43899: CALL_OW 254
43903: PPUSH
43904: LD_INT 5
43906: PPUSH
43907: CALL_OW 272
43911: PUSH
43912: LD_VAR 0 17
43916: PUSH
43917: LD_INT 1
43919: ARRAY
43920: PPUSH
43921: CALL_OW 251
43925: PPUSH
43926: LD_VAR 0 17
43930: PUSH
43931: LD_INT 1
43933: ARRAY
43934: PPUSH
43935: CALL_OW 254
43939: PPUSH
43940: LD_INT 5
43942: PPUSH
43943: CALL_OW 273
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43952: LD_VAR 0 16
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: PPUSH
43961: LD_VAR 0 16
43965: PUSH
43966: LD_INT 2
43968: ARRAY
43969: PPUSH
43970: CALL_OW 488
43974: IFFALSE 44005
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43976: LD_VAR 0 13
43980: PPUSH
43981: LD_VAR 0 16
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PPUSH
43990: LD_VAR 0 16
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: PPUSH
43999: CALL_OW 111
// continue ;
44003: GO 43495
// end ; end ; r := GetDir ( tmp ) ;
44005: LD_ADDR_VAR 0 15
44009: PUSH
44010: LD_VAR 0 13
44014: PPUSH
44015: CALL_OW 254
44019: ST_TO_ADDR
// if r = 5 then
44020: LD_VAR 0 15
44024: PUSH
44025: LD_INT 5
44027: EQUAL
44028: IFFALSE 44038
// r := 0 ;
44030: LD_ADDR_VAR 0 15
44034: PUSH
44035: LD_INT 0
44037: ST_TO_ADDR
// for j = r to 5 do
44038: LD_ADDR_VAR 0 10
44042: PUSH
44043: DOUBLE
44044: LD_VAR 0 15
44048: DEC
44049: ST_TO_ADDR
44050: LD_INT 5
44052: PUSH
44053: FOR_TO
44054: IFFALSE 44168
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44056: LD_ADDR_VAR 0 11
44060: PUSH
44061: LD_VAR 0 13
44065: PPUSH
44066: CALL_OW 250
44070: PPUSH
44071: LD_VAR 0 10
44075: PPUSH
44076: LD_INT 2
44078: PPUSH
44079: CALL_OW 272
44083: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44084: LD_ADDR_VAR 0 12
44088: PUSH
44089: LD_VAR 0 13
44093: PPUSH
44094: CALL_OW 251
44098: PPUSH
44099: LD_VAR 0 10
44103: PPUSH
44104: LD_INT 2
44106: PPUSH
44107: CALL_OW 273
44111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44112: LD_VAR 0 11
44116: PPUSH
44117: LD_VAR 0 12
44121: PPUSH
44122: CALL_OW 488
44126: PUSH
44127: LD_VAR 0 11
44131: PPUSH
44132: LD_VAR 0 12
44136: PPUSH
44137: CALL_OW 428
44141: NOT
44142: AND
44143: IFFALSE 44166
// begin ComMoveXY ( tmp , _x , _y ) ;
44145: LD_VAR 0 13
44149: PPUSH
44150: LD_VAR 0 11
44154: PPUSH
44155: LD_VAR 0 12
44159: PPUSH
44160: CALL_OW 111
// break ;
44164: GO 44168
// end ; end ;
44166: GO 44053
44168: POP
44169: POP
// end ; end ;
44170: GO 43495
44172: POP
44173: POP
// end ;
44174: LD_VAR 0 8
44178: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44179: LD_INT 0
44181: PPUSH
// result := true ;
44182: LD_ADDR_VAR 0 3
44186: PUSH
44187: LD_INT 1
44189: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44190: LD_VAR 0 2
44194: PUSH
44195: LD_INT 24
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44209
44201: LD_INT 33
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44209
44207: GO 44234
44209: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_INT 32
44217: PPUSH
44218: LD_VAR 0 1
44222: PPUSH
44223: CALL_OW 321
44227: PUSH
44228: LD_INT 2
44230: EQUAL
44231: ST_TO_ADDR
44232: GO 44554
44234: LD_INT 20
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44242
44240: GO 44267
44242: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44243: LD_ADDR_VAR 0 3
44247: PUSH
44248: LD_INT 6
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 321
44260: PUSH
44261: LD_INT 2
44263: EQUAL
44264: ST_TO_ADDR
44265: GO 44554
44267: LD_INT 22
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44281
44273: LD_INT 36
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44306
44281: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_INT 15
44289: PPUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 321
44299: PUSH
44300: LD_INT 2
44302: EQUAL
44303: ST_TO_ADDR
44304: GO 44554
44306: LD_INT 30
44308: DOUBLE
44309: EQUAL
44310: IFTRUE 44314
44312: GO 44339
44314: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44315: LD_ADDR_VAR 0 3
44319: PUSH
44320: LD_INT 20
44322: PPUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 321
44332: PUSH
44333: LD_INT 2
44335: EQUAL
44336: ST_TO_ADDR
44337: GO 44554
44339: LD_INT 28
44341: DOUBLE
44342: EQUAL
44343: IFTRUE 44353
44345: LD_INT 21
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44353
44351: GO 44378
44353: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44354: LD_ADDR_VAR 0 3
44358: PUSH
44359: LD_INT 21
44361: PPUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 321
44371: PUSH
44372: LD_INT 2
44374: EQUAL
44375: ST_TO_ADDR
44376: GO 44554
44378: LD_INT 16
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44413
44386: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_EXP 34
44396: PPUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: CALL_OW 321
44406: PUSH
44407: LD_INT 2
44409: EQUAL
44410: ST_TO_ADDR
44411: GO 44554
44413: LD_INT 19
44415: DOUBLE
44416: EQUAL
44417: IFTRUE 44427
44419: LD_INT 23
44421: DOUBLE
44422: EQUAL
44423: IFTRUE 44427
44425: GO 44454
44427: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_EXP 33
44437: PPUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 321
44447: PUSH
44448: LD_INT 2
44450: EQUAL
44451: ST_TO_ADDR
44452: GO 44554
44454: LD_INT 17
44456: DOUBLE
44457: EQUAL
44458: IFTRUE 44462
44460: GO 44487
44462: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44463: LD_ADDR_VAR 0 3
44467: PUSH
44468: LD_INT 39
44470: PPUSH
44471: LD_VAR 0 1
44475: PPUSH
44476: CALL_OW 321
44480: PUSH
44481: LD_INT 2
44483: EQUAL
44484: ST_TO_ADDR
44485: GO 44554
44487: LD_INT 18
44489: DOUBLE
44490: EQUAL
44491: IFTRUE 44495
44493: GO 44520
44495: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44496: LD_ADDR_VAR 0 3
44500: PUSH
44501: LD_INT 40
44503: PPUSH
44504: LD_VAR 0 1
44508: PPUSH
44509: CALL_OW 321
44513: PUSH
44514: LD_INT 2
44516: EQUAL
44517: ST_TO_ADDR
44518: GO 44554
44520: LD_INT 27
44522: DOUBLE
44523: EQUAL
44524: IFTRUE 44528
44526: GO 44553
44528: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44529: LD_ADDR_VAR 0 3
44533: PUSH
44534: LD_INT 35
44536: PPUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 321
44546: PUSH
44547: LD_INT 2
44549: EQUAL
44550: ST_TO_ADDR
44551: GO 44554
44553: POP
// end ;
44554: LD_VAR 0 3
44558: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44559: LD_INT 0
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
// result := false ;
44572: LD_ADDR_VAR 0 6
44576: PUSH
44577: LD_INT 0
44579: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44580: LD_VAR 0 1
44584: NOT
44585: PUSH
44586: LD_VAR 0 1
44590: PPUSH
44591: CALL_OW 266
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: IN
44606: NOT
44607: OR
44608: PUSH
44609: LD_VAR 0 2
44613: NOT
44614: OR
44615: PUSH
44616: LD_VAR 0 5
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 3
44632: PUSH
44633: LD_INT 4
44635: PUSH
44636: LD_INT 5
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: IN
44647: NOT
44648: OR
44649: PUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: LD_VAR 0 4
44659: PPUSH
44660: CALL_OW 488
44664: NOT
44665: OR
44666: IFFALSE 44670
// exit ;
44668: GO 45406
// side := GetSide ( depot ) ;
44670: LD_ADDR_VAR 0 9
44674: PUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 255
44684: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44685: LD_VAR 0 9
44689: PPUSH
44690: LD_VAR 0 2
44694: PPUSH
44695: CALL 44179 0 2
44699: NOT
44700: IFFALSE 44704
// exit ;
44702: GO 45406
// pom := GetBase ( depot ) ;
44704: LD_ADDR_VAR 0 10
44708: PUSH
44709: LD_VAR 0 1
44713: PPUSH
44714: CALL_OW 274
44718: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44719: LD_ADDR_VAR 0 11
44723: PUSH
44724: LD_VAR 0 2
44728: PPUSH
44729: LD_VAR 0 1
44733: PPUSH
44734: CALL_OW 248
44738: PPUSH
44739: CALL_OW 450
44743: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44744: LD_VAR 0 10
44748: PPUSH
44749: LD_INT 1
44751: PPUSH
44752: CALL_OW 275
44756: PUSH
44757: LD_VAR 0 11
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: GREATEREQUAL
44766: PUSH
44767: LD_VAR 0 10
44771: PPUSH
44772: LD_INT 2
44774: PPUSH
44775: CALL_OW 275
44779: PUSH
44780: LD_VAR 0 11
44784: PUSH
44785: LD_INT 2
44787: ARRAY
44788: GREATEREQUAL
44789: AND
44790: PUSH
44791: LD_VAR 0 10
44795: PPUSH
44796: LD_INT 3
44798: PPUSH
44799: CALL_OW 275
44803: PUSH
44804: LD_VAR 0 11
44808: PUSH
44809: LD_INT 3
44811: ARRAY
44812: GREATEREQUAL
44813: AND
44814: NOT
44815: IFFALSE 44819
// exit ;
44817: GO 45406
// if GetBType ( depot ) = b_depot then
44819: LD_VAR 0 1
44823: PPUSH
44824: CALL_OW 266
44828: PUSH
44829: LD_INT 0
44831: EQUAL
44832: IFFALSE 44844
// dist := 28 else
44834: LD_ADDR_VAR 0 14
44838: PUSH
44839: LD_INT 28
44841: ST_TO_ADDR
44842: GO 44852
// dist := 36 ;
44844: LD_ADDR_VAR 0 14
44848: PUSH
44849: LD_INT 36
44851: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44852: LD_VAR 0 1
44856: PPUSH
44857: LD_VAR 0 3
44861: PPUSH
44862: LD_VAR 0 4
44866: PPUSH
44867: CALL_OW 297
44871: PUSH
44872: LD_VAR 0 14
44876: GREATER
44877: IFFALSE 44881
// exit ;
44879: GO 45406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44881: LD_ADDR_VAR 0 12
44885: PUSH
44886: LD_VAR 0 2
44890: PPUSH
44891: LD_VAR 0 3
44895: PPUSH
44896: LD_VAR 0 4
44900: PPUSH
44901: LD_VAR 0 5
44905: PPUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 248
44915: PPUSH
44916: LD_INT 0
44918: PPUSH
44919: CALL 45411 0 6
44923: ST_TO_ADDR
// if not hexes then
44924: LD_VAR 0 12
44928: NOT
44929: IFFALSE 44933
// exit ;
44931: GO 45406
// hex := GetHexInfo ( x , y ) ;
44933: LD_ADDR_VAR 0 15
44937: PUSH
44938: LD_VAR 0 3
44942: PPUSH
44943: LD_VAR 0 4
44947: PPUSH
44948: CALL_OW 546
44952: ST_TO_ADDR
// if hex [ 1 ] then
44953: LD_VAR 0 15
44957: PUSH
44958: LD_INT 1
44960: ARRAY
44961: IFFALSE 44965
// exit ;
44963: GO 45406
// height := hex [ 2 ] ;
44965: LD_ADDR_VAR 0 13
44969: PUSH
44970: LD_VAR 0 15
44974: PUSH
44975: LD_INT 2
44977: ARRAY
44978: ST_TO_ADDR
// for i = 1 to hexes do
44979: LD_ADDR_VAR 0 7
44983: PUSH
44984: DOUBLE
44985: LD_INT 1
44987: DEC
44988: ST_TO_ADDR
44989: LD_VAR 0 12
44993: PUSH
44994: FOR_TO
44995: IFFALSE 45325
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44997: LD_VAR 0 12
45001: PUSH
45002: LD_VAR 0 7
45006: ARRAY
45007: PUSH
45008: LD_INT 1
45010: ARRAY
45011: PPUSH
45012: LD_VAR 0 12
45016: PUSH
45017: LD_VAR 0 7
45021: ARRAY
45022: PUSH
45023: LD_INT 2
45025: ARRAY
45026: PPUSH
45027: CALL_OW 488
45031: NOT
45032: PUSH
45033: LD_VAR 0 12
45037: PUSH
45038: LD_VAR 0 7
45042: ARRAY
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 12
45052: PUSH
45053: LD_VAR 0 7
45057: ARRAY
45058: PUSH
45059: LD_INT 2
45061: ARRAY
45062: PPUSH
45063: CALL_OW 428
45067: PUSH
45068: LD_INT 0
45070: GREATER
45071: OR
45072: PUSH
45073: LD_VAR 0 12
45077: PUSH
45078: LD_VAR 0 7
45082: ARRAY
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: PPUSH
45088: LD_VAR 0 12
45092: PUSH
45093: LD_VAR 0 7
45097: ARRAY
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: PPUSH
45103: CALL_OW 351
45107: OR
45108: IFFALSE 45114
// exit ;
45110: POP
45111: POP
45112: GO 45406
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45114: LD_ADDR_VAR 0 8
45118: PUSH
45119: LD_VAR 0 12
45123: PUSH
45124: LD_VAR 0 7
45128: ARRAY
45129: PUSH
45130: LD_INT 1
45132: ARRAY
45133: PPUSH
45134: LD_VAR 0 12
45138: PUSH
45139: LD_VAR 0 7
45143: ARRAY
45144: PUSH
45145: LD_INT 2
45147: ARRAY
45148: PPUSH
45149: CALL_OW 546
45153: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45154: LD_VAR 0 8
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: PUSH
45163: LD_VAR 0 8
45167: PUSH
45168: LD_INT 2
45170: ARRAY
45171: PUSH
45172: LD_VAR 0 13
45176: PUSH
45177: LD_INT 2
45179: PLUS
45180: GREATER
45181: OR
45182: PUSH
45183: LD_VAR 0 8
45187: PUSH
45188: LD_INT 2
45190: ARRAY
45191: PUSH
45192: LD_VAR 0 13
45196: PUSH
45197: LD_INT 2
45199: MINUS
45200: LESS
45201: OR
45202: PUSH
45203: LD_VAR 0 8
45207: PUSH
45208: LD_INT 3
45210: ARRAY
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 8
45217: PUSH
45218: LD_INT 9
45220: PUSH
45221: LD_INT 10
45223: PUSH
45224: LD_INT 11
45226: PUSH
45227: LD_INT 12
45229: PUSH
45230: LD_INT 13
45232: PUSH
45233: LD_INT 16
45235: PUSH
45236: LD_INT 17
45238: PUSH
45239: LD_INT 18
45241: PUSH
45242: LD_INT 19
45244: PUSH
45245: LD_INT 20
45247: PUSH
45248: LD_INT 21
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: IN
45266: NOT
45267: OR
45268: PUSH
45269: LD_VAR 0 8
45273: PUSH
45274: LD_INT 5
45276: ARRAY
45277: NOT
45278: OR
45279: PUSH
45280: LD_VAR 0 8
45284: PUSH
45285: LD_INT 6
45287: ARRAY
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 7
45297: PUSH
45298: LD_INT 9
45300: PUSH
45301: LD_INT 10
45303: PUSH
45304: LD_INT 11
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: IN
45315: NOT
45316: OR
45317: IFFALSE 45323
// exit ;
45319: POP
45320: POP
45321: GO 45406
// end ;
45323: GO 44994
45325: POP
45326: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45327: LD_VAR 0 9
45331: PPUSH
45332: LD_VAR 0 3
45336: PPUSH
45337: LD_VAR 0 4
45341: PPUSH
45342: LD_INT 20
45344: PPUSH
45345: CALL 37352 0 4
45349: PUSH
45350: LD_INT 4
45352: ARRAY
45353: IFFALSE 45357
// exit ;
45355: GO 45406
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45357: LD_VAR 0 2
45361: PUSH
45362: LD_INT 29
45364: PUSH
45365: LD_INT 30
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: IN
45372: PUSH
45373: LD_VAR 0 3
45377: PPUSH
45378: LD_VAR 0 4
45382: PPUSH
45383: LD_VAR 0 9
45387: PPUSH
45388: CALL_OW 440
45392: NOT
45393: AND
45394: IFFALSE 45398
// exit ;
45396: GO 45406
// result := true ;
45398: LD_ADDR_VAR 0 6
45402: PUSH
45403: LD_INT 1
45405: ST_TO_ADDR
// end ;
45406: LD_VAR 0 6
45410: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45411: LD_INT 0
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
// result = [ ] ;
45471: LD_ADDR_VAR 0 7
45475: PUSH
45476: EMPTY
45477: ST_TO_ADDR
// temp_list = [ ] ;
45478: LD_ADDR_VAR 0 9
45482: PUSH
45483: EMPTY
45484: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45485: LD_VAR 0 4
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 4
45504: PUSH
45505: LD_INT 5
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: IN
45516: NOT
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: IN
45533: PUSH
45534: LD_VAR 0 5
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: IN
45553: NOT
45554: AND
45555: OR
45556: IFFALSE 45560
// exit ;
45558: GO 63951
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45560: LD_VAR 0 1
45564: PUSH
45565: LD_INT 6
45567: PUSH
45568: LD_INT 7
45570: PUSH
45571: LD_INT 8
45573: PUSH
45574: LD_INT 13
45576: PUSH
45577: LD_INT 12
45579: PUSH
45580: LD_INT 15
45582: PUSH
45583: LD_INT 11
45585: PUSH
45586: LD_INT 14
45588: PUSH
45589: LD_INT 10
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: IN
45603: IFFALSE 45613
// btype = b_lab ;
45605: LD_ADDR_VAR 0 1
45609: PUSH
45610: LD_INT 6
45612: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45613: LD_VAR 0 6
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: IN
45632: NOT
45633: PUSH
45634: LD_VAR 0 1
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: LD_INT 6
45653: PUSH
45654: LD_INT 36
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: LD_INT 5
45662: PUSH
45663: LD_INT 31
45665: PUSH
45666: LD_INT 32
45668: PUSH
45669: LD_INT 33
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: IN
45685: NOT
45686: PUSH
45687: LD_VAR 0 6
45691: PUSH
45692: LD_INT 1
45694: EQUAL
45695: AND
45696: OR
45697: PUSH
45698: LD_VAR 0 1
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 3
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: IN
45713: NOT
45714: PUSH
45715: LD_VAR 0 6
45719: PUSH
45720: LD_INT 2
45722: EQUAL
45723: AND
45724: OR
45725: IFFALSE 45735
// mode = 0 ;
45727: LD_ADDR_VAR 0 6
45731: PUSH
45732: LD_INT 0
45734: ST_TO_ADDR
// case mode of 0 :
45735: LD_VAR 0 6
45739: PUSH
45740: LD_INT 0
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45748
45746: GO 57201
45748: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45749: LD_ADDR_VAR 0 11
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45942: LD_ADDR_VAR 0 12
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46138: LD_ADDR_VAR 0 13
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46337: LD_ADDR_VAR 0 14
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46533: LD_ADDR_VAR 0 15
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46726: LD_ADDR_VAR 0 16
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46919: LD_ADDR_VAR 0 17
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47149: LD_ADDR_VAR 0 18
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47379: LD_ADDR_VAR 0 19
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47609: LD_ADDR_VAR 0 20
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47839: LD_ADDR_VAR 0 21
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48069: LD_ADDR_VAR 0 22
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48299: LD_ADDR_VAR 0 23
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48579: LD_ADDR_VAR 0 24
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48855: LD_ADDR_VAR 0 25
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: LD_INT 3
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49129: LD_ADDR_VAR 0 26
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49405: LD_ADDR_VAR 0 27
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49685: LD_ADDR_VAR 0 28
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49967: LD_ADDR_VAR 0 29
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50246: LD_ADDR_VAR 0 30
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50524: LD_ADDR_VAR 0 31
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50802: LD_ADDR_VAR 0 32
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51080: LD_ADDR_VAR 0 33
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51359: LD_ADDR_VAR 0 34
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51639: LD_ADDR_VAR 0 35
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51751: LD_ADDR_VAR 0 36
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51863: LD_ADDR_VAR 0 37
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51975: LD_ADDR_VAR 0 38
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52087: LD_ADDR_VAR 0 39
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52199: LD_ADDR_VAR 0 40
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52311: LD_ADDR_VAR 0 41
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52661: LD_ADDR_VAR 0 42
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53011: LD_ADDR_VAR 0 43
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53359: LD_ADDR_VAR 0 44
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 3
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53709: LD_ADDR_VAR 0 45
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54059: LD_ADDR_VAR 0 46
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 3
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54407: LD_ADDR_VAR 0 47
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54558: LD_ADDR_VAR 0 48
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54705: LD_ADDR_VAR 0 49
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54849: LD_ADDR_VAR 0 50
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54993: LD_ADDR_VAR 0 51
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55140: LD_ADDR_VAR 0 52
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55291: LD_ADDR_VAR 0 53
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55521: LD_ADDR_VAR 0 54
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55751: LD_ADDR_VAR 0 55
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55981: LD_ADDR_VAR 0 56
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56211: LD_ADDR_VAR 0 57
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56441: LD_ADDR_VAR 0 58
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56671: LD_ADDR_VAR 0 59
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56759: LD_ADDR_VAR 0 60
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56847: LD_ADDR_VAR 0 61
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56935: LD_ADDR_VAR 0 62
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 63
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57111: LD_ADDR_VAR 0 64
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// end ; 1 :
57199: GO 63096
57201: LD_INT 1
57203: DOUBLE
57204: EQUAL
57205: IFTRUE 57209
57207: GO 59832
57209: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57210: LD_ADDR_VAR 0 11
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57254: LD_ADDR_VAR 0 12
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57295: LD_ADDR_VAR 0 13
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57335: LD_ADDR_VAR 0 14
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57376: LD_ADDR_VAR 0 15
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57420: LD_ADDR_VAR 0 16
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57466: LD_ADDR_VAR 0 17
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57510: LD_ADDR_VAR 0 18
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57551: LD_ADDR_VAR 0 19
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57591: LD_ADDR_VAR 0 20
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57632: LD_ADDR_VAR 0 21
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57676: LD_ADDR_VAR 0 22
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57722: LD_ADDR_VAR 0 23
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57766: LD_ADDR_VAR 0 24
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57807: LD_ADDR_VAR 0 25
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57847: LD_ADDR_VAR 0 26
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57888: LD_ADDR_VAR 0 27
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57932: LD_ADDR_VAR 0 28
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 4
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57978: LD_ADDR_VAR 0 29
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 4
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 5
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 5
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 6
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 6
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 5
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58133: LD_ADDR_VAR 0 30
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 4
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 5
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 6
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 6
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58276: LD_ADDR_VAR 0 31
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: LD_INT 4
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 4
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: LD_INT 5
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 5
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 6
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 6
58383: PUSH
58384: LD_INT 6
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 5
58393: PUSH
58394: LD_INT 6
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58415: LD_ADDR_VAR 0 32
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 4
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 5
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 5
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 6
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 6
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 5
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58558: LD_ADDR_VAR 0 33
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 5
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 5
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 6
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 6
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58713: LD_ADDR_VAR 0 34
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: LD_INT 4
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 4
58780: NEG
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 4
58792: NEG
58793: PUSH
58794: LD_INT 5
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 5
58804: NEG
58805: PUSH
58806: LD_INT 4
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 5
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 5
58828: NEG
58829: PUSH
58830: LD_INT 6
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 6
58840: NEG
58841: PUSH
58842: LD_INT 5
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 6
58852: NEG
58853: PUSH
58854: LD_INT 6
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58876: LD_ADDR_VAR 0 41
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58920: LD_ADDR_VAR 0 42
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58961: LD_ADDR_VAR 0 43
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59001: LD_ADDR_VAR 0 44
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59042: LD_ADDR_VAR 0 45
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59086: LD_ADDR_VAR 0 46
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 3
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59132: LD_ADDR_VAR 0 47
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59165: LD_ADDR_VAR 0 48
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59196: LD_ADDR_VAR 0 49
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59225: LD_ADDR_VAR 0 50
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59254: LD_ADDR_VAR 0 51
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59285: LD_ADDR_VAR 0 52
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59318: LD_ADDR_VAR 0 53
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59362: LD_ADDR_VAR 0 54
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59403: LD_ADDR_VAR 0 55
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59443: LD_ADDR_VAR 0 56
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59484: LD_ADDR_VAR 0 57
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59528: LD_ADDR_VAR 0 58
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59574: LD_ADDR_VAR 0 59
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59618: LD_ADDR_VAR 0 60
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59659: LD_ADDR_VAR 0 61
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59699: LD_ADDR_VAR 0 62
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59740: LD_ADDR_VAR 0 63
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59784: LD_ADDR_VAR 0 64
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: ST_TO_ADDR
// end ; 2 :
59830: GO 63096
59832: LD_INT 2
59834: DOUBLE
59835: EQUAL
59836: IFTRUE 59840
59838: GO 63095
59840: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59841: LD_ADDR_VAR 0 29
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 5
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 4
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 5
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 5
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: LD_INT 4
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 4
60238: NEG
60239: PUSH
60240: LD_INT 5
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: LD_INT 4
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: LD_INT 3
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 4
60274: NEG
60275: PUSH
60276: LD_INT 3
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 5
60298: NEG
60299: PUSH
60300: LD_INT 5
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: LD_INT 5
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 5
60322: NEG
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60379: LD_ADDR_VAR 0 30
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 5
60406: PUSH
60407: LD_INT 4
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 5
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: LD_INT 4
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 5
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: LD_INT 5
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 3
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 4
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 4
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 4
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 4
60569: NEG
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: NEG
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 5
60625: NEG
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 5
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 5
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: NEG
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 4
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: LD_INT 3
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: LD_INT 4
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 4
60767: NEG
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 5
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 5
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60926: LD_ADDR_VAR 0 31
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 4
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 5
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 3
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 4
61082: NEG
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: LD_INT 4
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 4
61140: NEG
61141: PUSH
61142: LD_INT 5
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 3
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 4
61176: NEG
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 5
61200: NEG
61201: PUSH
61202: LD_INT 5
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: LD_INT 5
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 5
61224: NEG
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 4
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 5
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 5
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 5
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61476: LD_ADDR_VAR 0 32
61480: PUSH
61481: LD_INT 4
61483: NEG
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 4
61494: NEG
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 5
61539: NEG
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 5
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 5
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: LD_INT 4
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 4
61657: NEG
61658: PUSH
61659: LD_INT 4
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: LD_INT 4
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 4
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 5
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 4
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: LD_INT 4
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: LD_INT 5
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 4
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 4
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: LD_INT 4
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 4
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 5
61908: PUSH
61909: LD_INT 4
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: LD_INT 5
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: LD_INT 5
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: LD_INT 3
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 5
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62023: LD_ADDR_VAR 0 33
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: LD_INT 4
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 4
62042: NEG
62043: PUSH
62044: LD_INT 5
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: LD_INT 4
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 4
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 5
62102: NEG
62103: PUSH
62104: LD_INT 5
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 5
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 5
62126: NEG
62127: PUSH
62128: LD_INT 3
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 4
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 4
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 4
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 4
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 5
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 5
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 5
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 3
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 4
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 3
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 4
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: LD_INT 4
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 4
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 4
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 5
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 5
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 5
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62561: LD_ADDR_VAR 0 34
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 4
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 5
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 4
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 5
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 5
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 4
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 4
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 4
62763: PUSH
62764: LD_INT 4
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 4
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 5
62783: PUSH
62784: LD_INT 4
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 5
62793: PUSH
62794: LD_INT 5
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 3
62813: PUSH
62814: LD_INT 4
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 5
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: LD_INT 5
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 4
62946: NEG
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 4
62957: NEG
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 4
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 5
63002: NEG
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 5
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 5
63025: NEG
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 3
63037: NEG
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// end ; end ;
63093: GO 63096
63095: POP
// case btype of b_depot , b_warehouse :
63096: LD_VAR 0 1
63100: PUSH
63101: LD_INT 0
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63115
63107: LD_INT 1
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63115
63113: GO 63316
63115: POP
// case nation of nation_american :
63116: LD_VAR 0 5
63120: PUSH
63121: LD_INT 1
63123: DOUBLE
63124: EQUAL
63125: IFTRUE 63129
63127: GO 63185
63129: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63130: LD_ADDR_VAR 0 9
63134: PUSH
63135: LD_VAR 0 11
63139: PUSH
63140: LD_VAR 0 12
63144: PUSH
63145: LD_VAR 0 13
63149: PUSH
63150: LD_VAR 0 14
63154: PUSH
63155: LD_VAR 0 15
63159: PUSH
63160: LD_VAR 0 16
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: PUSH
63173: LD_VAR 0 4
63177: PUSH
63178: LD_INT 1
63180: PLUS
63181: ARRAY
63182: ST_TO_ADDR
63183: GO 63314
63185: LD_INT 2
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63193
63191: GO 63249
63193: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63194: LD_ADDR_VAR 0 9
63198: PUSH
63199: LD_VAR 0 17
63203: PUSH
63204: LD_VAR 0 18
63208: PUSH
63209: LD_VAR 0 19
63213: PUSH
63214: LD_VAR 0 20
63218: PUSH
63219: LD_VAR 0 21
63223: PUSH
63224: LD_VAR 0 22
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: PUSH
63237: LD_VAR 0 4
63241: PUSH
63242: LD_INT 1
63244: PLUS
63245: ARRAY
63246: ST_TO_ADDR
63247: GO 63314
63249: LD_INT 3
63251: DOUBLE
63252: EQUAL
63253: IFTRUE 63257
63255: GO 63313
63257: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63258: LD_ADDR_VAR 0 9
63262: PUSH
63263: LD_VAR 0 23
63267: PUSH
63268: LD_VAR 0 24
63272: PUSH
63273: LD_VAR 0 25
63277: PUSH
63278: LD_VAR 0 26
63282: PUSH
63283: LD_VAR 0 27
63287: PUSH
63288: LD_VAR 0 28
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: PUSH
63301: LD_VAR 0 4
63305: PUSH
63306: LD_INT 1
63308: PLUS
63309: ARRAY
63310: ST_TO_ADDR
63311: GO 63314
63313: POP
63314: GO 63869
63316: LD_INT 2
63318: DOUBLE
63319: EQUAL
63320: IFTRUE 63330
63322: LD_INT 3
63324: DOUBLE
63325: EQUAL
63326: IFTRUE 63330
63328: GO 63386
63330: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63331: LD_ADDR_VAR 0 9
63335: PUSH
63336: LD_VAR 0 29
63340: PUSH
63341: LD_VAR 0 30
63345: PUSH
63346: LD_VAR 0 31
63350: PUSH
63351: LD_VAR 0 32
63355: PUSH
63356: LD_VAR 0 33
63360: PUSH
63361: LD_VAR 0 34
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: PUSH
63374: LD_VAR 0 4
63378: PUSH
63379: LD_INT 1
63381: PLUS
63382: ARRAY
63383: ST_TO_ADDR
63384: GO 63869
63386: LD_INT 16
63388: DOUBLE
63389: EQUAL
63390: IFTRUE 63448
63392: LD_INT 17
63394: DOUBLE
63395: EQUAL
63396: IFTRUE 63448
63398: LD_INT 18
63400: DOUBLE
63401: EQUAL
63402: IFTRUE 63448
63404: LD_INT 19
63406: DOUBLE
63407: EQUAL
63408: IFTRUE 63448
63410: LD_INT 22
63412: DOUBLE
63413: EQUAL
63414: IFTRUE 63448
63416: LD_INT 20
63418: DOUBLE
63419: EQUAL
63420: IFTRUE 63448
63422: LD_INT 21
63424: DOUBLE
63425: EQUAL
63426: IFTRUE 63448
63428: LD_INT 23
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63448
63434: LD_INT 24
63436: DOUBLE
63437: EQUAL
63438: IFTRUE 63448
63440: LD_INT 25
63442: DOUBLE
63443: EQUAL
63444: IFTRUE 63448
63446: GO 63504
63448: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63449: LD_ADDR_VAR 0 9
63453: PUSH
63454: LD_VAR 0 35
63458: PUSH
63459: LD_VAR 0 36
63463: PUSH
63464: LD_VAR 0 37
63468: PUSH
63469: LD_VAR 0 38
63473: PUSH
63474: LD_VAR 0 39
63478: PUSH
63479: LD_VAR 0 40
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: PUSH
63492: LD_VAR 0 4
63496: PUSH
63497: LD_INT 1
63499: PLUS
63500: ARRAY
63501: ST_TO_ADDR
63502: GO 63869
63504: LD_INT 6
63506: DOUBLE
63507: EQUAL
63508: IFTRUE 63560
63510: LD_INT 7
63512: DOUBLE
63513: EQUAL
63514: IFTRUE 63560
63516: LD_INT 8
63518: DOUBLE
63519: EQUAL
63520: IFTRUE 63560
63522: LD_INT 13
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63560
63528: LD_INT 12
63530: DOUBLE
63531: EQUAL
63532: IFTRUE 63560
63534: LD_INT 15
63536: DOUBLE
63537: EQUAL
63538: IFTRUE 63560
63540: LD_INT 11
63542: DOUBLE
63543: EQUAL
63544: IFTRUE 63560
63546: LD_INT 14
63548: DOUBLE
63549: EQUAL
63550: IFTRUE 63560
63552: LD_INT 10
63554: DOUBLE
63555: EQUAL
63556: IFTRUE 63560
63558: GO 63616
63560: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63561: LD_ADDR_VAR 0 9
63565: PUSH
63566: LD_VAR 0 41
63570: PUSH
63571: LD_VAR 0 42
63575: PUSH
63576: LD_VAR 0 43
63580: PUSH
63581: LD_VAR 0 44
63585: PUSH
63586: LD_VAR 0 45
63590: PUSH
63591: LD_VAR 0 46
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: PUSH
63604: LD_VAR 0 4
63608: PUSH
63609: LD_INT 1
63611: PLUS
63612: ARRAY
63613: ST_TO_ADDR
63614: GO 63869
63616: LD_INT 36
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63624
63622: GO 63680
63624: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63625: LD_ADDR_VAR 0 9
63629: PUSH
63630: LD_VAR 0 47
63634: PUSH
63635: LD_VAR 0 48
63639: PUSH
63640: LD_VAR 0 49
63644: PUSH
63645: LD_VAR 0 50
63649: PUSH
63650: LD_VAR 0 51
63654: PUSH
63655: LD_VAR 0 52
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: PUSH
63668: LD_VAR 0 4
63672: PUSH
63673: LD_INT 1
63675: PLUS
63676: ARRAY
63677: ST_TO_ADDR
63678: GO 63869
63680: LD_INT 4
63682: DOUBLE
63683: EQUAL
63684: IFTRUE 63706
63686: LD_INT 5
63688: DOUBLE
63689: EQUAL
63690: IFTRUE 63706
63692: LD_INT 34
63694: DOUBLE
63695: EQUAL
63696: IFTRUE 63706
63698: LD_INT 37
63700: DOUBLE
63701: EQUAL
63702: IFTRUE 63706
63704: GO 63762
63706: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63707: LD_ADDR_VAR 0 9
63711: PUSH
63712: LD_VAR 0 53
63716: PUSH
63717: LD_VAR 0 54
63721: PUSH
63722: LD_VAR 0 55
63726: PUSH
63727: LD_VAR 0 56
63731: PUSH
63732: LD_VAR 0 57
63736: PUSH
63737: LD_VAR 0 58
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: PUSH
63750: LD_VAR 0 4
63754: PUSH
63755: LD_INT 1
63757: PLUS
63758: ARRAY
63759: ST_TO_ADDR
63760: GO 63869
63762: LD_INT 31
63764: DOUBLE
63765: EQUAL
63766: IFTRUE 63812
63768: LD_INT 32
63770: DOUBLE
63771: EQUAL
63772: IFTRUE 63812
63774: LD_INT 33
63776: DOUBLE
63777: EQUAL
63778: IFTRUE 63812
63780: LD_INT 27
63782: DOUBLE
63783: EQUAL
63784: IFTRUE 63812
63786: LD_INT 26
63788: DOUBLE
63789: EQUAL
63790: IFTRUE 63812
63792: LD_INT 28
63794: DOUBLE
63795: EQUAL
63796: IFTRUE 63812
63798: LD_INT 29
63800: DOUBLE
63801: EQUAL
63802: IFTRUE 63812
63804: LD_INT 30
63806: DOUBLE
63807: EQUAL
63808: IFTRUE 63812
63810: GO 63868
63812: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63813: LD_ADDR_VAR 0 9
63817: PUSH
63818: LD_VAR 0 59
63822: PUSH
63823: LD_VAR 0 60
63827: PUSH
63828: LD_VAR 0 61
63832: PUSH
63833: LD_VAR 0 62
63837: PUSH
63838: LD_VAR 0 63
63842: PUSH
63843: LD_VAR 0 64
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: PUSH
63856: LD_VAR 0 4
63860: PUSH
63861: LD_INT 1
63863: PLUS
63864: ARRAY
63865: ST_TO_ADDR
63866: GO 63869
63868: POP
// temp_list2 = [ ] ;
63869: LD_ADDR_VAR 0 10
63873: PUSH
63874: EMPTY
63875: ST_TO_ADDR
// for i in temp_list do
63876: LD_ADDR_VAR 0 8
63880: PUSH
63881: LD_VAR 0 9
63885: PUSH
63886: FOR_IN
63887: IFFALSE 63939
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63889: LD_ADDR_VAR 0 10
63893: PUSH
63894: LD_VAR 0 10
63898: PUSH
63899: LD_VAR 0 8
63903: PUSH
63904: LD_INT 1
63906: ARRAY
63907: PUSH
63908: LD_VAR 0 2
63912: PLUS
63913: PUSH
63914: LD_VAR 0 8
63918: PUSH
63919: LD_INT 2
63921: ARRAY
63922: PUSH
63923: LD_VAR 0 3
63927: PLUS
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: ADD
63936: ST_TO_ADDR
63937: GO 63886
63939: POP
63940: POP
// result = temp_list2 ;
63941: LD_ADDR_VAR 0 7
63945: PUSH
63946: LD_VAR 0 10
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 7
63955: RET
// export function EnemyInRange ( unit , dist ) ; begin
63956: LD_INT 0
63958: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63959: LD_ADDR_VAR 0 3
63963: PUSH
63964: LD_VAR 0 1
63968: PPUSH
63969: CALL_OW 255
63973: PPUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: CALL_OW 250
63983: PPUSH
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 251
63993: PPUSH
63994: LD_VAR 0 2
63998: PPUSH
63999: CALL 37352 0 4
64003: PUSH
64004: LD_INT 4
64006: ARRAY
64007: ST_TO_ADDR
// end ;
64008: LD_VAR 0 3
64012: RET
// export function PlayerSeeMe ( unit ) ; begin
64013: LD_INT 0
64015: PPUSH
// result := See ( your_side , unit ) ;
64016: LD_ADDR_VAR 0 2
64020: PUSH
64021: LD_OWVAR 2
64025: PPUSH
64026: LD_VAR 0 1
64030: PPUSH
64031: CALL_OW 292
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 2
64040: RET
// export function ReverseDir ( unit ) ; begin
64041: LD_INT 0
64043: PPUSH
// if not unit then
64044: LD_VAR 0 1
64048: NOT
64049: IFFALSE 64053
// exit ;
64051: GO 64076
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64053: LD_ADDR_VAR 0 2
64057: PUSH
64058: LD_VAR 0 1
64062: PPUSH
64063: CALL_OW 254
64067: PUSH
64068: LD_INT 3
64070: PLUS
64071: PUSH
64072: LD_INT 6
64074: MOD
64075: ST_TO_ADDR
// end ;
64076: LD_VAR 0 2
64080: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64081: LD_INT 0
64083: PPUSH
64084: PPUSH
64085: PPUSH
64086: PPUSH
64087: PPUSH
// if not hexes then
64088: LD_VAR 0 2
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64245
// dist := 9999 ;
64097: LD_ADDR_VAR 0 5
64101: PUSH
64102: LD_INT 9999
64104: ST_TO_ADDR
// for i = 1 to hexes do
64105: LD_ADDR_VAR 0 4
64109: PUSH
64110: DOUBLE
64111: LD_INT 1
64113: DEC
64114: ST_TO_ADDR
64115: LD_VAR 0 2
64119: PUSH
64120: FOR_TO
64121: IFFALSE 64233
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64123: LD_VAR 0 1
64127: PPUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_VAR 0 4
64137: ARRAY
64138: PUSH
64139: LD_INT 1
64141: ARRAY
64142: PPUSH
64143: LD_VAR 0 2
64147: PUSH
64148: LD_VAR 0 4
64152: ARRAY
64153: PUSH
64154: LD_INT 2
64156: ARRAY
64157: PPUSH
64158: CALL_OW 297
64162: PUSH
64163: LD_VAR 0 5
64167: LESS
64168: IFFALSE 64231
// begin hex := hexes [ i ] ;
64170: LD_ADDR_VAR 0 7
64174: PUSH
64175: LD_VAR 0 2
64179: PUSH
64180: LD_VAR 0 4
64184: ARRAY
64185: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64186: LD_ADDR_VAR 0 5
64190: PUSH
64191: LD_VAR 0 1
64195: PPUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_VAR 0 4
64205: ARRAY
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PPUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_VAR 0 4
64220: ARRAY
64221: PUSH
64222: LD_INT 2
64224: ARRAY
64225: PPUSH
64226: CALL_OW 297
64230: ST_TO_ADDR
// end ; end ;
64231: GO 64120
64233: POP
64234: POP
// result := hex ;
64235: LD_ADDR_VAR 0 3
64239: PUSH
64240: LD_VAR 0 7
64244: ST_TO_ADDR
// end ;
64245: LD_VAR 0 3
64249: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64254: LD_VAR 0 1
64258: NOT
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 21
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 23
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PPUSH
64289: CALL_OW 69
64293: IN
64294: NOT
64295: OR
64296: IFFALSE 64300
// exit ;
64298: GO 64347
// for i = 1 to 3 do
64300: LD_ADDR_VAR 0 3
64304: PUSH
64305: DOUBLE
64306: LD_INT 1
64308: DEC
64309: ST_TO_ADDR
64310: LD_INT 3
64312: PUSH
64313: FOR_TO
64314: IFFALSE 64345
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64316: LD_VAR 0 1
64320: PPUSH
64321: CALL_OW 250
64325: PPUSH
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 251
64335: PPUSH
64336: LD_INT 1
64338: PPUSH
64339: CALL_OW 453
64343: GO 64313
64345: POP
64346: POP
// end ;
64347: LD_VAR 0 2
64351: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64352: LD_INT 0
64354: PPUSH
64355: PPUSH
64356: PPUSH
64357: PPUSH
64358: PPUSH
64359: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64360: LD_VAR 0 1
64364: NOT
64365: PUSH
64366: LD_VAR 0 2
64370: NOT
64371: OR
64372: PUSH
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 314
64382: OR
64383: IFFALSE 64387
// exit ;
64385: GO 64828
// x := GetX ( enemy_unit ) ;
64387: LD_ADDR_VAR 0 7
64391: PUSH
64392: LD_VAR 0 2
64396: PPUSH
64397: CALL_OW 250
64401: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64402: LD_ADDR_VAR 0 8
64406: PUSH
64407: LD_VAR 0 2
64411: PPUSH
64412: CALL_OW 251
64416: ST_TO_ADDR
// if not x or not y then
64417: LD_VAR 0 7
64421: NOT
64422: PUSH
64423: LD_VAR 0 8
64427: NOT
64428: OR
64429: IFFALSE 64433
// exit ;
64431: GO 64828
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64433: LD_ADDR_VAR 0 6
64437: PUSH
64438: LD_VAR 0 7
64442: PPUSH
64443: LD_INT 0
64445: PPUSH
64446: LD_INT 4
64448: PPUSH
64449: CALL_OW 272
64453: PUSH
64454: LD_VAR 0 8
64458: PPUSH
64459: LD_INT 0
64461: PPUSH
64462: LD_INT 4
64464: PPUSH
64465: CALL_OW 273
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_VAR 0 7
64478: PPUSH
64479: LD_INT 1
64481: PPUSH
64482: LD_INT 4
64484: PPUSH
64485: CALL_OW 272
64489: PUSH
64490: LD_VAR 0 8
64494: PPUSH
64495: LD_INT 1
64497: PPUSH
64498: LD_INT 4
64500: PPUSH
64501: CALL_OW 273
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_VAR 0 7
64514: PPUSH
64515: LD_INT 2
64517: PPUSH
64518: LD_INT 4
64520: PPUSH
64521: CALL_OW 272
64525: PUSH
64526: LD_VAR 0 8
64530: PPUSH
64531: LD_INT 2
64533: PPUSH
64534: LD_INT 4
64536: PPUSH
64537: CALL_OW 273
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_VAR 0 7
64550: PPUSH
64551: LD_INT 3
64553: PPUSH
64554: LD_INT 4
64556: PPUSH
64557: CALL_OW 272
64561: PUSH
64562: LD_VAR 0 8
64566: PPUSH
64567: LD_INT 3
64569: PPUSH
64570: LD_INT 4
64572: PPUSH
64573: CALL_OW 273
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 7
64586: PPUSH
64587: LD_INT 4
64589: PPUSH
64590: LD_INT 4
64592: PPUSH
64593: CALL_OW 272
64597: PUSH
64598: LD_VAR 0 8
64602: PPUSH
64603: LD_INT 4
64605: PPUSH
64606: LD_INT 4
64608: PPUSH
64609: CALL_OW 273
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_VAR 0 7
64622: PPUSH
64623: LD_INT 5
64625: PPUSH
64626: LD_INT 4
64628: PPUSH
64629: CALL_OW 272
64633: PUSH
64634: LD_VAR 0 8
64638: PPUSH
64639: LD_INT 5
64641: PPUSH
64642: LD_INT 4
64644: PPUSH
64645: CALL_OW 273
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// for i = tmp downto 1 do
64662: LD_ADDR_VAR 0 4
64666: PUSH
64667: DOUBLE
64668: LD_VAR 0 6
64672: INC
64673: ST_TO_ADDR
64674: LD_INT 1
64676: PUSH
64677: FOR_DOWNTO
64678: IFFALSE 64779
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64680: LD_VAR 0 6
64684: PUSH
64685: LD_VAR 0 4
64689: ARRAY
64690: PUSH
64691: LD_INT 1
64693: ARRAY
64694: PPUSH
64695: LD_VAR 0 6
64699: PUSH
64700: LD_VAR 0 4
64704: ARRAY
64705: PUSH
64706: LD_INT 2
64708: ARRAY
64709: PPUSH
64710: CALL_OW 488
64714: NOT
64715: PUSH
64716: LD_VAR 0 6
64720: PUSH
64721: LD_VAR 0 4
64725: ARRAY
64726: PUSH
64727: LD_INT 1
64729: ARRAY
64730: PPUSH
64731: LD_VAR 0 6
64735: PUSH
64736: LD_VAR 0 4
64740: ARRAY
64741: PUSH
64742: LD_INT 2
64744: ARRAY
64745: PPUSH
64746: CALL_OW 428
64750: PUSH
64751: LD_INT 0
64753: NONEQUAL
64754: OR
64755: IFFALSE 64777
// tmp := Delete ( tmp , i ) ;
64757: LD_ADDR_VAR 0 6
64761: PUSH
64762: LD_VAR 0 6
64766: PPUSH
64767: LD_VAR 0 4
64771: PPUSH
64772: CALL_OW 3
64776: ST_TO_ADDR
64777: GO 64677
64779: POP
64780: POP
// j := GetClosestHex ( unit , tmp ) ;
64781: LD_ADDR_VAR 0 5
64785: PUSH
64786: LD_VAR 0 1
64790: PPUSH
64791: LD_VAR 0 6
64795: PPUSH
64796: CALL 64081 0 2
64800: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64801: LD_VAR 0 1
64805: PPUSH
64806: LD_VAR 0 5
64810: PUSH
64811: LD_INT 1
64813: ARRAY
64814: PPUSH
64815: LD_VAR 0 5
64819: PUSH
64820: LD_INT 2
64822: ARRAY
64823: PPUSH
64824: CALL_OW 111
// end ;
64828: LD_VAR 0 3
64832: RET
// export function PrepareApemanSoldier ( ) ; begin
64833: LD_INT 0
64835: PPUSH
// uc_nation := 0 ;
64836: LD_ADDR_OWVAR 21
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// hc_sex := sex_male ;
64844: LD_ADDR_OWVAR 27
64848: PUSH
64849: LD_INT 1
64851: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64852: LD_ADDR_OWVAR 28
64856: PUSH
64857: LD_INT 15
64859: ST_TO_ADDR
// hc_gallery :=  ;
64860: LD_ADDR_OWVAR 33
64864: PUSH
64865: LD_STRING 
64867: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64868: LD_ADDR_OWVAR 31
64872: PUSH
64873: LD_INT 0
64875: PPUSH
64876: LD_INT 3
64878: PPUSH
64879: CALL_OW 12
64883: PUSH
64884: LD_INT 0
64886: PPUSH
64887: LD_INT 3
64889: PPUSH
64890: CALL_OW 12
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: ST_TO_ADDR
// end ;
64907: LD_VAR 0 1
64911: RET
// export function PrepareApemanEngineer ( ) ; begin
64912: LD_INT 0
64914: PPUSH
// uc_nation := 0 ;
64915: LD_ADDR_OWVAR 21
64919: PUSH
64920: LD_INT 0
64922: ST_TO_ADDR
// hc_sex := sex_male ;
64923: LD_ADDR_OWVAR 27
64927: PUSH
64928: LD_INT 1
64930: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64931: LD_ADDR_OWVAR 28
64935: PUSH
64936: LD_INT 16
64938: ST_TO_ADDR
// hc_gallery :=  ;
64939: LD_ADDR_OWVAR 33
64943: PUSH
64944: LD_STRING 
64946: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64947: LD_ADDR_OWVAR 31
64951: PUSH
64952: LD_INT 0
64954: PPUSH
64955: LD_INT 3
64957: PPUSH
64958: CALL_OW 12
64962: PUSH
64963: LD_INT 0
64965: PPUSH
64966: LD_INT 3
64968: PPUSH
64969: CALL_OW 12
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// end ;
64986: LD_VAR 0 1
64990: RET
// export function PrepareApeman ( agressivity ) ; begin
64991: LD_INT 0
64993: PPUSH
// uc_side := 0 ;
64994: LD_ADDR_OWVAR 20
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// uc_nation := 0 ;
65002: LD_ADDR_OWVAR 21
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// hc_sex := sex_male ;
65010: LD_ADDR_OWVAR 27
65014: PUSH
65015: LD_INT 1
65017: ST_TO_ADDR
// hc_class := class_apeman ;
65018: LD_ADDR_OWVAR 28
65022: PUSH
65023: LD_INT 12
65025: ST_TO_ADDR
// hc_gallery :=  ;
65026: LD_ADDR_OWVAR 33
65030: PUSH
65031: LD_STRING 
65033: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65034: LD_ADDR_OWVAR 35
65038: PUSH
65039: LD_VAR 0 1
65043: NEG
65044: PPUSH
65045: LD_VAR 0 1
65049: PPUSH
65050: CALL_OW 12
65054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65055: LD_ADDR_OWVAR 31
65059: PUSH
65060: LD_INT 0
65062: PPUSH
65063: LD_INT 3
65065: PPUSH
65066: CALL_OW 12
65070: PUSH
65071: LD_INT 0
65073: PPUSH
65074: LD_INT 3
65076: PPUSH
65077: CALL_OW 12
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// end ;
65094: LD_VAR 0 2
65098: RET
// export function PrepareTiger ( agressivity ) ; begin
65099: LD_INT 0
65101: PPUSH
// uc_side := 0 ;
65102: LD_ADDR_OWVAR 20
65106: PUSH
65107: LD_INT 0
65109: ST_TO_ADDR
// uc_nation := 0 ;
65110: LD_ADDR_OWVAR 21
65114: PUSH
65115: LD_INT 0
65117: ST_TO_ADDR
// hc_class := class_tiger ;
65118: LD_ADDR_OWVAR 28
65122: PUSH
65123: LD_INT 14
65125: ST_TO_ADDR
// hc_gallery :=  ;
65126: LD_ADDR_OWVAR 33
65130: PUSH
65131: LD_STRING 
65133: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65134: LD_ADDR_OWVAR 35
65138: PUSH
65139: LD_VAR 0 1
65143: NEG
65144: PPUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 12
65154: ST_TO_ADDR
// end ;
65155: LD_VAR 0 2
65159: RET
// export function PrepareEnchidna ( ) ; begin
65160: LD_INT 0
65162: PPUSH
// uc_side := 0 ;
65163: LD_ADDR_OWVAR 20
65167: PUSH
65168: LD_INT 0
65170: ST_TO_ADDR
// uc_nation := 0 ;
65171: LD_ADDR_OWVAR 21
65175: PUSH
65176: LD_INT 0
65178: ST_TO_ADDR
// hc_class := class_baggie ;
65179: LD_ADDR_OWVAR 28
65183: PUSH
65184: LD_INT 13
65186: ST_TO_ADDR
// hc_gallery :=  ;
65187: LD_ADDR_OWVAR 33
65191: PUSH
65192: LD_STRING 
65194: ST_TO_ADDR
// end ;
65195: LD_VAR 0 1
65199: RET
// export function PrepareFrog ( ) ; begin
65200: LD_INT 0
65202: PPUSH
// uc_side := 0 ;
65203: LD_ADDR_OWVAR 20
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// uc_nation := 0 ;
65211: LD_ADDR_OWVAR 21
65215: PUSH
65216: LD_INT 0
65218: ST_TO_ADDR
// hc_class := class_frog ;
65219: LD_ADDR_OWVAR 28
65223: PUSH
65224: LD_INT 19
65226: ST_TO_ADDR
// hc_gallery :=  ;
65227: LD_ADDR_OWVAR 33
65231: PUSH
65232: LD_STRING 
65234: ST_TO_ADDR
// end ;
65235: LD_VAR 0 1
65239: RET
// export function PrepareFish ( ) ; begin
65240: LD_INT 0
65242: PPUSH
// uc_side := 0 ;
65243: LD_ADDR_OWVAR 20
65247: PUSH
65248: LD_INT 0
65250: ST_TO_ADDR
// uc_nation := 0 ;
65251: LD_ADDR_OWVAR 21
65255: PUSH
65256: LD_INT 0
65258: ST_TO_ADDR
// hc_class := class_fish ;
65259: LD_ADDR_OWVAR 28
65263: PUSH
65264: LD_INT 20
65266: ST_TO_ADDR
// hc_gallery :=  ;
65267: LD_ADDR_OWVAR 33
65271: PUSH
65272: LD_STRING 
65274: ST_TO_ADDR
// end ;
65275: LD_VAR 0 1
65279: RET
// export function PrepareBird ( ) ; begin
65280: LD_INT 0
65282: PPUSH
// uc_side := 0 ;
65283: LD_ADDR_OWVAR 20
65287: PUSH
65288: LD_INT 0
65290: ST_TO_ADDR
// uc_nation := 0 ;
65291: LD_ADDR_OWVAR 21
65295: PUSH
65296: LD_INT 0
65298: ST_TO_ADDR
// hc_class := class_phororhacos ;
65299: LD_ADDR_OWVAR 28
65303: PUSH
65304: LD_INT 18
65306: ST_TO_ADDR
// hc_gallery :=  ;
65307: LD_ADDR_OWVAR 33
65311: PUSH
65312: LD_STRING 
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 1
65319: RET
// export function PrepareHorse ( ) ; begin
65320: LD_INT 0
65322: PPUSH
// uc_side := 0 ;
65323: LD_ADDR_OWVAR 20
65327: PUSH
65328: LD_INT 0
65330: ST_TO_ADDR
// uc_nation := 0 ;
65331: LD_ADDR_OWVAR 21
65335: PUSH
65336: LD_INT 0
65338: ST_TO_ADDR
// hc_class := class_horse ;
65339: LD_ADDR_OWVAR 28
65343: PUSH
65344: LD_INT 21
65346: ST_TO_ADDR
// hc_gallery :=  ;
65347: LD_ADDR_OWVAR 33
65351: PUSH
65352: LD_STRING 
65354: ST_TO_ADDR
// end ;
65355: LD_VAR 0 1
65359: RET
// export function PrepareMastodont ( ) ; begin
65360: LD_INT 0
65362: PPUSH
// uc_side := 0 ;
65363: LD_ADDR_OWVAR 20
65367: PUSH
65368: LD_INT 0
65370: ST_TO_ADDR
// uc_nation := 0 ;
65371: LD_ADDR_OWVAR 21
65375: PUSH
65376: LD_INT 0
65378: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65379: LD_ADDR_OWVAR 37
65383: PUSH
65384: LD_INT 31
65386: ST_TO_ADDR
// vc_control := control_rider ;
65387: LD_ADDR_OWVAR 38
65391: PUSH
65392: LD_INT 4
65394: ST_TO_ADDR
// end ;
65395: LD_VAR 0 1
65399: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65400: LD_INT 0
65402: PPUSH
65403: PPUSH
65404: PPUSH
// uc_side = 0 ;
65405: LD_ADDR_OWVAR 20
65409: PUSH
65410: LD_INT 0
65412: ST_TO_ADDR
// uc_nation = 0 ;
65413: LD_ADDR_OWVAR 21
65417: PUSH
65418: LD_INT 0
65420: ST_TO_ADDR
// InitHc_All ( ) ;
65421: CALL_OW 584
// InitVc ;
65425: CALL_OW 20
// if mastodonts then
65429: LD_VAR 0 6
65433: IFFALSE 65500
// for i = 1 to mastodonts do
65435: LD_ADDR_VAR 0 11
65439: PUSH
65440: DOUBLE
65441: LD_INT 1
65443: DEC
65444: ST_TO_ADDR
65445: LD_VAR 0 6
65449: PUSH
65450: FOR_TO
65451: IFFALSE 65498
// begin vc_chassis := 31 ;
65453: LD_ADDR_OWVAR 37
65457: PUSH
65458: LD_INT 31
65460: ST_TO_ADDR
// vc_control := control_rider ;
65461: LD_ADDR_OWVAR 38
65465: PUSH
65466: LD_INT 4
65468: ST_TO_ADDR
// animal := CreateVehicle ;
65469: LD_ADDR_VAR 0 12
65473: PUSH
65474: CALL_OW 45
65478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65479: LD_VAR 0 12
65483: PPUSH
65484: LD_VAR 0 8
65488: PPUSH
65489: LD_INT 0
65491: PPUSH
65492: CALL 67635 0 3
// end ;
65496: GO 65450
65498: POP
65499: POP
// if horses then
65500: LD_VAR 0 5
65504: IFFALSE 65571
// for i = 1 to horses do
65506: LD_ADDR_VAR 0 11
65510: PUSH
65511: DOUBLE
65512: LD_INT 1
65514: DEC
65515: ST_TO_ADDR
65516: LD_VAR 0 5
65520: PUSH
65521: FOR_TO
65522: IFFALSE 65569
// begin hc_class := 21 ;
65524: LD_ADDR_OWVAR 28
65528: PUSH
65529: LD_INT 21
65531: ST_TO_ADDR
// hc_gallery :=  ;
65532: LD_ADDR_OWVAR 33
65536: PUSH
65537: LD_STRING 
65539: ST_TO_ADDR
// animal := CreateHuman ;
65540: LD_ADDR_VAR 0 12
65544: PUSH
65545: CALL_OW 44
65549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65550: LD_VAR 0 12
65554: PPUSH
65555: LD_VAR 0 8
65559: PPUSH
65560: LD_INT 0
65562: PPUSH
65563: CALL 67635 0 3
// end ;
65567: GO 65521
65569: POP
65570: POP
// if birds then
65571: LD_VAR 0 1
65575: IFFALSE 65642
// for i = 1 to birds do
65577: LD_ADDR_VAR 0 11
65581: PUSH
65582: DOUBLE
65583: LD_INT 1
65585: DEC
65586: ST_TO_ADDR
65587: LD_VAR 0 1
65591: PUSH
65592: FOR_TO
65593: IFFALSE 65640
// begin hc_class = 18 ;
65595: LD_ADDR_OWVAR 28
65599: PUSH
65600: LD_INT 18
65602: ST_TO_ADDR
// hc_gallery =  ;
65603: LD_ADDR_OWVAR 33
65607: PUSH
65608: LD_STRING 
65610: ST_TO_ADDR
// animal := CreateHuman ;
65611: LD_ADDR_VAR 0 12
65615: PUSH
65616: CALL_OW 44
65620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65621: LD_VAR 0 12
65625: PPUSH
65626: LD_VAR 0 8
65630: PPUSH
65631: LD_INT 0
65633: PPUSH
65634: CALL 67635 0 3
// end ;
65638: GO 65592
65640: POP
65641: POP
// if tigers then
65642: LD_VAR 0 2
65646: IFFALSE 65730
// for i = 1 to tigers do
65648: LD_ADDR_VAR 0 11
65652: PUSH
65653: DOUBLE
65654: LD_INT 1
65656: DEC
65657: ST_TO_ADDR
65658: LD_VAR 0 2
65662: PUSH
65663: FOR_TO
65664: IFFALSE 65728
// begin hc_class = class_tiger ;
65666: LD_ADDR_OWVAR 28
65670: PUSH
65671: LD_INT 14
65673: ST_TO_ADDR
// hc_gallery =  ;
65674: LD_ADDR_OWVAR 33
65678: PUSH
65679: LD_STRING 
65681: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65682: LD_ADDR_OWVAR 35
65686: PUSH
65687: LD_INT 7
65689: NEG
65690: PPUSH
65691: LD_INT 7
65693: PPUSH
65694: CALL_OW 12
65698: ST_TO_ADDR
// animal := CreateHuman ;
65699: LD_ADDR_VAR 0 12
65703: PUSH
65704: CALL_OW 44
65708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65709: LD_VAR 0 12
65713: PPUSH
65714: LD_VAR 0 8
65718: PPUSH
65719: LD_INT 0
65721: PPUSH
65722: CALL 67635 0 3
// end ;
65726: GO 65663
65728: POP
65729: POP
// if apemans then
65730: LD_VAR 0 3
65734: IFFALSE 65857
// for i = 1 to apemans do
65736: LD_ADDR_VAR 0 11
65740: PUSH
65741: DOUBLE
65742: LD_INT 1
65744: DEC
65745: ST_TO_ADDR
65746: LD_VAR 0 3
65750: PUSH
65751: FOR_TO
65752: IFFALSE 65855
// begin hc_class = class_apeman ;
65754: LD_ADDR_OWVAR 28
65758: PUSH
65759: LD_INT 12
65761: ST_TO_ADDR
// hc_gallery =  ;
65762: LD_ADDR_OWVAR 33
65766: PUSH
65767: LD_STRING 
65769: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65770: LD_ADDR_OWVAR 35
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PPUSH
65779: LD_INT 2
65781: PPUSH
65782: CALL_OW 12
65786: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65787: LD_ADDR_OWVAR 31
65791: PUSH
65792: LD_INT 1
65794: PPUSH
65795: LD_INT 3
65797: PPUSH
65798: CALL_OW 12
65802: PUSH
65803: LD_INT 1
65805: PPUSH
65806: LD_INT 3
65808: PPUSH
65809: CALL_OW 12
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// animal := CreateHuman ;
65826: LD_ADDR_VAR 0 12
65830: PUSH
65831: CALL_OW 44
65835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65836: LD_VAR 0 12
65840: PPUSH
65841: LD_VAR 0 8
65845: PPUSH
65846: LD_INT 0
65848: PPUSH
65849: CALL 67635 0 3
// end ;
65853: GO 65751
65855: POP
65856: POP
// if enchidnas then
65857: LD_VAR 0 4
65861: IFFALSE 65928
// for i = 1 to enchidnas do
65863: LD_ADDR_VAR 0 11
65867: PUSH
65868: DOUBLE
65869: LD_INT 1
65871: DEC
65872: ST_TO_ADDR
65873: LD_VAR 0 4
65877: PUSH
65878: FOR_TO
65879: IFFALSE 65926
// begin hc_class = 13 ;
65881: LD_ADDR_OWVAR 28
65885: PUSH
65886: LD_INT 13
65888: ST_TO_ADDR
// hc_gallery =  ;
65889: LD_ADDR_OWVAR 33
65893: PUSH
65894: LD_STRING 
65896: ST_TO_ADDR
// animal := CreateHuman ;
65897: LD_ADDR_VAR 0 12
65901: PUSH
65902: CALL_OW 44
65906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65907: LD_VAR 0 12
65911: PPUSH
65912: LD_VAR 0 8
65916: PPUSH
65917: LD_INT 0
65919: PPUSH
65920: CALL 67635 0 3
// end ;
65924: GO 65878
65926: POP
65927: POP
// if fishes then
65928: LD_VAR 0 7
65932: IFFALSE 65999
// for i = 1 to fishes do
65934: LD_ADDR_VAR 0 11
65938: PUSH
65939: DOUBLE
65940: LD_INT 1
65942: DEC
65943: ST_TO_ADDR
65944: LD_VAR 0 7
65948: PUSH
65949: FOR_TO
65950: IFFALSE 65997
// begin hc_class = 20 ;
65952: LD_ADDR_OWVAR 28
65956: PUSH
65957: LD_INT 20
65959: ST_TO_ADDR
// hc_gallery =  ;
65960: LD_ADDR_OWVAR 33
65964: PUSH
65965: LD_STRING 
65967: ST_TO_ADDR
// animal := CreateHuman ;
65968: LD_ADDR_VAR 0 12
65972: PUSH
65973: CALL_OW 44
65977: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65978: LD_VAR 0 12
65982: PPUSH
65983: LD_VAR 0 9
65987: PPUSH
65988: LD_INT 0
65990: PPUSH
65991: CALL 67635 0 3
// end ;
65995: GO 65949
65997: POP
65998: POP
// end ;
65999: LD_VAR 0 10
66003: RET
// export function WantHeal ( sci , unit ) ; begin
66004: LD_INT 0
66006: PPUSH
// if GetTaskList ( sci ) > 0 then
66007: LD_VAR 0 1
66011: PPUSH
66012: CALL_OW 437
66016: PUSH
66017: LD_INT 0
66019: GREATER
66020: IFFALSE 66090
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66022: LD_VAR 0 1
66026: PPUSH
66027: CALL_OW 437
66031: PUSH
66032: LD_INT 1
66034: ARRAY
66035: PUSH
66036: LD_INT 1
66038: ARRAY
66039: PUSH
66040: LD_STRING l
66042: EQUAL
66043: PUSH
66044: LD_VAR 0 1
66048: PPUSH
66049: CALL_OW 437
66053: PUSH
66054: LD_INT 1
66056: ARRAY
66057: PUSH
66058: LD_INT 4
66060: ARRAY
66061: PUSH
66062: LD_VAR 0 2
66066: EQUAL
66067: AND
66068: IFFALSE 66080
// result := true else
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_INT 1
66077: ST_TO_ADDR
66078: GO 66088
// result := false ;
66080: LD_ADDR_VAR 0 3
66084: PUSH
66085: LD_INT 0
66087: ST_TO_ADDR
// end else
66088: GO 66098
// result := false ;
66090: LD_ADDR_VAR 0 3
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// end ;
66098: LD_VAR 0 3
66102: RET
// export function HealTarget ( sci ) ; begin
66103: LD_INT 0
66105: PPUSH
// if not sci then
66106: LD_VAR 0 1
66110: NOT
66111: IFFALSE 66115
// exit ;
66113: GO 66180
// result := 0 ;
66115: LD_ADDR_VAR 0 2
66119: PUSH
66120: LD_INT 0
66122: ST_TO_ADDR
// if GetTaskList ( sci ) then
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 437
66132: IFFALSE 66180
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66134: LD_VAR 0 1
66138: PPUSH
66139: CALL_OW 437
66143: PUSH
66144: LD_INT 1
66146: ARRAY
66147: PUSH
66148: LD_INT 1
66150: ARRAY
66151: PUSH
66152: LD_STRING l
66154: EQUAL
66155: IFFALSE 66180
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66157: LD_ADDR_VAR 0 2
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: CALL_OW 437
66171: PUSH
66172: LD_INT 1
66174: ARRAY
66175: PUSH
66176: LD_INT 4
66178: ARRAY
66179: ST_TO_ADDR
// end ;
66180: LD_VAR 0 2
66184: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66185: LD_INT 0
66187: PPUSH
66188: PPUSH
66189: PPUSH
66190: PPUSH
// if not base_units then
66191: LD_VAR 0 1
66195: NOT
66196: IFFALSE 66200
// exit ;
66198: GO 66287
// result := false ;
66200: LD_ADDR_VAR 0 2
66204: PUSH
66205: LD_INT 0
66207: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66208: LD_ADDR_VAR 0 5
66212: PUSH
66213: LD_VAR 0 1
66217: PPUSH
66218: LD_INT 21
66220: PUSH
66221: LD_INT 3
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PPUSH
66228: CALL_OW 72
66232: ST_TO_ADDR
// if not tmp then
66233: LD_VAR 0 5
66237: NOT
66238: IFFALSE 66242
// exit ;
66240: GO 66287
// for i in tmp do
66242: LD_ADDR_VAR 0 3
66246: PUSH
66247: LD_VAR 0 5
66251: PUSH
66252: FOR_IN
66253: IFFALSE 66285
// begin result := EnemyInRange ( i , 22 ) ;
66255: LD_ADDR_VAR 0 2
66259: PUSH
66260: LD_VAR 0 3
66264: PPUSH
66265: LD_INT 22
66267: PPUSH
66268: CALL 63956 0 2
66272: ST_TO_ADDR
// if result then
66273: LD_VAR 0 2
66277: IFFALSE 66283
// exit ;
66279: POP
66280: POP
66281: GO 66287
// end ;
66283: GO 66252
66285: POP
66286: POP
// end ;
66287: LD_VAR 0 2
66291: RET
// export function FilterByTag ( units , tag ) ; begin
66292: LD_INT 0
66294: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66295: LD_ADDR_VAR 0 3
66299: PUSH
66300: LD_VAR 0 1
66304: PPUSH
66305: LD_INT 120
66307: PUSH
66308: LD_VAR 0 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PPUSH
66317: CALL_OW 72
66321: ST_TO_ADDR
// end ;
66322: LD_VAR 0 3
66326: RET
// export function IsDriver ( un ) ; begin
66327: LD_INT 0
66329: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 1
66339: PUSH
66340: LD_INT 55
66342: PUSH
66343: EMPTY
66344: LIST
66345: PPUSH
66346: CALL_OW 69
66350: IN
66351: ST_TO_ADDR
// end ;
66352: LD_VAR 0 2
66356: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66357: LD_INT 0
66359: PPUSH
66360: PPUSH
// list := [ ] ;
66361: LD_ADDR_VAR 0 5
66365: PUSH
66366: EMPTY
66367: ST_TO_ADDR
// case d of 0 :
66368: LD_VAR 0 3
66372: PUSH
66373: LD_INT 0
66375: DOUBLE
66376: EQUAL
66377: IFTRUE 66381
66379: GO 66514
66381: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66382: LD_ADDR_VAR 0 5
66386: PUSH
66387: LD_VAR 0 1
66391: PUSH
66392: LD_INT 4
66394: MINUS
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_INT 4
66403: MINUS
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_INT 3
66420: MINUS
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: LD_VAR 0 1
66439: PUSH
66440: LD_INT 4
66442: PLUS
66443: PUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: PUSH
66457: LD_VAR 0 1
66461: PUSH
66462: LD_INT 3
66464: PLUS
66465: PUSH
66466: LD_VAR 0 2
66470: PUSH
66471: LD_INT 3
66473: PLUS
66474: PUSH
66475: LD_INT 5
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: LD_VAR 0 1
66487: PUSH
66488: LD_VAR 0 2
66492: PUSH
66493: LD_INT 4
66495: PLUS
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: LIST
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: ST_TO_ADDR
// end ; 1 :
66512: GO 67212
66514: LD_INT 1
66516: DOUBLE
66517: EQUAL
66518: IFTRUE 66522
66520: GO 66655
66522: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66523: LD_ADDR_VAR 0 5
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: LD_VAR 0 2
66537: PUSH
66538: LD_INT 4
66540: MINUS
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: LD_VAR 0 1
66554: PUSH
66555: LD_INT 3
66557: MINUS
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 3
66566: MINUS
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: LD_VAR 0 1
66580: PUSH
66581: LD_INT 4
66583: MINUS
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: PUSH
66598: LD_VAR 0 1
66602: PUSH
66603: LD_VAR 0 2
66607: PUSH
66608: LD_INT 3
66610: PLUS
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_INT 4
66627: PLUS
66628: PUSH
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 4
66636: PLUS
66637: PUSH
66638: LD_INT 5
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: ST_TO_ADDR
// end ; 2 :
66653: GO 67212
66655: LD_INT 2
66657: DOUBLE
66658: EQUAL
66659: IFTRUE 66663
66661: GO 66792
66663: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66664: LD_ADDR_VAR 0 5
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_VAR 0 2
66678: PUSH
66679: LD_INT 3
66681: MINUS
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: PUSH
66691: LD_VAR 0 1
66695: PUSH
66696: LD_INT 4
66698: PLUS
66699: PUSH
66700: LD_VAR 0 2
66704: PUSH
66705: LD_INT 4
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: PUSH
66713: LD_VAR 0 1
66717: PUSH
66718: LD_VAR 0 2
66722: PUSH
66723: LD_INT 4
66725: PLUS
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: PUSH
66735: LD_VAR 0 1
66739: PUSH
66740: LD_INT 3
66742: MINUS
66743: PUSH
66744: LD_VAR 0 2
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: PUSH
66757: LD_VAR 0 1
66761: PUSH
66762: LD_INT 4
66764: MINUS
66765: PUSH
66766: LD_VAR 0 2
66770: PUSH
66771: LD_INT 4
66773: MINUS
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: ST_TO_ADDR
// end ; 3 :
66790: GO 67212
66792: LD_INT 3
66794: DOUBLE
66795: EQUAL
66796: IFTRUE 66800
66798: GO 66933
66800: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66801: LD_ADDR_VAR 0 5
66805: PUSH
66806: LD_VAR 0 1
66810: PUSH
66811: LD_INT 3
66813: PLUS
66814: PUSH
66815: LD_VAR 0 2
66819: PUSH
66820: LD_INT 4
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: PUSH
66828: LD_VAR 0 1
66832: PUSH
66833: LD_INT 4
66835: PLUS
66836: PUSH
66837: LD_VAR 0 2
66841: PUSH
66842: LD_INT 4
66844: PLUS
66845: PUSH
66846: LD_INT 5
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: PUSH
66854: LD_VAR 0 1
66858: PUSH
66859: LD_INT 4
66861: MINUS
66862: PUSH
66863: LD_VAR 0 2
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: PUSH
66876: LD_VAR 0 1
66880: PUSH
66881: LD_VAR 0 2
66885: PUSH
66886: LD_INT 4
66888: MINUS
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: PUSH
66898: LD_VAR 0 1
66902: PUSH
66903: LD_INT 3
66905: MINUS
66906: PUSH
66907: LD_VAR 0 2
66911: PUSH
66912: LD_INT 3
66914: MINUS
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: ST_TO_ADDR
// end ; 4 :
66931: GO 67212
66933: LD_INT 4
66935: DOUBLE
66936: EQUAL
66937: IFTRUE 66941
66939: GO 67074
66941: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66942: LD_ADDR_VAR 0 5
66946: PUSH
66947: LD_VAR 0 1
66951: PUSH
66952: LD_VAR 0 2
66956: PUSH
66957: LD_INT 4
66959: PLUS
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: LD_VAR 0 1
66973: PUSH
66974: LD_INT 3
66976: PLUS
66977: PUSH
66978: LD_VAR 0 2
66982: PUSH
66983: LD_INT 3
66985: PLUS
66986: PUSH
66987: LD_INT 5
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: PUSH
66995: LD_VAR 0 1
66999: PUSH
67000: LD_INT 4
67002: PLUS
67003: PUSH
67004: LD_VAR 0 2
67008: PUSH
67009: LD_INT 4
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: PUSH
67017: LD_VAR 0 1
67021: PUSH
67022: LD_VAR 0 2
67026: PUSH
67027: LD_INT 3
67029: MINUS
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: PUSH
67039: LD_VAR 0 1
67043: PUSH
67044: LD_INT 4
67046: MINUS
67047: PUSH
67048: LD_VAR 0 2
67052: PUSH
67053: LD_INT 4
67055: MINUS
67056: PUSH
67057: LD_INT 2
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// end ; 5 :
67072: GO 67212
67074: LD_INT 5
67076: DOUBLE
67077: EQUAL
67078: IFTRUE 67082
67080: GO 67211
67082: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67083: LD_ADDR_VAR 0 5
67087: PUSH
67088: LD_VAR 0 1
67092: PUSH
67093: LD_INT 4
67095: MINUS
67096: PUSH
67097: LD_VAR 0 2
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: PUSH
67110: LD_VAR 0 1
67114: PUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_INT 4
67122: MINUS
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: LIST
67131: PUSH
67132: LD_VAR 0 1
67136: PUSH
67137: LD_INT 4
67139: PLUS
67140: PUSH
67141: LD_VAR 0 2
67145: PUSH
67146: LD_INT 4
67148: PLUS
67149: PUSH
67150: LD_INT 5
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: PUSH
67158: LD_VAR 0 1
67162: PUSH
67163: LD_INT 3
67165: PLUS
67166: PUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_INT 4
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: PUSH
67180: LD_VAR 0 1
67184: PUSH
67185: LD_VAR 0 2
67189: PUSH
67190: LD_INT 3
67192: PLUS
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// end ; end ;
67209: GO 67212
67211: POP
// result := list ;
67212: LD_ADDR_VAR 0 4
67216: PUSH
67217: LD_VAR 0 5
67221: ST_TO_ADDR
// end ;
67222: LD_VAR 0 4
67226: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67227: LD_INT 0
67229: PPUSH
67230: PPUSH
67231: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67232: LD_VAR 0 1
67236: NOT
67237: PUSH
67238: LD_VAR 0 2
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: IN
67261: NOT
67262: OR
67263: IFFALSE 67267
// exit ;
67265: GO 67359
// tmp := [ ] ;
67267: LD_ADDR_VAR 0 5
67271: PUSH
67272: EMPTY
67273: ST_TO_ADDR
// for i in units do
67274: LD_ADDR_VAR 0 4
67278: PUSH
67279: LD_VAR 0 1
67283: PUSH
67284: FOR_IN
67285: IFFALSE 67328
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67287: LD_ADDR_VAR 0 5
67291: PUSH
67292: LD_VAR 0 5
67296: PPUSH
67297: LD_VAR 0 5
67301: PUSH
67302: LD_INT 1
67304: PLUS
67305: PPUSH
67306: LD_VAR 0 4
67310: PPUSH
67311: LD_VAR 0 2
67315: PPUSH
67316: CALL_OW 259
67320: PPUSH
67321: CALL_OW 2
67325: ST_TO_ADDR
67326: GO 67284
67328: POP
67329: POP
// if not tmp then
67330: LD_VAR 0 5
67334: NOT
67335: IFFALSE 67339
// exit ;
67337: GO 67359
// result := SortListByListDesc ( units , tmp ) ;
67339: LD_ADDR_VAR 0 3
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: LD_VAR 0 5
67353: PPUSH
67354: CALL_OW 77
67358: ST_TO_ADDR
// end ;
67359: LD_VAR 0 3
67363: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67364: LD_INT 0
67366: PPUSH
67367: PPUSH
67368: PPUSH
// result := false ;
67369: LD_ADDR_VAR 0 3
67373: PUSH
67374: LD_INT 0
67376: ST_TO_ADDR
// x := GetX ( building ) ;
67377: LD_ADDR_VAR 0 4
67381: PUSH
67382: LD_VAR 0 2
67386: PPUSH
67387: CALL_OW 250
67391: ST_TO_ADDR
// y := GetY ( building ) ;
67392: LD_ADDR_VAR 0 5
67396: PUSH
67397: LD_VAR 0 2
67401: PPUSH
67402: CALL_OW 251
67406: ST_TO_ADDR
// if not building or not x or not y then
67407: LD_VAR 0 2
67411: NOT
67412: PUSH
67413: LD_VAR 0 4
67417: NOT
67418: OR
67419: PUSH
67420: LD_VAR 0 5
67424: NOT
67425: OR
67426: IFFALSE 67430
// exit ;
67428: GO 67522
// if GetTaskList ( unit ) then
67430: LD_VAR 0 1
67434: PPUSH
67435: CALL_OW 437
67439: IFFALSE 67522
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67441: LD_STRING e
67443: PUSH
67444: LD_VAR 0 1
67448: PPUSH
67449: CALL_OW 437
67453: PUSH
67454: LD_INT 1
67456: ARRAY
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: EQUAL
67462: PUSH
67463: LD_VAR 0 4
67467: PUSH
67468: LD_VAR 0 1
67472: PPUSH
67473: CALL_OW 437
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PUSH
67482: LD_INT 2
67484: ARRAY
67485: EQUAL
67486: AND
67487: PUSH
67488: LD_VAR 0 5
67492: PUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: CALL_OW 437
67502: PUSH
67503: LD_INT 1
67505: ARRAY
67506: PUSH
67507: LD_INT 3
67509: ARRAY
67510: EQUAL
67511: AND
67512: IFFALSE 67522
// result := true end ;
67514: LD_ADDR_VAR 0 3
67518: PUSH
67519: LD_INT 1
67521: ST_TO_ADDR
// end ;
67522: LD_VAR 0 3
67526: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67527: LD_INT 0
67529: PPUSH
// result := false ;
67530: LD_ADDR_VAR 0 4
67534: PUSH
67535: LD_INT 0
67537: ST_TO_ADDR
// if GetTaskList ( unit ) then
67538: LD_VAR 0 1
67542: PPUSH
67543: CALL_OW 437
67547: IFFALSE 67630
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67549: LD_STRING M
67551: PUSH
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 437
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: EQUAL
67570: PUSH
67571: LD_VAR 0 2
67575: PUSH
67576: LD_VAR 0 1
67580: PPUSH
67581: CALL_OW 437
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PUSH
67590: LD_INT 2
67592: ARRAY
67593: EQUAL
67594: AND
67595: PUSH
67596: LD_VAR 0 3
67600: PUSH
67601: LD_VAR 0 1
67605: PPUSH
67606: CALL_OW 437
67610: PUSH
67611: LD_INT 1
67613: ARRAY
67614: PUSH
67615: LD_INT 3
67617: ARRAY
67618: EQUAL
67619: AND
67620: IFFALSE 67630
// result := true ;
67622: LD_ADDR_VAR 0 4
67626: PUSH
67627: LD_INT 1
67629: ST_TO_ADDR
// end ; end ;
67630: LD_VAR 0 4
67634: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67635: LD_INT 0
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
// if not unit or not area then
67641: LD_VAR 0 1
67645: NOT
67646: PUSH
67647: LD_VAR 0 2
67651: NOT
67652: OR
67653: IFFALSE 67657
// exit ;
67655: GO 67821
// tmp := AreaToList ( area , i ) ;
67657: LD_ADDR_VAR 0 6
67661: PUSH
67662: LD_VAR 0 2
67666: PPUSH
67667: LD_VAR 0 5
67671: PPUSH
67672: CALL_OW 517
67676: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67677: LD_ADDR_VAR 0 5
67681: PUSH
67682: DOUBLE
67683: LD_INT 1
67685: DEC
67686: ST_TO_ADDR
67687: LD_VAR 0 6
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: PUSH
67696: FOR_TO
67697: IFFALSE 67819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67699: LD_ADDR_VAR 0 7
67703: PUSH
67704: LD_VAR 0 6
67708: PUSH
67709: LD_INT 1
67711: ARRAY
67712: PUSH
67713: LD_VAR 0 5
67717: ARRAY
67718: PUSH
67719: LD_VAR 0 6
67723: PUSH
67724: LD_INT 2
67726: ARRAY
67727: PUSH
67728: LD_VAR 0 5
67732: ARRAY
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67738: LD_VAR 0 7
67742: PUSH
67743: LD_INT 1
67745: ARRAY
67746: PPUSH
67747: LD_VAR 0 7
67751: PUSH
67752: LD_INT 2
67754: ARRAY
67755: PPUSH
67756: CALL_OW 428
67760: PUSH
67761: LD_INT 0
67763: EQUAL
67764: IFFALSE 67817
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67766: LD_VAR 0 1
67770: PPUSH
67771: LD_VAR 0 7
67775: PUSH
67776: LD_INT 1
67778: ARRAY
67779: PPUSH
67780: LD_VAR 0 7
67784: PUSH
67785: LD_INT 2
67787: ARRAY
67788: PPUSH
67789: LD_VAR 0 3
67793: PPUSH
67794: CALL_OW 48
// result := IsPlaced ( unit ) ;
67798: LD_ADDR_VAR 0 4
67802: PUSH
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 305
67812: ST_TO_ADDR
// exit ;
67813: POP
67814: POP
67815: GO 67821
// end ; end ;
67817: GO 67696
67819: POP
67820: POP
// end ;
67821: LD_VAR 0 4
67825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
67830: PPUSH
// if not side or side > 8 then
67831: LD_VAR 0 1
67835: NOT
67836: PUSH
67837: LD_VAR 0 1
67841: PUSH
67842: LD_INT 8
67844: GREATER
67845: OR
67846: IFFALSE 67850
// exit ;
67848: GO 68037
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67850: LD_ADDR_VAR 0 4
67854: PUSH
67855: LD_INT 22
67857: PUSH
67858: LD_VAR 0 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 21
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PPUSH
67881: CALL_OW 69
67885: ST_TO_ADDR
// if not tmp then
67886: LD_VAR 0 4
67890: NOT
67891: IFFALSE 67895
// exit ;
67893: GO 68037
// enable_addtolog := true ;
67895: LD_ADDR_OWVAR 81
67899: PUSH
67900: LD_INT 1
67902: ST_TO_ADDR
// AddToLog ( [ ) ;
67903: LD_STRING [
67905: PPUSH
67906: CALL_OW 561
// for i in tmp do
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_VAR 0 4
67919: PUSH
67920: FOR_IN
67921: IFFALSE 68028
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67923: LD_STRING [
67925: PUSH
67926: LD_VAR 0 3
67930: PPUSH
67931: CALL_OW 266
67935: STR
67936: PUSH
67937: LD_STRING , 
67939: STR
67940: PUSH
67941: LD_VAR 0 3
67945: PPUSH
67946: CALL_OW 250
67950: STR
67951: PUSH
67952: LD_STRING , 
67954: STR
67955: PUSH
67956: LD_VAR 0 3
67960: PPUSH
67961: CALL_OW 251
67965: STR
67966: PUSH
67967: LD_STRING , 
67969: STR
67970: PUSH
67971: LD_VAR 0 3
67975: PPUSH
67976: CALL_OW 254
67980: STR
67981: PUSH
67982: LD_STRING , 
67984: STR
67985: PUSH
67986: LD_VAR 0 3
67990: PPUSH
67991: LD_INT 1
67993: PPUSH
67994: CALL_OW 268
67998: STR
67999: PUSH
68000: LD_STRING , 
68002: STR
68003: PUSH
68004: LD_VAR 0 3
68008: PPUSH
68009: LD_INT 2
68011: PPUSH
68012: CALL_OW 268
68016: STR
68017: PUSH
68018: LD_STRING ],
68020: STR
68021: PPUSH
68022: CALL_OW 561
// end ;
68026: GO 67920
68028: POP
68029: POP
// AddToLog ( ]; ) ;
68030: LD_STRING ];
68032: PPUSH
68033: CALL_OW 561
// end ;
68037: LD_VAR 0 2
68041: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68042: LD_INT 0
68044: PPUSH
68045: PPUSH
68046: PPUSH
68047: PPUSH
68048: PPUSH
// if not area or not rate or not max then
68049: LD_VAR 0 1
68053: NOT
68054: PUSH
68055: LD_VAR 0 2
68059: NOT
68060: OR
68061: PUSH
68062: LD_VAR 0 4
68066: NOT
68067: OR
68068: IFFALSE 68072
// exit ;
68070: GO 68261
// while 1 do
68072: LD_INT 1
68074: IFFALSE 68261
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68076: LD_ADDR_VAR 0 9
68080: PUSH
68081: LD_VAR 0 1
68085: PPUSH
68086: LD_INT 1
68088: PPUSH
68089: CALL_OW 287
68093: PUSH
68094: LD_INT 10
68096: MUL
68097: ST_TO_ADDR
// r := rate / 10 ;
68098: LD_ADDR_VAR 0 7
68102: PUSH
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 10
68110: DIVREAL
68111: ST_TO_ADDR
// time := 1 1$00 ;
68112: LD_ADDR_VAR 0 8
68116: PUSH
68117: LD_INT 2100
68119: ST_TO_ADDR
// if amount < min then
68120: LD_VAR 0 9
68124: PUSH
68125: LD_VAR 0 3
68129: LESS
68130: IFFALSE 68148
// r := r * 2 else
68132: LD_ADDR_VAR 0 7
68136: PUSH
68137: LD_VAR 0 7
68141: PUSH
68142: LD_INT 2
68144: MUL
68145: ST_TO_ADDR
68146: GO 68174
// if amount > max then
68148: LD_VAR 0 9
68152: PUSH
68153: LD_VAR 0 4
68157: GREATER
68158: IFFALSE 68174
// r := r / 2 ;
68160: LD_ADDR_VAR 0 7
68164: PUSH
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 2
68172: DIVREAL
68173: ST_TO_ADDR
// time := time / r ;
68174: LD_ADDR_VAR 0 8
68178: PUSH
68179: LD_VAR 0 8
68183: PUSH
68184: LD_VAR 0 7
68188: DIVREAL
68189: ST_TO_ADDR
// if time < 0 then
68190: LD_VAR 0 8
68194: PUSH
68195: LD_INT 0
68197: LESS
68198: IFFALSE 68215
// time := time * - 1 ;
68200: LD_ADDR_VAR 0 8
68204: PUSH
68205: LD_VAR 0 8
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: MUL
68214: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68215: LD_VAR 0 8
68219: PUSH
68220: LD_INT 35
68222: PPUSH
68223: LD_INT 875
68225: PPUSH
68226: CALL_OW 12
68230: PLUS
68231: PPUSH
68232: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68236: LD_INT 1
68238: PPUSH
68239: LD_INT 5
68241: PPUSH
68242: CALL_OW 12
68246: PPUSH
68247: LD_VAR 0 1
68251: PPUSH
68252: LD_INT 1
68254: PPUSH
68255: CALL_OW 55
// end ;
68259: GO 68072
// end ;
68261: LD_VAR 0 5
68265: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68266: LD_INT 0
68268: PPUSH
68269: PPUSH
68270: PPUSH
68271: PPUSH
68272: PPUSH
68273: PPUSH
68274: PPUSH
68275: PPUSH
// if not turrets or not factories then
68276: LD_VAR 0 1
68280: NOT
68281: PUSH
68282: LD_VAR 0 2
68286: NOT
68287: OR
68288: IFFALSE 68292
// exit ;
68290: GO 68599
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68292: LD_ADDR_VAR 0 10
68296: PUSH
68297: LD_INT 5
68299: PUSH
68300: LD_INT 6
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: PUSH
68310: LD_INT 4
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: LD_INT 5
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 24
68334: PUSH
68335: LD_INT 25
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 23
68344: PUSH
68345: LD_INT 27
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 42
68358: PUSH
68359: LD_INT 43
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 44
68368: PUSH
68369: LD_INT 46
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 45
68378: PUSH
68379: LD_INT 47
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: ST_TO_ADDR
// result := [ ] ;
68396: LD_ADDR_VAR 0 3
68400: PUSH
68401: EMPTY
68402: ST_TO_ADDR
// for i in turrets do
68403: LD_ADDR_VAR 0 4
68407: PUSH
68408: LD_VAR 0 1
68412: PUSH
68413: FOR_IN
68414: IFFALSE 68597
// begin nat := GetNation ( i ) ;
68416: LD_ADDR_VAR 0 7
68420: PUSH
68421: LD_VAR 0 4
68425: PPUSH
68426: CALL_OW 248
68430: ST_TO_ADDR
// weapon := 0 ;
68431: LD_ADDR_VAR 0 8
68435: PUSH
68436: LD_INT 0
68438: ST_TO_ADDR
// if not nat then
68439: LD_VAR 0 7
68443: NOT
68444: IFFALSE 68448
// continue ;
68446: GO 68413
// for j in list [ nat ] do
68448: LD_ADDR_VAR 0 5
68452: PUSH
68453: LD_VAR 0 10
68457: PUSH
68458: LD_VAR 0 7
68462: ARRAY
68463: PUSH
68464: FOR_IN
68465: IFFALSE 68506
// if GetBWeapon ( i ) = j [ 1 ] then
68467: LD_VAR 0 4
68471: PPUSH
68472: CALL_OW 269
68476: PUSH
68477: LD_VAR 0 5
68481: PUSH
68482: LD_INT 1
68484: ARRAY
68485: EQUAL
68486: IFFALSE 68504
// begin weapon := j [ 2 ] ;
68488: LD_ADDR_VAR 0 8
68492: PUSH
68493: LD_VAR 0 5
68497: PUSH
68498: LD_INT 2
68500: ARRAY
68501: ST_TO_ADDR
// break ;
68502: GO 68506
// end ;
68504: GO 68464
68506: POP
68507: POP
// if not weapon then
68508: LD_VAR 0 8
68512: NOT
68513: IFFALSE 68517
// continue ;
68515: GO 68413
// for k in factories do
68517: LD_ADDR_VAR 0 6
68521: PUSH
68522: LD_VAR 0 2
68526: PUSH
68527: FOR_IN
68528: IFFALSE 68593
// begin weapons := AvailableWeaponList ( k ) ;
68530: LD_ADDR_VAR 0 9
68534: PUSH
68535: LD_VAR 0 6
68539: PPUSH
68540: CALL_OW 478
68544: ST_TO_ADDR
// if not weapons then
68545: LD_VAR 0 9
68549: NOT
68550: IFFALSE 68554
// continue ;
68552: GO 68527
// if weapon in weapons then
68554: LD_VAR 0 8
68558: PUSH
68559: LD_VAR 0 9
68563: IN
68564: IFFALSE 68591
// begin result := [ i , weapon ] ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 4
68575: PUSH
68576: LD_VAR 0 8
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: ST_TO_ADDR
// exit ;
68585: POP
68586: POP
68587: POP
68588: POP
68589: GO 68599
// end ; end ;
68591: GO 68527
68593: POP
68594: POP
// end ;
68595: GO 68413
68597: POP
68598: POP
// end ;
68599: LD_VAR 0 3
68603: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68604: LD_INT 0
68606: PPUSH
// if not side or side > 8 then
68607: LD_VAR 0 3
68611: NOT
68612: PUSH
68613: LD_VAR 0 3
68617: PUSH
68618: LD_INT 8
68620: GREATER
68621: OR
68622: IFFALSE 68626
// exit ;
68624: GO 68685
// if not range then
68626: LD_VAR 0 4
68630: NOT
68631: IFFALSE 68642
// range := - 12 ;
68633: LD_ADDR_VAR 0 4
68637: PUSH
68638: LD_INT 12
68640: NEG
68641: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68642: LD_VAR 0 1
68646: PPUSH
68647: LD_VAR 0 2
68651: PPUSH
68652: LD_VAR 0 3
68656: PPUSH
68657: LD_VAR 0 4
68661: PPUSH
68662: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68666: LD_VAR 0 1
68670: PPUSH
68671: LD_VAR 0 2
68675: PPUSH
68676: LD_VAR 0 3
68680: PPUSH
68681: CALL_OW 331
// end ;
68685: LD_VAR 0 5
68689: RET
// export function Video ( mode ) ; begin
68690: LD_INT 0
68692: PPUSH
// ingame_video = mode ;
68693: LD_ADDR_OWVAR 52
68697: PUSH
68698: LD_VAR 0 1
68702: ST_TO_ADDR
// interface_hidden = mode ;
68703: LD_ADDR_OWVAR 54
68707: PUSH
68708: LD_VAR 0 1
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 2
68717: RET
// export function Join ( array , element ) ; begin
68718: LD_INT 0
68720: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68721: LD_ADDR_VAR 0 3
68725: PUSH
68726: LD_VAR 0 1
68730: PPUSH
68731: LD_VAR 0 1
68735: PUSH
68736: LD_INT 1
68738: PLUS
68739: PPUSH
68740: LD_VAR 0 2
68744: PPUSH
68745: CALL_OW 1
68749: ST_TO_ADDR
// end ;
68750: LD_VAR 0 3
68754: RET
// export function JoinUnion ( array , element ) ; begin
68755: LD_INT 0
68757: PPUSH
// result := array union element ;
68758: LD_ADDR_VAR 0 3
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_VAR 0 2
68772: UNION
68773: ST_TO_ADDR
// end ;
68774: LD_VAR 0 3
68778: RET
// export function GetBehemoths ( side ) ; begin
68779: LD_INT 0
68781: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68782: LD_ADDR_VAR 0 2
68786: PUSH
68787: LD_INT 22
68789: PUSH
68790: LD_VAR 0 1
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 31
68801: PUSH
68802: LD_INT 25
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PPUSH
68813: CALL_OW 69
68817: ST_TO_ADDR
// end ;
68818: LD_VAR 0 2
68822: RET
// export function Shuffle ( array ) ; var i , index ; begin
68823: LD_INT 0
68825: PPUSH
68826: PPUSH
68827: PPUSH
// result := [ ] ;
68828: LD_ADDR_VAR 0 2
68832: PUSH
68833: EMPTY
68834: ST_TO_ADDR
// if not array then
68835: LD_VAR 0 1
68839: NOT
68840: IFFALSE 68844
// exit ;
68842: GO 68943
// Randomize ;
68844: CALL_OW 10
// for i = array downto 1 do
68848: LD_ADDR_VAR 0 3
68852: PUSH
68853: DOUBLE
68854: LD_VAR 0 1
68858: INC
68859: ST_TO_ADDR
68860: LD_INT 1
68862: PUSH
68863: FOR_DOWNTO
68864: IFFALSE 68941
// begin index := rand ( 1 , array ) ;
68866: LD_ADDR_VAR 0 4
68870: PUSH
68871: LD_INT 1
68873: PPUSH
68874: LD_VAR 0 1
68878: PPUSH
68879: CALL_OW 12
68883: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68884: LD_ADDR_VAR 0 2
68888: PUSH
68889: LD_VAR 0 2
68893: PPUSH
68894: LD_VAR 0 2
68898: PUSH
68899: LD_INT 1
68901: PLUS
68902: PPUSH
68903: LD_VAR 0 1
68907: PUSH
68908: LD_VAR 0 4
68912: ARRAY
68913: PPUSH
68914: CALL_OW 2
68918: ST_TO_ADDR
// array := Delete ( array , index ) ;
68919: LD_ADDR_VAR 0 1
68923: PUSH
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 4
68933: PPUSH
68934: CALL_OW 3
68938: ST_TO_ADDR
// end ;
68939: GO 68863
68941: POP
68942: POP
// end ;
68943: LD_VAR 0 2
68947: RET
// export function GetBaseMaterials ( base ) ; begin
68948: LD_INT 0
68950: PPUSH
// result := [ 0 , 0 , 0 ] ;
68951: LD_ADDR_VAR 0 2
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// if not base then
68970: LD_VAR 0 1
68974: NOT
68975: IFFALSE 68979
// exit ;
68977: GO 69028
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68979: LD_ADDR_VAR 0 2
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: LD_INT 1
68991: PPUSH
68992: CALL_OW 275
68996: PUSH
68997: LD_VAR 0 1
69001: PPUSH
69002: LD_INT 2
69004: PPUSH
69005: CALL_OW 275
69009: PUSH
69010: LD_VAR 0 1
69014: PPUSH
69015: LD_INT 3
69017: PPUSH
69018: CALL_OW 275
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: LIST
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 2
69032: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
// result := array ;
69037: LD_ADDR_VAR 0 3
69041: PUSH
69042: LD_VAR 0 1
69046: ST_TO_ADDR
// if size >= result then
69047: LD_VAR 0 2
69051: PUSH
69052: LD_VAR 0 3
69056: GREATEREQUAL
69057: IFFALSE 69061
// exit ;
69059: GO 69111
// if size then
69061: LD_VAR 0 2
69065: IFFALSE 69111
// for i := array downto size do
69067: LD_ADDR_VAR 0 4
69071: PUSH
69072: DOUBLE
69073: LD_VAR 0 1
69077: INC
69078: ST_TO_ADDR
69079: LD_VAR 0 2
69083: PUSH
69084: FOR_DOWNTO
69085: IFFALSE 69109
// result := Delete ( result , result ) ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_VAR 0 3
69096: PPUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 3
69106: ST_TO_ADDR
69107: GO 69084
69109: POP
69110: POP
// end ;
69111: LD_VAR 0 3
69115: RET
// export function ComExit ( unit ) ; var tmp ; begin
69116: LD_INT 0
69118: PPUSH
69119: PPUSH
// if not IsInUnit ( unit ) then
69120: LD_VAR 0 1
69124: PPUSH
69125: CALL_OW 310
69129: NOT
69130: IFFALSE 69134
// exit ;
69132: GO 69194
// tmp := IsInUnit ( unit ) ;
69134: LD_ADDR_VAR 0 3
69138: PUSH
69139: LD_VAR 0 1
69143: PPUSH
69144: CALL_OW 310
69148: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69149: LD_VAR 0 3
69153: PPUSH
69154: CALL_OW 247
69158: PUSH
69159: LD_INT 2
69161: EQUAL
69162: IFFALSE 69175
// ComExitVehicle ( unit ) else
69164: LD_VAR 0 1
69168: PPUSH
69169: CALL_OW 121
69173: GO 69184
// ComExitBuilding ( unit ) ;
69175: LD_VAR 0 1
69179: PPUSH
69180: CALL_OW 122
// result := tmp ;
69184: LD_ADDR_VAR 0 2
69188: PUSH
69189: LD_VAR 0 3
69193: ST_TO_ADDR
// end ;
69194: LD_VAR 0 2
69198: RET
// export function ComExitAll ( units ) ; var i ; begin
69199: LD_INT 0
69201: PPUSH
69202: PPUSH
// if not units then
69203: LD_VAR 0 1
69207: NOT
69208: IFFALSE 69212
// exit ;
69210: GO 69238
// for i in units do
69212: LD_ADDR_VAR 0 3
69216: PUSH
69217: LD_VAR 0 1
69221: PUSH
69222: FOR_IN
69223: IFFALSE 69236
// ComExit ( i ) ;
69225: LD_VAR 0 3
69229: PPUSH
69230: CALL 69116 0 1
69234: GO 69222
69236: POP
69237: POP
// end ;
69238: LD_VAR 0 2
69242: RET
// export function ResetHc ; begin
69243: LD_INT 0
69245: PPUSH
// InitHc ;
69246: CALL_OW 19
// hc_importance := 0 ;
69250: LD_ADDR_OWVAR 32
69254: PUSH
69255: LD_INT 0
69257: ST_TO_ADDR
// end ;
69258: LD_VAR 0 1
69262: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69263: LD_INT 0
69265: PPUSH
69266: PPUSH
69267: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69268: LD_ADDR_VAR 0 6
69272: PUSH
69273: LD_VAR 0 1
69277: PUSH
69278: LD_VAR 0 3
69282: PLUS
69283: PUSH
69284: LD_INT 2
69286: DIV
69287: ST_TO_ADDR
// if _x < 0 then
69288: LD_VAR 0 6
69292: PUSH
69293: LD_INT 0
69295: LESS
69296: IFFALSE 69313
// _x := _x * - 1 ;
69298: LD_ADDR_VAR 0 6
69302: PUSH
69303: LD_VAR 0 6
69307: PUSH
69308: LD_INT 1
69310: NEG
69311: MUL
69312: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69313: LD_ADDR_VAR 0 7
69317: PUSH
69318: LD_VAR 0 2
69322: PUSH
69323: LD_VAR 0 4
69327: PLUS
69328: PUSH
69329: LD_INT 2
69331: DIV
69332: ST_TO_ADDR
// if _y < 0 then
69333: LD_VAR 0 7
69337: PUSH
69338: LD_INT 0
69340: LESS
69341: IFFALSE 69358
// _y := _y * - 1 ;
69343: LD_ADDR_VAR 0 7
69347: PUSH
69348: LD_VAR 0 7
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: MUL
69357: ST_TO_ADDR
// result := [ _x , _y ] ;
69358: LD_ADDR_VAR 0 5
69362: PUSH
69363: LD_VAR 0 6
69367: PUSH
69368: LD_VAR 0 7
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: ST_TO_ADDR
// end ;
69377: LD_VAR 0 5
69381: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
// task := GetTaskList ( unit ) ;
69388: LD_ADDR_VAR 0 7
69392: PUSH
69393: LD_VAR 0 1
69397: PPUSH
69398: CALL_OW 437
69402: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69403: LD_VAR 0 7
69407: NOT
69408: PUSH
69409: LD_VAR 0 1
69413: PPUSH
69414: LD_VAR 0 2
69418: PPUSH
69419: CALL_OW 308
69423: NOT
69424: AND
69425: IFFALSE 69429
// exit ;
69427: GO 69547
// if IsInArea ( unit , area ) then
69429: LD_VAR 0 1
69433: PPUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: CALL_OW 308
69443: IFFALSE 69461
// begin ComMoveToArea ( unit , goAway ) ;
69445: LD_VAR 0 1
69449: PPUSH
69450: LD_VAR 0 3
69454: PPUSH
69455: CALL_OW 113
// exit ;
69459: GO 69547
// end ; if task [ 1 ] [ 1 ] <> M then
69461: LD_VAR 0 7
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: PUSH
69470: LD_INT 1
69472: ARRAY
69473: PUSH
69474: LD_STRING M
69476: NONEQUAL
69477: IFFALSE 69481
// exit ;
69479: GO 69547
// x := task [ 1 ] [ 2 ] ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 7
69490: PUSH
69491: LD_INT 1
69493: ARRAY
69494: PUSH
69495: LD_INT 2
69497: ARRAY
69498: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69499: LD_ADDR_VAR 0 6
69503: PUSH
69504: LD_VAR 0 7
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PUSH
69513: LD_INT 3
69515: ARRAY
69516: ST_TO_ADDR
// if InArea ( x , y , area ) then
69517: LD_VAR 0 5
69521: PPUSH
69522: LD_VAR 0 6
69526: PPUSH
69527: LD_VAR 0 2
69531: PPUSH
69532: CALL_OW 309
69536: IFFALSE 69547
// ComStop ( unit ) ;
69538: LD_VAR 0 1
69542: PPUSH
69543: CALL_OW 141
// end ;
69547: LD_VAR 0 4
69551: RET
// export function Abs ( value ) ; begin
69552: LD_INT 0
69554: PPUSH
// result := value ;
69555: LD_ADDR_VAR 0 2
69559: PUSH
69560: LD_VAR 0 1
69564: ST_TO_ADDR
// if value < 0 then
69565: LD_VAR 0 1
69569: PUSH
69570: LD_INT 0
69572: LESS
69573: IFFALSE 69590
// result := value * - 1 ;
69575: LD_ADDR_VAR 0 2
69579: PUSH
69580: LD_VAR 0 1
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: MUL
69589: ST_TO_ADDR
// end ;
69590: LD_VAR 0 2
69594: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69595: LD_INT 0
69597: PPUSH
69598: PPUSH
69599: PPUSH
69600: PPUSH
69601: PPUSH
69602: PPUSH
69603: PPUSH
69604: PPUSH
// if not unit or not building then
69605: LD_VAR 0 1
69609: NOT
69610: PUSH
69611: LD_VAR 0 2
69615: NOT
69616: OR
69617: IFFALSE 69621
// exit ;
69619: GO 69847
// x := GetX ( building ) ;
69621: LD_ADDR_VAR 0 4
69625: PUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: CALL_OW 250
69635: ST_TO_ADDR
// y := GetY ( building ) ;
69636: LD_ADDR_VAR 0 6
69640: PUSH
69641: LD_VAR 0 2
69645: PPUSH
69646: CALL_OW 251
69650: ST_TO_ADDR
// d := GetDir ( building ) ;
69651: LD_ADDR_VAR 0 8
69655: PUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: CALL_OW 254
69665: ST_TO_ADDR
// r := 4 ;
69666: LD_ADDR_VAR 0 9
69670: PUSH
69671: LD_INT 4
69673: ST_TO_ADDR
// for i := 1 to 5 do
69674: LD_ADDR_VAR 0 10
69678: PUSH
69679: DOUBLE
69680: LD_INT 1
69682: DEC
69683: ST_TO_ADDR
69684: LD_INT 5
69686: PUSH
69687: FOR_TO
69688: IFFALSE 69845
// begin _x := ShiftX ( x , d , r + i ) ;
69690: LD_ADDR_VAR 0 5
69694: PUSH
69695: LD_VAR 0 4
69699: PPUSH
69700: LD_VAR 0 8
69704: PPUSH
69705: LD_VAR 0 9
69709: PUSH
69710: LD_VAR 0 10
69714: PLUS
69715: PPUSH
69716: CALL_OW 272
69720: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69721: LD_ADDR_VAR 0 7
69725: PUSH
69726: LD_VAR 0 6
69730: PPUSH
69731: LD_VAR 0 8
69735: PPUSH
69736: LD_VAR 0 9
69740: PUSH
69741: LD_VAR 0 10
69745: PLUS
69746: PPUSH
69747: CALL_OW 273
69751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69752: LD_VAR 0 5
69756: PPUSH
69757: LD_VAR 0 7
69761: PPUSH
69762: CALL_OW 488
69766: PUSH
69767: LD_VAR 0 5
69771: PPUSH
69772: LD_VAR 0 7
69776: PPUSH
69777: CALL_OW 428
69781: PPUSH
69782: CALL_OW 247
69786: PUSH
69787: LD_INT 3
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: IN
69797: NOT
69798: AND
69799: IFFALSE 69843
// begin ComMoveXY ( unit , _x , _y ) ;
69801: LD_VAR 0 1
69805: PPUSH
69806: LD_VAR 0 5
69810: PPUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: CALL_OW 111
// result := [ _x , _y ] ;
69820: LD_ADDR_VAR 0 3
69824: PUSH
69825: LD_VAR 0 5
69829: PUSH
69830: LD_VAR 0 7
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: ST_TO_ADDR
// exit ;
69839: POP
69840: POP
69841: GO 69847
// end ; end ;
69843: GO 69687
69845: POP
69846: POP
// end ;
69847: LD_VAR 0 3
69851: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69852: LD_INT 0
69854: PPUSH
69855: PPUSH
69856: PPUSH
// result := 0 ;
69857: LD_ADDR_VAR 0 3
69861: PUSH
69862: LD_INT 0
69864: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69865: LD_VAR 0 1
69869: PUSH
69870: LD_INT 0
69872: LESS
69873: PUSH
69874: LD_VAR 0 1
69878: PUSH
69879: LD_INT 8
69881: GREATER
69882: OR
69883: PUSH
69884: LD_VAR 0 2
69888: PUSH
69889: LD_INT 0
69891: LESS
69892: OR
69893: PUSH
69894: LD_VAR 0 2
69898: PUSH
69899: LD_INT 8
69901: GREATER
69902: OR
69903: IFFALSE 69907
// exit ;
69905: GO 69982
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69907: LD_ADDR_VAR 0 4
69911: PUSH
69912: LD_INT 22
69914: PUSH
69915: LD_VAR 0 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PPUSH
69924: CALL_OW 69
69928: PUSH
69929: FOR_IN
69930: IFFALSE 69980
// begin un := UnitShoot ( i ) ;
69932: LD_ADDR_VAR 0 5
69936: PUSH
69937: LD_VAR 0 4
69941: PPUSH
69942: CALL_OW 504
69946: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69947: LD_VAR 0 5
69951: PPUSH
69952: CALL_OW 255
69956: PUSH
69957: LD_VAR 0 1
69961: EQUAL
69962: IFFALSE 69978
// begin result := un ;
69964: LD_ADDR_VAR 0 3
69968: PUSH
69969: LD_VAR 0 5
69973: ST_TO_ADDR
// exit ;
69974: POP
69975: POP
69976: GO 69982
// end ; end ;
69978: GO 69929
69980: POP
69981: POP
// end ;
69982: LD_VAR 0 3
69986: RET
// export function GetCargoBay ( units ) ; begin
69987: LD_INT 0
69989: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69990: LD_ADDR_VAR 0 2
69994: PUSH
69995: LD_VAR 0 1
69999: PPUSH
70000: LD_INT 2
70002: PUSH
70003: LD_INT 34
70005: PUSH
70006: LD_INT 12
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 34
70015: PUSH
70016: LD_INT 51
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 34
70025: PUSH
70026: LD_INT 32
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 34
70035: PUSH
70036: LD_EXP 22
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: PPUSH
70052: CALL_OW 72
70056: ST_TO_ADDR
// end ;
70057: LD_VAR 0 2
70061: RET
// export function Negate ( value ) ; begin
70062: LD_INT 0
70064: PPUSH
// result := not value ;
70065: LD_ADDR_VAR 0 2
70069: PUSH
70070: LD_VAR 0 1
70074: NOT
70075: ST_TO_ADDR
// end ;
70076: LD_VAR 0 2
70080: RET
// export function Inc ( value ) ; begin
70081: LD_INT 0
70083: PPUSH
// result := value + 1 ;
70084: LD_ADDR_VAR 0 2
70088: PUSH
70089: LD_VAR 0 1
70093: PUSH
70094: LD_INT 1
70096: PLUS
70097: ST_TO_ADDR
// end ;
70098: LD_VAR 0 2
70102: RET
// export function Dec ( value ) ; begin
70103: LD_INT 0
70105: PPUSH
// result := value - 1 ;
70106: LD_ADDR_VAR 0 2
70110: PUSH
70111: LD_VAR 0 1
70115: PUSH
70116: LD_INT 1
70118: MINUS
70119: ST_TO_ADDR
// end ;
70120: LD_VAR 0 2
70124: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70125: LD_INT 0
70127: PPUSH
70128: PPUSH
70129: PPUSH
70130: PPUSH
70131: PPUSH
70132: PPUSH
70133: PPUSH
70134: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_VAR 0 2
70144: PPUSH
70145: CALL_OW 488
70149: NOT
70150: PUSH
70151: LD_VAR 0 3
70155: PPUSH
70156: LD_VAR 0 4
70160: PPUSH
70161: CALL_OW 488
70165: NOT
70166: OR
70167: IFFALSE 70180
// begin result := - 1 ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: ST_TO_ADDR
// exit ;
70178: GO 70415
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70180: LD_ADDR_VAR 0 12
70184: PUSH
70185: LD_VAR 0 1
70189: PPUSH
70190: LD_VAR 0 2
70194: PPUSH
70195: LD_VAR 0 3
70199: PPUSH
70200: LD_VAR 0 4
70204: PPUSH
70205: CALL 69263 0 4
70209: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70210: LD_ADDR_VAR 0 11
70214: PUSH
70215: LD_VAR 0 1
70219: PPUSH
70220: LD_VAR 0 2
70224: PPUSH
70225: LD_VAR 0 12
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PPUSH
70234: LD_VAR 0 12
70238: PUSH
70239: LD_INT 2
70241: ARRAY
70242: PPUSH
70243: CALL_OW 298
70247: ST_TO_ADDR
// distance := 9999 ;
70248: LD_ADDR_VAR 0 10
70252: PUSH
70253: LD_INT 9999
70255: ST_TO_ADDR
// for i := 0 to 5 do
70256: LD_ADDR_VAR 0 6
70260: PUSH
70261: DOUBLE
70262: LD_INT 0
70264: DEC
70265: ST_TO_ADDR
70266: LD_INT 5
70268: PUSH
70269: FOR_TO
70270: IFFALSE 70413
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70272: LD_ADDR_VAR 0 7
70276: PUSH
70277: LD_VAR 0 1
70281: PPUSH
70282: LD_VAR 0 6
70286: PPUSH
70287: LD_VAR 0 11
70291: PPUSH
70292: CALL_OW 272
70296: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70297: LD_ADDR_VAR 0 8
70301: PUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: LD_VAR 0 6
70311: PPUSH
70312: LD_VAR 0 11
70316: PPUSH
70317: CALL_OW 273
70321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70322: LD_VAR 0 7
70326: PPUSH
70327: LD_VAR 0 8
70331: PPUSH
70332: CALL_OW 488
70336: NOT
70337: IFFALSE 70341
// continue ;
70339: GO 70269
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70341: LD_ADDR_VAR 0 9
70345: PUSH
70346: LD_VAR 0 12
70350: PUSH
70351: LD_INT 1
70353: ARRAY
70354: PPUSH
70355: LD_VAR 0 12
70359: PUSH
70360: LD_INT 2
70362: ARRAY
70363: PPUSH
70364: LD_VAR 0 7
70368: PPUSH
70369: LD_VAR 0 8
70373: PPUSH
70374: CALL_OW 298
70378: ST_TO_ADDR
// if tmp < distance then
70379: LD_VAR 0 9
70383: PUSH
70384: LD_VAR 0 10
70388: LESS
70389: IFFALSE 70411
// begin result := i ;
70391: LD_ADDR_VAR 0 5
70395: PUSH
70396: LD_VAR 0 6
70400: ST_TO_ADDR
// distance := tmp ;
70401: LD_ADDR_VAR 0 10
70405: PUSH
70406: LD_VAR 0 9
70410: ST_TO_ADDR
// end ; end ;
70411: GO 70269
70413: POP
70414: POP
// end ;
70415: LD_VAR 0 5
70419: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70420: LD_INT 0
70422: PPUSH
70423: PPUSH
// if not driver or not IsInUnit ( driver ) then
70424: LD_VAR 0 1
70428: NOT
70429: PUSH
70430: LD_VAR 0 1
70434: PPUSH
70435: CALL_OW 310
70439: NOT
70440: OR
70441: IFFALSE 70445
// exit ;
70443: GO 70535
// vehicle := IsInUnit ( driver ) ;
70445: LD_ADDR_VAR 0 3
70449: PUSH
70450: LD_VAR 0 1
70454: PPUSH
70455: CALL_OW 310
70459: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70460: LD_VAR 0 1
70464: PPUSH
70465: LD_STRING \
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: PUSH
70495: LD_STRING E
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: LD_VAR 0 3
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: LD_INT 0
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PPUSH
70531: CALL_OW 446
// end ;
70535: LD_VAR 0 2
70539: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70540: LD_INT 0
70542: PPUSH
70543: PPUSH
// if not driver or not IsInUnit ( driver ) then
70544: LD_VAR 0 1
70548: NOT
70549: PUSH
70550: LD_VAR 0 1
70554: PPUSH
70555: CALL_OW 310
70559: NOT
70560: OR
70561: IFFALSE 70565
// exit ;
70563: GO 70655
// vehicle := IsInUnit ( driver ) ;
70565: LD_ADDR_VAR 0 3
70569: PUSH
70570: LD_VAR 0 1
70574: PPUSH
70575: CALL_OW 310
70579: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70580: LD_VAR 0 1
70584: PPUSH
70585: LD_STRING \
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: PUSH
70615: LD_STRING E
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: LD_INT 0
70623: PUSH
70624: LD_VAR 0 3
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PPUSH
70651: CALL_OW 447
// end ;
70655: LD_VAR 0 2
70659: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70660: LD_INT 0
70662: PPUSH
70663: PPUSH
70664: PPUSH
// tmp := [ ] ;
70665: LD_ADDR_VAR 0 5
70669: PUSH
70670: EMPTY
70671: ST_TO_ADDR
// for i in units do
70672: LD_ADDR_VAR 0 4
70676: PUSH
70677: LD_VAR 0 1
70681: PUSH
70682: FOR_IN
70683: IFFALSE 70721
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70685: LD_ADDR_VAR 0 5
70689: PUSH
70690: LD_VAR 0 5
70694: PPUSH
70695: LD_VAR 0 5
70699: PUSH
70700: LD_INT 1
70702: PLUS
70703: PPUSH
70704: LD_VAR 0 4
70708: PPUSH
70709: CALL_OW 256
70713: PPUSH
70714: CALL_OW 2
70718: ST_TO_ADDR
70719: GO 70682
70721: POP
70722: POP
// if not tmp then
70723: LD_VAR 0 5
70727: NOT
70728: IFFALSE 70732
// exit ;
70730: GO 70780
// if asc then
70732: LD_VAR 0 2
70736: IFFALSE 70760
// result := SortListByListAsc ( units , tmp ) else
70738: LD_ADDR_VAR 0 3
70742: PUSH
70743: LD_VAR 0 1
70747: PPUSH
70748: LD_VAR 0 5
70752: PPUSH
70753: CALL_OW 76
70757: ST_TO_ADDR
70758: GO 70780
// result := SortListByListDesc ( units , tmp ) ;
70760: LD_ADDR_VAR 0 3
70764: PUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: LD_VAR 0 5
70774: PPUSH
70775: CALL_OW 77
70779: ST_TO_ADDR
// end ;
70780: LD_VAR 0 3
70784: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70785: LD_INT 0
70787: PPUSH
70788: PPUSH
// task := GetTaskList ( mech ) ;
70789: LD_ADDR_VAR 0 4
70793: PUSH
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 437
70803: ST_TO_ADDR
// if not task then
70804: LD_VAR 0 4
70808: NOT
70809: IFFALSE 70813
// exit ;
70811: GO 70855
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70813: LD_ADDR_VAR 0 3
70817: PUSH
70818: LD_VAR 0 4
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PUSH
70827: LD_INT 1
70829: ARRAY
70830: PUSH
70831: LD_STRING r
70833: EQUAL
70834: PUSH
70835: LD_VAR 0 4
70839: PUSH
70840: LD_INT 1
70842: ARRAY
70843: PUSH
70844: LD_INT 4
70846: ARRAY
70847: PUSH
70848: LD_VAR 0 2
70852: EQUAL
70853: AND
70854: ST_TO_ADDR
// end ;
70855: LD_VAR 0 3
70859: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70860: LD_INT 0
70862: PPUSH
// SetDir ( unit , d ) ;
70863: LD_VAR 0 1
70867: PPUSH
70868: LD_VAR 0 4
70872: PPUSH
70873: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70877: LD_VAR 0 1
70881: PPUSH
70882: LD_VAR 0 2
70886: PPUSH
70887: LD_VAR 0 3
70891: PPUSH
70892: LD_VAR 0 5
70896: PPUSH
70897: CALL_OW 48
// end ;
70901: LD_VAR 0 6
70905: RET
// export function ToNaturalNumber ( number ) ; begin
70906: LD_INT 0
70908: PPUSH
// result := number div 1 ;
70909: LD_ADDR_VAR 0 2
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: LD_INT 1
70921: DIV
70922: ST_TO_ADDR
// if number < 0 then
70923: LD_VAR 0 1
70927: PUSH
70928: LD_INT 0
70930: LESS
70931: IFFALSE 70941
// result := 0 ;
70933: LD_ADDR_VAR 0 2
70937: PUSH
70938: LD_INT 0
70940: ST_TO_ADDR
// end ;
70941: LD_VAR 0 2
70945: RET
// export function SortByClass ( units , class ) ; var un ; begin
70946: LD_INT 0
70948: PPUSH
70949: PPUSH
// if not units or not class then
70950: LD_VAR 0 1
70954: NOT
70955: PUSH
70956: LD_VAR 0 2
70960: NOT
70961: OR
70962: IFFALSE 70966
// exit ;
70964: GO 71061
// result := [ ] ;
70966: LD_ADDR_VAR 0 3
70970: PUSH
70971: EMPTY
70972: ST_TO_ADDR
// for un in units do
70973: LD_ADDR_VAR 0 4
70977: PUSH
70978: LD_VAR 0 1
70982: PUSH
70983: FOR_IN
70984: IFFALSE 71059
// if GetClass ( un ) = class then
70986: LD_VAR 0 4
70990: PPUSH
70991: CALL_OW 257
70995: PUSH
70996: LD_VAR 0 2
71000: EQUAL
71001: IFFALSE 71028
// result := Insert ( result , 1 , un ) else
71003: LD_ADDR_VAR 0 3
71007: PUSH
71008: LD_VAR 0 3
71012: PPUSH
71013: LD_INT 1
71015: PPUSH
71016: LD_VAR 0 4
71020: PPUSH
71021: CALL_OW 2
71025: ST_TO_ADDR
71026: GO 71057
// result := Replace ( result , result + 1 , un ) ;
71028: LD_ADDR_VAR 0 3
71032: PUSH
71033: LD_VAR 0 3
71037: PPUSH
71038: LD_VAR 0 3
71042: PUSH
71043: LD_INT 1
71045: PLUS
71046: PPUSH
71047: LD_VAR 0 4
71051: PPUSH
71052: CALL_OW 1
71056: ST_TO_ADDR
71057: GO 70983
71059: POP
71060: POP
// end ;
71061: LD_VAR 0 3
71065: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71066: LD_INT 0
71068: PPUSH
71069: PPUSH
71070: PPUSH
71071: PPUSH
71072: PPUSH
71073: PPUSH
71074: PPUSH
// result := [ ] ;
71075: LD_ADDR_VAR 0 4
71079: PUSH
71080: EMPTY
71081: ST_TO_ADDR
// if x - r < 0 then
71082: LD_VAR 0 1
71086: PUSH
71087: LD_VAR 0 3
71091: MINUS
71092: PUSH
71093: LD_INT 0
71095: LESS
71096: IFFALSE 71108
// min_x := 0 else
71098: LD_ADDR_VAR 0 8
71102: PUSH
71103: LD_INT 0
71105: ST_TO_ADDR
71106: GO 71124
// min_x := x - r ;
71108: LD_ADDR_VAR 0 8
71112: PUSH
71113: LD_VAR 0 1
71117: PUSH
71118: LD_VAR 0 3
71122: MINUS
71123: ST_TO_ADDR
// if y - r < 0 then
71124: LD_VAR 0 2
71128: PUSH
71129: LD_VAR 0 3
71133: MINUS
71134: PUSH
71135: LD_INT 0
71137: LESS
71138: IFFALSE 71150
// min_y := 0 else
71140: LD_ADDR_VAR 0 7
71144: PUSH
71145: LD_INT 0
71147: ST_TO_ADDR
71148: GO 71166
// min_y := y - r ;
71150: LD_ADDR_VAR 0 7
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: LD_VAR 0 3
71164: MINUS
71165: ST_TO_ADDR
// max_x := x + r ;
71166: LD_ADDR_VAR 0 9
71170: PUSH
71171: LD_VAR 0 1
71175: PUSH
71176: LD_VAR 0 3
71180: PLUS
71181: ST_TO_ADDR
// max_y := y + r ;
71182: LD_ADDR_VAR 0 10
71186: PUSH
71187: LD_VAR 0 2
71191: PUSH
71192: LD_VAR 0 3
71196: PLUS
71197: ST_TO_ADDR
// for _x = min_x to max_x do
71198: LD_ADDR_VAR 0 5
71202: PUSH
71203: DOUBLE
71204: LD_VAR 0 8
71208: DEC
71209: ST_TO_ADDR
71210: LD_VAR 0 9
71214: PUSH
71215: FOR_TO
71216: IFFALSE 71317
// for _y = min_y to max_y do
71218: LD_ADDR_VAR 0 6
71222: PUSH
71223: DOUBLE
71224: LD_VAR 0 7
71228: DEC
71229: ST_TO_ADDR
71230: LD_VAR 0 10
71234: PUSH
71235: FOR_TO
71236: IFFALSE 71313
// begin if not ValidHex ( _x , _y ) then
71238: LD_VAR 0 5
71242: PPUSH
71243: LD_VAR 0 6
71247: PPUSH
71248: CALL_OW 488
71252: NOT
71253: IFFALSE 71257
// continue ;
71255: GO 71235
// if GetResourceTypeXY ( _x , _y ) then
71257: LD_VAR 0 5
71261: PPUSH
71262: LD_VAR 0 6
71266: PPUSH
71267: CALL_OW 283
71271: IFFALSE 71311
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71273: LD_ADDR_VAR 0 4
71277: PUSH
71278: LD_VAR 0 4
71282: PPUSH
71283: LD_VAR 0 4
71287: PUSH
71288: LD_INT 1
71290: PLUS
71291: PPUSH
71292: LD_VAR 0 5
71296: PUSH
71297: LD_VAR 0 6
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PPUSH
71306: CALL_OW 1
71310: ST_TO_ADDR
// end ;
71311: GO 71235
71313: POP
71314: POP
71315: GO 71215
71317: POP
71318: POP
// end ;
71319: LD_VAR 0 4
71323: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71324: LD_INT 0
71326: PPUSH
71327: PPUSH
71328: PPUSH
71329: PPUSH
71330: PPUSH
71331: PPUSH
71332: PPUSH
71333: PPUSH
// if not units then
71334: LD_VAR 0 1
71338: NOT
71339: IFFALSE 71343
// exit ;
71341: GO 71869
// result := UnitFilter ( units , [ f_ok ] ) ;
71343: LD_ADDR_VAR 0 3
71347: PUSH
71348: LD_VAR 0 1
71352: PPUSH
71353: LD_INT 50
71355: PUSH
71356: EMPTY
71357: LIST
71358: PPUSH
71359: CALL_OW 72
71363: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71364: LD_ADDR_VAR 0 8
71368: PUSH
71369: LD_VAR 0 1
71373: PUSH
71374: LD_INT 1
71376: ARRAY
71377: PPUSH
71378: CALL_OW 255
71382: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71383: LD_ADDR_VAR 0 10
71387: PUSH
71388: LD_INT 29
71390: PUSH
71391: LD_EXP 25
71395: PUSH
71396: LD_INT 49
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// if not result then
71404: LD_VAR 0 3
71408: NOT
71409: IFFALSE 71413
// exit ;
71411: GO 71869
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71413: LD_ADDR_VAR 0 5
71417: PUSH
71418: LD_INT 81
71420: PUSH
71421: LD_VAR 0 8
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PPUSH
71430: CALL_OW 69
71434: ST_TO_ADDR
// for i in result do
71435: LD_ADDR_VAR 0 4
71439: PUSH
71440: LD_VAR 0 3
71444: PUSH
71445: FOR_IN
71446: IFFALSE 71867
// begin tag := GetTag ( i ) + 1 ;
71448: LD_ADDR_VAR 0 9
71452: PUSH
71453: LD_VAR 0 4
71457: PPUSH
71458: CALL_OW 110
71462: PUSH
71463: LD_INT 1
71465: PLUS
71466: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71467: LD_ADDR_VAR 0 7
71471: PUSH
71472: LD_VAR 0 4
71476: PPUSH
71477: CALL_OW 250
71481: PPUSH
71482: LD_VAR 0 4
71486: PPUSH
71487: CALL_OW 251
71491: PPUSH
71492: LD_INT 6
71494: PPUSH
71495: CALL 71066 0 3
71499: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71500: LD_VAR 0 4
71504: PPUSH
71505: CALL_OW 247
71509: PUSH
71510: LD_INT 2
71512: EQUAL
71513: PUSH
71514: LD_VAR 0 7
71518: AND
71519: PUSH
71520: LD_VAR 0 4
71524: PPUSH
71525: CALL_OW 264
71529: PUSH
71530: LD_VAR 0 10
71534: IN
71535: NOT
71536: AND
71537: IFFALSE 71576
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71539: LD_VAR 0 4
71543: PPUSH
71544: LD_VAR 0 7
71548: PUSH
71549: LD_INT 1
71551: ARRAY
71552: PUSH
71553: LD_INT 1
71555: ARRAY
71556: PPUSH
71557: LD_VAR 0 7
71561: PUSH
71562: LD_INT 1
71564: ARRAY
71565: PUSH
71566: LD_INT 2
71568: ARRAY
71569: PPUSH
71570: CALL_OW 116
71574: GO 71865
// if path > tag then
71576: LD_VAR 0 2
71580: PUSH
71581: LD_VAR 0 9
71585: GREATER
71586: IFFALSE 71794
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71588: LD_ADDR_VAR 0 6
71592: PUSH
71593: LD_VAR 0 5
71597: PPUSH
71598: LD_INT 91
71600: PUSH
71601: LD_VAR 0 4
71605: PUSH
71606: LD_INT 8
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: LIST
71613: PPUSH
71614: CALL_OW 72
71618: ST_TO_ADDR
// if nearEnemy then
71619: LD_VAR 0 6
71623: IFFALSE 71692
// begin if GetWeapon ( i ) = ru_time_lapser then
71625: LD_VAR 0 4
71629: PPUSH
71630: CALL_OW 264
71634: PUSH
71635: LD_INT 49
71637: EQUAL
71638: IFFALSE 71666
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71640: LD_VAR 0 4
71644: PPUSH
71645: LD_VAR 0 6
71649: PPUSH
71650: LD_VAR 0 4
71654: PPUSH
71655: CALL_OW 74
71659: PPUSH
71660: CALL_OW 112
71664: GO 71690
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71666: LD_VAR 0 4
71670: PPUSH
71671: LD_VAR 0 6
71675: PPUSH
71676: LD_VAR 0 4
71680: PPUSH
71681: CALL_OW 74
71685: PPUSH
71686: CALL_OW 115
// end else
71690: GO 71792
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71692: LD_VAR 0 4
71696: PPUSH
71697: LD_VAR 0 2
71701: PUSH
71702: LD_VAR 0 9
71706: ARRAY
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PPUSH
71712: LD_VAR 0 2
71716: PUSH
71717: LD_VAR 0 9
71721: ARRAY
71722: PUSH
71723: LD_INT 2
71725: ARRAY
71726: PPUSH
71727: CALL_OW 297
71731: PUSH
71732: LD_INT 6
71734: GREATER
71735: IFFALSE 71778
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71737: LD_VAR 0 4
71741: PPUSH
71742: LD_VAR 0 2
71746: PUSH
71747: LD_VAR 0 9
71751: ARRAY
71752: PUSH
71753: LD_INT 1
71755: ARRAY
71756: PPUSH
71757: LD_VAR 0 2
71761: PUSH
71762: LD_VAR 0 9
71766: ARRAY
71767: PUSH
71768: LD_INT 2
71770: ARRAY
71771: PPUSH
71772: CALL_OW 114
71776: GO 71792
// SetTag ( i , tag ) ;
71778: LD_VAR 0 4
71782: PPUSH
71783: LD_VAR 0 9
71787: PPUSH
71788: CALL_OW 109
// end else
71792: GO 71865
// if enemy then
71794: LD_VAR 0 5
71798: IFFALSE 71865
// begin if GetWeapon ( i ) = ru_time_lapser then
71800: LD_VAR 0 4
71804: PPUSH
71805: CALL_OW 264
71809: PUSH
71810: LD_INT 49
71812: EQUAL
71813: IFFALSE 71841
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71815: LD_VAR 0 4
71819: PPUSH
71820: LD_VAR 0 5
71824: PPUSH
71825: LD_VAR 0 4
71829: PPUSH
71830: CALL_OW 74
71834: PPUSH
71835: CALL_OW 112
71839: GO 71865
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71841: LD_VAR 0 4
71845: PPUSH
71846: LD_VAR 0 5
71850: PPUSH
71851: LD_VAR 0 4
71855: PPUSH
71856: CALL_OW 74
71860: PPUSH
71861: CALL_OW 115
// end ; end ;
71865: GO 71445
71867: POP
71868: POP
// end ;
71869: LD_VAR 0 3
71873: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71874: LD_INT 0
71876: PPUSH
71877: PPUSH
71878: PPUSH
// if not unit or IsInUnit ( unit ) then
71879: LD_VAR 0 1
71883: NOT
71884: PUSH
71885: LD_VAR 0 1
71889: PPUSH
71890: CALL_OW 310
71894: OR
71895: IFFALSE 71899
// exit ;
71897: GO 71990
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71899: LD_ADDR_VAR 0 4
71903: PUSH
71904: LD_VAR 0 1
71908: PPUSH
71909: CALL_OW 250
71913: PPUSH
71914: LD_VAR 0 2
71918: PPUSH
71919: LD_INT 1
71921: PPUSH
71922: CALL_OW 272
71926: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71927: LD_ADDR_VAR 0 5
71931: PUSH
71932: LD_VAR 0 1
71936: PPUSH
71937: CALL_OW 251
71941: PPUSH
71942: LD_VAR 0 2
71946: PPUSH
71947: LD_INT 1
71949: PPUSH
71950: CALL_OW 273
71954: ST_TO_ADDR
// if ValidHex ( x , y ) then
71955: LD_VAR 0 4
71959: PPUSH
71960: LD_VAR 0 5
71964: PPUSH
71965: CALL_OW 488
71969: IFFALSE 71990
// ComTurnXY ( unit , x , y ) ;
71971: LD_VAR 0 1
71975: PPUSH
71976: LD_VAR 0 4
71980: PPUSH
71981: LD_VAR 0 5
71985: PPUSH
71986: CALL_OW 118
// end ;
71990: LD_VAR 0 3
71994: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71995: LD_INT 0
71997: PPUSH
71998: PPUSH
// result := false ;
71999: LD_ADDR_VAR 0 3
72003: PUSH
72004: LD_INT 0
72006: ST_TO_ADDR
// if not units then
72007: LD_VAR 0 2
72011: NOT
72012: IFFALSE 72016
// exit ;
72014: GO 72061
// for i in units do
72016: LD_ADDR_VAR 0 4
72020: PUSH
72021: LD_VAR 0 2
72025: PUSH
72026: FOR_IN
72027: IFFALSE 72059
// if See ( side , i ) then
72029: LD_VAR 0 1
72033: PPUSH
72034: LD_VAR 0 4
72038: PPUSH
72039: CALL_OW 292
72043: IFFALSE 72057
// begin result := true ;
72045: LD_ADDR_VAR 0 3
72049: PUSH
72050: LD_INT 1
72052: ST_TO_ADDR
// exit ;
72053: POP
72054: POP
72055: GO 72061
// end ;
72057: GO 72026
72059: POP
72060: POP
// end ;
72061: LD_VAR 0 3
72065: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72066: LD_INT 0
72068: PPUSH
72069: PPUSH
72070: PPUSH
72071: PPUSH
// if not unit or not points then
72072: LD_VAR 0 1
72076: NOT
72077: PUSH
72078: LD_VAR 0 2
72082: NOT
72083: OR
72084: IFFALSE 72088
// exit ;
72086: GO 72178
// dist := 99999 ;
72088: LD_ADDR_VAR 0 5
72092: PUSH
72093: LD_INT 99999
72095: ST_TO_ADDR
// for i in points do
72096: LD_ADDR_VAR 0 4
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: FOR_IN
72107: IFFALSE 72176
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72109: LD_ADDR_VAR 0 6
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 4
72123: PUSH
72124: LD_INT 1
72126: ARRAY
72127: PPUSH
72128: LD_VAR 0 4
72132: PUSH
72133: LD_INT 2
72135: ARRAY
72136: PPUSH
72137: CALL_OW 297
72141: ST_TO_ADDR
// if tmpDist < dist then
72142: LD_VAR 0 6
72146: PUSH
72147: LD_VAR 0 5
72151: LESS
72152: IFFALSE 72174
// begin result := i ;
72154: LD_ADDR_VAR 0 3
72158: PUSH
72159: LD_VAR 0 4
72163: ST_TO_ADDR
// dist := tmpDist ;
72164: LD_ADDR_VAR 0 5
72168: PUSH
72169: LD_VAR 0 6
72173: ST_TO_ADDR
// end ; end ;
72174: GO 72106
72176: POP
72177: POP
// end ;
72178: LD_VAR 0 3
72182: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72183: LD_INT 0
72185: PPUSH
// uc_side := side ;
72186: LD_ADDR_OWVAR 20
72190: PUSH
72191: LD_VAR 0 1
72195: ST_TO_ADDR
// uc_nation := 3 ;
72196: LD_ADDR_OWVAR 21
72200: PUSH
72201: LD_INT 3
72203: ST_TO_ADDR
// vc_chassis := 25 ;
72204: LD_ADDR_OWVAR 37
72208: PUSH
72209: LD_INT 25
72211: ST_TO_ADDR
// vc_engine := engine_siberite ;
72212: LD_ADDR_OWVAR 39
72216: PUSH
72217: LD_INT 3
72219: ST_TO_ADDR
// vc_control := control_computer ;
72220: LD_ADDR_OWVAR 38
72224: PUSH
72225: LD_INT 3
72227: ST_TO_ADDR
// vc_weapon := 59 ;
72228: LD_ADDR_OWVAR 40
72232: PUSH
72233: LD_INT 59
72235: ST_TO_ADDR
// result := CreateVehicle ;
72236: LD_ADDR_VAR 0 5
72240: PUSH
72241: CALL_OW 45
72245: ST_TO_ADDR
// SetDir ( result , d ) ;
72246: LD_VAR 0 5
72250: PPUSH
72251: LD_VAR 0 4
72255: PPUSH
72256: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72260: LD_VAR 0 5
72264: PPUSH
72265: LD_VAR 0 2
72269: PPUSH
72270: LD_VAR 0 3
72274: PPUSH
72275: LD_INT 0
72277: PPUSH
72278: CALL_OW 48
// end ;
72282: LD_VAR 0 5
72286: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72287: LD_INT 0
72289: PPUSH
72290: PPUSH
72291: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72292: LD_ADDR_VAR 0 2
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: LD_INT 0
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: LD_INT 0
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72315: LD_VAR 0 1
72319: NOT
72320: PUSH
72321: LD_VAR 0 1
72325: PPUSH
72326: CALL_OW 264
72330: PUSH
72331: LD_INT 12
72333: PUSH
72334: LD_INT 51
72336: PUSH
72337: LD_INT 32
72339: PUSH
72340: LD_EXP 22
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: IN
72351: NOT
72352: OR
72353: IFFALSE 72357
// exit ;
72355: GO 72455
// for i := 1 to 3 do
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: DOUBLE
72363: LD_INT 1
72365: DEC
72366: ST_TO_ADDR
72367: LD_INT 3
72369: PUSH
72370: FOR_TO
72371: IFFALSE 72453
// begin tmp := GetCargo ( cargo , i ) ;
72373: LD_ADDR_VAR 0 4
72377: PUSH
72378: LD_VAR 0 1
72382: PPUSH
72383: LD_VAR 0 3
72387: PPUSH
72388: CALL_OW 289
72392: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72393: LD_ADDR_VAR 0 2
72397: PUSH
72398: LD_VAR 0 2
72402: PPUSH
72403: LD_VAR 0 3
72407: PPUSH
72408: LD_VAR 0 4
72412: PPUSH
72413: CALL_OW 1
72417: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72418: LD_ADDR_VAR 0 2
72422: PUSH
72423: LD_VAR 0 2
72427: PPUSH
72428: LD_INT 4
72430: PPUSH
72431: LD_VAR 0 2
72435: PUSH
72436: LD_INT 4
72438: ARRAY
72439: PUSH
72440: LD_VAR 0 4
72444: PLUS
72445: PPUSH
72446: CALL_OW 1
72450: ST_TO_ADDR
// end ;
72451: GO 72370
72453: POP
72454: POP
// end ;
72455: LD_VAR 0 2
72459: RET
// export function Length ( array ) ; begin
72460: LD_INT 0
72462: PPUSH
// result := array + 0 ;
72463: LD_ADDR_VAR 0 2
72467: PUSH
72468: LD_VAR 0 1
72472: PUSH
72473: LD_INT 0
72475: PLUS
72476: ST_TO_ADDR
// end ;
72477: LD_VAR 0 2
72481: RET
// export function PrepareArray ( array ) ; begin
72482: LD_INT 0
72484: PPUSH
// result := array diff 0 ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_INT 0
72497: DIFF
72498: ST_TO_ADDR
// if not result [ 1 ] then
72499: LD_VAR 0 2
72503: PUSH
72504: LD_INT 1
72506: ARRAY
72507: NOT
72508: IFFALSE 72528
// result := Delete ( result , 1 ) ;
72510: LD_ADDR_VAR 0 2
72514: PUSH
72515: LD_VAR 0 2
72519: PPUSH
72520: LD_INT 1
72522: PPUSH
72523: CALL_OW 3
72527: ST_TO_ADDR
// end ; end_of_file
72528: LD_VAR 0 2
72532: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72533: LD_VAR 0 1
72537: PUSH
72538: LD_INT 200
72540: DOUBLE
72541: GREATEREQUAL
72542: IFFALSE 72550
72544: LD_INT 299
72546: DOUBLE
72547: LESSEQUAL
72548: IFTRUE 72552
72550: GO 72584
72552: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72553: LD_VAR 0 1
72557: PPUSH
72558: LD_VAR 0 2
72562: PPUSH
72563: LD_VAR 0 3
72567: PPUSH
72568: LD_VAR 0 4
72572: PPUSH
72573: LD_VAR 0 5
72577: PPUSH
72578: CALL 27384 0 5
72582: GO 72661
72584: LD_INT 300
72586: DOUBLE
72587: GREATEREQUAL
72588: IFFALSE 72596
72590: LD_INT 399
72592: DOUBLE
72593: LESSEQUAL
72594: IFTRUE 72598
72596: GO 72660
72598: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72599: LD_VAR 0 1
72603: PPUSH
72604: LD_VAR 0 2
72608: PPUSH
72609: LD_VAR 0 3
72613: PPUSH
72614: LD_VAR 0 4
72618: PPUSH
72619: LD_VAR 0 5
72623: PPUSH
72624: LD_VAR 0 6
72628: PPUSH
72629: LD_VAR 0 7
72633: PPUSH
72634: LD_VAR 0 8
72638: PPUSH
72639: LD_VAR 0 9
72643: PPUSH
72644: LD_VAR 0 10
72648: PPUSH
72649: LD_VAR 0 11
72653: PPUSH
72654: CALL 23713 0 11
72658: GO 72661
72660: POP
// end ;
72661: PPOPN 11
72663: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72664: LD_VAR 0 1
72668: PPUSH
72669: LD_VAR 0 2
72673: PPUSH
72674: LD_VAR 0 3
72678: PPUSH
72679: LD_VAR 0 4
72683: PPUSH
72684: LD_VAR 0 5
72688: PPUSH
72689: CALL 27120 0 5
// end ; end_of_file
72693: PPOPN 5
72695: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_VAR 0 2
72705: PPUSH
72706: LD_VAR 0 3
72710: PPUSH
72711: LD_VAR 0 4
72715: PPUSH
72716: LD_VAR 0 5
72720: PPUSH
72721: LD_VAR 0 6
72725: PPUSH
72726: CALL 11406 0 6
// end ;
72730: PPOPN 6
72732: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72733: LD_INT 0
72735: PPUSH
// begin if not units then
72736: LD_VAR 0 1
72740: NOT
72741: IFFALSE 72745
// exit ;
72743: GO 72745
// end ;
72745: PPOPN 7
72747: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72748: CALL 11377 0 0
// end ;
72752: PPOPN 1
72754: END
