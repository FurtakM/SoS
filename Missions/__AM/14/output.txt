// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// PrepareNature ;
 111: CALL 1350 0 0
// PrepareDifficulty ;
 115: CALL 1703 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 873 0 0
// PrepareRussianBase ;
 127: CALL 1113 0 0
// PrepareCommander ;
 131: CALL 1058 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING 13f_JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 1496 0 2
 598: ST_TO_ADDR
// if debugMode then
 599: LD_EXP 16
 603: IFFALSE 618
// JMM := NewCharacter ( JMM ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING JMM
 612: PPUSH
 613: CALL_OW 25
 617: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 95
 625: PPUSH
 626: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 630: LD_EXP 1
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 642: LD_ADDR_EXP 5
 646: PUSH
 647: LD_STRING Powell
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL 1496 0 2
 657: ST_TO_ADDR
// uc_side = 4 ;
 658: LD_ADDR_OWVAR 20
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 666: LD_ADDR_EXP 2
 670: PUSH
 671: LD_STRING 10c_Joan
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 1496 0 2
 681: ST_TO_ADDR
// if Joan then
 682: LD_EXP 2
 686: IFFALSE 725
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 688: LD_EXP 2
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 703: LD_EXP 2
 707: PPUSH
 708: LD_INT 4
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 1 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// end else
 723: GO 782
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_STRING 13s_Lisa
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL 1496 0 2
 740: ST_TO_ADDR
// if Lisa then
 741: LD_EXP 3
 745: IFFALSE 782
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL_OW 336
// JMMGirl = 2 ;
 774: LD_ADDR_EXP 7
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 782: LD_EXP 2
 786: NOT
 787: PUSH
 788: LD_EXP 3
 792: NOT
 793: AND
 794: IFFALSE 844
// begin Connie = NewCharacter ( Coonie ) ;
 796: LD_ADDR_EXP 4
 800: PUSH
 801: LD_STRING Coonie
 803: PPUSH
 804: CALL_OW 25
 808: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 809: LD_EXP 4
 813: PPUSH
 814: LD_INT 4
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: CALL_OW 336
// JMMGirl = 3 ;
 836: LD_ADDR_EXP 7
 840: PUSH
 841: LD_INT 3
 843: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 844: LD_EXP 2
 848: PUSH
 849: LD_EXP 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 140
// end ;
 868: LD_VAR 0 1
 872: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 873: LD_INT 0
 875: PPUSH
 876: PPUSH
 877: PPUSH
// for i = 1 to 5 do
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 5
 890: PUSH
 891: FOR_TO
 892: IFFALSE 1051
// begin vc_engine = rand ( 1 , 3 ) ;
 894: LD_ADDR_OWVAR 39
 898: PUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 3
 904: PPUSH
 905: CALL_OW 12
 909: ST_TO_ADDR
// vc_control = control_remote ;
 910: LD_ADDR_OWVAR 38
 914: PUSH
 915: LD_INT 2
 917: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 918: LD_ADDR_OWVAR 40
 922: PUSH
 923: LD_INT 5
 925: PUSH
 926: LD_INT 12
 928: PUSH
 929: LD_INT 13
 931: PUSH
 932: LD_INT 7
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 4
 948: MOD
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 955: LD_ADDR_OWVAR 37
 959: PUSH
 960: LD_INT 3
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_VAR 0 2
 974: PUSH
 975: LD_INT 2
 977: MOD
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: ARRAY
 983: ST_TO_ADDR
// veh = CreateVehicle ;
 984: LD_ADDR_VAR 0 3
 988: PUSH
 989: CALL_OW 45
 993: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 994: LD_VAR 0 3
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: LD_INT 5
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1014: LD_VAR 0 3
1018: PPUSH
1019: LD_INT 500
1021: PPUSH
1022: LD_INT 1000
1024: PPUSH
1025: CALL_OW 12
1029: PPUSH
1030: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1034: LD_VAR 0 3
1038: PPUSH
1039: LD_INT 15
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end ;
1049: GO 891
1051: POP
1052: POP
// end ; end_of_file
1053: LD_VAR 0 1
1057: RET
// export function PrepareCommander ; begin
1058: LD_INT 0
1060: PPUSH
// uc_side = 3 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 3
1068: ST_TO_ADDR
// uc_nation = 3 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 3
1076: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
1077: LD_ADDR_EXP 6
1081: PUSH
1082: LD_STRING Eisenstein
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL 1496 0 2
1092: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1093: LD_EXP 6
1097: PPUSH
1098: LD_INT 11
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// end ;
1108: LD_VAR 0 1
1112: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1113: LD_INT 0
1115: PPUSH
// uc_nation := 3 ;
1116: LD_ADDR_OWVAR 21
1120: PUSH
1121: LD_INT 3
1123: ST_TO_ADDR
// uc_side := 3 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 3
1131: ST_TO_ADDR
// if Difficulty > 1 then
1132: LD_OWVAR 67
1136: PUSH
1137: LD_INT 1
1139: GREATER
1140: IFFALSE 1200
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PUSH
1151: LD_INT 8
1153: PUSH
1154: LD_INT 9
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// baseGuard := CreateHuman ;
1172: LD_ADDR_EXP 18
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1182: LD_EXP 18
1186: PPUSH
1187: LD_INT 39
1189: PPUSH
1190: LD_INT 67
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1200: LD_INT 116
1202: PPUSH
1203: LD_INT 50
1205: PPUSH
1206: LD_INT 74
1208: PPUSH
1209: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 3
1218: PPUSH
1219: LD_INT 45
1221: PPUSH
1222: LD_INT 10
1224: PPUSH
1225: LD_INT 9
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 10
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 10
1268: PPUSH
1269: LD_INT 3
1271: PPUSH
1272: LD_INT 3
1274: PPUSH
1275: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 3
1284: PPUSH
1285: LD_INT 40
1287: PPUSH
1288: LD_INT 10
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 14
1309: PPUSH
1310: LD_INT 10
1312: PPUSH
1313: LD_INT 4
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 15
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 1593 0 6
// end ; end_of_file
1345: LD_VAR 0 1
1349: RET
// export function PrepareNature ; var i ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
// uc_side := 0 ;
1354: LD_ADDR_OWVAR 20
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_nation := 0 ;
1362: LD_ADDR_OWVAR 21
1366: PUSH
1367: LD_INT 0
1369: ST_TO_ADDR
// hc_class := class_apeman ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 12
1377: ST_TO_ADDR
// hc_gallery :=  ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING 
1385: ST_TO_ADDR
// hc_name :=  ;
1386: LD_ADDR_OWVAR 26
1390: PUSH
1391: LD_STRING 
1393: ST_TO_ADDR
// for i = 1 to 7 do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_INT 7
1406: PUSH
1407: FOR_TO
1408: IFFALSE 1489
// begin hc_class := class_apeman ;
1410: LD_ADDR_OWVAR 28
1414: PUSH
1415: LD_INT 12
1417: ST_TO_ADDR
// hc_gallery :=  ;
1418: LD_ADDR_OWVAR 33
1422: PUSH
1423: LD_STRING 
1425: ST_TO_ADDR
// hc_name :=  ;
1426: LD_ADDR_OWVAR 26
1430: PUSH
1431: LD_STRING 
1433: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1434: LD_ADDR_OWVAR 31
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: LD_INT 0
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1457: LD_ADDR_OWVAR 29
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 10
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1472: CALL_OW 44
1476: PPUSH
1477: LD_INT 16
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ;
1487: GO 1407
1489: POP
1490: POP
// end ;
1491: LD_VAR 0 1
1495: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
// if exist_mode then
1500: LD_VAR 0 2
1504: IFFALSE 1523
// begin unit := CreateCharacter ( ident ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 1
1515: PPUSH
1516: CALL_OW 34
1520: ST_TO_ADDR
// end else
1521: GO 1538
// begin unit := NewCharacter ( ident ) ;
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 25
1537: ST_TO_ADDR
// end ; result := unit ;
1538: LD_ADDR_VAR 0 3
1542: PUSH
1543: LD_VAR 0 4
1547: ST_TO_ADDR
// end ;
1548: LD_VAR 0 3
1552: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
// for i in charactersList do
1557: LD_ADDR_VAR 0 4
1561: PUSH
1562: LD_VAR 0 1
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1586
// SaveCharacters ( i , ident ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 38
1584: GO 1567
1586: POP
1587: POP
// end ;
1588: LD_VAR 0 3
1592: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1593: LD_INT 0
1595: PPUSH
1596: PPUSH
1597: PPUSH
1598: PPUSH
// for i = 1 to count do
1599: LD_ADDR_VAR 0 8
1603: PUSH
1604: DOUBLE
1605: LD_INT 1
1607: DEC
1608: ST_TO_ADDR
1609: LD_VAR 0 6
1613: PUSH
1614: FOR_TO
1615: IFFALSE 1696
// begin uc_side = side ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_VAR 0 1
1626: ST_TO_ADDR
// uc_nation = nation ;
1627: LD_ADDR_OWVAR 21
1631: PUSH
1632: LD_VAR 0 2
1636: ST_TO_ADDR
// hc_gallery =  ;
1637: LD_ADDR_OWVAR 33
1641: PUSH
1642: LD_STRING 
1644: ST_TO_ADDR
// hc_name =  ;
1645: LD_ADDR_OWVAR 26
1649: PUSH
1650: LD_STRING 
1652: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1653: LD_INT 0
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: CALL_OW 380
// un = CreateHuman ;
1670: LD_ADDR_VAR 0 10
1674: PUSH
1675: CALL_OW 44
1679: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1680: LD_VAR 0 10
1684: PPUSH
1685: LD_VAR 0 3
1689: PPUSH
1690: CALL_OW 52
// end ;
1694: GO 1614
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 7
1702: RET
// export function PrepareDifficulty ; begin
1703: LD_INT 0
1705: PPUSH
// if difficulty = 1 then
1706: LD_OWVAR 67
1710: PUSH
1711: LD_INT 1
1713: EQUAL
1714: IFFALSE 1794
// begin SetTech ( 57 , 3 , state_disabled ) ;
1716: LD_INT 57
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1729: LD_INT 58
1731: PPUSH
1732: LD_INT 3
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1742: LD_INT 59
1744: PPUSH
1745: LD_INT 3
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1755: LD_INT 51
1757: PPUSH
1758: LD_INT 3
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1768: LD_INT 52
1770: PPUSH
1771: LD_INT 3
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1781: LD_INT 53
1783: PPUSH
1784: LD_INT 3
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 322
// end ; if difficulty = 2 then
1794: LD_OWVAR 67
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1882
// begin SetTech ( 57 , 3 , state_enabled ) ;
1804: LD_INT 57
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1817: LD_INT 58
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1830: LD_INT 59
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1843: LD_INT 51
1845: PPUSH
1846: LD_INT 3
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1856: LD_INT 52
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1869: LD_INT 53
1871: PPUSH
1872: LD_INT 3
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 322
// end ; if difficulty = 3 then
1882: LD_OWVAR 67
1886: PUSH
1887: LD_INT 3
1889: EQUAL
1890: IFFALSE 1970
// begin SetTech ( 57 , 3 , state_enabled ) ;
1892: LD_INT 57
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1905: LD_INT 58
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1918: LD_INT 59
1920: PPUSH
1921: LD_INT 3
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1931: LD_INT 51
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1944: LD_INT 52
1946: PPUSH
1947: LD_INT 3
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1957: LD_INT 53
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 322
// end ; end ;
1970: LD_VAR 0 1
1974: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1982: LD_ADDR_VAR 0 8
1986: PUSH
1987: LD_INT 48
1989: PUSH
1990: LD_INT 49
1992: PUSH
1993: LD_INT 50
1995: PUSH
1996: LD_INT 20
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 69
2004: PUSH
2005: LD_INT 39
2007: PUSH
2008: LD_INT 34
2010: PUSH
2011: LD_INT 40
2013: PUSH
2014: LD_INT 71
2016: PUSH
2017: LD_INT 57
2019: PUSH
2020: LD_INT 58
2022: PUSH
2023: LD_INT 44
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: LD_INT 27
2031: PUSH
2032: LD_INT 23
2034: PUSH
2035: LD_INT 33
2037: PUSH
2038: LD_INT 54
2040: PUSH
2041: LD_INT 55
2043: PUSH
2044: LD_INT 56
2046: PUSH
2047: LD_INT 63
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: LD_INT 65
2055: PUSH
2056: LD_INT 30
2058: PUSH
2059: LD_INT 31
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 25
2070: PUSH
2071: LD_INT 51
2073: PUSH
2074: LD_INT 52
2076: PUSH
2077: LD_INT 59
2079: PUSH
2080: LD_INT 53
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2117: LD_ADDR_VAR 0 5
2121: PUSH
2122: DOUBLE
2123: LD_INT 1
2125: DEC
2126: ST_TO_ADDR
2127: LD_VAR 0 8
2131: PUSH
2132: FOR_TO
2133: IFFALSE 2209
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2135: LD_VAR 0 8
2139: PUSH
2140: LD_VAR 0 5
2144: ARRAY
2145: PPUSH
2146: LD_VAR 0 1
2150: PPUSH
2151: CALL_OW 321
2155: PUSH
2156: LD_INT 1
2158: EQUAL
2159: PUSH
2160: LD_VAR 0 8
2164: PUSH
2165: LD_VAR 0 5
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 3
2175: PPUSH
2176: CALL_OW 482
2180: PUSH
2181: LD_INT 1
2183: EQUAL
2184: AND
2185: IFFALSE 2207
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 8
2196: PUSH
2197: LD_VAR 0 5
2201: ARRAY
2202: PPUSH
2203: CALL_OW 184
2207: GO 2132
2209: POP
2210: POP
// end ;
2211: LD_VAR 0 4
2215: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2216: LD_INT 0
2218: PPUSH
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_VAR 0 2
2233: PPUSH
2234: CALL_OW 313
2238: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 24
2273: PUSH
2274: LD_INT 750
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 54
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 70
2304: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 3
2314: PPUSH
2315: LD_INT 22
2317: PUSH
2318: LD_VAR 0 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 21
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 24
2342: PUSH
2343: LD_INT 1000
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: PPUSH
2362: CALL_OW 70
2366: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2367: LD_VAR 0 6
2371: NOT
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_VAR 0 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 2
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 24
2397: PUSH
2398: LD_INT 250
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PPUSH
2410: CALL_OW 69
2414: NOT
2415: AND
2416: IFFALSE 2420
// exit ;
2418: GO 2602
// if buildings_list > 0 and engineerOkInside then
2420: LD_VAR 0 6
2424: PUSH
2425: LD_INT 0
2427: GREATER
2428: PUSH
2429: LD_VAR 0 8
2433: AND
2434: IFFALSE 2445
// ComExitBuilding ( engineerOkInside ) ;
2436: LD_VAR 0 8
2440: PPUSH
2441: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2445: LD_VAR 0 6
2449: PUSH
2450: LD_INT 0
2452: GREATER
2453: PUSH
2454: LD_VAR 0 9
2458: PUSH
2459: LD_INT 0
2461: GREATER
2462: AND
2463: IFFALSE 2483
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2465: LD_VAR 0 9
2469: PPUSH
2470: LD_VAR 0 6
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2483: LD_VAR 0 6
2487: PUSH
2488: LD_INT 0
2490: EQUAL
2491: PUSH
2492: LD_VAR 0 4
2496: PUSH
2497: LD_INT 0
2499: EQUAL
2500: AND
2501: PUSH
2502: LD_VAR 0 9
2506: PUSH
2507: LD_INT 0
2509: GREATER
2510: AND
2511: IFFALSE 2527
// ComEnterUnit ( engineerOkOutside , building ) ;
2513: LD_VAR 0 9
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2527: LD_VAR 0 9
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_VAR 0 6
2540: PUSH
2541: LD_INT 0
2543: EQUAL
2544: AND
2545: PUSH
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 0
2553: GREATER
2554: AND
2555: IFFALSE 2602
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2557: LD_VAR 0 9
2561: PPUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 3
2587: ARRAY
2588: PPUSH
2589: LD_VAR 0 4
2593: PUSH
2594: LD_INT 4
2596: ARRAY
2597: PPUSH
2598: CALL_OW 145
// end ;
2602: LD_VAR 0 5
2606: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2607: LD_INT 0
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2618: LD_ADDR_VAR 0 6
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 4
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 23
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 24
2657: PUSH
2658: LD_INT 251
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2676: LD_ADDR_VAR 0 7
2680: PUSH
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 23
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 25
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 50
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 70
2734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2735: LD_ADDR_VAR 0 10
2739: PUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 22
2747: PUSH
2748: LD_VAR 0 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 21
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 25
2772: PUSH
2773: LD_INT 3
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 24
2789: PUSH
2790: LD_INT 750
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 70
2811: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2812: LD_ADDR_VAR 0 11
2816: PUSH
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 22
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 21
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 3
2846: PUSH
2847: LD_INT 25
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 24
2866: PUSH
2867: LD_INT 1000
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PPUSH
2884: CALL_OW 70
2888: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2889: LD_VAR 0 10
2893: NOT
2894: PUSH
2895: LD_VAR 0 11
2899: NOT
2900: AND
2901: PUSH
2902: LD_VAR 0 6
2906: NOT
2907: AND
2908: IFFALSE 2912
// exit ;
2910: GO 3146
// if damageUnits > 0 and sci_list > 0 then
2912: LD_VAR 0 10
2916: PUSH
2917: LD_INT 0
2919: GREATER
2920: PUSH
2921: LD_VAR 0 6
2925: PUSH
2926: LD_INT 0
2928: GREATER
2929: AND
2930: IFFALSE 2946
// ComMoveToArea ( damageUnits , healArea ) ;
2932: LD_VAR 0 10
2936: PPUSH
2937: LD_VAR 0 2
2941: PPUSH
2942: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2946: LD_VAR 0 11
2950: PUSH
2951: LD_INT 0
2953: GREATER
2954: PUSH
2955: LD_VAR 0 6
2959: PUSH
2960: LD_INT 0
2962: GREATER
2963: AND
2964: IFFALSE 2975
// ComExitBuilding ( sci_list ) ;
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2975: LD_VAR 0 11
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: PUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 0
2991: GREATER
2992: AND
2993: IFFALSE 3013
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2995: LD_VAR 0 7
2999: PPUSH
3000: LD_VAR 0 11
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3013: LD_VAR 0 10
3017: PUSH
3018: LD_INT 0
3020: EQUAL
3021: PUSH
3022: LD_VAR 0 11
3026: PUSH
3027: LD_INT 0
3029: EQUAL
3030: AND
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: LD_INT 0
3039: GREATER
3040: AND
3041: IFFALSE 3146
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3043: LD_ADDR_VAR 0 12
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_VAR 0 1
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 30
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3090: LD_ADDR_VAR 0 13
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 12
3102: PPUSH
3103: CALL_OW 12
3107: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3108: LD_VAR 0 7
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 60
3118: PUSH
3119: EMPTY
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 72
3130: PPUSH
3131: LD_VAR 0 12
3135: PUSH
3136: LD_VAR 0 13
3140: ARRAY
3141: PPUSH
3142: CALL_OW 120
// end ; end ;
3146: LD_VAR 0 5
3150: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// tmpTab = [ ] ;
3157: LD_ADDR_VAR 0 6
3161: PUSH
3162: EMPTY
3163: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3164: LD_INT 22
3166: PUSH
3167: LD_VAR 0 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 30
3178: PUSH
3179: LD_INT 32
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: PUSH
3195: LD_INT 0
3197: GREATER
3198: IFFALSE 3281
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_VAR 0 1
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 30
3219: PUSH
3220: LD_INT 32
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PPUSH
3231: CALL_OW 69
3235: PUSH
3236: FOR_IN
3237: IFFALSE 3279
// begin for j in UnitsInside ( i ) do
3239: LD_ADDR_VAR 0 5
3243: PUSH
3244: LD_VAR 0 4
3248: PPUSH
3249: CALL_OW 313
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3275
// tmpTab = tmpTab ^ j ;
3257: LD_ADDR_VAR 0 6
3261: PUSH
3262: LD_VAR 0 6
3266: PUSH
3267: LD_VAR 0 5
3271: ADD
3272: ST_TO_ADDR
3273: GO 3254
3275: POP
3276: POP
// end ;
3277: GO 3236
3279: POP
3280: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3281: LD_VAR 0 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL_OW 250
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: CALL_OW 251
3305: PPUSH
3306: CALL_OW 114
// end ;
3310: LD_VAR 0 3
3314: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3315: LD_INT 0
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// enable ;
3321: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3322: LD_ADDR_VAR 0 7
3326: PUSH
3327: LD_VAR 0 3
3331: PPUSH
3332: CALL_OW 435
3336: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_VAR 0 1
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 34
3356: PUSH
3357: LD_VAR 0 2
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3375: LD_VAR 0 6
3379: PUSH
3380: LD_INT 0
3382: GREATER
3383: PUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 435
3393: AND
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_INT 0
3402: GREATER
3403: AND
3404: IFFALSE 3453
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3406: LD_VAR 0 6
3410: PUSH
3411: LD_INT 1
3413: ARRAY
3414: PPUSH
3415: LD_VAR 0 7
3419: PUSH
3420: LD_INT 1
3422: ARRAY
3423: PPUSH
3424: LD_VAR 0 7
3428: PUSH
3429: LD_INT 2
3431: ARRAY
3432: PPUSH
3433: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3437: LD_VAR 0 6
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 100
3448: PPUSH
3449: CALL_OW 240
// end ; end ;
3453: LD_VAR 0 4
3457: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_VAR 0 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 31
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 32
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 30
3507: PUSH
3508: LD_INT 33
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 30
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3552: LD_ADDR_VAR 0 7
3556: PUSH
3557: LD_INT 22
3559: PUSH
3560: LD_VAR 0 2
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 21
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 58
3581: PUSH
3582: EMPTY
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3595: LD_VAR 0 6
3599: PUSH
3600: LD_INT 0
3602: GREATER
3603: PUSH
3604: LD_VAR 0 7
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: AND
3613: IFFALSE 3683
// begin for i in turretsList do
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_VAR 0 6
3624: PUSH
3625: FOR_IN
3626: IFFALSE 3681
// begin for j in enemyBuildings do
3628: LD_ADDR_VAR 0 5
3632: PUSH
3633: LD_VAR 0 7
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3677
// begin if GetDistUnits ( i , j ) < 20 then
3641: LD_VAR 0 4
3645: PPUSH
3646: LD_VAR 0 5
3650: PPUSH
3651: CALL_OW 296
3655: PUSH
3656: LD_INT 20
3658: LESS
3659: IFFALSE 3675
// begin ComAttackUnit ( i , j ) ;
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: CALL_OW 115
// end ; end ;
3675: GO 3638
3677: POP
3678: POP
// end ;
3679: GO 3625
3681: POP
3682: POP
// end ; end ;
3683: LD_VAR 0 3
3687: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
// for i = 1 to vehCount do
3692: LD_ADDR_VAR 0 9
3696: PUSH
3697: DOUBLE
3698: LD_INT 1
3700: DEC
3701: ST_TO_ADDR
3702: LD_VAR 0 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3755
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: LD_VAR 0 5
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: LD_VAR 0 4
3734: PUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_VAR 0 4
3742: PPUSH
3743: CALL_OW 12
3747: ARRAY
3748: PPUSH
3749: CALL_OW 185
3753: GO 3707
3755: POP
3756: POP
// end ;
3757: LD_VAR 0 8
3761: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3762: LD_INT 0
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
3770: PPUSH
// if russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
3771: LD_EXP 11
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: GREATEREQUAL
3796: PUSH
3797: LD_EXP 12
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_OWVAR 67
3820: ARRAY
3821: GREATEREQUAL
3822: AND
3823: IFFALSE 4191
// begin if IsOk ( ruTeleport ) then
3825: LD_INT 116
3827: PPUSH
3828: CALL_OW 302
3832: IFFALSE 3884
// begin for j in russianTanks do
3834: LD_ADDR_VAR 0 4
3838: PUSH
3839: LD_EXP 11
3843: PUSH
3844: FOR_IN
3845: IFFALSE 3875
// if j mod 3 = 0 then
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 3
3854: MOD
3855: PUSH
3856: LD_INT 0
3858: EQUAL
3859: IFFALSE 3873
// ComEnterUnit ( j , ruTeleport ) ;
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_INT 116
3868: PPUSH
3869: CALL_OW 120
3873: GO 3844
3875: POP
3876: POP
// wait ( 0 0$5 ) ;
3877: LD_INT 175
3879: PPUSH
3880: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// for j in russianTanks do
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 11
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4179
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3904: LD_ADDR_VAR 0 5
3908: PUSH
3909: LD_EXP 12
3913: PPUSH
3914: LD_INT 3
3916: PUSH
3917: LD_INT 60
3919: PUSH
3920: EMPTY
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 72
3931: ST_TO_ADDR
// if tmp then
3932: LD_VAR 0 5
3936: IFFALSE 3952
// ComMoveUnit ( tmp , j ) ;
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_VAR 0 4
3947: PPUSH
3948: CALL_OW 112
// if GetSide ( j ) <> side then
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL_OW 255
3961: PUSH
3962: LD_VAR 0 1
3966: NONEQUAL
3967: IFFALSE 3980
// begin ComStop ( j ) ;
3969: LD_VAR 0 4
3973: PPUSH
3974: CALL_OW 141
// continue ;
3978: GO 3901
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3980: LD_ADDR_VAR 0 7
3984: PUSH
3985: LD_INT 81
3987: PUSH
3988: LD_VAR 0 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 101
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: PPUSH
4016: LD_VAR 0 4
4020: PPUSH
4021: CALL_OW 74
4025: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: LD_INT 81
4033: PUSH
4034: LD_VAR 0 1
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 101
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 59
4058: PUSH
4059: EMPTY
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PPUSH
4101: LD_VAR 0 4
4105: PPUSH
4106: CALL_OW 74
4110: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 7
4120: PPUSH
4121: CALL_OW 296
4125: PUSH
4126: LD_INT 8
4128: PLUS
4129: PUSH
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_VAR 0 8
4139: PPUSH
4140: CALL_OW 296
4144: LESS
4145: IFFALSE 4163
// ComAttackUnit ( j , target1 ) else
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_VAR 0 7
4156: PPUSH
4157: CALL_OW 115
4161: GO 4177
// ComAttackUnit ( j , target2 ) ;
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 8
4172: PPUSH
4173: CALL_OW 115
// end ;
4177: GO 3901
4179: POP
4180: POP
// until russianTanks = 0 ;
4181: LD_EXP 11
4185: PUSH
4186: LD_INT 0
4188: EQUAL
4189: IFFALSE 3884
// end ; end ;
4191: LD_VAR 0 2
4195: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
4200: PPUSH
4201: PPUSH
4202: PPUSH
4203: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4204: LD_ADDR_VAR 0 6
4208: PUSH
4209: LD_INT 22
4211: PUSH
4212: LD_VAR 0 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 9
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4240: LD_ADDR_VAR 0 7
4244: PUSH
4245: LD_INT 81
4247: PUSH
4248: LD_VAR 0 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 3
4259: PUSH
4260: LD_INT 21
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PPUSH
4278: CALL_OW 69
4282: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: CALL_OW 12
4298: ST_TO_ADDR
// for i = 1 to list do
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: DOUBLE
4305: LD_INT 1
4307: DEC
4308: ST_TO_ADDR
4309: LD_VAR 0 6
4313: PUSH
4314: FOR_TO
4315: IFFALSE 4517
// for ta in filter do
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_VAR 0 7
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4513
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4330: LD_VAR 0 6
4334: PUSH
4335: LD_VAR 0 5
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 296
4350: PUSH
4351: LD_INT 15
4353: LESSEQUAL
4354: IFFALSE 4511
// begin case c of 1 :
4356: LD_VAR 0 4
4360: PUSH
4361: LD_INT 1
4363: DOUBLE
4364: EQUAL
4365: IFTRUE 4369
4367: GO 4407
4369: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4370: LD_VAR 0 6
4374: PUSH
4375: LD_VAR 0 5
4379: ARRAY
4380: PPUSH
4381: LD_VAR 0 3
4385: PPUSH
4386: CALL_OW 250
4390: PPUSH
4391: LD_VAR 0 3
4395: PPUSH
4396: CALL_OW 251
4400: PPUSH
4401: CALL_OW 154
4405: GO 4511
4407: LD_INT 2
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4479
4415: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4416: LD_VAR 0 6
4420: PUSH
4421: LD_VAR 0 5
4425: ARRAY
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 250
4436: PUSH
4437: LD_INT 1
4439: NEG
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: CALL_OW 12
4448: PLUS
4449: PPUSH
4450: LD_VAR 0 3
4454: PPUSH
4455: CALL_OW 251
4459: PUSH
4460: LD_INT 1
4462: NEG
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: CALL_OW 12
4471: PLUS
4472: PPUSH
4473: CALL_OW 153
4477: GO 4511
4479: LD_INT 3
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4510
4487: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4488: LD_VAR 0 6
4492: PUSH
4493: LD_VAR 0 5
4497: ARRAY
4498: PPUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: CALL_OW 115
4508: GO 4511
4510: POP
// end ; end ;
4511: GO 4327
4513: POP
4514: POP
4515: GO 4314
4517: POP
4518: POP
// end ;
4519: LD_VAR 0 2
4523: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4524: LD_INT 0
4526: PPUSH
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 2
4541: PPUSH
4542: LD_INT 22
4544: PUSH
4545: LD_VAR 0 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 21
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 52
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 70
4583: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4584: LD_ADDR_VAR 0 8
4588: PUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_INT 22
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 3
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: LD_INT 24
4621: PUSH
4622: LD_INT 1000
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: PPUSH
4641: CALL_OW 70
4645: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4646: LD_VAR 0 8
4650: PUSH
4651: LD_INT 0
4653: GREATER
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 750
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PPUSH
4670: CALL_OW 72
4674: PUSH
4675: LD_INT 0
4677: GREATER
4678: AND
4679: IFFALSE 4699
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4681: LD_VAR 0 7
4685: PPUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_INT 1
4693: ARRAY
4694: PPUSH
4695: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4699: LD_VAR 0 7
4703: PUSH
4704: LD_INT 0
4706: GREATER
4707: PUSH
4708: LD_VAR 0 8
4712: PUSH
4713: LD_INT 0
4715: EQUAL
4716: AND
4717: PUSH
4718: LD_EXP 10
4722: PUSH
4723: LD_INT 0
4725: GREATER
4726: AND
4727: IFFALSE 4774
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4729: LD_VAR 0 7
4733: PPUSH
4734: LD_EXP 10
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: LD_EXP 10
4747: PUSH
4748: LD_INT 2
4750: ARRAY
4751: PPUSH
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 3
4759: ARRAY
4760: PPUSH
4761: LD_EXP 10
4765: PUSH
4766: LD_INT 4
4768: ARRAY
4769: PPUSH
4770: CALL_OW 567
// end ; end_of_file
4774: LD_VAR 0 3
4778: RET
// every 0 0$1 do
4779: GO 4781
4781: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4782: LD_INT 3
4784: PPUSH
4785: LD_INT 14
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: CALL 1975 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 15
4800: PPUSH
4801: LD_INT 3
4803: PPUSH
4804: CALL 1975 0 3
// end ;
4808: END
// every 0 0$1 trigger russianAI = 1 do
4809: LD_EXP 13
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4923
4819: GO 4821
4821: DISABLE
// begin enable ;
4822: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PPUSH
4829: LD_INT 7
4831: PPUSH
4832: LD_EXP 10
4836: PPUSH
4837: CALL 2216 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4841: LD_INT 3
4843: PPUSH
4844: LD_INT 8
4846: PPUSH
4847: LD_INT 7
4849: PPUSH
4850: LD_INT 14
4852: PUSH
4853: LD_INT 15
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 1
4862: PPUSH
4863: LD_INT 2
4865: PPUSH
4866: CALL_OW 12
4870: ARRAY
4871: PPUSH
4872: CALL 2607 0 4
// AttackVehicles ( 3 ) ;
4876: LD_INT 3
4878: PPUSH
4879: CALL 3762 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4883: LD_INT 3
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 3458 0 2
// IntBazooka ( 3 ) ;
4893: LD_INT 3
4895: PPUSH
4896: CALL 4196 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 51
4905: PPUSH
4906: LD_INT 14
4908: PPUSH
4909: CALL 3315 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4913: LD_INT 3
4915: PPUSH
4916: LD_INT 7
4918: PPUSH
4919: CALL 4524 0 2
// end ;
4923: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4924: LD_INT 22
4926: PPUSH
4927: CALL_OW 303
4931: PUSH
4932: LD_INT 22
4934: PPUSH
4935: CALL_OW 255
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: OR
4944: IFFALSE 4959
4946: GO 4948
4948: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4949: LD_INT 3
4951: PPUSH
4952: LD_INT 22
4954: PPUSH
4955: CALL 3151 0 2
4959: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4960: LD_EXP 13
4964: PUSH
4965: LD_INT 1
4967: EQUAL
4968: PUSH
4969: LD_INT 22
4971: PUSH
4972: LD_INT 3
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 21
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 50
4991: PUSH
4992: EMPTY
4993: LIST
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 34
5010: PUSH
5011: LD_INT 46
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 34
5020: PUSH
5021: LD_INT 45
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 34
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 34
5040: PUSH
5041: LD_INT 49
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 34
5050: PUSH
5051: LD_INT 47
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: PUSH
5078: LD_INT 3
5080: LESS
5081: AND
5082: IFFALSE 5269
5084: GO 5086
5086: DISABLE
// begin enable ;
5087: ENABLE
// if russianRocketsAvalaible = 1 then
5088: LD_EXP 14
5092: PUSH
5093: LD_INT 1
5095: EQUAL
5096: IFFALSE 5153
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: LD_OWVAR 67
5122: ARRAY
5123: PPUSH
5124: LD_INT 46
5126: PUSH
5127: LD_INT 45
5129: PUSH
5130: LD_INT 44
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 3
5143: PPUSH
5144: LD_INT 24
5146: PPUSH
5147: CALL 3688 0 7
5151: GO 5210
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5153: LD_INT 3
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: LD_INT 3
5161: PUSH
5162: LD_INT 4
5164: PUSH
5165: LD_INT 5
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: LD_INT 46
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: LD_INT 44
5187: PUSH
5188: LD_INT 47
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: LD_INT 3
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: LD_INT 24
5205: PPUSH
5206: CALL 3688 0 7
// if russianTimeLapsers = 0 then
5210: LD_EXP 12
5214: PUSH
5215: LD_INT 0
5217: EQUAL
5218: IFFALSE 5269
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5220: LD_INT 3
5222: PPUSH
5223: LD_INT 40
5225: PPUSH
5226: LD_INT 1
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 3
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: PPUSH
5246: LD_INT 49
5248: PUSH
5249: LD_INT 49
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PPUSH
5256: LD_INT 3
5258: PPUSH
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 24
5264: PPUSH
5265: CALL 3688 0 7
// end ;
5269: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5270: LD_EXP 18
5274: PUSH
5275: LD_INT 22
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 58
5297: PUSH
5298: EMPTY
5299: LIST
5300: PUSH
5301: LD_INT 33
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 91
5313: PUSH
5314: LD_EXP 18
5318: PUSH
5319: LD_INT 45
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 69
5338: AND
5339: IFFALSE 5443
5341: GO 5343
5343: DISABLE
// begin wait ( 0 0$5 ) ;
5344: LD_INT 175
5346: PPUSH
5347: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5351: LD_EXP 18
5355: PPUSH
5356: LD_INT 22
5358: PUSH
5359: LD_INT 1
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 2
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 58
5378: PUSH
5379: EMPTY
5380: LIST
5381: PUSH
5382: LD_INT 33
5384: PUSH
5385: LD_INT 1
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 91
5394: PUSH
5395: LD_EXP 18
5399: PUSH
5400: LD_INT 45
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: PPUSH
5415: CALL_OW 69
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5428: LD_EXP 18
5432: PPUSH
5433: LD_INT 127
5435: PPUSH
5436: LD_INT 63
5438: PPUSH
5439: CALL_OW 171
// end ; end_of_file
5443: END
// every 1 do var dec1 , dec2 ;
5444: GO 5446
5446: DISABLE
5447: LD_INT 0
5449: PPUSH
5450: PPUSH
// begin InGameOn ;
5451: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5455: LD_INT 48
5457: PPUSH
5458: LD_STRING deltakappa
5460: PPUSH
5461: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5465: LD_INT 95
5467: PPUSH
5468: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5472: LD_INT 95
5474: PPUSH
5475: LD_INT 30
5477: PPUSH
5478: LD_INT 11
5480: PPUSH
5481: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5485: LD_INT 30
5487: PPUSH
5488: LD_INT 11
5490: PPUSH
5491: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5495: LD_EXP 5
5499: PPUSH
5500: LD_STRING D1-Pow-1
5502: PPUSH
5503: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5507: LD_EXP 1
5511: PPUSH
5512: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5516: LD_EXP 1
5520: PPUSH
5521: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_STRING D1-JMM-1
5532: PPUSH
5533: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5537: LD_EXP 5
5541: PPUSH
5542: LD_STRING D1-Pow-2
5544: PPUSH
5545: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5549: LD_EXP 1
5553: PPUSH
5554: LD_STRING D1-JMM-2
5556: PPUSH
5557: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5561: LD_EXP 1
5565: PPUSH
5566: LD_INT 95
5568: PPUSH
5569: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5573: LD_STRING M1
5575: PPUSH
5576: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5580: LD_INT 35
5582: PPUSH
5583: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_INT 95
5594: PPUSH
5595: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5599: LD_INT 95
5601: PPUSH
5602: LD_INT 51
5604: PPUSH
5605: LD_INT 21
5607: PPUSH
5608: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5612: LD_INT 95
5614: PPUSH
5615: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5619: LD_INT 95
5621: PPUSH
5622: LD_INT 5
5624: PPUSH
5625: CALL_OW 308
5629: IFFALSE 5580
// if JMMGirl = 1 then
5631: LD_EXP 7
5635: PUSH
5636: LD_INT 1
5638: EQUAL
5639: IFFALSE 5952
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5641: LD_EXP 2
5645: PPUSH
5646: LD_STRING D2J-Joan-1
5648: PPUSH
5649: CALL_OW 94
// dec1 = query ( Q1 ) ;
5653: LD_ADDR_VAR 0 1
5657: PUSH
5658: LD_STRING Q1
5660: PPUSH
5661: CALL_OW 97
5665: ST_TO_ADDR
// if dec1 = 1 then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_INT 1
5673: EQUAL
5674: IFFALSE 5928
// begin ComExitVehicle ( JMM ) ;
5676: LD_EXP 1
5680: PPUSH
5681: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2J-JMM-1
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5697: LD_EXP 2
5701: PPUSH
5702: LD_STRING D2J-Joan-2
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2J-JMM-2
5716: PPUSH
5717: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5721: LD_EXP 2
5725: PPUSH
5726: LD_STRING D2J-Joan-3
5728: PPUSH
5729: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5733: LD_EXP 5
5737: PPUSH
5738: LD_STRING DPowell-Pow-1
5740: PPUSH
5741: CALL_OW 94
// dec2 = query ( Q2J ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_STRING Q2J
5752: PPUSH
5753: CALL_OW 97
5757: ST_TO_ADDR
// if dec2 = 1 then
5758: LD_VAR 0 2
5762: PUSH
5763: LD_INT 1
5765: EQUAL
5766: IFFALSE 5808
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING D2Ja-JMM-1
5775: PPUSH
5776: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5780: LD_EXP 2
5784: PPUSH
5785: LD_STRING D2Ja-Joan-1
5787: PPUSH
5788: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5792: LD_EXP 1
5796: PPUSH
5797: LD_STRING D2Ja-JMM-2
5799: PPUSH
5800: CALL_OW 88
// InGameOff ;
5804: CALL_OW 9
// end ; if dec2 = 2 then
5808: LD_VAR 0 2
5812: PUSH
5813: LD_INT 2
5815: EQUAL
5816: IFFALSE 5892
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5818: LD_EXP 1
5822: PPUSH
5823: LD_STRING D2Jb-JMM-1
5825: PPUSH
5826: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5830: LD_EXP 2
5834: PPUSH
5835: LD_STRING D2Jb-Joan-1
5837: PPUSH
5838: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D2Jb-JMM-2
5849: PPUSH
5850: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5854: LD_EXP 2
5858: PPUSH
5859: LD_STRING D2Jb-Joan-2
5861: PPUSH
5862: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D2Jb-JMM-3
5873: PPUSH
5874: CALL_OW 88
// fastEnd = 1 ;
5878: LD_ADDR_EXP 15
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// FinishMission ;
5886: CALL 9826 0 0
// exit ;
5890: GO 6522
// end ; if dec2 = 3 then
5892: LD_VAR 0 2
5896: PUSH
5897: LD_INT 3
5899: EQUAL
5900: IFFALSE 5928
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5902: LD_EXP 2
5906: PPUSH
5907: LD_STRING D2Jc-Joan-1
5909: PPUSH
5910: CALL_OW 94
// fastEnd = 1 ;
5914: LD_ADDR_EXP 15
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// FinishMission ;
5922: CALL 9826 0 0
// exit ;
5926: GO 6522
// end ; end ; if dec1 = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 2
5935: EQUAL
5936: IFFALSE 5952
// begin fastEnd = 1 ;
5938: LD_ADDR_EXP 15
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// FinishMission ;
5946: CALL 9826 0 0
// exit ;
5950: GO 6522
// end ; end ; if JMMGirl = 2 then
5952: LD_EXP 7
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6285
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5962: LD_EXP 3
5966: PPUSH
5967: LD_STRING D2L-Lisa-1
5969: PPUSH
5970: CALL_OW 94
// dec1 = query ( Q1 ) ;
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_STRING Q1
5981: PPUSH
5982: CALL_OW 97
5986: ST_TO_ADDR
// if dec1 = 1 then
5987: LD_VAR 0 1
5991: PUSH
5992: LD_INT 1
5994: EQUAL
5995: IFFALSE 6261
// begin ComExitVehicle ( JMM ) ;
5997: LD_EXP 1
6001: PPUSH
6002: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6006: LD_EXP 1
6010: PPUSH
6011: LD_STRING D2L-JMM-1
6013: PPUSH
6014: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6018: LD_EXP 3
6022: PPUSH
6023: LD_STRING D2L-Lisa-2
6025: PPUSH
6026: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6030: LD_EXP 1
6034: PPUSH
6035: LD_STRING D2L-JMM-2
6037: PPUSH
6038: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6042: LD_EXP 3
6046: PPUSH
6047: LD_STRING D2L-Lisa-3
6049: PPUSH
6050: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6054: LD_EXP 5
6058: PPUSH
6059: LD_STRING DPowell-Pow-1
6061: PPUSH
6062: CALL_OW 94
// dec2 = query ( Q2L ) ;
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_STRING Q2L
6073: PPUSH
6074: CALL_OW 97
6078: ST_TO_ADDR
// if dec2 = 1 then
6079: LD_VAR 0 2
6083: PUSH
6084: LD_INT 1
6086: EQUAL
6087: IFFALSE 6153
// begin Say ( JMM , D2La-JMM-1 ) ;
6089: LD_EXP 1
6093: PPUSH
6094: LD_STRING D2La-JMM-1
6096: PPUSH
6097: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6101: LD_EXP 3
6105: PPUSH
6106: LD_STRING D2La-Lisa-1
6108: PPUSH
6109: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6113: LD_EXP 1
6117: PPUSH
6118: LD_STRING D2La-JMM-2
6120: PPUSH
6121: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6125: LD_EXP 3
6129: PPUSH
6130: LD_STRING D2La-Lisa-2
6132: PPUSH
6133: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D2La-JMM-3
6144: PPUSH
6145: CALL_OW 88
// InGameOff ;
6149: CALL_OW 9
// end ; if dec2 = 2 then
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 2
6160: EQUAL
6161: IFFALSE 6225
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6163: LD_EXP 1
6167: PPUSH
6168: LD_STRING D2Lb-JMM-1
6170: PPUSH
6171: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6175: LD_EXP 3
6179: PPUSH
6180: LD_STRING D2Lb-Lisa-1
6182: PPUSH
6183: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6187: LD_EXP 1
6191: PPUSH
6192: LD_STRING D2Lb-JMM-2
6194: PPUSH
6195: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6199: LD_EXP 3
6203: PPUSH
6204: LD_STRING D2Lb-Lisa-2
6206: PPUSH
6207: CALL_OW 94
// fastEnd = 1 ;
6211: LD_ADDR_EXP 15
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// FinishMission ;
6219: CALL 9826 0 0
// exit ;
6223: GO 6522
// end ; if dec2 = 3 then
6225: LD_VAR 0 2
6229: PUSH
6230: LD_INT 3
6232: EQUAL
6233: IFFALSE 6261
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6235: LD_EXP 3
6239: PPUSH
6240: LD_STRING D2Lc-Lisa-1
6242: PPUSH
6243: CALL_OW 94
// fastEnd = 1 ;
6247: LD_ADDR_EXP 15
6251: PUSH
6252: LD_INT 1
6254: ST_TO_ADDR
// FinishMission ;
6255: CALL 9826 0 0
// exit ;
6259: GO 6522
// end ; end ; if dec1 = 2 then
6261: LD_VAR 0 1
6265: PUSH
6266: LD_INT 2
6268: EQUAL
6269: IFFALSE 6285
// begin fastEnd = 1 ;
6271: LD_ADDR_EXP 15
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// FinishMission ;
6279: CALL 9826 0 0
// exit ;
6283: GO 6522
// end ; end ; if JMMGirl = 3 then
6285: LD_EXP 7
6289: PUSH
6290: LD_INT 3
6292: EQUAL
6293: IFFALSE 6522
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6295: LD_EXP 4
6299: PPUSH
6300: LD_STRING D2X-Con-1
6302: PPUSH
6303: CALL_OW 94
// dec1 = query ( Q1 ) ;
6307: LD_ADDR_VAR 0 1
6311: PUSH
6312: LD_STRING Q1
6314: PPUSH
6315: CALL_OW 97
6319: ST_TO_ADDR
// if dec1 = 1 then
6320: LD_VAR 0 1
6324: PUSH
6325: LD_INT 1
6327: EQUAL
6328: IFFALSE 6498
// begin ComExitVehicle ( JMM ) ;
6330: LD_EXP 1
6334: PPUSH
6335: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D2X-JMM-1
6346: PPUSH
6347: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6351: LD_EXP 4
6355: PPUSH
6356: LD_STRING D2X-Con-2
6358: PPUSH
6359: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6363: LD_EXP 5
6367: PPUSH
6368: LD_STRING DPowell-Pow-1
6370: PPUSH
6371: CALL_OW 94
// dec2 = query ( Q2X ) ;
6375: LD_ADDR_VAR 0 2
6379: PUSH
6380: LD_STRING Q2X
6382: PPUSH
6383: CALL_OW 97
6387: ST_TO_ADDR
// if dec2 = 1 then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 1
6395: EQUAL
6396: IFFALSE 6414
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6398: LD_EXP 1
6402: PPUSH
6403: LD_STRING D2Xa-JMM-1
6405: PPUSH
6406: CALL_OW 88
// InGameOff ;
6410: CALL_OW 9
// end ; if dec2 = 2 then
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: EQUAL
6422: IFFALSE 6462
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6424: LD_EXP 1
6428: PPUSH
6429: LD_STRING D2Xb-JMM-1
6431: PPUSH
6432: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_STRING D2Xb-Con-1
6443: PPUSH
6444: CALL_OW 94
// fastEnd = 1 ;
6448: LD_ADDR_EXP 15
6452: PUSH
6453: LD_INT 1
6455: ST_TO_ADDR
// FinishMission ;
6456: CALL 9826 0 0
// exit ;
6460: GO 6522
// end ; if dec2 = 3 then
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 3
6469: EQUAL
6470: IFFALSE 6498
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6472: LD_EXP 4
6476: PPUSH
6477: LD_STRING D2Xc-Con-1
6479: PPUSH
6480: CALL_OW 94
// fastEnd = 1 ;
6484: LD_ADDR_EXP 15
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// FinishMission ;
6492: CALL 9826 0 0
// exit ;
6496: GO 6522
// end ; end ; if dec1 = 2 then
6498: LD_VAR 0 1
6502: PUSH
6503: LD_INT 2
6505: EQUAL
6506: IFFALSE 6522
// begin fastEnd = 1 ;
6508: LD_ADDR_EXP 15
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// FinishMission ;
6516: CALL 9826 0 0
// exit ;
6520: GO 6522
// end ; end ; end ;
6522: PPOPN 2
6524: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6525: LD_EXP 1
6529: PPUSH
6530: LD_INT 6
6532: PPUSH
6533: CALL_OW 308
6537: IFFALSE 7279
6539: GO 6541
6541: DISABLE
// begin InGameOn ;
6542: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6546: LD_INT 35
6548: PPUSH
6549: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6553: LD_EXP 1
6557: PPUSH
6558: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_INT 62
6569: PPUSH
6570: LD_INT 104
6572: PPUSH
6573: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6577: LD_EXP 1
6581: PPUSH
6582: LD_EXP 2
6586: PPUSH
6587: CALL_OW 296
6591: PUSH
6592: LD_INT 4
6594: LESS
6595: PUSH
6596: LD_EXP 1
6600: PPUSH
6601: LD_EXP 3
6605: PPUSH
6606: CALL_OW 296
6610: PUSH
6611: LD_INT 4
6613: LESS
6614: OR
6615: PUSH
6616: LD_EXP 1
6620: PPUSH
6621: LD_EXP 4
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: OR
6635: IFFALSE 6546
// case JMMGirl of 1 :
6637: LD_EXP 7
6641: PUSH
6642: LD_INT 1
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6862
6650: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6651: LD_INT 22
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6673: LD_EXP 2
6677: PPUSH
6678: LD_EXP 1
6682: PPUSH
6683: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6687: LD_EXP 1
6691: PPUSH
6692: LD_EXP 2
6696: PPUSH
6697: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6701: LD_EXP 2
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PPUSH
6715: CALL_OW 87
// wait ( 0 0$1 ) ;
6719: LD_INT 35
6721: PPUSH
6722: CALL_OW 67
// DialogueOn ;
6726: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6730: LD_EXP 2
6734: PPUSH
6735: LD_STRING D3J-Joan-1
6737: PPUSH
6738: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6742: LD_EXP 1
6746: PPUSH
6747: LD_STRING D3J-JMM-1
6749: PPUSH
6750: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6754: LD_EXP 2
6758: PPUSH
6759: LD_STRING D3J-Joan-2
6761: PPUSH
6762: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6766: LD_EXP 1
6770: PPUSH
6771: LD_STRING D3J-JMM-2
6773: PPUSH
6774: CALL_OW 88
// wait ( 0 0$1 ) ;
6778: LD_INT 35
6780: PPUSH
6781: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D4-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D4-Joan-1
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D4-JMM-2
6816: PPUSH
6817: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6821: LD_EXP 2
6825: PPUSH
6826: LD_STRING D4-Joan-2
6828: PPUSH
6829: CALL_OW 88
// DialogueOff ;
6833: CALL_OW 7
// InGameOff ;
6837: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6841: LD_STRING M2J
6843: PPUSH
6844: CALL_OW 337
// SaveForQuickRestart ;
6848: CALL_OW 22
// russianAI = 1 ;
6852: LD_ADDR_EXP 13
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// end ; 2 :
6860: GO 7279
6862: LD_INT 2
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 7082
6870: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6871: LD_INT 22
6873: PUSH
6874: LD_INT 4
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6893: LD_EXP 3
6897: PPUSH
6898: LD_EXP 1
6902: PPUSH
6903: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6907: LD_EXP 1
6911: PPUSH
6912: LD_EXP 3
6916: PPUSH
6917: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6921: LD_EXP 3
6925: PUSH
6926: LD_EXP 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 87
// wait ( 0 0$1 ) ;
6939: LD_INT 35
6941: PPUSH
6942: CALL_OW 67
// DialogueOn ;
6946: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6950: LD_EXP 3
6954: PPUSH
6955: LD_STRING D3L-Lisa-1
6957: PPUSH
6958: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6962: LD_EXP 1
6966: PPUSH
6967: LD_STRING D3L-JMM-1
6969: PPUSH
6970: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6974: LD_EXP 3
6978: PPUSH
6979: LD_STRING D3L-Lisa-2
6981: PPUSH
6982: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6986: LD_EXP 1
6990: PPUSH
6991: LD_STRING D3L-JMM-2
6993: PPUSH
6994: CALL_OW 88
// wait ( 0 0$1 ) ;
6998: LD_INT 35
7000: PPUSH
7001: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D4-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D4-Lisa-1
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D4-JMM-1
7036: PPUSH
7037: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7041: LD_EXP 3
7045: PPUSH
7046: LD_STRING D4-Lisa-2
7048: PPUSH
7049: CALL_OW 88
// DialogueOff ;
7053: CALL_OW 7
// InGameOff ;
7057: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7061: LD_STRING M2L
7063: PPUSH
7064: CALL_OW 337
// SaveForQuickRestart ;
7068: CALL_OW 22
// russianAI = 1 ;
7072: LD_ADDR_EXP 13
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// end ; 3 :
7080: GO 7279
7082: LD_INT 3
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7278
7090: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7091: LD_INT 22
7093: PUSH
7094: LD_INT 4
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7113: LD_EXP 4
7117: PPUSH
7118: LD_EXP 1
7122: PPUSH
7123: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7127: LD_EXP 1
7131: PPUSH
7132: LD_EXP 4
7136: PPUSH
7137: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7141: LD_EXP 2
7145: PUSH
7146: LD_EXP 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PPUSH
7155: CALL_OW 87
// wait ( 0 0$1 ) ;
7159: LD_INT 35
7161: PPUSH
7162: CALL_OW 67
// DialogueOn ;
7166: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7170: LD_EXP 4
7174: PPUSH
7175: LD_STRING D3X-Con-1
7177: PPUSH
7178: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7182: LD_EXP 1
7186: PPUSH
7187: LD_STRING D3J-JMM-1
7189: PPUSH
7190: CALL_OW 88
// wait ( 0 0$1 ) ;
7194: LD_INT 35
7196: PPUSH
7197: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7201: LD_EXP 1
7205: PPUSH
7206: LD_STRING D4-JMM-1
7208: PPUSH
7209: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D4-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D4-JMM-2
7232: PPUSH
7233: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7237: LD_EXP 4
7241: PPUSH
7242: LD_STRING D4-Con-2
7244: PPUSH
7245: CALL_OW 88
// DialogueOff ;
7249: CALL_OW 7
// InGameOff ;
7253: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7257: LD_STRING M2X
7259: PPUSH
7260: CALL_OW 337
// SaveForQuickRestart ;
7264: CALL_OW 22
// russianAI = 1 ;
7268: LD_ADDR_EXP 13
7272: PUSH
7273: LD_INT 1
7275: ST_TO_ADDR
// end ; end ;
7276: GO 7279
7278: POP
// end ;
7279: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7280: LD_INT 32
7282: PPUSH
7283: CALL_OW 306
7287: IFFALSE 7620
7289: GO 7291
7291: DISABLE
// begin case JMMGirl of 1 :
7292: LD_EXP 7
7296: PUSH
7297: LD_INT 1
7299: DOUBLE
7300: EQUAL
7301: IFTRUE 7305
7303: GO 7427
7305: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7306: LD_EXP 1
7310: PPUSH
7311: LD_STRING D6J-JMM-1
7313: PPUSH
7314: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7318: LD_STRING 13f_Denis
7320: PPUSH
7321: CALL_OW 28
7325: PUSH
7326: LD_INT 1
7328: EQUAL
7329: PUSH
7330: LD_STRING 13s_Denis
7332: PPUSH
7333: CALL_OW 28
7337: PUSH
7338: LD_INT 1
7340: EQUAL
7341: OR
7342: IFFALSE 7382
// begin Say ( Joan , D6J-Joan-1 ) ;
7344: LD_EXP 2
7348: PPUSH
7349: LD_STRING D6J-Joan-1
7351: PPUSH
7352: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7356: LD_EXP 1
7360: PPUSH
7361: LD_STRING D6J-JMM-2
7363: PPUSH
7364: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7368: LD_EXP 2
7372: PPUSH
7373: LD_STRING D6J-Joan-2
7375: PPUSH
7376: CALL_OW 88
// end else
7380: GO 7394
// begin Say ( Joan , D6J-Joan-2a ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D6J-Joan-2a
7389: PPUSH
7390: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D6J-JMM-3
7401: PPUSH
7402: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7406: LD_EXP 2
7410: PPUSH
7411: LD_STRING D6J-Joan-3
7413: PPUSH
7414: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7418: LD_STRING M3
7420: PPUSH
7421: CALL_OW 337
// end ; 2 :
7425: GO 7620
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7493
7435: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D6L-JMM-1
7443: PPUSH
7444: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7448: LD_EXP 3
7452: PPUSH
7453: LD_STRING D6L-Lisa-1
7455: PPUSH
7456: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7460: LD_EXP 1
7464: PPUSH
7465: LD_STRING D6L-JMM-2
7467: PPUSH
7468: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7472: LD_EXP 3
7476: PPUSH
7477: LD_STRING D6L-Lisa-2
7479: PPUSH
7480: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7484: LD_STRING M3
7486: PPUSH
7487: CALL_OW 337
// end ; 3 :
7491: GO 7620
7493: LD_INT 3
7495: DOUBLE
7496: EQUAL
7497: IFTRUE 7501
7499: GO 7619
7501: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7502: LD_EXP 1
7506: PPUSH
7507: LD_STRING D6X-JMM-1
7509: PPUSH
7510: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7514: LD_EXP 4
7518: PPUSH
7519: LD_STRING D6X-Con-1
7521: PPUSH
7522: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7526: LD_EXP 1
7530: PPUSH
7531: LD_STRING D6X-JMM-2
7533: PPUSH
7534: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7538: LD_EXP 4
7542: PPUSH
7543: LD_STRING D6X-Con-2
7545: PPUSH
7546: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7550: LD_EXP 1
7554: PPUSH
7555: LD_STRING D6X-JMM-3
7557: PPUSH
7558: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7562: LD_EXP 4
7566: PPUSH
7567: LD_STRING D6X-Con-3
7569: PPUSH
7570: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7574: LD_EXP 1
7578: PPUSH
7579: LD_STRING D6X-JMM-4
7581: PPUSH
7582: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7586: LD_EXP 4
7590: PPUSH
7591: LD_STRING D6X-Con-4
7593: PPUSH
7594: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7598: LD_EXP 1
7602: PPUSH
7603: LD_STRING D6X-JMM-5
7605: PPUSH
7606: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7610: LD_STRING M3
7612: PPUSH
7613: CALL_OW 337
// end ; end ;
7617: GO 7620
7619: POP
// end ;
7620: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7621: LD_INT 22
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 33
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PPUSH
7650: CALL_OW 306
7654: IFFALSE 7800
7656: GO 7658
7658: DISABLE
// begin case JMMGirl of 1 :
7659: LD_EXP 7
7663: PUSH
7664: LD_INT 1
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7709
7672: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D5-JMM-1
7680: PPUSH
7681: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7685: LD_INT 77
7687: PPUSH
7688: LD_INT 87
7690: PPUSH
7691: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7695: LD_EXP 2
7699: PPUSH
7700: LD_STRING D5-Joan-1
7702: PPUSH
7703: CALL_OW 88
// end ; 2 :
7707: GO 7800
7709: LD_INT 2
7711: DOUBLE
7712: EQUAL
7713: IFTRUE 7717
7715: GO 7754
7717: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7718: LD_EXP 1
7722: PPUSH
7723: LD_STRING D5-JMM-1
7725: PPUSH
7726: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7730: LD_INT 77
7732: PPUSH
7733: LD_INT 87
7735: PPUSH
7736: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7740: LD_EXP 3
7744: PPUSH
7745: LD_STRING D5-Lisa-1
7747: PPUSH
7748: CALL_OW 88
// end ; 3 :
7752: GO 7800
7754: LD_INT 3
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7799
7762: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D5-JMM-1
7770: PPUSH
7771: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7775: LD_INT 77
7777: PPUSH
7778: LD_INT 87
7780: PPUSH
7781: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7785: LD_EXP 4
7789: PPUSH
7790: LD_STRING D5-Con-1
7792: PPUSH
7793: CALL_OW 88
// end ; end ;
7797: GO 7800
7799: POP
// end ;
7800: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7801: LD_INT 48
7803: PPUSH
7804: CALL_OW 255
7808: PUSH
7809: LD_INT 1
7811: EQUAL
7812: IFFALSE 7909
7814: GO 7816
7816: DISABLE
// begin DialogueOn ;
7817: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7821: LD_EXP 5
7825: PPUSH
7826: LD_STRING D7-Pow-1
7828: PPUSH
7829: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7833: LD_EXP 1
7837: PPUSH
7838: LD_STRING D7-JMM-1
7840: PPUSH
7841: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7845: LD_EXP 5
7849: PPUSH
7850: LD_STRING D7-Pow-2
7852: PPUSH
7853: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7857: LD_EXP 1
7861: PPUSH
7862: LD_STRING D7-JMM-2
7864: PPUSH
7865: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7869: LD_EXP 5
7873: PPUSH
7874: LD_STRING D7-Pow-3
7876: PPUSH
7877: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7881: LD_EXP 1
7885: PPUSH
7886: LD_STRING D7-JMM-3
7888: PPUSH
7889: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7893: LD_EXP 5
7897: PPUSH
7898: LD_STRING D7-Pow-4
7900: PPUSH
7901: CALL_OW 94
// DialogueOff ;
7905: CALL_OW 7
// end ; end_of_file
7909: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 255
7919: PUSH
7920: LD_INT 3
7922: EQUAL
7923: IFFALSE 7997
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7925: LD_ADDR_EXP 10
7929: PUSH
7930: LD_EXP 10
7934: PPUSH
7935: LD_INT 1
7937: PPUSH
7938: CALL_OW 3
7942: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7943: LD_ADDR_EXP 10
7947: PUSH
7948: LD_EXP 10
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 3
7960: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7961: LD_ADDR_EXP 10
7965: PUSH
7966: LD_EXP 10
7970: PPUSH
7971: LD_INT 1
7973: PPUSH
7974: CALL_OW 3
7978: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7979: LD_ADDR_EXP 10
7983: PUSH
7984: LD_EXP 10
7988: PPUSH
7989: LD_INT 1
7991: PPUSH
7992: CALL_OW 3
7996: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7997: LD_VAR 0 1
8001: PPUSH
8002: CALL_OW 255
8006: PUSH
8007: LD_INT 3
8009: EQUAL
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 266
8020: PUSH
8021: LD_INT 0
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 266
8034: PUSH
8035: LD_INT 2
8037: EQUAL
8038: OR
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 266
8049: PUSH
8050: LD_INT 4
8052: EQUAL
8053: OR
8054: PUSH
8055: EMPTY
8056: LIST
8057: AND
8058: IFFALSE 8069
// ComUpgrade ( building ) ;
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 255
8078: PUSH
8079: LD_INT 3
8081: EQUAL
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 32
8095: EQUAL
8096: AND
8097: IFFALSE 8138
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8099: LD_VAR 0 1
8103: PPUSH
8104: LD_INT 42
8106: PUSH
8107: LD_INT 43
8109: PUSH
8110: LD_INT 44
8112: PUSH
8113: LD_INT 46
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 1
8124: PPUSH
8125: LD_INT 4
8127: PPUSH
8128: CALL_OW 12
8132: ARRAY
8133: PPUSH
8134: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 255
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: PUSH
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 266
8161: PUSH
8162: LD_INT 33
8164: EQUAL
8165: AND
8166: IFFALSE 8207
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 42
8175: PUSH
8176: LD_INT 43
8178: PUSH
8179: LD_INT 44
8181: PUSH
8182: LD_INT 46
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_INT 4
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: CALL_OW 208
// end ;
8207: PPOPN 1
8209: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 255
8219: PUSH
8220: LD_INT 3
8222: EQUAL
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 247
8233: PUSH
8234: LD_INT 3
8236: EQUAL
8237: AND
8238: IFFALSE 8930
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: PUSH
8250: LD_INT 31
8252: EQUAL
8253: PUSH
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL_OW 266
8263: PUSH
8264: LD_INT 32
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 1
8273: PPUSH
8274: CALL_OW 266
8278: PUSH
8279: LD_INT 36
8281: EQUAL
8282: OR
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 266
8293: PUSH
8294: LD_INT 0
8296: EQUAL
8297: OR
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 266
8308: PUSH
8309: LD_INT 24
8311: EQUAL
8312: OR
8313: PUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 266
8323: PUSH
8324: LD_INT 17
8326: EQUAL
8327: OR
8328: PUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 266
8338: PUSH
8339: LD_INT 25
8341: EQUAL
8342: OR
8343: PUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 266
8353: PUSH
8354: LD_INT 19
8356: EQUAL
8357: OR
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 266
8368: PUSH
8369: LD_INT 20
8371: EQUAL
8372: OR
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 266
8383: PUSH
8384: LD_INT 18
8386: EQUAL
8387: OR
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 266
8398: PUSH
8399: LD_INT 21
8401: EQUAL
8402: OR
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 266
8413: PUSH
8414: LD_INT 23
8416: EQUAL
8417: OR
8418: PUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 266
8428: PUSH
8429: LD_INT 16
8431: EQUAL
8432: OR
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 266
8443: PUSH
8444: LD_INT 6
8446: EQUAL
8447: OR
8448: PUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 266
8458: PUSH
8459: LD_INT 29
8461: EQUAL
8462: OR
8463: PUSH
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 266
8473: PUSH
8474: LD_INT 26
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 266
8488: PUSH
8489: LD_INT 30
8491: EQUAL
8492: OR
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 266
8503: PUSH
8504: LD_INT 28
8506: EQUAL
8507: OR
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 266
8518: PUSH
8519: LD_INT 27
8521: EQUAL
8522: OR
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 266
8533: PUSH
8534: LD_INT 33
8536: EQUAL
8537: OR
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: OR
8553: PUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: CALL_OW 266
8563: PUSH
8564: LD_INT 4
8566: EQUAL
8567: OR
8568: IFFALSE 8654
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8570: LD_ADDR_EXP 10
8574: PUSH
8575: LD_EXP 10
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 266
8589: ADD
8590: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8591: LD_ADDR_EXP 10
8595: PUSH
8596: LD_EXP 10
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 250
8610: ADD
8611: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8612: LD_ADDR_EXP 10
8616: PUSH
8617: LD_EXP 10
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 251
8631: ADD
8632: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8633: LD_ADDR_EXP 10
8637: PUSH
8638: LD_EXP 10
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 254
8652: ADD
8653: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 266
8663: PUSH
8664: LD_INT 1
8666: EQUAL
8667: IFFALSE 8746
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8669: LD_ADDR_EXP 10
8673: PUSH
8674: LD_EXP 10
8678: PUSH
8679: LD_INT 0
8681: ADD
8682: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8683: LD_ADDR_EXP 10
8687: PUSH
8688: LD_EXP 10
8692: PUSH
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 250
8702: ADD
8703: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8704: LD_ADDR_EXP 10
8708: PUSH
8709: LD_EXP 10
8713: PUSH
8714: LD_VAR 0 1
8718: PPUSH
8719: CALL_OW 251
8723: ADD
8724: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8725: LD_ADDR_EXP 10
8729: PUSH
8730: LD_EXP 10
8734: PUSH
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 254
8744: ADD
8745: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 266
8755: PUSH
8756: LD_INT 3
8758: EQUAL
8759: IFFALSE 8838
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8761: LD_ADDR_EXP 10
8765: PUSH
8766: LD_EXP 10
8770: PUSH
8771: LD_INT 2
8773: ADD
8774: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8775: LD_ADDR_EXP 10
8779: PUSH
8780: LD_EXP 10
8784: PUSH
8785: LD_VAR 0 1
8789: PPUSH
8790: CALL_OW 250
8794: ADD
8795: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8796: LD_ADDR_EXP 10
8800: PUSH
8801: LD_EXP 10
8805: PUSH
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 251
8815: ADD
8816: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8817: LD_ADDR_EXP 10
8821: PUSH
8822: LD_EXP 10
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 254
8836: ADD
8837: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 266
8847: PUSH
8848: LD_INT 5
8850: EQUAL
8851: IFFALSE 8930
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8853: LD_ADDR_EXP 10
8857: PUSH
8858: LD_EXP 10
8862: PUSH
8863: LD_INT 4
8865: ADD
8866: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8867: LD_ADDR_EXP 10
8871: PUSH
8872: LD_EXP 10
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 250
8886: ADD
8887: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8888: LD_ADDR_EXP 10
8892: PUSH
8893: LD_EXP 10
8897: PUSH
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 251
8907: ADD
8908: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8909: LD_ADDR_EXP 10
8913: PUSH
8914: LD_EXP 10
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 254
8928: ADD
8929: ST_TO_ADDR
// end ; end ; end ;
8930: PPOPN 1
8932: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8933: LD_VAR 0 3
8937: PPUSH
8938: CALL_OW 264
8942: PUSH
8943: LD_INT 10
8945: EQUAL
8946: IFFALSE 8962
// destroyCounter := destroyCounter + 1 ;
8948: LD_ADDR_EXP 17
8952: PUSH
8953: LD_EXP 17
8957: PUSH
8958: LD_INT 1
8960: PLUS
8961: ST_TO_ADDR
// end ;
8962: PPOPN 3
8964: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8965: LD_VAR 0 2
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 2
8978: PUSH
8979: LD_INT 40
8981: EQUAL
8982: OR
8983: IFFALSE 9107
// if GetSide ( vehicle ) = 3 then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 255
8994: PUSH
8995: LD_INT 3
8997: EQUAL
8998: IFFALSE 9107
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 264
9009: PUSH
9010: LD_INT 47
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 264
9023: PUSH
9024: LD_INT 46
9026: EQUAL
9027: OR
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 264
9038: PUSH
9039: LD_INT 45
9041: EQUAL
9042: OR
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 264
9053: PUSH
9054: LD_INT 44
9056: EQUAL
9057: OR
9058: IFFALSE 9076
// russianTanks = russianTanks ^ vehicle ;
9060: LD_ADDR_EXP 11
9064: PUSH
9065: LD_EXP 11
9069: PUSH
9070: LD_VAR 0 1
9074: ADD
9075: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 264
9085: PUSH
9086: LD_INT 49
9088: EQUAL
9089: IFFALSE 9107
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
9091: LD_ADDR_EXP 12
9095: PUSH
9096: LD_EXP 12
9100: PUSH
9101: LD_VAR 0 1
9105: ADD
9106: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 255
9116: PUSH
9117: LD_INT 1
9119: EQUAL
9120: PUSH
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 264
9130: PUSH
9131: LD_INT 10
9133: EQUAL
9134: AND
9135: IFFALSE 9151
// amLaserCounter = amLaserCounter + 1 ;
9137: LD_ADDR_EXP 9
9141: PUSH
9142: LD_EXP 9
9146: PUSH
9147: LD_INT 1
9149: PLUS
9150: ST_TO_ADDR
// end ;
9151: PPOPN 2
9153: END
// on UnitGoesToRed ( unit ) do var i ;
9154: LD_INT 0
9156: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 3
9169: EQUAL
9170: PUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 247
9180: PUSH
9181: LD_INT 2
9183: EQUAL
9184: AND
9185: IFFALSE 9297
// begin if russianTanks > 0 then
9187: LD_EXP 11
9191: PUSH
9192: LD_INT 0
9194: GREATER
9195: IFFALSE 9242
// for i in russianTanks do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_EXP 11
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9240
// if i = unit then
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 1
9219: EQUAL
9220: IFFALSE 9238
// russianTanks = russianTanks diff unit ;
9222: LD_ADDR_EXP 11
9226: PUSH
9227: LD_EXP 11
9231: PUSH
9232: LD_VAR 0 1
9236: DIFF
9237: ST_TO_ADDR
9238: GO 9207
9240: POP
9241: POP
// if russianTimeLapsers > 0 then
9242: LD_EXP 12
9246: PUSH
9247: LD_INT 0
9249: GREATER
9250: IFFALSE 9297
// for i in russianTimeLapsers do
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: LD_EXP 12
9261: PUSH
9262: FOR_IN
9263: IFFALSE 9295
// if i = unit then
9265: LD_VAR 0 2
9269: PUSH
9270: LD_VAR 0 1
9274: EQUAL
9275: IFFALSE 9293
// russianTimeLapsers = russianTimeLapsers diff unit ;
9277: LD_ADDR_EXP 12
9281: PUSH
9282: LD_EXP 12
9286: PUSH
9287: LD_VAR 0 1
9291: DIFF
9292: ST_TO_ADDR
9293: GO 9262
9295: POP
9296: POP
// end ; end ;
9297: PPOPN 2
9299: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL 21838 0 1
// end ; end_of_file
9309: PPOPN 1
9311: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9312: LD_EXP 1
9316: PPUSH
9317: CALL_OW 310
9321: PPUSH
9322: LD_INT 12
9324: PPUSH
9325: CALL_OW 308
9329: PUSH
9330: LD_EXP 15
9334: PUSH
9335: LD_INT 0
9337: EQUAL
9338: AND
9339: IFFALSE 9685
9341: GO 9343
9343: DISABLE
9344: LD_INT 0
9346: PPUSH
9347: PPUSH
// begin enable ;
9348: ENABLE
// if JMMGirl = 1 then
9349: LD_EXP 7
9353: PUSH
9354: LD_INT 1
9356: EQUAL
9357: IFFALSE 9374
// JMMGirlVeh = IsInUnit ( Joan ) ;
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_EXP 2
9368: PPUSH
9369: CALL_OW 310
9373: ST_TO_ADDR
// if JMMGirl = 2 then
9374: LD_EXP 7
9378: PUSH
9379: LD_INT 2
9381: EQUAL
9382: IFFALSE 9399
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_EXP 3
9393: PPUSH
9394: CALL_OW 310
9398: ST_TO_ADDR
// if JMMGirl = 3 then
9399: LD_EXP 7
9403: PUSH
9404: LD_INT 3
9406: EQUAL
9407: IFFALSE 9424
// JMMGirlVeh = IsInUnit ( Connie ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_EXP 4
9418: PPUSH
9419: CALL_OW 310
9423: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9424: LD_EXP 1
9428: PPUSH
9429: CALL_OW 310
9433: PPUSH
9434: LD_EXP 2
9438: PPUSH
9439: CALL_OW 310
9443: PPUSH
9444: CALL_OW 296
9448: PUSH
9449: LD_INT 10
9451: LESS
9452: PUSH
9453: LD_EXP 1
9457: PPUSH
9458: CALL_OW 310
9462: PPUSH
9463: LD_EXP 3
9467: PPUSH
9468: CALL_OW 310
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 10
9480: LESS
9481: OR
9482: PUSH
9483: LD_EXP 1
9487: PPUSH
9488: CALL_OW 310
9492: PPUSH
9493: LD_EXP 4
9497: PPUSH
9498: CALL_OW 310
9502: PPUSH
9503: CALL_OW 296
9507: PUSH
9508: LD_INT 10
9510: LESS
9511: OR
9512: IFFALSE 9606
// begin case Query ( Q3b ) of 1 :
9514: LD_STRING Q3b
9516: PPUSH
9517: CALL_OW 97
9521: PUSH
9522: LD_INT 1
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9603
9530: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9531: LD_VAR 0 1
9535: PPUSH
9536: CALL_OW 265
9540: PUSH
9541: EMPTY
9542: LIST
9543: PUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 262
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 263
9566: PUSH
9567: EMPTY
9568: LIST
9569: PUSH
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 264
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: LD_STRING 14_JMMGirlVeh_1
9591: PPUSH
9592: CALL_OW 39
// FinishMission ;
9596: CALL 9826 0 0
// disable ;
9600: DISABLE
// end ; end ;
9601: GO 9604
9603: POP
// end else
9604: GO 9685
// begin if JMMGirl = 1 then
9606: LD_EXP 7
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: IFFALSE 9631
// dec := Query ( Q3bJ ) else
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_STRING Q3bJ
9623: PPUSH
9624: CALL_OW 97
9628: ST_TO_ADDR
9629: GO 9669
// if JMMGirl = 2 then
9631: LD_EXP 7
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: IFFALSE 9656
// dec := Query ( Q3bL ) else
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: LD_STRING Q3bL
9648: PPUSH
9649: CALL_OW 97
9653: ST_TO_ADDR
9654: GO 9669
// dec := Query ( Q3bX ) ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_STRING Q3bX
9663: PPUSH
9664: CALL_OW 97
9668: ST_TO_ADDR
// if dec = 1 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 1
9676: EQUAL
9677: IFFALSE 9685
// begin FinishMission ;
9679: CALL 9826 0 0
// exit ;
9683: GO 9685
// end ; end ; end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9688: LD_INT 22
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 0
9719: EQUAL
9720: PUSH
9721: LD_EXP 15
9725: PUSH
9726: LD_INT 0
9728: EQUAL
9729: AND
9730: IFFALSE 9825
9732: GO 9734
9734: DISABLE
// begin DialogueOn ;
9735: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9739: LD_EXP 1
9743: PPUSH
9744: LD_STRING DEnd-JMM-1
9746: PPUSH
9747: CALL_OW 88
// if JMMGirl = 1 then
9751: LD_EXP 7
9755: PUSH
9756: LD_INT 1
9758: EQUAL
9759: IFFALSE 9773
// Say ( Joan , DEnd-Joan-1 ) ;
9761: LD_EXP 2
9765: PPUSH
9766: LD_STRING DEnd-Joan-1
9768: PPUSH
9769: CALL_OW 88
// if JMMGirl = 2 then
9773: LD_EXP 7
9777: PUSH
9778: LD_INT 2
9780: EQUAL
9781: IFFALSE 9795
// Say ( Lisa , DEnd-Lisa-1 ) ;
9783: LD_EXP 3
9787: PPUSH
9788: LD_STRING DEnd-Lisa-1
9790: PPUSH
9791: CALL_OW 88
// if JMMGirl = 3 then
9795: LD_EXP 7
9799: PUSH
9800: LD_INT 3
9802: EQUAL
9803: IFFALSE 9817
// Say ( Connie , DEnd-Con-1 ) ;
9805: LD_EXP 4
9809: PPUSH
9810: LD_STRING DEnd-Con-1
9812: PPUSH
9813: CALL_OW 88
// DialogueOff ;
9817: CALL_OW 7
// FinishMission ;
9821: CALL 9826 0 0
// end ;
9825: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
// m1 := false ;
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_INT 0
9840: ST_TO_ADDR
// m2 := false ;
9841: LD_ADDR_VAR 0 4
9845: PUSH
9846: LD_INT 0
9848: ST_TO_ADDR
// m3 := false ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: LD_INT 0
9856: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9857: LD_EXP 1
9861: PPUSH
9862: LD_STRING 14_JMM
9864: PPUSH
9865: CALL_OW 38
// if tick <= 50 50$00 then
9869: LD_OWVAR 1
9873: PUSH
9874: LD_INT 105000
9876: LESSEQUAL
9877: IFFALSE 9886
// SetAchievement ( ACH_ASPEED_14 ) ;
9879: LD_STRING ACH_ASPEED_14
9881: PPUSH
9882: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9886: LD_EXP 1
9890: PPUSH
9891: CALL_OW 310
9895: PUSH
9896: LD_EXP 1
9900: PPUSH
9901: CALL_OW 310
9905: PPUSH
9906: CALL_OW 247
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: AND
9915: IFFALSE 9997
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_EXP 1
9926: PPUSH
9927: CALL_OW 310
9931: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9932: LD_VAR 0 2
9936: PPUSH
9937: CALL_OW 265
9941: PUSH
9942: EMPTY
9943: LIST
9944: PUSH
9945: LD_VAR 0 2
9949: PPUSH
9950: CALL_OW 262
9954: PUSH
9955: EMPTY
9956: LIST
9957: PUSH
9958: LD_VAR 0 2
9962: PPUSH
9963: CALL_OW 263
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_VAR 0 2
9975: PPUSH
9976: CALL_OW 264
9980: PUSH
9981: EMPTY
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PPUSH
9990: LD_STRING 14_JMMVeh_1
9992: PPUSH
9993: CALL_OW 39
// end ; if fastEnd = 1 then
9997: LD_EXP 15
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 10094
// begin AddMedal ( fastend , - 1 ) ;
10007: LD_STRING fastend
10009: PPUSH
10010: LD_INT 1
10012: NEG
10013: PPUSH
10014: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10018: LD_STRING fastend
10020: PPUSH
10021: LD_INT 1
10023: NEG
10024: PPUSH
10025: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10029: LD_STRING fastend
10031: PPUSH
10032: LD_INT 1
10034: NEG
10035: PPUSH
10036: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10040: LD_EXP 7
10044: PPUSH
10045: LD_STRING 14_JMMGirl_1
10047: PPUSH
10048: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10052: LD_INT 0
10054: PPUSH
10055: LD_STRING 14_JMMGirlStatus_1
10057: PPUSH
10058: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10062: LD_INT 0
10064: PPUSH
10065: LD_STRING 14_KappaStatus_1
10067: PPUSH
10068: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10072: LD_STRING Eliminate
10074: PPUSH
10075: CALL_OW 102
// RewardPeople ( JMM ) ;
10079: LD_EXP 1
10083: PPUSH
10084: CALL_OW 43
// YouWin ;
10088: CALL_OW 103
// exit ;
10092: GO 10919
// end ; if fastEnd = 0 then
10094: LD_EXP 15
10098: PUSH
10099: LD_INT 0
10101: EQUAL
10102: IFFALSE 10812
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10104: LD_EXP 7
10108: PPUSH
10109: LD_STRING 14_JMMGirl_1
10111: PPUSH
10112: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
10116: LD_INT 22
10118: PUSH
10119: LD_INT 3
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: PUSH
10145: LD_INT 0
10147: EQUAL
10148: PUSH
10149: LD_INT 48
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 1
10159: EQUAL
10160: AND
10161: IFFALSE 10175
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
10163: LD_INT 1
10165: PPUSH
10166: LD_STRING 14_KappaStatus_1
10168: PPUSH
10169: CALL_OW 39
10173: GO 10185
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10175: LD_INT 0
10177: PPUSH
10178: LD_STRING 14_KappaStatus_1
10180: PPUSH
10181: CALL_OW 39
// case JMMGirl of 1 :
10185: LD_EXP 7
10189: PUSH
10190: LD_INT 1
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10354
10198: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10199: LD_EXP 2
10203: PPUSH
10204: CALL_OW 302
10208: PUSH
10209: LD_EXP 2
10213: PPUSH
10214: CALL_OW 255
10218: PUSH
10219: LD_INT 1
10221: EQUAL
10222: AND
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 3
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 21
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: CALL_OW 69
10252: PUSH
10253: LD_INT 0
10255: EQUAL
10256: PUSH
10257: LD_EXP 1
10261: PPUSH
10262: CALL_OW 310
10266: PPUSH
10267: LD_EXP 2
10271: PPUSH
10272: CALL_OW 310
10276: PPUSH
10277: CALL_OW 296
10281: PUSH
10282: LD_INT 10
10284: LESS
10285: OR
10286: AND
10287: IFFALSE 10331
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10289: LD_INT 1
10291: PPUSH
10292: LD_STRING 14_JMMGirlStatus_1
10294: PPUSH
10295: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10299: LD_EXP 2
10303: PPUSH
10304: LD_STRING 14_Joan
10306: PPUSH
10307: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10311: LD_STRING protect
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 101
// m1 := true ;
10321: LD_ADDR_VAR 0 3
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// end else
10329: GO 10352
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10331: LD_INT 0
10333: PPUSH
10334: LD_STRING 14_JMMGirlStatus_1
10336: PPUSH
10337: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10341: LD_STRING protect
10343: PPUSH
10344: LD_INT 1
10346: NEG
10347: PPUSH
10348: CALL_OW 101
// end ; end ; 2 :
10352: GO 10683
10354: LD_INT 2
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10518
10362: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10363: LD_EXP 3
10367: PPUSH
10368: CALL_OW 302
10372: PUSH
10373: LD_EXP 3
10377: PPUSH
10378: CALL_OW 255
10382: PUSH
10383: LD_INT 1
10385: EQUAL
10386: AND
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: PUSH
10421: LD_EXP 1
10425: PPUSH
10426: CALL_OW 310
10430: PPUSH
10431: LD_EXP 3
10435: PPUSH
10436: CALL_OW 310
10440: PPUSH
10441: CALL_OW 296
10445: PUSH
10446: LD_INT 10
10448: LESS
10449: OR
10450: AND
10451: IFFALSE 10495
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10453: LD_INT 1
10455: PPUSH
10456: LD_STRING 14_JMMGirlStatus_1
10458: PPUSH
10459: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10463: LD_EXP 3
10467: PPUSH
10468: LD_STRING 14_Lisa
10470: PPUSH
10471: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10475: LD_STRING protect
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 101
// m1 := true ;
10485: LD_ADDR_VAR 0 3
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end else
10493: GO 10516
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10495: LD_INT 0
10497: PPUSH
10498: LD_STRING 14_JMMGirlStatus_1
10500: PPUSH
10501: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10505: LD_STRING protect
10507: PPUSH
10508: LD_INT 2
10510: NEG
10511: PPUSH
10512: CALL_OW 101
// end ; end ; 3 :
10516: GO 10683
10518: LD_INT 3
10520: DOUBLE
10521: EQUAL
10522: IFTRUE 10526
10524: GO 10682
10526: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10527: LD_EXP 4
10531: PPUSH
10532: CALL_OW 302
10536: PUSH
10537: LD_EXP 4
10541: PPUSH
10542: CALL_OW 255
10546: PUSH
10547: LD_INT 1
10549: EQUAL
10550: AND
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: PUSH
10581: LD_INT 0
10583: EQUAL
10584: PUSH
10585: LD_EXP 1
10589: PPUSH
10590: CALL_OW 310
10594: PPUSH
10595: LD_EXP 4
10599: PPUSH
10600: CALL_OW 310
10604: PPUSH
10605: CALL_OW 296
10609: PUSH
10610: LD_INT 10
10612: LESS
10613: OR
10614: AND
10615: IFFALSE 10659
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10617: LD_INT 1
10619: PPUSH
10620: LD_STRING 14_JMMGirlStatus_1
10622: PPUSH
10623: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10627: LD_EXP 4
10631: PPUSH
10632: LD_STRING 14_Connie
10634: PPUSH
10635: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10639: LD_STRING protect
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 101
// m1 := true ;
10649: LD_ADDR_VAR 0 3
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// end else
10657: GO 10680
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10659: LD_INT 0
10661: PPUSH
10662: LD_STRING 14_JMMGirlStatus_1
10664: PPUSH
10665: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10669: LD_STRING protect
10671: PPUSH
10672: LD_INT 3
10674: NEG
10675: PPUSH
10676: CALL_OW 101
// end ; end ; end ;
10680: GO 10683
10682: POP
// if amLaserCounter >= 2 then
10683: LD_EXP 9
10687: PUSH
10688: LD_INT 2
10690: GREATEREQUAL
10691: IFFALSE 10713
// begin AddMedal ( double , 1 ) ;
10693: LD_STRING double
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 101
// m2 := true ;
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// end else
10711: GO 10747
// begin if amLaserCounter = 1 then
10713: LD_EXP 9
10717: PUSH
10718: LD_INT 1
10720: EQUAL
10721: IFFALSE 10736
// AddMedal ( double , - 2 ) else
10723: LD_STRING double
10725: PPUSH
10726: LD_INT 2
10728: NEG
10729: PPUSH
10730: CALL_OW 101
10734: GO 10747
// AddMedal ( double , - 1 ) ;
10736: LD_STRING double
10738: PPUSH
10739: LD_INT 1
10741: NEG
10742: PPUSH
10743: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10747: LD_INT 22
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 21
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PUSH
10776: LD_INT 0
10778: EQUAL
10779: IFFALSE 10801
// begin AddMedal ( base , 1 ) ;
10781: LD_STRING base
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 101
// m3 := true ;
10791: LD_ADDR_VAR 0 5
10795: PUSH
10796: LD_INT 1
10798: ST_TO_ADDR
// end else
10799: GO 10812
// AddMedal ( base , - 1 ) ;
10801: LD_STRING base
10803: PPUSH
10804: LD_INT 1
10806: NEG
10807: PPUSH
10808: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_VAR 0 4
10821: AND
10822: PUSH
10823: LD_VAR 0 5
10827: AND
10828: PUSH
10829: LD_OWVAR 67
10833: PUSH
10834: LD_INT 3
10836: EQUAL
10837: AND
10838: IFFALSE 10850
// SetAchievementEX ( ACH_AMER , 14 ) ;
10840: LD_STRING ACH_AMER
10842: PPUSH
10843: LD_INT 14
10845: PPUSH
10846: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10850: LD_STRING Eliminate
10852: PPUSH
10853: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10857: LD_INT 22
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 3
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 12
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 25
10889: PUSH
10890: LD_INT 16
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: PPUSH
10911: CALL_OW 43
// YouWin ;
10915: CALL_OW 103
// end ; end_of_file
10919: LD_VAR 0 1
10923: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10924: LD_EXP 1
10928: PPUSH
10929: CALL_OW 301
10933: IFFALSE 10945
10935: GO 10937
10937: DISABLE
// YouLost ( JMM ) ; end_of_file
10938: LD_STRING JMM
10940: PPUSH
10941: CALL_OW 104
10945: END
// every 1 1$0 do
10946: GO 10948
10948: DISABLE
// begin enable ;
10949: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10950: LD_INT 3
10952: PPUSH
10953: LD_INT 5
10955: PPUSH
10956: CALL_OW 12
10960: PPUSH
10961: LD_INT 13
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 55
// end ; end_of_file
10971: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10972: GO 10974
10974: DISABLE
// begin ru_radar := 98 ;
10975: LD_ADDR_EXP 19
10979: PUSH
10980: LD_INT 98
10982: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10983: LD_ADDR_EXP 20
10987: PUSH
10988: LD_INT 89
10990: ST_TO_ADDR
// us_hack := 99 ;
10991: LD_ADDR_EXP 21
10995: PUSH
10996: LD_INT 99
10998: ST_TO_ADDR
// us_artillery := 97 ;
10999: LD_ADDR_EXP 22
11003: PUSH
11004: LD_INT 97
11006: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11007: LD_ADDR_EXP 23
11011: PUSH
11012: LD_INT 91
11014: ST_TO_ADDR
// end ; end_of_file end_of_file
11015: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11016: GO 11018
11018: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11019: LD_STRING initStreamRollete();
11021: PPUSH
11022: CALL_OW 559
// InitStreamMode ;
11026: CALL 11035 0 0
// DefineStreamItems ( ) ;
11030: CALL 11475 0 0
// end ;
11034: END
// function InitStreamMode ; begin
11035: LD_INT 0
11037: PPUSH
// streamModeActive := false ;
11038: LD_ADDR_EXP 24
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// normalCounter := 26 ;
11046: LD_ADDR_EXP 25
11050: PUSH
11051: LD_INT 26
11053: ST_TO_ADDR
// hardcoreCounter := 12 ;
11054: LD_ADDR_EXP 26
11058: PUSH
11059: LD_INT 12
11061: ST_TO_ADDR
// sRocket := false ;
11062: LD_ADDR_EXP 29
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// sSpeed := false ;
11070: LD_ADDR_EXP 28
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sEngine := false ;
11078: LD_ADDR_EXP 30
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sSpec := false ;
11086: LD_ADDR_EXP 27
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sLevel := false ;
11094: LD_ADDR_EXP 31
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sArmoury := false ;
11102: LD_ADDR_EXP 32
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sRadar := false ;
11110: LD_ADDR_EXP 33
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sBunker := false ;
11118: LD_ADDR_EXP 34
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sHack := false ;
11126: LD_ADDR_EXP 35
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sFire := false ;
11134: LD_ADDR_EXP 36
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sRefresh := false ;
11142: LD_ADDR_EXP 37
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sExp := false ;
11150: LD_ADDR_EXP 38
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sDepot := false ;
11158: LD_ADDR_EXP 39
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sFlag := false ;
11166: LD_ADDR_EXP 40
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sKamikadze := false ;
11174: LD_ADDR_EXP 48
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sTroll := false ;
11182: LD_ADDR_EXP 49
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sSlow := false ;
11190: LD_ADDR_EXP 50
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sLack := false ;
11198: LD_ADDR_EXP 51
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sTank := false ;
11206: LD_ADDR_EXP 53
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sRemote := false ;
11214: LD_ADDR_EXP 54
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sPowell := false ;
11222: LD_ADDR_EXP 55
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sTeleport := false ;
11230: LD_ADDR_EXP 58
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sOilTower := false ;
11238: LD_ADDR_EXP 60
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sShovel := false ;
11246: LD_ADDR_EXP 61
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sSheik := false ;
11254: LD_ADDR_EXP 62
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sEarthquake := false ;
11262: LD_ADDR_EXP 64
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sAI := false ;
11270: LD_ADDR_EXP 65
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sCargo := false ;
11278: LD_ADDR_EXP 68
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sDLaser := false ;
11286: LD_ADDR_EXP 69
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sExchange := false ;
11294: LD_ADDR_EXP 70
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sFac := false ;
11302: LD_ADDR_EXP 71
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sPower := false ;
11310: LD_ADDR_EXP 72
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sRandom := false ;
11318: LD_ADDR_EXP 73
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sShield := false ;
11326: LD_ADDR_EXP 74
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sTime := false ;
11334: LD_ADDR_EXP 75
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sTools := false ;
11342: LD_ADDR_EXP 76
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sSold := false ;
11350: LD_ADDR_EXP 41
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sDiff := false ;
11358: LD_ADDR_EXP 42
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sFog := false ;
11366: LD_ADDR_EXP 45
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sReset := false ;
11374: LD_ADDR_EXP 46
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sSun := false ;
11382: LD_ADDR_EXP 47
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sTiger := false ;
11390: LD_ADDR_EXP 43
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sBomb := false ;
11398: LD_ADDR_EXP 44
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sWound := false ;
11406: LD_ADDR_EXP 52
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sBetray := false ;
11414: LD_ADDR_EXP 56
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sContamin := false ;
11422: LD_ADDR_EXP 57
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sOil := false ;
11430: LD_ADDR_EXP 59
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sStu := false ;
11438: LD_ADDR_EXP 63
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sBazooka := false ;
11446: LD_ADDR_EXP 66
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sMortar := false ;
11454: LD_ADDR_EXP 67
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sRanger := false ;
11462: LD_ADDR_EXP 77
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// end ;
11470: LD_VAR 0 1
11474: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
// result := [ ] ;
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// if campaign_id = 1 then
11489: LD_OWVAR 69
11493: PUSH
11494: LD_INT 1
11496: EQUAL
11497: IFFALSE 14445
// begin case mission_number of 1 :
11499: LD_OWVAR 70
11503: PUSH
11504: LD_INT 1
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11576
11512: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11513: LD_ADDR_VAR 0 1
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: LD_INT 11
11526: PUSH
11527: LD_INT 12
11529: PUSH
11530: LD_INT 15
11532: PUSH
11533: LD_INT 16
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 23
11541: PUSH
11542: LD_INT 26
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 106
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: ST_TO_ADDR
11574: GO 14445
11576: LD_INT 2
11578: DOUBLE
11579: EQUAL
11580: IFTRUE 11584
11582: GO 11656
11584: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11585: LD_ADDR_VAR 0 1
11589: PUSH
11590: LD_INT 2
11592: PUSH
11593: LD_INT 4
11595: PUSH
11596: LD_INT 11
11598: PUSH
11599: LD_INT 12
11601: PUSH
11602: LD_INT 15
11604: PUSH
11605: LD_INT 16
11607: PUSH
11608: LD_INT 22
11610: PUSH
11611: LD_INT 23
11613: PUSH
11614: LD_INT 26
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 102
11633: PUSH
11634: LD_INT 105
11636: PUSH
11637: LD_INT 106
11639: PUSH
11640: LD_INT 108
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 14445
11656: LD_INT 3
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11740
11664: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 4
11675: PUSH
11676: LD_INT 5
11678: PUSH
11679: LD_INT 11
11681: PUSH
11682: LD_INT 12
11684: PUSH
11685: LD_INT 15
11687: PUSH
11688: LD_INT 16
11690: PUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 36
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 101
11714: PUSH
11715: LD_INT 102
11717: PUSH
11718: LD_INT 105
11720: PUSH
11721: LD_INT 106
11723: PUSH
11724: LD_INT 108
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: ST_TO_ADDR
11738: GO 14445
11740: LD_INT 4
11742: DOUBLE
11743: EQUAL
11744: IFTRUE 11748
11746: GO 11832
11748: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11749: LD_ADDR_VAR 0 1
11753: PUSH
11754: LD_INT 2
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: LD_INT 5
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: LD_INT 11
11768: PUSH
11769: LD_INT 12
11771: PUSH
11772: LD_INT 15
11774: PUSH
11775: LD_INT 16
11777: PUSH
11778: LD_INT 22
11780: PUSH
11781: LD_INT 23
11783: PUSH
11784: LD_INT 26
11786: PUSH
11787: LD_INT 36
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 101
11806: PUSH
11807: LD_INT 102
11809: PUSH
11810: LD_INT 105
11812: PUSH
11813: LD_INT 106
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 14445
11832: LD_INT 5
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 11940
11840: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: LD_INT 5
11854: PUSH
11855: LD_INT 6
11857: PUSH
11858: LD_INT 8
11860: PUSH
11861: LD_INT 11
11863: PUSH
11864: LD_INT 12
11866: PUSH
11867: LD_INT 15
11869: PUSH
11870: LD_INT 16
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: LD_INT 23
11878: PUSH
11879: LD_INT 25
11881: PUSH
11882: LD_INT 26
11884: PUSH
11885: LD_INT 36
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 105
11912: PUSH
11913: LD_INT 106
11915: PUSH
11916: LD_INT 108
11918: PUSH
11919: LD_INT 109
11921: PUSH
11922: LD_INT 112
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: ST_TO_ADDR
11938: GO 14445
11940: LD_INT 6
11942: DOUBLE
11943: EQUAL
11944: IFTRUE 11948
11946: GO 12068
11948: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11949: LD_ADDR_VAR 0 1
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 4
11959: PUSH
11960: LD_INT 5
11962: PUSH
11963: LD_INT 6
11965: PUSH
11966: LD_INT 8
11968: PUSH
11969: LD_INT 11
11971: PUSH
11972: LD_INT 12
11974: PUSH
11975: LD_INT 15
11977: PUSH
11978: LD_INT 16
11980: PUSH
11981: LD_INT 20
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 23
11992: PUSH
11993: LD_INT 25
11995: PUSH
11996: LD_INT 26
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 31
12004: PUSH
12005: LD_INT 32
12007: PUSH
12008: LD_INT 36
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 101
12034: PUSH
12035: LD_INT 102
12037: PUSH
12038: LD_INT 105
12040: PUSH
12041: LD_INT 106
12043: PUSH
12044: LD_INT 108
12046: PUSH
12047: LD_INT 109
12049: PUSH
12050: LD_INT 112
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 14445
12068: LD_INT 7
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12176
12076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12077: LD_ADDR_VAR 0 1
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: LD_INT 7
12093: PUSH
12094: LD_INT 11
12096: PUSH
12097: LD_INT 12
12099: PUSH
12100: LD_INT 15
12102: PUSH
12103: LD_INT 16
12105: PUSH
12106: LD_INT 20
12108: PUSH
12109: LD_INT 21
12111: PUSH
12112: LD_INT 22
12114: PUSH
12115: LD_INT 23
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 26
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 101
12142: PUSH
12143: LD_INT 102
12145: PUSH
12146: LD_INT 103
12148: PUSH
12149: LD_INT 105
12151: PUSH
12152: LD_INT 106
12154: PUSH
12155: LD_INT 108
12157: PUSH
12158: LD_INT 112
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: ST_TO_ADDR
12174: GO 14445
12176: LD_INT 8
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12312
12184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: LD_INT 4
12195: PUSH
12196: LD_INT 5
12198: PUSH
12199: LD_INT 6
12201: PUSH
12202: LD_INT 7
12204: PUSH
12205: LD_INT 8
12207: PUSH
12208: LD_INT 11
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: LD_INT 15
12216: PUSH
12217: LD_INT 16
12219: PUSH
12220: LD_INT 20
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_INT 23
12231: PUSH
12232: LD_INT 25
12234: PUSH
12235: LD_INT 26
12237: PUSH
12238: LD_INT 30
12240: PUSH
12241: LD_INT 31
12243: PUSH
12244: LD_INT 32
12246: PUSH
12247: LD_INT 36
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 101
12274: PUSH
12275: LD_INT 102
12277: PUSH
12278: LD_INT 103
12280: PUSH
12281: LD_INT 105
12283: PUSH
12284: LD_INT 106
12286: PUSH
12287: LD_INT 108
12289: PUSH
12290: LD_INT 109
12292: PUSH
12293: LD_INT 112
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: ST_TO_ADDR
12310: GO 14445
12312: LD_INT 9
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12456
12320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 4
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: LD_INT 6
12337: PUSH
12338: LD_INT 7
12340: PUSH
12341: LD_INT 8
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: LD_INT 12
12349: PUSH
12350: LD_INT 15
12352: PUSH
12353: LD_INT 16
12355: PUSH
12356: LD_INT 20
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_INT 23
12367: PUSH
12368: LD_INT 25
12370: PUSH
12371: LD_INT 26
12373: PUSH
12374: LD_INT 28
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 31
12382: PUSH
12383: LD_INT 32
12385: PUSH
12386: LD_INT 36
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 101
12414: PUSH
12415: LD_INT 102
12417: PUSH
12418: LD_INT 103
12420: PUSH
12421: LD_INT 105
12423: PUSH
12424: LD_INT 106
12426: PUSH
12427: LD_INT 108
12429: PUSH
12430: LD_INT 109
12432: PUSH
12433: LD_INT 112
12435: PUSH
12436: LD_INT 114
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
12454: GO 14445
12456: LD_INT 10
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12648
12464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: LD_INT 4
12475: PUSH
12476: LD_INT 5
12478: PUSH
12479: LD_INT 6
12481: PUSH
12482: LD_INT 7
12484: PUSH
12485: LD_INT 8
12487: PUSH
12488: LD_INT 9
12490: PUSH
12491: LD_INT 10
12493: PUSH
12494: LD_INT 11
12496: PUSH
12497: LD_INT 12
12499: PUSH
12500: LD_INT 13
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 28
12544: PUSH
12545: LD_INT 30
12547: PUSH
12548: LD_INT 31
12550: PUSH
12551: LD_INT 32
12553: PUSH
12554: LD_INT 36
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 101
12590: PUSH
12591: LD_INT 102
12593: PUSH
12594: LD_INT 103
12596: PUSH
12597: LD_INT 104
12599: PUSH
12600: LD_INT 105
12602: PUSH
12603: LD_INT 106
12605: PUSH
12606: LD_INT 107
12608: PUSH
12609: LD_INT 108
12611: PUSH
12612: LD_INT 109
12614: PUSH
12615: LD_INT 110
12617: PUSH
12618: LD_INT 111
12620: PUSH
12621: LD_INT 112
12623: PUSH
12624: LD_INT 114
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: ST_TO_ADDR
12646: GO 14445
12648: LD_INT 11
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12848
12656: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: LD_INT 4
12670: PUSH
12671: LD_INT 5
12673: PUSH
12674: LD_INT 6
12676: PUSH
12677: LD_INT 7
12679: PUSH
12680: LD_INT 8
12682: PUSH
12683: LD_INT 9
12685: PUSH
12686: LD_INT 10
12688: PUSH
12689: LD_INT 11
12691: PUSH
12692: LD_INT 12
12694: PUSH
12695: LD_INT 13
12697: PUSH
12698: LD_INT 14
12700: PUSH
12701: LD_INT 15
12703: PUSH
12704: LD_INT 16
12706: PUSH
12707: LD_INT 17
12709: PUSH
12710: LD_INT 18
12712: PUSH
12713: LD_INT 19
12715: PUSH
12716: LD_INT 20
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: LD_INT 25
12733: PUSH
12734: LD_INT 26
12736: PUSH
12737: LD_INT 28
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 31
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 101
12790: PUSH
12791: LD_INT 102
12793: PUSH
12794: LD_INT 103
12796: PUSH
12797: LD_INT 104
12799: PUSH
12800: LD_INT 105
12802: PUSH
12803: LD_INT 106
12805: PUSH
12806: LD_INT 107
12808: PUSH
12809: LD_INT 108
12811: PUSH
12812: LD_INT 109
12814: PUSH
12815: LD_INT 110
12817: PUSH
12818: LD_INT 111
12820: PUSH
12821: LD_INT 112
12823: PUSH
12824: LD_INT 114
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
12846: GO 14445
12848: LD_INT 12
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 13064
12856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: LD_INT 2
12867: PUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 7
12882: PUSH
12883: LD_INT 8
12885: PUSH
12886: LD_INT 9
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 11
12894: PUSH
12895: LD_INT 12
12897: PUSH
12898: LD_INT 13
12900: PUSH
12901: LD_INT 14
12903: PUSH
12904: LD_INT 15
12906: PUSH
12907: LD_INT 16
12909: PUSH
12910: LD_INT 17
12912: PUSH
12913: LD_INT 18
12915: PUSH
12916: LD_INT 19
12918: PUSH
12919: LD_INT 20
12921: PUSH
12922: LD_INT 21
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 23
12930: PUSH
12931: LD_INT 24
12933: PUSH
12934: LD_INT 25
12936: PUSH
12937: LD_INT 26
12939: PUSH
12940: LD_INT 27
12942: PUSH
12943: LD_INT 28
12945: PUSH
12946: LD_INT 30
12948: PUSH
12949: LD_INT 31
12951: PUSH
12952: LD_INT 32
12954: PUSH
12955: LD_INT 33
12957: PUSH
12958: LD_INT 34
12960: PUSH
12961: LD_INT 36
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 101
13002: PUSH
13003: LD_INT 102
13005: PUSH
13006: LD_INT 103
13008: PUSH
13009: LD_INT 104
13011: PUSH
13012: LD_INT 105
13014: PUSH
13015: LD_INT 106
13017: PUSH
13018: LD_INT 107
13020: PUSH
13021: LD_INT 108
13023: PUSH
13024: LD_INT 109
13026: PUSH
13027: LD_INT 110
13029: PUSH
13030: LD_INT 111
13032: PUSH
13033: LD_INT 112
13035: PUSH
13036: LD_INT 113
13038: PUSH
13039: LD_INT 114
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: ST_TO_ADDR
13062: GO 14445
13064: LD_INT 13
13066: DOUBLE
13067: EQUAL
13068: IFTRUE 13072
13070: GO 13280
13072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13073: LD_ADDR_VAR 0 1
13077: PUSH
13078: LD_INT 1
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 3
13086: PUSH
13087: LD_INT 4
13089: PUSH
13090: LD_INT 5
13092: PUSH
13093: LD_INT 6
13095: PUSH
13096: LD_INT 7
13098: PUSH
13099: LD_INT 8
13101: PUSH
13102: LD_INT 9
13104: PUSH
13105: LD_INT 10
13107: PUSH
13108: LD_INT 11
13110: PUSH
13111: LD_INT 12
13113: PUSH
13114: LD_INT 13
13116: PUSH
13117: LD_INT 14
13119: PUSH
13120: LD_INT 15
13122: PUSH
13123: LD_INT 16
13125: PUSH
13126: LD_INT 17
13128: PUSH
13129: LD_INT 18
13131: PUSH
13132: LD_INT 19
13134: PUSH
13135: LD_INT 20
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 23
13146: PUSH
13147: LD_INT 24
13149: PUSH
13150: LD_INT 25
13152: PUSH
13153: LD_INT 26
13155: PUSH
13156: LD_INT 27
13158: PUSH
13159: LD_INT 28
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 31
13167: PUSH
13168: LD_INT 32
13170: PUSH
13171: LD_INT 33
13173: PUSH
13174: LD_INT 34
13176: PUSH
13177: LD_INT 36
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 101
13218: PUSH
13219: LD_INT 102
13221: PUSH
13222: LD_INT 103
13224: PUSH
13225: LD_INT 104
13227: PUSH
13228: LD_INT 105
13230: PUSH
13231: LD_INT 106
13233: PUSH
13234: LD_INT 107
13236: PUSH
13237: LD_INT 108
13239: PUSH
13240: LD_INT 109
13242: PUSH
13243: LD_INT 110
13245: PUSH
13246: LD_INT 111
13248: PUSH
13249: LD_INT 112
13251: PUSH
13252: LD_INT 113
13254: PUSH
13255: LD_INT 114
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: ST_TO_ADDR
13278: GO 14445
13280: LD_INT 14
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13500
13288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13289: LD_ADDR_VAR 0 1
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 6
13311: PUSH
13312: LD_INT 7
13314: PUSH
13315: LD_INT 8
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: LD_INT 10
13323: PUSH
13324: LD_INT 11
13326: PUSH
13327: LD_INT 12
13329: PUSH
13330: LD_INT 13
13332: PUSH
13333: LD_INT 14
13335: PUSH
13336: LD_INT 15
13338: PUSH
13339: LD_INT 16
13341: PUSH
13342: LD_INT 17
13344: PUSH
13345: LD_INT 18
13347: PUSH
13348: LD_INT 19
13350: PUSH
13351: LD_INT 20
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 23
13362: PUSH
13363: LD_INT 24
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 26
13371: PUSH
13372: LD_INT 27
13374: PUSH
13375: LD_INT 28
13377: PUSH
13378: LD_INT 29
13380: PUSH
13381: LD_INT 30
13383: PUSH
13384: LD_INT 31
13386: PUSH
13387: LD_INT 32
13389: PUSH
13390: LD_INT 33
13392: PUSH
13393: LD_INT 34
13395: PUSH
13396: LD_INT 36
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 101
13438: PUSH
13439: LD_INT 102
13441: PUSH
13442: LD_INT 103
13444: PUSH
13445: LD_INT 104
13447: PUSH
13448: LD_INT 105
13450: PUSH
13451: LD_INT 106
13453: PUSH
13454: LD_INT 107
13456: PUSH
13457: LD_INT 108
13459: PUSH
13460: LD_INT 109
13462: PUSH
13463: LD_INT 110
13465: PUSH
13466: LD_INT 111
13468: PUSH
13469: LD_INT 112
13471: PUSH
13472: LD_INT 113
13474: PUSH
13475: LD_INT 114
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: ST_TO_ADDR
13498: GO 14445
13500: LD_INT 15
13502: DOUBLE
13503: EQUAL
13504: IFTRUE 13508
13506: GO 13720
13508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: LD_INT 2
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 6
13531: PUSH
13532: LD_INT 7
13534: PUSH
13535: LD_INT 8
13537: PUSH
13538: LD_INT 9
13540: PUSH
13541: LD_INT 10
13543: PUSH
13544: LD_INT 11
13546: PUSH
13547: LD_INT 12
13549: PUSH
13550: LD_INT 13
13552: PUSH
13553: LD_INT 14
13555: PUSH
13556: LD_INT 15
13558: PUSH
13559: LD_INT 16
13561: PUSH
13562: LD_INT 17
13564: PUSH
13565: LD_INT 18
13567: PUSH
13568: LD_INT 19
13570: PUSH
13571: LD_INT 20
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_INT 23
13582: PUSH
13583: LD_INT 24
13585: PUSH
13586: LD_INT 25
13588: PUSH
13589: LD_INT 26
13591: PUSH
13592: LD_INT 27
13594: PUSH
13595: LD_INT 28
13597: PUSH
13598: LD_INT 29
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_INT 31
13606: PUSH
13607: LD_INT 32
13609: PUSH
13610: LD_INT 33
13612: PUSH
13613: LD_INT 34
13615: PUSH
13616: LD_INT 36
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 103
13664: PUSH
13665: LD_INT 104
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 107
13676: PUSH
13677: LD_INT 108
13679: PUSH
13680: LD_INT 109
13682: PUSH
13683: LD_INT 110
13685: PUSH
13686: LD_INT 111
13688: PUSH
13689: LD_INT 112
13691: PUSH
13692: LD_INT 113
13694: PUSH
13695: LD_INT 114
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: ST_TO_ADDR
13718: GO 14445
13720: LD_INT 16
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 13852
13728: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13729: LD_ADDR_VAR 0 1
13733: PUSH
13734: LD_INT 2
13736: PUSH
13737: LD_INT 4
13739: PUSH
13740: LD_INT 5
13742: PUSH
13743: LD_INT 7
13745: PUSH
13746: LD_INT 11
13748: PUSH
13749: LD_INT 12
13751: PUSH
13752: LD_INT 15
13754: PUSH
13755: LD_INT 16
13757: PUSH
13758: LD_INT 20
13760: PUSH
13761: LD_INT 21
13763: PUSH
13764: LD_INT 22
13766: PUSH
13767: LD_INT 23
13769: PUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 26
13775: PUSH
13776: LD_INT 30
13778: PUSH
13779: LD_INT 31
13781: PUSH
13782: LD_INT 32
13784: PUSH
13785: LD_INT 33
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 101
13814: PUSH
13815: LD_INT 102
13817: PUSH
13818: LD_INT 103
13820: PUSH
13821: LD_INT 106
13823: PUSH
13824: LD_INT 108
13826: PUSH
13827: LD_INT 112
13829: PUSH
13830: LD_INT 113
13832: PUSH
13833: LD_INT 114
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
13850: GO 14445
13852: LD_INT 17
13854: DOUBLE
13855: EQUAL
13856: IFTRUE 13860
13858: GO 14072
13860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13861: LD_ADDR_VAR 0 1
13865: PUSH
13866: LD_INT 1
13868: PUSH
13869: LD_INT 2
13871: PUSH
13872: LD_INT 3
13874: PUSH
13875: LD_INT 4
13877: PUSH
13878: LD_INT 5
13880: PUSH
13881: LD_INT 6
13883: PUSH
13884: LD_INT 7
13886: PUSH
13887: LD_INT 8
13889: PUSH
13890: LD_INT 9
13892: PUSH
13893: LD_INT 10
13895: PUSH
13896: LD_INT 11
13898: PUSH
13899: LD_INT 12
13901: PUSH
13902: LD_INT 13
13904: PUSH
13905: LD_INT 14
13907: PUSH
13908: LD_INT 15
13910: PUSH
13911: LD_INT 16
13913: PUSH
13914: LD_INT 17
13916: PUSH
13917: LD_INT 18
13919: PUSH
13920: LD_INT 19
13922: PUSH
13923: LD_INT 20
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 22
13931: PUSH
13932: LD_INT 23
13934: PUSH
13935: LD_INT 24
13937: PUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 26
13943: PUSH
13944: LD_INT 27
13946: PUSH
13947: LD_INT 28
13949: PUSH
13950: LD_INT 29
13952: PUSH
13953: LD_INT 30
13955: PUSH
13956: LD_INT 31
13958: PUSH
13959: LD_INT 32
13961: PUSH
13962: LD_INT 33
13964: PUSH
13965: LD_INT 34
13967: PUSH
13968: LD_INT 36
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 101
14010: PUSH
14011: LD_INT 102
14013: PUSH
14014: LD_INT 103
14016: PUSH
14017: LD_INT 104
14019: PUSH
14020: LD_INT 105
14022: PUSH
14023: LD_INT 106
14025: PUSH
14026: LD_INT 107
14028: PUSH
14029: LD_INT 108
14031: PUSH
14032: LD_INT 109
14034: PUSH
14035: LD_INT 110
14037: PUSH
14038: LD_INT 111
14040: PUSH
14041: LD_INT 112
14043: PUSH
14044: LD_INT 113
14046: PUSH
14047: LD_INT 114
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: ST_TO_ADDR
14070: GO 14445
14072: LD_INT 18
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14216
14080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14081: LD_ADDR_VAR 0 1
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: LD_INT 5
14094: PUSH
14095: LD_INT 7
14097: PUSH
14098: LD_INT 11
14100: PUSH
14101: LD_INT 12
14103: PUSH
14104: LD_INT 15
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 20
14112: PUSH
14113: LD_INT 21
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 26
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 31
14133: PUSH
14134: LD_INT 32
14136: PUSH
14137: LD_INT 33
14139: PUSH
14140: LD_INT 34
14142: PUSH
14143: LD_INT 35
14145: PUSH
14146: LD_INT 36
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 101
14174: PUSH
14175: LD_INT 102
14177: PUSH
14178: LD_INT 103
14180: PUSH
14181: LD_INT 106
14183: PUSH
14184: LD_INT 108
14186: PUSH
14187: LD_INT 112
14189: PUSH
14190: LD_INT 113
14192: PUSH
14193: LD_INT 114
14195: PUSH
14196: LD_INT 115
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: ST_TO_ADDR
14214: GO 14445
14216: LD_INT 19
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14224
14222: GO 14444
14224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14225: LD_ADDR_VAR 0 1
14229: PUSH
14230: LD_INT 1
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 4
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: LD_INT 6
14247: PUSH
14248: LD_INT 7
14250: PUSH
14251: LD_INT 8
14253: PUSH
14254: LD_INT 9
14256: PUSH
14257: LD_INT 10
14259: PUSH
14260: LD_INT 11
14262: PUSH
14263: LD_INT 12
14265: PUSH
14266: LD_INT 13
14268: PUSH
14269: LD_INT 14
14271: PUSH
14272: LD_INT 15
14274: PUSH
14275: LD_INT 16
14277: PUSH
14278: LD_INT 17
14280: PUSH
14281: LD_INT 18
14283: PUSH
14284: LD_INT 19
14286: PUSH
14287: LD_INT 20
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 22
14295: PUSH
14296: LD_INT 23
14298: PUSH
14299: LD_INT 24
14301: PUSH
14302: LD_INT 25
14304: PUSH
14305: LD_INT 26
14307: PUSH
14308: LD_INT 27
14310: PUSH
14311: LD_INT 28
14313: PUSH
14314: LD_INT 29
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 31
14322: PUSH
14323: LD_INT 32
14325: PUSH
14326: LD_INT 33
14328: PUSH
14329: LD_INT 34
14331: PUSH
14332: LD_INT 35
14334: PUSH
14335: LD_INT 36
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 101
14378: PUSH
14379: LD_INT 102
14381: PUSH
14382: LD_INT 103
14384: PUSH
14385: LD_INT 104
14387: PUSH
14388: LD_INT 105
14390: PUSH
14391: LD_INT 106
14393: PUSH
14394: LD_INT 107
14396: PUSH
14397: LD_INT 108
14399: PUSH
14400: LD_INT 109
14402: PUSH
14403: LD_INT 110
14405: PUSH
14406: LD_INT 111
14408: PUSH
14409: LD_INT 112
14411: PUSH
14412: LD_INT 113
14414: PUSH
14415: LD_INT 114
14417: PUSH
14418: LD_INT 115
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: ST_TO_ADDR
14442: GO 14445
14444: POP
// end ; if result then
14445: LD_VAR 0 1
14449: IFFALSE 14738
// begin normal :=  ;
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_STRING 
14458: ST_TO_ADDR
// hardcore :=  ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_STRING 
14466: ST_TO_ADDR
// for i = 1 to normalCounter do
14467: LD_ADDR_VAR 0 5
14471: PUSH
14472: DOUBLE
14473: LD_INT 1
14475: DEC
14476: ST_TO_ADDR
14477: LD_EXP 25
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14584
// begin tmp := 0 ;
14485: LD_ADDR_VAR 0 2
14489: PUSH
14490: LD_STRING 0
14492: ST_TO_ADDR
// if result [ 1 ] then
14493: LD_VAR 0 1
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: IFFALSE 14566
// if result [ 1 ] [ 1 ] = i then
14503: LD_VAR 0 1
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PUSH
14516: LD_VAR 0 5
14520: EQUAL
14521: IFFALSE 14566
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14523: LD_ADDR_VAR 0 1
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_VAR 0 1
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: LD_INT 1
14547: PPUSH
14548: CALL_OW 3
14552: PPUSH
14553: CALL_OW 1
14557: ST_TO_ADDR
// tmp := 1 ;
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: LD_STRING 1
14565: ST_TO_ADDR
// end ; normal := normal & tmp ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_VAR 0 3
14575: PUSH
14576: LD_VAR 0 2
14580: STR
14581: ST_TO_ADDR
// end ;
14582: GO 14482
14584: POP
14585: POP
// for i = 1 to hardcoreCounter do
14586: LD_ADDR_VAR 0 5
14590: PUSH
14591: DOUBLE
14592: LD_INT 1
14594: DEC
14595: ST_TO_ADDR
14596: LD_EXP 26
14600: PUSH
14601: FOR_TO
14602: IFFALSE 14707
// begin tmp := 0 ;
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_STRING 0
14611: ST_TO_ADDR
// if result [ 2 ] then
14612: LD_VAR 0 1
14616: PUSH
14617: LD_INT 2
14619: ARRAY
14620: IFFALSE 14689
// if result [ 2 ] [ 1 ] = 100 + i then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_INT 2
14629: ARRAY
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PUSH
14635: LD_INT 100
14637: PUSH
14638: LD_VAR 0 5
14642: PLUS
14643: EQUAL
14644: IFFALSE 14689
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: LD_INT 2
14658: PPUSH
14659: LD_VAR 0 1
14663: PUSH
14664: LD_INT 2
14666: ARRAY
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 3
14675: PPUSH
14676: CALL_OW 1
14680: ST_TO_ADDR
// tmp := 1 ;
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_STRING 1
14688: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14689: LD_ADDR_VAR 0 4
14693: PUSH
14694: LD_VAR 0 4
14698: PUSH
14699: LD_VAR 0 2
14703: STR
14704: ST_TO_ADDR
// end ;
14705: GO 14601
14707: POP
14708: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14709: LD_STRING getStreamItemsFromMission("
14711: PUSH
14712: LD_VAR 0 3
14716: STR
14717: PUSH
14718: LD_STRING ","
14720: STR
14721: PUSH
14722: LD_VAR 0 4
14726: STR
14727: PUSH
14728: LD_STRING ")
14730: STR
14731: PPUSH
14732: CALL_OW 559
// end else
14736: GO 14745
// ToLua ( getStreamItemsFromMission("","") ) ;
14738: LD_STRING getStreamItemsFromMission("","")
14740: PPUSH
14741: CALL_OW 559
// end ;
14745: LD_VAR 0 1
14749: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14750: LD_VAR 0 2
14754: PUSH
14755: LD_INT 100
14757: EQUAL
14758: IFFALSE 15707
// begin if not StreamModeActive then
14760: LD_EXP 24
14764: NOT
14765: IFFALSE 14775
// StreamModeActive := true ;
14767: LD_ADDR_EXP 24
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if p3 = 0 then
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 0
14782: EQUAL
14783: IFFALSE 14789
// InitStreamMode ;
14785: CALL 11035 0 0
// if p3 = 1 then
14789: LD_VAR 0 3
14793: PUSH
14794: LD_INT 1
14796: EQUAL
14797: IFFALSE 14807
// sRocket := true ;
14799: LD_ADDR_EXP 29
14803: PUSH
14804: LD_INT 1
14806: ST_TO_ADDR
// if p3 = 2 then
14807: LD_VAR 0 3
14811: PUSH
14812: LD_INT 2
14814: EQUAL
14815: IFFALSE 14825
// sSpeed := true ;
14817: LD_ADDR_EXP 28
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// if p3 = 3 then
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: IFFALSE 14843
// sEngine := true ;
14835: LD_ADDR_EXP 30
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// if p3 = 4 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 4
14850: EQUAL
14851: IFFALSE 14861
// sSpec := true ;
14853: LD_ADDR_EXP 27
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// if p3 = 5 then
14861: LD_VAR 0 3
14865: PUSH
14866: LD_INT 5
14868: EQUAL
14869: IFFALSE 14879
// sLevel := true ;
14871: LD_ADDR_EXP 31
14875: PUSH
14876: LD_INT 1
14878: ST_TO_ADDR
// if p3 = 6 then
14879: LD_VAR 0 3
14883: PUSH
14884: LD_INT 6
14886: EQUAL
14887: IFFALSE 14897
// sArmoury := true ;
14889: LD_ADDR_EXP 32
14893: PUSH
14894: LD_INT 1
14896: ST_TO_ADDR
// if p3 = 7 then
14897: LD_VAR 0 3
14901: PUSH
14902: LD_INT 7
14904: EQUAL
14905: IFFALSE 14915
// sRadar := true ;
14907: LD_ADDR_EXP 33
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// if p3 = 8 then
14915: LD_VAR 0 3
14919: PUSH
14920: LD_INT 8
14922: EQUAL
14923: IFFALSE 14933
// sBunker := true ;
14925: LD_ADDR_EXP 34
14929: PUSH
14930: LD_INT 1
14932: ST_TO_ADDR
// if p3 = 9 then
14933: LD_VAR 0 3
14937: PUSH
14938: LD_INT 9
14940: EQUAL
14941: IFFALSE 14951
// sHack := true ;
14943: LD_ADDR_EXP 35
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// if p3 = 10 then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 10
14958: EQUAL
14959: IFFALSE 14969
// sFire := true ;
14961: LD_ADDR_EXP 36
14965: PUSH
14966: LD_INT 1
14968: ST_TO_ADDR
// if p3 = 11 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 11
14976: EQUAL
14977: IFFALSE 14987
// sRefresh := true ;
14979: LD_ADDR_EXP 37
14983: PUSH
14984: LD_INT 1
14986: ST_TO_ADDR
// if p3 = 12 then
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 12
14994: EQUAL
14995: IFFALSE 15005
// sExp := true ;
14997: LD_ADDR_EXP 38
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// if p3 = 13 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 13
15012: EQUAL
15013: IFFALSE 15023
// sDepot := true ;
15015: LD_ADDR_EXP 39
15019: PUSH
15020: LD_INT 1
15022: ST_TO_ADDR
// if p3 = 14 then
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 14
15030: EQUAL
15031: IFFALSE 15041
// sFlag := true ;
15033: LD_ADDR_EXP 40
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// if p3 = 15 then
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 15
15048: EQUAL
15049: IFFALSE 15059
// sKamikadze := true ;
15051: LD_ADDR_EXP 48
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if p3 = 16 then
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 16
15066: EQUAL
15067: IFFALSE 15077
// sTroll := true ;
15069: LD_ADDR_EXP 49
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// if p3 = 17 then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 17
15084: EQUAL
15085: IFFALSE 15095
// sSlow := true ;
15087: LD_ADDR_EXP 50
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 18 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 18
15102: EQUAL
15103: IFFALSE 15113
// sLack := true ;
15105: LD_ADDR_EXP 51
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// if p3 = 19 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 19
15120: EQUAL
15121: IFFALSE 15131
// sTank := true ;
15123: LD_ADDR_EXP 53
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 20 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 20
15138: EQUAL
15139: IFFALSE 15149
// sRemote := true ;
15141: LD_ADDR_EXP 54
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// if p3 = 21 then
15149: LD_VAR 0 3
15153: PUSH
15154: LD_INT 21
15156: EQUAL
15157: IFFALSE 15167
// sPowell := true ;
15159: LD_ADDR_EXP 55
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// if p3 = 22 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_INT 22
15174: EQUAL
15175: IFFALSE 15185
// sTeleport := true ;
15177: LD_ADDR_EXP 58
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 23 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 23
15192: EQUAL
15193: IFFALSE 15203
// sOilTower := true ;
15195: LD_ADDR_EXP 60
15199: PUSH
15200: LD_INT 1
15202: ST_TO_ADDR
// if p3 = 24 then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_INT 24
15210: EQUAL
15211: IFFALSE 15221
// sShovel := true ;
15213: LD_ADDR_EXP 61
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// if p3 = 25 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 25
15228: EQUAL
15229: IFFALSE 15239
// sSheik := true ;
15231: LD_ADDR_EXP 62
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 26 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 26
15246: EQUAL
15247: IFFALSE 15257
// sEarthquake := true ;
15249: LD_ADDR_EXP 64
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 27 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 27
15264: EQUAL
15265: IFFALSE 15275
// sAI := true ;
15267: LD_ADDR_EXP 65
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 28 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 28
15282: EQUAL
15283: IFFALSE 15293
// sCargo := true ;
15285: LD_ADDR_EXP 68
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 29 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 29
15300: EQUAL
15301: IFFALSE 15311
// sDLaser := true ;
15303: LD_ADDR_EXP 69
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 30 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 30
15318: EQUAL
15319: IFFALSE 15329
// sExchange := true ;
15321: LD_ADDR_EXP 70
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 31 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 31
15336: EQUAL
15337: IFFALSE 15347
// sFac := true ;
15339: LD_ADDR_EXP 71
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 32 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 32
15354: EQUAL
15355: IFFALSE 15365
// sPower := true ;
15357: LD_ADDR_EXP 72
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 33 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 33
15372: EQUAL
15373: IFFALSE 15383
// sRandom := true ;
15375: LD_ADDR_EXP 73
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 34 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 34
15390: EQUAL
15391: IFFALSE 15401
// sShield := true ;
15393: LD_ADDR_EXP 74
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 35 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 35
15408: EQUAL
15409: IFFALSE 15419
// sTime := true ;
15411: LD_ADDR_EXP 75
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 36 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 36
15426: EQUAL
15427: IFFALSE 15437
// sTools := true ;
15429: LD_ADDR_EXP 76
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 101 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 101
15444: EQUAL
15445: IFFALSE 15455
// sSold := true ;
15447: LD_ADDR_EXP 41
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 102 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 102
15462: EQUAL
15463: IFFALSE 15473
// sDiff := true ;
15465: LD_ADDR_EXP 42
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 103 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 103
15480: EQUAL
15481: IFFALSE 15491
// sFog := true ;
15483: LD_ADDR_EXP 45
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 104 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 104
15498: EQUAL
15499: IFFALSE 15509
// sReset := true ;
15501: LD_ADDR_EXP 46
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 105 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 105
15516: EQUAL
15517: IFFALSE 15527
// sSun := true ;
15519: LD_ADDR_EXP 47
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 106 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 106
15534: EQUAL
15535: IFFALSE 15545
// sTiger := true ;
15537: LD_ADDR_EXP 43
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 107 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 107
15552: EQUAL
15553: IFFALSE 15563
// sBomb := true ;
15555: LD_ADDR_EXP 44
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if p3 = 108 then
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 108
15570: EQUAL
15571: IFFALSE 15581
// sWound := true ;
15573: LD_ADDR_EXP 52
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if p3 = 109 then
15581: LD_VAR 0 3
15585: PUSH
15586: LD_INT 109
15588: EQUAL
15589: IFFALSE 15599
// sBetray := true ;
15591: LD_ADDR_EXP 56
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// if p3 = 110 then
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 110
15606: EQUAL
15607: IFFALSE 15617
// sContamin := true ;
15609: LD_ADDR_EXP 57
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// if p3 = 111 then
15617: LD_VAR 0 3
15621: PUSH
15622: LD_INT 111
15624: EQUAL
15625: IFFALSE 15635
// sOil := true ;
15627: LD_ADDR_EXP 59
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// if p3 = 112 then
15635: LD_VAR 0 3
15639: PUSH
15640: LD_INT 112
15642: EQUAL
15643: IFFALSE 15653
// sStu := true ;
15645: LD_ADDR_EXP 63
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// if p3 = 113 then
15653: LD_VAR 0 3
15657: PUSH
15658: LD_INT 113
15660: EQUAL
15661: IFFALSE 15671
// sBazooka := true ;
15663: LD_ADDR_EXP 66
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// if p3 = 114 then
15671: LD_VAR 0 3
15675: PUSH
15676: LD_INT 114
15678: EQUAL
15679: IFFALSE 15689
// sMortar := true ;
15681: LD_ADDR_EXP 67
15685: PUSH
15686: LD_INT 1
15688: ST_TO_ADDR
// if p3 = 115 then
15689: LD_VAR 0 3
15693: PUSH
15694: LD_INT 115
15696: EQUAL
15697: IFFALSE 15707
// sRanger := true ;
15699: LD_ADDR_EXP 77
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
// end ; end ;
15707: PPOPN 6
15709: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15710: LD_EXP 24
15714: PUSH
15715: LD_EXP 29
15719: AND
15720: IFFALSE 15844
15722: GO 15724
15724: DISABLE
15725: LD_INT 0
15727: PPUSH
15728: PPUSH
// begin enable ;
15729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: LD_INT 22
15737: PUSH
15738: LD_OWVAR 2
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: LD_INT 34
15752: PUSH
15753: LD_INT 7
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 34
15762: PUSH
15763: LD_INT 45
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 34
15772: PUSH
15773: LD_INT 28
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 34
15782: PUSH
15783: LD_INT 47
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 69
15805: ST_TO_ADDR
// if not tmp then
15806: LD_VAR 0 2
15810: NOT
15811: IFFALSE 15815
// exit ;
15813: GO 15844
// for i in tmp do
15815: LD_ADDR_VAR 0 1
15819: PUSH
15820: LD_VAR 0 2
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15842
// begin SetLives ( i , 0 ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: LD_INT 0
15835: PPUSH
15836: CALL_OW 234
// end ;
15840: GO 15825
15842: POP
15843: POP
// end ;
15844: PPOPN 2
15846: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15847: LD_EXP 24
15851: PUSH
15852: LD_EXP 30
15856: AND
15857: IFFALSE 15941
15859: GO 15861
15861: DISABLE
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
// begin enable ;
15866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15867: LD_ADDR_VAR 0 2
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_OWVAR 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 32
15886: PUSH
15887: LD_INT 3
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: ST_TO_ADDR
// if not tmp then
15903: LD_VAR 0 2
15907: NOT
15908: IFFALSE 15912
// exit ;
15910: GO 15941
// for i in tmp do
15912: LD_ADDR_VAR 0 1
15916: PUSH
15917: LD_VAR 0 2
15921: PUSH
15922: FOR_IN
15923: IFFALSE 15939
// begin SetLives ( i , 0 ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: LD_INT 0
15932: PPUSH
15933: CALL_OW 234
// end ;
15937: GO 15922
15939: POP
15940: POP
// end ;
15941: PPOPN 2
15943: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15944: LD_EXP 24
15948: PUSH
15949: LD_EXP 27
15953: AND
15954: IFFALSE 16047
15956: GO 15958
15958: DISABLE
15959: LD_INT 0
15961: PPUSH
// begin enable ;
15962: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_OWVAR 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 25
15985: PUSH
15986: LD_INT 5
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 25
15995: PUSH
15996: LD_INT 9
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 25
16005: PUSH
16006: LD_INT 8
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PPUSH
16023: CALL_OW 69
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16045
// begin SetClass ( i , 1 ) ;
16031: LD_VAR 0 1
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 336
// end ;
16043: GO 16028
16045: POP
16046: POP
// end ;
16047: PPOPN 1
16049: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16050: LD_EXP 24
16054: PUSH
16055: LD_EXP 28
16059: AND
16060: PUSH
16061: LD_OWVAR 65
16065: PUSH
16066: LD_INT 7
16068: LESS
16069: AND
16070: IFFALSE 16084
16072: GO 16074
16074: DISABLE
// begin enable ;
16075: ENABLE
// game_speed := 7 ;
16076: LD_ADDR_OWVAR 65
16080: PUSH
16081: LD_INT 7
16083: ST_TO_ADDR
// end ;
16084: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16085: LD_EXP 24
16089: PUSH
16090: LD_EXP 31
16094: AND
16095: IFFALSE 16297
16097: GO 16099
16099: DISABLE
16100: LD_INT 0
16102: PPUSH
16103: PPUSH
16104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_INT 81
16112: PUSH
16113: LD_OWVAR 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 21
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PPUSH
16136: CALL_OW 69
16140: ST_TO_ADDR
// if not tmp then
16141: LD_VAR 0 3
16145: NOT
16146: IFFALSE 16150
// exit ;
16148: GO 16297
// if tmp > 5 then
16150: LD_VAR 0 3
16154: PUSH
16155: LD_INT 5
16157: GREATER
16158: IFFALSE 16170
// k := 5 else
16160: LD_ADDR_VAR 0 2
16164: PUSH
16165: LD_INT 5
16167: ST_TO_ADDR
16168: GO 16180
// k := tmp ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_VAR 0 3
16179: ST_TO_ADDR
// for i := 1 to k do
16180: LD_ADDR_VAR 0 1
16184: PUSH
16185: DOUBLE
16186: LD_INT 1
16188: DEC
16189: ST_TO_ADDR
16190: LD_VAR 0 2
16194: PUSH
16195: FOR_TO
16196: IFFALSE 16295
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16198: LD_VAR 0 3
16202: PUSH
16203: LD_VAR 0 1
16207: ARRAY
16208: PPUSH
16209: LD_VAR 0 1
16213: PUSH
16214: LD_INT 4
16216: MOD
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: CALL_OW 259
16226: PUSH
16227: LD_INT 10
16229: LESS
16230: IFFALSE 16293
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16232: LD_VAR 0 3
16236: PUSH
16237: LD_VAR 0 1
16241: ARRAY
16242: PPUSH
16243: LD_VAR 0 1
16247: PUSH
16248: LD_INT 4
16250: MOD
16251: PUSH
16252: LD_INT 1
16254: PLUS
16255: PPUSH
16256: LD_VAR 0 3
16260: PUSH
16261: LD_VAR 0 1
16265: ARRAY
16266: PPUSH
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 4
16274: MOD
16275: PUSH
16276: LD_INT 1
16278: PLUS
16279: PPUSH
16280: CALL_OW 259
16284: PUSH
16285: LD_INT 1
16287: PLUS
16288: PPUSH
16289: CALL_OW 237
16293: GO 16195
16295: POP
16296: POP
// end ;
16297: PPOPN 3
16299: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16300: LD_EXP 24
16304: PUSH
16305: LD_EXP 32
16309: AND
16310: IFFALSE 16330
16312: GO 16314
16314: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16315: LD_INT 4
16317: PPUSH
16318: LD_OWVAR 2
16322: PPUSH
16323: LD_INT 0
16325: PPUSH
16326: CALL_OW 324
16330: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16331: LD_EXP 24
16335: PUSH
16336: LD_EXP 61
16340: AND
16341: IFFALSE 16361
16343: GO 16345
16345: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16346: LD_INT 19
16348: PPUSH
16349: LD_OWVAR 2
16353: PPUSH
16354: LD_INT 0
16356: PPUSH
16357: CALL_OW 324
16361: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16362: LD_EXP 24
16366: PUSH
16367: LD_EXP 33
16371: AND
16372: IFFALSE 16474
16374: GO 16376
16376: DISABLE
16377: LD_INT 0
16379: PPUSH
16380: PPUSH
// begin enable ;
16381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16382: LD_ADDR_VAR 0 2
16386: PUSH
16387: LD_INT 22
16389: PUSH
16390: LD_OWVAR 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 2
16401: PUSH
16402: LD_INT 34
16404: PUSH
16405: LD_INT 11
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 34
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PPUSH
16431: CALL_OW 69
16435: ST_TO_ADDR
// if not tmp then
16436: LD_VAR 0 2
16440: NOT
16441: IFFALSE 16445
// exit ;
16443: GO 16474
// for i in tmp do
16445: LD_ADDR_VAR 0 1
16449: PUSH
16450: LD_VAR 0 2
16454: PUSH
16455: FOR_IN
16456: IFFALSE 16472
// begin SetLives ( i , 0 ) ;
16458: LD_VAR 0 1
16462: PPUSH
16463: LD_INT 0
16465: PPUSH
16466: CALL_OW 234
// end ;
16470: GO 16455
16472: POP
16473: POP
// end ;
16474: PPOPN 2
16476: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16477: LD_EXP 24
16481: PUSH
16482: LD_EXP 34
16486: AND
16487: IFFALSE 16507
16489: GO 16491
16491: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16492: LD_INT 32
16494: PPUSH
16495: LD_OWVAR 2
16499: PPUSH
16500: LD_INT 0
16502: PPUSH
16503: CALL_OW 324
16507: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16508: LD_EXP 24
16512: PUSH
16513: LD_EXP 35
16517: AND
16518: IFFALSE 16699
16520: GO 16522
16522: DISABLE
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
16527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16528: LD_ADDR_VAR 0 2
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_OWVAR 2
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 33
16547: PUSH
16548: LD_INT 3
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 69
16563: ST_TO_ADDR
// if not tmp then
16564: LD_VAR 0 2
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 16699
// side := 0 ;
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_INT 0
16580: ST_TO_ADDR
// for i := 1 to 8 do
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: DOUBLE
16587: LD_INT 1
16589: DEC
16590: ST_TO_ADDR
16591: LD_INT 8
16593: PUSH
16594: FOR_TO
16595: IFFALSE 16643
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16597: LD_OWVAR 2
16601: PUSH
16602: LD_VAR 0 1
16606: NONEQUAL
16607: PUSH
16608: LD_OWVAR 2
16612: PPUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 81
16622: PUSH
16623: LD_INT 2
16625: EQUAL
16626: AND
16627: IFFALSE 16641
// begin side := i ;
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_VAR 0 1
16638: ST_TO_ADDR
// break ;
16639: GO 16643
// end ;
16641: GO 16594
16643: POP
16644: POP
// if not side then
16645: LD_VAR 0 3
16649: NOT
16650: IFFALSE 16654
// exit ;
16652: GO 16699
// for i := 1 to tmp do
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: DOUBLE
16660: LD_INT 1
16662: DEC
16663: ST_TO_ADDR
16664: LD_VAR 0 2
16668: PUSH
16669: FOR_TO
16670: IFFALSE 16697
// if Prob ( 30 ) then
16672: LD_INT 30
16674: PPUSH
16675: CALL_OW 13
16679: IFFALSE 16695
// SetSide ( i , side ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_VAR 0 3
16690: PPUSH
16691: CALL_OW 235
16695: GO 16669
16697: POP
16698: POP
// end ;
16699: PPOPN 3
16701: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16702: LD_EXP 24
16706: PUSH
16707: LD_EXP 37
16711: AND
16712: IFFALSE 16831
16714: GO 16716
16716: DISABLE
16717: LD_INT 0
16719: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16720: LD_ADDR_VAR 0 1
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_OWVAR 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: LD_INT 23
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16829
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16777: LD_VAR 0 1
16781: PPUSH
16782: CALL_OW 257
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: IN
16805: IFFALSE 16827
// SetClass ( un , rand ( 1 , 4 ) ) ;
16807: LD_VAR 0 1
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: LD_INT 4
16817: PPUSH
16818: CALL_OW 12
16822: PPUSH
16823: CALL_OW 336
16827: GO 16774
16829: POP
16830: POP
// end ;
16831: PPOPN 1
16833: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16834: LD_EXP 24
16838: PUSH
16839: LD_EXP 36
16843: AND
16844: IFFALSE 16923
16846: GO 16848
16848: DISABLE
16849: LD_INT 0
16851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_INT 22
16859: PUSH
16860: LD_OWVAR 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 3
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: ST_TO_ADDR
// if not tmp then
16888: LD_VAR 0 1
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 16923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16897: LD_VAR 0 1
16901: PUSH
16902: LD_INT 1
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 12
16914: ARRAY
16915: PPUSH
16916: LD_INT 100
16918: PPUSH
16919: CALL_OW 234
// end ;
16923: PPOPN 1
16925: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16926: LD_EXP 24
16930: PUSH
16931: LD_EXP 38
16935: AND
16936: IFFALSE 17034
16938: GO 16940
16940: DISABLE
16941: LD_INT 0
16943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16944: LD_ADDR_VAR 0 1
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_OWVAR 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 21
16963: PUSH
16964: LD_INT 1
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PPUSH
16975: CALL_OW 69
16979: ST_TO_ADDR
// if not tmp then
16980: LD_VAR 0 1
16984: NOT
16985: IFFALSE 16989
// exit ;
16987: GO 17034
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16989: LD_VAR 0 1
16993: PUSH
16994: LD_INT 1
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 12
17006: ARRAY
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: LD_INT 4
17013: PPUSH
17014: CALL_OW 12
17018: PPUSH
17019: LD_INT 3000
17021: PPUSH
17022: LD_INT 9000
17024: PPUSH
17025: CALL_OW 12
17029: PPUSH
17030: CALL_OW 492
// end ;
17034: PPOPN 1
17036: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17037: LD_EXP 24
17041: PUSH
17042: LD_EXP 39
17046: AND
17047: IFFALSE 17067
17049: GO 17051
17051: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17052: LD_INT 1
17054: PPUSH
17055: LD_OWVAR 2
17059: PPUSH
17060: LD_INT 0
17062: PPUSH
17063: CALL_OW 324
17067: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17068: LD_EXP 24
17072: PUSH
17073: LD_EXP 40
17077: AND
17078: IFFALSE 17161
17080: GO 17082
17082: DISABLE
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_OWVAR 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 21
17106: PUSH
17107: LD_INT 3
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PPUSH
17118: CALL_OW 69
17122: ST_TO_ADDR
// if not tmp then
17123: LD_VAR 0 2
17127: NOT
17128: IFFALSE 17132
// exit ;
17130: GO 17161
// for i in tmp do
17132: LD_ADDR_VAR 0 1
17136: PUSH
17137: LD_VAR 0 2
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17159
// SetBLevel ( i , 10 ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_INT 10
17152: PPUSH
17153: CALL_OW 241
17157: GO 17142
17159: POP
17160: POP
// end ;
17161: PPOPN 2
17163: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17164: LD_EXP 24
17168: PUSH
17169: LD_EXP 41
17173: AND
17174: IFFALSE 17285
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
17183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17184: LD_ADDR_VAR 0 3
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_OWVAR 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 25
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: ST_TO_ADDR
// if not tmp then
17220: LD_VAR 0 3
17224: NOT
17225: IFFALSE 17229
// exit ;
17227: GO 17285
// un := tmp [ rand ( 1 , tmp ) ] ;
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 1
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: CALL_OW 12
17251: ARRAY
17252: ST_TO_ADDR
// if Crawls ( un ) then
17253: LD_VAR 0 2
17257: PPUSH
17258: CALL_OW 318
17262: IFFALSE 17273
// ComWalk ( un ) ;
17264: LD_VAR 0 2
17268: PPUSH
17269: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17273: LD_VAR 0 2
17277: PPUSH
17278: LD_INT 5
17280: PPUSH
17281: CALL_OW 336
// end ;
17285: PPOPN 3
17287: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17288: LD_EXP 24
17292: PUSH
17293: LD_EXP 42
17297: AND
17298: PUSH
17299: LD_OWVAR 67
17303: PUSH
17304: LD_INT 3
17306: LESS
17307: AND
17308: IFFALSE 17327
17310: GO 17312
17312: DISABLE
// Difficulty := Difficulty + 1 ;
17313: LD_ADDR_OWVAR 67
17317: PUSH
17318: LD_OWVAR 67
17322: PUSH
17323: LD_INT 1
17325: PLUS
17326: ST_TO_ADDR
17327: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17328: LD_EXP 24
17332: PUSH
17333: LD_EXP 43
17337: AND
17338: IFFALSE 17441
17340: GO 17342
17342: DISABLE
17343: LD_INT 0
17345: PPUSH
// begin for i := 1 to 5 do
17346: LD_ADDR_VAR 0 1
17350: PUSH
17351: DOUBLE
17352: LD_INT 1
17354: DEC
17355: ST_TO_ADDR
17356: LD_INT 5
17358: PUSH
17359: FOR_TO
17360: IFFALSE 17439
// begin uc_nation := nation_nature ;
17362: LD_ADDR_OWVAR 21
17366: PUSH
17367: LD_INT 0
17369: ST_TO_ADDR
// uc_side := 0 ;
17370: LD_ADDR_OWVAR 20
17374: PUSH
17375: LD_INT 0
17377: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17378: LD_ADDR_OWVAR 29
17382: PUSH
17383: LD_INT 12
17385: PUSH
17386: LD_INT 12
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: ST_TO_ADDR
// hc_agressivity := 20 ;
17393: LD_ADDR_OWVAR 35
17397: PUSH
17398: LD_INT 20
17400: ST_TO_ADDR
// hc_class := class_tiger ;
17401: LD_ADDR_OWVAR 28
17405: PUSH
17406: LD_INT 14
17408: ST_TO_ADDR
// hc_gallery :=  ;
17409: LD_ADDR_OWVAR 33
17413: PUSH
17414: LD_STRING 
17416: ST_TO_ADDR
// hc_name :=  ;
17417: LD_ADDR_OWVAR 26
17421: PUSH
17422: LD_STRING 
17424: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17425: CALL_OW 44
17429: PPUSH
17430: LD_INT 0
17432: PPUSH
17433: CALL_OW 51
// end ;
17437: GO 17359
17439: POP
17440: POP
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17444: LD_EXP 24
17448: PUSH
17449: LD_EXP 44
17453: AND
17454: IFFALSE 17463
17456: GO 17458
17458: DISABLE
// StreamSibBomb ;
17459: CALL 17464 0 0
17463: END
// export function StreamSibBomb ; var i , x , y ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
// result := false ;
17470: LD_ADDR_VAR 0 1
17474: PUSH
17475: LD_INT 0
17477: ST_TO_ADDR
// for i := 1 to 16 do
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: DOUBLE
17484: LD_INT 1
17486: DEC
17487: ST_TO_ADDR
17488: LD_INT 16
17490: PUSH
17491: FOR_TO
17492: IFFALSE 17691
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_INT 10
17501: PUSH
17502: LD_INT 20
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 40
17510: PUSH
17511: LD_INT 50
17513: PUSH
17514: LD_INT 60
17516: PUSH
17517: LD_INT 70
17519: PUSH
17520: LD_INT 80
17522: PUSH
17523: LD_INT 90
17525: PUSH
17526: LD_INT 100
17528: PUSH
17529: LD_INT 110
17531: PUSH
17532: LD_INT 120
17534: PUSH
17535: LD_INT 130
17537: PUSH
17538: LD_INT 140
17540: PUSH
17541: LD_INT 150
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_INT 15
17566: PPUSH
17567: CALL_OW 12
17571: ARRAY
17572: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: LD_INT 10
17580: PUSH
17581: LD_INT 20
17583: PUSH
17584: LD_INT 30
17586: PUSH
17587: LD_INT 40
17589: PUSH
17590: LD_INT 50
17592: PUSH
17593: LD_INT 60
17595: PUSH
17596: LD_INT 70
17598: PUSH
17599: LD_INT 80
17601: PUSH
17602: LD_INT 90
17604: PUSH
17605: LD_INT 100
17607: PUSH
17608: LD_INT 110
17610: PUSH
17611: LD_INT 120
17613: PUSH
17614: LD_INT 130
17616: PUSH
17617: LD_INT 140
17619: PUSH
17620: LD_INT 150
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PPUSH
17643: LD_INT 15
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// if ValidHex ( x , y ) then
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_VAR 0 4
17661: PPUSH
17662: CALL_OW 488
17666: IFFALSE 17689
// begin result := [ x , y ] ;
17668: LD_ADDR_VAR 0 1
17672: PUSH
17673: LD_VAR 0 3
17677: PUSH
17678: LD_VAR 0 4
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: ST_TO_ADDR
// break ;
17687: GO 17691
// end ; end ;
17689: GO 17491
17691: POP
17692: POP
// if result then
17693: LD_VAR 0 1
17697: IFFALSE 17757
// begin ToLua ( playSibBomb() ) ;
17699: LD_STRING playSibBomb()
17701: PPUSH
17702: CALL_OW 559
// wait ( 0 0$14 ) ;
17706: LD_INT 490
17708: PPUSH
17709: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17713: LD_VAR 0 1
17717: PUSH
17718: LD_INT 1
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 1
17726: PUSH
17727: LD_INT 2
17729: ARRAY
17730: PPUSH
17731: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 1
17742: ARRAY
17743: PPUSH
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 2
17751: ARRAY
17752: PPUSH
17753: CALL_OW 429
// end ; end ;
17757: LD_VAR 0 1
17761: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17762: LD_EXP 24
17766: PUSH
17767: LD_EXP 46
17771: AND
17772: IFFALSE 17784
17774: GO 17776
17776: DISABLE
// YouLost (  ) ;
17777: LD_STRING 
17779: PPUSH
17780: CALL_OW 104
17784: END
// every 0 0$1 trigger StreamModeActive and sFog do
17785: LD_EXP 24
17789: PUSH
17790: LD_EXP 45
17794: AND
17795: IFFALSE 17809
17797: GO 17799
17799: DISABLE
// FogOff ( your_side ) ;
17800: LD_OWVAR 2
17804: PPUSH
17805: CALL_OW 344
17809: END
// every 0 0$1 trigger StreamModeActive and sSun do
17810: LD_EXP 24
17814: PUSH
17815: LD_EXP 47
17819: AND
17820: IFFALSE 17848
17822: GO 17824
17824: DISABLE
// begin solar_recharge_percent := 0 ;
17825: LD_ADDR_OWVAR 79
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17833: LD_INT 10500
17835: PPUSH
17836: CALL_OW 67
// solar_recharge_percent := 100 ;
17840: LD_ADDR_OWVAR 79
17844: PUSH
17845: LD_INT 100
17847: ST_TO_ADDR
// end ;
17848: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17849: LD_EXP 24
17853: PUSH
17854: LD_EXP 48
17858: AND
17859: IFFALSE 18098
17861: GO 17863
17863: DISABLE
17864: LD_INT 0
17866: PPUSH
17867: PPUSH
17868: PPUSH
// begin tmp := [ ] ;
17869: LD_ADDR_VAR 0 3
17873: PUSH
17874: EMPTY
17875: ST_TO_ADDR
// for i := 1 to 6 do
17876: LD_ADDR_VAR 0 1
17880: PUSH
17881: DOUBLE
17882: LD_INT 1
17884: DEC
17885: ST_TO_ADDR
17886: LD_INT 6
17888: PUSH
17889: FOR_TO
17890: IFFALSE 17995
// begin uc_nation := nation_nature ;
17892: LD_ADDR_OWVAR 21
17896: PUSH
17897: LD_INT 0
17899: ST_TO_ADDR
// uc_side := 0 ;
17900: LD_ADDR_OWVAR 20
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17908: LD_ADDR_OWVAR 29
17912: PUSH
17913: LD_INT 12
17915: PUSH
17916: LD_INT 12
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: ST_TO_ADDR
// hc_agressivity := 20 ;
17923: LD_ADDR_OWVAR 35
17927: PUSH
17928: LD_INT 20
17930: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17931: LD_ADDR_OWVAR 28
17935: PUSH
17936: LD_INT 17
17938: ST_TO_ADDR
// hc_gallery :=  ;
17939: LD_ADDR_OWVAR 33
17943: PUSH
17944: LD_STRING 
17946: ST_TO_ADDR
// hc_name :=  ;
17947: LD_ADDR_OWVAR 26
17951: PUSH
17952: LD_STRING 
17954: ST_TO_ADDR
// un := CreateHuman ;
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: CALL_OW 44
17964: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17965: LD_VAR 0 2
17969: PPUSH
17970: LD_INT 1
17972: PPUSH
17973: CALL_OW 51
// tmp := tmp ^ un ;
17977: LD_ADDR_VAR 0 3
17981: PUSH
17982: LD_VAR 0 3
17986: PUSH
17987: LD_VAR 0 2
17991: ADD
17992: ST_TO_ADDR
// end ;
17993: GO 17889
17995: POP
17996: POP
// repeat wait ( 0 0$1 ) ;
17997: LD_INT 35
17999: PPUSH
18000: CALL_OW 67
// for un in tmp do
18004: LD_ADDR_VAR 0 2
18008: PUSH
18009: LD_VAR 0 3
18013: PUSH
18014: FOR_IN
18015: IFFALSE 18089
// begin if IsDead ( un ) then
18017: LD_VAR 0 2
18021: PPUSH
18022: CALL_OW 301
18026: IFFALSE 18046
// begin tmp := tmp diff un ;
18028: LD_ADDR_VAR 0 3
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_VAR 0 2
18042: DIFF
18043: ST_TO_ADDR
// continue ;
18044: GO 18014
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18046: LD_VAR 0 2
18050: PPUSH
18051: LD_INT 3
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 69
18072: PPUSH
18073: LD_VAR 0 2
18077: PPUSH
18078: CALL_OW 74
18082: PPUSH
18083: CALL_OW 115
// end ;
18087: GO 18014
18089: POP
18090: POP
// until not tmp ;
18091: LD_VAR 0 3
18095: NOT
18096: IFFALSE 17997
// end ;
18098: PPOPN 3
18100: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18101: LD_EXP 24
18105: PUSH
18106: LD_EXP 49
18110: AND
18111: IFFALSE 18165
18113: GO 18115
18115: DISABLE
// begin ToLua ( displayTroll(); ) ;
18116: LD_STRING displayTroll();
18118: PPUSH
18119: CALL_OW 559
// wait ( 3 3$00 ) ;
18123: LD_INT 6300
18125: PPUSH
18126: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18130: LD_STRING hideTroll();
18132: PPUSH
18133: CALL_OW 559
// wait ( 1 1$00 ) ;
18137: LD_INT 2100
18139: PPUSH
18140: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18144: LD_STRING displayTroll();
18146: PPUSH
18147: CALL_OW 559
// wait ( 1 1$00 ) ;
18151: LD_INT 2100
18153: PPUSH
18154: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18158: LD_STRING hideTroll();
18160: PPUSH
18161: CALL_OW 559
// end ;
18165: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18166: LD_EXP 24
18170: PUSH
18171: LD_EXP 50
18175: AND
18176: IFFALSE 18239
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
// begin p := 0 ;
18184: LD_ADDR_VAR 0 1
18188: PUSH
18189: LD_INT 0
18191: ST_TO_ADDR
// repeat game_speed := 1 ;
18192: LD_ADDR_OWVAR 65
18196: PUSH
18197: LD_INT 1
18199: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18200: LD_INT 35
18202: PPUSH
18203: CALL_OW 67
// p := p + 1 ;
18207: LD_ADDR_VAR 0 1
18211: PUSH
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 1
18219: PLUS
18220: ST_TO_ADDR
// until p >= 60 ;
18221: LD_VAR 0 1
18225: PUSH
18226: LD_INT 60
18228: GREATEREQUAL
18229: IFFALSE 18192
// game_speed := 4 ;
18231: LD_ADDR_OWVAR 65
18235: PUSH
18236: LD_INT 4
18238: ST_TO_ADDR
// end ;
18239: PPOPN 1
18241: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18242: LD_EXP 24
18246: PUSH
18247: LD_EXP 51
18251: AND
18252: IFFALSE 18398
18254: GO 18256
18256: DISABLE
18257: LD_INT 0
18259: PPUSH
18260: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18261: LD_ADDR_VAR 0 1
18265: PUSH
18266: LD_INT 22
18268: PUSH
18269: LD_OWVAR 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 30
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 30
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: ST_TO_ADDR
// if not depot then
18315: LD_VAR 0 1
18319: NOT
18320: IFFALSE 18324
// exit ;
18322: GO 18398
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18324: LD_ADDR_VAR 0 2
18328: PUSH
18329: LD_VAR 0 1
18333: PUSH
18334: LD_INT 1
18336: PPUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 12
18346: ARRAY
18347: PPUSH
18348: CALL_OW 274
18352: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18353: LD_VAR 0 2
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18368: LD_VAR 0 2
18372: PPUSH
18373: LD_INT 2
18375: PPUSH
18376: LD_INT 0
18378: PPUSH
18379: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18383: LD_VAR 0 2
18387: PPUSH
18388: LD_INT 3
18390: PPUSH
18391: LD_INT 0
18393: PPUSH
18394: CALL_OW 277
// end ;
18398: PPOPN 2
18400: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18401: LD_EXP 24
18405: PUSH
18406: LD_EXP 52
18410: AND
18411: IFFALSE 18508
18413: GO 18415
18415: DISABLE
18416: LD_INT 0
18418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18419: LD_ADDR_VAR 0 1
18423: PUSH
18424: LD_INT 22
18426: PUSH
18427: LD_OWVAR 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 21
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 3
18448: PUSH
18449: LD_INT 23
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: PPUSH
18468: CALL_OW 69
18472: ST_TO_ADDR
// if not tmp then
18473: LD_VAR 0 1
18477: NOT
18478: IFFALSE 18482
// exit ;
18480: GO 18508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18482: LD_VAR 0 1
18486: PUSH
18487: LD_INT 1
18489: PPUSH
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 12
18499: ARRAY
18500: PPUSH
18501: LD_INT 200
18503: PPUSH
18504: CALL_OW 234
// end ;
18508: PPOPN 1
18510: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18511: LD_EXP 24
18515: PUSH
18516: LD_EXP 53
18520: AND
18521: IFFALSE 18600
18523: GO 18525
18525: DISABLE
18526: LD_INT 0
18528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18529: LD_ADDR_VAR 0 1
18533: PUSH
18534: LD_INT 22
18536: PUSH
18537: LD_OWVAR 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 21
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: ST_TO_ADDR
// if not tmp then
18565: LD_VAR 0 1
18569: NOT
18570: IFFALSE 18574
// exit ;
18572: GO 18600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18574: LD_VAR 0 1
18578: PUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_VAR 0 1
18586: PPUSH
18587: CALL_OW 12
18591: ARRAY
18592: PPUSH
18593: LD_INT 60
18595: PPUSH
18596: CALL_OW 234
// end ;
18600: PPOPN 1
18602: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18603: LD_EXP 24
18607: PUSH
18608: LD_EXP 54
18612: AND
18613: IFFALSE 18712
18615: GO 18617
18617: DISABLE
18618: LD_INT 0
18620: PPUSH
18621: PPUSH
// begin enable ;
18622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18623: LD_ADDR_VAR 0 1
18627: PUSH
18628: LD_INT 22
18630: PUSH
18631: LD_OWVAR 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 61
18642: PUSH
18643: EMPTY
18644: LIST
18645: PUSH
18646: LD_INT 33
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 69
18665: ST_TO_ADDR
// if not tmp then
18666: LD_VAR 0 1
18670: NOT
18671: IFFALSE 18675
// exit ;
18673: GO 18712
// for i in tmp do
18675: LD_ADDR_VAR 0 2
18679: PUSH
18680: LD_VAR 0 1
18684: PUSH
18685: FOR_IN
18686: IFFALSE 18710
// if IsControledBy ( i ) then
18688: LD_VAR 0 2
18692: PPUSH
18693: CALL_OW 312
18697: IFFALSE 18708
// ComUnlink ( i ) ;
18699: LD_VAR 0 2
18703: PPUSH
18704: CALL_OW 136
18708: GO 18685
18710: POP
18711: POP
// end ;
18712: PPOPN 2
18714: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18715: LD_EXP 24
18719: PUSH
18720: LD_EXP 55
18724: AND
18725: IFFALSE 18859
18727: GO 18729
18729: DISABLE
18730: LD_INT 0
18732: PPUSH
18733: PPUSH
// begin ToLua ( displayPowell(); ) ;
18734: LD_STRING displayPowell();
18736: PPUSH
18737: CALL_OW 559
// uc_side := 0 ;
18741: LD_ADDR_OWVAR 20
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// uc_nation := 2 ;
18749: LD_ADDR_OWVAR 21
18753: PUSH
18754: LD_INT 2
18756: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18757: LD_ADDR_OWVAR 37
18761: PUSH
18762: LD_INT 14
18764: ST_TO_ADDR
// vc_engine := engine_siberite ;
18765: LD_ADDR_OWVAR 39
18769: PUSH
18770: LD_INT 3
18772: ST_TO_ADDR
// vc_control := control_apeman ;
18773: LD_ADDR_OWVAR 38
18777: PUSH
18778: LD_INT 5
18780: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18781: LD_ADDR_OWVAR 40
18785: PUSH
18786: LD_INT 29
18788: ST_TO_ADDR
// un := CreateVehicle ;
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: CALL_OW 45
18798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18811: LD_INT 35
18813: PPUSH
18814: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18818: LD_VAR 0 2
18822: PPUSH
18823: LD_OWVAR 3
18827: PUSH
18828: LD_VAR 0 2
18832: DIFF
18833: PPUSH
18834: LD_VAR 0 2
18838: PPUSH
18839: CALL_OW 74
18843: PPUSH
18844: CALL_OW 115
// until IsOk ( un ) ;
18848: LD_VAR 0 2
18852: PPUSH
18853: CALL_OW 302
18857: IFFALSE 18811
// end ;
18859: PPOPN 2
18861: END
// every 0 0$1 trigger StreamModeActive and sStu do
18862: LD_EXP 24
18866: PUSH
18867: LD_EXP 63
18871: AND
18872: IFFALSE 18884
18874: GO 18876
18876: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18877: LD_STRING displayStucuk();
18879: PPUSH
18880: CALL_OW 559
// end ;
18884: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18885: LD_EXP 24
18889: PUSH
18890: LD_EXP 56
18894: AND
18895: IFFALSE 19036
18897: GO 18899
18899: DISABLE
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18904: LD_ADDR_VAR 0 2
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_OWVAR 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 21
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PPUSH
18935: CALL_OW 69
18939: ST_TO_ADDR
// if not tmp then
18940: LD_VAR 0 2
18944: NOT
18945: IFFALSE 18949
// exit ;
18947: GO 19036
// un := tmp [ rand ( 1 , tmp ) ] ;
18949: LD_ADDR_VAR 0 1
18953: PUSH
18954: LD_VAR 0 2
18958: PUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_VAR 0 2
18966: PPUSH
18967: CALL_OW 12
18971: ARRAY
18972: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: LD_INT 0
18980: PPUSH
18981: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_OWVAR 3
18994: PUSH
18995: LD_VAR 0 1
18999: DIFF
19000: PPUSH
19001: LD_VAR 0 1
19005: PPUSH
19006: CALL_OW 74
19010: PPUSH
19011: CALL_OW 115
// wait ( 0 0$20 ) ;
19015: LD_INT 700
19017: PPUSH
19018: CALL_OW 67
// SetSide ( un , your_side ) ;
19022: LD_VAR 0 1
19026: PPUSH
19027: LD_OWVAR 2
19031: PPUSH
19032: CALL_OW 235
// end ;
19036: PPOPN 2
19038: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19039: LD_EXP 24
19043: PUSH
19044: LD_EXP 57
19048: AND
19049: IFFALSE 19155
19051: GO 19053
19053: DISABLE
19054: LD_INT 0
19056: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19057: LD_ADDR_VAR 0 1
19061: PUSH
19062: LD_INT 22
19064: PUSH
19065: LD_OWVAR 2
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 30
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PPUSH
19106: CALL_OW 69
19110: ST_TO_ADDR
// if not depot then
19111: LD_VAR 0 1
19115: NOT
19116: IFFALSE 19120
// exit ;
19118: GO 19155
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19120: LD_VAR 0 1
19124: PUSH
19125: LD_INT 1
19127: ARRAY
19128: PPUSH
19129: CALL_OW 250
19133: PPUSH
19134: LD_VAR 0 1
19138: PUSH
19139: LD_INT 1
19141: ARRAY
19142: PPUSH
19143: CALL_OW 251
19147: PPUSH
19148: LD_INT 70
19150: PPUSH
19151: CALL_OW 495
// end ;
19155: PPOPN 1
19157: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19158: LD_EXP 24
19162: PUSH
19163: LD_EXP 58
19167: AND
19168: IFFALSE 19379
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19180: LD_ADDR_VAR 0 5
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_OWVAR 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PPUSH
19211: CALL_OW 69
19215: ST_TO_ADDR
// if not tmp then
19216: LD_VAR 0 5
19220: NOT
19221: IFFALSE 19225
// exit ;
19223: GO 19379
// for i in tmp do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: LD_VAR 0 5
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19377
// begin d := rand ( 0 , 5 ) ;
19238: LD_ADDR_VAR 0 4
19242: PUSH
19243: LD_INT 0
19245: PPUSH
19246: LD_INT 5
19248: PPUSH
19249: CALL_OW 12
19253: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19254: LD_ADDR_VAR 0 2
19258: PUSH
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 250
19268: PPUSH
19269: LD_VAR 0 4
19273: PPUSH
19274: LD_INT 3
19276: PPUSH
19277: LD_INT 12
19279: PPUSH
19280: CALL_OW 12
19284: PPUSH
19285: CALL_OW 272
19289: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19290: LD_ADDR_VAR 0 3
19294: PUSH
19295: LD_VAR 0 1
19299: PPUSH
19300: CALL_OW 251
19304: PPUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: LD_INT 3
19312: PPUSH
19313: LD_INT 12
19315: PPUSH
19316: CALL_OW 12
19320: PPUSH
19321: CALL_OW 273
19325: ST_TO_ADDR
// if ValidHex ( x , y ) then
19326: LD_VAR 0 2
19330: PPUSH
19331: LD_VAR 0 3
19335: PPUSH
19336: CALL_OW 488
19340: IFFALSE 19375
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_VAR 0 2
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: LD_INT 3
19359: PPUSH
19360: LD_INT 6
19362: PPUSH
19363: CALL_OW 12
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 483
// end ;
19375: GO 19235
19377: POP
19378: POP
// end ;
19379: PPOPN 5
19381: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19382: LD_EXP 24
19386: PUSH
19387: LD_EXP 59
19391: AND
19392: IFFALSE 19486
19394: GO 19396
19396: DISABLE
19397: LD_INT 0
19399: PPUSH
19400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_INT 22
19408: PUSH
19409: LD_OWVAR 2
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 32
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 69
19447: ST_TO_ADDR
// if not tmp then
19448: LD_VAR 0 2
19452: NOT
19453: IFFALSE 19457
// exit ;
19455: GO 19486
// for i in tmp do
19457: LD_ADDR_VAR 0 1
19461: PUSH
19462: LD_VAR 0 2
19466: PUSH
19467: FOR_IN
19468: IFFALSE 19484
// SetFuel ( i , 0 ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 0
19477: PPUSH
19478: CALL_OW 240
19482: GO 19467
19484: POP
19485: POP
// end ;
19486: PPOPN 2
19488: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19489: LD_EXP 24
19493: PUSH
19494: LD_EXP 60
19498: AND
19499: IFFALSE 19565
19501: GO 19503
19503: DISABLE
19504: LD_INT 0
19506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_INT 22
19514: PUSH
19515: LD_OWVAR 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 30
19526: PUSH
19527: LD_INT 29
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// if not tmp then
19543: LD_VAR 0 1
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 19565
// DestroyUnit ( tmp [ 1 ] ) ;
19552: LD_VAR 0 1
19556: PUSH
19557: LD_INT 1
19559: ARRAY
19560: PPUSH
19561: CALL_OW 65
// end ;
19565: PPOPN 1
19567: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19568: LD_EXP 24
19572: PUSH
19573: LD_EXP 62
19577: AND
19578: IFFALSE 19707
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
// begin uc_side := 0 ;
19586: LD_ADDR_OWVAR 20
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// uc_nation := nation_arabian ;
19594: LD_ADDR_OWVAR 21
19598: PUSH
19599: LD_INT 2
19601: ST_TO_ADDR
// hc_gallery :=  ;
19602: LD_ADDR_OWVAR 33
19606: PUSH
19607: LD_STRING 
19609: ST_TO_ADDR
// hc_name :=  ;
19610: LD_ADDR_OWVAR 26
19614: PUSH
19615: LD_STRING 
19617: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19618: LD_INT 1
19620: PPUSH
19621: LD_INT 11
19623: PPUSH
19624: LD_INT 10
19626: PPUSH
19627: CALL_OW 380
// un := CreateHuman ;
19631: LD_ADDR_VAR 0 1
19635: PUSH
19636: CALL_OW 44
19640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19641: LD_VAR 0 1
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19653: LD_INT 35
19655: PPUSH
19656: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_INT 22
19667: PUSH
19668: LD_OWVAR 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 74
19691: PPUSH
19692: CALL_OW 115
// until IsDead ( un ) ;
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 301
19705: IFFALSE 19653
// end ;
19707: PPOPN 1
19709: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19710: LD_EXP 24
19714: PUSH
19715: LD_EXP 64
19719: AND
19720: IFFALSE 19732
19722: GO 19724
19724: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19725: LD_STRING earthquake(getX(game), 0, 32)
19727: PPUSH
19728: CALL_OW 559
19732: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19733: LD_EXP 24
19737: PUSH
19738: LD_EXP 65
19742: AND
19743: IFFALSE 19834
19745: GO 19747
19747: DISABLE
19748: LD_INT 0
19750: PPUSH
// begin enable ;
19751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19752: LD_ADDR_VAR 0 1
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_OWVAR 2
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 21
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 33
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 69
19798: ST_TO_ADDR
// if not tmp then
19799: LD_VAR 0 1
19803: NOT
19804: IFFALSE 19808
// exit ;
19806: GO 19834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19808: LD_VAR 0 1
19812: PUSH
19813: LD_INT 1
19815: PPUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 12
19825: ARRAY
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 234
// end ;
19834: PPOPN 1
19836: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19837: LD_EXP 24
19841: PUSH
19842: LD_EXP 66
19846: AND
19847: IFFALSE 19988
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 22
19864: PUSH
19865: LD_OWVAR 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 25
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: ST_TO_ADDR
// if not tmp then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 19988
// un := tmp [ rand ( 1 , tmp ) ] ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: ST_TO_ADDR
// if Crawls ( un ) then
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 318
19935: IFFALSE 19946
// ComWalk ( un ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 9
19953: PPUSH
19954: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19958: LD_INT 28
19960: PPUSH
19961: LD_OWVAR 2
19965: PPUSH
19966: LD_INT 2
19968: PPUSH
19969: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19973: LD_INT 29
19975: PPUSH
19976: LD_OWVAR 2
19980: PPUSH
19981: LD_INT 2
19983: PPUSH
19984: CALL_OW 322
// end ;
19988: PPOPN 3
19990: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19991: LD_EXP 24
19995: PUSH
19996: LD_EXP 67
20000: AND
20001: IFFALSE 20112
20003: GO 20005
20005: DISABLE
20006: LD_INT 0
20008: PPUSH
20009: PPUSH
20010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_INT 22
20018: PUSH
20019: LD_OWVAR 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 25
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PPUSH
20042: CALL_OW 69
20046: ST_TO_ADDR
// if not tmp then
20047: LD_VAR 0 3
20051: NOT
20052: IFFALSE 20056
// exit ;
20054: GO 20112
// un := tmp [ rand ( 1 , tmp ) ] ;
20056: LD_ADDR_VAR 0 2
20060: PUSH
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 1
20068: PPUSH
20069: LD_VAR 0 3
20073: PPUSH
20074: CALL_OW 12
20078: ARRAY
20079: ST_TO_ADDR
// if Crawls ( un ) then
20080: LD_VAR 0 2
20084: PPUSH
20085: CALL_OW 318
20089: IFFALSE 20100
// ComWalk ( un ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_INT 8
20107: PPUSH
20108: CALL_OW 336
// end ;
20112: PPOPN 3
20114: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20115: LD_EXP 24
20119: PUSH
20120: LD_EXP 68
20124: AND
20125: IFFALSE 20269
20127: GO 20129
20129: DISABLE
20130: LD_INT 0
20132: PPUSH
20133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20134: LD_ADDR_VAR 0 2
20138: PUSH
20139: LD_INT 22
20141: PUSH
20142: LD_OWVAR 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 21
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 34
20166: PUSH
20167: LD_INT 12
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 34
20176: PUSH
20177: LD_INT 51
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 34
20186: PUSH
20187: LD_INT 32
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: PPUSH
20205: CALL_OW 69
20209: ST_TO_ADDR
// if not tmp then
20210: LD_VAR 0 2
20214: NOT
20215: IFFALSE 20219
// exit ;
20217: GO 20269
// for i in tmp do
20219: LD_ADDR_VAR 0 1
20223: PUSH
20224: LD_VAR 0 2
20228: PUSH
20229: FOR_IN
20230: IFFALSE 20267
// if GetCargo ( i , mat_artifact ) = 0 then
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_INT 4
20239: PPUSH
20240: CALL_OW 289
20244: PUSH
20245: LD_INT 0
20247: EQUAL
20248: IFFALSE 20265
// SetCargo ( i , mat_siberit , 100 ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_INT 3
20257: PPUSH
20258: LD_INT 100
20260: PPUSH
20261: CALL_OW 290
20265: GO 20229
20267: POP
20268: POP
// end ;
20269: PPOPN 2
20271: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20272: LD_EXP 24
20276: PUSH
20277: LD_EXP 69
20281: AND
20282: IFFALSE 20435
20284: GO 20286
20286: DISABLE
20287: LD_INT 0
20289: PPUSH
20290: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20291: LD_ADDR_VAR 0 2
20295: PUSH
20296: LD_INT 22
20298: PUSH
20299: LD_OWVAR 2
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PPUSH
20308: CALL_OW 69
20312: ST_TO_ADDR
// if not tmp then
20313: LD_VAR 0 2
20317: NOT
20318: IFFALSE 20322
// exit ;
20320: GO 20435
// for i := 1 to 2 do
20322: LD_ADDR_VAR 0 1
20326: PUSH
20327: DOUBLE
20328: LD_INT 1
20330: DEC
20331: ST_TO_ADDR
20332: LD_INT 2
20334: PUSH
20335: FOR_TO
20336: IFFALSE 20433
// begin uc_side := your_side ;
20338: LD_ADDR_OWVAR 20
20342: PUSH
20343: LD_OWVAR 2
20347: ST_TO_ADDR
// uc_nation := nation_american ;
20348: LD_ADDR_OWVAR 21
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// vc_chassis := us_morphling ;
20356: LD_ADDR_OWVAR 37
20360: PUSH
20361: LD_INT 5
20363: ST_TO_ADDR
// vc_engine := engine_siberite ;
20364: LD_ADDR_OWVAR 39
20368: PUSH
20369: LD_INT 3
20371: ST_TO_ADDR
// vc_control := control_computer ;
20372: LD_ADDR_OWVAR 38
20376: PUSH
20377: LD_INT 3
20379: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20380: LD_ADDR_OWVAR 40
20384: PUSH
20385: LD_INT 10
20387: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20388: CALL_OW 45
20392: PPUSH
20393: LD_VAR 0 2
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PPUSH
20402: CALL_OW 250
20406: PPUSH
20407: LD_VAR 0 2
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: PPUSH
20416: CALL_OW 251
20420: PPUSH
20421: LD_INT 12
20423: PPUSH
20424: LD_INT 1
20426: PPUSH
20427: CALL_OW 50
// end ;
20431: GO 20335
20433: POP
20434: POP
// end ;
20435: PPOPN 2
20437: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20438: LD_EXP 24
20442: PUSH
20443: LD_EXP 70
20447: AND
20448: IFFALSE 20670
20450: GO 20452
20452: DISABLE
20453: LD_INT 0
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20461: LD_ADDR_VAR 0 6
20465: PUSH
20466: LD_INT 22
20468: PUSH
20469: LD_OWVAR 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 21
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 3
20490: PUSH
20491: LD_INT 23
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 69
20514: ST_TO_ADDR
// if not tmp then
20515: LD_VAR 0 6
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 20670
// s1 := rand ( 1 , 4 ) ;
20524: LD_ADDR_VAR 0 2
20528: PUSH
20529: LD_INT 1
20531: PPUSH
20532: LD_INT 4
20534: PPUSH
20535: CALL_OW 12
20539: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20540: LD_ADDR_VAR 0 4
20544: PUSH
20545: LD_VAR 0 6
20549: PUSH
20550: LD_INT 1
20552: ARRAY
20553: PPUSH
20554: LD_VAR 0 2
20558: PPUSH
20559: CALL_OW 259
20563: ST_TO_ADDR
// if s1 = 1 then
20564: LD_VAR 0 2
20568: PUSH
20569: LD_INT 1
20571: EQUAL
20572: IFFALSE 20592
// s2 := rand ( 2 , 4 ) else
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 2
20581: PPUSH
20582: LD_INT 4
20584: PPUSH
20585: CALL_OW 12
20589: ST_TO_ADDR
20590: GO 20600
// s2 := 1 ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20600: LD_ADDR_VAR 0 5
20604: PUSH
20605: LD_VAR 0 6
20609: PUSH
20610: LD_INT 1
20612: ARRAY
20613: PPUSH
20614: LD_VAR 0 3
20618: PPUSH
20619: CALL_OW 259
20623: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20624: LD_VAR 0 6
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: LD_VAR 0 2
20637: PPUSH
20638: LD_VAR 0 5
20642: PPUSH
20643: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20647: LD_VAR 0 6
20651: PUSH
20652: LD_INT 1
20654: ARRAY
20655: PPUSH
20656: LD_VAR 0 3
20660: PPUSH
20661: LD_VAR 0 4
20665: PPUSH
20666: CALL_OW 237
// end ;
20670: PPOPN 6
20672: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20673: LD_EXP 24
20677: PUSH
20678: LD_EXP 71
20682: AND
20683: IFFALSE 20762
20685: GO 20687
20687: DISABLE
20688: LD_INT 0
20690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_OWVAR 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 30
20710: PUSH
20711: LD_INT 3
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PPUSH
20722: CALL_OW 69
20726: ST_TO_ADDR
// if not tmp then
20727: LD_VAR 0 1
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 20762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL_OW 12
20753: ARRAY
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 234
// end ;
20762: PPOPN 1
20764: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20765: LD_EXP 24
20769: PUSH
20770: LD_EXP 72
20774: AND
20775: IFFALSE 20887
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
20783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20784: LD_ADDR_VAR 0 2
20788: PUSH
20789: LD_INT 22
20791: PUSH
20792: LD_OWVAR 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 30
20806: PUSH
20807: LD_INT 27
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 30
20816: PUSH
20817: LD_INT 26
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 30
20826: PUSH
20827: LD_INT 28
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PPUSH
20844: CALL_OW 69
20848: ST_TO_ADDR
// if not tmp then
20849: LD_VAR 0 2
20853: NOT
20854: IFFALSE 20858
// exit ;
20856: GO 20887
// for i in tmp do
20858: LD_ADDR_VAR 0 1
20862: PUSH
20863: LD_VAR 0 2
20867: PUSH
20868: FOR_IN
20869: IFFALSE 20885
// SetLives ( i , 1 ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: LD_INT 1
20878: PPUSH
20879: CALL_OW 234
20883: GO 20868
20885: POP
20886: POP
// end ;
20887: PPOPN 2
20889: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20890: LD_EXP 24
20894: PUSH
20895: LD_EXP 73
20899: AND
20900: IFFALSE 21170
20902: GO 20904
20904: DISABLE
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
// begin i := rand ( 1 , 7 ) ;
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: LD_INT 1
20917: PPUSH
20918: LD_INT 7
20920: PPUSH
20921: CALL_OW 12
20925: ST_TO_ADDR
// case i of 1 :
20926: LD_VAR 0 1
20930: PUSH
20931: LD_INT 1
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20949
20939: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20940: LD_STRING earthquake(getX(game), 0, 32)
20942: PPUSH
20943: CALL_OW 559
20947: GO 21170
20949: LD_INT 2
20951: DOUBLE
20952: EQUAL
20953: IFTRUE 20957
20955: GO 20967
20957: POP
// ToLua ( displayStucuk(); ) ; 3 :
20958: LD_STRING displayStucuk();
20960: PPUSH
20961: CALL_OW 559
20965: GO 21170
20967: LD_INT 3
20969: DOUBLE
20970: EQUAL
20971: IFTRUE 20975
20973: GO 21079
20975: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20976: LD_ADDR_VAR 0 2
20980: PUSH
20981: LD_INT 22
20983: PUSH
20984: LD_OWVAR 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 25
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PPUSH
21007: CALL_OW 69
21011: ST_TO_ADDR
// if not tmp then
21012: LD_VAR 0 2
21016: NOT
21017: IFFALSE 21021
// exit ;
21019: GO 21170
// un := tmp [ rand ( 1 , tmp ) ] ;
21021: LD_ADDR_VAR 0 3
21025: PUSH
21026: LD_VAR 0 2
21030: PUSH
21031: LD_INT 1
21033: PPUSH
21034: LD_VAR 0 2
21038: PPUSH
21039: CALL_OW 12
21043: ARRAY
21044: ST_TO_ADDR
// if Crawls ( un ) then
21045: LD_VAR 0 3
21049: PPUSH
21050: CALL_OW 318
21054: IFFALSE 21065
// ComWalk ( un ) ;
21056: LD_VAR 0 3
21060: PPUSH
21061: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21065: LD_VAR 0 3
21069: PPUSH
21070: LD_INT 8
21072: PPUSH
21073: CALL_OW 336
// end ; 4 :
21077: GO 21170
21079: LD_INT 4
21081: DOUBLE
21082: EQUAL
21083: IFTRUE 21087
21085: GO 21148
21087: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21088: LD_ADDR_VAR 0 2
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_OWVAR 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 29
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PPUSH
21119: CALL_OW 69
21123: ST_TO_ADDR
// if not tmp then
21124: LD_VAR 0 2
21128: NOT
21129: IFFALSE 21133
// exit ;
21131: GO 21170
// DestroyUnit ( tmp [ 1 ] ) ;
21133: LD_VAR 0 2
21137: PUSH
21138: LD_INT 1
21140: ARRAY
21141: PPUSH
21142: CALL_OW 65
// end ; 5 .. 7 :
21146: GO 21170
21148: LD_INT 5
21150: DOUBLE
21151: GREATEREQUAL
21152: IFFALSE 21160
21154: LD_INT 7
21156: DOUBLE
21157: LESSEQUAL
21158: IFTRUE 21162
21160: GO 21169
21162: POP
// StreamSibBomb ; end ;
21163: CALL 17464 0 0
21167: GO 21170
21169: POP
// end ;
21170: PPOPN 3
21172: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21173: LD_EXP 24
21177: PUSH
21178: LD_EXP 74
21182: AND
21183: IFFALSE 21339
21185: GO 21187
21187: DISABLE
21188: LD_INT 0
21190: PPUSH
21191: PPUSH
21192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21193: LD_ADDR_VAR 0 2
21197: PUSH
21198: LD_INT 81
21200: PUSH
21201: LD_OWVAR 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 21
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 69
21246: ST_TO_ADDR
// if not tmp then
21247: LD_VAR 0 2
21251: NOT
21252: IFFALSE 21256
// exit ;
21254: GO 21339
// p := 0 ;
21256: LD_ADDR_VAR 0 3
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21264: LD_INT 35
21266: PPUSH
21267: CALL_OW 67
// p := p + 1 ;
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_VAR 0 3
21280: PUSH
21281: LD_INT 1
21283: PLUS
21284: ST_TO_ADDR
// for i in tmp do
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_VAR 0 2
21294: PUSH
21295: FOR_IN
21296: IFFALSE 21327
// if GetLives ( i ) < 1000 then
21298: LD_VAR 0 1
21302: PPUSH
21303: CALL_OW 256
21307: PUSH
21308: LD_INT 1000
21310: LESS
21311: IFFALSE 21325
// SetLives ( i , 1000 ) ;
21313: LD_VAR 0 1
21317: PPUSH
21318: LD_INT 1000
21320: PPUSH
21321: CALL_OW 234
21325: GO 21295
21327: POP
21328: POP
// until p > 20 ;
21329: LD_VAR 0 3
21333: PUSH
21334: LD_INT 20
21336: GREATER
21337: IFFALSE 21264
// end ;
21339: PPOPN 3
21341: END
// every 0 0$1 trigger StreamModeActive and sTime do
21342: LD_EXP 24
21346: PUSH
21347: LD_EXP 75
21351: AND
21352: IFFALSE 21387
21354: GO 21356
21356: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21357: LD_INT 28
21359: PPUSH
21360: LD_OWVAR 2
21364: PPUSH
21365: LD_INT 2
21367: PPUSH
21368: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21372: LD_INT 30
21374: PPUSH
21375: LD_OWVAR 2
21379: PPUSH
21380: LD_INT 2
21382: PPUSH
21383: CALL_OW 322
// end ;
21387: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21388: LD_EXP 24
21392: PUSH
21393: LD_EXP 76
21397: AND
21398: IFFALSE 21519
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21407: LD_ADDR_VAR 0 2
21411: PUSH
21412: LD_INT 22
21414: PUSH
21415: LD_OWVAR 2
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 21
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: LD_INT 23
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: ST_TO_ADDR
// if not tmp then
21461: LD_VAR 0 2
21465: NOT
21466: IFFALSE 21470
// exit ;
21468: GO 21519
// for i in tmp do
21470: LD_ADDR_VAR 0 1
21474: PUSH
21475: LD_VAR 0 2
21479: PUSH
21480: FOR_IN
21481: IFFALSE 21517
// begin if Crawls ( i ) then
21483: LD_VAR 0 1
21487: PPUSH
21488: CALL_OW 318
21492: IFFALSE 21503
// ComWalk ( i ) ;
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 138
// SetClass ( i , 2 ) ;
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_INT 2
21510: PPUSH
21511: CALL_OW 336
// end ;
21515: GO 21480
21517: POP
21518: POP
// end ;
21519: PPOPN 2
21521: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21522: LD_EXP 24
21526: PUSH
21527: LD_EXP 77
21531: AND
21532: IFFALSE 21737
21534: GO 21536
21536: DISABLE
21537: LD_INT 0
21539: PPUSH
21540: PPUSH
21541: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21542: LD_OWVAR 2
21546: PPUSH
21547: LD_INT 9
21549: PPUSH
21550: LD_INT 1
21552: PPUSH
21553: LD_INT 1
21555: PPUSH
21556: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21560: LD_INT 9
21562: PPUSH
21563: LD_OWVAR 2
21567: PPUSH
21568: CALL_OW 343
// hc_name := Dark Warrior ;
21572: LD_ADDR_OWVAR 26
21576: PUSH
21577: LD_STRING Dark Warrior
21579: ST_TO_ADDR
// hc_gallery :=  ;
21580: LD_ADDR_OWVAR 33
21584: PUSH
21585: LD_STRING 
21587: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
21588: LD_INT 1
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: LD_INT 10
21596: PPUSH
21597: CALL_OW 380
// un := CreateHuman ;
21601: LD_ADDR_VAR 0 3
21605: PUSH
21606: CALL_OW 44
21610: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21611: LD_VAR 0 3
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: CALL_OW 51
// p := 0 ;
21623: LD_ADDR_VAR 0 2
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21631: LD_INT 35
21633: PPUSH
21634: CALL_OW 67
// if GetLives ( un ) < 1000 then
21638: LD_VAR 0 3
21642: PPUSH
21643: CALL_OW 256
21647: PUSH
21648: LD_INT 1000
21650: LESS
21651: IFFALSE 21665
// SetLives ( un , 1000 ) ;
21653: LD_VAR 0 3
21657: PPUSH
21658: LD_INT 1000
21660: PPUSH
21661: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
21665: LD_VAR 0 3
21669: PPUSH
21670: LD_INT 81
21672: PUSH
21673: LD_OWVAR 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: CALL_OW 74
21696: PPUSH
21697: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21701: LD_VAR 0 2
21705: PUSH
21706: LD_INT 60
21708: GREATER
21709: PUSH
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 301
21719: OR
21720: IFFALSE 21631
// if un then
21722: LD_VAR 0 3
21726: IFFALSE 21737
// RemoveUnit ( un ) ;
21728: LD_VAR 0 3
21732: PPUSH
21733: CALL_OW 64
// end ; end_of_file
21737: PPOPN 3
21739: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
21740: LD_INT 0
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 264
21755: PUSH
21756: LD_EXP 23
21760: EQUAL
21761: IFFALSE 21833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21763: LD_INT 68
21765: PPUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 255
21775: PPUSH
21776: CALL_OW 321
21780: PUSH
21781: LD_INT 2
21783: EQUAL
21784: IFFALSE 21796
// eff := 70 else
21786: LD_ADDR_VAR 0 6
21790: PUSH
21791: LD_INT 70
21793: ST_TO_ADDR
21794: GO 21804
// eff := 30 ;
21796: LD_ADDR_VAR 0 6
21800: PUSH
21801: LD_INT 30
21803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 250
21813: PPUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 251
21823: PPUSH
21824: LD_VAR 0 6
21828: PPUSH
21829: CALL_OW 495
// end ; end ;
21833: LD_VAR 0 4
21837: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
21838: LD_INT 0
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
21845: PPUSH
// if cmd = 124 then
21846: LD_VAR 0 1
21850: PUSH
21851: LD_INT 124
21853: EQUAL
21854: IFFALSE 22060
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
21856: LD_ADDR_VAR 0 5
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 34
21866: PUSH
21867: LD_INT 53
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 34
21876: PUSH
21877: LD_INT 14
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 69
21893: ST_TO_ADDR
// if not tmp then
21894: LD_VAR 0 5
21898: NOT
21899: IFFALSE 21903
// exit ;
21901: GO 22060
// for i in tmp do
21903: LD_ADDR_VAR 0 3
21907: PUSH
21908: LD_VAR 0 5
21912: PUSH
21913: FOR_IN
21914: IFFALSE 22058
// begin taskList := GetTaskList ( i ) ;
21916: LD_ADDR_VAR 0 6
21920: PUSH
21921: LD_VAR 0 3
21925: PPUSH
21926: CALL_OW 437
21930: ST_TO_ADDR
// if not taskList then
21931: LD_VAR 0 6
21935: NOT
21936: IFFALSE 21940
// continue ;
21938: GO 21913
// for j = 1 to taskList do
21940: LD_ADDR_VAR 0 4
21944: PUSH
21945: DOUBLE
21946: LD_INT 1
21948: DEC
21949: ST_TO_ADDR
21950: LD_VAR 0 6
21954: PUSH
21955: FOR_TO
21956: IFFALSE 22054
// if taskList [ j ] [ 1 ] = | then
21958: LD_VAR 0 6
21962: PUSH
21963: LD_VAR 0 4
21967: ARRAY
21968: PUSH
21969: LD_INT 1
21971: ARRAY
21972: PUSH
21973: LD_STRING |
21975: EQUAL
21976: IFFALSE 22052
// begin _taskList := Delete ( taskList , 1 ) ;
21978: LD_ADDR_VAR 0 7
21982: PUSH
21983: LD_VAR 0 6
21987: PPUSH
21988: LD_INT 1
21990: PPUSH
21991: CALL_OW 3
21995: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
21996: LD_VAR 0 3
22000: PPUSH
22001: LD_VAR 0 7
22005: PPUSH
22006: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
22010: LD_VAR 0 3
22014: PPUSH
22015: LD_VAR 0 6
22019: PUSH
22020: LD_VAR 0 4
22024: ARRAY
22025: PUSH
22026: LD_INT 2
22028: ARRAY
22029: PPUSH
22030: LD_VAR 0 6
22034: PUSH
22035: LD_VAR 0 4
22039: ARRAY
22040: PUSH
22041: LD_INT 3
22043: ARRAY
22044: PPUSH
22045: LD_INT 8
22047: PPUSH
22048: CALL 22065 0 4
// end ;
22052: GO 21955
22054: POP
22055: POP
// end ;
22056: GO 21913
22058: POP
22059: POP
// end ; end ;
22060: LD_VAR 0 2
22064: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22076: LD_VAR 0 1
22080: NOT
22081: PUSH
22082: LD_VAR 0 2
22086: PPUSH
22087: LD_VAR 0 3
22091: PPUSH
22092: CALL_OW 488
22096: NOT
22097: OR
22098: PUSH
22099: LD_VAR 0 4
22103: NOT
22104: OR
22105: IFFALSE 22109
// exit ;
22107: GO 22449
// list := [ ] ;
22109: LD_ADDR_VAR 0 13
22113: PUSH
22114: EMPTY
22115: ST_TO_ADDR
// if x - r < 0 then
22116: LD_VAR 0 2
22120: PUSH
22121: LD_VAR 0 4
22125: MINUS
22126: PUSH
22127: LD_INT 0
22129: LESS
22130: IFFALSE 22142
// min_x := 0 else
22132: LD_ADDR_VAR 0 7
22136: PUSH
22137: LD_INT 0
22139: ST_TO_ADDR
22140: GO 22158
// min_x := x - r ;
22142: LD_ADDR_VAR 0 7
22146: PUSH
22147: LD_VAR 0 2
22151: PUSH
22152: LD_VAR 0 4
22156: MINUS
22157: ST_TO_ADDR
// if y - r < 0 then
22158: LD_VAR 0 3
22162: PUSH
22163: LD_VAR 0 4
22167: MINUS
22168: PUSH
22169: LD_INT 0
22171: LESS
22172: IFFALSE 22184
// min_y := 0 else
22174: LD_ADDR_VAR 0 8
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
22182: GO 22200
// min_y := y - r ;
22184: LD_ADDR_VAR 0 8
22188: PUSH
22189: LD_VAR 0 3
22193: PUSH
22194: LD_VAR 0 4
22198: MINUS
22199: ST_TO_ADDR
// max_x := x + r ;
22200: LD_ADDR_VAR 0 9
22204: PUSH
22205: LD_VAR 0 2
22209: PUSH
22210: LD_VAR 0 4
22214: PLUS
22215: ST_TO_ADDR
// max_y := y + r ;
22216: LD_ADDR_VAR 0 10
22220: PUSH
22221: LD_VAR 0 3
22225: PUSH
22226: LD_VAR 0 4
22230: PLUS
22231: ST_TO_ADDR
// for _x = min_x to max_x do
22232: LD_ADDR_VAR 0 11
22236: PUSH
22237: DOUBLE
22238: LD_VAR 0 7
22242: DEC
22243: ST_TO_ADDR
22244: LD_VAR 0 9
22248: PUSH
22249: FOR_TO
22250: IFFALSE 22367
// for _y = min_y to max_y do
22252: LD_ADDR_VAR 0 12
22256: PUSH
22257: DOUBLE
22258: LD_VAR 0 8
22262: DEC
22263: ST_TO_ADDR
22264: LD_VAR 0 10
22268: PUSH
22269: FOR_TO
22270: IFFALSE 22363
// begin if not ValidHex ( _x , _y ) then
22272: LD_VAR 0 11
22276: PPUSH
22277: LD_VAR 0 12
22281: PPUSH
22282: CALL_OW 488
22286: NOT
22287: IFFALSE 22291
// continue ;
22289: GO 22269
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22291: LD_VAR 0 11
22295: PPUSH
22296: LD_VAR 0 12
22300: PPUSH
22301: CALL_OW 351
22305: PUSH
22306: LD_VAR 0 11
22310: PPUSH
22311: LD_VAR 0 12
22315: PPUSH
22316: CALL_OW 554
22320: AND
22321: IFFALSE 22361
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22323: LD_ADDR_VAR 0 13
22327: PUSH
22328: LD_VAR 0 13
22332: PPUSH
22333: LD_VAR 0 13
22337: PUSH
22338: LD_INT 1
22340: PLUS
22341: PPUSH
22342: LD_VAR 0 11
22346: PUSH
22347: LD_VAR 0 12
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PPUSH
22356: CALL_OW 2
22360: ST_TO_ADDR
// end ;
22361: GO 22269
22363: POP
22364: POP
22365: GO 22249
22367: POP
22368: POP
// if not list then
22369: LD_VAR 0 13
22373: NOT
22374: IFFALSE 22378
// exit ;
22376: GO 22449
// for i in list do
22378: LD_ADDR_VAR 0 6
22382: PUSH
22383: LD_VAR 0 13
22387: PUSH
22388: FOR_IN
22389: IFFALSE 22447
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22391: LD_VAR 0 1
22395: PPUSH
22396: LD_STRING M
22398: PUSH
22399: LD_VAR 0 6
22403: PUSH
22404: LD_INT 1
22406: ARRAY
22407: PUSH
22408: LD_VAR 0 6
22412: PUSH
22413: LD_INT 2
22415: ARRAY
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: PPUSH
22441: CALL_OW 447
22445: GO 22388
22447: POP
22448: POP
// end ;
22449: LD_VAR 0 5
22453: RET
