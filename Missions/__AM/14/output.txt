// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1365 0 0
// PrepareDifficulty ;
 115: CALL 1661 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 27791 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 27791 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 27791 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 27791 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side = 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation = 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 27791 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1128: LD_INT 0
1130: PPUSH
// uc_nation := 3 ;
1131: LD_ADDR_OWVAR 21
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_side := 3 ;
1139: LD_ADDR_OWVAR 20
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// if Difficulty > 1 then
1147: LD_OWVAR 67
1151: PUSH
1152: LD_INT 1
1154: GREATER
1155: IFFALSE 1215
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 8
1168: PUSH
1169: LD_INT 9
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_OWVAR 67
1181: ARRAY
1182: PPUSH
1183: CALL_OW 380
// baseGuard := CreateHuman ;
1187: LD_ADDR_EXP 18
1191: PUSH
1192: CALL_OW 44
1196: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1197: LD_EXP 18
1201: PPUSH
1202: LD_INT 39
1204: PPUSH
1205: LD_INT 67
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1215: LD_INT 116
1217: PPUSH
1218: LD_INT 50
1220: PPUSH
1221: LD_INT 74
1223: PPUSH
1224: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1228: LD_INT 3
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 45
1236: PPUSH
1237: LD_INT 10
1239: PPUSH
1240: LD_INT 9
1242: PPUSH
1243: LD_INT 2
1245: PPUSH
1246: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1250: LD_INT 3
1252: PPUSH
1253: LD_INT 3
1255: PPUSH
1256: LD_INT 22
1258: PPUSH
1259: LD_INT 10
1261: PPUSH
1262: LD_INT 2
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1272: LD_INT 3
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 10
1283: PPUSH
1284: LD_INT 3
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 3
1299: PPUSH
1300: LD_INT 40
1302: PPUSH
1303: LD_INT 10
1305: PPUSH
1306: LD_INT 3
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1316: LD_INT 3
1318: PPUSH
1319: LD_INT 3
1321: PPUSH
1322: LD_INT 14
1324: PPUSH
1325: LD_INT 10
1327: PPUSH
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: LD_INT 15
1346: PPUSH
1347: LD_INT 10
1349: PPUSH
1350: LD_INT 4
1352: PPUSH
1353: LD_INT 2
1355: PPUSH
1356: CALL 1551 0 6
// end ; end_of_file
1360: LD_VAR 0 1
1364: RET
// export function CreateNature ; var i ; begin
1365: LD_INT 0
1367: PPUSH
1368: PPUSH
// uc_side := 0 ;
1369: LD_ADDR_OWVAR 20
1373: PUSH
1374: LD_INT 0
1376: ST_TO_ADDR
// uc_nation := 0 ;
1377: LD_ADDR_OWVAR 21
1381: PUSH
1382: LD_INT 0
1384: ST_TO_ADDR
// hc_class := class_apeman ;
1385: LD_ADDR_OWVAR 28
1389: PUSH
1390: LD_INT 12
1392: ST_TO_ADDR
// hc_gallery :=  ;
1393: LD_ADDR_OWVAR 33
1397: PUSH
1398: LD_STRING 
1400: ST_TO_ADDR
// hc_name :=  ;
1401: LD_ADDR_OWVAR 26
1405: PUSH
1406: LD_STRING 
1408: ST_TO_ADDR
// for i = 1 to 7 do
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_INT 7
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1504
// begin hc_class := class_apeman ;
1425: LD_ADDR_OWVAR 28
1429: PUSH
1430: LD_INT 12
1432: ST_TO_ADDR
// hc_gallery :=  ;
1433: LD_ADDR_OWVAR 33
1437: PUSH
1438: LD_STRING 
1440: ST_TO_ADDR
// hc_name :=  ;
1441: LD_ADDR_OWVAR 26
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: LD_INT 0
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1472: LD_ADDR_OWVAR 29
1476: PUSH
1477: LD_INT 11
1479: PUSH
1480: LD_INT 10
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1487: CALL_OW 44
1491: PPUSH
1492: LD_INT 16
1494: PPUSH
1495: LD_INT 0
1497: PPUSH
1498: CALL_OW 49
// end ;
1502: GO 1422
1504: POP
1505: POP
// end ;
1506: LD_VAR 0 1
1510: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
// for i in charactersList do
1515: LD_ADDR_VAR 0 4
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1544
// SaveCharacters ( i , ident ) ;
1528: LD_VAR 0 4
1532: PPUSH
1533: LD_VAR 0 2
1537: PPUSH
1538: CALL_OW 38
1542: GO 1525
1544: POP
1545: POP
// end ;
1546: LD_VAR 0 3
1550: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1551: LD_INT 0
1553: PPUSH
1554: PPUSH
1555: PPUSH
1556: PPUSH
// for i = 1 to count do
1557: LD_ADDR_VAR 0 8
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_VAR 0 6
1571: PUSH
1572: FOR_TO
1573: IFFALSE 1654
// begin uc_side = side ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_VAR 0 1
1584: ST_TO_ADDR
// uc_nation = nation ;
1585: LD_ADDR_OWVAR 21
1589: PUSH
1590: LD_VAR 0 2
1594: ST_TO_ADDR
// hc_gallery =  ;
1595: LD_ADDR_OWVAR 33
1599: PUSH
1600: LD_STRING 
1602: ST_TO_ADDR
// hc_name =  ;
1603: LD_ADDR_OWVAR 26
1607: PUSH
1608: LD_STRING 
1610: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1611: LD_INT 0
1613: PPUSH
1614: LD_VAR 0 5
1618: PPUSH
1619: LD_VAR 0 4
1623: PPUSH
1624: CALL_OW 380
// un = CreateHuman ;
1628: LD_ADDR_VAR 0 10
1632: PUSH
1633: CALL_OW 44
1637: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1638: LD_VAR 0 10
1642: PPUSH
1643: LD_VAR 0 3
1647: PPUSH
1648: CALL_OW 52
// end ;
1652: GO 1572
1654: POP
1655: POP
// end ;
1656: LD_VAR 0 7
1660: RET
// export function PrepareDifficulty ; begin
1661: LD_INT 0
1663: PPUSH
// if difficulty = 1 then
1664: LD_OWVAR 67
1668: PUSH
1669: LD_INT 1
1671: EQUAL
1672: IFFALSE 1752
// begin SetTech ( 57 , 3 , state_disabled ) ;
1674: LD_INT 57
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1687: LD_INT 58
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1700: LD_INT 59
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 3
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1726: LD_INT 52
1728: PPUSH
1729: LD_INT 3
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1739: LD_INT 53
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 322
// end ; if difficulty = 2 then
1752: LD_OWVAR 67
1756: PUSH
1757: LD_INT 2
1759: EQUAL
1760: IFFALSE 1840
// begin SetTech ( 57 , 3 , state_enabled ) ;
1762: LD_INT 57
1764: PPUSH
1765: LD_INT 3
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1775: LD_INT 58
1777: PPUSH
1778: LD_INT 3
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1788: LD_INT 59
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1801: LD_INT 51
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1814: LD_INT 52
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1827: LD_INT 53
1829: PPUSH
1830: LD_INT 3
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 322
// end ; if difficulty = 3 then
1840: LD_OWVAR 67
1844: PUSH
1845: LD_INT 3
1847: EQUAL
1848: IFFALSE 1928
// begin SetTech ( 57 , 3 , state_enabled ) ;
1850: LD_INT 57
1852: PPUSH
1853: LD_INT 3
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1863: LD_INT 58
1865: PPUSH
1866: LD_INT 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1876: LD_INT 59
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1889: LD_INT 51
1891: PPUSH
1892: LD_INT 3
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1902: LD_INT 52
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1915: LD_INT 53
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 322
// end ; end ;
1928: LD_VAR 0 1
1932: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1940: LD_ADDR_VAR 0 8
1944: PUSH
1945: LD_INT 48
1947: PUSH
1948: LD_INT 49
1950: PUSH
1951: LD_INT 50
1953: PUSH
1954: LD_INT 20
1956: PUSH
1957: LD_INT 1
1959: PUSH
1960: LD_INT 69
1962: PUSH
1963: LD_INT 39
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 40
1971: PUSH
1972: LD_INT 71
1974: PUSH
1975: LD_INT 57
1977: PUSH
1978: LD_INT 58
1980: PUSH
1981: LD_INT 44
1983: PUSH
1984: LD_INT 32
1986: PUSH
1987: LD_INT 27
1989: PUSH
1990: LD_INT 23
1992: PUSH
1993: LD_INT 33
1995: PUSH
1996: LD_INT 54
1998: PUSH
1999: LD_INT 55
2001: PUSH
2002: LD_INT 56
2004: PUSH
2005: LD_INT 63
2007: PUSH
2008: LD_INT 64
2010: PUSH
2011: LD_INT 65
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 25
2028: PUSH
2029: LD_INT 51
2031: PUSH
2032: LD_INT 52
2034: PUSH
2035: LD_INT 59
2037: PUSH
2038: LD_INT 53
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: DOUBLE
2081: LD_INT 1
2083: DEC
2084: ST_TO_ADDR
2085: LD_VAR 0 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2167
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2093: LD_VAR 0 8
2097: PUSH
2098: LD_VAR 0 5
2102: ARRAY
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: CALL_OW 321
2113: PUSH
2114: LD_INT 1
2116: EQUAL
2117: PUSH
2118: LD_VAR 0 8
2122: PUSH
2123: LD_VAR 0 5
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 482
2138: PUSH
2139: LD_INT 1
2141: EQUAL
2142: AND
2143: IFFALSE 2165
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 8
2154: PUSH
2155: LD_VAR 0 5
2159: ARRAY
2160: PPUSH
2161: CALL_OW 184
2165: GO 2090
2167: POP
2168: POP
// end ;
2169: LD_VAR 0 4
2173: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2182: LD_ADDR_VAR 0 8
2186: PUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 313
2196: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2197: LD_ADDR_VAR 0 9
2201: PUSH
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_INT 22
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 25
2221: PUSH
2222: LD_INT 2
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 24
2231: PUSH
2232: LD_INT 750
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 3
2241: PUSH
2242: LD_INT 54
2244: PUSH
2245: EMPTY
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 70
2262: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2263: LD_ADDR_VAR 0 6
2267: PUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_INT 22
2275: PUSH
2276: LD_VAR 0 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 21
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 3
2297: PUSH
2298: LD_INT 24
2300: PUSH
2301: LD_INT 1000
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: PPUSH
2320: CALL_OW 70
2324: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2325: LD_VAR 0 6
2329: NOT
2330: PUSH
2331: LD_INT 22
2333: PUSH
2334: LD_VAR 0 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 25
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 24
2355: PUSH
2356: LD_INT 250
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: NOT
2373: AND
2374: IFFALSE 2378
// exit ;
2376: GO 2560
// if buildings_list > 0 and engineerOkInside then
2378: LD_VAR 0 6
2382: PUSH
2383: LD_INT 0
2385: GREATER
2386: PUSH
2387: LD_VAR 0 8
2391: AND
2392: IFFALSE 2403
// ComExitBuilding ( engineerOkInside ) ;
2394: LD_VAR 0 8
2398: PPUSH
2399: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2403: LD_VAR 0 6
2407: PUSH
2408: LD_INT 0
2410: GREATER
2411: PUSH
2412: LD_VAR 0 9
2416: PUSH
2417: LD_INT 0
2419: GREATER
2420: AND
2421: IFFALSE 2441
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2423: LD_VAR 0 9
2427: PPUSH
2428: LD_VAR 0 6
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2441: LD_VAR 0 6
2445: PUSH
2446: LD_INT 0
2448: EQUAL
2449: PUSH
2450: LD_VAR 0 4
2454: PUSH
2455: LD_INT 0
2457: EQUAL
2458: AND
2459: PUSH
2460: LD_VAR 0 9
2464: PUSH
2465: LD_INT 0
2467: GREATER
2468: AND
2469: IFFALSE 2485
// ComEnterUnit ( engineerOkOutside , building ) ;
2471: LD_VAR 0 9
2475: PPUSH
2476: LD_VAR 0 2
2480: PPUSH
2481: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2485: LD_VAR 0 9
2489: PUSH
2490: LD_INT 0
2492: GREATER
2493: PUSH
2494: LD_VAR 0 6
2498: PUSH
2499: LD_INT 0
2501: EQUAL
2502: AND
2503: PUSH
2504: LD_VAR 0 4
2508: PUSH
2509: LD_INT 0
2511: GREATER
2512: AND
2513: IFFALSE 2560
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2515: LD_VAR 0 9
2519: PPUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: LD_VAR 0 4
2533: PUSH
2534: LD_INT 2
2536: ARRAY
2537: PPUSH
2538: LD_VAR 0 4
2542: PUSH
2543: LD_INT 3
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 4
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 145
// end ;
2560: LD_VAR 0 5
2564: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2565: LD_INT 0
2567: PPUSH
2568: PPUSH
2569: PPUSH
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
2574: PPUSH
2575: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 22
2583: PUSH
2584: LD_VAR 0 1
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 25
2595: PUSH
2596: LD_INT 4
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 23
2605: PUSH
2606: LD_INT 2
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 24
2615: PUSH
2616: LD_INT 251
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2634: LD_ADDR_VAR 0 7
2638: PUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 22
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 23
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 25
2668: PUSH
2669: LD_INT 4
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 50
2678: PUSH
2679: EMPTY
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 70
2692: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2693: LD_ADDR_VAR 0 10
2697: PUSH
2698: LD_VAR 0 3
2702: PPUSH
2703: LD_INT 22
2705: PUSH
2706: LD_VAR 0 1
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 25
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: LD_INT 24
2747: PUSH
2748: LD_INT 750
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 70
2769: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2770: LD_ADDR_VAR 0 11
2774: PUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: LD_INT 22
2782: PUSH
2783: LD_VAR 0 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 21
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 3
2804: PUSH
2805: LD_INT 25
2807: PUSH
2808: LD_INT 3
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 24
2824: PUSH
2825: LD_INT 1000
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 70
2846: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2847: LD_VAR 0 10
2851: NOT
2852: PUSH
2853: LD_VAR 0 11
2857: NOT
2858: AND
2859: PUSH
2860: LD_VAR 0 6
2864: NOT
2865: AND
2866: IFFALSE 2870
// exit ;
2868: GO 3104
// if damageUnits > 0 and sci_list > 0 then
2870: LD_VAR 0 10
2874: PUSH
2875: LD_INT 0
2877: GREATER
2878: PUSH
2879: LD_VAR 0 6
2883: PUSH
2884: LD_INT 0
2886: GREATER
2887: AND
2888: IFFALSE 2904
// ComMoveToArea ( damageUnits , healArea ) ;
2890: LD_VAR 0 10
2894: PPUSH
2895: LD_VAR 0 2
2899: PPUSH
2900: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2904: LD_VAR 0 11
2908: PUSH
2909: LD_INT 0
2911: GREATER
2912: PUSH
2913: LD_VAR 0 6
2917: PUSH
2918: LD_INT 0
2920: GREATER
2921: AND
2922: IFFALSE 2933
// ComExitBuilding ( sci_list ) ;
2924: LD_VAR 0 6
2928: PPUSH
2929: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2933: LD_VAR 0 11
2937: PUSH
2938: LD_INT 0
2940: GREATER
2941: PUSH
2942: LD_VAR 0 7
2946: PUSH
2947: LD_INT 0
2949: GREATER
2950: AND
2951: IFFALSE 2971
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2953: LD_VAR 0 7
2957: PPUSH
2958: LD_VAR 0 11
2962: PUSH
2963: LD_INT 1
2965: ARRAY
2966: PPUSH
2967: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2971: LD_VAR 0 10
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: PUSH
2980: LD_VAR 0 11
2984: PUSH
2985: LD_INT 0
2987: EQUAL
2988: AND
2989: PUSH
2990: LD_VAR 0 7
2994: PUSH
2995: LD_INT 0
2997: GREATER
2998: AND
2999: IFFALSE 3104
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3001: LD_ADDR_VAR 0 12
3005: PUSH
3006: LD_INT 22
3008: PUSH
3009: LD_VAR 0 1
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 21
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 8
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 69
3047: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3048: LD_ADDR_VAR 0 13
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_VAR 0 12
3060: PPUSH
3061: CALL_OW 12
3065: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3066: LD_VAR 0 7
3070: PPUSH
3071: LD_INT 3
3073: PUSH
3074: LD_INT 60
3076: PUSH
3077: EMPTY
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 72
3088: PPUSH
3089: LD_VAR 0 12
3093: PUSH
3094: LD_VAR 0 13
3098: ARRAY
3099: PPUSH
3100: CALL_OW 120
// end ; end ;
3104: LD_VAR 0 5
3108: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3109: LD_INT 0
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
// tmpTab = [ ] ;
3115: LD_ADDR_VAR 0 6
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3122: LD_INT 22
3124: PUSH
3125: LD_VAR 0 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 32
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: PUSH
3153: LD_INT 0
3155: GREATER
3156: IFFALSE 3239
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3158: LD_ADDR_VAR 0 4
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_VAR 0 1
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PUSH
3175: LD_INT 30
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PPUSH
3189: CALL_OW 69
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3237
// begin for j in UnitsInside ( i ) do
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 313
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3233
// tmpTab = tmpTab ^ j ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_VAR 0 6
3224: PUSH
3225: LD_VAR 0 5
3229: ADD
3230: ST_TO_ADDR
3231: GO 3212
3233: POP
3234: POP
// end ;
3235: GO 3194
3237: POP
3238: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3239: LD_VAR 0 6
3243: PPUSH
3244: LD_VAR 0 2
3248: PPUSH
3249: CALL_OW 250
3253: PPUSH
3254: LD_VAR 0 2
3258: PPUSH
3259: CALL_OW 251
3263: PPUSH
3264: CALL_OW 114
// end ;
3268: LD_VAR 0 3
3272: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3273: LD_INT 0
3275: PPUSH
3276: PPUSH
3277: PPUSH
3278: PPUSH
// enable ;
3279: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3280: LD_ADDR_VAR 0 7
3284: PUSH
3285: LD_VAR 0 3
3289: PPUSH
3290: CALL_OW 435
3294: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3295: LD_ADDR_VAR 0 6
3299: PUSH
3300: LD_INT 22
3302: PUSH
3303: LD_VAR 0 1
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 34
3314: PUSH
3315: LD_VAR 0 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3333: LD_VAR 0 6
3337: PUSH
3338: LD_INT 0
3340: GREATER
3341: PUSH
3342: LD_VAR 0 3
3346: PPUSH
3347: CALL_OW 435
3351: AND
3352: PUSH
3353: LD_VAR 0 7
3357: PUSH
3358: LD_INT 0
3360: GREATER
3361: AND
3362: IFFALSE 3411
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3364: LD_VAR 0 6
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: LD_VAR 0 7
3377: PUSH
3378: LD_INT 1
3380: ARRAY
3381: PPUSH
3382: LD_VAR 0 7
3386: PUSH
3387: LD_INT 2
3389: ARRAY
3390: PPUSH
3391: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3395: LD_VAR 0 6
3399: PUSH
3400: LD_INT 1
3402: ARRAY
3403: PPUSH
3404: LD_INT 100
3406: PPUSH
3407: CALL_OW 240
// end ; end ;
3411: LD_VAR 0 4
3415: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
// for i = 1 to vehCount do
3420: LD_ADDR_VAR 0 9
3424: PUSH
3425: DOUBLE
3426: LD_INT 1
3428: DEC
3429: ST_TO_ADDR
3430: LD_VAR 0 3
3434: PUSH
3435: FOR_TO
3436: IFFALSE 3483
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_VAR 0 7
3447: PPUSH
3448: LD_VAR 0 5
3452: PPUSH
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 4
3462: PUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_VAR 0 4
3470: PPUSH
3471: CALL_OW 12
3475: ARRAY
3476: PPUSH
3477: CALL_OW 185
3481: GO 3435
3483: POP
3484: POP
// end ;
3485: LD_VAR 0 8
3489: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3498: LD_ADDR_VAR 0 6
3502: PUSH
3503: LD_INT 22
3505: PUSH
3506: LD_VAR 0 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 9
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3534: LD_ADDR_VAR 0 7
3538: PUSH
3539: LD_INT 81
3541: PUSH
3542: LD_VAR 0 1
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3577: LD_ADDR_VAR 0 4
3581: PUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: CALL_OW 12
3592: ST_TO_ADDR
// for i = 1 to list do
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_VAR 0 6
3607: PUSH
3608: FOR_TO
3609: IFFALSE 3811
// for ta in filter do
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_VAR 0 7
3620: PUSH
3621: FOR_IN
3622: IFFALSE 3807
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3624: LD_VAR 0 6
3628: PUSH
3629: LD_VAR 0 5
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL_OW 296
3644: PUSH
3645: LD_INT 15
3647: LESSEQUAL
3648: IFFALSE 3805
// begin case c of 1 :
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3701
3663: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3664: LD_VAR 0 6
3668: PUSH
3669: LD_VAR 0 5
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 250
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 251
3694: PPUSH
3695: CALL_OW 154
3699: GO 3805
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3773
3709: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3710: LD_VAR 0 6
3714: PUSH
3715: LD_VAR 0 5
3719: ARRAY
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL_OW 250
3730: PUSH
3731: LD_INT 1
3733: NEG
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 12
3742: PLUS
3743: PPUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: CALL_OW 251
3753: PUSH
3754: LD_INT 1
3756: NEG
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: CALL_OW 12
3765: PLUS
3766: PPUSH
3767: CALL_OW 153
3771: GO 3805
3773: LD_INT 3
3775: DOUBLE
3776: EQUAL
3777: IFTRUE 3781
3779: GO 3804
3781: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3782: LD_VAR 0 6
3786: PUSH
3787: LD_VAR 0 5
3791: ARRAY
3792: PPUSH
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL_OW 115
3802: GO 3805
3804: POP
// end ; end ;
3805: GO 3621
3807: POP
3808: POP
3809: GO 3608
3811: POP
3812: POP
// end ;
3813: LD_VAR 0 2
3817: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
3822: PPUSH
3823: PPUSH
3824: PPUSH
3825: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3826: LD_ADDR_VAR 0 7
3830: PUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_INT 22
3838: PUSH
3839: LD_VAR 0 1
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 21
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 34
3860: PUSH
3861: LD_INT 52
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PPUSH
3873: CALL_OW 70
3877: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3878: LD_ADDR_VAR 0 8
3882: PUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 22
3890: PUSH
3891: LD_VAR 0 1
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 21
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 24
3915: PUSH
3916: LD_INT 1000
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: EMPTY
3933: LIST
3934: PPUSH
3935: CALL_OW 70
3939: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
3940: LD_VAR 0 8
3944: PUSH
3945: LD_INT 0
3947: GREATER
3948: PUSH
3949: LD_VAR 0 7
3953: PPUSH
3954: LD_INT 24
3956: PUSH
3957: LD_INT 750
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PPUSH
3964: CALL_OW 72
3968: PUSH
3969: LD_INT 0
3971: GREATER
3972: AND
3973: IFFALSE 3993
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
3975: LD_VAR 0 7
3979: PPUSH
3980: LD_VAR 0 8
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: PPUSH
3989: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
3993: LD_VAR 0 7
3997: PUSH
3998: LD_INT 0
4000: GREATER
4001: PUSH
4002: LD_VAR 0 8
4006: PUSH
4007: LD_INT 0
4009: EQUAL
4010: AND
4011: PUSH
4012: LD_EXP 10
4016: PUSH
4017: LD_INT 0
4019: GREATER
4020: AND
4021: IFFALSE 4068
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4023: LD_VAR 0 7
4027: PPUSH
4028: LD_EXP 10
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_EXP 10
4041: PUSH
4042: LD_INT 2
4044: ARRAY
4045: PPUSH
4046: LD_EXP 10
4050: PUSH
4051: LD_INT 3
4053: ARRAY
4054: PPUSH
4055: LD_EXP 10
4059: PUSH
4060: LD_INT 4
4062: ARRAY
4063: PPUSH
4064: CALL_OW 567
// end ; end_of_file
4068: LD_VAR 0 3
4072: RET
// every 0 0$1 do
4073: GO 4075
4075: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 14
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL 1933 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: CALL 1933 0 3
// end ;
4102: END
// every 0 0$1 trigger russianAI = 1 do
4103: LD_EXP 13
4107: PUSH
4108: LD_INT 1
4110: EQUAL
4111: IFFALSE 4200
4113: GO 4115
4115: DISABLE
// begin enable ;
4116: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 22
4122: PPUSH
4123: LD_INT 7
4125: PPUSH
4126: LD_EXP 10
4130: PPUSH
4131: CALL 2174 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4135: LD_INT 3
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: LD_INT 7
4143: PPUSH
4144: LD_INT 14
4146: PUSH
4147: LD_INT 15
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL_OW 12
4164: ARRAY
4165: PPUSH
4166: CALL 2565 0 4
// IntBazooka ( 3 ) ;
4170: LD_INT 3
4172: PPUSH
4173: CALL 3490 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 51
4182: PPUSH
4183: LD_INT 14
4185: PPUSH
4186: CALL 3273 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 7
4195: PPUSH
4196: CALL 3818 0 2
// end ;
4200: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4201: LD_EXP 11
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 5
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_OWVAR 67
4224: ARRAY
4225: GREATEREQUAL
4226: PUSH
4227: LD_EXP 12
4231: PUSH
4232: LD_INT 1
4234: PUSH
4235: LD_INT 2
4237: PUSH
4238: LD_INT 3
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: PUSH
4246: LD_OWVAR 67
4250: ARRAY
4251: GREATEREQUAL
4252: AND
4253: IFFALSE 4711
4255: GO 4257
4257: DISABLE
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
4262: PPUSH
4263: PPUSH
// begin enable ;
4264: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4265: LD_ADDR_VAR 0 2
4269: PUSH
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 12
4279: UNION
4280: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4281: LD_ADDR_EXP 11
4285: PUSH
4286: LD_EXP 11
4290: PUSH
4291: LD_VAR 0 2
4295: DIFF
4296: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4297: LD_ADDR_EXP 12
4301: PUSH
4302: LD_EXP 12
4306: PUSH
4307: LD_VAR 0 2
4311: DIFF
4312: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4313: LD_INT 116
4315: PPUSH
4316: CALL_OW 302
4320: IFFALSE 4389
// begin for j in tmp do
4322: LD_ADDR_VAR 0 1
4326: PUSH
4327: LD_VAR 0 2
4331: PUSH
4332: FOR_IN
4333: IFFALSE 4380
// if j mod 3 = 0 then
4335: LD_VAR 0 1
4339: PUSH
4340: LD_INT 3
4342: MOD
4343: PUSH
4344: LD_INT 0
4346: EQUAL
4347: IFFALSE 4363
// ComEnterUnit ( j , ruTeleport ) else
4349: LD_VAR 0 1
4353: PPUSH
4354: LD_INT 116
4356: PPUSH
4357: CALL_OW 120
4361: GO 4378
// ComAgressiveMove ( j , 117 , 92 ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_INT 117
4370: PPUSH
4371: LD_INT 92
4373: PPUSH
4374: CALL_OW 114
4378: GO 4332
4380: POP
4381: POP
// wait ( 0 0$8 ) ;
4382: LD_INT 280
4384: PPUSH
4385: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4389: LD_INT 35
4391: PPUSH
4392: CALL_OW 67
// for j in tmp do
4396: LD_ADDR_VAR 0 1
4400: PUSH
4401: LD_VAR 0 2
4405: PUSH
4406: FOR_IN
4407: IFFALSE 4702
// begin if IsDead ( j ) then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 301
4418: IFFALSE 4436
// tmp := tmp diff j ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_VAR 0 2
4429: PUSH
4430: LD_VAR 0 1
4434: DIFF
4435: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_INT 81
4443: PUSH
4444: LD_INT 3
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: PPUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 74
4465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_INT 81
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 1
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 74
4512: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 264
4522: PUSH
4523: LD_INT 49
4525: EQUAL
4526: IFFALSE 4634
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 34
4538: PUSH
4539: LD_INT 49
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PPUSH
4550: CALL_OW 72
4554: PUSH
4555: LD_INT 1
4557: GREATER
4558: IFFALSE 4608
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4560: LD_VAR 0 1
4564: PPUSH
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 49
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 72
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: CALL_OW 74
4601: PPUSH
4602: CALL_OW 112
4606: GO 4632
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4608: LD_VAR 0 1
4612: PPUSH
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 74
4627: PPUSH
4628: CALL_OW 112
// end else
4632: GO 4700
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4634: LD_VAR 0 1
4638: PPUSH
4639: LD_VAR 0 4
4643: PPUSH
4644: CALL_OW 296
4648: PUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_VAR 0 3
4658: PPUSH
4659: CALL_OW 296
4663: PUSH
4664: LD_INT 2
4666: PLUS
4667: LESS
4668: IFFALSE 4686
// ComAttackUnit ( j , target2 ) else
4670: LD_VAR 0 1
4674: PPUSH
4675: LD_VAR 0 4
4679: PPUSH
4680: CALL_OW 115
4684: GO 4700
// ComAttackUnit ( j , target1 ) ;
4686: LD_VAR 0 1
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 115
// end ; end ;
4700: GO 4406
4702: POP
4703: POP
// until not tmp ;
4704: LD_VAR 0 2
4708: NOT
4709: IFFALSE 4389
// end ;
4711: PPOPN 4
4713: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4714: LD_INT 22
4716: PPUSH
4717: CALL_OW 303
4721: PUSH
4722: LD_INT 22
4724: PPUSH
4725: CALL_OW 255
4729: PUSH
4730: LD_INT 1
4732: EQUAL
4733: OR
4734: IFFALSE 4749
4736: GO 4738
4738: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4739: LD_INT 3
4741: PPUSH
4742: LD_INT 22
4744: PPUSH
4745: CALL 3109 0 2
4749: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4750: LD_EXP 13
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 21
4771: PUSH
4772: LD_INT 2
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 50
4781: PUSH
4782: EMPTY
4783: LIST
4784: PUSH
4785: LD_INT 33
4787: PUSH
4788: LD_INT 3
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 34
4800: PUSH
4801: LD_INT 46
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 34
4810: PUSH
4811: LD_INT 45
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 44
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 34
4830: PUSH
4831: LD_INT 49
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 47
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 3
4870: LESS
4871: AND
4872: IFFALSE 5059
4874: GO 4876
4876: DISABLE
// begin enable ;
4877: ENABLE
// if russianRocketsAvalaible = 1 then
4878: LD_EXP 14
4882: PUSH
4883: LD_INT 1
4885: EQUAL
4886: IFFALSE 4943
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: LD_INT 3
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: LD_INT 5
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_OWVAR 67
4912: ARRAY
4913: PPUSH
4914: LD_INT 46
4916: PUSH
4917: LD_INT 45
4919: PUSH
4920: LD_INT 44
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PPUSH
4928: LD_INT 3
4930: PPUSH
4931: LD_INT 3
4933: PPUSH
4934: LD_INT 24
4936: PPUSH
4937: CALL 3416 0 7
4941: GO 5000
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: LD_INT 3
4951: PUSH
4952: LD_INT 4
4954: PUSH
4955: LD_INT 5
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PUSH
4963: LD_OWVAR 67
4967: ARRAY
4968: PPUSH
4969: LD_INT 46
4971: PUSH
4972: LD_INT 45
4974: PUSH
4975: LD_INT 44
4977: PUSH
4978: LD_INT 47
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: LD_INT 3
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 24
4995: PPUSH
4996: CALL 3416 0 7
// if russianTimeLapsers = 0 then
5000: LD_EXP 12
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: IFFALSE 5059
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 40
5015: PPUSH
5016: LD_INT 1
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: LD_OWVAR 67
5034: ARRAY
5035: PPUSH
5036: LD_INT 49
5038: PUSH
5039: LD_INT 49
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: LD_INT 3
5051: PPUSH
5052: LD_INT 24
5054: PPUSH
5055: CALL 3416 0 7
// end ;
5059: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5060: LD_EXP 18
5064: PUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_INT 58
5087: PUSH
5088: EMPTY
5089: LIST
5090: PUSH
5091: LD_INT 33
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 91
5103: PUSH
5104: LD_EXP 18
5108: PUSH
5109: LD_INT 45
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: AND
5129: IFFALSE 5233
5131: GO 5133
5133: DISABLE
// begin wait ( 0 0$5 ) ;
5134: LD_INT 175
5136: PPUSH
5137: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5141: LD_EXP 18
5145: PPUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 21
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 58
5168: PUSH
5169: EMPTY
5170: LIST
5171: PUSH
5172: LD_INT 33
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 91
5184: PUSH
5185: LD_EXP 18
5189: PUSH
5190: LD_INT 45
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 69
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5218: LD_EXP 18
5222: PPUSH
5223: LD_INT 127
5225: PPUSH
5226: LD_INT 63
5228: PPUSH
5229: CALL_OW 171
// end ; end_of_file
5233: END
// every 1 do var dec1 , dec2 ;
5234: GO 5236
5236: DISABLE
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
// begin InGameOn ;
5241: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5245: LD_INT 48
5247: PPUSH
5248: LD_STRING deltakappa
5250: PPUSH
5251: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5255: LD_INT 95
5257: PPUSH
5258: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5262: LD_INT 95
5264: PPUSH
5265: LD_INT 30
5267: PPUSH
5268: LD_INT 11
5270: PPUSH
5271: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5275: LD_INT 30
5277: PPUSH
5278: LD_INT 11
5280: PPUSH
5281: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5285: LD_EXP 5
5289: PPUSH
5290: LD_STRING D1-Pow-1
5292: PPUSH
5293: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5306: LD_EXP 1
5310: PPUSH
5311: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5315: LD_EXP 1
5319: PPUSH
5320: LD_STRING D1-JMM-1
5322: PPUSH
5323: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5327: LD_EXP 5
5331: PPUSH
5332: LD_STRING D1-Pow-2
5334: PPUSH
5335: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D1-JMM-2
5346: PPUSH
5347: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5351: LD_EXP 1
5355: PPUSH
5356: LD_INT 95
5358: PPUSH
5359: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5363: LD_STRING M1
5365: PPUSH
5366: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5370: LD_INT 35
5372: PPUSH
5373: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5377: LD_EXP 1
5381: PPUSH
5382: LD_INT 95
5384: PPUSH
5385: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5389: LD_INT 95
5391: PPUSH
5392: LD_INT 51
5394: PPUSH
5395: LD_INT 21
5397: PPUSH
5398: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5402: LD_INT 95
5404: PPUSH
5405: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5409: LD_INT 95
5411: PPUSH
5412: LD_INT 5
5414: PPUSH
5415: CALL_OW 308
5419: IFFALSE 5370
// if JMMGirl = 1 then
5421: LD_EXP 7
5425: PUSH
5426: LD_INT 1
5428: EQUAL
5429: IFFALSE 5742
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D2J-Joan-1
5438: PPUSH
5439: CALL_OW 94
// dec1 = query ( Q1 ) ;
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_STRING Q1
5450: PPUSH
5451: CALL_OW 97
5455: ST_TO_ADDR
// if dec1 = 1 then
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: EQUAL
5464: IFFALSE 5718
// begin ComExitVehicle ( JMM ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D2J-JMM-1
5482: PPUSH
5483: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5487: LD_EXP 2
5491: PPUSH
5492: LD_STRING D2J-Joan-2
5494: PPUSH
5495: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5499: LD_EXP 1
5503: PPUSH
5504: LD_STRING D2J-JMM-2
5506: PPUSH
5507: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5511: LD_EXP 2
5515: PPUSH
5516: LD_STRING D2J-Joan-3
5518: PPUSH
5519: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5523: LD_EXP 5
5527: PPUSH
5528: LD_STRING DPowell-Pow-1
5530: PPUSH
5531: CALL_OW 94
// dec2 = query ( Q2J ) ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_STRING Q2J
5542: PPUSH
5543: CALL_OW 97
5547: ST_TO_ADDR
// if dec2 = 1 then
5548: LD_VAR 0 2
5552: PUSH
5553: LD_INT 1
5555: EQUAL
5556: IFFALSE 5598
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5558: LD_EXP 1
5562: PPUSH
5563: LD_STRING D2Ja-JMM-1
5565: PPUSH
5566: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5570: LD_EXP 2
5574: PPUSH
5575: LD_STRING D2Ja-Joan-1
5577: PPUSH
5578: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D2Ja-JMM-2
5589: PPUSH
5590: CALL_OW 88
// InGameOff ;
5594: CALL_OW 9
// end ; if dec2 = 2 then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_INT 2
5605: EQUAL
5606: IFFALSE 5682
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5608: LD_EXP 1
5612: PPUSH
5613: LD_STRING D2Jb-JMM-1
5615: PPUSH
5616: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5620: LD_EXP 2
5624: PPUSH
5625: LD_STRING D2Jb-Joan-1
5627: PPUSH
5628: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5632: LD_EXP 1
5636: PPUSH
5637: LD_STRING D2Jb-JMM-2
5639: PPUSH
5640: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5644: LD_EXP 2
5648: PPUSH
5649: LD_STRING D2Jb-Joan-2
5651: PPUSH
5652: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5656: LD_EXP 1
5660: PPUSH
5661: LD_STRING D2Jb-JMM-3
5663: PPUSH
5664: CALL_OW 88
// fastEnd = 1 ;
5668: LD_ADDR_EXP 15
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// FinishMission ;
5676: CALL 9298 0 0
// exit ;
5680: GO 6312
// end ; if dec2 = 3 then
5682: LD_VAR 0 2
5686: PUSH
5687: LD_INT 3
5689: EQUAL
5690: IFFALSE 5718
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5692: LD_EXP 2
5696: PPUSH
5697: LD_STRING D2Jc-Joan-1
5699: PPUSH
5700: CALL_OW 94
// fastEnd = 1 ;
5704: LD_ADDR_EXP 15
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// FinishMission ;
5712: CALL 9298 0 0
// exit ;
5716: GO 6312
// end ; end ; if dec1 = 2 then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_INT 2
5725: EQUAL
5726: IFFALSE 5742
// begin fastEnd = 1 ;
5728: LD_ADDR_EXP 15
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// FinishMission ;
5736: CALL 9298 0 0
// exit ;
5740: GO 6312
// end ; end ; if JMMGirl = 2 then
5742: LD_EXP 7
5746: PUSH
5747: LD_INT 2
5749: EQUAL
5750: IFFALSE 6075
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5752: LD_EXP 3
5756: PPUSH
5757: LD_STRING D2L-Lisa-1
5759: PPUSH
5760: CALL_OW 94
// dec1 = query ( Q1 ) ;
5764: LD_ADDR_VAR 0 1
5768: PUSH
5769: LD_STRING Q1
5771: PPUSH
5772: CALL_OW 97
5776: ST_TO_ADDR
// if dec1 = 1 then
5777: LD_VAR 0 1
5781: PUSH
5782: LD_INT 1
5784: EQUAL
5785: IFFALSE 6051
// begin ComExitVehicle ( JMM ) ;
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5796: LD_EXP 1
5800: PPUSH
5801: LD_STRING D2L-JMM-1
5803: PPUSH
5804: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5808: LD_EXP 3
5812: PPUSH
5813: LD_STRING D2L-Lisa-2
5815: PPUSH
5816: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5820: LD_EXP 1
5824: PPUSH
5825: LD_STRING D2L-JMM-2
5827: PPUSH
5828: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5832: LD_EXP 3
5836: PPUSH
5837: LD_STRING D2L-Lisa-3
5839: PPUSH
5840: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5844: LD_EXP 5
5848: PPUSH
5849: LD_STRING DPowell-Pow-1
5851: PPUSH
5852: CALL_OW 94
// dec2 = query ( Q2L ) ;
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_STRING Q2L
5863: PPUSH
5864: CALL_OW 97
5868: ST_TO_ADDR
// if dec2 = 1 then
5869: LD_VAR 0 2
5873: PUSH
5874: LD_INT 1
5876: EQUAL
5877: IFFALSE 5943
// begin Say ( JMM , D2La-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D2La-JMM-1
5886: PPUSH
5887: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5891: LD_EXP 3
5895: PPUSH
5896: LD_STRING D2La-Lisa-1
5898: PPUSH
5899: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D2La-JMM-2
5910: PPUSH
5911: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5915: LD_EXP 3
5919: PPUSH
5920: LD_STRING D2La-Lisa-2
5922: PPUSH
5923: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D2La-JMM-3
5934: PPUSH
5935: CALL_OW 88
// InGameOff ;
5939: CALL_OW 9
// end ; if dec2 = 2 then
5943: LD_VAR 0 2
5947: PUSH
5948: LD_INT 2
5950: EQUAL
5951: IFFALSE 6015
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5953: LD_EXP 1
5957: PPUSH
5958: LD_STRING D2Lb-JMM-1
5960: PPUSH
5961: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5965: LD_EXP 3
5969: PPUSH
5970: LD_STRING D2Lb-Lisa-1
5972: PPUSH
5973: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5977: LD_EXP 1
5981: PPUSH
5982: LD_STRING D2Lb-JMM-2
5984: PPUSH
5985: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5989: LD_EXP 3
5993: PPUSH
5994: LD_STRING D2Lb-Lisa-2
5996: PPUSH
5997: CALL_OW 94
// fastEnd = 1 ;
6001: LD_ADDR_EXP 15
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// FinishMission ;
6009: CALL 9298 0 0
// exit ;
6013: GO 6312
// end ; if dec2 = 3 then
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: EQUAL
6023: IFFALSE 6051
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6025: LD_EXP 3
6029: PPUSH
6030: LD_STRING D2Lc-Lisa-1
6032: PPUSH
6033: CALL_OW 94
// fastEnd = 1 ;
6037: LD_ADDR_EXP 15
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// FinishMission ;
6045: CALL 9298 0 0
// exit ;
6049: GO 6312
// end ; end ; if dec1 = 2 then
6051: LD_VAR 0 1
6055: PUSH
6056: LD_INT 2
6058: EQUAL
6059: IFFALSE 6075
// begin fastEnd = 1 ;
6061: LD_ADDR_EXP 15
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// FinishMission ;
6069: CALL 9298 0 0
// exit ;
6073: GO 6312
// end ; end ; if JMMGirl = 3 then
6075: LD_EXP 7
6079: PUSH
6080: LD_INT 3
6082: EQUAL
6083: IFFALSE 6312
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6085: LD_EXP 4
6089: PPUSH
6090: LD_STRING D2X-Con-1
6092: PPUSH
6093: CALL_OW 94
// dec1 = query ( Q1 ) ;
6097: LD_ADDR_VAR 0 1
6101: PUSH
6102: LD_STRING Q1
6104: PPUSH
6105: CALL_OW 97
6109: ST_TO_ADDR
// if dec1 = 1 then
6110: LD_VAR 0 1
6114: PUSH
6115: LD_INT 1
6117: EQUAL
6118: IFFALSE 6288
// begin ComExitVehicle ( JMM ) ;
6120: LD_EXP 1
6124: PPUSH
6125: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D2X-JMM-1
6136: PPUSH
6137: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6141: LD_EXP 4
6145: PPUSH
6146: LD_STRING D2X-Con-2
6148: PPUSH
6149: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6153: LD_EXP 5
6157: PPUSH
6158: LD_STRING DPowell-Pow-1
6160: PPUSH
6161: CALL_OW 94
// dec2 = query ( Q2X ) ;
6165: LD_ADDR_VAR 0 2
6169: PUSH
6170: LD_STRING Q2X
6172: PPUSH
6173: CALL_OW 97
6177: ST_TO_ADDR
// if dec2 = 1 then
6178: LD_VAR 0 2
6182: PUSH
6183: LD_INT 1
6185: EQUAL
6186: IFFALSE 6204
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2Xa-JMM-1
6195: PPUSH
6196: CALL_OW 88
// InGameOff ;
6200: CALL_OW 9
// end ; if dec2 = 2 then
6204: LD_VAR 0 2
6208: PUSH
6209: LD_INT 2
6211: EQUAL
6212: IFFALSE 6252
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6214: LD_EXP 1
6218: PPUSH
6219: LD_STRING D2Xb-JMM-1
6221: PPUSH
6222: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6226: LD_EXP 4
6230: PPUSH
6231: LD_STRING D2Xb-Con-1
6233: PPUSH
6234: CALL_OW 94
// fastEnd = 1 ;
6238: LD_ADDR_EXP 15
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// FinishMission ;
6246: CALL 9298 0 0
// exit ;
6250: GO 6312
// end ; if dec2 = 3 then
6252: LD_VAR 0 2
6256: PUSH
6257: LD_INT 3
6259: EQUAL
6260: IFFALSE 6288
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6262: LD_EXP 4
6266: PPUSH
6267: LD_STRING D2Xc-Con-1
6269: PPUSH
6270: CALL_OW 94
// fastEnd = 1 ;
6274: LD_ADDR_EXP 15
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// FinishMission ;
6282: CALL 9298 0 0
// exit ;
6286: GO 6312
// end ; end ; if dec1 = 2 then
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6312
// begin fastEnd = 1 ;
6298: LD_ADDR_EXP 15
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// FinishMission ;
6306: CALL 9298 0 0
// exit ;
6310: GO 6312
// end ; end ; end ;
6312: PPOPN 2
6314: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6315: LD_EXP 1
6319: PPUSH
6320: LD_INT 6
6322: PPUSH
6323: CALL_OW 308
6327: IFFALSE 7069
6329: GO 6331
6331: DISABLE
// begin InGameOn ;
6332: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6336: LD_INT 35
6338: PPUSH
6339: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6343: LD_EXP 1
6347: PPUSH
6348: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6352: LD_EXP 1
6356: PPUSH
6357: LD_INT 62
6359: PPUSH
6360: LD_INT 104
6362: PPUSH
6363: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6367: LD_EXP 1
6371: PPUSH
6372: LD_EXP 2
6376: PPUSH
6377: CALL_OW 296
6381: PUSH
6382: LD_INT 4
6384: LESS
6385: PUSH
6386: LD_EXP 1
6390: PPUSH
6391: LD_EXP 3
6395: PPUSH
6396: CALL_OW 296
6400: PUSH
6401: LD_INT 4
6403: LESS
6404: OR
6405: PUSH
6406: LD_EXP 1
6410: PPUSH
6411: LD_EXP 4
6415: PPUSH
6416: CALL_OW 296
6420: PUSH
6421: LD_INT 4
6423: LESS
6424: OR
6425: IFFALSE 6336
// case JMMGirl of 1 :
6427: LD_EXP 7
6431: PUSH
6432: LD_INT 1
6434: DOUBLE
6435: EQUAL
6436: IFTRUE 6440
6438: GO 6652
6440: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6441: LD_INT 22
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6463: LD_EXP 2
6467: PPUSH
6468: LD_EXP 1
6472: PPUSH
6473: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6477: LD_EXP 1
6481: PPUSH
6482: LD_EXP 2
6486: PPUSH
6487: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6491: LD_EXP 2
6495: PUSH
6496: LD_EXP 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 87
// wait ( 0 0$1 ) ;
6509: LD_INT 35
6511: PPUSH
6512: CALL_OW 67
// DialogueOn ;
6516: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6520: LD_EXP 2
6524: PPUSH
6525: LD_STRING D3J-Joan-1
6527: PPUSH
6528: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D3J-JMM-1
6539: PPUSH
6540: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6544: LD_EXP 2
6548: PPUSH
6549: LD_STRING D3J-Joan-2
6551: PPUSH
6552: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D3J-JMM-2
6563: PPUSH
6564: CALL_OW 88
// wait ( 0 0$1 ) ;
6568: LD_INT 35
6570: PPUSH
6571: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6575: LD_EXP 1
6579: PPUSH
6580: LD_STRING D4-JMM-1
6582: PPUSH
6583: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6587: LD_EXP 2
6591: PPUSH
6592: LD_STRING D4-Joan-1
6594: PPUSH
6595: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6599: LD_EXP 1
6603: PPUSH
6604: LD_STRING D4-JMM-2
6606: PPUSH
6607: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6611: LD_EXP 2
6615: PPUSH
6616: LD_STRING D4-Joan-2
6618: PPUSH
6619: CALL_OW 88
// DialogueOff ;
6623: CALL_OW 7
// InGameOff ;
6627: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6631: LD_STRING M2J
6633: PPUSH
6634: CALL_OW 337
// SaveForQuickRestart ;
6638: CALL_OW 22
// russianAI = 1 ;
6642: LD_ADDR_EXP 13
6646: PUSH
6647: LD_INT 1
6649: ST_TO_ADDR
// end ; 2 :
6650: GO 7069
6652: LD_INT 2
6654: DOUBLE
6655: EQUAL
6656: IFTRUE 6660
6658: GO 6872
6660: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6661: LD_INT 22
6663: PUSH
6664: LD_INT 4
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 69
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6683: LD_EXP 3
6687: PPUSH
6688: LD_EXP 1
6692: PPUSH
6693: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6697: LD_EXP 1
6701: PPUSH
6702: LD_EXP 3
6706: PPUSH
6707: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6711: LD_EXP 3
6715: PUSH
6716: LD_EXP 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 87
// wait ( 0 0$1 ) ;
6729: LD_INT 35
6731: PPUSH
6732: CALL_OW 67
// DialogueOn ;
6736: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6740: LD_EXP 3
6744: PPUSH
6745: LD_STRING D3L-Lisa-1
6747: PPUSH
6748: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6752: LD_EXP 1
6756: PPUSH
6757: LD_STRING D3L-JMM-1
6759: PPUSH
6760: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6764: LD_EXP 3
6768: PPUSH
6769: LD_STRING D3L-Lisa-2
6771: PPUSH
6772: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6776: LD_EXP 1
6780: PPUSH
6781: LD_STRING D3L-JMM-2
6783: PPUSH
6784: CALL_OW 88
// wait ( 0 0$1 ) ;
6788: LD_INT 35
6790: PPUSH
6791: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6795: LD_EXP 1
6799: PPUSH
6800: LD_STRING D4-JMM-1
6802: PPUSH
6803: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6807: LD_EXP 3
6811: PPUSH
6812: LD_STRING D4-Lisa-1
6814: PPUSH
6815: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6819: LD_EXP 1
6823: PPUSH
6824: LD_STRING D4-JMM-1
6826: PPUSH
6827: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6831: LD_EXP 3
6835: PPUSH
6836: LD_STRING D4-Lisa-2
6838: PPUSH
6839: CALL_OW 88
// DialogueOff ;
6843: CALL_OW 7
// InGameOff ;
6847: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6851: LD_STRING M2L
6853: PPUSH
6854: CALL_OW 337
// SaveForQuickRestart ;
6858: CALL_OW 22
// russianAI = 1 ;
6862: LD_ADDR_EXP 13
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// end ; 3 :
6870: GO 7069
6872: LD_INT 3
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 7068
6880: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6881: LD_INT 22
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6903: LD_EXP 4
6907: PPUSH
6908: LD_EXP 1
6912: PPUSH
6913: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6917: LD_EXP 1
6921: PPUSH
6922: LD_EXP 4
6926: PPUSH
6927: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6931: LD_EXP 2
6935: PUSH
6936: LD_EXP 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 87
// wait ( 0 0$1 ) ;
6949: LD_INT 35
6951: PPUSH
6952: CALL_OW 67
// DialogueOn ;
6956: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6960: LD_EXP 4
6964: PPUSH
6965: LD_STRING D3X-Con-1
6967: PPUSH
6968: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D3J-JMM-1
6979: PPUSH
6980: CALL_OW 88
// wait ( 0 0$1 ) ;
6984: LD_INT 35
6986: PPUSH
6987: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6991: LD_EXP 1
6995: PPUSH
6996: LD_STRING D4-JMM-1
6998: PPUSH
6999: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7003: LD_EXP 4
7007: PPUSH
7008: LD_STRING D4-Con-1
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7015: LD_EXP 1
7019: PPUSH
7020: LD_STRING D4-JMM-2
7022: PPUSH
7023: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7027: LD_EXP 4
7031: PPUSH
7032: LD_STRING D4-Con-2
7034: PPUSH
7035: CALL_OW 88
// DialogueOff ;
7039: CALL_OW 7
// InGameOff ;
7043: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7047: LD_STRING M2X
7049: PPUSH
7050: CALL_OW 337
// SaveForQuickRestart ;
7054: CALL_OW 22
// russianAI = 1 ;
7058: LD_ADDR_EXP 13
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// end ; end ;
7066: GO 7069
7068: POP
// end ;
7069: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7070: LD_INT 32
7072: PPUSH
7073: CALL_OW 306
7077: IFFALSE 7410
7079: GO 7081
7081: DISABLE
// begin case JMMGirl of 1 :
7082: LD_EXP 7
7086: PUSH
7087: LD_INT 1
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7217
7095: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7096: LD_EXP 1
7100: PPUSH
7101: LD_STRING D6J-JMM-1
7103: PPUSH
7104: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7108: LD_STRING 13f_Denis
7110: PPUSH
7111: CALL_OW 28
7115: PUSH
7116: LD_INT 1
7118: EQUAL
7119: PUSH
7120: LD_STRING 13s_Denis
7122: PPUSH
7123: CALL_OW 28
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: OR
7132: IFFALSE 7172
// begin Say ( Joan , D6J-Joan-1 ) ;
7134: LD_EXP 2
7138: PPUSH
7139: LD_STRING D6J-Joan-1
7141: PPUSH
7142: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6J-JMM-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7158: LD_EXP 2
7162: PPUSH
7163: LD_STRING D6J-Joan-2
7165: PPUSH
7166: CALL_OW 88
// end else
7170: GO 7184
// begin Say ( Joan , D6J-Joan-2a ) ;
7172: LD_EXP 2
7176: PPUSH
7177: LD_STRING D6J-Joan-2a
7179: PPUSH
7180: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D6J-JMM-3
7191: PPUSH
7192: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7196: LD_EXP 2
7200: PPUSH
7201: LD_STRING D6J-Joan-3
7203: PPUSH
7204: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7208: LD_STRING M3
7210: PPUSH
7211: CALL_OW 337
// end ; 2 :
7215: GO 7410
7217: LD_INT 2
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7283
7225: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D6L-JMM-1
7233: PPUSH
7234: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7238: LD_EXP 3
7242: PPUSH
7243: LD_STRING D6L-Lisa-1
7245: PPUSH
7246: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7250: LD_EXP 1
7254: PPUSH
7255: LD_STRING D6L-JMM-2
7257: PPUSH
7258: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7262: LD_EXP 3
7266: PPUSH
7267: LD_STRING D6L-Lisa-2
7269: PPUSH
7270: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7274: LD_STRING M3
7276: PPUSH
7277: CALL_OW 337
// end ; 3 :
7281: GO 7410
7283: LD_INT 3
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7409
7291: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7292: LD_EXP 1
7296: PPUSH
7297: LD_STRING D6X-JMM-1
7299: PPUSH
7300: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7304: LD_EXP 4
7308: PPUSH
7309: LD_STRING D6X-Con-1
7311: PPUSH
7312: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7316: LD_EXP 1
7320: PPUSH
7321: LD_STRING D6X-JMM-2
7323: PPUSH
7324: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7328: LD_EXP 4
7332: PPUSH
7333: LD_STRING D6X-Con-2
7335: PPUSH
7336: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7340: LD_EXP 1
7344: PPUSH
7345: LD_STRING D6X-JMM-3
7347: PPUSH
7348: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7352: LD_EXP 4
7356: PPUSH
7357: LD_STRING D6X-Con-3
7359: PPUSH
7360: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7364: LD_EXP 1
7368: PPUSH
7369: LD_STRING D6X-JMM-4
7371: PPUSH
7372: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7376: LD_EXP 4
7380: PPUSH
7381: LD_STRING D6X-Con-4
7383: PPUSH
7384: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7388: LD_EXP 1
7392: PPUSH
7393: LD_STRING D6X-JMM-5
7395: PPUSH
7396: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7400: LD_STRING M3
7402: PPUSH
7403: CALL_OW 337
// end ; end ;
7407: GO 7410
7409: POP
// end ;
7410: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7411: LD_INT 22
7413: PUSH
7414: LD_INT 1
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 33
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PPUSH
7440: CALL_OW 306
7444: IFFALSE 7590
7446: GO 7448
7448: DISABLE
// begin case JMMGirl of 1 :
7449: LD_EXP 7
7453: PUSH
7454: LD_INT 1
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7499
7462: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7463: LD_EXP 1
7467: PPUSH
7468: LD_STRING D5-JMM-1
7470: PPUSH
7471: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7475: LD_INT 77
7477: PPUSH
7478: LD_INT 87
7480: PPUSH
7481: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7485: LD_EXP 2
7489: PPUSH
7490: LD_STRING D5-Joan-1
7492: PPUSH
7493: CALL_OW 88
// end ; 2 :
7497: GO 7590
7499: LD_INT 2
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7544
7507: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7508: LD_EXP 1
7512: PPUSH
7513: LD_STRING D5-JMM-1
7515: PPUSH
7516: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7520: LD_INT 77
7522: PPUSH
7523: LD_INT 87
7525: PPUSH
7526: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7530: LD_EXP 3
7534: PPUSH
7535: LD_STRING D5-Lisa-1
7537: PPUSH
7538: CALL_OW 88
// end ; 3 :
7542: GO 7590
7544: LD_INT 3
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7589
7552: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7553: LD_EXP 1
7557: PPUSH
7558: LD_STRING D5-JMM-1
7560: PPUSH
7561: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7565: LD_INT 77
7567: PPUSH
7568: LD_INT 87
7570: PPUSH
7571: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7575: LD_EXP 4
7579: PPUSH
7580: LD_STRING D5-Con-1
7582: PPUSH
7583: CALL_OW 88
// end ; end ;
7587: GO 7590
7589: POP
// end ;
7590: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7591: LD_INT 48
7593: PPUSH
7594: CALL_OW 255
7598: PUSH
7599: LD_INT 1
7601: EQUAL
7602: IFFALSE 7699
7604: GO 7606
7606: DISABLE
// begin DialogueOn ;
7607: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7611: LD_EXP 5
7615: PPUSH
7616: LD_STRING D7-Pow-1
7618: PPUSH
7619: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7623: LD_EXP 1
7627: PPUSH
7628: LD_STRING D7-JMM-1
7630: PPUSH
7631: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7635: LD_EXP 5
7639: PPUSH
7640: LD_STRING D7-Pow-2
7642: PPUSH
7643: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7647: LD_EXP 1
7651: PPUSH
7652: LD_STRING D7-JMM-2
7654: PPUSH
7655: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7659: LD_EXP 5
7663: PPUSH
7664: LD_STRING D7-Pow-3
7666: PPUSH
7667: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7671: LD_EXP 1
7675: PPUSH
7676: LD_STRING D7-JMM-3
7678: PPUSH
7679: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7683: LD_EXP 5
7687: PPUSH
7688: LD_STRING D7-Pow-4
7690: PPUSH
7691: CALL_OW 94
// DialogueOff ;
7695: CALL_OW 7
// end ; end_of_file
7699: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: LD_INT 3
7712: EQUAL
7713: IFFALSE 7787
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7715: LD_ADDR_EXP 10
7719: PUSH
7720: LD_EXP 10
7724: PPUSH
7725: LD_INT 1
7727: PPUSH
7728: CALL_OW 3
7732: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7733: LD_ADDR_EXP 10
7737: PUSH
7738: LD_EXP 10
7742: PPUSH
7743: LD_INT 1
7745: PPUSH
7746: CALL_OW 3
7750: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7751: LD_ADDR_EXP 10
7755: PUSH
7756: LD_EXP 10
7760: PPUSH
7761: LD_INT 1
7763: PPUSH
7764: CALL_OW 3
7768: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7769: LD_ADDR_EXP 10
7773: PUSH
7774: LD_EXP 10
7778: PPUSH
7779: LD_INT 1
7781: PPUSH
7782: CALL_OW 3
7786: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 255
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_INT 0
7813: EQUAL
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 2
7827: EQUAL
7828: OR
7829: PUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 266
7839: PUSH
7840: LD_INT 4
7842: EQUAL
7843: OR
7844: PUSH
7845: EMPTY
7846: LIST
7847: AND
7848: IFFALSE 7859
// ComUpgrade ( building ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 255
7868: PUSH
7869: LD_INT 3
7871: EQUAL
7872: PUSH
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 266
7882: PUSH
7883: LD_INT 32
7885: EQUAL
7886: AND
7887: IFFALSE 7928
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_INT 42
7896: PUSH
7897: LD_INT 43
7899: PUSH
7900: LD_INT 44
7902: PUSH
7903: LD_INT 46
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 1
7914: PPUSH
7915: LD_INT 4
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7928: LD_VAR 0 1
7932: PPUSH
7933: CALL_OW 255
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: PUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 266
7951: PUSH
7952: LD_INT 33
7954: EQUAL
7955: AND
7956: IFFALSE 7997
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 42
7965: PUSH
7966: LD_INT 43
7968: PUSH
7969: LD_INT 44
7971: PUSH
7972: LD_INT 46
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 1
7983: PPUSH
7984: LD_INT 4
7986: PPUSH
7987: CALL_OW 12
7991: ARRAY
7992: PPUSH
7993: CALL_OW 208
// end ;
7997: PPOPN 1
7999: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8000: LD_VAR 0 1
8004: PUSH
8005: LD_EXP 11
8009: IN
8010: IFFALSE 8028
// russianTanks := russianTanks diff unit ;
8012: LD_ADDR_EXP 11
8016: PUSH
8017: LD_EXP 11
8021: PUSH
8022: LD_VAR 0 1
8026: DIFF
8027: ST_TO_ADDR
// if unit in russianTimeLapsers then
8028: LD_VAR 0 1
8032: PUSH
8033: LD_EXP 12
8037: IN
8038: IFFALSE 8056
// russianTimeLapsers := russianTimeLapsers diff unit ;
8040: LD_ADDR_EXP 12
8044: PUSH
8045: LD_EXP 12
8049: PUSH
8050: LD_VAR 0 1
8054: DIFF
8055: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 255
8065: PUSH
8066: LD_INT 3
8068: EQUAL
8069: PUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 247
8079: PUSH
8080: LD_INT 3
8082: EQUAL
8083: AND
8084: IFFALSE 8548
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 31
8098: PUSH
8099: LD_INT 32
8101: PUSH
8102: LD_INT 36
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: LD_INT 24
8110: PUSH
8111: LD_INT 17
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 19
8119: PUSH
8120: LD_INT 20
8122: PUSH
8123: LD_INT 18
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 23
8131: PUSH
8132: LD_INT 16
8134: PUSH
8135: LD_INT 6
8137: PUSH
8138: LD_INT 29
8140: PUSH
8141: LD_INT 26
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 28
8149: PUSH
8150: LD_INT 27
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: IN
8186: IFFALSE 8272
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8188: LD_ADDR_EXP 10
8192: PUSH
8193: LD_EXP 10
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 266
8207: ADD
8208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8209: LD_ADDR_EXP 10
8213: PUSH
8214: LD_EXP 10
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 250
8228: ADD
8229: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8230: LD_ADDR_EXP 10
8234: PUSH
8235: LD_EXP 10
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 251
8249: ADD
8250: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8251: LD_ADDR_EXP 10
8255: PUSH
8256: LD_EXP 10
8260: PUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 254
8270: ADD
8271: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 266
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8364
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8287: LD_ADDR_EXP 10
8291: PUSH
8292: LD_EXP 10
8296: PUSH
8297: LD_INT 0
8299: ADD
8300: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8301: LD_ADDR_EXP 10
8305: PUSH
8306: LD_EXP 10
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 250
8320: ADD
8321: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8322: LD_ADDR_EXP 10
8326: PUSH
8327: LD_EXP 10
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 251
8341: ADD
8342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8343: LD_ADDR_EXP 10
8347: PUSH
8348: LD_EXP 10
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 254
8362: ADD
8363: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 266
8373: PUSH
8374: LD_INT 3
8376: EQUAL
8377: IFFALSE 8456
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8379: LD_ADDR_EXP 10
8383: PUSH
8384: LD_EXP 10
8388: PUSH
8389: LD_INT 2
8391: ADD
8392: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8393: LD_ADDR_EXP 10
8397: PUSH
8398: LD_EXP 10
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 250
8412: ADD
8413: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8414: LD_ADDR_EXP 10
8418: PUSH
8419: LD_EXP 10
8423: PUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 251
8433: ADD
8434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8435: LD_ADDR_EXP 10
8439: PUSH
8440: LD_EXP 10
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 254
8454: ADD
8455: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 266
8465: PUSH
8466: LD_INT 5
8468: EQUAL
8469: IFFALSE 8548
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8471: LD_ADDR_EXP 10
8475: PUSH
8476: LD_EXP 10
8480: PUSH
8481: LD_INT 4
8483: ADD
8484: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8485: LD_ADDR_EXP 10
8489: PUSH
8490: LD_EXP 10
8494: PUSH
8495: LD_VAR 0 1
8499: PPUSH
8500: CALL_OW 250
8504: ADD
8505: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8506: LD_ADDR_EXP 10
8510: PUSH
8511: LD_EXP 10
8515: PUSH
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 251
8525: ADD
8526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8527: LD_ADDR_EXP 10
8531: PUSH
8532: LD_EXP 10
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: CALL_OW 254
8546: ADD
8547: ST_TO_ADDR
// end ; end ; end ;
8548: PPOPN 1
8550: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8551: LD_VAR 0 3
8555: PPUSH
8556: CALL_OW 264
8560: PUSH
8561: LD_INT 10
8563: EQUAL
8564: IFFALSE 8580
// destroyCounter := destroyCounter + 1 ;
8566: LD_ADDR_EXP 17
8570: PUSH
8571: LD_EXP 17
8575: PUSH
8576: LD_INT 1
8578: PLUS
8579: ST_TO_ADDR
// end ;
8580: PPOPN 3
8582: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_INT 1
8590: EQUAL
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: LD_INT 40
8599: EQUAL
8600: OR
8601: IFFALSE 8725
// if GetSide ( vehicle ) = 3 then
8603: LD_VAR 0 1
8607: PPUSH
8608: CALL_OW 255
8612: PUSH
8613: LD_INT 3
8615: EQUAL
8616: IFFALSE 8725
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 264
8627: PUSH
8628: LD_INT 47
8630: EQUAL
8631: PUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 264
8641: PUSH
8642: LD_INT 46
8644: EQUAL
8645: OR
8646: PUSH
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 264
8656: PUSH
8657: LD_INT 45
8659: EQUAL
8660: OR
8661: PUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 264
8671: PUSH
8672: LD_INT 44
8674: EQUAL
8675: OR
8676: IFFALSE 8694
// russianTanks = russianTanks ^ vehicle ;
8678: LD_ADDR_EXP 11
8682: PUSH
8683: LD_EXP 11
8687: PUSH
8688: LD_VAR 0 1
8692: ADD
8693: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 264
8703: PUSH
8704: LD_INT 49
8706: EQUAL
8707: IFFALSE 8725
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8709: LD_ADDR_EXP 12
8713: PUSH
8714: LD_EXP 12
8718: PUSH
8719: LD_VAR 0 1
8723: ADD
8724: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 255
8734: PUSH
8735: LD_INT 1
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 264
8748: PUSH
8749: LD_INT 10
8751: EQUAL
8752: AND
8753: IFFALSE 8769
// amLaserCounter = amLaserCounter + 1 ;
8755: LD_ADDR_EXP 9
8759: PUSH
8760: LD_EXP 9
8764: PUSH
8765: LD_INT 1
8767: PLUS
8768: ST_TO_ADDR
// end ;
8769: PPOPN 2
8771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL 23882 0 1
// end ; end_of_file
8781: PPOPN 1
8783: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8784: LD_EXP 1
8788: PPUSH
8789: CALL_OW 310
8793: PPUSH
8794: LD_INT 12
8796: PPUSH
8797: CALL_OW 308
8801: PUSH
8802: LD_EXP 15
8806: PUSH
8807: LD_INT 0
8809: EQUAL
8810: AND
8811: IFFALSE 9157
8813: GO 8815
8815: DISABLE
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
// begin enable ;
8820: ENABLE
// if JMMGirl = 1 then
8821: LD_EXP 7
8825: PUSH
8826: LD_INT 1
8828: EQUAL
8829: IFFALSE 8846
// JMMGirlVeh = IsInUnit ( Joan ) ;
8831: LD_ADDR_VAR 0 1
8835: PUSH
8836: LD_EXP 2
8840: PPUSH
8841: CALL_OW 310
8845: ST_TO_ADDR
// if JMMGirl = 2 then
8846: LD_EXP 7
8850: PUSH
8851: LD_INT 2
8853: EQUAL
8854: IFFALSE 8871
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8856: LD_ADDR_VAR 0 1
8860: PUSH
8861: LD_EXP 3
8865: PPUSH
8866: CALL_OW 310
8870: ST_TO_ADDR
// if JMMGirl = 3 then
8871: LD_EXP 7
8875: PUSH
8876: LD_INT 3
8878: EQUAL
8879: IFFALSE 8896
// JMMGirlVeh = IsInUnit ( Connie ) ;
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_EXP 4
8890: PPUSH
8891: CALL_OW 310
8895: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8896: LD_EXP 1
8900: PPUSH
8901: CALL_OW 310
8905: PPUSH
8906: LD_EXP 2
8910: PPUSH
8911: CALL_OW 310
8915: PPUSH
8916: CALL_OW 296
8920: PUSH
8921: LD_INT 10
8923: LESS
8924: PUSH
8925: LD_EXP 1
8929: PPUSH
8930: CALL_OW 310
8934: PPUSH
8935: LD_EXP 3
8939: PPUSH
8940: CALL_OW 310
8944: PPUSH
8945: CALL_OW 296
8949: PUSH
8950: LD_INT 10
8952: LESS
8953: OR
8954: PUSH
8955: LD_EXP 1
8959: PPUSH
8960: CALL_OW 310
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 310
8974: PPUSH
8975: CALL_OW 296
8979: PUSH
8980: LD_INT 10
8982: LESS
8983: OR
8984: IFFALSE 9078
// begin case Query ( Q3b ) of 1 :
8986: LD_STRING Q3b
8988: PPUSH
8989: CALL_OW 97
8993: PUSH
8994: LD_INT 1
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9075
9002: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 265
9012: PUSH
9013: EMPTY
9014: LIST
9015: PUSH
9016: LD_VAR 0 1
9020: PPUSH
9021: CALL_OW 262
9025: PUSH
9026: EMPTY
9027: LIST
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 263
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 264
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: LD_STRING 14_JMMGirlVeh_1
9063: PPUSH
9064: CALL_OW 39
// FinishMission ;
9068: CALL 9298 0 0
// disable ;
9072: DISABLE
// end ; end ;
9073: GO 9076
9075: POP
// end else
9076: GO 9157
// begin if JMMGirl = 1 then
9078: LD_EXP 7
9082: PUSH
9083: LD_INT 1
9085: EQUAL
9086: IFFALSE 9103
// dec := Query ( Q3bJ ) else
9088: LD_ADDR_VAR 0 2
9092: PUSH
9093: LD_STRING Q3bJ
9095: PPUSH
9096: CALL_OW 97
9100: ST_TO_ADDR
9101: GO 9141
// if JMMGirl = 2 then
9103: LD_EXP 7
9107: PUSH
9108: LD_INT 2
9110: EQUAL
9111: IFFALSE 9128
// dec := Query ( Q3bL ) else
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_STRING Q3bL
9120: PPUSH
9121: CALL_OW 97
9125: ST_TO_ADDR
9126: GO 9141
// dec := Query ( Q3bX ) ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_STRING Q3bX
9135: PPUSH
9136: CALL_OW 97
9140: ST_TO_ADDR
// if dec = 1 then
9141: LD_VAR 0 2
9145: PUSH
9146: LD_INT 1
9148: EQUAL
9149: IFFALSE 9157
// begin FinishMission ;
9151: CALL 9298 0 0
// exit ;
9155: GO 9157
// end ; end ; end ;
9157: PPOPN 2
9159: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9160: LD_INT 22
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 21
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PPUSH
9184: CALL_OW 69
9188: PUSH
9189: LD_INT 0
9191: EQUAL
9192: PUSH
9193: LD_EXP 15
9197: PUSH
9198: LD_INT 0
9200: EQUAL
9201: AND
9202: IFFALSE 9297
9204: GO 9206
9206: DISABLE
// begin DialogueOn ;
9207: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9211: LD_EXP 1
9215: PPUSH
9216: LD_STRING DEnd-JMM-1
9218: PPUSH
9219: CALL_OW 88
// if JMMGirl = 1 then
9223: LD_EXP 7
9227: PUSH
9228: LD_INT 1
9230: EQUAL
9231: IFFALSE 9245
// Say ( Joan , DEnd-Joan-1 ) ;
9233: LD_EXP 2
9237: PPUSH
9238: LD_STRING DEnd-Joan-1
9240: PPUSH
9241: CALL_OW 88
// if JMMGirl = 2 then
9245: LD_EXP 7
9249: PUSH
9250: LD_INT 2
9252: EQUAL
9253: IFFALSE 9267
// Say ( Lisa , DEnd-Lisa-1 ) ;
9255: LD_EXP 3
9259: PPUSH
9260: LD_STRING DEnd-Lisa-1
9262: PPUSH
9263: CALL_OW 88
// if JMMGirl = 3 then
9267: LD_EXP 7
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9289
// Say ( Connie , DEnd-Con-1 ) ;
9277: LD_EXP 4
9281: PPUSH
9282: LD_STRING DEnd-Con-1
9284: PPUSH
9285: CALL_OW 88
// DialogueOff ;
9289: CALL_OW 7
// FinishMission ;
9293: CALL 9298 0 0
// end ;
9297: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
// m1 := false ;
9305: LD_ADDR_VAR 0 3
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// m2 := false ;
9313: LD_ADDR_VAR 0 4
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// m3 := false ;
9321: LD_ADDR_VAR 0 5
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9329: LD_EXP 1
9333: PPUSH
9334: LD_STRING 14_JMM
9336: PPUSH
9337: CALL_OW 38
// if tick <= 50 50$00 then
9341: LD_OWVAR 1
9345: PUSH
9346: LD_INT 105000
9348: LESSEQUAL
9349: IFFALSE 9358
// SetAchievement ( ACH_ASPEED_14 ) ;
9351: LD_STRING ACH_ASPEED_14
9353: PPUSH
9354: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9358: LD_EXP 1
9362: PPUSH
9363: CALL_OW 310
9367: PUSH
9368: LD_EXP 1
9372: PPUSH
9373: CALL_OW 310
9377: PPUSH
9378: CALL_OW 247
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: AND
9387: IFFALSE 9469
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_EXP 1
9398: PPUSH
9399: CALL_OW 310
9403: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9404: LD_VAR 0 2
9408: PPUSH
9409: CALL_OW 265
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 262
9426: PUSH
9427: EMPTY
9428: LIST
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: CALL_OW 263
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 264
9452: PUSH
9453: EMPTY
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_STRING 14_JMMVeh_1
9464: PPUSH
9465: CALL_OW 39
// end ; if fastEnd = 1 then
9469: LD_EXP 15
9473: PUSH
9474: LD_INT 1
9476: EQUAL
9477: IFFALSE 9566
// begin AddMedal ( fastend , - 1 ) ;
9479: LD_STRING fastend
9481: PPUSH
9482: LD_INT 1
9484: NEG
9485: PPUSH
9486: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9490: LD_STRING fastend
9492: PPUSH
9493: LD_INT 1
9495: NEG
9496: PPUSH
9497: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9501: LD_STRING fastend
9503: PPUSH
9504: LD_INT 1
9506: NEG
9507: PPUSH
9508: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9512: LD_EXP 7
9516: PPUSH
9517: LD_STRING 14_JMMGirl_1
9519: PPUSH
9520: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9524: LD_INT 0
9526: PPUSH
9527: LD_STRING 14_JMMGirlStatus_1
9529: PPUSH
9530: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9534: LD_INT 0
9536: PPUSH
9537: LD_STRING 14_KappaStatus_1
9539: PPUSH
9540: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9544: LD_STRING Eliminate
9546: PPUSH
9547: CALL_OW 102
// RewardPeople ( JMM ) ;
9551: LD_EXP 1
9555: PPUSH
9556: CALL_OW 43
// YouWin ;
9560: CALL_OW 103
// exit ;
9564: GO 10391
// end ; if fastEnd = 0 then
9566: LD_EXP 15
9570: PUSH
9571: LD_INT 0
9573: EQUAL
9574: IFFALSE 10284
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9576: LD_EXP 7
9580: PPUSH
9581: LD_STRING 14_JMMGirl_1
9583: PPUSH
9584: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9588: LD_INT 22
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 21
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 69
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: PUSH
9621: LD_INT 48
9623: PPUSH
9624: CALL_OW 255
9628: PUSH
9629: LD_INT 1
9631: EQUAL
9632: AND
9633: IFFALSE 9647
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9635: LD_INT 1
9637: PPUSH
9638: LD_STRING 14_KappaStatus_1
9640: PPUSH
9641: CALL_OW 39
9645: GO 9657
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9647: LD_INT 0
9649: PPUSH
9650: LD_STRING 14_KappaStatus_1
9652: PPUSH
9653: CALL_OW 39
// case JMMGirl of 1 :
9657: LD_EXP 7
9661: PUSH
9662: LD_INT 1
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9826
9670: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9671: LD_EXP 2
9675: PPUSH
9676: CALL_OW 302
9680: PUSH
9681: LD_EXP 2
9685: PPUSH
9686: CALL_OW 255
9690: PUSH
9691: LD_INT 1
9693: EQUAL
9694: AND
9695: PUSH
9696: LD_INT 22
9698: PUSH
9699: LD_INT 3
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 21
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: PUSH
9725: LD_INT 0
9727: EQUAL
9728: PUSH
9729: LD_EXP 1
9733: PPUSH
9734: CALL_OW 310
9738: PPUSH
9739: LD_EXP 2
9743: PPUSH
9744: CALL_OW 310
9748: PPUSH
9749: CALL_OW 296
9753: PUSH
9754: LD_INT 10
9756: LESS
9757: OR
9758: AND
9759: IFFALSE 9803
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9761: LD_INT 1
9763: PPUSH
9764: LD_STRING 14_JMMGirlStatus_1
9766: PPUSH
9767: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9771: LD_EXP 2
9775: PPUSH
9776: LD_STRING 14_Joan
9778: PPUSH
9779: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9783: LD_STRING protect
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 101
// m1 := true ;
9793: LD_ADDR_VAR 0 3
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// end else
9801: GO 9824
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9803: LD_INT 0
9805: PPUSH
9806: LD_STRING 14_JMMGirlStatus_1
9808: PPUSH
9809: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9813: LD_STRING protect
9815: PPUSH
9816: LD_INT 1
9818: NEG
9819: PPUSH
9820: CALL_OW 101
// end ; end ; 2 :
9824: GO 10155
9826: LD_INT 2
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9990
9834: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9835: LD_EXP 3
9839: PPUSH
9840: CALL_OW 302
9844: PUSH
9845: LD_EXP 3
9849: PPUSH
9850: CALL_OW 255
9854: PUSH
9855: LD_INT 1
9857: EQUAL
9858: AND
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 3
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 69
9888: PUSH
9889: LD_INT 0
9891: EQUAL
9892: PUSH
9893: LD_EXP 1
9897: PPUSH
9898: CALL_OW 310
9902: PPUSH
9903: LD_EXP 3
9907: PPUSH
9908: CALL_OW 310
9912: PPUSH
9913: CALL_OW 296
9917: PUSH
9918: LD_INT 10
9920: LESS
9921: OR
9922: AND
9923: IFFALSE 9967
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 1
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9935: LD_EXP 3
9939: PPUSH
9940: LD_STRING 14_Lisa
9942: PPUSH
9943: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9947: LD_STRING protect
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 101
// m1 := true ;
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// end else
9965: GO 9988
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9967: LD_INT 0
9969: PPUSH
9970: LD_STRING 14_JMMGirlStatus_1
9972: PPUSH
9973: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9977: LD_STRING protect
9979: PPUSH
9980: LD_INT 2
9982: NEG
9983: PPUSH
9984: CALL_OW 101
// end ; end ; 3 :
9988: GO 10155
9990: LD_INT 3
9992: DOUBLE
9993: EQUAL
9994: IFTRUE 9998
9996: GO 10154
9998: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9999: LD_EXP 4
10003: PPUSH
10004: CALL_OW 302
10008: PUSH
10009: LD_EXP 4
10013: PPUSH
10014: CALL_OW 255
10018: PUSH
10019: LD_INT 1
10021: EQUAL
10022: AND
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PUSH
10053: LD_INT 0
10055: EQUAL
10056: PUSH
10057: LD_EXP 1
10061: PPUSH
10062: CALL_OW 310
10066: PPUSH
10067: LD_EXP 4
10071: PPUSH
10072: CALL_OW 310
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 10
10084: LESS
10085: OR
10086: AND
10087: IFFALSE 10131
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10089: LD_INT 1
10091: PPUSH
10092: LD_STRING 14_JMMGirlStatus_1
10094: PPUSH
10095: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10099: LD_EXP 4
10103: PPUSH
10104: LD_STRING 14_Connie
10106: PPUSH
10107: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10111: LD_STRING protect
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 101
// m1 := true ;
10121: LD_ADDR_VAR 0 3
10125: PUSH
10126: LD_INT 1
10128: ST_TO_ADDR
// end else
10129: GO 10152
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10131: LD_INT 0
10133: PPUSH
10134: LD_STRING 14_JMMGirlStatus_1
10136: PPUSH
10137: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10141: LD_STRING protect
10143: PPUSH
10144: LD_INT 3
10146: NEG
10147: PPUSH
10148: CALL_OW 101
// end ; end ; end ;
10152: GO 10155
10154: POP
// if amLaserCounter >= 2 then
10155: LD_EXP 9
10159: PUSH
10160: LD_INT 2
10162: GREATEREQUAL
10163: IFFALSE 10185
// begin AddMedal ( double , 1 ) ;
10165: LD_STRING double
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 101
// m2 := true ;
10175: LD_ADDR_VAR 0 4
10179: PUSH
10180: LD_INT 1
10182: ST_TO_ADDR
// end else
10183: GO 10219
// begin if amLaserCounter = 1 then
10185: LD_EXP 9
10189: PUSH
10190: LD_INT 1
10192: EQUAL
10193: IFFALSE 10208
// AddMedal ( double , - 2 ) else
10195: LD_STRING double
10197: PPUSH
10198: LD_INT 2
10200: NEG
10201: PPUSH
10202: CALL_OW 101
10206: GO 10219
// AddMedal ( double , - 1 ) ;
10208: LD_STRING double
10210: PPUSH
10211: LD_INT 1
10213: NEG
10214: PPUSH
10215: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10219: LD_INT 22
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 69
10247: PUSH
10248: LD_INT 0
10250: EQUAL
10251: IFFALSE 10273
// begin AddMedal ( base , 1 ) ;
10253: LD_STRING base
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 101
// m3 := true ;
10263: LD_ADDR_VAR 0 5
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// end else
10271: GO 10284
// AddMedal ( base , - 1 ) ;
10273: LD_STRING base
10275: PPUSH
10276: LD_INT 1
10278: NEG
10279: PPUSH
10280: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_VAR 0 4
10293: AND
10294: PUSH
10295: LD_VAR 0 5
10299: AND
10300: PUSH
10301: LD_OWVAR 67
10305: PUSH
10306: LD_INT 3
10308: EQUAL
10309: AND
10310: IFFALSE 10322
// SetAchievementEX ( ACH_AMER , 14 ) ;
10312: LD_STRING ACH_AMER
10314: PPUSH
10315: LD_INT 14
10317: PPUSH
10318: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10322: LD_STRING Eliminate
10324: PPUSH
10325: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10329: LD_INT 22
10331: PUSH
10332: LD_INT 1
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 3
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: LD_INT 25
10361: PUSH
10362: LD_INT 16
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PPUSH
10383: CALL_OW 43
// YouWin ;
10387: CALL_OW 103
// end ; end_of_file
10391: LD_VAR 0 1
10395: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10396: LD_EXP 1
10400: PPUSH
10401: CALL_OW 301
10405: IFFALSE 10417
10407: GO 10409
10409: DISABLE
// YouLost ( JMM ) ; end_of_file
10410: LD_STRING JMM
10412: PPUSH
10413: CALL_OW 104
10417: END
// every 1 1$0 do
10418: GO 10420
10420: DISABLE
// begin enable ;
10421: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10422: LD_INT 3
10424: PPUSH
10425: LD_INT 5
10427: PPUSH
10428: CALL_OW 12
10432: PPUSH
10433: LD_INT 13
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 55
// end ; end_of_file
10443: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10444: LD_INT 0
10446: PPUSH
// ar_miner := 81 ;
10447: LD_ADDR_EXP 26
10451: PUSH
10452: LD_INT 81
10454: ST_TO_ADDR
// ar_crane := 88 ;
10455: LD_ADDR_EXP 25
10459: PUSH
10460: LD_INT 88
10462: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10463: LD_ADDR_EXP 20
10467: PUSH
10468: LD_INT 89
10470: ST_TO_ADDR
// us_hack := 99 ;
10471: LD_ADDR_EXP 21
10475: PUSH
10476: LD_INT 99
10478: ST_TO_ADDR
// us_artillery := 97 ;
10479: LD_ADDR_EXP 22
10483: PUSH
10484: LD_INT 97
10486: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10487: LD_ADDR_EXP 23
10491: PUSH
10492: LD_INT 91
10494: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
10495: LD_ADDR_EXP 24
10499: PUSH
10500: LD_INT 92
10502: ST_TO_ADDR
// ru_radar := 98 ;
10503: LD_ADDR_EXP 19
10507: PUSH
10508: LD_INT 98
10510: ST_TO_ADDR
// tech_Artillery := 80 ;
10511: LD_ADDR_EXP 27
10515: PUSH
10516: LD_INT 80
10518: ST_TO_ADDR
// tech_RadMat := 81 ;
10519: LD_ADDR_EXP 28
10523: PUSH
10524: LD_INT 81
10526: ST_TO_ADDR
// tech_BasicTools := 82 ;
10527: LD_ADDR_EXP 29
10531: PUSH
10532: LD_INT 82
10534: ST_TO_ADDR
// tech_Cargo := 83 ;
10535: LD_ADDR_EXP 30
10539: PUSH
10540: LD_INT 83
10542: ST_TO_ADDR
// tech_Track := 84 ;
10543: LD_ADDR_EXP 31
10547: PUSH
10548: LD_INT 84
10550: ST_TO_ADDR
// tech_Crane := 85 ;
10551: LD_ADDR_EXP 32
10555: PUSH
10556: LD_INT 85
10558: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10559: LD_ADDR_EXP 33
10563: PUSH
10564: LD_INT 86
10566: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10567: LD_ADDR_EXP 34
10571: PUSH
10572: LD_INT 87
10574: ST_TO_ADDR
// class_mastodont := 31 ;
10575: LD_ADDR_EXP 35
10579: PUSH
10580: LD_INT 31
10582: ST_TO_ADDR
// class_horse := 21 ;
10583: LD_ADDR_EXP 36
10587: PUSH
10588: LD_INT 21
10590: ST_TO_ADDR
// end ;
10591: LD_VAR 0 1
10595: RET
// every 1 do
10596: GO 10598
10598: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10599: CALL 10444 0 0
10603: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10604: LD_INT 0
10606: PPUSH
// if p2 = 100 then
10607: LD_VAR 0 2
10611: PUSH
10612: LD_INT 100
10614: EQUAL
10615: IFFALSE 11564
// begin if not StreamModeActive then
10617: LD_EXP 37
10621: NOT
10622: IFFALSE 10632
// StreamModeActive := true ;
10624: LD_ADDR_EXP 37
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// if p3 = 0 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 0
10639: EQUAL
10640: IFFALSE 10646
// InitStreamMode ;
10642: CALL 11724 0 0
// if p3 = 1 then
10646: LD_VAR 0 3
10650: PUSH
10651: LD_INT 1
10653: EQUAL
10654: IFFALSE 10664
// sRocket := true ;
10656: LD_ADDR_EXP 42
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// if p3 = 2 then
10664: LD_VAR 0 3
10668: PUSH
10669: LD_INT 2
10671: EQUAL
10672: IFFALSE 10682
// sSpeed := true ;
10674: LD_ADDR_EXP 41
10678: PUSH
10679: LD_INT 1
10681: ST_TO_ADDR
// if p3 = 3 then
10682: LD_VAR 0 3
10686: PUSH
10687: LD_INT 3
10689: EQUAL
10690: IFFALSE 10700
// sEngine := true ;
10692: LD_ADDR_EXP 43
10696: PUSH
10697: LD_INT 1
10699: ST_TO_ADDR
// if p3 = 4 then
10700: LD_VAR 0 3
10704: PUSH
10705: LD_INT 4
10707: EQUAL
10708: IFFALSE 10718
// sSpec := true ;
10710: LD_ADDR_EXP 40
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
// if p3 = 5 then
10718: LD_VAR 0 3
10722: PUSH
10723: LD_INT 5
10725: EQUAL
10726: IFFALSE 10736
// sLevel := true ;
10728: LD_ADDR_EXP 44
10732: PUSH
10733: LD_INT 1
10735: ST_TO_ADDR
// if p3 = 6 then
10736: LD_VAR 0 3
10740: PUSH
10741: LD_INT 6
10743: EQUAL
10744: IFFALSE 10754
// sArmoury := true ;
10746: LD_ADDR_EXP 45
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// if p3 = 7 then
10754: LD_VAR 0 3
10758: PUSH
10759: LD_INT 7
10761: EQUAL
10762: IFFALSE 10772
// sRadar := true ;
10764: LD_ADDR_EXP 46
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// if p3 = 8 then
10772: LD_VAR 0 3
10776: PUSH
10777: LD_INT 8
10779: EQUAL
10780: IFFALSE 10790
// sBunker := true ;
10782: LD_ADDR_EXP 47
10786: PUSH
10787: LD_INT 1
10789: ST_TO_ADDR
// if p3 = 9 then
10790: LD_VAR 0 3
10794: PUSH
10795: LD_INT 9
10797: EQUAL
10798: IFFALSE 10808
// sHack := true ;
10800: LD_ADDR_EXP 48
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// if p3 = 10 then
10808: LD_VAR 0 3
10812: PUSH
10813: LD_INT 10
10815: EQUAL
10816: IFFALSE 10826
// sFire := true ;
10818: LD_ADDR_EXP 49
10822: PUSH
10823: LD_INT 1
10825: ST_TO_ADDR
// if p3 = 11 then
10826: LD_VAR 0 3
10830: PUSH
10831: LD_INT 11
10833: EQUAL
10834: IFFALSE 10844
// sRefresh := true ;
10836: LD_ADDR_EXP 50
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if p3 = 12 then
10844: LD_VAR 0 3
10848: PUSH
10849: LD_INT 12
10851: EQUAL
10852: IFFALSE 10862
// sExp := true ;
10854: LD_ADDR_EXP 51
10858: PUSH
10859: LD_INT 1
10861: ST_TO_ADDR
// if p3 = 13 then
10862: LD_VAR 0 3
10866: PUSH
10867: LD_INT 13
10869: EQUAL
10870: IFFALSE 10880
// sDepot := true ;
10872: LD_ADDR_EXP 52
10876: PUSH
10877: LD_INT 1
10879: ST_TO_ADDR
// if p3 = 14 then
10880: LD_VAR 0 3
10884: PUSH
10885: LD_INT 14
10887: EQUAL
10888: IFFALSE 10898
// sFlag := true ;
10890: LD_ADDR_EXP 53
10894: PUSH
10895: LD_INT 1
10897: ST_TO_ADDR
// if p3 = 15 then
10898: LD_VAR 0 3
10902: PUSH
10903: LD_INT 15
10905: EQUAL
10906: IFFALSE 10916
// sKamikadze := true ;
10908: LD_ADDR_EXP 61
10912: PUSH
10913: LD_INT 1
10915: ST_TO_ADDR
// if p3 = 16 then
10916: LD_VAR 0 3
10920: PUSH
10921: LD_INT 16
10923: EQUAL
10924: IFFALSE 10934
// sTroll := true ;
10926: LD_ADDR_EXP 62
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// if p3 = 17 then
10934: LD_VAR 0 3
10938: PUSH
10939: LD_INT 17
10941: EQUAL
10942: IFFALSE 10952
// sSlow := true ;
10944: LD_ADDR_EXP 63
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// if p3 = 18 then
10952: LD_VAR 0 3
10956: PUSH
10957: LD_INT 18
10959: EQUAL
10960: IFFALSE 10970
// sLack := true ;
10962: LD_ADDR_EXP 64
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// if p3 = 19 then
10970: LD_VAR 0 3
10974: PUSH
10975: LD_INT 19
10977: EQUAL
10978: IFFALSE 10988
// sTank := true ;
10980: LD_ADDR_EXP 66
10984: PUSH
10985: LD_INT 1
10987: ST_TO_ADDR
// if p3 = 20 then
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 20
10995: EQUAL
10996: IFFALSE 11006
// sRemote := true ;
10998: LD_ADDR_EXP 67
11002: PUSH
11003: LD_INT 1
11005: ST_TO_ADDR
// if p3 = 21 then
11006: LD_VAR 0 3
11010: PUSH
11011: LD_INT 21
11013: EQUAL
11014: IFFALSE 11024
// sPowell := true ;
11016: LD_ADDR_EXP 68
11020: PUSH
11021: LD_INT 1
11023: ST_TO_ADDR
// if p3 = 22 then
11024: LD_VAR 0 3
11028: PUSH
11029: LD_INT 22
11031: EQUAL
11032: IFFALSE 11042
// sTeleport := true ;
11034: LD_ADDR_EXP 71
11038: PUSH
11039: LD_INT 1
11041: ST_TO_ADDR
// if p3 = 23 then
11042: LD_VAR 0 3
11046: PUSH
11047: LD_INT 23
11049: EQUAL
11050: IFFALSE 11060
// sOilTower := true ;
11052: LD_ADDR_EXP 73
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// if p3 = 24 then
11060: LD_VAR 0 3
11064: PUSH
11065: LD_INT 24
11067: EQUAL
11068: IFFALSE 11078
// sShovel := true ;
11070: LD_ADDR_EXP 74
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// if p3 = 25 then
11078: LD_VAR 0 3
11082: PUSH
11083: LD_INT 25
11085: EQUAL
11086: IFFALSE 11096
// sSheik := true ;
11088: LD_ADDR_EXP 75
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// if p3 = 26 then
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 26
11103: EQUAL
11104: IFFALSE 11114
// sEarthquake := true ;
11106: LD_ADDR_EXP 77
11110: PUSH
11111: LD_INT 1
11113: ST_TO_ADDR
// if p3 = 27 then
11114: LD_VAR 0 3
11118: PUSH
11119: LD_INT 27
11121: EQUAL
11122: IFFALSE 11132
// sAI := true ;
11124: LD_ADDR_EXP 78
11128: PUSH
11129: LD_INT 1
11131: ST_TO_ADDR
// if p3 = 28 then
11132: LD_VAR 0 3
11136: PUSH
11137: LD_INT 28
11139: EQUAL
11140: IFFALSE 11150
// sCargo := true ;
11142: LD_ADDR_EXP 81
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// if p3 = 29 then
11150: LD_VAR 0 3
11154: PUSH
11155: LD_INT 29
11157: EQUAL
11158: IFFALSE 11168
// sDLaser := true ;
11160: LD_ADDR_EXP 82
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// if p3 = 30 then
11168: LD_VAR 0 3
11172: PUSH
11173: LD_INT 30
11175: EQUAL
11176: IFFALSE 11186
// sExchange := true ;
11178: LD_ADDR_EXP 83
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// if p3 = 31 then
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 31
11193: EQUAL
11194: IFFALSE 11204
// sFac := true ;
11196: LD_ADDR_EXP 84
11200: PUSH
11201: LD_INT 1
11203: ST_TO_ADDR
// if p3 = 32 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 32
11211: EQUAL
11212: IFFALSE 11222
// sPower := true ;
11214: LD_ADDR_EXP 85
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if p3 = 33 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 33
11229: EQUAL
11230: IFFALSE 11240
// sRandom := true ;
11232: LD_ADDR_EXP 86
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 34 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 34
11247: EQUAL
11248: IFFALSE 11258
// sShield := true ;
11250: LD_ADDR_EXP 87
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 35 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 35
11265: EQUAL
11266: IFFALSE 11276
// sTime := true ;
11268: LD_ADDR_EXP 88
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 36 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 36
11283: EQUAL
11284: IFFALSE 11294
// sTools := true ;
11286: LD_ADDR_EXP 89
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 101 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 101
11301: EQUAL
11302: IFFALSE 11312
// sSold := true ;
11304: LD_ADDR_EXP 54
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 102 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 102
11319: EQUAL
11320: IFFALSE 11330
// sDiff := true ;
11322: LD_ADDR_EXP 55
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 103 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 103
11337: EQUAL
11338: IFFALSE 11348
// sFog := true ;
11340: LD_ADDR_EXP 58
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 104 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 104
11355: EQUAL
11356: IFFALSE 11366
// sReset := true ;
11358: LD_ADDR_EXP 59
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 105 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 105
11373: EQUAL
11374: IFFALSE 11384
// sSun := true ;
11376: LD_ADDR_EXP 60
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 106 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 106
11391: EQUAL
11392: IFFALSE 11402
// sTiger := true ;
11394: LD_ADDR_EXP 56
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 107 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 107
11409: EQUAL
11410: IFFALSE 11420
// sBomb := true ;
11412: LD_ADDR_EXP 57
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 108 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 108
11427: EQUAL
11428: IFFALSE 11438
// sWound := true ;
11430: LD_ADDR_EXP 65
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 109 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 109
11445: EQUAL
11446: IFFALSE 11456
// sBetray := true ;
11448: LD_ADDR_EXP 69
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 110 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 110
11463: EQUAL
11464: IFFALSE 11474
// sContamin := true ;
11466: LD_ADDR_EXP 70
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 111 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 111
11481: EQUAL
11482: IFFALSE 11492
// sOil := true ;
11484: LD_ADDR_EXP 72
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 112 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 112
11499: EQUAL
11500: IFFALSE 11510
// sStu := true ;
11502: LD_ADDR_EXP 76
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 113 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 113
11517: EQUAL
11518: IFFALSE 11528
// sBazooka := true ;
11520: LD_ADDR_EXP 79
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 114 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 114
11535: EQUAL
11536: IFFALSE 11546
// sMortar := true ;
11538: LD_ADDR_EXP 80
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 115 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 115
11553: EQUAL
11554: IFFALSE 11564
// sRanger := true ;
11556: LD_ADDR_EXP 90
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// end ; if p2 = 101 then
11564: LD_VAR 0 2
11568: PUSH
11569: LD_INT 101
11571: EQUAL
11572: IFFALSE 11700
// begin case p3 of 1 :
11574: LD_VAR 0 3
11578: PUSH
11579: LD_INT 1
11581: DOUBLE
11582: EQUAL
11583: IFTRUE 11587
11585: GO 11594
11587: POP
// hHackUnlimitedResources ; 2 :
11588: CALL 22737 0 0
11592: GO 11700
11594: LD_INT 2
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11609
11602: POP
// hHackSetLevel10 ; 3 :
11603: CALL 22870 0 0
11607: GO 11700
11609: LD_INT 3
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11624
11617: POP
// hHackSetLevel10YourUnits ; 4 :
11618: CALL 22955 0 0
11622: GO 11700
11624: LD_INT 4
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11639
11632: POP
// hHackInvincible ; 5 :
11633: CALL 23403 0 0
11637: GO 11700
11639: LD_INT 5
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11654
11647: POP
// hHackInvisible ; 6 :
11648: CALL 23514 0 0
11652: GO 11700
11654: LD_INT 6
11656: DOUBLE
11657: EQUAL
11658: IFTRUE 11662
11660: GO 11669
11662: POP
// hHackChangeYourSide ; 7 :
11663: CALL 23571 0 0
11667: GO 11700
11669: LD_INT 7
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11684
11677: POP
// hHackChangeUnitSide ; 8 :
11678: CALL 23613 0 0
11682: GO 11700
11684: LD_INT 8
11686: DOUBLE
11687: EQUAL
11688: IFTRUE 11692
11690: GO 11699
11692: POP
// hHackFog ; end ;
11693: CALL 23714 0 0
11697: GO 11700
11699: POP
// end ; end ;
11700: LD_VAR 0 7
11704: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11705: GO 11707
11707: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11708: LD_STRING initStreamRollete();
11710: PPUSH
11711: CALL_OW 559
// InitStreamMode ;
11715: CALL 11724 0 0
// DefineStreamItems ( ) ;
11719: CALL 12164 0 0
// end ;
11723: END
// function InitStreamMode ; begin
11724: LD_INT 0
11726: PPUSH
// streamModeActive := false ;
11727: LD_ADDR_EXP 37
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// normalCounter := 36 ;
11735: LD_ADDR_EXP 38
11739: PUSH
11740: LD_INT 36
11742: ST_TO_ADDR
// hardcoreCounter := 16 ;
11743: LD_ADDR_EXP 39
11747: PUSH
11748: LD_INT 16
11750: ST_TO_ADDR
// sRocket := false ;
11751: LD_ADDR_EXP 42
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sSpeed := false ;
11759: LD_ADDR_EXP 41
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sEngine := false ;
11767: LD_ADDR_EXP 43
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sSpec := false ;
11775: LD_ADDR_EXP 40
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sLevel := false ;
11783: LD_ADDR_EXP 44
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sArmoury := false ;
11791: LD_ADDR_EXP 45
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sRadar := false ;
11799: LD_ADDR_EXP 46
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sBunker := false ;
11807: LD_ADDR_EXP 47
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sHack := false ;
11815: LD_ADDR_EXP 48
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sFire := false ;
11823: LD_ADDR_EXP 49
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sRefresh := false ;
11831: LD_ADDR_EXP 50
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sExp := false ;
11839: LD_ADDR_EXP 51
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sDepot := false ;
11847: LD_ADDR_EXP 52
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sFlag := false ;
11855: LD_ADDR_EXP 53
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sKamikadze := false ;
11863: LD_ADDR_EXP 61
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sTroll := false ;
11871: LD_ADDR_EXP 62
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sSlow := false ;
11879: LD_ADDR_EXP 63
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sLack := false ;
11887: LD_ADDR_EXP 64
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sTank := false ;
11895: LD_ADDR_EXP 66
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sRemote := false ;
11903: LD_ADDR_EXP 67
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sPowell := false ;
11911: LD_ADDR_EXP 68
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sTeleport := false ;
11919: LD_ADDR_EXP 71
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sOilTower := false ;
11927: LD_ADDR_EXP 73
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sShovel := false ;
11935: LD_ADDR_EXP 74
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sSheik := false ;
11943: LD_ADDR_EXP 75
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sEarthquake := false ;
11951: LD_ADDR_EXP 77
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sAI := false ;
11959: LD_ADDR_EXP 78
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sCargo := false ;
11967: LD_ADDR_EXP 81
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sDLaser := false ;
11975: LD_ADDR_EXP 82
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sExchange := false ;
11983: LD_ADDR_EXP 83
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sFac := false ;
11991: LD_ADDR_EXP 84
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sPower := false ;
11999: LD_ADDR_EXP 85
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sRandom := false ;
12007: LD_ADDR_EXP 86
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sShield := false ;
12015: LD_ADDR_EXP 87
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// sTime := false ;
12023: LD_ADDR_EXP 88
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// sTools := false ;
12031: LD_ADDR_EXP 89
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// sSold := false ;
12039: LD_ADDR_EXP 54
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// sDiff := false ;
12047: LD_ADDR_EXP 55
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// sFog := false ;
12055: LD_ADDR_EXP 58
12059: PUSH
12060: LD_INT 0
12062: ST_TO_ADDR
// sReset := false ;
12063: LD_ADDR_EXP 59
12067: PUSH
12068: LD_INT 0
12070: ST_TO_ADDR
// sSun := false ;
12071: LD_ADDR_EXP 60
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// sTiger := false ;
12079: LD_ADDR_EXP 56
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// sBomb := false ;
12087: LD_ADDR_EXP 57
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// sWound := false ;
12095: LD_ADDR_EXP 65
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// sBetray := false ;
12103: LD_ADDR_EXP 69
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// sContamin := false ;
12111: LD_ADDR_EXP 70
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sOil := false ;
12119: LD_ADDR_EXP 72
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// sStu := false ;
12127: LD_ADDR_EXP 76
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// sBazooka := false ;
12135: LD_ADDR_EXP 79
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// sMortar := false ;
12143: LD_ADDR_EXP 80
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// sRanger := false ;
12151: LD_ADDR_EXP 90
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// end ;
12159: LD_VAR 0 1
12163: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12164: LD_INT 0
12166: PPUSH
12167: PPUSH
12168: PPUSH
12169: PPUSH
12170: PPUSH
// result := [ ] ;
12171: LD_ADDR_VAR 0 1
12175: PUSH
12176: EMPTY
12177: ST_TO_ADDR
// if campaign_id = 1 then
12178: LD_OWVAR 69
12182: PUSH
12183: LD_INT 1
12185: EQUAL
12186: IFFALSE 15124
// begin case mission_number of 1 :
12188: LD_OWVAR 70
12192: PUSH
12193: LD_INT 1
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12265
12201: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12202: LD_ADDR_VAR 0 1
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 4
12212: PUSH
12213: LD_INT 11
12215: PUSH
12216: LD_INT 12
12218: PUSH
12219: LD_INT 15
12221: PUSH
12222: LD_INT 16
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 23
12230: PUSH
12231: LD_INT 26
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 101
12247: PUSH
12248: LD_INT 102
12250: PUSH
12251: LD_INT 106
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: ST_TO_ADDR
12263: GO 15122
12265: LD_INT 2
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12345
12273: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 2
12281: PUSH
12282: LD_INT 4
12284: PUSH
12285: LD_INT 11
12287: PUSH
12288: LD_INT 12
12290: PUSH
12291: LD_INT 15
12293: PUSH
12294: LD_INT 16
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_INT 23
12302: PUSH
12303: LD_INT 26
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 101
12319: PUSH
12320: LD_INT 102
12322: PUSH
12323: LD_INT 105
12325: PUSH
12326: LD_INT 106
12328: PUSH
12329: LD_INT 108
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 15122
12345: LD_INT 3
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12429
12353: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12354: LD_ADDR_VAR 0 1
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: LD_INT 4
12364: PUSH
12365: LD_INT 5
12367: PUSH
12368: LD_INT 11
12370: PUSH
12371: LD_INT 12
12373: PUSH
12374: LD_INT 15
12376: PUSH
12377: LD_INT 16
12379: PUSH
12380: LD_INT 22
12382: PUSH
12383: LD_INT 26
12385: PUSH
12386: LD_INT 36
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 101
12403: PUSH
12404: LD_INT 102
12406: PUSH
12407: LD_INT 105
12409: PUSH
12410: LD_INT 106
12412: PUSH
12413: LD_INT 108
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: ST_TO_ADDR
12427: GO 15122
12429: LD_INT 4
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12521
12437: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_INT 2
12445: PUSH
12446: LD_INT 4
12448: PUSH
12449: LD_INT 5
12451: PUSH
12452: LD_INT 8
12454: PUSH
12455: LD_INT 11
12457: PUSH
12458: LD_INT 12
12460: PUSH
12461: LD_INT 15
12463: PUSH
12464: LD_INT 16
12466: PUSH
12467: LD_INT 22
12469: PUSH
12470: LD_INT 23
12472: PUSH
12473: LD_INT 26
12475: PUSH
12476: LD_INT 36
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 101
12495: PUSH
12496: LD_INT 102
12498: PUSH
12499: LD_INT 105
12501: PUSH
12502: LD_INT 106
12504: PUSH
12505: LD_INT 108
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: ST_TO_ADDR
12519: GO 15122
12521: LD_INT 5
12523: DOUBLE
12524: EQUAL
12525: IFTRUE 12529
12527: GO 12629
12529: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: LD_INT 6
12546: PUSH
12547: LD_INT 8
12549: PUSH
12550: LD_INT 11
12552: PUSH
12553: LD_INT 12
12555: PUSH
12556: LD_INT 15
12558: PUSH
12559: LD_INT 16
12561: PUSH
12562: LD_INT 22
12564: PUSH
12565: LD_INT 23
12567: PUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 26
12573: PUSH
12574: LD_INT 36
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 101
12595: PUSH
12596: LD_INT 102
12598: PUSH
12599: LD_INT 105
12601: PUSH
12602: LD_INT 106
12604: PUSH
12605: LD_INT 108
12607: PUSH
12608: LD_INT 109
12610: PUSH
12611: LD_INT 112
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: ST_TO_ADDR
12627: GO 15122
12629: LD_INT 6
12631: DOUBLE
12632: EQUAL
12633: IFTRUE 12637
12635: GO 12757
12637: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12638: LD_ADDR_VAR 0 1
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: LD_INT 4
12648: PUSH
12649: LD_INT 5
12651: PUSH
12652: LD_INT 6
12654: PUSH
12655: LD_INT 8
12657: PUSH
12658: LD_INT 11
12660: PUSH
12661: LD_INT 12
12663: PUSH
12664: LD_INT 15
12666: PUSH
12667: LD_INT 16
12669: PUSH
12670: LD_INT 20
12672: PUSH
12673: LD_INT 21
12675: PUSH
12676: LD_INT 22
12678: PUSH
12679: LD_INT 23
12681: PUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 26
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 31
12693: PUSH
12694: LD_INT 32
12696: PUSH
12697: LD_INT 36
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 101
12723: PUSH
12724: LD_INT 102
12726: PUSH
12727: LD_INT 105
12729: PUSH
12730: LD_INT 106
12732: PUSH
12733: LD_INT 108
12735: PUSH
12736: LD_INT 109
12738: PUSH
12739: LD_INT 112
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: ST_TO_ADDR
12755: GO 15122
12757: LD_INT 7
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12865
12765: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12766: LD_ADDR_VAR 0 1
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 4
12776: PUSH
12777: LD_INT 5
12779: PUSH
12780: LD_INT 7
12782: PUSH
12783: LD_INT 11
12785: PUSH
12786: LD_INT 12
12788: PUSH
12789: LD_INT 15
12791: PUSH
12792: LD_INT 16
12794: PUSH
12795: LD_INT 20
12797: PUSH
12798: LD_INT 21
12800: PUSH
12801: LD_INT 22
12803: PUSH
12804: LD_INT 23
12806: PUSH
12807: LD_INT 25
12809: PUSH
12810: LD_INT 26
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 101
12831: PUSH
12832: LD_INT 102
12834: PUSH
12835: LD_INT 103
12837: PUSH
12838: LD_INT 105
12840: PUSH
12841: LD_INT 106
12843: PUSH
12844: LD_INT 108
12846: PUSH
12847: LD_INT 112
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: ST_TO_ADDR
12863: GO 15122
12865: LD_INT 8
12867: DOUBLE
12868: EQUAL
12869: IFTRUE 12873
12871: GO 13001
12873: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12874: LD_ADDR_VAR 0 1
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: LD_INT 4
12884: PUSH
12885: LD_INT 5
12887: PUSH
12888: LD_INT 6
12890: PUSH
12891: LD_INT 7
12893: PUSH
12894: LD_INT 8
12896: PUSH
12897: LD_INT 11
12899: PUSH
12900: LD_INT 12
12902: PUSH
12903: LD_INT 15
12905: PUSH
12906: LD_INT 16
12908: PUSH
12909: LD_INT 20
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 22
12917: PUSH
12918: LD_INT 23
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 31
12932: PUSH
12933: LD_INT 32
12935: PUSH
12936: LD_INT 36
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 101
12963: PUSH
12964: LD_INT 102
12966: PUSH
12967: LD_INT 103
12969: PUSH
12970: LD_INT 105
12972: PUSH
12973: LD_INT 106
12975: PUSH
12976: LD_INT 108
12978: PUSH
12979: LD_INT 109
12981: PUSH
12982: LD_INT 112
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: ST_TO_ADDR
12999: GO 15122
13001: LD_INT 9
13003: DOUBLE
13004: EQUAL
13005: IFTRUE 13009
13007: GO 13145
13009: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13010: LD_ADDR_VAR 0 1
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: LD_INT 7
13029: PUSH
13030: LD_INT 8
13032: PUSH
13033: LD_INT 11
13035: PUSH
13036: LD_INT 12
13038: PUSH
13039: LD_INT 15
13041: PUSH
13042: LD_INT 16
13044: PUSH
13045: LD_INT 20
13047: PUSH
13048: LD_INT 21
13050: PUSH
13051: LD_INT 22
13053: PUSH
13054: LD_INT 23
13056: PUSH
13057: LD_INT 25
13059: PUSH
13060: LD_INT 26
13062: PUSH
13063: LD_INT 28
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: LD_INT 31
13071: PUSH
13072: LD_INT 32
13074: PUSH
13075: LD_INT 36
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 103
13109: PUSH
13110: LD_INT 105
13112: PUSH
13113: LD_INT 106
13115: PUSH
13116: LD_INT 108
13118: PUSH
13119: LD_INT 109
13121: PUSH
13122: LD_INT 112
13124: PUSH
13125: LD_INT 114
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: ST_TO_ADDR
13143: GO 15122
13145: LD_INT 10
13147: DOUBLE
13148: EQUAL
13149: IFTRUE 13153
13151: GO 13337
13153: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13154: LD_ADDR_VAR 0 1
13158: PUSH
13159: LD_INT 2
13161: PUSH
13162: LD_INT 4
13164: PUSH
13165: LD_INT 5
13167: PUSH
13168: LD_INT 6
13170: PUSH
13171: LD_INT 7
13173: PUSH
13174: LD_INT 8
13176: PUSH
13177: LD_INT 9
13179: PUSH
13180: LD_INT 10
13182: PUSH
13183: LD_INT 11
13185: PUSH
13186: LD_INT 12
13188: PUSH
13189: LD_INT 13
13191: PUSH
13192: LD_INT 14
13194: PUSH
13195: LD_INT 15
13197: PUSH
13198: LD_INT 16
13200: PUSH
13201: LD_INT 17
13203: PUSH
13204: LD_INT 18
13206: PUSH
13207: LD_INT 19
13209: PUSH
13210: LD_INT 20
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 23
13221: PUSH
13222: LD_INT 24
13224: PUSH
13225: LD_INT 25
13227: PUSH
13228: LD_INT 26
13230: PUSH
13231: LD_INT 28
13233: PUSH
13234: LD_INT 30
13236: PUSH
13237: LD_INT 31
13239: PUSH
13240: LD_INT 32
13242: PUSH
13243: LD_INT 36
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 101
13279: PUSH
13280: LD_INT 102
13282: PUSH
13283: LD_INT 103
13285: PUSH
13286: LD_INT 104
13288: PUSH
13289: LD_INT 105
13291: PUSH
13292: LD_INT 106
13294: PUSH
13295: LD_INT 107
13297: PUSH
13298: LD_INT 108
13300: PUSH
13301: LD_INT 109
13303: PUSH
13304: LD_INT 110
13306: PUSH
13307: LD_INT 111
13309: PUSH
13310: LD_INT 112
13312: PUSH
13313: LD_INT 114
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: ST_TO_ADDR
13335: GO 15122
13337: LD_INT 11
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13537
13345: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: LD_INT 3
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 6
13365: PUSH
13366: LD_INT 7
13368: PUSH
13369: LD_INT 8
13371: PUSH
13372: LD_INT 9
13374: PUSH
13375: LD_INT 10
13377: PUSH
13378: LD_INT 11
13380: PUSH
13381: LD_INT 12
13383: PUSH
13384: LD_INT 13
13386: PUSH
13387: LD_INT 14
13389: PUSH
13390: LD_INT 15
13392: PUSH
13393: LD_INT 16
13395: PUSH
13396: LD_INT 17
13398: PUSH
13399: LD_INT 18
13401: PUSH
13402: LD_INT 19
13404: PUSH
13405: LD_INT 20
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 23
13416: PUSH
13417: LD_INT 24
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 26
13425: PUSH
13426: LD_INT 28
13428: PUSH
13429: LD_INT 30
13431: PUSH
13432: LD_INT 31
13434: PUSH
13435: LD_INT 32
13437: PUSH
13438: LD_INT 34
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 101
13479: PUSH
13480: LD_INT 102
13482: PUSH
13483: LD_INT 103
13485: PUSH
13486: LD_INT 104
13488: PUSH
13489: LD_INT 105
13491: PUSH
13492: LD_INT 106
13494: PUSH
13495: LD_INT 107
13497: PUSH
13498: LD_INT 108
13500: PUSH
13501: LD_INT 109
13503: PUSH
13504: LD_INT 110
13506: PUSH
13507: LD_INT 111
13509: PUSH
13510: LD_INT 112
13512: PUSH
13513: LD_INT 114
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: ST_TO_ADDR
13535: GO 15122
13537: LD_INT 12
13539: DOUBLE
13540: EQUAL
13541: IFTRUE 13545
13543: GO 13753
13545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13546: LD_ADDR_VAR 0 1
13550: PUSH
13551: LD_INT 1
13553: PUSH
13554: LD_INT 2
13556: PUSH
13557: LD_INT 3
13559: PUSH
13560: LD_INT 4
13562: PUSH
13563: LD_INT 5
13565: PUSH
13566: LD_INT 6
13568: PUSH
13569: LD_INT 7
13571: PUSH
13572: LD_INT 8
13574: PUSH
13575: LD_INT 9
13577: PUSH
13578: LD_INT 10
13580: PUSH
13581: LD_INT 11
13583: PUSH
13584: LD_INT 12
13586: PUSH
13587: LD_INT 13
13589: PUSH
13590: LD_INT 14
13592: PUSH
13593: LD_INT 15
13595: PUSH
13596: LD_INT 16
13598: PUSH
13599: LD_INT 17
13601: PUSH
13602: LD_INT 18
13604: PUSH
13605: LD_INT 19
13607: PUSH
13608: LD_INT 20
13610: PUSH
13611: LD_INT 21
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 23
13619: PUSH
13620: LD_INT 24
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 27
13631: PUSH
13632: LD_INT 28
13634: PUSH
13635: LD_INT 30
13637: PUSH
13638: LD_INT 31
13640: PUSH
13641: LD_INT 32
13643: PUSH
13644: LD_INT 33
13646: PUSH
13647: LD_INT 34
13649: PUSH
13650: LD_INT 36
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 101
13691: PUSH
13692: LD_INT 102
13694: PUSH
13695: LD_INT 103
13697: PUSH
13698: LD_INT 104
13700: PUSH
13701: LD_INT 105
13703: PUSH
13704: LD_INT 106
13706: PUSH
13707: LD_INT 107
13709: PUSH
13710: LD_INT 108
13712: PUSH
13713: LD_INT 109
13715: PUSH
13716: LD_INT 110
13718: PUSH
13719: LD_INT 111
13721: PUSH
13722: LD_INT 112
13724: PUSH
13725: LD_INT 113
13727: PUSH
13728: LD_INT 114
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: ST_TO_ADDR
13751: GO 15122
13753: LD_INT 13
13755: DOUBLE
13756: EQUAL
13757: IFTRUE 13761
13759: GO 13957
13761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: LD_INT 2
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: LD_INT 5
13781: PUSH
13782: LD_INT 8
13784: PUSH
13785: LD_INT 9
13787: PUSH
13788: LD_INT 10
13790: PUSH
13791: LD_INT 11
13793: PUSH
13794: LD_INT 12
13796: PUSH
13797: LD_INT 14
13799: PUSH
13800: LD_INT 15
13802: PUSH
13803: LD_INT 16
13805: PUSH
13806: LD_INT 17
13808: PUSH
13809: LD_INT 18
13811: PUSH
13812: LD_INT 19
13814: PUSH
13815: LD_INT 20
13817: PUSH
13818: LD_INT 21
13820: PUSH
13821: LD_INT 22
13823: PUSH
13824: LD_INT 23
13826: PUSH
13827: LD_INT 24
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 26
13835: PUSH
13836: LD_INT 27
13838: PUSH
13839: LD_INT 28
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 31
13847: PUSH
13848: LD_INT 32
13850: PUSH
13851: LD_INT 33
13853: PUSH
13854: LD_INT 34
13856: PUSH
13857: LD_INT 36
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 101
13895: PUSH
13896: LD_INT 102
13898: PUSH
13899: LD_INT 103
13901: PUSH
13902: LD_INT 104
13904: PUSH
13905: LD_INT 105
13907: PUSH
13908: LD_INT 106
13910: PUSH
13911: LD_INT 107
13913: PUSH
13914: LD_INT 108
13916: PUSH
13917: LD_INT 109
13919: PUSH
13920: LD_INT 110
13922: PUSH
13923: LD_INT 111
13925: PUSH
13926: LD_INT 112
13928: PUSH
13929: LD_INT 113
13931: PUSH
13932: LD_INT 114
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: ST_TO_ADDR
13955: GO 15122
13957: LD_INT 14
13959: DOUBLE
13960: EQUAL
13961: IFTRUE 13965
13963: GO 14177
13965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_INT 1
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: LD_INT 3
13979: PUSH
13980: LD_INT 4
13982: PUSH
13983: LD_INT 5
13985: PUSH
13986: LD_INT 6
13988: PUSH
13989: LD_INT 7
13991: PUSH
13992: LD_INT 8
13994: PUSH
13995: LD_INT 9
13997: PUSH
13998: LD_INT 10
14000: PUSH
14001: LD_INT 11
14003: PUSH
14004: LD_INT 12
14006: PUSH
14007: LD_INT 13
14009: PUSH
14010: LD_INT 14
14012: PUSH
14013: LD_INT 15
14015: PUSH
14016: LD_INT 16
14018: PUSH
14019: LD_INT 17
14021: PUSH
14022: LD_INT 18
14024: PUSH
14025: LD_INT 19
14027: PUSH
14028: LD_INT 20
14030: PUSH
14031: LD_INT 21
14033: PUSH
14034: LD_INT 22
14036: PUSH
14037: LD_INT 23
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 25
14045: PUSH
14046: LD_INT 26
14048: PUSH
14049: LD_INT 27
14051: PUSH
14052: LD_INT 28
14054: PUSH
14055: LD_INT 29
14057: PUSH
14058: LD_INT 30
14060: PUSH
14061: LD_INT 31
14063: PUSH
14064: LD_INT 32
14066: PUSH
14067: LD_INT 33
14069: PUSH
14070: LD_INT 34
14072: PUSH
14073: LD_INT 36
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 101
14115: PUSH
14116: LD_INT 102
14118: PUSH
14119: LD_INT 103
14121: PUSH
14122: LD_INT 104
14124: PUSH
14125: LD_INT 105
14127: PUSH
14128: LD_INT 106
14130: PUSH
14131: LD_INT 107
14133: PUSH
14134: LD_INT 108
14136: PUSH
14137: LD_INT 109
14139: PUSH
14140: LD_INT 110
14142: PUSH
14143: LD_INT 111
14145: PUSH
14146: LD_INT 112
14148: PUSH
14149: LD_INT 113
14151: PUSH
14152: LD_INT 114
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: ST_TO_ADDR
14175: GO 15122
14177: LD_INT 15
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14397
14185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 4
14202: PUSH
14203: LD_INT 5
14205: PUSH
14206: LD_INT 6
14208: PUSH
14209: LD_INT 7
14211: PUSH
14212: LD_INT 8
14214: PUSH
14215: LD_INT 9
14217: PUSH
14218: LD_INT 10
14220: PUSH
14221: LD_INT 11
14223: PUSH
14224: LD_INT 12
14226: PUSH
14227: LD_INT 13
14229: PUSH
14230: LD_INT 14
14232: PUSH
14233: LD_INT 15
14235: PUSH
14236: LD_INT 16
14238: PUSH
14239: LD_INT 17
14241: PUSH
14242: LD_INT 18
14244: PUSH
14245: LD_INT 19
14247: PUSH
14248: LD_INT 20
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_INT 23
14259: PUSH
14260: LD_INT 24
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 26
14268: PUSH
14269: LD_INT 27
14271: PUSH
14272: LD_INT 28
14274: PUSH
14275: LD_INT 29
14277: PUSH
14278: LD_INT 30
14280: PUSH
14281: LD_INT 31
14283: PUSH
14284: LD_INT 32
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 34
14292: PUSH
14293: LD_INT 36
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 101
14335: PUSH
14336: LD_INT 102
14338: PUSH
14339: LD_INT 103
14341: PUSH
14342: LD_INT 104
14344: PUSH
14345: LD_INT 105
14347: PUSH
14348: LD_INT 106
14350: PUSH
14351: LD_INT 107
14353: PUSH
14354: LD_INT 108
14356: PUSH
14357: LD_INT 109
14359: PUSH
14360: LD_INT 110
14362: PUSH
14363: LD_INT 111
14365: PUSH
14366: LD_INT 112
14368: PUSH
14369: LD_INT 113
14371: PUSH
14372: LD_INT 114
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: ST_TO_ADDR
14395: GO 15122
14397: LD_INT 16
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14529
14405: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14406: LD_ADDR_VAR 0 1
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 4
14416: PUSH
14417: LD_INT 5
14419: PUSH
14420: LD_INT 7
14422: PUSH
14423: LD_INT 11
14425: PUSH
14426: LD_INT 12
14428: PUSH
14429: LD_INT 15
14431: PUSH
14432: LD_INT 16
14434: PUSH
14435: LD_INT 20
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 23
14446: PUSH
14447: LD_INT 25
14449: PUSH
14450: LD_INT 26
14452: PUSH
14453: LD_INT 30
14455: PUSH
14456: LD_INT 31
14458: PUSH
14459: LD_INT 32
14461: PUSH
14462: LD_INT 33
14464: PUSH
14465: LD_INT 34
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 103
14497: PUSH
14498: LD_INT 106
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: LD_INT 112
14506: PUSH
14507: LD_INT 113
14509: PUSH
14510: LD_INT 114
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: ST_TO_ADDR
14527: GO 15122
14529: LD_INT 17
14531: DOUBLE
14532: EQUAL
14533: IFTRUE 14537
14535: GO 14749
14537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14538: LD_ADDR_VAR 0 1
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: LD_INT 2
14548: PUSH
14549: LD_INT 3
14551: PUSH
14552: LD_INT 4
14554: PUSH
14555: LD_INT 5
14557: PUSH
14558: LD_INT 6
14560: PUSH
14561: LD_INT 7
14563: PUSH
14564: LD_INT 8
14566: PUSH
14567: LD_INT 9
14569: PUSH
14570: LD_INT 10
14572: PUSH
14573: LD_INT 11
14575: PUSH
14576: LD_INT 12
14578: PUSH
14579: LD_INT 13
14581: PUSH
14582: LD_INT 14
14584: PUSH
14585: LD_INT 15
14587: PUSH
14588: LD_INT 16
14590: PUSH
14591: LD_INT 17
14593: PUSH
14594: LD_INT 18
14596: PUSH
14597: LD_INT 19
14599: PUSH
14600: LD_INT 20
14602: PUSH
14603: LD_INT 21
14605: PUSH
14606: LD_INT 22
14608: PUSH
14609: LD_INT 23
14611: PUSH
14612: LD_INT 24
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 26
14620: PUSH
14621: LD_INT 27
14623: PUSH
14624: LD_INT 28
14626: PUSH
14627: LD_INT 29
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 31
14635: PUSH
14636: LD_INT 32
14638: PUSH
14639: LD_INT 33
14641: PUSH
14642: LD_INT 34
14644: PUSH
14645: LD_INT 36
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 101
14687: PUSH
14688: LD_INT 102
14690: PUSH
14691: LD_INT 103
14693: PUSH
14694: LD_INT 104
14696: PUSH
14697: LD_INT 105
14699: PUSH
14700: LD_INT 106
14702: PUSH
14703: LD_INT 107
14705: PUSH
14706: LD_INT 108
14708: PUSH
14709: LD_INT 109
14711: PUSH
14712: LD_INT 110
14714: PUSH
14715: LD_INT 111
14717: PUSH
14718: LD_INT 112
14720: PUSH
14721: LD_INT 113
14723: PUSH
14724: LD_INT 114
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: ST_TO_ADDR
14747: GO 15122
14749: LD_INT 18
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14757
14755: GO 14893
14757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14758: LD_ADDR_VAR 0 1
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 4
14768: PUSH
14769: LD_INT 5
14771: PUSH
14772: LD_INT 7
14774: PUSH
14775: LD_INT 11
14777: PUSH
14778: LD_INT 12
14780: PUSH
14781: LD_INT 15
14783: PUSH
14784: LD_INT 16
14786: PUSH
14787: LD_INT 20
14789: PUSH
14790: LD_INT 21
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: LD_INT 25
14801: PUSH
14802: LD_INT 26
14804: PUSH
14805: LD_INT 30
14807: PUSH
14808: LD_INT 31
14810: PUSH
14811: LD_INT 32
14813: PUSH
14814: LD_INT 33
14816: PUSH
14817: LD_INT 34
14819: PUSH
14820: LD_INT 35
14822: PUSH
14823: LD_INT 36
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 101
14851: PUSH
14852: LD_INT 102
14854: PUSH
14855: LD_INT 103
14857: PUSH
14858: LD_INT 106
14860: PUSH
14861: LD_INT 108
14863: PUSH
14864: LD_INT 112
14866: PUSH
14867: LD_INT 113
14869: PUSH
14870: LD_INT 114
14872: PUSH
14873: LD_INT 115
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: ST_TO_ADDR
14891: GO 15122
14893: LD_INT 19
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 15121
14901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14902: LD_ADDR_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: LD_INT 2
14912: PUSH
14913: LD_INT 3
14915: PUSH
14916: LD_INT 4
14918: PUSH
14919: LD_INT 5
14921: PUSH
14922: LD_INT 6
14924: PUSH
14925: LD_INT 7
14927: PUSH
14928: LD_INT 8
14930: PUSH
14931: LD_INT 9
14933: PUSH
14934: LD_INT 10
14936: PUSH
14937: LD_INT 11
14939: PUSH
14940: LD_INT 12
14942: PUSH
14943: LD_INT 13
14945: PUSH
14946: LD_INT 14
14948: PUSH
14949: LD_INT 15
14951: PUSH
14952: LD_INT 16
14954: PUSH
14955: LD_INT 17
14957: PUSH
14958: LD_INT 18
14960: PUSH
14961: LD_INT 19
14963: PUSH
14964: LD_INT 20
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 23
14975: PUSH
14976: LD_INT 24
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 26
14984: PUSH
14985: LD_INT 27
14987: PUSH
14988: LD_INT 28
14990: PUSH
14991: LD_INT 29
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 31
14999: PUSH
15000: LD_INT 32
15002: PUSH
15003: LD_INT 33
15005: PUSH
15006: LD_INT 34
15008: PUSH
15009: LD_INT 35
15011: PUSH
15012: LD_INT 36
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 101
15055: PUSH
15056: LD_INT 102
15058: PUSH
15059: LD_INT 103
15061: PUSH
15062: LD_INT 104
15064: PUSH
15065: LD_INT 105
15067: PUSH
15068: LD_INT 106
15070: PUSH
15071: LD_INT 107
15073: PUSH
15074: LD_INT 108
15076: PUSH
15077: LD_INT 109
15079: PUSH
15080: LD_INT 110
15082: PUSH
15083: LD_INT 111
15085: PUSH
15086: LD_INT 112
15088: PUSH
15089: LD_INT 113
15091: PUSH
15092: LD_INT 114
15094: PUSH
15095: LD_INT 115
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: ST_TO_ADDR
15119: GO 15122
15121: POP
// end else
15122: GO 15341
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15124: LD_ADDR_VAR 0 1
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 4
15140: PUSH
15141: LD_INT 5
15143: PUSH
15144: LD_INT 6
15146: PUSH
15147: LD_INT 7
15149: PUSH
15150: LD_INT 8
15152: PUSH
15153: LD_INT 9
15155: PUSH
15156: LD_INT 10
15158: PUSH
15159: LD_INT 11
15161: PUSH
15162: LD_INT 12
15164: PUSH
15165: LD_INT 13
15167: PUSH
15168: LD_INT 14
15170: PUSH
15171: LD_INT 15
15173: PUSH
15174: LD_INT 16
15176: PUSH
15177: LD_INT 17
15179: PUSH
15180: LD_INT 18
15182: PUSH
15183: LD_INT 19
15185: PUSH
15186: LD_INT 20
15188: PUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 22
15194: PUSH
15195: LD_INT 23
15197: PUSH
15198: LD_INT 24
15200: PUSH
15201: LD_INT 25
15203: PUSH
15204: LD_INT 26
15206: PUSH
15207: LD_INT 27
15209: PUSH
15210: LD_INT 28
15212: PUSH
15213: LD_INT 29
15215: PUSH
15216: LD_INT 30
15218: PUSH
15219: LD_INT 31
15221: PUSH
15222: LD_INT 32
15224: PUSH
15225: LD_INT 33
15227: PUSH
15228: LD_INT 34
15230: PUSH
15231: LD_INT 35
15233: PUSH
15234: LD_INT 36
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 101
15277: PUSH
15278: LD_INT 102
15280: PUSH
15281: LD_INT 103
15283: PUSH
15284: LD_INT 104
15286: PUSH
15287: LD_INT 105
15289: PUSH
15290: LD_INT 106
15292: PUSH
15293: LD_INT 107
15295: PUSH
15296: LD_INT 108
15298: PUSH
15299: LD_INT 109
15301: PUSH
15302: LD_INT 110
15304: PUSH
15305: LD_INT 111
15307: PUSH
15308: LD_INT 112
15310: PUSH
15311: LD_INT 113
15313: PUSH
15314: LD_INT 114
15316: PUSH
15317: LD_INT 115
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: ST_TO_ADDR
// if result then
15341: LD_VAR 0 1
15345: IFFALSE 15634
// begin normal :=  ;
15347: LD_ADDR_VAR 0 3
15351: PUSH
15352: LD_STRING 
15354: ST_TO_ADDR
// hardcore :=  ;
15355: LD_ADDR_VAR 0 4
15359: PUSH
15360: LD_STRING 
15362: ST_TO_ADDR
// for i = 1 to normalCounter do
15363: LD_ADDR_VAR 0 5
15367: PUSH
15368: DOUBLE
15369: LD_INT 1
15371: DEC
15372: ST_TO_ADDR
15373: LD_EXP 38
15377: PUSH
15378: FOR_TO
15379: IFFALSE 15480
// begin tmp := 0 ;
15381: LD_ADDR_VAR 0 2
15385: PUSH
15386: LD_STRING 0
15388: ST_TO_ADDR
// if result [ 1 ] then
15389: LD_VAR 0 1
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: IFFALSE 15462
// if result [ 1 ] [ 1 ] = i then
15399: LD_VAR 0 1
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PUSH
15412: LD_VAR 0 5
15416: EQUAL
15417: IFFALSE 15462
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15419: LD_ADDR_VAR 0 1
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: LD_INT 1
15431: PPUSH
15432: LD_VAR 0 1
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 3
15448: PPUSH
15449: CALL_OW 1
15453: ST_TO_ADDR
// tmp := 1 ;
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_STRING 1
15461: ST_TO_ADDR
// end ; normal := normal & tmp ;
15462: LD_ADDR_VAR 0 3
15466: PUSH
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 2
15476: STR
15477: ST_TO_ADDR
// end ;
15478: GO 15378
15480: POP
15481: POP
// for i = 1 to hardcoreCounter do
15482: LD_ADDR_VAR 0 5
15486: PUSH
15487: DOUBLE
15488: LD_INT 1
15490: DEC
15491: ST_TO_ADDR
15492: LD_EXP 39
15496: PUSH
15497: FOR_TO
15498: IFFALSE 15603
// begin tmp := 0 ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_STRING 0
15507: ST_TO_ADDR
// if result [ 2 ] then
15508: LD_VAR 0 1
15512: PUSH
15513: LD_INT 2
15515: ARRAY
15516: IFFALSE 15585
// if result [ 2 ] [ 1 ] = 100 + i then
15518: LD_VAR 0 1
15522: PUSH
15523: LD_INT 2
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PUSH
15531: LD_INT 100
15533: PUSH
15534: LD_VAR 0 5
15538: PLUS
15539: EQUAL
15540: IFFALSE 15585
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_INT 2
15554: PPUSH
15555: LD_VAR 0 1
15559: PUSH
15560: LD_INT 2
15562: ARRAY
15563: PPUSH
15564: LD_INT 1
15566: PPUSH
15567: CALL_OW 3
15571: PPUSH
15572: CALL_OW 1
15576: ST_TO_ADDR
// tmp := 1 ;
15577: LD_ADDR_VAR 0 2
15581: PUSH
15582: LD_STRING 1
15584: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15585: LD_ADDR_VAR 0 4
15589: PUSH
15590: LD_VAR 0 4
15594: PUSH
15595: LD_VAR 0 2
15599: STR
15600: ST_TO_ADDR
// end ;
15601: GO 15497
15603: POP
15604: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15605: LD_STRING getStreamItemsFromMission("
15607: PUSH
15608: LD_VAR 0 3
15612: STR
15613: PUSH
15614: LD_STRING ","
15616: STR
15617: PUSH
15618: LD_VAR 0 4
15622: STR
15623: PUSH
15624: LD_STRING ")
15626: STR
15627: PPUSH
15628: CALL_OW 559
// end else
15632: GO 15641
// ToLua ( getStreamItemsFromMission("","") ) ;
15634: LD_STRING getStreamItemsFromMission("","")
15636: PPUSH
15637: CALL_OW 559
// end ;
15641: LD_VAR 0 1
15645: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15646: LD_EXP 37
15650: PUSH
15651: LD_EXP 42
15655: AND
15656: IFFALSE 15780
15658: GO 15660
15660: DISABLE
15661: LD_INT 0
15663: PPUSH
15664: PPUSH
// begin enable ;
15665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_INT 22
15673: PUSH
15674: LD_OWVAR 2
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 2
15685: PUSH
15686: LD_INT 34
15688: PUSH
15689: LD_INT 7
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 34
15698: PUSH
15699: LD_INT 45
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 28
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 34
15718: PUSH
15719: LD_INT 47
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PPUSH
15737: CALL_OW 69
15741: ST_TO_ADDR
// if not tmp then
15742: LD_VAR 0 2
15746: NOT
15747: IFFALSE 15751
// exit ;
15749: GO 15780
// for i in tmp do
15751: LD_ADDR_VAR 0 1
15755: PUSH
15756: LD_VAR 0 2
15760: PUSH
15761: FOR_IN
15762: IFFALSE 15778
// begin SetLives ( i , 0 ) ;
15764: LD_VAR 0 1
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 234
// end ;
15776: GO 15761
15778: POP
15779: POP
// end ;
15780: PPOPN 2
15782: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15783: LD_EXP 37
15787: PUSH
15788: LD_EXP 43
15792: AND
15793: IFFALSE 15877
15795: GO 15797
15797: DISABLE
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
// begin enable ;
15802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_OWVAR 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 32
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: ST_TO_ADDR
// if not tmp then
15839: LD_VAR 0 2
15843: NOT
15844: IFFALSE 15848
// exit ;
15846: GO 15877
// for i in tmp do
15848: LD_ADDR_VAR 0 1
15852: PUSH
15853: LD_VAR 0 2
15857: PUSH
15858: FOR_IN
15859: IFFALSE 15875
// begin SetLives ( i , 0 ) ;
15861: LD_VAR 0 1
15865: PPUSH
15866: LD_INT 0
15868: PPUSH
15869: CALL_OW 234
// end ;
15873: GO 15858
15875: POP
15876: POP
// end ;
15877: PPOPN 2
15879: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15880: LD_EXP 37
15884: PUSH
15885: LD_EXP 40
15889: AND
15890: IFFALSE 15983
15892: GO 15894
15894: DISABLE
15895: LD_INT 0
15897: PPUSH
// begin enable ;
15898: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15899: LD_ADDR_VAR 0 1
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_OWVAR 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 25
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 25
15931: PUSH
15932: LD_INT 9
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 25
15941: PUSH
15942: LD_INT 8
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: PUSH
15964: FOR_IN
15965: IFFALSE 15981
// begin SetClass ( i , 1 ) ;
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: CALL_OW 336
// end ;
15979: GO 15964
15981: POP
15982: POP
// end ;
15983: PPOPN 1
15985: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15986: LD_EXP 37
15990: PUSH
15991: LD_EXP 41
15995: AND
15996: PUSH
15997: LD_OWVAR 65
16001: PUSH
16002: LD_INT 7
16004: LESS
16005: AND
16006: IFFALSE 16020
16008: GO 16010
16010: DISABLE
// begin enable ;
16011: ENABLE
// game_speed := 7 ;
16012: LD_ADDR_OWVAR 65
16016: PUSH
16017: LD_INT 7
16019: ST_TO_ADDR
// end ;
16020: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16021: LD_EXP 37
16025: PUSH
16026: LD_EXP 44
16030: AND
16031: IFFALSE 16233
16033: GO 16035
16035: DISABLE
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_INT 81
16048: PUSH
16049: LD_OWVAR 2
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 1
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 69
16076: ST_TO_ADDR
// if not tmp then
16077: LD_VAR 0 3
16081: NOT
16082: IFFALSE 16086
// exit ;
16084: GO 16233
// if tmp > 5 then
16086: LD_VAR 0 3
16090: PUSH
16091: LD_INT 5
16093: GREATER
16094: IFFALSE 16106
// k := 5 else
16096: LD_ADDR_VAR 0 2
16100: PUSH
16101: LD_INT 5
16103: ST_TO_ADDR
16104: GO 16116
// k := tmp ;
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: LD_VAR 0 3
16115: ST_TO_ADDR
// for i := 1 to k do
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: DOUBLE
16122: LD_INT 1
16124: DEC
16125: ST_TO_ADDR
16126: LD_VAR 0 2
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16231
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16134: LD_VAR 0 3
16138: PUSH
16139: LD_VAR 0 1
16143: ARRAY
16144: PPUSH
16145: LD_VAR 0 1
16149: PUSH
16150: LD_INT 4
16152: MOD
16153: PUSH
16154: LD_INT 1
16156: PLUS
16157: PPUSH
16158: CALL_OW 259
16162: PUSH
16163: LD_INT 10
16165: LESS
16166: IFFALSE 16229
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16168: LD_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: ARRAY
16178: PPUSH
16179: LD_VAR 0 1
16183: PUSH
16184: LD_INT 4
16186: MOD
16187: PUSH
16188: LD_INT 1
16190: PLUS
16191: PPUSH
16192: LD_VAR 0 3
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_VAR 0 1
16207: PUSH
16208: LD_INT 4
16210: MOD
16211: PUSH
16212: LD_INT 1
16214: PLUS
16215: PPUSH
16216: CALL_OW 259
16220: PUSH
16221: LD_INT 1
16223: PLUS
16224: PPUSH
16225: CALL_OW 237
16229: GO 16131
16231: POP
16232: POP
// end ;
16233: PPOPN 3
16235: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16236: LD_EXP 37
16240: PUSH
16241: LD_EXP 45
16245: AND
16246: IFFALSE 16266
16248: GO 16250
16250: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16251: LD_INT 4
16253: PPUSH
16254: LD_OWVAR 2
16258: PPUSH
16259: LD_INT 0
16261: PPUSH
16262: CALL_OW 324
16266: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16267: LD_EXP 37
16271: PUSH
16272: LD_EXP 74
16276: AND
16277: IFFALSE 16297
16279: GO 16281
16281: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16282: LD_INT 19
16284: PPUSH
16285: LD_OWVAR 2
16289: PPUSH
16290: LD_INT 0
16292: PPUSH
16293: CALL_OW 324
16297: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16298: LD_EXP 37
16302: PUSH
16303: LD_EXP 46
16307: AND
16308: IFFALSE 16410
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
16316: PPUSH
// begin enable ;
16317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_INT 22
16325: PUSH
16326: LD_OWVAR 2
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 34
16340: PUSH
16341: LD_INT 11
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 34
16350: PUSH
16351: LD_INT 30
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 69
16371: ST_TO_ADDR
// if not tmp then
16372: LD_VAR 0 2
16376: NOT
16377: IFFALSE 16381
// exit ;
16379: GO 16410
// for i in tmp do
16381: LD_ADDR_VAR 0 1
16385: PUSH
16386: LD_VAR 0 2
16390: PUSH
16391: FOR_IN
16392: IFFALSE 16408
// begin SetLives ( i , 0 ) ;
16394: LD_VAR 0 1
16398: PPUSH
16399: LD_INT 0
16401: PPUSH
16402: CALL_OW 234
// end ;
16406: GO 16391
16408: POP
16409: POP
// end ;
16410: PPOPN 2
16412: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16413: LD_EXP 37
16417: PUSH
16418: LD_EXP 47
16422: AND
16423: IFFALSE 16443
16425: GO 16427
16427: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16428: LD_INT 32
16430: PPUSH
16431: LD_OWVAR 2
16435: PPUSH
16436: LD_INT 0
16438: PPUSH
16439: CALL_OW 324
16443: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16444: LD_EXP 37
16448: PUSH
16449: LD_EXP 48
16453: AND
16454: IFFALSE 16635
16456: GO 16458
16458: DISABLE
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
16463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_INT 22
16471: PUSH
16472: LD_OWVAR 2
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 33
16483: PUSH
16484: LD_INT 3
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: ST_TO_ADDR
// if not tmp then
16500: LD_VAR 0 2
16504: NOT
16505: IFFALSE 16509
// exit ;
16507: GO 16635
// side := 0 ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_INT 0
16516: ST_TO_ADDR
// for i := 1 to 8 do
16517: LD_ADDR_VAR 0 1
16521: PUSH
16522: DOUBLE
16523: LD_INT 1
16525: DEC
16526: ST_TO_ADDR
16527: LD_INT 8
16529: PUSH
16530: FOR_TO
16531: IFFALSE 16579
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16533: LD_OWVAR 2
16537: PUSH
16538: LD_VAR 0 1
16542: NONEQUAL
16543: PUSH
16544: LD_OWVAR 2
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 81
16558: PUSH
16559: LD_INT 2
16561: EQUAL
16562: AND
16563: IFFALSE 16577
// begin side := i ;
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_VAR 0 1
16574: ST_TO_ADDR
// break ;
16575: GO 16579
// end ;
16577: GO 16530
16579: POP
16580: POP
// if not side then
16581: LD_VAR 0 3
16585: NOT
16586: IFFALSE 16590
// exit ;
16588: GO 16635
// for i := 1 to tmp do
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_VAR 0 2
16604: PUSH
16605: FOR_TO
16606: IFFALSE 16633
// if Prob ( 60 ) then
16608: LD_INT 60
16610: PPUSH
16611: CALL_OW 13
16615: IFFALSE 16631
// SetSide ( i , side ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: CALL_OW 235
16631: GO 16605
16633: POP
16634: POP
// end ;
16635: PPOPN 3
16637: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16638: LD_EXP 37
16642: PUSH
16643: LD_EXP 50
16647: AND
16648: IFFALSE 16767
16650: GO 16652
16652: DISABLE
16653: LD_INT 0
16655: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16656: LD_ADDR_VAR 0 1
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_OWVAR 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: LD_INT 23
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: PUSH
16710: FOR_IN
16711: IFFALSE 16765
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 257
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: IN
16741: IFFALSE 16763
// SetClass ( un , rand ( 1 , 4 ) ) ;
16743: LD_VAR 0 1
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: LD_INT 4
16753: PPUSH
16754: CALL_OW 12
16758: PPUSH
16759: CALL_OW 336
16763: GO 16710
16765: POP
16766: POP
// end ;
16767: PPOPN 1
16769: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16770: LD_EXP 37
16774: PUSH
16775: LD_EXP 49
16779: AND
16780: IFFALSE 16859
16782: GO 16784
16784: DISABLE
16785: LD_INT 0
16787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16788: LD_ADDR_VAR 0 1
16792: PUSH
16793: LD_INT 22
16795: PUSH
16796: LD_OWVAR 2
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 21
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: ST_TO_ADDR
// if not tmp then
16824: LD_VAR 0 1
16828: NOT
16829: IFFALSE 16833
// exit ;
16831: GO 16859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL_OW 12
16850: ARRAY
16851: PPUSH
16852: LD_INT 100
16854: PPUSH
16855: CALL_OW 234
// end ;
16859: PPOPN 1
16861: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16862: LD_EXP 37
16866: PUSH
16867: LD_EXP 51
16871: AND
16872: IFFALSE 16970
16874: GO 16876
16876: DISABLE
16877: LD_INT 0
16879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16880: LD_ADDR_VAR 0 1
16884: PUSH
16885: LD_INT 22
16887: PUSH
16888: LD_OWVAR 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 21
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: ST_TO_ADDR
// if not tmp then
16916: LD_VAR 0 1
16920: NOT
16921: IFFALSE 16925
// exit ;
16923: GO 16970
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16925: LD_VAR 0 1
16929: PUSH
16930: LD_INT 1
16932: PPUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 12
16942: ARRAY
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: LD_INT 4
16949: PPUSH
16950: CALL_OW 12
16954: PPUSH
16955: LD_INT 3000
16957: PPUSH
16958: LD_INT 9000
16960: PPUSH
16961: CALL_OW 12
16965: PPUSH
16966: CALL_OW 492
// end ;
16970: PPOPN 1
16972: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16973: LD_EXP 37
16977: PUSH
16978: LD_EXP 52
16982: AND
16983: IFFALSE 17003
16985: GO 16987
16987: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16988: LD_INT 1
16990: PPUSH
16991: LD_OWVAR 2
16995: PPUSH
16996: LD_INT 0
16998: PPUSH
16999: CALL_OW 324
17003: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17004: LD_EXP 37
17008: PUSH
17009: LD_EXP 53
17013: AND
17014: IFFALSE 17097
17016: GO 17018
17018: DISABLE
17019: LD_INT 0
17021: PPUSH
17022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17023: LD_ADDR_VAR 0 2
17027: PUSH
17028: LD_INT 22
17030: PUSH
17031: LD_OWVAR 2
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 21
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: ST_TO_ADDR
// if not tmp then
17059: LD_VAR 0 2
17063: NOT
17064: IFFALSE 17068
// exit ;
17066: GO 17097
// for i in tmp do
17068: LD_ADDR_VAR 0 1
17072: PUSH
17073: LD_VAR 0 2
17077: PUSH
17078: FOR_IN
17079: IFFALSE 17095
// SetBLevel ( i , 10 ) ;
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 10
17088: PPUSH
17089: CALL_OW 241
17093: GO 17078
17095: POP
17096: POP
// end ;
17097: PPOPN 2
17099: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17100: LD_EXP 37
17104: PUSH
17105: LD_EXP 54
17109: AND
17110: IFFALSE 17221
17112: GO 17114
17114: DISABLE
17115: LD_INT 0
17117: PPUSH
17118: PPUSH
17119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_OWVAR 2
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 25
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not tmp then
17156: LD_VAR 0 3
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17221
// un := tmp [ rand ( 1 , tmp ) ] ;
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 3
17174: PUSH
17175: LD_INT 1
17177: PPUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 12
17187: ARRAY
17188: ST_TO_ADDR
// if Crawls ( un ) then
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 318
17198: IFFALSE 17209
// ComWalk ( un ) ;
17200: LD_VAR 0 2
17204: PPUSH
17205: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17209: LD_VAR 0 2
17213: PPUSH
17214: LD_INT 5
17216: PPUSH
17217: CALL_OW 336
// end ;
17221: PPOPN 3
17223: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17224: LD_EXP 37
17228: PUSH
17229: LD_EXP 55
17233: AND
17234: PUSH
17235: LD_OWVAR 67
17239: PUSH
17240: LD_INT 3
17242: LESS
17243: AND
17244: IFFALSE 17263
17246: GO 17248
17248: DISABLE
// Difficulty := Difficulty + 1 ;
17249: LD_ADDR_OWVAR 67
17253: PUSH
17254: LD_OWVAR 67
17258: PUSH
17259: LD_INT 1
17261: PLUS
17262: ST_TO_ADDR
17263: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17264: LD_EXP 37
17268: PUSH
17269: LD_EXP 56
17273: AND
17274: IFFALSE 17377
17276: GO 17278
17278: DISABLE
17279: LD_INT 0
17281: PPUSH
// begin for i := 1 to 5 do
17282: LD_ADDR_VAR 0 1
17286: PUSH
17287: DOUBLE
17288: LD_INT 1
17290: DEC
17291: ST_TO_ADDR
17292: LD_INT 5
17294: PUSH
17295: FOR_TO
17296: IFFALSE 17375
// begin uc_nation := nation_nature ;
17298: LD_ADDR_OWVAR 21
17302: PUSH
17303: LD_INT 0
17305: ST_TO_ADDR
// uc_side := 0 ;
17306: LD_ADDR_OWVAR 20
17310: PUSH
17311: LD_INT 0
17313: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17314: LD_ADDR_OWVAR 29
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 12
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: ST_TO_ADDR
// hc_agressivity := 20 ;
17329: LD_ADDR_OWVAR 35
17333: PUSH
17334: LD_INT 20
17336: ST_TO_ADDR
// hc_class := class_tiger ;
17337: LD_ADDR_OWVAR 28
17341: PUSH
17342: LD_INT 14
17344: ST_TO_ADDR
// hc_gallery :=  ;
17345: LD_ADDR_OWVAR 33
17349: PUSH
17350: LD_STRING 
17352: ST_TO_ADDR
// hc_name :=  ;
17353: LD_ADDR_OWVAR 26
17357: PUSH
17358: LD_STRING 
17360: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17361: CALL_OW 44
17365: PPUSH
17366: LD_INT 0
17368: PPUSH
17369: CALL_OW 51
// end ;
17373: GO 17295
17375: POP
17376: POP
// end ;
17377: PPOPN 1
17379: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17380: LD_EXP 37
17384: PUSH
17385: LD_EXP 57
17389: AND
17390: IFFALSE 17399
17392: GO 17394
17394: DISABLE
// StreamSibBomb ;
17395: CALL 17400 0 0
17399: END
// export function StreamSibBomb ; var i , x , y ; begin
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
// result := false ;
17406: LD_ADDR_VAR 0 1
17410: PUSH
17411: LD_INT 0
17413: ST_TO_ADDR
// for i := 1 to 16 do
17414: LD_ADDR_VAR 0 2
17418: PUSH
17419: DOUBLE
17420: LD_INT 1
17422: DEC
17423: ST_TO_ADDR
17424: LD_INT 16
17426: PUSH
17427: FOR_TO
17428: IFFALSE 17627
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: LD_INT 10
17437: PUSH
17438: LD_INT 20
17440: PUSH
17441: LD_INT 30
17443: PUSH
17444: LD_INT 40
17446: PUSH
17447: LD_INT 50
17449: PUSH
17450: LD_INT 60
17452: PUSH
17453: LD_INT 70
17455: PUSH
17456: LD_INT 80
17458: PUSH
17459: LD_INT 90
17461: PUSH
17462: LD_INT 100
17464: PUSH
17465: LD_INT 110
17467: PUSH
17468: LD_INT 120
17470: PUSH
17471: LD_INT 130
17473: PUSH
17474: LD_INT 140
17476: PUSH
17477: LD_INT 150
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_INT 15
17502: PPUSH
17503: CALL_OW 12
17507: ARRAY
17508: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17509: LD_ADDR_VAR 0 4
17513: PUSH
17514: LD_INT 10
17516: PUSH
17517: LD_INT 20
17519: PUSH
17520: LD_INT 30
17522: PUSH
17523: LD_INT 40
17525: PUSH
17526: LD_INT 50
17528: PUSH
17529: LD_INT 60
17531: PUSH
17532: LD_INT 70
17534: PUSH
17535: LD_INT 80
17537: PUSH
17538: LD_INT 90
17540: PUSH
17541: LD_INT 100
17543: PUSH
17544: LD_INT 110
17546: PUSH
17547: LD_INT 120
17549: PUSH
17550: LD_INT 130
17552: PUSH
17553: LD_INT 140
17555: PUSH
17556: LD_INT 150
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 15
17581: PPUSH
17582: CALL_OW 12
17586: ARRAY
17587: ST_TO_ADDR
// if ValidHex ( x , y ) then
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_VAR 0 4
17597: PPUSH
17598: CALL_OW 488
17602: IFFALSE 17625
// begin result := [ x , y ] ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_VAR 0 3
17613: PUSH
17614: LD_VAR 0 4
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: ST_TO_ADDR
// break ;
17623: GO 17627
// end ; end ;
17625: GO 17427
17627: POP
17628: POP
// if result then
17629: LD_VAR 0 1
17633: IFFALSE 17693
// begin ToLua ( playSibBomb() ) ;
17635: LD_STRING playSibBomb()
17637: PPUSH
17638: CALL_OW 559
// wait ( 0 0$14 ) ;
17642: LD_INT 490
17644: PPUSH
17645: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17649: LD_VAR 0 1
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PPUSH
17658: LD_VAR 0 1
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PPUSH
17667: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17671: LD_VAR 0 1
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: PPUSH
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 2
17687: ARRAY
17688: PPUSH
17689: CALL_OW 429
// end ; end ;
17693: LD_VAR 0 1
17697: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17698: LD_EXP 37
17702: PUSH
17703: LD_EXP 59
17707: AND
17708: IFFALSE 17720
17710: GO 17712
17712: DISABLE
// YouLost (  ) ;
17713: LD_STRING 
17715: PPUSH
17716: CALL_OW 104
17720: END
// every 0 0$1 trigger StreamModeActive and sFog do
17721: LD_EXP 37
17725: PUSH
17726: LD_EXP 58
17730: AND
17731: IFFALSE 17745
17733: GO 17735
17735: DISABLE
// FogOff ( your_side ) ;
17736: LD_OWVAR 2
17740: PPUSH
17741: CALL_OW 344
17745: END
// every 0 0$1 trigger StreamModeActive and sSun do
17746: LD_EXP 37
17750: PUSH
17751: LD_EXP 60
17755: AND
17756: IFFALSE 17784
17758: GO 17760
17760: DISABLE
// begin solar_recharge_percent := 0 ;
17761: LD_ADDR_OWVAR 79
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17769: LD_INT 10500
17771: PPUSH
17772: CALL_OW 67
// solar_recharge_percent := 100 ;
17776: LD_ADDR_OWVAR 79
17780: PUSH
17781: LD_INT 100
17783: ST_TO_ADDR
// end ;
17784: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17785: LD_EXP 37
17789: PUSH
17790: LD_EXP 61
17794: AND
17795: IFFALSE 18034
17797: GO 17799
17799: DISABLE
17800: LD_INT 0
17802: PPUSH
17803: PPUSH
17804: PPUSH
// begin tmp := [ ] ;
17805: LD_ADDR_VAR 0 3
17809: PUSH
17810: EMPTY
17811: ST_TO_ADDR
// for i := 1 to 6 do
17812: LD_ADDR_VAR 0 1
17816: PUSH
17817: DOUBLE
17818: LD_INT 1
17820: DEC
17821: ST_TO_ADDR
17822: LD_INT 6
17824: PUSH
17825: FOR_TO
17826: IFFALSE 17931
// begin uc_nation := nation_nature ;
17828: LD_ADDR_OWVAR 21
17832: PUSH
17833: LD_INT 0
17835: ST_TO_ADDR
// uc_side := 0 ;
17836: LD_ADDR_OWVAR 20
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17844: LD_ADDR_OWVAR 29
17848: PUSH
17849: LD_INT 12
17851: PUSH
17852: LD_INT 12
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: ST_TO_ADDR
// hc_agressivity := 20 ;
17859: LD_ADDR_OWVAR 35
17863: PUSH
17864: LD_INT 20
17866: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17867: LD_ADDR_OWVAR 28
17871: PUSH
17872: LD_INT 17
17874: ST_TO_ADDR
// hc_gallery :=  ;
17875: LD_ADDR_OWVAR 33
17879: PUSH
17880: LD_STRING 
17882: ST_TO_ADDR
// hc_name :=  ;
17883: LD_ADDR_OWVAR 26
17887: PUSH
17888: LD_STRING 
17890: ST_TO_ADDR
// un := CreateHuman ;
17891: LD_ADDR_VAR 0 2
17895: PUSH
17896: CALL_OW 44
17900: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17901: LD_VAR 0 2
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 51
// tmp := tmp ^ un ;
17913: LD_ADDR_VAR 0 3
17917: PUSH
17918: LD_VAR 0 3
17922: PUSH
17923: LD_VAR 0 2
17927: ADD
17928: ST_TO_ADDR
// end ;
17929: GO 17825
17931: POP
17932: POP
// repeat wait ( 0 0$1 ) ;
17933: LD_INT 35
17935: PPUSH
17936: CALL_OW 67
// for un in tmp do
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_VAR 0 3
17949: PUSH
17950: FOR_IN
17951: IFFALSE 18025
// begin if IsDead ( un ) then
17953: LD_VAR 0 2
17957: PPUSH
17958: CALL_OW 301
17962: IFFALSE 17982
// begin tmp := tmp diff un ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_VAR 0 3
17973: PUSH
17974: LD_VAR 0 2
17978: DIFF
17979: ST_TO_ADDR
// continue ;
17980: GO 17950
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17982: LD_VAR 0 2
17986: PPUSH
17987: LD_INT 3
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: PPUSH
18009: LD_VAR 0 2
18013: PPUSH
18014: CALL_OW 74
18018: PPUSH
18019: CALL_OW 115
// end ;
18023: GO 17950
18025: POP
18026: POP
// until not tmp ;
18027: LD_VAR 0 3
18031: NOT
18032: IFFALSE 17933
// end ;
18034: PPOPN 3
18036: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18037: LD_EXP 37
18041: PUSH
18042: LD_EXP 62
18046: AND
18047: IFFALSE 18101
18049: GO 18051
18051: DISABLE
// begin ToLua ( displayTroll(); ) ;
18052: LD_STRING displayTroll();
18054: PPUSH
18055: CALL_OW 559
// wait ( 3 3$00 ) ;
18059: LD_INT 6300
18061: PPUSH
18062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18066: LD_STRING hideTroll();
18068: PPUSH
18069: CALL_OW 559
// wait ( 1 1$00 ) ;
18073: LD_INT 2100
18075: PPUSH
18076: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18080: LD_STRING displayTroll();
18082: PPUSH
18083: CALL_OW 559
// wait ( 1 1$00 ) ;
18087: LD_INT 2100
18089: PPUSH
18090: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18094: LD_STRING hideTroll();
18096: PPUSH
18097: CALL_OW 559
// end ;
18101: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18102: LD_EXP 37
18106: PUSH
18107: LD_EXP 63
18111: AND
18112: IFFALSE 18175
18114: GO 18116
18116: DISABLE
18117: LD_INT 0
18119: PPUSH
// begin p := 0 ;
18120: LD_ADDR_VAR 0 1
18124: PUSH
18125: LD_INT 0
18127: ST_TO_ADDR
// repeat game_speed := 1 ;
18128: LD_ADDR_OWVAR 65
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18136: LD_INT 35
18138: PPUSH
18139: CALL_OW 67
// p := p + 1 ;
18143: LD_ADDR_VAR 0 1
18147: PUSH
18148: LD_VAR 0 1
18152: PUSH
18153: LD_INT 1
18155: PLUS
18156: ST_TO_ADDR
// until p >= 60 ;
18157: LD_VAR 0 1
18161: PUSH
18162: LD_INT 60
18164: GREATEREQUAL
18165: IFFALSE 18128
// game_speed := 4 ;
18167: LD_ADDR_OWVAR 65
18171: PUSH
18172: LD_INT 4
18174: ST_TO_ADDR
// end ;
18175: PPOPN 1
18177: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18178: LD_EXP 37
18182: PUSH
18183: LD_EXP 64
18187: AND
18188: IFFALSE 18334
18190: GO 18192
18192: DISABLE
18193: LD_INT 0
18195: PPUSH
18196: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18197: LD_ADDR_VAR 0 1
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_OWVAR 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 30
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 30
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: ST_TO_ADDR
// if not depot then
18251: LD_VAR 0 1
18255: NOT
18256: IFFALSE 18260
// exit ;
18258: GO 18334
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18260: LD_ADDR_VAR 0 2
18264: PUSH
18265: LD_VAR 0 1
18269: PUSH
18270: LD_INT 1
18272: PPUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 12
18282: ARRAY
18283: PPUSH
18284: CALL_OW 274
18288: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18289: LD_VAR 0 2
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: LD_INT 0
18299: PPUSH
18300: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_INT 2
18311: PPUSH
18312: LD_INT 0
18314: PPUSH
18315: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18319: LD_VAR 0 2
18323: PPUSH
18324: LD_INT 3
18326: PPUSH
18327: LD_INT 0
18329: PPUSH
18330: CALL_OW 277
// end ;
18334: PPOPN 2
18336: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18337: LD_EXP 37
18341: PUSH
18342: LD_EXP 65
18346: AND
18347: IFFALSE 18444
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18355: LD_ADDR_VAR 0 1
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_OWVAR 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 3
18384: PUSH
18385: LD_INT 23
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: PPUSH
18404: CALL_OW 69
18408: ST_TO_ADDR
// if not tmp then
18409: LD_VAR 0 1
18413: NOT
18414: IFFALSE 18418
// exit ;
18416: GO 18444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18418: LD_VAR 0 1
18422: PUSH
18423: LD_INT 1
18425: PPUSH
18426: LD_VAR 0 1
18430: PPUSH
18431: CALL_OW 12
18435: ARRAY
18436: PPUSH
18437: LD_INT 200
18439: PPUSH
18440: CALL_OW 234
// end ;
18444: PPOPN 1
18446: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18447: LD_EXP 37
18451: PUSH
18452: LD_EXP 66
18456: AND
18457: IFFALSE 18536
18459: GO 18461
18461: DISABLE
18462: LD_INT 0
18464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18465: LD_ADDR_VAR 0 1
18469: PUSH
18470: LD_INT 22
18472: PUSH
18473: LD_OWVAR 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 21
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PPUSH
18496: CALL_OW 69
18500: ST_TO_ADDR
// if not tmp then
18501: LD_VAR 0 1
18505: NOT
18506: IFFALSE 18510
// exit ;
18508: GO 18536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18510: LD_VAR 0 1
18514: PUSH
18515: LD_INT 1
18517: PPUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 12
18527: ARRAY
18528: PPUSH
18529: LD_INT 60
18531: PPUSH
18532: CALL_OW 234
// end ;
18536: PPOPN 1
18538: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18539: LD_EXP 37
18543: PUSH
18544: LD_EXP 67
18548: AND
18549: IFFALSE 18648
18551: GO 18553
18553: DISABLE
18554: LD_INT 0
18556: PPUSH
18557: PPUSH
// begin enable ;
18558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18559: LD_ADDR_VAR 0 1
18563: PUSH
18564: LD_INT 22
18566: PUSH
18567: LD_OWVAR 2
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 61
18578: PUSH
18579: EMPTY
18580: LIST
18581: PUSH
18582: LD_INT 33
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: PPUSH
18597: CALL_OW 69
18601: ST_TO_ADDR
// if not tmp then
18602: LD_VAR 0 1
18606: NOT
18607: IFFALSE 18611
// exit ;
18609: GO 18648
// for i in tmp do
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_VAR 0 1
18620: PUSH
18621: FOR_IN
18622: IFFALSE 18646
// if IsControledBy ( i ) then
18624: LD_VAR 0 2
18628: PPUSH
18629: CALL_OW 312
18633: IFFALSE 18644
// ComUnlink ( i ) ;
18635: LD_VAR 0 2
18639: PPUSH
18640: CALL_OW 136
18644: GO 18621
18646: POP
18647: POP
// end ;
18648: PPOPN 2
18650: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18651: LD_EXP 37
18655: PUSH
18656: LD_EXP 68
18660: AND
18661: IFFALSE 18801
18663: GO 18665
18665: DISABLE
18666: LD_INT 0
18668: PPUSH
18669: PPUSH
// begin ToLua ( displayPowell(); ) ;
18670: LD_STRING displayPowell();
18672: PPUSH
18673: CALL_OW 559
// uc_side := 0 ;
18677: LD_ADDR_OWVAR 20
18681: PUSH
18682: LD_INT 0
18684: ST_TO_ADDR
// uc_nation := 2 ;
18685: LD_ADDR_OWVAR 21
18689: PUSH
18690: LD_INT 2
18692: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18693: LD_ADDR_OWVAR 37
18697: PUSH
18698: LD_INT 14
18700: ST_TO_ADDR
// vc_engine := engine_siberite ;
18701: LD_ADDR_OWVAR 39
18705: PUSH
18706: LD_INT 3
18708: ST_TO_ADDR
// vc_control := control_apeman ;
18709: LD_ADDR_OWVAR 38
18713: PUSH
18714: LD_INT 5
18716: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18717: LD_ADDR_OWVAR 40
18721: PUSH
18722: LD_INT 29
18724: ST_TO_ADDR
// un := CreateVehicle ;
18725: LD_ADDR_VAR 0 2
18729: PUSH
18730: CALL_OW 45
18734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_INT 1
18742: PPUSH
18743: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18747: LD_INT 35
18749: PPUSH
18750: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18754: LD_VAR 0 2
18758: PPUSH
18759: LD_INT 22
18761: PUSH
18762: LD_OWVAR 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: PPUSH
18776: LD_VAR 0 2
18780: PPUSH
18781: CALL_OW 74
18785: PPUSH
18786: CALL_OW 115
// until IsDead ( un ) ;
18790: LD_VAR 0 2
18794: PPUSH
18795: CALL_OW 301
18799: IFFALSE 18747
// end ;
18801: PPOPN 2
18803: END
// every 0 0$1 trigger StreamModeActive and sStu do
18804: LD_EXP 37
18808: PUSH
18809: LD_EXP 76
18813: AND
18814: IFFALSE 18830
18816: GO 18818
18818: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18819: LD_STRING displayStucuk();
18821: PPUSH
18822: CALL_OW 559
// ResetFog ;
18826: CALL_OW 335
// end ;
18830: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18831: LD_EXP 37
18835: PUSH
18836: LD_EXP 69
18840: AND
18841: IFFALSE 18982
18843: GO 18845
18845: DISABLE
18846: LD_INT 0
18848: PPUSH
18849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18850: LD_ADDR_VAR 0 2
18854: PUSH
18855: LD_INT 22
18857: PUSH
18858: LD_OWVAR 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 21
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 69
18885: ST_TO_ADDR
// if not tmp then
18886: LD_VAR 0 2
18890: NOT
18891: IFFALSE 18895
// exit ;
18893: GO 18982
// un := tmp [ rand ( 1 , tmp ) ] ;
18895: LD_ADDR_VAR 0 1
18899: PUSH
18900: LD_VAR 0 2
18904: PUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_VAR 0 2
18912: PPUSH
18913: CALL_OW 12
18917: ARRAY
18918: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_INT 0
18926: PPUSH
18927: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18931: LD_VAR 0 1
18935: PPUSH
18936: LD_OWVAR 3
18940: PUSH
18941: LD_VAR 0 1
18945: DIFF
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 74
18956: PPUSH
18957: CALL_OW 115
// wait ( 0 0$20 ) ;
18961: LD_INT 700
18963: PPUSH
18964: CALL_OW 67
// SetSide ( un , your_side ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_OWVAR 2
18977: PPUSH
18978: CALL_OW 235
// end ;
18982: PPOPN 2
18984: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18985: LD_EXP 37
18989: PUSH
18990: LD_EXP 70
18994: AND
18995: IFFALSE 19101
18997: GO 18999
18999: DISABLE
19000: LD_INT 0
19002: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19003: LD_ADDR_VAR 0 1
19007: PUSH
19008: LD_INT 22
19010: PUSH
19011: LD_OWVAR 2
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 30
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: ST_TO_ADDR
// if not depot then
19057: LD_VAR 0 1
19061: NOT
19062: IFFALSE 19066
// exit ;
19064: GO 19101
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19066: LD_VAR 0 1
19070: PUSH
19071: LD_INT 1
19073: ARRAY
19074: PPUSH
19075: CALL_OW 250
19079: PPUSH
19080: LD_VAR 0 1
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: PPUSH
19089: CALL_OW 251
19093: PPUSH
19094: LD_INT 70
19096: PPUSH
19097: CALL_OW 495
// end ;
19101: PPOPN 1
19103: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19104: LD_EXP 37
19108: PUSH
19109: LD_EXP 71
19113: AND
19114: IFFALSE 19325
19116: GO 19118
19118: DISABLE
19119: LD_INT 0
19121: PPUSH
19122: PPUSH
19123: PPUSH
19124: PPUSH
19125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19126: LD_ADDR_VAR 0 5
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_OWVAR 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: ST_TO_ADDR
// if not tmp then
19162: LD_VAR 0 5
19166: NOT
19167: IFFALSE 19171
// exit ;
19169: GO 19325
// for i in tmp do
19171: LD_ADDR_VAR 0 1
19175: PUSH
19176: LD_VAR 0 5
19180: PUSH
19181: FOR_IN
19182: IFFALSE 19323
// begin d := rand ( 0 , 5 ) ;
19184: LD_ADDR_VAR 0 4
19188: PUSH
19189: LD_INT 0
19191: PPUSH
19192: LD_INT 5
19194: PPUSH
19195: CALL_OW 12
19199: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19200: LD_ADDR_VAR 0 2
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: CALL_OW 250
19214: PPUSH
19215: LD_VAR 0 4
19219: PPUSH
19220: LD_INT 3
19222: PPUSH
19223: LD_INT 12
19225: PPUSH
19226: CALL_OW 12
19230: PPUSH
19231: CALL_OW 272
19235: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 251
19250: PPUSH
19251: LD_VAR 0 4
19255: PPUSH
19256: LD_INT 3
19258: PPUSH
19259: LD_INT 12
19261: PPUSH
19262: CALL_OW 12
19266: PPUSH
19267: CALL_OW 273
19271: ST_TO_ADDR
// if ValidHex ( x , y ) then
19272: LD_VAR 0 2
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 488
19286: IFFALSE 19321
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19288: LD_VAR 0 1
19292: PPUSH
19293: LD_VAR 0 2
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 3
19305: PPUSH
19306: LD_INT 6
19308: PPUSH
19309: CALL_OW 12
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL_OW 483
// end ;
19321: GO 19181
19323: POP
19324: POP
// end ;
19325: PPOPN 5
19327: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19328: LD_EXP 37
19332: PUSH
19333: LD_EXP 72
19337: AND
19338: IFFALSE 19432
19340: GO 19342
19342: DISABLE
19343: LD_INT 0
19345: PPUSH
19346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19347: LD_ADDR_VAR 0 2
19351: PUSH
19352: LD_INT 22
19354: PUSH
19355: LD_OWVAR 2
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 32
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 21
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: PPUSH
19389: CALL_OW 69
19393: ST_TO_ADDR
// if not tmp then
19394: LD_VAR 0 2
19398: NOT
19399: IFFALSE 19403
// exit ;
19401: GO 19432
// for i in tmp do
19403: LD_ADDR_VAR 0 1
19407: PUSH
19408: LD_VAR 0 2
19412: PUSH
19413: FOR_IN
19414: IFFALSE 19430
// SetFuel ( i , 0 ) ;
19416: LD_VAR 0 1
19420: PPUSH
19421: LD_INT 0
19423: PPUSH
19424: CALL_OW 240
19428: GO 19413
19430: POP
19431: POP
// end ;
19432: PPOPN 2
19434: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19435: LD_EXP 37
19439: PUSH
19440: LD_EXP 73
19444: AND
19445: IFFALSE 19511
19447: GO 19449
19449: DISABLE
19450: LD_INT 0
19452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_INT 22
19460: PUSH
19461: LD_OWVAR 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: LD_INT 29
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: ST_TO_ADDR
// if not tmp then
19489: LD_VAR 0 1
19493: NOT
19494: IFFALSE 19498
// exit ;
19496: GO 19511
// DestroyUnit ( tmp [ 1 ] ) ;
19498: LD_VAR 0 1
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: PPUSH
19507: CALL_OW 65
// end ;
19511: PPOPN 1
19513: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19514: LD_EXP 37
19518: PUSH
19519: LD_EXP 75
19523: AND
19524: IFFALSE 19653
19526: GO 19528
19528: DISABLE
19529: LD_INT 0
19531: PPUSH
// begin uc_side := 0 ;
19532: LD_ADDR_OWVAR 20
19536: PUSH
19537: LD_INT 0
19539: ST_TO_ADDR
// uc_nation := nation_arabian ;
19540: LD_ADDR_OWVAR 21
19544: PUSH
19545: LD_INT 2
19547: ST_TO_ADDR
// hc_gallery :=  ;
19548: LD_ADDR_OWVAR 33
19552: PUSH
19553: LD_STRING 
19555: ST_TO_ADDR
// hc_name :=  ;
19556: LD_ADDR_OWVAR 26
19560: PUSH
19561: LD_STRING 
19563: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19564: LD_INT 1
19566: PPUSH
19567: LD_INT 11
19569: PPUSH
19570: LD_INT 10
19572: PPUSH
19573: CALL_OW 380
// un := CreateHuman ;
19577: LD_ADDR_VAR 0 1
19581: PUSH
19582: CALL_OW 44
19586: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: LD_INT 1
19594: PPUSH
19595: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19599: LD_INT 35
19601: PPUSH
19602: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19606: LD_VAR 0 1
19610: PPUSH
19611: LD_INT 22
19613: PUSH
19614: LD_OWVAR 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: PPUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 74
19637: PPUSH
19638: CALL_OW 115
// until IsDead ( un ) ;
19642: LD_VAR 0 1
19646: PPUSH
19647: CALL_OW 301
19651: IFFALSE 19599
// end ;
19653: PPOPN 1
19655: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19656: LD_EXP 37
19660: PUSH
19661: LD_EXP 77
19665: AND
19666: IFFALSE 19678
19668: GO 19670
19670: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19671: LD_STRING earthquake(getX(game), 0, 32)
19673: PPUSH
19674: CALL_OW 559
19678: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19679: LD_EXP 37
19683: PUSH
19684: LD_EXP 78
19688: AND
19689: IFFALSE 19780
19691: GO 19693
19693: DISABLE
19694: LD_INT 0
19696: PPUSH
// begin enable ;
19697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19698: LD_ADDR_VAR 0 1
19702: PUSH
19703: LD_INT 22
19705: PUSH
19706: LD_OWVAR 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 21
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 33
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: PPUSH
19740: CALL_OW 69
19744: ST_TO_ADDR
// if not tmp then
19745: LD_VAR 0 1
19749: NOT
19750: IFFALSE 19754
// exit ;
19752: GO 19780
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19754: LD_VAR 0 1
19758: PUSH
19759: LD_INT 1
19761: PPUSH
19762: LD_VAR 0 1
19766: PPUSH
19767: CALL_OW 12
19771: ARRAY
19772: PPUSH
19773: LD_INT 1
19775: PPUSH
19776: CALL_OW 234
// end ;
19780: PPOPN 1
19782: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19783: LD_EXP 37
19787: PUSH
19788: LD_EXP 79
19792: AND
19793: IFFALSE 19934
19795: GO 19797
19797: DISABLE
19798: LD_INT 0
19800: PPUSH
19801: PPUSH
19802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_OWVAR 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 25
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PPUSH
19834: CALL_OW 69
19838: ST_TO_ADDR
// if not tmp then
19839: LD_VAR 0 3
19843: NOT
19844: IFFALSE 19848
// exit ;
19846: GO 19934
// un := tmp [ rand ( 1 , tmp ) ] ;
19848: LD_ADDR_VAR 0 2
19852: PUSH
19853: LD_VAR 0 3
19857: PUSH
19858: LD_INT 1
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: CALL_OW 12
19870: ARRAY
19871: ST_TO_ADDR
// if Crawls ( un ) then
19872: LD_VAR 0 2
19876: PPUSH
19877: CALL_OW 318
19881: IFFALSE 19892
// ComWalk ( un ) ;
19883: LD_VAR 0 2
19887: PPUSH
19888: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19892: LD_VAR 0 2
19896: PPUSH
19897: LD_INT 9
19899: PPUSH
19900: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19904: LD_INT 28
19906: PPUSH
19907: LD_OWVAR 2
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19919: LD_INT 29
19921: PPUSH
19922: LD_OWVAR 2
19926: PPUSH
19927: LD_INT 2
19929: PPUSH
19930: CALL_OW 322
// end ;
19934: PPOPN 3
19936: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19937: LD_EXP 37
19941: PUSH
19942: LD_EXP 80
19946: AND
19947: IFFALSE 20058
19949: GO 19951
19951: DISABLE
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_INT 22
19964: PUSH
19965: LD_OWVAR 2
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 25
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PPUSH
19988: CALL_OW 69
19992: ST_TO_ADDR
// if not tmp then
19993: LD_VAR 0 3
19997: NOT
19998: IFFALSE 20002
// exit ;
20000: GO 20058
// un := tmp [ rand ( 1 , tmp ) ] ;
20002: LD_ADDR_VAR 0 2
20006: PUSH
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 1
20014: PPUSH
20015: LD_VAR 0 3
20019: PPUSH
20020: CALL_OW 12
20024: ARRAY
20025: ST_TO_ADDR
// if Crawls ( un ) then
20026: LD_VAR 0 2
20030: PPUSH
20031: CALL_OW 318
20035: IFFALSE 20046
// ComWalk ( un ) ;
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20046: LD_VAR 0 2
20050: PPUSH
20051: LD_INT 8
20053: PPUSH
20054: CALL_OW 336
// end ;
20058: PPOPN 3
20060: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20061: LD_EXP 37
20065: PUSH
20066: LD_EXP 81
20070: AND
20071: IFFALSE 20215
20073: GO 20075
20075: DISABLE
20076: LD_INT 0
20078: PPUSH
20079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: LD_INT 22
20087: PUSH
20088: LD_OWVAR 2
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 21
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 34
20112: PUSH
20113: LD_INT 12
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 34
20122: PUSH
20123: LD_INT 51
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 34
20132: PUSH
20133: LD_INT 32
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: ST_TO_ADDR
// if not tmp then
20156: LD_VAR 0 2
20160: NOT
20161: IFFALSE 20165
// exit ;
20163: GO 20215
// for i in tmp do
20165: LD_ADDR_VAR 0 1
20169: PUSH
20170: LD_VAR 0 2
20174: PUSH
20175: FOR_IN
20176: IFFALSE 20213
// if GetCargo ( i , mat_artifact ) = 0 then
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_INT 4
20185: PPUSH
20186: CALL_OW 289
20190: PUSH
20191: LD_INT 0
20193: EQUAL
20194: IFFALSE 20211
// SetCargo ( i , mat_siberit , 100 ) ;
20196: LD_VAR 0 1
20200: PPUSH
20201: LD_INT 3
20203: PPUSH
20204: LD_INT 100
20206: PPUSH
20207: CALL_OW 290
20211: GO 20175
20213: POP
20214: POP
// end ;
20215: PPOPN 2
20217: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20218: LD_EXP 37
20222: PUSH
20223: LD_EXP 82
20227: AND
20228: IFFALSE 20411
20230: GO 20232
20232: DISABLE
20233: LD_INT 0
20235: PPUSH
20236: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20237: LD_ADDR_VAR 0 2
20241: PUSH
20242: LD_INT 22
20244: PUSH
20245: LD_OWVAR 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PPUSH
20254: CALL_OW 69
20258: ST_TO_ADDR
// if not tmp then
20259: LD_VAR 0 2
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20411
// for i := 1 to 2 do
20268: LD_ADDR_VAR 0 1
20272: PUSH
20273: DOUBLE
20274: LD_INT 1
20276: DEC
20277: ST_TO_ADDR
20278: LD_INT 2
20280: PUSH
20281: FOR_TO
20282: IFFALSE 20409
// begin uc_side := your_side ;
20284: LD_ADDR_OWVAR 20
20288: PUSH
20289: LD_OWVAR 2
20293: ST_TO_ADDR
// uc_nation := nation_american ;
20294: LD_ADDR_OWVAR 21
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// vc_chassis := us_morphling ;
20302: LD_ADDR_OWVAR 37
20306: PUSH
20307: LD_INT 5
20309: ST_TO_ADDR
// vc_engine := engine_siberite ;
20310: LD_ADDR_OWVAR 39
20314: PUSH
20315: LD_INT 3
20317: ST_TO_ADDR
// vc_control := control_computer ;
20318: LD_ADDR_OWVAR 38
20322: PUSH
20323: LD_INT 3
20325: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20326: LD_ADDR_OWVAR 40
20330: PUSH
20331: LD_INT 10
20333: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20334: LD_VAR 0 2
20338: PUSH
20339: LD_INT 1
20341: ARRAY
20342: PPUSH
20343: CALL_OW 310
20347: NOT
20348: IFFALSE 20395
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20350: CALL_OW 45
20354: PPUSH
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 1
20362: ARRAY
20363: PPUSH
20364: CALL_OW 250
20368: PPUSH
20369: LD_VAR 0 2
20373: PUSH
20374: LD_INT 1
20376: ARRAY
20377: PPUSH
20378: CALL_OW 251
20382: PPUSH
20383: LD_INT 12
20385: PPUSH
20386: LD_INT 1
20388: PPUSH
20389: CALL_OW 50
20393: GO 20407
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20395: CALL_OW 45
20399: PPUSH
20400: LD_INT 1
20402: PPUSH
20403: CALL_OW 51
// end ;
20407: GO 20281
20409: POP
20410: POP
// end ;
20411: PPOPN 2
20413: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20414: LD_EXP 37
20418: PUSH
20419: LD_EXP 83
20423: AND
20424: IFFALSE 20646
20426: GO 20428
20428: DISABLE
20429: LD_INT 0
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
20435: PPUSH
20436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20437: LD_ADDR_VAR 0 6
20441: PUSH
20442: LD_INT 22
20444: PUSH
20445: LD_OWVAR 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 21
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 23
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: PPUSH
20486: CALL_OW 69
20490: ST_TO_ADDR
// if not tmp then
20491: LD_VAR 0 6
20495: NOT
20496: IFFALSE 20500
// exit ;
20498: GO 20646
// s1 := rand ( 1 , 4 ) ;
20500: LD_ADDR_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 4
20510: PPUSH
20511: CALL_OW 12
20515: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_VAR 0 6
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: PPUSH
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 259
20539: ST_TO_ADDR
// if s1 = 1 then
20540: LD_VAR 0 2
20544: PUSH
20545: LD_INT 1
20547: EQUAL
20548: IFFALSE 20568
// s2 := rand ( 2 , 4 ) else
20550: LD_ADDR_VAR 0 3
20554: PUSH
20555: LD_INT 2
20557: PPUSH
20558: LD_INT 4
20560: PPUSH
20561: CALL_OW 12
20565: ST_TO_ADDR
20566: GO 20576
// s2 := 1 ;
20568: LD_ADDR_VAR 0 3
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20576: LD_ADDR_VAR 0 5
20580: PUSH
20581: LD_VAR 0 6
20585: PUSH
20586: LD_INT 1
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 3
20594: PPUSH
20595: CALL_OW 259
20599: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20600: LD_VAR 0 6
20604: PUSH
20605: LD_INT 1
20607: ARRAY
20608: PPUSH
20609: LD_VAR 0 2
20613: PPUSH
20614: LD_VAR 0 5
20618: PPUSH
20619: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20623: LD_VAR 0 6
20627: PUSH
20628: LD_INT 1
20630: ARRAY
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: LD_VAR 0 4
20641: PPUSH
20642: CALL_OW 237
// end ;
20646: PPOPN 6
20648: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20649: LD_EXP 37
20653: PUSH
20654: LD_EXP 84
20658: AND
20659: IFFALSE 20738
20661: GO 20663
20663: DISABLE
20664: LD_INT 0
20666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20667: LD_ADDR_VAR 0 1
20671: PUSH
20672: LD_INT 22
20674: PUSH
20675: LD_OWVAR 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 30
20686: PUSH
20687: LD_INT 3
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PPUSH
20698: CALL_OW 69
20702: ST_TO_ADDR
// if not tmp then
20703: LD_VAR 0 1
20707: NOT
20708: IFFALSE 20712
// exit ;
20710: GO 20738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20712: LD_VAR 0 1
20716: PUSH
20717: LD_INT 1
20719: PPUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 12
20729: ARRAY
20730: PPUSH
20731: LD_INT 1
20733: PPUSH
20734: CALL_OW 234
// end ;
20738: PPOPN 1
20740: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20741: LD_EXP 37
20745: PUSH
20746: LD_EXP 85
20750: AND
20751: IFFALSE 20863
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 30
20782: PUSH
20783: LD_INT 27
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 30
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 30
20802: PUSH
20803: LD_INT 28
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: ST_TO_ADDR
// if not tmp then
20825: LD_VAR 0 2
20829: NOT
20830: IFFALSE 20834
// exit ;
20832: GO 20863
// for i in tmp do
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_VAR 0 2
20843: PUSH
20844: FOR_IN
20845: IFFALSE 20861
// SetLives ( i , 1 ) ;
20847: LD_VAR 0 1
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 234
20859: GO 20844
20861: POP
20862: POP
// end ;
20863: PPOPN 2
20865: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20866: LD_EXP 37
20870: PUSH
20871: LD_EXP 86
20875: AND
20876: IFFALSE 21150
20878: GO 20880
20880: DISABLE
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
20885: PPUSH
// begin i := rand ( 1 , 7 ) ;
20886: LD_ADDR_VAR 0 1
20890: PUSH
20891: LD_INT 1
20893: PPUSH
20894: LD_INT 7
20896: PPUSH
20897: CALL_OW 12
20901: ST_TO_ADDR
// case i of 1 :
20902: LD_VAR 0 1
20906: PUSH
20907: LD_INT 1
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20925
20915: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20916: LD_STRING earthquake(getX(game), 0, 32)
20918: PPUSH
20919: CALL_OW 559
20923: GO 21150
20925: LD_INT 2
20927: DOUBLE
20928: EQUAL
20929: IFTRUE 20933
20931: GO 20947
20933: POP
// begin ToLua ( displayStucuk(); ) ;
20934: LD_STRING displayStucuk();
20936: PPUSH
20937: CALL_OW 559
// ResetFog ;
20941: CALL_OW 335
// end ; 3 :
20945: GO 21150
20947: LD_INT 3
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 21059
20955: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_INT 22
20963: PUSH
20964: LD_OWVAR 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 25
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PPUSH
20987: CALL_OW 69
20991: ST_TO_ADDR
// if not tmp then
20992: LD_VAR 0 2
20996: NOT
20997: IFFALSE 21001
// exit ;
20999: GO 21150
// un := tmp [ rand ( 1 , tmp ) ] ;
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_INT 1
21013: PPUSH
21014: LD_VAR 0 2
21018: PPUSH
21019: CALL_OW 12
21023: ARRAY
21024: ST_TO_ADDR
// if Crawls ( un ) then
21025: LD_VAR 0 3
21029: PPUSH
21030: CALL_OW 318
21034: IFFALSE 21045
// ComWalk ( un ) ;
21036: LD_VAR 0 3
21040: PPUSH
21041: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_INT 8
21052: PPUSH
21053: CALL_OW 336
// end ; 4 :
21057: GO 21150
21059: LD_INT 4
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21128
21067: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21068: LD_ADDR_VAR 0 2
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_OWVAR 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 30
21087: PUSH
21088: LD_INT 29
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: ST_TO_ADDR
// if not tmp then
21104: LD_VAR 0 2
21108: NOT
21109: IFFALSE 21113
// exit ;
21111: GO 21150
// DestroyUnit ( tmp [ 1 ] ) ;
21113: LD_VAR 0 2
21117: PUSH
21118: LD_INT 1
21120: ARRAY
21121: PPUSH
21122: CALL_OW 65
// end ; 5 .. 7 :
21126: GO 21150
21128: LD_INT 5
21130: DOUBLE
21131: GREATEREQUAL
21132: IFFALSE 21140
21134: LD_INT 7
21136: DOUBLE
21137: LESSEQUAL
21138: IFTRUE 21142
21140: GO 21149
21142: POP
// StreamSibBomb ; end ;
21143: CALL 17400 0 0
21147: GO 21150
21149: POP
// end ;
21150: PPOPN 3
21152: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21153: LD_EXP 37
21157: PUSH
21158: LD_EXP 87
21162: AND
21163: IFFALSE 21319
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
21172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_INT 81
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 21
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 21
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PPUSH
21222: CALL_OW 69
21226: ST_TO_ADDR
// if not tmp then
21227: LD_VAR 0 2
21231: NOT
21232: IFFALSE 21236
// exit ;
21234: GO 21319
// p := 0 ;
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21244: LD_INT 35
21246: PPUSH
21247: CALL_OW 67
// p := p + 1 ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_VAR 0 3
21260: PUSH
21261: LD_INT 1
21263: PLUS
21264: ST_TO_ADDR
// for i in tmp do
21265: LD_ADDR_VAR 0 1
21269: PUSH
21270: LD_VAR 0 2
21274: PUSH
21275: FOR_IN
21276: IFFALSE 21307
// if GetLives ( i ) < 1000 then
21278: LD_VAR 0 1
21282: PPUSH
21283: CALL_OW 256
21287: PUSH
21288: LD_INT 1000
21290: LESS
21291: IFFALSE 21305
// SetLives ( i , 1000 ) ;
21293: LD_VAR 0 1
21297: PPUSH
21298: LD_INT 1000
21300: PPUSH
21301: CALL_OW 234
21305: GO 21275
21307: POP
21308: POP
// until p > 20 ;
21309: LD_VAR 0 3
21313: PUSH
21314: LD_INT 20
21316: GREATER
21317: IFFALSE 21244
// end ;
21319: PPOPN 3
21321: END
// every 0 0$1 trigger StreamModeActive and sTime do
21322: LD_EXP 37
21326: PUSH
21327: LD_EXP 88
21331: AND
21332: IFFALSE 21367
21334: GO 21336
21336: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21337: LD_INT 28
21339: PPUSH
21340: LD_OWVAR 2
21344: PPUSH
21345: LD_INT 2
21347: PPUSH
21348: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21352: LD_INT 30
21354: PPUSH
21355: LD_OWVAR 2
21359: PPUSH
21360: LD_INT 2
21362: PPUSH
21363: CALL_OW 322
// end ;
21367: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21368: LD_EXP 37
21372: PUSH
21373: LD_EXP 89
21377: AND
21378: IFFALSE 21499
21380: GO 21382
21382: DISABLE
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_INT 22
21394: PUSH
21395: LD_OWVAR 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 21
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 3
21416: PUSH
21417: LD_INT 23
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: PPUSH
21436: CALL_OW 69
21440: ST_TO_ADDR
// if not tmp then
21441: LD_VAR 0 2
21445: NOT
21446: IFFALSE 21450
// exit ;
21448: GO 21499
// for i in tmp do
21450: LD_ADDR_VAR 0 1
21454: PUSH
21455: LD_VAR 0 2
21459: PUSH
21460: FOR_IN
21461: IFFALSE 21497
// begin if Crawls ( i ) then
21463: LD_VAR 0 1
21467: PPUSH
21468: CALL_OW 318
21472: IFFALSE 21483
// ComWalk ( i ) ;
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL_OW 138
// SetClass ( i , 2 ) ;
21483: LD_VAR 0 1
21487: PPUSH
21488: LD_INT 2
21490: PPUSH
21491: CALL_OW 336
// end ;
21495: GO 21460
21497: POP
21498: POP
// end ;
21499: PPOPN 2
21501: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21502: LD_EXP 37
21506: PUSH
21507: LD_EXP 90
21511: AND
21512: IFFALSE 21793
21514: GO 21516
21516: DISABLE
21517: LD_INT 0
21519: PPUSH
21520: PPUSH
21521: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21522: LD_OWVAR 2
21526: PPUSH
21527: LD_INT 9
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21540: LD_INT 9
21542: PPUSH
21543: LD_OWVAR 2
21547: PPUSH
21548: CALL_OW 343
// uc_side := 9 ;
21552: LD_ADDR_OWVAR 20
21556: PUSH
21557: LD_INT 9
21559: ST_TO_ADDR
// uc_nation := 2 ;
21560: LD_ADDR_OWVAR 21
21564: PUSH
21565: LD_INT 2
21567: ST_TO_ADDR
// hc_name := Dark Warrior ;
21568: LD_ADDR_OWVAR 26
21572: PUSH
21573: LD_STRING Dark Warrior
21575: ST_TO_ADDR
// hc_gallery :=  ;
21576: LD_ADDR_OWVAR 33
21580: PUSH
21581: LD_STRING 
21583: ST_TO_ADDR
// hc_noskilllimit := true ;
21584: LD_ADDR_OWVAR 76
21588: PUSH
21589: LD_INT 1
21591: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21592: LD_ADDR_OWVAR 31
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 30
21602: PUSH
21603: LD_INT 30
21605: PUSH
21606: LD_INT 30
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: ST_TO_ADDR
// un := CreateHuman ;
21615: LD_ADDR_VAR 0 3
21619: PUSH
21620: CALL_OW 44
21624: ST_TO_ADDR
// hc_noskilllimit := false ;
21625: LD_ADDR_OWVAR 76
21629: PUSH
21630: LD_INT 0
21632: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21633: LD_VAR 0 3
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: CALL_OW 51
// p := 0 ;
21645: LD_ADDR_VAR 0 2
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21653: LD_INT 35
21655: PPUSH
21656: CALL_OW 67
// p := p + 1 ;
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_VAR 0 2
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21674: LD_VAR 0 3
21678: PPUSH
21679: CALL_OW 256
21683: PUSH
21684: LD_INT 1000
21686: LESS
21687: IFFALSE 21701
// SetLives ( un , 1000 ) ;
21689: LD_VAR 0 3
21693: PPUSH
21694: LD_INT 1000
21696: PPUSH
21697: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21701: LD_VAR 0 3
21705: PPUSH
21706: LD_INT 81
21708: PUSH
21709: LD_OWVAR 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 91
21720: PUSH
21721: LD_VAR 0 3
21725: PUSH
21726: LD_INT 30
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL_OW 69
21742: PPUSH
21743: LD_VAR 0 3
21747: PPUSH
21748: CALL_OW 74
21752: PPUSH
21753: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21757: LD_VAR 0 2
21761: PUSH
21762: LD_INT 60
21764: GREATER
21765: PUSH
21766: LD_VAR 0 3
21770: PPUSH
21771: CALL_OW 301
21775: OR
21776: IFFALSE 21653
// if un then
21778: LD_VAR 0 3
21782: IFFALSE 21793
// RemoveUnit ( un ) ;
21784: LD_VAR 0 3
21788: PPUSH
21789: CALL_OW 64
// end ;
21793: PPOPN 3
21795: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21796: LD_INT 0
21798: PPUSH
// case cmd of 301 :
21799: LD_VAR 0 1
21803: PUSH
21804: LD_INT 301
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 21844
21812: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21813: LD_VAR 0 6
21817: PPUSH
21818: LD_VAR 0 7
21822: PPUSH
21823: LD_VAR 0 8
21827: PPUSH
21828: LD_VAR 0 4
21832: PPUSH
21833: LD_VAR 0 5
21837: PPUSH
21838: CALL 23045 0 5
21842: GO 21965
21844: LD_INT 302
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21889
21852: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 7
21862: PPUSH
21863: LD_VAR 0 8
21867: PPUSH
21868: LD_VAR 0 9
21872: PPUSH
21873: LD_VAR 0 4
21877: PPUSH
21878: LD_VAR 0 5
21882: PPUSH
21883: CALL 23136 0 6
21887: GO 21965
21889: LD_INT 303
21891: DOUBLE
21892: EQUAL
21893: IFTRUE 21897
21895: GO 21934
21897: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21898: LD_VAR 0 6
21902: PPUSH
21903: LD_VAR 0 7
21907: PPUSH
21908: LD_VAR 0 8
21912: PPUSH
21913: LD_VAR 0 9
21917: PPUSH
21918: LD_VAR 0 4
21922: PPUSH
21923: LD_VAR 0 5
21927: PPUSH
21928: CALL 21970 0 6
21932: GO 21965
21934: LD_INT 304
21936: DOUBLE
21937: EQUAL
21938: IFTRUE 21942
21940: GO 21964
21942: POP
// hHackTeleport ( unit , x , y ) ; end ;
21943: LD_VAR 0 2
21947: PPUSH
21948: LD_VAR 0 4
21952: PPUSH
21953: LD_VAR 0 5
21957: PPUSH
21958: CALL 23729 0 3
21962: GO 21965
21964: POP
// end ;
21965: LD_VAR 0 12
21969: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21970: LD_INT 0
21972: PPUSH
21973: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21974: LD_VAR 0 1
21978: PUSH
21979: LD_INT 1
21981: LESS
21982: PUSH
21983: LD_VAR 0 1
21987: PUSH
21988: LD_INT 3
21990: GREATER
21991: OR
21992: PUSH
21993: LD_VAR 0 5
21997: PPUSH
21998: LD_VAR 0 6
22002: PPUSH
22003: CALL_OW 428
22007: OR
22008: IFFALSE 22012
// exit ;
22010: GO 22732
// uc_side := your_side ;
22012: LD_ADDR_OWVAR 20
22016: PUSH
22017: LD_OWVAR 2
22021: ST_TO_ADDR
// uc_nation := nation ;
22022: LD_ADDR_OWVAR 21
22026: PUSH
22027: LD_VAR 0 1
22031: ST_TO_ADDR
// bc_level = 1 ;
22032: LD_ADDR_OWVAR 43
22036: PUSH
22037: LD_INT 1
22039: ST_TO_ADDR
// case btype of 1 :
22040: LD_VAR 0 2
22044: PUSH
22045: LD_INT 1
22047: DOUBLE
22048: EQUAL
22049: IFTRUE 22053
22051: GO 22064
22053: POP
// bc_type := b_depot ; 2 :
22054: LD_ADDR_OWVAR 42
22058: PUSH
22059: LD_INT 0
22061: ST_TO_ADDR
22062: GO 22676
22064: LD_INT 2
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22083
22072: POP
// bc_type := b_warehouse ; 3 :
22073: LD_ADDR_OWVAR 42
22077: PUSH
22078: LD_INT 1
22080: ST_TO_ADDR
22081: GO 22676
22083: LD_INT 3
22085: DOUBLE
22086: EQUAL
22087: IFTRUE 22091
22089: GO 22102
22091: POP
// bc_type := b_lab ; 4 .. 9 :
22092: LD_ADDR_OWVAR 42
22096: PUSH
22097: LD_INT 6
22099: ST_TO_ADDR
22100: GO 22676
22102: LD_INT 4
22104: DOUBLE
22105: GREATEREQUAL
22106: IFFALSE 22114
22108: LD_INT 9
22110: DOUBLE
22111: LESSEQUAL
22112: IFTRUE 22116
22114: GO 22168
22116: POP
// begin bc_type := b_lab_half ;
22117: LD_ADDR_OWVAR 42
22121: PUSH
22122: LD_INT 7
22124: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22125: LD_ADDR_OWVAR 44
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 15
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 13
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_VAR 0 2
22160: PUSH
22161: LD_INT 3
22163: MINUS
22164: ARRAY
22165: ST_TO_ADDR
// end ; 10 .. 13 :
22166: GO 22676
22168: LD_INT 10
22170: DOUBLE
22171: GREATEREQUAL
22172: IFFALSE 22180
22174: LD_INT 13
22176: DOUBLE
22177: LESSEQUAL
22178: IFTRUE 22182
22180: GO 22259
22182: POP
// begin bc_type := b_lab_full ;
22183: LD_ADDR_OWVAR 42
22187: PUSH
22188: LD_INT 8
22190: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22191: LD_ADDR_OWVAR 44
22195: PUSH
22196: LD_INT 10
22198: PUSH
22199: LD_INT 12
22201: PUSH
22202: LD_INT 14
22204: PUSH
22205: LD_INT 13
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: PUSH
22214: LD_VAR 0 2
22218: PUSH
22219: LD_INT 9
22221: MINUS
22222: ARRAY
22223: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22224: LD_ADDR_OWVAR 45
22228: PUSH
22229: LD_INT 11
22231: PUSH
22232: LD_INT 15
22234: PUSH
22235: LD_INT 12
22237: PUSH
22238: LD_INT 15
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: LD_INT 9
22254: MINUS
22255: ARRAY
22256: ST_TO_ADDR
// end ; 14 :
22257: GO 22676
22259: LD_INT 14
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22278
22267: POP
// bc_type := b_workshop ; 15 :
22268: LD_ADDR_OWVAR 42
22272: PUSH
22273: LD_INT 2
22275: ST_TO_ADDR
22276: GO 22676
22278: LD_INT 15
22280: DOUBLE
22281: EQUAL
22282: IFTRUE 22286
22284: GO 22297
22286: POP
// bc_type := b_factory ; 16 :
22287: LD_ADDR_OWVAR 42
22291: PUSH
22292: LD_INT 3
22294: ST_TO_ADDR
22295: GO 22676
22297: LD_INT 16
22299: DOUBLE
22300: EQUAL
22301: IFTRUE 22305
22303: GO 22316
22305: POP
// bc_type := b_ext_gun ; 17 :
22306: LD_ADDR_OWVAR 42
22310: PUSH
22311: LD_INT 17
22313: ST_TO_ADDR
22314: GO 22676
22316: LD_INT 17
22318: DOUBLE
22319: EQUAL
22320: IFTRUE 22324
22322: GO 22352
22324: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22325: LD_ADDR_OWVAR 42
22329: PUSH
22330: LD_INT 19
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 19
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_VAR 0 1
22348: ARRAY
22349: ST_TO_ADDR
22350: GO 22676
22352: LD_INT 18
22354: DOUBLE
22355: EQUAL
22356: IFTRUE 22360
22358: GO 22371
22360: POP
// bc_type := b_ext_radar ; 19 :
22361: LD_ADDR_OWVAR 42
22365: PUSH
22366: LD_INT 20
22368: ST_TO_ADDR
22369: GO 22676
22371: LD_INT 19
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22390
22379: POP
// bc_type := b_ext_radio ; 20 :
22380: LD_ADDR_OWVAR 42
22384: PUSH
22385: LD_INT 22
22387: ST_TO_ADDR
22388: GO 22676
22390: LD_INT 20
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22398
22396: GO 22409
22398: POP
// bc_type := b_ext_siberium ; 21 :
22399: LD_ADDR_OWVAR 42
22403: PUSH
22404: LD_INT 21
22406: ST_TO_ADDR
22407: GO 22676
22409: LD_INT 21
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22428
22417: POP
// bc_type := b_ext_computer ; 22 :
22418: LD_ADDR_OWVAR 42
22422: PUSH
22423: LD_INT 24
22425: ST_TO_ADDR
22426: GO 22676
22428: LD_INT 22
22430: DOUBLE
22431: EQUAL
22432: IFTRUE 22436
22434: GO 22447
22436: POP
// bc_type := b_ext_track ; 23 :
22437: LD_ADDR_OWVAR 42
22441: PUSH
22442: LD_INT 16
22444: ST_TO_ADDR
22445: GO 22676
22447: LD_INT 23
22449: DOUBLE
22450: EQUAL
22451: IFTRUE 22455
22453: GO 22466
22455: POP
// bc_type := b_ext_laser ; 24 :
22456: LD_ADDR_OWVAR 42
22460: PUSH
22461: LD_INT 25
22463: ST_TO_ADDR
22464: GO 22676
22466: LD_INT 24
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22485
22474: POP
// bc_type := b_control_tower ; 25 :
22475: LD_ADDR_OWVAR 42
22479: PUSH
22480: LD_INT 36
22482: ST_TO_ADDR
22483: GO 22676
22485: LD_INT 25
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22504
22493: POP
// bc_type := b_breastwork ; 26 :
22494: LD_ADDR_OWVAR 42
22498: PUSH
22499: LD_INT 31
22501: ST_TO_ADDR
22502: GO 22676
22504: LD_INT 26
22506: DOUBLE
22507: EQUAL
22508: IFTRUE 22512
22510: GO 22523
22512: POP
// bc_type := b_bunker ; 27 :
22513: LD_ADDR_OWVAR 42
22517: PUSH
22518: LD_INT 32
22520: ST_TO_ADDR
22521: GO 22676
22523: LD_INT 27
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22542
22531: POP
// bc_type := b_turret ; 28 :
22532: LD_ADDR_OWVAR 42
22536: PUSH
22537: LD_INT 33
22539: ST_TO_ADDR
22540: GO 22676
22542: LD_INT 28
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22561
22550: POP
// bc_type := b_armoury ; 29 :
22551: LD_ADDR_OWVAR 42
22555: PUSH
22556: LD_INT 4
22558: ST_TO_ADDR
22559: GO 22676
22561: LD_INT 29
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22580
22569: POP
// bc_type := b_barracks ; 30 :
22570: LD_ADDR_OWVAR 42
22574: PUSH
22575: LD_INT 5
22577: ST_TO_ADDR
22578: GO 22676
22580: LD_INT 30
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22599
22588: POP
// bc_type := b_solar_power ; 31 :
22589: LD_ADDR_OWVAR 42
22593: PUSH
22594: LD_INT 27
22596: ST_TO_ADDR
22597: GO 22676
22599: LD_INT 31
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22618
22607: POP
// bc_type := b_oil_power ; 32 :
22608: LD_ADDR_OWVAR 42
22612: PUSH
22613: LD_INT 26
22615: ST_TO_ADDR
22616: GO 22676
22618: LD_INT 32
22620: DOUBLE
22621: EQUAL
22622: IFTRUE 22626
22624: GO 22637
22626: POP
// bc_type := b_siberite_power ; 33 :
22627: LD_ADDR_OWVAR 42
22631: PUSH
22632: LD_INT 28
22634: ST_TO_ADDR
22635: GO 22676
22637: LD_INT 33
22639: DOUBLE
22640: EQUAL
22641: IFTRUE 22645
22643: GO 22656
22645: POP
// bc_type := b_oil_mine ; 34 :
22646: LD_ADDR_OWVAR 42
22650: PUSH
22651: LD_INT 29
22653: ST_TO_ADDR
22654: GO 22676
22656: LD_INT 34
22658: DOUBLE
22659: EQUAL
22660: IFTRUE 22664
22662: GO 22675
22664: POP
// bc_type := b_siberite_mine ; end ;
22665: LD_ADDR_OWVAR 42
22669: PUSH
22670: LD_INT 30
22672: ST_TO_ADDR
22673: GO 22676
22675: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22676: LD_ADDR_VAR 0 8
22680: PUSH
22681: LD_VAR 0 5
22685: PPUSH
22686: LD_VAR 0 6
22690: PPUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: CALL_OW 47
22700: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22701: LD_OWVAR 42
22705: PUSH
22706: LD_INT 32
22708: PUSH
22709: LD_INT 33
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: IN
22716: IFFALSE 22732
// PlaceWeaponTurret ( b , weapon ) ;
22718: LD_VAR 0 8
22722: PPUSH
22723: LD_VAR 0 4
22727: PPUSH
22728: CALL_OW 431
// end ;
22732: LD_VAR 0 7
22736: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22737: LD_INT 0
22739: PPUSH
22740: PPUSH
22741: PPUSH
22742: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22743: LD_ADDR_VAR 0 4
22747: PUSH
22748: LD_INT 22
22750: PUSH
22751: LD_OWVAR 2
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 30
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 30
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PPUSH
22792: CALL_OW 69
22796: ST_TO_ADDR
// if not tmp then
22797: LD_VAR 0 4
22801: NOT
22802: IFFALSE 22806
// exit ;
22804: GO 22865
// for i in tmp do
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_VAR 0 4
22815: PUSH
22816: FOR_IN
22817: IFFALSE 22863
// for j = 1 to 3 do
22819: LD_ADDR_VAR 0 3
22823: PUSH
22824: DOUBLE
22825: LD_INT 1
22827: DEC
22828: ST_TO_ADDR
22829: LD_INT 3
22831: PUSH
22832: FOR_TO
22833: IFFALSE 22859
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22835: LD_VAR 0 2
22839: PPUSH
22840: CALL_OW 274
22844: PPUSH
22845: LD_VAR 0 3
22849: PPUSH
22850: LD_INT 99999
22852: PPUSH
22853: CALL_OW 277
22857: GO 22832
22859: POP
22860: POP
22861: GO 22816
22863: POP
22864: POP
// end ;
22865: LD_VAR 0 1
22869: RET
// export function hHackSetLevel10 ; var i , j ; begin
22870: LD_INT 0
22872: PPUSH
22873: PPUSH
22874: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22875: LD_ADDR_VAR 0 2
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22948
// if IsSelected ( i ) then
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 306
22907: IFFALSE 22946
// begin for j := 1 to 4 do
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: DOUBLE
22915: LD_INT 1
22917: DEC
22918: ST_TO_ADDR
22919: LD_INT 4
22921: PUSH
22922: FOR_TO
22923: IFFALSE 22944
// SetSkill ( i , j , 10 ) ;
22925: LD_VAR 0 2
22929: PPUSH
22930: LD_VAR 0 3
22934: PPUSH
22935: LD_INT 10
22937: PPUSH
22938: CALL_OW 237
22942: GO 22922
22944: POP
22945: POP
// end ;
22946: GO 22895
22948: POP
22949: POP
// end ;
22950: LD_VAR 0 1
22954: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22955: LD_INT 0
22957: PPUSH
22958: PPUSH
22959: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22960: LD_ADDR_VAR 0 2
22964: PUSH
22965: LD_INT 22
22967: PUSH
22968: LD_OWVAR 2
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PPUSH
22991: CALL_OW 69
22995: PUSH
22996: FOR_IN
22997: IFFALSE 23038
// begin for j := 1 to 4 do
22999: LD_ADDR_VAR 0 3
23003: PUSH
23004: DOUBLE
23005: LD_INT 1
23007: DEC
23008: ST_TO_ADDR
23009: LD_INT 4
23011: PUSH
23012: FOR_TO
23013: IFFALSE 23034
// SetSkill ( i , j , 10 ) ;
23015: LD_VAR 0 2
23019: PPUSH
23020: LD_VAR 0 3
23024: PPUSH
23025: LD_INT 10
23027: PPUSH
23028: CALL_OW 237
23032: GO 23012
23034: POP
23035: POP
// end ;
23036: GO 22996
23038: POP
23039: POP
// end ;
23040: LD_VAR 0 1
23044: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23045: LD_INT 0
23047: PPUSH
// uc_side := your_side ;
23048: LD_ADDR_OWVAR 20
23052: PUSH
23053: LD_OWVAR 2
23057: ST_TO_ADDR
// uc_nation := nation ;
23058: LD_ADDR_OWVAR 21
23062: PUSH
23063: LD_VAR 0 1
23067: ST_TO_ADDR
// InitHc ;
23068: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23072: LD_INT 0
23074: PPUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: LD_VAR 0 3
23084: PPUSH
23085: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23089: LD_VAR 0 4
23093: PPUSH
23094: LD_VAR 0 5
23098: PPUSH
23099: CALL_OW 428
23103: PUSH
23104: LD_INT 0
23106: EQUAL
23107: IFFALSE 23131
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23109: CALL_OW 44
23113: PPUSH
23114: LD_VAR 0 4
23118: PPUSH
23119: LD_VAR 0 5
23123: PPUSH
23124: LD_INT 1
23126: PPUSH
23127: CALL_OW 48
// end ;
23131: LD_VAR 0 6
23135: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
// uc_side := your_side ;
23140: LD_ADDR_OWVAR 20
23144: PUSH
23145: LD_OWVAR 2
23149: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23150: LD_VAR 0 1
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 4
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: IN
23177: IFFALSE 23189
// uc_nation := nation_american else
23179: LD_ADDR_OWVAR 21
23183: PUSH
23184: LD_INT 1
23186: ST_TO_ADDR
23187: GO 23232
// if chassis in [ 11 , 12 , 13 , 14 ] then
23189: LD_VAR 0 1
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 13
23202: PUSH
23203: LD_INT 14
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: IN
23212: IFFALSE 23224
// uc_nation := nation_arabian else
23214: LD_ADDR_OWVAR 21
23218: PUSH
23219: LD_INT 2
23221: ST_TO_ADDR
23222: GO 23232
// uc_nation := nation_russian ;
23224: LD_ADDR_OWVAR 21
23228: PUSH
23229: LD_INT 3
23231: ST_TO_ADDR
// vc_chassis := chassis ;
23232: LD_ADDR_OWVAR 37
23236: PUSH
23237: LD_VAR 0 1
23241: ST_TO_ADDR
// vc_engine := engine ;
23242: LD_ADDR_OWVAR 39
23246: PUSH
23247: LD_VAR 0 2
23251: ST_TO_ADDR
// vc_control := control ;
23252: LD_ADDR_OWVAR 38
23256: PUSH
23257: LD_VAR 0 3
23261: ST_TO_ADDR
// vc_weapon := weapon ;
23262: LD_ADDR_OWVAR 40
23266: PUSH
23267: LD_VAR 0 4
23271: ST_TO_ADDR
// un := CreateVehicle ;
23272: LD_ADDR_VAR 0 8
23276: PUSH
23277: CALL_OW 45
23281: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23282: LD_VAR 0 8
23286: PPUSH
23287: LD_INT 0
23289: PPUSH
23290: LD_INT 5
23292: PPUSH
23293: CALL_OW 12
23297: PPUSH
23298: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23302: LD_VAR 0 8
23306: PPUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: LD_VAR 0 6
23316: PPUSH
23317: LD_INT 1
23319: PPUSH
23320: CALL_OW 48
// end ;
23324: LD_VAR 0 7
23328: RET
// export hInvincible ; every 1 do
23329: GO 23331
23331: DISABLE
// hInvincible := [ ] ;
23332: LD_ADDR_EXP 91
23336: PUSH
23337: EMPTY
23338: ST_TO_ADDR
23339: END
// every 10 do var i ;
23340: GO 23342
23342: DISABLE
23343: LD_INT 0
23345: PPUSH
// begin enable ;
23346: ENABLE
// if not hInvincible then
23347: LD_EXP 91
23351: NOT
23352: IFFALSE 23356
// exit ;
23354: GO 23400
// for i in hInvincible do
23356: LD_ADDR_VAR 0 1
23360: PUSH
23361: LD_EXP 91
23365: PUSH
23366: FOR_IN
23367: IFFALSE 23398
// if GetLives ( i ) < 1000 then
23369: LD_VAR 0 1
23373: PPUSH
23374: CALL_OW 256
23378: PUSH
23379: LD_INT 1000
23381: LESS
23382: IFFALSE 23396
// SetLives ( i , 1000 ) ;
23384: LD_VAR 0 1
23388: PPUSH
23389: LD_INT 1000
23391: PPUSH
23392: CALL_OW 234
23396: GO 23366
23398: POP
23399: POP
// end ;
23400: PPOPN 1
23402: END
// export function hHackInvincible ; var i ; begin
23403: LD_INT 0
23405: PPUSH
23406: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23407: LD_ADDR_VAR 0 2
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 21
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: PPUSH
23440: CALL_OW 69
23444: PUSH
23445: FOR_IN
23446: IFFALSE 23507
// if IsSelected ( i ) then
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL_OW 306
23457: IFFALSE 23505
// begin if i in hInvincible then
23459: LD_VAR 0 2
23463: PUSH
23464: LD_EXP 91
23468: IN
23469: IFFALSE 23489
// hInvincible := hInvincible diff i else
23471: LD_ADDR_EXP 91
23475: PUSH
23476: LD_EXP 91
23480: PUSH
23481: LD_VAR 0 2
23485: DIFF
23486: ST_TO_ADDR
23487: GO 23505
// hInvincible := hInvincible union i ;
23489: LD_ADDR_EXP 91
23493: PUSH
23494: LD_EXP 91
23498: PUSH
23499: LD_VAR 0 2
23503: UNION
23504: ST_TO_ADDR
// end ;
23505: GO 23445
23507: POP
23508: POP
// end ;
23509: LD_VAR 0 1
23513: RET
// export function hHackInvisible ; var i , j ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
23518: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23519: LD_ADDR_VAR 0 2
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 69
23538: PUSH
23539: FOR_IN
23540: IFFALSE 23564
// if IsSelected ( i ) then
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 306
23551: IFFALSE 23562
// ComForceInvisible ( i ) ;
23553: LD_VAR 0 2
23557: PPUSH
23558: CALL_OW 496
23562: GO 23539
23564: POP
23565: POP
// end ;
23566: LD_VAR 0 1
23570: RET
// export function hHackChangeYourSide ; begin
23571: LD_INT 0
23573: PPUSH
// if your_side = 8 then
23574: LD_OWVAR 2
23578: PUSH
23579: LD_INT 8
23581: EQUAL
23582: IFFALSE 23594
// your_side := 0 else
23584: LD_ADDR_OWVAR 2
23588: PUSH
23589: LD_INT 0
23591: ST_TO_ADDR
23592: GO 23608
// your_side := your_side + 1 ;
23594: LD_ADDR_OWVAR 2
23598: PUSH
23599: LD_OWVAR 2
23603: PUSH
23604: LD_INT 1
23606: PLUS
23607: ST_TO_ADDR
// end ;
23608: LD_VAR 0 1
23612: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
23617: PPUSH
// for i in all_units do
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: LD_OWVAR 3
23627: PUSH
23628: FOR_IN
23629: IFFALSE 23707
// if IsSelected ( i ) then
23631: LD_VAR 0 2
23635: PPUSH
23636: CALL_OW 306
23640: IFFALSE 23705
// begin j := GetSide ( i ) ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_VAR 0 2
23651: PPUSH
23652: CALL_OW 255
23656: ST_TO_ADDR
// if j = 8 then
23657: LD_VAR 0 3
23661: PUSH
23662: LD_INT 8
23664: EQUAL
23665: IFFALSE 23677
// j := 0 else
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_INT 0
23674: ST_TO_ADDR
23675: GO 23691
// j := j + 1 ;
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: LD_VAR 0 3
23686: PUSH
23687: LD_INT 1
23689: PLUS
23690: ST_TO_ADDR
// SetSide ( i , j ) ;
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: CALL_OW 235
// end ;
23705: GO 23628
23707: POP
23708: POP
// end ;
23709: LD_VAR 0 1
23713: RET
// export function hHackFog ; begin
23714: LD_INT 0
23716: PPUSH
// FogOff ( true ) ;
23717: LD_INT 1
23719: PPUSH
23720: CALL_OW 344
// end ;
23724: LD_VAR 0 1
23728: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23729: LD_INT 0
23731: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23732: LD_VAR 0 1
23736: PPUSH
23737: LD_VAR 0 2
23741: PPUSH
23742: LD_VAR 0 3
23746: PPUSH
23747: LD_INT 1
23749: PPUSH
23750: LD_INT 1
23752: PPUSH
23753: CALL_OW 483
// CenterOnXY ( x , y ) ;
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL_OW 84
// end ; end_of_file
23771: LD_VAR 0 4
23775: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23776: LD_INT 0
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 264
23791: PUSH
23792: LD_EXP 23
23796: EQUAL
23797: IFFALSE 23869
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23799: LD_INT 68
23801: PPUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 255
23811: PPUSH
23812: CALL_OW 321
23816: PUSH
23817: LD_INT 2
23819: EQUAL
23820: IFFALSE 23832
// eff := 70 else
23822: LD_ADDR_VAR 0 4
23826: PUSH
23827: LD_INT 70
23829: ST_TO_ADDR
23830: GO 23840
// eff := 30 ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_INT 30
23839: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 250
23849: PPUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 251
23859: PPUSH
23860: LD_VAR 0 4
23864: PPUSH
23865: CALL_OW 495
// end ; end ;
23869: LD_VAR 0 2
23873: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23874: LD_INT 0
23876: PPUSH
// end ;
23877: LD_VAR 0 4
23881: RET
// export function SOS_Command ( cmd ) ; begin
23882: LD_INT 0
23884: PPUSH
// end ;
23885: LD_VAR 0 2
23889: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23890: LD_INT 0
23892: PPUSH
// if cmd = 121 then
23893: LD_VAR 0 1
23897: PUSH
23898: LD_INT 121
23900: EQUAL
23901: IFFALSE 23903
// end ;
23903: LD_VAR 0 6
23907: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23908: LD_INT 0
23910: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23911: LD_VAR 0 1
23915: PUSH
23916: LD_INT 250
23918: EQUAL
23919: PUSH
23920: LD_VAR 0 2
23924: PPUSH
23925: CALL_OW 264
23929: PUSH
23930: LD_EXP 26
23934: EQUAL
23935: AND
23936: IFFALSE 23957
// MinerPlaceMine ( unit , x , y ) ;
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 4
23947: PPUSH
23948: LD_VAR 0 5
23952: PPUSH
23953: CALL 26306 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23957: LD_VAR 0 1
23961: PUSH
23962: LD_INT 251
23964: EQUAL
23965: PUSH
23966: LD_VAR 0 2
23970: PPUSH
23971: CALL_OW 264
23975: PUSH
23976: LD_EXP 26
23980: EQUAL
23981: AND
23982: IFFALSE 24003
// MinerDetonateMine ( unit , x , y ) ;
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_VAR 0 4
23993: PPUSH
23994: LD_VAR 0 5
23998: PPUSH
23999: CALL 26583 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24003: LD_VAR 0 1
24007: PUSH
24008: LD_INT 252
24010: EQUAL
24011: PUSH
24012: LD_VAR 0 2
24016: PPUSH
24017: CALL_OW 264
24021: PUSH
24022: LD_EXP 26
24026: EQUAL
24027: AND
24028: IFFALSE 24049
// MinerCreateMinefield ( unit , x , y ) ;
24030: LD_VAR 0 2
24034: PPUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: LD_VAR 0 5
24044: PPUSH
24045: CALL 27000 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24049: LD_VAR 0 1
24053: PUSH
24054: LD_INT 253
24056: EQUAL
24057: PUSH
24058: LD_VAR 0 2
24062: PPUSH
24063: CALL_OW 257
24067: PUSH
24068: LD_INT 5
24070: EQUAL
24071: AND
24072: IFFALSE 24093
// ComBinocular ( unit , x , y ) ;
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_VAR 0 4
24083: PPUSH
24084: LD_VAR 0 5
24088: PPUSH
24089: CALL 27371 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24093: LD_VAR 0 1
24097: PUSH
24098: LD_INT 254
24100: EQUAL
24101: PUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: CALL_OW 264
24111: PUSH
24112: LD_EXP 21
24116: EQUAL
24117: AND
24118: PUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: CALL_OW 263
24128: PUSH
24129: LD_INT 3
24131: EQUAL
24132: AND
24133: IFFALSE 24149
// HackDestroyVehicle ( unit , selectedUnit ) ;
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_VAR 0 3
24144: PPUSH
24145: CALL 25666 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24149: LD_VAR 0 1
24153: PUSH
24154: LD_INT 255
24156: EQUAL
24157: PUSH
24158: LD_VAR 0 2
24162: PPUSH
24163: CALL_OW 264
24167: PUSH
24168: LD_INT 14
24170: PUSH
24171: LD_INT 53
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: IN
24178: AND
24179: PUSH
24180: LD_VAR 0 4
24184: PPUSH
24185: LD_VAR 0 5
24189: PPUSH
24190: CALL_OW 488
24194: AND
24195: IFFALSE 24219
// CutTreeXYR ( unit , x , y , 12 ) ;
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_VAR 0 4
24206: PPUSH
24207: LD_VAR 0 5
24211: PPUSH
24212: LD_INT 12
24214: PPUSH
24215: CALL 24232 0 4
// end ;
24219: LD_VAR 0 6
24223: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24224: LD_INT 0
24226: PPUSH
// end ;
24227: LD_VAR 0 4
24231: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24232: LD_INT 0
24234: PPUSH
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24243: LD_VAR 0 1
24247: NOT
24248: PUSH
24249: LD_VAR 0 2
24253: PPUSH
24254: LD_VAR 0 3
24258: PPUSH
24259: CALL_OW 488
24263: NOT
24264: OR
24265: PUSH
24266: LD_VAR 0 4
24270: NOT
24271: OR
24272: IFFALSE 24276
// exit ;
24274: GO 24616
// list := [ ] ;
24276: LD_ADDR_VAR 0 13
24280: PUSH
24281: EMPTY
24282: ST_TO_ADDR
// if x - r < 0 then
24283: LD_VAR 0 2
24287: PUSH
24288: LD_VAR 0 4
24292: MINUS
24293: PUSH
24294: LD_INT 0
24296: LESS
24297: IFFALSE 24309
// min_x := 0 else
24299: LD_ADDR_VAR 0 7
24303: PUSH
24304: LD_INT 0
24306: ST_TO_ADDR
24307: GO 24325
// min_x := x - r ;
24309: LD_ADDR_VAR 0 7
24313: PUSH
24314: LD_VAR 0 2
24318: PUSH
24319: LD_VAR 0 4
24323: MINUS
24324: ST_TO_ADDR
// if y - r < 0 then
24325: LD_VAR 0 3
24329: PUSH
24330: LD_VAR 0 4
24334: MINUS
24335: PUSH
24336: LD_INT 0
24338: LESS
24339: IFFALSE 24351
// min_y := 0 else
24341: LD_ADDR_VAR 0 8
24345: PUSH
24346: LD_INT 0
24348: ST_TO_ADDR
24349: GO 24367
// min_y := y - r ;
24351: LD_ADDR_VAR 0 8
24355: PUSH
24356: LD_VAR 0 3
24360: PUSH
24361: LD_VAR 0 4
24365: MINUS
24366: ST_TO_ADDR
// max_x := x + r ;
24367: LD_ADDR_VAR 0 9
24371: PUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_VAR 0 4
24381: PLUS
24382: ST_TO_ADDR
// max_y := y + r ;
24383: LD_ADDR_VAR 0 10
24387: PUSH
24388: LD_VAR 0 3
24392: PUSH
24393: LD_VAR 0 4
24397: PLUS
24398: ST_TO_ADDR
// for _x = min_x to max_x do
24399: LD_ADDR_VAR 0 11
24403: PUSH
24404: DOUBLE
24405: LD_VAR 0 7
24409: DEC
24410: ST_TO_ADDR
24411: LD_VAR 0 9
24415: PUSH
24416: FOR_TO
24417: IFFALSE 24534
// for _y = min_y to max_y do
24419: LD_ADDR_VAR 0 12
24423: PUSH
24424: DOUBLE
24425: LD_VAR 0 8
24429: DEC
24430: ST_TO_ADDR
24431: LD_VAR 0 10
24435: PUSH
24436: FOR_TO
24437: IFFALSE 24530
// begin if not ValidHex ( _x , _y ) then
24439: LD_VAR 0 11
24443: PPUSH
24444: LD_VAR 0 12
24448: PPUSH
24449: CALL_OW 488
24453: NOT
24454: IFFALSE 24458
// continue ;
24456: GO 24436
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24458: LD_VAR 0 11
24462: PPUSH
24463: LD_VAR 0 12
24467: PPUSH
24468: CALL_OW 351
24472: PUSH
24473: LD_VAR 0 11
24477: PPUSH
24478: LD_VAR 0 12
24482: PPUSH
24483: CALL_OW 554
24487: AND
24488: IFFALSE 24528
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24490: LD_ADDR_VAR 0 13
24494: PUSH
24495: LD_VAR 0 13
24499: PPUSH
24500: LD_VAR 0 13
24504: PUSH
24505: LD_INT 1
24507: PLUS
24508: PPUSH
24509: LD_VAR 0 11
24513: PUSH
24514: LD_VAR 0 12
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 2
24527: ST_TO_ADDR
// end ;
24528: GO 24436
24530: POP
24531: POP
24532: GO 24416
24534: POP
24535: POP
// if not list then
24536: LD_VAR 0 13
24540: NOT
24541: IFFALSE 24545
// exit ;
24543: GO 24616
// for i in list do
24545: LD_ADDR_VAR 0 6
24549: PUSH
24550: LD_VAR 0 13
24554: PUSH
24555: FOR_IN
24556: IFFALSE 24614
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_STRING M
24565: PUSH
24566: LD_VAR 0 6
24570: PUSH
24571: LD_INT 1
24573: ARRAY
24574: PUSH
24575: LD_VAR 0 6
24579: PUSH
24580: LD_INT 2
24582: ARRAY
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: PUSH
24605: EMPTY
24606: LIST
24607: PPUSH
24608: CALL_OW 447
24612: GO 24555
24614: POP
24615: POP
// end ;
24616: LD_VAR 0 5
24620: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24621: LD_EXP 94
24625: NOT
24626: IFFALSE 24676
24628: GO 24630
24630: DISABLE
// begin initHack := true ;
24631: LD_ADDR_EXP 94
24635: PUSH
24636: LD_INT 1
24638: ST_TO_ADDR
// hackTanks := [ ] ;
24639: LD_ADDR_EXP 95
24643: PUSH
24644: EMPTY
24645: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24646: LD_ADDR_EXP 96
24650: PUSH
24651: EMPTY
24652: ST_TO_ADDR
// hackLimit := 3 ;
24653: LD_ADDR_EXP 97
24657: PUSH
24658: LD_INT 3
24660: ST_TO_ADDR
// hackDist := 12 ;
24661: LD_ADDR_EXP 98
24665: PUSH
24666: LD_INT 12
24668: ST_TO_ADDR
// hackCounter := [ ] ;
24669: LD_ADDR_EXP 99
24673: PUSH
24674: EMPTY
24675: ST_TO_ADDR
// end ;
24676: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24677: LD_EXP 94
24681: PUSH
24682: LD_INT 34
24684: PUSH
24685: LD_EXP 21
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PPUSH
24694: CALL_OW 69
24698: AND
24699: IFFALSE 24954
24701: GO 24703
24703: DISABLE
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
// begin enable ;
24708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24709: LD_ADDR_VAR 0 1
24713: PUSH
24714: LD_INT 34
24716: PUSH
24717: LD_EXP 21
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL_OW 69
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24952
// begin if not i in hackTanks then
24734: LD_VAR 0 1
24738: PUSH
24739: LD_EXP 95
24743: IN
24744: NOT
24745: IFFALSE 24828
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24747: LD_ADDR_EXP 95
24751: PUSH
24752: LD_EXP 95
24756: PPUSH
24757: LD_EXP 95
24761: PUSH
24762: LD_INT 1
24764: PLUS
24765: PPUSH
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 1
24775: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24776: LD_ADDR_EXP 96
24780: PUSH
24781: LD_EXP 96
24785: PPUSH
24786: LD_EXP 96
24790: PUSH
24791: LD_INT 1
24793: PLUS
24794: PPUSH
24795: EMPTY
24796: PPUSH
24797: CALL_OW 1
24801: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24802: LD_ADDR_EXP 99
24806: PUSH
24807: LD_EXP 99
24811: PPUSH
24812: LD_EXP 99
24816: PUSH
24817: LD_INT 1
24819: PLUS
24820: PPUSH
24821: EMPTY
24822: PPUSH
24823: CALL_OW 1
24827: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24828: LD_VAR 0 1
24832: PPUSH
24833: CALL_OW 302
24837: NOT
24838: IFFALSE 24851
// begin HackUnlinkAll ( i ) ;
24840: LD_VAR 0 1
24844: PPUSH
24845: CALL 24957 0 1
// continue ;
24849: GO 24731
// end ; HackCheckCapturedStatus ( i ) ;
24851: LD_VAR 0 1
24855: PPUSH
24856: CALL 25400 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24860: LD_ADDR_VAR 0 2
24864: PUSH
24865: LD_INT 81
24867: PUSH
24868: LD_VAR 0 1
24872: PPUSH
24873: CALL_OW 255
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 33
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 91
24894: PUSH
24895: LD_VAR 0 1
24899: PUSH
24900: LD_EXP 98
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 50
24912: PUSH
24913: EMPTY
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: PPUSH
24922: CALL_OW 69
24926: ST_TO_ADDR
// if not tmp then
24927: LD_VAR 0 2
24931: NOT
24932: IFFALSE 24936
// continue ;
24934: GO 24731
// HackLink ( i , tmp ) ;
24936: LD_VAR 0 1
24940: PPUSH
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL 25093 0 2
// end ;
24950: GO 24731
24952: POP
24953: POP
// end ;
24954: PPOPN 2
24956: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24957: LD_INT 0
24959: PPUSH
24960: PPUSH
24961: PPUSH
// if not hack in hackTanks then
24962: LD_VAR 0 1
24966: PUSH
24967: LD_EXP 95
24971: IN
24972: NOT
24973: IFFALSE 24977
// exit ;
24975: GO 25088
// index := GetElementIndex ( hackTanks , hack ) ;
24977: LD_ADDR_VAR 0 4
24981: PUSH
24982: LD_EXP 95
24986: PPUSH
24987: LD_VAR 0 1
24991: PPUSH
24992: CALL 32522 0 2
24996: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24997: LD_EXP 96
25001: PUSH
25002: LD_VAR 0 4
25006: ARRAY
25007: IFFALSE 25088
// begin for i in hackTanksCaptured [ index ] do
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_EXP 96
25018: PUSH
25019: LD_VAR 0 4
25023: ARRAY
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25052
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25028: LD_VAR 0 3
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: PPUSH
25037: LD_VAR 0 3
25041: PUSH
25042: LD_INT 2
25044: ARRAY
25045: PPUSH
25046: CALL_OW 235
25050: GO 25025
25052: POP
25053: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25054: LD_ADDR_EXP 96
25058: PUSH
25059: LD_EXP 96
25063: PPUSH
25064: LD_VAR 0 4
25068: PPUSH
25069: EMPTY
25070: PPUSH
25071: CALL_OW 1
25075: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25076: LD_VAR 0 1
25080: PPUSH
25081: LD_INT 0
25083: PPUSH
25084: CALL_OW 505
// end ; end ;
25088: LD_VAR 0 2
25092: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25093: LD_INT 0
25095: PPUSH
25096: PPUSH
25097: PPUSH
// if not hack in hackTanks or not vehicles then
25098: LD_VAR 0 1
25102: PUSH
25103: LD_EXP 95
25107: IN
25108: NOT
25109: PUSH
25110: LD_VAR 0 2
25114: NOT
25115: OR
25116: IFFALSE 25120
// exit ;
25118: GO 25395
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: LD_VAR 0 2
25134: PPUSH
25135: LD_INT 1
25137: PPUSH
25138: LD_INT 1
25140: PPUSH
25141: CALL 33172 0 4
25145: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25146: LD_ADDR_VAR 0 5
25150: PUSH
25151: LD_EXP 95
25155: PPUSH
25156: LD_VAR 0 1
25160: PPUSH
25161: CALL 32522 0 2
25165: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25166: LD_EXP 96
25170: PUSH
25171: LD_VAR 0 5
25175: ARRAY
25176: PUSH
25177: LD_EXP 97
25181: LESS
25182: IFFALSE 25371
// begin for i := 1 to vehicles do
25184: LD_ADDR_VAR 0 4
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_VAR 0 2
25198: PUSH
25199: FOR_TO
25200: IFFALSE 25369
// begin if hackTanksCaptured [ index ] = hackLimit then
25202: LD_EXP 96
25206: PUSH
25207: LD_VAR 0 5
25211: ARRAY
25212: PUSH
25213: LD_EXP 97
25217: EQUAL
25218: IFFALSE 25222
// break ;
25220: GO 25369
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25222: LD_ADDR_EXP 99
25226: PUSH
25227: LD_EXP 99
25231: PPUSH
25232: LD_VAR 0 5
25236: PPUSH
25237: LD_EXP 99
25241: PUSH
25242: LD_VAR 0 5
25246: ARRAY
25247: PUSH
25248: LD_INT 1
25250: PLUS
25251: PPUSH
25252: CALL_OW 1
25256: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25257: LD_ADDR_EXP 96
25261: PUSH
25262: LD_EXP 96
25266: PPUSH
25267: LD_VAR 0 5
25271: PUSH
25272: LD_EXP 96
25276: PUSH
25277: LD_VAR 0 5
25281: ARRAY
25282: PUSH
25283: LD_INT 1
25285: PLUS
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: LD_VAR 0 2
25295: PUSH
25296: LD_VAR 0 4
25300: ARRAY
25301: PUSH
25302: LD_VAR 0 2
25306: PUSH
25307: LD_VAR 0 4
25311: ARRAY
25312: PPUSH
25313: CALL_OW 255
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PPUSH
25322: CALL 32737 0 3
25326: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25327: LD_VAR 0 2
25331: PUSH
25332: LD_VAR 0 4
25336: ARRAY
25337: PPUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 255
25347: PPUSH
25348: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25352: LD_VAR 0 2
25356: PUSH
25357: LD_VAR 0 4
25361: ARRAY
25362: PPUSH
25363: CALL_OW 141
// end ;
25367: GO 25199
25369: POP
25370: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25371: LD_VAR 0 1
25375: PPUSH
25376: LD_EXP 96
25380: PUSH
25381: LD_VAR 0 5
25385: ARRAY
25386: PUSH
25387: LD_INT 0
25389: PLUS
25390: PPUSH
25391: CALL_OW 505
// end ;
25395: LD_VAR 0 3
25399: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
25404: PPUSH
25405: PPUSH
// if not hack in hackTanks then
25406: LD_VAR 0 1
25410: PUSH
25411: LD_EXP 95
25415: IN
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 25661
// index := GetElementIndex ( hackTanks , hack ) ;
25421: LD_ADDR_VAR 0 4
25425: PUSH
25426: LD_EXP 95
25430: PPUSH
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL 32522 0 2
25440: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: DOUBLE
25447: LD_EXP 96
25451: PUSH
25452: LD_VAR 0 4
25456: ARRAY
25457: INC
25458: ST_TO_ADDR
25459: LD_INT 1
25461: PUSH
25462: FOR_DOWNTO
25463: IFFALSE 25635
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25465: LD_ADDR_VAR 0 5
25469: PUSH
25470: LD_EXP 96
25474: PUSH
25475: LD_VAR 0 4
25479: ARRAY
25480: PUSH
25481: LD_VAR 0 3
25485: ARRAY
25486: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25487: LD_VAR 0 5
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: CALL_OW 302
25500: NOT
25501: PUSH
25502: LD_VAR 0 5
25506: PUSH
25507: LD_INT 1
25509: ARRAY
25510: PPUSH
25511: CALL_OW 255
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 255
25525: NONEQUAL
25526: OR
25527: IFFALSE 25633
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25529: LD_VAR 0 5
25533: PUSH
25534: LD_INT 1
25536: ARRAY
25537: PPUSH
25538: CALL_OW 305
25542: PUSH
25543: LD_VAR 0 5
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: CALL_OW 255
25556: PUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 255
25566: EQUAL
25567: AND
25568: IFFALSE 25592
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25570: LD_VAR 0 5
25574: PUSH
25575: LD_INT 1
25577: ARRAY
25578: PPUSH
25579: LD_VAR 0 5
25583: PUSH
25584: LD_INT 2
25586: ARRAY
25587: PPUSH
25588: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25592: LD_ADDR_EXP 96
25596: PUSH
25597: LD_EXP 96
25601: PPUSH
25602: LD_VAR 0 4
25606: PPUSH
25607: LD_EXP 96
25611: PUSH
25612: LD_VAR 0 4
25616: ARRAY
25617: PPUSH
25618: LD_VAR 0 3
25622: PPUSH
25623: CALL_OW 3
25627: PPUSH
25628: CALL_OW 1
25632: ST_TO_ADDR
// end ; end ;
25633: GO 25462
25635: POP
25636: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25637: LD_VAR 0 1
25641: PPUSH
25642: LD_EXP 96
25646: PUSH
25647: LD_VAR 0 4
25651: ARRAY
25652: PUSH
25653: LD_INT 0
25655: PLUS
25656: PPUSH
25657: CALL_OW 505
// end ;
25661: LD_VAR 0 2
25665: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
// if not hack in hackTanks then
25672: LD_VAR 0 1
25676: PUSH
25677: LD_EXP 95
25681: IN
25682: NOT
25683: IFFALSE 25687
// exit ;
25685: GO 25772
// index := GetElementIndex ( hackTanks , hack ) ;
25687: LD_ADDR_VAR 0 5
25691: PUSH
25692: LD_EXP 95
25696: PPUSH
25697: LD_VAR 0 1
25701: PPUSH
25702: CALL 32522 0 2
25706: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25707: LD_ADDR_VAR 0 4
25711: PUSH
25712: DOUBLE
25713: LD_INT 1
25715: DEC
25716: ST_TO_ADDR
25717: LD_EXP 96
25721: PUSH
25722: LD_VAR 0 5
25726: ARRAY
25727: PUSH
25728: FOR_TO
25729: IFFALSE 25770
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25731: LD_EXP 96
25735: PUSH
25736: LD_VAR 0 5
25740: ARRAY
25741: PUSH
25742: LD_VAR 0 4
25746: ARRAY
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: PUSH
25752: LD_VAR 0 2
25756: EQUAL
25757: IFFALSE 25768
// KillUnit ( vehicle ) ;
25759: LD_VAR 0 2
25763: PPUSH
25764: CALL_OW 66
25768: GO 25728
25770: POP
25771: POP
// end ;
25772: LD_VAR 0 3
25776: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25777: LD_EXP 100
25781: NOT
25782: IFFALSE 25817
25784: GO 25786
25786: DISABLE
// begin initMiner := true ;
25787: LD_ADDR_EXP 100
25791: PUSH
25792: LD_INT 1
25794: ST_TO_ADDR
// minersList := [ ] ;
25795: LD_ADDR_EXP 101
25799: PUSH
25800: EMPTY
25801: ST_TO_ADDR
// minerMinesList := [ ] ;
25802: LD_ADDR_EXP 102
25806: PUSH
25807: EMPTY
25808: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25809: LD_ADDR_EXP 103
25813: PUSH
25814: LD_INT 5
25816: ST_TO_ADDR
// end ;
25817: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25818: LD_EXP 100
25822: PUSH
25823: LD_INT 34
25825: PUSH
25826: LD_EXP 26
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PPUSH
25835: CALL_OW 69
25839: AND
25840: IFFALSE 26303
25842: GO 25844
25844: DISABLE
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
// begin enable ;
25851: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25852: LD_ADDR_VAR 0 1
25856: PUSH
25857: LD_INT 34
25859: PUSH
25860: LD_EXP 26
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PPUSH
25869: CALL_OW 69
25873: PUSH
25874: FOR_IN
25875: IFFALSE 25947
// begin if not i in minersList then
25877: LD_VAR 0 1
25881: PUSH
25882: LD_EXP 101
25886: IN
25887: NOT
25888: IFFALSE 25945
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25890: LD_ADDR_EXP 101
25894: PUSH
25895: LD_EXP 101
25899: PPUSH
25900: LD_EXP 101
25904: PUSH
25905: LD_INT 1
25907: PLUS
25908: PPUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25919: LD_ADDR_EXP 102
25923: PUSH
25924: LD_EXP 102
25928: PPUSH
25929: LD_EXP 102
25933: PUSH
25934: LD_INT 1
25936: PLUS
25937: PPUSH
25938: EMPTY
25939: PPUSH
25940: CALL_OW 1
25944: ST_TO_ADDR
// end end ;
25945: GO 25874
25947: POP
25948: POP
// for i := minerMinesList downto 1 do
25949: LD_ADDR_VAR 0 1
25953: PUSH
25954: DOUBLE
25955: LD_EXP 102
25959: INC
25960: ST_TO_ADDR
25961: LD_INT 1
25963: PUSH
25964: FOR_DOWNTO
25965: IFFALSE 26301
// begin if IsLive ( minersList [ i ] ) then
25967: LD_EXP 101
25971: PUSH
25972: LD_VAR 0 1
25976: ARRAY
25977: PPUSH
25978: CALL_OW 300
25982: IFFALSE 26010
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25984: LD_EXP 101
25988: PUSH
25989: LD_VAR 0 1
25993: ARRAY
25994: PPUSH
25995: LD_EXP 102
25999: PUSH
26000: LD_VAR 0 1
26004: ARRAY
26005: PPUSH
26006: CALL_OW 505
// if not minerMinesList [ i ] then
26010: LD_EXP 102
26014: PUSH
26015: LD_VAR 0 1
26019: ARRAY
26020: NOT
26021: IFFALSE 26025
// continue ;
26023: GO 25964
// for j := minerMinesList [ i ] downto 1 do
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: DOUBLE
26031: LD_EXP 102
26035: PUSH
26036: LD_VAR 0 1
26040: ARRAY
26041: INC
26042: ST_TO_ADDR
26043: LD_INT 1
26045: PUSH
26046: FOR_DOWNTO
26047: IFFALSE 26297
// begin side := GetSide ( minersList [ i ] ) ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_EXP 101
26058: PUSH
26059: LD_VAR 0 1
26063: ARRAY
26064: PPUSH
26065: CALL_OW 255
26069: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: LD_EXP 102
26079: PUSH
26080: LD_VAR 0 1
26084: ARRAY
26085: PUSH
26086: LD_VAR 0 2
26090: ARRAY
26091: PUSH
26092: LD_INT 1
26094: ARRAY
26095: PPUSH
26096: LD_EXP 102
26100: PUSH
26101: LD_VAR 0 1
26105: ARRAY
26106: PUSH
26107: LD_VAR 0 2
26111: ARRAY
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: PPUSH
26117: CALL_OW 428
26121: ST_TO_ADDR
// if not tmp then
26122: LD_VAR 0 4
26126: NOT
26127: IFFALSE 26131
// continue ;
26129: GO 26046
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26131: LD_VAR 0 4
26135: PUSH
26136: LD_INT 81
26138: PUSH
26139: LD_VAR 0 3
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: IN
26153: PUSH
26154: LD_EXP 102
26158: PUSH
26159: LD_VAR 0 1
26163: ARRAY
26164: PUSH
26165: LD_VAR 0 2
26169: ARRAY
26170: PUSH
26171: LD_INT 1
26173: ARRAY
26174: PPUSH
26175: LD_EXP 102
26179: PUSH
26180: LD_VAR 0 1
26184: ARRAY
26185: PUSH
26186: LD_VAR 0 2
26190: ARRAY
26191: PUSH
26192: LD_INT 2
26194: ARRAY
26195: PPUSH
26196: CALL_OW 458
26200: AND
26201: IFFALSE 26295
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26203: LD_EXP 102
26207: PUSH
26208: LD_VAR 0 1
26212: ARRAY
26213: PUSH
26214: LD_VAR 0 2
26218: ARRAY
26219: PUSH
26220: LD_INT 1
26222: ARRAY
26223: PPUSH
26224: LD_EXP 102
26228: PUSH
26229: LD_VAR 0 1
26233: ARRAY
26234: PUSH
26235: LD_VAR 0 2
26239: ARRAY
26240: PUSH
26241: LD_INT 2
26243: ARRAY
26244: PPUSH
26245: LD_VAR 0 3
26249: PPUSH
26250: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26254: LD_ADDR_EXP 102
26258: PUSH
26259: LD_EXP 102
26263: PPUSH
26264: LD_VAR 0 1
26268: PPUSH
26269: LD_EXP 102
26273: PUSH
26274: LD_VAR 0 1
26278: ARRAY
26279: PPUSH
26280: LD_VAR 0 2
26284: PPUSH
26285: CALL_OW 3
26289: PPUSH
26290: CALL_OW 1
26294: ST_TO_ADDR
// end ; end ;
26295: GO 26046
26297: POP
26298: POP
// end ;
26299: GO 25964
26301: POP
26302: POP
// end ;
26303: PPOPN 4
26305: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
// result := false ;
26310: LD_ADDR_VAR 0 4
26314: PUSH
26315: LD_INT 0
26317: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 264
26327: PUSH
26328: LD_EXP 26
26332: EQUAL
26333: NOT
26334: IFFALSE 26338
// exit ;
26336: GO 26578
// index := GetElementIndex ( minersList , unit ) ;
26338: LD_ADDR_VAR 0 5
26342: PUSH
26343: LD_EXP 101
26347: PPUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL 32522 0 2
26357: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26358: LD_EXP 102
26362: PUSH
26363: LD_VAR 0 5
26367: ARRAY
26368: PUSH
26369: LD_EXP 103
26373: GREATEREQUAL
26374: IFFALSE 26378
// exit ;
26376: GO 26578
// ComMoveXY ( unit , x , y ) ;
26378: LD_VAR 0 1
26382: PPUSH
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_VAR 0 3
26392: PPUSH
26393: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26397: LD_INT 35
26399: PPUSH
26400: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26404: LD_VAR 0 1
26408: PPUSH
26409: LD_VAR 0 2
26413: PPUSH
26414: LD_VAR 0 3
26418: PPUSH
26419: CALL 62919 0 3
26423: NOT
26424: PUSH
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 314
26434: AND
26435: IFFALSE 26439
// exit ;
26437: GO 26578
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26439: LD_VAR 0 2
26443: PPUSH
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL_OW 428
26453: PUSH
26454: LD_VAR 0 1
26458: EQUAL
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 314
26469: NOT
26470: AND
26471: IFFALSE 26397
// PlaySoundXY ( x , y , PlantMine ) ;
26473: LD_VAR 0 2
26477: PPUSH
26478: LD_VAR 0 3
26482: PPUSH
26483: LD_STRING PlantMine
26485: PPUSH
26486: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 255
26509: PPUSH
26510: LD_INT 0
26512: PPUSH
26513: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26517: LD_ADDR_EXP 102
26521: PUSH
26522: LD_EXP 102
26526: PPUSH
26527: LD_VAR 0 5
26531: PUSH
26532: LD_EXP 102
26536: PUSH
26537: LD_VAR 0 5
26541: ARRAY
26542: PUSH
26543: LD_INT 1
26545: PLUS
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PPUSH
26551: LD_VAR 0 2
26555: PUSH
26556: LD_VAR 0 3
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL 32737 0 3
26569: ST_TO_ADDR
// result := true ;
26570: LD_ADDR_VAR 0 4
26574: PUSH
26575: LD_INT 1
26577: ST_TO_ADDR
// end ;
26578: LD_VAR 0 4
26582: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
// if not unit in minersList then
26588: LD_VAR 0 1
26592: PUSH
26593: LD_EXP 101
26597: IN
26598: NOT
26599: IFFALSE 26603
// exit ;
26601: GO 26995
// index := GetElementIndex ( minersList , unit ) ;
26603: LD_ADDR_VAR 0 6
26607: PUSH
26608: LD_EXP 101
26612: PPUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: CALL 32522 0 2
26622: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26623: LD_ADDR_VAR 0 5
26627: PUSH
26628: DOUBLE
26629: LD_EXP 102
26633: PUSH
26634: LD_VAR 0 6
26638: ARRAY
26639: INC
26640: ST_TO_ADDR
26641: LD_INT 1
26643: PUSH
26644: FOR_DOWNTO
26645: IFFALSE 26806
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26647: LD_EXP 102
26651: PUSH
26652: LD_VAR 0 6
26656: ARRAY
26657: PUSH
26658: LD_VAR 0 5
26662: ARRAY
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PUSH
26668: LD_VAR 0 2
26672: EQUAL
26673: PUSH
26674: LD_EXP 102
26678: PUSH
26679: LD_VAR 0 6
26683: ARRAY
26684: PUSH
26685: LD_VAR 0 5
26689: ARRAY
26690: PUSH
26691: LD_INT 2
26693: ARRAY
26694: PUSH
26695: LD_VAR 0 3
26699: EQUAL
26700: AND
26701: IFFALSE 26804
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26703: LD_EXP 102
26707: PUSH
26708: LD_VAR 0 6
26712: ARRAY
26713: PUSH
26714: LD_VAR 0 5
26718: ARRAY
26719: PUSH
26720: LD_INT 1
26722: ARRAY
26723: PPUSH
26724: LD_EXP 102
26728: PUSH
26729: LD_VAR 0 6
26733: ARRAY
26734: PUSH
26735: LD_VAR 0 5
26739: ARRAY
26740: PUSH
26741: LD_INT 2
26743: ARRAY
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 255
26754: PPUSH
26755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26759: LD_ADDR_EXP 102
26763: PUSH
26764: LD_EXP 102
26768: PPUSH
26769: LD_VAR 0 6
26773: PPUSH
26774: LD_EXP 102
26778: PUSH
26779: LD_VAR 0 6
26783: ARRAY
26784: PPUSH
26785: LD_VAR 0 5
26789: PPUSH
26790: CALL_OW 3
26794: PPUSH
26795: CALL_OW 1
26799: ST_TO_ADDR
// exit ;
26800: POP
26801: POP
26802: GO 26995
// end ; end ;
26804: GO 26644
26806: POP
26807: POP
// for i := minerMinesList [ index ] downto 1 do
26808: LD_ADDR_VAR 0 5
26812: PUSH
26813: DOUBLE
26814: LD_EXP 102
26818: PUSH
26819: LD_VAR 0 6
26823: ARRAY
26824: INC
26825: ST_TO_ADDR
26826: LD_INT 1
26828: PUSH
26829: FOR_DOWNTO
26830: IFFALSE 26993
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26832: LD_EXP 102
26836: PUSH
26837: LD_VAR 0 6
26841: ARRAY
26842: PUSH
26843: LD_VAR 0 5
26847: ARRAY
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: PPUSH
26853: LD_EXP 102
26857: PUSH
26858: LD_VAR 0 6
26862: ARRAY
26863: PUSH
26864: LD_VAR 0 5
26868: ARRAY
26869: PUSH
26870: LD_INT 2
26872: ARRAY
26873: PPUSH
26874: LD_VAR 0 2
26878: PPUSH
26879: LD_VAR 0 3
26883: PPUSH
26884: CALL_OW 298
26888: PUSH
26889: LD_INT 6
26891: LESS
26892: IFFALSE 26991
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26894: LD_EXP 102
26898: PUSH
26899: LD_VAR 0 6
26903: ARRAY
26904: PUSH
26905: LD_VAR 0 5
26909: ARRAY
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PPUSH
26915: LD_EXP 102
26919: PUSH
26920: LD_VAR 0 6
26924: ARRAY
26925: PUSH
26926: LD_VAR 0 5
26930: ARRAY
26931: PUSH
26932: LD_INT 2
26934: ARRAY
26935: PPUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 255
26945: PPUSH
26946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26950: LD_ADDR_EXP 102
26954: PUSH
26955: LD_EXP 102
26959: PPUSH
26960: LD_VAR 0 6
26964: PPUSH
26965: LD_EXP 102
26969: PUSH
26970: LD_VAR 0 6
26974: ARRAY
26975: PPUSH
26976: LD_VAR 0 5
26980: PPUSH
26981: CALL_OW 3
26985: PPUSH
26986: CALL_OW 1
26990: ST_TO_ADDR
// end ; end ;
26991: GO 26829
26993: POP
26994: POP
// end ;
26995: LD_VAR 0 4
26999: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27000: LD_INT 0
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 264
27020: PUSH
27021: LD_EXP 26
27025: EQUAL
27026: NOT
27027: PUSH
27028: LD_VAR 0 1
27032: PUSH
27033: LD_EXP 101
27037: IN
27038: NOT
27039: OR
27040: IFFALSE 27044
// exit ;
27042: GO 27366
// index := GetElementIndex ( minersList , unit ) ;
27044: LD_ADDR_VAR 0 6
27048: PUSH
27049: LD_EXP 101
27053: PPUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL 32522 0 2
27063: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27064: LD_ADDR_VAR 0 8
27068: PUSH
27069: LD_EXP 103
27073: PUSH
27074: LD_EXP 102
27078: PUSH
27079: LD_VAR 0 6
27083: ARRAY
27084: MINUS
27085: ST_TO_ADDR
// if not minesFreeAmount then
27086: LD_VAR 0 8
27090: NOT
27091: IFFALSE 27095
// exit ;
27093: GO 27366
// tmp := [ ] ;
27095: LD_ADDR_VAR 0 7
27099: PUSH
27100: EMPTY
27101: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27102: LD_ADDR_VAR 0 5
27106: PUSH
27107: DOUBLE
27108: LD_INT 1
27110: DEC
27111: ST_TO_ADDR
27112: LD_VAR 0 8
27116: PUSH
27117: FOR_TO
27118: IFFALSE 27313
// begin _d := rand ( 0 , 5 ) ;
27120: LD_ADDR_VAR 0 11
27124: PUSH
27125: LD_INT 0
27127: PPUSH
27128: LD_INT 5
27130: PPUSH
27131: CALL_OW 12
27135: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27136: LD_ADDR_VAR 0 12
27140: PUSH
27141: LD_INT 2
27143: PPUSH
27144: LD_INT 6
27146: PPUSH
27147: CALL_OW 12
27151: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27152: LD_ADDR_VAR 0 9
27156: PUSH
27157: LD_VAR 0 2
27161: PPUSH
27162: LD_VAR 0 11
27166: PPUSH
27167: LD_VAR 0 12
27171: PPUSH
27172: CALL_OW 272
27176: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27177: LD_ADDR_VAR 0 10
27181: PUSH
27182: LD_VAR 0 3
27186: PPUSH
27187: LD_VAR 0 11
27191: PPUSH
27192: LD_VAR 0 12
27196: PPUSH
27197: CALL_OW 273
27201: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27202: LD_VAR 0 9
27206: PPUSH
27207: LD_VAR 0 10
27211: PPUSH
27212: CALL_OW 488
27216: PUSH
27217: LD_VAR 0 9
27221: PUSH
27222: LD_VAR 0 10
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_VAR 0 7
27235: IN
27236: NOT
27237: AND
27238: PUSH
27239: LD_VAR 0 9
27243: PPUSH
27244: LD_VAR 0 10
27248: PPUSH
27249: CALL_OW 458
27253: NOT
27254: AND
27255: IFFALSE 27297
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27257: LD_ADDR_VAR 0 7
27261: PUSH
27262: LD_VAR 0 7
27266: PPUSH
27267: LD_VAR 0 7
27271: PUSH
27272: LD_INT 1
27274: PLUS
27275: PPUSH
27276: LD_VAR 0 9
27280: PUSH
27281: LD_VAR 0 10
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PPUSH
27290: CALL_OW 1
27294: ST_TO_ADDR
27295: GO 27311
// i := i - 1 ;
27297: LD_ADDR_VAR 0 5
27301: PUSH
27302: LD_VAR 0 5
27306: PUSH
27307: LD_INT 1
27309: MINUS
27310: ST_TO_ADDR
// end ;
27311: GO 27117
27313: POP
27314: POP
// for i in tmp do
27315: LD_ADDR_VAR 0 5
27319: PUSH
27320: LD_VAR 0 7
27324: PUSH
27325: FOR_IN
27326: IFFALSE 27364
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27328: LD_VAR 0 1
27332: PPUSH
27333: LD_VAR 0 5
27337: PUSH
27338: LD_INT 1
27340: ARRAY
27341: PPUSH
27342: LD_VAR 0 5
27346: PUSH
27347: LD_INT 2
27349: ARRAY
27350: PPUSH
27351: CALL 26306 0 3
27355: NOT
27356: IFFALSE 27362
// exit ;
27358: POP
27359: POP
27360: GO 27366
27362: GO 27325
27364: POP
27365: POP
// end ;
27366: LD_VAR 0 4
27370: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
// if not GetClass ( unit ) = class_sniper then
27380: LD_VAR 0 1
27384: PPUSH
27385: CALL_OW 257
27389: PUSH
27390: LD_INT 5
27392: EQUAL
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 27786
// dist := 8 ;
27398: LD_ADDR_VAR 0 5
27402: PUSH
27403: LD_INT 8
27405: ST_TO_ADDR
// viewRange := 12 ;
27406: LD_ADDR_VAR 0 7
27410: PUSH
27411: LD_INT 12
27413: ST_TO_ADDR
// side := GetSide ( unit ) ;
27414: LD_ADDR_VAR 0 6
27418: PUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 255
27428: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27429: LD_INT 61
27431: PPUSH
27432: LD_VAR 0 6
27436: PPUSH
27437: CALL_OW 321
27441: PUSH
27442: LD_INT 2
27444: EQUAL
27445: IFFALSE 27455
// viewRange := 16 ;
27447: LD_ADDR_VAR 0 7
27451: PUSH
27452: LD_INT 16
27454: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: CALL_OW 297
27474: PUSH
27475: LD_VAR 0 5
27479: GREATER
27480: IFFALSE 27559
// begin ComMoveXY ( unit , x , y ) ;
27482: LD_VAR 0 1
27486: PPUSH
27487: LD_VAR 0 2
27491: PPUSH
27492: LD_VAR 0 3
27496: PPUSH
27497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27501: LD_INT 35
27503: PPUSH
27504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 3
27522: PPUSH
27523: CALL 62919 0 3
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27786
// until GetDistUnitXY ( unit , x , y ) < dist ;
27532: LD_VAR 0 1
27536: PPUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: LD_VAR 0 3
27546: PPUSH
27547: CALL_OW 297
27551: PUSH
27552: LD_VAR 0 5
27556: LESS
27557: IFFALSE 27501
// end ; ComTurnXY ( unit , x , y ) ;
27559: LD_VAR 0 1
27563: PPUSH
27564: LD_VAR 0 2
27568: PPUSH
27569: LD_VAR 0 3
27573: PPUSH
27574: CALL_OW 118
// wait ( 5 ) ;
27578: LD_INT 5
27580: PPUSH
27581: CALL_OW 67
// _d := GetDir ( unit ) ;
27585: LD_ADDR_VAR 0 10
27589: PUSH
27590: LD_VAR 0 1
27594: PPUSH
27595: CALL_OW 254
27599: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27600: LD_ADDR_VAR 0 8
27604: PUSH
27605: LD_VAR 0 1
27609: PPUSH
27610: CALL_OW 250
27614: PPUSH
27615: LD_VAR 0 10
27619: PPUSH
27620: LD_VAR 0 5
27624: PPUSH
27625: CALL_OW 272
27629: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27630: LD_ADDR_VAR 0 9
27634: PUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 251
27644: PPUSH
27645: LD_VAR 0 10
27649: PPUSH
27650: LD_VAR 0 5
27654: PPUSH
27655: CALL_OW 273
27659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27660: LD_VAR 0 8
27664: PPUSH
27665: LD_VAR 0 9
27669: PPUSH
27670: CALL_OW 488
27674: NOT
27675: IFFALSE 27679
// exit ;
27677: GO 27786
// ComAnimCustom ( unit , 1 ) ;
27679: LD_VAR 0 1
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27691: LD_VAR 0 8
27695: PPUSH
27696: LD_VAR 0 9
27700: PPUSH
27701: LD_VAR 0 6
27705: PPUSH
27706: LD_VAR 0 7
27710: PPUSH
27711: CALL_OW 330
// repeat wait ( 1 ) ;
27715: LD_INT 1
27717: PPUSH
27718: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: CALL_OW 316
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 314
27741: OR
27742: PUSH
27743: LD_VAR 0 1
27747: PPUSH
27748: CALL_OW 302
27752: NOT
27753: OR
27754: PUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: CALL_OW 301
27764: OR
27765: IFFALSE 27715
// RemoveSeeing ( _x , _y , side ) ;
27767: LD_VAR 0 8
27771: PPUSH
27772: LD_VAR 0 9
27776: PPUSH
27777: LD_VAR 0 6
27781: PPUSH
27782: CALL_OW 331
// end ; end_of_file
27786: LD_VAR 0 4
27790: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27791: LD_INT 0
27793: PPUSH
27794: PPUSH
// if exist_mode then
27795: LD_VAR 0 2
27799: IFFALSE 27824
// unit := CreateCharacter ( prefix & ident ) else
27801: LD_ADDR_VAR 0 5
27805: PUSH
27806: LD_VAR 0 3
27810: PUSH
27811: LD_VAR 0 1
27815: STR
27816: PPUSH
27817: CALL_OW 34
27821: ST_TO_ADDR
27822: GO 27839
// unit := NewCharacter ( ident ) ;
27824: LD_ADDR_VAR 0 5
27828: PUSH
27829: LD_VAR 0 1
27833: PPUSH
27834: CALL_OW 25
27838: ST_TO_ADDR
// result := unit ;
27839: LD_ADDR_VAR 0 4
27843: PUSH
27844: LD_VAR 0 5
27848: ST_TO_ADDR
// end ;
27849: LD_VAR 0 4
27853: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27854: LD_INT 0
27856: PPUSH
27857: PPUSH
// if not side or not nation then
27858: LD_VAR 0 1
27862: NOT
27863: PUSH
27864: LD_VAR 0 2
27868: NOT
27869: OR
27870: IFFALSE 27874
// exit ;
27872: GO 28638
// case nation of nation_american :
27874: LD_VAR 0 2
27878: PUSH
27879: LD_INT 1
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27887
27885: GO 28101
27887: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27888: LD_ADDR_VAR 0 4
27892: PUSH
27893: LD_INT 35
27895: PUSH
27896: LD_INT 45
27898: PUSH
27899: LD_INT 46
27901: PUSH
27902: LD_INT 47
27904: PUSH
27905: LD_INT 82
27907: PUSH
27908: LD_INT 83
27910: PUSH
27911: LD_INT 84
27913: PUSH
27914: LD_INT 85
27916: PUSH
27917: LD_INT 86
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 6
27928: PUSH
27929: LD_INT 15
27931: PUSH
27932: LD_INT 16
27934: PUSH
27935: LD_INT 7
27937: PUSH
27938: LD_INT 12
27940: PUSH
27941: LD_INT 13
27943: PUSH
27944: LD_INT 10
27946: PUSH
27947: LD_INT 14
27949: PUSH
27950: LD_INT 20
27952: PUSH
27953: LD_INT 21
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_INT 25
27961: PUSH
27962: LD_INT 32
27964: PUSH
27965: LD_INT 27
27967: PUSH
27968: LD_INT 36
27970: PUSH
27971: LD_INT 69
27973: PUSH
27974: LD_INT 39
27976: PUSH
27977: LD_INT 34
27979: PUSH
27980: LD_INT 40
27982: PUSH
27983: LD_INT 48
27985: PUSH
27986: LD_INT 49
27988: PUSH
27989: LD_INT 50
27991: PUSH
27992: LD_INT 51
27994: PUSH
27995: LD_INT 52
27997: PUSH
27998: LD_INT 53
28000: PUSH
28001: LD_INT 54
28003: PUSH
28004: LD_INT 55
28006: PUSH
28007: LD_INT 56
28009: PUSH
28010: LD_INT 57
28012: PUSH
28013: LD_INT 58
28015: PUSH
28016: LD_INT 59
28018: PUSH
28019: LD_INT 60
28021: PUSH
28022: LD_INT 61
28024: PUSH
28025: LD_INT 62
28027: PUSH
28028: LD_INT 80
28030: PUSH
28031: LD_INT 82
28033: PUSH
28034: LD_INT 83
28036: PUSH
28037: LD_INT 84
28039: PUSH
28040: LD_INT 85
28042: PUSH
28043: LD_INT 86
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
28099: GO 28562
28101: LD_INT 2
28103: DOUBLE
28104: EQUAL
28105: IFTRUE 28109
28107: GO 28331
28109: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 35
28117: PUSH
28118: LD_INT 45
28120: PUSH
28121: LD_INT 46
28123: PUSH
28124: LD_INT 47
28126: PUSH
28127: LD_INT 82
28129: PUSH
28130: LD_INT 83
28132: PUSH
28133: LD_INT 84
28135: PUSH
28136: LD_INT 85
28138: PUSH
28139: LD_INT 87
28141: PUSH
28142: LD_INT 70
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 11
28150: PUSH
28151: LD_INT 3
28153: PUSH
28154: LD_INT 4
28156: PUSH
28157: LD_INT 5
28159: PUSH
28160: LD_INT 6
28162: PUSH
28163: LD_INT 15
28165: PUSH
28166: LD_INT 18
28168: PUSH
28169: LD_INT 7
28171: PUSH
28172: LD_INT 17
28174: PUSH
28175: LD_INT 8
28177: PUSH
28178: LD_INT 20
28180: PUSH
28181: LD_INT 21
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_INT 72
28189: PUSH
28190: LD_INT 26
28192: PUSH
28193: LD_INT 69
28195: PUSH
28196: LD_INT 39
28198: PUSH
28199: LD_INT 40
28201: PUSH
28202: LD_INT 41
28204: PUSH
28205: LD_INT 42
28207: PUSH
28208: LD_INT 43
28210: PUSH
28211: LD_INT 48
28213: PUSH
28214: LD_INT 49
28216: PUSH
28217: LD_INT 50
28219: PUSH
28220: LD_INT 51
28222: PUSH
28223: LD_INT 52
28225: PUSH
28226: LD_INT 53
28228: PUSH
28229: LD_INT 54
28231: PUSH
28232: LD_INT 55
28234: PUSH
28235: LD_INT 56
28237: PUSH
28238: LD_INT 60
28240: PUSH
28241: LD_INT 61
28243: PUSH
28244: LD_INT 62
28246: PUSH
28247: LD_INT 66
28249: PUSH
28250: LD_INT 67
28252: PUSH
28253: LD_INT 68
28255: PUSH
28256: LD_INT 81
28258: PUSH
28259: LD_INT 82
28261: PUSH
28262: LD_INT 83
28264: PUSH
28265: LD_INT 84
28267: PUSH
28268: LD_INT 85
28270: PUSH
28271: LD_INT 87
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: ST_TO_ADDR
28329: GO 28562
28331: LD_INT 3
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28561
28339: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28340: LD_ADDR_VAR 0 4
28344: PUSH
28345: LD_INT 46
28347: PUSH
28348: LD_INT 47
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 82
28359: PUSH
28360: LD_INT 83
28362: PUSH
28363: LD_INT 84
28365: PUSH
28366: LD_INT 85
28368: PUSH
28369: LD_INT 86
28371: PUSH
28372: LD_INT 11
28374: PUSH
28375: LD_INT 9
28377: PUSH
28378: LD_INT 20
28380: PUSH
28381: LD_INT 19
28383: PUSH
28384: LD_INT 21
28386: PUSH
28387: LD_INT 24
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_INT 25
28395: PUSH
28396: LD_INT 28
28398: PUSH
28399: LD_INT 29
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 31
28407: PUSH
28408: LD_INT 37
28410: PUSH
28411: LD_INT 38
28413: PUSH
28414: LD_INT 32
28416: PUSH
28417: LD_INT 27
28419: PUSH
28420: LD_INT 33
28422: PUSH
28423: LD_INT 69
28425: PUSH
28426: LD_INT 39
28428: PUSH
28429: LD_INT 34
28431: PUSH
28432: LD_INT 40
28434: PUSH
28435: LD_INT 71
28437: PUSH
28438: LD_INT 23
28440: PUSH
28441: LD_INT 44
28443: PUSH
28444: LD_INT 48
28446: PUSH
28447: LD_INT 49
28449: PUSH
28450: LD_INT 50
28452: PUSH
28453: LD_INT 51
28455: PUSH
28456: LD_INT 52
28458: PUSH
28459: LD_INT 53
28461: PUSH
28462: LD_INT 54
28464: PUSH
28465: LD_INT 55
28467: PUSH
28468: LD_INT 56
28470: PUSH
28471: LD_INT 57
28473: PUSH
28474: LD_INT 58
28476: PUSH
28477: LD_INT 59
28479: PUSH
28480: LD_INT 63
28482: PUSH
28483: LD_INT 64
28485: PUSH
28486: LD_INT 65
28488: PUSH
28489: LD_INT 82
28491: PUSH
28492: LD_INT 83
28494: PUSH
28495: LD_INT 84
28497: PUSH
28498: LD_INT 85
28500: PUSH
28501: LD_INT 86
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
28559: GO 28562
28561: POP
// if state > - 1 and state < 3 then
28562: LD_VAR 0 3
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: GREATER
28571: PUSH
28572: LD_VAR 0 3
28576: PUSH
28577: LD_INT 3
28579: LESS
28580: AND
28581: IFFALSE 28638
// for i in result do
28583: LD_ADDR_VAR 0 5
28587: PUSH
28588: LD_VAR 0 4
28592: PUSH
28593: FOR_IN
28594: IFFALSE 28636
// if GetTech ( i , side ) <> state then
28596: LD_VAR 0 5
28600: PPUSH
28601: LD_VAR 0 1
28605: PPUSH
28606: CALL_OW 321
28610: PUSH
28611: LD_VAR 0 3
28615: NONEQUAL
28616: IFFALSE 28634
// result := result diff i ;
28618: LD_ADDR_VAR 0 4
28622: PUSH
28623: LD_VAR 0 4
28627: PUSH
28628: LD_VAR 0 5
28632: DIFF
28633: ST_TO_ADDR
28634: GO 28593
28636: POP
28637: POP
// end ;
28638: LD_VAR 0 4
28642: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
28647: PPUSH
// result := true ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_VAR 0 2
28665: PPUSH
28666: CALL_OW 480
28670: ST_TO_ADDR
// if not tmp then
28671: LD_VAR 0 5
28675: NOT
28676: IFFALSE 28680
// exit ;
28678: GO 28729
// for i in tmp do
28680: LD_ADDR_VAR 0 4
28684: PUSH
28685: LD_VAR 0 5
28689: PUSH
28690: FOR_IN
28691: IFFALSE 28727
// if GetTech ( i , side ) <> state_researched then
28693: LD_VAR 0 4
28697: PPUSH
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 321
28707: PUSH
28708: LD_INT 2
28710: NONEQUAL
28711: IFFALSE 28725
// begin result := false ;
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_INT 0
28720: ST_TO_ADDR
// exit ;
28721: POP
28722: POP
28723: GO 28729
// end ;
28725: GO 28690
28727: POP
28728: POP
// end ;
28729: LD_VAR 0 3
28733: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28734: LD_INT 0
28736: PPUSH
28737: PPUSH
28738: PPUSH
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28749: LD_VAR 0 1
28753: NOT
28754: PUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 257
28764: PUSH
28765: LD_INT 9
28767: NONEQUAL
28768: OR
28769: IFFALSE 28773
// exit ;
28771: GO 29346
// side := GetSide ( unit ) ;
28773: LD_ADDR_VAR 0 9
28777: PUSH
28778: LD_VAR 0 1
28782: PPUSH
28783: CALL_OW 255
28787: ST_TO_ADDR
// tech_space := tech_spacanom ;
28788: LD_ADDR_VAR 0 12
28792: PUSH
28793: LD_INT 29
28795: ST_TO_ADDR
// tech_time := tech_taurad ;
28796: LD_ADDR_VAR 0 13
28800: PUSH
28801: LD_INT 28
28803: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28804: LD_ADDR_VAR 0 11
28808: PUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 310
28818: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28819: LD_VAR 0 11
28823: PPUSH
28824: CALL_OW 247
28828: PUSH
28829: LD_INT 2
28831: EQUAL
28832: IFFALSE 28836
// exit ;
28834: GO 29346
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28836: LD_ADDR_VAR 0 8
28840: PUSH
28841: LD_INT 81
28843: PUSH
28844: LD_VAR 0 9
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: LD_INT 21
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 69
28878: ST_TO_ADDR
// if not tmp then
28879: LD_VAR 0 8
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 29346
// if in_unit then
28888: LD_VAR 0 11
28892: IFFALSE 28916
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28894: LD_ADDR_VAR 0 10
28898: PUSH
28899: LD_VAR 0 8
28903: PPUSH
28904: LD_VAR 0 11
28908: PPUSH
28909: CALL_OW 74
28913: ST_TO_ADDR
28914: GO 28936
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28916: LD_ADDR_VAR 0 10
28920: PUSH
28921: LD_VAR 0 8
28925: PPUSH
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL_OW 74
28935: ST_TO_ADDR
// if not enemy then
28936: LD_VAR 0 10
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 29346
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28945: LD_VAR 0 11
28949: PUSH
28950: LD_VAR 0 11
28954: PPUSH
28955: LD_VAR 0 10
28959: PPUSH
28960: CALL_OW 296
28964: PUSH
28965: LD_INT 13
28967: GREATER
28968: AND
28969: PUSH
28970: LD_VAR 0 1
28974: PPUSH
28975: LD_VAR 0 10
28979: PPUSH
28980: CALL_OW 296
28984: PUSH
28985: LD_INT 12
28987: GREATER
28988: OR
28989: IFFALSE 28993
// exit ;
28991: GO 29346
// missile := [ 1 ] ;
28993: LD_ADDR_VAR 0 14
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29004: LD_VAR 0 9
29008: PPUSH
29009: LD_VAR 0 12
29013: PPUSH
29014: CALL_OW 325
29018: IFFALSE 29047
// missile := Insert ( missile , missile + 1 , 2 ) ;
29020: LD_ADDR_VAR 0 14
29024: PUSH
29025: LD_VAR 0 14
29029: PPUSH
29030: LD_VAR 0 14
29034: PUSH
29035: LD_INT 1
29037: PLUS
29038: PPUSH
29039: LD_INT 2
29041: PPUSH
29042: CALL_OW 2
29046: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29047: LD_VAR 0 9
29051: PPUSH
29052: LD_VAR 0 13
29056: PPUSH
29057: CALL_OW 325
29061: PUSH
29062: LD_VAR 0 10
29066: PPUSH
29067: CALL_OW 255
29071: PPUSH
29072: LD_VAR 0 13
29076: PPUSH
29077: CALL_OW 325
29081: NOT
29082: AND
29083: IFFALSE 29112
// missile := Insert ( missile , missile + 1 , 3 ) ;
29085: LD_ADDR_VAR 0 14
29089: PUSH
29090: LD_VAR 0 14
29094: PPUSH
29095: LD_VAR 0 14
29099: PUSH
29100: LD_INT 1
29102: PLUS
29103: PPUSH
29104: LD_INT 3
29106: PPUSH
29107: CALL_OW 2
29111: ST_TO_ADDR
// if missile < 2 then
29112: LD_VAR 0 14
29116: PUSH
29117: LD_INT 2
29119: LESS
29120: IFFALSE 29124
// exit ;
29122: GO 29346
// x := GetX ( enemy ) ;
29124: LD_ADDR_VAR 0 4
29128: PUSH
29129: LD_VAR 0 10
29133: PPUSH
29134: CALL_OW 250
29138: ST_TO_ADDR
// y := GetY ( enemy ) ;
29139: LD_ADDR_VAR 0 5
29143: PUSH
29144: LD_VAR 0 10
29148: PPUSH
29149: CALL_OW 251
29153: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29154: LD_ADDR_VAR 0 6
29158: PUSH
29159: LD_VAR 0 4
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PPUSH
29168: LD_INT 1
29170: PPUSH
29171: CALL_OW 12
29175: PLUS
29176: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29177: LD_ADDR_VAR 0 7
29181: PUSH
29182: LD_VAR 0 5
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PPUSH
29191: LD_INT 1
29193: PPUSH
29194: CALL_OW 12
29198: PLUS
29199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29200: LD_VAR 0 6
29204: PPUSH
29205: LD_VAR 0 7
29209: PPUSH
29210: CALL_OW 488
29214: NOT
29215: IFFALSE 29237
// begin _x := x ;
29217: LD_ADDR_VAR 0 6
29221: PUSH
29222: LD_VAR 0 4
29226: ST_TO_ADDR
// _y := y ;
29227: LD_ADDR_VAR 0 7
29231: PUSH
29232: LD_VAR 0 5
29236: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29237: LD_ADDR_VAR 0 3
29241: PUSH
29242: LD_INT 1
29244: PPUSH
29245: LD_VAR 0 14
29249: PPUSH
29250: CALL_OW 12
29254: ST_TO_ADDR
// case i of 1 :
29255: LD_VAR 0 3
29259: PUSH
29260: LD_INT 1
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29285
29268: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29269: LD_VAR 0 1
29273: PPUSH
29274: LD_VAR 0 10
29278: PPUSH
29279: CALL_OW 115
29283: GO 29346
29285: LD_INT 2
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29293
29291: GO 29315
29293: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29294: LD_VAR 0 1
29298: PPUSH
29299: LD_VAR 0 6
29303: PPUSH
29304: LD_VAR 0 7
29308: PPUSH
29309: CALL_OW 153
29313: GO 29346
29315: LD_INT 3
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29345
29323: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_VAR 0 6
29333: PPUSH
29334: LD_VAR 0 7
29338: PPUSH
29339: CALL_OW 154
29343: GO 29346
29345: POP
// end ;
29346: LD_VAR 0 2
29350: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29351: LD_INT 0
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
// if not unit or not building then
29359: LD_VAR 0 1
29363: NOT
29364: PUSH
29365: LD_VAR 0 2
29369: NOT
29370: OR
29371: IFFALSE 29375
// exit ;
29373: GO 29533
// x := GetX ( building ) ;
29375: LD_ADDR_VAR 0 5
29379: PUSH
29380: LD_VAR 0 2
29384: PPUSH
29385: CALL_OW 250
29389: ST_TO_ADDR
// y := GetY ( building ) ;
29390: LD_ADDR_VAR 0 6
29394: PUSH
29395: LD_VAR 0 2
29399: PPUSH
29400: CALL_OW 251
29404: ST_TO_ADDR
// for i = 0 to 5 do
29405: LD_ADDR_VAR 0 4
29409: PUSH
29410: DOUBLE
29411: LD_INT 0
29413: DEC
29414: ST_TO_ADDR
29415: LD_INT 5
29417: PUSH
29418: FOR_TO
29419: IFFALSE 29531
// begin _x := ShiftX ( x , i , 3 ) ;
29421: LD_ADDR_VAR 0 7
29425: PUSH
29426: LD_VAR 0 5
29430: PPUSH
29431: LD_VAR 0 4
29435: PPUSH
29436: LD_INT 3
29438: PPUSH
29439: CALL_OW 272
29443: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29444: LD_ADDR_VAR 0 8
29448: PUSH
29449: LD_VAR 0 6
29453: PPUSH
29454: LD_VAR 0 4
29458: PPUSH
29459: LD_INT 3
29461: PPUSH
29462: CALL_OW 273
29466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29467: LD_VAR 0 7
29471: PPUSH
29472: LD_VAR 0 8
29476: PPUSH
29477: CALL_OW 488
29481: NOT
29482: IFFALSE 29486
// continue ;
29484: GO 29418
// if HexInfo ( _x , _y ) = 0 then
29486: LD_VAR 0 7
29490: PPUSH
29491: LD_VAR 0 8
29495: PPUSH
29496: CALL_OW 428
29500: PUSH
29501: LD_INT 0
29503: EQUAL
29504: IFFALSE 29529
// begin ComMoveXY ( unit , _x , _y ) ;
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_VAR 0 7
29515: PPUSH
29516: LD_VAR 0 8
29520: PPUSH
29521: CALL_OW 111
// exit ;
29525: POP
29526: POP
29527: GO 29533
// end ; end ;
29529: GO 29418
29531: POP
29532: POP
// end ;
29533: LD_VAR 0 3
29537: RET
// export function ScanBase ( side , base_area ) ; begin
29538: LD_INT 0
29540: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_VAR 0 2
29550: PPUSH
29551: LD_INT 81
29553: PUSH
29554: LD_VAR 0 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PPUSH
29563: CALL_OW 70
29567: ST_TO_ADDR
// end ;
29568: LD_VAR 0 3
29572: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
29577: PPUSH
29578: PPUSH
// result := false ;
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_INT 0
29586: ST_TO_ADDR
// side := GetSide ( unit ) ;
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_VAR 0 1
29596: PPUSH
29597: CALL_OW 255
29601: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29602: LD_ADDR_VAR 0 4
29606: PUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL_OW 248
29616: ST_TO_ADDR
// case nat of 1 :
29617: LD_VAR 0 4
29621: PUSH
29622: LD_INT 1
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29641
29630: POP
// tech := tech_lassight ; 2 :
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_INT 12
29638: ST_TO_ADDR
29639: GO 29680
29641: LD_INT 2
29643: DOUBLE
29644: EQUAL
29645: IFTRUE 29649
29647: GO 29660
29649: POP
// tech := tech_mortar ; 3 :
29650: LD_ADDR_VAR 0 5
29654: PUSH
29655: LD_INT 41
29657: ST_TO_ADDR
29658: GO 29680
29660: LD_INT 3
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29679
29668: POP
// tech := tech_bazooka ; end ;
29669: LD_ADDR_VAR 0 5
29673: PUSH
29674: LD_INT 44
29676: ST_TO_ADDR
29677: GO 29680
29679: POP
// if Researched ( side , tech ) then
29680: LD_VAR 0 3
29684: PPUSH
29685: LD_VAR 0 5
29689: PPUSH
29690: CALL_OW 325
29694: IFFALSE 29721
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29696: LD_ADDR_VAR 0 2
29700: PUSH
29701: LD_INT 5
29703: PUSH
29704: LD_INT 8
29706: PUSH
29707: LD_INT 9
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: PUSH
29715: LD_VAR 0 4
29719: ARRAY
29720: ST_TO_ADDR
// end ;
29721: LD_VAR 0 2
29725: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29726: LD_INT 0
29728: PPUSH
29729: PPUSH
29730: PPUSH
// if not mines then
29731: LD_VAR 0 2
29735: NOT
29736: IFFALSE 29740
// exit ;
29738: GO 29884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29740: LD_ADDR_VAR 0 5
29744: PUSH
29745: LD_INT 81
29747: PUSH
29748: LD_VAR 0 1
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 21
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PPUSH
29778: CALL_OW 69
29782: ST_TO_ADDR
// for i in mines do
29783: LD_ADDR_VAR 0 4
29787: PUSH
29788: LD_VAR 0 2
29792: PUSH
29793: FOR_IN
29794: IFFALSE 29882
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29796: LD_VAR 0 4
29800: PUSH
29801: LD_INT 1
29803: ARRAY
29804: PPUSH
29805: LD_VAR 0 4
29809: PUSH
29810: LD_INT 2
29812: ARRAY
29813: PPUSH
29814: CALL_OW 458
29818: NOT
29819: IFFALSE 29823
// continue ;
29821: GO 29793
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29823: LD_VAR 0 4
29827: PUSH
29828: LD_INT 1
29830: ARRAY
29831: PPUSH
29832: LD_VAR 0 4
29836: PUSH
29837: LD_INT 2
29839: ARRAY
29840: PPUSH
29841: CALL_OW 428
29845: PUSH
29846: LD_VAR 0 5
29850: IN
29851: IFFALSE 29880
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29853: LD_VAR 0 4
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: PPUSH
29862: LD_VAR 0 4
29866: PUSH
29867: LD_INT 2
29869: ARRAY
29870: PPUSH
29871: LD_VAR 0 1
29875: PPUSH
29876: CALL_OW 456
// end ;
29880: GO 29793
29882: POP
29883: POP
// end ;
29884: LD_VAR 0 3
29888: RET
// export function Count ( array ) ; var i ; begin
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
// result := 0 ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 0
29900: ST_TO_ADDR
// for i in array do
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_VAR 0 1
29910: PUSH
29911: FOR_IN
29912: IFFALSE 29936
// if i then
29914: LD_VAR 0 3
29918: IFFALSE 29934
// result := result + 1 ;
29920: LD_ADDR_VAR 0 2
29924: PUSH
29925: LD_VAR 0 2
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: ST_TO_ADDR
29934: GO 29911
29936: POP
29937: POP
// end ;
29938: LD_VAR 0 2
29942: RET
// export function IsEmpty ( building ) ; begin
29943: LD_INT 0
29945: PPUSH
// if not building then
29946: LD_VAR 0 1
29950: NOT
29951: IFFALSE 29955
// exit ;
29953: GO 29998
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29955: LD_ADDR_VAR 0 2
29959: PUSH
29960: LD_VAR 0 1
29964: PUSH
29965: LD_INT 22
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 255
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 58
29984: PUSH
29985: EMPTY
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PPUSH
29992: CALL_OW 69
29996: IN
29997: ST_TO_ADDR
// end ;
29998: LD_VAR 0 2
30002: RET
// export function IsNotFull ( building ) ; begin
30003: LD_INT 0
30005: PPUSH
// if not building then
30006: LD_VAR 0 1
30010: NOT
30011: IFFALSE 30015
// exit ;
30013: GO 30034
// result := UnitsInside ( building ) < 6 ;
30015: LD_ADDR_VAR 0 2
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 313
30029: PUSH
30030: LD_INT 6
30032: LESS
30033: ST_TO_ADDR
// end ;
30034: LD_VAR 0 2
30038: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
// tmp := [ ] ;
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: EMPTY
30051: ST_TO_ADDR
// list := [ ] ;
30052: LD_ADDR_VAR 0 5
30056: PUSH
30057: EMPTY
30058: ST_TO_ADDR
// for i = 16 to 25 do
30059: LD_ADDR_VAR 0 4
30063: PUSH
30064: DOUBLE
30065: LD_INT 16
30067: DEC
30068: ST_TO_ADDR
30069: LD_INT 25
30071: PUSH
30072: FOR_TO
30073: IFFALSE 30146
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30075: LD_ADDR_VAR 0 3
30079: PUSH
30080: LD_VAR 0 3
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 255
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 91
30104: PUSH
30105: LD_VAR 0 1
30109: PUSH
30110: LD_INT 6
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 30
30120: PUSH
30121: LD_VAR 0 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: PPUSH
30138: CALL_OW 69
30142: ADD
30143: ST_TO_ADDR
30144: GO 30072
30146: POP
30147: POP
// for i = 1 to tmp do
30148: LD_ADDR_VAR 0 4
30152: PUSH
30153: DOUBLE
30154: LD_INT 1
30156: DEC
30157: ST_TO_ADDR
30158: LD_VAR 0 3
30162: PUSH
30163: FOR_TO
30164: IFFALSE 30252
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30166: LD_ADDR_VAR 0 5
30170: PUSH
30171: LD_VAR 0 5
30175: PUSH
30176: LD_VAR 0 3
30180: PUSH
30181: LD_VAR 0 4
30185: ARRAY
30186: PPUSH
30187: CALL_OW 266
30191: PUSH
30192: LD_VAR 0 3
30196: PUSH
30197: LD_VAR 0 4
30201: ARRAY
30202: PPUSH
30203: CALL_OW 250
30207: PUSH
30208: LD_VAR 0 3
30212: PUSH
30213: LD_VAR 0 4
30217: ARRAY
30218: PPUSH
30219: CALL_OW 251
30223: PUSH
30224: LD_VAR 0 3
30228: PUSH
30229: LD_VAR 0 4
30233: ARRAY
30234: PPUSH
30235: CALL_OW 254
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: ADD
30249: ST_TO_ADDR
30250: GO 30163
30252: POP
30253: POP
// result := list ;
30254: LD_ADDR_VAR 0 2
30258: PUSH
30259: LD_VAR 0 5
30263: ST_TO_ADDR
// end ;
30264: LD_VAR 0 2
30268: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
// if not factory then
30278: LD_VAR 0 1
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30880
// if control = control_apeman then
30287: LD_VAR 0 4
30291: PUSH
30292: LD_INT 5
30294: EQUAL
30295: IFFALSE 30404
// begin tmp := UnitsInside ( factory ) ;
30297: LD_ADDR_VAR 0 8
30301: PUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL_OW 313
30311: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30312: LD_VAR 0 8
30316: PPUSH
30317: LD_INT 25
30319: PUSH
30320: LD_INT 12
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PPUSH
30327: CALL_OW 72
30331: NOT
30332: IFFALSE 30342
// control := control_manual ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_INT 1
30341: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30342: LD_ADDR_VAR 0 8
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL 30039 0 1
30356: ST_TO_ADDR
// if tmp then
30357: LD_VAR 0 8
30361: IFFALSE 30404
// begin for i in tmp do
30363: LD_ADDR_VAR 0 7
30367: PUSH
30368: LD_VAR 0 8
30372: PUSH
30373: FOR_IN
30374: IFFALSE 30402
// if i [ 1 ] = b_ext_radio then
30376: LD_VAR 0 7
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PUSH
30385: LD_INT 22
30387: EQUAL
30388: IFFALSE 30400
// begin control := control_remote ;
30390: LD_ADDR_VAR 0 4
30394: PUSH
30395: LD_INT 2
30397: ST_TO_ADDR
// break ;
30398: GO 30402
// end ;
30400: GO 30373
30402: POP
30403: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30404: LD_VAR 0 1
30408: PPUSH
30409: LD_VAR 0 2
30413: PPUSH
30414: LD_VAR 0 3
30418: PPUSH
30419: LD_VAR 0 4
30423: PPUSH
30424: LD_VAR 0 5
30428: PPUSH
30429: CALL_OW 448
30433: IFFALSE 30468
// begin result := [ chassis , engine , control , weapon ] ;
30435: LD_ADDR_VAR 0 6
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: LD_VAR 0 3
30449: PUSH
30450: LD_VAR 0 4
30454: PUSH
30455: LD_VAR 0 5
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
// exit ;
30466: GO 30880
// end ; _chassis := AvailableChassisList ( factory ) ;
30468: LD_ADDR_VAR 0 9
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 475
30482: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30483: LD_ADDR_VAR 0 11
30487: PUSH
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL_OW 476
30497: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30498: LD_ADDR_VAR 0 12
30502: PUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL_OW 477
30512: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30513: LD_ADDR_VAR 0 10
30517: PUSH
30518: LD_VAR 0 1
30522: PPUSH
30523: CALL_OW 478
30527: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30528: LD_VAR 0 9
30532: NOT
30533: PUSH
30534: LD_VAR 0 11
30538: NOT
30539: OR
30540: PUSH
30541: LD_VAR 0 12
30545: NOT
30546: OR
30547: PUSH
30548: LD_VAR 0 10
30552: NOT
30553: OR
30554: IFFALSE 30589
// begin result := [ chassis , engine , control , weapon ] ;
30556: LD_ADDR_VAR 0 6
30560: PUSH
30561: LD_VAR 0 2
30565: PUSH
30566: LD_VAR 0 3
30570: PUSH
30571: LD_VAR 0 4
30575: PUSH
30576: LD_VAR 0 5
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// exit ;
30587: GO 30880
// end ; if not chassis in _chassis then
30589: LD_VAR 0 2
30593: PUSH
30594: LD_VAR 0 9
30598: IN
30599: NOT
30600: IFFALSE 30626
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30602: LD_ADDR_VAR 0 2
30606: PUSH
30607: LD_VAR 0 9
30611: PUSH
30612: LD_INT 1
30614: PPUSH
30615: LD_VAR 0 9
30619: PPUSH
30620: CALL_OW 12
30624: ARRAY
30625: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30626: LD_VAR 0 2
30630: PPUSH
30631: LD_VAR 0 3
30635: PPUSH
30636: CALL 30885 0 2
30640: NOT
30641: IFFALSE 30700
// repeat engine := _engine [ 1 ] ;
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_VAR 0 11
30652: PUSH
30653: LD_INT 1
30655: ARRAY
30656: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30657: LD_ADDR_VAR 0 11
30661: PUSH
30662: LD_VAR 0 11
30666: PPUSH
30667: LD_INT 1
30669: PPUSH
30670: CALL_OW 3
30674: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30675: LD_VAR 0 2
30679: PPUSH
30680: LD_VAR 0 3
30684: PPUSH
30685: CALL 30885 0 2
30689: PUSH
30690: LD_VAR 0 11
30694: PUSH
30695: EMPTY
30696: EQUAL
30697: OR
30698: IFFALSE 30643
// if not control in _control then
30700: LD_VAR 0 4
30704: PUSH
30705: LD_VAR 0 12
30709: IN
30710: NOT
30711: IFFALSE 30737
// control := _control [ rand ( 1 , _control ) ] ;
30713: LD_ADDR_VAR 0 4
30717: PUSH
30718: LD_VAR 0 12
30722: PUSH
30723: LD_INT 1
30725: PPUSH
30726: LD_VAR 0 12
30730: PPUSH
30731: CALL_OW 12
30735: ARRAY
30736: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30737: LD_VAR 0 2
30741: PPUSH
30742: LD_VAR 0 5
30746: PPUSH
30747: CALL 31105 0 2
30751: NOT
30752: IFFALSE 30811
// repeat weapon := _weapon [ 1 ] ;
30754: LD_ADDR_VAR 0 5
30758: PUSH
30759: LD_VAR 0 10
30763: PUSH
30764: LD_INT 1
30766: ARRAY
30767: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30768: LD_ADDR_VAR 0 10
30772: PUSH
30773: LD_VAR 0 10
30777: PPUSH
30778: LD_INT 1
30780: PPUSH
30781: CALL_OW 3
30785: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30786: LD_VAR 0 2
30790: PPUSH
30791: LD_VAR 0 5
30795: PPUSH
30796: CALL 31105 0 2
30800: PUSH
30801: LD_VAR 0 10
30805: PUSH
30806: EMPTY
30807: EQUAL
30808: OR
30809: IFFALSE 30754
// result := [ ] ;
30811: LD_ADDR_VAR 0 6
30815: PUSH
30816: EMPTY
30817: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30818: LD_VAR 0 1
30822: PPUSH
30823: LD_VAR 0 2
30827: PPUSH
30828: LD_VAR 0 3
30832: PPUSH
30833: LD_VAR 0 4
30837: PPUSH
30838: LD_VAR 0 5
30842: PPUSH
30843: CALL_OW 448
30847: IFFALSE 30880
// result := [ chassis , engine , control , weapon ] ;
30849: LD_ADDR_VAR 0 6
30853: PUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_VAR 0 3
30863: PUSH
30864: LD_VAR 0 4
30868: PUSH
30869: LD_VAR 0 5
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: ST_TO_ADDR
// end ;
30880: LD_VAR 0 6
30884: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30885: LD_INT 0
30887: PPUSH
// if not chassis or not engine then
30888: LD_VAR 0 1
30892: NOT
30893: PUSH
30894: LD_VAR 0 2
30898: NOT
30899: OR
30900: IFFALSE 30904
// exit ;
30902: GO 31100
// case engine of engine_solar :
30904: LD_VAR 0 2
30908: PUSH
30909: LD_INT 2
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30955
30917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_INT 11
30925: PUSH
30926: LD_INT 12
30928: PUSH
30929: LD_INT 13
30931: PUSH
30932: LD_INT 14
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: ST_TO_ADDR
30953: GO 31084
30955: LD_INT 1
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 31025
30963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_INT 11
30971: PUSH
30972: LD_INT 12
30974: PUSH
30975: LD_INT 13
30977: PUSH
30978: LD_INT 14
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: LD_INT 4
30992: PUSH
30993: LD_INT 5
30995: PUSH
30996: LD_INT 21
30998: PUSH
30999: LD_INT 23
31001: PUSH
31002: LD_INT 22
31004: PUSH
31005: LD_INT 24
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: ST_TO_ADDR
31023: GO 31084
31025: LD_INT 3
31027: DOUBLE
31028: EQUAL
31029: IFTRUE 31033
31031: GO 31083
31033: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31034: LD_ADDR_VAR 0 3
31038: PUSH
31039: LD_INT 13
31041: PUSH
31042: LD_INT 14
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: LD_INT 4
31053: PUSH
31054: LD_INT 5
31056: PUSH
31057: LD_INT 21
31059: PUSH
31060: LD_INT 22
31062: PUSH
31063: LD_INT 23
31065: PUSH
31066: LD_INT 24
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
31081: GO 31084
31083: POP
// result := ( chassis in result ) ;
31084: LD_ADDR_VAR 0 3
31088: PUSH
31089: LD_VAR 0 1
31093: PUSH
31094: LD_VAR 0 3
31098: IN
31099: ST_TO_ADDR
// end ;
31100: LD_VAR 0 3
31104: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31105: LD_INT 0
31107: PPUSH
// if not chassis or not weapon then
31108: LD_VAR 0 1
31112: NOT
31113: PUSH
31114: LD_VAR 0 2
31118: NOT
31119: OR
31120: IFFALSE 31124
// exit ;
31122: GO 32150
// case weapon of us_machine_gun :
31124: LD_VAR 0 2
31128: PUSH
31129: LD_INT 2
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31167
31137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: ST_TO_ADDR
31165: GO 32134
31167: LD_INT 3
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31205
31175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31176: LD_ADDR_VAR 0 3
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: LD_INT 4
31192: PUSH
31193: LD_INT 5
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
31203: GO 32134
31205: LD_INT 11
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31243
31213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: LD_INT 4
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
31241: GO 32134
31243: LD_INT 4
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31277
31251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31252: LD_ADDR_VAR 0 3
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 4
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
31275: GO 32134
31277: LD_INT 5
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31311
31285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: LD_INT 4
31299: PUSH
31300: LD_INT 5
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: ST_TO_ADDR
31309: GO 32134
31311: LD_INT 9
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31345
31319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31320: LD_ADDR_VAR 0 3
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
31343: GO 32134
31345: LD_INT 7
31347: DOUBLE
31348: EQUAL
31349: IFTRUE 31353
31351: GO 31379
31353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31354: LD_ADDR_VAR 0 3
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: LD_INT 4
31367: PUSH
31368: LD_INT 5
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
31377: GO 32134
31379: LD_INT 12
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31413
31387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31388: LD_ADDR_VAR 0 3
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 4
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
31411: GO 32134
31413: LD_INT 13
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31447
31421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: LD_INT 5
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
31445: GO 32134
31447: LD_INT 14
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31473
31455: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31456: LD_ADDR_VAR 0 3
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: LD_INT 5
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: ST_TO_ADDR
31471: GO 32134
31473: LD_INT 6
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31499
31481: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_INT 4
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: ST_TO_ADDR
31497: GO 32134
31499: LD_INT 10
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31525
31507: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_INT 4
31515: PUSH
31516: LD_INT 5
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: ST_TO_ADDR
31523: GO 32134
31525: LD_INT 22
31527: DOUBLE
31528: EQUAL
31529: IFTRUE 31533
31531: GO 31559
31533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31534: LD_ADDR_VAR 0 3
31538: PUSH
31539: LD_INT 11
31541: PUSH
31542: LD_INT 12
31544: PUSH
31545: LD_INT 13
31547: PUSH
31548: LD_INT 14
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
31557: GO 32134
31559: LD_INT 23
31561: DOUBLE
31562: EQUAL
31563: IFTRUE 31567
31565: GO 31593
31567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31568: LD_ADDR_VAR 0 3
31572: PUSH
31573: LD_INT 11
31575: PUSH
31576: LD_INT 12
31578: PUSH
31579: LD_INT 13
31581: PUSH
31582: LD_INT 14
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
31591: GO 32134
31593: LD_INT 24
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31627
31601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31602: LD_ADDR_VAR 0 3
31606: PUSH
31607: LD_INT 11
31609: PUSH
31610: LD_INT 12
31612: PUSH
31613: LD_INT 13
31615: PUSH
31616: LD_INT 14
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
31625: GO 32134
31627: LD_INT 30
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31661
31635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31636: LD_ADDR_VAR 0 3
31640: PUSH
31641: LD_INT 11
31643: PUSH
31644: LD_INT 12
31646: PUSH
31647: LD_INT 13
31649: PUSH
31650: LD_INT 14
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
31659: GO 32134
31661: LD_INT 25
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31687
31669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31670: LD_ADDR_VAR 0 3
31674: PUSH
31675: LD_INT 13
31677: PUSH
31678: LD_INT 14
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: ST_TO_ADDR
31685: GO 32134
31687: LD_INT 27
31689: DOUBLE
31690: EQUAL
31691: IFTRUE 31695
31693: GO 31713
31695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: LD_INT 13
31703: PUSH
31704: LD_INT 14
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: ST_TO_ADDR
31711: GO 32134
31713: LD_INT 28
31715: DOUBLE
31716: EQUAL
31717: IFTRUE 31721
31719: GO 31739
31721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31722: LD_ADDR_VAR 0 3
31726: PUSH
31727: LD_INT 13
31729: PUSH
31730: LD_INT 14
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: ST_TO_ADDR
31737: GO 32134
31739: LD_INT 29
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31765
31747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31748: LD_ADDR_VAR 0 3
31752: PUSH
31753: LD_INT 13
31755: PUSH
31756: LD_INT 14
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: ST_TO_ADDR
31763: GO 32134
31765: LD_INT 31
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31791
31773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31774: LD_ADDR_VAR 0 3
31778: PUSH
31779: LD_INT 13
31781: PUSH
31782: LD_INT 14
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: ST_TO_ADDR
31789: GO 32134
31791: LD_INT 26
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31817
31799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 13
31807: PUSH
31808: LD_INT 14
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: ST_TO_ADDR
31815: GO 32134
31817: LD_INT 42
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31851
31825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_INT 21
31833: PUSH
31834: LD_INT 22
31836: PUSH
31837: LD_INT 23
31839: PUSH
31840: LD_INT 24
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
31849: GO 32134
31851: LD_INT 43
31853: DOUBLE
31854: EQUAL
31855: IFTRUE 31859
31857: GO 31885
31859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_INT 21
31867: PUSH
31868: LD_INT 22
31870: PUSH
31871: LD_INT 23
31873: PUSH
31874: LD_INT 24
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
31883: GO 32134
31885: LD_INT 44
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31919
31893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31894: LD_ADDR_VAR 0 3
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 22
31904: PUSH
31905: LD_INT 23
31907: PUSH
31908: LD_INT 24
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 32134
31919: LD_INT 45
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 31953
31927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31928: LD_ADDR_VAR 0 3
31932: PUSH
31933: LD_INT 21
31935: PUSH
31936: LD_INT 22
31938: PUSH
31939: LD_INT 23
31941: PUSH
31942: LD_INT 24
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: ST_TO_ADDR
31951: GO 32134
31953: LD_INT 49
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31987
31961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 21
31969: PUSH
31970: LD_INT 22
31972: PUSH
31973: LD_INT 23
31975: PUSH
31976: LD_INT 24
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
31985: GO 32134
31987: LD_INT 51
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32021
31995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_INT 21
32003: PUSH
32004: LD_INT 22
32006: PUSH
32007: LD_INT 23
32009: PUSH
32010: LD_INT 24
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: ST_TO_ADDR
32019: GO 32134
32021: LD_INT 52
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32055
32029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32030: LD_ADDR_VAR 0 3
32034: PUSH
32035: LD_INT 21
32037: PUSH
32038: LD_INT 22
32040: PUSH
32041: LD_INT 23
32043: PUSH
32044: LD_INT 24
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
32053: GO 32134
32055: LD_INT 53
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32081
32063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_INT 23
32071: PUSH
32072: LD_INT 24
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: ST_TO_ADDR
32079: GO 32134
32081: LD_INT 46
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32107
32089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32090: LD_ADDR_VAR 0 3
32094: PUSH
32095: LD_INT 23
32097: PUSH
32098: LD_INT 24
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: ST_TO_ADDR
32105: GO 32134
32107: LD_INT 47
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32133
32115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_INT 23
32123: PUSH
32124: LD_INT 24
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: ST_TO_ADDR
32131: GO 32134
32133: POP
// result := ( chassis in result ) ;
32134: LD_ADDR_VAR 0 3
32138: PUSH
32139: LD_VAR 0 1
32143: PUSH
32144: LD_VAR 0 3
32148: IN
32149: ST_TO_ADDR
// end ;
32150: LD_VAR 0 3
32154: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32155: LD_INT 0
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
// result := array ;
32164: LD_ADDR_VAR 0 5
32168: PUSH
32169: LD_VAR 0 1
32173: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32174: LD_VAR 0 1
32178: NOT
32179: PUSH
32180: LD_VAR 0 2
32184: NOT
32185: OR
32186: PUSH
32187: LD_VAR 0 3
32191: NOT
32192: OR
32193: PUSH
32194: LD_VAR 0 2
32198: PUSH
32199: LD_VAR 0 1
32203: GREATER
32204: OR
32205: PUSH
32206: LD_VAR 0 3
32210: PUSH
32211: LD_VAR 0 1
32215: GREATER
32216: OR
32217: IFFALSE 32221
// exit ;
32219: GO 32517
// if direction then
32221: LD_VAR 0 4
32225: IFFALSE 32289
// begin d := 1 ;
32227: LD_ADDR_VAR 0 9
32231: PUSH
32232: LD_INT 1
32234: ST_TO_ADDR
// if i_from > i_to then
32235: LD_VAR 0 2
32239: PUSH
32240: LD_VAR 0 3
32244: GREATER
32245: IFFALSE 32271
// length := ( array - i_from ) + i_to else
32247: LD_ADDR_VAR 0 11
32251: PUSH
32252: LD_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: MINUS
32262: PUSH
32263: LD_VAR 0 3
32267: PLUS
32268: ST_TO_ADDR
32269: GO 32287
// length := i_to - i_from ;
32271: LD_ADDR_VAR 0 11
32275: PUSH
32276: LD_VAR 0 3
32280: PUSH
32281: LD_VAR 0 2
32285: MINUS
32286: ST_TO_ADDR
// end else
32287: GO 32350
// begin d := - 1 ;
32289: LD_ADDR_VAR 0 9
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: ST_TO_ADDR
// if i_from > i_to then
32298: LD_VAR 0 2
32302: PUSH
32303: LD_VAR 0 3
32307: GREATER
32308: IFFALSE 32328
// length := i_from - i_to else
32310: LD_ADDR_VAR 0 11
32314: PUSH
32315: LD_VAR 0 2
32319: PUSH
32320: LD_VAR 0 3
32324: MINUS
32325: ST_TO_ADDR
32326: GO 32350
// length := ( array - i_to ) + i_from ;
32328: LD_ADDR_VAR 0 11
32332: PUSH
32333: LD_VAR 0 1
32337: PUSH
32338: LD_VAR 0 3
32342: MINUS
32343: PUSH
32344: LD_VAR 0 2
32348: PLUS
32349: ST_TO_ADDR
// end ; if not length then
32350: LD_VAR 0 11
32354: NOT
32355: IFFALSE 32359
// exit ;
32357: GO 32517
// tmp := array ;
32359: LD_ADDR_VAR 0 10
32363: PUSH
32364: LD_VAR 0 1
32368: ST_TO_ADDR
// for i = 1 to length do
32369: LD_ADDR_VAR 0 6
32373: PUSH
32374: DOUBLE
32375: LD_INT 1
32377: DEC
32378: ST_TO_ADDR
32379: LD_VAR 0 11
32383: PUSH
32384: FOR_TO
32385: IFFALSE 32505
// begin for j = 1 to array do
32387: LD_ADDR_VAR 0 7
32391: PUSH
32392: DOUBLE
32393: LD_INT 1
32395: DEC
32396: ST_TO_ADDR
32397: LD_VAR 0 1
32401: PUSH
32402: FOR_TO
32403: IFFALSE 32491
// begin k := j + d ;
32405: LD_ADDR_VAR 0 8
32409: PUSH
32410: LD_VAR 0 7
32414: PUSH
32415: LD_VAR 0 9
32419: PLUS
32420: ST_TO_ADDR
// if k > array then
32421: LD_VAR 0 8
32425: PUSH
32426: LD_VAR 0 1
32430: GREATER
32431: IFFALSE 32441
// k := 1 ;
32433: LD_ADDR_VAR 0 8
32437: PUSH
32438: LD_INT 1
32440: ST_TO_ADDR
// if not k then
32441: LD_VAR 0 8
32445: NOT
32446: IFFALSE 32458
// k := array ;
32448: LD_ADDR_VAR 0 8
32452: PUSH
32453: LD_VAR 0 1
32457: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32458: LD_ADDR_VAR 0 10
32462: PUSH
32463: LD_VAR 0 10
32467: PPUSH
32468: LD_VAR 0 8
32472: PPUSH
32473: LD_VAR 0 1
32477: PUSH
32478: LD_VAR 0 7
32482: ARRAY
32483: PPUSH
32484: CALL_OW 1
32488: ST_TO_ADDR
// end ;
32489: GO 32402
32491: POP
32492: POP
// array := tmp ;
32493: LD_ADDR_VAR 0 1
32497: PUSH
32498: LD_VAR 0 10
32502: ST_TO_ADDR
// end ;
32503: GO 32384
32505: POP
32506: POP
// result := array ;
32507: LD_ADDR_VAR 0 5
32511: PUSH
32512: LD_VAR 0 1
32516: ST_TO_ADDR
// end ;
32517: LD_VAR 0 5
32521: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32522: LD_INT 0
32524: PPUSH
32525: PPUSH
// result := 0 ;
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 0
32533: ST_TO_ADDR
// if not array or not value in array then
32534: LD_VAR 0 1
32538: NOT
32539: PUSH
32540: LD_VAR 0 2
32544: PUSH
32545: LD_VAR 0 1
32549: IN
32550: NOT
32551: OR
32552: IFFALSE 32556
// exit ;
32554: GO 32610
// for i = 1 to array do
32556: LD_ADDR_VAR 0 4
32560: PUSH
32561: DOUBLE
32562: LD_INT 1
32564: DEC
32565: ST_TO_ADDR
32566: LD_VAR 0 1
32570: PUSH
32571: FOR_TO
32572: IFFALSE 32608
// if value = array [ i ] then
32574: LD_VAR 0 2
32578: PUSH
32579: LD_VAR 0 1
32583: PUSH
32584: LD_VAR 0 4
32588: ARRAY
32589: EQUAL
32590: IFFALSE 32606
// begin result := i ;
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_VAR 0 4
32601: ST_TO_ADDR
// exit ;
32602: POP
32603: POP
32604: GO 32610
// end ;
32606: GO 32571
32608: POP
32609: POP
// end ;
32610: LD_VAR 0 3
32614: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32615: LD_INT 0
32617: PPUSH
// vc_chassis := chassis ;
32618: LD_ADDR_OWVAR 37
32622: PUSH
32623: LD_VAR 0 1
32627: ST_TO_ADDR
// vc_engine := engine ;
32628: LD_ADDR_OWVAR 39
32632: PUSH
32633: LD_VAR 0 2
32637: ST_TO_ADDR
// vc_control := control ;
32638: LD_ADDR_OWVAR 38
32642: PUSH
32643: LD_VAR 0 3
32647: ST_TO_ADDR
// vc_weapon := weapon ;
32648: LD_ADDR_OWVAR 40
32652: PUSH
32653: LD_VAR 0 4
32657: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32658: LD_ADDR_OWVAR 41
32662: PUSH
32663: LD_VAR 0 5
32667: ST_TO_ADDR
// end ;
32668: LD_VAR 0 6
32672: RET
// export function WantPlant ( unit ) ; var task ; begin
32673: LD_INT 0
32675: PPUSH
32676: PPUSH
// result := false ;
32677: LD_ADDR_VAR 0 2
32681: PUSH
32682: LD_INT 0
32684: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_VAR 0 1
32694: PPUSH
32695: CALL_OW 437
32699: ST_TO_ADDR
// if task then
32700: LD_VAR 0 3
32704: IFFALSE 32732
// if task [ 1 ] [ 1 ] = p then
32706: LD_VAR 0 3
32710: PUSH
32711: LD_INT 1
32713: ARRAY
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PUSH
32719: LD_STRING p
32721: EQUAL
32722: IFFALSE 32732
// result := true ;
32724: LD_ADDR_VAR 0 2
32728: PUSH
32729: LD_INT 1
32731: ST_TO_ADDR
// end ;
32732: LD_VAR 0 2
32736: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32737: LD_INT 0
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
// if pos < 1 then
32743: LD_VAR 0 2
32747: PUSH
32748: LD_INT 1
32750: LESS
32751: IFFALSE 32755
// exit ;
32753: GO 33058
// if pos = 1 then
32755: LD_VAR 0 2
32759: PUSH
32760: LD_INT 1
32762: EQUAL
32763: IFFALSE 32796
// result := Replace ( arr , pos [ 1 ] , value ) else
32765: LD_ADDR_VAR 0 4
32769: PUSH
32770: LD_VAR 0 1
32774: PPUSH
32775: LD_VAR 0 2
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: PPUSH
32784: LD_VAR 0 3
32788: PPUSH
32789: CALL_OW 1
32793: ST_TO_ADDR
32794: GO 33058
// begin tmp := arr ;
32796: LD_ADDR_VAR 0 6
32800: PUSH
32801: LD_VAR 0 1
32805: ST_TO_ADDR
// s_arr := [ tmp ] ;
32806: LD_ADDR_VAR 0 7
32810: PUSH
32811: LD_VAR 0 6
32815: PUSH
32816: EMPTY
32817: LIST
32818: ST_TO_ADDR
// for i = 1 to pos - 1 do
32819: LD_ADDR_VAR 0 5
32823: PUSH
32824: DOUBLE
32825: LD_INT 1
32827: DEC
32828: ST_TO_ADDR
32829: LD_VAR 0 2
32833: PUSH
32834: LD_INT 1
32836: MINUS
32837: PUSH
32838: FOR_TO
32839: IFFALSE 32884
// begin tmp := tmp [ pos [ i ] ] ;
32841: LD_ADDR_VAR 0 6
32845: PUSH
32846: LD_VAR 0 6
32850: PUSH
32851: LD_VAR 0 2
32855: PUSH
32856: LD_VAR 0 5
32860: ARRAY
32861: ARRAY
32862: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32863: LD_ADDR_VAR 0 7
32867: PUSH
32868: LD_VAR 0 7
32872: PUSH
32873: LD_VAR 0 6
32877: PUSH
32878: EMPTY
32879: LIST
32880: ADD
32881: ST_TO_ADDR
// end ;
32882: GO 32838
32884: POP
32885: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32886: LD_ADDR_VAR 0 6
32890: PUSH
32891: LD_VAR 0 6
32895: PPUSH
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 2
32905: ARRAY
32906: PPUSH
32907: LD_VAR 0 3
32911: PPUSH
32912: CALL_OW 1
32916: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32917: LD_ADDR_VAR 0 7
32921: PUSH
32922: LD_VAR 0 7
32926: PPUSH
32927: LD_VAR 0 7
32931: PPUSH
32932: LD_VAR 0 6
32936: PPUSH
32937: CALL_OW 1
32941: ST_TO_ADDR
// for i = s_arr downto 2 do
32942: LD_ADDR_VAR 0 5
32946: PUSH
32947: DOUBLE
32948: LD_VAR 0 7
32952: INC
32953: ST_TO_ADDR
32954: LD_INT 2
32956: PUSH
32957: FOR_DOWNTO
32958: IFFALSE 33042
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32960: LD_ADDR_VAR 0 6
32964: PUSH
32965: LD_VAR 0 7
32969: PUSH
32970: LD_VAR 0 5
32974: PUSH
32975: LD_INT 1
32977: MINUS
32978: ARRAY
32979: PPUSH
32980: LD_VAR 0 2
32984: PUSH
32985: LD_VAR 0 5
32989: PUSH
32990: LD_INT 1
32992: MINUS
32993: ARRAY
32994: PPUSH
32995: LD_VAR 0 7
32999: PUSH
33000: LD_VAR 0 5
33004: ARRAY
33005: PPUSH
33006: CALL_OW 1
33010: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33011: LD_ADDR_VAR 0 7
33015: PUSH
33016: LD_VAR 0 7
33020: PPUSH
33021: LD_VAR 0 5
33025: PUSH
33026: LD_INT 1
33028: MINUS
33029: PPUSH
33030: LD_VAR 0 6
33034: PPUSH
33035: CALL_OW 1
33039: ST_TO_ADDR
// end ;
33040: GO 32957
33042: POP
33043: POP
// result := s_arr [ 1 ] ;
33044: LD_ADDR_VAR 0 4
33048: PUSH
33049: LD_VAR 0 7
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: ST_TO_ADDR
// end ; end ;
33058: LD_VAR 0 4
33062: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33063: LD_INT 0
33065: PPUSH
33066: PPUSH
// if not list then
33067: LD_VAR 0 1
33071: NOT
33072: IFFALSE 33076
// exit ;
33074: GO 33167
// i := list [ pos1 ] ;
33076: LD_ADDR_VAR 0 5
33080: PUSH
33081: LD_VAR 0 1
33085: PUSH
33086: LD_VAR 0 2
33090: ARRAY
33091: ST_TO_ADDR
// if not i then
33092: LD_VAR 0 5
33096: NOT
33097: IFFALSE 33101
// exit ;
33099: GO 33167
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33101: LD_ADDR_VAR 0 1
33105: PUSH
33106: LD_VAR 0 1
33110: PPUSH
33111: LD_VAR 0 2
33115: PPUSH
33116: LD_VAR 0 1
33120: PUSH
33121: LD_VAR 0 3
33125: ARRAY
33126: PPUSH
33127: CALL_OW 1
33131: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33132: LD_ADDR_VAR 0 1
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_VAR 0 3
33146: PPUSH
33147: LD_VAR 0 5
33151: PPUSH
33152: CALL_OW 1
33156: ST_TO_ADDR
// result := list ;
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_VAR 0 1
33166: ST_TO_ADDR
// end ;
33167: LD_VAR 0 4
33171: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33172: LD_INT 0
33174: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33175: LD_ADDR_VAR 0 5
33179: PUSH
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL_OW 250
33189: PPUSH
33190: LD_VAR 0 1
33194: PPUSH
33195: CALL_OW 251
33199: PPUSH
33200: LD_VAR 0 2
33204: PPUSH
33205: LD_VAR 0 3
33209: PPUSH
33210: LD_VAR 0 4
33214: PPUSH
33215: CALL 33225 0 5
33219: ST_TO_ADDR
// end ;
33220: LD_VAR 0 5
33224: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
// if not list then
33231: LD_VAR 0 3
33235: NOT
33236: IFFALSE 33240
// exit ;
33238: GO 33628
// result := [ ] ;
33240: LD_ADDR_VAR 0 6
33244: PUSH
33245: EMPTY
33246: ST_TO_ADDR
// for i in list do
33247: LD_ADDR_VAR 0 7
33251: PUSH
33252: LD_VAR 0 3
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33460
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33260: LD_ADDR_VAR 0 9
33264: PUSH
33265: LD_VAR 0 7
33269: PPUSH
33270: LD_VAR 0 1
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: CALL_OW 297
33284: ST_TO_ADDR
// if not result then
33285: LD_VAR 0 6
33289: NOT
33290: IFFALSE 33316
// result := [ [ i , tmp ] ] else
33292: LD_ADDR_VAR 0 6
33296: PUSH
33297: LD_VAR 0 7
33301: PUSH
33302: LD_VAR 0 9
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: ST_TO_ADDR
33314: GO 33458
// begin if result [ result ] [ 2 ] < tmp then
33316: LD_VAR 0 6
33320: PUSH
33321: LD_VAR 0 6
33325: ARRAY
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PUSH
33331: LD_VAR 0 9
33335: LESS
33336: IFFALSE 33378
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33338: LD_ADDR_VAR 0 6
33342: PUSH
33343: LD_VAR 0 6
33347: PPUSH
33348: LD_VAR 0 6
33352: PUSH
33353: LD_INT 1
33355: PLUS
33356: PPUSH
33357: LD_VAR 0 7
33361: PUSH
33362: LD_VAR 0 9
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PPUSH
33371: CALL_OW 2
33375: ST_TO_ADDR
33376: GO 33458
// for j = 1 to result do
33378: LD_ADDR_VAR 0 8
33382: PUSH
33383: DOUBLE
33384: LD_INT 1
33386: DEC
33387: ST_TO_ADDR
33388: LD_VAR 0 6
33392: PUSH
33393: FOR_TO
33394: IFFALSE 33456
// begin if tmp < result [ j ] [ 2 ] then
33396: LD_VAR 0 9
33400: PUSH
33401: LD_VAR 0 6
33405: PUSH
33406: LD_VAR 0 8
33410: ARRAY
33411: PUSH
33412: LD_INT 2
33414: ARRAY
33415: LESS
33416: IFFALSE 33454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33418: LD_ADDR_VAR 0 6
33422: PUSH
33423: LD_VAR 0 6
33427: PPUSH
33428: LD_VAR 0 8
33432: PPUSH
33433: LD_VAR 0 7
33437: PUSH
33438: LD_VAR 0 9
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PPUSH
33447: CALL_OW 2
33451: ST_TO_ADDR
// break ;
33452: GO 33456
// end ; end ;
33454: GO 33393
33456: POP
33457: POP
// end ; end ;
33458: GO 33257
33460: POP
33461: POP
// if result and not asc then
33462: LD_VAR 0 6
33466: PUSH
33467: LD_VAR 0 4
33471: NOT
33472: AND
33473: IFFALSE 33548
// begin tmp := result ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_VAR 0 6
33484: ST_TO_ADDR
// for i = tmp downto 1 do
33485: LD_ADDR_VAR 0 7
33489: PUSH
33490: DOUBLE
33491: LD_VAR 0 9
33495: INC
33496: ST_TO_ADDR
33497: LD_INT 1
33499: PUSH
33500: FOR_DOWNTO
33501: IFFALSE 33546
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33503: LD_ADDR_VAR 0 6
33507: PUSH
33508: LD_VAR 0 6
33512: PPUSH
33513: LD_VAR 0 9
33517: PUSH
33518: LD_VAR 0 7
33522: MINUS
33523: PUSH
33524: LD_INT 1
33526: PLUS
33527: PPUSH
33528: LD_VAR 0 9
33532: PUSH
33533: LD_VAR 0 7
33537: ARRAY
33538: PPUSH
33539: CALL_OW 1
33543: ST_TO_ADDR
33544: GO 33500
33546: POP
33547: POP
// end ; tmp := [ ] ;
33548: LD_ADDR_VAR 0 9
33552: PUSH
33553: EMPTY
33554: ST_TO_ADDR
// if mode then
33555: LD_VAR 0 5
33559: IFFALSE 33628
// begin for i = 1 to result do
33561: LD_ADDR_VAR 0 7
33565: PUSH
33566: DOUBLE
33567: LD_INT 1
33569: DEC
33570: ST_TO_ADDR
33571: LD_VAR 0 6
33575: PUSH
33576: FOR_TO
33577: IFFALSE 33616
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33579: LD_ADDR_VAR 0 9
33583: PUSH
33584: LD_VAR 0 9
33588: PPUSH
33589: LD_VAR 0 7
33593: PPUSH
33594: LD_VAR 0 6
33598: PUSH
33599: LD_VAR 0 7
33603: ARRAY
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: PPUSH
33609: CALL_OW 1
33613: ST_TO_ADDR
33614: GO 33576
33616: POP
33617: POP
// result := tmp ;
33618: LD_ADDR_VAR 0 6
33622: PUSH
33623: LD_VAR 0 9
33627: ST_TO_ADDR
// end ; end ;
33628: LD_VAR 0 6
33632: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33633: LD_INT 0
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33641: LD_ADDR_VAR 0 5
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// if not x or not y then
33663: LD_VAR 0 2
33667: NOT
33668: PUSH
33669: LD_VAR 0 3
33673: NOT
33674: OR
33675: IFFALSE 33679
// exit ;
33677: GO 35325
// if not range then
33679: LD_VAR 0 4
33683: NOT
33684: IFFALSE 33694
// range := 10 ;
33686: LD_ADDR_VAR 0 4
33690: PUSH
33691: LD_INT 10
33693: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33694: LD_ADDR_VAR 0 8
33698: PUSH
33699: LD_INT 81
33701: PUSH
33702: LD_VAR 0 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 92
33713: PUSH
33714: LD_VAR 0 2
33718: PUSH
33719: LD_VAR 0 3
33723: PUSH
33724: LD_VAR 0 4
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 21
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: PPUSH
33757: CALL_OW 69
33761: ST_TO_ADDR
// if not tmp then
33762: LD_VAR 0 8
33766: NOT
33767: IFFALSE 33771
// exit ;
33769: GO 35325
// for i in tmp do
33771: LD_ADDR_VAR 0 6
33775: PUSH
33776: LD_VAR 0 8
33780: PUSH
33781: FOR_IN
33782: IFFALSE 35300
// begin points := [ 0 , 0 , 0 ] ;
33784: LD_ADDR_VAR 0 9
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: ST_TO_ADDR
// bpoints := 1 ;
33803: LD_ADDR_VAR 0 10
33807: PUSH
33808: LD_INT 1
33810: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33811: LD_VAR 0 6
33815: PPUSH
33816: CALL_OW 247
33820: PUSH
33821: LD_INT 1
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 34407
33829: POP
// begin if GetClass ( i ) = 1 then
33830: LD_VAR 0 6
33834: PPUSH
33835: CALL_OW 257
33839: PUSH
33840: LD_INT 1
33842: EQUAL
33843: IFFALSE 33864
// points := [ 10 , 5 , 3 ] ;
33845: LD_ADDR_VAR 0 9
33849: PUSH
33850: LD_INT 10
33852: PUSH
33853: LD_INT 5
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: LIST
33863: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33864: LD_VAR 0 6
33868: PPUSH
33869: CALL_OW 257
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: IN
33888: IFFALSE 33909
// points := [ 3 , 2 , 1 ] ;
33890: LD_ADDR_VAR 0 9
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33909: LD_VAR 0 6
33913: PPUSH
33914: CALL_OW 257
33918: PUSH
33919: LD_INT 5
33921: EQUAL
33922: IFFALSE 33943
// points := [ 130 , 5 , 2 ] ;
33924: LD_ADDR_VAR 0 9
33928: PUSH
33929: LD_INT 130
33931: PUSH
33932: LD_INT 5
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33943: LD_VAR 0 6
33947: PPUSH
33948: CALL_OW 257
33952: PUSH
33953: LD_INT 8
33955: EQUAL
33956: IFFALSE 33977
// points := [ 35 , 35 , 30 ] ;
33958: LD_ADDR_VAR 0 9
33962: PUSH
33963: LD_INT 35
33965: PUSH
33966: LD_INT 35
33968: PUSH
33969: LD_INT 30
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33977: LD_VAR 0 6
33981: PPUSH
33982: CALL_OW 257
33986: PUSH
33987: LD_INT 9
33989: EQUAL
33990: IFFALSE 34011
// points := [ 20 , 55 , 40 ] ;
33992: LD_ADDR_VAR 0 9
33996: PUSH
33997: LD_INT 20
33999: PUSH
34000: LD_INT 55
34002: PUSH
34003: LD_INT 40
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34011: LD_VAR 0 6
34015: PPUSH
34016: CALL_OW 257
34020: PUSH
34021: LD_INT 12
34023: PUSH
34024: LD_INT 16
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: IN
34031: IFFALSE 34052
// points := [ 5 , 3 , 2 ] ;
34033: LD_ADDR_VAR 0 9
34037: PUSH
34038: LD_INT 5
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34052: LD_VAR 0 6
34056: PPUSH
34057: CALL_OW 257
34061: PUSH
34062: LD_INT 17
34064: EQUAL
34065: IFFALSE 34086
// points := [ 100 , 50 , 75 ] ;
34067: LD_ADDR_VAR 0 9
34071: PUSH
34072: LD_INT 100
34074: PUSH
34075: LD_INT 50
34077: PUSH
34078: LD_INT 75
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34086: LD_VAR 0 6
34090: PPUSH
34091: CALL_OW 257
34095: PUSH
34096: LD_INT 15
34098: EQUAL
34099: IFFALSE 34120
// points := [ 10 , 5 , 3 ] ;
34101: LD_ADDR_VAR 0 9
34105: PUSH
34106: LD_INT 10
34108: PUSH
34109: LD_INT 5
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34120: LD_VAR 0 6
34124: PPUSH
34125: CALL_OW 257
34129: PUSH
34130: LD_INT 14
34132: EQUAL
34133: IFFALSE 34154
// points := [ 10 , 0 , 0 ] ;
34135: LD_ADDR_VAR 0 9
34139: PUSH
34140: LD_INT 10
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34154: LD_VAR 0 6
34158: PPUSH
34159: CALL_OW 257
34163: PUSH
34164: LD_INT 11
34166: EQUAL
34167: IFFALSE 34188
// points := [ 30 , 10 , 5 ] ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_INT 30
34176: PUSH
34177: LD_INT 10
34179: PUSH
34180: LD_INT 5
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34188: LD_VAR 0 1
34192: PPUSH
34193: LD_INT 5
34195: PPUSH
34196: CALL_OW 321
34200: PUSH
34201: LD_INT 2
34203: EQUAL
34204: IFFALSE 34221
// bpoints := bpoints * 1.8 ;
34206: LD_ADDR_VAR 0 10
34210: PUSH
34211: LD_VAR 0 10
34215: PUSH
34216: LD_REAL  1.80000000000000E+0000
34219: MUL
34220: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34221: LD_VAR 0 6
34225: PPUSH
34226: CALL_OW 257
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 3
34239: PUSH
34240: LD_INT 4
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: IN
34249: PUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_INT 51
34257: PPUSH
34258: CALL_OW 321
34262: PUSH
34263: LD_INT 2
34265: EQUAL
34266: AND
34267: IFFALSE 34284
// bpoints := bpoints * 1.2 ;
34269: LD_ADDR_VAR 0 10
34273: PUSH
34274: LD_VAR 0 10
34278: PUSH
34279: LD_REAL  1.20000000000000E+0000
34282: MUL
34283: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34284: LD_VAR 0 6
34288: PPUSH
34289: CALL_OW 257
34293: PUSH
34294: LD_INT 5
34296: PUSH
34297: LD_INT 7
34299: PUSH
34300: LD_INT 9
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: IN
34308: PUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: LD_INT 52
34316: PPUSH
34317: CALL_OW 321
34321: PUSH
34322: LD_INT 2
34324: EQUAL
34325: AND
34326: IFFALSE 34343
// bpoints := bpoints * 1.5 ;
34328: LD_ADDR_VAR 0 10
34332: PUSH
34333: LD_VAR 0 10
34337: PUSH
34338: LD_REAL  1.50000000000000E+0000
34341: MUL
34342: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34343: LD_VAR 0 1
34347: PPUSH
34348: LD_INT 66
34350: PPUSH
34351: CALL_OW 321
34355: PUSH
34356: LD_INT 2
34358: EQUAL
34359: IFFALSE 34376
// bpoints := bpoints * 1.1 ;
34361: LD_ADDR_VAR 0 10
34365: PUSH
34366: LD_VAR 0 10
34370: PUSH
34371: LD_REAL  1.10000000000000E+0000
34374: MUL
34375: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34376: LD_ADDR_VAR 0 10
34380: PUSH
34381: LD_VAR 0 10
34385: PUSH
34386: LD_VAR 0 6
34390: PPUSH
34391: LD_INT 1
34393: PPUSH
34394: CALL_OW 259
34398: PUSH
34399: LD_REAL  1.15000000000000E+0000
34402: MUL
34403: MUL
34404: ST_TO_ADDR
// end ; unit_vehicle :
34405: GO 35229
34407: LD_INT 2
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 35217
34415: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34416: LD_VAR 0 6
34420: PPUSH
34421: CALL_OW 264
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 42
34431: PUSH
34432: LD_INT 24
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: IN
34440: IFFALSE 34461
// points := [ 25 , 5 , 3 ] ;
34442: LD_ADDR_VAR 0 9
34446: PUSH
34447: LD_INT 25
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34461: LD_VAR 0 6
34465: PPUSH
34466: CALL_OW 264
34470: PUSH
34471: LD_INT 4
34473: PUSH
34474: LD_INT 43
34476: PUSH
34477: LD_INT 25
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: IN
34485: IFFALSE 34506
// points := [ 40 , 15 , 5 ] ;
34487: LD_ADDR_VAR 0 9
34491: PUSH
34492: LD_INT 40
34494: PUSH
34495: LD_INT 15
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34506: LD_VAR 0 6
34510: PPUSH
34511: CALL_OW 264
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 23
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: IN
34526: IFFALSE 34547
// points := [ 7 , 25 , 8 ] ;
34528: LD_ADDR_VAR 0 9
34532: PUSH
34533: LD_INT 7
34535: PUSH
34536: LD_INT 25
34538: PUSH
34539: LD_INT 8
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 264
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: LD_INT 27
34562: PUSH
34563: LD_INT 44
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: IN
34571: IFFALSE 34592
// points := [ 14 , 50 , 16 ] ;
34573: LD_ADDR_VAR 0 9
34577: PUSH
34578: LD_INT 14
34580: PUSH
34581: LD_INT 50
34583: PUSH
34584: LD_INT 16
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34592: LD_VAR 0 6
34596: PPUSH
34597: CALL_OW 264
34601: PUSH
34602: LD_INT 6
34604: PUSH
34605: LD_INT 46
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: IN
34612: IFFALSE 34633
// points := [ 32 , 120 , 70 ] ;
34614: LD_ADDR_VAR 0 9
34618: PUSH
34619: LD_INT 32
34621: PUSH
34622: LD_INT 120
34624: PUSH
34625: LD_INT 70
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34633: LD_VAR 0 6
34637: PPUSH
34638: CALL_OW 264
34642: PUSH
34643: LD_INT 7
34645: PUSH
34646: LD_INT 28
34648: PUSH
34649: LD_INT 45
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: IN
34657: IFFALSE 34678
// points := [ 35 , 20 , 45 ] ;
34659: LD_ADDR_VAR 0 9
34663: PUSH
34664: LD_INT 35
34666: PUSH
34667: LD_INT 20
34669: PUSH
34670: LD_INT 45
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34678: LD_VAR 0 6
34682: PPUSH
34683: CALL_OW 264
34687: PUSH
34688: LD_INT 47
34690: PUSH
34691: EMPTY
34692: LIST
34693: IN
34694: IFFALSE 34715
// points := [ 67 , 45 , 75 ] ;
34696: LD_ADDR_VAR 0 9
34700: PUSH
34701: LD_INT 67
34703: PUSH
34704: LD_INT 45
34706: PUSH
34707: LD_INT 75
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34715: LD_VAR 0 6
34719: PPUSH
34720: CALL_OW 264
34724: PUSH
34725: LD_INT 26
34727: PUSH
34728: EMPTY
34729: LIST
34730: IN
34731: IFFALSE 34752
// points := [ 120 , 30 , 80 ] ;
34733: LD_ADDR_VAR 0 9
34737: PUSH
34738: LD_INT 120
34740: PUSH
34741: LD_INT 30
34743: PUSH
34744: LD_INT 80
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34752: LD_VAR 0 6
34756: PPUSH
34757: CALL_OW 264
34761: PUSH
34762: LD_INT 22
34764: PUSH
34765: EMPTY
34766: LIST
34767: IN
34768: IFFALSE 34789
// points := [ 40 , 1 , 1 ] ;
34770: LD_ADDR_VAR 0 9
34774: PUSH
34775: LD_INT 40
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34789: LD_VAR 0 6
34793: PPUSH
34794: CALL_OW 264
34798: PUSH
34799: LD_INT 29
34801: PUSH
34802: EMPTY
34803: LIST
34804: IN
34805: IFFALSE 34826
// points := [ 70 , 200 , 400 ] ;
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_INT 70
34814: PUSH
34815: LD_INT 200
34817: PUSH
34818: LD_INT 400
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34826: LD_VAR 0 6
34830: PPUSH
34831: CALL_OW 264
34835: PUSH
34836: LD_INT 14
34838: PUSH
34839: LD_INT 53
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: IN
34846: IFFALSE 34867
// points := [ 40 , 10 , 20 ] ;
34848: LD_ADDR_VAR 0 9
34852: PUSH
34853: LD_INT 40
34855: PUSH
34856: LD_INT 10
34858: PUSH
34859: LD_INT 20
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34867: LD_VAR 0 6
34871: PPUSH
34872: CALL_OW 264
34876: PUSH
34877: LD_INT 9
34879: PUSH
34880: EMPTY
34881: LIST
34882: IN
34883: IFFALSE 34904
// points := [ 5 , 70 , 20 ] ;
34885: LD_ADDR_VAR 0 9
34889: PUSH
34890: LD_INT 5
34892: PUSH
34893: LD_INT 70
34895: PUSH
34896: LD_INT 20
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34904: LD_VAR 0 6
34908: PPUSH
34909: CALL_OW 264
34913: PUSH
34914: LD_INT 10
34916: PUSH
34917: EMPTY
34918: LIST
34919: IN
34920: IFFALSE 34941
// points := [ 35 , 110 , 70 ] ;
34922: LD_ADDR_VAR 0 9
34926: PUSH
34927: LD_INT 35
34929: PUSH
34930: LD_INT 110
34932: PUSH
34933: LD_INT 70
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34941: LD_VAR 0 6
34945: PPUSH
34946: CALL_OW 265
34950: PUSH
34951: LD_INT 25
34953: EQUAL
34954: IFFALSE 34975
// points := [ 80 , 65 , 100 ] ;
34956: LD_ADDR_VAR 0 9
34960: PUSH
34961: LD_INT 80
34963: PUSH
34964: LD_INT 65
34966: PUSH
34967: LD_INT 100
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34975: LD_VAR 0 6
34979: PPUSH
34980: CALL_OW 263
34984: PUSH
34985: LD_INT 1
34987: EQUAL
34988: IFFALSE 35023
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34990: LD_ADDR_VAR 0 10
34994: PUSH
34995: LD_VAR 0 10
34999: PUSH
35000: LD_VAR 0 6
35004: PPUSH
35005: CALL_OW 311
35009: PPUSH
35010: LD_INT 3
35012: PPUSH
35013: CALL_OW 259
35017: PUSH
35018: LD_INT 4
35020: MUL
35021: MUL
35022: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35023: LD_VAR 0 6
35027: PPUSH
35028: CALL_OW 263
35032: PUSH
35033: LD_INT 2
35035: EQUAL
35036: IFFALSE 35087
// begin j := IsControledBy ( i ) ;
35038: LD_ADDR_VAR 0 7
35042: PUSH
35043: LD_VAR 0 6
35047: PPUSH
35048: CALL_OW 312
35052: ST_TO_ADDR
// if j then
35053: LD_VAR 0 7
35057: IFFALSE 35087
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35059: LD_ADDR_VAR 0 10
35063: PUSH
35064: LD_VAR 0 10
35068: PUSH
35069: LD_VAR 0 7
35073: PPUSH
35074: LD_INT 3
35076: PPUSH
35077: CALL_OW 259
35081: PUSH
35082: LD_INT 3
35084: MUL
35085: MUL
35086: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35087: LD_VAR 0 6
35091: PPUSH
35092: CALL_OW 264
35096: PUSH
35097: LD_INT 5
35099: PUSH
35100: LD_INT 6
35102: PUSH
35103: LD_INT 46
35105: PUSH
35106: LD_INT 44
35108: PUSH
35109: LD_INT 47
35111: PUSH
35112: LD_INT 45
35114: PUSH
35115: LD_INT 28
35117: PUSH
35118: LD_INT 7
35120: PUSH
35121: LD_INT 27
35123: PUSH
35124: LD_INT 29
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: IN
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: LD_INT 52
35147: PPUSH
35148: CALL_OW 321
35152: PUSH
35153: LD_INT 2
35155: EQUAL
35156: AND
35157: IFFALSE 35174
// bpoints := bpoints * 1.2 ;
35159: LD_ADDR_VAR 0 10
35163: PUSH
35164: LD_VAR 0 10
35168: PUSH
35169: LD_REAL  1.20000000000000E+0000
35172: MUL
35173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35174: LD_VAR 0 6
35178: PPUSH
35179: CALL_OW 264
35183: PUSH
35184: LD_INT 6
35186: PUSH
35187: LD_INT 46
35189: PUSH
35190: LD_INT 47
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: IN
35198: IFFALSE 35215
// bpoints := bpoints * 1.2 ;
35200: LD_ADDR_VAR 0 10
35204: PUSH
35205: LD_VAR 0 10
35209: PUSH
35210: LD_REAL  1.20000000000000E+0000
35213: MUL
35214: ST_TO_ADDR
// end ; unit_building :
35215: GO 35229
35217: LD_INT 3
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 35228
35225: POP
// ; end ;
35226: GO 35229
35228: POP
// for j = 1 to 3 do
35229: LD_ADDR_VAR 0 7
35233: PUSH
35234: DOUBLE
35235: LD_INT 1
35237: DEC
35238: ST_TO_ADDR
35239: LD_INT 3
35241: PUSH
35242: FOR_TO
35243: IFFALSE 35296
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35245: LD_ADDR_VAR 0 5
35249: PUSH
35250: LD_VAR 0 5
35254: PPUSH
35255: LD_VAR 0 7
35259: PPUSH
35260: LD_VAR 0 5
35264: PUSH
35265: LD_VAR 0 7
35269: ARRAY
35270: PUSH
35271: LD_VAR 0 9
35275: PUSH
35276: LD_VAR 0 7
35280: ARRAY
35281: PUSH
35282: LD_VAR 0 10
35286: MUL
35287: PLUS
35288: PPUSH
35289: CALL_OW 1
35293: ST_TO_ADDR
35294: GO 35242
35296: POP
35297: POP
// end ;
35298: GO 33781
35300: POP
35301: POP
// result := Replace ( result , 4 , tmp ) ;
35302: LD_ADDR_VAR 0 5
35306: PUSH
35307: LD_VAR 0 5
35311: PPUSH
35312: LD_INT 4
35314: PPUSH
35315: LD_VAR 0 8
35319: PPUSH
35320: CALL_OW 1
35324: ST_TO_ADDR
// end ;
35325: LD_VAR 0 5
35329: RET
// export function DangerAtRange ( unit , range ) ; begin
35330: LD_INT 0
35332: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 255
35347: PPUSH
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL_OW 250
35357: PPUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 251
35367: PPUSH
35368: LD_VAR 0 2
35372: PPUSH
35373: CALL 33633 0 4
35377: ST_TO_ADDR
// end ;
35378: LD_VAR 0 3
35382: RET
// export function DangerInArea ( side , area ) ; begin
35383: LD_INT 0
35385: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35386: LD_ADDR_VAR 0 3
35390: PUSH
35391: LD_VAR 0 2
35395: PPUSH
35396: LD_INT 81
35398: PUSH
35399: LD_VAR 0 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PPUSH
35408: CALL_OW 70
35412: ST_TO_ADDR
// end ;
35413: LD_VAR 0 3
35417: RET
// export function IsExtension ( b ) ; begin
35418: LD_INT 0
35420: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35421: LD_ADDR_VAR 0 2
35425: PUSH
35426: LD_VAR 0 1
35430: PUSH
35431: LD_INT 23
35433: PUSH
35434: LD_INT 20
35436: PUSH
35437: LD_INT 22
35439: PUSH
35440: LD_INT 17
35442: PUSH
35443: LD_INT 24
35445: PUSH
35446: LD_INT 21
35448: PUSH
35449: LD_INT 19
35451: PUSH
35452: LD_INT 16
35454: PUSH
35455: LD_INT 25
35457: PUSH
35458: LD_INT 18
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: IN
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 2
35478: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
35483: PPUSH
// result := [ ] ;
35484: LD_ADDR_VAR 0 4
35488: PUSH
35489: EMPTY
35490: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35491: LD_ADDR_VAR 0 5
35495: PUSH
35496: LD_VAR 0 2
35500: PPUSH
35501: LD_INT 21
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PPUSH
35511: CALL_OW 70
35515: ST_TO_ADDR
// if not tmp then
35516: LD_VAR 0 5
35520: NOT
35521: IFFALSE 35525
// exit ;
35523: GO 35589
// if checkLink then
35525: LD_VAR 0 3
35529: IFFALSE 35579
// begin for i in tmp do
35531: LD_ADDR_VAR 0 6
35535: PUSH
35536: LD_VAR 0 5
35540: PUSH
35541: FOR_IN
35542: IFFALSE 35577
// if GetBase ( i ) <> base then
35544: LD_VAR 0 6
35548: PPUSH
35549: CALL_OW 274
35553: PUSH
35554: LD_VAR 0 1
35558: NONEQUAL
35559: IFFALSE 35575
// ComLinkToBase ( base , i ) ;
35561: LD_VAR 0 1
35565: PPUSH
35566: LD_VAR 0 6
35570: PPUSH
35571: CALL_OW 169
35575: GO 35541
35577: POP
35578: POP
// end ; result := tmp ;
35579: LD_ADDR_VAR 0 4
35583: PUSH
35584: LD_VAR 0 5
35588: ST_TO_ADDR
// end ;
35589: LD_VAR 0 4
35593: RET
// export function ComComplete ( units , b ) ; var i ; begin
35594: LD_INT 0
35596: PPUSH
35597: PPUSH
// if not units then
35598: LD_VAR 0 1
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 35697
// for i in units do
35607: LD_ADDR_VAR 0 4
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: FOR_IN
35618: IFFALSE 35695
// if BuildingStatus ( b ) = bs_build then
35620: LD_VAR 0 2
35624: PPUSH
35625: CALL_OW 461
35629: PUSH
35630: LD_INT 1
35632: EQUAL
35633: IFFALSE 35693
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35635: LD_VAR 0 4
35639: PPUSH
35640: LD_STRING h
35642: PUSH
35643: LD_VAR 0 2
35647: PPUSH
35648: CALL_OW 250
35652: PUSH
35653: LD_VAR 0 2
35657: PPUSH
35658: CALL_OW 251
35662: PUSH
35663: LD_VAR 0 2
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: PPUSH
35689: CALL_OW 446
35693: GO 35617
35695: POP
35696: POP
// end ;
35697: LD_VAR 0 3
35701: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35710: LD_VAR 0 1
35714: NOT
35715: PUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 263
35725: PUSH
35726: LD_INT 2
35728: EQUAL
35729: NOT
35730: OR
35731: IFFALSE 35735
// exit ;
35733: GO 36051
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35735: LD_ADDR_VAR 0 6
35739: PUSH
35740: LD_INT 22
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 255
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 36
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 34
35772: PUSH
35773: LD_INT 31
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PPUSH
35789: CALL_OW 69
35793: ST_TO_ADDR
// if not tmp then
35794: LD_VAR 0 6
35798: NOT
35799: IFFALSE 35803
// exit ;
35801: GO 36051
// result := [ ] ;
35803: LD_ADDR_VAR 0 2
35807: PUSH
35808: EMPTY
35809: ST_TO_ADDR
// for i in tmp do
35810: LD_ADDR_VAR 0 3
35814: PUSH
35815: LD_VAR 0 6
35819: PUSH
35820: FOR_IN
35821: IFFALSE 35892
// begin t := UnitsInside ( i ) ;
35823: LD_ADDR_VAR 0 4
35827: PUSH
35828: LD_VAR 0 3
35832: PPUSH
35833: CALL_OW 313
35837: ST_TO_ADDR
// if t then
35838: LD_VAR 0 4
35842: IFFALSE 35890
// for j in t do
35844: LD_ADDR_VAR 0 7
35848: PUSH
35849: LD_VAR 0 4
35853: PUSH
35854: FOR_IN
35855: IFFALSE 35888
// result := Insert ( result , result + 1 , j ) ;
35857: LD_ADDR_VAR 0 2
35861: PUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: LD_VAR 0 2
35871: PUSH
35872: LD_INT 1
35874: PLUS
35875: PPUSH
35876: LD_VAR 0 7
35880: PPUSH
35881: CALL_OW 2
35885: ST_TO_ADDR
35886: GO 35854
35888: POP
35889: POP
// end ;
35890: GO 35820
35892: POP
35893: POP
// if not result then
35894: LD_VAR 0 2
35898: NOT
35899: IFFALSE 35903
// exit ;
35901: GO 36051
// mech := result [ 1 ] ;
35903: LD_ADDR_VAR 0 5
35907: PUSH
35908: LD_VAR 0 2
35912: PUSH
35913: LD_INT 1
35915: ARRAY
35916: ST_TO_ADDR
// if result > 1 then
35917: LD_VAR 0 2
35921: PUSH
35922: LD_INT 1
35924: GREATER
35925: IFFALSE 36037
// for i = 2 to result do
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: DOUBLE
35933: LD_INT 2
35935: DEC
35936: ST_TO_ADDR
35937: LD_VAR 0 2
35941: PUSH
35942: FOR_TO
35943: IFFALSE 36035
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35945: LD_ADDR_VAR 0 4
35949: PUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_VAR 0 3
35959: ARRAY
35960: PPUSH
35961: LD_INT 3
35963: PPUSH
35964: CALL_OW 259
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_VAR 0 3
35978: ARRAY
35979: PPUSH
35980: CALL_OW 432
35984: MINUS
35985: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35986: LD_VAR 0 4
35990: PUSH
35991: LD_VAR 0 5
35995: PPUSH
35996: LD_INT 3
35998: PPUSH
35999: CALL_OW 259
36003: PUSH
36004: LD_VAR 0 5
36008: PPUSH
36009: CALL_OW 432
36013: MINUS
36014: GREATEREQUAL
36015: IFFALSE 36033
// mech := result [ i ] ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_VAR 0 2
36026: PUSH
36027: LD_VAR 0 3
36031: ARRAY
36032: ST_TO_ADDR
// end ;
36033: GO 35942
36035: POP
36036: POP
// ComLinkTo ( vehicle , mech ) ;
36037: LD_VAR 0 1
36041: PPUSH
36042: LD_VAR 0 5
36046: PPUSH
36047: CALL_OW 135
// end ;
36051: LD_VAR 0 2
36055: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
// result := [ ] ;
36071: LD_ADDR_VAR 0 7
36075: PUSH
36076: EMPTY
36077: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36078: LD_VAR 0 1
36082: PPUSH
36083: CALL_OW 266
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: IN
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 37737
// if name then
36103: LD_VAR 0 3
36107: IFFALSE 36123
// SetBName ( base_dep , name ) ;
36109: LD_VAR 0 1
36113: PPUSH
36114: LD_VAR 0 3
36118: PPUSH
36119: CALL_OW 500
// base := GetBase ( base_dep ) ;
36123: LD_ADDR_VAR 0 15
36127: PUSH
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 274
36137: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36138: LD_ADDR_VAR 0 16
36142: PUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 255
36152: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36153: LD_ADDR_VAR 0 17
36157: PUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 248
36167: ST_TO_ADDR
// if sources then
36168: LD_VAR 0 5
36172: IFFALSE 36219
// for i = 1 to 3 do
36174: LD_ADDR_VAR 0 8
36178: PUSH
36179: DOUBLE
36180: LD_INT 1
36182: DEC
36183: ST_TO_ADDR
36184: LD_INT 3
36186: PUSH
36187: FOR_TO
36188: IFFALSE 36217
// AddResourceType ( base , i , sources [ i ] ) ;
36190: LD_VAR 0 15
36194: PPUSH
36195: LD_VAR 0 8
36199: PPUSH
36200: LD_VAR 0 5
36204: PUSH
36205: LD_VAR 0 8
36209: ARRAY
36210: PPUSH
36211: CALL_OW 276
36215: GO 36187
36217: POP
36218: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36219: LD_ADDR_VAR 0 18
36223: PUSH
36224: LD_VAR 0 15
36228: PPUSH
36229: LD_VAR 0 2
36233: PPUSH
36234: LD_INT 1
36236: PPUSH
36237: CALL 35479 0 3
36241: ST_TO_ADDR
// InitHc ;
36242: CALL_OW 19
// InitUc ;
36246: CALL_OW 18
// uc_side := side ;
36250: LD_ADDR_OWVAR 20
36254: PUSH
36255: LD_VAR 0 16
36259: ST_TO_ADDR
// uc_nation := nation ;
36260: LD_ADDR_OWVAR 21
36264: PUSH
36265: LD_VAR 0 17
36269: ST_TO_ADDR
// if buildings then
36270: LD_VAR 0 18
36274: IFFALSE 37596
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36276: LD_ADDR_VAR 0 19
36280: PUSH
36281: LD_VAR 0 18
36285: PPUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 30
36291: PUSH
36292: LD_INT 29
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 30
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: PPUSH
36314: CALL_OW 72
36318: ST_TO_ADDR
// if tmp then
36319: LD_VAR 0 19
36323: IFFALSE 36371
// for i in tmp do
36325: LD_ADDR_VAR 0 8
36329: PUSH
36330: LD_VAR 0 19
36334: PUSH
36335: FOR_IN
36336: IFFALSE 36369
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36338: LD_VAR 0 8
36342: PPUSH
36343: CALL_OW 250
36347: PPUSH
36348: LD_VAR 0 8
36352: PPUSH
36353: CALL_OW 251
36357: PPUSH
36358: LD_VAR 0 16
36362: PPUSH
36363: CALL_OW 441
36367: GO 36335
36369: POP
36370: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36371: LD_VAR 0 18
36375: PPUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 30
36381: PUSH
36382: LD_INT 32
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 30
36391: PUSH
36392: LD_INT 33
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: PPUSH
36404: CALL_OW 72
36408: IFFALSE 36496
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36410: LD_ADDR_VAR 0 8
36414: PUSH
36415: LD_VAR 0 18
36419: PPUSH
36420: LD_INT 2
36422: PUSH
36423: LD_INT 30
36425: PUSH
36426: LD_INT 32
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 30
36435: PUSH
36436: LD_INT 33
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: PPUSH
36448: CALL_OW 72
36452: PUSH
36453: FOR_IN
36454: IFFALSE 36494
// begin if not GetBWeapon ( i ) then
36456: LD_VAR 0 8
36460: PPUSH
36461: CALL_OW 269
36465: NOT
36466: IFFALSE 36492
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36468: LD_VAR 0 8
36472: PPUSH
36473: LD_VAR 0 8
36477: PPUSH
36478: LD_VAR 0 2
36482: PPUSH
36483: CALL 37742 0 2
36487: PPUSH
36488: CALL_OW 431
// end ;
36492: GO 36453
36494: POP
36495: POP
// end ; for i = 1 to personel do
36496: LD_ADDR_VAR 0 8
36500: PUSH
36501: DOUBLE
36502: LD_INT 1
36504: DEC
36505: ST_TO_ADDR
36506: LD_VAR 0 6
36510: PUSH
36511: FOR_TO
36512: IFFALSE 37576
// begin if i > 4 then
36514: LD_VAR 0 8
36518: PUSH
36519: LD_INT 4
36521: GREATER
36522: IFFALSE 36526
// break ;
36524: GO 37576
// case i of 1 :
36526: LD_VAR 0 8
36530: PUSH
36531: LD_INT 1
36533: DOUBLE
36534: EQUAL
36535: IFTRUE 36539
36537: GO 36619
36539: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36540: LD_ADDR_VAR 0 12
36544: PUSH
36545: LD_VAR 0 18
36549: PPUSH
36550: LD_INT 22
36552: PUSH
36553: LD_VAR 0 16
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 58
36564: PUSH
36565: EMPTY
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 30
36573: PUSH
36574: LD_INT 32
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 30
36583: PUSH
36584: LD_INT 4
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 30
36593: PUSH
36594: LD_INT 5
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: PPUSH
36612: CALL_OW 72
36616: ST_TO_ADDR
36617: GO 36841
36619: LD_INT 2
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36689
36627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36628: LD_ADDR_VAR 0 12
36632: PUSH
36633: LD_VAR 0 18
36637: PPUSH
36638: LD_INT 22
36640: PUSH
36641: LD_VAR 0 16
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 30
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 30
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 72
36686: ST_TO_ADDR
36687: GO 36841
36689: LD_INT 3
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36759
36697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36698: LD_ADDR_VAR 0 12
36702: PUSH
36703: LD_VAR 0 18
36707: PPUSH
36708: LD_INT 22
36710: PUSH
36711: LD_VAR 0 16
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 30
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 30
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PPUSH
36752: CALL_OW 72
36756: ST_TO_ADDR
36757: GO 36841
36759: LD_INT 4
36761: DOUBLE
36762: EQUAL
36763: IFTRUE 36767
36765: GO 36840
36767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36768: LD_ADDR_VAR 0 12
36772: PUSH
36773: LD_VAR 0 18
36777: PPUSH
36778: LD_INT 22
36780: PUSH
36781: LD_VAR 0 16
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 30
36795: PUSH
36796: LD_INT 6
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 30
36805: PUSH
36806: LD_INT 7
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 30
36815: PUSH
36816: LD_INT 8
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PPUSH
36833: CALL_OW 72
36837: ST_TO_ADDR
36838: GO 36841
36840: POP
// if i = 1 then
36841: LD_VAR 0 8
36845: PUSH
36846: LD_INT 1
36848: EQUAL
36849: IFFALSE 36960
// begin tmp := [ ] ;
36851: LD_ADDR_VAR 0 19
36855: PUSH
36856: EMPTY
36857: ST_TO_ADDR
// for j in f do
36858: LD_ADDR_VAR 0 9
36862: PUSH
36863: LD_VAR 0 12
36867: PUSH
36868: FOR_IN
36869: IFFALSE 36942
// if GetBType ( j ) = b_bunker then
36871: LD_VAR 0 9
36875: PPUSH
36876: CALL_OW 266
36880: PUSH
36881: LD_INT 32
36883: EQUAL
36884: IFFALSE 36911
// tmp := Insert ( tmp , 1 , j ) else
36886: LD_ADDR_VAR 0 19
36890: PUSH
36891: LD_VAR 0 19
36895: PPUSH
36896: LD_INT 1
36898: PPUSH
36899: LD_VAR 0 9
36903: PPUSH
36904: CALL_OW 2
36908: ST_TO_ADDR
36909: GO 36940
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36911: LD_ADDR_VAR 0 19
36915: PUSH
36916: LD_VAR 0 19
36920: PPUSH
36921: LD_VAR 0 19
36925: PUSH
36926: LD_INT 1
36928: PLUS
36929: PPUSH
36930: LD_VAR 0 9
36934: PPUSH
36935: CALL_OW 2
36939: ST_TO_ADDR
36940: GO 36868
36942: POP
36943: POP
// if tmp then
36944: LD_VAR 0 19
36948: IFFALSE 36960
// f := tmp ;
36950: LD_ADDR_VAR 0 12
36954: PUSH
36955: LD_VAR 0 19
36959: ST_TO_ADDR
// end ; x := personel [ i ] ;
36960: LD_ADDR_VAR 0 13
36964: PUSH
36965: LD_VAR 0 6
36969: PUSH
36970: LD_VAR 0 8
36974: ARRAY
36975: ST_TO_ADDR
// if x = - 1 then
36976: LD_VAR 0 13
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: EQUAL
36985: IFFALSE 37194
// begin for j in f do
36987: LD_ADDR_VAR 0 9
36991: PUSH
36992: LD_VAR 0 12
36996: PUSH
36997: FOR_IN
36998: IFFALSE 37190
// repeat InitHc ;
37000: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37004: LD_VAR 0 9
37008: PPUSH
37009: CALL_OW 266
37013: PUSH
37014: LD_INT 5
37016: EQUAL
37017: IFFALSE 37087
// begin if UnitsInside ( j ) < 3 then
37019: LD_VAR 0 9
37023: PPUSH
37024: CALL_OW 313
37028: PUSH
37029: LD_INT 3
37031: LESS
37032: IFFALSE 37068
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37034: LD_INT 0
37036: PPUSH
37037: LD_INT 5
37039: PUSH
37040: LD_INT 8
37042: PUSH
37043: LD_INT 9
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: LD_VAR 0 17
37055: ARRAY
37056: PPUSH
37057: LD_VAR 0 4
37061: PPUSH
37062: CALL_OW 380
37066: GO 37085
// PrepareHuman ( false , i , skill ) ;
37068: LD_INT 0
37070: PPUSH
37071: LD_VAR 0 8
37075: PPUSH
37076: LD_VAR 0 4
37080: PPUSH
37081: CALL_OW 380
// end else
37085: GO 37104
// PrepareHuman ( false , i , skill ) ;
37087: LD_INT 0
37089: PPUSH
37090: LD_VAR 0 8
37094: PPUSH
37095: LD_VAR 0 4
37099: PPUSH
37100: CALL_OW 380
// un := CreateHuman ;
37104: LD_ADDR_VAR 0 14
37108: PUSH
37109: CALL_OW 44
37113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37114: LD_ADDR_VAR 0 7
37118: PUSH
37119: LD_VAR 0 7
37123: PPUSH
37124: LD_INT 1
37126: PPUSH
37127: LD_VAR 0 14
37131: PPUSH
37132: CALL_OW 2
37136: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37137: LD_VAR 0 14
37141: PPUSH
37142: LD_VAR 0 9
37146: PPUSH
37147: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37151: LD_VAR 0 9
37155: PPUSH
37156: CALL_OW 313
37160: PUSH
37161: LD_INT 6
37163: EQUAL
37164: PUSH
37165: LD_VAR 0 9
37169: PPUSH
37170: CALL_OW 266
37174: PUSH
37175: LD_INT 32
37177: PUSH
37178: LD_INT 31
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: IN
37185: OR
37186: IFFALSE 37000
37188: GO 36997
37190: POP
37191: POP
// end else
37192: GO 37574
// for j = 1 to x do
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: DOUBLE
37200: LD_INT 1
37202: DEC
37203: ST_TO_ADDR
37204: LD_VAR 0 13
37208: PUSH
37209: FOR_TO
37210: IFFALSE 37572
// begin InitHc ;
37212: CALL_OW 19
// if not f then
37216: LD_VAR 0 12
37220: NOT
37221: IFFALSE 37310
// begin PrepareHuman ( false , i , skill ) ;
37223: LD_INT 0
37225: PPUSH
37226: LD_VAR 0 8
37230: PPUSH
37231: LD_VAR 0 4
37235: PPUSH
37236: CALL_OW 380
// un := CreateHuman ;
37240: LD_ADDR_VAR 0 14
37244: PUSH
37245: CALL_OW 44
37249: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37250: LD_ADDR_VAR 0 7
37254: PUSH
37255: LD_VAR 0 7
37259: PPUSH
37260: LD_INT 1
37262: PPUSH
37263: LD_VAR 0 14
37267: PPUSH
37268: CALL_OW 2
37272: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37273: LD_VAR 0 14
37277: PPUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 250
37287: PPUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 251
37297: PPUSH
37298: LD_INT 10
37300: PPUSH
37301: LD_INT 0
37303: PPUSH
37304: CALL_OW 50
// continue ;
37308: GO 37209
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37310: LD_VAR 0 12
37314: PUSH
37315: LD_INT 1
37317: ARRAY
37318: PPUSH
37319: CALL_OW 313
37323: PUSH
37324: LD_VAR 0 12
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PPUSH
37333: CALL_OW 266
37337: PUSH
37338: LD_INT 32
37340: PUSH
37341: LD_INT 31
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: IN
37348: AND
37349: PUSH
37350: LD_VAR 0 12
37354: PUSH
37355: LD_INT 1
37357: ARRAY
37358: PPUSH
37359: CALL_OW 313
37363: PUSH
37364: LD_INT 6
37366: EQUAL
37367: OR
37368: IFFALSE 37388
// f := Delete ( f , 1 ) ;
37370: LD_ADDR_VAR 0 12
37374: PUSH
37375: LD_VAR 0 12
37379: PPUSH
37380: LD_INT 1
37382: PPUSH
37383: CALL_OW 3
37387: ST_TO_ADDR
// if not f then
37388: LD_VAR 0 12
37392: NOT
37393: IFFALSE 37411
// begin x := x + 2 ;
37395: LD_ADDR_VAR 0 13
37399: PUSH
37400: LD_VAR 0 13
37404: PUSH
37405: LD_INT 2
37407: PLUS
37408: ST_TO_ADDR
// continue ;
37409: GO 37209
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37411: LD_VAR 0 12
37415: PUSH
37416: LD_INT 1
37418: ARRAY
37419: PPUSH
37420: CALL_OW 266
37424: PUSH
37425: LD_INT 5
37427: EQUAL
37428: IFFALSE 37502
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37430: LD_VAR 0 12
37434: PUSH
37435: LD_INT 1
37437: ARRAY
37438: PPUSH
37439: CALL_OW 313
37443: PUSH
37444: LD_INT 3
37446: LESS
37447: IFFALSE 37483
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37449: LD_INT 0
37451: PPUSH
37452: LD_INT 5
37454: PUSH
37455: LD_INT 8
37457: PUSH
37458: LD_INT 9
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: PUSH
37466: LD_VAR 0 17
37470: ARRAY
37471: PPUSH
37472: LD_VAR 0 4
37476: PPUSH
37477: CALL_OW 380
37481: GO 37500
// PrepareHuman ( false , i , skill ) ;
37483: LD_INT 0
37485: PPUSH
37486: LD_VAR 0 8
37490: PPUSH
37491: LD_VAR 0 4
37495: PPUSH
37496: CALL_OW 380
// end else
37500: GO 37519
// PrepareHuman ( false , i , skill ) ;
37502: LD_INT 0
37504: PPUSH
37505: LD_VAR 0 8
37509: PPUSH
37510: LD_VAR 0 4
37514: PPUSH
37515: CALL_OW 380
// un := CreateHuman ;
37519: LD_ADDR_VAR 0 14
37523: PUSH
37524: CALL_OW 44
37528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37529: LD_ADDR_VAR 0 7
37533: PUSH
37534: LD_VAR 0 7
37538: PPUSH
37539: LD_INT 1
37541: PPUSH
37542: LD_VAR 0 14
37546: PPUSH
37547: CALL_OW 2
37551: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37552: LD_VAR 0 14
37556: PPUSH
37557: LD_VAR 0 12
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PPUSH
37566: CALL_OW 52
// end ;
37570: GO 37209
37572: POP
37573: POP
// end ;
37574: GO 36511
37576: POP
37577: POP
// result := result ^ buildings ;
37578: LD_ADDR_VAR 0 7
37582: PUSH
37583: LD_VAR 0 7
37587: PUSH
37588: LD_VAR 0 18
37592: ADD
37593: ST_TO_ADDR
// end else
37594: GO 37737
// begin for i = 1 to personel do
37596: LD_ADDR_VAR 0 8
37600: PUSH
37601: DOUBLE
37602: LD_INT 1
37604: DEC
37605: ST_TO_ADDR
37606: LD_VAR 0 6
37610: PUSH
37611: FOR_TO
37612: IFFALSE 37735
// begin if i > 4 then
37614: LD_VAR 0 8
37618: PUSH
37619: LD_INT 4
37621: GREATER
37622: IFFALSE 37626
// break ;
37624: GO 37735
// x := personel [ i ] ;
37626: LD_ADDR_VAR 0 13
37630: PUSH
37631: LD_VAR 0 6
37635: PUSH
37636: LD_VAR 0 8
37640: ARRAY
37641: ST_TO_ADDR
// if x = - 1 then
37642: LD_VAR 0 13
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: EQUAL
37651: IFFALSE 37655
// continue ;
37653: GO 37611
// PrepareHuman ( false , i , skill ) ;
37655: LD_INT 0
37657: PPUSH
37658: LD_VAR 0 8
37662: PPUSH
37663: LD_VAR 0 4
37667: PPUSH
37668: CALL_OW 380
// un := CreateHuman ;
37672: LD_ADDR_VAR 0 14
37676: PUSH
37677: CALL_OW 44
37681: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37682: LD_VAR 0 14
37686: PPUSH
37687: LD_VAR 0 1
37691: PPUSH
37692: CALL_OW 250
37696: PPUSH
37697: LD_VAR 0 1
37701: PPUSH
37702: CALL_OW 251
37706: PPUSH
37707: LD_INT 10
37709: PPUSH
37710: LD_INT 0
37712: PPUSH
37713: CALL_OW 50
// result := result ^ un ;
37717: LD_ADDR_VAR 0 7
37721: PUSH
37722: LD_VAR 0 7
37726: PUSH
37727: LD_VAR 0 14
37731: ADD
37732: ST_TO_ADDR
// end ;
37733: GO 37611
37735: POP
37736: POP
// end ; end ;
37737: LD_VAR 0 7
37741: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37742: LD_INT 0
37744: PPUSH
37745: PPUSH
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
// result := false ;
37760: LD_ADDR_VAR 0 3
37764: PUSH
37765: LD_INT 0
37767: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37768: LD_VAR 0 1
37772: NOT
37773: PUSH
37774: LD_VAR 0 1
37778: PPUSH
37779: CALL_OW 266
37783: PUSH
37784: LD_INT 32
37786: PUSH
37787: LD_INT 33
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: IN
37794: NOT
37795: OR
37796: IFFALSE 37800
// exit ;
37798: GO 38939
// nat := GetNation ( tower ) ;
37800: LD_ADDR_VAR 0 12
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 248
37814: ST_TO_ADDR
// side := GetSide ( tower ) ;
37815: LD_ADDR_VAR 0 16
37819: PUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 255
37829: ST_TO_ADDR
// x := GetX ( tower ) ;
37830: LD_ADDR_VAR 0 10
37834: PUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: CALL_OW 250
37844: ST_TO_ADDR
// y := GetY ( tower ) ;
37845: LD_ADDR_VAR 0 11
37849: PUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 251
37859: ST_TO_ADDR
// if not x or not y then
37860: LD_VAR 0 10
37864: NOT
37865: PUSH
37866: LD_VAR 0 11
37870: NOT
37871: OR
37872: IFFALSE 37876
// exit ;
37874: GO 38939
// weapon := 0 ;
37876: LD_ADDR_VAR 0 18
37880: PUSH
37881: LD_INT 0
37883: ST_TO_ADDR
// fac_list := [ ] ;
37884: LD_ADDR_VAR 0 17
37888: PUSH
37889: EMPTY
37890: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37891: LD_ADDR_VAR 0 6
37895: PUSH
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 274
37905: PPUSH
37906: LD_VAR 0 2
37910: PPUSH
37911: LD_INT 0
37913: PPUSH
37914: CALL 35479 0 3
37918: PPUSH
37919: LD_INT 30
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 72
37933: ST_TO_ADDR
// if not factories then
37934: LD_VAR 0 6
37938: NOT
37939: IFFALSE 37943
// exit ;
37941: GO 38939
// for i in factories do
37943: LD_ADDR_VAR 0 8
37947: PUSH
37948: LD_VAR 0 6
37952: PUSH
37953: FOR_IN
37954: IFFALSE 37979
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37956: LD_ADDR_VAR 0 17
37960: PUSH
37961: LD_VAR 0 17
37965: PUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: CALL_OW 478
37975: UNION
37976: ST_TO_ADDR
37977: GO 37953
37979: POP
37980: POP
// if not fac_list then
37981: LD_VAR 0 17
37985: NOT
37986: IFFALSE 37990
// exit ;
37988: GO 38939
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37990: LD_ADDR_VAR 0 5
37994: PUSH
37995: LD_INT 4
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: LD_INT 9
38003: PUSH
38004: LD_INT 10
38006: PUSH
38007: LD_INT 6
38009: PUSH
38010: LD_INT 7
38012: PUSH
38013: LD_INT 11
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 27
38027: PUSH
38028: LD_INT 28
38030: PUSH
38031: LD_INT 26
38033: PUSH
38034: LD_INT 30
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 43
38045: PUSH
38046: LD_INT 44
38048: PUSH
38049: LD_INT 46
38051: PUSH
38052: LD_INT 45
38054: PUSH
38055: LD_INT 47
38057: PUSH
38058: LD_INT 49
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: PUSH
38074: LD_VAR 0 12
38078: ARRAY
38079: ST_TO_ADDR
// for i in list do
38080: LD_ADDR_VAR 0 8
38084: PUSH
38085: LD_VAR 0 5
38089: PUSH
38090: FOR_IN
38091: IFFALSE 38124
// if not i in fac_list then
38093: LD_VAR 0 8
38097: PUSH
38098: LD_VAR 0 17
38102: IN
38103: NOT
38104: IFFALSE 38122
// list := list diff i ;
38106: LD_ADDR_VAR 0 5
38110: PUSH
38111: LD_VAR 0 5
38115: PUSH
38116: LD_VAR 0 8
38120: DIFF
38121: ST_TO_ADDR
38122: GO 38090
38124: POP
38125: POP
// if not list then
38126: LD_VAR 0 5
38130: NOT
38131: IFFALSE 38135
// exit ;
38133: GO 38939
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38135: LD_VAR 0 12
38139: PUSH
38140: LD_INT 3
38142: EQUAL
38143: PUSH
38144: LD_INT 49
38146: PUSH
38147: LD_VAR 0 5
38151: IN
38152: AND
38153: PUSH
38154: LD_INT 31
38156: PPUSH
38157: LD_VAR 0 16
38161: PPUSH
38162: CALL_OW 321
38166: PUSH
38167: LD_INT 2
38169: EQUAL
38170: AND
38171: IFFALSE 38231
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38173: LD_INT 22
38175: PUSH
38176: LD_VAR 0 16
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 35
38187: PUSH
38188: LD_INT 49
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 91
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: LD_INT 10
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: PPUSH
38216: CALL_OW 69
38220: NOT
38221: IFFALSE 38231
// weapon := ru_time_lapser ;
38223: LD_ADDR_VAR 0 18
38227: PUSH
38228: LD_INT 49
38230: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38231: LD_VAR 0 12
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: IN
38246: PUSH
38247: LD_INT 11
38249: PUSH
38250: LD_VAR 0 5
38254: IN
38255: PUSH
38256: LD_INT 30
38258: PUSH
38259: LD_VAR 0 5
38263: IN
38264: OR
38265: AND
38266: PUSH
38267: LD_INT 6
38269: PPUSH
38270: LD_VAR 0 16
38274: PPUSH
38275: CALL_OW 321
38279: PUSH
38280: LD_INT 2
38282: EQUAL
38283: AND
38284: IFFALSE 38449
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38286: LD_INT 22
38288: PUSH
38289: LD_VAR 0 16
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 35
38303: PUSH
38304: LD_INT 11
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 35
38313: PUSH
38314: LD_INT 30
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 91
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: LD_INT 18
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PPUSH
38347: CALL_OW 69
38351: NOT
38352: PUSH
38353: LD_INT 22
38355: PUSH
38356: LD_VAR 0 16
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 30
38370: PUSH
38371: LD_INT 32
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 30
38380: PUSH
38381: LD_INT 33
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 91
38395: PUSH
38396: LD_VAR 0 1
38400: PUSH
38401: LD_INT 12
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: PPUSH
38417: CALL_OW 69
38421: PUSH
38422: LD_INT 2
38424: GREATER
38425: AND
38426: IFFALSE 38449
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38428: LD_ADDR_VAR 0 18
38432: PUSH
38433: LD_INT 11
38435: PUSH
38436: LD_INT 30
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_VAR 0 12
38447: ARRAY
38448: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38449: LD_VAR 0 18
38453: NOT
38454: PUSH
38455: LD_INT 40
38457: PPUSH
38458: LD_VAR 0 16
38462: PPUSH
38463: CALL_OW 321
38467: PUSH
38468: LD_INT 2
38470: EQUAL
38471: AND
38472: PUSH
38473: LD_INT 7
38475: PUSH
38476: LD_VAR 0 5
38480: IN
38481: PUSH
38482: LD_INT 28
38484: PUSH
38485: LD_VAR 0 5
38489: IN
38490: OR
38491: PUSH
38492: LD_INT 45
38494: PUSH
38495: LD_VAR 0 5
38499: IN
38500: OR
38501: AND
38502: IFFALSE 38756
// begin hex := GetHexInfo ( x , y ) ;
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: LD_VAR 0 10
38513: PPUSH
38514: LD_VAR 0 11
38518: PPUSH
38519: CALL_OW 546
38523: ST_TO_ADDR
// if hex [ 1 ] then
38524: LD_VAR 0 4
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: IFFALSE 38536
// exit ;
38534: GO 38939
// height := hex [ 2 ] ;
38536: LD_ADDR_VAR 0 15
38540: PUSH
38541: LD_VAR 0 4
38545: PUSH
38546: LD_INT 2
38548: ARRAY
38549: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38550: LD_ADDR_VAR 0 14
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: LD_INT 5
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: ST_TO_ADDR
// for i in tmp do
38573: LD_ADDR_VAR 0 8
38577: PUSH
38578: LD_VAR 0 14
38582: PUSH
38583: FOR_IN
38584: IFFALSE 38754
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38586: LD_ADDR_VAR 0 9
38590: PUSH
38591: LD_VAR 0 10
38595: PPUSH
38596: LD_VAR 0 8
38600: PPUSH
38601: LD_INT 5
38603: PPUSH
38604: CALL_OW 272
38608: PUSH
38609: LD_VAR 0 11
38613: PPUSH
38614: LD_VAR 0 8
38618: PPUSH
38619: LD_INT 5
38621: PPUSH
38622: CALL_OW 273
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38631: LD_VAR 0 9
38635: PUSH
38636: LD_INT 1
38638: ARRAY
38639: PPUSH
38640: LD_VAR 0 9
38644: PUSH
38645: LD_INT 2
38647: ARRAY
38648: PPUSH
38649: CALL_OW 488
38653: IFFALSE 38752
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_VAR 0 9
38664: PUSH
38665: LD_INT 1
38667: ARRAY
38668: PPUSH
38669: LD_VAR 0 9
38673: PUSH
38674: LD_INT 2
38676: ARRAY
38677: PPUSH
38678: CALL_OW 546
38682: ST_TO_ADDR
// if hex [ 1 ] then
38683: LD_VAR 0 4
38687: PUSH
38688: LD_INT 1
38690: ARRAY
38691: IFFALSE 38695
// continue ;
38693: GO 38583
// h := hex [ 2 ] ;
38695: LD_ADDR_VAR 0 13
38699: PUSH
38700: LD_VAR 0 4
38704: PUSH
38705: LD_INT 2
38707: ARRAY
38708: ST_TO_ADDR
// if h + 7 < height then
38709: LD_VAR 0 13
38713: PUSH
38714: LD_INT 7
38716: PLUS
38717: PUSH
38718: LD_VAR 0 15
38722: LESS
38723: IFFALSE 38752
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38725: LD_ADDR_VAR 0 18
38729: PUSH
38730: LD_INT 7
38732: PUSH
38733: LD_INT 28
38735: PUSH
38736: LD_INT 45
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: PUSH
38744: LD_VAR 0 12
38748: ARRAY
38749: ST_TO_ADDR
// break ;
38750: GO 38754
// end ; end ; end ;
38752: GO 38583
38754: POP
38755: POP
// end ; if not weapon then
38756: LD_VAR 0 18
38760: NOT
38761: IFFALSE 38821
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38763: LD_ADDR_VAR 0 5
38767: PUSH
38768: LD_VAR 0 5
38772: PUSH
38773: LD_INT 11
38775: PUSH
38776: LD_INT 30
38778: PUSH
38779: LD_INT 49
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: DIFF
38787: ST_TO_ADDR
// if not list then
38788: LD_VAR 0 5
38792: NOT
38793: IFFALSE 38797
// exit ;
38795: GO 38939
// weapon := list [ rand ( 1 , list ) ] ;
38797: LD_ADDR_VAR 0 18
38801: PUSH
38802: LD_VAR 0 5
38806: PUSH
38807: LD_INT 1
38809: PPUSH
38810: LD_VAR 0 5
38814: PPUSH
38815: CALL_OW 12
38819: ARRAY
38820: ST_TO_ADDR
// end ; if weapon then
38821: LD_VAR 0 18
38825: IFFALSE 38939
// begin tmp := CostOfWeapon ( weapon ) ;
38827: LD_ADDR_VAR 0 14
38831: PUSH
38832: LD_VAR 0 18
38836: PPUSH
38837: CALL_OW 451
38841: ST_TO_ADDR
// j := GetBase ( tower ) ;
38842: LD_ADDR_VAR 0 9
38846: PUSH
38847: LD_VAR 0 1
38851: PPUSH
38852: CALL_OW 274
38856: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38857: LD_VAR 0 9
38861: PPUSH
38862: LD_INT 1
38864: PPUSH
38865: CALL_OW 275
38869: PUSH
38870: LD_VAR 0 14
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: GREATEREQUAL
38879: PUSH
38880: LD_VAR 0 9
38884: PPUSH
38885: LD_INT 2
38887: PPUSH
38888: CALL_OW 275
38892: PUSH
38893: LD_VAR 0 14
38897: PUSH
38898: LD_INT 2
38900: ARRAY
38901: GREATEREQUAL
38902: AND
38903: PUSH
38904: LD_VAR 0 9
38908: PPUSH
38909: LD_INT 3
38911: PPUSH
38912: CALL_OW 275
38916: PUSH
38917: LD_VAR 0 14
38921: PUSH
38922: LD_INT 3
38924: ARRAY
38925: GREATEREQUAL
38926: AND
38927: IFFALSE 38939
// result := weapon ;
38929: LD_ADDR_VAR 0 3
38933: PUSH
38934: LD_VAR 0 18
38938: ST_TO_ADDR
// end ; end ;
38939: LD_VAR 0 3
38943: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38944: LD_INT 0
38946: PPUSH
38947: PPUSH
// result := true ;
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: ST_TO_ADDR
// if array1 = array2 then
38956: LD_VAR 0 1
38960: PUSH
38961: LD_VAR 0 2
38965: EQUAL
38966: IFFALSE 39026
// begin for i = 1 to array1 do
38968: LD_ADDR_VAR 0 4
38972: PUSH
38973: DOUBLE
38974: LD_INT 1
38976: DEC
38977: ST_TO_ADDR
38978: LD_VAR 0 1
38982: PUSH
38983: FOR_TO
38984: IFFALSE 39022
// if array1 [ i ] <> array2 [ i ] then
38986: LD_VAR 0 1
38990: PUSH
38991: LD_VAR 0 4
38995: ARRAY
38996: PUSH
38997: LD_VAR 0 2
39001: PUSH
39002: LD_VAR 0 4
39006: ARRAY
39007: NONEQUAL
39008: IFFALSE 39020
// begin result := false ;
39010: LD_ADDR_VAR 0 3
39014: PUSH
39015: LD_INT 0
39017: ST_TO_ADDR
// break ;
39018: GO 39022
// end ;
39020: GO 38983
39022: POP
39023: POP
// end else
39024: GO 39034
// result := false ;
39026: LD_ADDR_VAR 0 3
39030: PUSH
39031: LD_INT 0
39033: ST_TO_ADDR
// end ;
39034: LD_VAR 0 3
39038: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
// if not array1 or not array2 then
39043: LD_VAR 0 1
39047: NOT
39048: PUSH
39049: LD_VAR 0 2
39053: NOT
39054: OR
39055: IFFALSE 39059
// exit ;
39057: GO 39123
// result := true ;
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_INT 1
39066: ST_TO_ADDR
// for i = 1 to array1 do
39067: LD_ADDR_VAR 0 4
39071: PUSH
39072: DOUBLE
39073: LD_INT 1
39075: DEC
39076: ST_TO_ADDR
39077: LD_VAR 0 1
39081: PUSH
39082: FOR_TO
39083: IFFALSE 39121
// if array1 [ i ] <> array2 [ i ] then
39085: LD_VAR 0 1
39089: PUSH
39090: LD_VAR 0 4
39094: ARRAY
39095: PUSH
39096: LD_VAR 0 2
39100: PUSH
39101: LD_VAR 0 4
39105: ARRAY
39106: NONEQUAL
39107: IFFALSE 39119
// begin result := false ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_INT 0
39116: ST_TO_ADDR
// break ;
39117: GO 39121
// end ;
39119: GO 39082
39121: POP
39122: POP
// end ;
39123: LD_VAR 0 3
39127: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39128: LD_INT 0
39130: PPUSH
39131: PPUSH
39132: PPUSH
// pom := GetBase ( fac ) ;
39133: LD_ADDR_VAR 0 5
39137: PUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 274
39147: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 1
39160: ARRAY
39161: PPUSH
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 2
39169: ARRAY
39170: PPUSH
39171: LD_VAR 0 2
39175: PUSH
39176: LD_INT 3
39178: ARRAY
39179: PPUSH
39180: LD_VAR 0 2
39184: PUSH
39185: LD_INT 4
39187: ARRAY
39188: PPUSH
39189: CALL_OW 449
39193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39194: LD_ADDR_VAR 0 3
39198: PUSH
39199: LD_VAR 0 5
39203: PPUSH
39204: LD_INT 1
39206: PPUSH
39207: CALL_OW 275
39211: PUSH
39212: LD_VAR 0 4
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: GREATEREQUAL
39221: PUSH
39222: LD_VAR 0 5
39226: PPUSH
39227: LD_INT 2
39229: PPUSH
39230: CALL_OW 275
39234: PUSH
39235: LD_VAR 0 4
39239: PUSH
39240: LD_INT 2
39242: ARRAY
39243: GREATEREQUAL
39244: AND
39245: PUSH
39246: LD_VAR 0 5
39250: PPUSH
39251: LD_INT 3
39253: PPUSH
39254: CALL_OW 275
39258: PUSH
39259: LD_VAR 0 4
39263: PUSH
39264: LD_INT 3
39266: ARRAY
39267: GREATEREQUAL
39268: AND
39269: ST_TO_ADDR
// end ;
39270: LD_VAR 0 3
39274: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
// pom := GetBase ( building ) ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 274
39295: ST_TO_ADDR
// if not pom then
39296: LD_VAR 0 3
39300: NOT
39301: IFFALSE 39305
// exit ;
39303: GO 39475
// btype := GetBType ( building ) ;
39305: LD_ADDR_VAR 0 5
39309: PUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 266
39319: ST_TO_ADDR
// if btype = b_armoury then
39320: LD_VAR 0 5
39324: PUSH
39325: LD_INT 4
39327: EQUAL
39328: IFFALSE 39338
// btype := b_barracks ;
39330: LD_ADDR_VAR 0 5
39334: PUSH
39335: LD_INT 5
39337: ST_TO_ADDR
// if btype = b_depot then
39338: LD_VAR 0 5
39342: PUSH
39343: LD_INT 0
39345: EQUAL
39346: IFFALSE 39356
// btype := b_warehouse ;
39348: LD_ADDR_VAR 0 5
39352: PUSH
39353: LD_INT 1
39355: ST_TO_ADDR
// if btype = b_workshop then
39356: LD_VAR 0 5
39360: PUSH
39361: LD_INT 2
39363: EQUAL
39364: IFFALSE 39374
// btype := b_factory ;
39366: LD_ADDR_VAR 0 5
39370: PUSH
39371: LD_INT 3
39373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39374: LD_ADDR_VAR 0 4
39378: PUSH
39379: LD_VAR 0 5
39383: PPUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 248
39393: PPUSH
39394: CALL_OW 450
39398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39399: LD_ADDR_VAR 0 2
39403: PUSH
39404: LD_VAR 0 3
39408: PPUSH
39409: LD_INT 1
39411: PPUSH
39412: CALL_OW 275
39416: PUSH
39417: LD_VAR 0 4
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: GREATEREQUAL
39426: PUSH
39427: LD_VAR 0 3
39431: PPUSH
39432: LD_INT 2
39434: PPUSH
39435: CALL_OW 275
39439: PUSH
39440: LD_VAR 0 4
39444: PUSH
39445: LD_INT 2
39447: ARRAY
39448: GREATEREQUAL
39449: AND
39450: PUSH
39451: LD_VAR 0 3
39455: PPUSH
39456: LD_INT 3
39458: PPUSH
39459: CALL_OW 275
39463: PUSH
39464: LD_VAR 0 4
39468: PUSH
39469: LD_INT 3
39471: ARRAY
39472: GREATEREQUAL
39473: AND
39474: ST_TO_ADDR
// end ;
39475: LD_VAR 0 2
39479: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39480: LD_INT 0
39482: PPUSH
39483: PPUSH
39484: PPUSH
// pom := GetBase ( building ) ;
39485: LD_ADDR_VAR 0 4
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 274
39499: ST_TO_ADDR
// if not pom then
39500: LD_VAR 0 4
39504: NOT
39505: IFFALSE 39509
// exit ;
39507: GO 39610
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39509: LD_ADDR_VAR 0 5
39513: PUSH
39514: LD_VAR 0 2
39518: PPUSH
39519: LD_VAR 0 1
39523: PPUSH
39524: CALL_OW 248
39528: PPUSH
39529: CALL_OW 450
39533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39534: LD_ADDR_VAR 0 3
39538: PUSH
39539: LD_VAR 0 4
39543: PPUSH
39544: LD_INT 1
39546: PPUSH
39547: CALL_OW 275
39551: PUSH
39552: LD_VAR 0 5
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: GREATEREQUAL
39561: PUSH
39562: LD_VAR 0 4
39566: PPUSH
39567: LD_INT 2
39569: PPUSH
39570: CALL_OW 275
39574: PUSH
39575: LD_VAR 0 5
39579: PUSH
39580: LD_INT 2
39582: ARRAY
39583: GREATEREQUAL
39584: AND
39585: PUSH
39586: LD_VAR 0 4
39590: PPUSH
39591: LD_INT 3
39593: PPUSH
39594: CALL_OW 275
39598: PUSH
39599: LD_VAR 0 5
39603: PUSH
39604: LD_INT 3
39606: ARRAY
39607: GREATEREQUAL
39608: AND
39609: ST_TO_ADDR
// end ;
39610: LD_VAR 0 3
39614: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39615: LD_INT 0
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
// result := false ;
39628: LD_ADDR_VAR 0 8
39632: PUSH
39633: LD_INT 0
39635: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39636: LD_VAR 0 5
39640: NOT
39641: PUSH
39642: LD_VAR 0 1
39646: NOT
39647: OR
39648: PUSH
39649: LD_VAR 0 2
39653: NOT
39654: OR
39655: PUSH
39656: LD_VAR 0 3
39660: NOT
39661: OR
39662: IFFALSE 39666
// exit ;
39664: GO 40480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39666: LD_ADDR_VAR 0 14
39670: PUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: LD_VAR 0 2
39680: PPUSH
39681: LD_VAR 0 3
39685: PPUSH
39686: LD_VAR 0 4
39690: PPUSH
39691: LD_VAR 0 5
39695: PUSH
39696: LD_INT 1
39698: ARRAY
39699: PPUSH
39700: CALL_OW 248
39704: PPUSH
39705: LD_INT 0
39707: PPUSH
39708: CALL 41317 0 6
39712: ST_TO_ADDR
// if not hexes then
39713: LD_VAR 0 14
39717: NOT
39718: IFFALSE 39722
// exit ;
39720: GO 40480
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39722: LD_ADDR_VAR 0 17
39726: PUSH
39727: LD_VAR 0 5
39731: PPUSH
39732: LD_INT 22
39734: PUSH
39735: LD_VAR 0 13
39739: PPUSH
39740: CALL_OW 255
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 30
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PPUSH
39781: CALL_OW 72
39785: ST_TO_ADDR
// for i = 1 to hexes do
39786: LD_ADDR_VAR 0 9
39790: PUSH
39791: DOUBLE
39792: LD_INT 1
39794: DEC
39795: ST_TO_ADDR
39796: LD_VAR 0 14
39800: PUSH
39801: FOR_TO
39802: IFFALSE 40478
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39804: LD_ADDR_VAR 0 13
39808: PUSH
39809: LD_VAR 0 14
39813: PUSH
39814: LD_VAR 0 9
39818: ARRAY
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: PPUSH
39824: LD_VAR 0 14
39828: PUSH
39829: LD_VAR 0 9
39833: ARRAY
39834: PUSH
39835: LD_INT 2
39837: ARRAY
39838: PPUSH
39839: CALL_OW 428
39843: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39844: LD_VAR 0 14
39848: PUSH
39849: LD_VAR 0 9
39853: ARRAY
39854: PUSH
39855: LD_INT 1
39857: ARRAY
39858: PPUSH
39859: LD_VAR 0 14
39863: PUSH
39864: LD_VAR 0 9
39868: ARRAY
39869: PUSH
39870: LD_INT 2
39872: ARRAY
39873: PPUSH
39874: CALL_OW 351
39878: PUSH
39879: LD_VAR 0 14
39883: PUSH
39884: LD_VAR 0 9
39888: ARRAY
39889: PUSH
39890: LD_INT 1
39892: ARRAY
39893: PPUSH
39894: LD_VAR 0 14
39898: PUSH
39899: LD_VAR 0 9
39903: ARRAY
39904: PUSH
39905: LD_INT 2
39907: ARRAY
39908: PPUSH
39909: CALL_OW 488
39913: NOT
39914: OR
39915: PUSH
39916: LD_VAR 0 13
39920: PPUSH
39921: CALL_OW 247
39925: PUSH
39926: LD_INT 3
39928: EQUAL
39929: OR
39930: IFFALSE 39936
// exit ;
39932: POP
39933: POP
39934: GO 40480
// if not tmp then
39936: LD_VAR 0 13
39940: NOT
39941: IFFALSE 39945
// continue ;
39943: GO 39801
// result := true ;
39945: LD_ADDR_VAR 0 8
39949: PUSH
39950: LD_INT 1
39952: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39953: LD_VAR 0 6
39957: PUSH
39958: LD_VAR 0 13
39962: PPUSH
39963: CALL_OW 247
39967: PUSH
39968: LD_INT 2
39970: EQUAL
39971: AND
39972: PUSH
39973: LD_VAR 0 13
39977: PPUSH
39978: CALL_OW 263
39982: PUSH
39983: LD_INT 1
39985: EQUAL
39986: AND
39987: IFFALSE 40151
// begin if IsDrivenBy ( tmp ) then
39989: LD_VAR 0 13
39993: PPUSH
39994: CALL_OW 311
39998: IFFALSE 40002
// continue ;
40000: GO 39801
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40002: LD_VAR 0 6
40006: PPUSH
40007: LD_INT 3
40009: PUSH
40010: LD_INT 60
40012: PUSH
40013: EMPTY
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: LD_INT 55
40025: PUSH
40026: EMPTY
40027: LIST
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PPUSH
40037: CALL_OW 72
40041: IFFALSE 40149
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40043: LD_ADDR_VAR 0 18
40047: PUSH
40048: LD_VAR 0 6
40052: PPUSH
40053: LD_INT 3
40055: PUSH
40056: LD_INT 60
40058: PUSH
40059: EMPTY
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 55
40071: PUSH
40072: EMPTY
40073: LIST
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PPUSH
40083: CALL_OW 72
40087: PUSH
40088: LD_INT 1
40090: ARRAY
40091: ST_TO_ADDR
// if IsInUnit ( driver ) then
40092: LD_VAR 0 18
40096: PPUSH
40097: CALL_OW 310
40101: IFFALSE 40112
// ComExit ( driver ) ;
40103: LD_VAR 0 18
40107: PPUSH
40108: CALL 64501 0 1
// AddComEnterUnit ( driver , tmp ) ;
40112: LD_VAR 0 18
40116: PPUSH
40117: LD_VAR 0 13
40121: PPUSH
40122: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40126: LD_VAR 0 18
40130: PPUSH
40131: LD_VAR 0 7
40135: PPUSH
40136: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40140: LD_VAR 0 18
40144: PPUSH
40145: CALL_OW 181
// end ; continue ;
40149: GO 39801
// end ; if not cleaners or not tmp in cleaners then
40151: LD_VAR 0 6
40155: NOT
40156: PUSH
40157: LD_VAR 0 13
40161: PUSH
40162: LD_VAR 0 6
40166: IN
40167: NOT
40168: OR
40169: IFFALSE 40476
// begin if dep then
40171: LD_VAR 0 17
40175: IFFALSE 40311
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40177: LD_ADDR_VAR 0 16
40181: PUSH
40182: LD_VAR 0 17
40186: PUSH
40187: LD_INT 1
40189: ARRAY
40190: PPUSH
40191: CALL_OW 250
40195: PPUSH
40196: LD_VAR 0 17
40200: PUSH
40201: LD_INT 1
40203: ARRAY
40204: PPUSH
40205: CALL_OW 254
40209: PPUSH
40210: LD_INT 5
40212: PPUSH
40213: CALL_OW 272
40217: PUSH
40218: LD_VAR 0 17
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: CALL_OW 251
40231: PPUSH
40232: LD_VAR 0 17
40236: PUSH
40237: LD_INT 1
40239: ARRAY
40240: PPUSH
40241: CALL_OW 254
40245: PPUSH
40246: LD_INT 5
40248: PPUSH
40249: CALL_OW 273
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40258: LD_VAR 0 16
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PPUSH
40267: LD_VAR 0 16
40271: PUSH
40272: LD_INT 2
40274: ARRAY
40275: PPUSH
40276: CALL_OW 488
40280: IFFALSE 40311
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40282: LD_VAR 0 13
40286: PPUSH
40287: LD_VAR 0 16
40291: PUSH
40292: LD_INT 1
40294: ARRAY
40295: PPUSH
40296: LD_VAR 0 16
40300: PUSH
40301: LD_INT 2
40303: ARRAY
40304: PPUSH
40305: CALL_OW 111
// continue ;
40309: GO 39801
// end ; end ; r := GetDir ( tmp ) ;
40311: LD_ADDR_VAR 0 15
40315: PUSH
40316: LD_VAR 0 13
40320: PPUSH
40321: CALL_OW 254
40325: ST_TO_ADDR
// if r = 5 then
40326: LD_VAR 0 15
40330: PUSH
40331: LD_INT 5
40333: EQUAL
40334: IFFALSE 40344
// r := 0 ;
40336: LD_ADDR_VAR 0 15
40340: PUSH
40341: LD_INT 0
40343: ST_TO_ADDR
// for j = r to 5 do
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: DOUBLE
40350: LD_VAR 0 15
40354: DEC
40355: ST_TO_ADDR
40356: LD_INT 5
40358: PUSH
40359: FOR_TO
40360: IFFALSE 40474
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40362: LD_ADDR_VAR 0 11
40366: PUSH
40367: LD_VAR 0 13
40371: PPUSH
40372: CALL_OW 250
40376: PPUSH
40377: LD_VAR 0 10
40381: PPUSH
40382: LD_INT 2
40384: PPUSH
40385: CALL_OW 272
40389: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40390: LD_ADDR_VAR 0 12
40394: PUSH
40395: LD_VAR 0 13
40399: PPUSH
40400: CALL_OW 251
40404: PPUSH
40405: LD_VAR 0 10
40409: PPUSH
40410: LD_INT 2
40412: PPUSH
40413: CALL_OW 273
40417: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40418: LD_VAR 0 11
40422: PPUSH
40423: LD_VAR 0 12
40427: PPUSH
40428: CALL_OW 488
40432: PUSH
40433: LD_VAR 0 11
40437: PPUSH
40438: LD_VAR 0 12
40442: PPUSH
40443: CALL_OW 428
40447: NOT
40448: AND
40449: IFFALSE 40472
// begin ComMoveXY ( tmp , _x , _y ) ;
40451: LD_VAR 0 13
40455: PPUSH
40456: LD_VAR 0 11
40460: PPUSH
40461: LD_VAR 0 12
40465: PPUSH
40466: CALL_OW 111
// break ;
40470: GO 40474
// end ; end ;
40472: GO 40359
40474: POP
40475: POP
// end ; end ;
40476: GO 39801
40478: POP
40479: POP
// end ;
40480: LD_VAR 0 8
40484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40485: LD_INT 0
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
40491: PPUSH
40492: PPUSH
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
// result := false ;
40497: LD_ADDR_VAR 0 6
40501: PUSH
40502: LD_INT 0
40504: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40505: LD_VAR 0 1
40509: NOT
40510: PUSH
40511: LD_VAR 0 1
40515: PPUSH
40516: CALL_OW 266
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: IN
40531: NOT
40532: OR
40533: PUSH
40534: LD_VAR 0 2
40538: NOT
40539: OR
40540: PUSH
40541: LD_VAR 0 5
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 3
40557: PUSH
40558: LD_INT 4
40560: PUSH
40561: LD_INT 5
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: IN
40572: NOT
40573: OR
40574: PUSH
40575: LD_VAR 0 3
40579: PPUSH
40580: LD_VAR 0 4
40584: PPUSH
40585: CALL_OW 488
40589: NOT
40590: OR
40591: IFFALSE 40595
// exit ;
40593: GO 41312
// pom := GetBase ( depot ) ;
40595: LD_ADDR_VAR 0 10
40599: PUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 274
40609: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40610: LD_ADDR_VAR 0 11
40614: PUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 248
40629: PPUSH
40630: CALL_OW 450
40634: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40635: LD_VAR 0 10
40639: PPUSH
40640: LD_INT 1
40642: PPUSH
40643: CALL_OW 275
40647: PUSH
40648: LD_VAR 0 11
40652: PUSH
40653: LD_INT 1
40655: ARRAY
40656: GREATEREQUAL
40657: PUSH
40658: LD_VAR 0 10
40662: PPUSH
40663: LD_INT 2
40665: PPUSH
40666: CALL_OW 275
40670: PUSH
40671: LD_VAR 0 11
40675: PUSH
40676: LD_INT 2
40678: ARRAY
40679: GREATEREQUAL
40680: AND
40681: PUSH
40682: LD_VAR 0 10
40686: PPUSH
40687: LD_INT 3
40689: PPUSH
40690: CALL_OW 275
40694: PUSH
40695: LD_VAR 0 11
40699: PUSH
40700: LD_INT 3
40702: ARRAY
40703: GREATEREQUAL
40704: AND
40705: NOT
40706: IFFALSE 40710
// exit ;
40708: GO 41312
// if GetBType ( depot ) = b_depot then
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 266
40719: PUSH
40720: LD_INT 0
40722: EQUAL
40723: IFFALSE 40735
// dist := 28 else
40725: LD_ADDR_VAR 0 14
40729: PUSH
40730: LD_INT 28
40732: ST_TO_ADDR
40733: GO 40743
// dist := 36 ;
40735: LD_ADDR_VAR 0 14
40739: PUSH
40740: LD_INT 36
40742: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_VAR 0 3
40752: PPUSH
40753: LD_VAR 0 4
40757: PPUSH
40758: CALL_OW 297
40762: PUSH
40763: LD_VAR 0 14
40767: GREATER
40768: IFFALSE 40772
// exit ;
40770: GO 41312
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40772: LD_ADDR_VAR 0 12
40776: PUSH
40777: LD_VAR 0 2
40781: PPUSH
40782: LD_VAR 0 3
40786: PPUSH
40787: LD_VAR 0 4
40791: PPUSH
40792: LD_VAR 0 5
40796: PPUSH
40797: LD_VAR 0 1
40801: PPUSH
40802: CALL_OW 248
40806: PPUSH
40807: LD_INT 0
40809: PPUSH
40810: CALL 41317 0 6
40814: ST_TO_ADDR
// if not hexes then
40815: LD_VAR 0 12
40819: NOT
40820: IFFALSE 40824
// exit ;
40822: GO 41312
// hex := GetHexInfo ( x , y ) ;
40824: LD_ADDR_VAR 0 15
40828: PUSH
40829: LD_VAR 0 3
40833: PPUSH
40834: LD_VAR 0 4
40838: PPUSH
40839: CALL_OW 546
40843: ST_TO_ADDR
// if hex [ 1 ] then
40844: LD_VAR 0 15
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: IFFALSE 40856
// exit ;
40854: GO 41312
// height := hex [ 2 ] ;
40856: LD_ADDR_VAR 0 13
40860: PUSH
40861: LD_VAR 0 15
40865: PUSH
40866: LD_INT 2
40868: ARRAY
40869: ST_TO_ADDR
// for i = 1 to hexes do
40870: LD_ADDR_VAR 0 7
40874: PUSH
40875: DOUBLE
40876: LD_INT 1
40878: DEC
40879: ST_TO_ADDR
40880: LD_VAR 0 12
40884: PUSH
40885: FOR_TO
40886: IFFALSE 41216
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40888: LD_VAR 0 12
40892: PUSH
40893: LD_VAR 0 7
40897: ARRAY
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PPUSH
40903: LD_VAR 0 12
40907: PUSH
40908: LD_VAR 0 7
40912: ARRAY
40913: PUSH
40914: LD_INT 2
40916: ARRAY
40917: PPUSH
40918: CALL_OW 488
40922: NOT
40923: PUSH
40924: LD_VAR 0 12
40928: PUSH
40929: LD_VAR 0 7
40933: ARRAY
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: PPUSH
40939: LD_VAR 0 12
40943: PUSH
40944: LD_VAR 0 7
40948: ARRAY
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: PPUSH
40954: CALL_OW 428
40958: PUSH
40959: LD_INT 0
40961: GREATER
40962: OR
40963: PUSH
40964: LD_VAR 0 12
40968: PUSH
40969: LD_VAR 0 7
40973: ARRAY
40974: PUSH
40975: LD_INT 1
40977: ARRAY
40978: PPUSH
40979: LD_VAR 0 12
40983: PUSH
40984: LD_VAR 0 7
40988: ARRAY
40989: PUSH
40990: LD_INT 2
40992: ARRAY
40993: PPUSH
40994: CALL_OW 351
40998: OR
40999: IFFALSE 41005
// exit ;
41001: POP
41002: POP
41003: GO 41312
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41005: LD_ADDR_VAR 0 8
41009: PUSH
41010: LD_VAR 0 12
41014: PUSH
41015: LD_VAR 0 7
41019: ARRAY
41020: PUSH
41021: LD_INT 1
41023: ARRAY
41024: PPUSH
41025: LD_VAR 0 12
41029: PUSH
41030: LD_VAR 0 7
41034: ARRAY
41035: PUSH
41036: LD_INT 2
41038: ARRAY
41039: PPUSH
41040: CALL_OW 546
41044: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41045: LD_VAR 0 8
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PUSH
41054: LD_VAR 0 8
41058: PUSH
41059: LD_INT 2
41061: ARRAY
41062: PUSH
41063: LD_VAR 0 13
41067: PUSH
41068: LD_INT 2
41070: PLUS
41071: GREATER
41072: OR
41073: PUSH
41074: LD_VAR 0 8
41078: PUSH
41079: LD_INT 2
41081: ARRAY
41082: PUSH
41083: LD_VAR 0 13
41087: PUSH
41088: LD_INT 2
41090: MINUS
41091: LESS
41092: OR
41093: PUSH
41094: LD_VAR 0 8
41098: PUSH
41099: LD_INT 3
41101: ARRAY
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 8
41108: PUSH
41109: LD_INT 9
41111: PUSH
41112: LD_INT 10
41114: PUSH
41115: LD_INT 11
41117: PUSH
41118: LD_INT 12
41120: PUSH
41121: LD_INT 13
41123: PUSH
41124: LD_INT 16
41126: PUSH
41127: LD_INT 17
41129: PUSH
41130: LD_INT 18
41132: PUSH
41133: LD_INT 19
41135: PUSH
41136: LD_INT 20
41138: PUSH
41139: LD_INT 21
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: IN
41157: NOT
41158: OR
41159: PUSH
41160: LD_VAR 0 8
41164: PUSH
41165: LD_INT 5
41167: ARRAY
41168: NOT
41169: OR
41170: PUSH
41171: LD_VAR 0 8
41175: PUSH
41176: LD_INT 6
41178: ARRAY
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 7
41188: PUSH
41189: LD_INT 9
41191: PUSH
41192: LD_INT 10
41194: PUSH
41195: LD_INT 11
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: IN
41206: NOT
41207: OR
41208: IFFALSE 41214
// exit ;
41210: POP
41211: POP
41212: GO 41312
// end ;
41214: GO 40885
41216: POP
41217: POP
// side := GetSide ( depot ) ;
41218: LD_ADDR_VAR 0 9
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 255
41232: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41233: LD_VAR 0 9
41237: PPUSH
41238: LD_VAR 0 3
41242: PPUSH
41243: LD_VAR 0 4
41247: PPUSH
41248: LD_INT 20
41250: PPUSH
41251: CALL 33633 0 4
41255: PUSH
41256: LD_INT 4
41258: ARRAY
41259: IFFALSE 41263
// exit ;
41261: GO 41312
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41263: LD_VAR 0 2
41267: PUSH
41268: LD_INT 29
41270: PUSH
41271: LD_INT 30
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: IN
41278: PUSH
41279: LD_VAR 0 3
41283: PPUSH
41284: LD_VAR 0 4
41288: PPUSH
41289: LD_VAR 0 9
41293: PPUSH
41294: CALL_OW 440
41298: NOT
41299: AND
41300: IFFALSE 41304
// exit ;
41302: GO 41312
// result := true ;
41304: LD_ADDR_VAR 0 6
41308: PUSH
41309: LD_INT 1
41311: ST_TO_ADDR
// end ;
41312: LD_VAR 0 6
41316: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41317: LD_INT 0
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
// result = [ ] ;
41377: LD_ADDR_VAR 0 7
41381: PUSH
41382: EMPTY
41383: ST_TO_ADDR
// temp_list = [ ] ;
41384: LD_ADDR_VAR 0 9
41388: PUSH
41389: EMPTY
41390: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41391: LD_VAR 0 4
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 3
41407: PUSH
41408: LD_INT 4
41410: PUSH
41411: LD_INT 5
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: IN
41422: NOT
41423: PUSH
41424: LD_VAR 0 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: IN
41439: PUSH
41440: LD_VAR 0 5
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: IN
41459: NOT
41460: AND
41461: OR
41462: IFFALSE 41466
// exit ;
41464: GO 59857
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41466: LD_VAR 0 1
41470: PUSH
41471: LD_INT 6
41473: PUSH
41474: LD_INT 7
41476: PUSH
41477: LD_INT 8
41479: PUSH
41480: LD_INT 13
41482: PUSH
41483: LD_INT 12
41485: PUSH
41486: LD_INT 15
41488: PUSH
41489: LD_INT 11
41491: PUSH
41492: LD_INT 14
41494: PUSH
41495: LD_INT 10
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: IN
41509: IFFALSE 41519
// btype = b_lab ;
41511: LD_ADDR_VAR 0 1
41515: PUSH
41516: LD_INT 6
41518: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41519: LD_VAR 0 6
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: IN
41538: NOT
41539: PUSH
41540: LD_VAR 0 1
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: LD_INT 6
41559: PUSH
41560: LD_INT 36
41562: PUSH
41563: LD_INT 4
41565: PUSH
41566: LD_INT 5
41568: PUSH
41569: LD_INT 31
41571: PUSH
41572: LD_INT 32
41574: PUSH
41575: LD_INT 33
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: IN
41591: NOT
41592: PUSH
41593: LD_VAR 0 6
41597: PUSH
41598: LD_INT 1
41600: EQUAL
41601: AND
41602: OR
41603: PUSH
41604: LD_VAR 0 1
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: IN
41619: NOT
41620: PUSH
41621: LD_VAR 0 6
41625: PUSH
41626: LD_INT 2
41628: EQUAL
41629: AND
41630: OR
41631: IFFALSE 41641
// mode = 0 ;
41633: LD_ADDR_VAR 0 6
41637: PUSH
41638: LD_INT 0
41640: ST_TO_ADDR
// case mode of 0 :
41641: LD_VAR 0 6
41645: PUSH
41646: LD_INT 0
41648: DOUBLE
41649: EQUAL
41650: IFTRUE 41654
41652: GO 53107
41654: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41655: LD_ADDR_VAR 0 11
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41848: LD_ADDR_VAR 0 12
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 3
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42044: LD_ADDR_VAR 0 13
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42243: LD_ADDR_VAR 0 14
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42439: LD_ADDR_VAR 0 15
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42632: LD_ADDR_VAR 0 16
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42825: LD_ADDR_VAR 0 17
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43055: LD_ADDR_VAR 0 18
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: NEG
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43285: LD_ADDR_VAR 0 19
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43515: LD_ADDR_VAR 0 20
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43745: LD_ADDR_VAR 0 21
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43975: LD_ADDR_VAR 0 22
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44205: LD_ADDR_VAR 0 23
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44485: LD_ADDR_VAR 0 24
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 3
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44761: LD_ADDR_VAR 0 25
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 3
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45035: LD_ADDR_VAR 0 26
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45311: LD_ADDR_VAR 0 27
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45591: LD_ADDR_VAR 0 28
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 3
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45873: LD_ADDR_VAR 0 29
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46152: LD_ADDR_VAR 0 30
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46430: LD_ADDR_VAR 0 31
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46708: LD_ADDR_VAR 0 32
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46986: LD_ADDR_VAR 0 33
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47265: LD_ADDR_VAR 0 34
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47545: LD_ADDR_VAR 0 35
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47657: LD_ADDR_VAR 0 36
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47769: LD_ADDR_VAR 0 37
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47881: LD_ADDR_VAR 0 38
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47993: LD_ADDR_VAR 0 39
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48105: LD_ADDR_VAR 0 40
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48217: LD_ADDR_VAR 0 41
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 3
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48567: LD_ADDR_VAR 0 42
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48917: LD_ADDR_VAR 0 43
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49265: LD_ADDR_VAR 0 44
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 3
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49615: LD_ADDR_VAR 0 45
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49965: LD_ADDR_VAR 0 46
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50313: LD_ADDR_VAR 0 47
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50464: LD_ADDR_VAR 0 48
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50611: LD_ADDR_VAR 0 49
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50755: LD_ADDR_VAR 0 50
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50899: LD_ADDR_VAR 0 51
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51046: LD_ADDR_VAR 0 52
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51197: LD_ADDR_VAR 0 53
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51427: LD_ADDR_VAR 0 54
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51657: LD_ADDR_VAR 0 55
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51887: LD_ADDR_VAR 0 56
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52117: LD_ADDR_VAR 0 57
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52347: LD_ADDR_VAR 0 58
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52577: LD_ADDR_VAR 0 59
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52665: LD_ADDR_VAR 0 60
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52753: LD_ADDR_VAR 0 61
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52841: LD_ADDR_VAR 0 62
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52929: LD_ADDR_VAR 0 63
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53017: LD_ADDR_VAR 0 64
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// end ; 1 :
53105: GO 59002
53107: LD_INT 1
53109: DOUBLE
53110: EQUAL
53111: IFTRUE 53115
53113: GO 55738
53115: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53116: LD_ADDR_VAR 0 11
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53160: LD_ADDR_VAR 0 12
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53201: LD_ADDR_VAR 0 13
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53241: LD_ADDR_VAR 0 14
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 15
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53326: LD_ADDR_VAR 0 16
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53372: LD_ADDR_VAR 0 17
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53416: LD_ADDR_VAR 0 18
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53457: LD_ADDR_VAR 0 19
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53497: LD_ADDR_VAR 0 20
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 3
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53538: LD_ADDR_VAR 0 21
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53582: LD_ADDR_VAR 0 22
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 3
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53628: LD_ADDR_VAR 0 23
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 4
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53672: LD_ADDR_VAR 0 24
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53713: LD_ADDR_VAR 0 25
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53753: LD_ADDR_VAR 0 26
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 4
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53794: LD_ADDR_VAR 0 27
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53838: LD_ADDR_VAR 0 28
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: NEG
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53884: LD_ADDR_VAR 0 29
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 4
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 5
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 5
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 4
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 6
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 6
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 5
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54039: LD_ADDR_VAR 0 30
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 4
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 5
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 5
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 5
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 6
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 6
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54182: LD_ADDR_VAR 0 31
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 4
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: LD_INT 5
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: LD_INT 5
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 6
54279: PUSH
54280: LD_INT 5
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 6
54289: PUSH
54290: LD_INT 6
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: LD_INT 6
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54321: LD_ADDR_VAR 0 32
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 4
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 5
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 6
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 6
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54464: LD_ADDR_VAR 0 33
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 4
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 4
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 5
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 5
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 5
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 6
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 6
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54619: LD_ADDR_VAR 0 34
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 4
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 4
54698: NEG
54699: PUSH
54700: LD_INT 5
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: LD_INT 4
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 5
54722: NEG
54723: PUSH
54724: LD_INT 5
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 5
54734: NEG
54735: PUSH
54736: LD_INT 6
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 6
54746: NEG
54747: PUSH
54748: LD_INT 5
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 6
54758: NEG
54759: PUSH
54760: LD_INT 6
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54782: LD_ADDR_VAR 0 41
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54826: LD_ADDR_VAR 0 42
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54867: LD_ADDR_VAR 0 43
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54907: LD_ADDR_VAR 0 44
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54948: LD_ADDR_VAR 0 45
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54992: LD_ADDR_VAR 0 46
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55038: LD_ADDR_VAR 0 47
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55071: LD_ADDR_VAR 0 48
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55102: LD_ADDR_VAR 0 49
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55131: LD_ADDR_VAR 0 50
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55160: LD_ADDR_VAR 0 51
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55191: LD_ADDR_VAR 0 52
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55224: LD_ADDR_VAR 0 53
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55268: LD_ADDR_VAR 0 54
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55309: LD_ADDR_VAR 0 55
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55349: LD_ADDR_VAR 0 56
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55390: LD_ADDR_VAR 0 57
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55434: LD_ADDR_VAR 0 58
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55480: LD_ADDR_VAR 0 59
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55524: LD_ADDR_VAR 0 60
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55565: LD_ADDR_VAR 0 61
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55605: LD_ADDR_VAR 0 62
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55646: LD_ADDR_VAR 0 63
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55690: LD_ADDR_VAR 0 64
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// end ; 2 :
55736: GO 59002
55738: LD_INT 2
55740: DOUBLE
55741: EQUAL
55742: IFTRUE 55746
55744: GO 59001
55746: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55747: LD_ADDR_VAR 0 29
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 5
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 4
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 4
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 4
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 5
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 5
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 4
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: LD_INT 5
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: NEG
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 5
56192: NEG
56193: PUSH
56194: LD_INT 4
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 5
56204: NEG
56205: PUSH
56206: LD_INT 5
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 5
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 5
56228: NEG
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56285: LD_ADDR_VAR 0 30
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 5
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 5
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 4
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 4
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 4
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 5
56531: NEG
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: NEG
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 5
56554: NEG
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: LD_INT 4
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: NEG
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: LD_INT 4
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 4
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 4
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 5
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 5
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 5
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56832: LD_ADDR_VAR 0 31
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 5
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 4
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 5
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 4
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: NEG
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: LD_INT 4
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 4
57046: NEG
57047: PUSH
57048: LD_INT 5
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 4
57082: NEG
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 5
57094: NEG
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 5
57106: NEG
57107: PUSH
57108: LD_INT 5
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 4
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: LD_INT 4
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 4
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 5
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 5
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 5
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57382: LD_ADDR_VAR 0 32
57386: PUSH
57387: LD_INT 4
57389: NEG
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 4
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 5
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 4
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 4
57563: NEG
57564: PUSH
57565: LD_INT 4
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 5
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 5
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 4
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 4
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 5
57814: PUSH
57815: LD_INT 4
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 5
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: LD_INT 5
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57929: LD_ADDR_VAR 0 33
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 4
57948: NEG
57949: PUSH
57950: LD_INT 5
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 5
57996: NEG
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 5
58008: NEG
58009: PUSH
58010: LD_INT 5
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: LD_INT 5
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 5
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 4
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 4
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 4
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 5
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 5
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 5
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 4
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58467: LD_ADDR_VAR 0 34
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 5
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: LD_INT 5
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 4
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 4
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 5
58689: PUSH
58690: LD_INT 4
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 5
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: LD_INT 5
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 5
58739: PUSH
58740: LD_INT 3
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 5
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 4
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 4
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 5
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 5
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: ST_TO_ADDR
// end ; end ;
58999: GO 59002
59001: POP
// case btype of b_depot , b_warehouse :
59002: LD_VAR 0 1
59006: PUSH
59007: LD_INT 0
59009: DOUBLE
59010: EQUAL
59011: IFTRUE 59021
59013: LD_INT 1
59015: DOUBLE
59016: EQUAL
59017: IFTRUE 59021
59019: GO 59222
59021: POP
// case nation of nation_american :
59022: LD_VAR 0 5
59026: PUSH
59027: LD_INT 1
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59091
59035: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59036: LD_ADDR_VAR 0 9
59040: PUSH
59041: LD_VAR 0 11
59045: PUSH
59046: LD_VAR 0 12
59050: PUSH
59051: LD_VAR 0 13
59055: PUSH
59056: LD_VAR 0 14
59060: PUSH
59061: LD_VAR 0 15
59065: PUSH
59066: LD_VAR 0 16
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: PUSH
59079: LD_VAR 0 4
59083: PUSH
59084: LD_INT 1
59086: PLUS
59087: ARRAY
59088: ST_TO_ADDR
59089: GO 59220
59091: LD_INT 2
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59099
59097: GO 59155
59099: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59100: LD_ADDR_VAR 0 9
59104: PUSH
59105: LD_VAR 0 17
59109: PUSH
59110: LD_VAR 0 18
59114: PUSH
59115: LD_VAR 0 19
59119: PUSH
59120: LD_VAR 0 20
59124: PUSH
59125: LD_VAR 0 21
59129: PUSH
59130: LD_VAR 0 22
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: PUSH
59143: LD_VAR 0 4
59147: PUSH
59148: LD_INT 1
59150: PLUS
59151: ARRAY
59152: ST_TO_ADDR
59153: GO 59220
59155: LD_INT 3
59157: DOUBLE
59158: EQUAL
59159: IFTRUE 59163
59161: GO 59219
59163: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59164: LD_ADDR_VAR 0 9
59168: PUSH
59169: LD_VAR 0 23
59173: PUSH
59174: LD_VAR 0 24
59178: PUSH
59179: LD_VAR 0 25
59183: PUSH
59184: LD_VAR 0 26
59188: PUSH
59189: LD_VAR 0 27
59193: PUSH
59194: LD_VAR 0 28
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: PUSH
59207: LD_VAR 0 4
59211: PUSH
59212: LD_INT 1
59214: PLUS
59215: ARRAY
59216: ST_TO_ADDR
59217: GO 59220
59219: POP
59220: GO 59775
59222: LD_INT 2
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59236
59228: LD_INT 3
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59236
59234: GO 59292
59236: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59237: LD_ADDR_VAR 0 9
59241: PUSH
59242: LD_VAR 0 29
59246: PUSH
59247: LD_VAR 0 30
59251: PUSH
59252: LD_VAR 0 31
59256: PUSH
59257: LD_VAR 0 32
59261: PUSH
59262: LD_VAR 0 33
59266: PUSH
59267: LD_VAR 0 34
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: PUSH
59280: LD_VAR 0 4
59284: PUSH
59285: LD_INT 1
59287: PLUS
59288: ARRAY
59289: ST_TO_ADDR
59290: GO 59775
59292: LD_INT 16
59294: DOUBLE
59295: EQUAL
59296: IFTRUE 59354
59298: LD_INT 17
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59354
59304: LD_INT 18
59306: DOUBLE
59307: EQUAL
59308: IFTRUE 59354
59310: LD_INT 19
59312: DOUBLE
59313: EQUAL
59314: IFTRUE 59354
59316: LD_INT 22
59318: DOUBLE
59319: EQUAL
59320: IFTRUE 59354
59322: LD_INT 20
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59354
59328: LD_INT 21
59330: DOUBLE
59331: EQUAL
59332: IFTRUE 59354
59334: LD_INT 23
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59354
59340: LD_INT 24
59342: DOUBLE
59343: EQUAL
59344: IFTRUE 59354
59346: LD_INT 25
59348: DOUBLE
59349: EQUAL
59350: IFTRUE 59354
59352: GO 59410
59354: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59355: LD_ADDR_VAR 0 9
59359: PUSH
59360: LD_VAR 0 35
59364: PUSH
59365: LD_VAR 0 36
59369: PUSH
59370: LD_VAR 0 37
59374: PUSH
59375: LD_VAR 0 38
59379: PUSH
59380: LD_VAR 0 39
59384: PUSH
59385: LD_VAR 0 40
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: PUSH
59398: LD_VAR 0 4
59402: PUSH
59403: LD_INT 1
59405: PLUS
59406: ARRAY
59407: ST_TO_ADDR
59408: GO 59775
59410: LD_INT 6
59412: DOUBLE
59413: EQUAL
59414: IFTRUE 59466
59416: LD_INT 7
59418: DOUBLE
59419: EQUAL
59420: IFTRUE 59466
59422: LD_INT 8
59424: DOUBLE
59425: EQUAL
59426: IFTRUE 59466
59428: LD_INT 13
59430: DOUBLE
59431: EQUAL
59432: IFTRUE 59466
59434: LD_INT 12
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59466
59440: LD_INT 15
59442: DOUBLE
59443: EQUAL
59444: IFTRUE 59466
59446: LD_INT 11
59448: DOUBLE
59449: EQUAL
59450: IFTRUE 59466
59452: LD_INT 14
59454: DOUBLE
59455: EQUAL
59456: IFTRUE 59466
59458: LD_INT 10
59460: DOUBLE
59461: EQUAL
59462: IFTRUE 59466
59464: GO 59522
59466: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59467: LD_ADDR_VAR 0 9
59471: PUSH
59472: LD_VAR 0 41
59476: PUSH
59477: LD_VAR 0 42
59481: PUSH
59482: LD_VAR 0 43
59486: PUSH
59487: LD_VAR 0 44
59491: PUSH
59492: LD_VAR 0 45
59496: PUSH
59497: LD_VAR 0 46
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: PUSH
59510: LD_VAR 0 4
59514: PUSH
59515: LD_INT 1
59517: PLUS
59518: ARRAY
59519: ST_TO_ADDR
59520: GO 59775
59522: LD_INT 36
59524: DOUBLE
59525: EQUAL
59526: IFTRUE 59530
59528: GO 59586
59530: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59531: LD_ADDR_VAR 0 9
59535: PUSH
59536: LD_VAR 0 47
59540: PUSH
59541: LD_VAR 0 48
59545: PUSH
59546: LD_VAR 0 49
59550: PUSH
59551: LD_VAR 0 50
59555: PUSH
59556: LD_VAR 0 51
59560: PUSH
59561: LD_VAR 0 52
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: PUSH
59574: LD_VAR 0 4
59578: PUSH
59579: LD_INT 1
59581: PLUS
59582: ARRAY
59583: ST_TO_ADDR
59584: GO 59775
59586: LD_INT 4
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59612
59592: LD_INT 5
59594: DOUBLE
59595: EQUAL
59596: IFTRUE 59612
59598: LD_INT 34
59600: DOUBLE
59601: EQUAL
59602: IFTRUE 59612
59604: LD_INT 37
59606: DOUBLE
59607: EQUAL
59608: IFTRUE 59612
59610: GO 59668
59612: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59613: LD_ADDR_VAR 0 9
59617: PUSH
59618: LD_VAR 0 53
59622: PUSH
59623: LD_VAR 0 54
59627: PUSH
59628: LD_VAR 0 55
59632: PUSH
59633: LD_VAR 0 56
59637: PUSH
59638: LD_VAR 0 57
59642: PUSH
59643: LD_VAR 0 58
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: PUSH
59656: LD_VAR 0 4
59660: PUSH
59661: LD_INT 1
59663: PLUS
59664: ARRAY
59665: ST_TO_ADDR
59666: GO 59775
59668: LD_INT 31
59670: DOUBLE
59671: EQUAL
59672: IFTRUE 59718
59674: LD_INT 32
59676: DOUBLE
59677: EQUAL
59678: IFTRUE 59718
59680: LD_INT 33
59682: DOUBLE
59683: EQUAL
59684: IFTRUE 59718
59686: LD_INT 27
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59718
59692: LD_INT 26
59694: DOUBLE
59695: EQUAL
59696: IFTRUE 59718
59698: LD_INT 28
59700: DOUBLE
59701: EQUAL
59702: IFTRUE 59718
59704: LD_INT 29
59706: DOUBLE
59707: EQUAL
59708: IFTRUE 59718
59710: LD_INT 30
59712: DOUBLE
59713: EQUAL
59714: IFTRUE 59718
59716: GO 59774
59718: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59719: LD_ADDR_VAR 0 9
59723: PUSH
59724: LD_VAR 0 59
59728: PUSH
59729: LD_VAR 0 60
59733: PUSH
59734: LD_VAR 0 61
59738: PUSH
59739: LD_VAR 0 62
59743: PUSH
59744: LD_VAR 0 63
59748: PUSH
59749: LD_VAR 0 64
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: PUSH
59762: LD_VAR 0 4
59766: PUSH
59767: LD_INT 1
59769: PLUS
59770: ARRAY
59771: ST_TO_ADDR
59772: GO 59775
59774: POP
// temp_list2 = [ ] ;
59775: LD_ADDR_VAR 0 10
59779: PUSH
59780: EMPTY
59781: ST_TO_ADDR
// for i in temp_list do
59782: LD_ADDR_VAR 0 8
59786: PUSH
59787: LD_VAR 0 9
59791: PUSH
59792: FOR_IN
59793: IFFALSE 59845
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59795: LD_ADDR_VAR 0 10
59799: PUSH
59800: LD_VAR 0 10
59804: PUSH
59805: LD_VAR 0 8
59809: PUSH
59810: LD_INT 1
59812: ARRAY
59813: PUSH
59814: LD_VAR 0 2
59818: PLUS
59819: PUSH
59820: LD_VAR 0 8
59824: PUSH
59825: LD_INT 2
59827: ARRAY
59828: PUSH
59829: LD_VAR 0 3
59833: PLUS
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: ADD
59842: ST_TO_ADDR
59843: GO 59792
59845: POP
59846: POP
// result = temp_list2 ;
59847: LD_ADDR_VAR 0 7
59851: PUSH
59852: LD_VAR 0 10
59856: ST_TO_ADDR
// end ;
59857: LD_VAR 0 7
59861: RET
// export function EnemyInRange ( unit , dist ) ; begin
59862: LD_INT 0
59864: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59865: LD_ADDR_VAR 0 3
59869: PUSH
59870: LD_VAR 0 1
59874: PPUSH
59875: CALL_OW 255
59879: PPUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: CALL_OW 250
59889: PPUSH
59890: LD_VAR 0 1
59894: PPUSH
59895: CALL_OW 251
59899: PPUSH
59900: LD_VAR 0 2
59904: PPUSH
59905: CALL 33633 0 4
59909: PUSH
59910: LD_INT 4
59912: ARRAY
59913: ST_TO_ADDR
// end ;
59914: LD_VAR 0 3
59918: RET
// export function PlayerSeeMe ( unit ) ; begin
59919: LD_INT 0
59921: PPUSH
// result := See ( your_side , unit ) ;
59922: LD_ADDR_VAR 0 2
59926: PUSH
59927: LD_OWVAR 2
59931: PPUSH
59932: LD_VAR 0 1
59936: PPUSH
59937: CALL_OW 292
59941: ST_TO_ADDR
// end ;
59942: LD_VAR 0 2
59946: RET
// export function ReverseDir ( unit ) ; begin
59947: LD_INT 0
59949: PPUSH
// if not unit then
59950: LD_VAR 0 1
59954: NOT
59955: IFFALSE 59959
// exit ;
59957: GO 59982
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_VAR 0 1
59968: PPUSH
59969: CALL_OW 254
59973: PUSH
59974: LD_INT 3
59976: PLUS
59977: PUSH
59978: LD_INT 6
59980: MOD
59981: ST_TO_ADDR
// end ;
59982: LD_VAR 0 2
59986: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59987: LD_INT 0
59989: PPUSH
59990: PPUSH
59991: PPUSH
59992: PPUSH
59993: PPUSH
// if not hexes then
59994: LD_VAR 0 2
59998: NOT
59999: IFFALSE 60003
// exit ;
60001: GO 60151
// dist := 9999 ;
60003: LD_ADDR_VAR 0 5
60007: PUSH
60008: LD_INT 9999
60010: ST_TO_ADDR
// for i = 1 to hexes do
60011: LD_ADDR_VAR 0 4
60015: PUSH
60016: DOUBLE
60017: LD_INT 1
60019: DEC
60020: ST_TO_ADDR
60021: LD_VAR 0 2
60025: PUSH
60026: FOR_TO
60027: IFFALSE 60139
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60029: LD_VAR 0 1
60033: PPUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_VAR 0 4
60043: ARRAY
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: LD_VAR 0 2
60053: PUSH
60054: LD_VAR 0 4
60058: ARRAY
60059: PUSH
60060: LD_INT 2
60062: ARRAY
60063: PPUSH
60064: CALL_OW 297
60068: PUSH
60069: LD_VAR 0 5
60073: LESS
60074: IFFALSE 60137
// begin hex := hexes [ i ] ;
60076: LD_ADDR_VAR 0 7
60080: PUSH
60081: LD_VAR 0 2
60085: PUSH
60086: LD_VAR 0 4
60090: ARRAY
60091: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60092: LD_ADDR_VAR 0 5
60096: PUSH
60097: LD_VAR 0 1
60101: PPUSH
60102: LD_VAR 0 2
60106: PUSH
60107: LD_VAR 0 4
60111: ARRAY
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PPUSH
60117: LD_VAR 0 2
60121: PUSH
60122: LD_VAR 0 4
60126: ARRAY
60127: PUSH
60128: LD_INT 2
60130: ARRAY
60131: PPUSH
60132: CALL_OW 297
60136: ST_TO_ADDR
// end ; end ;
60137: GO 60026
60139: POP
60140: POP
// result := hex ;
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: LD_VAR 0 7
60150: ST_TO_ADDR
// end ;
60151: LD_VAR 0 3
60155: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60156: LD_INT 0
60158: PPUSH
60159: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60160: LD_VAR 0 1
60164: NOT
60165: PUSH
60166: LD_VAR 0 1
60170: PUSH
60171: LD_INT 21
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 23
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PPUSH
60195: CALL_OW 69
60199: IN
60200: NOT
60201: OR
60202: IFFALSE 60206
// exit ;
60204: GO 60253
// for i = 1 to 3 do
60206: LD_ADDR_VAR 0 3
60210: PUSH
60211: DOUBLE
60212: LD_INT 1
60214: DEC
60215: ST_TO_ADDR
60216: LD_INT 3
60218: PUSH
60219: FOR_TO
60220: IFFALSE 60251
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL_OW 250
60231: PPUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 251
60241: PPUSH
60242: LD_INT 1
60244: PPUSH
60245: CALL_OW 453
60249: GO 60219
60251: POP
60252: POP
// end ;
60253: LD_VAR 0 2
60257: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60258: LD_INT 0
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60266: LD_VAR 0 1
60270: NOT
60271: PUSH
60272: LD_VAR 0 2
60276: NOT
60277: OR
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 314
60288: OR
60289: IFFALSE 60293
// exit ;
60291: GO 60734
// x := GetX ( enemy_unit ) ;
60293: LD_ADDR_VAR 0 7
60297: PUSH
60298: LD_VAR 0 2
60302: PPUSH
60303: CALL_OW 250
60307: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60308: LD_ADDR_VAR 0 8
60312: PUSH
60313: LD_VAR 0 2
60317: PPUSH
60318: CALL_OW 251
60322: ST_TO_ADDR
// if not x or not y then
60323: LD_VAR 0 7
60327: NOT
60328: PUSH
60329: LD_VAR 0 8
60333: NOT
60334: OR
60335: IFFALSE 60339
// exit ;
60337: GO 60734
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60339: LD_ADDR_VAR 0 6
60343: PUSH
60344: LD_VAR 0 7
60348: PPUSH
60349: LD_INT 0
60351: PPUSH
60352: LD_INT 4
60354: PPUSH
60355: CALL_OW 272
60359: PUSH
60360: LD_VAR 0 8
60364: PPUSH
60365: LD_INT 0
60367: PPUSH
60368: LD_INT 4
60370: PPUSH
60371: CALL_OW 273
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_VAR 0 7
60384: PPUSH
60385: LD_INT 1
60387: PPUSH
60388: LD_INT 4
60390: PPUSH
60391: CALL_OW 272
60395: PUSH
60396: LD_VAR 0 8
60400: PPUSH
60401: LD_INT 1
60403: PPUSH
60404: LD_INT 4
60406: PPUSH
60407: CALL_OW 273
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_VAR 0 7
60420: PPUSH
60421: LD_INT 2
60423: PPUSH
60424: LD_INT 4
60426: PPUSH
60427: CALL_OW 272
60431: PUSH
60432: LD_VAR 0 8
60436: PPUSH
60437: LD_INT 2
60439: PPUSH
60440: LD_INT 4
60442: PPUSH
60443: CALL_OW 273
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 7
60456: PPUSH
60457: LD_INT 3
60459: PPUSH
60460: LD_INT 4
60462: PPUSH
60463: CALL_OW 272
60467: PUSH
60468: LD_VAR 0 8
60472: PPUSH
60473: LD_INT 3
60475: PPUSH
60476: LD_INT 4
60478: PPUSH
60479: CALL_OW 273
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 7
60492: PPUSH
60493: LD_INT 4
60495: PPUSH
60496: LD_INT 4
60498: PPUSH
60499: CALL_OW 272
60503: PUSH
60504: LD_VAR 0 8
60508: PPUSH
60509: LD_INT 4
60511: PPUSH
60512: LD_INT 4
60514: PPUSH
60515: CALL_OW 273
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_VAR 0 7
60528: PPUSH
60529: LD_INT 5
60531: PPUSH
60532: LD_INT 4
60534: PPUSH
60535: CALL_OW 272
60539: PUSH
60540: LD_VAR 0 8
60544: PPUSH
60545: LD_INT 5
60547: PPUSH
60548: LD_INT 4
60550: PPUSH
60551: CALL_OW 273
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: ST_TO_ADDR
// for i = tmp downto 1 do
60568: LD_ADDR_VAR 0 4
60572: PUSH
60573: DOUBLE
60574: LD_VAR 0 6
60578: INC
60579: ST_TO_ADDR
60580: LD_INT 1
60582: PUSH
60583: FOR_DOWNTO
60584: IFFALSE 60685
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60586: LD_VAR 0 6
60590: PUSH
60591: LD_VAR 0 4
60595: ARRAY
60596: PUSH
60597: LD_INT 1
60599: ARRAY
60600: PPUSH
60601: LD_VAR 0 6
60605: PUSH
60606: LD_VAR 0 4
60610: ARRAY
60611: PUSH
60612: LD_INT 2
60614: ARRAY
60615: PPUSH
60616: CALL_OW 488
60620: NOT
60621: PUSH
60622: LD_VAR 0 6
60626: PUSH
60627: LD_VAR 0 4
60631: ARRAY
60632: PUSH
60633: LD_INT 1
60635: ARRAY
60636: PPUSH
60637: LD_VAR 0 6
60641: PUSH
60642: LD_VAR 0 4
60646: ARRAY
60647: PUSH
60648: LD_INT 2
60650: ARRAY
60651: PPUSH
60652: CALL_OW 428
60656: PUSH
60657: LD_INT 0
60659: NONEQUAL
60660: OR
60661: IFFALSE 60683
// tmp := Delete ( tmp , i ) ;
60663: LD_ADDR_VAR 0 6
60667: PUSH
60668: LD_VAR 0 6
60672: PPUSH
60673: LD_VAR 0 4
60677: PPUSH
60678: CALL_OW 3
60682: ST_TO_ADDR
60683: GO 60583
60685: POP
60686: POP
// j := GetClosestHex ( unit , tmp ) ;
60687: LD_ADDR_VAR 0 5
60691: PUSH
60692: LD_VAR 0 1
60696: PPUSH
60697: LD_VAR 0 6
60701: PPUSH
60702: CALL 59987 0 2
60706: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60707: LD_VAR 0 1
60711: PPUSH
60712: LD_VAR 0 5
60716: PUSH
60717: LD_INT 1
60719: ARRAY
60720: PPUSH
60721: LD_VAR 0 5
60725: PUSH
60726: LD_INT 2
60728: ARRAY
60729: PPUSH
60730: CALL_OW 111
// end ;
60734: LD_VAR 0 3
60738: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
60743: PPUSH
// uc_side = 0 ;
60744: LD_ADDR_OWVAR 20
60748: PUSH
60749: LD_INT 0
60751: ST_TO_ADDR
// uc_nation = 0 ;
60752: LD_ADDR_OWVAR 21
60756: PUSH
60757: LD_INT 0
60759: ST_TO_ADDR
// InitHc_All ( ) ;
60760: CALL_OW 584
// InitVc ;
60764: CALL_OW 20
// if mastodonts then
60768: LD_VAR 0 6
60772: IFFALSE 60839
// for i = 1 to mastodonts do
60774: LD_ADDR_VAR 0 11
60778: PUSH
60779: DOUBLE
60780: LD_INT 1
60782: DEC
60783: ST_TO_ADDR
60784: LD_VAR 0 6
60788: PUSH
60789: FOR_TO
60790: IFFALSE 60837
// begin vc_chassis := 31 ;
60792: LD_ADDR_OWVAR 37
60796: PUSH
60797: LD_INT 31
60799: ST_TO_ADDR
// vc_control := control_rider ;
60800: LD_ADDR_OWVAR 38
60804: PUSH
60805: LD_INT 4
60807: ST_TO_ADDR
// animal := CreateVehicle ;
60808: LD_ADDR_VAR 0 12
60812: PUSH
60813: CALL_OW 45
60817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60818: LD_VAR 0 12
60822: PPUSH
60823: LD_VAR 0 8
60827: PPUSH
60828: LD_INT 0
60830: PPUSH
60831: CALL 63027 0 3
// end ;
60835: GO 60789
60837: POP
60838: POP
// if horses then
60839: LD_VAR 0 5
60843: IFFALSE 60910
// for i = 1 to horses do
60845: LD_ADDR_VAR 0 11
60849: PUSH
60850: DOUBLE
60851: LD_INT 1
60853: DEC
60854: ST_TO_ADDR
60855: LD_VAR 0 5
60859: PUSH
60860: FOR_TO
60861: IFFALSE 60908
// begin hc_class := 21 ;
60863: LD_ADDR_OWVAR 28
60867: PUSH
60868: LD_INT 21
60870: ST_TO_ADDR
// hc_gallery :=  ;
60871: LD_ADDR_OWVAR 33
60875: PUSH
60876: LD_STRING 
60878: ST_TO_ADDR
// animal := CreateHuman ;
60879: LD_ADDR_VAR 0 12
60883: PUSH
60884: CALL_OW 44
60888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60889: LD_VAR 0 12
60893: PPUSH
60894: LD_VAR 0 8
60898: PPUSH
60899: LD_INT 0
60901: PPUSH
60902: CALL 63027 0 3
// end ;
60906: GO 60860
60908: POP
60909: POP
// if birds then
60910: LD_VAR 0 1
60914: IFFALSE 60981
// for i = 1 to birds do
60916: LD_ADDR_VAR 0 11
60920: PUSH
60921: DOUBLE
60922: LD_INT 1
60924: DEC
60925: ST_TO_ADDR
60926: LD_VAR 0 1
60930: PUSH
60931: FOR_TO
60932: IFFALSE 60979
// begin hc_class = 18 ;
60934: LD_ADDR_OWVAR 28
60938: PUSH
60939: LD_INT 18
60941: ST_TO_ADDR
// hc_gallery =  ;
60942: LD_ADDR_OWVAR 33
60946: PUSH
60947: LD_STRING 
60949: ST_TO_ADDR
// animal := CreateHuman ;
60950: LD_ADDR_VAR 0 12
60954: PUSH
60955: CALL_OW 44
60959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60960: LD_VAR 0 12
60964: PPUSH
60965: LD_VAR 0 8
60969: PPUSH
60970: LD_INT 0
60972: PPUSH
60973: CALL 63027 0 3
// end ;
60977: GO 60931
60979: POP
60980: POP
// if tigers then
60981: LD_VAR 0 2
60985: IFFALSE 61069
// for i = 1 to tigers do
60987: LD_ADDR_VAR 0 11
60991: PUSH
60992: DOUBLE
60993: LD_INT 1
60995: DEC
60996: ST_TO_ADDR
60997: LD_VAR 0 2
61001: PUSH
61002: FOR_TO
61003: IFFALSE 61067
// begin hc_class = class_tiger ;
61005: LD_ADDR_OWVAR 28
61009: PUSH
61010: LD_INT 14
61012: ST_TO_ADDR
// hc_gallery =  ;
61013: LD_ADDR_OWVAR 33
61017: PUSH
61018: LD_STRING 
61020: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61021: LD_ADDR_OWVAR 35
61025: PUSH
61026: LD_INT 7
61028: NEG
61029: PPUSH
61030: LD_INT 7
61032: PPUSH
61033: CALL_OW 12
61037: ST_TO_ADDR
// animal := CreateHuman ;
61038: LD_ADDR_VAR 0 12
61042: PUSH
61043: CALL_OW 44
61047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61048: LD_VAR 0 12
61052: PPUSH
61053: LD_VAR 0 8
61057: PPUSH
61058: LD_INT 0
61060: PPUSH
61061: CALL 63027 0 3
// end ;
61065: GO 61002
61067: POP
61068: POP
// if apemans then
61069: LD_VAR 0 3
61073: IFFALSE 61196
// for i = 1 to apemans do
61075: LD_ADDR_VAR 0 11
61079: PUSH
61080: DOUBLE
61081: LD_INT 1
61083: DEC
61084: ST_TO_ADDR
61085: LD_VAR 0 3
61089: PUSH
61090: FOR_TO
61091: IFFALSE 61194
// begin hc_class = class_apeman ;
61093: LD_ADDR_OWVAR 28
61097: PUSH
61098: LD_INT 12
61100: ST_TO_ADDR
// hc_gallery =  ;
61101: LD_ADDR_OWVAR 33
61105: PUSH
61106: LD_STRING 
61108: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61109: LD_ADDR_OWVAR 35
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PPUSH
61118: LD_INT 5
61120: PPUSH
61121: CALL_OW 12
61125: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61126: LD_ADDR_OWVAR 31
61130: PUSH
61131: LD_INT 1
61133: PPUSH
61134: LD_INT 3
61136: PPUSH
61137: CALL_OW 12
61141: PUSH
61142: LD_INT 1
61144: PPUSH
61145: LD_INT 3
61147: PPUSH
61148: CALL_OW 12
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// animal := CreateHuman ;
61165: LD_ADDR_VAR 0 12
61169: PUSH
61170: CALL_OW 44
61174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61175: LD_VAR 0 12
61179: PPUSH
61180: LD_VAR 0 8
61184: PPUSH
61185: LD_INT 0
61187: PPUSH
61188: CALL 63027 0 3
// end ;
61192: GO 61090
61194: POP
61195: POP
// if enchidnas then
61196: LD_VAR 0 4
61200: IFFALSE 61267
// for i = 1 to enchidnas do
61202: LD_ADDR_VAR 0 11
61206: PUSH
61207: DOUBLE
61208: LD_INT 1
61210: DEC
61211: ST_TO_ADDR
61212: LD_VAR 0 4
61216: PUSH
61217: FOR_TO
61218: IFFALSE 61265
// begin hc_class = 13 ;
61220: LD_ADDR_OWVAR 28
61224: PUSH
61225: LD_INT 13
61227: ST_TO_ADDR
// hc_gallery =  ;
61228: LD_ADDR_OWVAR 33
61232: PUSH
61233: LD_STRING 
61235: ST_TO_ADDR
// animal := CreateHuman ;
61236: LD_ADDR_VAR 0 12
61240: PUSH
61241: CALL_OW 44
61245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61246: LD_VAR 0 12
61250: PPUSH
61251: LD_VAR 0 8
61255: PPUSH
61256: LD_INT 0
61258: PPUSH
61259: CALL 63027 0 3
// end ;
61263: GO 61217
61265: POP
61266: POP
// if fishes then
61267: LD_VAR 0 7
61271: IFFALSE 61338
// for i = 1 to fishes do
61273: LD_ADDR_VAR 0 11
61277: PUSH
61278: DOUBLE
61279: LD_INT 1
61281: DEC
61282: ST_TO_ADDR
61283: LD_VAR 0 7
61287: PUSH
61288: FOR_TO
61289: IFFALSE 61336
// begin hc_class = 20 ;
61291: LD_ADDR_OWVAR 28
61295: PUSH
61296: LD_INT 20
61298: ST_TO_ADDR
// hc_gallery =  ;
61299: LD_ADDR_OWVAR 33
61303: PUSH
61304: LD_STRING 
61306: ST_TO_ADDR
// animal := CreateHuman ;
61307: LD_ADDR_VAR 0 12
61311: PUSH
61312: CALL_OW 44
61316: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61317: LD_VAR 0 12
61321: PPUSH
61322: LD_VAR 0 9
61326: PPUSH
61327: LD_INT 0
61329: PPUSH
61330: CALL 63027 0 3
// end ;
61334: GO 61288
61336: POP
61337: POP
// end ;
61338: LD_VAR 0 10
61342: RET
// export function WantHeal ( sci , unit ) ; begin
61343: LD_INT 0
61345: PPUSH
// if GetTaskList ( sci ) > 0 then
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 437
61355: PUSH
61356: LD_INT 0
61358: GREATER
61359: IFFALSE 61429
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61361: LD_VAR 0 1
61365: PPUSH
61366: CALL_OW 437
61370: PUSH
61371: LD_INT 1
61373: ARRAY
61374: PUSH
61375: LD_INT 1
61377: ARRAY
61378: PUSH
61379: LD_STRING l
61381: EQUAL
61382: PUSH
61383: LD_VAR 0 1
61387: PPUSH
61388: CALL_OW 437
61392: PUSH
61393: LD_INT 1
61395: ARRAY
61396: PUSH
61397: LD_INT 4
61399: ARRAY
61400: PUSH
61401: LD_VAR 0 2
61405: EQUAL
61406: AND
61407: IFFALSE 61419
// result := true else
61409: LD_ADDR_VAR 0 3
61413: PUSH
61414: LD_INT 1
61416: ST_TO_ADDR
61417: GO 61427
// result := false ;
61419: LD_ADDR_VAR 0 3
61423: PUSH
61424: LD_INT 0
61426: ST_TO_ADDR
// end else
61427: GO 61437
// result := false ;
61429: LD_ADDR_VAR 0 3
61433: PUSH
61434: LD_INT 0
61436: ST_TO_ADDR
// end ;
61437: LD_VAR 0 3
61441: RET
// export function HealTarget ( sci ) ; begin
61442: LD_INT 0
61444: PPUSH
// if not sci then
61445: LD_VAR 0 1
61449: NOT
61450: IFFALSE 61454
// exit ;
61452: GO 61519
// result := 0 ;
61454: LD_ADDR_VAR 0 2
61458: PUSH
61459: LD_INT 0
61461: ST_TO_ADDR
// if GetTaskList ( sci ) then
61462: LD_VAR 0 1
61466: PPUSH
61467: CALL_OW 437
61471: IFFALSE 61519
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61473: LD_VAR 0 1
61477: PPUSH
61478: CALL_OW 437
61482: PUSH
61483: LD_INT 1
61485: ARRAY
61486: PUSH
61487: LD_INT 1
61489: ARRAY
61490: PUSH
61491: LD_STRING l
61493: EQUAL
61494: IFFALSE 61519
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61496: LD_ADDR_VAR 0 2
61500: PUSH
61501: LD_VAR 0 1
61505: PPUSH
61506: CALL_OW 437
61510: PUSH
61511: LD_INT 1
61513: ARRAY
61514: PUSH
61515: LD_INT 4
61517: ARRAY
61518: ST_TO_ADDR
// end ;
61519: LD_VAR 0 2
61523: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61524: LD_INT 0
61526: PPUSH
61527: PPUSH
61528: PPUSH
61529: PPUSH
// if not base_units then
61530: LD_VAR 0 1
61534: NOT
61535: IFFALSE 61539
// exit ;
61537: GO 61626
// result := false ;
61539: LD_ADDR_VAR 0 2
61543: PUSH
61544: LD_INT 0
61546: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61547: LD_ADDR_VAR 0 5
61551: PUSH
61552: LD_VAR 0 1
61556: PPUSH
61557: LD_INT 21
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PPUSH
61567: CALL_OW 72
61571: ST_TO_ADDR
// if not tmp then
61572: LD_VAR 0 5
61576: NOT
61577: IFFALSE 61581
// exit ;
61579: GO 61626
// for i in tmp do
61581: LD_ADDR_VAR 0 3
61585: PUSH
61586: LD_VAR 0 5
61590: PUSH
61591: FOR_IN
61592: IFFALSE 61624
// begin result := EnemyInRange ( i , 22 ) ;
61594: LD_ADDR_VAR 0 2
61598: PUSH
61599: LD_VAR 0 3
61603: PPUSH
61604: LD_INT 22
61606: PPUSH
61607: CALL 59862 0 2
61611: ST_TO_ADDR
// if result then
61612: LD_VAR 0 2
61616: IFFALSE 61622
// exit ;
61618: POP
61619: POP
61620: GO 61626
// end ;
61622: GO 61591
61624: POP
61625: POP
// end ;
61626: LD_VAR 0 2
61630: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61631: LD_INT 0
61633: PPUSH
61634: PPUSH
// if not units then
61635: LD_VAR 0 1
61639: NOT
61640: IFFALSE 61644
// exit ;
61642: GO 61714
// result := [ ] ;
61644: LD_ADDR_VAR 0 3
61648: PUSH
61649: EMPTY
61650: ST_TO_ADDR
// for i in units do
61651: LD_ADDR_VAR 0 4
61655: PUSH
61656: LD_VAR 0 1
61660: PUSH
61661: FOR_IN
61662: IFFALSE 61712
// if GetTag ( i ) = tag then
61664: LD_VAR 0 4
61668: PPUSH
61669: CALL_OW 110
61673: PUSH
61674: LD_VAR 0 2
61678: EQUAL
61679: IFFALSE 61710
// result := Insert ( result , result + 1 , i ) ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: LD_VAR 0 3
61690: PPUSH
61691: LD_VAR 0 3
61695: PUSH
61696: LD_INT 1
61698: PLUS
61699: PPUSH
61700: LD_VAR 0 4
61704: PPUSH
61705: CALL_OW 2
61709: ST_TO_ADDR
61710: GO 61661
61712: POP
61713: POP
// end ;
61714: LD_VAR 0 3
61718: RET
// export function IsDriver ( un ) ; begin
61719: LD_INT 0
61721: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61722: LD_ADDR_VAR 0 2
61726: PUSH
61727: LD_VAR 0 1
61731: PUSH
61732: LD_INT 55
61734: PUSH
61735: EMPTY
61736: LIST
61737: PPUSH
61738: CALL_OW 69
61742: IN
61743: ST_TO_ADDR
// end ;
61744: LD_VAR 0 2
61748: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61749: LD_INT 0
61751: PPUSH
61752: PPUSH
// list := [ ] ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: EMPTY
61759: ST_TO_ADDR
// case d of 0 :
61760: LD_VAR 0 3
61764: PUSH
61765: LD_INT 0
61767: DOUBLE
61768: EQUAL
61769: IFTRUE 61773
61771: GO 61906
61773: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61774: LD_ADDR_VAR 0 5
61778: PUSH
61779: LD_VAR 0 1
61783: PUSH
61784: LD_INT 4
61786: MINUS
61787: PUSH
61788: LD_VAR 0 2
61792: PUSH
61793: LD_INT 4
61795: MINUS
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: PUSH
61805: LD_VAR 0 1
61809: PUSH
61810: LD_INT 3
61812: MINUS
61813: PUSH
61814: LD_VAR 0 2
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: PUSH
61827: LD_VAR 0 1
61831: PUSH
61832: LD_INT 4
61834: PLUS
61835: PUSH
61836: LD_VAR 0 2
61840: PUSH
61841: LD_INT 4
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: LD_VAR 0 1
61853: PUSH
61854: LD_INT 3
61856: PLUS
61857: PUSH
61858: LD_VAR 0 2
61862: PUSH
61863: LD_INT 3
61865: PLUS
61866: PUSH
61867: LD_INT 5
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: PUSH
61875: LD_VAR 0 1
61879: PUSH
61880: LD_VAR 0 2
61884: PUSH
61885: LD_INT 4
61887: PLUS
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: ST_TO_ADDR
// end ; 1 :
61904: GO 62604
61906: LD_INT 1
61908: DOUBLE
61909: EQUAL
61910: IFTRUE 61914
61912: GO 62047
61914: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61915: LD_ADDR_VAR 0 5
61919: PUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 4
61932: MINUS
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: LD_INT 3
61949: MINUS
61950: PUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_INT 3
61958: MINUS
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: LD_VAR 0 1
61972: PUSH
61973: LD_INT 4
61975: MINUS
61976: PUSH
61977: LD_VAR 0 2
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: PUSH
61990: LD_VAR 0 1
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 3
62002: PLUS
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 1
62016: PUSH
62017: LD_INT 4
62019: PLUS
62020: PUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_INT 4
62028: PLUS
62029: PUSH
62030: LD_INT 5
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// end ; 2 :
62045: GO 62604
62047: LD_INT 2
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62055
62053: GO 62184
62055: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62056: LD_ADDR_VAR 0 5
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 3
62073: MINUS
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 4
62090: PLUS
62091: PUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: PUSH
62105: LD_VAR 0 1
62109: PUSH
62110: LD_VAR 0 2
62114: PUSH
62115: LD_INT 4
62117: PLUS
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: PUSH
62127: LD_VAR 0 1
62131: PUSH
62132: LD_INT 3
62134: MINUS
62135: PUSH
62136: LD_VAR 0 2
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: LD_VAR 0 1
62153: PUSH
62154: LD_INT 4
62156: MINUS
62157: PUSH
62158: LD_VAR 0 2
62162: PUSH
62163: LD_INT 4
62165: MINUS
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// end ; 3 :
62182: GO 62604
62184: LD_INT 3
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62192
62190: GO 62325
62192: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62193: LD_ADDR_VAR 0 5
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_INT 3
62205: PLUS
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: LD_INT 4
62227: PLUS
62228: PUSH
62229: LD_VAR 0 2
62233: PUSH
62234: LD_INT 4
62236: PLUS
62237: PUSH
62238: LD_INT 5
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: LD_VAR 0 1
62250: PUSH
62251: LD_INT 4
62253: MINUS
62254: PUSH
62255: LD_VAR 0 2
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: LD_VAR 0 2
62277: PUSH
62278: LD_INT 4
62280: MINUS
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: LD_VAR 0 1
62294: PUSH
62295: LD_INT 3
62297: MINUS
62298: PUSH
62299: LD_VAR 0 2
62303: PUSH
62304: LD_INT 3
62306: MINUS
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// end ; 4 :
62323: GO 62604
62325: LD_INT 4
62327: DOUBLE
62328: EQUAL
62329: IFTRUE 62333
62331: GO 62466
62333: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62334: LD_ADDR_VAR 0 5
62338: PUSH
62339: LD_VAR 0 1
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: PLUS
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 3
62368: PLUS
62369: PUSH
62370: LD_VAR 0 2
62374: PUSH
62375: LD_INT 3
62377: PLUS
62378: PUSH
62379: LD_INT 5
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: PUSH
62387: LD_VAR 0 1
62391: PUSH
62392: LD_INT 4
62394: PLUS
62395: PUSH
62396: LD_VAR 0 2
62400: PUSH
62401: LD_INT 4
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_INT 3
62421: MINUS
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: PUSH
62431: LD_VAR 0 1
62435: PUSH
62436: LD_INT 4
62438: MINUS
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_INT 4
62447: MINUS
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// end ; 5 :
62464: GO 62604
62466: LD_INT 5
62468: DOUBLE
62469: EQUAL
62470: IFTRUE 62474
62472: GO 62603
62474: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62475: LD_ADDR_VAR 0 5
62479: PUSH
62480: LD_VAR 0 1
62484: PUSH
62485: LD_INT 4
62487: MINUS
62488: PUSH
62489: LD_VAR 0 2
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_VAR 0 1
62506: PUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 4
62514: MINUS
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 1
62528: PUSH
62529: LD_INT 4
62531: PLUS
62532: PUSH
62533: LD_VAR 0 2
62537: PUSH
62538: LD_INT 4
62540: PLUS
62541: PUSH
62542: LD_INT 5
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: PUSH
62550: LD_VAR 0 1
62554: PUSH
62555: LD_INT 3
62557: PLUS
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: LD_VAR 0 1
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: LD_INT 3
62584: PLUS
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// end ; end ;
62601: GO 62604
62603: POP
// result := list ;
62604: LD_ADDR_VAR 0 4
62608: PUSH
62609: LD_VAR 0 5
62613: ST_TO_ADDR
// end ;
62614: LD_VAR 0 4
62618: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62619: LD_INT 0
62621: PPUSH
62622: PPUSH
62623: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62624: LD_VAR 0 1
62628: NOT
62629: PUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 4
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: IN
62653: NOT
62654: OR
62655: IFFALSE 62659
// exit ;
62657: GO 62751
// tmp := [ ] ;
62659: LD_ADDR_VAR 0 5
62663: PUSH
62664: EMPTY
62665: ST_TO_ADDR
// for i in units do
62666: LD_ADDR_VAR 0 4
62670: PUSH
62671: LD_VAR 0 1
62675: PUSH
62676: FOR_IN
62677: IFFALSE 62720
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62679: LD_ADDR_VAR 0 5
62683: PUSH
62684: LD_VAR 0 5
62688: PPUSH
62689: LD_VAR 0 5
62693: PUSH
62694: LD_INT 1
62696: PLUS
62697: PPUSH
62698: LD_VAR 0 4
62702: PPUSH
62703: LD_VAR 0 2
62707: PPUSH
62708: CALL_OW 259
62712: PPUSH
62713: CALL_OW 2
62717: ST_TO_ADDR
62718: GO 62676
62720: POP
62721: POP
// if not tmp then
62722: LD_VAR 0 5
62726: NOT
62727: IFFALSE 62731
// exit ;
62729: GO 62751
// result := SortListByListDesc ( units , tmp ) ;
62731: LD_ADDR_VAR 0 3
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_VAR 0 5
62745: PPUSH
62746: CALL_OW 77
62750: ST_TO_ADDR
// end ;
62751: LD_VAR 0 3
62755: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62756: LD_INT 0
62758: PPUSH
62759: PPUSH
62760: PPUSH
// result := false ;
62761: LD_ADDR_VAR 0 3
62765: PUSH
62766: LD_INT 0
62768: ST_TO_ADDR
// x := GetX ( building ) ;
62769: LD_ADDR_VAR 0 4
62773: PUSH
62774: LD_VAR 0 2
62778: PPUSH
62779: CALL_OW 250
62783: ST_TO_ADDR
// y := GetY ( building ) ;
62784: LD_ADDR_VAR 0 5
62788: PUSH
62789: LD_VAR 0 2
62793: PPUSH
62794: CALL_OW 251
62798: ST_TO_ADDR
// if not building or not x or not y then
62799: LD_VAR 0 2
62803: NOT
62804: PUSH
62805: LD_VAR 0 4
62809: NOT
62810: OR
62811: PUSH
62812: LD_VAR 0 5
62816: NOT
62817: OR
62818: IFFALSE 62822
// exit ;
62820: GO 62914
// if GetTaskList ( unit ) then
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 437
62831: IFFALSE 62914
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62833: LD_STRING e
62835: PUSH
62836: LD_VAR 0 1
62840: PPUSH
62841: CALL_OW 437
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PUSH
62850: LD_INT 1
62852: ARRAY
62853: EQUAL
62854: PUSH
62855: LD_VAR 0 4
62859: PUSH
62860: LD_VAR 0 1
62864: PPUSH
62865: CALL_OW 437
62869: PUSH
62870: LD_INT 1
62872: ARRAY
62873: PUSH
62874: LD_INT 2
62876: ARRAY
62877: EQUAL
62878: AND
62879: PUSH
62880: LD_VAR 0 5
62884: PUSH
62885: LD_VAR 0 1
62889: PPUSH
62890: CALL_OW 437
62894: PUSH
62895: LD_INT 1
62897: ARRAY
62898: PUSH
62899: LD_INT 3
62901: ARRAY
62902: EQUAL
62903: AND
62904: IFFALSE 62914
// result := true end ;
62906: LD_ADDR_VAR 0 3
62910: PUSH
62911: LD_INT 1
62913: ST_TO_ADDR
// end ;
62914: LD_VAR 0 3
62918: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62919: LD_INT 0
62921: PPUSH
// result := false ;
62922: LD_ADDR_VAR 0 4
62926: PUSH
62927: LD_INT 0
62929: ST_TO_ADDR
// if GetTaskList ( unit ) then
62930: LD_VAR 0 1
62934: PPUSH
62935: CALL_OW 437
62939: IFFALSE 63022
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62941: LD_STRING M
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 437
62953: PUSH
62954: LD_INT 1
62956: ARRAY
62957: PUSH
62958: LD_INT 1
62960: ARRAY
62961: EQUAL
62962: PUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_VAR 0 1
62972: PPUSH
62973: CALL_OW 437
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PUSH
62982: LD_INT 2
62984: ARRAY
62985: EQUAL
62986: AND
62987: PUSH
62988: LD_VAR 0 3
62992: PUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: CALL_OW 437
63002: PUSH
63003: LD_INT 1
63005: ARRAY
63006: PUSH
63007: LD_INT 3
63009: ARRAY
63010: EQUAL
63011: AND
63012: IFFALSE 63022
// result := true ;
63014: LD_ADDR_VAR 0 4
63018: PUSH
63019: LD_INT 1
63021: ST_TO_ADDR
// end ; end ;
63022: LD_VAR 0 4
63026: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63027: LD_INT 0
63029: PPUSH
63030: PPUSH
63031: PPUSH
63032: PPUSH
// if not unit or not area then
63033: LD_VAR 0 1
63037: NOT
63038: PUSH
63039: LD_VAR 0 2
63043: NOT
63044: OR
63045: IFFALSE 63049
// exit ;
63047: GO 63213
// tmp := AreaToList ( area , i ) ;
63049: LD_ADDR_VAR 0 6
63053: PUSH
63054: LD_VAR 0 2
63058: PPUSH
63059: LD_VAR 0 5
63063: PPUSH
63064: CALL_OW 517
63068: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63069: LD_ADDR_VAR 0 5
63073: PUSH
63074: DOUBLE
63075: LD_INT 1
63077: DEC
63078: ST_TO_ADDR
63079: LD_VAR 0 6
63083: PUSH
63084: LD_INT 1
63086: ARRAY
63087: PUSH
63088: FOR_TO
63089: IFFALSE 63211
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63091: LD_ADDR_VAR 0 7
63095: PUSH
63096: LD_VAR 0 6
63100: PUSH
63101: LD_INT 1
63103: ARRAY
63104: PUSH
63105: LD_VAR 0 5
63109: ARRAY
63110: PUSH
63111: LD_VAR 0 6
63115: PUSH
63116: LD_INT 2
63118: ARRAY
63119: PUSH
63120: LD_VAR 0 5
63124: ARRAY
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63130: LD_VAR 0 7
63134: PUSH
63135: LD_INT 1
63137: ARRAY
63138: PPUSH
63139: LD_VAR 0 7
63143: PUSH
63144: LD_INT 2
63146: ARRAY
63147: PPUSH
63148: CALL_OW 428
63152: PUSH
63153: LD_INT 0
63155: EQUAL
63156: IFFALSE 63209
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_VAR 0 7
63167: PUSH
63168: LD_INT 1
63170: ARRAY
63171: PPUSH
63172: LD_VAR 0 7
63176: PUSH
63177: LD_INT 2
63179: ARRAY
63180: PPUSH
63181: LD_VAR 0 3
63185: PPUSH
63186: CALL_OW 48
// result := IsPlaced ( unit ) ;
63190: LD_ADDR_VAR 0 4
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 305
63204: ST_TO_ADDR
// exit ;
63205: POP
63206: POP
63207: GO 63213
// end ; end ;
63209: GO 63088
63211: POP
63212: POP
// end ;
63213: LD_VAR 0 4
63217: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63218: LD_INT 0
63220: PPUSH
63221: PPUSH
63222: PPUSH
// if not side or side > 8 then
63223: LD_VAR 0 1
63227: NOT
63228: PUSH
63229: LD_VAR 0 1
63233: PUSH
63234: LD_INT 8
63236: GREATER
63237: OR
63238: IFFALSE 63242
// exit ;
63240: GO 63429
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63242: LD_ADDR_VAR 0 4
63246: PUSH
63247: LD_INT 22
63249: PUSH
63250: LD_VAR 0 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 21
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PPUSH
63273: CALL_OW 69
63277: ST_TO_ADDR
// if not tmp then
63278: LD_VAR 0 4
63282: NOT
63283: IFFALSE 63287
// exit ;
63285: GO 63429
// enable_addtolog := true ;
63287: LD_ADDR_OWVAR 81
63291: PUSH
63292: LD_INT 1
63294: ST_TO_ADDR
// AddToLog ( [ ) ;
63295: LD_STRING [
63297: PPUSH
63298: CALL_OW 561
// for i in tmp do
63302: LD_ADDR_VAR 0 3
63306: PUSH
63307: LD_VAR 0 4
63311: PUSH
63312: FOR_IN
63313: IFFALSE 63420
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63315: LD_STRING [
63317: PUSH
63318: LD_VAR 0 3
63322: PPUSH
63323: CALL_OW 266
63327: STR
63328: PUSH
63329: LD_STRING , 
63331: STR
63332: PUSH
63333: LD_VAR 0 3
63337: PPUSH
63338: CALL_OW 250
63342: STR
63343: PUSH
63344: LD_STRING , 
63346: STR
63347: PUSH
63348: LD_VAR 0 3
63352: PPUSH
63353: CALL_OW 251
63357: STR
63358: PUSH
63359: LD_STRING , 
63361: STR
63362: PUSH
63363: LD_VAR 0 3
63367: PPUSH
63368: CALL_OW 254
63372: STR
63373: PUSH
63374: LD_STRING , 
63376: STR
63377: PUSH
63378: LD_VAR 0 3
63382: PPUSH
63383: LD_INT 1
63385: PPUSH
63386: CALL_OW 268
63390: STR
63391: PUSH
63392: LD_STRING , 
63394: STR
63395: PUSH
63396: LD_VAR 0 3
63400: PPUSH
63401: LD_INT 2
63403: PPUSH
63404: CALL_OW 268
63408: STR
63409: PUSH
63410: LD_STRING ],
63412: STR
63413: PPUSH
63414: CALL_OW 561
// end ;
63418: GO 63312
63420: POP
63421: POP
// AddToLog ( ]; ) ;
63422: LD_STRING ];
63424: PPUSH
63425: CALL_OW 561
// end ;
63429: LD_VAR 0 2
63433: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63434: LD_INT 0
63436: PPUSH
63437: PPUSH
63438: PPUSH
63439: PPUSH
63440: PPUSH
// if not area or not rate or not max then
63441: LD_VAR 0 1
63445: NOT
63446: PUSH
63447: LD_VAR 0 2
63451: NOT
63452: OR
63453: PUSH
63454: LD_VAR 0 4
63458: NOT
63459: OR
63460: IFFALSE 63464
// exit ;
63462: GO 63656
// while 1 do
63464: LD_INT 1
63466: IFFALSE 63656
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63468: LD_ADDR_VAR 0 9
63472: PUSH
63473: LD_VAR 0 1
63477: PPUSH
63478: LD_INT 1
63480: PPUSH
63481: CALL_OW 287
63485: PUSH
63486: LD_INT 10
63488: MUL
63489: ST_TO_ADDR
// r := rate / 10 ;
63490: LD_ADDR_VAR 0 7
63494: PUSH
63495: LD_VAR 0 2
63499: PUSH
63500: LD_INT 10
63502: DIVREAL
63503: ST_TO_ADDR
// time := 1 1$00 ;
63504: LD_ADDR_VAR 0 8
63508: PUSH
63509: LD_INT 2100
63511: ST_TO_ADDR
// if amount < min then
63512: LD_VAR 0 9
63516: PUSH
63517: LD_VAR 0 3
63521: LESS
63522: IFFALSE 63540
// r := r * 2 else
63524: LD_ADDR_VAR 0 7
63528: PUSH
63529: LD_VAR 0 7
63533: PUSH
63534: LD_INT 2
63536: MUL
63537: ST_TO_ADDR
63538: GO 63566
// if amount > max then
63540: LD_VAR 0 9
63544: PUSH
63545: LD_VAR 0 4
63549: GREATER
63550: IFFALSE 63566
// r := r / 2 ;
63552: LD_ADDR_VAR 0 7
63556: PUSH
63557: LD_VAR 0 7
63561: PUSH
63562: LD_INT 2
63564: DIVREAL
63565: ST_TO_ADDR
// time := time / r ;
63566: LD_ADDR_VAR 0 8
63570: PUSH
63571: LD_VAR 0 8
63575: PUSH
63576: LD_VAR 0 7
63580: DIVREAL
63581: ST_TO_ADDR
// if time < 0 then
63582: LD_VAR 0 8
63586: PUSH
63587: LD_INT 0
63589: LESS
63590: IFFALSE 63607
// time := time * - 1 ;
63592: LD_ADDR_VAR 0 8
63596: PUSH
63597: LD_VAR 0 8
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: MUL
63606: ST_TO_ADDR
// wait ( time ) ;
63607: LD_VAR 0 8
63611: PPUSH
63612: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63616: LD_INT 35
63618: PPUSH
63619: LD_INT 875
63621: PPUSH
63622: CALL_OW 12
63626: PPUSH
63627: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63631: LD_INT 1
63633: PPUSH
63634: LD_INT 5
63636: PPUSH
63637: CALL_OW 12
63641: PPUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: LD_INT 1
63649: PPUSH
63650: CALL_OW 55
// end ;
63654: GO 63464
// end ;
63656: LD_VAR 0 5
63660: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63661: LD_INT 0
63663: PPUSH
63664: PPUSH
63665: PPUSH
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
// if not turrets or not factories then
63671: LD_VAR 0 1
63675: NOT
63676: PUSH
63677: LD_VAR 0 2
63681: NOT
63682: OR
63683: IFFALSE 63687
// exit ;
63685: GO 63994
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63687: LD_ADDR_VAR 0 10
63691: PUSH
63692: LD_INT 5
63694: PUSH
63695: LD_INT 6
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: LD_INT 5
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 24
63729: PUSH
63730: LD_INT 25
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 23
63739: PUSH
63740: LD_INT 27
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 42
63753: PUSH
63754: LD_INT 43
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 44
63763: PUSH
63764: LD_INT 46
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 45
63773: PUSH
63774: LD_INT 47
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: ST_TO_ADDR
// result := [ ] ;
63791: LD_ADDR_VAR 0 3
63795: PUSH
63796: EMPTY
63797: ST_TO_ADDR
// for i in turrets do
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: LD_VAR 0 1
63807: PUSH
63808: FOR_IN
63809: IFFALSE 63992
// begin nat := GetNation ( i ) ;
63811: LD_ADDR_VAR 0 7
63815: PUSH
63816: LD_VAR 0 4
63820: PPUSH
63821: CALL_OW 248
63825: ST_TO_ADDR
// weapon := 0 ;
63826: LD_ADDR_VAR 0 8
63830: PUSH
63831: LD_INT 0
63833: ST_TO_ADDR
// if not nat then
63834: LD_VAR 0 7
63838: NOT
63839: IFFALSE 63843
// continue ;
63841: GO 63808
// for j in list [ nat ] do
63843: LD_ADDR_VAR 0 5
63847: PUSH
63848: LD_VAR 0 10
63852: PUSH
63853: LD_VAR 0 7
63857: ARRAY
63858: PUSH
63859: FOR_IN
63860: IFFALSE 63901
// if GetBWeapon ( i ) = j [ 1 ] then
63862: LD_VAR 0 4
63866: PPUSH
63867: CALL_OW 269
63871: PUSH
63872: LD_VAR 0 5
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: EQUAL
63881: IFFALSE 63899
// begin weapon := j [ 2 ] ;
63883: LD_ADDR_VAR 0 8
63887: PUSH
63888: LD_VAR 0 5
63892: PUSH
63893: LD_INT 2
63895: ARRAY
63896: ST_TO_ADDR
// break ;
63897: GO 63901
// end ;
63899: GO 63859
63901: POP
63902: POP
// if not weapon then
63903: LD_VAR 0 8
63907: NOT
63908: IFFALSE 63912
// continue ;
63910: GO 63808
// for k in factories do
63912: LD_ADDR_VAR 0 6
63916: PUSH
63917: LD_VAR 0 2
63921: PUSH
63922: FOR_IN
63923: IFFALSE 63988
// begin weapons := AvailableWeaponList ( k ) ;
63925: LD_ADDR_VAR 0 9
63929: PUSH
63930: LD_VAR 0 6
63934: PPUSH
63935: CALL_OW 478
63939: ST_TO_ADDR
// if not weapons then
63940: LD_VAR 0 9
63944: NOT
63945: IFFALSE 63949
// continue ;
63947: GO 63922
// if weapon in weapons then
63949: LD_VAR 0 8
63953: PUSH
63954: LD_VAR 0 9
63958: IN
63959: IFFALSE 63986
// begin result := [ i , weapon ] ;
63961: LD_ADDR_VAR 0 3
63965: PUSH
63966: LD_VAR 0 4
63970: PUSH
63971: LD_VAR 0 8
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: ST_TO_ADDR
// exit ;
63980: POP
63981: POP
63982: POP
63983: POP
63984: GO 63994
// end ; end ;
63986: GO 63922
63988: POP
63989: POP
// end ;
63990: GO 63808
63992: POP
63993: POP
// end ;
63994: LD_VAR 0 3
63998: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63999: LD_INT 0
64001: PPUSH
// if not side or side > 8 then
64002: LD_VAR 0 3
64006: NOT
64007: PUSH
64008: LD_VAR 0 3
64012: PUSH
64013: LD_INT 8
64015: GREATER
64016: OR
64017: IFFALSE 64021
// exit ;
64019: GO 64080
// if not range then
64021: LD_VAR 0 4
64025: NOT
64026: IFFALSE 64037
// range := - 12 ;
64028: LD_ADDR_VAR 0 4
64032: PUSH
64033: LD_INT 12
64035: NEG
64036: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_VAR 0 2
64046: PPUSH
64047: LD_VAR 0 3
64051: PPUSH
64052: LD_VAR 0 4
64056: PPUSH
64057: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64061: LD_VAR 0 1
64065: PPUSH
64066: LD_VAR 0 2
64070: PPUSH
64071: LD_VAR 0 3
64075: PPUSH
64076: CALL_OW 331
// end ;
64080: LD_VAR 0 5
64084: RET
// export function Video ( mode ) ; begin
64085: LD_INT 0
64087: PPUSH
// ingame_video = mode ;
64088: LD_ADDR_OWVAR 52
64092: PUSH
64093: LD_VAR 0 1
64097: ST_TO_ADDR
// interface_hidden = mode ;
64098: LD_ADDR_OWVAR 54
64102: PUSH
64103: LD_VAR 0 1
64107: ST_TO_ADDR
// end ;
64108: LD_VAR 0 2
64112: RET
// export function Join ( array , element ) ; begin
64113: LD_INT 0
64115: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: LD_VAR 0 1
64130: PUSH
64131: LD_INT 1
64133: PLUS
64134: PPUSH
64135: LD_VAR 0 2
64139: PPUSH
64140: CALL_OW 1
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 3
64149: RET
// export function JoinUnion ( array , element ) ; begin
64150: LD_INT 0
64152: PPUSH
// result := array union element ;
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: PUSH
64163: LD_VAR 0 2
64167: UNION
64168: ST_TO_ADDR
// end ;
64169: LD_VAR 0 3
64173: RET
// export function GetBehemoths ( side ) ; begin
64174: LD_INT 0
64176: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64177: LD_ADDR_VAR 0 2
64181: PUSH
64182: LD_INT 22
64184: PUSH
64185: LD_VAR 0 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 31
64196: PUSH
64197: LD_INT 25
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PPUSH
64208: CALL_OW 69
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 2
64217: RET
// export function Shuffle ( array ) ; var i , index ; begin
64218: LD_INT 0
64220: PPUSH
64221: PPUSH
64222: PPUSH
// result := [ ] ;
64223: LD_ADDR_VAR 0 2
64227: PUSH
64228: EMPTY
64229: ST_TO_ADDR
// if not array then
64230: LD_VAR 0 1
64234: NOT
64235: IFFALSE 64239
// exit ;
64237: GO 64338
// Randomize ;
64239: CALL_OW 10
// for i = array downto 1 do
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: DOUBLE
64249: LD_VAR 0 1
64253: INC
64254: ST_TO_ADDR
64255: LD_INT 1
64257: PUSH
64258: FOR_DOWNTO
64259: IFFALSE 64336
// begin index := rand ( 1 , array ) ;
64261: LD_ADDR_VAR 0 4
64265: PUSH
64266: LD_INT 1
64268: PPUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 12
64278: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64279: LD_ADDR_VAR 0 2
64283: PUSH
64284: LD_VAR 0 2
64288: PPUSH
64289: LD_VAR 0 2
64293: PUSH
64294: LD_INT 1
64296: PLUS
64297: PPUSH
64298: LD_VAR 0 1
64302: PUSH
64303: LD_VAR 0 4
64307: ARRAY
64308: PPUSH
64309: CALL_OW 2
64313: ST_TO_ADDR
// array := Delete ( array , index ) ;
64314: LD_ADDR_VAR 0 1
64318: PUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: LD_VAR 0 4
64328: PPUSH
64329: CALL_OW 3
64333: ST_TO_ADDR
// end ;
64334: GO 64258
64336: POP
64337: POP
// end ;
64338: LD_VAR 0 2
64342: RET
// export function GetBaseMaterials ( base ) ; begin
64343: LD_INT 0
64345: PPUSH
// result := [ 0 , 0 , 0 ] ;
64346: LD_ADDR_VAR 0 2
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: ST_TO_ADDR
// if not base then
64365: LD_VAR 0 1
64369: NOT
64370: IFFALSE 64374
// exit ;
64372: GO 64423
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64374: LD_ADDR_VAR 0 2
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: LD_INT 1
64386: PPUSH
64387: CALL_OW 275
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_INT 2
64399: PPUSH
64400: CALL_OW 275
64404: PUSH
64405: LD_VAR 0 1
64409: PPUSH
64410: LD_INT 3
64412: PPUSH
64413: CALL_OW 275
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// end ;
64423: LD_VAR 0 2
64427: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64428: LD_INT 0
64430: PPUSH
64431: PPUSH
// result := array ;
64432: LD_ADDR_VAR 0 3
64436: PUSH
64437: LD_VAR 0 1
64441: ST_TO_ADDR
// if size > 0 then
64442: LD_VAR 0 2
64446: PUSH
64447: LD_INT 0
64449: GREATER
64450: IFFALSE 64496
// for i := array downto size do
64452: LD_ADDR_VAR 0 4
64456: PUSH
64457: DOUBLE
64458: LD_VAR 0 1
64462: INC
64463: ST_TO_ADDR
64464: LD_VAR 0 2
64468: PUSH
64469: FOR_DOWNTO
64470: IFFALSE 64494
// result := Delete ( result , result ) ;
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: LD_VAR 0 3
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: CALL_OW 3
64491: ST_TO_ADDR
64492: GO 64469
64494: POP
64495: POP
// end ;
64496: LD_VAR 0 3
64500: RET
// export function ComExit ( unit ) ; var tmp ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
// if not IsInUnit ( unit ) then
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL_OW 310
64514: NOT
64515: IFFALSE 64519
// exit ;
64517: GO 64579
// tmp := IsInUnit ( unit ) ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 310
64533: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 247
64543: PUSH
64544: LD_INT 2
64546: EQUAL
64547: IFFALSE 64560
// ComExitVehicle ( unit ) else
64549: LD_VAR 0 1
64553: PPUSH
64554: CALL_OW 121
64558: GO 64569
// ComExitBuilding ( unit ) ;
64560: LD_VAR 0 1
64564: PPUSH
64565: CALL_OW 122
// result := tmp ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 2
64583: RET
// export function ComExitAll ( units ) ; var i ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
// if not units then
64588: LD_VAR 0 1
64592: NOT
64593: IFFALSE 64597
// exit ;
64595: GO 64623
// for i in units do
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: FOR_IN
64608: IFFALSE 64621
// ComExit ( i ) ;
64610: LD_VAR 0 3
64614: PPUSH
64615: CALL 64501 0 1
64619: GO 64607
64621: POP
64622: POP
// end ;
64623: LD_VAR 0 2
64627: RET
// export function ResetHc ; begin
64628: LD_INT 0
64630: PPUSH
// InitHc ;
64631: CALL_OW 19
// hc_importance := 0 ;
64635: LD_ADDR_OWVAR 32
64639: PUSH
64640: LD_INT 0
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 1
64647: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64648: LD_INT 0
64650: PPUSH
64651: PPUSH
64652: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64653: LD_ADDR_VAR 0 6
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_VAR 0 3
64667: PLUS
64668: PUSH
64669: LD_INT 2
64671: DIV
64672: ST_TO_ADDR
// if _x < 0 then
64673: LD_VAR 0 6
64677: PUSH
64678: LD_INT 0
64680: LESS
64681: IFFALSE 64698
// _x := _x * - 1 ;
64683: LD_ADDR_VAR 0 6
64687: PUSH
64688: LD_VAR 0 6
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: MUL
64697: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64698: LD_ADDR_VAR 0 7
64702: PUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_VAR 0 4
64712: PLUS
64713: PUSH
64714: LD_INT 2
64716: DIV
64717: ST_TO_ADDR
// if _y < 0 then
64718: LD_VAR 0 7
64722: PUSH
64723: LD_INT 0
64725: LESS
64726: IFFALSE 64743
// _y := _y * - 1 ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 7
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: MUL
64742: ST_TO_ADDR
// result := [ _x , _y ] ;
64743: LD_ADDR_VAR 0 5
64747: PUSH
64748: LD_VAR 0 6
64752: PUSH
64753: LD_VAR 0 7
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// end ;
64762: LD_VAR 0 5
64766: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
// task := GetTaskList ( unit ) ;
64773: LD_ADDR_VAR 0 7
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 437
64787: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64788: LD_VAR 0 7
64792: NOT
64793: PUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 308
64808: NOT
64809: AND
64810: IFFALSE 64814
// exit ;
64812: GO 64932
// if IsInArea ( unit , area ) then
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 2
64823: PPUSH
64824: CALL_OW 308
64828: IFFALSE 64846
// begin ComMoveToArea ( unit , goAway ) ;
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 3
64839: PPUSH
64840: CALL_OW 113
// exit ;
64844: GO 64932
// end ; if task [ 1 ] [ 1 ] <> M then
64846: LD_VAR 0 7
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: LD_STRING M
64861: NONEQUAL
64862: IFFALSE 64866
// exit ;
64864: GO 64932
// x := task [ 1 ] [ 2 ] ;
64866: LD_ADDR_VAR 0 5
64870: PUSH
64871: LD_VAR 0 7
64875: PUSH
64876: LD_INT 1
64878: ARRAY
64879: PUSH
64880: LD_INT 2
64882: ARRAY
64883: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64884: LD_ADDR_VAR 0 6
64888: PUSH
64889: LD_VAR 0 7
64893: PUSH
64894: LD_INT 1
64896: ARRAY
64897: PUSH
64898: LD_INT 3
64900: ARRAY
64901: ST_TO_ADDR
// if InArea ( x , y , area ) then
64902: LD_VAR 0 5
64906: PPUSH
64907: LD_VAR 0 6
64911: PPUSH
64912: LD_VAR 0 2
64916: PPUSH
64917: CALL_OW 309
64921: IFFALSE 64932
// ComStop ( unit ) ;
64923: LD_VAR 0 1
64927: PPUSH
64928: CALL_OW 141
// end ;
64932: LD_VAR 0 4
64936: RET
// export function Abs ( value ) ; begin
64937: LD_INT 0
64939: PPUSH
// result := value ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: LD_VAR 0 1
64949: ST_TO_ADDR
// if value < 0 then
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 0
64957: LESS
64958: IFFALSE 64975
// result := value * - 1 ;
64960: LD_ADDR_VAR 0 2
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: MUL
64974: ST_TO_ADDR
// end ;
64975: LD_VAR 0 2
64979: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
64989: PPUSH
// if not unit or not building then
64990: LD_VAR 0 1
64994: NOT
64995: PUSH
64996: LD_VAR 0 2
65000: NOT
65001: OR
65002: IFFALSE 65006
// exit ;
65004: GO 65232
// x := GetX ( building ) ;
65006: LD_ADDR_VAR 0 4
65010: PUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: CALL_OW 250
65020: ST_TO_ADDR
// y := GetY ( building ) ;
65021: LD_ADDR_VAR 0 6
65025: PUSH
65026: LD_VAR 0 2
65030: PPUSH
65031: CALL_OW 251
65035: ST_TO_ADDR
// d := GetDir ( building ) ;
65036: LD_ADDR_VAR 0 8
65040: PUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: CALL_OW 254
65050: ST_TO_ADDR
// r := 4 ;
65051: LD_ADDR_VAR 0 9
65055: PUSH
65056: LD_INT 4
65058: ST_TO_ADDR
// for i := 1 to 5 do
65059: LD_ADDR_VAR 0 10
65063: PUSH
65064: DOUBLE
65065: LD_INT 1
65067: DEC
65068: ST_TO_ADDR
65069: LD_INT 5
65071: PUSH
65072: FOR_TO
65073: IFFALSE 65230
// begin _x := ShiftX ( x , d , r + i ) ;
65075: LD_ADDR_VAR 0 5
65079: PUSH
65080: LD_VAR 0 4
65084: PPUSH
65085: LD_VAR 0 8
65089: PPUSH
65090: LD_VAR 0 9
65094: PUSH
65095: LD_VAR 0 10
65099: PLUS
65100: PPUSH
65101: CALL_OW 272
65105: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65106: LD_ADDR_VAR 0 7
65110: PUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: LD_VAR 0 8
65120: PPUSH
65121: LD_VAR 0 9
65125: PUSH
65126: LD_VAR 0 10
65130: PLUS
65131: PPUSH
65132: CALL_OW 273
65136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65137: LD_VAR 0 5
65141: PPUSH
65142: LD_VAR 0 7
65146: PPUSH
65147: CALL_OW 488
65151: PUSH
65152: LD_VAR 0 5
65156: PPUSH
65157: LD_VAR 0 7
65161: PPUSH
65162: CALL_OW 428
65166: PPUSH
65167: CALL_OW 247
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: IN
65182: NOT
65183: AND
65184: IFFALSE 65228
// begin ComMoveXY ( unit , _x , _y ) ;
65186: LD_VAR 0 1
65190: PPUSH
65191: LD_VAR 0 5
65195: PPUSH
65196: LD_VAR 0 7
65200: PPUSH
65201: CALL_OW 111
// result := [ _x , _y ] ;
65205: LD_ADDR_VAR 0 3
65209: PUSH
65210: LD_VAR 0 5
65214: PUSH
65215: LD_VAR 0 7
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// exit ;
65224: POP
65225: POP
65226: GO 65232
// end ; end ;
65228: GO 65072
65230: POP
65231: POP
// end ;
65232: LD_VAR 0 3
65236: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// result := 0 ;
65242: LD_ADDR_VAR 0 3
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 0
65257: LESS
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 8
65266: GREATER
65267: OR
65268: PUSH
65269: LD_VAR 0 2
65273: PUSH
65274: LD_INT 0
65276: LESS
65277: OR
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 8
65286: GREATER
65287: OR
65288: IFFALSE 65292
// exit ;
65290: GO 65367
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65292: LD_ADDR_VAR 0 4
65296: PUSH
65297: LD_INT 22
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PPUSH
65309: CALL_OW 69
65313: PUSH
65314: FOR_IN
65315: IFFALSE 65365
// begin un := UnitShoot ( i ) ;
65317: LD_ADDR_VAR 0 5
65321: PUSH
65322: LD_VAR 0 4
65326: PPUSH
65327: CALL_OW 504
65331: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65332: LD_VAR 0 5
65336: PPUSH
65337: CALL_OW 255
65341: PUSH
65342: LD_VAR 0 1
65346: EQUAL
65347: IFFALSE 65363
// begin result := un ;
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: LD_VAR 0 5
65358: ST_TO_ADDR
// exit ;
65359: POP
65360: POP
65361: GO 65367
// end ; end ;
65363: GO 65314
65365: POP
65366: POP
// end ;
65367: LD_VAR 0 3
65371: RET
// export function GetCargoBay ( units ) ; begin
65372: LD_INT 0
65374: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65375: LD_ADDR_VAR 0 2
65379: PUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 34
65390: PUSH
65391: LD_INT 12
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 34
65400: PUSH
65401: LD_INT 51
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 34
65410: PUSH
65411: LD_INT 32
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 34
65420: PUSH
65421: LD_EXP 20
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: PPUSH
65437: CALL_OW 72
65441: ST_TO_ADDR
// end ; end_of_file
65442: LD_VAR 0 2
65446: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65447: LD_VAR 0 1
65451: PUSH
65452: LD_INT 200
65454: DOUBLE
65455: GREATEREQUAL
65456: IFFALSE 65464
65458: LD_INT 299
65460: DOUBLE
65461: LESSEQUAL
65462: IFTRUE 65466
65464: GO 65498
65466: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65467: LD_VAR 0 1
65471: PPUSH
65472: LD_VAR 0 2
65476: PPUSH
65477: LD_VAR 0 3
65481: PPUSH
65482: LD_VAR 0 4
65486: PPUSH
65487: LD_VAR 0 5
65491: PPUSH
65492: CALL 23908 0 5
65496: GO 65575
65498: LD_INT 300
65500: DOUBLE
65501: GREATEREQUAL
65502: IFFALSE 65510
65504: LD_INT 399
65506: DOUBLE
65507: LESSEQUAL
65508: IFTRUE 65512
65510: GO 65574
65512: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65513: LD_VAR 0 1
65517: PPUSH
65518: LD_VAR 0 2
65522: PPUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: LD_VAR 0 4
65532: PPUSH
65533: LD_VAR 0 5
65537: PPUSH
65538: LD_VAR 0 6
65542: PPUSH
65543: LD_VAR 0 7
65547: PPUSH
65548: LD_VAR 0 8
65552: PPUSH
65553: LD_VAR 0 9
65557: PPUSH
65558: LD_VAR 0 10
65562: PPUSH
65563: LD_VAR 0 11
65567: PPUSH
65568: CALL 21796 0 11
65572: GO 65575
65574: POP
// end ;
65575: PPOPN 11
65577: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: LD_VAR 0 4
65597: PPUSH
65598: LD_VAR 0 5
65602: PPUSH
65603: CALL 23890 0 5
// end ; end_of_file
65607: PPOPN 5
65609: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65610: LD_VAR 0 1
65614: PPUSH
65615: LD_VAR 0 2
65619: PPUSH
65620: LD_VAR 0 3
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: LD_VAR 0 5
65634: PPUSH
65635: LD_VAR 0 6
65639: PPUSH
65640: CALL 10604 0 6
// end ;
65644: PPOPN 6
65646: END
