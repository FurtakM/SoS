// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10993 0 0
// PrepareAmerican ;
  19: CALL 259 0 0
// PrepareRussian ;
  23: CALL 1543 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6585 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 3
 121: PUSH
 122: LD_INT 57
 124: PUSH
 125: EMPTY
 126: LIST
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 30
 134: PUSH
 135: LD_INT 33
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PPUSH
 147: CALL_OW 69
 151: PUSH
 152: LD_INT 15
 154: GREATEREQUAL
 155: IFFALSE 167
 157: GO 159
 159: DISABLE
// SetAchievement ( ACH_FORT ) ;
 160: LD_STRING ACH_FORT
 162: PPUSH
 163: CALL_OW 543
 167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 168: LD_INT 22
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 12
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PPUSH
 192: CALL_OW 69
 196: PUSH
 197: LD_INT 0
 199: EQUAL
 200: IFFALSE 212
 202: GO 204
 204: DISABLE
// SetAchievement ( ACH_APE ) ;
 205: LD_STRING ACH_APE
 207: PPUSH
 208: CALL_OW 543
 212: END
// every 0 0$1 trigger killCounter >= 20 do
 213: LD_EXP 5
 217: PUSH
 218: LD_INT 20
 220: GREATEREQUAL
 221: IFFALSE 233
 223: GO 225
 225: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 226: LD_STRING ACH_DOUBLE
 228: PPUSH
 229: CALL_OW 543
 233: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 234: LD_EXP 9
 238: PPUSH
 239: LD_INT 15
 241: PPUSH
 242: CALL_OW 308
 246: IFFALSE 258
 248: GO 250
 250: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 251: LD_STRING ACH_AMASHA
 253: PPUSH
 254: CALL_OW 543
 258: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 259: LD_INT 0
 261: PPUSH
 262: PPUSH
 263: PPUSH
 264: PPUSH
 265: PPUSH
// uc_side := 1 ;
 266: LD_ADDR_OWVAR 20
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// uc_nation := 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 282: LD_INT 48
 284: PPUSH
 285: LD_STRING deltakappa
 287: PPUSH
 288: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 292: LD_INT 48
 294: PPUSH
 295: CALL_OW 274
 299: PPUSH
 300: LD_INT 1
 302: PPUSH
 303: LD_INT 2000
 305: PUSH
 306: LD_INT 1600
 308: PUSH
 309: LD_INT 1200
 311: PUSH
 312: LD_INT 900
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_OWVAR 67
 325: ARRAY
 326: PPUSH
 327: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 331: LD_INT 48
 333: PPUSH
 334: CALL_OW 274
 338: PPUSH
 339: LD_INT 2
 341: PPUSH
 342: LD_INT 20
 344: PPUSH
 345: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 349: LD_INT 48
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: LD_INT 100
 362: PPUSH
 363: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 367: LD_ADDR_EXP 8
 371: PUSH
 372: LD_STRING JMM
 374: PPUSH
 375: LD_EXP 1
 379: NOT
 380: PPUSH
 381: LD_STRING 13f_
 383: PPUSH
 384: CALL 34128 0 3
 388: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 389: LD_EXP 8
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 401: LD_INT 5
 403: PUSH
 404: LD_INT 5
 406: PUSH
 407: LD_INT 3
 409: PUSH
 410: LD_INT 3
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 9
 433: PUSH
 434: LD_INT 9
 436: PUSH
 437: LD_INT 5
 439: PUSH
 440: LD_INT 5
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: LD_INT 100
 457: PPUSH
 458: CALL 39148 0 5
// JMMVeh := CreateVehicle ;
 462: LD_ADDR_EXP 9
 466: PUSH
 467: CALL_OW 45
 471: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 472: LD_EXP 9
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 484: LD_EXP 9
 488: PPUSH
 489: LD_INT 6
 491: PPUSH
 492: LD_INT 5
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 502: LD_EXP 8
 506: PPUSH
 507: LD_EXP 9
 511: PPUSH
 512: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 516: LD_EXP 9
 520: PPUSH
 521: LD_INT 1
 523: NEG
 524: PPUSH
 525: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 529: LD_EXP 9
 533: PPUSH
 534: LD_INT 21
 536: PPUSH
 537: LD_INT 8
 539: PPUSH
 540: CALL_OW 111
// uc_side := 4 ;
 544: LD_ADDR_OWVAR 20
 548: PUSH
 549: LD_INT 4
 551: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 552: LD_ADDR_EXP 13
 556: PUSH
 557: LD_STRING Powell
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 34128 0 3
 570: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 571: LD_ADDR_EXP 10
 575: PUSH
 576: LD_STRING Joan
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_STRING 10c_
 587: PPUSH
 588: CALL 34128 0 3
 592: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 593: LD_ADDR_EXP 11
 597: PUSH
 598: LD_STRING Lisa
 600: PPUSH
 601: LD_EXP 1
 605: NOT
 606: PPUSH
 607: LD_STRING 13s_
 609: PPUSH
 610: CALL 34128 0 3
 614: ST_TO_ADDR
// if Joan then
 615: LD_EXP 10
 619: IFFALSE 658
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 621: LD_EXP 10
 625: PPUSH
 626: LD_INT 4
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 636: LD_EXP 10
 640: PPUSH
 641: LD_INT 4
 643: PPUSH
 644: CALL_OW 336
// JMMGirl = 1 ;
 648: LD_ADDR_EXP 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// end else
 656: GO 749
// if Lisa then
 658: LD_EXP 11
 662: IFFALSE 701
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 664: LD_EXP 11
 668: PPUSH
 669: LD_INT 4
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 679: LD_EXP 11
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 336
// JMMGirl := 2 ;
 691: LD_ADDR_EXP 2
 695: PUSH
 696: LD_INT 2
 698: ST_TO_ADDR
// end else
 699: GO 749
// begin Connie := NewCharacter ( Coonie ) ;
 701: LD_ADDR_EXP 12
 705: PUSH
 706: LD_STRING Coonie
 708: PPUSH
 709: CALL_OW 25
 713: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 714: LD_EXP 12
 718: PPUSH
 719: LD_INT 4
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 729: LD_EXP 12
 733: PPUSH
 734: LD_INT 3
 736: PPUSH
 737: CALL_OW 336
// JMMGirl := 3 ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 3
 748: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 749: LD_ADDR_VAR 0 2
 753: PUSH
 754: DOUBLE
 755: LD_INT 1
 757: DEC
 758: ST_TO_ADDR
 759: LD_INT 4
 761: PUSH
 762: LD_INT 3
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_OWVAR 67
 781: ARRAY
 782: PUSH
 783: FOR_TO
 784: IFFALSE 938
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 786: LD_INT 4
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 3
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 2
 808: PUSH
 809: LD_INT 4
 811: MOD
 812: PUSH
 813: LD_INT 1
 815: PLUS
 816: ARRAY
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 9
 826: PUSH
 827: LD_INT 7
 829: PUSH
 830: LD_INT 4
 832: PUSH
 833: LD_INT 5
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: LD_VAR 0 2
 846: PUSH
 847: LD_INT 4
 849: MOD
 850: PUSH
 851: LD_INT 1
 853: PLUS
 854: ARRAY
 855: PPUSH
 856: LD_INT 33
 858: PPUSH
 859: LD_INT 55
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: CALL 39148 0 5
// veh := CreateVehicle ;
 871: LD_ADDR_VAR 0 4
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 881: LD_VAR 0 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 5
 891: PPUSH
 892: CALL_OW 12
 896: PPUSH
 897: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 901: LD_VAR 0 4
 905: PPUSH
 906: LD_INT 500
 908: PPUSH
 909: LD_INT 950
 911: PPUSH
 912: CALL_OW 12
 916: PPUSH
 917: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 921: LD_VAR 0 4
 925: PPUSH
 926: LD_INT 5
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: GO 783
 938: POP
 939: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_INT 3
 952: PUSH
 953: LD_INT 3
 955: PUSH
 956: LD_INT 2
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_OWVAR 67
 972: ARRAY
 973: PUSH
 974: FOR_TO
 975: IFFALSE 1097
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 977: LD_INT 3
 979: PUSH
 980: LD_INT 2
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 2
 994: MOD
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: PPUSH
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 3
1006: PPUSH
1007: LD_INT 9
1009: PUSH
1010: LD_INT 5
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_VAR 0 2
1021: PUSH
1022: LD_INT 2
1024: MOD
1025: PUSH
1026: LD_INT 1
1028: PLUS
1029: ARRAY
1030: PPUSH
1031: LD_INT 0
1033: PPUSH
1034: CALL 39148 0 5
// veh := CreateVehicle ;
1038: LD_ADDR_VAR 0 4
1042: PUSH
1043: CALL_OW 45
1047: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1048: LD_VAR 0 4
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: CALL_OW 12
1063: PPUSH
1064: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1068: LD_VAR 0 4
1072: PPUSH
1073: LD_INT 1000
1075: PPUSH
1076: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1080: LD_VAR 0 4
1084: PPUSH
1085: LD_INT 17
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end ;
1095: GO 974
1097: POP
1098: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1099: LD_ADDR_VAR 0 2
1103: PUSH
1104: DOUBLE
1105: LD_INT 1
1107: DEC
1108: ST_TO_ADDR
1109: LD_INT 3
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_OWVAR 67
1131: ARRAY
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1182
// begin PrepareApeman ( 1 ) ;
1136: LD_INT 1
1138: PPUSH
1139: CALL 68455 0 1
// uc_side := 4 ;
1143: LD_ADDR_OWVAR 20
1147: PUSH
1148: LD_INT 4
1150: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1151: LD_ADDR_OWVAR 28
1155: PUSH
1156: LD_INT 16
1158: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1159: CALL_OW 44
1163: PPUSH
1164: LD_INT 84
1166: PPUSH
1167: LD_INT 127
1169: PPUSH
1170: LD_INT 5
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// end ;
1180: GO 1133
1182: POP
1183: POP
// uc_side := 4 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 3
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 12
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL 39148 0 5
// veh := CreateVehicle ;
1219: LD_ADDR_VAR 0 4
1223: PUSH
1224: CALL_OW 45
1228: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1229: LD_VAR 0 4
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 100
1239: PPUSH
1240: CALL_OW 290
// SetLives ( veh , 450 ) ;
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_INT 450
1251: PPUSH
1252: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_INT 122
1263: PPUSH
1264: LD_INT 118
1266: PPUSH
1267: LD_INT 4
1269: PPUSH
1270: LD_INT 0
1272: PPUSH
1273: CALL 74488 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1277: LD_INT 1
1279: PPUSH
1280: LD_INT 2
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1290: CALL_OW 44
1294: PPUSH
1295: LD_INT 124
1297: PPUSH
1298: LD_INT 120
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_INT 18
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 517
1323: ST_TO_ADDR
// for i := 1 to 4 do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_INT 4
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1446
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1340: LD_INT 1
1342: PPUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 2
1358: PPUSH
1359: CALL_OW 12
1363: ARRAY
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 380
// un := CreateHuman ;
1372: LD_ADDR_VAR 0 3
1376: PUSH
1377: CALL_OW 44
1381: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1382: LD_VAR 0 3
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: LD_INT 5
1392: PPUSH
1393: CALL_OW 12
1397: PPUSH
1398: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1402: LD_VAR 0 3
1406: PPUSH
1407: LD_VAR 0 5
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PPUSH
1422: LD_VAR 0 5
1426: PUSH
1427: LD_INT 2
1429: ARRAY
1430: PUSH
1431: LD_VAR 0 2
1435: ARRAY
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL_OW 601
// end ;
1444: GO 1337
1446: POP
1447: POP
// end ;
1448: LD_VAR 0 1
1452: RET
// export function ChangeSideKappaBase ; begin
1453: LD_INT 0
1455: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1456: LD_INT 70
1458: PPUSH
1459: LD_INT 138
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 80
1467: NEG
1468: PPUSH
1469: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1473: LD_INT 70
1475: PPUSH
1476: LD_INT 138
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1486: LD_INT 147
1488: PPUSH
1489: LD_INT 122
1491: PPUSH
1492: LD_INT 1
1494: PPUSH
1495: LD_INT 40
1497: NEG
1498: PPUSH
1499: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1503: LD_INT 147
1505: PPUSH
1506: LD_INT 122
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1516: LD_INT 22
1518: PUSH
1519: LD_INT 4
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL_OW 235
// end ; end_of_file
1538: LD_VAR 0 1
1542: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// uc_side := 3 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 3
1558: ST_TO_ADDR
// uc_nation := 3 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1567: LD_ADDR_EXP 15
1571: PUSH
1572: LD_INT 8
1574: PUSH
1575: LD_INT 11
1577: PUSH
1578: LD_INT 14
1580: PUSH
1581: LD_INT 17
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_OWVAR 67
1594: ARRAY
1595: ST_TO_ADDR
// ruMobile := [ ] ;
1596: LD_ADDR_EXP 16
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruBuildList := [ ] ;
1603: LD_ADDR_EXP 17
1607: PUSH
1608: EMPTY
1609: ST_TO_ADDR
// ruAttackers := [ ] ;
1610: LD_ADDR_EXP 18
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1617: LD_ADDR_EXP 19
1621: PUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: CALL 34275 0 3
1635: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1636: LD_ADDR_VAR 0 6
1640: PUSH
1641: LD_INT 43
1643: PUSH
1644: LD_INT 46
1646: PUSH
1647: LD_INT 45
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_INT 46
1662: PUSH
1663: LD_INT 70
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 121
1672: PUSH
1673: LD_INT 95
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 68
1682: PUSH
1683: LD_INT 65
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// if not russianRocketsDisabled then
1695: LD_EXP 6
1699: NOT
1700: IFFALSE 1716
// weapons := weapons ^ ru_rocket ;
1702: LD_ADDR_VAR 0 6
1706: PUSH
1707: LD_VAR 0 6
1711: PUSH
1712: LD_INT 47
1714: ADD
1715: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1716: LD_ADDR_EXP 14
1720: PUSH
1721: LD_STRING Eisenstein
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1729: LD_EXP 14
1733: PPUSH
1734: LD_INT 22
1736: PPUSH
1737: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1741: LD_INT 22
1743: PPUSH
1744: CALL_OW 274
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: LD_INT 2250
1754: PUSH
1755: LD_INT 3500
1757: PUSH
1758: LD_INT 4500
1760: PUSH
1761: LD_INT 5600
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_OWVAR 67
1774: ARRAY
1775: PPUSH
1776: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1780: LD_INT 22
1782: PPUSH
1783: CALL_OW 274
1787: PPUSH
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 600
1793: PPUSH
1794: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1798: LD_INT 22
1800: PPUSH
1801: CALL_OW 274
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: LD_INT 100
1811: PPUSH
1812: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1816: LD_INT 116
1818: PPUSH
1819: LD_INT 46
1821: PPUSH
1822: LD_INT 70
1824: PPUSH
1825: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 22
1836: PUSH
1837: LD_INT 3
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 21
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: FOR_IN
1864: IFFALSE 1886
// SetBLevel ( i , 6 + Difficulty ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_INT 6
1873: PUSH
1874: LD_OWVAR 67
1878: PLUS
1879: PPUSH
1880: CALL_OW 241
1884: GO 1863
1886: POP
1887: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: LD_INT 22
1895: PUSH
1896: LD_INT 3
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: LD_INT 30
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 30
1918: PUSH
1919: LD_INT 33
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PPUSH
1935: CALL_OW 69
1939: ST_TO_ADDR
// if russianRocketsDisabled then
1940: LD_EXP 6
1944: IFFALSE 2020
// begin ruTechList := ruTechList diff tech_advrocket ;
1946: LD_ADDR_EXP 19
1950: PUSH
1951: LD_EXP 19
1955: PUSH
1956: LD_INT 71
1958: DIFF
1959: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_VAR 0 4
1969: PPUSH
1970: LD_INT 35
1972: PUSH
1973: LD_INT 47
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 72
1984: PUSH
1985: FOR_IN
1986: IFFALSE 2018
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 6
1997: PUSH
1998: LD_INT 1
2000: PPUSH
2001: LD_VAR 0 6
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PPUSH
2012: CALL_OW 431
2016: GO 1985
2018: POP
2019: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 30
2037: PUSH
2038: LD_INT 32
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL_OW 69
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2104
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
2057: LD_INT 0
2059: PPUSH
2060: LD_INT 7
2062: PUSH
2063: LD_INT 8
2065: PUSH
2066: LD_INT 9
2068: PUSH
2069: LD_INT 10
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_OWVAR 67
2082: ARRAY
2083: PPUSH
2084: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2088: CALL_OW 44
2092: PPUSH
2093: LD_VAR 0 2
2097: PPUSH
2098: CALL_OW 52
// end ;
2102: GO 2054
2104: POP
2105: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PPUSH
2135: CALL_OW 69
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2275
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: DOUBLE
2149: LD_INT 1
2151: DEC
2152: ST_TO_ADDR
2153: LD_INT 2
2155: PUSH
2156: LD_INT 2
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: LD_INT 3
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_OWVAR 67
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2271
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 7
2185: PUSH
2186: LD_INT 8
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: LD_INT 10
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_OWVAR 67
2205: ARRAY
2206: PPUSH
2207: CALL_OW 381
// un := CreateHuman ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: CALL_OW 44
2220: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2235: LD_VAR 0 5
2239: PPUSH
2240: LD_INT 9
2242: PPUSH
2243: CALL_OW 336
// if j = 2 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 2
2254: EQUAL
2255: IFFALSE 2269
// SetUnitAttackType ( un , 3 ) ;
2257: LD_VAR 0 5
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: CALL_OW 603
// end ;
2269: GO 2177
2271: POP
2272: POP
// end ;
2273: GO 2140
2275: POP
2276: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 5
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: LD_INT 6
2295: PUSH
2296: LD_INT 6
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_OWVAR 67
2309: ARRAY
2310: PUSH
2311: FOR_TO
2312: IFFALSE 2359
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 6
2319: PUSH
2320: LD_INT 7
2322: PUSH
2323: LD_INT 9
2325: PUSH
2326: LD_INT 10
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_OWVAR 67
2339: ARRAY
2340: PPUSH
2341: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2345: CALL_OW 44
2349: PPUSH
2350: LD_INT 22
2352: PPUSH
2353: CALL_OW 52
// end ;
2357: GO 2311
2359: POP
2360: POP
// for i := 1 to 2 do
2361: LD_ADDR_VAR 0 2
2365: PUSH
2366: DOUBLE
2367: LD_INT 1
2369: DEC
2370: ST_TO_ADDR
2371: LD_INT 2
2373: PUSH
2374: FOR_TO
2375: IFFALSE 2455
// for j := 1 to 6 do
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: DOUBLE
2383: LD_INT 1
2385: DEC
2386: ST_TO_ADDR
2387: LD_INT 6
2389: PUSH
2390: FOR_TO
2391: IFFALSE 2451
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 6
2398: PUSH
2399: LD_INT 7
2401: PUSH
2402: LD_INT 9
2404: PUSH
2405: LD_INT 10
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2424: CALL_OW 44
2428: PPUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 40
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PPUSH
2445: CALL_OW 52
// end ;
2449: GO 2390
2451: POP
2452: POP
2453: GO 2374
2455: POP
2456: POP
// for i := 1 to 4 do
2457: LD_ADDR_VAR 0 2
2461: PUSH
2462: DOUBLE
2463: LD_INT 1
2465: DEC
2466: ST_TO_ADDR
2467: LD_INT 4
2469: PUSH
2470: FOR_TO
2471: IFFALSE 2518
// begin PrepareScientist ( false , 6 ) ;
2473: LD_INT 0
2475: PPUSH
2476: LD_INT 6
2478: PPUSH
2479: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_INT 14
2490: PUSH
2491: LD_INT 15
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 2
2505: MOD
2506: PUSH
2507: LD_INT 1
2509: PLUS
2510: ARRAY
2511: PPUSH
2512: CALL_OW 52
// end ;
2516: GO 2470
2518: POP
2519: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2520: LD_INT 22
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 51
2531: PPUSH
2532: LD_INT 100
2534: PPUSH
2535: CALL 39148 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2539: CALL_OW 45
2543: PPUSH
2544: LD_INT 116
2546: PPUSH
2547: LD_INT 58
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: LD_INT 0
2555: PPUSH
2556: CALL_OW 50
// for i := 1 to 2 do
2560: LD_ADDR_VAR 0 2
2564: PUSH
2565: DOUBLE
2566: LD_INT 1
2568: DEC
2569: ST_TO_ADDR
2570: LD_INT 2
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2618
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2576: LD_INT 22
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: LD_INT 52
2587: PPUSH
2588: LD_INT 100
2590: PPUSH
2591: CALL 39148 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2595: CALL_OW 45
2599: PPUSH
2600: LD_INT 111
2602: PPUSH
2603: LD_INT 58
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 50
// end ;
2616: GO 2573
2618: POP
2619: POP
// for i := 1 to 4 do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: DOUBLE
2626: LD_INT 1
2628: DEC
2629: ST_TO_ADDR
2630: LD_INT 4
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2663
// begin PrepareApemanEngineer ( ) ;
2636: CALL 68353 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2640: CALL_OW 44
2644: PPUSH
2645: LD_INT 118
2647: PPUSH
2648: LD_INT 50
2650: PPUSH
2651: LD_INT 3
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 50
// end ;
2661: GO 2633
2663: POP
2664: POP
// end ;
2665: LD_VAR 0 1
2669: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2670: LD_EXP 19
2674: IFFALSE 2802
2676: GO 2678
2678: DISABLE
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// begin enable ;
2684: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2685: LD_ADDR_VAR 0 3
2689: PUSH
2690: LD_INT 14
2692: PUSH
2693: LD_INT 15
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PPUSH
2700: LD_INT 50
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: ST_TO_ADDR
// if not labs then
2711: LD_VAR 0 3
2715: NOT
2716: IFFALSE 2721
// begin disable ;
2718: DISABLE
// exit ;
2719: GO 2802
// end ; for i in labs do
2721: LD_ADDR_VAR 0 1
2725: PUSH
2726: LD_VAR 0 3
2730: PUSH
2731: FOR_IN
2732: IFFALSE 2800
// if BuildingStatus ( i ) = bs_idle then
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 461
2743: PUSH
2744: LD_INT 2
2746: EQUAL
2747: IFFALSE 2798
// for t in ruTechList do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_EXP 19
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2796
// if CanBeResearched ( i , t ) then
2762: LD_VAR 0 1
2766: PPUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: CALL_OW 430
2776: IFFALSE 2794
// begin ComResearch ( i , t ) ;
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 2
2787: PPUSH
2788: CALL_OW 124
// break ;
2792: GO 2796
// end ;
2794: GO 2759
2796: POP
2797: POP
2798: GO 2731
2800: POP
2801: POP
// end ;
2802: PPOPN 3
2804: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2805: LD_INT 3
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 32
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PPUSH
2836: CALL_OW 69
2840: IFFALSE 2924
2842: GO 2844
2844: DISABLE
2845: LD_INT 0
2847: PPUSH
// begin enable ;
2848: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2849: LD_ADDR_VAR 0 1
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 32
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: FOR_IN
2891: IFFALSE 2922
// if GetFuel ( i ) < 3 then
2893: LD_VAR 0 1
2897: PPUSH
2898: CALL_OW 261
2902: PUSH
2903: LD_INT 3
2905: LESS
2906: IFFALSE 2920
// SetFuel ( i , 3 ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 240
2920: GO 2890
2922: POP
2923: POP
// end ;
2924: PPOPN 1
2926: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2927: LD_INT 1
2929: PUSH
2930: LD_INT 40
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: LD_INT 3
2939: PUSH
2940: LD_INT 58
2942: PUSH
2943: EMPTY
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 50
2952: PUSH
2953: EMPTY
2954: LIST
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PPUSH
2960: CALL_OW 72
2964: IFFALSE 2997
2966: PUSH
2967: LD_EXP 18
2971: PUSH
2972: LD_INT 6
2974: PUSH
2975: LD_INT 8
2977: PUSH
2978: LD_INT 10
2980: PUSH
2981: LD_INT 12
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_OWVAR 67
2994: ARRAY
2995: LESS
2996: AND
2997: IFFALSE 3336
2999: GO 3001
3001: DISABLE
3002: LD_INT 0
3004: PPUSH
3005: PPUSH
3006: PPUSH
// begin enable ;
3007: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
3008: LD_ADDR_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PUSH
3016: LD_INT 40
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: LD_INT 50
3025: PUSH
3026: EMPTY
3027: LIST
3028: PPUSH
3029: CALL_OW 72
3033: PUSH
3034: FOR_IN
3035: IFFALSE 3334
// begin if BuildingStatus ( i ) <> bs_idle then
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 461
3046: PUSH
3047: LD_INT 2
3049: NONEQUAL
3050: IFFALSE 3054
// continue ;
3052: GO 3034
// if i = ruFac1 then
3054: LD_VAR 0 1
3058: PUSH
3059: LD_INT 1
3061: EQUAL
3062: IFFALSE 3105
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_INT 21
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 23
3077: PUSH
3078: LD_INT 23
3080: PUSH
3081: LD_INT 24
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 12
3101: ARRAY
3102: ST_TO_ADDR
3103: GO 3132
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 21
3112: PUSH
3113: LD_INT 23
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_INT 49
3139: PUSH
3140: LD_INT 44
3142: PUSH
3143: LD_INT 43
3145: PUSH
3146: LD_INT 46
3148: PUSH
3149: LD_INT 45
3151: PUSH
3152: LD_INT 46
3154: PUSH
3155: LD_INT 45
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// if not russianRocketsDisabled then
3167: LD_EXP 6
3171: NOT
3172: IFFALSE 3192
// weapon := Join ( weapon , ru_rocket ) ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 47
3186: PPUSH
3187: CALL 72328 0 2
3191: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3192: LD_ADDR_VAR 0 3
3196: PUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: CALL 36352 0 1
3214: PPUSH
3215: CALL_OW 12
3219: ARRAY
3220: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 21
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: IFFALSE 3255
3238: PUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 46
3246: PUSH
3247: LD_INT 47
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: IN
3254: AND
3255: IFFALSE 3288
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 44
3264: PUSH
3265: LD_INT 45
3267: PUSH
3268: LD_INT 49
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 2
3313: PPUSH
3314: CALL_OW 12
3318: ARRAY
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_VAR 0 3
3327: PPUSH
3328: CALL_OW 185
// end ;
3332: GO 3034
3334: POP
3335: POP
// end ;
3336: PPOPN 3
3338: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3339: LD_INT 22
3341: PPUSH
3342: CALL_OW 302
3346: IFFALSE 4227
3348: GO 3350
3350: DISABLE
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
// begin enable ;
3361: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: LD_INT 12
3369: PPUSH
3370: LD_INT 3
3372: PUSH
3373: LD_INT 24
3375: PUSH
3376: LD_INT 1000
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 21
3389: PUSH
3390: LD_INT 3
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 70
3405: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3406: LD_ADDR_VAR 0 4
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 25
3423: PUSH
3424: LD_INT 2
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 34
3457: PUSH
3458: LD_INT 52
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3474: LD_ADDR_VAR 0 7
3478: PUSH
3479: LD_INT 22
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 25
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3508: LD_ADDR_VAR 0 8
3512: PUSH
3513: LD_INT 14
3515: PUSH
3516: LD_INT 15
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3523: LD_VAR 0 7
3527: IFFALSE 3550
3529: PUSH
3530: LD_VAR 0 4
3534: PPUSH
3535: LD_INT 120
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 72
3549: AND
3550: IFFALSE 3563
// ComExitAll ( sci ) else
3552: LD_VAR 0 7
3556: PPUSH
3557: CALL 72809 0 1
3561: GO 3647
// if sci then
3563: LD_VAR 0 7
3567: IFFALSE 3647
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: IFFALSE 3599
3593: PUSH
3594: LD_VAR 0 8
3598: AND
3599: IFFALSE 3647
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3601: LD_VAR 0 7
3605: PPUSH
3606: LD_INT 3
3608: PUSH
3609: LD_INT 54
3611: PUSH
3612: EMPTY
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PPUSH
3619: CALL_OW 72
3623: PPUSH
3624: LD_VAR 0 8
3628: PUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_VAR 0 8
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3647: LD_VAR 0 5
3651: PPUSH
3652: LD_INT 50
3654: PUSH
3655: EMPTY
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: IFFALSE 3670
3664: PUSH
3665: LD_VAR 0 3
3669: AND
3670: IFFALSE 3711
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3672: LD_VAR 0 5
3676: PPUSH
3677: LD_INT 50
3679: PUSH
3680: EMPTY
3681: LIST
3682: PPUSH
3683: CALL_OW 72
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_VAR 0 5
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: CALL_OW 74
3706: PPUSH
3707: CALL_OW 130
// if eng then
3711: LD_VAR 0 4
3715: IFFALSE 4227
// begin for i in eng do
3717: LD_ADDR_VAR 0 1
3721: PUSH
3722: LD_VAR 0 4
3726: PUSH
3727: FOR_IN
3728: IFFALSE 4225
// begin tag := GetTag ( i ) ;
3730: LD_ADDR_VAR 0 6
3734: PUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 110
3744: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3745: LD_VAR 0 3
3749: NOT
3750: IFFALSE 3759
3752: PUSH
3753: LD_EXP 17
3757: NOT
3758: AND
3759: IFFALSE 3771
3761: PUSH
3762: LD_VAR 0 6
3766: PUSH
3767: LD_INT 1
3769: EQUAL
3770: AND
3771: IFFALSE 3797
// begin SetTag ( i , 0 ) ;
3773: LD_VAR 0 1
3777: PPUSH
3778: LD_INT 0
3780: PPUSH
3781: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3785: LD_VAR 0 1
3789: PPUSH
3790: LD_INT 22
3792: PPUSH
3793: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3797: LD_VAR 0 3
3801: IFTRUE 3809
3803: PUSH
3804: LD_EXP 17
3808: OR
3809: IFFALSE 3821
3811: PUSH
3812: LD_VAR 0 6
3816: PUSH
3817: LD_INT 0
3819: EQUAL
3820: AND
3821: IFFALSE 3835
// SetTag ( i , 1 ) ;
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 310
3844: IFFALSE 3856
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3867
// ComExit ( i ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL 72726 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3867: LD_VAR 0 1
3871: PPUSH
3872: CALL_OW 256
3876: PUSH
3877: LD_INT 700
3879: LESS
3880: IFFALSE 3892
3882: PUSH
3883: LD_VAR 0 6
3887: PUSH
3888: LD_INT 1
3890: EQUAL
3891: AND
3892: IFFALSE 3906
// SetTag ( i , 2 ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3906: LD_VAR 0 1
3910: PPUSH
3911: CALL_OW 256
3915: PUSH
3916: LD_INT 1000
3918: EQUAL
3919: IFFALSE 3931
3921: PUSH
3922: LD_VAR 0 6
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: AND
3931: IFFALSE 3945
// SetTag ( i , 1 ) ;
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: CALL_OW 109
// if tag = 2 then
3945: LD_VAR 0 6
3949: PUSH
3950: LD_INT 2
3952: EQUAL
3953: IFFALSE 4000
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3955: LD_VAR 0 1
3959: PPUSH
3960: LD_INT 110
3962: PPUSH
3963: LD_INT 41
3965: PPUSH
3966: CALL_OW 297
3970: PUSH
3971: LD_INT 6
3973: GREATER
3974: IFFALSE 4000
// begin ComMoveXY ( i , 110 , 41 ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 110
3983: PPUSH
3984: LD_INT 41
3986: PPUSH
3987: CALL_OW 111
// AddComHold ( i ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 308
4012: IFFALSE 4026
// ComMoveToArea ( i , ruBaseArea ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_INT 12
4021: PPUSH
4022: CALL_OW 113
// if tag = 1 then
4026: LD_VAR 0 6
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4223
// begin if b then
4036: LD_VAR 0 3
4040: IFFALSE 4068
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 130
4066: GO 4223
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4068: LD_EXP 17
4072: IFFALSE 4097
4074: PUSH
4075: LD_INT 11
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 70
4092: PUSH
4093: LD_INT 0
4095: EQUAL
4096: AND
4097: IFFALSE 4160
4099: PUSH
4100: LD_INT 22
4102: PPUSH
4103: LD_EXP 17
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: PUSH
4112: LD_INT 1
4114: ARRAY
4115: PPUSH
4116: LD_EXP 17
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: PUSH
4125: LD_INT 2
4127: ARRAY
4128: PPUSH
4129: LD_EXP 17
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PUSH
4138: LD_INT 3
4140: ARRAY
4141: PPUSH
4142: LD_EXP 17
4146: PUSH
4147: LD_INT 1
4149: ARRAY
4150: PUSH
4151: LD_INT 4
4153: ARRAY
4154: PPUSH
4155: CALL 47826 0 5
4159: AND
4160: IFFALSE 4223
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4162: LD_VAR 0 1
4166: PPUSH
4167: LD_EXP 17
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: LD_EXP 17
4184: PUSH
4185: LD_INT 1
4187: ARRAY
4188: PUSH
4189: LD_INT 2
4191: ARRAY
4192: PPUSH
4193: LD_EXP 17
4197: PUSH
4198: LD_INT 1
4200: ARRAY
4201: PUSH
4202: LD_INT 3
4204: ARRAY
4205: PPUSH
4206: LD_EXP 17
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PUSH
4215: LD_INT 4
4217: ARRAY
4218: PPUSH
4219: CALL_OW 145
// end ; end ;
4223: GO 3727
4225: POP
4226: POP
// end ; end ;
4227: PPOPN 8
4229: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 3
4242: PUSH
4243: LD_INT 60
4245: PUSH
4246: EMPTY
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 50
4255: PUSH
4256: EMPTY
4257: LIST
4258: PUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 16
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: PPUSH
4275: CALL_OW 69
4279: IFFALSE 4290
4281: PUSH
4282: LD_INT 14
4284: PPUSH
4285: CALL_OW 435
4289: AND
4290: IFFALSE 4402
4292: GO 4294
4294: DISABLE
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
// begin enable ;
4299: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4300: LD_ADDR_VAR 0 2
4304: PUSH
4305: LD_INT 14
4307: PPUSH
4308: CALL_OW 435
4312: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4313: LD_ADDR_VAR 0 1
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 3
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 60
4333: PUSH
4334: EMPTY
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 50
4343: PUSH
4344: EMPTY
4345: LIST
4346: PUSH
4347: LD_INT 25
4349: PUSH
4350: LD_INT 16
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: PPUSH
4363: CALL_OW 69
4367: PUSH
4368: FOR_IN
4369: IFFALSE 4400
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4371: LD_VAR 0 1
4375: PPUSH
4376: LD_VAR 0 2
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: PPUSH
4385: LD_VAR 0 2
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: CALL_OW 117
4398: GO 4368
4400: POP
4401: POP
// end ;
4402: PPOPN 2
4404: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4405: LD_INT 22
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 60
4420: PUSH
4421: EMPTY
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 50
4430: PUSH
4431: EMPTY
4432: LIST
4433: PUSH
4434: LD_INT 34
4436: PUSH
4437: LD_INT 51
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: IFFALSE 4465
4456: PUSH
4457: LD_INT 13
4459: PPUSH
4460: CALL_OW 435
4464: AND
4465: IFFALSE 4577
4467: GO 4469
4469: DISABLE
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
// begin enable ;
4474: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: LD_INT 13
4482: PPUSH
4483: CALL_OW 435
4487: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 60
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 50
4518: PUSH
4519: EMPTY
4520: LIST
4521: PUSH
4522: LD_INT 34
4524: PUSH
4525: LD_INT 51
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 69
4542: PUSH
4543: FOR_IN
4544: IFFALSE 4575
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_VAR 0 2
4555: PUSH
4556: LD_INT 1
4558: ARRAY
4559: PPUSH
4560: LD_VAR 0 2
4564: PUSH
4565: LD_INT 2
4567: ARRAY
4568: PPUSH
4569: CALL_OW 117
4573: GO 4543
4575: POP
4576: POP
// end ;
4577: PPOPN 2
4579: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4580: LD_OWVAR 67
4584: PUSH
4585: LD_INT 1
4587: GREATER
4588: IFFALSE 4599
4590: PUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 302
4598: AND
4599: IFFALSE 4759
4601: GO 4603
4603: DISABLE
4604: LD_INT 0
4606: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4607: LD_ADDR_VAR 0 1
4611: PUSH
4612: DOUBLE
4613: LD_INT 1
4615: DEC
4616: ST_TO_ADDR
4617: LD_INT 3
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 5
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: PUSH
4631: LD_OWVAR 67
4635: PUSH
4636: LD_INT 1
4638: MINUS
4639: ARRAY
4640: PUSH
4641: FOR_TO
4642: IFFALSE 4686
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4644: LD_INT 1
4646: PUSH
4647: LD_INT 40
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_VAR 0 1
4658: PUSH
4659: LD_INT 2
4661: MOD
4662: PUSH
4663: LD_INT 1
4665: PLUS
4666: ARRAY
4667: PPUSH
4668: LD_INT 21
4670: PPUSH
4671: LD_INT 3
4673: PPUSH
4674: LD_INT 1
4676: PPUSH
4677: LD_INT 45
4679: PPUSH
4680: CALL_OW 185
// end ;
4684: GO 4641
4686: POP
4687: POP
// repeat wait ( 6 6$00 ) ;
4688: LD_INT 12600
4690: PPUSH
4691: CALL_OW 67
// for i := 1 to 2 do
4695: LD_ADDR_VAR 0 1
4699: PUSH
4700: DOUBLE
4701: LD_INT 1
4703: DEC
4704: ST_TO_ADDR
4705: LD_INT 2
4707: PUSH
4708: FOR_TO
4709: IFFALSE 4732
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 21
4716: PPUSH
4717: LD_INT 3
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_INT 45
4725: PPUSH
4726: CALL_OW 185
4730: GO 4708
4732: POP
4733: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4734: LD_INT 1
4736: PPUSH
4737: CALL_OW 302
4741: NOT
4742: IFTRUE 4757
4744: PUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 313
4752: PUSH
4753: LD_INT 0
4755: EQUAL
4756: OR
4757: IFFALSE 4688
// end ;
4759: PPOPN 1
4761: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4762: LD_EXP 16
4766: IFFALSE 5356
4768: GO 4770
4770: DISABLE
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// begin enable ;
4776: ENABLE
// if not ruMobile then
4777: LD_EXP 16
4781: NOT
4782: IFFALSE 4786
// exit ;
4784: GO 5356
// for i in ruMobile do
4786: LD_ADDR_VAR 0 1
4790: PUSH
4791: LD_EXP 16
4795: PUSH
4796: FOR_IN
4797: IFFALSE 5354
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4799: LD_VAR 0 1
4803: PPUSH
4804: CALL_OW 302
4808: NOT
4809: IFTRUE 4826
4811: PUSH
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL_OW 255
4821: PUSH
4822: LD_INT 3
4824: NONEQUAL
4825: OR
4826: IFFALSE 4846
// begin ruMobile := ruMobile diff i ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: LD_EXP 16
4837: PUSH
4838: LD_VAR 0 1
4842: DIFF
4843: ST_TO_ADDR
// continue ;
4844: GO 4796
// end ; if GetTag ( i ) = 300 then
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 110
4855: PUSH
4856: LD_INT 300
4858: EQUAL
4859: IFFALSE 4991
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL_OW 261
4870: PUSH
4871: LD_INT 50
4873: LESS
4874: IFFALSE 4891
4876: PUSH
4877: LD_VAR 0 1
4881: PPUSH
4882: CALL_OW 262
4886: PUSH
4887: LD_INT 1
4889: EQUAL
4890: AND
4891: IFFALSE 4950
// begin ComMoveXY ( i , 120 , 58 ) ;
4893: LD_VAR 0 1
4897: PPUSH
4898: LD_INT 120
4900: PPUSH
4901: LD_INT 58
4903: PPUSH
4904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4908: LD_INT 35
4910: PPUSH
4911: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_INT 120
4922: PPUSH
4923: LD_INT 58
4925: PPUSH
4926: CALL_OW 297
4930: PUSH
4931: LD_INT 4
4933: LESS
4934: IFFALSE 4908
// SetFuel ( i , 100 ) ;
4936: LD_VAR 0 1
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// end else
4948: GO 4991
// if not IsInArea ( i , ruParkingArea ) then
4950: LD_VAR 0 1
4954: PPUSH
4955: LD_INT 10
4957: PPUSH
4958: CALL_OW 308
4962: NOT
4963: IFFALSE 4979
// ComMoveToArea ( i , ruParkingArea ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_INT 10
4972: PPUSH
4973: CALL_OW 113
4977: GO 4991
// SetTag ( i , 301 ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_INT 301
4986: PPUSH
4987: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 110
5000: PUSH
5001: LD_INT 301
5003: EQUAL
5004: IFFALSE 5134
// begin if GetLives ( i ) < 1000 then
5006: LD_VAR 0 1
5010: PPUSH
5011: CALL_OW 256
5015: PUSH
5016: LD_INT 1000
5018: LESS
5019: IFFALSE 5111
// begin if not IsDrivenBy ( i ) then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 311
5030: NOT
5031: IFFALSE 5035
// continue ;
5033: GO 4796
// mech := IsDrivenBy ( i ) ;
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 311
5049: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5073: LD_INT 35
5075: PPUSH
5076: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 256
5089: PUSH
5090: LD_INT 1000
5092: EQUAL
5093: IFFALSE 5073
// ComEnterUnit ( mech , i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 120
// end else
5109: GO 5134
// if IsDrivenBy ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 311
5120: IFFALSE 5134
// SetTag ( i , 0 ) ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5134: LD_VAR 0 1
5138: PPUSH
5139: CALL_OW 110
5143: PUSH
5144: LD_INT 300
5146: LESS
5147: IFFALSE 5352
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5149: LD_ADDR_VAR 0 3
5153: PUSH
5154: LD_INT 11
5156: PPUSH
5157: LD_INT 81
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 70
5171: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 256
5181: PUSH
5182: LD_INT 650
5184: LESS
5185: IFFALSE 5210
// begin ComStop ( i ) ;
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 141
// SetTag ( i , 300 ) ;
5196: LD_VAR 0 1
5200: PPUSH
5201: LD_INT 300
5203: PPUSH
5204: CALL_OW 109
// continue ;
5208: GO 4796
// end ; if enemy then
5210: LD_VAR 0 3
5214: IFFALSE 5254
// begin if not HasTask ( i ) then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 314
5225: NOT
5226: IFFALSE 5252
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 74
5247: PPUSH
5248: CALL_OW 115
// end else
5252: GO 5352
// if ruMobile then
5254: LD_EXP 16
5258: IFFALSE 5352
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 81
5267: PUSH
5268: LD_INT 3
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if enemy then
5280: LD_VAR 0 3
5284: IFFALSE 5352
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5286: LD_VAR 0 1
5290: PPUSH
5291: LD_INT 113
5293: PUSH
5294: LD_INT 80
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 118
5303: PUSH
5304: LD_INT 100
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 107
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 114
5323: PUSH
5324: LD_INT 120
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 86
5333: PUSH
5334: LD_INT 116
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL 75094 0 2
// end ; end ; end ;
5352: GO 4796
5354: POP
5355: POP
// end ;
5356: PPOPN 3
5358: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5359: LD_EXP 18
5363: IFFALSE 5409
5365: GO 5367
5367: DISABLE
5368: LD_INT 0
5370: PPUSH
// begin enable ;
5371: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_EXP 18
5381: PPUSH
5382: LD_INT 50
5384: PUSH
5385: EMPTY
5386: LIST
5387: PPUSH
5388: CALL_OW 72
5392: ST_TO_ADDR
// ruAttackers := [ ] ;
5393: LD_ADDR_EXP 18
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// SendAttack ( tmp ) ;
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL 5412 0 1
// end ;
5409: PPOPN 1
5411: END
// function SendAttack ( group ) ; var i , tmp ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
5416: PPUSH
// for i in group do
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5494
// begin SetTag ( i , 0 ) ;
5430: LD_VAR 0 3
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 109
// if Prob ( 30 ) then
5442: LD_INT 30
5444: PPUSH
5445: CALL_OW 13
5449: IFFALSE 5477
// begin SetTag ( i , 1 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_INT 116
5470: PPUSH
5471: CALL_OW 120
// end else
5475: GO 5492
// ComAgressiveMove ( i , 118 , 93 ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_INT 118
5484: PPUSH
5485: LD_INT 93
5487: PPUSH
5488: CALL_OW 114
// end ;
5492: GO 5427
5494: POP
5495: POP
// repeat wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_VAR 0 1
5512: PPUSH
5513: LD_INT 120
5515: PUSH
5516: LD_INT 0
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 72
5527: ST_TO_ADDR
// for i in tmp do
5528: LD_ADDR_VAR 0 3
5532: PUSH
5533: LD_VAR 0 4
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5686
// begin if not IsOk ( i ) then
5541: LD_VAR 0 3
5545: PPUSH
5546: CALL_OW 302
5550: NOT
5551: IFFALSE 5571
// begin tmp := tmp diff i ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_VAR 0 4
5562: PUSH
5563: LD_VAR 0 3
5567: DIFF
5568: ST_TO_ADDR
// continue ;
5569: GO 5538
// end ; if GetDistUnits ( i , usDep ) < 8 then
5571: LD_VAR 0 3
5575: PPUSH
5576: LD_INT 48
5578: PPUSH
5579: CALL_OW 296
5583: PUSH
5584: LD_INT 8
5586: LESS
5587: IFFALSE 5603
// begin ComAttackUnit ( i , usDep ) ;
5589: LD_VAR 0 3
5593: PPUSH
5594: LD_INT 48
5596: PPUSH
5597: CALL_OW 115
// continue ;
5601: GO 5538
// end ; if not See ( 1 , i ) then
5603: LD_INT 1
5605: PPUSH
5606: LD_VAR 0 3
5610: PPUSH
5611: CALL_OW 292
5615: NOT
5616: IFFALSE 5635
// ComAgressiveMove ( i , 86 , 116 ) else
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 86
5625: PPUSH
5626: LD_INT 116
5628: PPUSH
5629: CALL_OW 114
5633: GO 5684
// if GetWeapon ( i ) <> ru_time_lapser then
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 264
5644: PUSH
5645: LD_INT 49
5647: NONEQUAL
5648: IFFALSE 5684
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5650: LD_VAR 0 3
5654: PPUSH
5655: LD_INT 81
5657: PUSH
5658: LD_INT 3
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PPUSH
5670: LD_VAR 0 3
5674: PPUSH
5675: CALL_OW 74
5679: PPUSH
5680: CALL_OW 115
// end ;
5684: GO 5538
5686: POP
5687: POP
// until not tmp ;
5688: LD_VAR 0 4
5692: NOT
5693: IFFALSE 5496
// end ; end_of_file
5695: LD_VAR 0 2
5699: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL 27654 0 1
// if unit = JMM then
5713: LD_VAR 0 1
5717: PUSH
5718: LD_EXP 8
5722: EQUAL
5723: IFFALSE 5732
// YouLost ( JMM ) ;
5725: LD_STRING JMM
5727: PPUSH
5728: CALL_OW 104
// if GetSide ( unit ) = 4 then
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 255
5741: PUSH
5742: LD_INT 4
5744: EQUAL
5745: IFFALSE 5804
// begin if unit = Joan then
5747: LD_VAR 0 1
5751: PUSH
5752: LD_EXP 10
5756: EQUAL
5757: IFFALSE 5766
// YouLost ( Joan ) ;
5759: LD_STRING Joan
5761: PPUSH
5762: CALL_OW 104
// if unit = Connie then
5766: LD_VAR 0 1
5770: PUSH
5771: LD_EXP 12
5775: EQUAL
5776: IFFALSE 5785
// YouLost ( Connie ) ;
5778: LD_STRING Connie
5780: PPUSH
5781: CALL_OW 104
// if unit = Lisa then
5785: LD_VAR 0 1
5789: PUSH
5790: LD_EXP 11
5794: EQUAL
5795: IFFALSE 5804
// YouLost ( Lisa ) ;
5797: LD_STRING Lisa
5799: PPUSH
5800: CALL_OW 104
// end ; if unit in ruAttackers then
5804: LD_VAR 0 1
5808: PUSH
5809: LD_EXP 18
5813: IN
5814: IFFALSE 5832
// ruAttackers := ruAttackers diff unit ;
5816: LD_ADDR_EXP 18
5820: PUSH
5821: LD_EXP 18
5825: PUSH
5826: LD_VAR 0 1
5830: DIFF
5831: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5832: LD_VAR 0 1
5836: PPUSH
5837: CALL_OW 264
5841: PUSH
5842: LD_INT 51
5844: EQUAL
5845: IFFALSE 5856
5847: PUSH
5848: LD_INT 40
5850: PPUSH
5851: CALL_OW 302
5855: AND
5856: IFFALSE 5896
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5858: LD_INT 40
5860: PPUSH
5861: LD_INT 21
5863: PPUSH
5864: LD_INT 1
5866: PUSH
5867: LD_INT 3
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: CALL_OW 12
5884: ARRAY
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 51
5891: PPUSH
5892: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5896: LD_VAR 0 1
5900: PPUSH
5901: CALL_OW 264
5905: PUSH
5906: LD_INT 52
5908: EQUAL
5909: IFFALSE 5920
5911: PUSH
5912: LD_INT 40
5914: PPUSH
5915: CALL_OW 302
5919: AND
5920: IFFALSE 5960
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5922: LD_INT 40
5924: PPUSH
5925: LD_INT 21
5927: PPUSH
5928: LD_INT 1
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: PUSH
5938: LD_INT 1
5940: PPUSH
5941: LD_INT 2
5943: PPUSH
5944: CALL_OW 12
5948: ARRAY
5949: PPUSH
5950: LD_INT 3
5952: PPUSH
5953: LD_INT 52
5955: PPUSH
5956: CALL_OW 185
// if unit in ruMobile then
5960: LD_VAR 0 1
5964: PUSH
5965: LD_EXP 16
5969: IN
5970: IFFALSE 5988
// ruMobile := ruMobile diff i ;
5972: LD_ADDR_EXP 16
5976: PUSH
5977: LD_EXP 16
5981: PUSH
5982: LD_VAR 0 2
5986: DIFF
5987: ST_TO_ADDR
// if unit = ruCommander then
5988: LD_VAR 0 1
5992: PUSH
5993: LD_EXP 14
5997: EQUAL
5998: IFFALSE 6161
// begin repeat wait ( 0 0$2 ) ;
6000: LD_INT 70
6002: PPUSH
6003: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
6007: LD_ADDR_VAR 0 3
6011: PUSH
6012: LD_INT 22
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 23
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 50
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 21
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: ST_TO_ADDR
// if tmp then
6059: LD_VAR 0 3
6063: IFFALSE 6154
// for i in tmp do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6152
// begin if IsInUnit ( i ) then
6078: LD_VAR 0 2
6082: PPUSH
6083: CALL_OW 310
6087: IFFALSE 6098
// ComExit ( i ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL 72726 0 1
// wait ( 3 ) ;
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6105: LD_VAR 0 2
6109: PPUSH
6110: LD_INT 147
6112: PPUSH
6113: LD_INT 18
6115: PPUSH
6116: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6120: LD_VAR 0 2
6124: PPUSH
6125: LD_INT 147
6127: PPUSH
6128: LD_INT 18
6130: PPUSH
6131: CALL_OW 297
6135: PUSH
6136: LD_INT 3
6138: LESS
6139: IFFALSE 6150
// RemoveUnit ( i ) ;
6141: LD_VAR 0 2
6145: PPUSH
6146: CALL_OW 64
// end ;
6150: GO 6075
6152: POP
6153: POP
// until not tmp ;
6154: LD_VAR 0 3
6158: NOT
6159: IFFALSE 6000
// end ; end ;
6161: PPOPN 3
6163: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
6164: LD_VAR 0 3
6168: PPUSH
6169: CALL_OW 264
6173: PUSH
6174: LD_INT 10
6176: EQUAL
6177: IFFALSE 6194
// killCounter := Inc ( killCounter ) ;
6179: LD_ADDR_EXP 5
6183: PUSH
6184: LD_EXP 5
6188: PPUSH
6189: CALL 73701 0 1
6193: ST_TO_ADDR
// end ;
6194: PPOPN 3
6196: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 3
6209: EQUAL
6210: IFFALSE 6224
// SetTag ( unit , 0 ) ;
6212: LD_VAR 0 2
6216: PPUSH
6217: LD_INT 0
6219: PPUSH
6220: CALL_OW 109
// end ;
6224: PPOPN 2
6226: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL_OW 255
6236: PUSH
6237: LD_INT 3
6239: EQUAL
6240: IFFALSE 6254
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: LD_EXP 19
6252: IN
6253: AND
6254: IFFALSE 6272
// ruTechList := ruTechList diff tech ;
6256: LD_ADDR_EXP 19
6260: PUSH
6261: LD_EXP 19
6265: PUSH
6266: LD_VAR 0 1
6270: DIFF
6271: ST_TO_ADDR
// end ;
6272: PPOPN 2
6274: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6275: LD_INT 0
6277: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: CALL 27712 0 2
// if GetSide ( vehicle ) <> 3 then
6292: LD_VAR 0 1
6296: PPUSH
6297: CALL_OW 255
6301: PUSH
6302: LD_INT 3
6304: NONEQUAL
6305: IFFALSE 6376
// begin if GetWeapon ( vehicle ) = us_double_laser then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 264
6316: PUSH
6317: LD_INT 10
6319: EQUAL
6320: IFFALSE 6374
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6322: LD_ADDR_EXP 7
6326: PUSH
6327: LD_EXP 7
6331: PPUSH
6332: CALL 73701 0 1
6336: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_VAR 0 2
6346: PPUSH
6347: CALL_OW 313
6351: PUSH
6352: FOR_IN
6353: IFFALSE 6372
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6355: LD_VAR 0 3
6359: PPUSH
6360: LD_INT 3
6362: PPUSH
6363: LD_INT 1000
6365: PPUSH
6366: CALL_OW 591
6370: GO 6352
6372: POP
6373: POP
// end ; exit ;
6374: GO 6470
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 264
6385: PUSH
6386: LD_INT 51
6388: PUSH
6389: LD_INT 52
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: IN
6396: IFFALSE 6400
// exit ;
6398: GO 6470
// if GetControl ( vehicle ) = control_computer then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 263
6409: PUSH
6410: LD_INT 3
6412: EQUAL
6413: IFFALSE 6435
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6415: LD_ADDR_EXP 18
6419: PUSH
6420: LD_EXP 18
6424: PPUSH
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL 72328 0 2
6434: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 263
6444: PUSH
6445: LD_INT 1
6447: EQUAL
6448: IFFALSE 6470
// ruMobile := Join ( ruMobile , vehicle ) ;
6450: LD_ADDR_EXP 16
6454: PUSH
6455: LD_EXP 16
6459: PPUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL 72328 0 2
6469: ST_TO_ADDR
// end ;
6470: PPOPN 3
6472: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 255
6482: PUSH
6483: LD_INT 3
6485: EQUAL
6486: IFFALSE 6503
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 257
6498: PUSH
6499: LD_INT 3
6501: EQUAL
6502: AND
6503: IFFALSE 6570
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 255
6512: PUSH
6513: LD_INT 3
6515: EQUAL
6516: IFFALSE 6527
6518: PUSH
6519: LD_INT 1
6521: PPUSH
6522: CALL_OW 302
6526: AND
6527: IFFALSE 6542
6529: PUSH
6530: LD_INT 1
6532: PPUSH
6533: CALL_OW 313
6537: PUSH
6538: LD_INT 6
6540: LESS
6541: AND
6542: IFFALSE 6558
// ComEnterUnit ( human , ruFac1 ) else
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: CALL_OW 120
6556: GO 6570
// ComEnterUnit ( human , ruFac2 ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: LD_INT 40
6565: PPUSH
6566: CALL_OW 120
// end ;
6570: PPOPN 4
6572: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6573: LD_VAR 0 1
6577: PPUSH
6578: CALL 27696 0 1
// end ; end_of_file
6582: PPOPN 1
6584: END
// export function Action ; var dec1 , dec2 , veh ; begin
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
// veh := IsInUnit ( JMM ) ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: LD_EXP 8
6600: PPUSH
6601: CALL_OW 310
6605: ST_TO_ADDR
// InGameOn ;
6606: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6610: LD_VAR 0 4
6614: PPUSH
6615: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6619: LD_VAR 0 4
6623: PPUSH
6624: LD_INT 30
6626: PPUSH
6627: LD_INT 11
6629: PPUSH
6630: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_INT 69
6641: PPUSH
6642: LD_INT 34
6644: PPUSH
6645: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6649: LD_INT 30
6651: PPUSH
6652: LD_INT 11
6654: PPUSH
6655: CALL_OW 84
// wait ( 0 0$3 ) ;
6659: LD_INT 105
6661: PPUSH
6662: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6666: LD_EXP 13
6670: PPUSH
6671: LD_STRING D1-Pow-1
6673: PPUSH
6674: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6678: LD_EXP 8
6682: PPUSH
6683: CALL_OW 121
// AddComHold ( JMM ) ;
6687: LD_EXP 8
6691: PPUSH
6692: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6696: LD_EXP 8
6700: PPUSH
6701: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6705: LD_EXP 8
6709: PPUSH
6710: LD_STRING D1-JMM-1
6712: PPUSH
6713: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6717: LD_EXP 13
6721: PPUSH
6722: LD_STRING D1-Pow-2
6724: PPUSH
6725: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6729: LD_EXP 8
6733: PPUSH
6734: LD_STRING D1-JMM-2
6736: PPUSH
6737: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6741: LD_EXP 8
6745: PPUSH
6746: LD_VAR 0 4
6750: PPUSH
6751: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6755: LD_STRING M1
6757: PPUSH
6758: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6762: LD_INT 16
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6772: LD_INT 35
6774: PPUSH
6775: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6779: LD_EXP 8
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6793: LD_VAR 0 4
6797: PPUSH
6798: LD_INT 51
6800: PPUSH
6801: LD_INT 21
6803: PPUSH
6804: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6808: LD_VAR 0 4
6812: PPUSH
6813: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6817: LD_VAR 0 4
6821: PPUSH
6822: LD_INT 51
6824: PPUSH
6825: LD_INT 21
6827: PPUSH
6828: CALL_OW 297
6832: PUSH
6833: LD_INT 6
6835: LESS
6836: IFFALSE 6772
// if JMMGirl = 1 then
6838: LD_EXP 2
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 7145
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6848: LD_EXP 10
6852: PPUSH
6853: LD_STRING D2J-Joan-1
6855: PPUSH
6856: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_STRING Q1
6867: PPUSH
6868: CALL_OW 97
6872: ST_TO_ADDR
// if dec1 = 1 then
6873: LD_VAR 0 2
6877: PUSH
6878: LD_INT 1
6880: EQUAL
6881: IFFALSE 7136
// begin ComExitVehicle ( JMM ) ;
6883: LD_EXP 8
6887: PPUSH
6888: CALL_OW 121
// AddComHold ( JMM ) ;
6892: LD_EXP 8
6896: PPUSH
6897: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6901: LD_EXP 8
6905: PPUSH
6906: LD_STRING D2J-JMM-1
6908: PPUSH
6909: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6913: LD_EXP 10
6917: PPUSH
6918: LD_STRING D2J-Joan-2
6920: PPUSH
6921: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6925: LD_EXP 8
6929: PPUSH
6930: LD_STRING D2J-JMM-2
6932: PPUSH
6933: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6937: LD_EXP 10
6941: PPUSH
6942: LD_STRING D2J-Joan-3
6944: PPUSH
6945: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6949: LD_EXP 13
6953: PPUSH
6954: LD_STRING DPowell-Pow-1
6956: PPUSH
6957: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_STRING Q2J
6968: PPUSH
6969: CALL_OW 97
6973: ST_TO_ADDR
// if dec2 = 1 then
6974: LD_VAR 0 3
6978: PUSH
6979: LD_INT 1
6981: EQUAL
6982: IFFALSE 7024
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6984: LD_EXP 8
6988: PPUSH
6989: LD_STRING D2Ja-JMM-1
6991: PPUSH
6992: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6996: LD_EXP 10
7000: PPUSH
7001: LD_STRING D2Ja-Joan-1
7003: PPUSH
7004: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
7008: LD_EXP 8
7012: PPUSH
7013: LD_STRING D2Ja-JMM-2
7015: PPUSH
7016: CALL_OW 88
// InGameOff ;
7020: CALL_OW 9
// end ; if dec2 = 2 then
7024: LD_VAR 0 3
7028: PUSH
7029: LD_INT 2
7031: EQUAL
7032: IFFALSE 7103
// begin Say ( JMM , D2Jb-JMM-1 ) ;
7034: LD_EXP 8
7038: PPUSH
7039: LD_STRING D2Jb-JMM-1
7041: PPUSH
7042: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
7046: LD_EXP 10
7050: PPUSH
7051: LD_STRING D2Jb-Joan-1
7053: PPUSH
7054: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
7058: LD_EXP 8
7062: PPUSH
7063: LD_STRING D2Jb-JMM-2
7065: PPUSH
7066: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
7070: LD_EXP 10
7074: PPUSH
7075: LD_STRING D2Jb-Joan-2
7077: PPUSH
7078: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
7082: LD_EXP 8
7086: PPUSH
7087: LD_STRING D2Jb-JMM-3
7089: PPUSH
7090: CALL_OW 88
// FinishMission ( true ) ;
7094: LD_INT 1
7096: PPUSH
7097: CALL 9993 0 1
// exit ;
7101: GO 7685
// end ; if dec2 = 3 then
7103: LD_VAR 0 3
7107: PUSH
7108: LD_INT 3
7110: EQUAL
7111: IFFALSE 7134
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7113: LD_EXP 10
7117: PPUSH
7118: LD_STRING D2Jc-Joan-1
7120: PPUSH
7121: CALL_OW 94
// FinishMission ( true ) ;
7125: LD_INT 1
7127: PPUSH
7128: CALL 9993 0 1
// exit ;
7132: GO 7685
// end ; end else
7134: GO 7145
// begin FinishMission ( true ) ;
7136: LD_INT 1
7138: PPUSH
7139: CALL 9993 0 1
// exit ;
7143: GO 7685
// end ; end ; if JMMGirl = 2 then
7145: LD_EXP 2
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7464
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7155: LD_EXP 11
7159: PPUSH
7160: LD_STRING D2L-Lisa-1
7162: PPUSH
7163: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7167: LD_ADDR_VAR 0 2
7171: PUSH
7172: LD_STRING Q1
7174: PPUSH
7175: CALL_OW 97
7179: ST_TO_ADDR
// if dec1 = 1 then
7180: LD_VAR 0 2
7184: PUSH
7185: LD_INT 1
7187: EQUAL
7188: IFFALSE 7455
// begin ComExitVehicle ( JMM ) ;
7190: LD_EXP 8
7194: PPUSH
7195: CALL_OW 121
// AddComHold ( JMM ) ;
7199: LD_EXP 8
7203: PPUSH
7204: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7208: LD_EXP 8
7212: PPUSH
7213: LD_STRING D2L-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7220: LD_EXP 11
7224: PPUSH
7225: LD_STRING D2L-Lisa-2
7227: PPUSH
7228: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7232: LD_EXP 8
7236: PPUSH
7237: LD_STRING D2L-JMM-2
7239: PPUSH
7240: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING DL-Lisa-3
7251: PPUSH
7252: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7256: LD_EXP 13
7260: PPUSH
7261: LD_STRING DPowell-Pow-1
7263: PPUSH
7264: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_STRING Q2L
7275: PPUSH
7276: CALL_OW 97
7280: ST_TO_ADDR
// if dec2 = 1 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 1
7288: EQUAL
7289: IFFALSE 7355
// begin Say ( JMM , D2La-JMM-1 ) ;
7291: LD_EXP 8
7295: PPUSH
7296: LD_STRING D2La-JMM-1
7298: PPUSH
7299: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7303: LD_EXP 11
7307: PPUSH
7308: LD_STRING D2La-Lisa-1
7310: PPUSH
7311: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_STRING D2La-JMM-2
7322: PPUSH
7323: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7327: LD_EXP 11
7331: PPUSH
7332: LD_STRING D2La-Lisa-2
7334: PPUSH
7335: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7339: LD_EXP 8
7343: PPUSH
7344: LD_STRING D2La-JMM-3
7346: PPUSH
7347: CALL_OW 88
// InGameOff ;
7351: CALL_OW 9
// end ; if dec2 = 2 then
7355: LD_VAR 0 3
7359: PUSH
7360: LD_INT 2
7362: EQUAL
7363: IFFALSE 7422
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7365: LD_EXP 8
7369: PPUSH
7370: LD_STRING D2Lb-JMM-1
7372: PPUSH
7373: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7377: LD_EXP 11
7381: PPUSH
7382: LD_STRING D2Lb-Lisa-1
7384: PPUSH
7385: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7389: LD_EXP 8
7393: PPUSH
7394: LD_STRING D2Lb-JMM-2
7396: PPUSH
7397: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7401: LD_EXP 11
7405: PPUSH
7406: LD_STRING D2Lb-Lisa-2
7408: PPUSH
7409: CALL_OW 94
// FinishMission ( true ) ;
7413: LD_INT 1
7415: PPUSH
7416: CALL 9993 0 1
// exit ;
7420: GO 7685
// end ; if dec2 = 3 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 3
7429: EQUAL
7430: IFFALSE 7453
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7432: LD_EXP 11
7436: PPUSH
7437: LD_STRING D2Lc-Lisa-1
7439: PPUSH
7440: CALL_OW 94
// FinishMission ( true ) ;
7444: LD_INT 1
7446: PPUSH
7447: CALL 9993 0 1
// exit ;
7451: GO 7685
// end ; end else
7453: GO 7464
// begin FinishMission ( true ) ;
7455: LD_INT 1
7457: PPUSH
7458: CALL 9993 0 1
// exit ;
7462: GO 7685
// end ; end ; if JMMGirl = 3 then
7464: LD_EXP 2
7468: PUSH
7469: LD_INT 3
7471: EQUAL
7472: IFFALSE 7685
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7474: LD_EXP 12
7478: PPUSH
7479: LD_STRING D2X-Con-1
7481: PPUSH
7482: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_STRING Q1
7493: PPUSH
7494: CALL_OW 97
7498: ST_TO_ADDR
// if dec1 = 1 then
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 7678
// begin ComExitVehicle ( JMM ) ;
7509: LD_EXP 8
7513: PPUSH
7514: CALL_OW 121
// AddComHold ( JMM ) ;
7518: LD_EXP 8
7522: PPUSH
7523: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_STRING D2X-JMM-1
7534: PPUSH
7535: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7539: LD_EXP 12
7543: PPUSH
7544: LD_STRING D2X-Con-2
7546: PPUSH
7547: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7551: LD_EXP 13
7555: PPUSH
7556: LD_STRING DPowell-Pow-1
7558: PPUSH
7559: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_STRING Q2X
7570: PPUSH
7571: CALL_OW 97
7575: ST_TO_ADDR
// if dec2 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7602
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7586: LD_EXP 8
7590: PPUSH
7591: LD_STRING D2Xa-JMM-1
7593: PPUSH
7594: CALL_OW 88
// InGameOff ;
7598: CALL_OW 9
// end ; if dec2 = 2 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_INT 2
7609: EQUAL
7610: IFFALSE 7645
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7612: LD_EXP 8
7616: PPUSH
7617: LD_STRING D2Xb-JMM-1
7619: PPUSH
7620: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7624: LD_EXP 12
7628: PPUSH
7629: LD_STRING D2Xb-Con-1
7631: PPUSH
7632: CALL_OW 94
// FinishMission ( true ) ;
7636: LD_INT 1
7638: PPUSH
7639: CALL 9993 0 1
// exit ;
7643: GO 7685
// end ; if dec2 = 3 then
7645: LD_VAR 0 3
7649: PUSH
7650: LD_INT 3
7652: EQUAL
7653: IFFALSE 7676
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7655: LD_EXP 12
7659: PPUSH
7660: LD_STRING D2Xc-Con-1
7662: PPUSH
7663: CALL_OW 94
// FinishMission ( true ) ;
7667: LD_INT 1
7669: PPUSH
7670: CALL 9993 0 1
// exit ;
7674: GO 7685
// end ; end else
7676: GO 7685
// begin FinishMission ( true ) ;
7678: LD_INT 1
7680: PPUSH
7681: CALL 9993 0 1
// end ; end ; end ;
7685: LD_VAR 0 1
7689: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7690: LD_EXP 8
7694: PPUSH
7695: LD_INT 15
7697: PPUSH
7698: CALL_OW 308
7702: IFFALSE 8950
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
// begin if tick < 5 5$00 then
7710: LD_OWVAR 1
7714: PUSH
7715: LD_INT 10500
7717: LESS
7718: IFFALSE 7970
// begin uc_side := 6 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 6
7727: ST_TO_ADDR
// uc_nation := 3 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 3
7735: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7736: LD_INT 1
7738: PPUSH
7739: LD_INT 105
7741: PPUSH
7742: LD_INT 97
7744: PPUSH
7745: CALL_OW 293
7749: NOT
7750: IFFALSE 7814
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7752: LD_INT 22
7754: PPUSH
7755: LD_INT 1
7757: PPUSH
7758: LD_INT 3
7760: PPUSH
7761: LD_INT 44
7763: PPUSH
7764: LD_INT 40
7766: PPUSH
7767: CALL 39148 0 5
// veh := CreateVehicle ;
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: CALL_OW 45
7780: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_INT 200
7788: PPUSH
7789: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_INT 105
7800: PPUSH
7801: LD_INT 97
7803: PPUSH
7804: LD_INT 3
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL 74488 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7814: LD_INT 1
7816: PPUSH
7817: LD_INT 116
7819: PPUSH
7820: LD_INT 120
7822: PPUSH
7823: CALL_OW 293
7827: NOT
7828: IFFALSE 7892
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7830: LD_INT 22
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: LD_INT 3
7838: PPUSH
7839: LD_INT 45
7841: PPUSH
7842: LD_INT 40
7844: PPUSH
7845: CALL 39148 0 5
// veh := CreateVehicle ;
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: CALL_OW 45
7858: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7859: LD_VAR 0 1
7863: PPUSH
7864: LD_INT 200
7866: PPUSH
7867: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 116
7878: PPUSH
7879: LD_INT 120
7881: PPUSH
7882: LD_INT 4
7884: PPUSH
7885: LD_INT 0
7887: PPUSH
7888: CALL 74488 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 116
7897: PPUSH
7898: LD_INT 120
7900: PPUSH
7901: CALL_OW 293
7905: NOT
7906: IFFALSE 7970
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7908: LD_INT 24
7910: PPUSH
7911: LD_INT 1
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 45
7919: PPUSH
7920: LD_INT 30
7922: PPUSH
7923: CALL 39148 0 5
// veh := CreateVehicle ;
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: CALL_OW 45
7936: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7937: LD_VAR 0 1
7941: PPUSH
7942: LD_INT 200
7944: PPUSH
7945: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_INT 116
7956: PPUSH
7957: LD_INT 120
7959: PPUSH
7960: LD_INT 4
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 74488 0 5
// end ; end ; InGameOn ;
7970: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7974: LD_INT 35
7976: PPUSH
7977: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7981: LD_EXP 8
7985: PPUSH
7986: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 81
7997: PPUSH
7998: LD_INT 109
8000: PPUSH
8001: CALL_OW 111
// AddComHold ( JMM ) ;
8005: LD_EXP 8
8009: PPUSH
8010: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
8014: LD_EXP 10
8018: PUSH
8019: LD_EXP 11
8023: PUSH
8024: LD_EXP 12
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: LD_EXP 8
8038: PPUSH
8039: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
8043: LD_EXP 10
8047: PUSH
8048: LD_EXP 11
8052: PUSH
8053: LD_EXP 12
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: PPUSH
8063: LD_INT 91
8065: PUSH
8066: LD_EXP 8
8070: PUSH
8071: LD_INT 6
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 72
8083: IFFALSE 7974
// case JMMGirl of 1 :
8085: LD_EXP 2
8089: PUSH
8090: LD_INT 1
8092: DOUBLE
8093: EQUAL
8094: IFTRUE 8098
8096: GO 8383
8098: POP
// begin ChangeSideKappaBase ;
8099: CALL 1453 0 0
// ComTurnUnit ( Joan , JMM ) ;
8103: LD_EXP 10
8107: PPUSH
8108: LD_EXP 8
8112: PPUSH
8113: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8117: LD_EXP 8
8121: PPUSH
8122: LD_EXP 10
8126: PPUSH
8127: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 8
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 87
// wait ( 0 0$1 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// DialogueOn ;
8156: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8160: LD_EXP 10
8164: PPUSH
8165: LD_STRING D3J-Joan-1
8167: PPUSH
8168: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8172: LD_EXP 8
8176: PPUSH
8177: LD_STRING D3J-JMM-1
8179: PPUSH
8180: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8184: LD_EXP 10
8188: PPUSH
8189: LD_STRING D3J-Joan-2
8191: PPUSH
8192: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D3J-JMM-2
8203: PPUSH
8204: CALL_OW 88
// wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8215: LD_EXP 8
8219: PPUSH
8220: LD_STRING D4-JMM-1
8222: PPUSH
8223: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8227: LD_EXP 10
8231: PPUSH
8232: LD_STRING D4-Joan-1
8234: PPUSH
8235: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8239: LD_EXP 8
8243: PPUSH
8244: LD_STRING D4-JMM-2
8246: PPUSH
8247: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8251: LD_EXP 10
8255: PPUSH
8256: LD_STRING D4-Joan-2
8258: PPUSH
8259: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8263: LD_EXP 8
8267: PPUSH
8268: LD_STRING D4-JMM-3
8270: PPUSH
8271: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8275: LD_INT 10
8277: PPUSH
8278: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8282: LD_EXP 13
8286: PPUSH
8287: LD_STRING D7-Pow-1
8289: PPUSH
8290: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8294: LD_EXP 8
8298: PPUSH
8299: LD_STRING D7-JMM-1
8301: PPUSH
8302: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8306: LD_EXP 13
8310: PPUSH
8311: LD_STRING D7-Pow-2
8313: PPUSH
8314: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8318: LD_EXP 8
8322: PPUSH
8323: LD_STRING D7-JMM-2
8325: PPUSH
8326: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8330: LD_EXP 13
8334: PPUSH
8335: LD_STRING D7-Pow-3
8337: PPUSH
8338: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8342: LD_EXP 8
8346: PPUSH
8347: LD_STRING D7-JMM-3
8349: PPUSH
8350: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8354: LD_EXP 13
8358: PPUSH
8359: LD_STRING D7-Pow-4
8361: PPUSH
8362: CALL_OW 94
// DialogueOff ;
8366: CALL_OW 7
// InGameOff ;
8370: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8374: LD_STRING M2J
8376: PPUSH
8377: CALL_OW 337
// end ; 2 :
8381: GO 8946
8383: LD_INT 2
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8676
8391: POP
// begin ChangeSideKappaBase ;
8392: CALL 1453 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8396: LD_EXP 11
8400: PPUSH
8401: LD_EXP 8
8405: PPUSH
8406: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8410: LD_EXP 8
8414: PPUSH
8415: LD_EXP 11
8419: PPUSH
8420: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8424: LD_EXP 11
8428: PUSH
8429: LD_EXP 8
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 87
// wait ( 0 0$1 ) ;
8442: LD_INT 35
8444: PPUSH
8445: CALL_OW 67
// DialogueOn ;
8449: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8453: LD_EXP 11
8457: PPUSH
8458: LD_STRING D3L-Lisa-1
8460: PPUSH
8461: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D3L-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8477: LD_EXP 11
8481: PPUSH
8482: LD_STRING D3L-Lisa-2
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D3L-JMM-2
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$1 ) ;
8501: LD_INT 35
8503: PPUSH
8504: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8508: LD_EXP 8
8512: PPUSH
8513: LD_STRING D4-JMM-1
8515: PPUSH
8516: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8520: LD_EXP 11
8524: PPUSH
8525: LD_STRING D4-Lisa-1
8527: PPUSH
8528: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8532: LD_EXP 8
8536: PPUSH
8537: LD_STRING D4-JMM-1
8539: PPUSH
8540: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8544: LD_EXP 11
8548: PPUSH
8549: LD_STRING D4-Lisa-2
8551: PPUSH
8552: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8556: LD_EXP 8
8560: PPUSH
8561: LD_STRING D4-JMM-3
8563: PPUSH
8564: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8568: LD_INT 10
8570: PPUSH
8571: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8575: LD_EXP 13
8579: PPUSH
8580: LD_STRING D7-Pow-1
8582: PPUSH
8583: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8587: LD_EXP 8
8591: PPUSH
8592: LD_STRING D7-JMM-1
8594: PPUSH
8595: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8599: LD_EXP 13
8603: PPUSH
8604: LD_STRING D7-Pow-2
8606: PPUSH
8607: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8611: LD_EXP 8
8615: PPUSH
8616: LD_STRING D7-JMM-2
8618: PPUSH
8619: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8623: LD_EXP 13
8627: PPUSH
8628: LD_STRING D7-Pow-3
8630: PPUSH
8631: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8635: LD_EXP 8
8639: PPUSH
8640: LD_STRING D7-JMM-3
8642: PPUSH
8643: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8647: LD_EXP 13
8651: PPUSH
8652: LD_STRING D7-Pow-4
8654: PPUSH
8655: CALL_OW 94
// DialogueOff ;
8659: CALL_OW 7
// InGameOff ;
8663: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8667: LD_STRING M2L
8669: PPUSH
8670: CALL_OW 337
// end ; 3 :
8674: GO 8946
8676: LD_INT 3
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8945
8684: POP
// begin ChangeSideKappaBase ;
8685: CALL 1453 0 0
// ComTurnUnit ( Connie , JMM ) ;
8689: LD_EXP 12
8693: PPUSH
8694: LD_EXP 8
8698: PPUSH
8699: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8703: LD_EXP 8
8707: PPUSH
8708: LD_EXP 12
8712: PPUSH
8713: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8717: LD_EXP 10
8721: PUSH
8722: LD_EXP 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 87
// wait ( 0 0$1 ) ;
8735: LD_INT 35
8737: PPUSH
8738: CALL_OW 67
// DialogueOn ;
8742: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8746: LD_EXP 12
8750: PPUSH
8751: LD_STRING D3X-Con-1
8753: PPUSH
8754: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8758: LD_EXP 8
8762: PPUSH
8763: LD_STRING D3J-JMM-1
8765: PPUSH
8766: CALL_OW 88
// wait ( 0 0$1 ) ;
8770: LD_INT 35
8772: PPUSH
8773: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8777: LD_EXP 8
8781: PPUSH
8782: LD_STRING D4-JMM-1
8784: PPUSH
8785: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8789: LD_EXP 12
8793: PPUSH
8794: LD_STRING D4-Con-1
8796: PPUSH
8797: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8801: LD_EXP 8
8805: PPUSH
8806: LD_STRING D4-JMM-2
8808: PPUSH
8809: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8813: LD_EXP 12
8817: PPUSH
8818: LD_STRING D4-Con-2
8820: PPUSH
8821: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8825: LD_EXP 8
8829: PPUSH
8830: LD_STRING D4-JMM-3
8832: PPUSH
8833: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8837: LD_INT 10
8839: PPUSH
8840: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8844: LD_EXP 13
8848: PPUSH
8849: LD_STRING D7-Pow-1
8851: PPUSH
8852: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8856: LD_EXP 8
8860: PPUSH
8861: LD_STRING D7-JMM-1
8863: PPUSH
8864: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8868: LD_EXP 13
8872: PPUSH
8873: LD_STRING D7-Pow-2
8875: PPUSH
8876: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D7-JMM-2
8887: PPUSH
8888: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8892: LD_EXP 13
8896: PPUSH
8897: LD_STRING D7-Pow-3
8899: PPUSH
8900: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8904: LD_EXP 8
8908: PPUSH
8909: LD_STRING D7-JMM-3
8911: PPUSH
8912: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8916: LD_EXP 13
8920: PPUSH
8921: LD_STRING D7-Pow-4
8923: PPUSH
8924: CALL_OW 94
// DialogueOff ;
8928: CALL_OW 7
// InGameOff ;
8932: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8936: LD_STRING M2X
8938: PPUSH
8939: CALL_OW 337
// end ; end ;
8943: GO 8946
8945: POP
// SaveForQuickRestart ;
8946: CALL_OW 22
// end ;
8950: PPOPN 1
8952: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8953: LD_INT 32
8955: PPUSH
8956: CALL_OW 306
8960: IFFALSE 9287
8962: GO 8964
8964: DISABLE
// begin case JMMGirl of 1 :
8965: LD_EXP 2
8969: PUSH
8970: LD_INT 1
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 9094
8978: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8979: LD_EXP 8
8983: PPUSH
8984: LD_STRING D6J-JMM-1
8986: PPUSH
8987: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8991: LD_STRING 13f_Denis
8993: PPUSH
8994: CALL_OW 28
8998: IFTRUE 9009
9000: PUSH
9001: LD_STRING 13s_Denis
9003: PPUSH
9004: CALL_OW 28
9008: OR
9009: IFFALSE 9049
// begin Say ( Joan , D6J-Joan-1 ) ;
9011: LD_EXP 10
9015: PPUSH
9016: LD_STRING D6J-Joan-1
9018: PPUSH
9019: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
9023: LD_EXP 8
9027: PPUSH
9028: LD_STRING D6J-JMM-2
9030: PPUSH
9031: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
9035: LD_EXP 10
9039: PPUSH
9040: LD_STRING D6J-Joan-2
9042: PPUSH
9043: CALL_OW 88
// end else
9047: GO 9061
// Say ( Joan , D6J-Joan-2a ) ;
9049: LD_EXP 10
9053: PPUSH
9054: LD_STRING D6J-Joan-2a
9056: PPUSH
9057: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
9061: LD_EXP 8
9065: PPUSH
9066: LD_STRING D6J-JMM-3
9068: PPUSH
9069: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
9073: LD_EXP 10
9077: PPUSH
9078: LD_STRING D6J-Joan-3
9080: PPUSH
9081: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9085: LD_STRING M3
9087: PPUSH
9088: CALL_OW 337
// end ; 2 :
9092: GO 9287
9094: LD_INT 2
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9160
9102: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9103: LD_EXP 8
9107: PPUSH
9108: LD_STRING D6L-JMM-1
9110: PPUSH
9111: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9115: LD_EXP 11
9119: PPUSH
9120: LD_STRING D6L-Lisa-1
9122: PPUSH
9123: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9127: LD_EXP 8
9131: PPUSH
9132: LD_STRING D6L-JMM-2
9134: PPUSH
9135: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9139: LD_EXP 11
9143: PPUSH
9144: LD_STRING D6L-Lisa-2
9146: PPUSH
9147: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9151: LD_STRING M3
9153: PPUSH
9154: CALL_OW 337
// end ; 3 :
9158: GO 9287
9160: LD_INT 3
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9286
9168: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9169: LD_EXP 8
9173: PPUSH
9174: LD_STRING D6X-JMM-1
9176: PPUSH
9177: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9181: LD_EXP 12
9185: PPUSH
9186: LD_STRING D6X-Con-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9193: LD_EXP 8
9197: PPUSH
9198: LD_STRING D6X-JMM-2
9200: PPUSH
9201: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9205: LD_EXP 12
9209: PPUSH
9210: LD_STRING D6X-Con-2
9212: PPUSH
9213: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9217: LD_EXP 8
9221: PPUSH
9222: LD_STRING D6X-JMM-3
9224: PPUSH
9225: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9229: LD_EXP 12
9233: PPUSH
9234: LD_STRING D6X-Con-3
9236: PPUSH
9237: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9241: LD_EXP 8
9245: PPUSH
9246: LD_STRING D6X-JMM-4
9248: PPUSH
9249: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9253: LD_EXP 12
9257: PPUSH
9258: LD_STRING D6X-Con-4
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9265: LD_EXP 8
9269: PPUSH
9270: LD_STRING D6X-JMM-5
9272: PPUSH
9273: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9277: LD_STRING M3
9279: PPUSH
9280: CALL_OW 337
// end ; end ;
9284: GO 9287
9286: POP
// end ;
9287: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9288: LD_INT 22
9290: PUSH
9291: LD_INT 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 33
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PPUSH
9317: CALL_OW 306
9321: IFFALSE 9467
9323: GO 9325
9325: DISABLE
// begin case JMMGirl of 1 :
9326: LD_EXP 2
9330: PUSH
9331: LD_INT 1
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9376
9339: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9340: LD_EXP 8
9344: PPUSH
9345: LD_STRING D5-JMM-1
9347: PPUSH
9348: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9352: LD_INT 77
9354: PPUSH
9355: LD_INT 87
9357: PPUSH
9358: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9362: LD_EXP 10
9366: PPUSH
9367: LD_STRING D5-Joan-1
9369: PPUSH
9370: CALL_OW 88
// end ; 2 :
9374: GO 9467
9376: LD_INT 2
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9421
9384: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9385: LD_EXP 8
9389: PPUSH
9390: LD_STRING D5-JMM-1
9392: PPUSH
9393: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9397: LD_INT 77
9399: PPUSH
9400: LD_INT 87
9402: PPUSH
9403: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9407: LD_EXP 11
9411: PPUSH
9412: LD_STRING D5-Lisa-1
9414: PPUSH
9415: CALL_OW 88
// end ; 3 :
9419: GO 9467
9421: LD_INT 3
9423: DOUBLE
9424: EQUAL
9425: IFTRUE 9429
9427: GO 9466
9429: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9430: LD_EXP 8
9434: PPUSH
9435: LD_STRING D5-JMM-1
9437: PPUSH
9438: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9442: LD_INT 77
9444: PPUSH
9445: LD_INT 87
9447: PPUSH
9448: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9452: LD_EXP 12
9456: PPUSH
9457: LD_STRING D5-Con-1
9459: PPUSH
9460: CALL_OW 88
// end ; end ;
9464: GO 9467
9466: POP
// end ;
9467: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9468: LD_EXP 8
9472: PPUSH
9473: CALL_OW 310
9477: PPUSH
9478: LD_INT 16
9480: PPUSH
9481: CALL_OW 308
9485: IFFALSE 9839
9487: GO 9489
9489: DISABLE
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
// begin enable ;
9494: ENABLE
// if JMMGirl = 1 then
9495: LD_EXP 2
9499: PUSH
9500: LD_INT 1
9502: EQUAL
9503: IFFALSE 9520
// JMMGirlVeh := IsInUnit ( Joan ) ;
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_EXP 10
9514: PPUSH
9515: CALL_OW 310
9519: ST_TO_ADDR
// if JMMGirl = 2 then
9520: LD_EXP 2
9524: PUSH
9525: LD_INT 2
9527: EQUAL
9528: IFFALSE 9545
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_EXP 11
9539: PPUSH
9540: CALL_OW 310
9544: ST_TO_ADDR
// if JMMGirl = 3 then
9545: LD_EXP 2
9549: PUSH
9550: LD_INT 3
9552: EQUAL
9553: IFFALSE 9570
// JMMGirlVeh := IsInUnit ( Connie ) ;
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_EXP 12
9564: PPUSH
9565: CALL_OW 310
9569: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9570: LD_EXP 8
9574: PPUSH
9575: CALL_OW 310
9579: PPUSH
9580: LD_EXP 10
9584: PPUSH
9585: CALL_OW 310
9589: PPUSH
9590: CALL_OW 296
9594: PUSH
9595: LD_INT 10
9597: LESS
9598: IFTRUE 9630
9600: PUSH
9601: LD_EXP 8
9605: PPUSH
9606: CALL_OW 310
9610: PPUSH
9611: LD_EXP 11
9615: PPUSH
9616: CALL_OW 310
9620: PPUSH
9621: CALL_OW 296
9625: PUSH
9626: LD_INT 10
9628: LESS
9629: OR
9630: IFTRUE 9662
9632: PUSH
9633: LD_EXP 8
9637: PPUSH
9638: CALL_OW 310
9642: PPUSH
9643: LD_EXP 12
9647: PPUSH
9648: CALL_OW 310
9652: PPUSH
9653: CALL_OW 296
9657: PUSH
9658: LD_INT 10
9660: LESS
9661: OR
9662: IFFALSE 9759
// begin case Query ( Q3b ) of 1 :
9664: LD_STRING Q3b
9666: PPUSH
9667: CALL_OW 97
9671: PUSH
9672: LD_INT 1
9674: DOUBLE
9675: EQUAL
9676: IFTRUE 9680
9678: GO 9756
9680: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9681: LD_VAR 0 1
9685: PPUSH
9686: CALL_OW 265
9690: PUSH
9691: EMPTY
9692: LIST
9693: PUSH
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 262
9703: PUSH
9704: EMPTY
9705: LIST
9706: PUSH
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 263
9716: PUSH
9717: EMPTY
9718: LIST
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 264
9729: PUSH
9730: EMPTY
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: LD_STRING 14_JMMGirlVeh_1
9741: PPUSH
9742: CALL_OW 39
// FinishMission ( false ) ;
9746: LD_INT 0
9748: PPUSH
9749: CALL 9993 0 1
// disable ;
9753: DISABLE
// end ; end ;
9754: GO 9757
9756: POP
// end else
9757: GO 9839
// begin if JMMGirl = 1 then
9759: LD_EXP 2
9763: PUSH
9764: LD_INT 1
9766: EQUAL
9767: IFFALSE 9784
// dec := Query ( Q3bJ ) else
9769: LD_ADDR_VAR 0 2
9773: PUSH
9774: LD_STRING Q3bJ
9776: PPUSH
9777: CALL_OW 97
9781: ST_TO_ADDR
9782: GO 9822
// if JMMGirl = 2 then
9784: LD_EXP 2
9788: PUSH
9789: LD_INT 2
9791: EQUAL
9792: IFFALSE 9809
// dec := Query ( Q3bL ) else
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_STRING Q3bL
9801: PPUSH
9802: CALL_OW 97
9806: ST_TO_ADDR
9807: GO 9822
// dec := Query ( Q3bX ) ;
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_STRING Q3bX
9816: PPUSH
9817: CALL_OW 97
9821: ST_TO_ADDR
// if dec = 1 then
9822: LD_VAR 0 2
9826: PUSH
9827: LD_INT 1
9829: EQUAL
9830: IFFALSE 9839
// FinishMission ( false ) ;
9832: LD_INT 0
9834: PPUSH
9835: CALL 9993 0 1
// end ; end ;
9839: PPOPN 2
9841: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9842: LD_INT 22
9844: PUSH
9845: LD_INT 3
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 23
9854: PUSH
9855: LD_INT 3
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: PUSH
9882: LD_INT 0
9884: EQUAL
9885: IFFALSE 9992
9887: GO 9889
9889: DISABLE
// begin DialogueOn ;
9890: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9894: LD_EXP 8
9898: PPUSH
9899: LD_STRING DEnd-JMM-1
9901: PPUSH
9902: CALL_OW 88
// case JMMGirl of 1 :
9906: LD_EXP 2
9910: PUSH
9911: LD_INT 1
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 9934
9919: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9920: LD_EXP 10
9924: PPUSH
9925: LD_STRING DEnd-Joan-1
9927: PPUSH
9928: CALL_OW 88
9932: GO 9981
9934: LD_INT 2
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 9957
9942: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9943: LD_EXP 11
9947: PPUSH
9948: LD_STRING DEnd-Lisa-1
9950: PPUSH
9951: CALL_OW 88
9955: GO 9981
9957: LD_INT 3
9959: DOUBLE
9960: EQUAL
9961: IFTRUE 9965
9963: GO 9980
9965: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9966: LD_EXP 12
9970: PPUSH
9971: LD_STRING DEnd-Con-1
9973: PPUSH
9974: CALL_OW 88
9978: GO 9981
9980: POP
// DialogueOff ;
9981: CALL_OW 7
// FinishMission ( false ) ;
9985: LD_INT 0
9987: PPUSH
9988: CALL 9993 0 1
// end ;
9992: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// m1 := false ;
10001: LD_ADDR_VAR 0 4
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// m2 := false ;
10009: LD_ADDR_VAR 0 5
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// m3 := false ;
10017: LD_ADDR_VAR 0 6
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 50
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 3
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PUSH
10077: LD_INT 0
10079: EQUAL
10080: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
10081: LD_EXP 8
10085: PPUSH
10086: LD_STRING 14_JMM
10088: PPUSH
10089: CALL_OW 38
// if tick <= 50 50$00 then
10093: LD_OWVAR 1
10097: PUSH
10098: LD_INT 105000
10100: LESSEQUAL
10101: IFFALSE 10110
// SetAchievement ( ACH_ASPEED_14 ) ;
10103: LD_STRING ACH_ASPEED_14
10105: PPUSH
10106: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10110: LD_EXP 8
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10141
10121: PUSH
10122: LD_EXP 8
10126: PPUSH
10127: CALL_OW 310
10131: PPUSH
10132: CALL_OW 247
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: AND
10141: IFFALSE 10223
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_EXP 8
10152: PPUSH
10153: CALL_OW 310
10157: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10158: LD_VAR 0 3
10162: PPUSH
10163: CALL_OW 265
10167: PUSH
10168: EMPTY
10169: LIST
10170: PUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: CALL_OW 262
10180: PUSH
10181: EMPTY
10182: LIST
10183: PUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: CALL_OW 263
10193: PUSH
10194: EMPTY
10195: LIST
10196: PUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: CALL_OW 264
10206: PUSH
10207: EMPTY
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: LD_STRING 14_JMMVeh_1
10218: PPUSH
10219: CALL_OW 39
// end ; if fastEnd then
10223: LD_VAR 0 1
10227: IFFALSE 10318
// begin AddMedal ( fastend , - 1 ) ;
10229: LD_STRING fastend
10231: PPUSH
10232: LD_INT 1
10234: NEG
10235: PPUSH
10236: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10240: LD_STRING fastend
10242: PPUSH
10243: LD_INT 1
10245: NEG
10246: PPUSH
10247: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10251: LD_STRING fastend
10253: PPUSH
10254: LD_INT 1
10256: NEG
10257: PPUSH
10258: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10262: LD_EXP 2
10266: PPUSH
10267: LD_STRING 14_JMMGirl_1
10269: PPUSH
10270: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10274: LD_INT 0
10276: PPUSH
10277: LD_STRING 14_JMMGirlStatus_1
10279: PPUSH
10280: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10284: LD_INT 0
10286: PPUSH
10287: LD_STRING 14_KappaStatus_1
10289: PPUSH
10290: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10294: LD_STRING Eliminate
10296: PPUSH
10297: CALL_OW 102
// RewardPeople ( JMM ) ;
10301: LD_EXP 8
10305: PPUSH
10306: CALL_OW 43
// YouWin ;
10310: CALL_OW 103
// exit ;
10314: GO 10988
// end else
10316: GO 10875
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10318: LD_EXP 2
10322: PPUSH
10323: LD_STRING 14_JMMGirl_1
10325: PPUSH
10326: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10330: LD_VAR 0 7
10334: PPUSH
10335: LD_STRING 14_KappaStatus_1
10337: PPUSH
10338: CALL_OW 39
// case JMMGirl of 1 :
10342: LD_EXP 2
10346: PUSH
10347: LD_INT 1
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10489
10355: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10356: LD_EXP 10
10360: PPUSH
10361: CALL_OW 302
10365: IFFALSE 10382
10367: PUSH
10368: LD_EXP 10
10372: PPUSH
10373: CALL_OW 255
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: AND
10382: IFFALSE 10422
10384: PUSH
10385: LD_VAR 0 7
10389: IFTRUE 10421
10391: PUSH
10392: LD_EXP 8
10396: PPUSH
10397: CALL_OW 310
10401: PPUSH
10402: LD_EXP 10
10406: PPUSH
10407: CALL_OW 310
10411: PPUSH
10412: CALL_OW 296
10416: PUSH
10417: LD_INT 10
10419: LESS
10420: OR
10421: AND
10422: IFFALSE 10466
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10424: LD_INT 1
10426: PPUSH
10427: LD_STRING 14_JMMGirlStatus_1
10429: PPUSH
10430: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10434: LD_EXP 10
10438: PPUSH
10439: LD_STRING 14_Joan
10441: PPUSH
10442: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10446: LD_STRING protect
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 101
// m1 := true ;
10456: LD_ADDR_VAR 0 4
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// end else
10464: GO 10487
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10466: LD_INT 0
10468: PPUSH
10469: LD_STRING 14_JMMGirlStatus_1
10471: PPUSH
10472: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10476: LD_STRING protect
10478: PPUSH
10479: LD_INT 1
10481: NEG
10482: PPUSH
10483: CALL_OW 101
// end ; end ; 2 :
10487: GO 10774
10489: LD_INT 2
10491: DOUBLE
10492: EQUAL
10493: IFTRUE 10497
10495: GO 10631
10497: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10498: LD_EXP 11
10502: PPUSH
10503: CALL_OW 302
10507: IFFALSE 10524
10509: PUSH
10510: LD_EXP 11
10514: PPUSH
10515: CALL_OW 255
10519: PUSH
10520: LD_INT 1
10522: EQUAL
10523: AND
10524: IFFALSE 10564
10526: PUSH
10527: LD_VAR 0 7
10531: IFTRUE 10563
10533: PUSH
10534: LD_EXP 8
10538: PPUSH
10539: CALL_OW 310
10543: PPUSH
10544: LD_EXP 11
10548: PPUSH
10549: CALL_OW 310
10553: PPUSH
10554: CALL_OW 296
10558: PUSH
10559: LD_INT 10
10561: LESS
10562: OR
10563: AND
10564: IFFALSE 10608
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10566: LD_INT 1
10568: PPUSH
10569: LD_STRING 14_JMMGirlStatus_1
10571: PPUSH
10572: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10576: LD_EXP 11
10580: PPUSH
10581: LD_STRING 14_Lisa
10583: PPUSH
10584: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10588: LD_STRING protect
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 101
// m1 := true ;
10598: LD_ADDR_VAR 0 4
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// end else
10606: GO 10629
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_STRING 14_JMMGirlStatus_1
10613: PPUSH
10614: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10618: LD_STRING protect
10620: PPUSH
10621: LD_INT 2
10623: NEG
10624: PPUSH
10625: CALL_OW 101
// end ; end ; 3 :
10629: GO 10774
10631: LD_INT 3
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10773
10639: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10640: LD_EXP 12
10644: PPUSH
10645: CALL_OW 302
10649: IFFALSE 10666
10651: PUSH
10652: LD_EXP 12
10656: PPUSH
10657: CALL_OW 255
10661: PUSH
10662: LD_INT 1
10664: EQUAL
10665: AND
10666: IFFALSE 10706
10668: PUSH
10669: LD_VAR 0 7
10673: IFTRUE 10705
10675: PUSH
10676: LD_EXP 8
10680: PPUSH
10681: CALL_OW 310
10685: PPUSH
10686: LD_EXP 12
10690: PPUSH
10691: CALL_OW 310
10695: PPUSH
10696: CALL_OW 296
10700: PUSH
10701: LD_INT 10
10703: LESS
10704: OR
10705: AND
10706: IFFALSE 10750
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10708: LD_INT 1
10710: PPUSH
10711: LD_STRING 14_JMMGirlStatus_1
10713: PPUSH
10714: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10718: LD_EXP 12
10722: PPUSH
10723: LD_STRING 14_Connie
10725: PPUSH
10726: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10730: LD_STRING protect
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 101
// m1 := true ;
10740: LD_ADDR_VAR 0 4
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end else
10748: GO 10771
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10750: LD_INT 0
10752: PPUSH
10753: LD_STRING 14_JMMGirlStatus_1
10755: PPUSH
10756: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10760: LD_STRING protect
10762: PPUSH
10763: LD_INT 3
10765: NEG
10766: PPUSH
10767: CALL_OW 101
// end ; end ; end ;
10771: GO 10774
10773: POP
// if amLaserCounter >= 2 then
10774: LD_EXP 7
10778: PUSH
10779: LD_INT 2
10781: GREATEREQUAL
10782: IFFALSE 10804
// begin AddMedal ( double , 1 ) ;
10784: LD_STRING double
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 101
// m2 := true ;
10794: LD_ADDR_VAR 0 5
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// end else
10802: GO 10838
// begin if amLaserCounter = 1 then
10804: LD_EXP 7
10808: PUSH
10809: LD_INT 1
10811: EQUAL
10812: IFFALSE 10827
// AddMedal ( double , - 2 ) else
10814: LD_STRING double
10816: PPUSH
10817: LD_INT 2
10819: NEG
10820: PPUSH
10821: CALL_OW 101
10825: GO 10838
// AddMedal ( double , - 1 ) ;
10827: LD_STRING double
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if ruEliminated then
10838: LD_VAR 0 7
10842: IFFALSE 10864
// begin AddMedal ( base , 1 ) ;
10844: LD_STRING base
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 101
// m3 := true ;
10854: LD_ADDR_VAR 0 6
10858: PUSH
10859: LD_INT 1
10861: ST_TO_ADDR
// end else
10862: GO 10875
// AddMedal ( base , - 1 ) ;
10864: LD_STRING base
10866: PPUSH
10867: LD_INT 1
10869: NEG
10870: PPUSH
10871: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10875: LD_VAR 0 4
10879: IFFALSE 10887
10881: PUSH
10882: LD_VAR 0 5
10886: AND
10887: IFFALSE 10895
10889: PUSH
10890: LD_VAR 0 6
10894: AND
10895: IFFALSE 10907
10897: PUSH
10898: LD_OWVAR 67
10902: PUSH
10903: LD_INT 3
10905: GREATEREQUAL
10906: AND
10907: IFFALSE 10919
// SetAchievementEX ( ACH_AMER , 14 ) ;
10909: LD_STRING ACH_AMER
10911: PPUSH
10912: LD_INT 14
10914: PPUSH
10915: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10919: LD_STRING Eliminate
10921: PPUSH
10922: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 12
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 3
10955: PUSH
10956: LD_INT 25
10958: PUSH
10959: LD_INT 16
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: CALL_OW 43
// YouWin ;
10984: CALL_OW 103
// end ; end_of_file
10988: LD_VAR 0 2
10992: RET
// export function CreateNature ; var i , un ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
// PrepareEnchidna ;
10998: CALL 68679 0 0
// for i := 1 to 3 do
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: DOUBLE
11008: LD_INT 1
11010: DEC
11011: ST_TO_ADDR
11012: LD_INT 3
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11065
// begin un := CreateHuman ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: CALL_OW 44
11027: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 0
11035: PPUSH
11036: LD_INT 5
11038: PPUSH
11039: CALL_OW 12
11043: PPUSH
11044: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 9
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 49
// end ;
11063: GO 11015
11065: POP
11066: POP
// PrepareHorse ;
11067: CALL 68887 0 0
// for i := 1 to 2 do
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: DOUBLE
11077: LD_INT 1
11079: DEC
11080: ST_TO_ADDR
11081: LD_INT 2
11083: PUSH
11084: FOR_TO
11085: IFFALSE 11134
// begin un := CreateHuman ;
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: CALL_OW 44
11096: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 0
11104: PPUSH
11105: LD_INT 5
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 9
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 49
// end ;
11132: GO 11084
11134: POP
11135: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: DOUBLE
11142: LD_INT 1
11144: DEC
11145: ST_TO_ADDR
11146: LD_INT 4
11148: PUSH
11149: LD_INT 5
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: LD_INT 5
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11235
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11173: LD_INT 0
11175: PPUSH
11176: LD_INT 5
11178: PPUSH
11179: CALL_OW 12
11183: PPUSH
11184: CALL 68455 0 1
// un := CreateHuman ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: CALL_OW 44
11197: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: LD_INT 5
11208: PPUSH
11209: CALL_OW 12
11213: PPUSH
11214: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 8
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 49
// end ;
11233: GO 11170
11235: POP
11236: POP
// PrepareFish ;
11237: CALL 68783 0 0
// for i := 1 to 2 do
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_INT 2
11253: PUSH
11254: FOR_TO
11255: IFFALSE 11304
// begin un := CreateHuman ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: CALL_OW 44
11266: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: LD_INT 5
11277: PPUSH
11278: CALL_OW 12
11282: PPUSH
11283: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_INT 6
11294: PPUSH
11295: LD_INT 0
11297: PPUSH
11298: CALL_OW 49
// end ;
11302: GO 11254
11304: POP
11305: POP
// PrepareFrog ;
11306: CALL 68731 0 0
// for i := 1 to 2 do
11310: LD_ADDR_VAR 0 2
11314: PUSH
11315: DOUBLE
11316: LD_INT 1
11318: DEC
11319: ST_TO_ADDR
11320: LD_INT 2
11322: PUSH
11323: FOR_TO
11324: IFFALSE 11373
// begin un := CreateHuman ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: CALL_OW 44
11335: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 7
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// end ;
11371: GO 11323
11373: POP
11374: POP
// PrepareMastodont ;
11375: CALL 68939 0 0
// un := CreateVehicle ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: CALL_OW 45
11388: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 166
11396: PPUSH
11397: LD_INT 134
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL 74488 0 5
// end ; end_of_file
11410: LD_VAR 0 1
11414: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11415: LD_INT 14
11417: PPUSH
11418: CALL_OW 435
11422: PUSH
11423: LD_INT 20
11425: LESS
11426: IFFALSE 11468
11428: GO 11430
11430: DISABLE
// begin enable ;
11431: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11432: LD_INT 35
11434: PPUSH
11435: LD_INT 735
11437: PPUSH
11438: CALL_OW 12
11442: PPUSH
11443: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 5
11452: PPUSH
11453: CALL_OW 12
11457: PPUSH
11458: LD_INT 14
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 55
// end ;
11468: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11469: LD_INT 13
11471: PPUSH
11472: CALL_OW 435
11476: PUSH
11477: LD_INT 30
11479: LESS
11480: IFFALSE 11522
11482: GO 11484
11484: DISABLE
// begin enable ;
11485: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11486: LD_INT 35
11488: PPUSH
11489: LD_INT 735
11491: PPUSH
11492: CALL_OW 12
11496: PPUSH
11497: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 5
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: LD_INT 13
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 55
// end ;
11522: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11523: LD_INT 13
11525: PPUSH
11526: CALL_OW 435
11530: PUSH
11531: LD_INT 30
11533: LESS
11534: IFFALSE 11567
11536: GO 11538
11538: DISABLE
// begin enable ;
11539: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 5
11545: PPUSH
11546: CALL_OW 12
11550: PPUSH
11551: LD_INT 133
11553: PPUSH
11554: LD_INT 122
11556: PPUSH
11557: LD_INT 20
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 56
// end ; end_of_file end_of_file
11567: END
// export globalGameSaveCounter ; every 0 0$1 do
11568: GO 11570
11570: DISABLE
// begin enable ;
11571: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11572: LD_STRING updateTimer(
11574: PUSH
11575: LD_OWVAR 1
11579: STR
11580: PUSH
11581: LD_STRING );
11583: STR
11584: PPUSH
11585: CALL_OW 559
// end ;
11589: END
// every 0 0$1 do
11590: GO 11592
11592: DISABLE
// begin globalGameSaveCounter := 0 ;
11593: LD_ADDR_EXP 21
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11601: LD_STRING setGameSaveCounter(0)
11603: PPUSH
11604: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11608: LD_STRING initStreamRollete();
11610: PPUSH
11611: CALL_OW 559
// InitStreamMode ;
11615: CALL 12967 0 0
// DefineStreamItems ( false ) ;
11619: LD_INT 0
11621: PPUSH
11622: CALL 13431 0 1
// end ;
11626: END
// export function SOS_MapStart ( ) ; begin
11627: LD_INT 0
11629: PPUSH
// if streamModeActive then
11630: LD_EXP 22
11634: IFFALSE 11643
// DefineStreamItems ( true ) ;
11636: LD_INT 1
11638: PPUSH
11639: CALL 13431 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
11643: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
11645: PPUSH
11646: CALL_OW 559
// UpdateLuaVariables ( ) ;
11650: CALL 11667 0 0
// UpdateFactoryWaypoints ( ) ;
11654: CALL 26553 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11658: CALL 26805 0 0
// end ;
11662: LD_VAR 0 1
11666: RET
// function UpdateLuaVariables ( ) ; begin
11667: LD_INT 0
11669: PPUSH
// if globalGameSaveCounter then
11670: LD_EXP 21
11674: IFFALSE 11708
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11676: LD_ADDR_EXP 21
11680: PUSH
11681: LD_EXP 21
11685: PPUSH
11686: CALL 73701 0 1
11690: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11691: LD_STRING setGameSaveCounter(
11693: PUSH
11694: LD_EXP 21
11698: STR
11699: PUSH
11700: LD_STRING )
11702: STR
11703: PPUSH
11704: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11708: LD_STRING setGameDifficulty(
11710: PUSH
11711: LD_OWVAR 67
11715: STR
11716: PUSH
11717: LD_STRING )
11719: STR
11720: PPUSH
11721: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11725: LD_STRING displayDifficulty(
11727: PUSH
11728: LD_OWVAR 67
11732: STR
11733: PUSH
11734: LD_STRING )
11736: STR
11737: PPUSH
11738: CALL_OW 559
// end ;
11742: LD_VAR 0 1
11746: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11747: LD_INT 0
11749: PPUSH
// if p2 = stream_mode then
11750: LD_VAR 0 2
11754: PUSH
11755: LD_INT 100
11757: EQUAL
11758: IFFALSE 12761
// begin if not StreamModeActive then
11760: LD_EXP 22
11764: NOT
11765: IFFALSE 11775
// StreamModeActive := true ;
11767: LD_ADDR_EXP 22
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 0 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 0
11782: EQUAL
11783: IFFALSE 11789
// InitStreamMode ;
11785: CALL 12967 0 0
// if p3 = 1 then
11789: LD_VAR 0 3
11793: PUSH
11794: LD_INT 1
11796: EQUAL
11797: IFFALSE 11807
// sRocket := true ;
11799: LD_ADDR_EXP 27
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// if p3 = 2 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 2
11814: EQUAL
11815: IFFALSE 11825
// sSpeed := true ;
11817: LD_ADDR_EXP 26
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// if p3 = 3 then
11825: LD_VAR 0 3
11829: PUSH
11830: LD_INT 3
11832: EQUAL
11833: IFFALSE 11843
// sEngine := true ;
11835: LD_ADDR_EXP 28
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// if p3 = 4 then
11843: LD_VAR 0 3
11847: PUSH
11848: LD_INT 4
11850: EQUAL
11851: IFFALSE 11861
// sSpec := true ;
11853: LD_ADDR_EXP 25
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// if p3 = 5 then
11861: LD_VAR 0 3
11865: PUSH
11866: LD_INT 5
11868: EQUAL
11869: IFFALSE 11879
// sLevel := true ;
11871: LD_ADDR_EXP 29
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// if p3 = 6 then
11879: LD_VAR 0 3
11883: PUSH
11884: LD_INT 6
11886: EQUAL
11887: IFFALSE 11897
// sArmoury := true ;
11889: LD_ADDR_EXP 30
11893: PUSH
11894: LD_INT 1
11896: ST_TO_ADDR
// if p3 = 7 then
11897: LD_VAR 0 3
11901: PUSH
11902: LD_INT 7
11904: EQUAL
11905: IFFALSE 11915
// sRadar := true ;
11907: LD_ADDR_EXP 31
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// if p3 = 8 then
11915: LD_VAR 0 3
11919: PUSH
11920: LD_INT 8
11922: EQUAL
11923: IFFALSE 11933
// sBunker := true ;
11925: LD_ADDR_EXP 32
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// if p3 = 9 then
11933: LD_VAR 0 3
11937: PUSH
11938: LD_INT 9
11940: EQUAL
11941: IFFALSE 11951
// sHack := true ;
11943: LD_ADDR_EXP 33
11947: PUSH
11948: LD_INT 1
11950: ST_TO_ADDR
// if p3 = 10 then
11951: LD_VAR 0 3
11955: PUSH
11956: LD_INT 10
11958: EQUAL
11959: IFFALSE 11969
// sFire := true ;
11961: LD_ADDR_EXP 34
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// if p3 = 11 then
11969: LD_VAR 0 3
11973: PUSH
11974: LD_INT 11
11976: EQUAL
11977: IFFALSE 11987
// sRefresh := true ;
11979: LD_ADDR_EXP 35
11983: PUSH
11984: LD_INT 1
11986: ST_TO_ADDR
// if p3 = 12 then
11987: LD_VAR 0 3
11991: PUSH
11992: LD_INT 12
11994: EQUAL
11995: IFFALSE 12005
// sExp := true ;
11997: LD_ADDR_EXP 36
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// if p3 = 13 then
12005: LD_VAR 0 3
12009: PUSH
12010: LD_INT 13
12012: EQUAL
12013: IFFALSE 12023
// sDepot := true ;
12015: LD_ADDR_EXP 37
12019: PUSH
12020: LD_INT 1
12022: ST_TO_ADDR
// if p3 = 14 then
12023: LD_VAR 0 3
12027: PUSH
12028: LD_INT 14
12030: EQUAL
12031: IFFALSE 12041
// sFlag := true ;
12033: LD_ADDR_EXP 38
12037: PUSH
12038: LD_INT 1
12040: ST_TO_ADDR
// if p3 = 15 then
12041: LD_VAR 0 3
12045: PUSH
12046: LD_INT 15
12048: EQUAL
12049: IFFALSE 12059
// sKamikadze := true ;
12051: LD_ADDR_EXP 46
12055: PUSH
12056: LD_INT 1
12058: ST_TO_ADDR
// if p3 = 16 then
12059: LD_VAR 0 3
12063: PUSH
12064: LD_INT 16
12066: EQUAL
12067: IFFALSE 12077
// sTroll := true ;
12069: LD_ADDR_EXP 47
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// if p3 = 17 then
12077: LD_VAR 0 3
12081: PUSH
12082: LD_INT 17
12084: EQUAL
12085: IFFALSE 12095
// sSlow := true ;
12087: LD_ADDR_EXP 48
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// if p3 = 18 then
12095: LD_VAR 0 3
12099: PUSH
12100: LD_INT 18
12102: EQUAL
12103: IFFALSE 12113
// sLack := true ;
12105: LD_ADDR_EXP 49
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// if p3 = 19 then
12113: LD_VAR 0 3
12117: PUSH
12118: LD_INT 19
12120: EQUAL
12121: IFFALSE 12131
// sTank := true ;
12123: LD_ADDR_EXP 51
12127: PUSH
12128: LD_INT 1
12130: ST_TO_ADDR
// if p3 = 20 then
12131: LD_VAR 0 3
12135: PUSH
12136: LD_INT 20
12138: EQUAL
12139: IFFALSE 12149
// sRemote := true ;
12141: LD_ADDR_EXP 52
12145: PUSH
12146: LD_INT 1
12148: ST_TO_ADDR
// if p3 = 21 then
12149: LD_VAR 0 3
12153: PUSH
12154: LD_INT 21
12156: EQUAL
12157: IFFALSE 12167
// sPowell := true ;
12159: LD_ADDR_EXP 53
12163: PUSH
12164: LD_INT 1
12166: ST_TO_ADDR
// if p3 = 22 then
12167: LD_VAR 0 3
12171: PUSH
12172: LD_INT 22
12174: EQUAL
12175: IFFALSE 12185
// sTeleport := true ;
12177: LD_ADDR_EXP 56
12181: PUSH
12182: LD_INT 1
12184: ST_TO_ADDR
// if p3 = 23 then
12185: LD_VAR 0 3
12189: PUSH
12190: LD_INT 23
12192: EQUAL
12193: IFFALSE 12203
// sOilTower := true ;
12195: LD_ADDR_EXP 58
12199: PUSH
12200: LD_INT 1
12202: ST_TO_ADDR
// if p3 = 24 then
12203: LD_VAR 0 3
12207: PUSH
12208: LD_INT 24
12210: EQUAL
12211: IFFALSE 12221
// sShovel := true ;
12213: LD_ADDR_EXP 59
12217: PUSH
12218: LD_INT 1
12220: ST_TO_ADDR
// if p3 = 25 then
12221: LD_VAR 0 3
12225: PUSH
12226: LD_INT 25
12228: EQUAL
12229: IFFALSE 12239
// sSheik := true ;
12231: LD_ADDR_EXP 60
12235: PUSH
12236: LD_INT 1
12238: ST_TO_ADDR
// if p3 = 26 then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 26
12246: EQUAL
12247: IFFALSE 12257
// sEarthquake := true ;
12249: LD_ADDR_EXP 62
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// if p3 = 27 then
12257: LD_VAR 0 3
12261: PUSH
12262: LD_INT 27
12264: EQUAL
12265: IFFALSE 12275
// sAI := true ;
12267: LD_ADDR_EXP 63
12271: PUSH
12272: LD_INT 1
12274: ST_TO_ADDR
// if p3 = 28 then
12275: LD_VAR 0 3
12279: PUSH
12280: LD_INT 28
12282: EQUAL
12283: IFFALSE 12293
// sCargo := true ;
12285: LD_ADDR_EXP 66
12289: PUSH
12290: LD_INT 1
12292: ST_TO_ADDR
// if p3 = 29 then
12293: LD_VAR 0 3
12297: PUSH
12298: LD_INT 29
12300: EQUAL
12301: IFFALSE 12311
// sDLaser := true ;
12303: LD_ADDR_EXP 67
12307: PUSH
12308: LD_INT 1
12310: ST_TO_ADDR
// if p3 = 30 then
12311: LD_VAR 0 3
12315: PUSH
12316: LD_INT 30
12318: EQUAL
12319: IFFALSE 12329
// sExchange := true ;
12321: LD_ADDR_EXP 68
12325: PUSH
12326: LD_INT 1
12328: ST_TO_ADDR
// if p3 = 31 then
12329: LD_VAR 0 3
12333: PUSH
12334: LD_INT 31
12336: EQUAL
12337: IFFALSE 12347
// sFac := true ;
12339: LD_ADDR_EXP 69
12343: PUSH
12344: LD_INT 1
12346: ST_TO_ADDR
// if p3 = 32 then
12347: LD_VAR 0 3
12351: PUSH
12352: LD_INT 32
12354: EQUAL
12355: IFFALSE 12365
// sPower := true ;
12357: LD_ADDR_EXP 70
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// if p3 = 33 then
12365: LD_VAR 0 3
12369: PUSH
12370: LD_INT 33
12372: EQUAL
12373: IFFALSE 12383
// sRandom := true ;
12375: LD_ADDR_EXP 71
12379: PUSH
12380: LD_INT 1
12382: ST_TO_ADDR
// if p3 = 34 then
12383: LD_VAR 0 3
12387: PUSH
12388: LD_INT 34
12390: EQUAL
12391: IFFALSE 12401
// sShield := true ;
12393: LD_ADDR_EXP 72
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// if p3 = 35 then
12401: LD_VAR 0 3
12405: PUSH
12406: LD_INT 35
12408: EQUAL
12409: IFFALSE 12419
// sTime := true ;
12411: LD_ADDR_EXP 73
12415: PUSH
12416: LD_INT 1
12418: ST_TO_ADDR
// if p3 = 36 then
12419: LD_VAR 0 3
12423: PUSH
12424: LD_INT 36
12426: EQUAL
12427: IFFALSE 12437
// sTools := true ;
12429: LD_ADDR_EXP 74
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if p3 = 101 then
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 101
12444: EQUAL
12445: IFFALSE 12455
// sSold := true ;
12447: LD_ADDR_EXP 39
12451: PUSH
12452: LD_INT 1
12454: ST_TO_ADDR
// if p3 = 102 then
12455: LD_VAR 0 3
12459: PUSH
12460: LD_INT 102
12462: EQUAL
12463: IFFALSE 12473
// sDiff := true ;
12465: LD_ADDR_EXP 40
12469: PUSH
12470: LD_INT 1
12472: ST_TO_ADDR
// if p3 = 103 then
12473: LD_VAR 0 3
12477: PUSH
12478: LD_INT 103
12480: EQUAL
12481: IFFALSE 12491
// sFog := true ;
12483: LD_ADDR_EXP 43
12487: PUSH
12488: LD_INT 1
12490: ST_TO_ADDR
// if p3 = 104 then
12491: LD_VAR 0 3
12495: PUSH
12496: LD_INT 104
12498: EQUAL
12499: IFFALSE 12509
// sReset := true ;
12501: LD_ADDR_EXP 44
12505: PUSH
12506: LD_INT 1
12508: ST_TO_ADDR
// if p3 = 105 then
12509: LD_VAR 0 3
12513: PUSH
12514: LD_INT 105
12516: EQUAL
12517: IFFALSE 12527
// sSun := true ;
12519: LD_ADDR_EXP 45
12523: PUSH
12524: LD_INT 1
12526: ST_TO_ADDR
// if p3 = 106 then
12527: LD_VAR 0 3
12531: PUSH
12532: LD_INT 106
12534: EQUAL
12535: IFFALSE 12545
// sTiger := true ;
12537: LD_ADDR_EXP 41
12541: PUSH
12542: LD_INT 1
12544: ST_TO_ADDR
// if p3 = 107 then
12545: LD_VAR 0 3
12549: PUSH
12550: LD_INT 107
12552: EQUAL
12553: IFFALSE 12563
// sBomb := true ;
12555: LD_ADDR_EXP 42
12559: PUSH
12560: LD_INT 1
12562: ST_TO_ADDR
// if p3 = 108 then
12563: LD_VAR 0 3
12567: PUSH
12568: LD_INT 108
12570: EQUAL
12571: IFFALSE 12581
// sWound := true ;
12573: LD_ADDR_EXP 50
12577: PUSH
12578: LD_INT 1
12580: ST_TO_ADDR
// if p3 = 109 then
12581: LD_VAR 0 3
12585: PUSH
12586: LD_INT 109
12588: EQUAL
12589: IFFALSE 12599
// sBetray := true ;
12591: LD_ADDR_EXP 54
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// if p3 = 110 then
12599: LD_VAR 0 3
12603: PUSH
12604: LD_INT 110
12606: EQUAL
12607: IFFALSE 12617
// sContamin := true ;
12609: LD_ADDR_EXP 55
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// if p3 = 111 then
12617: LD_VAR 0 3
12621: PUSH
12622: LD_INT 111
12624: EQUAL
12625: IFFALSE 12635
// sOil := true ;
12627: LD_ADDR_EXP 57
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
// if p3 = 112 then
12635: LD_VAR 0 3
12639: PUSH
12640: LD_INT 112
12642: EQUAL
12643: IFFALSE 12653
// sStu := true ;
12645: LD_ADDR_EXP 61
12649: PUSH
12650: LD_INT 1
12652: ST_TO_ADDR
// if p3 = 113 then
12653: LD_VAR 0 3
12657: PUSH
12658: LD_INT 113
12660: EQUAL
12661: IFFALSE 12671
// sBazooka := true ;
12663: LD_ADDR_EXP 64
12667: PUSH
12668: LD_INT 1
12670: ST_TO_ADDR
// if p3 = 114 then
12671: LD_VAR 0 3
12675: PUSH
12676: LD_INT 114
12678: EQUAL
12679: IFFALSE 12689
// sMortar := true ;
12681: LD_ADDR_EXP 65
12685: PUSH
12686: LD_INT 1
12688: ST_TO_ADDR
// if p3 = 115 then
12689: LD_VAR 0 3
12693: PUSH
12694: LD_INT 115
12696: EQUAL
12697: IFFALSE 12707
// sRanger := true ;
12699: LD_ADDR_EXP 75
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// if p3 = 116 then
12707: LD_VAR 0 3
12711: PUSH
12712: LD_INT 116
12714: EQUAL
12715: IFFALSE 12725
// sComputer := true ;
12717: LD_ADDR_EXP 76
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// if p3 = 117 then
12725: LD_VAR 0 3
12729: PUSH
12730: LD_INT 117
12732: EQUAL
12733: IFFALSE 12743
// s30 := true ;
12735: LD_ADDR_EXP 77
12739: PUSH
12740: LD_INT 1
12742: ST_TO_ADDR
// if p3 = 118 then
12743: LD_VAR 0 3
12747: PUSH
12748: LD_INT 118
12750: EQUAL
12751: IFFALSE 12761
// s60 := true ;
12753: LD_ADDR_EXP 78
12757: PUSH
12758: LD_INT 1
12760: ST_TO_ADDR
// end ; if p2 = hack_mode then
12761: LD_VAR 0 2
12765: PUSH
12766: LD_INT 101
12768: EQUAL
12769: IFFALSE 12897
// begin case p3 of 1 :
12771: LD_VAR 0 3
12775: PUSH
12776: LD_INT 1
12778: DOUBLE
12779: EQUAL
12780: IFTRUE 12784
12782: GO 12791
12784: POP
// hHackUnlimitedResources ; 2 :
12785: CALL 25160 0 0
12789: GO 12897
12791: LD_INT 2
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12806
12799: POP
// hHackSetLevel10 ; 3 :
12800: CALL 25293 0 0
12804: GO 12897
12806: LD_INT 3
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12821
12814: POP
// hHackSetLevel10YourUnits ; 4 :
12815: CALL 25378 0 0
12819: GO 12897
12821: LD_INT 4
12823: DOUBLE
12824: EQUAL
12825: IFTRUE 12829
12827: GO 12836
12829: POP
// hHackInvincible ; 5 :
12830: CALL 25826 0 0
12834: GO 12897
12836: LD_INT 5
12838: DOUBLE
12839: EQUAL
12840: IFTRUE 12844
12842: GO 12851
12844: POP
// hHackInvisible ; 6 :
12845: CALL 25937 0 0
12849: GO 12897
12851: LD_INT 6
12853: DOUBLE
12854: EQUAL
12855: IFTRUE 12859
12857: GO 12866
12859: POP
// hHackChangeYourSide ; 7 :
12860: CALL 25994 0 0
12864: GO 12897
12866: LD_INT 7
12868: DOUBLE
12869: EQUAL
12870: IFTRUE 12874
12872: GO 12881
12874: POP
// hHackChangeUnitSide ; 8 :
12875: CALL 26036 0 0
12879: GO 12897
12881: LD_INT 8
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12896
12889: POP
// hHackFog ; end ;
12890: CALL 26137 0 0
12894: GO 12897
12896: POP
// end ; if p2 = game_save_mode then
12897: LD_VAR 0 2
12901: PUSH
12902: LD_INT 102
12904: EQUAL
12905: IFFALSE 12962
// begin if p3 = 1 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 1
12914: EQUAL
12915: IFFALSE 12927
// globalGameSaveCounter := p4 ;
12917: LD_ADDR_EXP 21
12921: PUSH
12922: LD_VAR 0 4
12926: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 2
12934: EQUAL
12935: IFFALSE 12943
12937: PUSH
12938: LD_EXP 21
12942: AND
12943: IFFALSE 12962
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12945: LD_STRING setGameSaveCounter(
12947: PUSH
12948: LD_EXP 21
12952: STR
12953: PUSH
12954: LD_STRING )
12956: STR
12957: PPUSH
12958: CALL_OW 559
// end ; end ;
12962: LD_VAR 0 7
12966: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12967: LD_INT 0
12969: PPUSH
// streamModeActive := false ;
12970: LD_ADDR_EXP 22
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// normalCounter := 36 ;
12978: LD_ADDR_EXP 23
12982: PUSH
12983: LD_INT 36
12985: ST_TO_ADDR
// hardcoreCounter := 18 ;
12986: LD_ADDR_EXP 24
12990: PUSH
12991: LD_INT 18
12993: ST_TO_ADDR
// sRocket := false ;
12994: LD_ADDR_EXP 27
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// sSpeed := false ;
13002: LD_ADDR_EXP 26
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// sEngine := false ;
13010: LD_ADDR_EXP 28
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// sSpec := false ;
13018: LD_ADDR_EXP 25
13022: PUSH
13023: LD_INT 0
13025: ST_TO_ADDR
// sLevel := false ;
13026: LD_ADDR_EXP 29
13030: PUSH
13031: LD_INT 0
13033: ST_TO_ADDR
// sArmoury := false ;
13034: LD_ADDR_EXP 30
13038: PUSH
13039: LD_INT 0
13041: ST_TO_ADDR
// sRadar := false ;
13042: LD_ADDR_EXP 31
13046: PUSH
13047: LD_INT 0
13049: ST_TO_ADDR
// sBunker := false ;
13050: LD_ADDR_EXP 32
13054: PUSH
13055: LD_INT 0
13057: ST_TO_ADDR
// sHack := false ;
13058: LD_ADDR_EXP 33
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// sFire := false ;
13066: LD_ADDR_EXP 34
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// sRefresh := false ;
13074: LD_ADDR_EXP 35
13078: PUSH
13079: LD_INT 0
13081: ST_TO_ADDR
// sExp := false ;
13082: LD_ADDR_EXP 36
13086: PUSH
13087: LD_INT 0
13089: ST_TO_ADDR
// sDepot := false ;
13090: LD_ADDR_EXP 37
13094: PUSH
13095: LD_INT 0
13097: ST_TO_ADDR
// sFlag := false ;
13098: LD_ADDR_EXP 38
13102: PUSH
13103: LD_INT 0
13105: ST_TO_ADDR
// sKamikadze := false ;
13106: LD_ADDR_EXP 46
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// sTroll := false ;
13114: LD_ADDR_EXP 47
13118: PUSH
13119: LD_INT 0
13121: ST_TO_ADDR
// sSlow := false ;
13122: LD_ADDR_EXP 48
13126: PUSH
13127: LD_INT 0
13129: ST_TO_ADDR
// sLack := false ;
13130: LD_ADDR_EXP 49
13134: PUSH
13135: LD_INT 0
13137: ST_TO_ADDR
// sTank := false ;
13138: LD_ADDR_EXP 51
13142: PUSH
13143: LD_INT 0
13145: ST_TO_ADDR
// sRemote := false ;
13146: LD_ADDR_EXP 52
13150: PUSH
13151: LD_INT 0
13153: ST_TO_ADDR
// sPowell := false ;
13154: LD_ADDR_EXP 53
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// sTeleport := false ;
13162: LD_ADDR_EXP 56
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// sOilTower := false ;
13170: LD_ADDR_EXP 58
13174: PUSH
13175: LD_INT 0
13177: ST_TO_ADDR
// sShovel := false ;
13178: LD_ADDR_EXP 59
13182: PUSH
13183: LD_INT 0
13185: ST_TO_ADDR
// sSheik := false ;
13186: LD_ADDR_EXP 60
13190: PUSH
13191: LD_INT 0
13193: ST_TO_ADDR
// sEarthquake := false ;
13194: LD_ADDR_EXP 62
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// sAI := false ;
13202: LD_ADDR_EXP 63
13206: PUSH
13207: LD_INT 0
13209: ST_TO_ADDR
// sCargo := false ;
13210: LD_ADDR_EXP 66
13214: PUSH
13215: LD_INT 0
13217: ST_TO_ADDR
// sDLaser := false ;
13218: LD_ADDR_EXP 67
13222: PUSH
13223: LD_INT 0
13225: ST_TO_ADDR
// sExchange := false ;
13226: LD_ADDR_EXP 68
13230: PUSH
13231: LD_INT 0
13233: ST_TO_ADDR
// sFac := false ;
13234: LD_ADDR_EXP 69
13238: PUSH
13239: LD_INT 0
13241: ST_TO_ADDR
// sPower := false ;
13242: LD_ADDR_EXP 70
13246: PUSH
13247: LD_INT 0
13249: ST_TO_ADDR
// sRandom := false ;
13250: LD_ADDR_EXP 71
13254: PUSH
13255: LD_INT 0
13257: ST_TO_ADDR
// sShield := false ;
13258: LD_ADDR_EXP 72
13262: PUSH
13263: LD_INT 0
13265: ST_TO_ADDR
// sTime := false ;
13266: LD_ADDR_EXP 73
13270: PUSH
13271: LD_INT 0
13273: ST_TO_ADDR
// sTools := false ;
13274: LD_ADDR_EXP 74
13278: PUSH
13279: LD_INT 0
13281: ST_TO_ADDR
// sSold := false ;
13282: LD_ADDR_EXP 39
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
// sDiff := false ;
13290: LD_ADDR_EXP 40
13294: PUSH
13295: LD_INT 0
13297: ST_TO_ADDR
// sFog := false ;
13298: LD_ADDR_EXP 43
13302: PUSH
13303: LD_INT 0
13305: ST_TO_ADDR
// sReset := false ;
13306: LD_ADDR_EXP 44
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// sSun := false ;
13314: LD_ADDR_EXP 45
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// sTiger := false ;
13322: LD_ADDR_EXP 41
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// sBomb := false ;
13330: LD_ADDR_EXP 42
13334: PUSH
13335: LD_INT 0
13337: ST_TO_ADDR
// sWound := false ;
13338: LD_ADDR_EXP 50
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// sBetray := false ;
13346: LD_ADDR_EXP 54
13350: PUSH
13351: LD_INT 0
13353: ST_TO_ADDR
// sContamin := false ;
13354: LD_ADDR_EXP 55
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// sOil := false ;
13362: LD_ADDR_EXP 57
13366: PUSH
13367: LD_INT 0
13369: ST_TO_ADDR
// sStu := false ;
13370: LD_ADDR_EXP 61
13374: PUSH
13375: LD_INT 0
13377: ST_TO_ADDR
// sBazooka := false ;
13378: LD_ADDR_EXP 64
13382: PUSH
13383: LD_INT 0
13385: ST_TO_ADDR
// sMortar := false ;
13386: LD_ADDR_EXP 65
13390: PUSH
13391: LD_INT 0
13393: ST_TO_ADDR
// sRanger := false ;
13394: LD_ADDR_EXP 75
13398: PUSH
13399: LD_INT 0
13401: ST_TO_ADDR
// sComputer := false ;
13402: LD_ADDR_EXP 76
13406: PUSH
13407: LD_INT 0
13409: ST_TO_ADDR
// s30 := false ;
13410: LD_ADDR_EXP 77
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// s60 := false ;
13418: LD_ADDR_EXP 78
13422: PUSH
13423: LD_INT 0
13425: ST_TO_ADDR
// end ;
13426: LD_VAR 0 1
13430: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
// result := [ ] ;
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: EMPTY
13446: ST_TO_ADDR
// if campaign_id = 1 then
13447: LD_OWVAR 69
13451: PUSH
13452: LD_INT 1
13454: EQUAL
13455: IFFALSE 16621
// begin case mission_number of 1 :
13457: LD_OWVAR 70
13461: PUSH
13462: LD_INT 1
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13546
13470: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 11
13484: PUSH
13485: LD_INT 12
13487: PUSH
13488: LD_INT 15
13490: PUSH
13491: LD_INT 16
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_INT 23
13499: PUSH
13500: LD_INT 26
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 101
13516: PUSH
13517: LD_INT 102
13519: PUSH
13520: LD_INT 106
13522: PUSH
13523: LD_INT 116
13525: PUSH
13526: LD_INT 117
13528: PUSH
13529: LD_INT 118
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: ST_TO_ADDR
13544: GO 16619
13546: LD_INT 2
13548: DOUBLE
13549: EQUAL
13550: IFTRUE 13554
13552: GO 13638
13554: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: LD_INT 11
13568: PUSH
13569: LD_INT 12
13571: PUSH
13572: LD_INT 15
13574: PUSH
13575: LD_INT 16
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_INT 23
13583: PUSH
13584: LD_INT 26
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 102
13603: PUSH
13604: LD_INT 105
13606: PUSH
13607: LD_INT 106
13609: PUSH
13610: LD_INT 108
13612: PUSH
13613: LD_INT 116
13615: PUSH
13616: LD_INT 117
13618: PUSH
13619: LD_INT 118
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: ST_TO_ADDR
13636: GO 16619
13638: LD_INT 3
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13646
13644: GO 13734
13646: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13647: LD_ADDR_VAR 0 2
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 4
13657: PUSH
13658: LD_INT 5
13660: PUSH
13661: LD_INT 11
13663: PUSH
13664: LD_INT 12
13666: PUSH
13667: LD_INT 15
13669: PUSH
13670: LD_INT 16
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 26
13678: PUSH
13679: LD_INT 36
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 101
13696: PUSH
13697: LD_INT 102
13699: PUSH
13700: LD_INT 105
13702: PUSH
13703: LD_INT 106
13705: PUSH
13706: LD_INT 108
13708: PUSH
13709: LD_INT 116
13711: PUSH
13712: LD_INT 117
13714: PUSH
13715: LD_INT 118
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: ST_TO_ADDR
13732: GO 16619
13734: LD_INT 4
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13838
13742: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13743: LD_ADDR_VAR 0 2
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: LD_INT 4
13753: PUSH
13754: LD_INT 5
13756: PUSH
13757: LD_INT 8
13759: PUSH
13760: LD_INT 11
13762: PUSH
13763: LD_INT 12
13765: PUSH
13766: LD_INT 15
13768: PUSH
13769: LD_INT 16
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 23
13777: PUSH
13778: LD_INT 26
13780: PUSH
13781: LD_INT 36
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 101
13800: PUSH
13801: LD_INT 102
13803: PUSH
13804: LD_INT 105
13806: PUSH
13807: LD_INT 106
13809: PUSH
13810: LD_INT 108
13812: PUSH
13813: LD_INT 116
13815: PUSH
13816: LD_INT 117
13818: PUSH
13819: LD_INT 118
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: ST_TO_ADDR
13836: GO 16619
13838: LD_INT 5
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13958
13846: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13847: LD_ADDR_VAR 0 2
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: LD_INT 4
13857: PUSH
13858: LD_INT 5
13860: PUSH
13861: LD_INT 6
13863: PUSH
13864: LD_INT 8
13866: PUSH
13867: LD_INT 11
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: LD_INT 15
13875: PUSH
13876: LD_INT 16
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: LD_INT 23
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 26
13890: PUSH
13891: LD_INT 36
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 101
13912: PUSH
13913: LD_INT 102
13915: PUSH
13916: LD_INT 105
13918: PUSH
13919: LD_INT 106
13921: PUSH
13922: LD_INT 108
13924: PUSH
13925: LD_INT 109
13927: PUSH
13928: LD_INT 112
13930: PUSH
13931: LD_INT 116
13933: PUSH
13934: LD_INT 117
13936: PUSH
13937: LD_INT 118
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 16619
13958: LD_INT 6
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14098
13966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13967: LD_ADDR_VAR 0 2
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 4
13977: PUSH
13978: LD_INT 5
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 8
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: LD_INT 12
13992: PUSH
13993: LD_INT 15
13995: PUSH
13996: LD_INT 16
13998: PUSH
13999: LD_INT 20
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 23
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 26
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 31
14022: PUSH
14023: LD_INT 32
14025: PUSH
14026: LD_INT 36
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 101
14052: PUSH
14053: LD_INT 102
14055: PUSH
14056: LD_INT 105
14058: PUSH
14059: LD_INT 106
14061: PUSH
14062: LD_INT 108
14064: PUSH
14065: LD_INT 109
14067: PUSH
14068: LD_INT 112
14070: PUSH
14071: LD_INT 116
14073: PUSH
14074: LD_INT 117
14076: PUSH
14077: LD_INT 118
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: ST_TO_ADDR
14096: GO 16619
14098: LD_INT 7
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14218
14106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_INT 2
14114: PUSH
14115: LD_INT 4
14117: PUSH
14118: LD_INT 5
14120: PUSH
14121: LD_INT 7
14123: PUSH
14124: LD_INT 11
14126: PUSH
14127: LD_INT 12
14129: PUSH
14130: LD_INT 15
14132: PUSH
14133: LD_INT 16
14135: PUSH
14136: LD_INT 20
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_INT 23
14147: PUSH
14148: LD_INT 25
14150: PUSH
14151: LD_INT 26
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 101
14172: PUSH
14173: LD_INT 102
14175: PUSH
14176: LD_INT 103
14178: PUSH
14179: LD_INT 105
14181: PUSH
14182: LD_INT 106
14184: PUSH
14185: LD_INT 108
14187: PUSH
14188: LD_INT 112
14190: PUSH
14191: LD_INT 116
14193: PUSH
14194: LD_INT 117
14196: PUSH
14197: LD_INT 118
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: ST_TO_ADDR
14216: GO 16619
14218: LD_INT 8
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14366
14226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14227: LD_ADDR_VAR 0 2
14231: PUSH
14232: LD_INT 2
14234: PUSH
14235: LD_INT 4
14237: PUSH
14238: LD_INT 5
14240: PUSH
14241: LD_INT 6
14243: PUSH
14244: LD_INT 7
14246: PUSH
14247: LD_INT 8
14249: PUSH
14250: LD_INT 11
14252: PUSH
14253: LD_INT 12
14255: PUSH
14256: LD_INT 15
14258: PUSH
14259: LD_INT 16
14261: PUSH
14262: LD_INT 20
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 25
14276: PUSH
14277: LD_INT 26
14279: PUSH
14280: LD_INT 30
14282: PUSH
14283: LD_INT 31
14285: PUSH
14286: LD_INT 32
14288: PUSH
14289: LD_INT 36
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 101
14316: PUSH
14317: LD_INT 102
14319: PUSH
14320: LD_INT 103
14322: PUSH
14323: LD_INT 105
14325: PUSH
14326: LD_INT 106
14328: PUSH
14329: LD_INT 108
14331: PUSH
14332: LD_INT 109
14334: PUSH
14335: LD_INT 112
14337: PUSH
14338: LD_INT 116
14340: PUSH
14341: LD_INT 117
14343: PUSH
14344: LD_INT 118
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: ST_TO_ADDR
14364: GO 16619
14366: LD_INT 9
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14522
14374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14375: LD_ADDR_VAR 0 2
14379: PUSH
14380: LD_INT 2
14382: PUSH
14383: LD_INT 4
14385: PUSH
14386: LD_INT 5
14388: PUSH
14389: LD_INT 6
14391: PUSH
14392: LD_INT 7
14394: PUSH
14395: LD_INT 8
14397: PUSH
14398: LD_INT 11
14400: PUSH
14401: LD_INT 12
14403: PUSH
14404: LD_INT 15
14406: PUSH
14407: LD_INT 16
14409: PUSH
14410: LD_INT 20
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_INT 23
14421: PUSH
14422: LD_INT 25
14424: PUSH
14425: LD_INT 26
14427: PUSH
14428: LD_INT 28
14430: PUSH
14431: LD_INT 30
14433: PUSH
14434: LD_INT 31
14436: PUSH
14437: LD_INT 32
14439: PUSH
14440: LD_INT 36
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 101
14468: PUSH
14469: LD_INT 102
14471: PUSH
14472: LD_INT 103
14474: PUSH
14475: LD_INT 105
14477: PUSH
14478: LD_INT 106
14480: PUSH
14481: LD_INT 108
14483: PUSH
14484: LD_INT 109
14486: PUSH
14487: LD_INT 112
14489: PUSH
14490: LD_INT 114
14492: PUSH
14493: LD_INT 116
14495: PUSH
14496: LD_INT 117
14498: PUSH
14499: LD_INT 118
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: ST_TO_ADDR
14520: GO 16619
14522: LD_INT 10
14524: DOUBLE
14525: EQUAL
14526: IFTRUE 14530
14528: GO 14726
14530: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14531: LD_ADDR_VAR 0 2
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 4
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: LD_INT 6
14547: PUSH
14548: LD_INT 7
14550: PUSH
14551: LD_INT 8
14553: PUSH
14554: LD_INT 9
14556: PUSH
14557: LD_INT 10
14559: PUSH
14560: LD_INT 11
14562: PUSH
14563: LD_INT 12
14565: PUSH
14566: LD_INT 13
14568: PUSH
14569: LD_INT 14
14571: PUSH
14572: LD_INT 15
14574: PUSH
14575: LD_INT 16
14577: PUSH
14578: LD_INT 17
14580: PUSH
14581: LD_INT 18
14583: PUSH
14584: LD_INT 19
14586: PUSH
14587: LD_INT 20
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 22
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 24
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 26
14607: PUSH
14608: LD_INT 28
14610: PUSH
14611: LD_INT 30
14613: PUSH
14614: LD_INT 31
14616: PUSH
14617: LD_INT 32
14619: PUSH
14620: LD_INT 36
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 101
14656: PUSH
14657: LD_INT 102
14659: PUSH
14660: LD_INT 103
14662: PUSH
14663: LD_INT 104
14665: PUSH
14666: LD_INT 105
14668: PUSH
14669: LD_INT 106
14671: PUSH
14672: LD_INT 107
14674: PUSH
14675: LD_INT 108
14677: PUSH
14678: LD_INT 109
14680: PUSH
14681: LD_INT 110
14683: PUSH
14684: LD_INT 111
14686: PUSH
14687: LD_INT 112
14689: PUSH
14690: LD_INT 114
14692: PUSH
14693: LD_INT 116
14695: PUSH
14696: LD_INT 117
14698: PUSH
14699: LD_INT 118
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: ST_TO_ADDR
14724: GO 16619
14726: LD_INT 11
14728: DOUBLE
14729: EQUAL
14730: IFTRUE 14734
14732: GO 14938
14734: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: LD_INT 4
14748: PUSH
14749: LD_INT 5
14751: PUSH
14752: LD_INT 6
14754: PUSH
14755: LD_INT 7
14757: PUSH
14758: LD_INT 8
14760: PUSH
14761: LD_INT 9
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 11
14769: PUSH
14770: LD_INT 12
14772: PUSH
14773: LD_INT 13
14775: PUSH
14776: LD_INT 14
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 16
14784: PUSH
14785: LD_INT 17
14787: PUSH
14788: LD_INT 18
14790: PUSH
14791: LD_INT 19
14793: PUSH
14794: LD_INT 20
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 22
14802: PUSH
14803: LD_INT 23
14805: PUSH
14806: LD_INT 24
14808: PUSH
14809: LD_INT 25
14811: PUSH
14812: LD_INT 26
14814: PUSH
14815: LD_INT 28
14817: PUSH
14818: LD_INT 30
14820: PUSH
14821: LD_INT 31
14823: PUSH
14824: LD_INT 32
14826: PUSH
14827: LD_INT 34
14829: PUSH
14830: LD_INT 36
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 101
14868: PUSH
14869: LD_INT 102
14871: PUSH
14872: LD_INT 103
14874: PUSH
14875: LD_INT 104
14877: PUSH
14878: LD_INT 105
14880: PUSH
14881: LD_INT 106
14883: PUSH
14884: LD_INT 107
14886: PUSH
14887: LD_INT 108
14889: PUSH
14890: LD_INT 109
14892: PUSH
14893: LD_INT 110
14895: PUSH
14896: LD_INT 111
14898: PUSH
14899: LD_INT 112
14901: PUSH
14902: LD_INT 114
14904: PUSH
14905: LD_INT 116
14907: PUSH
14908: LD_INT 117
14910: PUSH
14911: LD_INT 118
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: ST_TO_ADDR
14936: GO 16619
14938: LD_INT 12
14940: DOUBLE
14941: EQUAL
14942: IFTRUE 14946
14944: GO 15166
14946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: LD_INT 4
14963: PUSH
14964: LD_INT 5
14966: PUSH
14967: LD_INT 6
14969: PUSH
14970: LD_INT 7
14972: PUSH
14973: LD_INT 8
14975: PUSH
14976: LD_INT 9
14978: PUSH
14979: LD_INT 10
14981: PUSH
14982: LD_INT 11
14984: PUSH
14985: LD_INT 12
14987: PUSH
14988: LD_INT 13
14990: PUSH
14991: LD_INT 14
14993: PUSH
14994: LD_INT 15
14996: PUSH
14997: LD_INT 16
14999: PUSH
15000: LD_INT 17
15002: PUSH
15003: LD_INT 18
15005: PUSH
15006: LD_INT 19
15008: PUSH
15009: LD_INT 20
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 22
15017: PUSH
15018: LD_INT 23
15020: PUSH
15021: LD_INT 24
15023: PUSH
15024: LD_INT 25
15026: PUSH
15027: LD_INT 26
15029: PUSH
15030: LD_INT 27
15032: PUSH
15033: LD_INT 28
15035: PUSH
15036: LD_INT 30
15038: PUSH
15039: LD_INT 31
15041: PUSH
15042: LD_INT 32
15044: PUSH
15045: LD_INT 33
15047: PUSH
15048: LD_INT 34
15050: PUSH
15051: LD_INT 36
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 101
15092: PUSH
15093: LD_INT 102
15095: PUSH
15096: LD_INT 103
15098: PUSH
15099: LD_INT 104
15101: PUSH
15102: LD_INT 105
15104: PUSH
15105: LD_INT 106
15107: PUSH
15108: LD_INT 107
15110: PUSH
15111: LD_INT 108
15113: PUSH
15114: LD_INT 109
15116: PUSH
15117: LD_INT 110
15119: PUSH
15120: LD_INT 111
15122: PUSH
15123: LD_INT 112
15125: PUSH
15126: LD_INT 113
15128: PUSH
15129: LD_INT 114
15131: PUSH
15132: LD_INT 116
15134: PUSH
15135: LD_INT 117
15137: PUSH
15138: LD_INT 118
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ST_TO_ADDR
15164: GO 16619
15166: LD_INT 13
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15382
15174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15175: LD_ADDR_VAR 0 2
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: LD_INT 2
15185: PUSH
15186: LD_INT 3
15188: PUSH
15189: LD_INT 4
15191: PUSH
15192: LD_INT 5
15194: PUSH
15195: LD_INT 8
15197: PUSH
15198: LD_INT 9
15200: PUSH
15201: LD_INT 10
15203: PUSH
15204: LD_INT 11
15206: PUSH
15207: LD_INT 12
15209: PUSH
15210: LD_INT 14
15212: PUSH
15213: LD_INT 15
15215: PUSH
15216: LD_INT 16
15218: PUSH
15219: LD_INT 17
15221: PUSH
15222: LD_INT 18
15224: PUSH
15225: LD_INT 19
15227: PUSH
15228: LD_INT 20
15230: PUSH
15231: LD_INT 21
15233: PUSH
15234: LD_INT 22
15236: PUSH
15237: LD_INT 23
15239: PUSH
15240: LD_INT 24
15242: PUSH
15243: LD_INT 25
15245: PUSH
15246: LD_INT 26
15248: PUSH
15249: LD_INT 27
15251: PUSH
15252: LD_INT 28
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 31
15260: PUSH
15261: LD_INT 32
15263: PUSH
15264: LD_INT 33
15266: PUSH
15267: LD_INT 34
15269: PUSH
15270: LD_INT 36
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 101
15308: PUSH
15309: LD_INT 102
15311: PUSH
15312: LD_INT 103
15314: PUSH
15315: LD_INT 104
15317: PUSH
15318: LD_INT 105
15320: PUSH
15321: LD_INT 106
15323: PUSH
15324: LD_INT 107
15326: PUSH
15327: LD_INT 108
15329: PUSH
15330: LD_INT 109
15332: PUSH
15333: LD_INT 110
15335: PUSH
15336: LD_INT 111
15338: PUSH
15339: LD_INT 112
15341: PUSH
15342: LD_INT 113
15344: PUSH
15345: LD_INT 114
15347: PUSH
15348: LD_INT 116
15350: PUSH
15351: LD_INT 117
15353: PUSH
15354: LD_INT 118
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: ST_TO_ADDR
15380: GO 16619
15382: LD_INT 14
15384: DOUBLE
15385: EQUAL
15386: IFTRUE 15390
15388: GO 15614
15390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: LD_INT 2
15401: PUSH
15402: LD_INT 3
15404: PUSH
15405: LD_INT 4
15407: PUSH
15408: LD_INT 5
15410: PUSH
15411: LD_INT 6
15413: PUSH
15414: LD_INT 7
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: LD_INT 9
15422: PUSH
15423: LD_INT 10
15425: PUSH
15426: LD_INT 11
15428: PUSH
15429: LD_INT 12
15431: PUSH
15432: LD_INT 13
15434: PUSH
15435: LD_INT 14
15437: PUSH
15438: LD_INT 15
15440: PUSH
15441: LD_INT 16
15443: PUSH
15444: LD_INT 17
15446: PUSH
15447: LD_INT 18
15449: PUSH
15450: LD_INT 19
15452: PUSH
15453: LD_INT 20
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 23
15464: PUSH
15465: LD_INT 24
15467: PUSH
15468: LD_INT 25
15470: PUSH
15471: LD_INT 26
15473: PUSH
15474: LD_INT 27
15476: PUSH
15477: LD_INT 28
15479: PUSH
15480: LD_INT 29
15482: PUSH
15483: LD_INT 30
15485: PUSH
15486: LD_INT 31
15488: PUSH
15489: LD_INT 32
15491: PUSH
15492: LD_INT 33
15494: PUSH
15495: LD_INT 34
15497: PUSH
15498: LD_INT 36
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 101
15540: PUSH
15541: LD_INT 102
15543: PUSH
15544: LD_INT 103
15546: PUSH
15547: LD_INT 104
15549: PUSH
15550: LD_INT 105
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 107
15558: PUSH
15559: LD_INT 108
15561: PUSH
15562: LD_INT 109
15564: PUSH
15565: LD_INT 110
15567: PUSH
15568: LD_INT 111
15570: PUSH
15571: LD_INT 112
15573: PUSH
15574: LD_INT 113
15576: PUSH
15577: LD_INT 114
15579: PUSH
15580: LD_INT 116
15582: PUSH
15583: LD_INT 117
15585: PUSH
15586: LD_INT 118
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: ST_TO_ADDR
15612: GO 16619
15614: LD_INT 15
15616: DOUBLE
15617: EQUAL
15618: IFTRUE 15622
15620: GO 15846
15622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_INT 1
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: LD_INT 5
15642: PUSH
15643: LD_INT 6
15645: PUSH
15646: LD_INT 7
15648: PUSH
15649: LD_INT 8
15651: PUSH
15652: LD_INT 9
15654: PUSH
15655: LD_INT 10
15657: PUSH
15658: LD_INT 11
15660: PUSH
15661: LD_INT 12
15663: PUSH
15664: LD_INT 13
15666: PUSH
15667: LD_INT 14
15669: PUSH
15670: LD_INT 15
15672: PUSH
15673: LD_INT 16
15675: PUSH
15676: LD_INT 17
15678: PUSH
15679: LD_INT 18
15681: PUSH
15682: LD_INT 19
15684: PUSH
15685: LD_INT 20
15687: PUSH
15688: LD_INT 21
15690: PUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 23
15696: PUSH
15697: LD_INT 24
15699: PUSH
15700: LD_INT 25
15702: PUSH
15703: LD_INT 26
15705: PUSH
15706: LD_INT 27
15708: PUSH
15709: LD_INT 28
15711: PUSH
15712: LD_INT 29
15714: PUSH
15715: LD_INT 30
15717: PUSH
15718: LD_INT 31
15720: PUSH
15721: LD_INT 32
15723: PUSH
15724: LD_INT 33
15726: PUSH
15727: LD_INT 34
15729: PUSH
15730: LD_INT 36
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 101
15772: PUSH
15773: LD_INT 102
15775: PUSH
15776: LD_INT 103
15778: PUSH
15779: LD_INT 104
15781: PUSH
15782: LD_INT 105
15784: PUSH
15785: LD_INT 106
15787: PUSH
15788: LD_INT 107
15790: PUSH
15791: LD_INT 108
15793: PUSH
15794: LD_INT 109
15796: PUSH
15797: LD_INT 110
15799: PUSH
15800: LD_INT 111
15802: PUSH
15803: LD_INT 112
15805: PUSH
15806: LD_INT 113
15808: PUSH
15809: LD_INT 114
15811: PUSH
15812: LD_INT 116
15814: PUSH
15815: LD_INT 117
15817: PUSH
15818: LD_INT 118
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: ST_TO_ADDR
15844: GO 16619
15846: LD_INT 16
15848: DOUBLE
15849: EQUAL
15850: IFTRUE 15854
15852: GO 15990
15854: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15855: LD_ADDR_VAR 0 2
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 4
15865: PUSH
15866: LD_INT 5
15868: PUSH
15869: LD_INT 7
15871: PUSH
15872: LD_INT 11
15874: PUSH
15875: LD_INT 12
15877: PUSH
15878: LD_INT 15
15880: PUSH
15881: LD_INT 16
15883: PUSH
15884: LD_INT 20
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 22
15892: PUSH
15893: LD_INT 23
15895: PUSH
15896: LD_INT 25
15898: PUSH
15899: LD_INT 26
15901: PUSH
15902: LD_INT 30
15904: PUSH
15905: LD_INT 31
15907: PUSH
15908: LD_INT 32
15910: PUSH
15911: LD_INT 33
15913: PUSH
15914: LD_INT 34
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 101
15940: PUSH
15941: LD_INT 102
15943: PUSH
15944: LD_INT 103
15946: PUSH
15947: LD_INT 106
15949: PUSH
15950: LD_INT 108
15952: PUSH
15953: LD_INT 112
15955: PUSH
15956: LD_INT 113
15958: PUSH
15959: LD_INT 114
15961: PUSH
15962: LD_INT 116
15964: PUSH
15965: LD_INT 117
15967: PUSH
15968: LD_INT 118
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: ST_TO_ADDR
15988: GO 16619
15990: LD_INT 17
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16222
15998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: LD_INT 4
16015: PUSH
16016: LD_INT 5
16018: PUSH
16019: LD_INT 6
16021: PUSH
16022: LD_INT 7
16024: PUSH
16025: LD_INT 8
16027: PUSH
16028: LD_INT 9
16030: PUSH
16031: LD_INT 10
16033: PUSH
16034: LD_INT 11
16036: PUSH
16037: LD_INT 12
16039: PUSH
16040: LD_INT 13
16042: PUSH
16043: LD_INT 14
16045: PUSH
16046: LD_INT 15
16048: PUSH
16049: LD_INT 16
16051: PUSH
16052: LD_INT 17
16054: PUSH
16055: LD_INT 18
16057: PUSH
16058: LD_INT 19
16060: PUSH
16061: LD_INT 20
16063: PUSH
16064: LD_INT 21
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_INT 23
16072: PUSH
16073: LD_INT 24
16075: PUSH
16076: LD_INT 25
16078: PUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 27
16084: PUSH
16085: LD_INT 28
16087: PUSH
16088: LD_INT 29
16090: PUSH
16091: LD_INT 30
16093: PUSH
16094: LD_INT 31
16096: PUSH
16097: LD_INT 32
16099: PUSH
16100: LD_INT 33
16102: PUSH
16103: LD_INT 34
16105: PUSH
16106: LD_INT 36
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 101
16148: PUSH
16149: LD_INT 102
16151: PUSH
16152: LD_INT 103
16154: PUSH
16155: LD_INT 104
16157: PUSH
16158: LD_INT 105
16160: PUSH
16161: LD_INT 106
16163: PUSH
16164: LD_INT 107
16166: PUSH
16167: LD_INT 108
16169: PUSH
16170: LD_INT 109
16172: PUSH
16173: LD_INT 110
16175: PUSH
16176: LD_INT 111
16178: PUSH
16179: LD_INT 112
16181: PUSH
16182: LD_INT 113
16184: PUSH
16185: LD_INT 114
16187: PUSH
16188: LD_INT 116
16190: PUSH
16191: LD_INT 117
16193: PUSH
16194: LD_INT 118
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: ST_TO_ADDR
16220: GO 16619
16222: LD_INT 18
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16230
16228: GO 16378
16230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16231: LD_ADDR_VAR 0 2
16235: PUSH
16236: LD_INT 2
16238: PUSH
16239: LD_INT 4
16241: PUSH
16242: LD_INT 5
16244: PUSH
16245: LD_INT 7
16247: PUSH
16248: LD_INT 11
16250: PUSH
16251: LD_INT 12
16253: PUSH
16254: LD_INT 15
16256: PUSH
16257: LD_INT 16
16259: PUSH
16260: LD_INT 20
16262: PUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 22
16268: PUSH
16269: LD_INT 23
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 26
16277: PUSH
16278: LD_INT 30
16280: PUSH
16281: LD_INT 31
16283: PUSH
16284: LD_INT 32
16286: PUSH
16287: LD_INT 33
16289: PUSH
16290: LD_INT 34
16292: PUSH
16293: LD_INT 35
16295: PUSH
16296: LD_INT 36
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 101
16324: PUSH
16325: LD_INT 102
16327: PUSH
16328: LD_INT 103
16330: PUSH
16331: LD_INT 106
16333: PUSH
16334: LD_INT 108
16336: PUSH
16337: LD_INT 112
16339: PUSH
16340: LD_INT 113
16342: PUSH
16343: LD_INT 114
16345: PUSH
16346: LD_INT 115
16348: PUSH
16349: LD_INT 116
16351: PUSH
16352: LD_INT 117
16354: PUSH
16355: LD_INT 118
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: ST_TO_ADDR
16376: GO 16619
16378: LD_INT 19
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16618
16386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16387: LD_ADDR_VAR 0 2
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: LD_INT 2
16397: PUSH
16398: LD_INT 3
16400: PUSH
16401: LD_INT 4
16403: PUSH
16404: LD_INT 5
16406: PUSH
16407: LD_INT 6
16409: PUSH
16410: LD_INT 7
16412: PUSH
16413: LD_INT 8
16415: PUSH
16416: LD_INT 9
16418: PUSH
16419: LD_INT 10
16421: PUSH
16422: LD_INT 11
16424: PUSH
16425: LD_INT 12
16427: PUSH
16428: LD_INT 13
16430: PUSH
16431: LD_INT 14
16433: PUSH
16434: LD_INT 15
16436: PUSH
16437: LD_INT 16
16439: PUSH
16440: LD_INT 17
16442: PUSH
16443: LD_INT 18
16445: PUSH
16446: LD_INT 19
16448: PUSH
16449: LD_INT 20
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 22
16457: PUSH
16458: LD_INT 23
16460: PUSH
16461: LD_INT 24
16463: PUSH
16464: LD_INT 25
16466: PUSH
16467: LD_INT 26
16469: PUSH
16470: LD_INT 27
16472: PUSH
16473: LD_INT 28
16475: PUSH
16476: LD_INT 29
16478: PUSH
16479: LD_INT 30
16481: PUSH
16482: LD_INT 31
16484: PUSH
16485: LD_INT 32
16487: PUSH
16488: LD_INT 33
16490: PUSH
16491: LD_INT 34
16493: PUSH
16494: LD_INT 35
16496: PUSH
16497: LD_INT 36
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 101
16540: PUSH
16541: LD_INT 102
16543: PUSH
16544: LD_INT 103
16546: PUSH
16547: LD_INT 104
16549: PUSH
16550: LD_INT 105
16552: PUSH
16553: LD_INT 106
16555: PUSH
16556: LD_INT 107
16558: PUSH
16559: LD_INT 108
16561: PUSH
16562: LD_INT 109
16564: PUSH
16565: LD_INT 110
16567: PUSH
16568: LD_INT 111
16570: PUSH
16571: LD_INT 112
16573: PUSH
16574: LD_INT 113
16576: PUSH
16577: LD_INT 114
16579: PUSH
16580: LD_INT 115
16582: PUSH
16583: LD_INT 116
16585: PUSH
16586: LD_INT 117
16588: PUSH
16589: LD_INT 118
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: ST_TO_ADDR
16616: GO 16619
16618: POP
// end else
16619: GO 16850
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: LD_INT 6
16643: PUSH
16644: LD_INT 7
16646: PUSH
16647: LD_INT 8
16649: PUSH
16650: LD_INT 9
16652: PUSH
16653: LD_INT 10
16655: PUSH
16656: LD_INT 11
16658: PUSH
16659: LD_INT 12
16661: PUSH
16662: LD_INT 13
16664: PUSH
16665: LD_INT 14
16667: PUSH
16668: LD_INT 15
16670: PUSH
16671: LD_INT 16
16673: PUSH
16674: LD_INT 17
16676: PUSH
16677: LD_INT 18
16679: PUSH
16680: LD_INT 19
16682: PUSH
16683: LD_INT 20
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 24
16697: PUSH
16698: LD_INT 25
16700: PUSH
16701: LD_INT 26
16703: PUSH
16704: LD_INT 27
16706: PUSH
16707: LD_INT 28
16709: PUSH
16710: LD_INT 29
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: LD_INT 31
16718: PUSH
16719: LD_INT 32
16721: PUSH
16722: LD_INT 33
16724: PUSH
16725: LD_INT 34
16727: PUSH
16728: LD_INT 35
16730: PUSH
16731: LD_INT 36
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 101
16774: PUSH
16775: LD_INT 102
16777: PUSH
16778: LD_INT 103
16780: PUSH
16781: LD_INT 104
16783: PUSH
16784: LD_INT 105
16786: PUSH
16787: LD_INT 106
16789: PUSH
16790: LD_INT 107
16792: PUSH
16793: LD_INT 108
16795: PUSH
16796: LD_INT 109
16798: PUSH
16799: LD_INT 110
16801: PUSH
16802: LD_INT 111
16804: PUSH
16805: LD_INT 112
16807: PUSH
16808: LD_INT 113
16810: PUSH
16811: LD_INT 114
16813: PUSH
16814: LD_INT 115
16816: PUSH
16817: LD_INT 116
16819: PUSH
16820: LD_INT 117
16822: PUSH
16823: LD_INT 118
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: ST_TO_ADDR
// if result then
16850: LD_VAR 0 2
16854: IFFALSE 17640
// begin normal :=  ;
16856: LD_ADDR_VAR 0 5
16860: PUSH
16861: LD_STRING 
16863: ST_TO_ADDR
// hardcore :=  ;
16864: LD_ADDR_VAR 0 6
16868: PUSH
16869: LD_STRING 
16871: ST_TO_ADDR
// active :=  ;
16872: LD_ADDR_VAR 0 7
16876: PUSH
16877: LD_STRING 
16879: ST_TO_ADDR
// for i = 1 to normalCounter do
16880: LD_ADDR_VAR 0 8
16884: PUSH
16885: DOUBLE
16886: LD_INT 1
16888: DEC
16889: ST_TO_ADDR
16890: LD_EXP 23
16894: PUSH
16895: FOR_TO
16896: IFFALSE 16997
// begin tmp := 0 ;
16898: LD_ADDR_VAR 0 3
16902: PUSH
16903: LD_STRING 0
16905: ST_TO_ADDR
// if result [ 1 ] then
16906: LD_VAR 0 2
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: IFFALSE 16979
// if result [ 1 ] [ 1 ] = i then
16916: LD_VAR 0 2
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: PUSH
16925: LD_INT 1
16927: ARRAY
16928: PUSH
16929: LD_VAR 0 8
16933: EQUAL
16934: IFFALSE 16979
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_INT 1
16948: PPUSH
16949: LD_VAR 0 2
16953: PUSH
16954: LD_INT 1
16956: ARRAY
16957: PPUSH
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 3
16965: PPUSH
16966: CALL_OW 1
16970: ST_TO_ADDR
// tmp := 1 ;
16971: LD_ADDR_VAR 0 3
16975: PUSH
16976: LD_STRING 1
16978: ST_TO_ADDR
// end ; normal := normal & tmp ;
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: LD_VAR 0 5
16988: PUSH
16989: LD_VAR 0 3
16993: STR
16994: ST_TO_ADDR
// end ;
16995: GO 16895
16997: POP
16998: POP
// for i = 1 to hardcoreCounter do
16999: LD_ADDR_VAR 0 8
17003: PUSH
17004: DOUBLE
17005: LD_INT 1
17007: DEC
17008: ST_TO_ADDR
17009: LD_EXP 24
17013: PUSH
17014: FOR_TO
17015: IFFALSE 17120
// begin tmp := 0 ;
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_STRING 0
17024: ST_TO_ADDR
// if result [ 2 ] then
17025: LD_VAR 0 2
17029: PUSH
17030: LD_INT 2
17032: ARRAY
17033: IFFALSE 17102
// if result [ 2 ] [ 1 ] = 100 + i then
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 2
17042: ARRAY
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PUSH
17048: LD_INT 100
17050: PUSH
17051: LD_VAR 0 8
17055: PLUS
17056: EQUAL
17057: IFFALSE 17102
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17059: LD_ADDR_VAR 0 2
17063: PUSH
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 2
17071: PPUSH
17072: LD_VAR 0 2
17076: PUSH
17077: LD_INT 2
17079: ARRAY
17080: PPUSH
17081: LD_INT 1
17083: PPUSH
17084: CALL_OW 3
17088: PPUSH
17089: CALL_OW 1
17093: ST_TO_ADDR
// tmp := 1 ;
17094: LD_ADDR_VAR 0 3
17098: PUSH
17099: LD_STRING 1
17101: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17102: LD_ADDR_VAR 0 6
17106: PUSH
17107: LD_VAR 0 6
17111: PUSH
17112: LD_VAR 0 3
17116: STR
17117: ST_TO_ADDR
// end ;
17118: GO 17014
17120: POP
17121: POP
// if isGameLoad then
17122: LD_VAR 0 1
17126: IFFALSE 17601
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17128: LD_ADDR_VAR 0 4
17132: PUSH
17133: LD_EXP 27
17137: PUSH
17138: LD_EXP 26
17142: PUSH
17143: LD_EXP 28
17147: PUSH
17148: LD_EXP 25
17152: PUSH
17153: LD_EXP 29
17157: PUSH
17158: LD_EXP 30
17162: PUSH
17163: LD_EXP 31
17167: PUSH
17168: LD_EXP 32
17172: PUSH
17173: LD_EXP 33
17177: PUSH
17178: LD_EXP 34
17182: PUSH
17183: LD_EXP 35
17187: PUSH
17188: LD_EXP 36
17192: PUSH
17193: LD_EXP 37
17197: PUSH
17198: LD_EXP 38
17202: PUSH
17203: LD_EXP 46
17207: PUSH
17208: LD_EXP 47
17212: PUSH
17213: LD_EXP 48
17217: PUSH
17218: LD_EXP 49
17222: PUSH
17223: LD_EXP 51
17227: PUSH
17228: LD_EXP 52
17232: PUSH
17233: LD_EXP 53
17237: PUSH
17238: LD_EXP 56
17242: PUSH
17243: LD_EXP 58
17247: PUSH
17248: LD_EXP 59
17252: PUSH
17253: LD_EXP 60
17257: PUSH
17258: LD_EXP 62
17262: PUSH
17263: LD_EXP 63
17267: PUSH
17268: LD_EXP 66
17272: PUSH
17273: LD_EXP 67
17277: PUSH
17278: LD_EXP 68
17282: PUSH
17283: LD_EXP 69
17287: PUSH
17288: LD_EXP 70
17292: PUSH
17293: LD_EXP 71
17297: PUSH
17298: LD_EXP 72
17302: PUSH
17303: LD_EXP 73
17307: PUSH
17308: LD_EXP 74
17312: PUSH
17313: LD_EXP 39
17317: PUSH
17318: LD_EXP 40
17322: PUSH
17323: LD_EXP 43
17327: PUSH
17328: LD_EXP 44
17332: PUSH
17333: LD_EXP 45
17337: PUSH
17338: LD_EXP 41
17342: PUSH
17343: LD_EXP 42
17347: PUSH
17348: LD_EXP 50
17352: PUSH
17353: LD_EXP 54
17357: PUSH
17358: LD_EXP 55
17362: PUSH
17363: LD_EXP 57
17367: PUSH
17368: LD_EXP 61
17372: PUSH
17373: LD_EXP 64
17377: PUSH
17378: LD_EXP 65
17382: PUSH
17383: LD_EXP 75
17387: PUSH
17388: LD_EXP 76
17392: PUSH
17393: LD_EXP 77
17397: PUSH
17398: LD_EXP 78
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: ST_TO_ADDR
// tmp :=  ;
17459: LD_ADDR_VAR 0 3
17463: PUSH
17464: LD_STRING 
17466: ST_TO_ADDR
// for i = 1 to normalCounter do
17467: LD_ADDR_VAR 0 8
17471: PUSH
17472: DOUBLE
17473: LD_INT 1
17475: DEC
17476: ST_TO_ADDR
17477: LD_EXP 23
17481: PUSH
17482: FOR_TO
17483: IFFALSE 17519
// begin if flags [ i ] then
17485: LD_VAR 0 4
17489: PUSH
17490: LD_VAR 0 8
17494: ARRAY
17495: IFFALSE 17517
// tmp := tmp & i & ; ;
17497: LD_ADDR_VAR 0 3
17501: PUSH
17502: LD_VAR 0 3
17506: PUSH
17507: LD_VAR 0 8
17511: STR
17512: PUSH
17513: LD_STRING ;
17515: STR
17516: ST_TO_ADDR
// end ;
17517: GO 17482
17519: POP
17520: POP
// for i = 1 to hardcoreCounter do
17521: LD_ADDR_VAR 0 8
17525: PUSH
17526: DOUBLE
17527: LD_INT 1
17529: DEC
17530: ST_TO_ADDR
17531: LD_EXP 24
17535: PUSH
17536: FOR_TO
17537: IFFALSE 17583
// begin if flags [ normalCounter + i ] then
17539: LD_VAR 0 4
17543: PUSH
17544: LD_EXP 23
17548: PUSH
17549: LD_VAR 0 8
17553: PLUS
17554: ARRAY
17555: IFFALSE 17581
// tmp := tmp & ( 100 + i ) & ; ;
17557: LD_ADDR_VAR 0 3
17561: PUSH
17562: LD_VAR 0 3
17566: PUSH
17567: LD_INT 100
17569: PUSH
17570: LD_VAR 0 8
17574: PLUS
17575: STR
17576: PUSH
17577: LD_STRING ;
17579: STR
17580: ST_TO_ADDR
// end ;
17581: GO 17536
17583: POP
17584: POP
// if tmp then
17585: LD_VAR 0 3
17589: IFFALSE 17601
// active := tmp ;
17591: LD_ADDR_VAR 0 7
17595: PUSH
17596: LD_VAR 0 3
17600: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17601: LD_STRING getStreamItemsFromMission("
17603: PUSH
17604: LD_VAR 0 5
17608: STR
17609: PUSH
17610: LD_STRING ","
17612: STR
17613: PUSH
17614: LD_VAR 0 6
17618: STR
17619: PUSH
17620: LD_STRING ","
17622: STR
17623: PUSH
17624: LD_VAR 0 7
17628: STR
17629: PUSH
17630: LD_STRING ")
17632: STR
17633: PPUSH
17634: CALL_OW 559
// end else
17638: GO 17647
// ToLua ( getStreamItemsFromMission("","","") ) ;
17640: LD_STRING getStreamItemsFromMission("","","")
17642: PPUSH
17643: CALL_OW 559
// end ;
17647: LD_VAR 0 2
17651: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17652: LD_EXP 22
17656: IFFALSE 17664
17658: PUSH
17659: LD_EXP 27
17663: AND
17664: IFFALSE 17788
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
// begin enable ;
17673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17674: LD_ADDR_VAR 0 2
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_OWVAR 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 34
17696: PUSH
17697: LD_INT 7
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 34
17706: PUSH
17707: LD_INT 45
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 34
17716: PUSH
17717: LD_INT 28
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 34
17726: PUSH
17727: LD_INT 47
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: ST_TO_ADDR
// if not tmp then
17750: LD_VAR 0 2
17754: NOT
17755: IFFALSE 17759
// exit ;
17757: GO 17788
// for i in tmp do
17759: LD_ADDR_VAR 0 1
17763: PUSH
17764: LD_VAR 0 2
17768: PUSH
17769: FOR_IN
17770: IFFALSE 17786
// begin SetLives ( i , 0 ) ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_INT 0
17779: PPUSH
17780: CALL_OW 234
// end ;
17784: GO 17769
17786: POP
17787: POP
// end ;
17788: PPOPN 2
17790: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17791: LD_EXP 22
17795: IFFALSE 17803
17797: PUSH
17798: LD_EXP 28
17802: AND
17803: IFFALSE 17887
17805: GO 17807
17807: DISABLE
17808: LD_INT 0
17810: PPUSH
17811: PPUSH
// begin enable ;
17812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17813: LD_ADDR_VAR 0 2
17817: PUSH
17818: LD_INT 22
17820: PUSH
17821: LD_OWVAR 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 32
17832: PUSH
17833: LD_INT 3
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: ST_TO_ADDR
// if not tmp then
17849: LD_VAR 0 2
17853: NOT
17854: IFFALSE 17858
// exit ;
17856: GO 17887
// for i in tmp do
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: LD_VAR 0 2
17867: PUSH
17868: FOR_IN
17869: IFFALSE 17885
// begin SetLives ( i , 0 ) ;
17871: LD_VAR 0 1
17875: PPUSH
17876: LD_INT 0
17878: PPUSH
17879: CALL_OW 234
// end ;
17883: GO 17868
17885: POP
17886: POP
// end ;
17887: PPOPN 2
17889: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17890: LD_EXP 22
17894: IFFALSE 17902
17896: PUSH
17897: LD_EXP 25
17901: AND
17902: IFFALSE 17995
17904: GO 17906
17906: DISABLE
17907: LD_INT 0
17909: PPUSH
// begin enable ;
17910: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_OWVAR 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 25
17933: PUSH
17934: LD_INT 5
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 25
17943: PUSH
17944: LD_INT 9
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 25
17953: PUSH
17954: LD_INT 8
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: PUSH
17976: FOR_IN
17977: IFFALSE 17993
// begin SetClass ( i , 1 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 336
// end ;
17991: GO 17976
17993: POP
17994: POP
// end ;
17995: PPOPN 1
17997: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17998: LD_EXP 22
18002: IFFALSE 18010
18004: PUSH
18005: LD_EXP 26
18009: AND
18010: IFFALSE 18022
18012: PUSH
18013: LD_OWVAR 65
18017: PUSH
18018: LD_INT 7
18020: LESS
18021: AND
18022: IFFALSE 18036
18024: GO 18026
18026: DISABLE
// begin enable ;
18027: ENABLE
// game_speed := 7 ;
18028: LD_ADDR_OWVAR 65
18032: PUSH
18033: LD_INT 7
18035: ST_TO_ADDR
// end ;
18036: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18037: LD_EXP 22
18041: IFFALSE 18049
18043: PUSH
18044: LD_EXP 29
18048: AND
18049: IFFALSE 18251
18051: GO 18053
18053: DISABLE
18054: LD_INT 0
18056: PPUSH
18057: PPUSH
18058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_INT 81
18066: PUSH
18067: LD_OWVAR 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 21
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 69
18094: ST_TO_ADDR
// if not tmp then
18095: LD_VAR 0 3
18099: NOT
18100: IFFALSE 18104
// exit ;
18102: GO 18251
// if tmp > 5 then
18104: LD_VAR 0 3
18108: PUSH
18109: LD_INT 5
18111: GREATER
18112: IFFALSE 18124
// k := 5 else
18114: LD_ADDR_VAR 0 2
18118: PUSH
18119: LD_INT 5
18121: ST_TO_ADDR
18122: GO 18134
// k := tmp ;
18124: LD_ADDR_VAR 0 2
18128: PUSH
18129: LD_VAR 0 3
18133: ST_TO_ADDR
// for i := 1 to k do
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: DOUBLE
18140: LD_INT 1
18142: DEC
18143: ST_TO_ADDR
18144: LD_VAR 0 2
18148: PUSH
18149: FOR_TO
18150: IFFALSE 18249
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18152: LD_VAR 0 3
18156: PUSH
18157: LD_VAR 0 1
18161: ARRAY
18162: PPUSH
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 4
18170: MOD
18171: PUSH
18172: LD_INT 1
18174: PLUS
18175: PPUSH
18176: CALL_OW 259
18180: PUSH
18181: LD_INT 10
18183: LESS
18184: IFFALSE 18247
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18186: LD_VAR 0 3
18190: PUSH
18191: LD_VAR 0 1
18195: ARRAY
18196: PPUSH
18197: LD_VAR 0 1
18201: PUSH
18202: LD_INT 4
18204: MOD
18205: PUSH
18206: LD_INT 1
18208: PLUS
18209: PPUSH
18210: LD_VAR 0 3
18214: PUSH
18215: LD_VAR 0 1
18219: ARRAY
18220: PPUSH
18221: LD_VAR 0 1
18225: PUSH
18226: LD_INT 4
18228: MOD
18229: PUSH
18230: LD_INT 1
18232: PLUS
18233: PPUSH
18234: CALL_OW 259
18238: PUSH
18239: LD_INT 1
18241: PLUS
18242: PPUSH
18243: CALL_OW 237
18247: GO 18149
18249: POP
18250: POP
// end ;
18251: PPOPN 3
18253: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18254: LD_EXP 22
18258: IFFALSE 18266
18260: PUSH
18261: LD_EXP 30
18265: AND
18266: IFFALSE 18286
18268: GO 18270
18270: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18271: LD_INT 4
18273: PPUSH
18274: LD_OWVAR 2
18278: PPUSH
18279: LD_INT 0
18281: PPUSH
18282: CALL_OW 324
18286: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18287: LD_EXP 22
18291: IFFALSE 18299
18293: PUSH
18294: LD_EXP 59
18298: AND
18299: IFFALSE 18319
18301: GO 18303
18303: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18304: LD_INT 19
18306: PPUSH
18307: LD_OWVAR 2
18311: PPUSH
18312: LD_INT 0
18314: PPUSH
18315: CALL_OW 324
18319: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18320: LD_EXP 22
18324: IFFALSE 18332
18326: PUSH
18327: LD_EXP 31
18331: AND
18332: IFFALSE 18434
18334: GO 18336
18336: DISABLE
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
// begin enable ;
18341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18342: LD_ADDR_VAR 0 2
18346: PUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 11
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 34
18374: PUSH
18375: LD_INT 30
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PPUSH
18391: CALL_OW 69
18395: ST_TO_ADDR
// if not tmp then
18396: LD_VAR 0 2
18400: NOT
18401: IFFALSE 18405
// exit ;
18403: GO 18434
// for i in tmp do
18405: LD_ADDR_VAR 0 1
18409: PUSH
18410: LD_VAR 0 2
18414: PUSH
18415: FOR_IN
18416: IFFALSE 18432
// begin SetLives ( i , 0 ) ;
18418: LD_VAR 0 1
18422: PPUSH
18423: LD_INT 0
18425: PPUSH
18426: CALL_OW 234
// end ;
18430: GO 18415
18432: POP
18433: POP
// end ;
18434: PPOPN 2
18436: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18437: LD_EXP 22
18441: IFFALSE 18449
18443: PUSH
18444: LD_EXP 32
18448: AND
18449: IFFALSE 18469
18451: GO 18453
18453: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18454: LD_INT 32
18456: PPUSH
18457: LD_OWVAR 2
18461: PPUSH
18462: LD_INT 0
18464: PPUSH
18465: CALL_OW 324
18469: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18470: LD_EXP 22
18474: IFFALSE 18482
18476: PUSH
18477: LD_EXP 33
18481: AND
18482: IFFALSE 18665
18484: GO 18486
18486: DISABLE
18487: LD_INT 0
18489: PPUSH
18490: PPUSH
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 33
18511: PUSH
18512: LD_INT 3
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: ST_TO_ADDR
// if not tmp then
18528: LD_VAR 0 2
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18665
// side := 0 ;
18537: LD_ADDR_VAR 0 3
18541: PUSH
18542: LD_INT 0
18544: ST_TO_ADDR
// for i := 1 to 8 do
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: DOUBLE
18551: LD_INT 1
18553: DEC
18554: ST_TO_ADDR
18555: LD_INT 8
18557: PUSH
18558: FOR_TO
18559: IFFALSE 18609
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18561: LD_OWVAR 2
18565: PUSH
18566: LD_VAR 0 1
18570: NONEQUAL
18571: IFFALSE 18593
18573: PUSH
18574: LD_OWVAR 2
18578: PPUSH
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 81
18588: PUSH
18589: LD_INT 2
18591: EQUAL
18592: AND
18593: IFFALSE 18607
// begin side := i ;
18595: LD_ADDR_VAR 0 3
18599: PUSH
18600: LD_VAR 0 1
18604: ST_TO_ADDR
// break ;
18605: GO 18609
// end ;
18607: GO 18558
18609: POP
18610: POP
// if not side then
18611: LD_VAR 0 3
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 18665
// for i := 1 to tmp do
18620: LD_ADDR_VAR 0 1
18624: PUSH
18625: DOUBLE
18626: LD_INT 1
18628: DEC
18629: ST_TO_ADDR
18630: LD_VAR 0 2
18634: PUSH
18635: FOR_TO
18636: IFFALSE 18663
// if Prob ( 60 ) then
18638: LD_INT 60
18640: PPUSH
18641: CALL_OW 13
18645: IFFALSE 18661
// SetSide ( i , side ) ;
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_VAR 0 3
18656: PPUSH
18657: CALL_OW 235
18661: GO 18635
18663: POP
18664: POP
// end ;
18665: PPOPN 3
18667: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18668: LD_EXP 22
18672: IFFALSE 18680
18674: PUSH
18675: LD_EXP 35
18679: AND
18680: IFFALSE 18799
18682: GO 18684
18684: DISABLE
18685: LD_INT 0
18687: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18688: LD_ADDR_VAR 0 1
18692: PUSH
18693: LD_INT 22
18695: PUSH
18696: LD_OWVAR 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: LD_INT 23
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: FOR_IN
18743: IFFALSE 18797
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18745: LD_VAR 0 1
18749: PPUSH
18750: CALL_OW 257
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 4
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: IN
18773: IFFALSE 18795
// SetClass ( un , rand ( 1 , 4 ) ) ;
18775: LD_VAR 0 1
18779: PPUSH
18780: LD_INT 1
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: CALL_OW 12
18790: PPUSH
18791: CALL_OW 336
18795: GO 18742
18797: POP
18798: POP
// end ;
18799: PPOPN 1
18801: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18802: LD_EXP 22
18806: IFFALSE 18814
18808: PUSH
18809: LD_EXP 34
18813: AND
18814: IFFALSE 18893
18816: GO 18818
18818: DISABLE
18819: LD_INT 0
18821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18822: LD_ADDR_VAR 0 1
18826: PUSH
18827: LD_INT 22
18829: PUSH
18830: LD_OWVAR 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 21
18841: PUSH
18842: LD_INT 3
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: ST_TO_ADDR
// if not tmp then
18858: LD_VAR 0 1
18862: NOT
18863: IFFALSE 18867
// exit ;
18865: GO 18893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18867: LD_VAR 0 1
18871: PUSH
18872: LD_INT 1
18874: PPUSH
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 12
18884: ARRAY
18885: PPUSH
18886: LD_INT 100
18888: PPUSH
18889: CALL_OW 234
// end ;
18893: PPOPN 1
18895: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18896: LD_EXP 22
18900: IFFALSE 18908
18902: PUSH
18903: LD_EXP 36
18907: AND
18908: IFFALSE 19006
18910: GO 18912
18912: DISABLE
18913: LD_INT 0
18915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18916: LD_ADDR_VAR 0 1
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_OWVAR 2
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 21
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 69
18951: ST_TO_ADDR
// if not tmp then
18952: LD_VAR 0 1
18956: NOT
18957: IFFALSE 18961
// exit ;
18959: GO 19006
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18961: LD_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 12
18978: ARRAY
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: LD_INT 4
18985: PPUSH
18986: CALL_OW 12
18990: PPUSH
18991: LD_INT 3000
18993: PPUSH
18994: LD_INT 9000
18996: PPUSH
18997: CALL_OW 12
19001: PPUSH
19002: CALL_OW 492
// end ;
19006: PPOPN 1
19008: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19009: LD_EXP 22
19013: IFFALSE 19021
19015: PUSH
19016: LD_EXP 37
19020: AND
19021: IFFALSE 19041
19023: GO 19025
19025: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19026: LD_INT 1
19028: PPUSH
19029: LD_OWVAR 2
19033: PPUSH
19034: LD_INT 0
19036: PPUSH
19037: CALL_OW 324
19041: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19042: LD_EXP 22
19046: IFFALSE 19054
19048: PUSH
19049: LD_EXP 38
19053: AND
19054: IFFALSE 19137
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
19062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19063: LD_ADDR_VAR 0 2
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_OWVAR 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PPUSH
19094: CALL_OW 69
19098: ST_TO_ADDR
// if not tmp then
19099: LD_VAR 0 2
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19137
// for i in tmp do
19108: LD_ADDR_VAR 0 1
19112: PUSH
19113: LD_VAR 0 2
19117: PUSH
19118: FOR_IN
19119: IFFALSE 19135
// SetBLevel ( i , 10 ) ;
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_INT 10
19128: PPUSH
19129: CALL_OW 241
19133: GO 19118
19135: POP
19136: POP
// end ;
19137: PPOPN 2
19139: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19140: LD_EXP 22
19144: IFFALSE 19152
19146: PUSH
19147: LD_EXP 39
19151: AND
19152: IFFALSE 19263
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_OWVAR 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 69
19197: ST_TO_ADDR
// if not tmp then
19198: LD_VAR 0 3
19202: NOT
19203: IFFALSE 19207
// exit ;
19205: GO 19263
// un := tmp [ rand ( 1 , tmp ) ] ;
19207: LD_ADDR_VAR 0 2
19211: PUSH
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 1
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: CALL_OW 12
19229: ARRAY
19230: ST_TO_ADDR
// if Crawls ( un ) then
19231: LD_VAR 0 2
19235: PPUSH
19236: CALL_OW 318
19240: IFFALSE 19251
// ComWalk ( un ) ;
19242: LD_VAR 0 2
19246: PPUSH
19247: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_INT 5
19258: PPUSH
19259: CALL_OW 336
// end ;
19263: PPOPN 3
19265: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19266: LD_EXP 22
19270: IFFALSE 19278
19272: PUSH
19273: LD_EXP 40
19277: AND
19278: IFFALSE 19290
19280: PUSH
19281: LD_OWVAR 67
19285: PUSH
19286: LD_INT 4
19288: LESS
19289: AND
19290: IFFALSE 19309
19292: GO 19294
19294: DISABLE
// begin Difficulty := Difficulty + 1 ;
19295: LD_ADDR_OWVAR 67
19299: PUSH
19300: LD_OWVAR 67
19304: PUSH
19305: LD_INT 1
19307: PLUS
19308: ST_TO_ADDR
// end ;
19309: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19310: LD_EXP 22
19314: IFFALSE 19322
19316: PUSH
19317: LD_EXP 41
19321: AND
19322: IFFALSE 19425
19324: GO 19326
19326: DISABLE
19327: LD_INT 0
19329: PPUSH
// begin for i := 1 to 5 do
19330: LD_ADDR_VAR 0 1
19334: PUSH
19335: DOUBLE
19336: LD_INT 1
19338: DEC
19339: ST_TO_ADDR
19340: LD_INT 5
19342: PUSH
19343: FOR_TO
19344: IFFALSE 19423
// begin uc_nation := nation_nature ;
19346: LD_ADDR_OWVAR 21
19350: PUSH
19351: LD_INT 0
19353: ST_TO_ADDR
// uc_side := 0 ;
19354: LD_ADDR_OWVAR 20
19358: PUSH
19359: LD_INT 0
19361: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19362: LD_ADDR_OWVAR 29
19366: PUSH
19367: LD_INT 12
19369: PUSH
19370: LD_INT 12
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: ST_TO_ADDR
// hc_agressivity := 20 ;
19377: LD_ADDR_OWVAR 35
19381: PUSH
19382: LD_INT 20
19384: ST_TO_ADDR
// hc_class := class_tiger ;
19385: LD_ADDR_OWVAR 28
19389: PUSH
19390: LD_INT 14
19392: ST_TO_ADDR
// hc_gallery :=  ;
19393: LD_ADDR_OWVAR 33
19397: PUSH
19398: LD_STRING 
19400: ST_TO_ADDR
// hc_name :=  ;
19401: LD_ADDR_OWVAR 26
19405: PUSH
19406: LD_STRING 
19408: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19409: CALL_OW 44
19413: PPUSH
19414: LD_INT 0
19416: PPUSH
19417: CALL_OW 51
// end ;
19421: GO 19343
19423: POP
19424: POP
// end ;
19425: PPOPN 1
19427: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19428: LD_EXP 22
19432: IFFALSE 19440
19434: PUSH
19435: LD_EXP 42
19439: AND
19440: IFFALSE 19449
19442: GO 19444
19444: DISABLE
// StreamSibBomb ;
19445: CALL 19450 0 0
19449: END
// export function StreamSibBomb ; var i , x , y ; begin
19450: LD_INT 0
19452: PPUSH
19453: PPUSH
19454: PPUSH
19455: PPUSH
// result := false ;
19456: LD_ADDR_VAR 0 1
19460: PUSH
19461: LD_INT 0
19463: ST_TO_ADDR
// for i := 1 to 16 do
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: DOUBLE
19470: LD_INT 1
19472: DEC
19473: ST_TO_ADDR
19474: LD_INT 16
19476: PUSH
19477: FOR_TO
19478: IFFALSE 19677
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: LD_INT 10
19487: PUSH
19488: LD_INT 20
19490: PUSH
19491: LD_INT 30
19493: PUSH
19494: LD_INT 40
19496: PUSH
19497: LD_INT 50
19499: PUSH
19500: LD_INT 60
19502: PUSH
19503: LD_INT 70
19505: PUSH
19506: LD_INT 80
19508: PUSH
19509: LD_INT 90
19511: PUSH
19512: LD_INT 100
19514: PUSH
19515: LD_INT 110
19517: PUSH
19518: LD_INT 120
19520: PUSH
19521: LD_INT 130
19523: PUSH
19524: LD_INT 140
19526: PUSH
19527: LD_INT 150
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PPUSH
19550: LD_INT 15
19552: PPUSH
19553: CALL_OW 12
19557: ARRAY
19558: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19559: LD_ADDR_VAR 0 4
19563: PUSH
19564: LD_INT 10
19566: PUSH
19567: LD_INT 20
19569: PUSH
19570: LD_INT 30
19572: PUSH
19573: LD_INT 40
19575: PUSH
19576: LD_INT 50
19578: PUSH
19579: LD_INT 60
19581: PUSH
19582: LD_INT 70
19584: PUSH
19585: LD_INT 80
19587: PUSH
19588: LD_INT 90
19590: PUSH
19591: LD_INT 100
19593: PUSH
19594: LD_INT 110
19596: PUSH
19597: LD_INT 120
19599: PUSH
19600: LD_INT 130
19602: PUSH
19603: LD_INT 140
19605: PUSH
19606: LD_INT 150
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: PPUSH
19629: LD_INT 15
19631: PPUSH
19632: CALL_OW 12
19636: ARRAY
19637: ST_TO_ADDR
// if ValidHex ( x , y ) then
19638: LD_VAR 0 3
19642: PPUSH
19643: LD_VAR 0 4
19647: PPUSH
19648: CALL_OW 488
19652: IFFALSE 19675
// begin result := [ x , y ] ;
19654: LD_ADDR_VAR 0 1
19658: PUSH
19659: LD_VAR 0 3
19663: PUSH
19664: LD_VAR 0 4
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: ST_TO_ADDR
// break ;
19673: GO 19677
// end ; end ;
19675: GO 19477
19677: POP
19678: POP
// if result then
19679: LD_VAR 0 1
19683: IFFALSE 19743
// begin ToLua ( playSibBomb() ) ;
19685: LD_STRING playSibBomb()
19687: PPUSH
19688: CALL_OW 559
// wait ( 0 0$14 ) ;
19692: LD_INT 490
19694: PPUSH
19695: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19699: LD_VAR 0 1
19703: PUSH
19704: LD_INT 1
19706: ARRAY
19707: PPUSH
19708: LD_VAR 0 1
19712: PUSH
19713: LD_INT 2
19715: ARRAY
19716: PPUSH
19717: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19721: LD_VAR 0 1
19725: PUSH
19726: LD_INT 1
19728: ARRAY
19729: PPUSH
19730: LD_VAR 0 1
19734: PUSH
19735: LD_INT 2
19737: ARRAY
19738: PPUSH
19739: CALL_OW 429
// end ; end ;
19743: LD_VAR 0 1
19747: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19748: LD_EXP 22
19752: IFFALSE 19760
19754: PUSH
19755: LD_EXP 44
19759: AND
19760: IFFALSE 19772
19762: GO 19764
19764: DISABLE
// YouLost (  ) ;
19765: LD_STRING 
19767: PPUSH
19768: CALL_OW 104
19772: END
// every 0 0$1 trigger StreamModeActive and sFog do
19773: LD_EXP 22
19777: IFFALSE 19785
19779: PUSH
19780: LD_EXP 43
19784: AND
19785: IFFALSE 19799
19787: GO 19789
19789: DISABLE
// FogOff ( your_side ) ;
19790: LD_OWVAR 2
19794: PPUSH
19795: CALL_OW 344
19799: END
// every 0 0$1 trigger StreamModeActive and sSun do
19800: LD_EXP 22
19804: IFFALSE 19812
19806: PUSH
19807: LD_EXP 45
19811: AND
19812: IFFALSE 19840
19814: GO 19816
19816: DISABLE
// begin solar_recharge_percent := 0 ;
19817: LD_ADDR_OWVAR 79
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19825: LD_INT 10500
19827: PPUSH
19828: CALL_OW 67
// solar_recharge_percent := 100 ;
19832: LD_ADDR_OWVAR 79
19836: PUSH
19837: LD_INT 100
19839: ST_TO_ADDR
// end ;
19840: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19841: LD_EXP 22
19845: IFFALSE 19853
19847: PUSH
19848: LD_EXP 46
19852: AND
19853: IFFALSE 20092
19855: GO 19857
19857: DISABLE
19858: LD_INT 0
19860: PPUSH
19861: PPUSH
19862: PPUSH
// begin tmp := [ ] ;
19863: LD_ADDR_VAR 0 3
19867: PUSH
19868: EMPTY
19869: ST_TO_ADDR
// for i := 1 to 6 do
19870: LD_ADDR_VAR 0 1
19874: PUSH
19875: DOUBLE
19876: LD_INT 1
19878: DEC
19879: ST_TO_ADDR
19880: LD_INT 6
19882: PUSH
19883: FOR_TO
19884: IFFALSE 19989
// begin uc_nation := nation_nature ;
19886: LD_ADDR_OWVAR 21
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// uc_side := 0 ;
19894: LD_ADDR_OWVAR 20
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19902: LD_ADDR_OWVAR 29
19906: PUSH
19907: LD_INT 12
19909: PUSH
19910: LD_INT 12
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: ST_TO_ADDR
// hc_agressivity := 20 ;
19917: LD_ADDR_OWVAR 35
19921: PUSH
19922: LD_INT 20
19924: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19925: LD_ADDR_OWVAR 28
19929: PUSH
19930: LD_INT 17
19932: ST_TO_ADDR
// hc_gallery :=  ;
19933: LD_ADDR_OWVAR 33
19937: PUSH
19938: LD_STRING 
19940: ST_TO_ADDR
// hc_name :=  ;
19941: LD_ADDR_OWVAR 26
19945: PUSH
19946: LD_STRING 
19948: ST_TO_ADDR
// un := CreateHuman ;
19949: LD_ADDR_VAR 0 2
19953: PUSH
19954: CALL_OW 44
19958: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19959: LD_VAR 0 2
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: CALL_OW 51
// tmp := tmp ^ un ;
19971: LD_ADDR_VAR 0 3
19975: PUSH
19976: LD_VAR 0 3
19980: PUSH
19981: LD_VAR 0 2
19985: ADD
19986: ST_TO_ADDR
// end ;
19987: GO 19883
19989: POP
19990: POP
// repeat wait ( 0 0$1 ) ;
19991: LD_INT 35
19993: PPUSH
19994: CALL_OW 67
// for un in tmp do
19998: LD_ADDR_VAR 0 2
20002: PUSH
20003: LD_VAR 0 3
20007: PUSH
20008: FOR_IN
20009: IFFALSE 20083
// begin if IsDead ( un ) then
20011: LD_VAR 0 2
20015: PPUSH
20016: CALL_OW 301
20020: IFFALSE 20040
// begin tmp := tmp diff un ;
20022: LD_ADDR_VAR 0 3
20026: PUSH
20027: LD_VAR 0 3
20031: PUSH
20032: LD_VAR 0 2
20036: DIFF
20037: ST_TO_ADDR
// continue ;
20038: GO 20008
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20040: LD_VAR 0 2
20044: PPUSH
20045: LD_INT 3
20047: PUSH
20048: LD_INT 22
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: PPUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: CALL_OW 74
20076: PPUSH
20077: CALL_OW 115
// end ;
20081: GO 20008
20083: POP
20084: POP
// until not tmp ;
20085: LD_VAR 0 3
20089: NOT
20090: IFFALSE 19991
// end ;
20092: PPOPN 3
20094: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20095: LD_EXP 22
20099: IFFALSE 20107
20101: PUSH
20102: LD_EXP 47
20106: AND
20107: IFFALSE 20161
20109: GO 20111
20111: DISABLE
// begin ToLua ( displayTroll(); ) ;
20112: LD_STRING displayTroll();
20114: PPUSH
20115: CALL_OW 559
// wait ( 3 3$00 ) ;
20119: LD_INT 6300
20121: PPUSH
20122: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20126: LD_STRING hideTroll();
20128: PPUSH
20129: CALL_OW 559
// wait ( 1 1$00 ) ;
20133: LD_INT 2100
20135: PPUSH
20136: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20140: LD_STRING displayTroll();
20142: PPUSH
20143: CALL_OW 559
// wait ( 1 1$00 ) ;
20147: LD_INT 2100
20149: PPUSH
20150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20154: LD_STRING hideTroll();
20156: PPUSH
20157: CALL_OW 559
// end ;
20161: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20162: LD_EXP 22
20166: IFFALSE 20174
20168: PUSH
20169: LD_EXP 48
20173: AND
20174: IFFALSE 20237
20176: GO 20178
20178: DISABLE
20179: LD_INT 0
20181: PPUSH
// begin p := 0 ;
20182: LD_ADDR_VAR 0 1
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// repeat game_speed := 1 ;
20190: LD_ADDR_OWVAR 65
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20198: LD_INT 35
20200: PPUSH
20201: CALL_OW 67
// p := p + 1 ;
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: LD_VAR 0 1
20214: PUSH
20215: LD_INT 1
20217: PLUS
20218: ST_TO_ADDR
// until p >= 60 ;
20219: LD_VAR 0 1
20223: PUSH
20224: LD_INT 60
20226: GREATEREQUAL
20227: IFFALSE 20190
// game_speed := 4 ;
20229: LD_ADDR_OWVAR 65
20233: PUSH
20234: LD_INT 4
20236: ST_TO_ADDR
// end ;
20237: PPOPN 1
20239: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20240: LD_EXP 22
20244: IFFALSE 20252
20246: PUSH
20247: LD_EXP 49
20251: AND
20252: IFFALSE 20398
20254: GO 20256
20256: DISABLE
20257: LD_INT 0
20259: PPUSH
20260: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20261: LD_ADDR_VAR 0 1
20265: PUSH
20266: LD_INT 22
20268: PUSH
20269: LD_OWVAR 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 30
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 30
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 69
20314: ST_TO_ADDR
// if not depot then
20315: LD_VAR 0 1
20319: NOT
20320: IFFALSE 20324
// exit ;
20322: GO 20398
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20324: LD_ADDR_VAR 0 2
20328: PUSH
20329: LD_VAR 0 1
20333: PUSH
20334: LD_INT 1
20336: PPUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 12
20346: ARRAY
20347: PPUSH
20348: CALL_OW 274
20352: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20353: LD_VAR 0 2
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: LD_INT 0
20363: PPUSH
20364: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20368: LD_VAR 0 2
20372: PPUSH
20373: LD_INT 2
20375: PPUSH
20376: LD_INT 0
20378: PPUSH
20379: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20383: LD_VAR 0 2
20387: PPUSH
20388: LD_INT 3
20390: PPUSH
20391: LD_INT 0
20393: PPUSH
20394: CALL_OW 277
// end ;
20398: PPOPN 2
20400: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20401: LD_EXP 22
20405: IFFALSE 20413
20407: PUSH
20408: LD_EXP 50
20412: AND
20413: IFFALSE 20510
20415: GO 20417
20417: DISABLE
20418: LD_INT 0
20420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20421: LD_ADDR_VAR 0 1
20425: PUSH
20426: LD_INT 22
20428: PUSH
20429: LD_OWVAR 2
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 21
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: LD_INT 23
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: PPUSH
20470: CALL_OW 69
20474: ST_TO_ADDR
// if not tmp then
20475: LD_VAR 0 1
20479: NOT
20480: IFFALSE 20484
// exit ;
20482: GO 20510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 1
20491: PPUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: CALL_OW 12
20501: ARRAY
20502: PPUSH
20503: LD_INT 200
20505: PPUSH
20506: CALL_OW 234
// end ;
20510: PPOPN 1
20512: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20513: LD_EXP 22
20517: IFFALSE 20525
20519: PUSH
20520: LD_EXP 51
20524: AND
20525: IFFALSE 20604
20527: GO 20529
20529: DISABLE
20530: LD_INT 0
20532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20533: LD_ADDR_VAR 0 1
20537: PUSH
20538: LD_INT 22
20540: PUSH
20541: LD_OWVAR 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 21
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: ST_TO_ADDR
// if not tmp then
20569: LD_VAR 0 1
20573: NOT
20574: IFFALSE 20578
// exit ;
20576: GO 20604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 1
20585: PPUSH
20586: LD_VAR 0 1
20590: PPUSH
20591: CALL_OW 12
20595: ARRAY
20596: PPUSH
20597: LD_INT 60
20599: PPUSH
20600: CALL_OW 234
// end ;
20604: PPOPN 1
20606: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20607: LD_EXP 22
20611: IFFALSE 20619
20613: PUSH
20614: LD_EXP 52
20618: AND
20619: IFFALSE 20718
20621: GO 20623
20623: DISABLE
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
// begin enable ;
20628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20629: LD_ADDR_VAR 0 1
20633: PUSH
20634: LD_INT 22
20636: PUSH
20637: LD_OWVAR 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 61
20648: PUSH
20649: EMPTY
20650: LIST
20651: PUSH
20652: LD_INT 33
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: PPUSH
20667: CALL_OW 69
20671: ST_TO_ADDR
// if not tmp then
20672: LD_VAR 0 1
20676: NOT
20677: IFFALSE 20681
// exit ;
20679: GO 20718
// for i in tmp do
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_VAR 0 1
20690: PUSH
20691: FOR_IN
20692: IFFALSE 20716
// if IsControledBy ( i ) then
20694: LD_VAR 0 2
20698: PPUSH
20699: CALL_OW 312
20703: IFFALSE 20714
// ComUnlink ( i ) ;
20705: LD_VAR 0 2
20709: PPUSH
20710: CALL_OW 136
20714: GO 20691
20716: POP
20717: POP
// end ;
20718: PPOPN 2
20720: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20721: LD_EXP 22
20725: IFFALSE 20733
20727: PUSH
20728: LD_EXP 53
20732: AND
20733: IFFALSE 20873
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
// begin ToLua ( displayPowell(); ) ;
20742: LD_STRING displayPowell();
20744: PPUSH
20745: CALL_OW 559
// uc_side := 0 ;
20749: LD_ADDR_OWVAR 20
20753: PUSH
20754: LD_INT 0
20756: ST_TO_ADDR
// uc_nation := 2 ;
20757: LD_ADDR_OWVAR 21
20761: PUSH
20762: LD_INT 2
20764: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20765: LD_ADDR_OWVAR 37
20769: PUSH
20770: LD_INT 14
20772: ST_TO_ADDR
// vc_engine := engine_siberite ;
20773: LD_ADDR_OWVAR 39
20777: PUSH
20778: LD_INT 3
20780: ST_TO_ADDR
// vc_control := control_apeman ;
20781: LD_ADDR_OWVAR 38
20785: PUSH
20786: LD_INT 5
20788: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20789: LD_ADDR_OWVAR 40
20793: PUSH
20794: LD_INT 29
20796: ST_TO_ADDR
// un := CreateVehicle ;
20797: LD_ADDR_VAR 0 2
20801: PUSH
20802: CALL_OW 45
20806: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20807: LD_VAR 0 2
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20819: LD_INT 35
20821: PPUSH
20822: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20826: LD_VAR 0 2
20830: PPUSH
20831: LD_INT 22
20833: PUSH
20834: LD_OWVAR 2
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PPUSH
20848: LD_VAR 0 2
20852: PPUSH
20853: CALL_OW 74
20857: PPUSH
20858: CALL_OW 115
// until IsDead ( un ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: CALL_OW 301
20871: IFFALSE 20819
// end ;
20873: PPOPN 2
20875: END
// every 0 0$1 trigger StreamModeActive and sStu do
20876: LD_EXP 22
20880: IFFALSE 20888
20882: PUSH
20883: LD_EXP 61
20887: AND
20888: IFFALSE 20904
20890: GO 20892
20892: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20893: LD_STRING displayStucuk();
20895: PPUSH
20896: CALL_OW 559
// ResetFog ;
20900: CALL_OW 335
// end ;
20904: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20905: LD_EXP 22
20909: IFFALSE 20917
20911: PUSH
20912: LD_EXP 54
20916: AND
20917: IFFALSE 21058
20919: GO 20921
20921: DISABLE
20922: LD_INT 0
20924: PPUSH
20925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_INT 22
20933: PUSH
20934: LD_OWVAR 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 21
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL_OW 69
20961: ST_TO_ADDR
// if not tmp then
20962: LD_VAR 0 2
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21058
// un := tmp [ rand ( 1 , tmp ) ] ;
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_VAR 0 2
20980: PUSH
20981: LD_INT 1
20983: PPUSH
20984: LD_VAR 0 2
20988: PPUSH
20989: CALL_OW 12
20993: ARRAY
20994: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20995: LD_VAR 0 1
20999: PPUSH
21000: LD_INT 0
21002: PPUSH
21003: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21007: LD_VAR 0 1
21011: PPUSH
21012: LD_OWVAR 3
21016: PUSH
21017: LD_VAR 0 1
21021: DIFF
21022: PPUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 74
21032: PPUSH
21033: CALL_OW 115
// wait ( 0 0$20 ) ;
21037: LD_INT 700
21039: PPUSH
21040: CALL_OW 67
// SetSide ( un , your_side ) ;
21044: LD_VAR 0 1
21048: PPUSH
21049: LD_OWVAR 2
21053: PPUSH
21054: CALL_OW 235
// end ;
21058: PPOPN 2
21060: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21061: LD_EXP 22
21065: IFFALSE 21073
21067: PUSH
21068: LD_EXP 55
21072: AND
21073: IFFALSE 21179
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21081: LD_ADDR_VAR 0 1
21085: PUSH
21086: LD_INT 22
21088: PUSH
21089: LD_OWVAR 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: LD_INT 30
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 30
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 69
21134: ST_TO_ADDR
// if not depot then
21135: LD_VAR 0 1
21139: NOT
21140: IFFALSE 21144
// exit ;
21142: GO 21179
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21144: LD_VAR 0 1
21148: PUSH
21149: LD_INT 1
21151: ARRAY
21152: PPUSH
21153: CALL_OW 250
21157: PPUSH
21158: LD_VAR 0 1
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: CALL_OW 251
21171: PPUSH
21172: LD_INT 70
21174: PPUSH
21175: CALL_OW 495
// end ;
21179: PPOPN 1
21181: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21182: LD_EXP 22
21186: IFFALSE 21194
21188: PUSH
21189: LD_EXP 56
21193: AND
21194: IFFALSE 21405
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
21202: PPUSH
21203: PPUSH
21204: PPUSH
21205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21206: LD_ADDR_VAR 0 5
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_OWVAR 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: ST_TO_ADDR
// if not tmp then
21242: LD_VAR 0 5
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21405
// for i in tmp do
21251: LD_ADDR_VAR 0 1
21255: PUSH
21256: LD_VAR 0 5
21260: PUSH
21261: FOR_IN
21262: IFFALSE 21403
// begin d := rand ( 0 , 5 ) ;
21264: LD_ADDR_VAR 0 4
21268: PUSH
21269: LD_INT 0
21271: PPUSH
21272: LD_INT 5
21274: PPUSH
21275: CALL_OW 12
21279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PPUSH
21290: CALL_OW 250
21294: PPUSH
21295: LD_VAR 0 4
21299: PPUSH
21300: LD_INT 3
21302: PPUSH
21303: LD_INT 12
21305: PPUSH
21306: CALL_OW 12
21310: PPUSH
21311: CALL_OW 272
21315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21316: LD_ADDR_VAR 0 3
21320: PUSH
21321: LD_VAR 0 1
21325: PPUSH
21326: CALL_OW 251
21330: PPUSH
21331: LD_VAR 0 4
21335: PPUSH
21336: LD_INT 3
21338: PPUSH
21339: LD_INT 12
21341: PPUSH
21342: CALL_OW 12
21346: PPUSH
21347: CALL_OW 273
21351: ST_TO_ADDR
// if ValidHex ( x , y ) then
21352: LD_VAR 0 2
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: CALL_OW 488
21366: IFFALSE 21401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: LD_VAR 0 2
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 3
21385: PPUSH
21386: LD_INT 6
21388: PPUSH
21389: CALL_OW 12
21393: PPUSH
21394: LD_INT 1
21396: PPUSH
21397: CALL_OW 483
// end ;
21401: GO 21261
21403: POP
21404: POP
// end ;
21405: PPOPN 5
21407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21408: LD_EXP 22
21412: IFFALSE 21420
21414: PUSH
21415: LD_EXP 57
21419: AND
21420: IFFALSE 21514
21422: GO 21424
21424: DISABLE
21425: LD_INT 0
21427: PPUSH
21428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21429: LD_ADDR_VAR 0 2
21433: PUSH
21434: LD_INT 22
21436: PUSH
21437: LD_OWVAR 2
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 32
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 21
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: PPUSH
21471: CALL_OW 69
21475: ST_TO_ADDR
// if not tmp then
21476: LD_VAR 0 2
21480: NOT
21481: IFFALSE 21485
// exit ;
21483: GO 21514
// for i in tmp do
21485: LD_ADDR_VAR 0 1
21489: PUSH
21490: LD_VAR 0 2
21494: PUSH
21495: FOR_IN
21496: IFFALSE 21512
// SetFuel ( i , 0 ) ;
21498: LD_VAR 0 1
21502: PPUSH
21503: LD_INT 0
21505: PPUSH
21506: CALL_OW 240
21510: GO 21495
21512: POP
21513: POP
// end ;
21514: PPOPN 2
21516: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21517: LD_EXP 22
21521: IFFALSE 21529
21523: PUSH
21524: LD_EXP 58
21528: AND
21529: IFFALSE 21595
21531: GO 21533
21533: DISABLE
21534: LD_INT 0
21536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21537: LD_ADDR_VAR 0 1
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_OWVAR 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 30
21556: PUSH
21557: LD_INT 29
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PPUSH
21568: CALL_OW 69
21572: ST_TO_ADDR
// if not tmp then
21573: LD_VAR 0 1
21577: NOT
21578: IFFALSE 21582
// exit ;
21580: GO 21595
// DestroyUnit ( tmp [ 1 ] ) ;
21582: LD_VAR 0 1
21586: PUSH
21587: LD_INT 1
21589: ARRAY
21590: PPUSH
21591: CALL_OW 65
// end ;
21595: PPOPN 1
21597: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21598: LD_EXP 22
21602: IFFALSE 21610
21604: PUSH
21605: LD_EXP 60
21609: AND
21610: IFFALSE 21739
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
// begin uc_side := 0 ;
21618: LD_ADDR_OWVAR 20
21622: PUSH
21623: LD_INT 0
21625: ST_TO_ADDR
// uc_nation := nation_arabian ;
21626: LD_ADDR_OWVAR 21
21630: PUSH
21631: LD_INT 2
21633: ST_TO_ADDR
// hc_gallery :=  ;
21634: LD_ADDR_OWVAR 33
21638: PUSH
21639: LD_STRING 
21641: ST_TO_ADDR
// hc_name :=  ;
21642: LD_ADDR_OWVAR 26
21646: PUSH
21647: LD_STRING 
21649: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21650: LD_INT 1
21652: PPUSH
21653: LD_INT 11
21655: PPUSH
21656: LD_INT 10
21658: PPUSH
21659: CALL_OW 380
// un := CreateHuman ;
21663: LD_ADDR_VAR 0 1
21667: PUSH
21668: CALL_OW 44
21672: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21673: LD_VAR 0 1
21677: PPUSH
21678: LD_INT 1
21680: PPUSH
21681: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21685: LD_INT 35
21687: PPUSH
21688: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PPUSH
21709: CALL_OW 69
21713: PPUSH
21714: LD_VAR 0 1
21718: PPUSH
21719: CALL_OW 74
21723: PPUSH
21724: CALL_OW 115
// until IsDead ( un ) ;
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 301
21737: IFFALSE 21685
// end ;
21739: PPOPN 1
21741: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21742: LD_EXP 22
21746: IFFALSE 21754
21748: PUSH
21749: LD_EXP 62
21753: AND
21754: IFFALSE 21766
21756: GO 21758
21758: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21759: LD_STRING earthquake(getX(game), 0, 32)
21761: PPUSH
21762: CALL_OW 559
21766: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21767: LD_EXP 22
21771: IFFALSE 21779
21773: PUSH
21774: LD_EXP 63
21778: AND
21779: IFFALSE 21870
21781: GO 21783
21783: DISABLE
21784: LD_INT 0
21786: PPUSH
// begin enable ;
21787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 33
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: ST_TO_ADDR
// if not tmp then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 21870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21844: LD_VAR 0 1
21848: PUSH
21849: LD_INT 1
21851: PPUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 12
21861: ARRAY
21862: PPUSH
21863: LD_INT 1
21865: PPUSH
21866: CALL_OW 234
// end ;
21870: PPOPN 1
21872: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21873: LD_EXP 22
21877: IFFALSE 21885
21879: PUSH
21880: LD_EXP 64
21884: AND
21885: IFFALSE 22026
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
21894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_INT 22
21902: PUSH
21903: LD_OWVAR 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 25
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 3
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 22026
// un := tmp [ rand ( 1 , tmp ) ] ;
21940: LD_ADDR_VAR 0 2
21944: PUSH
21945: LD_VAR 0 3
21949: PUSH
21950: LD_INT 1
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: CALL_OW 12
21962: ARRAY
21963: ST_TO_ADDR
// if Crawls ( un ) then
21964: LD_VAR 0 2
21968: PPUSH
21969: CALL_OW 318
21973: IFFALSE 21984
// ComWalk ( un ) ;
21975: LD_VAR 0 2
21979: PPUSH
21980: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_INT 9
21991: PPUSH
21992: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21996: LD_INT 28
21998: PPUSH
21999: LD_OWVAR 2
22003: PPUSH
22004: LD_INT 2
22006: PPUSH
22007: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22011: LD_INT 29
22013: PPUSH
22014: LD_OWVAR 2
22018: PPUSH
22019: LD_INT 2
22021: PPUSH
22022: CALL_OW 322
// end ;
22026: PPOPN 3
22028: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22029: LD_EXP 22
22033: IFFALSE 22041
22035: PUSH
22036: LD_EXP 65
22040: AND
22041: IFFALSE 22152
22043: GO 22045
22045: DISABLE
22046: LD_INT 0
22048: PPUSH
22049: PPUSH
22050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22051: LD_ADDR_VAR 0 3
22055: PUSH
22056: LD_INT 22
22058: PUSH
22059: LD_OWVAR 2
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 25
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PPUSH
22082: CALL_OW 69
22086: ST_TO_ADDR
// if not tmp then
22087: LD_VAR 0 3
22091: NOT
22092: IFFALSE 22096
// exit ;
22094: GO 22152
// un := tmp [ rand ( 1 , tmp ) ] ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_VAR 0 3
22105: PUSH
22106: LD_INT 1
22108: PPUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 12
22118: ARRAY
22119: ST_TO_ADDR
// if Crawls ( un ) then
22120: LD_VAR 0 2
22124: PPUSH
22125: CALL_OW 318
22129: IFFALSE 22140
// ComWalk ( un ) ;
22131: LD_VAR 0 2
22135: PPUSH
22136: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22140: LD_VAR 0 2
22144: PPUSH
22145: LD_INT 8
22147: PPUSH
22148: CALL_OW 336
// end ;
22152: PPOPN 3
22154: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22155: LD_EXP 22
22159: IFFALSE 22167
22161: PUSH
22162: LD_EXP 66
22166: AND
22167: IFFALSE 22311
22169: GO 22171
22171: DISABLE
22172: LD_INT 0
22174: PPUSH
22175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_INT 22
22183: PUSH
22184: LD_OWVAR 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 21
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 34
22208: PUSH
22209: LD_INT 12
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 34
22218: PUSH
22219: LD_INT 51
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 34
22228: PUSH
22229: LD_INT 32
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 69
22251: ST_TO_ADDR
// if not tmp then
22252: LD_VAR 0 2
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22311
// for i in tmp do
22261: LD_ADDR_VAR 0 1
22265: PUSH
22266: LD_VAR 0 2
22270: PUSH
22271: FOR_IN
22272: IFFALSE 22309
// if GetCargo ( i , mat_artifact ) = 0 then
22274: LD_VAR 0 1
22278: PPUSH
22279: LD_INT 4
22281: PPUSH
22282: CALL_OW 289
22286: PUSH
22287: LD_INT 0
22289: EQUAL
22290: IFFALSE 22307
// SetCargo ( i , mat_siberit , 100 ) ;
22292: LD_VAR 0 1
22296: PPUSH
22297: LD_INT 3
22299: PPUSH
22300: LD_INT 100
22302: PPUSH
22303: CALL_OW 290
22307: GO 22271
22309: POP
22310: POP
// end ;
22311: PPOPN 2
22313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22314: LD_EXP 22
22318: IFFALSE 22326
22320: PUSH
22321: LD_EXP 67
22325: AND
22326: IFFALSE 22509
22328: GO 22330
22330: DISABLE
22331: LD_INT 0
22333: PPUSH
22334: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22335: LD_ADDR_VAR 0 2
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_OWVAR 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 2
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22509
// for i := 1 to 2 do
22366: LD_ADDR_VAR 0 1
22370: PUSH
22371: DOUBLE
22372: LD_INT 1
22374: DEC
22375: ST_TO_ADDR
22376: LD_INT 2
22378: PUSH
22379: FOR_TO
22380: IFFALSE 22507
// begin uc_side := your_side ;
22382: LD_ADDR_OWVAR 20
22386: PUSH
22387: LD_OWVAR 2
22391: ST_TO_ADDR
// uc_nation := nation_american ;
22392: LD_ADDR_OWVAR 21
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// vc_chassis := us_morphling ;
22400: LD_ADDR_OWVAR 37
22404: PUSH
22405: LD_INT 5
22407: ST_TO_ADDR
// vc_engine := engine_siberite ;
22408: LD_ADDR_OWVAR 39
22412: PUSH
22413: LD_INT 3
22415: ST_TO_ADDR
// vc_control := control_computer ;
22416: LD_ADDR_OWVAR 38
22420: PUSH
22421: LD_INT 3
22423: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22424: LD_ADDR_OWVAR 40
22428: PUSH
22429: LD_INT 10
22431: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22432: LD_VAR 0 2
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: CALL_OW 310
22445: NOT
22446: IFFALSE 22493
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22448: CALL_OW 45
22452: PPUSH
22453: LD_VAR 0 2
22457: PUSH
22458: LD_INT 1
22460: ARRAY
22461: PPUSH
22462: CALL_OW 250
22466: PPUSH
22467: LD_VAR 0 2
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: CALL_OW 251
22480: PPUSH
22481: LD_INT 12
22483: PPUSH
22484: LD_INT 1
22486: PPUSH
22487: CALL_OW 50
22491: GO 22505
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22493: CALL_OW 45
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 51
// end ;
22505: GO 22379
22507: POP
22508: POP
// end ;
22509: PPOPN 2
22511: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22512: LD_EXP 22
22516: IFFALSE 22524
22518: PUSH
22519: LD_EXP 68
22523: AND
22524: IFFALSE 22746
22526: GO 22528
22528: DISABLE
22529: LD_INT 0
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
22535: PPUSH
22536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22537: LD_ADDR_VAR 0 6
22541: PUSH
22542: LD_INT 22
22544: PUSH
22545: LD_OWVAR 2
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 21
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 3
22566: PUSH
22567: LD_INT 23
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: PPUSH
22586: CALL_OW 69
22590: ST_TO_ADDR
// if not tmp then
22591: LD_VAR 0 6
22595: NOT
22596: IFFALSE 22600
// exit ;
22598: GO 22746
// s1 := rand ( 1 , 4 ) ;
22600: LD_ADDR_VAR 0 2
22604: PUSH
22605: LD_INT 1
22607: PPUSH
22608: LD_INT 4
22610: PPUSH
22611: CALL_OW 12
22615: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22616: LD_ADDR_VAR 0 4
22620: PUSH
22621: LD_VAR 0 6
22625: PUSH
22626: LD_INT 1
22628: ARRAY
22629: PPUSH
22630: LD_VAR 0 2
22634: PPUSH
22635: CALL_OW 259
22639: ST_TO_ADDR
// if s1 = 1 then
22640: LD_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: EQUAL
22648: IFFALSE 22668
// s2 := rand ( 2 , 4 ) else
22650: LD_ADDR_VAR 0 3
22654: PUSH
22655: LD_INT 2
22657: PPUSH
22658: LD_INT 4
22660: PPUSH
22661: CALL_OW 12
22665: ST_TO_ADDR
22666: GO 22676
// s2 := 1 ;
22668: LD_ADDR_VAR 0 3
22672: PUSH
22673: LD_INT 1
22675: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22676: LD_ADDR_VAR 0 5
22680: PUSH
22681: LD_VAR 0 6
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: PPUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: CALL_OW 259
22699: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22700: LD_VAR 0 6
22704: PUSH
22705: LD_INT 1
22707: ARRAY
22708: PPUSH
22709: LD_VAR 0 2
22713: PPUSH
22714: LD_VAR 0 5
22718: PPUSH
22719: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22723: LD_VAR 0 6
22727: PUSH
22728: LD_INT 1
22730: ARRAY
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_VAR 0 4
22741: PPUSH
22742: CALL_OW 237
// end ;
22746: PPOPN 6
22748: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22749: LD_EXP 22
22753: IFFALSE 22761
22755: PUSH
22756: LD_EXP 69
22760: AND
22761: IFFALSE 22840
22763: GO 22765
22765: DISABLE
22766: LD_INT 0
22768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22769: LD_ADDR_VAR 0 1
22773: PUSH
22774: LD_INT 22
22776: PUSH
22777: LD_OWVAR 2
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 30
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PPUSH
22800: CALL_OW 69
22804: ST_TO_ADDR
// if not tmp then
22805: LD_VAR 0 1
22809: NOT
22810: IFFALSE 22814
// exit ;
22812: GO 22840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22814: LD_VAR 0 1
22818: PUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 12
22831: ARRAY
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 234
// end ;
22840: PPOPN 1
22842: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22843: LD_EXP 22
22847: IFFALSE 22855
22849: PUSH
22850: LD_EXP 70
22854: AND
22855: IFFALSE 22967
22857: GO 22859
22859: DISABLE
22860: LD_INT 0
22862: PPUSH
22863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_INT 22
22871: PUSH
22872: LD_OWVAR 2
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: LD_INT 30
22886: PUSH
22887: LD_INT 27
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 30
22896: PUSH
22897: LD_INT 26
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 30
22906: PUSH
22907: LD_INT 28
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL_OW 69
22928: ST_TO_ADDR
// if not tmp then
22929: LD_VAR 0 2
22933: NOT
22934: IFFALSE 22938
// exit ;
22936: GO 22967
// for i in tmp do
22938: LD_ADDR_VAR 0 1
22942: PUSH
22943: LD_VAR 0 2
22947: PUSH
22948: FOR_IN
22949: IFFALSE 22965
// SetLives ( i , 1 ) ;
22951: LD_VAR 0 1
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: CALL_OW 234
22963: GO 22948
22965: POP
22966: POP
// end ;
22967: PPOPN 2
22969: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22970: LD_EXP 22
22974: IFFALSE 22982
22976: PUSH
22977: LD_EXP 71
22981: AND
22982: IFFALSE 23269
22984: GO 22986
22986: DISABLE
22987: LD_INT 0
22989: PPUSH
22990: PPUSH
22991: PPUSH
// begin i := rand ( 1 , 7 ) ;
22992: LD_ADDR_VAR 0 1
22996: PUSH
22997: LD_INT 1
22999: PPUSH
23000: LD_INT 7
23002: PPUSH
23003: CALL_OW 12
23007: ST_TO_ADDR
// case i of 1 :
23008: LD_VAR 0 1
23012: PUSH
23013: LD_INT 1
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23031
23021: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23022: LD_STRING earthquake(getX(game), 0, 32)
23024: PPUSH
23025: CALL_OW 559
23029: GO 23269
23031: LD_INT 2
23033: DOUBLE
23034: EQUAL
23035: IFTRUE 23039
23037: GO 23053
23039: POP
// begin ToLua ( displayStucuk(); ) ;
23040: LD_STRING displayStucuk();
23042: PPUSH
23043: CALL_OW 559
// ResetFog ;
23047: CALL_OW 335
// end ; 3 :
23051: GO 23269
23053: LD_INT 3
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23165
23061: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23062: LD_ADDR_VAR 0 2
23066: PUSH
23067: LD_INT 22
23069: PUSH
23070: LD_OWVAR 2
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 25
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PPUSH
23093: CALL_OW 69
23097: ST_TO_ADDR
// if not tmp then
23098: LD_VAR 0 2
23102: NOT
23103: IFFALSE 23107
// exit ;
23105: GO 23269
// un := tmp [ rand ( 1 , tmp ) ] ;
23107: LD_ADDR_VAR 0 3
23111: PUSH
23112: LD_VAR 0 2
23116: PUSH
23117: LD_INT 1
23119: PPUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: CALL_OW 12
23129: ARRAY
23130: ST_TO_ADDR
// if Crawls ( un ) then
23131: LD_VAR 0 3
23135: PPUSH
23136: CALL_OW 318
23140: IFFALSE 23151
// ComWalk ( un ) ;
23142: LD_VAR 0 3
23146: PPUSH
23147: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23151: LD_VAR 0 3
23155: PPUSH
23156: LD_INT 8
23158: PPUSH
23159: CALL_OW 336
// end ; 4 :
23163: GO 23269
23165: LD_INT 4
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23247
23173: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 30
23193: PUSH
23194: LD_INT 29
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 69
23209: ST_TO_ADDR
// if not tmp then
23210: LD_VAR 0 2
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23269
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23219: LD_VAR 0 2
23223: PUSH
23224: LD_INT 1
23226: ARRAY
23227: PPUSH
23228: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23232: LD_VAR 0 2
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PPUSH
23241: CALL_OW 65
// end ; 5 .. 7 :
23245: GO 23269
23247: LD_INT 5
23249: DOUBLE
23250: GREATEREQUAL
23251: IFFALSE 23259
23253: LD_INT 7
23255: DOUBLE
23256: LESSEQUAL
23257: IFTRUE 23261
23259: GO 23268
23261: POP
// StreamSibBomb ; end ;
23262: CALL 19450 0 0
23266: GO 23269
23268: POP
// end ;
23269: PPOPN 3
23271: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23272: LD_EXP 22
23276: IFFALSE 23284
23278: PUSH
23279: LD_EXP 72
23283: AND
23284: IFFALSE 23440
23286: GO 23288
23288: DISABLE
23289: LD_INT 0
23291: PPUSH
23292: PPUSH
23293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 81
23301: PUSH
23302: LD_OWVAR 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PPUSH
23343: CALL_OW 69
23347: ST_TO_ADDR
// if not tmp then
23348: LD_VAR 0 2
23352: NOT
23353: IFFALSE 23357
// exit ;
23355: GO 23440
// p := 0 ;
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 0
23364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23365: LD_INT 35
23367: PPUSH
23368: CALL_OW 67
// p := p + 1 ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_VAR 0 3
23381: PUSH
23382: LD_INT 1
23384: PLUS
23385: ST_TO_ADDR
// for i in tmp do
23386: LD_ADDR_VAR 0 1
23390: PUSH
23391: LD_VAR 0 2
23395: PUSH
23396: FOR_IN
23397: IFFALSE 23428
// if GetLives ( i ) < 1000 then
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 256
23408: PUSH
23409: LD_INT 1000
23411: LESS
23412: IFFALSE 23426
// SetLives ( i , 1000 ) ;
23414: LD_VAR 0 1
23418: PPUSH
23419: LD_INT 1000
23421: PPUSH
23422: CALL_OW 234
23426: GO 23396
23428: POP
23429: POP
// until p > 20 ;
23430: LD_VAR 0 3
23434: PUSH
23435: LD_INT 20
23437: GREATER
23438: IFFALSE 23365
// end ;
23440: PPOPN 3
23442: END
// every 0 0$1 trigger StreamModeActive and sTime do
23443: LD_EXP 22
23447: IFFALSE 23455
23449: PUSH
23450: LD_EXP 73
23454: AND
23455: IFFALSE 23490
23457: GO 23459
23459: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23460: LD_INT 28
23462: PPUSH
23463: LD_OWVAR 2
23467: PPUSH
23468: LD_INT 2
23470: PPUSH
23471: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23475: LD_INT 30
23477: PPUSH
23478: LD_OWVAR 2
23482: PPUSH
23483: LD_INT 2
23485: PPUSH
23486: CALL_OW 322
// end ;
23490: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23491: LD_EXP 22
23495: IFFALSE 23503
23497: PUSH
23498: LD_EXP 74
23502: AND
23503: IFFALSE 23624
23505: GO 23507
23507: DISABLE
23508: LD_INT 0
23510: PPUSH
23511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_INT 22
23519: PUSH
23520: LD_OWVAR 2
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 3
23541: PUSH
23542: LD_INT 23
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: PPUSH
23561: CALL_OW 69
23565: ST_TO_ADDR
// if not tmp then
23566: LD_VAR 0 2
23570: NOT
23571: IFFALSE 23575
// exit ;
23573: GO 23624
// for i in tmp do
23575: LD_ADDR_VAR 0 1
23579: PUSH
23580: LD_VAR 0 2
23584: PUSH
23585: FOR_IN
23586: IFFALSE 23622
// begin if Crawls ( i ) then
23588: LD_VAR 0 1
23592: PPUSH
23593: CALL_OW 318
23597: IFFALSE 23608
// ComWalk ( i ) ;
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 138
// SetClass ( i , 2 ) ;
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_INT 2
23615: PPUSH
23616: CALL_OW 336
// end ;
23620: GO 23585
23622: POP
23623: POP
// end ;
23624: PPOPN 2
23626: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23627: LD_EXP 22
23631: IFFALSE 23639
23633: PUSH
23634: LD_EXP 75
23638: AND
23639: IFFALSE 23929
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23649: LD_OWVAR 2
23653: PPUSH
23654: LD_INT 9
23656: PPUSH
23657: LD_INT 1
23659: PPUSH
23660: LD_INT 1
23662: PPUSH
23663: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23667: LD_INT 9
23669: PPUSH
23670: LD_OWVAR 2
23674: PPUSH
23675: CALL_OW 343
// uc_side := 9 ;
23679: LD_ADDR_OWVAR 20
23683: PUSH
23684: LD_INT 9
23686: ST_TO_ADDR
// uc_nation := 2 ;
23687: LD_ADDR_OWVAR 21
23691: PUSH
23692: LD_INT 2
23694: ST_TO_ADDR
// hc_name := Dark Warrior ;
23695: LD_ADDR_OWVAR 26
23699: PUSH
23700: LD_STRING Dark Warrior
23702: ST_TO_ADDR
// hc_gallery :=  ;
23703: LD_ADDR_OWVAR 33
23707: PUSH
23708: LD_STRING 
23710: ST_TO_ADDR
// hc_noskilllimit := true ;
23711: LD_ADDR_OWVAR 76
23715: PUSH
23716: LD_INT 1
23718: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23719: LD_ADDR_OWVAR 31
23723: PUSH
23724: LD_INT 30
23726: PUSH
23727: LD_INT 30
23729: PUSH
23730: LD_INT 30
23732: PUSH
23733: LD_INT 30
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// un := CreateHuman ;
23742: LD_ADDR_VAR 0 3
23746: PUSH
23747: CALL_OW 44
23751: ST_TO_ADDR
// hc_noskilllimit := false ;
23752: LD_ADDR_OWVAR 76
23756: PUSH
23757: LD_INT 0
23759: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23760: LD_VAR 0 3
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: CALL_OW 51
// ToLua ( playRanger() ) ;
23772: LD_STRING playRanger()
23774: PPUSH
23775: CALL_OW 559
// p := 0 ;
23779: LD_ADDR_VAR 0 2
23783: PUSH
23784: LD_INT 0
23786: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23787: LD_INT 35
23789: PPUSH
23790: CALL_OW 67
// p := p + 1 ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_VAR 0 2
23803: PUSH
23804: LD_INT 1
23806: PLUS
23807: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23808: LD_VAR 0 3
23812: PPUSH
23813: CALL_OW 256
23817: PUSH
23818: LD_INT 1000
23820: LESS
23821: IFFALSE 23835
// SetLives ( un , 1000 ) ;
23823: LD_VAR 0 3
23827: PPUSH
23828: LD_INT 1000
23830: PPUSH
23831: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23835: LD_VAR 0 3
23839: PPUSH
23840: LD_INT 81
23842: PUSH
23843: LD_OWVAR 2
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 91
23854: PUSH
23855: LD_VAR 0 3
23859: PUSH
23860: LD_INT 30
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 69
23876: PPUSH
23877: LD_VAR 0 3
23881: PPUSH
23882: CALL_OW 74
23886: PPUSH
23887: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23891: LD_VAR 0 2
23895: PUSH
23896: LD_INT 80
23898: GREATER
23899: IFTRUE 23912
23901: PUSH
23902: LD_VAR 0 3
23906: PPUSH
23907: CALL_OW 301
23911: OR
23912: IFFALSE 23787
// if un then
23914: LD_VAR 0 3
23918: IFFALSE 23929
// RemoveUnit ( un ) ;
23920: LD_VAR 0 3
23924: PPUSH
23925: CALL_OW 64
// end ;
23929: PPOPN 3
23931: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23932: LD_EXP 76
23936: IFFALSE 24052
23938: GO 23940
23940: DISABLE
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
23945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23946: LD_ADDR_VAR 0 2
23950: PUSH
23951: LD_INT 81
23953: PUSH
23954: LD_OWVAR 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 21
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PPUSH
23977: CALL_OW 69
23981: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23982: LD_STRING playComputer()
23984: PPUSH
23985: CALL_OW 559
// if not tmp then
23989: LD_VAR 0 2
23993: NOT
23994: IFFALSE 23998
// exit ;
23996: GO 24052
// for i in tmp do
23998: LD_ADDR_VAR 0 1
24002: PUSH
24003: LD_VAR 0 2
24007: PUSH
24008: FOR_IN
24009: IFFALSE 24050
// for j := 1 to 4 do
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: DOUBLE
24017: LD_INT 1
24019: DEC
24020: ST_TO_ADDR
24021: LD_INT 4
24023: PUSH
24024: FOR_TO
24025: IFFALSE 24046
// SetSkill ( i , j , 10 ) ;
24027: LD_VAR 0 1
24031: PPUSH
24032: LD_VAR 0 3
24036: PPUSH
24037: LD_INT 10
24039: PPUSH
24040: CALL_OW 237
24044: GO 24024
24046: POP
24047: POP
24048: GO 24008
24050: POP
24051: POP
// end ;
24052: PPOPN 3
24054: END
// every 0 0$1 trigger s30 do var i , tmp ;
24055: LD_EXP 77
24059: IFFALSE 24128
24061: GO 24063
24063: DISABLE
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 22
24075: PUSH
24076: LD_OWVAR 2
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PPUSH
24085: CALL_OW 69
24089: ST_TO_ADDR
// if not tmp then
24090: LD_VAR 0 2
24094: NOT
24095: IFFALSE 24099
// exit ;
24097: GO 24128
// for i in tmp do
24099: LD_ADDR_VAR 0 1
24103: PUSH
24104: LD_VAR 0 2
24108: PUSH
24109: FOR_IN
24110: IFFALSE 24126
// SetLives ( i , 300 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 300
24119: PPUSH
24120: CALL_OW 234
24124: GO 24109
24126: POP
24127: POP
// end ;
24128: PPOPN 2
24130: END
// every 0 0$1 trigger s60 do var i , tmp ;
24131: LD_EXP 78
24135: IFFALSE 24204
24137: GO 24139
24139: DISABLE
24140: LD_INT 0
24142: PPUSH
24143: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24144: LD_ADDR_VAR 0 2
24148: PUSH
24149: LD_INT 22
24151: PUSH
24152: LD_OWVAR 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 69
24165: ST_TO_ADDR
// if not tmp then
24166: LD_VAR 0 2
24170: NOT
24171: IFFALSE 24175
// exit ;
24173: GO 24204
// for i in tmp do
24175: LD_ADDR_VAR 0 1
24179: PUSH
24180: LD_VAR 0 2
24184: PUSH
24185: FOR_IN
24186: IFFALSE 24202
// SetLives ( i , 600 ) ;
24188: LD_VAR 0 1
24192: PPUSH
24193: LD_INT 600
24195: PPUSH
24196: CALL_OW 234
24200: GO 24185
24202: POP
24203: POP
// end ;
24204: PPOPN 2
24206: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24207: LD_INT 0
24209: PPUSH
// case cmd of 301 :
24210: LD_VAR 0 1
24214: PUSH
24215: LD_INT 301
24217: DOUBLE
24218: EQUAL
24219: IFTRUE 24223
24221: GO 24255
24223: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24224: LD_VAR 0 6
24228: PPUSH
24229: LD_VAR 0 7
24233: PPUSH
24234: LD_VAR 0 8
24238: PPUSH
24239: LD_VAR 0 4
24243: PPUSH
24244: LD_VAR 0 5
24248: PPUSH
24249: CALL 25468 0 5
24253: GO 24376
24255: LD_INT 302
24257: DOUBLE
24258: EQUAL
24259: IFTRUE 24263
24261: GO 24300
24263: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24264: LD_VAR 0 6
24268: PPUSH
24269: LD_VAR 0 7
24273: PPUSH
24274: LD_VAR 0 8
24278: PPUSH
24279: LD_VAR 0 9
24283: PPUSH
24284: LD_VAR 0 4
24288: PPUSH
24289: LD_VAR 0 5
24293: PPUSH
24294: CALL 25559 0 6
24298: GO 24376
24300: LD_INT 303
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24345
24308: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24309: LD_VAR 0 6
24313: PPUSH
24314: LD_VAR 0 7
24318: PPUSH
24319: LD_VAR 0 8
24323: PPUSH
24324: LD_VAR 0 9
24328: PPUSH
24329: LD_VAR 0 4
24333: PPUSH
24334: LD_VAR 0 5
24338: PPUSH
24339: CALL 24381 0 6
24343: GO 24376
24345: LD_INT 304
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24375
24353: POP
// hHackTeleport ( unit , x , y ) ; end ;
24354: LD_VAR 0 2
24358: PPUSH
24359: LD_VAR 0 4
24363: PPUSH
24364: LD_VAR 0 5
24368: PPUSH
24369: CALL 26152 0 3
24373: GO 24376
24375: POP
// end ;
24376: LD_VAR 0 12
24380: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24385: LD_VAR 0 1
24389: PUSH
24390: LD_INT 1
24392: LESS
24393: IFTRUE 24405
24395: PUSH
24396: LD_VAR 0 1
24400: PUSH
24401: LD_INT 3
24403: GREATER
24404: OR
24405: IFTRUE 24423
24407: PUSH
24408: LD_VAR 0 5
24412: PPUSH
24413: LD_VAR 0 6
24417: PPUSH
24418: CALL_OW 428
24422: OR
24423: IFFALSE 24427
// exit ;
24425: GO 25155
// uc_side := your_side ;
24427: LD_ADDR_OWVAR 20
24431: PUSH
24432: LD_OWVAR 2
24436: ST_TO_ADDR
// uc_nation := nation ;
24437: LD_ADDR_OWVAR 21
24441: PUSH
24442: LD_VAR 0 1
24446: ST_TO_ADDR
// bc_level = 1 ;
24447: LD_ADDR_OWVAR 43
24451: PUSH
24452: LD_INT 1
24454: ST_TO_ADDR
// case btype of 1 :
24455: LD_VAR 0 2
24459: PUSH
24460: LD_INT 1
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24479
24468: POP
// bc_type := b_depot ; 2 :
24469: LD_ADDR_OWVAR 42
24473: PUSH
24474: LD_INT 0
24476: ST_TO_ADDR
24477: GO 25099
24479: LD_INT 2
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24487
24485: GO 24498
24487: POP
// bc_type := b_warehouse ; 3 :
24488: LD_ADDR_OWVAR 42
24492: PUSH
24493: LD_INT 1
24495: ST_TO_ADDR
24496: GO 25099
24498: LD_INT 3
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24506
24504: GO 24517
24506: POP
// bc_type := b_lab ; 4 .. 9 :
24507: LD_ADDR_OWVAR 42
24511: PUSH
24512: LD_INT 6
24514: ST_TO_ADDR
24515: GO 25099
24517: LD_INT 4
24519: DOUBLE
24520: GREATEREQUAL
24521: IFFALSE 24529
24523: LD_INT 9
24525: DOUBLE
24526: LESSEQUAL
24527: IFTRUE 24531
24529: GO 24591
24531: POP
// begin bc_type := b_lab_half ;
24532: LD_ADDR_OWVAR 42
24536: PUSH
24537: LD_INT 7
24539: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24540: LD_ADDR_OWVAR 44
24544: PUSH
24545: LD_INT 10
24547: PUSH
24548: LD_INT 11
24550: PUSH
24551: LD_INT 12
24553: PUSH
24554: LD_INT 15
24556: PUSH
24557: LD_INT 14
24559: PUSH
24560: LD_INT 13
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: PUSH
24571: LD_VAR 0 2
24575: PUSH
24576: LD_INT 3
24578: MINUS
24579: ARRAY
24580: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24581: LD_ADDR_OWVAR 45
24585: PUSH
24586: LD_INT 9
24588: ST_TO_ADDR
// end ; 10 .. 13 :
24589: GO 25099
24591: LD_INT 10
24593: DOUBLE
24594: GREATEREQUAL
24595: IFFALSE 24603
24597: LD_INT 13
24599: DOUBLE
24600: LESSEQUAL
24601: IFTRUE 24605
24603: GO 24682
24605: POP
// begin bc_type := b_lab_full ;
24606: LD_ADDR_OWVAR 42
24610: PUSH
24611: LD_INT 8
24613: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24614: LD_ADDR_OWVAR 44
24618: PUSH
24619: LD_INT 10
24621: PUSH
24622: LD_INT 12
24624: PUSH
24625: LD_INT 14
24627: PUSH
24628: LD_INT 13
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: PUSH
24637: LD_VAR 0 2
24641: PUSH
24642: LD_INT 9
24644: MINUS
24645: ARRAY
24646: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24647: LD_ADDR_OWVAR 45
24651: PUSH
24652: LD_INT 11
24654: PUSH
24655: LD_INT 15
24657: PUSH
24658: LD_INT 12
24660: PUSH
24661: LD_INT 15
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: LD_VAR 0 2
24674: PUSH
24675: LD_INT 9
24677: MINUS
24678: ARRAY
24679: ST_TO_ADDR
// end ; 14 :
24680: GO 25099
24682: LD_INT 14
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24701
24690: POP
// bc_type := b_workshop ; 15 :
24691: LD_ADDR_OWVAR 42
24695: PUSH
24696: LD_INT 2
24698: ST_TO_ADDR
24699: GO 25099
24701: LD_INT 15
24703: DOUBLE
24704: EQUAL
24705: IFTRUE 24709
24707: GO 24720
24709: POP
// bc_type := b_factory ; 16 :
24710: LD_ADDR_OWVAR 42
24714: PUSH
24715: LD_INT 3
24717: ST_TO_ADDR
24718: GO 25099
24720: LD_INT 16
24722: DOUBLE
24723: EQUAL
24724: IFTRUE 24728
24726: GO 24739
24728: POP
// bc_type := b_ext_gun ; 17 :
24729: LD_ADDR_OWVAR 42
24733: PUSH
24734: LD_INT 17
24736: ST_TO_ADDR
24737: GO 25099
24739: LD_INT 17
24741: DOUBLE
24742: EQUAL
24743: IFTRUE 24747
24745: GO 24775
24747: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24748: LD_ADDR_OWVAR 42
24752: PUSH
24753: LD_INT 19
24755: PUSH
24756: LD_INT 23
24758: PUSH
24759: LD_INT 19
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: LIST
24766: PUSH
24767: LD_VAR 0 1
24771: ARRAY
24772: ST_TO_ADDR
24773: GO 25099
24775: LD_INT 18
24777: DOUBLE
24778: EQUAL
24779: IFTRUE 24783
24781: GO 24794
24783: POP
// bc_type := b_ext_radar ; 19 :
24784: LD_ADDR_OWVAR 42
24788: PUSH
24789: LD_INT 20
24791: ST_TO_ADDR
24792: GO 25099
24794: LD_INT 19
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 24813
24802: POP
// bc_type := b_ext_radio ; 20 :
24803: LD_ADDR_OWVAR 42
24807: PUSH
24808: LD_INT 22
24810: ST_TO_ADDR
24811: GO 25099
24813: LD_INT 20
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24832
24821: POP
// bc_type := b_ext_siberium ; 21 :
24822: LD_ADDR_OWVAR 42
24826: PUSH
24827: LD_INT 21
24829: ST_TO_ADDR
24830: GO 25099
24832: LD_INT 21
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24851
24840: POP
// bc_type := b_ext_computer ; 22 :
24841: LD_ADDR_OWVAR 42
24845: PUSH
24846: LD_INT 24
24848: ST_TO_ADDR
24849: GO 25099
24851: LD_INT 22
24853: DOUBLE
24854: EQUAL
24855: IFTRUE 24859
24857: GO 24870
24859: POP
// bc_type := b_ext_track ; 23 :
24860: LD_ADDR_OWVAR 42
24864: PUSH
24865: LD_INT 16
24867: ST_TO_ADDR
24868: GO 25099
24870: LD_INT 23
24872: DOUBLE
24873: EQUAL
24874: IFTRUE 24878
24876: GO 24889
24878: POP
// bc_type := b_ext_laser ; 24 :
24879: LD_ADDR_OWVAR 42
24883: PUSH
24884: LD_INT 25
24886: ST_TO_ADDR
24887: GO 25099
24889: LD_INT 24
24891: DOUBLE
24892: EQUAL
24893: IFTRUE 24897
24895: GO 24908
24897: POP
// bc_type := b_control_tower ; 25 :
24898: LD_ADDR_OWVAR 42
24902: PUSH
24903: LD_INT 36
24905: ST_TO_ADDR
24906: GO 25099
24908: LD_INT 25
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 24927
24916: POP
// bc_type := b_breastwork ; 26 :
24917: LD_ADDR_OWVAR 42
24921: PUSH
24922: LD_INT 31
24924: ST_TO_ADDR
24925: GO 25099
24927: LD_INT 26
24929: DOUBLE
24930: EQUAL
24931: IFTRUE 24935
24933: GO 24946
24935: POP
// bc_type := b_bunker ; 27 :
24936: LD_ADDR_OWVAR 42
24940: PUSH
24941: LD_INT 32
24943: ST_TO_ADDR
24944: GO 25099
24946: LD_INT 27
24948: DOUBLE
24949: EQUAL
24950: IFTRUE 24954
24952: GO 24965
24954: POP
// bc_type := b_turret ; 28 :
24955: LD_ADDR_OWVAR 42
24959: PUSH
24960: LD_INT 33
24962: ST_TO_ADDR
24963: GO 25099
24965: LD_INT 28
24967: DOUBLE
24968: EQUAL
24969: IFTRUE 24973
24971: GO 24984
24973: POP
// bc_type := b_armoury ; 29 :
24974: LD_ADDR_OWVAR 42
24978: PUSH
24979: LD_INT 4
24981: ST_TO_ADDR
24982: GO 25099
24984: LD_INT 29
24986: DOUBLE
24987: EQUAL
24988: IFTRUE 24992
24990: GO 25003
24992: POP
// bc_type := b_barracks ; 30 :
24993: LD_ADDR_OWVAR 42
24997: PUSH
24998: LD_INT 5
25000: ST_TO_ADDR
25001: GO 25099
25003: LD_INT 30
25005: DOUBLE
25006: EQUAL
25007: IFTRUE 25011
25009: GO 25022
25011: POP
// bc_type := b_solar_power ; 31 :
25012: LD_ADDR_OWVAR 42
25016: PUSH
25017: LD_INT 27
25019: ST_TO_ADDR
25020: GO 25099
25022: LD_INT 31
25024: DOUBLE
25025: EQUAL
25026: IFTRUE 25030
25028: GO 25041
25030: POP
// bc_type := b_oil_power ; 32 :
25031: LD_ADDR_OWVAR 42
25035: PUSH
25036: LD_INT 26
25038: ST_TO_ADDR
25039: GO 25099
25041: LD_INT 32
25043: DOUBLE
25044: EQUAL
25045: IFTRUE 25049
25047: GO 25060
25049: POP
// bc_type := b_siberite_power ; 33 :
25050: LD_ADDR_OWVAR 42
25054: PUSH
25055: LD_INT 28
25057: ST_TO_ADDR
25058: GO 25099
25060: LD_INT 33
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25079
25068: POP
// bc_type := b_oil_mine ; 34 :
25069: LD_ADDR_OWVAR 42
25073: PUSH
25074: LD_INT 29
25076: ST_TO_ADDR
25077: GO 25099
25079: LD_INT 34
25081: DOUBLE
25082: EQUAL
25083: IFTRUE 25087
25085: GO 25098
25087: POP
// bc_type := b_siberite_mine ; end ;
25088: LD_ADDR_OWVAR 42
25092: PUSH
25093: LD_INT 30
25095: ST_TO_ADDR
25096: GO 25099
25098: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25099: LD_ADDR_VAR 0 8
25103: PUSH
25104: LD_VAR 0 5
25108: PPUSH
25109: LD_VAR 0 6
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 47
25123: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25124: LD_OWVAR 42
25128: PUSH
25129: LD_INT 32
25131: PUSH
25132: LD_INT 33
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: IN
25139: IFFALSE 25155
// PlaceWeaponTurret ( b , weapon ) ;
25141: LD_VAR 0 8
25145: PPUSH
25146: LD_VAR 0 4
25150: PPUSH
25151: CALL_OW 431
// end ;
25155: LD_VAR 0 7
25159: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25160: LD_INT 0
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25166: LD_ADDR_VAR 0 4
25170: PUSH
25171: LD_INT 22
25173: PUSH
25174: LD_OWVAR 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: LD_INT 30
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 30
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: ST_TO_ADDR
// if not tmp then
25220: LD_VAR 0 4
25224: NOT
25225: IFFALSE 25229
// exit ;
25227: GO 25288
// for i in tmp do
25229: LD_ADDR_VAR 0 2
25233: PUSH
25234: LD_VAR 0 4
25238: PUSH
25239: FOR_IN
25240: IFFALSE 25286
// for j = 1 to 3 do
25242: LD_ADDR_VAR 0 3
25246: PUSH
25247: DOUBLE
25248: LD_INT 1
25250: DEC
25251: ST_TO_ADDR
25252: LD_INT 3
25254: PUSH
25255: FOR_TO
25256: IFFALSE 25282
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 274
25267: PPUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: LD_INT 99999
25275: PPUSH
25276: CALL_OW 277
25280: GO 25255
25282: POP
25283: POP
25284: GO 25239
25286: POP
25287: POP
// end ;
25288: LD_VAR 0 1
25292: RET
// export function hHackSetLevel10 ; var i , j ; begin
25293: LD_INT 0
25295: PPUSH
25296: PPUSH
25297: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25298: LD_ADDR_VAR 0 2
25302: PUSH
25303: LD_INT 21
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PPUSH
25313: CALL_OW 69
25317: PUSH
25318: FOR_IN
25319: IFFALSE 25371
// if IsSelected ( i ) then
25321: LD_VAR 0 2
25325: PPUSH
25326: CALL_OW 306
25330: IFFALSE 25369
// begin for j := 1 to 4 do
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: DOUBLE
25338: LD_INT 1
25340: DEC
25341: ST_TO_ADDR
25342: LD_INT 4
25344: PUSH
25345: FOR_TO
25346: IFFALSE 25367
// SetSkill ( i , j , 10 ) ;
25348: LD_VAR 0 2
25352: PPUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 10
25360: PPUSH
25361: CALL_OW 237
25365: GO 25345
25367: POP
25368: POP
// end ;
25369: GO 25318
25371: POP
25372: POP
// end ;
25373: LD_VAR 0 1
25377: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25383: LD_ADDR_VAR 0 2
25387: PUSH
25388: LD_INT 22
25390: PUSH
25391: LD_OWVAR 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 21
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 69
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25461
// begin for j := 1 to 4 do
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: DOUBLE
25428: LD_INT 1
25430: DEC
25431: ST_TO_ADDR
25432: LD_INT 4
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25457
// SetSkill ( i , j , 10 ) ;
25438: LD_VAR 0 2
25442: PPUSH
25443: LD_VAR 0 3
25447: PPUSH
25448: LD_INT 10
25450: PPUSH
25451: CALL_OW 237
25455: GO 25435
25457: POP
25458: POP
// end ;
25459: GO 25419
25461: POP
25462: POP
// end ;
25463: LD_VAR 0 1
25467: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25468: LD_INT 0
25470: PPUSH
// uc_side := your_side ;
25471: LD_ADDR_OWVAR 20
25475: PUSH
25476: LD_OWVAR 2
25480: ST_TO_ADDR
// uc_nation := nation ;
25481: LD_ADDR_OWVAR 21
25485: PUSH
25486: LD_VAR 0 1
25490: ST_TO_ADDR
// InitHc ;
25491: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25495: LD_INT 0
25497: PPUSH
25498: LD_VAR 0 2
25502: PPUSH
25503: LD_VAR 0 3
25507: PPUSH
25508: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25512: LD_VAR 0 4
25516: PPUSH
25517: LD_VAR 0 5
25521: PPUSH
25522: CALL_OW 428
25526: PUSH
25527: LD_INT 0
25529: EQUAL
25530: IFFALSE 25554
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25532: CALL_OW 44
25536: PPUSH
25537: LD_VAR 0 4
25541: PPUSH
25542: LD_VAR 0 5
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL_OW 48
// end ;
25554: LD_VAR 0 6
25558: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25559: LD_INT 0
25561: PPUSH
25562: PPUSH
// uc_side := your_side ;
25563: LD_ADDR_OWVAR 20
25567: PUSH
25568: LD_OWVAR 2
25572: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25573: LD_VAR 0 1
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 4
25589: PUSH
25590: LD_INT 5
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: IN
25600: IFFALSE 25612
// uc_nation := nation_american else
25602: LD_ADDR_OWVAR 21
25606: PUSH
25607: LD_INT 1
25609: ST_TO_ADDR
25610: GO 25655
// if chassis in [ 11 , 12 , 13 , 14 ] then
25612: LD_VAR 0 1
25616: PUSH
25617: LD_INT 11
25619: PUSH
25620: LD_INT 12
25622: PUSH
25623: LD_INT 13
25625: PUSH
25626: LD_INT 14
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: IN
25635: IFFALSE 25647
// uc_nation := nation_arabian else
25637: LD_ADDR_OWVAR 21
25641: PUSH
25642: LD_INT 2
25644: ST_TO_ADDR
25645: GO 25655
// uc_nation := nation_russian ;
25647: LD_ADDR_OWVAR 21
25651: PUSH
25652: LD_INT 3
25654: ST_TO_ADDR
// vc_chassis := chassis ;
25655: LD_ADDR_OWVAR 37
25659: PUSH
25660: LD_VAR 0 1
25664: ST_TO_ADDR
// vc_engine := engine ;
25665: LD_ADDR_OWVAR 39
25669: PUSH
25670: LD_VAR 0 2
25674: ST_TO_ADDR
// vc_control := control ;
25675: LD_ADDR_OWVAR 38
25679: PUSH
25680: LD_VAR 0 3
25684: ST_TO_ADDR
// vc_weapon := weapon ;
25685: LD_ADDR_OWVAR 40
25689: PUSH
25690: LD_VAR 0 4
25694: ST_TO_ADDR
// un := CreateVehicle ;
25695: LD_ADDR_VAR 0 8
25699: PUSH
25700: CALL_OW 45
25704: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25705: LD_VAR 0 8
25709: PPUSH
25710: LD_INT 0
25712: PPUSH
25713: LD_INT 5
25715: PPUSH
25716: CALL_OW 12
25720: PPUSH
25721: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25725: LD_VAR 0 8
25729: PPUSH
25730: LD_VAR 0 5
25734: PPUSH
25735: LD_VAR 0 6
25739: PPUSH
25740: LD_INT 1
25742: PPUSH
25743: CALL_OW 48
// end ;
25747: LD_VAR 0 7
25751: RET
// export hInvincible ; every 1 do
25752: GO 25754
25754: DISABLE
// hInvincible := [ ] ;
25755: LD_ADDR_EXP 79
25759: PUSH
25760: EMPTY
25761: ST_TO_ADDR
25762: END
// every 10 do var i ;
25763: GO 25765
25765: DISABLE
25766: LD_INT 0
25768: PPUSH
// begin enable ;
25769: ENABLE
// if not hInvincible then
25770: LD_EXP 79
25774: NOT
25775: IFFALSE 25779
// exit ;
25777: GO 25823
// for i in hInvincible do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_EXP 79
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25821
// if GetLives ( i ) < 1000 then
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 256
25801: PUSH
25802: LD_INT 1000
25804: LESS
25805: IFFALSE 25819
// SetLives ( i , 1000 ) ;
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_INT 1000
25814: PPUSH
25815: CALL_OW 234
25819: GO 25789
25821: POP
25822: POP
// end ;
25823: PPOPN 1
25825: END
// export function hHackInvincible ; var i ; begin
25826: LD_INT 0
25828: PPUSH
25829: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 21
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 21
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 69
25867: PUSH
25868: FOR_IN
25869: IFFALSE 25930
// if IsSelected ( i ) then
25871: LD_VAR 0 2
25875: PPUSH
25876: CALL_OW 306
25880: IFFALSE 25928
// begin if i in hInvincible then
25882: LD_VAR 0 2
25886: PUSH
25887: LD_EXP 79
25891: IN
25892: IFFALSE 25912
// hInvincible := hInvincible diff i else
25894: LD_ADDR_EXP 79
25898: PUSH
25899: LD_EXP 79
25903: PUSH
25904: LD_VAR 0 2
25908: DIFF
25909: ST_TO_ADDR
25910: GO 25928
// hInvincible := hInvincible union i ;
25912: LD_ADDR_EXP 79
25916: PUSH
25917: LD_EXP 79
25921: PUSH
25922: LD_VAR 0 2
25926: UNION
25927: ST_TO_ADDR
// end ;
25928: GO 25868
25930: POP
25931: POP
// end ;
25932: LD_VAR 0 1
25936: RET
// export function hHackInvisible ; var i , j ; begin
25937: LD_INT 0
25939: PPUSH
25940: PPUSH
25941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 21
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PPUSH
25957: CALL_OW 69
25961: PUSH
25962: FOR_IN
25963: IFFALSE 25987
// if IsSelected ( i ) then
25965: LD_VAR 0 2
25969: PPUSH
25970: CALL_OW 306
25974: IFFALSE 25985
// ComForceInvisible ( i ) ;
25976: LD_VAR 0 2
25980: PPUSH
25981: CALL_OW 496
25985: GO 25962
25987: POP
25988: POP
// end ;
25989: LD_VAR 0 1
25993: RET
// export function hHackChangeYourSide ; begin
25994: LD_INT 0
25996: PPUSH
// if your_side = 8 then
25997: LD_OWVAR 2
26001: PUSH
26002: LD_INT 8
26004: EQUAL
26005: IFFALSE 26017
// your_side := 0 else
26007: LD_ADDR_OWVAR 2
26011: PUSH
26012: LD_INT 0
26014: ST_TO_ADDR
26015: GO 26031
// your_side := your_side + 1 ;
26017: LD_ADDR_OWVAR 2
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: LD_INT 1
26029: PLUS
26030: ST_TO_ADDR
// end ;
26031: LD_VAR 0 1
26035: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26036: LD_INT 0
26038: PPUSH
26039: PPUSH
26040: PPUSH
// for i in all_units do
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_OWVAR 3
26050: PUSH
26051: FOR_IN
26052: IFFALSE 26130
// if IsSelected ( i ) then
26054: LD_VAR 0 2
26058: PPUSH
26059: CALL_OW 306
26063: IFFALSE 26128
// begin j := GetSide ( i ) ;
26065: LD_ADDR_VAR 0 3
26069: PUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: CALL_OW 255
26079: ST_TO_ADDR
// if j = 8 then
26080: LD_VAR 0 3
26084: PUSH
26085: LD_INT 8
26087: EQUAL
26088: IFFALSE 26100
// j := 0 else
26090: LD_ADDR_VAR 0 3
26094: PUSH
26095: LD_INT 0
26097: ST_TO_ADDR
26098: GO 26114
// j := j + 1 ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_VAR 0 3
26109: PUSH
26110: LD_INT 1
26112: PLUS
26113: ST_TO_ADDR
// SetSide ( i , j ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 3
26123: PPUSH
26124: CALL_OW 235
// end ;
26128: GO 26051
26130: POP
26131: POP
// end ;
26132: LD_VAR 0 1
26136: RET
// export function hHackFog ; begin
26137: LD_INT 0
26139: PPUSH
// FogOff ( true ) ;
26140: LD_INT 1
26142: PPUSH
26143: CALL_OW 344
// end ;
26147: LD_VAR 0 1
26151: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26152: LD_INT 0
26154: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26155: LD_VAR 0 1
26159: PPUSH
26160: LD_VAR 0 2
26164: PPUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: LD_INT 1
26172: PPUSH
26173: LD_INT 1
26175: PPUSH
26176: CALL_OW 483
// CenterOnXY ( x , y ) ;
26180: LD_VAR 0 2
26184: PPUSH
26185: LD_VAR 0 3
26189: PPUSH
26190: CALL_OW 84
// end ;
26194: LD_VAR 0 4
26198: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26203: LD_VAR 0 1
26207: NOT
26208: IFTRUE 26227
26210: PUSH
26211: LD_VAR 0 2
26215: PPUSH
26216: LD_VAR 0 3
26220: PPUSH
26221: CALL_OW 488
26225: NOT
26226: OR
26227: IFTRUE 26262
26229: PUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 266
26239: PUSH
26240: LD_INT 3
26242: NONEQUAL
26243: IFFALSE 26261
26245: PUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 247
26255: PUSH
26256: LD_INT 1
26258: EQUAL
26259: NOT
26260: AND
26261: OR
26262: IFFALSE 26266
// exit ;
26264: GO 26548
// if GetType ( factory ) = unit_human then
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 247
26275: PUSH
26276: LD_INT 1
26278: EQUAL
26279: IFFALSE 26296
// factory := IsInUnit ( factory ) ;
26281: LD_ADDR_VAR 0 1
26285: PUSH
26286: LD_VAR 0 1
26290: PPUSH
26291: CALL_OW 310
26295: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 266
26305: PUSH
26306: LD_INT 3
26308: NONEQUAL
26309: IFFALSE 26313
// exit ;
26311: GO 26548
// for i := 1 to Count ( factoryWaypoints ) do
26313: LD_ADDR_VAR 0 5
26317: PUSH
26318: DOUBLE
26319: LD_INT 1
26321: DEC
26322: ST_TO_ADDR
26323: LD_EXP 80
26327: PPUSH
26328: CALL 36352 0 1
26332: PUSH
26333: FOR_TO
26334: IFFALSE 26496
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 428
26350: PUSH
26351: LD_EXP 80
26355: PUSH
26356: LD_VAR 0 5
26360: ARRAY
26361: PUSH
26362: LD_INT 2
26364: ARRAY
26365: EQUAL
26366: IFFALSE 26398
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26368: LD_ADDR_EXP 80
26372: PUSH
26373: LD_EXP 80
26377: PPUSH
26378: LD_VAR 0 5
26382: PPUSH
26383: CALL_OW 3
26387: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26388: CALL 26553 0 0
// exit ;
26392: POP
26393: POP
26394: GO 26548
// end else
26396: GO 26494
// if factory = factoryWaypoints [ i ] [ 2 ] then
26398: LD_VAR 0 1
26402: PUSH
26403: LD_EXP 80
26407: PUSH
26408: LD_VAR 0 5
26412: ARRAY
26413: PUSH
26414: LD_INT 2
26416: ARRAY
26417: EQUAL
26418: IFFALSE 26494
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26420: LD_ADDR_EXP 80
26424: PUSH
26425: LD_EXP 80
26429: PPUSH
26430: LD_VAR 0 5
26434: PPUSH
26435: CALL_OW 3
26439: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26440: LD_ADDR_EXP 80
26444: PUSH
26445: LD_EXP 80
26449: PPUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 255
26459: PUSH
26460: LD_VAR 0 1
26464: PUSH
26465: LD_VAR 0 2
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL 72328 0 2
26485: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26486: CALL 26553 0 0
// exit ;
26490: POP
26491: POP
26492: GO 26548
// end ; end ;
26494: GO 26333
26496: POP
26497: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26498: LD_ADDR_EXP 80
26502: PUSH
26503: LD_EXP 80
26507: PPUSH
26508: LD_VAR 0 1
26512: PPUSH
26513: CALL_OW 255
26517: PUSH
26518: LD_VAR 0 1
26522: PUSH
26523: LD_VAR 0 2
26527: PUSH
26528: LD_VAR 0 3
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: PPUSH
26539: CALL 72328 0 2
26543: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26544: CALL 26553 0 0
// end ;
26548: LD_VAR 0 4
26552: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26553: LD_INT 0
26555: PPUSH
26556: PPUSH
26557: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26558: LD_STRING resetFactoryWaypoint();
26560: PPUSH
26561: CALL_OW 559
// if factoryWaypoints then
26565: LD_EXP 80
26569: IFFALSE 26690
// begin list := factoryWaypoints ;
26571: LD_ADDR_VAR 0 3
26575: PUSH
26576: LD_EXP 80
26580: ST_TO_ADDR
// for i := 1 to list do
26581: LD_ADDR_VAR 0 2
26585: PUSH
26586: DOUBLE
26587: LD_INT 1
26589: DEC
26590: ST_TO_ADDR
26591: LD_VAR 0 3
26595: PUSH
26596: FOR_TO
26597: IFFALSE 26688
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26599: LD_STRING setFactoryWaypointXY(
26601: PUSH
26602: LD_VAR 0 3
26606: PUSH
26607: LD_VAR 0 2
26611: ARRAY
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: STR
26617: PUSH
26618: LD_STRING ,
26620: STR
26621: PUSH
26622: LD_VAR 0 3
26626: PUSH
26627: LD_VAR 0 2
26631: ARRAY
26632: PUSH
26633: LD_INT 2
26635: ARRAY
26636: STR
26637: PUSH
26638: LD_STRING ,
26640: STR
26641: PUSH
26642: LD_VAR 0 3
26646: PUSH
26647: LD_VAR 0 2
26651: ARRAY
26652: PUSH
26653: LD_INT 3
26655: ARRAY
26656: STR
26657: PUSH
26658: LD_STRING ,
26660: STR
26661: PUSH
26662: LD_VAR 0 3
26666: PUSH
26667: LD_VAR 0 2
26671: ARRAY
26672: PUSH
26673: LD_INT 4
26675: ARRAY
26676: STR
26677: PUSH
26678: LD_STRING )
26680: STR
26681: PPUSH
26682: CALL_OW 559
26686: GO 26596
26688: POP
26689: POP
// end ; end ;
26690: LD_VAR 0 1
26694: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26695: LD_INT 0
26697: PPUSH
// if HexInfo ( x , y ) = warehouse then
26698: LD_VAR 0 2
26702: PPUSH
26703: LD_VAR 0 3
26707: PPUSH
26708: CALL_OW 428
26712: PUSH
26713: LD_VAR 0 1
26717: EQUAL
26718: IFFALSE 26745
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26720: LD_ADDR_EXP 82
26724: PUSH
26725: LD_EXP 82
26729: PPUSH
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_INT 0
26737: PPUSH
26738: CALL_OW 1
26742: ST_TO_ADDR
26743: GO 26796
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26745: LD_ADDR_EXP 82
26749: PUSH
26750: LD_EXP 82
26754: PPUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_VAR 0 1
26764: PPUSH
26765: CALL_OW 255
26769: PUSH
26770: LD_VAR 0 1
26774: PUSH
26775: LD_VAR 0 2
26779: PUSH
26780: LD_VAR 0 3
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 1
26795: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26796: CALL 26805 0 0
// end ;
26800: LD_VAR 0 4
26804: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26805: LD_INT 0
26807: PPUSH
26808: PPUSH
26809: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26810: LD_STRING resetWarehouseGatheringPoints();
26812: PPUSH
26813: CALL_OW 559
// if warehouseGatheringPoints then
26817: LD_EXP 82
26821: IFFALSE 26947
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: LD_EXP 82
26832: PPUSH
26833: CALL 76262 0 1
26837: ST_TO_ADDR
// for i := 1 to list do
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: DOUBLE
26844: LD_INT 1
26846: DEC
26847: ST_TO_ADDR
26848: LD_VAR 0 3
26852: PUSH
26853: FOR_TO
26854: IFFALSE 26945
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26856: LD_STRING setWarehouseGatheringPointXY(
26858: PUSH
26859: LD_VAR 0 3
26863: PUSH
26864: LD_VAR 0 2
26868: ARRAY
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: STR
26874: PUSH
26875: LD_STRING ,
26877: STR
26878: PUSH
26879: LD_VAR 0 3
26883: PUSH
26884: LD_VAR 0 2
26888: ARRAY
26889: PUSH
26890: LD_INT 2
26892: ARRAY
26893: STR
26894: PUSH
26895: LD_STRING ,
26897: STR
26898: PUSH
26899: LD_VAR 0 3
26903: PUSH
26904: LD_VAR 0 2
26908: ARRAY
26909: PUSH
26910: LD_INT 3
26912: ARRAY
26913: STR
26914: PUSH
26915: LD_STRING ,
26917: STR
26918: PUSH
26919: LD_VAR 0 3
26923: PUSH
26924: LD_VAR 0 2
26928: ARRAY
26929: PUSH
26930: LD_INT 4
26932: ARRAY
26933: STR
26934: PUSH
26935: LD_STRING )
26937: STR
26938: PPUSH
26939: CALL_OW 559
26943: GO 26853
26945: POP
26946: POP
// end ; end ;
26947: LD_VAR 0 1
26951: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26952: LD_EXP 82
26956: IFFALSE 27651
26958: GO 26960
26960: DISABLE
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// begin enable ;
26972: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26973: LD_ADDR_VAR 0 3
26977: PUSH
26978: LD_EXP 82
26982: PPUSH
26983: CALL 76262 0 1
26987: ST_TO_ADDR
// if not list then
26988: LD_VAR 0 3
26992: NOT
26993: IFFALSE 26997
// exit ;
26995: GO 27651
// for i := 1 to list do
26997: LD_ADDR_VAR 0 1
27001: PUSH
27002: DOUBLE
27003: LD_INT 1
27005: DEC
27006: ST_TO_ADDR
27007: LD_VAR 0 3
27011: PUSH
27012: FOR_TO
27013: IFFALSE 27649
// begin depot := list [ i ] [ 2 ] ;
27015: LD_ADDR_VAR 0 8
27019: PUSH
27020: LD_VAR 0 3
27024: PUSH
27025: LD_VAR 0 1
27029: ARRAY
27030: PUSH
27031: LD_INT 2
27033: ARRAY
27034: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27035: LD_ADDR_VAR 0 5
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: LD_VAR 0 1
27049: ARRAY
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27055: LD_VAR 0 8
27059: PPUSH
27060: CALL_OW 301
27064: IFTRUE 27083
27066: PUSH
27067: LD_VAR 0 5
27071: PUSH
27072: LD_VAR 0 8
27076: PPUSH
27077: CALL_OW 255
27081: NONEQUAL
27082: OR
27083: IFFALSE 27112
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27085: LD_ADDR_EXP 82
27089: PUSH
27090: LD_EXP 82
27094: PPUSH
27095: LD_VAR 0 8
27099: PPUSH
27100: LD_INT 0
27102: PPUSH
27103: CALL_OW 1
27107: ST_TO_ADDR
// exit ;
27108: POP
27109: POP
27110: GO 27651
// end ; x := list [ i ] [ 3 ] ;
27112: LD_ADDR_VAR 0 6
27116: PUSH
27117: LD_VAR 0 3
27121: PUSH
27122: LD_VAR 0 1
27126: ARRAY
27127: PUSH
27128: LD_INT 3
27130: ARRAY
27131: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27132: LD_ADDR_VAR 0 7
27136: PUSH
27137: LD_VAR 0 3
27141: PUSH
27142: LD_VAR 0 1
27146: ARRAY
27147: PUSH
27148: LD_INT 4
27150: ARRAY
27151: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27152: LD_ADDR_VAR 0 9
27156: PUSH
27157: LD_VAR 0 6
27161: PPUSH
27162: LD_VAR 0 7
27166: PPUSH
27167: LD_INT 16
27169: PPUSH
27170: CALL 74836 0 3
27174: ST_TO_ADDR
// if not cratesNearbyPoint then
27175: LD_VAR 0 9
27179: NOT
27180: IFFALSE 27186
// exit ;
27182: POP
27183: POP
27184: GO 27651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27186: LD_ADDR_VAR 0 4
27190: PUSH
27191: LD_INT 22
27193: PUSH
27194: LD_VAR 0 5
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: LD_INT 60
27208: PUSH
27209: EMPTY
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 91
27218: PUSH
27219: LD_VAR 0 8
27223: PUSH
27224: LD_INT 6
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 25
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 25
27247: PUSH
27248: LD_INT 16
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 69
27270: PUSH
27271: LD_VAR 0 8
27275: PPUSH
27276: CALL_OW 313
27280: PPUSH
27281: LD_INT 3
27283: PUSH
27284: LD_INT 60
27286: PUSH
27287: EMPTY
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: PUSH
27297: LD_INT 25
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 25
27309: PUSH
27310: LD_INT 16
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PPUSH
27326: CALL_OW 72
27330: UNION
27331: ST_TO_ADDR
// if tmp then
27332: LD_VAR 0 4
27336: IFFALSE 27416
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27338: LD_ADDR_VAR 0 4
27342: PUSH
27343: LD_VAR 0 4
27347: PPUSH
27348: LD_INT 3
27350: PPUSH
27351: CALL 72643 0 2
27355: ST_TO_ADDR
// for j in tmp do
27356: LD_ADDR_VAR 0 2
27360: PUSH
27361: LD_VAR 0 4
27365: PUSH
27366: FOR_IN
27367: IFFALSE 27410
// begin if IsInUnit ( j ) then
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 310
27378: IFFALSE 27389
// ComExit ( j ) ;
27380: LD_VAR 0 2
27384: PPUSH
27385: CALL 72726 0 1
// AddComCollect ( j , x , y ) ;
27389: LD_VAR 0 2
27393: PPUSH
27394: LD_VAR 0 6
27398: PPUSH
27399: LD_VAR 0 7
27403: PPUSH
27404: CALL_OW 177
// end ;
27408: GO 27366
27410: POP
27411: POP
// exit ;
27412: POP
27413: POP
27414: GO 27651
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27416: LD_ADDR_VAR 0 4
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_VAR 0 5
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 91
27435: PUSH
27436: LD_VAR 0 8
27440: PUSH
27441: LD_INT 8
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: LD_INT 34
27454: PUSH
27455: LD_INT 12
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 34
27464: PUSH
27465: LD_INT 51
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 34
27474: PUSH
27475: LD_INT 32
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 34
27484: PUSH
27485: LD_INT 89
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: PPUSH
27504: CALL_OW 69
27508: ST_TO_ADDR
// if tmp then
27509: LD_VAR 0 4
27513: IFFALSE 27647
// begin for j in tmp do
27515: LD_ADDR_VAR 0 2
27519: PUSH
27520: LD_VAR 0 4
27524: PUSH
27525: FOR_IN
27526: IFFALSE 27645
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27528: LD_VAR 0 2
27532: PPUSH
27533: CALL_OW 262
27537: PUSH
27538: LD_INT 3
27540: EQUAL
27541: IFTRUE 27558
27543: PUSH
27544: LD_VAR 0 2
27548: PPUSH
27549: CALL_OW 261
27553: PUSH
27554: LD_INT 20
27556: GREATER
27557: OR
27558: IFFALSE 27572
27560: PUSH
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL_OW 314
27570: NOT
27571: AND
27572: IFFALSE 27602
27574: PUSH
27575: LD_VAR 0 2
27579: PPUSH
27580: CALL_OW 263
27584: PUSH
27585: LD_INT 1
27587: NONEQUAL
27588: IFTRUE 27601
27590: PUSH
27591: LD_VAR 0 2
27595: PPUSH
27596: CALL_OW 311
27600: OR
27601: AND
27602: IFFALSE 27643
// begin ComCollect ( j , x , y ) ;
27604: LD_VAR 0 2
27608: PPUSH
27609: LD_VAR 0 6
27613: PPUSH
27614: LD_VAR 0 7
27618: PPUSH
27619: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_VAR 0 8
27632: PPUSH
27633: CALL_OW 172
// exit ;
27637: POP
27638: POP
27639: POP
27640: POP
27641: GO 27651
// end ;
27643: GO 27525
27645: POP
27646: POP
// end ; end ;
27647: GO 27012
27649: POP
27650: POP
// end ; end_of_file
27651: PPOPN 9
27653: END
// export function SOS_UnitDestroyed ( un ) ; begin
27654: LD_INT 0
27656: PPUSH
// ComRadiation ( un ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL 28824 0 1
// end ;
27666: LD_VAR 0 2
27670: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27671: LD_INT 0
27673: PPUSH
// ComRadiation ( un ) ;
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL 28824 0 1
// end ;
27683: LD_VAR 0 2
27687: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27688: LD_INT 0
27690: PPUSH
// end ;
27691: LD_VAR 0 4
27695: RET
// export function SOS_Command ( cmd ) ; begin
27696: LD_INT 0
27698: PPUSH
// end ;
27699: LD_VAR 0 2
27703: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27704: LD_INT 0
27706: PPUSH
// end ;
27707: LD_VAR 0 6
27711: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27712: LD_INT 0
27714: PPUSH
27715: PPUSH
27716: PPUSH
27717: PPUSH
27718: PPUSH
// if not vehicle or not factory then
27719: LD_VAR 0 1
27723: NOT
27724: IFTRUE 27733
27726: PUSH
27727: LD_VAR 0 2
27731: NOT
27732: OR
27733: IFFALSE 27737
// exit ;
27735: GO 28399
// weapon := GetWeapon ( vehicle ) ;
27737: LD_ADDR_VAR 0 7
27741: PUSH
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 264
27751: ST_TO_ADDR
// if weapon = ar_miner then
27752: LD_VAR 0 7
27756: PUSH
27757: LD_INT 81
27759: EQUAL
27760: IFFALSE 27817
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27762: LD_ADDR_EXP 91
27766: PUSH
27767: LD_EXP 91
27771: PPUSH
27772: LD_EXP 91
27776: PUSH
27777: LD_INT 1
27779: PLUS
27780: PPUSH
27781: LD_VAR 0 1
27785: PPUSH
27786: CALL_OW 1
27790: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27791: LD_ADDR_EXP 92
27795: PUSH
27796: LD_EXP 92
27800: PPUSH
27801: LD_EXP 92
27805: PUSH
27806: LD_INT 1
27808: PLUS
27809: PPUSH
27810: EMPTY
27811: PPUSH
27812: CALL_OW 1
27816: ST_TO_ADDR
// end ; if not factoryWaypoints then
27817: LD_EXP 80
27821: NOT
27822: IFFALSE 27826
// exit ;
27824: GO 28399
// for i := 1 to Count ( factoryWaypoints ) do
27826: LD_ADDR_VAR 0 4
27830: PUSH
27831: DOUBLE
27832: LD_INT 1
27834: DEC
27835: ST_TO_ADDR
27836: LD_EXP 80
27840: PPUSH
27841: CALL 36352 0 1
27845: PUSH
27846: FOR_TO
27847: IFFALSE 28397
// if factoryWaypoints [ i ] [ 2 ] = factory then
27849: LD_EXP 80
27853: PUSH
27854: LD_VAR 0 4
27858: ARRAY
27859: PUSH
27860: LD_INT 2
27862: ARRAY
27863: PUSH
27864: LD_VAR 0 2
27868: EQUAL
27869: IFFALSE 28395
// begin if GetControl ( vehicle ) = control_manual then
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 263
27880: PUSH
27881: LD_INT 1
27883: EQUAL
27884: IFFALSE 28248
// begin driver := IsDrivenBy ( vehicle ) ;
27886: LD_ADDR_VAR 0 5
27890: PUSH
27891: LD_VAR 0 1
27895: PPUSH
27896: CALL_OW 311
27900: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27901: LD_VAR 0 5
27905: PUSH
27906: LD_EXP 81
27910: IN
27911: IFTRUE 27925
27913: PUSH
27914: LD_VAR 0 1
27918: PUSH
27919: LD_EXP 81
27923: IN
27924: OR
27925: IFFALSE 27931
// exit ;
27927: POP
27928: POP
27929: GO 28399
// if not HasTask ( driver ) then
27931: LD_VAR 0 5
27935: PPUSH
27936: CALL_OW 314
27940: NOT
27941: IFFALSE 28246
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27943: LD_ADDR_EXP 81
27947: PUSH
27948: LD_EXP 81
27952: PPUSH
27953: LD_VAR 0 5
27957: PPUSH
27958: CALL 72328 0 2
27962: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27963: LD_ADDR_EXP 81
27967: PUSH
27968: LD_EXP 81
27972: PPUSH
27973: LD_VAR 0 1
27977: PPUSH
27978: CALL 72328 0 2
27982: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27983: LD_ADDR_VAR 0 6
27987: PUSH
27988: LD_EXP 80
27992: PUSH
27993: LD_VAR 0 4
27997: ARRAY
27998: PUSH
27999: LD_INT 3
28001: ARRAY
28002: PPUSH
28003: LD_EXP 80
28007: PUSH
28008: LD_VAR 0 4
28012: ARRAY
28013: PUSH
28014: LD_INT 4
28016: ARRAY
28017: PPUSH
28018: CALL_OW 428
28022: ST_TO_ADDR
// if hex then
28023: LD_VAR 0 6
28027: IFFALSE 28045
// ComMoveUnit ( driver , hex ) else
28029: LD_VAR 0 5
28033: PPUSH
28034: LD_VAR 0 6
28038: PPUSH
28039: CALL_OW 112
28043: GO 28129
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_EXP 80
28054: PUSH
28055: LD_VAR 0 4
28059: ARRAY
28060: PUSH
28061: LD_INT 3
28063: ARRAY
28064: PPUSH
28065: LD_EXP 80
28069: PUSH
28070: LD_VAR 0 4
28074: ARRAY
28075: PUSH
28076: LD_INT 4
28078: ARRAY
28079: PPUSH
28080: CALL_OW 297
28084: PUSH
28085: LD_INT 0
28087: GREATER
28088: IFFALSE 28129
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28090: LD_VAR 0 5
28094: PPUSH
28095: LD_EXP 80
28099: PUSH
28100: LD_VAR 0 4
28104: ARRAY
28105: PUSH
28106: LD_INT 3
28108: ARRAY
28109: PPUSH
28110: LD_EXP 80
28114: PUSH
28115: LD_VAR 0 4
28119: ARRAY
28120: PUSH
28121: LD_INT 4
28123: ARRAY
28124: PPUSH
28125: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28129: LD_VAR 0 5
28133: PPUSH
28134: CALL_OW 181
// if Multiplayer then
28138: LD_OWVAR 4
28142: IFFALSE 28191
// begin repeat wait ( 10 ) ;
28144: LD_INT 10
28146: PPUSH
28147: CALL_OW 67
// until not IsInUnit ( driver ) ;
28151: LD_VAR 0 5
28155: PPUSH
28156: CALL_OW 310
28160: NOT
28161: IFFALSE 28144
// if not HasTask ( driver ) then
28163: LD_VAR 0 5
28167: PPUSH
28168: CALL_OW 314
28172: NOT
28173: IFFALSE 28189
// ComEnterUnit ( driver , factory ) ;
28175: LD_VAR 0 5
28179: PPUSH
28180: LD_VAR 0 2
28184: PPUSH
28185: CALL_OW 120
// end else
28189: GO 28205
// AddComEnterUnit ( driver , factory ) ;
28191: LD_VAR 0 5
28195: PPUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: CALL_OW 180
// wait ( 0 0$1 ) ;
28205: LD_INT 35
28207: PPUSH
28208: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28212: LD_ADDR_EXP 81
28216: PUSH
28217: LD_EXP 81
28221: PUSH
28222: LD_VAR 0 5
28226: DIFF
28227: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28228: LD_ADDR_EXP 81
28232: PUSH
28233: LD_EXP 81
28237: PUSH
28238: LD_VAR 0 1
28242: DIFF
28243: ST_TO_ADDR
// break ;
28244: GO 28397
// end ; end else
28246: GO 28395
// if GetControl ( vehicle ) = control_remote then
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 263
28257: PUSH
28258: LD_INT 2
28260: EQUAL
28261: IFFALSE 28347
// begin wait ( 0 0$2 ) ;
28263: LD_INT 70
28265: PPUSH
28266: CALL_OW 67
// repeat wait ( 10 ) ;
28270: LD_INT 10
28272: PPUSH
28273: CALL_OW 67
// Connect ( vehicle ) ;
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL 42630 0 1
// until IsControledBy ( vehicle ) ;
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 312
28295: IFFALSE 28270
// wait ( 10 ) ;
28297: LD_INT 10
28299: PPUSH
28300: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28304: LD_VAR 0 1
28308: PPUSH
28309: LD_EXP 80
28313: PUSH
28314: LD_VAR 0 4
28318: ARRAY
28319: PUSH
28320: LD_INT 3
28322: ARRAY
28323: PPUSH
28324: LD_EXP 80
28328: PUSH
28329: LD_VAR 0 4
28333: ARRAY
28334: PUSH
28335: LD_INT 4
28337: ARRAY
28338: PPUSH
28339: CALL_OW 111
// break ;
28343: GO 28397
// end else
28345: GO 28395
// begin wait ( 0 0$3 ) ;
28347: LD_INT 105
28349: PPUSH
28350: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28354: LD_VAR 0 1
28358: PPUSH
28359: LD_EXP 80
28363: PUSH
28364: LD_VAR 0 4
28368: ARRAY
28369: PUSH
28370: LD_INT 3
28372: ARRAY
28373: PPUSH
28374: LD_EXP 80
28378: PUSH
28379: LD_VAR 0 4
28383: ARRAY
28384: PUSH
28385: LD_INT 4
28387: ARRAY
28388: PPUSH
28389: CALL_OW 111
// break ;
28393: GO 28397
// end ; end ;
28395: GO 27846
28397: POP
28398: POP
// end ;
28399: LD_VAR 0 3
28403: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28404: LD_INT 0
28406: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28407: LD_VAR 0 1
28411: PUSH
28412: LD_INT 250
28414: EQUAL
28415: IFFALSE 28432
28417: PUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 264
28427: PUSH
28428: LD_INT 81
28430: EQUAL
28431: AND
28432: IFFALSE 28453
// MinerPlaceMine ( unit , x , y ) ;
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_VAR 0 4
28443: PPUSH
28444: LD_VAR 0 5
28448: PPUSH
28449: CALL 31799 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28453: LD_VAR 0 1
28457: PUSH
28458: LD_INT 251
28460: EQUAL
28461: IFFALSE 28478
28463: PUSH
28464: LD_VAR 0 2
28468: PPUSH
28469: CALL_OW 264
28473: PUSH
28474: LD_INT 81
28476: EQUAL
28477: AND
28478: IFFALSE 28499
// MinerDetonateMine ( unit , x , y ) ;
28480: LD_VAR 0 2
28484: PPUSH
28485: LD_VAR 0 4
28489: PPUSH
28490: LD_VAR 0 5
28494: PPUSH
28495: CALL 32206 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28499: LD_VAR 0 1
28503: PUSH
28504: LD_INT 252
28506: EQUAL
28507: IFFALSE 28524
28509: PUSH
28510: LD_VAR 0 2
28514: PPUSH
28515: CALL_OW 264
28519: PUSH
28520: LD_INT 81
28522: EQUAL
28523: AND
28524: IFFALSE 28545
// MinerCreateMinefield ( unit , x , y ) ;
28526: LD_VAR 0 2
28530: PPUSH
28531: LD_VAR 0 4
28535: PPUSH
28536: LD_VAR 0 5
28540: PPUSH
28541: CALL 32438 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28545: LD_VAR 0 1
28549: PUSH
28550: LD_INT 253
28552: EQUAL
28553: IFFALSE 28570
28555: PUSH
28556: LD_VAR 0 2
28560: PPUSH
28561: CALL_OW 257
28565: PUSH
28566: LD_INT 5
28568: EQUAL
28569: AND
28570: IFFALSE 28591
// ComBinocular ( unit , x , y ) ;
28572: LD_VAR 0 2
28576: PPUSH
28577: LD_VAR 0 4
28581: PPUSH
28582: LD_VAR 0 5
28586: PPUSH
28587: CALL 32813 0 3
// if selectedUnit then
28591: LD_VAR 0 3
28595: IFFALSE 28655
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28597: LD_VAR 0 1
28601: PUSH
28602: LD_INT 254
28604: EQUAL
28605: IFFALSE 28622
28607: PUSH
28608: LD_VAR 0 2
28612: PPUSH
28613: CALL_OW 264
28617: PUSH
28618: LD_INT 99
28620: EQUAL
28621: AND
28622: IFFALSE 28639
28624: PUSH
28625: LD_VAR 0 3
28629: PPUSH
28630: CALL_OW 263
28634: PUSH
28635: LD_INT 3
28637: EQUAL
28638: AND
28639: IFFALSE 28655
// HackDestroyVehicle ( unit , selectedUnit ) ;
28641: LD_VAR 0 2
28645: PPUSH
28646: LD_VAR 0 3
28650: PPUSH
28651: CALL 30989 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 255
28662: EQUAL
28663: IFFALSE 28687
28665: PUSH
28666: LD_VAR 0 2
28670: PPUSH
28671: CALL_OW 264
28675: PUSH
28676: LD_INT 14
28678: PUSH
28679: LD_INT 53
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: IN
28686: AND
28687: IFFALSE 28705
28689: PUSH
28690: LD_VAR 0 4
28694: PPUSH
28695: LD_VAR 0 5
28699: PPUSH
28700: CALL_OW 488
28704: AND
28705: IFFALSE 28729
// CutTreeXYR ( unit , x , y , 12 ) ;
28707: LD_VAR 0 2
28711: PPUSH
28712: LD_VAR 0 4
28716: PPUSH
28717: LD_VAR 0 5
28721: PPUSH
28722: LD_INT 12
28724: PPUSH
28725: CALL 28920 0 4
// if cmd = 256 then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_INT 256
28736: EQUAL
28737: IFFALSE 28758
// SetFactoryWaypoint ( unit , x , y ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_VAR 0 4
28748: PPUSH
28749: LD_VAR 0 5
28753: PPUSH
28754: CALL 26199 0 3
// if cmd = 257 then
28758: LD_VAR 0 1
28762: PUSH
28763: LD_INT 257
28765: EQUAL
28766: IFFALSE 28787
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28768: LD_VAR 0 2
28772: PPUSH
28773: LD_VAR 0 4
28777: PPUSH
28778: LD_VAR 0 5
28782: PPUSH
28783: CALL 26695 0 3
// if cmd = 258 then
28787: LD_VAR 0 1
28791: PUSH
28792: LD_INT 258
28794: EQUAL
28795: IFFALSE 28819
// BurnTreeXYR ( unit , x , y , 8 ) ;
28797: LD_VAR 0 2
28801: PPUSH
28802: LD_VAR 0 4
28806: PPUSH
28807: LD_VAR 0 5
28811: PPUSH
28812: LD_INT 8
28814: PPUSH
28815: CALL 29342 0 4
// end ;
28819: LD_VAR 0 6
28823: RET
// export function ComRadiation ( un ) ; var eff ; begin
28824: LD_INT 0
28826: PPUSH
28827: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 264
28837: PUSH
28838: LD_INT 91
28840: NONEQUAL
28841: IFFALSE 28845
// exit ;
28843: GO 28915
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28845: LD_INT 68
28847: PPUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 255
28857: PPUSH
28858: CALL_OW 321
28862: PUSH
28863: LD_INT 2
28865: EQUAL
28866: IFFALSE 28878
// eff := 50 else
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_INT 50
28875: ST_TO_ADDR
28876: GO 28886
// eff := 25 ;
28878: LD_ADDR_VAR 0 3
28882: PUSH
28883: LD_INT 25
28885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 250
28895: PPUSH
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 251
28905: PPUSH
28906: LD_VAR 0 3
28910: PPUSH
28911: CALL_OW 495
// end ;
28915: LD_VAR 0 2
28919: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28920: LD_INT 0
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 302
28940: NOT
28941: IFTRUE 28960
28943: PUSH
28944: LD_VAR 0 2
28948: PPUSH
28949: LD_VAR 0 3
28953: PPUSH
28954: CALL_OW 488
28958: NOT
28959: OR
28960: IFTRUE 28969
28962: PUSH
28963: LD_VAR 0 4
28967: NOT
28968: OR
28969: IFFALSE 28973
// exit ;
28971: GO 29337
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28973: LD_VAR 0 1
28977: PPUSH
28978: CALL_OW 437
28982: PPUSH
28983: CALL 36352 0 1
28987: PUSH
28988: LD_INT 10
28990: GREATER
28991: IFFALSE 28995
// exit ;
28993: GO 29337
// list := [ ] ;
28995: LD_ADDR_VAR 0 13
28999: PUSH
29000: EMPTY
29001: ST_TO_ADDR
// if x - r < 0 then
29002: LD_VAR 0 2
29006: PUSH
29007: LD_VAR 0 4
29011: MINUS
29012: PUSH
29013: LD_INT 0
29015: LESS
29016: IFFALSE 29028
// min_x := 0 else
29018: LD_ADDR_VAR 0 7
29022: PUSH
29023: LD_INT 0
29025: ST_TO_ADDR
29026: GO 29044
// min_x := x - r ;
29028: LD_ADDR_VAR 0 7
29032: PUSH
29033: LD_VAR 0 2
29037: PUSH
29038: LD_VAR 0 4
29042: MINUS
29043: ST_TO_ADDR
// if y - r < 0 then
29044: LD_VAR 0 3
29048: PUSH
29049: LD_VAR 0 4
29053: MINUS
29054: PUSH
29055: LD_INT 0
29057: LESS
29058: IFFALSE 29070
// min_y := 0 else
29060: LD_ADDR_VAR 0 8
29064: PUSH
29065: LD_INT 0
29067: ST_TO_ADDR
29068: GO 29086
// min_y := y - r ;
29070: LD_ADDR_VAR 0 8
29074: PUSH
29075: LD_VAR 0 3
29079: PUSH
29080: LD_VAR 0 4
29084: MINUS
29085: ST_TO_ADDR
// max_x := x + r ;
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: LD_VAR 0 4
29100: PLUS
29101: ST_TO_ADDR
// max_y := y + r ;
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 3
29111: PUSH
29112: LD_VAR 0 4
29116: PLUS
29117: ST_TO_ADDR
// for _x = min_x to max_x do
29118: LD_ADDR_VAR 0 11
29122: PUSH
29123: DOUBLE
29124: LD_VAR 0 7
29128: DEC
29129: ST_TO_ADDR
29130: LD_VAR 0 9
29134: PUSH
29135: FOR_TO
29136: IFFALSE 29255
// for _y = min_y to max_y do
29138: LD_ADDR_VAR 0 12
29142: PUSH
29143: DOUBLE
29144: LD_VAR 0 8
29148: DEC
29149: ST_TO_ADDR
29150: LD_VAR 0 10
29154: PUSH
29155: FOR_TO
29156: IFFALSE 29251
// begin if not ValidHex ( _x , _y ) then
29158: LD_VAR 0 11
29162: PPUSH
29163: LD_VAR 0 12
29167: PPUSH
29168: CALL_OW 488
29172: NOT
29173: IFFALSE 29177
// continue ;
29175: GO 29155
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29177: LD_VAR 0 11
29181: PPUSH
29182: LD_VAR 0 12
29186: PPUSH
29187: CALL_OW 351
29191: IFFALSE 29209
29193: PUSH
29194: LD_VAR 0 11
29198: PPUSH
29199: LD_VAR 0 12
29203: PPUSH
29204: CALL_OW 554
29208: AND
29209: IFFALSE 29249
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29211: LD_ADDR_VAR 0 13
29215: PUSH
29216: LD_VAR 0 13
29220: PPUSH
29221: LD_VAR 0 13
29225: PUSH
29226: LD_INT 1
29228: PLUS
29229: PPUSH
29230: LD_VAR 0 11
29234: PUSH
29235: LD_VAR 0 12
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 2
29248: ST_TO_ADDR
// end ;
29249: GO 29155
29251: POP
29252: POP
29253: GO 29135
29255: POP
29256: POP
// if not list then
29257: LD_VAR 0 13
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29337
// for i in list do
29266: LD_ADDR_VAR 0 6
29270: PUSH
29271: LD_VAR 0 13
29275: PUSH
29276: FOR_IN
29277: IFFALSE 29335
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29279: LD_VAR 0 1
29283: PPUSH
29284: LD_STRING M
29286: PUSH
29287: LD_VAR 0 6
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PUSH
29296: LD_VAR 0 6
29300: PUSH
29301: LD_INT 2
29303: ARRAY
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: PUSH
29326: EMPTY
29327: LIST
29328: PPUSH
29329: CALL_OW 447
29333: GO 29276
29335: POP
29336: POP
// end ;
29337: LD_VAR 0 5
29341: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29342: LD_INT 0
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 302
29363: NOT
29364: IFTRUE 29383
29366: PUSH
29367: LD_VAR 0 2
29371: PPUSH
29372: LD_VAR 0 3
29376: PPUSH
29377: CALL_OW 488
29381: NOT
29382: OR
29383: IFTRUE 29392
29385: PUSH
29386: LD_VAR 0 4
29390: NOT
29391: OR
29392: IFFALSE 29396
// exit ;
29394: GO 29935
// if Count ( GetTaskList ( flame ) ) > 10 then
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 437
29405: PPUSH
29406: CALL 36352 0 1
29410: PUSH
29411: LD_INT 10
29413: GREATER
29414: IFFALSE 29418
// exit ;
29416: GO 29935
// list := [ ] ;
29418: LD_ADDR_VAR 0 13
29422: PUSH
29423: EMPTY
29424: ST_TO_ADDR
// if x - r < 0 then
29425: LD_VAR 0 2
29429: PUSH
29430: LD_VAR 0 4
29434: MINUS
29435: PUSH
29436: LD_INT 0
29438: LESS
29439: IFFALSE 29451
// min_x := 0 else
29441: LD_ADDR_VAR 0 7
29445: PUSH
29446: LD_INT 0
29448: ST_TO_ADDR
29449: GO 29467
// min_x := x - r ;
29451: LD_ADDR_VAR 0 7
29455: PUSH
29456: LD_VAR 0 2
29460: PUSH
29461: LD_VAR 0 4
29465: MINUS
29466: ST_TO_ADDR
// if y - r < 0 then
29467: LD_VAR 0 3
29471: PUSH
29472: LD_VAR 0 4
29476: MINUS
29477: PUSH
29478: LD_INT 0
29480: LESS
29481: IFFALSE 29493
// min_y := 0 else
29483: LD_ADDR_VAR 0 8
29487: PUSH
29488: LD_INT 0
29490: ST_TO_ADDR
29491: GO 29509
// min_y := y - r ;
29493: LD_ADDR_VAR 0 8
29497: PUSH
29498: LD_VAR 0 3
29502: PUSH
29503: LD_VAR 0 4
29507: MINUS
29508: ST_TO_ADDR
// max_x := x + r ;
29509: LD_ADDR_VAR 0 9
29513: PUSH
29514: LD_VAR 0 2
29518: PUSH
29519: LD_VAR 0 4
29523: PLUS
29524: ST_TO_ADDR
// max_y := y + r ;
29525: LD_ADDR_VAR 0 10
29529: PUSH
29530: LD_VAR 0 3
29534: PUSH
29535: LD_VAR 0 4
29539: PLUS
29540: ST_TO_ADDR
// for _x = min_x to max_x do
29541: LD_ADDR_VAR 0 11
29545: PUSH
29546: DOUBLE
29547: LD_VAR 0 7
29551: DEC
29552: ST_TO_ADDR
29553: LD_VAR 0 9
29557: PUSH
29558: FOR_TO
29559: IFFALSE 29678
// for _y = min_y to max_y do
29561: LD_ADDR_VAR 0 12
29565: PUSH
29566: DOUBLE
29567: LD_VAR 0 8
29571: DEC
29572: ST_TO_ADDR
29573: LD_VAR 0 10
29577: PUSH
29578: FOR_TO
29579: IFFALSE 29674
// begin if not ValidHex ( _x , _y ) then
29581: LD_VAR 0 11
29585: PPUSH
29586: LD_VAR 0 12
29590: PPUSH
29591: CALL_OW 488
29595: NOT
29596: IFFALSE 29600
// continue ;
29598: GO 29578
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29600: LD_VAR 0 11
29604: PPUSH
29605: LD_VAR 0 12
29609: PPUSH
29610: CALL_OW 351
29614: IFFALSE 29632
29616: PUSH
29617: LD_VAR 0 11
29621: PPUSH
29622: LD_VAR 0 12
29626: PPUSH
29627: CALL_OW 554
29631: AND
29632: IFFALSE 29672
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29634: LD_ADDR_VAR 0 13
29638: PUSH
29639: LD_VAR 0 13
29643: PPUSH
29644: LD_VAR 0 13
29648: PUSH
29649: LD_INT 1
29651: PLUS
29652: PPUSH
29653: LD_VAR 0 11
29657: PUSH
29658: LD_VAR 0 12
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 2
29671: ST_TO_ADDR
// end ;
29672: GO 29578
29674: POP
29675: POP
29676: GO 29558
29678: POP
29679: POP
// if not list then
29680: LD_VAR 0 13
29684: NOT
29685: IFFALSE 29689
// exit ;
29687: GO 29935
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29689: LD_ADDR_VAR 0 13
29693: PUSH
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_VAR 0 13
29703: PPUSH
29704: LD_INT 1
29706: PPUSH
29707: LD_INT 1
29709: PPUSH
29710: CALL 39758 0 4
29714: ST_TO_ADDR
// ComStop ( flame ) ;
29715: LD_VAR 0 1
29719: PPUSH
29720: CALL_OW 141
// for i in list do
29724: LD_ADDR_VAR 0 6
29728: PUSH
29729: LD_VAR 0 13
29733: PUSH
29734: FOR_IN
29735: IFFALSE 29766
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29737: LD_VAR 0 1
29741: PPUSH
29742: LD_VAR 0 6
29746: PUSH
29747: LD_INT 1
29749: ARRAY
29750: PPUSH
29751: LD_VAR 0 6
29755: PUSH
29756: LD_INT 2
29758: ARRAY
29759: PPUSH
29760: CALL_OW 176
29764: GO 29734
29766: POP
29767: POP
// repeat wait ( 0 0$1 ) ;
29768: LD_INT 35
29770: PPUSH
29771: CALL_OW 67
// task := GetTaskList ( flame ) ;
29775: LD_ADDR_VAR 0 14
29779: PUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 437
29789: ST_TO_ADDR
// if not task then
29790: LD_VAR 0 14
29794: NOT
29795: IFFALSE 29799
// exit ;
29797: GO 29935
// if task [ 1 ] [ 1 ] <> | then
29799: LD_VAR 0 14
29803: PUSH
29804: LD_INT 1
29806: ARRAY
29807: PUSH
29808: LD_INT 1
29810: ARRAY
29811: PUSH
29812: LD_STRING |
29814: NONEQUAL
29815: IFFALSE 29819
// exit ;
29817: GO 29935
// _x := task [ 1 ] [ 2 ] ;
29819: LD_ADDR_VAR 0 11
29823: PUSH
29824: LD_VAR 0 14
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: PUSH
29833: LD_INT 2
29835: ARRAY
29836: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29837: LD_ADDR_VAR 0 12
29841: PUSH
29842: LD_VAR 0 14
29846: PUSH
29847: LD_INT 1
29849: ARRAY
29850: PUSH
29851: LD_INT 3
29853: ARRAY
29854: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29855: LD_VAR 0 11
29859: PPUSH
29860: LD_VAR 0 12
29864: PPUSH
29865: CALL_OW 351
29869: NOT
29870: IFTRUE 29889
29872: PUSH
29873: LD_VAR 0 11
29877: PPUSH
29878: LD_VAR 0 12
29882: PPUSH
29883: CALL_OW 554
29887: NOT
29888: OR
29889: IFFALSE 29923
// begin task := Delete ( task , 1 ) ;
29891: LD_ADDR_VAR 0 14
29895: PUSH
29896: LD_VAR 0 14
29900: PPUSH
29901: LD_INT 1
29903: PPUSH
29904: CALL_OW 3
29908: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 14
29918: PPUSH
29919: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 314
29932: NOT
29933: IFFALSE 29768
// end ;
29935: LD_VAR 0 5
29939: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29940: LD_EXP 84
29944: NOT
29945: IFFALSE 29995
29947: GO 29949
29949: DISABLE
// begin initHack := true ;
29950: LD_ADDR_EXP 84
29954: PUSH
29955: LD_INT 1
29957: ST_TO_ADDR
// hackTanks := [ ] ;
29958: LD_ADDR_EXP 85
29962: PUSH
29963: EMPTY
29964: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29965: LD_ADDR_EXP 86
29969: PUSH
29970: EMPTY
29971: ST_TO_ADDR
// hackLimit := 3 ;
29972: LD_ADDR_EXP 87
29976: PUSH
29977: LD_INT 3
29979: ST_TO_ADDR
// hackDist := 12 ;
29980: LD_ADDR_EXP 88
29984: PUSH
29985: LD_INT 12
29987: ST_TO_ADDR
// hackCounter := [ ] ;
29988: LD_ADDR_EXP 89
29992: PUSH
29993: EMPTY
29994: ST_TO_ADDR
// end ;
29995: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29996: LD_EXP 84
30000: IFFALSE 30018
30002: PUSH
30003: LD_INT 34
30005: PUSH
30006: LD_INT 99
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 69
30017: AND
30018: IFFALSE 30271
30020: GO 30022
30022: DISABLE
30023: LD_INT 0
30025: PPUSH
30026: PPUSH
// begin enable ;
30027: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30028: LD_ADDR_VAR 0 1
30032: PUSH
30033: LD_INT 34
30035: PUSH
30036: LD_INT 99
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: PUSH
30048: FOR_IN
30049: IFFALSE 30269
// begin if not i in hackTanks then
30051: LD_VAR 0 1
30055: PUSH
30056: LD_EXP 85
30060: IN
30061: NOT
30062: IFFALSE 30145
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30064: LD_ADDR_EXP 85
30068: PUSH
30069: LD_EXP 85
30073: PPUSH
30074: LD_EXP 85
30078: PUSH
30079: LD_INT 1
30081: PLUS
30082: PPUSH
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 1
30092: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30093: LD_ADDR_EXP 86
30097: PUSH
30098: LD_EXP 86
30102: PPUSH
30103: LD_EXP 86
30107: PUSH
30108: LD_INT 1
30110: PLUS
30111: PPUSH
30112: EMPTY
30113: PPUSH
30114: CALL_OW 1
30118: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30119: LD_ADDR_EXP 89
30123: PUSH
30124: LD_EXP 89
30128: PPUSH
30129: LD_EXP 89
30133: PUSH
30134: LD_INT 1
30136: PLUS
30137: PPUSH
30138: EMPTY
30139: PPUSH
30140: CALL_OW 1
30144: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30145: LD_VAR 0 1
30149: PPUSH
30150: CALL_OW 302
30154: NOT
30155: IFFALSE 30168
// begin HackUnlinkAll ( i ) ;
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL 30274 0 1
// continue ;
30166: GO 30048
// end ; HackCheckCapturedStatus ( i ) ;
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL 30719 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30177: LD_ADDR_VAR 0 2
30181: PUSH
30182: LD_INT 81
30184: PUSH
30185: LD_VAR 0 1
30189: PPUSH
30190: CALL_OW 255
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 33
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 91
30211: PUSH
30212: LD_VAR 0 1
30216: PUSH
30217: LD_EXP 88
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 50
30229: PUSH
30230: EMPTY
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: PPUSH
30239: CALL_OW 69
30243: ST_TO_ADDR
// if not tmp then
30244: LD_VAR 0 2
30248: NOT
30249: IFFALSE 30253
// continue ;
30251: GO 30048
// HackLink ( i , tmp ) ;
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: CALL 30410 0 2
// end ;
30267: GO 30048
30269: POP
30270: POP
// end ;
30271: PPOPN 2
30273: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
30278: PPUSH
// if not hack in hackTanks then
30279: LD_VAR 0 1
30283: PUSH
30284: LD_EXP 85
30288: IN
30289: NOT
30290: IFFALSE 30294
// exit ;
30292: GO 30405
// index := GetElementIndex ( hackTanks , hack ) ;
30294: LD_ADDR_VAR 0 4
30298: PUSH
30299: LD_EXP 85
30303: PPUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: CALL 39053 0 2
30313: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30314: LD_EXP 86
30318: PUSH
30319: LD_VAR 0 4
30323: ARRAY
30324: IFFALSE 30405
// begin for i in hackTanksCaptured [ index ] do
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_EXP 86
30335: PUSH
30336: LD_VAR 0 4
30340: ARRAY
30341: PUSH
30342: FOR_IN
30343: IFFALSE 30369
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30345: LD_VAR 0 3
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: LD_VAR 0 3
30358: PUSH
30359: LD_INT 2
30361: ARRAY
30362: PPUSH
30363: CALL_OW 235
30367: GO 30342
30369: POP
30370: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30371: LD_ADDR_EXP 86
30375: PUSH
30376: LD_EXP 86
30380: PPUSH
30381: LD_VAR 0 4
30385: PPUSH
30386: EMPTY
30387: PPUSH
30388: CALL_OW 1
30392: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30393: LD_VAR 0 1
30397: PPUSH
30398: LD_INT 0
30400: PPUSH
30401: CALL_OW 505
// end ; end ;
30405: LD_VAR 0 2
30409: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30410: LD_INT 0
30412: PPUSH
30413: PPUSH
30414: PPUSH
// if not hack in hackTanks or not vehicles then
30415: LD_VAR 0 1
30419: PUSH
30420: LD_EXP 85
30424: IN
30425: NOT
30426: IFTRUE 30435
30428: PUSH
30429: LD_VAR 0 2
30433: NOT
30434: OR
30435: IFFALSE 30439
// exit ;
30437: GO 30714
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30439: LD_ADDR_VAR 0 2
30443: PUSH
30444: LD_VAR 0 1
30448: PPUSH
30449: LD_VAR 0 2
30453: PPUSH
30454: LD_INT 1
30456: PPUSH
30457: LD_INT 1
30459: PPUSH
30460: CALL 39705 0 4
30464: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30465: LD_ADDR_VAR 0 5
30469: PUSH
30470: LD_EXP 85
30474: PPUSH
30475: LD_VAR 0 1
30479: PPUSH
30480: CALL 39053 0 2
30484: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30485: LD_EXP 86
30489: PUSH
30490: LD_VAR 0 5
30494: ARRAY
30495: PUSH
30496: LD_EXP 87
30500: LESS
30501: IFFALSE 30690
// begin for i := 1 to vehicles do
30503: LD_ADDR_VAR 0 4
30507: PUSH
30508: DOUBLE
30509: LD_INT 1
30511: DEC
30512: ST_TO_ADDR
30513: LD_VAR 0 2
30517: PUSH
30518: FOR_TO
30519: IFFALSE 30688
// begin if hackTanksCaptured [ index ] = hackLimit then
30521: LD_EXP 86
30525: PUSH
30526: LD_VAR 0 5
30530: ARRAY
30531: PUSH
30532: LD_EXP 87
30536: EQUAL
30537: IFFALSE 30541
// break ;
30539: GO 30688
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30541: LD_ADDR_EXP 89
30545: PUSH
30546: LD_EXP 89
30550: PPUSH
30551: LD_VAR 0 5
30555: PPUSH
30556: LD_EXP 89
30560: PUSH
30561: LD_VAR 0 5
30565: ARRAY
30566: PUSH
30567: LD_INT 1
30569: PLUS
30570: PPUSH
30571: CALL_OW 1
30575: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30576: LD_ADDR_EXP 86
30580: PUSH
30581: LD_EXP 86
30585: PPUSH
30586: LD_VAR 0 5
30590: PUSH
30591: LD_EXP 86
30595: PUSH
30596: LD_VAR 0 5
30600: ARRAY
30601: PUSH
30602: LD_INT 1
30604: PLUS
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PPUSH
30610: LD_VAR 0 2
30614: PUSH
30615: LD_VAR 0 4
30619: ARRAY
30620: PUSH
30621: LD_VAR 0 2
30625: PUSH
30626: LD_VAR 0 4
30630: ARRAY
30631: PPUSH
30632: CALL_OW 255
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL 39270 0 3
30645: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30646: LD_VAR 0 2
30650: PUSH
30651: LD_VAR 0 4
30655: ARRAY
30656: PPUSH
30657: LD_VAR 0 1
30661: PPUSH
30662: CALL_OW 255
30666: PPUSH
30667: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30671: LD_VAR 0 2
30675: PUSH
30676: LD_VAR 0 4
30680: ARRAY
30681: PPUSH
30682: CALL_OW 141
// end ;
30686: GO 30518
30688: POP
30689: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30690: LD_VAR 0 1
30694: PPUSH
30695: LD_EXP 86
30699: PUSH
30700: LD_VAR 0 5
30704: ARRAY
30705: PUSH
30706: LD_INT 0
30708: PLUS
30709: PPUSH
30710: CALL_OW 505
// end ;
30714: LD_VAR 0 3
30718: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
// if not hack in hackTanks then
30725: LD_VAR 0 1
30729: PUSH
30730: LD_EXP 85
30734: IN
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 30984
// index := GetElementIndex ( hackTanks , hack ) ;
30740: LD_ADDR_VAR 0 4
30744: PUSH
30745: LD_EXP 85
30749: PPUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL 39053 0 2
30759: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: DOUBLE
30766: LD_EXP 86
30770: PUSH
30771: LD_VAR 0 4
30775: ARRAY
30776: INC
30777: ST_TO_ADDR
30778: LD_INT 1
30780: PUSH
30781: FOR_DOWNTO
30782: IFFALSE 30958
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30784: LD_ADDR_VAR 0 5
30788: PUSH
30789: LD_EXP 86
30793: PUSH
30794: LD_VAR 0 4
30798: ARRAY
30799: PUSH
30800: LD_VAR 0 3
30804: ARRAY
30805: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30806: LD_VAR 0 5
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PPUSH
30815: CALL_OW 302
30819: NOT
30820: IFTRUE 30848
30822: PUSH
30823: LD_VAR 0 5
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: CALL_OW 255
30836: PUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 255
30846: NONEQUAL
30847: OR
30848: IFFALSE 30956
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30850: LD_VAR 0 5
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PPUSH
30859: CALL_OW 305
30863: IFFALSE 30891
30865: PUSH
30866: LD_VAR 0 5
30870: PUSH
30871: LD_INT 1
30873: ARRAY
30874: PPUSH
30875: CALL_OW 255
30879: PUSH
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 255
30889: EQUAL
30890: AND
30891: IFFALSE 30915
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30893: LD_VAR 0 5
30897: PUSH
30898: LD_INT 1
30900: ARRAY
30901: PPUSH
30902: LD_VAR 0 5
30906: PUSH
30907: LD_INT 2
30909: ARRAY
30910: PPUSH
30911: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30915: LD_ADDR_EXP 86
30919: PUSH
30920: LD_EXP 86
30924: PPUSH
30925: LD_VAR 0 4
30929: PPUSH
30930: LD_EXP 86
30934: PUSH
30935: LD_VAR 0 4
30939: ARRAY
30940: PPUSH
30941: LD_VAR 0 3
30945: PPUSH
30946: CALL_OW 3
30950: PPUSH
30951: CALL_OW 1
30955: ST_TO_ADDR
// end ; end ;
30956: GO 30781
30958: POP
30959: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_EXP 86
30969: PUSH
30970: LD_VAR 0 4
30974: ARRAY
30975: PUSH
30976: LD_INT 0
30978: PLUS
30979: PPUSH
30980: CALL_OW 505
// end ;
30984: LD_VAR 0 2
30988: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
// if not hack in hackTanks then
30995: LD_VAR 0 1
30999: PUSH
31000: LD_EXP 85
31004: IN
31005: NOT
31006: IFFALSE 31010
// exit ;
31008: GO 31095
// index := GetElementIndex ( hackTanks , hack ) ;
31010: LD_ADDR_VAR 0 5
31014: PUSH
31015: LD_EXP 85
31019: PPUSH
31020: LD_VAR 0 1
31024: PPUSH
31025: CALL 39053 0 2
31029: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31030: LD_ADDR_VAR 0 4
31034: PUSH
31035: DOUBLE
31036: LD_INT 1
31038: DEC
31039: ST_TO_ADDR
31040: LD_EXP 86
31044: PUSH
31045: LD_VAR 0 5
31049: ARRAY
31050: PUSH
31051: FOR_TO
31052: IFFALSE 31093
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31054: LD_EXP 86
31058: PUSH
31059: LD_VAR 0 5
31063: ARRAY
31064: PUSH
31065: LD_VAR 0 4
31069: ARRAY
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PUSH
31075: LD_VAR 0 2
31079: EQUAL
31080: IFFALSE 31091
// KillUnit ( vehicle ) ;
31082: LD_VAR 0 2
31086: PPUSH
31087: CALL_OW 66
31091: GO 31051
31093: POP
31094: POP
// end ;
31095: LD_VAR 0 3
31099: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
31100: LD_EXP 90
31104: NOT
31105: IFFALSE 31238
31107: GO 31109
31109: DISABLE
31110: LD_INT 0
31112: PPUSH
// begin initMiner := true ;
31113: LD_ADDR_EXP 90
31117: PUSH
31118: LD_INT 1
31120: ST_TO_ADDR
// minersList := [ ] ;
31121: LD_ADDR_EXP 91
31125: PUSH
31126: EMPTY
31127: ST_TO_ADDR
// minerMinesList := [ ] ;
31128: LD_ADDR_EXP 92
31132: PUSH
31133: EMPTY
31134: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
31135: LD_ADDR_EXP 93
31139: PUSH
31140: LD_INT 10
31142: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31143: LD_ADDR_VAR 0 1
31147: PUSH
31148: LD_INT 34
31150: PUSH
31151: LD_INT 81
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31236
// begin if not i in minersList then
31166: LD_VAR 0 1
31170: PUSH
31171: LD_EXP 91
31175: IN
31176: NOT
31177: IFFALSE 31234
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31179: LD_ADDR_EXP 91
31183: PUSH
31184: LD_EXP 91
31188: PPUSH
31189: LD_EXP 91
31193: PUSH
31194: LD_INT 1
31196: PLUS
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 1
31207: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31208: LD_ADDR_EXP 92
31212: PUSH
31213: LD_EXP 92
31217: PPUSH
31218: LD_EXP 92
31222: PUSH
31223: LD_INT 1
31225: PLUS
31226: PPUSH
31227: EMPTY
31228: PPUSH
31229: CALL_OW 1
31233: ST_TO_ADDR
// end end ;
31234: GO 31163
31236: POP
31237: POP
// end ;
31238: PPOPN 1
31240: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
31241: LD_EXP 90
31245: IFFALSE 31276
31247: PUSH
31248: LD_EXP 92
31252: PPUSH
31253: CALL 36352 0 1
31257: IFTRUE 31275
31259: PUSH
31260: LD_INT 34
31262: PUSH
31263: LD_INT 81
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: OR
31275: AND
31276: IFFALSE 31796
31278: GO 31280
31280: DISABLE
31281: LD_INT 0
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
// begin enable ;
31287: ENABLE
// for i := minerMinesList downto 1 do
31288: LD_ADDR_VAR 0 1
31292: PUSH
31293: DOUBLE
31294: LD_EXP 92
31298: INC
31299: ST_TO_ADDR
31300: LD_INT 1
31302: PUSH
31303: FOR_DOWNTO
31304: IFFALSE 31794
// begin side := GetSide ( minersList [ i ] ) ;
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_EXP 91
31315: PUSH
31316: LD_VAR 0 1
31320: ARRAY
31321: PPUSH
31322: CALL_OW 255
31326: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
31327: LD_EXP 91
31331: PUSH
31332: LD_VAR 0 1
31336: ARRAY
31337: PPUSH
31338: CALL_OW 300
31342: IFFALSE 31363
31344: PUSH
31345: LD_VAR 0 3
31349: PUSH
31350: LD_OWVAR 2
31354: PUSH
31355: LD_INT 9
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: IN
31362: AND
31363: IFFALSE 31396
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
31365: LD_EXP 91
31369: PUSH
31370: LD_VAR 0 1
31374: ARRAY
31375: PPUSH
31376: LD_EXP 92
31380: PUSH
31381: LD_VAR 0 1
31385: ARRAY
31386: PPUSH
31387: CALL 36352 0 1
31391: PPUSH
31392: CALL_OW 505
// if not minerMinesList [ i ] then
31396: LD_EXP 92
31400: PUSH
31401: LD_VAR 0 1
31405: ARRAY
31406: NOT
31407: IFFALSE 31411
// continue ;
31409: GO 31303
// for j := minerMinesList [ i ] downto 1 do
31411: LD_ADDR_VAR 0 2
31415: PUSH
31416: DOUBLE
31417: LD_EXP 92
31421: PUSH
31422: LD_VAR 0 1
31426: ARRAY
31427: INC
31428: ST_TO_ADDR
31429: LD_INT 1
31431: PUSH
31432: FOR_DOWNTO
31433: IFFALSE 31790
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
31435: LD_EXP 91
31439: PUSH
31440: LD_VAR 0 1
31444: ARRAY
31445: PPUSH
31446: CALL_OW 301
31450: IFTRUE 31470
31452: PUSH
31453: LD_EXP 91
31457: PUSH
31458: LD_VAR 0 1
31462: ARRAY
31463: PPUSH
31464: CALL_OW 305
31468: NOT
31469: OR
31470: IFFALSE 31561
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31472: LD_EXP 92
31476: PUSH
31477: LD_VAR 0 1
31481: ARRAY
31482: PUSH
31483: LD_VAR 0 2
31487: ARRAY
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: PPUSH
31493: LD_EXP 92
31497: PUSH
31498: LD_VAR 0 1
31502: ARRAY
31503: PUSH
31504: LD_VAR 0 2
31508: ARRAY
31509: PUSH
31510: LD_INT 2
31512: ARRAY
31513: PPUSH
31514: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31518: LD_ADDR_EXP 92
31522: PUSH
31523: LD_EXP 92
31527: PPUSH
31528: LD_VAR 0 1
31532: PPUSH
31533: LD_EXP 92
31537: PUSH
31538: LD_VAR 0 1
31542: ARRAY
31543: PPUSH
31544: LD_VAR 0 2
31548: PPUSH
31549: CALL_OW 3
31553: PPUSH
31554: CALL_OW 1
31558: ST_TO_ADDR
// continue ;
31559: GO 31432
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31561: LD_ADDR_VAR 0 4
31565: PUSH
31566: LD_EXP 92
31570: PUSH
31571: LD_VAR 0 1
31575: ARRAY
31576: PUSH
31577: LD_VAR 0 2
31581: ARRAY
31582: PUSH
31583: LD_INT 1
31585: ARRAY
31586: PPUSH
31587: LD_EXP 92
31591: PUSH
31592: LD_VAR 0 1
31596: ARRAY
31597: PUSH
31598: LD_VAR 0 2
31602: ARRAY
31603: PUSH
31604: LD_INT 2
31606: ARRAY
31607: PPUSH
31608: CALL_OW 428
31612: ST_TO_ADDR
// if not tmp then
31613: LD_VAR 0 4
31617: NOT
31618: IFFALSE 31622
// continue ;
31620: GO 31432
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31622: LD_VAR 0 4
31626: PUSH
31627: LD_INT 81
31629: PUSH
31630: LD_VAR 0 3
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PPUSH
31639: CALL_OW 69
31643: IN
31644: IFFALSE 31694
31646: PUSH
31647: LD_EXP 92
31651: PUSH
31652: LD_VAR 0 1
31656: ARRAY
31657: PUSH
31658: LD_VAR 0 2
31662: ARRAY
31663: PUSH
31664: LD_INT 1
31666: ARRAY
31667: PPUSH
31668: LD_EXP 92
31672: PUSH
31673: LD_VAR 0 1
31677: ARRAY
31678: PUSH
31679: LD_VAR 0 2
31683: ARRAY
31684: PUSH
31685: LD_INT 2
31687: ARRAY
31688: PPUSH
31689: CALL_OW 458
31693: AND
31694: IFFALSE 31788
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31696: LD_EXP 92
31700: PUSH
31701: LD_VAR 0 1
31705: ARRAY
31706: PUSH
31707: LD_VAR 0 2
31711: ARRAY
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: LD_EXP 92
31721: PUSH
31722: LD_VAR 0 1
31726: ARRAY
31727: PUSH
31728: LD_VAR 0 2
31732: ARRAY
31733: PUSH
31734: LD_INT 2
31736: ARRAY
31737: PPUSH
31738: LD_VAR 0 3
31742: PPUSH
31743: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31747: LD_ADDR_EXP 92
31751: PUSH
31752: LD_EXP 92
31756: PPUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: LD_EXP 92
31766: PUSH
31767: LD_VAR 0 1
31771: ARRAY
31772: PPUSH
31773: LD_VAR 0 2
31777: PPUSH
31778: CALL_OW 3
31782: PPUSH
31783: CALL_OW 1
31787: ST_TO_ADDR
// end ; end ;
31788: GO 31432
31790: POP
31791: POP
// end ;
31792: GO 31303
31794: POP
31795: POP
// end ;
31796: PPOPN 4
31798: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31799: LD_INT 0
31801: PPUSH
31802: PPUSH
31803: PPUSH
31804: PPUSH
// result := false ;
31805: LD_ADDR_VAR 0 4
31809: PUSH
31810: LD_INT 0
31812: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 264
31822: PUSH
31823: LD_INT 81
31825: EQUAL
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 32201
// side := GetSide ( unit ) ;
31831: LD_ADDR_VAR 0 6
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 255
31845: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31846: LD_ADDR_VAR 0 5
31850: PUSH
31851: LD_EXP 91
31855: PPUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL 39053 0 2
31865: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31866: LD_EXP 92
31870: PUSH
31871: LD_VAR 0 5
31875: ARRAY
31876: PUSH
31877: LD_EXP 93
31881: GREATEREQUAL
31882: IFFALSE 31886
// exit ;
31884: GO 32201
// ComMoveXY ( unit , x , y ) ;
31886: LD_VAR 0 1
31890: PPUSH
31891: LD_VAR 0 2
31895: PPUSH
31896: LD_VAR 0 3
31900: PPUSH
31901: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31905: LD_INT 35
31907: PPUSH
31908: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31912: LD_VAR 0 1
31916: PPUSH
31917: LD_VAR 0 2
31921: PPUSH
31922: LD_VAR 0 3
31926: PPUSH
31927: CALL 71109 0 3
31931: NOT
31932: IFFALSE 31945
31934: PUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 314
31944: AND
31945: IFFALSE 31949
// exit ;
31947: GO 32201
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31949: LD_VAR 0 2
31953: PPUSH
31954: LD_VAR 0 3
31958: PPUSH
31959: CALL_OW 428
31963: PUSH
31964: LD_VAR 0 1
31968: EQUAL
31969: IFFALSE 31983
31971: PUSH
31972: LD_VAR 0 1
31976: PPUSH
31977: CALL_OW 314
31981: NOT
31982: AND
31983: IFFALSE 31905
// if MineAtPos ( x , y ) then
31985: LD_VAR 0 2
31989: PPUSH
31990: LD_VAR 0 3
31994: PPUSH
31995: CALL_OW 458
31999: IFFALSE 32003
// exit ;
32001: GO 32201
// if your_side = side then
32003: LD_OWVAR 2
32007: PUSH
32008: LD_VAR 0 6
32012: EQUAL
32013: IFFALSE 32032
// PlaySoundXY ( x , y , PlantMine ) ;
32015: LD_VAR 0 2
32019: PPUSH
32020: LD_VAR 0 3
32024: PPUSH
32025: LD_STRING PlantMine
32027: PPUSH
32028: CALL_OW 366
// repeat wait ( 1 ) ;
32032: LD_INT 1
32034: PPUSH
32035: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
32039: LD_VAR 0 2
32043: PPUSH
32044: LD_VAR 0 3
32048: PPUSH
32049: LD_VAR 0 6
32053: PPUSH
32054: LD_INT 0
32056: PPUSH
32057: CALL_OW 454
32061: IFFALSE 32032
// if MineAtPos ( x , y ) then
32063: LD_VAR 0 2
32067: PPUSH
32068: LD_VAR 0 3
32072: PPUSH
32073: CALL_OW 458
32077: IFFALSE 32193
// begin for i in minerMinesList [ index ] do
32079: LD_ADDR_VAR 0 7
32083: PUSH
32084: LD_EXP 92
32088: PUSH
32089: LD_VAR 0 5
32093: ARRAY
32094: PUSH
32095: FOR_IN
32096: IFFALSE 32138
// if i [ 1 ] = x and i [ 2 ] = y then
32098: LD_VAR 0 7
32102: PUSH
32103: LD_INT 1
32105: ARRAY
32106: PUSH
32107: LD_VAR 0 2
32111: EQUAL
32112: IFFALSE 32130
32114: PUSH
32115: LD_VAR 0 7
32119: PUSH
32120: LD_INT 2
32122: ARRAY
32123: PUSH
32124: LD_VAR 0 3
32128: EQUAL
32129: AND
32130: IFFALSE 32136
// exit ;
32132: POP
32133: POP
32134: GO 32201
32136: GO 32095
32138: POP
32139: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32140: LD_ADDR_EXP 92
32144: PUSH
32145: LD_EXP 92
32149: PPUSH
32150: LD_VAR 0 5
32154: PUSH
32155: LD_EXP 92
32159: PUSH
32160: LD_VAR 0 5
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: PLUS
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PPUSH
32174: LD_VAR 0 2
32178: PUSH
32179: LD_VAR 0 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL 39270 0 3
32192: ST_TO_ADDR
// end ; result := true ;
32193: LD_ADDR_VAR 0 4
32197: PUSH
32198: LD_INT 1
32200: ST_TO_ADDR
// end ;
32201: LD_VAR 0 4
32205: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32206: LD_INT 0
32208: PPUSH
32209: PPUSH
32210: PPUSH
// if not unit in minersList then
32211: LD_VAR 0 1
32215: PUSH
32216: LD_EXP 91
32220: IN
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32433
// index := GetElementIndex ( minersList , unit ) ;
32226: LD_ADDR_VAR 0 6
32230: PUSH
32231: LD_EXP 91
32235: PPUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL 39053 0 2
32245: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32246: LD_ADDR_VAR 0 5
32250: PUSH
32251: DOUBLE
32252: LD_EXP 92
32256: PUSH
32257: LD_VAR 0 6
32261: ARRAY
32262: INC
32263: ST_TO_ADDR
32264: LD_INT 1
32266: PUSH
32267: FOR_DOWNTO
32268: IFFALSE 32431
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32270: LD_EXP 92
32274: PUSH
32275: LD_VAR 0 6
32279: ARRAY
32280: PUSH
32281: LD_VAR 0 5
32285: ARRAY
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: PPUSH
32291: LD_EXP 92
32295: PUSH
32296: LD_VAR 0 6
32300: ARRAY
32301: PUSH
32302: LD_VAR 0 5
32306: ARRAY
32307: PUSH
32308: LD_INT 2
32310: ARRAY
32311: PPUSH
32312: LD_VAR 0 2
32316: PPUSH
32317: LD_VAR 0 3
32321: PPUSH
32322: CALL_OW 298
32326: PUSH
32327: LD_INT 6
32329: LESS
32330: IFFALSE 32429
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32332: LD_EXP 92
32336: PUSH
32337: LD_VAR 0 6
32341: ARRAY
32342: PUSH
32343: LD_VAR 0 5
32347: ARRAY
32348: PUSH
32349: LD_INT 1
32351: ARRAY
32352: PPUSH
32353: LD_EXP 92
32357: PUSH
32358: LD_VAR 0 6
32362: ARRAY
32363: PUSH
32364: LD_VAR 0 5
32368: ARRAY
32369: PUSH
32370: LD_INT 2
32372: ARRAY
32373: PPUSH
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 255
32383: PPUSH
32384: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32388: LD_ADDR_EXP 92
32392: PUSH
32393: LD_EXP 92
32397: PPUSH
32398: LD_VAR 0 6
32402: PPUSH
32403: LD_EXP 92
32407: PUSH
32408: LD_VAR 0 6
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 5
32418: PPUSH
32419: CALL_OW 3
32423: PPUSH
32424: CALL_OW 1
32428: ST_TO_ADDR
// end ; end ;
32429: GO 32267
32431: POP
32432: POP
// end ;
32433: LD_VAR 0 4
32437: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32438: LD_INT 0
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32449: LD_VAR 0 1
32453: PPUSH
32454: CALL_OW 264
32458: PUSH
32459: LD_INT 81
32461: EQUAL
32462: NOT
32463: IFTRUE 32478
32465: PUSH
32466: LD_VAR 0 1
32470: PUSH
32471: LD_EXP 91
32475: IN
32476: NOT
32477: OR
32478: IFFALSE 32482
// exit ;
32480: GO 32808
// index := GetElementIndex ( minersList , unit ) ;
32482: LD_ADDR_VAR 0 6
32486: PUSH
32487: LD_EXP 91
32491: PPUSH
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL 39053 0 2
32501: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32502: LD_ADDR_VAR 0 8
32506: PUSH
32507: LD_EXP 93
32511: PUSH
32512: LD_EXP 92
32516: PUSH
32517: LD_VAR 0 6
32521: ARRAY
32522: MINUS
32523: ST_TO_ADDR
// if not minesFreeAmount then
32524: LD_VAR 0 8
32528: NOT
32529: IFFALSE 32533
// exit ;
32531: GO 32808
// tmp := [ ] ;
32533: LD_ADDR_VAR 0 7
32537: PUSH
32538: EMPTY
32539: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32540: LD_ADDR_VAR 0 5
32544: PUSH
32545: DOUBLE
32546: LD_INT 1
32548: DEC
32549: ST_TO_ADDR
32550: LD_VAR 0 8
32554: PUSH
32555: FOR_TO
32556: IFFALSE 32755
// begin _d := rand ( 0 , 5 ) ;
32558: LD_ADDR_VAR 0 11
32562: PUSH
32563: LD_INT 0
32565: PPUSH
32566: LD_INT 5
32568: PPUSH
32569: CALL_OW 12
32573: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32574: LD_ADDR_VAR 0 12
32578: PUSH
32579: LD_INT 2
32581: PPUSH
32582: LD_INT 6
32584: PPUSH
32585: CALL_OW 12
32589: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32590: LD_ADDR_VAR 0 9
32594: PUSH
32595: LD_VAR 0 2
32599: PPUSH
32600: LD_VAR 0 11
32604: PPUSH
32605: LD_VAR 0 12
32609: PPUSH
32610: CALL_OW 272
32614: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32615: LD_ADDR_VAR 0 10
32619: PUSH
32620: LD_VAR 0 3
32624: PPUSH
32625: LD_VAR 0 11
32629: PPUSH
32630: LD_VAR 0 12
32634: PPUSH
32635: CALL_OW 273
32639: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32640: LD_VAR 0 9
32644: PPUSH
32645: LD_VAR 0 10
32649: PPUSH
32650: CALL_OW 488
32654: IFFALSE 32678
32656: PUSH
32657: LD_VAR 0 9
32661: PUSH
32662: LD_VAR 0 10
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_VAR 0 7
32675: IN
32676: NOT
32677: AND
32678: IFFALSE 32697
32680: PUSH
32681: LD_VAR 0 9
32685: PPUSH
32686: LD_VAR 0 10
32690: PPUSH
32691: CALL_OW 458
32695: NOT
32696: AND
32697: IFFALSE 32739
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32699: LD_ADDR_VAR 0 7
32703: PUSH
32704: LD_VAR 0 7
32708: PPUSH
32709: LD_VAR 0 7
32713: PUSH
32714: LD_INT 1
32716: PLUS
32717: PPUSH
32718: LD_VAR 0 9
32722: PUSH
32723: LD_VAR 0 10
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PPUSH
32732: CALL_OW 1
32736: ST_TO_ADDR
32737: GO 32753
// i := i - 1 ;
32739: LD_ADDR_VAR 0 5
32743: PUSH
32744: LD_VAR 0 5
32748: PUSH
32749: LD_INT 1
32751: MINUS
32752: ST_TO_ADDR
// end ;
32753: GO 32555
32755: POP
32756: POP
// for i in tmp do
32757: LD_ADDR_VAR 0 5
32761: PUSH
32762: LD_VAR 0 7
32766: PUSH
32767: FOR_IN
32768: IFFALSE 32806
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32770: LD_VAR 0 1
32774: PPUSH
32775: LD_VAR 0 5
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: PPUSH
32784: LD_VAR 0 5
32788: PUSH
32789: LD_INT 2
32791: ARRAY
32792: PPUSH
32793: CALL 31799 0 3
32797: NOT
32798: IFFALSE 32804
// exit ;
32800: POP
32801: POP
32802: GO 32808
32804: GO 32767
32806: POP
32807: POP
// end ;
32808: LD_VAR 0 4
32812: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32813: LD_INT 0
32815: PPUSH
32816: PPUSH
32817: PPUSH
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
32823: PPUSH
// if GetClass ( unit ) <> class_sniper then
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 257
32833: PUSH
32834: LD_INT 5
32836: NONEQUAL
32837: IFFALSE 32841
// exit ;
32839: GO 33311
// dist := 8 ;
32841: LD_ADDR_VAR 0 5
32845: PUSH
32846: LD_INT 8
32848: ST_TO_ADDR
// viewRange := 12 ;
32849: LD_ADDR_VAR 0 8
32853: PUSH
32854: LD_INT 12
32856: ST_TO_ADDR
// side := GetSide ( unit ) ;
32857: LD_ADDR_VAR 0 6
32861: PUSH
32862: LD_VAR 0 1
32866: PPUSH
32867: CALL_OW 255
32871: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32872: LD_INT 61
32874: PPUSH
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 321
32884: PUSH
32885: LD_INT 2
32887: EQUAL
32888: IFFALSE 32898
// viewRange := 16 ;
32890: LD_ADDR_VAR 0 8
32894: PUSH
32895: LD_INT 16
32897: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32898: LD_VAR 0 1
32902: PPUSH
32903: LD_VAR 0 2
32907: PPUSH
32908: LD_VAR 0 3
32912: PPUSH
32913: CALL_OW 297
32917: PUSH
32918: LD_VAR 0 5
32922: GREATER
32923: IFFALSE 33002
// begin ComMoveXY ( unit , x , y ) ;
32925: LD_VAR 0 1
32929: PPUSH
32930: LD_VAR 0 2
32934: PPUSH
32935: LD_VAR 0 3
32939: PPUSH
32940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32944: LD_INT 35
32946: PPUSH
32947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32951: LD_VAR 0 1
32955: PPUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: LD_VAR 0 3
32965: PPUSH
32966: CALL 71109 0 3
32970: NOT
32971: IFFALSE 32975
// exit ;
32973: GO 33311
// until GetDistUnitXY ( unit , x , y ) < dist ;
32975: LD_VAR 0 1
32979: PPUSH
32980: LD_VAR 0 2
32984: PPUSH
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 297
32994: PUSH
32995: LD_VAR 0 5
32999: LESS
33000: IFFALSE 32944
// end ; ComTurnXY ( unit , x , y ) ;
33002: LD_VAR 0 1
33006: PPUSH
33007: LD_VAR 0 2
33011: PPUSH
33012: LD_VAR 0 3
33016: PPUSH
33017: CALL_OW 118
// repeat if Multiplayer then
33021: LD_OWVAR 4
33025: IFFALSE 33036
// wait ( 35 ) else
33027: LD_INT 35
33029: PPUSH
33030: CALL_OW 67
33034: GO 33043
// wait ( 5 ) ;
33036: LD_INT 5
33038: PPUSH
33039: CALL_OW 67
// _d := GetDir ( unit ) ;
33043: LD_ADDR_VAR 0 11
33047: PUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 254
33057: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33058: LD_ADDR_VAR 0 7
33062: PUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 250
33072: PPUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 251
33082: PPUSH
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 3
33092: PPUSH
33093: CALL 73745 0 4
33097: ST_TO_ADDR
// until dir = _d ;
33098: LD_VAR 0 7
33102: PUSH
33103: LD_VAR 0 11
33107: EQUAL
33108: IFFALSE 33021
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33110: LD_ADDR_VAR 0 9
33114: PUSH
33115: LD_VAR 0 1
33119: PPUSH
33120: CALL_OW 250
33124: PPUSH
33125: LD_VAR 0 7
33129: PPUSH
33130: LD_VAR 0 5
33134: PPUSH
33135: CALL_OW 272
33139: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33140: LD_ADDR_VAR 0 10
33144: PUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 251
33154: PPUSH
33155: LD_VAR 0 7
33159: PPUSH
33160: LD_VAR 0 5
33164: PPUSH
33165: CALL_OW 273
33169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33170: LD_VAR 0 9
33174: PPUSH
33175: LD_VAR 0 10
33179: PPUSH
33180: CALL_OW 488
33184: NOT
33185: IFFALSE 33189
// exit ;
33187: GO 33311
// ComAnimCustom ( unit , 1 ) ;
33189: LD_VAR 0 1
33193: PPUSH
33194: LD_INT 1
33196: PPUSH
33197: CALL_OW 592
// p := 0 ;
33201: LD_ADDR_VAR 0 12
33205: PUSH
33206: LD_INT 0
33208: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33209: LD_VAR 0 9
33213: PPUSH
33214: LD_VAR 0 10
33218: PPUSH
33219: LD_VAR 0 6
33223: PPUSH
33224: LD_VAR 0 8
33228: PPUSH
33229: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
33233: LD_INT 35
33235: PPUSH
33236: CALL_OW 67
// p := Inc ( p ) ;
33240: LD_ADDR_VAR 0 12
33244: PUSH
33245: LD_VAR 0 12
33249: PPUSH
33250: CALL 73701 0 1
33254: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33255: LD_VAR 0 12
33259: PUSH
33260: LD_INT 3
33262: EQUAL
33263: IFTRUE 33277
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 302
33275: NOT
33276: OR
33277: IFTRUE 33290
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 301
33289: OR
33290: IFFALSE 33233
// RemoveSeeing ( _x , _y , side ) ;
33292: LD_VAR 0 9
33296: PPUSH
33297: LD_VAR 0 10
33301: PPUSH
33302: LD_VAR 0 6
33306: PPUSH
33307: CALL_OW 331
// end ;
33311: LD_VAR 0 4
33315: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
33316: LD_INT 0
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
// if not unit then
33329: LD_VAR 0 1
33333: NOT
33334: IFFALSE 33338
// exit ;
33336: GO 33609
// side := GetSide ( unit ) ;
33338: LD_ADDR_VAR 0 3
33342: PUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 255
33352: ST_TO_ADDR
// x := GetX ( unit ) ;
33353: LD_ADDR_VAR 0 5
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 250
33367: ST_TO_ADDR
// y := GetY ( unit ) ;
33368: LD_ADDR_VAR 0 6
33372: PUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 251
33382: ST_TO_ADDR
// r := 8 ;
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: LD_INT 8
33390: ST_TO_ADDR
// if x - r < 0 then
33391: LD_VAR 0 5
33395: PUSH
33396: LD_VAR 0 4
33400: MINUS
33401: PUSH
33402: LD_INT 0
33404: LESS
33405: IFFALSE 33417
// min_x := 0 else
33407: LD_ADDR_VAR 0 7
33411: PUSH
33412: LD_INT 0
33414: ST_TO_ADDR
33415: GO 33433
// min_x := x - r ;
33417: LD_ADDR_VAR 0 7
33421: PUSH
33422: LD_VAR 0 5
33426: PUSH
33427: LD_VAR 0 4
33431: MINUS
33432: ST_TO_ADDR
// if y - r < 0 then
33433: LD_VAR 0 6
33437: PUSH
33438: LD_VAR 0 4
33442: MINUS
33443: PUSH
33444: LD_INT 0
33446: LESS
33447: IFFALSE 33459
// min_y := 0 else
33449: LD_ADDR_VAR 0 8
33453: PUSH
33454: LD_INT 0
33456: ST_TO_ADDR
33457: GO 33475
// min_y := y - r ;
33459: LD_ADDR_VAR 0 8
33463: PUSH
33464: LD_VAR 0 6
33468: PUSH
33469: LD_VAR 0 4
33473: MINUS
33474: ST_TO_ADDR
// max_x := x + r ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_VAR 0 5
33484: PUSH
33485: LD_VAR 0 4
33489: PLUS
33490: ST_TO_ADDR
// max_y := y + r ;
33491: LD_ADDR_VAR 0 10
33495: PUSH
33496: LD_VAR 0 6
33500: PUSH
33501: LD_VAR 0 4
33505: PLUS
33506: ST_TO_ADDR
// for _x = min_x to max_x do
33507: LD_ADDR_VAR 0 11
33511: PUSH
33512: DOUBLE
33513: LD_VAR 0 7
33517: DEC
33518: ST_TO_ADDR
33519: LD_VAR 0 9
33523: PUSH
33524: FOR_TO
33525: IFFALSE 33607
// for _y = min_y to max_y do
33527: LD_ADDR_VAR 0 12
33531: PUSH
33532: DOUBLE
33533: LD_VAR 0 8
33537: DEC
33538: ST_TO_ADDR
33539: LD_VAR 0 10
33543: PUSH
33544: FOR_TO
33545: IFFALSE 33603
// begin if not ValidHex ( _x , _y ) then
33547: LD_VAR 0 11
33551: PPUSH
33552: LD_VAR 0 12
33556: PPUSH
33557: CALL_OW 488
33561: NOT
33562: IFFALSE 33566
// continue ;
33564: GO 33544
// if MineAtPos ( _x , _y ) then
33566: LD_VAR 0 11
33570: PPUSH
33571: LD_VAR 0 12
33575: PPUSH
33576: CALL_OW 458
33580: IFFALSE 33601
// ViewMineAtPos ( _x , _y , side ) ;
33582: LD_VAR 0 11
33586: PPUSH
33587: LD_VAR 0 12
33591: PPUSH
33592: LD_VAR 0 3
33596: PPUSH
33597: CALL_OW 457
// end ;
33601: GO 33544
33603: POP
33604: POP
33605: GO 33524
33607: POP
33608: POP
// end ;
33609: LD_VAR 0 2
33613: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
33614: LD_INT 0
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
// if not units then
33623: LD_VAR 0 1
33627: NOT
33628: IFFALSE 33632
// exit ;
33630: GO 34096
// scaners := [ ] ;
33632: LD_ADDR_VAR 0 6
33636: PUSH
33637: EMPTY
33638: ST_TO_ADDR
// for i in units do
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_VAR 0 1
33648: PUSH
33649: FOR_IN
33650: IFFALSE 33807
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33652: LD_VAR 0 3
33656: PPUSH
33657: CALL_OW 264
33661: PUSH
33662: LD_INT 11
33664: NONEQUAL
33665: IFTRUE 33679
33667: PUSH
33668: LD_VAR 0 3
33672: PPUSH
33673: CALL_OW 302
33677: NOT
33678: OR
33679: IFTRUE 33696
33681: PUSH
33682: LD_VAR 0 3
33686: PPUSH
33687: CALL_OW 110
33691: PUSH
33692: LD_INT 502
33694: EQUAL
33695: OR
33696: IFFALSE 33700
// continue ;
33698: GO 33649
// ComStop ( i ) ;
33700: LD_VAR 0 3
33704: PPUSH
33705: CALL_OW 141
// x := GetX ( i ) ;
33709: LD_ADDR_VAR 0 4
33713: PUSH
33714: LD_VAR 0 3
33718: PPUSH
33719: CALL_OW 250
33723: ST_TO_ADDR
// y := GetY ( i ) ;
33724: LD_ADDR_VAR 0 5
33728: PUSH
33729: LD_VAR 0 3
33733: PPUSH
33734: CALL_OW 251
33738: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33739: LD_VAR 0 3
33743: PPUSH
33744: CALL_OW 255
33748: PUSH
33749: LD_OWVAR 2
33753: EQUAL
33754: IFFALSE 33773
// PlaySoundXY ( x , y , mineDetector ) ;
33756: LD_VAR 0 4
33760: PPUSH
33761: LD_VAR 0 5
33765: PPUSH
33766: LD_STRING mineDetector
33768: PPUSH
33769: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33773: LD_ADDR_VAR 0 6
33777: PUSH
33778: LD_VAR 0 6
33782: PPUSH
33783: LD_VAR 0 3
33787: PPUSH
33788: CALL 72328 0 2
33792: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33793: LD_VAR 0 3
33797: PPUSH
33798: LD_INT 502
33800: PPUSH
33801: CALL_OW 109
// end ;
33805: GO 33649
33807: POP
33808: POP
// if not scaners then
33809: LD_VAR 0 6
33813: NOT
33814: IFFALSE 33818
// exit ;
33816: GO 34096
// wait ( 3 ) ;
33818: LD_INT 3
33820: PPUSH
33821: CALL_OW 67
// timer := 6 ;
33825: LD_ADDR_VAR 0 7
33829: PUSH
33830: LD_INT 6
33832: ST_TO_ADDR
// repeat for i in scaners do
33833: LD_ADDR_VAR 0 3
33837: PUSH
33838: LD_VAR 0 6
33842: PUSH
33843: FOR_IN
33844: IFFALSE 33994
// begin side := GetSide ( i ) ;
33846: LD_ADDR_VAR 0 8
33850: PUSH
33851: LD_VAR 0 3
33855: PPUSH
33856: CALL_OW 255
33860: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33861: LD_VAR 0 3
33865: PPUSH
33866: CALL_OW 302
33870: NOT
33871: IFTRUE 33884
33873: PUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 314
33883: OR
33884: IFTRUE 33915
33886: PUSH
33887: LD_VAR 0 3
33891: PPUSH
33892: CALL_OW 263
33896: PUSH
33897: LD_INT 1
33899: EQUAL
33900: IFFALSE 33914
33902: PUSH
33903: LD_VAR 0 3
33907: PPUSH
33908: CALL_OW 311
33912: NOT
33913: AND
33914: OR
33915: IFFALSE 33959
// begin SetUnitDisplayNumber ( i , 0 ) ;
33917: LD_VAR 0 3
33921: PPUSH
33922: LD_INT 0
33924: PPUSH
33925: CALL_OW 505
// SetTag ( i , 0 ) ;
33929: LD_VAR 0 3
33933: PPUSH
33934: LD_INT 0
33936: PPUSH
33937: CALL_OW 109
// scaners := scaners diff i ;
33941: LD_ADDR_VAR 0 6
33945: PUSH
33946: LD_VAR 0 6
33950: PUSH
33951: LD_VAR 0 3
33955: DIFF
33956: ST_TO_ADDR
// continue ;
33957: GO 33843
// end ; if side in [ your_side , 9 ] then
33959: LD_VAR 0 8
33963: PUSH
33964: LD_OWVAR 2
33968: PUSH
33969: LD_INT 9
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: IN
33976: IFFALSE 33992
// SetUnitDisplayNumber ( i , timer ) ;
33978: LD_VAR 0 3
33982: PPUSH
33983: LD_VAR 0 7
33987: PPUSH
33988: CALL_OW 505
// end ;
33992: GO 33843
33994: POP
33995: POP
// if not scaners then
33996: LD_VAR 0 6
34000: NOT
34001: IFFALSE 34005
// exit ;
34003: GO 34096
// timer := Dec ( timer ) ;
34005: LD_ADDR_VAR 0 7
34009: PUSH
34010: LD_VAR 0 7
34014: PPUSH
34015: CALL 73723 0 1
34019: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34020: LD_INT 35
34022: PPUSH
34023: CALL_OW 67
// until timer = 0 ;
34027: LD_VAR 0 7
34031: PUSH
34032: LD_INT 0
34034: EQUAL
34035: IFFALSE 33833
// if not scaners then
34037: LD_VAR 0 6
34041: NOT
34042: IFFALSE 34046
// exit ;
34044: GO 34096
// for i in scaners do
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: LD_VAR 0 6
34055: PUSH
34056: FOR_IN
34057: IFFALSE 34094
// begin SetUnitDisplayNumber ( i , 0 ) ;
34059: LD_VAR 0 3
34063: PPUSH
34064: LD_INT 0
34066: PPUSH
34067: CALL_OW 505
// SetTag ( i , 0 ) ;
34071: LD_VAR 0 3
34075: PPUSH
34076: LD_INT 0
34078: PPUSH
34079: CALL_OW 109
// RevealDetectorMine ( i ) ;
34083: LD_VAR 0 3
34087: PPUSH
34088: CALL 33316 0 1
// end ;
34092: GO 34056
34094: POP
34095: POP
// end ;
34096: LD_VAR 0 2
34100: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
34101: LD_INT 0
34103: PPUSH
// if p1 = mine_detector_mode then
34104: LD_VAR 0 2
34108: PUSH
34109: LD_INT 103
34111: EQUAL
34112: IFFALSE 34123
// DetectMine ( units ) ;
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL 33614 0 1
// end ; end_of_file
34123: LD_VAR 0 7
34127: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34128: LD_INT 0
34130: PPUSH
34131: PPUSH
// if exist_mode then
34132: LD_VAR 0 2
34136: IFFALSE 34182
// begin unit := CreateCharacter ( prefix & ident ) ;
34138: LD_ADDR_VAR 0 5
34142: PUSH
34143: LD_VAR 0 3
34147: PUSH
34148: LD_VAR 0 1
34152: STR
34153: PPUSH
34154: CALL_OW 34
34158: ST_TO_ADDR
// if unit then
34159: LD_VAR 0 5
34163: IFFALSE 34180
// DeleteCharacters ( prefix & ident ) ;
34165: LD_VAR 0 3
34169: PUSH
34170: LD_VAR 0 1
34174: STR
34175: PPUSH
34176: CALL_OW 40
// end else
34180: GO 34197
// unit := NewCharacter ( ident ) ;
34182: LD_ADDR_VAR 0 5
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 25
34196: ST_TO_ADDR
// result := unit ;
34197: LD_ADDR_VAR 0 4
34201: PUSH
34202: LD_VAR 0 5
34206: ST_TO_ADDR
// end ;
34207: LD_VAR 0 4
34211: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
34212: LD_INT 0
34214: PPUSH
34215: PPUSH
// if exist_mode then
34216: LD_VAR 0 2
34220: IFFALSE 34245
// unit := CreateCharacter ( prefix & ident ) else
34222: LD_ADDR_VAR 0 5
34226: PUSH
34227: LD_VAR 0 3
34231: PUSH
34232: LD_VAR 0 1
34236: STR
34237: PPUSH
34238: CALL_OW 34
34242: ST_TO_ADDR
34243: GO 34260
// unit := NewCharacter ( ident ) ;
34245: LD_ADDR_VAR 0 5
34249: PUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 25
34259: ST_TO_ADDR
// result := unit ;
34260: LD_ADDR_VAR 0 4
34264: PUSH
34265: LD_VAR 0 5
34269: ST_TO_ADDR
// end ;
34270: LD_VAR 0 4
34274: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34275: LD_INT 0
34277: PPUSH
34278: PPUSH
// if not side or not nation then
34279: LD_VAR 0 1
34283: NOT
34284: IFTRUE 34293
34286: PUSH
34287: LD_VAR 0 2
34291: NOT
34292: OR
34293: IFFALSE 34297
// exit ;
34295: GO 35091
// case nation of nation_american :
34297: LD_VAR 0 2
34301: PUSH
34302: LD_INT 1
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34310
34308: GO 34532
34310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
34311: LD_ADDR_VAR 0 4
34315: PUSH
34316: LD_INT 35
34318: PUSH
34319: LD_INT 45
34321: PUSH
34322: LD_INT 46
34324: PUSH
34325: LD_INT 47
34327: PUSH
34328: LD_INT 82
34330: PUSH
34331: LD_INT 83
34333: PUSH
34334: LD_INT 84
34336: PUSH
34337: LD_INT 85
34339: PUSH
34340: LD_INT 86
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 2
34348: PUSH
34349: LD_INT 6
34351: PUSH
34352: LD_INT 15
34354: PUSH
34355: LD_INT 16
34357: PUSH
34358: LD_INT 7
34360: PUSH
34361: LD_INT 12
34363: PUSH
34364: LD_INT 13
34366: PUSH
34367: LD_INT 10
34369: PUSH
34370: LD_INT 14
34372: PUSH
34373: LD_INT 20
34375: PUSH
34376: LD_INT 21
34378: PUSH
34379: LD_INT 22
34381: PUSH
34382: LD_INT 25
34384: PUSH
34385: LD_INT 32
34387: PUSH
34388: LD_INT 27
34390: PUSH
34391: LD_INT 36
34393: PUSH
34394: LD_INT 69
34396: PUSH
34397: LD_INT 39
34399: PUSH
34400: LD_INT 34
34402: PUSH
34403: LD_INT 40
34405: PUSH
34406: LD_INT 48
34408: PUSH
34409: LD_INT 49
34411: PUSH
34412: LD_INT 50
34414: PUSH
34415: LD_INT 51
34417: PUSH
34418: LD_INT 52
34420: PUSH
34421: LD_INT 53
34423: PUSH
34424: LD_INT 54
34426: PUSH
34427: LD_INT 55
34429: PUSH
34430: LD_INT 56
34432: PUSH
34433: LD_INT 57
34435: PUSH
34436: LD_INT 58
34438: PUSH
34439: LD_INT 59
34441: PUSH
34442: LD_INT 60
34444: PUSH
34445: LD_INT 61
34447: PUSH
34448: LD_INT 62
34450: PUSH
34451: LD_INT 80
34453: PUSH
34454: LD_INT 82
34456: PUSH
34457: LD_INT 83
34459: PUSH
34460: LD_INT 84
34462: PUSH
34463: LD_INT 85
34465: PUSH
34466: LD_INT 86
34468: PUSH
34469: LD_INT 90
34471: PUSH
34472: LD_INT 93
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
34530: GO 35013
34532: LD_INT 2
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34774
34540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
34541: LD_ADDR_VAR 0 4
34545: PUSH
34546: LD_INT 35
34548: PUSH
34549: LD_INT 45
34551: PUSH
34552: LD_INT 46
34554: PUSH
34555: LD_INT 47
34557: PUSH
34558: LD_INT 82
34560: PUSH
34561: LD_INT 83
34563: PUSH
34564: LD_INT 84
34566: PUSH
34567: LD_INT 85
34569: PUSH
34570: LD_INT 87
34572: PUSH
34573: LD_INT 70
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 11
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 4
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: LD_INT 6
34593: PUSH
34594: LD_INT 15
34596: PUSH
34597: LD_INT 18
34599: PUSH
34600: LD_INT 7
34602: PUSH
34603: LD_INT 17
34605: PUSH
34606: LD_INT 8
34608: PUSH
34609: LD_INT 20
34611: PUSH
34612: LD_INT 21
34614: PUSH
34615: LD_INT 22
34617: PUSH
34618: LD_INT 72
34620: PUSH
34621: LD_INT 26
34623: PUSH
34624: LD_INT 69
34626: PUSH
34627: LD_INT 39
34629: PUSH
34630: LD_INT 40
34632: PUSH
34633: LD_INT 41
34635: PUSH
34636: LD_INT 42
34638: PUSH
34639: LD_INT 43
34641: PUSH
34642: LD_INT 48
34644: PUSH
34645: LD_INT 49
34647: PUSH
34648: LD_INT 50
34650: PUSH
34651: LD_INT 51
34653: PUSH
34654: LD_INT 52
34656: PUSH
34657: LD_INT 53
34659: PUSH
34660: LD_INT 54
34662: PUSH
34663: LD_INT 55
34665: PUSH
34666: LD_INT 56
34668: PUSH
34669: LD_INT 60
34671: PUSH
34672: LD_INT 61
34674: PUSH
34675: LD_INT 62
34677: PUSH
34678: LD_INT 66
34680: PUSH
34681: LD_INT 67
34683: PUSH
34684: LD_INT 68
34686: PUSH
34687: LD_INT 81
34689: PUSH
34690: LD_INT 82
34692: PUSH
34693: LD_INT 83
34695: PUSH
34696: LD_INT 84
34698: PUSH
34699: LD_INT 85
34701: PUSH
34702: LD_INT 87
34704: PUSH
34705: LD_INT 88
34707: PUSH
34708: LD_INT 92
34710: PUSH
34711: LD_INT 94
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
34772: GO 35013
34774: LD_INT 3
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 35012
34782: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34783: LD_ADDR_VAR 0 4
34787: PUSH
34788: LD_INT 46
34790: PUSH
34791: LD_INT 47
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 82
34802: PUSH
34803: LD_INT 83
34805: PUSH
34806: LD_INT 84
34808: PUSH
34809: LD_INT 85
34811: PUSH
34812: LD_INT 86
34814: PUSH
34815: LD_INT 11
34817: PUSH
34818: LD_INT 9
34820: PUSH
34821: LD_INT 20
34823: PUSH
34824: LD_INT 19
34826: PUSH
34827: LD_INT 21
34829: PUSH
34830: LD_INT 24
34832: PUSH
34833: LD_INT 22
34835: PUSH
34836: LD_INT 25
34838: PUSH
34839: LD_INT 28
34841: PUSH
34842: LD_INT 29
34844: PUSH
34845: LD_INT 30
34847: PUSH
34848: LD_INT 31
34850: PUSH
34851: LD_INT 37
34853: PUSH
34854: LD_INT 38
34856: PUSH
34857: LD_INT 32
34859: PUSH
34860: LD_INT 27
34862: PUSH
34863: LD_INT 33
34865: PUSH
34866: LD_INT 69
34868: PUSH
34869: LD_INT 39
34871: PUSH
34872: LD_INT 34
34874: PUSH
34875: LD_INT 40
34877: PUSH
34878: LD_INT 71
34880: PUSH
34881: LD_INT 23
34883: PUSH
34884: LD_INT 44
34886: PUSH
34887: LD_INT 48
34889: PUSH
34890: LD_INT 49
34892: PUSH
34893: LD_INT 50
34895: PUSH
34896: LD_INT 51
34898: PUSH
34899: LD_INT 52
34901: PUSH
34902: LD_INT 53
34904: PUSH
34905: LD_INT 54
34907: PUSH
34908: LD_INT 55
34910: PUSH
34911: LD_INT 56
34913: PUSH
34914: LD_INT 57
34916: PUSH
34917: LD_INT 58
34919: PUSH
34920: LD_INT 59
34922: PUSH
34923: LD_INT 63
34925: PUSH
34926: LD_INT 64
34928: PUSH
34929: LD_INT 65
34931: PUSH
34932: LD_INT 82
34934: PUSH
34935: LD_INT 83
34937: PUSH
34938: LD_INT 84
34940: PUSH
34941: LD_INT 85
34943: PUSH
34944: LD_INT 86
34946: PUSH
34947: LD_INT 89
34949: PUSH
34950: LD_INT 91
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35013
35012: POP
// if state > - 1 and state < 3 then
35013: LD_VAR 0 3
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: GREATER
35022: IFFALSE 35034
35024: PUSH
35025: LD_VAR 0 3
35029: PUSH
35030: LD_INT 3
35032: LESS
35033: AND
35034: IFFALSE 35091
// for i in result do
35036: LD_ADDR_VAR 0 5
35040: PUSH
35041: LD_VAR 0 4
35045: PUSH
35046: FOR_IN
35047: IFFALSE 35089
// if GetTech ( i , side ) <> state then
35049: LD_VAR 0 5
35053: PPUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 321
35063: PUSH
35064: LD_VAR 0 3
35068: NONEQUAL
35069: IFFALSE 35087
// result := result diff i ;
35071: LD_ADDR_VAR 0 4
35075: PUSH
35076: LD_VAR 0 4
35080: PUSH
35081: LD_VAR 0 5
35085: DIFF
35086: ST_TO_ADDR
35087: GO 35046
35089: POP
35090: POP
// end ;
35091: LD_VAR 0 4
35095: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
35100: PPUSH
// result := true ;
35101: LD_ADDR_VAR 0 3
35105: PUSH
35106: LD_INT 1
35108: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_VAR 0 2
35118: PPUSH
35119: CALL_OW 480
35123: ST_TO_ADDR
// if not tmp then
35124: LD_VAR 0 5
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 35182
// for i in tmp do
35133: LD_ADDR_VAR 0 4
35137: PUSH
35138: LD_VAR 0 5
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35180
// if GetTech ( i , side ) <> state_researched then
35146: LD_VAR 0 4
35150: PPUSH
35151: LD_VAR 0 1
35155: PPUSH
35156: CALL_OW 321
35160: PUSH
35161: LD_INT 2
35163: NONEQUAL
35164: IFFALSE 35178
// begin result := false ;
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_INT 0
35173: ST_TO_ADDR
// exit ;
35174: POP
35175: POP
35176: GO 35182
// end ;
35178: GO 35143
35180: POP
35181: POP
// end ;
35182: LD_VAR 0 3
35186: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35187: LD_INT 0
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35202: LD_VAR 0 1
35206: NOT
35207: IFTRUE 35224
35209: PUSH
35210: LD_VAR 0 1
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 9
35222: NONEQUAL
35223: OR
35224: IFFALSE 35228
// exit ;
35226: GO 35807
// side := GetSide ( unit ) ;
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 1
35237: PPUSH
35238: CALL_OW 255
35242: ST_TO_ADDR
// tech_space := tech_spacanom ;
35243: LD_ADDR_VAR 0 12
35247: PUSH
35248: LD_INT 29
35250: ST_TO_ADDR
// tech_time := tech_taurad ;
35251: LD_ADDR_VAR 0 13
35255: PUSH
35256: LD_INT 28
35258: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35259: LD_ADDR_VAR 0 11
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 310
35273: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35274: LD_VAR 0 11
35278: PPUSH
35279: CALL_OW 247
35283: PUSH
35284: LD_INT 2
35286: EQUAL
35287: IFFALSE 35291
// exit ;
35289: GO 35807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35291: LD_ADDR_VAR 0 8
35295: PUSH
35296: LD_INT 81
35298: PUSH
35299: LD_VAR 0 9
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: LD_INT 21
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PPUSH
35329: CALL_OW 69
35333: ST_TO_ADDR
// if not tmp then
35334: LD_VAR 0 8
35338: NOT
35339: IFFALSE 35343
// exit ;
35341: GO 35807
// if in_unit then
35343: LD_VAR 0 11
35347: IFFALSE 35371
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35349: LD_ADDR_VAR 0 10
35353: PUSH
35354: LD_VAR 0 8
35358: PPUSH
35359: LD_VAR 0 11
35363: PPUSH
35364: CALL_OW 74
35368: ST_TO_ADDR
35369: GO 35391
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35371: LD_ADDR_VAR 0 10
35375: PUSH
35376: LD_VAR 0 8
35380: PPUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL_OW 74
35390: ST_TO_ADDR
// if not enemy then
35391: LD_VAR 0 10
35395: NOT
35396: IFFALSE 35400
// exit ;
35398: GO 35807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35400: LD_VAR 0 11
35404: IFFALSE 35426
35406: PUSH
35407: LD_VAR 0 11
35411: PPUSH
35412: LD_VAR 0 10
35416: PPUSH
35417: CALL_OW 296
35421: PUSH
35422: LD_INT 13
35424: GREATER
35425: AND
35426: IFTRUE 35448
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: LD_VAR 0 10
35438: PPUSH
35439: CALL_OW 296
35443: PUSH
35444: LD_INT 12
35446: GREATER
35447: OR
35448: IFFALSE 35452
// exit ;
35450: GO 35807
// missile := [ 1 ] ;
35452: LD_ADDR_VAR 0 14
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35463: LD_VAR 0 9
35467: PPUSH
35468: LD_VAR 0 12
35472: PPUSH
35473: CALL_OW 325
35477: IFFALSE 35506
// missile := Replace ( missile , missile + 1 , 2 ) ;
35479: LD_ADDR_VAR 0 14
35483: PUSH
35484: LD_VAR 0 14
35488: PPUSH
35489: LD_VAR 0 14
35493: PUSH
35494: LD_INT 1
35496: PLUS
35497: PPUSH
35498: LD_INT 2
35500: PPUSH
35501: CALL_OW 1
35505: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35506: LD_VAR 0 9
35510: PPUSH
35511: LD_VAR 0 13
35515: PPUSH
35516: CALL_OW 325
35520: IFFALSE 35544
35522: PUSH
35523: LD_VAR 0 10
35527: PPUSH
35528: CALL_OW 255
35532: PPUSH
35533: LD_VAR 0 13
35537: PPUSH
35538: CALL_OW 325
35542: NOT
35543: AND
35544: IFFALSE 35573
// missile := Replace ( missile , missile + 1 , 3 ) ;
35546: LD_ADDR_VAR 0 14
35550: PUSH
35551: LD_VAR 0 14
35555: PPUSH
35556: LD_VAR 0 14
35560: PUSH
35561: LD_INT 1
35563: PLUS
35564: PPUSH
35565: LD_INT 3
35567: PPUSH
35568: CALL_OW 1
35572: ST_TO_ADDR
// if missile < 2 then
35573: LD_VAR 0 14
35577: PUSH
35578: LD_INT 2
35580: LESS
35581: IFFALSE 35585
// exit ;
35583: GO 35807
// x := GetX ( enemy ) ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 10
35594: PPUSH
35595: CALL_OW 250
35599: ST_TO_ADDR
// y := GetY ( enemy ) ;
35600: LD_ADDR_VAR 0 5
35604: PUSH
35605: LD_VAR 0 10
35609: PPUSH
35610: CALL_OW 251
35614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35615: LD_ADDR_VAR 0 6
35619: PUSH
35620: LD_VAR 0 4
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PPUSH
35629: LD_INT 1
35631: PPUSH
35632: CALL_OW 12
35636: PLUS
35637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35638: LD_ADDR_VAR 0 7
35642: PUSH
35643: LD_VAR 0 5
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PPUSH
35652: LD_INT 1
35654: PPUSH
35655: CALL_OW 12
35659: PLUS
35660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35661: LD_VAR 0 6
35665: PPUSH
35666: LD_VAR 0 7
35670: PPUSH
35671: CALL_OW 488
35675: NOT
35676: IFFALSE 35698
// begin _x := x ;
35678: LD_ADDR_VAR 0 6
35682: PUSH
35683: LD_VAR 0 4
35687: ST_TO_ADDR
// _y := y ;
35688: LD_ADDR_VAR 0 7
35692: PUSH
35693: LD_VAR 0 5
35697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35698: LD_ADDR_VAR 0 3
35702: PUSH
35703: LD_INT 1
35705: PPUSH
35706: LD_VAR 0 14
35710: PPUSH
35711: CALL_OW 12
35715: ST_TO_ADDR
// case i of 1 :
35716: LD_VAR 0 3
35720: PUSH
35721: LD_INT 1
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35746
35729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35730: LD_VAR 0 1
35734: PPUSH
35735: LD_VAR 0 10
35739: PPUSH
35740: CALL_OW 115
35744: GO 35807
35746: LD_INT 2
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35754
35752: GO 35776
35754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35755: LD_VAR 0 1
35759: PPUSH
35760: LD_VAR 0 6
35764: PPUSH
35765: LD_VAR 0 7
35769: PPUSH
35770: CALL_OW 153
35774: GO 35807
35776: LD_INT 3
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35784
35782: GO 35806
35784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35785: LD_VAR 0 1
35789: PPUSH
35790: LD_VAR 0 6
35794: PPUSH
35795: LD_VAR 0 7
35799: PPUSH
35800: CALL_OW 154
35804: GO 35807
35806: POP
// end ;
35807: LD_VAR 0 2
35811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
// if not unit or not building then
35820: LD_VAR 0 1
35824: NOT
35825: IFTRUE 35834
35827: PUSH
35828: LD_VAR 0 2
35832: NOT
35833: OR
35834: IFFALSE 35838
// exit ;
35836: GO 35996
// x := GetX ( building ) ;
35838: LD_ADDR_VAR 0 5
35842: PUSH
35843: LD_VAR 0 2
35847: PPUSH
35848: CALL_OW 250
35852: ST_TO_ADDR
// y := GetY ( building ) ;
35853: LD_ADDR_VAR 0 6
35857: PUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: CALL_OW 251
35867: ST_TO_ADDR
// for i := 0 to 5 do
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: DOUBLE
35874: LD_INT 0
35876: DEC
35877: ST_TO_ADDR
35878: LD_INT 5
35880: PUSH
35881: FOR_TO
35882: IFFALSE 35994
// begin _x := ShiftX ( x , i , 3 ) ;
35884: LD_ADDR_VAR 0 7
35888: PUSH
35889: LD_VAR 0 5
35893: PPUSH
35894: LD_VAR 0 4
35898: PPUSH
35899: LD_INT 3
35901: PPUSH
35902: CALL_OW 272
35906: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35907: LD_ADDR_VAR 0 8
35911: PUSH
35912: LD_VAR 0 6
35916: PPUSH
35917: LD_VAR 0 4
35921: PPUSH
35922: LD_INT 3
35924: PPUSH
35925: CALL_OW 273
35929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35930: LD_VAR 0 7
35934: PPUSH
35935: LD_VAR 0 8
35939: PPUSH
35940: CALL_OW 488
35944: NOT
35945: IFFALSE 35949
// continue ;
35947: GO 35881
// if HexInfo ( _x , _y ) = 0 then
35949: LD_VAR 0 7
35953: PPUSH
35954: LD_VAR 0 8
35958: PPUSH
35959: CALL_OW 428
35963: PUSH
35964: LD_INT 0
35966: EQUAL
35967: IFFALSE 35992
// begin ComMoveXY ( unit , _x , _y ) ;
35969: LD_VAR 0 1
35973: PPUSH
35974: LD_VAR 0 7
35978: PPUSH
35979: LD_VAR 0 8
35983: PPUSH
35984: CALL_OW 111
// exit ;
35988: POP
35989: POP
35990: GO 35996
// end ; end ;
35992: GO 35881
35994: POP
35995: POP
// end ;
35996: LD_VAR 0 3
36000: RET
// export function ScanBase ( side , base_area ) ; begin
36001: LD_INT 0
36003: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_INT 81
36016: PUSH
36017: LD_VAR 0 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 70
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 3
36035: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
// result := false ;
36042: LD_ADDR_VAR 0 2
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// side := GetSide ( unit ) ;
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 255
36064: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36065: LD_ADDR_VAR 0 4
36069: PUSH
36070: LD_VAR 0 1
36074: PPUSH
36075: CALL_OW 248
36079: ST_TO_ADDR
// case nat of 1 :
36080: LD_VAR 0 4
36084: PUSH
36085: LD_INT 1
36087: DOUBLE
36088: EQUAL
36089: IFTRUE 36093
36091: GO 36104
36093: POP
// tech := tech_lassight ; 2 :
36094: LD_ADDR_VAR 0 5
36098: PUSH
36099: LD_INT 12
36101: ST_TO_ADDR
36102: GO 36143
36104: LD_INT 2
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36123
36112: POP
// tech := tech_mortar ; 3 :
36113: LD_ADDR_VAR 0 5
36117: PUSH
36118: LD_INT 41
36120: ST_TO_ADDR
36121: GO 36143
36123: LD_INT 3
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36131
36129: GO 36142
36131: POP
// tech := tech_bazooka ; end ;
36132: LD_ADDR_VAR 0 5
36136: PUSH
36137: LD_INT 44
36139: ST_TO_ADDR
36140: GO 36143
36142: POP
// if Researched ( side , tech ) then
36143: LD_VAR 0 3
36147: PPUSH
36148: LD_VAR 0 5
36152: PPUSH
36153: CALL_OW 325
36157: IFFALSE 36184
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36159: LD_ADDR_VAR 0 2
36163: PUSH
36164: LD_INT 5
36166: PUSH
36167: LD_INT 8
36169: PUSH
36170: LD_INT 9
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: PUSH
36178: LD_VAR 0 4
36182: ARRAY
36183: ST_TO_ADDR
// end ;
36184: LD_VAR 0 2
36188: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
// if not mines then
36194: LD_VAR 0 2
36198: NOT
36199: IFFALSE 36203
// exit ;
36201: GO 36347
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_INT 81
36210: PUSH
36211: LD_VAR 0 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: LD_INT 21
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PPUSH
36241: CALL_OW 69
36245: ST_TO_ADDR
// for i in mines do
36246: LD_ADDR_VAR 0 4
36250: PUSH
36251: LD_VAR 0 2
36255: PUSH
36256: FOR_IN
36257: IFFALSE 36345
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36259: LD_VAR 0 4
36263: PUSH
36264: LD_INT 1
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 4
36272: PUSH
36273: LD_INT 2
36275: ARRAY
36276: PPUSH
36277: CALL_OW 458
36281: NOT
36282: IFFALSE 36286
// continue ;
36284: GO 36256
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36286: LD_VAR 0 4
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_VAR 0 4
36299: PUSH
36300: LD_INT 2
36302: ARRAY
36303: PPUSH
36304: CALL_OW 428
36308: PUSH
36309: LD_VAR 0 5
36313: IN
36314: IFFALSE 36343
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36316: LD_VAR 0 4
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: PPUSH
36325: LD_VAR 0 4
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: PPUSH
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 456
// end ;
36343: GO 36256
36345: POP
36346: POP
// end ;
36347: LD_VAR 0 3
36351: RET
// export function Count ( array ) ; begin
36352: LD_INT 0
36354: PPUSH
// result := array + 0 ;
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: LD_VAR 0 1
36364: PUSH
36365: LD_INT 0
36367: PLUS
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 2
36373: RET
// export function IsEmpty ( building ) ; begin
36374: LD_INT 0
36376: PPUSH
// if not building then
36377: LD_VAR 0 1
36381: NOT
36382: IFFALSE 36386
// exit ;
36384: GO 36429
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36386: LD_ADDR_VAR 0 2
36390: PUSH
36391: LD_VAR 0 1
36395: PUSH
36396: LD_INT 22
36398: PUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 255
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 58
36415: PUSH
36416: EMPTY
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PPUSH
36423: CALL_OW 69
36427: IN
36428: ST_TO_ADDR
// end ;
36429: LD_VAR 0 2
36433: RET
// export function IsNotFull ( building ) ; var places ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
// if not building then
36438: LD_VAR 0 1
36442: NOT
36443: IFFALSE 36447
// exit ;
36445: GO 36475
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36447: LD_ADDR_VAR 0 2
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: LD_INT 3
36459: PUSH
36460: LD_INT 62
36462: PUSH
36463: EMPTY
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PPUSH
36470: CALL_OW 72
36474: ST_TO_ADDR
// end ;
36475: LD_VAR 0 2
36479: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36480: LD_INT 0
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
// tmp := [ ] ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: EMPTY
36492: ST_TO_ADDR
// list := [ ] ;
36493: LD_ADDR_VAR 0 5
36497: PUSH
36498: EMPTY
36499: ST_TO_ADDR
// for i = 16 to 25 do
36500: LD_ADDR_VAR 0 4
36504: PUSH
36505: DOUBLE
36506: LD_INT 16
36508: DEC
36509: ST_TO_ADDR
36510: LD_INT 25
36512: PUSH
36513: FOR_TO
36514: IFFALSE 36587
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_VAR 0 3
36525: PUSH
36526: LD_INT 22
36528: PUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 255
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 91
36545: PUSH
36546: LD_VAR 0 1
36550: PUSH
36551: LD_INT 6
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 30
36561: PUSH
36562: LD_VAR 0 4
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: PPUSH
36579: CALL_OW 69
36583: ADD
36584: ST_TO_ADDR
36585: GO 36513
36587: POP
36588: POP
// for i = 1 to tmp do
36589: LD_ADDR_VAR 0 4
36593: PUSH
36594: DOUBLE
36595: LD_INT 1
36597: DEC
36598: ST_TO_ADDR
36599: LD_VAR 0 3
36603: PUSH
36604: FOR_TO
36605: IFFALSE 36693
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36607: LD_ADDR_VAR 0 5
36611: PUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_VAR 0 3
36621: PUSH
36622: LD_VAR 0 4
36626: ARRAY
36627: PPUSH
36628: CALL_OW 266
36632: PUSH
36633: LD_VAR 0 3
36637: PUSH
36638: LD_VAR 0 4
36642: ARRAY
36643: PPUSH
36644: CALL_OW 250
36648: PUSH
36649: LD_VAR 0 3
36653: PUSH
36654: LD_VAR 0 4
36658: ARRAY
36659: PPUSH
36660: CALL_OW 251
36664: PUSH
36665: LD_VAR 0 3
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PPUSH
36676: CALL_OW 254
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: ADD
36690: ST_TO_ADDR
36691: GO 36604
36693: POP
36694: POP
// result := list ;
36695: LD_ADDR_VAR 0 2
36699: PUSH
36700: LD_VAR 0 5
36704: ST_TO_ADDR
// end ;
36705: LD_VAR 0 2
36709: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36710: LD_INT 0
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
36718: PPUSH
// if not factory then
36719: LD_VAR 0 1
36723: NOT
36724: IFFALSE 36728
// exit ;
36726: GO 37331
// if control = control_apeman then
36728: LD_VAR 0 4
36732: PUSH
36733: LD_INT 5
36735: EQUAL
36736: IFFALSE 36845
// begin tmp := UnitsInside ( factory ) ;
36738: LD_ADDR_VAR 0 8
36742: PUSH
36743: LD_VAR 0 1
36747: PPUSH
36748: CALL_OW 313
36752: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_INT 25
36760: PUSH
36761: LD_INT 12
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PPUSH
36768: CALL_OW 72
36772: NOT
36773: IFFALSE 36783
// control := control_manual ;
36775: LD_ADDR_VAR 0 4
36779: PUSH
36780: LD_INT 1
36782: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36783: LD_ADDR_VAR 0 8
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL 36480 0 1
36797: ST_TO_ADDR
// if tmp then
36798: LD_VAR 0 8
36802: IFFALSE 36845
// begin for i in tmp do
36804: LD_ADDR_VAR 0 7
36808: PUSH
36809: LD_VAR 0 8
36813: PUSH
36814: FOR_IN
36815: IFFALSE 36843
// if i [ 1 ] = b_ext_radio then
36817: LD_VAR 0 7
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PUSH
36826: LD_INT 22
36828: EQUAL
36829: IFFALSE 36841
// begin control := control_remote ;
36831: LD_ADDR_VAR 0 4
36835: PUSH
36836: LD_INT 2
36838: ST_TO_ADDR
// break ;
36839: GO 36843
// end ;
36841: GO 36814
36843: POP
36844: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_VAR 0 2
36854: PPUSH
36855: LD_VAR 0 3
36859: PPUSH
36860: LD_VAR 0 4
36864: PPUSH
36865: LD_VAR 0 5
36869: PPUSH
36870: CALL_OW 448
36874: IFFALSE 36909
// begin result := [ chassis , engine , control , weapon ] ;
36876: LD_ADDR_VAR 0 6
36880: PUSH
36881: LD_VAR 0 2
36885: PUSH
36886: LD_VAR 0 3
36890: PUSH
36891: LD_VAR 0 4
36895: PUSH
36896: LD_VAR 0 5
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// exit ;
36907: GO 37331
// end ; _chassis := AvailableChassisList ( factory ) ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 475
36923: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36924: LD_ADDR_VAR 0 11
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 476
36938: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 477
36953: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36954: LD_ADDR_VAR 0 10
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 478
36968: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36969: LD_VAR 0 9
36973: NOT
36974: IFTRUE 36983
36976: PUSH
36977: LD_VAR 0 11
36981: NOT
36982: OR
36983: IFTRUE 36992
36985: PUSH
36986: LD_VAR 0 12
36990: NOT
36991: OR
36992: IFTRUE 37001
36994: PUSH
36995: LD_VAR 0 10
36999: NOT
37000: OR
37001: IFFALSE 37036
// begin result := [ chassis , engine , control , weapon ] ;
37003: LD_ADDR_VAR 0 6
37007: PUSH
37008: LD_VAR 0 2
37012: PUSH
37013: LD_VAR 0 3
37017: PUSH
37018: LD_VAR 0 4
37022: PUSH
37023: LD_VAR 0 5
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// exit ;
37034: GO 37331
// end ; if not chassis in _chassis then
37036: LD_VAR 0 2
37040: PUSH
37041: LD_VAR 0 9
37045: IN
37046: NOT
37047: IFFALSE 37073
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37049: LD_ADDR_VAR 0 2
37053: PUSH
37054: LD_VAR 0 9
37058: PUSH
37059: LD_INT 1
37061: PPUSH
37062: LD_VAR 0 9
37066: PPUSH
37067: CALL_OW 12
37071: ARRAY
37072: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37073: LD_VAR 0 2
37077: PPUSH
37078: LD_VAR 0 3
37082: PPUSH
37083: CALL 37336 0 2
37087: NOT
37088: IFFALSE 37149
// repeat engine := _engine [ 1 ] ;
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_VAR 0 11
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37104: LD_ADDR_VAR 0 11
37108: PUSH
37109: LD_VAR 0 11
37113: PPUSH
37114: LD_INT 1
37116: PPUSH
37117: CALL_OW 3
37121: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37122: LD_VAR 0 2
37126: PPUSH
37127: LD_VAR 0 3
37131: PPUSH
37132: CALL 37336 0 2
37136: IFTRUE 37147
37138: PUSH
37139: LD_VAR 0 11
37143: PUSH
37144: EMPTY
37145: EQUAL
37146: OR
37147: IFFALSE 37090
// if not control in _control then
37149: LD_VAR 0 4
37153: PUSH
37154: LD_VAR 0 12
37158: IN
37159: NOT
37160: IFFALSE 37186
// control := _control [ rand ( 1 , _control ) ] ;
37162: LD_ADDR_VAR 0 4
37166: PUSH
37167: LD_VAR 0 12
37171: PUSH
37172: LD_INT 1
37174: PPUSH
37175: LD_VAR 0 12
37179: PPUSH
37180: CALL_OW 12
37184: ARRAY
37185: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37186: LD_VAR 0 2
37190: PPUSH
37191: LD_VAR 0 5
37195: PPUSH
37196: CALL 37558 0 2
37200: NOT
37201: IFFALSE 37262
// repeat weapon := _weapon [ 1 ] ;
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_VAR 0 10
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37217: LD_ADDR_VAR 0 10
37221: PUSH
37222: LD_VAR 0 10
37226: PPUSH
37227: LD_INT 1
37229: PPUSH
37230: CALL_OW 3
37234: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37235: LD_VAR 0 2
37239: PPUSH
37240: LD_VAR 0 5
37244: PPUSH
37245: CALL 37558 0 2
37249: IFTRUE 37260
37251: PUSH
37252: LD_VAR 0 10
37256: PUSH
37257: EMPTY
37258: EQUAL
37259: OR
37260: IFFALSE 37203
// result := [ ] ;
37262: LD_ADDR_VAR 0 6
37266: PUSH
37267: EMPTY
37268: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37269: LD_VAR 0 1
37273: PPUSH
37274: LD_VAR 0 2
37278: PPUSH
37279: LD_VAR 0 3
37283: PPUSH
37284: LD_VAR 0 4
37288: PPUSH
37289: LD_VAR 0 5
37293: PPUSH
37294: CALL_OW 448
37298: IFFALSE 37331
// result := [ chassis , engine , control , weapon ] ;
37300: LD_ADDR_VAR 0 6
37304: PUSH
37305: LD_VAR 0 2
37309: PUSH
37310: LD_VAR 0 3
37314: PUSH
37315: LD_VAR 0 4
37319: PUSH
37320: LD_VAR 0 5
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// end ;
37331: LD_VAR 0 6
37335: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37336: LD_INT 0
37338: PPUSH
// if not chassis or not engine then
37339: LD_VAR 0 1
37343: NOT
37344: IFTRUE 37353
37346: PUSH
37347: LD_VAR 0 2
37351: NOT
37352: OR
37353: IFFALSE 37357
// exit ;
37355: GO 37553
// case engine of engine_solar :
37357: LD_VAR 0 2
37361: PUSH
37362: LD_INT 2
37364: DOUBLE
37365: EQUAL
37366: IFTRUE 37370
37368: GO 37408
37370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37371: LD_ADDR_VAR 0 3
37375: PUSH
37376: LD_INT 11
37378: PUSH
37379: LD_INT 12
37381: PUSH
37382: LD_INT 13
37384: PUSH
37385: LD_INT 14
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: ST_TO_ADDR
37406: GO 37537
37408: LD_INT 1
37410: DOUBLE
37411: EQUAL
37412: IFTRUE 37416
37414: GO 37478
37416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37417: LD_ADDR_VAR 0 3
37421: PUSH
37422: LD_INT 11
37424: PUSH
37425: LD_INT 12
37427: PUSH
37428: LD_INT 13
37430: PUSH
37431: LD_INT 14
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 4
37445: PUSH
37446: LD_INT 5
37448: PUSH
37449: LD_INT 21
37451: PUSH
37452: LD_INT 23
37454: PUSH
37455: LD_INT 22
37457: PUSH
37458: LD_INT 24
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
37476: GO 37537
37478: LD_INT 3
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37536
37486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_INT 13
37494: PUSH
37495: LD_INT 14
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: LD_INT 5
37509: PUSH
37510: LD_INT 21
37512: PUSH
37513: LD_INT 22
37515: PUSH
37516: LD_INT 23
37518: PUSH
37519: LD_INT 24
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: ST_TO_ADDR
37534: GO 37537
37536: POP
// result := ( chassis in result ) ;
37537: LD_ADDR_VAR 0 3
37541: PUSH
37542: LD_VAR 0 1
37546: PUSH
37547: LD_VAR 0 3
37551: IN
37552: ST_TO_ADDR
// end ;
37553: LD_VAR 0 3
37557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37558: LD_INT 0
37560: PPUSH
// if not chassis or not weapon then
37561: LD_VAR 0 1
37565: NOT
37566: IFTRUE 37575
37568: PUSH
37569: LD_VAR 0 2
37573: NOT
37574: OR
37575: IFFALSE 37579
// exit ;
37577: GO 38673
// case weapon of us_machine_gun :
37579: LD_VAR 0 2
37583: PUSH
37584: LD_INT 2
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37622
37592: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 4
37609: PUSH
37610: LD_INT 5
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: ST_TO_ADDR
37620: GO 38657
37622: LD_INT 3
37624: DOUBLE
37625: EQUAL
37626: IFTRUE 37630
37628: GO 37660
37630: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37631: LD_ADDR_VAR 0 3
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 4
37647: PUSH
37648: LD_INT 5
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
37658: GO 38657
37660: LD_INT 11
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37668
37666: GO 37698
37668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 5
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
37696: GO 38657
37698: LD_INT 4
37700: DOUBLE
37701: EQUAL
37702: IFTRUE 37706
37704: GO 37732
37706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37707: LD_ADDR_VAR 0 3
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 3
37717: PUSH
37718: LD_INT 4
37720: PUSH
37721: LD_INT 5
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
37730: GO 38657
37732: LD_INT 5
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37740
37738: GO 37766
37740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 3
37751: PUSH
37752: LD_INT 4
37754: PUSH
37755: LD_INT 5
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
37764: GO 38657
37766: LD_INT 9
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37800
37774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 3
37785: PUSH
37786: LD_INT 4
37788: PUSH
37789: LD_INT 5
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
37798: GO 38657
37800: LD_INT 7
37802: DOUBLE
37803: EQUAL
37804: IFTRUE 37808
37806: GO 37834
37808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: LD_INT 4
37822: PUSH
37823: LD_INT 5
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
37832: GO 38657
37834: LD_INT 12
37836: DOUBLE
37837: EQUAL
37838: IFTRUE 37842
37840: GO 37868
37842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37843: LD_ADDR_VAR 0 3
37847: PUSH
37848: LD_INT 2
37850: PUSH
37851: LD_INT 3
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
37866: GO 38657
37868: LD_INT 13
37870: DOUBLE
37871: EQUAL
37872: IFTRUE 37876
37874: GO 37902
37876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: LD_INT 4
37890: PUSH
37891: LD_INT 5
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
37900: GO 38657
37902: LD_INT 14
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37928
37910: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 4
37918: PUSH
37919: LD_INT 5
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: ST_TO_ADDR
37926: GO 38657
37928: LD_INT 6
37930: DOUBLE
37931: EQUAL
37932: IFTRUE 37936
37934: GO 37954
37936: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37937: LD_ADDR_VAR 0 3
37941: PUSH
37942: LD_INT 4
37944: PUSH
37945: LD_INT 5
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: ST_TO_ADDR
37952: GO 38657
37954: LD_INT 10
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37980
37962: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 4
37970: PUSH
37971: LD_INT 5
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: ST_TO_ADDR
37978: GO 38657
37980: LD_INT 22
37982: DOUBLE
37983: EQUAL
37984: IFTRUE 37988
37986: GO 38014
37988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37989: LD_ADDR_VAR 0 3
37993: PUSH
37994: LD_INT 11
37996: PUSH
37997: LD_INT 12
37999: PUSH
38000: LD_INT 13
38002: PUSH
38003: LD_INT 14
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
38012: GO 38657
38014: LD_INT 23
38016: DOUBLE
38017: EQUAL
38018: IFTRUE 38022
38020: GO 38048
38022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38023: LD_ADDR_VAR 0 3
38027: PUSH
38028: LD_INT 11
38030: PUSH
38031: LD_INT 12
38033: PUSH
38034: LD_INT 13
38036: PUSH
38037: LD_INT 14
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: ST_TO_ADDR
38046: GO 38657
38048: LD_INT 24
38050: DOUBLE
38051: EQUAL
38052: IFTRUE 38056
38054: GO 38082
38056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_INT 11
38064: PUSH
38065: LD_INT 12
38067: PUSH
38068: LD_INT 13
38070: PUSH
38071: LD_INT 14
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: ST_TO_ADDR
38080: GO 38657
38082: LD_INT 30
38084: DOUBLE
38085: EQUAL
38086: IFTRUE 38090
38088: GO 38116
38090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_INT 11
38098: PUSH
38099: LD_INT 12
38101: PUSH
38102: LD_INT 13
38104: PUSH
38105: LD_INT 14
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
38114: GO 38657
38116: LD_INT 25
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38124
38122: GO 38142
38124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_INT 13
38132: PUSH
38133: LD_INT 14
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: ST_TO_ADDR
38140: GO 38657
38142: LD_INT 27
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38168
38150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_INT 13
38158: PUSH
38159: LD_INT 14
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: ST_TO_ADDR
38166: GO 38657
38168: LD_INT 92
38170: DOUBLE
38171: EQUAL
38172: IFTRUE 38176
38174: GO 38202
38176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_INT 11
38184: PUSH
38185: LD_INT 12
38187: PUSH
38188: LD_INT 13
38190: PUSH
38191: LD_INT 14
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: ST_TO_ADDR
38200: GO 38657
38202: LD_INT 28
38204: DOUBLE
38205: EQUAL
38206: IFTRUE 38210
38208: GO 38228
38210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38211: LD_ADDR_VAR 0 3
38215: PUSH
38216: LD_INT 13
38218: PUSH
38219: LD_INT 14
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: ST_TO_ADDR
38226: GO 38657
38228: LD_INT 29
38230: DOUBLE
38231: EQUAL
38232: IFTRUE 38236
38234: GO 38254
38236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38237: LD_ADDR_VAR 0 3
38241: PUSH
38242: LD_INT 13
38244: PUSH
38245: LD_INT 14
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: ST_TO_ADDR
38252: GO 38657
38254: LD_INT 31
38256: DOUBLE
38257: EQUAL
38258: IFTRUE 38262
38260: GO 38280
38262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 13
38270: PUSH
38271: LD_INT 14
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: ST_TO_ADDR
38278: GO 38657
38280: LD_INT 26
38282: DOUBLE
38283: EQUAL
38284: IFTRUE 38288
38286: GO 38306
38288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38289: LD_ADDR_VAR 0 3
38293: PUSH
38294: LD_INT 13
38296: PUSH
38297: LD_INT 14
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: ST_TO_ADDR
38304: GO 38657
38306: LD_INT 42
38308: DOUBLE
38309: EQUAL
38310: IFTRUE 38314
38312: GO 38340
38314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38315: LD_ADDR_VAR 0 3
38319: PUSH
38320: LD_INT 21
38322: PUSH
38323: LD_INT 22
38325: PUSH
38326: LD_INT 23
38328: PUSH
38329: LD_INT 24
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
38338: GO 38657
38340: LD_INT 43
38342: DOUBLE
38343: EQUAL
38344: IFTRUE 38348
38346: GO 38374
38348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38349: LD_ADDR_VAR 0 3
38353: PUSH
38354: LD_INT 21
38356: PUSH
38357: LD_INT 22
38359: PUSH
38360: LD_INT 23
38362: PUSH
38363: LD_INT 24
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: ST_TO_ADDR
38372: GO 38657
38374: LD_INT 44
38376: DOUBLE
38377: EQUAL
38378: IFTRUE 38382
38380: GO 38408
38382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38383: LD_ADDR_VAR 0 3
38387: PUSH
38388: LD_INT 21
38390: PUSH
38391: LD_INT 22
38393: PUSH
38394: LD_INT 23
38396: PUSH
38397: LD_INT 24
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
38406: GO 38657
38408: LD_INT 45
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38442
38416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38417: LD_ADDR_VAR 0 3
38421: PUSH
38422: LD_INT 21
38424: PUSH
38425: LD_INT 22
38427: PUSH
38428: LD_INT 23
38430: PUSH
38431: LD_INT 24
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
38440: GO 38657
38442: LD_INT 49
38444: DOUBLE
38445: EQUAL
38446: IFTRUE 38450
38448: GO 38476
38450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_INT 21
38458: PUSH
38459: LD_INT 22
38461: PUSH
38462: LD_INT 23
38464: PUSH
38465: LD_INT 24
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: ST_TO_ADDR
38474: GO 38657
38476: LD_INT 51
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38510
38484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_INT 21
38492: PUSH
38493: LD_INT 22
38495: PUSH
38496: LD_INT 23
38498: PUSH
38499: LD_INT 24
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
38508: GO 38657
38510: LD_INT 52
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38544
38518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: LD_INT 21
38526: PUSH
38527: LD_INT 22
38529: PUSH
38530: LD_INT 23
38532: PUSH
38533: LD_INT 24
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: ST_TO_ADDR
38542: GO 38657
38544: LD_INT 53
38546: DOUBLE
38547: EQUAL
38548: IFTRUE 38552
38550: GO 38570
38552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_INT 23
38560: PUSH
38561: LD_INT 24
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: ST_TO_ADDR
38568: GO 38657
38570: LD_INT 46
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38596
38578: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_INT 23
38586: PUSH
38587: LD_INT 24
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: ST_TO_ADDR
38594: GO 38657
38596: LD_INT 47
38598: DOUBLE
38599: EQUAL
38600: IFTRUE 38604
38602: GO 38622
38604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_INT 23
38612: PUSH
38613: LD_INT 24
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: ST_TO_ADDR
38620: GO 38657
38622: LD_INT 98
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38656
38630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38631: LD_ADDR_VAR 0 3
38635: PUSH
38636: LD_INT 21
38638: PUSH
38639: LD_INT 22
38641: PUSH
38642: LD_INT 23
38644: PUSH
38645: LD_INT 24
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
38654: GO 38657
38656: POP
// result := ( chassis in result ) ;
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_VAR 0 1
38666: PUSH
38667: LD_VAR 0 3
38671: IN
38672: ST_TO_ADDR
// end ;
38673: LD_VAR 0 3
38677: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38678: LD_INT 0
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
// result := array ;
38687: LD_ADDR_VAR 0 5
38691: PUSH
38692: LD_VAR 0 1
38696: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38697: LD_VAR 0 1
38701: NOT
38702: IFTRUE 38711
38704: PUSH
38705: LD_VAR 0 2
38709: NOT
38710: OR
38711: IFTRUE 38720
38713: PUSH
38714: LD_VAR 0 3
38718: NOT
38719: OR
38720: IFTRUE 38734
38722: PUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_VAR 0 1
38732: GREATER
38733: OR
38734: IFTRUE 38748
38736: PUSH
38737: LD_VAR 0 3
38741: PUSH
38742: LD_VAR 0 1
38746: GREATER
38747: OR
38748: IFFALSE 38752
// exit ;
38750: GO 39048
// if direction then
38752: LD_VAR 0 4
38756: IFFALSE 38820
// begin d := 1 ;
38758: LD_ADDR_VAR 0 9
38762: PUSH
38763: LD_INT 1
38765: ST_TO_ADDR
// if i_from > i_to then
38766: LD_VAR 0 2
38770: PUSH
38771: LD_VAR 0 3
38775: GREATER
38776: IFFALSE 38802
// length := ( array - i_from ) + i_to else
38778: LD_ADDR_VAR 0 11
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_VAR 0 2
38792: MINUS
38793: PUSH
38794: LD_VAR 0 3
38798: PLUS
38799: ST_TO_ADDR
38800: GO 38818
// length := i_to - i_from ;
38802: LD_ADDR_VAR 0 11
38806: PUSH
38807: LD_VAR 0 3
38811: PUSH
38812: LD_VAR 0 2
38816: MINUS
38817: ST_TO_ADDR
// end else
38818: GO 38881
// begin d := - 1 ;
38820: LD_ADDR_VAR 0 9
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: ST_TO_ADDR
// if i_from > i_to then
38829: LD_VAR 0 2
38833: PUSH
38834: LD_VAR 0 3
38838: GREATER
38839: IFFALSE 38859
// length := i_from - i_to else
38841: LD_ADDR_VAR 0 11
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_VAR 0 3
38855: MINUS
38856: ST_TO_ADDR
38857: GO 38881
// length := ( array - i_to ) + i_from ;
38859: LD_ADDR_VAR 0 11
38863: PUSH
38864: LD_VAR 0 1
38868: PUSH
38869: LD_VAR 0 3
38873: MINUS
38874: PUSH
38875: LD_VAR 0 2
38879: PLUS
38880: ST_TO_ADDR
// end ; if not length then
38881: LD_VAR 0 11
38885: NOT
38886: IFFALSE 38890
// exit ;
38888: GO 39048
// tmp := array ;
38890: LD_ADDR_VAR 0 10
38894: PUSH
38895: LD_VAR 0 1
38899: ST_TO_ADDR
// for i = 1 to length do
38900: LD_ADDR_VAR 0 6
38904: PUSH
38905: DOUBLE
38906: LD_INT 1
38908: DEC
38909: ST_TO_ADDR
38910: LD_VAR 0 11
38914: PUSH
38915: FOR_TO
38916: IFFALSE 39036
// begin for j = 1 to array do
38918: LD_ADDR_VAR 0 7
38922: PUSH
38923: DOUBLE
38924: LD_INT 1
38926: DEC
38927: ST_TO_ADDR
38928: LD_VAR 0 1
38932: PUSH
38933: FOR_TO
38934: IFFALSE 39022
// begin k := j + d ;
38936: LD_ADDR_VAR 0 8
38940: PUSH
38941: LD_VAR 0 7
38945: PUSH
38946: LD_VAR 0 9
38950: PLUS
38951: ST_TO_ADDR
// if k > array then
38952: LD_VAR 0 8
38956: PUSH
38957: LD_VAR 0 1
38961: GREATER
38962: IFFALSE 38972
// k := 1 ;
38964: LD_ADDR_VAR 0 8
38968: PUSH
38969: LD_INT 1
38971: ST_TO_ADDR
// if not k then
38972: LD_VAR 0 8
38976: NOT
38977: IFFALSE 38989
// k := array ;
38979: LD_ADDR_VAR 0 8
38983: PUSH
38984: LD_VAR 0 1
38988: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38989: LD_ADDR_VAR 0 10
38993: PUSH
38994: LD_VAR 0 10
38998: PPUSH
38999: LD_VAR 0 8
39003: PPUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_VAR 0 7
39013: ARRAY
39014: PPUSH
39015: CALL_OW 1
39019: ST_TO_ADDR
// end ;
39020: GO 38933
39022: POP
39023: POP
// array := tmp ;
39024: LD_ADDR_VAR 0 1
39028: PUSH
39029: LD_VAR 0 10
39033: ST_TO_ADDR
// end ;
39034: GO 38915
39036: POP
39037: POP
// result := array ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_VAR 0 1
39047: ST_TO_ADDR
// end ;
39048: LD_VAR 0 5
39052: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39053: LD_INT 0
39055: PPUSH
39056: PPUSH
// result := 0 ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_INT 0
39064: ST_TO_ADDR
// if not array or not value in array then
39065: LD_VAR 0 1
39069: NOT
39070: IFTRUE 39085
39072: PUSH
39073: LD_VAR 0 2
39077: PUSH
39078: LD_VAR 0 1
39082: IN
39083: NOT
39084: OR
39085: IFFALSE 39089
// exit ;
39087: GO 39143
// for i = 1 to array do
39089: LD_ADDR_VAR 0 4
39093: PUSH
39094: DOUBLE
39095: LD_INT 1
39097: DEC
39098: ST_TO_ADDR
39099: LD_VAR 0 1
39103: PUSH
39104: FOR_TO
39105: IFFALSE 39141
// if value = array [ i ] then
39107: LD_VAR 0 2
39111: PUSH
39112: LD_VAR 0 1
39116: PUSH
39117: LD_VAR 0 4
39121: ARRAY
39122: EQUAL
39123: IFFALSE 39139
// begin result := i ;
39125: LD_ADDR_VAR 0 3
39129: PUSH
39130: LD_VAR 0 4
39134: ST_TO_ADDR
// exit ;
39135: POP
39136: POP
39137: GO 39143
// end ;
39139: GO 39104
39141: POP
39142: POP
// end ;
39143: LD_VAR 0 3
39147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39148: LD_INT 0
39150: PPUSH
// vc_chassis := chassis ;
39151: LD_ADDR_OWVAR 37
39155: PUSH
39156: LD_VAR 0 1
39160: ST_TO_ADDR
// vc_engine := engine ;
39161: LD_ADDR_OWVAR 39
39165: PUSH
39166: LD_VAR 0 2
39170: ST_TO_ADDR
// vc_control := control ;
39171: LD_ADDR_OWVAR 38
39175: PUSH
39176: LD_VAR 0 3
39180: ST_TO_ADDR
// vc_weapon := weapon ;
39181: LD_ADDR_OWVAR 40
39185: PUSH
39186: LD_VAR 0 4
39190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39191: LD_ADDR_OWVAR 41
39195: PUSH
39196: LD_VAR 0 5
39200: ST_TO_ADDR
// end ;
39201: LD_VAR 0 6
39205: RET
// export function WantPlant ( unit ) ; var task ; begin
39206: LD_INT 0
39208: PPUSH
39209: PPUSH
// result := false ;
39210: LD_ADDR_VAR 0 2
39214: PUSH
39215: LD_INT 0
39217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_VAR 0 1
39227: PPUSH
39228: CALL_OW 437
39232: ST_TO_ADDR
// if task then
39233: LD_VAR 0 3
39237: IFFALSE 39265
// if task [ 1 ] [ 1 ] = p then
39239: LD_VAR 0 3
39243: PUSH
39244: LD_INT 1
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: ARRAY
39251: PUSH
39252: LD_STRING p
39254: EQUAL
39255: IFFALSE 39265
// result := true ;
39257: LD_ADDR_VAR 0 2
39261: PUSH
39262: LD_INT 1
39264: ST_TO_ADDR
// end ;
39265: LD_VAR 0 2
39269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39270: LD_INT 0
39272: PPUSH
39273: PPUSH
39274: PPUSH
39275: PPUSH
// if pos < 1 then
39276: LD_VAR 0 2
39280: PUSH
39281: LD_INT 1
39283: LESS
39284: IFFALSE 39288
// exit ;
39286: GO 39591
// if pos = 1 then
39288: LD_VAR 0 2
39292: PUSH
39293: LD_INT 1
39295: EQUAL
39296: IFFALSE 39329
// result := Replace ( arr , pos [ 1 ] , value ) else
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: LD_VAR 0 3
39321: PPUSH
39322: CALL_OW 1
39326: ST_TO_ADDR
39327: GO 39591
// begin tmp := arr ;
39329: LD_ADDR_VAR 0 6
39333: PUSH
39334: LD_VAR 0 1
39338: ST_TO_ADDR
// s_arr := [ tmp ] ;
39339: LD_ADDR_VAR 0 7
39343: PUSH
39344: LD_VAR 0 6
39348: PUSH
39349: EMPTY
39350: LIST
39351: ST_TO_ADDR
// for i = 1 to pos - 1 do
39352: LD_ADDR_VAR 0 5
39356: PUSH
39357: DOUBLE
39358: LD_INT 1
39360: DEC
39361: ST_TO_ADDR
39362: LD_VAR 0 2
39366: PUSH
39367: LD_INT 1
39369: MINUS
39370: PUSH
39371: FOR_TO
39372: IFFALSE 39417
// begin tmp := tmp [ pos [ i ] ] ;
39374: LD_ADDR_VAR 0 6
39378: PUSH
39379: LD_VAR 0 6
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_VAR 0 5
39393: ARRAY
39394: ARRAY
39395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: LD_VAR 0 7
39405: PUSH
39406: LD_VAR 0 6
39410: PUSH
39411: EMPTY
39412: LIST
39413: ADD
39414: ST_TO_ADDR
// end ;
39415: GO 39371
39417: POP
39418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39419: LD_ADDR_VAR 0 6
39423: PUSH
39424: LD_VAR 0 6
39428: PPUSH
39429: LD_VAR 0 2
39433: PUSH
39434: LD_VAR 0 2
39438: ARRAY
39439: PPUSH
39440: LD_VAR 0 3
39444: PPUSH
39445: CALL_OW 1
39449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39450: LD_ADDR_VAR 0 7
39454: PUSH
39455: LD_VAR 0 7
39459: PPUSH
39460: LD_VAR 0 7
39464: PPUSH
39465: LD_VAR 0 6
39469: PPUSH
39470: CALL_OW 1
39474: ST_TO_ADDR
// for i = s_arr downto 2 do
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: DOUBLE
39481: LD_VAR 0 7
39485: INC
39486: ST_TO_ADDR
39487: LD_INT 2
39489: PUSH
39490: FOR_DOWNTO
39491: IFFALSE 39575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39493: LD_ADDR_VAR 0 6
39497: PUSH
39498: LD_VAR 0 7
39502: PUSH
39503: LD_VAR 0 5
39507: PUSH
39508: LD_INT 1
39510: MINUS
39511: ARRAY
39512: PPUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_VAR 0 5
39522: PUSH
39523: LD_INT 1
39525: MINUS
39526: ARRAY
39527: PPUSH
39528: LD_VAR 0 7
39532: PUSH
39533: LD_VAR 0 5
39537: ARRAY
39538: PPUSH
39539: CALL_OW 1
39543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39544: LD_ADDR_VAR 0 7
39548: PUSH
39549: LD_VAR 0 7
39553: PPUSH
39554: LD_VAR 0 5
39558: PUSH
39559: LD_INT 1
39561: MINUS
39562: PPUSH
39563: LD_VAR 0 6
39567: PPUSH
39568: CALL_OW 1
39572: ST_TO_ADDR
// end ;
39573: GO 39490
39575: POP
39576: POP
// result := s_arr [ 1 ] ;
39577: LD_ADDR_VAR 0 4
39581: PUSH
39582: LD_VAR 0 7
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: ST_TO_ADDR
// end ; end ;
39591: LD_VAR 0 4
39595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39596: LD_INT 0
39598: PPUSH
39599: PPUSH
// if not list then
39600: LD_VAR 0 1
39604: NOT
39605: IFFALSE 39609
// exit ;
39607: GO 39700
// i := list [ pos1 ] ;
39609: LD_ADDR_VAR 0 5
39613: PUSH
39614: LD_VAR 0 1
39618: PUSH
39619: LD_VAR 0 2
39623: ARRAY
39624: ST_TO_ADDR
// if not i then
39625: LD_VAR 0 5
39629: NOT
39630: IFFALSE 39634
// exit ;
39632: GO 39700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39634: LD_ADDR_VAR 0 1
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: LD_VAR 0 2
39648: PPUSH
39649: LD_VAR 0 1
39653: PUSH
39654: LD_VAR 0 3
39658: ARRAY
39659: PPUSH
39660: CALL_OW 1
39664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39665: LD_ADDR_VAR 0 1
39669: PUSH
39670: LD_VAR 0 1
39674: PPUSH
39675: LD_VAR 0 3
39679: PPUSH
39680: LD_VAR 0 5
39684: PPUSH
39685: CALL_OW 1
39689: ST_TO_ADDR
// result := list ;
39690: LD_ADDR_VAR 0 4
39694: PUSH
39695: LD_VAR 0 1
39699: ST_TO_ADDR
// end ;
39700: LD_VAR 0 4
39704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39705: LD_INT 0
39707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39708: LD_ADDR_VAR 0 5
39712: PUSH
39713: LD_VAR 0 1
39717: PPUSH
39718: CALL_OW 250
39722: PPUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 251
39732: PPUSH
39733: LD_VAR 0 2
39737: PPUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: CALL 40130 0 5
39752: ST_TO_ADDR
// end ;
39753: LD_VAR 0 5
39757: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
// if not list or not unit then
39764: LD_VAR 0 2
39768: NOT
39769: IFTRUE 39778
39771: PUSH
39772: LD_VAR 0 1
39776: NOT
39777: OR
39778: IFFALSE 39782
// exit ;
39780: GO 40125
// result := [ ] ;
39782: LD_ADDR_VAR 0 5
39786: PUSH
39787: EMPTY
39788: ST_TO_ADDR
// for i in list do
39789: LD_ADDR_VAR 0 6
39793: PUSH
39794: LD_VAR 0 2
39798: PUSH
39799: FOR_IN
39800: IFFALSE 40018
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39802: LD_ADDR_VAR 0 8
39806: PUSH
39807: LD_VAR 0 1
39811: PPUSH
39812: LD_VAR 0 6
39816: PUSH
39817: LD_INT 1
39819: ARRAY
39820: PPUSH
39821: LD_VAR 0 6
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: PPUSH
39830: CALL_OW 297
39834: ST_TO_ADDR
// if not Count ( result ) then
39835: LD_VAR 0 5
39839: PPUSH
39840: CALL 36352 0 1
39844: NOT
39845: IFFALSE 39878
// begin result := Join ( result , [ i , tmp ] ) ;
39847: LD_ADDR_VAR 0 5
39851: PUSH
39852: LD_VAR 0 5
39856: PPUSH
39857: LD_VAR 0 6
39861: PUSH
39862: LD_VAR 0 8
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PPUSH
39871: CALL 72328 0 2
39875: ST_TO_ADDR
// continue ;
39876: GO 39799
// end ; if result [ result ] [ 2 ] <= tmp then
39878: LD_VAR 0 5
39882: PUSH
39883: LD_VAR 0 5
39887: ARRAY
39888: PUSH
39889: LD_INT 2
39891: ARRAY
39892: PUSH
39893: LD_VAR 0 8
39897: LESSEQUAL
39898: IFFALSE 39931
// result := Join ( result , [ i , tmp ] ) else
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: LD_VAR 0 5
39909: PPUSH
39910: LD_VAR 0 6
39914: PUSH
39915: LD_VAR 0 8
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PPUSH
39924: CALL 72328 0 2
39928: ST_TO_ADDR
39929: GO 40016
// begin for j := 1 to Count ( result ) do
39931: LD_ADDR_VAR 0 7
39935: PUSH
39936: DOUBLE
39937: LD_INT 1
39939: DEC
39940: ST_TO_ADDR
39941: LD_VAR 0 5
39945: PPUSH
39946: CALL 36352 0 1
39950: PUSH
39951: FOR_TO
39952: IFFALSE 40014
// begin if tmp < result [ j ] [ 2 ] then
39954: LD_VAR 0 8
39958: PUSH
39959: LD_VAR 0 5
39963: PUSH
39964: LD_VAR 0 7
39968: ARRAY
39969: PUSH
39970: LD_INT 2
39972: ARRAY
39973: LESS
39974: IFFALSE 40012
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39976: LD_ADDR_VAR 0 5
39980: PUSH
39981: LD_VAR 0 5
39985: PPUSH
39986: LD_VAR 0 7
39990: PPUSH
39991: LD_VAR 0 6
39995: PUSH
39996: LD_VAR 0 8
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PPUSH
40005: CALL_OW 2
40009: ST_TO_ADDR
// break ;
40010: GO 40014
// end ; end ;
40012: GO 39951
40014: POP
40015: POP
// end ; end ;
40016: GO 39799
40018: POP
40019: POP
// if result and not asc then
40020: LD_VAR 0 5
40024: IFFALSE 40033
40026: PUSH
40027: LD_VAR 0 3
40031: NOT
40032: AND
40033: IFFALSE 40050
// result := ReverseArray ( result ) ;
40035: LD_ADDR_VAR 0 5
40039: PUSH
40040: LD_VAR 0 5
40044: PPUSH
40045: CALL 67408 0 1
40049: ST_TO_ADDR
// tmp := [ ] ;
40050: LD_ADDR_VAR 0 8
40054: PUSH
40055: EMPTY
40056: ST_TO_ADDR
// if mode then
40057: LD_VAR 0 4
40061: IFFALSE 40125
// begin for i := 1 to result do
40063: LD_ADDR_VAR 0 6
40067: PUSH
40068: DOUBLE
40069: LD_INT 1
40071: DEC
40072: ST_TO_ADDR
40073: LD_VAR 0 5
40077: PUSH
40078: FOR_TO
40079: IFFALSE 40113
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
40081: LD_ADDR_VAR 0 8
40085: PUSH
40086: LD_VAR 0 8
40090: PPUSH
40091: LD_VAR 0 5
40095: PUSH
40096: LD_VAR 0 6
40100: ARRAY
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: PPUSH
40106: CALL 72328 0 2
40110: ST_TO_ADDR
40111: GO 40078
40113: POP
40114: POP
// result := tmp ;
40115: LD_ADDR_VAR 0 5
40119: PUSH
40120: LD_VAR 0 8
40124: ST_TO_ADDR
// end ; end ;
40125: LD_VAR 0 5
40129: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40130: LD_INT 0
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
// if not list then
40136: LD_VAR 0 3
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 40535
// result := [ ] ;
40145: LD_ADDR_VAR 0 6
40149: PUSH
40150: EMPTY
40151: ST_TO_ADDR
// for i in list do
40152: LD_ADDR_VAR 0 7
40156: PUSH
40157: LD_VAR 0 3
40161: PUSH
40162: FOR_IN
40163: IFFALSE 40365
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40165: LD_ADDR_VAR 0 9
40169: PUSH
40170: LD_VAR 0 7
40174: PPUSH
40175: LD_VAR 0 1
40179: PPUSH
40180: LD_VAR 0 2
40184: PPUSH
40185: CALL_OW 297
40189: ST_TO_ADDR
// if not result then
40190: LD_VAR 0 6
40194: NOT
40195: IFFALSE 40221
// result := [ [ i , tmp ] ] else
40197: LD_ADDR_VAR 0 6
40201: PUSH
40202: LD_VAR 0 7
40206: PUSH
40207: LD_VAR 0 9
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: ST_TO_ADDR
40219: GO 40363
// begin if result [ result ] [ 2 ] <= tmp then
40221: LD_VAR 0 6
40225: PUSH
40226: LD_VAR 0 6
40230: ARRAY
40231: PUSH
40232: LD_INT 2
40234: ARRAY
40235: PUSH
40236: LD_VAR 0 9
40240: LESSEQUAL
40241: IFFALSE 40283
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40243: LD_ADDR_VAR 0 6
40247: PUSH
40248: LD_VAR 0 6
40252: PPUSH
40253: LD_VAR 0 6
40257: PUSH
40258: LD_INT 1
40260: PLUS
40261: PPUSH
40262: LD_VAR 0 7
40266: PUSH
40267: LD_VAR 0 9
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PPUSH
40276: CALL_OW 2
40280: ST_TO_ADDR
40281: GO 40363
// for j := 1 to result do
40283: LD_ADDR_VAR 0 8
40287: PUSH
40288: DOUBLE
40289: LD_INT 1
40291: DEC
40292: ST_TO_ADDR
40293: LD_VAR 0 6
40297: PUSH
40298: FOR_TO
40299: IFFALSE 40361
// begin if tmp < result [ j ] [ 2 ] then
40301: LD_VAR 0 9
40305: PUSH
40306: LD_VAR 0 6
40310: PUSH
40311: LD_VAR 0 8
40315: ARRAY
40316: PUSH
40317: LD_INT 2
40319: ARRAY
40320: LESS
40321: IFFALSE 40359
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40323: LD_ADDR_VAR 0 6
40327: PUSH
40328: LD_VAR 0 6
40332: PPUSH
40333: LD_VAR 0 8
40337: PPUSH
40338: LD_VAR 0 7
40342: PUSH
40343: LD_VAR 0 9
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PPUSH
40352: CALL_OW 2
40356: ST_TO_ADDR
// break ;
40357: GO 40361
// end ; end ;
40359: GO 40298
40361: POP
40362: POP
// end ; end ;
40363: GO 40162
40365: POP
40366: POP
// if result and not asc then
40367: LD_VAR 0 6
40371: IFFALSE 40380
40373: PUSH
40374: LD_VAR 0 4
40378: NOT
40379: AND
40380: IFFALSE 40455
// begin tmp := result ;
40382: LD_ADDR_VAR 0 9
40386: PUSH
40387: LD_VAR 0 6
40391: ST_TO_ADDR
// for i = tmp downto 1 do
40392: LD_ADDR_VAR 0 7
40396: PUSH
40397: DOUBLE
40398: LD_VAR 0 9
40402: INC
40403: ST_TO_ADDR
40404: LD_INT 1
40406: PUSH
40407: FOR_DOWNTO
40408: IFFALSE 40453
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40410: LD_ADDR_VAR 0 6
40414: PUSH
40415: LD_VAR 0 6
40419: PPUSH
40420: LD_VAR 0 9
40424: PUSH
40425: LD_VAR 0 7
40429: MINUS
40430: PUSH
40431: LD_INT 1
40433: PLUS
40434: PPUSH
40435: LD_VAR 0 9
40439: PUSH
40440: LD_VAR 0 7
40444: ARRAY
40445: PPUSH
40446: CALL_OW 1
40450: ST_TO_ADDR
40451: GO 40407
40453: POP
40454: POP
// end ; tmp := [ ] ;
40455: LD_ADDR_VAR 0 9
40459: PUSH
40460: EMPTY
40461: ST_TO_ADDR
// if mode then
40462: LD_VAR 0 5
40466: IFFALSE 40535
// begin for i = 1 to result do
40468: LD_ADDR_VAR 0 7
40472: PUSH
40473: DOUBLE
40474: LD_INT 1
40476: DEC
40477: ST_TO_ADDR
40478: LD_VAR 0 6
40482: PUSH
40483: FOR_TO
40484: IFFALSE 40523
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_VAR 0 9
40495: PPUSH
40496: LD_VAR 0 7
40500: PPUSH
40501: LD_VAR 0 6
40505: PUSH
40506: LD_VAR 0 7
40510: ARRAY
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 1
40520: ST_TO_ADDR
40521: GO 40483
40523: POP
40524: POP
// result := tmp ;
40525: LD_ADDR_VAR 0 6
40529: PUSH
40530: LD_VAR 0 9
40534: ST_TO_ADDR
// end ; end ;
40535: LD_VAR 0 6
40539: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40540: LD_INT 0
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// if not x or not y then
40570: LD_VAR 0 2
40574: NOT
40575: IFTRUE 40584
40577: PUSH
40578: LD_VAR 0 3
40582: NOT
40583: OR
40584: IFFALSE 40588
// exit ;
40586: GO 42244
// if not range then
40588: LD_VAR 0 4
40592: NOT
40593: IFFALSE 40603
// range := 10 ;
40595: LD_ADDR_VAR 0 4
40599: PUSH
40600: LD_INT 10
40602: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40603: LD_ADDR_VAR 0 8
40607: PUSH
40608: LD_INT 81
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 92
40622: PUSH
40623: LD_VAR 0 2
40627: PUSH
40628: LD_VAR 0 3
40632: PUSH
40633: LD_VAR 0 4
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: PUSH
40647: LD_INT 21
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: PPUSH
40666: CALL_OW 69
40670: ST_TO_ADDR
// if not tmp then
40671: LD_VAR 0 8
40675: NOT
40676: IFFALSE 40680
// exit ;
40678: GO 42244
// for i in tmp do
40680: LD_ADDR_VAR 0 6
40684: PUSH
40685: LD_VAR 0 8
40689: PUSH
40690: FOR_IN
40691: IFFALSE 42219
// begin points := [ 0 , 0 , 0 ] ;
40693: LD_ADDR_VAR 0 9
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: ST_TO_ADDR
// bpoints := 1 ;
40712: LD_ADDR_VAR 0 10
40716: PUSH
40717: LD_INT 1
40719: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40720: LD_VAR 0 6
40724: PPUSH
40725: CALL_OW 247
40729: PUSH
40730: LD_INT 1
40732: DOUBLE
40733: EQUAL
40734: IFTRUE 40738
40736: GO 41320
40738: POP
// begin if GetClass ( i ) = 1 then
40739: LD_VAR 0 6
40743: PPUSH
40744: CALL_OW 257
40748: PUSH
40749: LD_INT 1
40751: EQUAL
40752: IFFALSE 40773
// points := [ 10 , 5 , 3 ] ;
40754: LD_ADDR_VAR 0 9
40758: PUSH
40759: LD_INT 10
40761: PUSH
40762: LD_INT 5
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40773: LD_VAR 0 6
40777: PPUSH
40778: CALL_OW 257
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: LD_INT 4
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: IN
40797: IFFALSE 40818
// points := [ 3 , 2 , 1 ] ;
40799: LD_ADDR_VAR 0 9
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40818: LD_VAR 0 6
40822: PPUSH
40823: CALL_OW 257
40827: PUSH
40828: LD_INT 5
40830: EQUAL
40831: IFFALSE 40852
// points := [ 130 , 5 , 2 ] ;
40833: LD_ADDR_VAR 0 9
40837: PUSH
40838: LD_INT 130
40840: PUSH
40841: LD_INT 5
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40852: LD_VAR 0 6
40856: PPUSH
40857: CALL_OW 257
40861: PUSH
40862: LD_INT 8
40864: EQUAL
40865: IFFALSE 40886
// points := [ 35 , 35 , 30 ] ;
40867: LD_ADDR_VAR 0 9
40871: PUSH
40872: LD_INT 35
40874: PUSH
40875: LD_INT 35
40877: PUSH
40878: LD_INT 30
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40886: LD_VAR 0 6
40890: PPUSH
40891: CALL_OW 257
40895: PUSH
40896: LD_INT 9
40898: EQUAL
40899: IFFALSE 40920
// points := [ 20 , 55 , 40 ] ;
40901: LD_ADDR_VAR 0 9
40905: PUSH
40906: LD_INT 20
40908: PUSH
40909: LD_INT 55
40911: PUSH
40912: LD_INT 40
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40920: LD_VAR 0 6
40924: PPUSH
40925: CALL_OW 257
40929: PUSH
40930: LD_INT 12
40932: PUSH
40933: LD_INT 16
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: IN
40940: IFFALSE 40961
// points := [ 5 , 3 , 2 ] ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_INT 5
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL_OW 257
40970: PUSH
40971: LD_INT 17
40973: EQUAL
40974: IFFALSE 40995
// points := [ 100 , 50 , 75 ] ;
40976: LD_ADDR_VAR 0 9
40980: PUSH
40981: LD_INT 100
40983: PUSH
40984: LD_INT 50
40986: PUSH
40987: LD_INT 75
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40995: LD_VAR 0 6
40999: PPUSH
41000: CALL_OW 257
41004: PUSH
41005: LD_INT 15
41007: EQUAL
41008: IFFALSE 41029
// points := [ 10 , 5 , 3 ] ;
41010: LD_ADDR_VAR 0 9
41014: PUSH
41015: LD_INT 10
41017: PUSH
41018: LD_INT 5
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41029: LD_VAR 0 6
41033: PPUSH
41034: CALL_OW 257
41038: PUSH
41039: LD_INT 14
41041: EQUAL
41042: IFFALSE 41063
// points := [ 10 , 0 , 0 ] ;
41044: LD_ADDR_VAR 0 9
41048: PUSH
41049: LD_INT 10
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41063: LD_VAR 0 6
41067: PPUSH
41068: CALL_OW 257
41072: PUSH
41073: LD_INT 11
41075: EQUAL
41076: IFFALSE 41097
// points := [ 30 , 10 , 5 ] ;
41078: LD_ADDR_VAR 0 9
41082: PUSH
41083: LD_INT 30
41085: PUSH
41086: LD_INT 10
41088: PUSH
41089: LD_INT 5
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41097: LD_VAR 0 1
41101: PPUSH
41102: LD_INT 5
41104: PPUSH
41105: CALL_OW 321
41109: PUSH
41110: LD_INT 2
41112: EQUAL
41113: IFFALSE 41130
// bpoints := bpoints * 1.8 ;
41115: LD_ADDR_VAR 0 10
41119: PUSH
41120: LD_VAR 0 10
41124: PUSH
41125: LD_REAL  1.80000000000000E+0000
41128: MUL
41129: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41130: LD_VAR 0 6
41134: PPUSH
41135: CALL_OW 257
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: LD_INT 4
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: IN
41158: IFFALSE 41178
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: LD_INT 51
41168: PPUSH
41169: CALL_OW 321
41173: PUSH
41174: LD_INT 2
41176: EQUAL
41177: AND
41178: IFFALSE 41195
// bpoints := bpoints * 1.2 ;
41180: LD_ADDR_VAR 0 10
41184: PUSH
41185: LD_VAR 0 10
41189: PUSH
41190: LD_REAL  1.20000000000000E+0000
41193: MUL
41194: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41195: LD_VAR 0 6
41199: PPUSH
41200: CALL_OW 257
41204: PUSH
41205: LD_INT 5
41207: PUSH
41208: LD_INT 7
41210: PUSH
41211: LD_INT 9
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: IN
41219: IFFALSE 41239
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: LD_INT 52
41229: PPUSH
41230: CALL_OW 321
41234: PUSH
41235: LD_INT 2
41237: EQUAL
41238: AND
41239: IFFALSE 41256
// bpoints := bpoints * 1.5 ;
41241: LD_ADDR_VAR 0 10
41245: PUSH
41246: LD_VAR 0 10
41250: PUSH
41251: LD_REAL  1.50000000000000E+0000
41254: MUL
41255: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41256: LD_VAR 0 1
41260: PPUSH
41261: LD_INT 66
41263: PPUSH
41264: CALL_OW 321
41268: PUSH
41269: LD_INT 2
41271: EQUAL
41272: IFFALSE 41289
// bpoints := bpoints * 1.1 ;
41274: LD_ADDR_VAR 0 10
41278: PUSH
41279: LD_VAR 0 10
41283: PUSH
41284: LD_REAL  1.10000000000000E+0000
41287: MUL
41288: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41289: LD_ADDR_VAR 0 10
41293: PUSH
41294: LD_VAR 0 10
41298: PUSH
41299: LD_VAR 0 6
41303: PPUSH
41304: LD_INT 1
41306: PPUSH
41307: CALL_OW 259
41311: PUSH
41312: LD_REAL  1.15000000000000E+0000
41315: MUL
41316: MUL
41317: ST_TO_ADDR
// end ; unit_vehicle :
41318: GO 42148
41320: LD_INT 2
41322: DOUBLE
41323: EQUAL
41324: IFTRUE 41328
41326: GO 42136
41328: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41329: LD_VAR 0 6
41333: PPUSH
41334: CALL_OW 264
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 42
41344: PUSH
41345: LD_INT 24
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: IN
41353: IFFALSE 41374
// points := [ 25 , 5 , 3 ] ;
41355: LD_ADDR_VAR 0 9
41359: PUSH
41360: LD_INT 25
41362: PUSH
41363: LD_INT 5
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41374: LD_VAR 0 6
41378: PPUSH
41379: CALL_OW 264
41383: PUSH
41384: LD_INT 4
41386: PUSH
41387: LD_INT 43
41389: PUSH
41390: LD_INT 25
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: IN
41398: IFFALSE 41419
// points := [ 40 , 15 , 5 ] ;
41400: LD_ADDR_VAR 0 9
41404: PUSH
41405: LD_INT 40
41407: PUSH
41408: LD_INT 15
41410: PUSH
41411: LD_INT 5
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41419: LD_VAR 0 6
41423: PPUSH
41424: CALL_OW 264
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 23
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: IN
41439: IFFALSE 41460
// points := [ 7 , 25 , 8 ] ;
41441: LD_ADDR_VAR 0 9
41445: PUSH
41446: LD_INT 7
41448: PUSH
41449: LD_INT 25
41451: PUSH
41452: LD_INT 8
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41460: LD_VAR 0 6
41464: PPUSH
41465: CALL_OW 264
41469: PUSH
41470: LD_INT 5
41472: PUSH
41473: LD_INT 27
41475: PUSH
41476: LD_INT 44
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: IN
41484: IFFALSE 41505
// points := [ 14 , 50 , 16 ] ;
41486: LD_ADDR_VAR 0 9
41490: PUSH
41491: LD_INT 14
41493: PUSH
41494: LD_INT 50
41496: PUSH
41497: LD_INT 16
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41505: LD_VAR 0 6
41509: PPUSH
41510: CALL_OW 264
41514: PUSH
41515: LD_INT 6
41517: PUSH
41518: LD_INT 46
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: IN
41525: IFFALSE 41546
// points := [ 32 , 120 , 70 ] ;
41527: LD_ADDR_VAR 0 9
41531: PUSH
41532: LD_INT 32
41534: PUSH
41535: LD_INT 120
41537: PUSH
41538: LD_INT 70
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41546: LD_VAR 0 6
41550: PPUSH
41551: CALL_OW 264
41555: PUSH
41556: LD_INT 7
41558: PUSH
41559: LD_INT 28
41561: PUSH
41562: LD_INT 45
41564: PUSH
41565: LD_INT 92
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: IN
41574: IFFALSE 41595
// points := [ 35 , 20 , 45 ] ;
41576: LD_ADDR_VAR 0 9
41580: PUSH
41581: LD_INT 35
41583: PUSH
41584: LD_INT 20
41586: PUSH
41587: LD_INT 45
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41595: LD_VAR 0 6
41599: PPUSH
41600: CALL_OW 264
41604: PUSH
41605: LD_INT 47
41607: PUSH
41608: EMPTY
41609: LIST
41610: IN
41611: IFFALSE 41632
// points := [ 67 , 45 , 75 ] ;
41613: LD_ADDR_VAR 0 9
41617: PUSH
41618: LD_INT 67
41620: PUSH
41621: LD_INT 45
41623: PUSH
41624: LD_INT 75
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41632: LD_VAR 0 6
41636: PPUSH
41637: CALL_OW 264
41641: PUSH
41642: LD_INT 26
41644: PUSH
41645: EMPTY
41646: LIST
41647: IN
41648: IFFALSE 41669
// points := [ 120 , 30 , 80 ] ;
41650: LD_ADDR_VAR 0 9
41654: PUSH
41655: LD_INT 120
41657: PUSH
41658: LD_INT 30
41660: PUSH
41661: LD_INT 80
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41669: LD_VAR 0 6
41673: PPUSH
41674: CALL_OW 264
41678: PUSH
41679: LD_INT 22
41681: PUSH
41682: EMPTY
41683: LIST
41684: IN
41685: IFFALSE 41706
// points := [ 40 , 1 , 1 ] ;
41687: LD_ADDR_VAR 0 9
41691: PUSH
41692: LD_INT 40
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41706: LD_VAR 0 6
41710: PPUSH
41711: CALL_OW 264
41715: PUSH
41716: LD_INT 29
41718: PUSH
41719: EMPTY
41720: LIST
41721: IN
41722: IFFALSE 41743
// points := [ 70 , 200 , 400 ] ;
41724: LD_ADDR_VAR 0 9
41728: PUSH
41729: LD_INT 70
41731: PUSH
41732: LD_INT 200
41734: PUSH
41735: LD_INT 400
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41743: LD_VAR 0 6
41747: PPUSH
41748: CALL_OW 264
41752: PUSH
41753: LD_INT 14
41755: PUSH
41756: LD_INT 53
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: IN
41763: IFFALSE 41784
// points := [ 40 , 10 , 20 ] ;
41765: LD_ADDR_VAR 0 9
41769: PUSH
41770: LD_INT 40
41772: PUSH
41773: LD_INT 10
41775: PUSH
41776: LD_INT 20
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41784: LD_VAR 0 6
41788: PPUSH
41789: CALL_OW 264
41793: PUSH
41794: LD_INT 9
41796: PUSH
41797: EMPTY
41798: LIST
41799: IN
41800: IFFALSE 41821
// points := [ 5 , 70 , 20 ] ;
41802: LD_ADDR_VAR 0 9
41806: PUSH
41807: LD_INT 5
41809: PUSH
41810: LD_INT 70
41812: PUSH
41813: LD_INT 20
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41821: LD_VAR 0 6
41825: PPUSH
41826: CALL_OW 264
41830: PUSH
41831: LD_INT 10
41833: PUSH
41834: EMPTY
41835: LIST
41836: IN
41837: IFFALSE 41858
// points := [ 35 , 110 , 70 ] ;
41839: LD_ADDR_VAR 0 9
41843: PUSH
41844: LD_INT 35
41846: PUSH
41847: LD_INT 110
41849: PUSH
41850: LD_INT 70
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41858: LD_VAR 0 6
41862: PPUSH
41863: CALL_OW 265
41867: PUSH
41868: LD_INT 25
41870: EQUAL
41871: IFFALSE 41892
// points := [ 80 , 65 , 100 ] ;
41873: LD_ADDR_VAR 0 9
41877: PUSH
41878: LD_INT 80
41880: PUSH
41881: LD_INT 65
41883: PUSH
41884: LD_INT 100
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41892: LD_VAR 0 6
41896: PPUSH
41897: CALL_OW 263
41901: PUSH
41902: LD_INT 1
41904: EQUAL
41905: IFFALSE 41940
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41907: LD_ADDR_VAR 0 10
41911: PUSH
41912: LD_VAR 0 10
41916: PUSH
41917: LD_VAR 0 6
41921: PPUSH
41922: CALL_OW 311
41926: PPUSH
41927: LD_INT 3
41929: PPUSH
41930: CALL_OW 259
41934: PUSH
41935: LD_INT 4
41937: MUL
41938: MUL
41939: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41940: LD_VAR 0 6
41944: PPUSH
41945: CALL_OW 263
41949: PUSH
41950: LD_INT 2
41952: EQUAL
41953: IFFALSE 42004
// begin j := IsControledBy ( i ) ;
41955: LD_ADDR_VAR 0 7
41959: PUSH
41960: LD_VAR 0 6
41964: PPUSH
41965: CALL_OW 312
41969: ST_TO_ADDR
// if j then
41970: LD_VAR 0 7
41974: IFFALSE 42004
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41976: LD_ADDR_VAR 0 10
41980: PUSH
41981: LD_VAR 0 10
41985: PUSH
41986: LD_VAR 0 7
41990: PPUSH
41991: LD_INT 3
41993: PPUSH
41994: CALL_OW 259
41998: PUSH
41999: LD_INT 3
42001: MUL
42002: MUL
42003: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42004: LD_VAR 0 6
42008: PPUSH
42009: CALL_OW 264
42013: PUSH
42014: LD_INT 5
42016: PUSH
42017: LD_INT 6
42019: PUSH
42020: LD_INT 46
42022: PUSH
42023: LD_INT 44
42025: PUSH
42026: LD_INT 47
42028: PUSH
42029: LD_INT 45
42031: PUSH
42032: LD_INT 28
42034: PUSH
42035: LD_INT 7
42037: PUSH
42038: LD_INT 27
42040: PUSH
42041: LD_INT 29
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: IN
42056: IFFALSE 42076
42058: PUSH
42059: LD_VAR 0 1
42063: PPUSH
42064: LD_INT 52
42066: PPUSH
42067: CALL_OW 321
42071: PUSH
42072: LD_INT 2
42074: EQUAL
42075: AND
42076: IFFALSE 42093
// bpoints := bpoints * 1.2 ;
42078: LD_ADDR_VAR 0 10
42082: PUSH
42083: LD_VAR 0 10
42087: PUSH
42088: LD_REAL  1.20000000000000E+0000
42091: MUL
42092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42093: LD_VAR 0 6
42097: PPUSH
42098: CALL_OW 264
42102: PUSH
42103: LD_INT 6
42105: PUSH
42106: LD_INT 46
42108: PUSH
42109: LD_INT 47
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: IN
42117: IFFALSE 42134
// bpoints := bpoints * 1.2 ;
42119: LD_ADDR_VAR 0 10
42123: PUSH
42124: LD_VAR 0 10
42128: PUSH
42129: LD_REAL  1.20000000000000E+0000
42132: MUL
42133: ST_TO_ADDR
// end ; unit_building :
42134: GO 42148
42136: LD_INT 3
42138: DOUBLE
42139: EQUAL
42140: IFTRUE 42144
42142: GO 42147
42144: POP
// ; end ;
42145: GO 42148
42147: POP
// for j = 1 to 3 do
42148: LD_ADDR_VAR 0 7
42152: PUSH
42153: DOUBLE
42154: LD_INT 1
42156: DEC
42157: ST_TO_ADDR
42158: LD_INT 3
42160: PUSH
42161: FOR_TO
42162: IFFALSE 42215
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42164: LD_ADDR_VAR 0 5
42168: PUSH
42169: LD_VAR 0 5
42173: PPUSH
42174: LD_VAR 0 7
42178: PPUSH
42179: LD_VAR 0 5
42183: PUSH
42184: LD_VAR 0 7
42188: ARRAY
42189: PUSH
42190: LD_VAR 0 9
42194: PUSH
42195: LD_VAR 0 7
42199: ARRAY
42200: PUSH
42201: LD_VAR 0 10
42205: MUL
42206: PLUS
42207: PPUSH
42208: CALL_OW 1
42212: ST_TO_ADDR
42213: GO 42161
42215: POP
42216: POP
// end ;
42217: GO 40690
42219: POP
42220: POP
// result := Replace ( result , 4 , tmp ) ;
42221: LD_ADDR_VAR 0 5
42225: PUSH
42226: LD_VAR 0 5
42230: PPUSH
42231: LD_INT 4
42233: PPUSH
42234: LD_VAR 0 8
42238: PPUSH
42239: CALL_OW 1
42243: ST_TO_ADDR
// end ;
42244: LD_VAR 0 5
42248: RET
// export function DangerAtRange ( unit , range ) ; begin
42249: LD_INT 0
42251: PPUSH
// if not unit then
42252: LD_VAR 0 1
42256: NOT
42257: IFFALSE 42261
// exit ;
42259: GO 42306
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 255
42275: PPUSH
42276: LD_VAR 0 1
42280: PPUSH
42281: CALL_OW 250
42285: PPUSH
42286: LD_VAR 0 1
42290: PPUSH
42291: CALL_OW 251
42295: PPUSH
42296: LD_VAR 0 2
42300: PPUSH
42301: CALL 40540 0 4
42305: ST_TO_ADDR
// end ;
42306: LD_VAR 0 3
42310: RET
// export function DangerInArea ( side , area ) ; begin
42311: LD_INT 0
42313: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 2
42323: PPUSH
42324: LD_INT 81
42326: PUSH
42327: LD_VAR 0 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PPUSH
42336: CALL_OW 70
42340: ST_TO_ADDR
// end ;
42341: LD_VAR 0 3
42345: RET
// export function IsExtension ( b ) ; begin
42346: LD_INT 0
42348: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42349: LD_ADDR_VAR 0 2
42353: PUSH
42354: LD_VAR 0 1
42358: PUSH
42359: LD_INT 23
42361: PUSH
42362: LD_INT 20
42364: PUSH
42365: LD_INT 22
42367: PUSH
42368: LD_INT 17
42370: PUSH
42371: LD_INT 24
42373: PUSH
42374: LD_INT 21
42376: PUSH
42377: LD_INT 19
42379: PUSH
42380: LD_INT 16
42382: PUSH
42383: LD_INT 25
42385: PUSH
42386: LD_INT 18
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: IN
42401: ST_TO_ADDR
// end ;
42402: LD_VAR 0 2
42406: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42407: LD_INT 0
42409: PPUSH
42410: PPUSH
42411: PPUSH
// result := [ ] ;
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: EMPTY
42418: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: LD_VAR 0 2
42428: PPUSH
42429: LD_INT 21
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PPUSH
42439: CALL_OW 70
42443: ST_TO_ADDR
// if not tmp then
42444: LD_VAR 0 5
42448: NOT
42449: IFFALSE 42453
// exit ;
42451: GO 42517
// if checkLink then
42453: LD_VAR 0 3
42457: IFFALSE 42507
// begin for i in tmp do
42459: LD_ADDR_VAR 0 6
42463: PUSH
42464: LD_VAR 0 5
42468: PUSH
42469: FOR_IN
42470: IFFALSE 42505
// if GetBase ( i ) <> base then
42472: LD_VAR 0 6
42476: PPUSH
42477: CALL_OW 274
42481: PUSH
42482: LD_VAR 0 1
42486: NONEQUAL
42487: IFFALSE 42503
// ComLinkToBase ( base , i ) ;
42489: LD_VAR 0 1
42493: PPUSH
42494: LD_VAR 0 6
42498: PPUSH
42499: CALL_OW 169
42503: GO 42469
42505: POP
42506: POP
// end ; result := tmp ;
42507: LD_ADDR_VAR 0 4
42511: PUSH
42512: LD_VAR 0 5
42516: ST_TO_ADDR
// end ;
42517: LD_VAR 0 4
42521: RET
// export function ComComplete ( units , b ) ; var i ; begin
42522: LD_INT 0
42524: PPUSH
42525: PPUSH
// if not units then
42526: LD_VAR 0 1
42530: NOT
42531: IFFALSE 42535
// exit ;
42533: GO 42625
// for i in units do
42535: LD_ADDR_VAR 0 4
42539: PUSH
42540: LD_VAR 0 1
42544: PUSH
42545: FOR_IN
42546: IFFALSE 42623
// if BuildingStatus ( b ) = bs_build then
42548: LD_VAR 0 2
42552: PPUSH
42553: CALL_OW 461
42557: PUSH
42558: LD_INT 1
42560: EQUAL
42561: IFFALSE 42621
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42563: LD_VAR 0 4
42567: PPUSH
42568: LD_STRING h
42570: PUSH
42571: LD_VAR 0 2
42575: PPUSH
42576: CALL_OW 250
42580: PUSH
42581: LD_VAR 0 2
42585: PPUSH
42586: CALL_OW 251
42590: PUSH
42591: LD_VAR 0 2
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: PPUSH
42617: CALL_OW 446
42621: GO 42545
42623: POP
42624: POP
// end ;
42625: LD_VAR 0 3
42629: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42630: LD_INT 0
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42638: LD_VAR 0 1
42642: NOT
42643: IFTRUE 42660
42645: PUSH
42646: LD_VAR 0 1
42650: PPUSH
42651: CALL_OW 263
42655: PUSH
42656: LD_INT 2
42658: NONEQUAL
42659: OR
42660: IFFALSE 42664
// exit ;
42662: GO 42980
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42664: LD_ADDR_VAR 0 6
42668: PUSH
42669: LD_INT 22
42671: PUSH
42672: LD_VAR 0 1
42676: PPUSH
42677: CALL_OW 255
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 30
42691: PUSH
42692: LD_INT 36
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 34
42701: PUSH
42702: LD_INT 31
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PPUSH
42718: CALL_OW 69
42722: ST_TO_ADDR
// if not tmp then
42723: LD_VAR 0 6
42727: NOT
42728: IFFALSE 42732
// exit ;
42730: GO 42980
// result := [ ] ;
42732: LD_ADDR_VAR 0 2
42736: PUSH
42737: EMPTY
42738: ST_TO_ADDR
// for i in tmp do
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 6
42748: PUSH
42749: FOR_IN
42750: IFFALSE 42821
// begin t := UnitsInside ( i ) ;
42752: LD_ADDR_VAR 0 4
42756: PUSH
42757: LD_VAR 0 3
42761: PPUSH
42762: CALL_OW 313
42766: ST_TO_ADDR
// if t then
42767: LD_VAR 0 4
42771: IFFALSE 42819
// for j in t do
42773: LD_ADDR_VAR 0 7
42777: PUSH
42778: LD_VAR 0 4
42782: PUSH
42783: FOR_IN
42784: IFFALSE 42817
// result := Replace ( result , result + 1 , j ) ;
42786: LD_ADDR_VAR 0 2
42790: PUSH
42791: LD_VAR 0 2
42795: PPUSH
42796: LD_VAR 0 2
42800: PUSH
42801: LD_INT 1
42803: PLUS
42804: PPUSH
42805: LD_VAR 0 7
42809: PPUSH
42810: CALL_OW 1
42814: ST_TO_ADDR
42815: GO 42783
42817: POP
42818: POP
// end ;
42819: GO 42749
42821: POP
42822: POP
// if not result then
42823: LD_VAR 0 2
42827: NOT
42828: IFFALSE 42832
// exit ;
42830: GO 42980
// mech := result [ 1 ] ;
42832: LD_ADDR_VAR 0 5
42836: PUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 1
42844: ARRAY
42845: ST_TO_ADDR
// if result > 1 then
42846: LD_VAR 0 2
42850: PUSH
42851: LD_INT 1
42853: GREATER
42854: IFFALSE 42966
// begin for i = 2 to result do
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: DOUBLE
42862: LD_INT 2
42864: DEC
42865: ST_TO_ADDR
42866: LD_VAR 0 2
42870: PUSH
42871: FOR_TO
42872: IFFALSE 42964
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42874: LD_ADDR_VAR 0 4
42878: PUSH
42879: LD_VAR 0 2
42883: PUSH
42884: LD_VAR 0 3
42888: ARRAY
42889: PPUSH
42890: LD_INT 3
42892: PPUSH
42893: CALL_OW 259
42897: PUSH
42898: LD_VAR 0 2
42902: PUSH
42903: LD_VAR 0 3
42907: ARRAY
42908: PPUSH
42909: CALL_OW 432
42913: MINUS
42914: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42915: LD_VAR 0 4
42919: PUSH
42920: LD_VAR 0 5
42924: PPUSH
42925: LD_INT 3
42927: PPUSH
42928: CALL_OW 259
42932: PUSH
42933: LD_VAR 0 5
42937: PPUSH
42938: CALL_OW 432
42942: MINUS
42943: GREATEREQUAL
42944: IFFALSE 42962
// mech := result [ i ] ;
42946: LD_ADDR_VAR 0 5
42950: PUSH
42951: LD_VAR 0 2
42955: PUSH
42956: LD_VAR 0 3
42960: ARRAY
42961: ST_TO_ADDR
// end ;
42962: GO 42871
42964: POP
42965: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42966: LD_VAR 0 1
42970: PPUSH
42971: LD_VAR 0 5
42975: PPUSH
42976: CALL_OW 135
// end ;
42980: LD_VAR 0 2
42984: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42985: LD_INT 0
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
42992: PPUSH
42993: PPUSH
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
// result := [ ] ;
43000: LD_ADDR_VAR 0 7
43004: PUSH
43005: EMPTY
43006: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43007: LD_VAR 0 1
43011: PPUSH
43012: CALL_OW 266
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: IN
43027: NOT
43028: IFFALSE 43032
// exit ;
43030: GO 44672
// if name then
43032: LD_VAR 0 3
43036: IFFALSE 43052
// SetBName ( base_dep , name ) ;
43038: LD_VAR 0 1
43042: PPUSH
43043: LD_VAR 0 3
43047: PPUSH
43048: CALL_OW 500
// base := GetBase ( base_dep ) ;
43052: LD_ADDR_VAR 0 15
43056: PUSH
43057: LD_VAR 0 1
43061: PPUSH
43062: CALL_OW 274
43066: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43067: LD_ADDR_VAR 0 16
43071: PUSH
43072: LD_VAR 0 1
43076: PPUSH
43077: CALL_OW 255
43081: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43082: LD_ADDR_VAR 0 17
43086: PUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 248
43096: ST_TO_ADDR
// if sources then
43097: LD_VAR 0 5
43101: IFFALSE 43148
// for i = 1 to 3 do
43103: LD_ADDR_VAR 0 8
43107: PUSH
43108: DOUBLE
43109: LD_INT 1
43111: DEC
43112: ST_TO_ADDR
43113: LD_INT 3
43115: PUSH
43116: FOR_TO
43117: IFFALSE 43146
// AddResourceType ( base , i , sources [ i ] ) ;
43119: LD_VAR 0 15
43123: PPUSH
43124: LD_VAR 0 8
43128: PPUSH
43129: LD_VAR 0 5
43133: PUSH
43134: LD_VAR 0 8
43138: ARRAY
43139: PPUSH
43140: CALL_OW 276
43144: GO 43116
43146: POP
43147: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43148: LD_ADDR_VAR 0 18
43152: PUSH
43153: LD_VAR 0 15
43157: PPUSH
43158: LD_VAR 0 2
43162: PPUSH
43163: LD_INT 1
43165: PPUSH
43166: CALL 42407 0 3
43170: ST_TO_ADDR
// InitHc ;
43171: CALL_OW 19
// InitUc ;
43175: CALL_OW 18
// uc_side := side ;
43179: LD_ADDR_OWVAR 20
43183: PUSH
43184: LD_VAR 0 16
43188: ST_TO_ADDR
// uc_nation := nation ;
43189: LD_ADDR_OWVAR 21
43193: PUSH
43194: LD_VAR 0 17
43198: ST_TO_ADDR
// if buildings then
43199: LD_VAR 0 18
43203: IFFALSE 44531
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43205: LD_ADDR_VAR 0 19
43209: PUSH
43210: LD_VAR 0 18
43214: PPUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 30
43220: PUSH
43221: LD_INT 29
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 30
43230: PUSH
43231: LD_INT 30
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: PPUSH
43243: CALL_OW 72
43247: ST_TO_ADDR
// if tmp then
43248: LD_VAR 0 19
43252: IFFALSE 43300
// for i in tmp do
43254: LD_ADDR_VAR 0 8
43258: PUSH
43259: LD_VAR 0 19
43263: PUSH
43264: FOR_IN
43265: IFFALSE 43298
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43267: LD_VAR 0 8
43271: PPUSH
43272: CALL_OW 250
43276: PPUSH
43277: LD_VAR 0 8
43281: PPUSH
43282: CALL_OW 251
43286: PPUSH
43287: LD_VAR 0 16
43291: PPUSH
43292: CALL_OW 441
43296: GO 43264
43298: POP
43299: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43300: LD_VAR 0 18
43304: PPUSH
43305: LD_INT 2
43307: PUSH
43308: LD_INT 30
43310: PUSH
43311: LD_INT 32
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 30
43320: PUSH
43321: LD_INT 33
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: PPUSH
43333: CALL_OW 72
43337: IFFALSE 43425
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43339: LD_ADDR_VAR 0 8
43343: PUSH
43344: LD_VAR 0 18
43348: PPUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 30
43354: PUSH
43355: LD_INT 32
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 30
43364: PUSH
43365: LD_INT 33
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: PPUSH
43377: CALL_OW 72
43381: PUSH
43382: FOR_IN
43383: IFFALSE 43423
// begin if not GetBWeapon ( i ) then
43385: LD_VAR 0 8
43389: PPUSH
43390: CALL_OW 269
43394: NOT
43395: IFFALSE 43421
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43397: LD_VAR 0 8
43401: PPUSH
43402: LD_VAR 0 8
43406: PPUSH
43407: LD_VAR 0 2
43411: PPUSH
43412: CALL 44677 0 2
43416: PPUSH
43417: CALL_OW 431
// end ;
43421: GO 43382
43423: POP
43424: POP
// end ; for i = 1 to personel do
43425: LD_ADDR_VAR 0 8
43429: PUSH
43430: DOUBLE
43431: LD_INT 1
43433: DEC
43434: ST_TO_ADDR
43435: LD_VAR 0 6
43439: PUSH
43440: FOR_TO
43441: IFFALSE 44511
// begin if i > 4 then
43443: LD_VAR 0 8
43447: PUSH
43448: LD_INT 4
43450: GREATER
43451: IFFALSE 43455
// break ;
43453: GO 44511
// case i of 1 :
43455: LD_VAR 0 8
43459: PUSH
43460: LD_INT 1
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43548
43468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43469: LD_ADDR_VAR 0 12
43473: PUSH
43474: LD_VAR 0 18
43478: PPUSH
43479: LD_INT 22
43481: PUSH
43482: LD_VAR 0 16
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 58
43493: PUSH
43494: EMPTY
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 30
43502: PUSH
43503: LD_INT 32
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 30
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 30
43522: PUSH
43523: LD_INT 5
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: PPUSH
43541: CALL_OW 72
43545: ST_TO_ADDR
43546: GO 43770
43548: LD_INT 2
43550: DOUBLE
43551: EQUAL
43552: IFTRUE 43556
43554: GO 43618
43556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43557: LD_ADDR_VAR 0 12
43561: PUSH
43562: LD_VAR 0 18
43566: PPUSH
43567: LD_INT 22
43569: PUSH
43570: LD_VAR 0 16
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 30
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 30
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PPUSH
43611: CALL_OW 72
43615: ST_TO_ADDR
43616: GO 43770
43618: LD_INT 3
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43688
43626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43627: LD_ADDR_VAR 0 12
43631: PUSH
43632: LD_VAR 0 18
43636: PPUSH
43637: LD_INT 22
43639: PUSH
43640: LD_VAR 0 16
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: LD_INT 30
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 30
43664: PUSH
43665: LD_INT 3
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PPUSH
43681: CALL_OW 72
43685: ST_TO_ADDR
43686: GO 43770
43688: LD_INT 4
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43696
43694: GO 43769
43696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43697: LD_ADDR_VAR 0 12
43701: PUSH
43702: LD_VAR 0 18
43706: PPUSH
43707: LD_INT 22
43709: PUSH
43710: LD_VAR 0 16
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 30
43724: PUSH
43725: LD_INT 6
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 30
43734: PUSH
43735: LD_INT 7
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 30
43744: PUSH
43745: LD_INT 8
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PPUSH
43762: CALL_OW 72
43766: ST_TO_ADDR
43767: GO 43770
43769: POP
// if i = 1 then
43770: LD_VAR 0 8
43774: PUSH
43775: LD_INT 1
43777: EQUAL
43778: IFFALSE 43889
// begin tmp := [ ] ;
43780: LD_ADDR_VAR 0 19
43784: PUSH
43785: EMPTY
43786: ST_TO_ADDR
// for j in f do
43787: LD_ADDR_VAR 0 9
43791: PUSH
43792: LD_VAR 0 12
43796: PUSH
43797: FOR_IN
43798: IFFALSE 43871
// if GetBType ( j ) = b_bunker then
43800: LD_VAR 0 9
43804: PPUSH
43805: CALL_OW 266
43809: PUSH
43810: LD_INT 32
43812: EQUAL
43813: IFFALSE 43840
// tmp := Insert ( tmp , 1 , j ) else
43815: LD_ADDR_VAR 0 19
43819: PUSH
43820: LD_VAR 0 19
43824: PPUSH
43825: LD_INT 1
43827: PPUSH
43828: LD_VAR 0 9
43832: PPUSH
43833: CALL_OW 2
43837: ST_TO_ADDR
43838: GO 43869
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43840: LD_ADDR_VAR 0 19
43844: PUSH
43845: LD_VAR 0 19
43849: PPUSH
43850: LD_VAR 0 19
43854: PUSH
43855: LD_INT 1
43857: PLUS
43858: PPUSH
43859: LD_VAR 0 9
43863: PPUSH
43864: CALL_OW 2
43868: ST_TO_ADDR
43869: GO 43797
43871: POP
43872: POP
// if tmp then
43873: LD_VAR 0 19
43877: IFFALSE 43889
// f := tmp ;
43879: LD_ADDR_VAR 0 12
43883: PUSH
43884: LD_VAR 0 19
43888: ST_TO_ADDR
// end ; x := personel [ i ] ;
43889: LD_ADDR_VAR 0 13
43893: PUSH
43894: LD_VAR 0 6
43898: PUSH
43899: LD_VAR 0 8
43903: ARRAY
43904: ST_TO_ADDR
// if x = - 1 then
43905: LD_VAR 0 13
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: EQUAL
43914: IFFALSE 44125
// begin for j in f do
43916: LD_ADDR_VAR 0 9
43920: PUSH
43921: LD_VAR 0 12
43925: PUSH
43926: FOR_IN
43927: IFFALSE 44121
// repeat InitHc ;
43929: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43933: LD_VAR 0 9
43937: PPUSH
43938: CALL_OW 266
43942: PUSH
43943: LD_INT 5
43945: EQUAL
43946: IFFALSE 44016
// begin if UnitsInside ( j ) < 3 then
43948: LD_VAR 0 9
43952: PPUSH
43953: CALL_OW 313
43957: PUSH
43958: LD_INT 3
43960: LESS
43961: IFFALSE 43997
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43963: LD_INT 0
43965: PPUSH
43966: LD_INT 5
43968: PUSH
43969: LD_INT 8
43971: PUSH
43972: LD_INT 9
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: PUSH
43980: LD_VAR 0 17
43984: ARRAY
43985: PPUSH
43986: LD_VAR 0 4
43990: PPUSH
43991: CALL_OW 380
43995: GO 44014
// PrepareHuman ( false , i , skill ) ;
43997: LD_INT 0
43999: PPUSH
44000: LD_VAR 0 8
44004: PPUSH
44005: LD_VAR 0 4
44009: PPUSH
44010: CALL_OW 380
// end else
44014: GO 44033
// PrepareHuman ( false , i , skill ) ;
44016: LD_INT 0
44018: PPUSH
44019: LD_VAR 0 8
44023: PPUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: CALL_OW 380
// un := CreateHuman ;
44033: LD_ADDR_VAR 0 14
44037: PUSH
44038: CALL_OW 44
44042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44043: LD_ADDR_VAR 0 7
44047: PUSH
44048: LD_VAR 0 7
44052: PPUSH
44053: LD_INT 1
44055: PPUSH
44056: LD_VAR 0 14
44060: PPUSH
44061: CALL_OW 2
44065: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44066: LD_VAR 0 14
44070: PPUSH
44071: LD_VAR 0 9
44075: PPUSH
44076: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44080: LD_VAR 0 9
44084: PPUSH
44085: CALL_OW 313
44089: PUSH
44090: LD_INT 6
44092: EQUAL
44093: IFTRUE 44117
44095: PUSH
44096: LD_VAR 0 9
44100: PPUSH
44101: CALL_OW 266
44105: PUSH
44106: LD_INT 32
44108: PUSH
44109: LD_INT 31
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: IN
44116: OR
44117: IFFALSE 43929
44119: GO 43926
44121: POP
44122: POP
// end else
44123: GO 44509
// for j = 1 to x do
44125: LD_ADDR_VAR 0 9
44129: PUSH
44130: DOUBLE
44131: LD_INT 1
44133: DEC
44134: ST_TO_ADDR
44135: LD_VAR 0 13
44139: PUSH
44140: FOR_TO
44141: IFFALSE 44507
// begin InitHc ;
44143: CALL_OW 19
// if not f then
44147: LD_VAR 0 12
44151: NOT
44152: IFFALSE 44241
// begin PrepareHuman ( false , i , skill ) ;
44154: LD_INT 0
44156: PPUSH
44157: LD_VAR 0 8
44161: PPUSH
44162: LD_VAR 0 4
44166: PPUSH
44167: CALL_OW 380
// un := CreateHuman ;
44171: LD_ADDR_VAR 0 14
44175: PUSH
44176: CALL_OW 44
44180: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44181: LD_ADDR_VAR 0 7
44185: PUSH
44186: LD_VAR 0 7
44190: PPUSH
44191: LD_INT 1
44193: PPUSH
44194: LD_VAR 0 14
44198: PPUSH
44199: CALL_OW 2
44203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44204: LD_VAR 0 14
44208: PPUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 250
44218: PPUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: CALL_OW 251
44228: PPUSH
44229: LD_INT 10
44231: PPUSH
44232: LD_INT 0
44234: PPUSH
44235: CALL_OW 50
// continue ;
44239: GO 44140
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44241: LD_VAR 0 12
44245: PUSH
44246: LD_INT 1
44248: ARRAY
44249: PPUSH
44250: CALL_OW 313
44254: IFFALSE 44282
44256: PUSH
44257: LD_VAR 0 12
44261: PUSH
44262: LD_INT 1
44264: ARRAY
44265: PPUSH
44266: CALL_OW 266
44270: PUSH
44271: LD_INT 32
44273: PUSH
44274: LD_INT 31
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: IN
44281: AND
44282: IFTRUE 44303
44284: PUSH
44285: LD_VAR 0 12
44289: PUSH
44290: LD_INT 1
44292: ARRAY
44293: PPUSH
44294: CALL_OW 313
44298: PUSH
44299: LD_INT 6
44301: EQUAL
44302: OR
44303: IFFALSE 44323
// f := Delete ( f , 1 ) ;
44305: LD_ADDR_VAR 0 12
44309: PUSH
44310: LD_VAR 0 12
44314: PPUSH
44315: LD_INT 1
44317: PPUSH
44318: CALL_OW 3
44322: ST_TO_ADDR
// if not f then
44323: LD_VAR 0 12
44327: NOT
44328: IFFALSE 44346
// begin x := x + 2 ;
44330: LD_ADDR_VAR 0 13
44334: PUSH
44335: LD_VAR 0 13
44339: PUSH
44340: LD_INT 2
44342: PLUS
44343: ST_TO_ADDR
// continue ;
44344: GO 44140
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44346: LD_VAR 0 12
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: PPUSH
44355: CALL_OW 266
44359: PUSH
44360: LD_INT 5
44362: EQUAL
44363: IFFALSE 44437
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44365: LD_VAR 0 12
44369: PUSH
44370: LD_INT 1
44372: ARRAY
44373: PPUSH
44374: CALL_OW 313
44378: PUSH
44379: LD_INT 3
44381: LESS
44382: IFFALSE 44418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44384: LD_INT 0
44386: PPUSH
44387: LD_INT 5
44389: PUSH
44390: LD_INT 8
44392: PUSH
44393: LD_INT 9
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 17
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 4
44411: PPUSH
44412: CALL_OW 380
44416: GO 44435
// PrepareHuman ( false , i , skill ) ;
44418: LD_INT 0
44420: PPUSH
44421: LD_VAR 0 8
44425: PPUSH
44426: LD_VAR 0 4
44430: PPUSH
44431: CALL_OW 380
// end else
44435: GO 44454
// PrepareHuman ( false , i , skill ) ;
44437: LD_INT 0
44439: PPUSH
44440: LD_VAR 0 8
44444: PPUSH
44445: LD_VAR 0 4
44449: PPUSH
44450: CALL_OW 380
// un := CreateHuman ;
44454: LD_ADDR_VAR 0 14
44458: PUSH
44459: CALL_OW 44
44463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44464: LD_ADDR_VAR 0 7
44468: PUSH
44469: LD_VAR 0 7
44473: PPUSH
44474: LD_INT 1
44476: PPUSH
44477: LD_VAR 0 14
44481: PPUSH
44482: CALL_OW 2
44486: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44487: LD_VAR 0 14
44491: PPUSH
44492: LD_VAR 0 12
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: PPUSH
44501: CALL_OW 52
// end ;
44505: GO 44140
44507: POP
44508: POP
// end ;
44509: GO 43440
44511: POP
44512: POP
// result := result ^ buildings ;
44513: LD_ADDR_VAR 0 7
44517: PUSH
44518: LD_VAR 0 7
44522: PUSH
44523: LD_VAR 0 18
44527: ADD
44528: ST_TO_ADDR
// end else
44529: GO 44672
// begin for i = 1 to personel do
44531: LD_ADDR_VAR 0 8
44535: PUSH
44536: DOUBLE
44537: LD_INT 1
44539: DEC
44540: ST_TO_ADDR
44541: LD_VAR 0 6
44545: PUSH
44546: FOR_TO
44547: IFFALSE 44670
// begin if i > 4 then
44549: LD_VAR 0 8
44553: PUSH
44554: LD_INT 4
44556: GREATER
44557: IFFALSE 44561
// break ;
44559: GO 44670
// x := personel [ i ] ;
44561: LD_ADDR_VAR 0 13
44565: PUSH
44566: LD_VAR 0 6
44570: PUSH
44571: LD_VAR 0 8
44575: ARRAY
44576: ST_TO_ADDR
// if x = - 1 then
44577: LD_VAR 0 13
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: EQUAL
44586: IFFALSE 44590
// continue ;
44588: GO 44546
// PrepareHuman ( false , i , skill ) ;
44590: LD_INT 0
44592: PPUSH
44593: LD_VAR 0 8
44597: PPUSH
44598: LD_VAR 0 4
44602: PPUSH
44603: CALL_OW 380
// un := CreateHuman ;
44607: LD_ADDR_VAR 0 14
44611: PUSH
44612: CALL_OW 44
44616: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44617: LD_VAR 0 14
44621: PPUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: CALL_OW 250
44631: PPUSH
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 251
44641: PPUSH
44642: LD_INT 10
44644: PPUSH
44645: LD_INT 0
44647: PPUSH
44648: CALL_OW 50
// result := result ^ un ;
44652: LD_ADDR_VAR 0 7
44656: PUSH
44657: LD_VAR 0 7
44661: PUSH
44662: LD_VAR 0 14
44666: ADD
44667: ST_TO_ADDR
// end ;
44668: GO 44546
44670: POP
44671: POP
// end ; end ;
44672: LD_VAR 0 7
44676: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
// result := false ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_INT 0
44702: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44703: LD_VAR 0 1
44707: NOT
44708: IFTRUE 44733
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 266
44720: PUSH
44721: LD_INT 32
44723: PUSH
44724: LD_INT 33
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: IN
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 45872
// nat := GetNation ( tower ) ;
44737: LD_ADDR_VAR 0 12
44741: PUSH
44742: LD_VAR 0 1
44746: PPUSH
44747: CALL_OW 248
44751: ST_TO_ADDR
// side := GetSide ( tower ) ;
44752: LD_ADDR_VAR 0 16
44756: PUSH
44757: LD_VAR 0 1
44761: PPUSH
44762: CALL_OW 255
44766: ST_TO_ADDR
// x := GetX ( tower ) ;
44767: LD_ADDR_VAR 0 10
44771: PUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 250
44781: ST_TO_ADDR
// y := GetY ( tower ) ;
44782: LD_ADDR_VAR 0 11
44786: PUSH
44787: LD_VAR 0 1
44791: PPUSH
44792: CALL_OW 251
44796: ST_TO_ADDR
// if not x or not y then
44797: LD_VAR 0 10
44801: NOT
44802: IFTRUE 44811
44804: PUSH
44805: LD_VAR 0 11
44809: NOT
44810: OR
44811: IFFALSE 44815
// exit ;
44813: GO 45872
// weapon := 0 ;
44815: LD_ADDR_VAR 0 18
44819: PUSH
44820: LD_INT 0
44822: ST_TO_ADDR
// fac_list := [ ] ;
44823: LD_ADDR_VAR 0 17
44827: PUSH
44828: EMPTY
44829: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44830: LD_ADDR_VAR 0 6
44834: PUSH
44835: LD_VAR 0 1
44839: PPUSH
44840: CALL_OW 274
44844: PPUSH
44845: LD_VAR 0 2
44849: PPUSH
44850: LD_INT 0
44852: PPUSH
44853: CALL 42407 0 3
44857: PPUSH
44858: LD_INT 30
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PPUSH
44868: CALL_OW 72
44872: ST_TO_ADDR
// if not factories then
44873: LD_VAR 0 6
44877: NOT
44878: IFFALSE 44882
// exit ;
44880: GO 45872
// for i in factories do
44882: LD_ADDR_VAR 0 8
44886: PUSH
44887: LD_VAR 0 6
44891: PUSH
44892: FOR_IN
44893: IFFALSE 44918
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44895: LD_ADDR_VAR 0 17
44899: PUSH
44900: LD_VAR 0 17
44904: PUSH
44905: LD_VAR 0 8
44909: PPUSH
44910: CALL_OW 478
44914: UNION
44915: ST_TO_ADDR
44916: GO 44892
44918: POP
44919: POP
// if not fac_list then
44920: LD_VAR 0 17
44924: NOT
44925: IFFALSE 44929
// exit ;
44927: GO 45872
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44929: LD_ADDR_VAR 0 5
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: LD_INT 5
44939: PUSH
44940: LD_INT 9
44942: PUSH
44943: LD_INT 10
44945: PUSH
44946: LD_INT 6
44948: PUSH
44949: LD_INT 7
44951: PUSH
44952: LD_INT 11
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 27
44966: PUSH
44967: LD_INT 28
44969: PUSH
44970: LD_INT 26
44972: PUSH
44973: LD_INT 30
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 43
44984: PUSH
44985: LD_INT 44
44987: PUSH
44988: LD_INT 46
44990: PUSH
44991: LD_INT 45
44993: PUSH
44994: LD_INT 47
44996: PUSH
44997: LD_INT 49
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: PUSH
45013: LD_VAR 0 12
45017: ARRAY
45018: ST_TO_ADDR
// list := list isect fac_list ;
45019: LD_ADDR_VAR 0 5
45023: PUSH
45024: LD_VAR 0 5
45028: PUSH
45029: LD_VAR 0 17
45033: ISECT
45034: ST_TO_ADDR
// if not list then
45035: LD_VAR 0 5
45039: NOT
45040: IFFALSE 45044
// exit ;
45042: GO 45872
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45044: LD_VAR 0 12
45048: PUSH
45049: LD_INT 3
45051: EQUAL
45052: IFFALSE 45064
45054: PUSH
45055: LD_INT 49
45057: PUSH
45058: LD_VAR 0 5
45062: IN
45063: AND
45064: IFFALSE 45084
45066: PUSH
45067: LD_INT 31
45069: PPUSH
45070: LD_VAR 0 16
45074: PPUSH
45075: CALL_OW 321
45079: PUSH
45080: LD_INT 2
45082: EQUAL
45083: AND
45084: IFFALSE 45144
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45086: LD_INT 22
45088: PUSH
45089: LD_VAR 0 16
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 35
45100: PUSH
45101: LD_INT 49
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 91
45110: PUSH
45111: LD_VAR 0 1
45115: PUSH
45116: LD_INT 10
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: PPUSH
45129: CALL_OW 69
45133: NOT
45134: IFFALSE 45144
// weapon := ru_time_lapser ;
45136: LD_ADDR_VAR 0 18
45140: PUSH
45141: LD_INT 49
45143: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45144: LD_VAR 0 12
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: IN
45159: IFFALSE 45183
45161: PUSH
45162: LD_INT 11
45164: PUSH
45165: LD_VAR 0 5
45169: IN
45170: IFTRUE 45182
45172: PUSH
45173: LD_INT 30
45175: PUSH
45176: LD_VAR 0 5
45180: IN
45181: OR
45182: AND
45183: IFFALSE 45203
45185: PUSH
45186: LD_INT 6
45188: PPUSH
45189: LD_VAR 0 16
45193: PPUSH
45194: CALL_OW 321
45198: PUSH
45199: LD_INT 2
45201: EQUAL
45202: AND
45203: IFFALSE 45370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45205: LD_INT 22
45207: PUSH
45208: LD_VAR 0 16
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 35
45222: PUSH
45223: LD_INT 11
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 35
45232: PUSH
45233: LD_INT 30
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 91
45247: PUSH
45248: LD_VAR 0 1
45252: PUSH
45253: LD_INT 18
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: PPUSH
45266: CALL_OW 69
45270: NOT
45271: IFFALSE 45347
45273: PUSH
45274: LD_INT 22
45276: PUSH
45277: LD_VAR 0 16
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 30
45291: PUSH
45292: LD_INT 32
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 30
45301: PUSH
45302: LD_INT 33
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 91
45316: PUSH
45317: LD_VAR 0 1
45321: PUSH
45322: LD_INT 12
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: PPUSH
45338: CALL_OW 69
45342: PUSH
45343: LD_INT 2
45345: GREATER
45346: AND
45347: IFFALSE 45370
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45349: LD_ADDR_VAR 0 18
45353: PUSH
45354: LD_INT 11
45356: PUSH
45357: LD_INT 30
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_VAR 0 12
45368: ARRAY
45369: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45370: LD_VAR 0 18
45374: NOT
45375: IFFALSE 45395
45377: PUSH
45378: LD_INT 40
45380: PPUSH
45381: LD_VAR 0 16
45385: PPUSH
45386: CALL_OW 321
45390: PUSH
45391: LD_INT 2
45393: EQUAL
45394: AND
45395: IFFALSE 45431
45397: PUSH
45398: LD_INT 7
45400: PUSH
45401: LD_VAR 0 5
45405: IN
45406: IFTRUE 45418
45408: PUSH
45409: LD_INT 28
45411: PUSH
45412: LD_VAR 0 5
45416: IN
45417: OR
45418: IFTRUE 45430
45420: PUSH
45421: LD_INT 45
45423: PUSH
45424: LD_VAR 0 5
45428: IN
45429: OR
45430: AND
45431: IFFALSE 45685
// begin hex := GetHexInfo ( x , y ) ;
45433: LD_ADDR_VAR 0 4
45437: PUSH
45438: LD_VAR 0 10
45442: PPUSH
45443: LD_VAR 0 11
45447: PPUSH
45448: CALL_OW 546
45452: ST_TO_ADDR
// if hex [ 1 ] then
45453: LD_VAR 0 4
45457: PUSH
45458: LD_INT 1
45460: ARRAY
45461: IFFALSE 45465
// exit ;
45463: GO 45872
// height := hex [ 2 ] ;
45465: LD_ADDR_VAR 0 15
45469: PUSH
45470: LD_VAR 0 4
45474: PUSH
45475: LD_INT 2
45477: ARRAY
45478: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45479: LD_ADDR_VAR 0 14
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
// for i in tmp do
45502: LD_ADDR_VAR 0 8
45506: PUSH
45507: LD_VAR 0 14
45511: PUSH
45512: FOR_IN
45513: IFFALSE 45683
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45515: LD_ADDR_VAR 0 9
45519: PUSH
45520: LD_VAR 0 10
45524: PPUSH
45525: LD_VAR 0 8
45529: PPUSH
45530: LD_INT 5
45532: PPUSH
45533: CALL_OW 272
45537: PUSH
45538: LD_VAR 0 11
45542: PPUSH
45543: LD_VAR 0 8
45547: PPUSH
45548: LD_INT 5
45550: PPUSH
45551: CALL_OW 273
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45560: LD_VAR 0 9
45564: PUSH
45565: LD_INT 1
45567: ARRAY
45568: PPUSH
45569: LD_VAR 0 9
45573: PUSH
45574: LD_INT 2
45576: ARRAY
45577: PPUSH
45578: CALL_OW 488
45582: IFFALSE 45681
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45584: LD_ADDR_VAR 0 4
45588: PUSH
45589: LD_VAR 0 9
45593: PUSH
45594: LD_INT 1
45596: ARRAY
45597: PPUSH
45598: LD_VAR 0 9
45602: PUSH
45603: LD_INT 2
45605: ARRAY
45606: PPUSH
45607: CALL_OW 546
45611: ST_TO_ADDR
// if hex [ 1 ] then
45612: LD_VAR 0 4
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: IFFALSE 45624
// continue ;
45622: GO 45512
// h := hex [ 2 ] ;
45624: LD_ADDR_VAR 0 13
45628: PUSH
45629: LD_VAR 0 4
45633: PUSH
45634: LD_INT 2
45636: ARRAY
45637: ST_TO_ADDR
// if h + 7 < height then
45638: LD_VAR 0 13
45642: PUSH
45643: LD_INT 7
45645: PLUS
45646: PUSH
45647: LD_VAR 0 15
45651: LESS
45652: IFFALSE 45681
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45654: LD_ADDR_VAR 0 18
45658: PUSH
45659: LD_INT 7
45661: PUSH
45662: LD_INT 28
45664: PUSH
45665: LD_INT 45
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: PUSH
45673: LD_VAR 0 12
45677: ARRAY
45678: ST_TO_ADDR
// break ;
45679: GO 45683
// end ; end ; end ;
45681: GO 45512
45683: POP
45684: POP
// end ; if not weapon then
45685: LD_VAR 0 18
45689: NOT
45690: IFFALSE 45750
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45692: LD_ADDR_VAR 0 5
45696: PUSH
45697: LD_VAR 0 5
45701: PUSH
45702: LD_INT 11
45704: PUSH
45705: LD_INT 30
45707: PUSH
45708: LD_INT 49
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: DIFF
45716: ST_TO_ADDR
// if not list then
45717: LD_VAR 0 5
45721: NOT
45722: IFFALSE 45726
// exit ;
45724: GO 45872
// weapon := list [ rand ( 1 , list ) ] ;
45726: LD_ADDR_VAR 0 18
45730: PUSH
45731: LD_VAR 0 5
45735: PUSH
45736: LD_INT 1
45738: PPUSH
45739: LD_VAR 0 5
45743: PPUSH
45744: CALL_OW 12
45748: ARRAY
45749: ST_TO_ADDR
// end ; if weapon then
45750: LD_VAR 0 18
45754: IFFALSE 45872
// begin tmp := CostOfWeapon ( weapon ) ;
45756: LD_ADDR_VAR 0 14
45760: PUSH
45761: LD_VAR 0 18
45765: PPUSH
45766: CALL_OW 451
45770: ST_TO_ADDR
// j := GetBase ( tower ) ;
45771: LD_ADDR_VAR 0 9
45775: PUSH
45776: LD_VAR 0 1
45780: PPUSH
45781: CALL_OW 274
45785: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45786: LD_VAR 0 9
45790: PPUSH
45791: LD_INT 1
45793: PPUSH
45794: CALL_OW 275
45798: PUSH
45799: LD_VAR 0 14
45803: PUSH
45804: LD_INT 1
45806: ARRAY
45807: GREATEREQUAL
45808: IFFALSE 45834
45810: PUSH
45811: LD_VAR 0 9
45815: PPUSH
45816: LD_INT 2
45818: PPUSH
45819: CALL_OW 275
45823: PUSH
45824: LD_VAR 0 14
45828: PUSH
45829: LD_INT 2
45831: ARRAY
45832: GREATEREQUAL
45833: AND
45834: IFFALSE 45860
45836: PUSH
45837: LD_VAR 0 9
45841: PPUSH
45842: LD_INT 3
45844: PPUSH
45845: CALL_OW 275
45849: PUSH
45850: LD_VAR 0 14
45854: PUSH
45855: LD_INT 3
45857: ARRAY
45858: GREATEREQUAL
45859: AND
45860: IFFALSE 45872
// result := weapon ;
45862: LD_ADDR_VAR 0 3
45866: PUSH
45867: LD_VAR 0 18
45871: ST_TO_ADDR
// end ; end ;
45872: LD_VAR 0 3
45876: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45877: LD_INT 0
45879: PPUSH
45880: PPUSH
// result := true ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_INT 1
45888: ST_TO_ADDR
// if array1 = array2 then
45889: LD_VAR 0 1
45893: PUSH
45894: LD_VAR 0 2
45898: EQUAL
45899: IFFALSE 45959
// begin for i = 1 to array1 do
45901: LD_ADDR_VAR 0 4
45905: PUSH
45906: DOUBLE
45907: LD_INT 1
45909: DEC
45910: ST_TO_ADDR
45911: LD_VAR 0 1
45915: PUSH
45916: FOR_TO
45917: IFFALSE 45955
// if array1 [ i ] <> array2 [ i ] then
45919: LD_VAR 0 1
45923: PUSH
45924: LD_VAR 0 4
45928: ARRAY
45929: PUSH
45930: LD_VAR 0 2
45934: PUSH
45935: LD_VAR 0 4
45939: ARRAY
45940: NONEQUAL
45941: IFFALSE 45953
// begin result := false ;
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// break ;
45951: GO 45955
// end ;
45953: GO 45916
45955: POP
45956: POP
// end else
45957: GO 45967
// result := false ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: LD_INT 0
45966: ST_TO_ADDR
// end ;
45967: LD_VAR 0 3
45971: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45972: LD_INT 0
45974: PPUSH
45975: PPUSH
// if not array1 or not array2 then
45976: LD_VAR 0 1
45980: NOT
45981: IFTRUE 45990
45983: PUSH
45984: LD_VAR 0 2
45988: NOT
45989: OR
45990: IFFALSE 45994
// exit ;
45992: GO 46058
// result := true ;
45994: LD_ADDR_VAR 0 3
45998: PUSH
45999: LD_INT 1
46001: ST_TO_ADDR
// for i = 1 to array1 do
46002: LD_ADDR_VAR 0 4
46006: PUSH
46007: DOUBLE
46008: LD_INT 1
46010: DEC
46011: ST_TO_ADDR
46012: LD_VAR 0 1
46016: PUSH
46017: FOR_TO
46018: IFFALSE 46056
// if array1 [ i ] <> array2 [ i ] then
46020: LD_VAR 0 1
46024: PUSH
46025: LD_VAR 0 4
46029: ARRAY
46030: PUSH
46031: LD_VAR 0 2
46035: PUSH
46036: LD_VAR 0 4
46040: ARRAY
46041: NONEQUAL
46042: IFFALSE 46054
// begin result := false ;
46044: LD_ADDR_VAR 0 3
46048: PUSH
46049: LD_INT 0
46051: ST_TO_ADDR
// break ;
46052: GO 46056
// end ;
46054: GO 46017
46056: POP
46057: POP
// end ;
46058: LD_VAR 0 3
46062: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46063: LD_INT 0
46065: PPUSH
46066: PPUSH
46067: PPUSH
// pom := GetBase ( fac ) ;
46068: LD_ADDR_VAR 0 5
46072: PUSH
46073: LD_VAR 0 1
46077: PPUSH
46078: CALL_OW 274
46082: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46083: LD_ADDR_VAR 0 4
46087: PUSH
46088: LD_VAR 0 2
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: PPUSH
46097: LD_VAR 0 2
46101: PUSH
46102: LD_INT 2
46104: ARRAY
46105: PPUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 3
46113: ARRAY
46114: PPUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_INT 4
46122: ARRAY
46123: PPUSH
46124: CALL_OW 449
46128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46129: LD_ADDR_VAR 0 3
46133: PUSH
46134: LD_VAR 0 5
46138: PPUSH
46139: LD_INT 1
46141: PPUSH
46142: CALL_OW 275
46146: PUSH
46147: LD_VAR 0 4
46151: PUSH
46152: LD_INT 1
46154: ARRAY
46155: GREATEREQUAL
46156: IFFALSE 46182
46158: PUSH
46159: LD_VAR 0 5
46163: PPUSH
46164: LD_INT 2
46166: PPUSH
46167: CALL_OW 275
46171: PUSH
46172: LD_VAR 0 4
46176: PUSH
46177: LD_INT 2
46179: ARRAY
46180: GREATEREQUAL
46181: AND
46182: IFFALSE 46208
46184: PUSH
46185: LD_VAR 0 5
46189: PPUSH
46190: LD_INT 3
46192: PPUSH
46193: CALL_OW 275
46197: PUSH
46198: LD_VAR 0 4
46202: PUSH
46203: LD_INT 3
46205: ARRAY
46206: GREATEREQUAL
46207: AND
46208: ST_TO_ADDR
// end ;
46209: LD_VAR 0 3
46213: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46214: LD_INT 0
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
// pom := GetBase ( building ) ;
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: LD_VAR 0 1
46229: PPUSH
46230: CALL_OW 274
46234: ST_TO_ADDR
// if not pom then
46235: LD_VAR 0 3
46239: NOT
46240: IFFALSE 46244
// exit ;
46242: GO 46418
// btype := GetBType ( building ) ;
46244: LD_ADDR_VAR 0 5
46248: PUSH
46249: LD_VAR 0 1
46253: PPUSH
46254: CALL_OW 266
46258: ST_TO_ADDR
// if btype = b_armoury then
46259: LD_VAR 0 5
46263: PUSH
46264: LD_INT 4
46266: EQUAL
46267: IFFALSE 46277
// btype := b_barracks ;
46269: LD_ADDR_VAR 0 5
46273: PUSH
46274: LD_INT 5
46276: ST_TO_ADDR
// if btype = b_depot then
46277: LD_VAR 0 5
46281: PUSH
46282: LD_INT 0
46284: EQUAL
46285: IFFALSE 46295
// btype := b_warehouse ;
46287: LD_ADDR_VAR 0 5
46291: PUSH
46292: LD_INT 1
46294: ST_TO_ADDR
// if btype = b_workshop then
46295: LD_VAR 0 5
46299: PUSH
46300: LD_INT 2
46302: EQUAL
46303: IFFALSE 46313
// btype := b_factory ;
46305: LD_ADDR_VAR 0 5
46309: PUSH
46310: LD_INT 3
46312: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46313: LD_ADDR_VAR 0 4
46317: PUSH
46318: LD_VAR 0 5
46322: PPUSH
46323: LD_VAR 0 1
46327: PPUSH
46328: CALL_OW 248
46332: PPUSH
46333: CALL_OW 450
46337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46338: LD_ADDR_VAR 0 2
46342: PUSH
46343: LD_VAR 0 3
46347: PPUSH
46348: LD_INT 1
46350: PPUSH
46351: CALL_OW 275
46355: PUSH
46356: LD_VAR 0 4
46360: PUSH
46361: LD_INT 1
46363: ARRAY
46364: GREATEREQUAL
46365: IFFALSE 46391
46367: PUSH
46368: LD_VAR 0 3
46372: PPUSH
46373: LD_INT 2
46375: PPUSH
46376: CALL_OW 275
46380: PUSH
46381: LD_VAR 0 4
46385: PUSH
46386: LD_INT 2
46388: ARRAY
46389: GREATEREQUAL
46390: AND
46391: IFFALSE 46417
46393: PUSH
46394: LD_VAR 0 3
46398: PPUSH
46399: LD_INT 3
46401: PPUSH
46402: CALL_OW 275
46406: PUSH
46407: LD_VAR 0 4
46411: PUSH
46412: LD_INT 3
46414: ARRAY
46415: GREATEREQUAL
46416: AND
46417: ST_TO_ADDR
// end ;
46418: LD_VAR 0 2
46422: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46423: LD_INT 0
46425: PPUSH
46426: PPUSH
46427: PPUSH
// pom := GetBase ( building ) ;
46428: LD_ADDR_VAR 0 4
46432: PUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: CALL_OW 274
46442: ST_TO_ADDR
// if not pom then
46443: LD_VAR 0 4
46447: NOT
46448: IFFALSE 46452
// exit ;
46450: GO 46557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46452: LD_ADDR_VAR 0 5
46456: PUSH
46457: LD_VAR 0 2
46461: PPUSH
46462: LD_VAR 0 1
46466: PPUSH
46467: CALL_OW 248
46471: PPUSH
46472: CALL_OW 450
46476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46477: LD_ADDR_VAR 0 3
46481: PUSH
46482: LD_VAR 0 4
46486: PPUSH
46487: LD_INT 1
46489: PPUSH
46490: CALL_OW 275
46494: PUSH
46495: LD_VAR 0 5
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: GREATEREQUAL
46504: IFFALSE 46530
46506: PUSH
46507: LD_VAR 0 4
46511: PPUSH
46512: LD_INT 2
46514: PPUSH
46515: CALL_OW 275
46519: PUSH
46520: LD_VAR 0 5
46524: PUSH
46525: LD_INT 2
46527: ARRAY
46528: GREATEREQUAL
46529: AND
46530: IFFALSE 46556
46532: PUSH
46533: LD_VAR 0 4
46537: PPUSH
46538: LD_INT 3
46540: PPUSH
46541: CALL_OW 275
46545: PUSH
46546: LD_VAR 0 5
46550: PUSH
46551: LD_INT 3
46553: ARRAY
46554: GREATEREQUAL
46555: AND
46556: ST_TO_ADDR
// end ;
46557: LD_VAR 0 3
46561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46562: LD_INT 0
46564: PPUSH
46565: PPUSH
46566: PPUSH
46567: PPUSH
46568: PPUSH
46569: PPUSH
46570: PPUSH
46571: PPUSH
46572: PPUSH
46573: PPUSH
46574: PPUSH
// result := false ;
46575: LD_ADDR_VAR 0 8
46579: PUSH
46580: LD_INT 0
46582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46583: LD_VAR 0 5
46587: NOT
46588: IFTRUE 46597
46590: PUSH
46591: LD_VAR 0 1
46595: NOT
46596: OR
46597: IFTRUE 46606
46599: PUSH
46600: LD_VAR 0 2
46604: NOT
46605: OR
46606: IFTRUE 46615
46608: PUSH
46609: LD_VAR 0 3
46613: NOT
46614: OR
46615: IFFALSE 46619
// exit ;
46617: GO 47445
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46619: LD_ADDR_VAR 0 14
46623: PUSH
46624: LD_VAR 0 1
46628: PPUSH
46629: LD_VAR 0 2
46633: PPUSH
46634: LD_VAR 0 3
46638: PPUSH
46639: LD_VAR 0 4
46643: PPUSH
46644: LD_VAR 0 5
46648: PUSH
46649: LD_INT 1
46651: ARRAY
46652: PPUSH
46653: CALL_OW 248
46657: PPUSH
46658: LD_INT 0
46660: PPUSH
46661: CALL 48726 0 6
46665: ST_TO_ADDR
// if not hexes then
46666: LD_VAR 0 14
46670: NOT
46671: IFFALSE 46675
// exit ;
46673: GO 47445
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46675: LD_ADDR_VAR 0 17
46679: PUSH
46680: LD_VAR 0 5
46684: PPUSH
46685: LD_INT 22
46687: PUSH
46688: LD_VAR 0 13
46692: PPUSH
46693: CALL_OW 255
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 30
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 30
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PPUSH
46734: CALL_OW 72
46738: ST_TO_ADDR
// for i = 1 to hexes do
46739: LD_ADDR_VAR 0 9
46743: PUSH
46744: DOUBLE
46745: LD_INT 1
46747: DEC
46748: ST_TO_ADDR
46749: LD_VAR 0 14
46753: PUSH
46754: FOR_TO
46755: IFFALSE 47443
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46757: LD_ADDR_VAR 0 13
46761: PUSH
46762: LD_VAR 0 14
46766: PUSH
46767: LD_VAR 0 9
46771: ARRAY
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: PPUSH
46777: LD_VAR 0 14
46781: PUSH
46782: LD_VAR 0 9
46786: ARRAY
46787: PUSH
46788: LD_INT 2
46790: ARRAY
46791: PPUSH
46792: CALL_OW 428
46796: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46797: LD_VAR 0 14
46801: PUSH
46802: LD_VAR 0 9
46806: ARRAY
46807: PUSH
46808: LD_INT 1
46810: ARRAY
46811: PPUSH
46812: LD_VAR 0 14
46816: PUSH
46817: LD_VAR 0 9
46821: ARRAY
46822: PUSH
46823: LD_INT 2
46825: ARRAY
46826: PPUSH
46827: CALL_OW 351
46831: IFTRUE 46870
46833: PUSH
46834: LD_VAR 0 14
46838: PUSH
46839: LD_VAR 0 9
46843: ARRAY
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PPUSH
46849: LD_VAR 0 14
46853: PUSH
46854: LD_VAR 0 9
46858: ARRAY
46859: PUSH
46860: LD_INT 2
46862: ARRAY
46863: PPUSH
46864: CALL_OW 488
46868: NOT
46869: OR
46870: IFTRUE 46887
46872: PUSH
46873: LD_VAR 0 13
46877: PPUSH
46878: CALL_OW 247
46882: PUSH
46883: LD_INT 3
46885: EQUAL
46886: OR
46887: IFFALSE 46893
// exit ;
46889: POP
46890: POP
46891: GO 47445
// if not tmp then
46893: LD_VAR 0 13
46897: NOT
46898: IFFALSE 46902
// continue ;
46900: GO 46754
// result := true ;
46902: LD_ADDR_VAR 0 8
46906: PUSH
46907: LD_INT 1
46909: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46910: LD_VAR 0 6
46914: IFFALSE 46931
46916: PUSH
46917: LD_VAR 0 13
46921: PPUSH
46922: CALL_OW 247
46926: PUSH
46927: LD_INT 2
46929: EQUAL
46930: AND
46931: IFFALSE 46948
46933: PUSH
46934: LD_VAR 0 13
46938: PPUSH
46939: CALL_OW 263
46943: PUSH
46944: LD_INT 1
46946: EQUAL
46947: AND
46948: IFFALSE 47112
// begin if IsDrivenBy ( tmp ) then
46950: LD_VAR 0 13
46954: PPUSH
46955: CALL_OW 311
46959: IFFALSE 46963
// continue ;
46961: GO 46754
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46963: LD_VAR 0 6
46967: PPUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 60
46973: PUSH
46974: EMPTY
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: LD_INT 55
46986: PUSH
46987: EMPTY
46988: LIST
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PPUSH
46998: CALL_OW 72
47002: IFFALSE 47110
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47004: LD_ADDR_VAR 0 18
47008: PUSH
47009: LD_VAR 0 6
47013: PPUSH
47014: LD_INT 3
47016: PUSH
47017: LD_INT 60
47019: PUSH
47020: EMPTY
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 55
47032: PUSH
47033: EMPTY
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PPUSH
47044: CALL_OW 72
47048: PUSH
47049: LD_INT 1
47051: ARRAY
47052: ST_TO_ADDR
// if IsInUnit ( driver ) then
47053: LD_VAR 0 18
47057: PPUSH
47058: CALL_OW 310
47062: IFFALSE 47073
// ComExit ( driver ) ;
47064: LD_VAR 0 18
47068: PPUSH
47069: CALL 72726 0 1
// AddComEnterUnit ( driver , tmp ) ;
47073: LD_VAR 0 18
47077: PPUSH
47078: LD_VAR 0 13
47082: PPUSH
47083: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47087: LD_VAR 0 18
47091: PPUSH
47092: LD_VAR 0 7
47096: PPUSH
47097: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47101: LD_VAR 0 18
47105: PPUSH
47106: CALL_OW 181
// end ; continue ;
47110: GO 46754
// end ; if not cleaners or not tmp in cleaners then
47112: LD_VAR 0 6
47116: NOT
47117: IFTRUE 47132
47119: PUSH
47120: LD_VAR 0 13
47124: PUSH
47125: LD_VAR 0 6
47129: IN
47130: NOT
47131: OR
47132: IFFALSE 47441
// begin if dep then
47134: LD_VAR 0 17
47138: IFFALSE 47274
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47140: LD_ADDR_VAR 0 16
47144: PUSH
47145: LD_VAR 0 17
47149: PUSH
47150: LD_INT 1
47152: ARRAY
47153: PPUSH
47154: CALL_OW 250
47158: PPUSH
47159: LD_VAR 0 17
47163: PUSH
47164: LD_INT 1
47166: ARRAY
47167: PPUSH
47168: CALL_OW 254
47172: PPUSH
47173: LD_INT 5
47175: PPUSH
47176: CALL_OW 272
47180: PUSH
47181: LD_VAR 0 17
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: PPUSH
47190: CALL_OW 251
47194: PPUSH
47195: LD_VAR 0 17
47199: PUSH
47200: LD_INT 1
47202: ARRAY
47203: PPUSH
47204: CALL_OW 254
47208: PPUSH
47209: LD_INT 5
47211: PPUSH
47212: CALL_OW 273
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47221: LD_VAR 0 16
47225: PUSH
47226: LD_INT 1
47228: ARRAY
47229: PPUSH
47230: LD_VAR 0 16
47234: PUSH
47235: LD_INT 2
47237: ARRAY
47238: PPUSH
47239: CALL_OW 488
47243: IFFALSE 47274
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47245: LD_VAR 0 13
47249: PPUSH
47250: LD_VAR 0 16
47254: PUSH
47255: LD_INT 1
47257: ARRAY
47258: PPUSH
47259: LD_VAR 0 16
47263: PUSH
47264: LD_INT 2
47266: ARRAY
47267: PPUSH
47268: CALL_OW 111
// continue ;
47272: GO 46754
// end ; end ; r := GetDir ( tmp ) ;
47274: LD_ADDR_VAR 0 15
47278: PUSH
47279: LD_VAR 0 13
47283: PPUSH
47284: CALL_OW 254
47288: ST_TO_ADDR
// if r = 5 then
47289: LD_VAR 0 15
47293: PUSH
47294: LD_INT 5
47296: EQUAL
47297: IFFALSE 47307
// r := 0 ;
47299: LD_ADDR_VAR 0 15
47303: PUSH
47304: LD_INT 0
47306: ST_TO_ADDR
// for j = r to 5 do
47307: LD_ADDR_VAR 0 10
47311: PUSH
47312: DOUBLE
47313: LD_VAR 0 15
47317: DEC
47318: ST_TO_ADDR
47319: LD_INT 5
47321: PUSH
47322: FOR_TO
47323: IFFALSE 47439
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47325: LD_ADDR_VAR 0 11
47329: PUSH
47330: LD_VAR 0 13
47334: PPUSH
47335: CALL_OW 250
47339: PPUSH
47340: LD_VAR 0 10
47344: PPUSH
47345: LD_INT 2
47347: PPUSH
47348: CALL_OW 272
47352: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47353: LD_ADDR_VAR 0 12
47357: PUSH
47358: LD_VAR 0 13
47362: PPUSH
47363: CALL_OW 251
47367: PPUSH
47368: LD_VAR 0 10
47372: PPUSH
47373: LD_INT 2
47375: PPUSH
47376: CALL_OW 273
47380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47381: LD_VAR 0 11
47385: PPUSH
47386: LD_VAR 0 12
47390: PPUSH
47391: CALL_OW 488
47395: IFFALSE 47414
47397: PUSH
47398: LD_VAR 0 11
47402: PPUSH
47403: LD_VAR 0 12
47407: PPUSH
47408: CALL_OW 428
47412: NOT
47413: AND
47414: IFFALSE 47437
// begin ComMoveXY ( tmp , _x , _y ) ;
47416: LD_VAR 0 13
47420: PPUSH
47421: LD_VAR 0 11
47425: PPUSH
47426: LD_VAR 0 12
47430: PPUSH
47431: CALL_OW 111
// break ;
47435: GO 47439
// end ; end ;
47437: GO 47322
47439: POP
47440: POP
// end ; end ;
47441: GO 46754
47443: POP
47444: POP
// end ;
47445: LD_VAR 0 8
47449: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47450: LD_INT 0
47452: PPUSH
// result := true ;
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: LD_INT 1
47460: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47461: LD_VAR 0 2
47465: PUSH
47466: LD_INT 24
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47480
47472: LD_INT 33
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 47505
47480: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_INT 32
47488: PPUSH
47489: LD_VAR 0 1
47493: PPUSH
47494: CALL_OW 321
47498: PUSH
47499: LD_INT 2
47501: EQUAL
47502: ST_TO_ADDR
47503: GO 47821
47505: LD_INT 20
47507: DOUBLE
47508: EQUAL
47509: IFTRUE 47513
47511: GO 47538
47513: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47514: LD_ADDR_VAR 0 3
47518: PUSH
47519: LD_INT 6
47521: PPUSH
47522: LD_VAR 0 1
47526: PPUSH
47527: CALL_OW 321
47531: PUSH
47532: LD_INT 2
47534: EQUAL
47535: ST_TO_ADDR
47536: GO 47821
47538: LD_INT 22
47540: DOUBLE
47541: EQUAL
47542: IFTRUE 47552
47544: LD_INT 36
47546: DOUBLE
47547: EQUAL
47548: IFTRUE 47552
47550: GO 47577
47552: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47553: LD_ADDR_VAR 0 3
47557: PUSH
47558: LD_INT 15
47560: PPUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 321
47570: PUSH
47571: LD_INT 2
47573: EQUAL
47574: ST_TO_ADDR
47575: GO 47821
47577: LD_INT 30
47579: DOUBLE
47580: EQUAL
47581: IFTRUE 47585
47583: GO 47610
47585: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47586: LD_ADDR_VAR 0 3
47590: PUSH
47591: LD_INT 20
47593: PPUSH
47594: LD_VAR 0 1
47598: PPUSH
47599: CALL_OW 321
47603: PUSH
47604: LD_INT 2
47606: EQUAL
47607: ST_TO_ADDR
47608: GO 47821
47610: LD_INT 28
47612: DOUBLE
47613: EQUAL
47614: IFTRUE 47624
47616: LD_INT 21
47618: DOUBLE
47619: EQUAL
47620: IFTRUE 47624
47622: GO 47649
47624: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47625: LD_ADDR_VAR 0 3
47629: PUSH
47630: LD_INT 21
47632: PPUSH
47633: LD_VAR 0 1
47637: PPUSH
47638: CALL_OW 321
47642: PUSH
47643: LD_INT 2
47645: EQUAL
47646: ST_TO_ADDR
47647: GO 47821
47649: LD_INT 16
47651: DOUBLE
47652: EQUAL
47653: IFTRUE 47657
47655: GO 47682
47657: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47658: LD_ADDR_VAR 0 3
47662: PUSH
47663: LD_INT 84
47665: PPUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: CALL_OW 321
47675: PUSH
47676: LD_INT 2
47678: EQUAL
47679: ST_TO_ADDR
47680: GO 47821
47682: LD_INT 19
47684: DOUBLE
47685: EQUAL
47686: IFTRUE 47696
47688: LD_INT 23
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47696
47694: GO 47721
47696: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47697: LD_ADDR_VAR 0 3
47701: PUSH
47702: LD_INT 83
47704: PPUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 321
47714: PUSH
47715: LD_INT 2
47717: EQUAL
47718: ST_TO_ADDR
47719: GO 47821
47721: LD_INT 17
47723: DOUBLE
47724: EQUAL
47725: IFTRUE 47729
47727: GO 47754
47729: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47730: LD_ADDR_VAR 0 3
47734: PUSH
47735: LD_INT 39
47737: PPUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: CALL_OW 321
47747: PUSH
47748: LD_INT 2
47750: EQUAL
47751: ST_TO_ADDR
47752: GO 47821
47754: LD_INT 18
47756: DOUBLE
47757: EQUAL
47758: IFTRUE 47762
47760: GO 47787
47762: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47763: LD_ADDR_VAR 0 3
47767: PUSH
47768: LD_INT 40
47770: PPUSH
47771: LD_VAR 0 1
47775: PPUSH
47776: CALL_OW 321
47780: PUSH
47781: LD_INT 2
47783: EQUAL
47784: ST_TO_ADDR
47785: GO 47821
47787: LD_INT 27
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47795
47793: GO 47820
47795: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47796: LD_ADDR_VAR 0 3
47800: PUSH
47801: LD_INT 35
47803: PPUSH
47804: LD_VAR 0 1
47808: PPUSH
47809: CALL_OW 321
47813: PUSH
47814: LD_INT 2
47816: EQUAL
47817: ST_TO_ADDR
47818: GO 47821
47820: POP
// end ;
47821: LD_VAR 0 3
47825: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47826: LD_INT 0
47828: PPUSH
47829: PPUSH
47830: PPUSH
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
47838: PPUSH
// result := false ;
47839: LD_ADDR_VAR 0 6
47843: PUSH
47844: LD_INT 0
47846: ST_TO_ADDR
// if btype = b_depot then
47847: LD_VAR 0 2
47851: PUSH
47852: LD_INT 0
47854: EQUAL
47855: IFFALSE 47867
// begin result := true ;
47857: LD_ADDR_VAR 0 6
47861: PUSH
47862: LD_INT 1
47864: ST_TO_ADDR
// exit ;
47865: GO 48721
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47867: LD_VAR 0 1
47871: NOT
47872: IFTRUE 47897
47874: PUSH
47875: LD_VAR 0 1
47879: PPUSH
47880: CALL_OW 266
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: IN
47895: NOT
47896: OR
47897: IFTRUE 47906
47899: PUSH
47900: LD_VAR 0 2
47904: NOT
47905: OR
47906: IFTRUE 47942
47908: PUSH
47909: LD_VAR 0 5
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: LD_INT 4
47928: PUSH
47929: LD_INT 5
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: IN
47940: NOT
47941: OR
47942: IFTRUE 47961
47944: PUSH
47945: LD_VAR 0 3
47949: PPUSH
47950: LD_VAR 0 4
47954: PPUSH
47955: CALL_OW 488
47959: NOT
47960: OR
47961: IFFALSE 47965
// exit ;
47963: GO 48721
// side := GetSide ( depot ) ;
47965: LD_ADDR_VAR 0 9
47969: PUSH
47970: LD_VAR 0 1
47974: PPUSH
47975: CALL_OW 255
47979: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47980: LD_VAR 0 9
47984: PPUSH
47985: LD_VAR 0 2
47989: PPUSH
47990: CALL 47450 0 2
47994: NOT
47995: IFFALSE 47999
// exit ;
47997: GO 48721
// pom := GetBase ( depot ) ;
47999: LD_ADDR_VAR 0 10
48003: PUSH
48004: LD_VAR 0 1
48008: PPUSH
48009: CALL_OW 274
48013: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48014: LD_ADDR_VAR 0 11
48018: PUSH
48019: LD_VAR 0 2
48023: PPUSH
48024: LD_VAR 0 1
48028: PPUSH
48029: CALL_OW 248
48033: PPUSH
48034: CALL_OW 450
48038: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48039: LD_VAR 0 10
48043: PPUSH
48044: LD_INT 1
48046: PPUSH
48047: CALL_OW 275
48051: PUSH
48052: LD_VAR 0 11
48056: PUSH
48057: LD_INT 1
48059: ARRAY
48060: GREATEREQUAL
48061: IFFALSE 48087
48063: PUSH
48064: LD_VAR 0 10
48068: PPUSH
48069: LD_INT 2
48071: PPUSH
48072: CALL_OW 275
48076: PUSH
48077: LD_VAR 0 11
48081: PUSH
48082: LD_INT 2
48084: ARRAY
48085: GREATEREQUAL
48086: AND
48087: IFFALSE 48113
48089: PUSH
48090: LD_VAR 0 10
48094: PPUSH
48095: LD_INT 3
48097: PPUSH
48098: CALL_OW 275
48102: PUSH
48103: LD_VAR 0 11
48107: PUSH
48108: LD_INT 3
48110: ARRAY
48111: GREATEREQUAL
48112: AND
48113: NOT
48114: IFFALSE 48118
// exit ;
48116: GO 48721
// if GetBType ( depot ) = b_depot then
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 266
48127: PUSH
48128: LD_INT 0
48130: EQUAL
48131: IFFALSE 48143
// dist := 28 else
48133: LD_ADDR_VAR 0 14
48137: PUSH
48138: LD_INT 28
48140: ST_TO_ADDR
48141: GO 48151
// dist := 36 ;
48143: LD_ADDR_VAR 0 14
48147: PUSH
48148: LD_INT 36
48150: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48151: LD_VAR 0 1
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: LD_VAR 0 4
48165: PPUSH
48166: CALL_OW 297
48170: PUSH
48171: LD_VAR 0 14
48175: GREATER
48176: IFFALSE 48180
// exit ;
48178: GO 48721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48180: LD_ADDR_VAR 0 12
48184: PUSH
48185: LD_VAR 0 2
48189: PPUSH
48190: LD_VAR 0 3
48194: PPUSH
48195: LD_VAR 0 4
48199: PPUSH
48200: LD_VAR 0 5
48204: PPUSH
48205: LD_VAR 0 1
48209: PPUSH
48210: CALL_OW 248
48214: PPUSH
48215: LD_INT 0
48217: PPUSH
48218: CALL 48726 0 6
48222: ST_TO_ADDR
// if not hexes then
48223: LD_VAR 0 12
48227: NOT
48228: IFFALSE 48232
// exit ;
48230: GO 48721
// hex := GetHexInfo ( x , y ) ;
48232: LD_ADDR_VAR 0 15
48236: PUSH
48237: LD_VAR 0 3
48241: PPUSH
48242: LD_VAR 0 4
48246: PPUSH
48247: CALL_OW 546
48251: ST_TO_ADDR
// if hex [ 1 ] then
48252: LD_VAR 0 15
48256: PUSH
48257: LD_INT 1
48259: ARRAY
48260: IFFALSE 48264
// exit ;
48262: GO 48721
// height := hex [ 2 ] ;
48264: LD_ADDR_VAR 0 13
48268: PUSH
48269: LD_VAR 0 15
48273: PUSH
48274: LD_INT 2
48276: ARRAY
48277: ST_TO_ADDR
// for i = 1 to hexes do
48278: LD_ADDR_VAR 0 7
48282: PUSH
48283: DOUBLE
48284: LD_INT 1
48286: DEC
48287: ST_TO_ADDR
48288: LD_VAR 0 12
48292: PUSH
48293: FOR_TO
48294: IFFALSE 48638
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48296: LD_VAR 0 12
48300: PUSH
48301: LD_VAR 0 7
48305: ARRAY
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: LD_VAR 0 12
48315: PUSH
48316: LD_VAR 0 7
48320: ARRAY
48321: PUSH
48322: LD_INT 2
48324: ARRAY
48325: PPUSH
48326: CALL_OW 488
48330: NOT
48331: IFTRUE 48373
48333: PUSH
48334: LD_VAR 0 12
48338: PUSH
48339: LD_VAR 0 7
48343: ARRAY
48344: PUSH
48345: LD_INT 1
48347: ARRAY
48348: PPUSH
48349: LD_VAR 0 12
48353: PUSH
48354: LD_VAR 0 7
48358: ARRAY
48359: PUSH
48360: LD_INT 2
48362: ARRAY
48363: PPUSH
48364: CALL_OW 428
48368: PUSH
48369: LD_INT 0
48371: GREATER
48372: OR
48373: IFTRUE 48411
48375: PUSH
48376: LD_VAR 0 12
48380: PUSH
48381: LD_VAR 0 7
48385: ARRAY
48386: PUSH
48387: LD_INT 1
48389: ARRAY
48390: PPUSH
48391: LD_VAR 0 12
48395: PUSH
48396: LD_VAR 0 7
48400: ARRAY
48401: PUSH
48402: LD_INT 2
48404: ARRAY
48405: PPUSH
48406: CALL_OW 351
48410: OR
48411: IFFALSE 48417
// exit ;
48413: POP
48414: POP
48415: GO 48721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48417: LD_ADDR_VAR 0 8
48421: PUSH
48422: LD_VAR 0 12
48426: PUSH
48427: LD_VAR 0 7
48431: ARRAY
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: LD_VAR 0 12
48441: PUSH
48442: LD_VAR 0 7
48446: ARRAY
48447: PUSH
48448: LD_INT 2
48450: ARRAY
48451: PPUSH
48452: CALL_OW 546
48456: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48457: LD_VAR 0 8
48461: PUSH
48462: LD_INT 1
48464: ARRAY
48465: IFTRUE 48487
48467: PUSH
48468: LD_VAR 0 8
48472: PUSH
48473: LD_INT 2
48475: ARRAY
48476: PUSH
48477: LD_VAR 0 13
48481: PUSH
48482: LD_INT 2
48484: PLUS
48485: GREATER
48486: OR
48487: IFTRUE 48509
48489: PUSH
48490: LD_VAR 0 8
48494: PUSH
48495: LD_INT 2
48497: ARRAY
48498: PUSH
48499: LD_VAR 0 13
48503: PUSH
48504: LD_INT 2
48506: MINUS
48507: LESS
48508: OR
48509: IFTRUE 48577
48511: PUSH
48512: LD_VAR 0 8
48516: PUSH
48517: LD_INT 3
48519: ARRAY
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 8
48526: PUSH
48527: LD_INT 9
48529: PUSH
48530: LD_INT 10
48532: PUSH
48533: LD_INT 11
48535: PUSH
48536: LD_INT 12
48538: PUSH
48539: LD_INT 13
48541: PUSH
48542: LD_INT 16
48544: PUSH
48545: LD_INT 17
48547: PUSH
48548: LD_INT 18
48550: PUSH
48551: LD_INT 19
48553: PUSH
48554: LD_INT 20
48556: PUSH
48557: LD_INT 21
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: IN
48575: NOT
48576: OR
48577: IFTRUE 48590
48579: PUSH
48580: LD_VAR 0 8
48584: PUSH
48585: LD_INT 5
48587: ARRAY
48588: NOT
48589: OR
48590: IFTRUE 48630
48592: PUSH
48593: LD_VAR 0 8
48597: PUSH
48598: LD_INT 6
48600: ARRAY
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 7
48610: PUSH
48611: LD_INT 9
48613: PUSH
48614: LD_INT 10
48616: PUSH
48617: LD_INT 11
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: IN
48628: NOT
48629: OR
48630: IFFALSE 48636
// exit ;
48632: POP
48633: POP
48634: GO 48721
// end ;
48636: GO 48293
48638: POP
48639: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48640: LD_VAR 0 9
48644: PPUSH
48645: LD_VAR 0 3
48649: PPUSH
48650: LD_VAR 0 4
48654: PPUSH
48655: LD_INT 20
48657: PPUSH
48658: CALL 40540 0 4
48662: PUSH
48663: LD_INT 4
48665: ARRAY
48666: IFFALSE 48670
// exit ;
48668: GO 48721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48670: LD_VAR 0 2
48674: PUSH
48675: LD_INT 29
48677: PUSH
48678: LD_INT 30
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: IN
48685: IFFALSE 48709
48687: PUSH
48688: LD_VAR 0 3
48692: PPUSH
48693: LD_VAR 0 4
48697: PPUSH
48698: LD_VAR 0 9
48702: PPUSH
48703: CALL_OW 440
48707: NOT
48708: AND
48709: IFFALSE 48713
// exit ;
48711: GO 48721
// result := true ;
48713: LD_ADDR_VAR 0 6
48717: PUSH
48718: LD_INT 1
48720: ST_TO_ADDR
// end ;
48721: LD_VAR 0 6
48725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48726: LD_INT 0
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
48734: PPUSH
48735: PPUSH
48736: PPUSH
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
48747: PPUSH
48748: PPUSH
48749: PPUSH
48750: PPUSH
48751: PPUSH
48752: PPUSH
48753: PPUSH
48754: PPUSH
48755: PPUSH
48756: PPUSH
48757: PPUSH
48758: PPUSH
48759: PPUSH
48760: PPUSH
48761: PPUSH
48762: PPUSH
48763: PPUSH
48764: PPUSH
48765: PPUSH
48766: PPUSH
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
48773: PPUSH
48774: PPUSH
48775: PPUSH
48776: PPUSH
48777: PPUSH
48778: PPUSH
48779: PPUSH
48780: PPUSH
48781: PPUSH
48782: PPUSH
48783: PPUSH
48784: PPUSH
48785: PPUSH
// result = [ ] ;
48786: LD_ADDR_VAR 0 7
48790: PUSH
48791: EMPTY
48792: ST_TO_ADDR
// temp_list = [ ] ;
48793: LD_ADDR_VAR 0 9
48797: PUSH
48798: EMPTY
48799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48800: LD_VAR 0 4
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 4
48819: PUSH
48820: LD_INT 5
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: IN
48831: NOT
48832: IFTRUE 48875
48834: PUSH
48835: LD_VAR 0 1
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: IN
48850: IFFALSE 48874
48852: PUSH
48853: LD_VAR 0 5
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: IN
48872: NOT
48873: AND
48874: OR
48875: IFFALSE 48879
// exit ;
48877: GO 67278
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48879: LD_VAR 0 1
48883: PUSH
48884: LD_INT 6
48886: PUSH
48887: LD_INT 7
48889: PUSH
48890: LD_INT 8
48892: PUSH
48893: LD_INT 13
48895: PUSH
48896: LD_INT 12
48898: PUSH
48899: LD_INT 15
48901: PUSH
48902: LD_INT 11
48904: PUSH
48905: LD_INT 14
48907: PUSH
48908: LD_INT 10
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: IN
48922: IFFALSE 48932
// btype = b_lab ;
48924: LD_ADDR_VAR 0 1
48928: PUSH
48929: LD_INT 6
48931: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48932: LD_VAR 0 6
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: IN
48951: NOT
48952: IFTRUE 49020
48954: PUSH
48955: LD_VAR 0 1
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: LD_INT 6
48974: PUSH
48975: LD_INT 36
48977: PUSH
48978: LD_INT 4
48980: PUSH
48981: LD_INT 5
48983: PUSH
48984: LD_INT 31
48986: PUSH
48987: LD_INT 32
48989: PUSH
48990: LD_INT 33
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: IN
49006: NOT
49007: IFFALSE 49019
49009: PUSH
49010: LD_VAR 0 6
49014: PUSH
49015: LD_INT 1
49017: EQUAL
49018: AND
49019: OR
49020: IFTRUE 49052
49022: PUSH
49023: LD_VAR 0 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: IN
49038: NOT
49039: IFFALSE 49051
49041: PUSH
49042: LD_VAR 0 6
49046: PUSH
49047: LD_INT 2
49049: EQUAL
49050: AND
49051: OR
49052: IFFALSE 49062
// mode = 0 ;
49054: LD_ADDR_VAR 0 6
49058: PUSH
49059: LD_INT 0
49061: ST_TO_ADDR
// case mode of 0 :
49062: LD_VAR 0 6
49066: PUSH
49067: LD_INT 0
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49075
49073: GO 60528
49075: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49076: LD_ADDR_VAR 0 11
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49269: LD_ADDR_VAR 0 12
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 3
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49465: LD_ADDR_VAR 0 13
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49664: LD_ADDR_VAR 0 14
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49860: LD_ADDR_VAR 0 15
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 3
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50053: LD_ADDR_VAR 0 16
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50246: LD_ADDR_VAR 0 17
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50476: LD_ADDR_VAR 0 18
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50706: LD_ADDR_VAR 0 19
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50936: LD_ADDR_VAR 0 20
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51166: LD_ADDR_VAR 0 21
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51396: LD_ADDR_VAR 0 22
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51626: LD_ADDR_VAR 0 23
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51906: LD_ADDR_VAR 0 24
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52182: LD_ADDR_VAR 0 25
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52456: LD_ADDR_VAR 0 26
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52732: LD_ADDR_VAR 0 27
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53012: LD_ADDR_VAR 0 28
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53294: LD_ADDR_VAR 0 29
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53573: LD_ADDR_VAR 0 30
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53851: LD_ADDR_VAR 0 31
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54129: LD_ADDR_VAR 0 32
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54407: LD_ADDR_VAR 0 33
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54686: LD_ADDR_VAR 0 34
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54966: LD_ADDR_VAR 0 35
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55078: LD_ADDR_VAR 0 36
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55190: LD_ADDR_VAR 0 37
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55302: LD_ADDR_VAR 0 38
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55414: LD_ADDR_VAR 0 39
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55526: LD_ADDR_VAR 0 40
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55638: LD_ADDR_VAR 0 41
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55988: LD_ADDR_VAR 0 42
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56338: LD_ADDR_VAR 0 43
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56686: LD_ADDR_VAR 0 44
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57036: LD_ADDR_VAR 0 45
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 3
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57386: LD_ADDR_VAR 0 46
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57734: LD_ADDR_VAR 0 47
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57885: LD_ADDR_VAR 0 48
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58032: LD_ADDR_VAR 0 49
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58176: LD_ADDR_VAR 0 50
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58320: LD_ADDR_VAR 0 51
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58467: LD_ADDR_VAR 0 52
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58618: LD_ADDR_VAR 0 53
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58848: LD_ADDR_VAR 0 54
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59078: LD_ADDR_VAR 0 55
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59308: LD_ADDR_VAR 0 56
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59538: LD_ADDR_VAR 0 57
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59768: LD_ADDR_VAR 0 58
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59998: LD_ADDR_VAR 0 59
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60086: LD_ADDR_VAR 0 60
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60174: LD_ADDR_VAR 0 61
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60262: LD_ADDR_VAR 0 62
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60350: LD_ADDR_VAR 0 63
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60438: LD_ADDR_VAR 0 64
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: ST_TO_ADDR
// end ; 1 :
60526: GO 66423
60528: LD_INT 1
60530: DOUBLE
60531: EQUAL
60532: IFTRUE 60536
60534: GO 63159
60536: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60537: LD_ADDR_VAR 0 11
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60581: LD_ADDR_VAR 0 12
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60622: LD_ADDR_VAR 0 13
60626: PUSH
60627: LD_INT 3
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60662: LD_ADDR_VAR 0 14
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60703: LD_ADDR_VAR 0 15
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: LIST
60746: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60747: LD_ADDR_VAR 0 16
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60793: LD_ADDR_VAR 0 17
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60837: LD_ADDR_VAR 0 18
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60878: LD_ADDR_VAR 0 19
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60918: LD_ADDR_VAR 0 20
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60959: LD_ADDR_VAR 0 21
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61003: LD_ADDR_VAR 0 22
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61049: LD_ADDR_VAR 0 23
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 4
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61093: LD_ADDR_VAR 0 24
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 4
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61134: LD_ADDR_VAR 0 25
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61174: LD_ADDR_VAR 0 26
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 4
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61215: LD_ADDR_VAR 0 27
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61259: LD_ADDR_VAR 0 28
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: LD_INT 4
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: NEG
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61305: LD_ADDR_VAR 0 29
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 4
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 5
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 5
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 6
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 6
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 5
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61460: LD_ADDR_VAR 0 30
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 4
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 4
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 4
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 5
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 5
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 5
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 6
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 6
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61603: LD_ADDR_VAR 0 31
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 4
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: LD_INT 4
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 5
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: LD_INT 5
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: LD_INT 5
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 6
61700: PUSH
61701: LD_INT 5
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 6
61710: PUSH
61711: LD_INT 6
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 5
61720: PUSH
61721: LD_INT 6
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61742: LD_ADDR_VAR 0 32
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 4
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 5
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 6
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 6
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61885: LD_ADDR_VAR 0 33
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: NEG
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 4
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 4
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 5
61971: NEG
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 5
61982: NEG
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 6
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 6
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62040: LD_ADDR_VAR 0 34
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 4
62095: NEG
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: NEG
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 5
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 5
62131: NEG
62132: PUSH
62133: LD_INT 4
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 5
62143: NEG
62144: PUSH
62145: LD_INT 5
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 5
62155: NEG
62156: PUSH
62157: LD_INT 6
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 6
62167: NEG
62168: PUSH
62169: LD_INT 5
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 6
62179: NEG
62180: PUSH
62181: LD_INT 6
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62203: LD_ADDR_VAR 0 41
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62247: LD_ADDR_VAR 0 42
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62288: LD_ADDR_VAR 0 43
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62328: LD_ADDR_VAR 0 44
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62369: LD_ADDR_VAR 0 45
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62413: LD_ADDR_VAR 0 46
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: LD_INT 3
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 2
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62459: LD_ADDR_VAR 0 47
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62492: LD_ADDR_VAR 0 48
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62523: LD_ADDR_VAR 0 49
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62552: LD_ADDR_VAR 0 50
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62581: LD_ADDR_VAR 0 51
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62612: LD_ADDR_VAR 0 52
62616: PUSH
62617: LD_INT 3
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62645: LD_ADDR_VAR 0 53
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62689: LD_ADDR_VAR 0 54
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: LIST
62729: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62730: LD_ADDR_VAR 0 55
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62770: LD_ADDR_VAR 0 56
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62811: LD_ADDR_VAR 0 57
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62855: LD_ADDR_VAR 0 58
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62901: LD_ADDR_VAR 0 59
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62945: LD_ADDR_VAR 0 60
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62986: LD_ADDR_VAR 0 61
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63026: LD_ADDR_VAR 0 62
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63067: LD_ADDR_VAR 0 63
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63111: LD_ADDR_VAR 0 64
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// end ; 2 :
63157: GO 66423
63159: LD_INT 2
63161: DOUBLE
63162: EQUAL
63163: IFTRUE 63167
63165: GO 66422
63167: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63168: LD_ADDR_VAR 0 29
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 5
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 4
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 4
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 5
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 4
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 3
63451: NEG
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 3
63462: NEG
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 4
63507: NEG
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 4
63518: NEG
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 4
63530: NEG
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 4
63553: NEG
63554: PUSH
63555: LD_INT 4
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: NEG
63566: PUSH
63567: LD_INT 5
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: LD_INT 4
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: NEG
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 4
63601: NEG
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 5
63613: NEG
63614: PUSH
63615: LD_INT 4
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 5
63625: NEG
63626: PUSH
63627: LD_INT 5
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: LD_INT 5
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 5
63649: NEG
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63706: LD_ADDR_VAR 0 30
63710: PUSH
63711: LD_INT 4
63713: PUSH
63714: LD_INT 4
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 5
63733: PUSH
63734: LD_INT 4
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 5
63743: PUSH
63744: LD_INT 5
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 4
63753: PUSH
63754: LD_INT 5
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: LD_INT 4
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 3
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 5
63783: PUSH
63784: LD_INT 3
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: LD_INT 5
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 3
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: LD_INT 4
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 4
63907: NEG
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 3
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 4
63941: NEG
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 5
63952: NEG
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 5
63963: NEG
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 5
63975: NEG
63976: PUSH
63977: LD_INT 2
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 3
63987: NEG
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: NEG
63999: PUSH
64000: LD_INT 3
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: LD_INT 4
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: LD_INT 3
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 4
64058: NEG
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 4
64070: NEG
64071: PUSH
64072: LD_INT 4
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: LD_INT 4
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: LD_INT 4
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 5
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 4
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: LD_INT 3
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: LD_INT 4
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 5
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: LD_INT 3
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: LD_INT 5
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64253: LD_ADDR_VAR 0 31
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 4
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 4
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 5
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 4
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 5
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 4
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 4
64455: NEG
64456: PUSH
64457: LD_INT 4
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 4
64467: NEG
64468: PUSH
64469: LD_INT 5
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: NEG
64480: PUSH
64481: LD_INT 4
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: LD_INT 3
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 4
64503: NEG
64504: PUSH
64505: LD_INT 3
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 5
64515: NEG
64516: PUSH
64517: LD_INT 4
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 5
64527: NEG
64528: PUSH
64529: LD_INT 5
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: LD_INT 5
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: LD_INT 3
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 3
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 4
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 3
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 3
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: LD_INT 4
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 4
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 4
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 4
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 5
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 5
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 4
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: LD_INT 2
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 5
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64803: LD_ADDR_VAR 0 32
64807: PUSH
64808: LD_INT 4
64810: NEG
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 4
64821: NEG
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: NEG
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 4
64855: NEG
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 5
64866: NEG
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 5
64877: NEG
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 5
64889: NEG
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 3
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: LD_INT 4
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: LD_INT 3
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 4
64972: NEG
64973: PUSH
64974: LD_INT 3
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 4
64984: NEG
64985: PUSH
64986: LD_INT 4
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: LD_INT 4
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 4
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 4
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 5
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 4
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 3
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 4
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 5
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 3
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 5
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 4
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 4
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 4
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 4
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 5
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 5
65245: PUSH
65246: LD_INT 5
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 4
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 4
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 5
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: LD_INT 5
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65350: LD_ADDR_VAR 0 33
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: LD_INT 4
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: LD_INT 5
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 3
65381: NEG
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 3
65393: NEG
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 4
65405: NEG
65406: PUSH
65407: LD_INT 3
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 5
65417: NEG
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 5
65429: NEG
65430: PUSH
65431: LD_INT 5
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: NEG
65442: PUSH
65443: LD_INT 5
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 5
65453: NEG
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 4
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 3
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 4
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: LD_INT 4
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 4
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 5
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 5
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: LD_INT 1
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 5
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 4
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 4
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: LD_INT 4
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 4
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: LD_INT 4
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 4
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 5
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 5
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 4
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: LD_INT 5
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65888: LD_ADDR_VAR 0 34
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 4
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_INT 5
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: LD_INT 4
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 3
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 3
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: LD_INT 5
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: LD_INT 3
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: LD_INT 5
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 4
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 4
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 4
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: LD_INT 4
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 4
66100: PUSH
66101: LD_INT 3
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 5
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: LD_INT 5
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 4
66130: PUSH
66131: LD_INT 5
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: LD_INT 4
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: LD_INT 3
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: LD_INT 5
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 3
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 4
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 4
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 4
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: NEG
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: NEG
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 4
66284: NEG
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 3
66296: NEG
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: NEG
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 5
66329: NEG
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 5
66340: NEG
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 5
66352: NEG
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: ST_TO_ADDR
// end ; end ;
66420: GO 66423
66422: POP
// case btype of b_depot , b_warehouse :
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 0
66430: DOUBLE
66431: EQUAL
66432: IFTRUE 66442
66434: LD_INT 1
66436: DOUBLE
66437: EQUAL
66438: IFTRUE 66442
66440: GO 66643
66442: POP
// case nation of nation_american :
66443: LD_VAR 0 5
66447: PUSH
66448: LD_INT 1
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66512
66456: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66457: LD_ADDR_VAR 0 9
66461: PUSH
66462: LD_VAR 0 11
66466: PUSH
66467: LD_VAR 0 12
66471: PUSH
66472: LD_VAR 0 13
66476: PUSH
66477: LD_VAR 0 14
66481: PUSH
66482: LD_VAR 0 15
66486: PUSH
66487: LD_VAR 0 16
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: PUSH
66500: LD_VAR 0 4
66504: PUSH
66505: LD_INT 1
66507: PLUS
66508: ARRAY
66509: ST_TO_ADDR
66510: GO 66641
66512: LD_INT 2
66514: DOUBLE
66515: EQUAL
66516: IFTRUE 66520
66518: GO 66576
66520: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66521: LD_ADDR_VAR 0 9
66525: PUSH
66526: LD_VAR 0 17
66530: PUSH
66531: LD_VAR 0 18
66535: PUSH
66536: LD_VAR 0 19
66540: PUSH
66541: LD_VAR 0 20
66545: PUSH
66546: LD_VAR 0 21
66550: PUSH
66551: LD_VAR 0 22
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_VAR 0 4
66568: PUSH
66569: LD_INT 1
66571: PLUS
66572: ARRAY
66573: ST_TO_ADDR
66574: GO 66641
66576: LD_INT 3
66578: DOUBLE
66579: EQUAL
66580: IFTRUE 66584
66582: GO 66640
66584: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66585: LD_ADDR_VAR 0 9
66589: PUSH
66590: LD_VAR 0 23
66594: PUSH
66595: LD_VAR 0 24
66599: PUSH
66600: LD_VAR 0 25
66604: PUSH
66605: LD_VAR 0 26
66609: PUSH
66610: LD_VAR 0 27
66614: PUSH
66615: LD_VAR 0 28
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: PUSH
66628: LD_VAR 0 4
66632: PUSH
66633: LD_INT 1
66635: PLUS
66636: ARRAY
66637: ST_TO_ADDR
66638: GO 66641
66640: POP
66641: GO 67196
66643: LD_INT 2
66645: DOUBLE
66646: EQUAL
66647: IFTRUE 66657
66649: LD_INT 3
66651: DOUBLE
66652: EQUAL
66653: IFTRUE 66657
66655: GO 66713
66657: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66658: LD_ADDR_VAR 0 9
66662: PUSH
66663: LD_VAR 0 29
66667: PUSH
66668: LD_VAR 0 30
66672: PUSH
66673: LD_VAR 0 31
66677: PUSH
66678: LD_VAR 0 32
66682: PUSH
66683: LD_VAR 0 33
66687: PUSH
66688: LD_VAR 0 34
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: PUSH
66701: LD_VAR 0 4
66705: PUSH
66706: LD_INT 1
66708: PLUS
66709: ARRAY
66710: ST_TO_ADDR
66711: GO 67196
66713: LD_INT 16
66715: DOUBLE
66716: EQUAL
66717: IFTRUE 66775
66719: LD_INT 17
66721: DOUBLE
66722: EQUAL
66723: IFTRUE 66775
66725: LD_INT 18
66727: DOUBLE
66728: EQUAL
66729: IFTRUE 66775
66731: LD_INT 19
66733: DOUBLE
66734: EQUAL
66735: IFTRUE 66775
66737: LD_INT 22
66739: DOUBLE
66740: EQUAL
66741: IFTRUE 66775
66743: LD_INT 20
66745: DOUBLE
66746: EQUAL
66747: IFTRUE 66775
66749: LD_INT 21
66751: DOUBLE
66752: EQUAL
66753: IFTRUE 66775
66755: LD_INT 23
66757: DOUBLE
66758: EQUAL
66759: IFTRUE 66775
66761: LD_INT 24
66763: DOUBLE
66764: EQUAL
66765: IFTRUE 66775
66767: LD_INT 25
66769: DOUBLE
66770: EQUAL
66771: IFTRUE 66775
66773: GO 66831
66775: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66776: LD_ADDR_VAR 0 9
66780: PUSH
66781: LD_VAR 0 35
66785: PUSH
66786: LD_VAR 0 36
66790: PUSH
66791: LD_VAR 0 37
66795: PUSH
66796: LD_VAR 0 38
66800: PUSH
66801: LD_VAR 0 39
66805: PUSH
66806: LD_VAR 0 40
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: PUSH
66819: LD_VAR 0 4
66823: PUSH
66824: LD_INT 1
66826: PLUS
66827: ARRAY
66828: ST_TO_ADDR
66829: GO 67196
66831: LD_INT 6
66833: DOUBLE
66834: EQUAL
66835: IFTRUE 66887
66837: LD_INT 7
66839: DOUBLE
66840: EQUAL
66841: IFTRUE 66887
66843: LD_INT 8
66845: DOUBLE
66846: EQUAL
66847: IFTRUE 66887
66849: LD_INT 13
66851: DOUBLE
66852: EQUAL
66853: IFTRUE 66887
66855: LD_INT 12
66857: DOUBLE
66858: EQUAL
66859: IFTRUE 66887
66861: LD_INT 15
66863: DOUBLE
66864: EQUAL
66865: IFTRUE 66887
66867: LD_INT 11
66869: DOUBLE
66870: EQUAL
66871: IFTRUE 66887
66873: LD_INT 14
66875: DOUBLE
66876: EQUAL
66877: IFTRUE 66887
66879: LD_INT 10
66881: DOUBLE
66882: EQUAL
66883: IFTRUE 66887
66885: GO 66943
66887: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66888: LD_ADDR_VAR 0 9
66892: PUSH
66893: LD_VAR 0 41
66897: PUSH
66898: LD_VAR 0 42
66902: PUSH
66903: LD_VAR 0 43
66907: PUSH
66908: LD_VAR 0 44
66912: PUSH
66913: LD_VAR 0 45
66917: PUSH
66918: LD_VAR 0 46
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: PUSH
66931: LD_VAR 0 4
66935: PUSH
66936: LD_INT 1
66938: PLUS
66939: ARRAY
66940: ST_TO_ADDR
66941: GO 67196
66943: LD_INT 36
66945: DOUBLE
66946: EQUAL
66947: IFTRUE 66951
66949: GO 67007
66951: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66952: LD_ADDR_VAR 0 9
66956: PUSH
66957: LD_VAR 0 47
66961: PUSH
66962: LD_VAR 0 48
66966: PUSH
66967: LD_VAR 0 49
66971: PUSH
66972: LD_VAR 0 50
66976: PUSH
66977: LD_VAR 0 51
66981: PUSH
66982: LD_VAR 0 52
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: PUSH
66995: LD_VAR 0 4
66999: PUSH
67000: LD_INT 1
67002: PLUS
67003: ARRAY
67004: ST_TO_ADDR
67005: GO 67196
67007: LD_INT 4
67009: DOUBLE
67010: EQUAL
67011: IFTRUE 67033
67013: LD_INT 5
67015: DOUBLE
67016: EQUAL
67017: IFTRUE 67033
67019: LD_INT 34
67021: DOUBLE
67022: EQUAL
67023: IFTRUE 67033
67025: LD_INT 37
67027: DOUBLE
67028: EQUAL
67029: IFTRUE 67033
67031: GO 67089
67033: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67034: LD_ADDR_VAR 0 9
67038: PUSH
67039: LD_VAR 0 53
67043: PUSH
67044: LD_VAR 0 54
67048: PUSH
67049: LD_VAR 0 55
67053: PUSH
67054: LD_VAR 0 56
67058: PUSH
67059: LD_VAR 0 57
67063: PUSH
67064: LD_VAR 0 58
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: PUSH
67077: LD_VAR 0 4
67081: PUSH
67082: LD_INT 1
67084: PLUS
67085: ARRAY
67086: ST_TO_ADDR
67087: GO 67196
67089: LD_INT 31
67091: DOUBLE
67092: EQUAL
67093: IFTRUE 67139
67095: LD_INT 32
67097: DOUBLE
67098: EQUAL
67099: IFTRUE 67139
67101: LD_INT 33
67103: DOUBLE
67104: EQUAL
67105: IFTRUE 67139
67107: LD_INT 27
67109: DOUBLE
67110: EQUAL
67111: IFTRUE 67139
67113: LD_INT 26
67115: DOUBLE
67116: EQUAL
67117: IFTRUE 67139
67119: LD_INT 28
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67139
67125: LD_INT 29
67127: DOUBLE
67128: EQUAL
67129: IFTRUE 67139
67131: LD_INT 30
67133: DOUBLE
67134: EQUAL
67135: IFTRUE 67139
67137: GO 67195
67139: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67140: LD_ADDR_VAR 0 9
67144: PUSH
67145: LD_VAR 0 59
67149: PUSH
67150: LD_VAR 0 60
67154: PUSH
67155: LD_VAR 0 61
67159: PUSH
67160: LD_VAR 0 62
67164: PUSH
67165: LD_VAR 0 63
67169: PUSH
67170: LD_VAR 0 64
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: PUSH
67183: LD_VAR 0 4
67187: PUSH
67188: LD_INT 1
67190: PLUS
67191: ARRAY
67192: ST_TO_ADDR
67193: GO 67196
67195: POP
// temp_list2 = [ ] ;
67196: LD_ADDR_VAR 0 10
67200: PUSH
67201: EMPTY
67202: ST_TO_ADDR
// for i in temp_list do
67203: LD_ADDR_VAR 0 8
67207: PUSH
67208: LD_VAR 0 9
67212: PUSH
67213: FOR_IN
67214: IFFALSE 67266
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67216: LD_ADDR_VAR 0 10
67220: PUSH
67221: LD_VAR 0 10
67225: PUSH
67226: LD_VAR 0 8
67230: PUSH
67231: LD_INT 1
67233: ARRAY
67234: PUSH
67235: LD_VAR 0 2
67239: PLUS
67240: PUSH
67241: LD_VAR 0 8
67245: PUSH
67246: LD_INT 2
67248: ARRAY
67249: PUSH
67250: LD_VAR 0 3
67254: PLUS
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: ADD
67263: ST_TO_ADDR
67264: GO 67213
67266: POP
67267: POP
// result = temp_list2 ;
67268: LD_ADDR_VAR 0 7
67272: PUSH
67273: LD_VAR 0 10
67277: ST_TO_ADDR
// end ;
67278: LD_VAR 0 7
67282: RET
// export function EnemyInRange ( unit , dist ) ; begin
67283: LD_INT 0
67285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67286: LD_ADDR_VAR 0 3
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: CALL_OW 255
67300: PPUSH
67301: LD_VAR 0 1
67305: PPUSH
67306: CALL_OW 250
67310: PPUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: CALL_OW 251
67320: PPUSH
67321: LD_VAR 0 2
67325: PPUSH
67326: CALL 40540 0 4
67330: PUSH
67331: LD_INT 4
67333: ARRAY
67334: ST_TO_ADDR
// end ;
67335: LD_VAR 0 3
67339: RET
// export function PlayerSeeMe ( unit ) ; begin
67340: LD_INT 0
67342: PPUSH
// result := See ( your_side , unit ) ;
67343: LD_ADDR_VAR 0 2
67347: PUSH
67348: LD_OWVAR 2
67352: PPUSH
67353: LD_VAR 0 1
67357: PPUSH
67358: CALL_OW 292
67362: ST_TO_ADDR
// end ;
67363: LD_VAR 0 2
67367: RET
// export function ReverseDir ( unit ) ; begin
67368: LD_INT 0
67370: PPUSH
// if not unit then
67371: LD_VAR 0 1
67375: NOT
67376: IFFALSE 67380
// exit ;
67378: GO 67403
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67380: LD_ADDR_VAR 0 2
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 254
67394: PUSH
67395: LD_INT 3
67397: PLUS
67398: PUSH
67399: LD_INT 6
67401: MOD
67402: ST_TO_ADDR
// end ;
67403: LD_VAR 0 2
67407: RET
// export function ReverseArray ( array ) ; var i ; begin
67408: LD_INT 0
67410: PPUSH
67411: PPUSH
// if not array then
67412: LD_VAR 0 1
67416: NOT
67417: IFFALSE 67421
// exit ;
67419: GO 67476
// result := [ ] ;
67421: LD_ADDR_VAR 0 2
67425: PUSH
67426: EMPTY
67427: ST_TO_ADDR
// for i := array downto 1 do
67428: LD_ADDR_VAR 0 3
67432: PUSH
67433: DOUBLE
67434: LD_VAR 0 1
67438: INC
67439: ST_TO_ADDR
67440: LD_INT 1
67442: PUSH
67443: FOR_DOWNTO
67444: IFFALSE 67474
// result := Join ( result , array [ i ] ) ;
67446: LD_ADDR_VAR 0 2
67450: PUSH
67451: LD_VAR 0 2
67455: PPUSH
67456: LD_VAR 0 1
67460: PUSH
67461: LD_VAR 0 3
67465: ARRAY
67466: PPUSH
67467: CALL 72328 0 2
67471: ST_TO_ADDR
67472: GO 67443
67474: POP
67475: POP
// end ;
67476: LD_VAR 0 2
67480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67481: LD_INT 0
67483: PPUSH
67484: PPUSH
67485: PPUSH
67486: PPUSH
67487: PPUSH
67488: PPUSH
// if not unit or not hexes then
67489: LD_VAR 0 1
67493: NOT
67494: IFTRUE 67503
67496: PUSH
67497: LD_VAR 0 2
67501: NOT
67502: OR
67503: IFFALSE 67507
// exit ;
67505: GO 67630
// dist := 9999 ;
67507: LD_ADDR_VAR 0 5
67511: PUSH
67512: LD_INT 9999
67514: ST_TO_ADDR
// for i = 1 to hexes do
67515: LD_ADDR_VAR 0 4
67519: PUSH
67520: DOUBLE
67521: LD_INT 1
67523: DEC
67524: ST_TO_ADDR
67525: LD_VAR 0 2
67529: PUSH
67530: FOR_TO
67531: IFFALSE 67618
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67533: LD_ADDR_VAR 0 6
67537: PUSH
67538: LD_VAR 0 1
67542: PPUSH
67543: LD_VAR 0 2
67547: PUSH
67548: LD_VAR 0 4
67552: ARRAY
67553: PUSH
67554: LD_INT 1
67556: ARRAY
67557: PPUSH
67558: LD_VAR 0 2
67562: PUSH
67563: LD_VAR 0 4
67567: ARRAY
67568: PUSH
67569: LD_INT 2
67571: ARRAY
67572: PPUSH
67573: CALL_OW 297
67577: ST_TO_ADDR
// if tdist < dist then
67578: LD_VAR 0 6
67582: PUSH
67583: LD_VAR 0 5
67587: LESS
67588: IFFALSE 67616
// begin hex := hexes [ i ] ;
67590: LD_ADDR_VAR 0 8
67594: PUSH
67595: LD_VAR 0 2
67599: PUSH
67600: LD_VAR 0 4
67604: ARRAY
67605: ST_TO_ADDR
// dist := tdist ;
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_VAR 0 6
67615: ST_TO_ADDR
// end ; end ;
67616: GO 67530
67618: POP
67619: POP
// result := hex ;
67620: LD_ADDR_VAR 0 3
67624: PUSH
67625: LD_VAR 0 8
67629: ST_TO_ADDR
// end ;
67630: LD_VAR 0 3
67634: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67635: LD_INT 0
67637: PPUSH
67638: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67639: LD_VAR 0 1
67643: NOT
67644: IFTRUE 67683
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 21
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 23
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PPUSH
67676: CALL_OW 69
67680: IN
67681: NOT
67682: OR
67683: IFFALSE 67687
// exit ;
67685: GO 67734
// for i = 1 to 3 do
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: DOUBLE
67693: LD_INT 1
67695: DEC
67696: ST_TO_ADDR
67697: LD_INT 3
67699: PUSH
67700: FOR_TO
67701: IFFALSE 67732
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67703: LD_VAR 0 1
67707: PPUSH
67708: CALL_OW 250
67712: PPUSH
67713: LD_VAR 0 1
67717: PPUSH
67718: CALL_OW 251
67722: PPUSH
67723: LD_INT 1
67725: PPUSH
67726: CALL_OW 453
67730: GO 67700
67732: POP
67733: POP
// end ;
67734: LD_VAR 0 2
67738: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67739: LD_INT 0
67741: PPUSH
67742: PPUSH
67743: PPUSH
67744: PPUSH
67745: PPUSH
67746: PPUSH
// if not unit or not enemy_unit then
67747: LD_VAR 0 1
67751: NOT
67752: IFTRUE 67761
67754: PUSH
67755: LD_VAR 0 2
67759: NOT
67760: OR
67761: IFFALSE 67765
// exit ;
67763: GO 68246
// if GetLives ( i ) < 250 then
67765: LD_VAR 0 4
67769: PPUSH
67770: CALL_OW 256
67774: PUSH
67775: LD_INT 250
67777: LESS
67778: IFFALSE 67791
// begin ComAutodestruct ( i ) ;
67780: LD_VAR 0 4
67784: PPUSH
67785: CALL 67635 0 1
// exit ;
67789: GO 68246
// end ; x := GetX ( enemy_unit ) ;
67791: LD_ADDR_VAR 0 7
67795: PUSH
67796: LD_VAR 0 2
67800: PPUSH
67801: CALL_OW 250
67805: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67806: LD_ADDR_VAR 0 8
67810: PUSH
67811: LD_VAR 0 2
67815: PPUSH
67816: CALL_OW 251
67820: ST_TO_ADDR
// if not x or not y then
67821: LD_VAR 0 7
67825: NOT
67826: IFTRUE 67835
67828: PUSH
67829: LD_VAR 0 8
67833: NOT
67834: OR
67835: IFFALSE 67839
// exit ;
67837: GO 68246
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67839: LD_ADDR_VAR 0 6
67843: PUSH
67844: LD_VAR 0 7
67848: PPUSH
67849: LD_INT 0
67851: PPUSH
67852: LD_INT 4
67854: PPUSH
67855: CALL_OW 272
67859: PUSH
67860: LD_VAR 0 8
67864: PPUSH
67865: LD_INT 0
67867: PPUSH
67868: LD_INT 4
67870: PPUSH
67871: CALL_OW 273
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_VAR 0 7
67884: PPUSH
67885: LD_INT 1
67887: PPUSH
67888: LD_INT 4
67890: PPUSH
67891: CALL_OW 272
67895: PUSH
67896: LD_VAR 0 8
67900: PPUSH
67901: LD_INT 1
67903: PPUSH
67904: LD_INT 4
67906: PPUSH
67907: CALL_OW 273
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_VAR 0 7
67920: PPUSH
67921: LD_INT 2
67923: PPUSH
67924: LD_INT 4
67926: PPUSH
67927: CALL_OW 272
67931: PUSH
67932: LD_VAR 0 8
67936: PPUSH
67937: LD_INT 2
67939: PPUSH
67940: LD_INT 4
67942: PPUSH
67943: CALL_OW 273
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_VAR 0 7
67956: PPUSH
67957: LD_INT 3
67959: PPUSH
67960: LD_INT 4
67962: PPUSH
67963: CALL_OW 272
67967: PUSH
67968: LD_VAR 0 8
67972: PPUSH
67973: LD_INT 3
67975: PPUSH
67976: LD_INT 4
67978: PPUSH
67979: CALL_OW 273
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_VAR 0 7
67992: PPUSH
67993: LD_INT 4
67995: PPUSH
67996: LD_INT 4
67998: PPUSH
67999: CALL_OW 272
68003: PUSH
68004: LD_VAR 0 8
68008: PPUSH
68009: LD_INT 4
68011: PPUSH
68012: LD_INT 4
68014: PPUSH
68015: CALL_OW 273
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_VAR 0 7
68028: PPUSH
68029: LD_INT 5
68031: PPUSH
68032: LD_INT 4
68034: PPUSH
68035: CALL_OW 272
68039: PUSH
68040: LD_VAR 0 8
68044: PPUSH
68045: LD_INT 5
68047: PPUSH
68048: LD_INT 4
68050: PPUSH
68051: CALL_OW 273
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: ST_TO_ADDR
// for i = tmp downto 1 do
68068: LD_ADDR_VAR 0 4
68072: PUSH
68073: DOUBLE
68074: LD_VAR 0 6
68078: INC
68079: ST_TO_ADDR
68080: LD_INT 1
68082: PUSH
68083: FOR_DOWNTO
68084: IFFALSE 68187
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68086: LD_VAR 0 6
68090: PUSH
68091: LD_VAR 0 4
68095: ARRAY
68096: PUSH
68097: LD_INT 1
68099: ARRAY
68100: PPUSH
68101: LD_VAR 0 6
68105: PUSH
68106: LD_VAR 0 4
68110: ARRAY
68111: PUSH
68112: LD_INT 2
68114: ARRAY
68115: PPUSH
68116: CALL_OW 488
68120: NOT
68121: IFTRUE 68163
68123: PUSH
68124: LD_VAR 0 6
68128: PUSH
68129: LD_VAR 0 4
68133: ARRAY
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PPUSH
68139: LD_VAR 0 6
68143: PUSH
68144: LD_VAR 0 4
68148: ARRAY
68149: PUSH
68150: LD_INT 2
68152: ARRAY
68153: PPUSH
68154: CALL_OW 428
68158: PUSH
68159: LD_INT 0
68161: NONEQUAL
68162: OR
68163: IFFALSE 68185
// tmp := Delete ( tmp , i ) ;
68165: LD_ADDR_VAR 0 6
68169: PUSH
68170: LD_VAR 0 6
68174: PPUSH
68175: LD_VAR 0 4
68179: PPUSH
68180: CALL_OW 3
68184: ST_TO_ADDR
68185: GO 68083
68187: POP
68188: POP
// j := GetClosestHex ( unit , tmp ) ;
68189: LD_ADDR_VAR 0 5
68193: PUSH
68194: LD_VAR 0 1
68198: PPUSH
68199: LD_VAR 0 6
68203: PPUSH
68204: CALL 67481 0 2
68208: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_VAR 0 5
68218: PUSH
68219: LD_INT 1
68221: ARRAY
68222: PPUSH
68223: LD_VAR 0 5
68227: PUSH
68228: LD_INT 2
68230: ARRAY
68231: PPUSH
68232: CALL_OW 111
// result := j ;
68236: LD_ADDR_VAR 0 3
68240: PUSH
68241: LD_VAR 0 5
68245: ST_TO_ADDR
// end ;
68246: LD_VAR 0 3
68250: RET
// export function PrepareApemanSoldier ( ) ; begin
68251: LD_INT 0
68253: PPUSH
// uc_nation := 0 ;
68254: LD_ADDR_OWVAR 21
68258: PUSH
68259: LD_INT 0
68261: ST_TO_ADDR
// hc_sex := sex_male ;
68262: LD_ADDR_OWVAR 27
68266: PUSH
68267: LD_INT 1
68269: ST_TO_ADDR
// hc_name :=  ;
68270: LD_ADDR_OWVAR 26
68274: PUSH
68275: LD_STRING 
68277: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68278: LD_ADDR_OWVAR 28
68282: PUSH
68283: LD_INT 15
68285: ST_TO_ADDR
// hc_gallery :=  ;
68286: LD_ADDR_OWVAR 33
68290: PUSH
68291: LD_STRING 
68293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68294: LD_ADDR_OWVAR 31
68298: PUSH
68299: LD_INT 0
68301: PPUSH
68302: LD_INT 3
68304: PPUSH
68305: CALL_OW 12
68309: PUSH
68310: LD_INT 0
68312: PPUSH
68313: LD_INT 3
68315: PPUSH
68316: CALL_OW 12
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68333: LD_ADDR_OWVAR 29
68337: PUSH
68338: LD_INT 10
68340: PUSH
68341: LD_INT 12
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: ST_TO_ADDR
// end ;
68348: LD_VAR 0 1
68352: RET
// export function PrepareApemanEngineer ( ) ; begin
68353: LD_INT 0
68355: PPUSH
// uc_nation := 0 ;
68356: LD_ADDR_OWVAR 21
68360: PUSH
68361: LD_INT 0
68363: ST_TO_ADDR
// hc_sex := sex_male ;
68364: LD_ADDR_OWVAR 27
68368: PUSH
68369: LD_INT 1
68371: ST_TO_ADDR
// hc_name :=  ;
68372: LD_ADDR_OWVAR 26
68376: PUSH
68377: LD_STRING 
68379: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68380: LD_ADDR_OWVAR 28
68384: PUSH
68385: LD_INT 16
68387: ST_TO_ADDR
// hc_gallery :=  ;
68388: LD_ADDR_OWVAR 33
68392: PUSH
68393: LD_STRING 
68395: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68396: LD_ADDR_OWVAR 31
68400: PUSH
68401: LD_INT 0
68403: PPUSH
68404: LD_INT 3
68406: PPUSH
68407: CALL_OW 12
68411: PUSH
68412: LD_INT 0
68414: PPUSH
68415: LD_INT 3
68417: PPUSH
68418: CALL_OW 12
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68435: LD_ADDR_OWVAR 29
68439: PUSH
68440: LD_INT 10
68442: PUSH
68443: LD_INT 12
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: ST_TO_ADDR
// end ;
68450: LD_VAR 0 1
68454: RET
// export function PrepareApeman ( agressivity ) ; begin
68455: LD_INT 0
68457: PPUSH
// uc_side := 0 ;
68458: LD_ADDR_OWVAR 20
68462: PUSH
68463: LD_INT 0
68465: ST_TO_ADDR
// uc_nation := 0 ;
68466: LD_ADDR_OWVAR 21
68470: PUSH
68471: LD_INT 0
68473: ST_TO_ADDR
// hc_sex := sex_male ;
68474: LD_ADDR_OWVAR 27
68478: PUSH
68479: LD_INT 1
68481: ST_TO_ADDR
// hc_class := class_apeman ;
68482: LD_ADDR_OWVAR 28
68486: PUSH
68487: LD_INT 12
68489: ST_TO_ADDR
// hc_gallery :=  ;
68490: LD_ADDR_OWVAR 33
68494: PUSH
68495: LD_STRING 
68497: ST_TO_ADDR
// hc_name :=  ;
68498: LD_ADDR_OWVAR 26
68502: PUSH
68503: LD_STRING 
68505: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68506: LD_ADDR_OWVAR 29
68510: PUSH
68511: LD_INT 10
68513: PUSH
68514: LD_INT 12
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: ST_TO_ADDR
// if agressivity = 0 then
68521: LD_VAR 0 1
68525: PUSH
68526: LD_INT 0
68528: EQUAL
68529: IFFALSE 68541
// hc_agressivity := 0 else
68531: LD_ADDR_OWVAR 35
68535: PUSH
68536: LD_INT 0
68538: ST_TO_ADDR
68539: GO 68562
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68541: LD_ADDR_OWVAR 35
68545: PUSH
68546: LD_VAR 0 1
68550: NEG
68551: PPUSH
68552: LD_VAR 0 1
68556: PPUSH
68557: CALL_OW 12
68561: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68562: LD_ADDR_OWVAR 31
68566: PUSH
68567: LD_INT 0
68569: PPUSH
68570: LD_INT 3
68572: PPUSH
68573: CALL_OW 12
68577: PUSH
68578: LD_INT 0
68580: PPUSH
68581: LD_INT 3
68583: PPUSH
68584: CALL_OW 12
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: ST_TO_ADDR
// end ;
68601: LD_VAR 0 2
68605: RET
// export function PrepareTiger ( agressivity ) ; begin
68606: LD_INT 0
68608: PPUSH
// uc_side := 0 ;
68609: LD_ADDR_OWVAR 20
68613: PUSH
68614: LD_INT 0
68616: ST_TO_ADDR
// uc_nation := 0 ;
68617: LD_ADDR_OWVAR 21
68621: PUSH
68622: LD_INT 0
68624: ST_TO_ADDR
// InitHc ;
68625: CALL_OW 19
// hc_class := class_tiger ;
68629: LD_ADDR_OWVAR 28
68633: PUSH
68634: LD_INT 14
68636: ST_TO_ADDR
// hc_gallery :=  ;
68637: LD_ADDR_OWVAR 33
68641: PUSH
68642: LD_STRING 
68644: ST_TO_ADDR
// hc_name :=  ;
68645: LD_ADDR_OWVAR 26
68649: PUSH
68650: LD_STRING 
68652: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68653: LD_ADDR_OWVAR 35
68657: PUSH
68658: LD_VAR 0 1
68662: NEG
68663: PPUSH
68664: LD_VAR 0 1
68668: PPUSH
68669: CALL_OW 12
68673: ST_TO_ADDR
// end ;
68674: LD_VAR 0 2
68678: RET
// export function PrepareEnchidna ( ) ; begin
68679: LD_INT 0
68681: PPUSH
// uc_side := 0 ;
68682: LD_ADDR_OWVAR 20
68686: PUSH
68687: LD_INT 0
68689: ST_TO_ADDR
// uc_nation := 0 ;
68690: LD_ADDR_OWVAR 21
68694: PUSH
68695: LD_INT 0
68697: ST_TO_ADDR
// InitHc ;
68698: CALL_OW 19
// hc_class := class_baggie ;
68702: LD_ADDR_OWVAR 28
68706: PUSH
68707: LD_INT 13
68709: ST_TO_ADDR
// hc_gallery :=  ;
68710: LD_ADDR_OWVAR 33
68714: PUSH
68715: LD_STRING 
68717: ST_TO_ADDR
// hc_name :=  ;
68718: LD_ADDR_OWVAR 26
68722: PUSH
68723: LD_STRING 
68725: ST_TO_ADDR
// end ;
68726: LD_VAR 0 1
68730: RET
// export function PrepareFrog ( ) ; begin
68731: LD_INT 0
68733: PPUSH
// uc_side := 0 ;
68734: LD_ADDR_OWVAR 20
68738: PUSH
68739: LD_INT 0
68741: ST_TO_ADDR
// uc_nation := 0 ;
68742: LD_ADDR_OWVAR 21
68746: PUSH
68747: LD_INT 0
68749: ST_TO_ADDR
// InitHc ;
68750: CALL_OW 19
// hc_class := class_frog ;
68754: LD_ADDR_OWVAR 28
68758: PUSH
68759: LD_INT 19
68761: ST_TO_ADDR
// hc_gallery :=  ;
68762: LD_ADDR_OWVAR 33
68766: PUSH
68767: LD_STRING 
68769: ST_TO_ADDR
// hc_name :=  ;
68770: LD_ADDR_OWVAR 26
68774: PUSH
68775: LD_STRING 
68777: ST_TO_ADDR
// end ;
68778: LD_VAR 0 1
68782: RET
// export function PrepareFish ( ) ; begin
68783: LD_INT 0
68785: PPUSH
// uc_side := 0 ;
68786: LD_ADDR_OWVAR 20
68790: PUSH
68791: LD_INT 0
68793: ST_TO_ADDR
// uc_nation := 0 ;
68794: LD_ADDR_OWVAR 21
68798: PUSH
68799: LD_INT 0
68801: ST_TO_ADDR
// InitHc ;
68802: CALL_OW 19
// hc_class := class_fish ;
68806: LD_ADDR_OWVAR 28
68810: PUSH
68811: LD_INT 20
68813: ST_TO_ADDR
// hc_gallery :=  ;
68814: LD_ADDR_OWVAR 33
68818: PUSH
68819: LD_STRING 
68821: ST_TO_ADDR
// hc_name :=  ;
68822: LD_ADDR_OWVAR 26
68826: PUSH
68827: LD_STRING 
68829: ST_TO_ADDR
// end ;
68830: LD_VAR 0 1
68834: RET
// export function PrepareBird ( ) ; begin
68835: LD_INT 0
68837: PPUSH
// uc_side := 0 ;
68838: LD_ADDR_OWVAR 20
68842: PUSH
68843: LD_INT 0
68845: ST_TO_ADDR
// uc_nation := 0 ;
68846: LD_ADDR_OWVAR 21
68850: PUSH
68851: LD_INT 0
68853: ST_TO_ADDR
// InitHc ;
68854: CALL_OW 19
// hc_class := class_phororhacos ;
68858: LD_ADDR_OWVAR 28
68862: PUSH
68863: LD_INT 18
68865: ST_TO_ADDR
// hc_gallery :=  ;
68866: LD_ADDR_OWVAR 33
68870: PUSH
68871: LD_STRING 
68873: ST_TO_ADDR
// hc_name :=  ;
68874: LD_ADDR_OWVAR 26
68878: PUSH
68879: LD_STRING 
68881: ST_TO_ADDR
// end ;
68882: LD_VAR 0 1
68886: RET
// export function PrepareHorse ( ) ; begin
68887: LD_INT 0
68889: PPUSH
// uc_side := 0 ;
68890: LD_ADDR_OWVAR 20
68894: PUSH
68895: LD_INT 0
68897: ST_TO_ADDR
// uc_nation := 0 ;
68898: LD_ADDR_OWVAR 21
68902: PUSH
68903: LD_INT 0
68905: ST_TO_ADDR
// InitHc ;
68906: CALL_OW 19
// hc_class := class_horse ;
68910: LD_ADDR_OWVAR 28
68914: PUSH
68915: LD_INT 21
68917: ST_TO_ADDR
// hc_gallery :=  ;
68918: LD_ADDR_OWVAR 33
68922: PUSH
68923: LD_STRING 
68925: ST_TO_ADDR
// hc_name :=  ;
68926: LD_ADDR_OWVAR 26
68930: PUSH
68931: LD_STRING 
68933: ST_TO_ADDR
// end ;
68934: LD_VAR 0 1
68938: RET
// export function PrepareMastodont ( ) ; begin
68939: LD_INT 0
68941: PPUSH
// uc_side := 0 ;
68942: LD_ADDR_OWVAR 20
68946: PUSH
68947: LD_INT 0
68949: ST_TO_ADDR
// uc_nation := 0 ;
68950: LD_ADDR_OWVAR 21
68954: PUSH
68955: LD_INT 0
68957: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68958: LD_ADDR_OWVAR 37
68962: PUSH
68963: LD_INT 31
68965: ST_TO_ADDR
// vc_control := control_rider ;
68966: LD_ADDR_OWVAR 38
68970: PUSH
68971: LD_INT 4
68973: ST_TO_ADDR
// end ;
68974: LD_VAR 0 1
68978: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68979: LD_INT 0
68981: PPUSH
68982: PPUSH
68983: PPUSH
// uc_side = 0 ;
68984: LD_ADDR_OWVAR 20
68988: PUSH
68989: LD_INT 0
68991: ST_TO_ADDR
// uc_nation = 0 ;
68992: LD_ADDR_OWVAR 21
68996: PUSH
68997: LD_INT 0
68999: ST_TO_ADDR
// InitHc_All ( ) ;
69000: CALL_OW 584
// InitVc ;
69004: CALL_OW 20
// if mastodonts then
69008: LD_VAR 0 6
69012: IFFALSE 69079
// for i = 1 to mastodonts do
69014: LD_ADDR_VAR 0 11
69018: PUSH
69019: DOUBLE
69020: LD_INT 1
69022: DEC
69023: ST_TO_ADDR
69024: LD_VAR 0 6
69028: PUSH
69029: FOR_TO
69030: IFFALSE 69077
// begin vc_chassis := 31 ;
69032: LD_ADDR_OWVAR 37
69036: PUSH
69037: LD_INT 31
69039: ST_TO_ADDR
// vc_control := control_rider ;
69040: LD_ADDR_OWVAR 38
69044: PUSH
69045: LD_INT 4
69047: ST_TO_ADDR
// animal := CreateVehicle ;
69048: LD_ADDR_VAR 0 12
69052: PUSH
69053: CALL_OW 45
69057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69058: LD_VAR 0 12
69062: PPUSH
69063: LD_VAR 0 8
69067: PPUSH
69068: LD_INT 0
69070: PPUSH
69071: CALL 71221 0 3
// end ;
69075: GO 69029
69077: POP
69078: POP
// if horses then
69079: LD_VAR 0 5
69083: IFFALSE 69150
// for i = 1 to horses do
69085: LD_ADDR_VAR 0 11
69089: PUSH
69090: DOUBLE
69091: LD_INT 1
69093: DEC
69094: ST_TO_ADDR
69095: LD_VAR 0 5
69099: PUSH
69100: FOR_TO
69101: IFFALSE 69148
// begin hc_class := 21 ;
69103: LD_ADDR_OWVAR 28
69107: PUSH
69108: LD_INT 21
69110: ST_TO_ADDR
// hc_gallery :=  ;
69111: LD_ADDR_OWVAR 33
69115: PUSH
69116: LD_STRING 
69118: ST_TO_ADDR
// animal := CreateHuman ;
69119: LD_ADDR_VAR 0 12
69123: PUSH
69124: CALL_OW 44
69128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69129: LD_VAR 0 12
69133: PPUSH
69134: LD_VAR 0 8
69138: PPUSH
69139: LD_INT 0
69141: PPUSH
69142: CALL 71221 0 3
// end ;
69146: GO 69100
69148: POP
69149: POP
// if birds then
69150: LD_VAR 0 1
69154: IFFALSE 69221
// for i = 1 to birds do
69156: LD_ADDR_VAR 0 11
69160: PUSH
69161: DOUBLE
69162: LD_INT 1
69164: DEC
69165: ST_TO_ADDR
69166: LD_VAR 0 1
69170: PUSH
69171: FOR_TO
69172: IFFALSE 69219
// begin hc_class := 18 ;
69174: LD_ADDR_OWVAR 28
69178: PUSH
69179: LD_INT 18
69181: ST_TO_ADDR
// hc_gallery =  ;
69182: LD_ADDR_OWVAR 33
69186: PUSH
69187: LD_STRING 
69189: ST_TO_ADDR
// animal := CreateHuman ;
69190: LD_ADDR_VAR 0 12
69194: PUSH
69195: CALL_OW 44
69199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69200: LD_VAR 0 12
69204: PPUSH
69205: LD_VAR 0 8
69209: PPUSH
69210: LD_INT 0
69212: PPUSH
69213: CALL 71221 0 3
// end ;
69217: GO 69171
69219: POP
69220: POP
// if tigers then
69221: LD_VAR 0 2
69225: IFFALSE 69309
// for i = 1 to tigers do
69227: LD_ADDR_VAR 0 11
69231: PUSH
69232: DOUBLE
69233: LD_INT 1
69235: DEC
69236: ST_TO_ADDR
69237: LD_VAR 0 2
69241: PUSH
69242: FOR_TO
69243: IFFALSE 69307
// begin hc_class = class_tiger ;
69245: LD_ADDR_OWVAR 28
69249: PUSH
69250: LD_INT 14
69252: ST_TO_ADDR
// hc_gallery =  ;
69253: LD_ADDR_OWVAR 33
69257: PUSH
69258: LD_STRING 
69260: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69261: LD_ADDR_OWVAR 35
69265: PUSH
69266: LD_INT 7
69268: NEG
69269: PPUSH
69270: LD_INT 7
69272: PPUSH
69273: CALL_OW 12
69277: ST_TO_ADDR
// animal := CreateHuman ;
69278: LD_ADDR_VAR 0 12
69282: PUSH
69283: CALL_OW 44
69287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69288: LD_VAR 0 12
69292: PPUSH
69293: LD_VAR 0 8
69297: PPUSH
69298: LD_INT 0
69300: PPUSH
69301: CALL 71221 0 3
// end ;
69305: GO 69242
69307: POP
69308: POP
// if apemans then
69309: LD_VAR 0 3
69313: IFFALSE 69436
// for i = 1 to apemans do
69315: LD_ADDR_VAR 0 11
69319: PUSH
69320: DOUBLE
69321: LD_INT 1
69323: DEC
69324: ST_TO_ADDR
69325: LD_VAR 0 3
69329: PUSH
69330: FOR_TO
69331: IFFALSE 69434
// begin hc_class = class_apeman ;
69333: LD_ADDR_OWVAR 28
69337: PUSH
69338: LD_INT 12
69340: ST_TO_ADDR
// hc_gallery =  ;
69341: LD_ADDR_OWVAR 33
69345: PUSH
69346: LD_STRING 
69348: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69349: LD_ADDR_OWVAR 35
69353: PUSH
69354: LD_INT 2
69356: NEG
69357: PPUSH
69358: LD_INT 2
69360: PPUSH
69361: CALL_OW 12
69365: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69366: LD_ADDR_OWVAR 31
69370: PUSH
69371: LD_INT 1
69373: PPUSH
69374: LD_INT 3
69376: PPUSH
69377: CALL_OW 12
69381: PUSH
69382: LD_INT 1
69384: PPUSH
69385: LD_INT 3
69387: PPUSH
69388: CALL_OW 12
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// animal := CreateHuman ;
69405: LD_ADDR_VAR 0 12
69409: PUSH
69410: CALL_OW 44
69414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69415: LD_VAR 0 12
69419: PPUSH
69420: LD_VAR 0 8
69424: PPUSH
69425: LD_INT 0
69427: PPUSH
69428: CALL 71221 0 3
// end ;
69432: GO 69330
69434: POP
69435: POP
// if enchidnas then
69436: LD_VAR 0 4
69440: IFFALSE 69507
// for i = 1 to enchidnas do
69442: LD_ADDR_VAR 0 11
69446: PUSH
69447: DOUBLE
69448: LD_INT 1
69450: DEC
69451: ST_TO_ADDR
69452: LD_VAR 0 4
69456: PUSH
69457: FOR_TO
69458: IFFALSE 69505
// begin hc_class = 13 ;
69460: LD_ADDR_OWVAR 28
69464: PUSH
69465: LD_INT 13
69467: ST_TO_ADDR
// hc_gallery =  ;
69468: LD_ADDR_OWVAR 33
69472: PUSH
69473: LD_STRING 
69475: ST_TO_ADDR
// animal := CreateHuman ;
69476: LD_ADDR_VAR 0 12
69480: PUSH
69481: CALL_OW 44
69485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69486: LD_VAR 0 12
69490: PPUSH
69491: LD_VAR 0 8
69495: PPUSH
69496: LD_INT 0
69498: PPUSH
69499: CALL 71221 0 3
// end ;
69503: GO 69457
69505: POP
69506: POP
// if fishes then
69507: LD_VAR 0 7
69511: IFFALSE 69578
// for i = 1 to fishes do
69513: LD_ADDR_VAR 0 11
69517: PUSH
69518: DOUBLE
69519: LD_INT 1
69521: DEC
69522: ST_TO_ADDR
69523: LD_VAR 0 7
69527: PUSH
69528: FOR_TO
69529: IFFALSE 69576
// begin hc_class = 20 ;
69531: LD_ADDR_OWVAR 28
69535: PUSH
69536: LD_INT 20
69538: ST_TO_ADDR
// hc_gallery =  ;
69539: LD_ADDR_OWVAR 33
69543: PUSH
69544: LD_STRING 
69546: ST_TO_ADDR
// animal := CreateHuman ;
69547: LD_ADDR_VAR 0 12
69551: PUSH
69552: CALL_OW 44
69556: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69557: LD_VAR 0 12
69561: PPUSH
69562: LD_VAR 0 9
69566: PPUSH
69567: LD_INT 0
69569: PPUSH
69570: CALL 71221 0 3
// end ;
69574: GO 69528
69576: POP
69577: POP
// end ;
69578: LD_VAR 0 10
69582: RET
// export function WantHeal ( sci , unit ) ; begin
69583: LD_INT 0
69585: PPUSH
// if GetTaskList ( sci ) > 0 then
69586: LD_VAR 0 1
69590: PPUSH
69591: CALL_OW 437
69595: PUSH
69596: LD_INT 0
69598: GREATER
69599: IFFALSE 69671
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69601: LD_VAR 0 1
69605: PPUSH
69606: CALL_OW 437
69610: PUSH
69611: LD_INT 1
69613: ARRAY
69614: PUSH
69615: LD_INT 1
69617: ARRAY
69618: PUSH
69619: LD_STRING l
69621: EQUAL
69622: IFFALSE 69649
69624: PUSH
69625: LD_VAR 0 1
69629: PPUSH
69630: CALL_OW 437
69634: PUSH
69635: LD_INT 1
69637: ARRAY
69638: PUSH
69639: LD_INT 4
69641: ARRAY
69642: PUSH
69643: LD_VAR 0 2
69647: EQUAL
69648: AND
69649: IFFALSE 69661
// result := true else
69651: LD_ADDR_VAR 0 3
69655: PUSH
69656: LD_INT 1
69658: ST_TO_ADDR
69659: GO 69669
// result := false ;
69661: LD_ADDR_VAR 0 3
69665: PUSH
69666: LD_INT 0
69668: ST_TO_ADDR
// end else
69669: GO 69679
// result := false ;
69671: LD_ADDR_VAR 0 3
69675: PUSH
69676: LD_INT 0
69678: ST_TO_ADDR
// end ;
69679: LD_VAR 0 3
69683: RET
// export function HealTarget ( sci ) ; begin
69684: LD_INT 0
69686: PPUSH
// if not sci then
69687: LD_VAR 0 1
69691: NOT
69692: IFFALSE 69696
// exit ;
69694: GO 69761
// result := 0 ;
69696: LD_ADDR_VAR 0 2
69700: PUSH
69701: LD_INT 0
69703: ST_TO_ADDR
// if GetTaskList ( sci ) then
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 437
69713: IFFALSE 69761
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 437
69724: PUSH
69725: LD_INT 1
69727: ARRAY
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: PUSH
69733: LD_STRING l
69735: EQUAL
69736: IFFALSE 69761
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69738: LD_ADDR_VAR 0 2
69742: PUSH
69743: LD_VAR 0 1
69747: PPUSH
69748: CALL_OW 437
69752: PUSH
69753: LD_INT 1
69755: ARRAY
69756: PUSH
69757: LD_INT 4
69759: ARRAY
69760: ST_TO_ADDR
// end ;
69761: LD_VAR 0 2
69765: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69766: LD_INT 0
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
// if not base_units then
69772: LD_VAR 0 1
69776: NOT
69777: IFFALSE 69781
// exit ;
69779: GO 69868
// result := false ;
69781: LD_ADDR_VAR 0 2
69785: PUSH
69786: LD_INT 0
69788: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69789: LD_ADDR_VAR 0 5
69793: PUSH
69794: LD_VAR 0 1
69798: PPUSH
69799: LD_INT 21
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PPUSH
69809: CALL_OW 72
69813: ST_TO_ADDR
// if not tmp then
69814: LD_VAR 0 5
69818: NOT
69819: IFFALSE 69823
// exit ;
69821: GO 69868
// for i in tmp do
69823: LD_ADDR_VAR 0 3
69827: PUSH
69828: LD_VAR 0 5
69832: PUSH
69833: FOR_IN
69834: IFFALSE 69866
// begin result := EnemyInRange ( i , 22 ) ;
69836: LD_ADDR_VAR 0 2
69840: PUSH
69841: LD_VAR 0 3
69845: PPUSH
69846: LD_INT 22
69848: PPUSH
69849: CALL 67283 0 2
69853: ST_TO_ADDR
// if result then
69854: LD_VAR 0 2
69858: IFFALSE 69864
// exit ;
69860: POP
69861: POP
69862: GO 69868
// end ;
69864: GO 69833
69866: POP
69867: POP
// end ;
69868: LD_VAR 0 2
69872: RET
// export function FilterByTag ( units , tag ) ; begin
69873: LD_INT 0
69875: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69876: LD_ADDR_VAR 0 3
69880: PUSH
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_INT 120
69888: PUSH
69889: LD_VAR 0 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PPUSH
69898: CALL_OW 72
69902: ST_TO_ADDR
// end ;
69903: LD_VAR 0 3
69907: RET
// export function IsDriver ( un ) ; begin
69908: LD_INT 0
69910: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69911: LD_ADDR_VAR 0 2
69915: PUSH
69916: LD_VAR 0 1
69920: PUSH
69921: LD_INT 55
69923: PUSH
69924: EMPTY
69925: LIST
69926: PPUSH
69927: CALL_OW 69
69931: IN
69932: ST_TO_ADDR
// end ;
69933: LD_VAR 0 2
69937: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69938: LD_INT 0
69940: PPUSH
69941: PPUSH
// list := [ ] ;
69942: LD_ADDR_VAR 0 5
69946: PUSH
69947: EMPTY
69948: ST_TO_ADDR
// case d of 0 :
69949: LD_VAR 0 3
69953: PUSH
69954: LD_INT 0
69956: DOUBLE
69957: EQUAL
69958: IFTRUE 69962
69960: GO 70095
69962: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69963: LD_ADDR_VAR 0 5
69967: PUSH
69968: LD_VAR 0 1
69972: PUSH
69973: LD_INT 4
69975: MINUS
69976: PUSH
69977: LD_VAR 0 2
69981: PUSH
69982: LD_INT 4
69984: MINUS
69985: PUSH
69986: LD_INT 2
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 3
70001: MINUS
70002: PUSH
70003: LD_VAR 0 2
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: LD_INT 4
70023: PLUS
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: PUSH
70038: LD_VAR 0 1
70042: PUSH
70043: LD_INT 3
70045: PLUS
70046: PUSH
70047: LD_VAR 0 2
70051: PUSH
70052: LD_INT 3
70054: PLUS
70055: PUSH
70056: LD_INT 5
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: PUSH
70064: LD_VAR 0 1
70068: PUSH
70069: LD_VAR 0 2
70073: PUSH
70074: LD_INT 4
70076: PLUS
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: LIST
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// end ; 1 :
70093: GO 70793
70095: LD_INT 1
70097: DOUBLE
70098: EQUAL
70099: IFTRUE 70103
70101: GO 70236
70103: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70104: LD_ADDR_VAR 0 5
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: LD_VAR 0 2
70118: PUSH
70119: LD_INT 4
70121: MINUS
70122: PUSH
70123: LD_INT 3
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: LIST
70130: PUSH
70131: LD_VAR 0 1
70135: PUSH
70136: LD_INT 3
70138: MINUS
70139: PUSH
70140: LD_VAR 0 2
70144: PUSH
70145: LD_INT 3
70147: MINUS
70148: PUSH
70149: LD_INT 2
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_VAR 0 1
70161: PUSH
70162: LD_INT 4
70164: MINUS
70165: PUSH
70166: LD_VAR 0 2
70170: PUSH
70171: LD_INT 1
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: LD_VAR 0 1
70183: PUSH
70184: LD_VAR 0 2
70188: PUSH
70189: LD_INT 3
70191: PLUS
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: LIST
70200: PUSH
70201: LD_VAR 0 1
70205: PUSH
70206: LD_INT 4
70208: PLUS
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: LD_INT 4
70217: PLUS
70218: PUSH
70219: LD_INT 5
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: ST_TO_ADDR
// end ; 2 :
70234: GO 70793
70236: LD_INT 2
70238: DOUBLE
70239: EQUAL
70240: IFTRUE 70244
70242: GO 70373
70244: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70245: LD_ADDR_VAR 0 5
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_VAR 0 2
70259: PUSH
70260: LD_INT 3
70262: MINUS
70263: PUSH
70264: LD_INT 3
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: LD_VAR 0 1
70276: PUSH
70277: LD_INT 4
70279: PLUS
70280: PUSH
70281: LD_VAR 0 2
70285: PUSH
70286: LD_INT 4
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: LIST
70293: PUSH
70294: LD_VAR 0 1
70298: PUSH
70299: LD_VAR 0 2
70303: PUSH
70304: LD_INT 4
70306: PLUS
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: LD_VAR 0 1
70320: PUSH
70321: LD_INT 3
70323: MINUS
70324: PUSH
70325: LD_VAR 0 2
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: PUSH
70338: LD_VAR 0 1
70342: PUSH
70343: LD_INT 4
70345: MINUS
70346: PUSH
70347: LD_VAR 0 2
70351: PUSH
70352: LD_INT 4
70354: MINUS
70355: PUSH
70356: LD_INT 2
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: ST_TO_ADDR
// end ; 3 :
70371: GO 70793
70373: LD_INT 3
70375: DOUBLE
70376: EQUAL
70377: IFTRUE 70381
70379: GO 70514
70381: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70382: LD_ADDR_VAR 0 5
70386: PUSH
70387: LD_VAR 0 1
70391: PUSH
70392: LD_INT 3
70394: PLUS
70395: PUSH
70396: LD_VAR 0 2
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: PUSH
70409: LD_VAR 0 1
70413: PUSH
70414: LD_INT 4
70416: PLUS
70417: PUSH
70418: LD_VAR 0 2
70422: PUSH
70423: LD_INT 4
70425: PLUS
70426: PUSH
70427: LD_INT 5
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: PUSH
70435: LD_VAR 0 1
70439: PUSH
70440: LD_INT 4
70442: MINUS
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: PUSH
70457: LD_VAR 0 1
70461: PUSH
70462: LD_VAR 0 2
70466: PUSH
70467: LD_INT 4
70469: MINUS
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: LIST
70478: PUSH
70479: LD_VAR 0 1
70483: PUSH
70484: LD_INT 3
70486: MINUS
70487: PUSH
70488: LD_VAR 0 2
70492: PUSH
70493: LD_INT 3
70495: MINUS
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: ST_TO_ADDR
// end ; 4 :
70512: GO 70793
70514: LD_INT 4
70516: DOUBLE
70517: EQUAL
70518: IFTRUE 70522
70520: GO 70655
70522: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70523: LD_ADDR_VAR 0 5
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 4
70540: PLUS
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: LD_VAR 0 1
70554: PUSH
70555: LD_INT 3
70557: PLUS
70558: PUSH
70559: LD_VAR 0 2
70563: PUSH
70564: LD_INT 3
70566: PLUS
70567: PUSH
70568: LD_INT 5
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 1
70580: PUSH
70581: LD_INT 4
70583: PLUS
70584: PUSH
70585: LD_VAR 0 2
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: LD_VAR 0 1
70602: PUSH
70603: LD_VAR 0 2
70607: PUSH
70608: LD_INT 3
70610: MINUS
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: LD_VAR 0 1
70624: PUSH
70625: LD_INT 4
70627: MINUS
70628: PUSH
70629: LD_VAR 0 2
70633: PUSH
70634: LD_INT 4
70636: MINUS
70637: PUSH
70638: LD_INT 2
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: ST_TO_ADDR
// end ; 5 :
70653: GO 70793
70655: LD_INT 5
70657: DOUBLE
70658: EQUAL
70659: IFTRUE 70663
70661: GO 70792
70663: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70664: LD_ADDR_VAR 0 5
70668: PUSH
70669: LD_VAR 0 1
70673: PUSH
70674: LD_INT 4
70676: MINUS
70677: PUSH
70678: LD_VAR 0 2
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: LIST
70690: PUSH
70691: LD_VAR 0 1
70695: PUSH
70696: LD_VAR 0 2
70700: PUSH
70701: LD_INT 4
70703: MINUS
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_INT 4
70720: PLUS
70721: PUSH
70722: LD_VAR 0 2
70726: PUSH
70727: LD_INT 4
70729: PLUS
70730: PUSH
70731: LD_INT 5
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: PUSH
70739: LD_VAR 0 1
70743: PUSH
70744: LD_INT 3
70746: PLUS
70747: PUSH
70748: LD_VAR 0 2
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: LIST
70760: PUSH
70761: LD_VAR 0 1
70765: PUSH
70766: LD_VAR 0 2
70770: PUSH
70771: LD_INT 3
70773: PLUS
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: LIST
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: ST_TO_ADDR
// end ; end ;
70790: GO 70793
70792: POP
// result := list ;
70793: LD_ADDR_VAR 0 4
70797: PUSH
70798: LD_VAR 0 5
70802: ST_TO_ADDR
// end ;
70803: LD_VAR 0 4
70807: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70808: LD_INT 0
70810: PPUSH
70811: PPUSH
70812: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70813: LD_VAR 0 1
70817: NOT
70818: IFTRUE 70846
70820: PUSH
70821: LD_VAR 0 2
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: LD_INT 3
70834: PUSH
70835: LD_INT 4
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: IN
70844: NOT
70845: OR
70846: IFFALSE 70850
// exit ;
70848: GO 70933
// tmp := [ ] ;
70850: LD_ADDR_VAR 0 5
70854: PUSH
70855: EMPTY
70856: ST_TO_ADDR
// for i in units do
70857: LD_ADDR_VAR 0 4
70861: PUSH
70862: LD_VAR 0 1
70866: PUSH
70867: FOR_IN
70868: IFFALSE 70902
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70870: LD_ADDR_VAR 0 5
70874: PUSH
70875: LD_VAR 0 5
70879: PPUSH
70880: LD_VAR 0 4
70884: PPUSH
70885: LD_VAR 0 2
70889: PPUSH
70890: CALL_OW 259
70894: PPUSH
70895: CALL 72328 0 2
70899: ST_TO_ADDR
70900: GO 70867
70902: POP
70903: POP
// if not tmp then
70904: LD_VAR 0 5
70908: NOT
70909: IFFALSE 70913
// exit ;
70911: GO 70933
// result := SortListByListDesc ( units , tmp ) ;
70913: LD_ADDR_VAR 0 3
70917: PUSH
70918: LD_VAR 0 1
70922: PPUSH
70923: LD_VAR 0 5
70927: PPUSH
70928: CALL_OW 77
70932: ST_TO_ADDR
// end ;
70933: LD_VAR 0 3
70937: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70938: LD_INT 0
70940: PPUSH
70941: PPUSH
70942: PPUSH
// result := false ;
70943: LD_ADDR_VAR 0 3
70947: PUSH
70948: LD_INT 0
70950: ST_TO_ADDR
// if not building then
70951: LD_VAR 0 2
70955: NOT
70956: IFFALSE 70960
// exit ;
70958: GO 71104
// x := GetX ( building ) ;
70960: LD_ADDR_VAR 0 4
70964: PUSH
70965: LD_VAR 0 2
70969: PPUSH
70970: CALL_OW 250
70974: ST_TO_ADDR
// y := GetY ( building ) ;
70975: LD_ADDR_VAR 0 5
70979: PUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: CALL_OW 251
70989: ST_TO_ADDR
// if not x or not y then
70990: LD_VAR 0 4
70994: NOT
70995: IFTRUE 71004
70997: PUSH
70998: LD_VAR 0 5
71002: NOT
71003: OR
71004: IFFALSE 71008
// exit ;
71006: GO 71104
// if GetTaskList ( unit ) then
71008: LD_VAR 0 1
71012: PPUSH
71013: CALL_OW 437
71017: IFFALSE 71104
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71019: LD_STRING e
71021: PUSH
71022: LD_VAR 0 1
71026: PPUSH
71027: CALL_OW 437
71031: PUSH
71032: LD_INT 1
71034: ARRAY
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: EQUAL
71040: IFFALSE 71067
71042: PUSH
71043: LD_VAR 0 4
71047: PUSH
71048: LD_VAR 0 1
71052: PPUSH
71053: CALL_OW 437
71057: PUSH
71058: LD_INT 1
71060: ARRAY
71061: PUSH
71062: LD_INT 2
71064: ARRAY
71065: EQUAL
71066: AND
71067: IFFALSE 71094
71069: PUSH
71070: LD_VAR 0 5
71074: PUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: CALL_OW 437
71084: PUSH
71085: LD_INT 1
71087: ARRAY
71088: PUSH
71089: LD_INT 3
71091: ARRAY
71092: EQUAL
71093: AND
71094: IFFALSE 71104
// result := true end ;
71096: LD_ADDR_VAR 0 3
71100: PUSH
71101: LD_INT 1
71103: ST_TO_ADDR
// end ;
71104: LD_VAR 0 3
71108: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71109: LD_INT 0
71111: PPUSH
// result := false ;
71112: LD_ADDR_VAR 0 4
71116: PUSH
71117: LD_INT 0
71119: ST_TO_ADDR
// if GetTaskList ( unit ) then
71120: LD_VAR 0 1
71124: PPUSH
71125: CALL_OW 437
71129: IFFALSE 71216
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71131: LD_STRING M
71133: PUSH
71134: LD_VAR 0 1
71138: PPUSH
71139: CALL_OW 437
71143: PUSH
71144: LD_INT 1
71146: ARRAY
71147: PUSH
71148: LD_INT 1
71150: ARRAY
71151: EQUAL
71152: IFFALSE 71179
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: LD_VAR 0 1
71164: PPUSH
71165: CALL_OW 437
71169: PUSH
71170: LD_INT 1
71172: ARRAY
71173: PUSH
71174: LD_INT 2
71176: ARRAY
71177: EQUAL
71178: AND
71179: IFFALSE 71206
71181: PUSH
71182: LD_VAR 0 3
71186: PUSH
71187: LD_VAR 0 1
71191: PPUSH
71192: CALL_OW 437
71196: PUSH
71197: LD_INT 1
71199: ARRAY
71200: PUSH
71201: LD_INT 3
71203: ARRAY
71204: EQUAL
71205: AND
71206: IFFALSE 71216
// result := true ;
71208: LD_ADDR_VAR 0 4
71212: PUSH
71213: LD_INT 1
71215: ST_TO_ADDR
// end ; end ;
71216: LD_VAR 0 4
71220: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71221: LD_INT 0
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
// if not unit or not area then
71227: LD_VAR 0 1
71231: NOT
71232: IFTRUE 71241
71234: PUSH
71235: LD_VAR 0 2
71239: NOT
71240: OR
71241: IFFALSE 71245
// exit ;
71243: GO 71421
// tmp := AreaToList ( area , i ) ;
71245: LD_ADDR_VAR 0 6
71249: PUSH
71250: LD_VAR 0 2
71254: PPUSH
71255: LD_VAR 0 5
71259: PPUSH
71260: CALL_OW 517
71264: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71265: LD_ADDR_VAR 0 5
71269: PUSH
71270: DOUBLE
71271: LD_INT 1
71273: DEC
71274: ST_TO_ADDR
71275: LD_VAR 0 6
71279: PUSH
71280: LD_INT 1
71282: ARRAY
71283: PUSH
71284: FOR_TO
71285: IFFALSE 71419
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71287: LD_ADDR_VAR 0 7
71291: PUSH
71292: LD_VAR 0 6
71296: PUSH
71297: LD_INT 1
71299: ARRAY
71300: PUSH
71301: LD_VAR 0 5
71305: ARRAY
71306: PUSH
71307: LD_VAR 0 6
71311: PUSH
71312: LD_INT 2
71314: ARRAY
71315: PUSH
71316: LD_VAR 0 5
71320: ARRAY
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71326: LD_INT 92
71328: PUSH
71329: LD_VAR 0 7
71333: PUSH
71334: LD_INT 1
71336: ARRAY
71337: PUSH
71338: LD_VAR 0 7
71342: PUSH
71343: LD_INT 2
71345: ARRAY
71346: PUSH
71347: LD_INT 2
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: PPUSH
71356: CALL_OW 69
71360: PUSH
71361: LD_INT 0
71363: EQUAL
71364: IFFALSE 71417
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71366: LD_VAR 0 1
71370: PPUSH
71371: LD_VAR 0 7
71375: PUSH
71376: LD_INT 1
71378: ARRAY
71379: PPUSH
71380: LD_VAR 0 7
71384: PUSH
71385: LD_INT 2
71387: ARRAY
71388: PPUSH
71389: LD_VAR 0 3
71393: PPUSH
71394: CALL_OW 48
// result := IsPlaced ( unit ) ;
71398: LD_ADDR_VAR 0 4
71402: PUSH
71403: LD_VAR 0 1
71407: PPUSH
71408: CALL_OW 305
71412: ST_TO_ADDR
// exit ;
71413: POP
71414: POP
71415: GO 71421
// end ; end ;
71417: GO 71284
71419: POP
71420: POP
// end ;
71421: LD_VAR 0 4
71425: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71426: LD_INT 0
71428: PPUSH
71429: PPUSH
71430: PPUSH
// if not side or side > 8 then
71431: LD_VAR 0 1
71435: NOT
71436: IFTRUE 71448
71438: PUSH
71439: LD_VAR 0 1
71443: PUSH
71444: LD_INT 8
71446: GREATER
71447: OR
71448: IFFALSE 71452
// exit ;
71450: GO 71639
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71452: LD_ADDR_VAR 0 4
71456: PUSH
71457: LD_INT 22
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 21
71471: PUSH
71472: LD_INT 3
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PPUSH
71483: CALL_OW 69
71487: ST_TO_ADDR
// if not tmp then
71488: LD_VAR 0 4
71492: NOT
71493: IFFALSE 71497
// exit ;
71495: GO 71639
// enable_addtolog := true ;
71497: LD_ADDR_OWVAR 81
71501: PUSH
71502: LD_INT 1
71504: ST_TO_ADDR
// AddToLog ( [ ) ;
71505: LD_STRING [
71507: PPUSH
71508: CALL_OW 561
// for i in tmp do
71512: LD_ADDR_VAR 0 3
71516: PUSH
71517: LD_VAR 0 4
71521: PUSH
71522: FOR_IN
71523: IFFALSE 71630
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71525: LD_STRING [
71527: PUSH
71528: LD_VAR 0 3
71532: PPUSH
71533: CALL_OW 266
71537: STR
71538: PUSH
71539: LD_STRING , 
71541: STR
71542: PUSH
71543: LD_VAR 0 3
71547: PPUSH
71548: CALL_OW 250
71552: STR
71553: PUSH
71554: LD_STRING , 
71556: STR
71557: PUSH
71558: LD_VAR 0 3
71562: PPUSH
71563: CALL_OW 251
71567: STR
71568: PUSH
71569: LD_STRING , 
71571: STR
71572: PUSH
71573: LD_VAR 0 3
71577: PPUSH
71578: CALL_OW 254
71582: STR
71583: PUSH
71584: LD_STRING , 
71586: STR
71587: PUSH
71588: LD_VAR 0 3
71592: PPUSH
71593: LD_INT 1
71595: PPUSH
71596: CALL_OW 268
71600: STR
71601: PUSH
71602: LD_STRING , 
71604: STR
71605: PUSH
71606: LD_VAR 0 3
71610: PPUSH
71611: LD_INT 2
71613: PPUSH
71614: CALL_OW 268
71618: STR
71619: PUSH
71620: LD_STRING ],
71622: STR
71623: PPUSH
71624: CALL_OW 561
// end ;
71628: GO 71522
71630: POP
71631: POP
// AddToLog ( ]; ) ;
71632: LD_STRING ];
71634: PPUSH
71635: CALL_OW 561
// end ;
71639: LD_VAR 0 2
71643: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71644: LD_INT 0
71646: PPUSH
71647: PPUSH
71648: PPUSH
71649: PPUSH
71650: PPUSH
// if not area or not rate or not max then
71651: LD_VAR 0 1
71655: NOT
71656: IFTRUE 71665
71658: PUSH
71659: LD_VAR 0 2
71663: NOT
71664: OR
71665: IFTRUE 71674
71667: PUSH
71668: LD_VAR 0 4
71672: NOT
71673: OR
71674: IFFALSE 71678
// exit ;
71676: GO 71867
// while 1 do
71678: LD_INT 1
71680: IFFALSE 71867
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71682: LD_ADDR_VAR 0 9
71686: PUSH
71687: LD_VAR 0 1
71691: PPUSH
71692: LD_INT 1
71694: PPUSH
71695: CALL_OW 287
71699: PUSH
71700: LD_INT 10
71702: MUL
71703: ST_TO_ADDR
// r := rate / 10 ;
71704: LD_ADDR_VAR 0 7
71708: PUSH
71709: LD_VAR 0 2
71713: PUSH
71714: LD_INT 10
71716: DIVREAL
71717: ST_TO_ADDR
// time := 1 1$00 ;
71718: LD_ADDR_VAR 0 8
71722: PUSH
71723: LD_INT 2100
71725: ST_TO_ADDR
// if amount < min then
71726: LD_VAR 0 9
71730: PUSH
71731: LD_VAR 0 3
71735: LESS
71736: IFFALSE 71754
// r := r * 2 else
71738: LD_ADDR_VAR 0 7
71742: PUSH
71743: LD_VAR 0 7
71747: PUSH
71748: LD_INT 2
71750: MUL
71751: ST_TO_ADDR
71752: GO 71780
// if amount > max then
71754: LD_VAR 0 9
71758: PUSH
71759: LD_VAR 0 4
71763: GREATER
71764: IFFALSE 71780
// r := r / 2 ;
71766: LD_ADDR_VAR 0 7
71770: PUSH
71771: LD_VAR 0 7
71775: PUSH
71776: LD_INT 2
71778: DIVREAL
71779: ST_TO_ADDR
// time := time / r ;
71780: LD_ADDR_VAR 0 8
71784: PUSH
71785: LD_VAR 0 8
71789: PUSH
71790: LD_VAR 0 7
71794: DIVREAL
71795: ST_TO_ADDR
// if time < 0 then
71796: LD_VAR 0 8
71800: PUSH
71801: LD_INT 0
71803: LESS
71804: IFFALSE 71821
// time := time * - 1 ;
71806: LD_ADDR_VAR 0 8
71810: PUSH
71811: LD_VAR 0 8
71815: PUSH
71816: LD_INT 1
71818: NEG
71819: MUL
71820: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71821: LD_VAR 0 8
71825: PUSH
71826: LD_INT 35
71828: PPUSH
71829: LD_INT 875
71831: PPUSH
71832: CALL_OW 12
71836: PLUS
71837: PPUSH
71838: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71842: LD_INT 1
71844: PPUSH
71845: LD_INT 5
71847: PPUSH
71848: CALL_OW 12
71852: PPUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: LD_INT 1
71860: PPUSH
71861: CALL_OW 55
// end ;
71865: GO 71678
// end ;
71867: LD_VAR 0 5
71871: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71872: LD_INT 0
71874: PPUSH
71875: PPUSH
71876: PPUSH
71877: PPUSH
71878: PPUSH
71879: PPUSH
71880: PPUSH
71881: PPUSH
// if not turrets or not factories then
71882: LD_VAR 0 1
71886: NOT
71887: IFTRUE 71896
71889: PUSH
71890: LD_VAR 0 2
71894: NOT
71895: OR
71896: IFFALSE 71900
// exit ;
71898: GO 72207
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71900: LD_ADDR_VAR 0 10
71904: PUSH
71905: LD_INT 5
71907: PUSH
71908: LD_INT 6
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: LD_INT 4
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 3
71927: PUSH
71928: LD_INT 5
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 24
71942: PUSH
71943: LD_INT 25
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 23
71952: PUSH
71953: LD_INT 27
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 42
71966: PUSH
71967: LD_INT 43
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 44
71976: PUSH
71977: LD_INT 46
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 45
71986: PUSH
71987: LD_INT 47
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: LIST
72003: ST_TO_ADDR
// result := [ ] ;
72004: LD_ADDR_VAR 0 3
72008: PUSH
72009: EMPTY
72010: ST_TO_ADDR
// for i in turrets do
72011: LD_ADDR_VAR 0 4
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: FOR_IN
72022: IFFALSE 72205
// begin nat := GetNation ( i ) ;
72024: LD_ADDR_VAR 0 7
72028: PUSH
72029: LD_VAR 0 4
72033: PPUSH
72034: CALL_OW 248
72038: ST_TO_ADDR
// weapon := 0 ;
72039: LD_ADDR_VAR 0 8
72043: PUSH
72044: LD_INT 0
72046: ST_TO_ADDR
// if not nat then
72047: LD_VAR 0 7
72051: NOT
72052: IFFALSE 72056
// continue ;
72054: GO 72021
// for j in list [ nat ] do
72056: LD_ADDR_VAR 0 5
72060: PUSH
72061: LD_VAR 0 10
72065: PUSH
72066: LD_VAR 0 7
72070: ARRAY
72071: PUSH
72072: FOR_IN
72073: IFFALSE 72114
// if GetBWeapon ( i ) = j [ 1 ] then
72075: LD_VAR 0 4
72079: PPUSH
72080: CALL_OW 269
72084: PUSH
72085: LD_VAR 0 5
72089: PUSH
72090: LD_INT 1
72092: ARRAY
72093: EQUAL
72094: IFFALSE 72112
// begin weapon := j [ 2 ] ;
72096: LD_ADDR_VAR 0 8
72100: PUSH
72101: LD_VAR 0 5
72105: PUSH
72106: LD_INT 2
72108: ARRAY
72109: ST_TO_ADDR
// break ;
72110: GO 72114
// end ;
72112: GO 72072
72114: POP
72115: POP
// if not weapon then
72116: LD_VAR 0 8
72120: NOT
72121: IFFALSE 72125
// continue ;
72123: GO 72021
// for k in factories do
72125: LD_ADDR_VAR 0 6
72129: PUSH
72130: LD_VAR 0 2
72134: PUSH
72135: FOR_IN
72136: IFFALSE 72201
// begin weapons := AvailableWeaponList ( k ) ;
72138: LD_ADDR_VAR 0 9
72142: PUSH
72143: LD_VAR 0 6
72147: PPUSH
72148: CALL_OW 478
72152: ST_TO_ADDR
// if not weapons then
72153: LD_VAR 0 9
72157: NOT
72158: IFFALSE 72162
// continue ;
72160: GO 72135
// if weapon in weapons then
72162: LD_VAR 0 8
72166: PUSH
72167: LD_VAR 0 9
72171: IN
72172: IFFALSE 72199
// begin result := [ i , weapon ] ;
72174: LD_ADDR_VAR 0 3
72178: PUSH
72179: LD_VAR 0 4
72183: PUSH
72184: LD_VAR 0 8
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: ST_TO_ADDR
// exit ;
72193: POP
72194: POP
72195: POP
72196: POP
72197: GO 72207
// end ; end ;
72199: GO 72135
72201: POP
72202: POP
// end ;
72203: GO 72021
72205: POP
72206: POP
// end ;
72207: LD_VAR 0 3
72211: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72212: LD_INT 0
72214: PPUSH
// if not side or side > 8 then
72215: LD_VAR 0 3
72219: NOT
72220: IFTRUE 72232
72222: PUSH
72223: LD_VAR 0 3
72227: PUSH
72228: LD_INT 8
72230: GREATER
72231: OR
72232: IFFALSE 72236
// exit ;
72234: GO 72295
// if not range then
72236: LD_VAR 0 4
72240: NOT
72241: IFFALSE 72252
// range := - 12 ;
72243: LD_ADDR_VAR 0 4
72247: PUSH
72248: LD_INT 12
72250: NEG
72251: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72252: LD_VAR 0 1
72256: PPUSH
72257: LD_VAR 0 2
72261: PPUSH
72262: LD_VAR 0 3
72266: PPUSH
72267: LD_VAR 0 4
72271: PPUSH
72272: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72276: LD_VAR 0 1
72280: PPUSH
72281: LD_VAR 0 2
72285: PPUSH
72286: LD_VAR 0 3
72290: PPUSH
72291: CALL_OW 331
// end ;
72295: LD_VAR 0 5
72299: RET
// export function Video ( mode ) ; begin
72300: LD_INT 0
72302: PPUSH
// ingame_video = mode ;
72303: LD_ADDR_OWVAR 52
72307: PUSH
72308: LD_VAR 0 1
72312: ST_TO_ADDR
// interface_hidden = mode ;
72313: LD_ADDR_OWVAR 54
72317: PUSH
72318: LD_VAR 0 1
72322: ST_TO_ADDR
// end ;
72323: LD_VAR 0 2
72327: RET
// export function Join ( array , element ) ; begin
72328: LD_INT 0
72330: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72331: LD_ADDR_VAR 0 3
72335: PUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 1
72345: PUSH
72346: LD_INT 1
72348: PLUS
72349: PPUSH
72350: LD_VAR 0 2
72354: PPUSH
72355: CALL_OW 1
72359: ST_TO_ADDR
// end ;
72360: LD_VAR 0 3
72364: RET
// export function JoinUnion ( array , element ) ; begin
72365: LD_INT 0
72367: PPUSH
// result := array union element ;
72368: LD_ADDR_VAR 0 3
72372: PUSH
72373: LD_VAR 0 1
72377: PUSH
72378: LD_VAR 0 2
72382: UNION
72383: ST_TO_ADDR
// end ;
72384: LD_VAR 0 3
72388: RET
// export function GetBehemoths ( side ) ; begin
72389: LD_INT 0
72391: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72392: LD_ADDR_VAR 0 2
72396: PUSH
72397: LD_INT 22
72399: PUSH
72400: LD_VAR 0 1
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 31
72411: PUSH
72412: LD_INT 25
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PPUSH
72423: CALL_OW 69
72427: ST_TO_ADDR
// end ;
72428: LD_VAR 0 2
72432: RET
// export function Shuffle ( array ) ; var i , index ; begin
72433: LD_INT 0
72435: PPUSH
72436: PPUSH
72437: PPUSH
// result := [ ] ;
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: EMPTY
72444: ST_TO_ADDR
// if not array then
72445: LD_VAR 0 1
72449: NOT
72450: IFFALSE 72454
// exit ;
72452: GO 72553
// Randomize ;
72454: CALL_OW 10
// for i = array downto 1 do
72458: LD_ADDR_VAR 0 3
72462: PUSH
72463: DOUBLE
72464: LD_VAR 0 1
72468: INC
72469: ST_TO_ADDR
72470: LD_INT 1
72472: PUSH
72473: FOR_DOWNTO
72474: IFFALSE 72551
// begin index := rand ( 1 , array ) ;
72476: LD_ADDR_VAR 0 4
72480: PUSH
72481: LD_INT 1
72483: PPUSH
72484: LD_VAR 0 1
72488: PPUSH
72489: CALL_OW 12
72493: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72494: LD_ADDR_VAR 0 2
72498: PUSH
72499: LD_VAR 0 2
72503: PPUSH
72504: LD_VAR 0 2
72508: PUSH
72509: LD_INT 1
72511: PLUS
72512: PPUSH
72513: LD_VAR 0 1
72517: PUSH
72518: LD_VAR 0 4
72522: ARRAY
72523: PPUSH
72524: CALL_OW 2
72528: ST_TO_ADDR
// array := Delete ( array , index ) ;
72529: LD_ADDR_VAR 0 1
72533: PUSH
72534: LD_VAR 0 1
72538: PPUSH
72539: LD_VAR 0 4
72543: PPUSH
72544: CALL_OW 3
72548: ST_TO_ADDR
// end ;
72549: GO 72473
72551: POP
72552: POP
// end ;
72553: LD_VAR 0 2
72557: RET
// export function GetBaseMaterials ( base ) ; begin
72558: LD_INT 0
72560: PPUSH
// result := [ 0 , 0 , 0 ] ;
72561: LD_ADDR_VAR 0 2
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: LD_INT 0
72571: PUSH
72572: LD_INT 0
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: ST_TO_ADDR
// if not base then
72580: LD_VAR 0 1
72584: NOT
72585: IFFALSE 72589
// exit ;
72587: GO 72638
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72589: LD_ADDR_VAR 0 2
72593: PUSH
72594: LD_VAR 0 1
72598: PPUSH
72599: LD_INT 1
72601: PPUSH
72602: CALL_OW 275
72606: PUSH
72607: LD_VAR 0 1
72611: PPUSH
72612: LD_INT 2
72614: PPUSH
72615: CALL_OW 275
72619: PUSH
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_INT 3
72627: PPUSH
72628: CALL_OW 275
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: LIST
72637: ST_TO_ADDR
// end ;
72638: LD_VAR 0 2
72642: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72643: LD_INT 0
72645: PPUSH
72646: PPUSH
// result := array ;
72647: LD_ADDR_VAR 0 3
72651: PUSH
72652: LD_VAR 0 1
72656: ST_TO_ADDR
// if size >= result then
72657: LD_VAR 0 2
72661: PUSH
72662: LD_VAR 0 3
72666: GREATEREQUAL
72667: IFFALSE 72671
// exit ;
72669: GO 72721
// if size then
72671: LD_VAR 0 2
72675: IFFALSE 72721
// for i := array downto size do
72677: LD_ADDR_VAR 0 4
72681: PUSH
72682: DOUBLE
72683: LD_VAR 0 1
72687: INC
72688: ST_TO_ADDR
72689: LD_VAR 0 2
72693: PUSH
72694: FOR_DOWNTO
72695: IFFALSE 72719
// result := Delete ( result , result ) ;
72697: LD_ADDR_VAR 0 3
72701: PUSH
72702: LD_VAR 0 3
72706: PPUSH
72707: LD_VAR 0 3
72711: PPUSH
72712: CALL_OW 3
72716: ST_TO_ADDR
72717: GO 72694
72719: POP
72720: POP
// end ;
72721: LD_VAR 0 3
72725: RET
// export function ComExit ( unit ) ; var tmp ; begin
72726: LD_INT 0
72728: PPUSH
72729: PPUSH
// if not IsInUnit ( unit ) then
72730: LD_VAR 0 1
72734: PPUSH
72735: CALL_OW 310
72739: NOT
72740: IFFALSE 72744
// exit ;
72742: GO 72804
// tmp := IsInUnit ( unit ) ;
72744: LD_ADDR_VAR 0 3
72748: PUSH
72749: LD_VAR 0 1
72753: PPUSH
72754: CALL_OW 310
72758: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72759: LD_VAR 0 3
72763: PPUSH
72764: CALL_OW 247
72768: PUSH
72769: LD_INT 2
72771: EQUAL
72772: IFFALSE 72785
// ComExitVehicle ( unit ) else
72774: LD_VAR 0 1
72778: PPUSH
72779: CALL_OW 121
72783: GO 72794
// ComExitBuilding ( unit ) ;
72785: LD_VAR 0 1
72789: PPUSH
72790: CALL_OW 122
// result := tmp ;
72794: LD_ADDR_VAR 0 2
72798: PUSH
72799: LD_VAR 0 3
72803: ST_TO_ADDR
// end ;
72804: LD_VAR 0 2
72808: RET
// export function ComExitAll ( units ) ; var i ; begin
72809: LD_INT 0
72811: PPUSH
72812: PPUSH
// if not units then
72813: LD_VAR 0 1
72817: NOT
72818: IFFALSE 72822
// exit ;
72820: GO 72848
// for i in units do
72822: LD_ADDR_VAR 0 3
72826: PUSH
72827: LD_VAR 0 1
72831: PUSH
72832: FOR_IN
72833: IFFALSE 72846
// ComExit ( i ) ;
72835: LD_VAR 0 3
72839: PPUSH
72840: CALL 72726 0 1
72844: GO 72832
72846: POP
72847: POP
// end ;
72848: LD_VAR 0 2
72852: RET
// export function ResetHc ; begin
72853: LD_INT 0
72855: PPUSH
// InitHc ;
72856: CALL_OW 19
// hc_importance := 0 ;
72860: LD_ADDR_OWVAR 32
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// end ;
72868: LD_VAR 0 1
72872: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72873: LD_INT 0
72875: PPUSH
72876: PPUSH
72877: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72878: LD_ADDR_VAR 0 6
72882: PUSH
72883: LD_VAR 0 1
72887: PUSH
72888: LD_VAR 0 3
72892: PLUS
72893: PUSH
72894: LD_INT 2
72896: DIV
72897: ST_TO_ADDR
// if _x < 0 then
72898: LD_VAR 0 6
72902: PUSH
72903: LD_INT 0
72905: LESS
72906: IFFALSE 72923
// _x := _x * - 1 ;
72908: LD_ADDR_VAR 0 6
72912: PUSH
72913: LD_VAR 0 6
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: MUL
72922: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72923: LD_ADDR_VAR 0 7
72927: PUSH
72928: LD_VAR 0 2
72932: PUSH
72933: LD_VAR 0 4
72937: PLUS
72938: PUSH
72939: LD_INT 2
72941: DIV
72942: ST_TO_ADDR
// if _y < 0 then
72943: LD_VAR 0 7
72947: PUSH
72948: LD_INT 0
72950: LESS
72951: IFFALSE 72968
// _y := _y * - 1 ;
72953: LD_ADDR_VAR 0 7
72957: PUSH
72958: LD_VAR 0 7
72962: PUSH
72963: LD_INT 1
72965: NEG
72966: MUL
72967: ST_TO_ADDR
// result := [ _x , _y ] ;
72968: LD_ADDR_VAR 0 5
72972: PUSH
72973: LD_VAR 0 6
72977: PUSH
72978: LD_VAR 0 7
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: ST_TO_ADDR
// end ;
72987: LD_VAR 0 5
72991: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72992: LD_INT 0
72994: PPUSH
72995: PPUSH
72996: PPUSH
72997: PPUSH
// task := GetTaskList ( unit ) ;
72998: LD_ADDR_VAR 0 7
73002: PUSH
73003: LD_VAR 0 1
73007: PPUSH
73008: CALL_OW 437
73012: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73013: LD_VAR 0 7
73017: NOT
73018: IFFALSE 73037
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: LD_VAR 0 2
73030: PPUSH
73031: CALL_OW 308
73035: NOT
73036: AND
73037: IFFALSE 73041
// exit ;
73039: GO 73159
// if IsInArea ( unit , area ) then
73041: LD_VAR 0 1
73045: PPUSH
73046: LD_VAR 0 2
73050: PPUSH
73051: CALL_OW 308
73055: IFFALSE 73073
// begin ComMoveToArea ( unit , goAway ) ;
73057: LD_VAR 0 1
73061: PPUSH
73062: LD_VAR 0 3
73066: PPUSH
73067: CALL_OW 113
// exit ;
73071: GO 73159
// end ; if task [ 1 ] [ 1 ] <> M then
73073: LD_VAR 0 7
73077: PUSH
73078: LD_INT 1
73080: ARRAY
73081: PUSH
73082: LD_INT 1
73084: ARRAY
73085: PUSH
73086: LD_STRING M
73088: NONEQUAL
73089: IFFALSE 73093
// exit ;
73091: GO 73159
// x := task [ 1 ] [ 2 ] ;
73093: LD_ADDR_VAR 0 5
73097: PUSH
73098: LD_VAR 0 7
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PUSH
73107: LD_INT 2
73109: ARRAY
73110: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73111: LD_ADDR_VAR 0 6
73115: PUSH
73116: LD_VAR 0 7
73120: PUSH
73121: LD_INT 1
73123: ARRAY
73124: PUSH
73125: LD_INT 3
73127: ARRAY
73128: ST_TO_ADDR
// if InArea ( x , y , area ) then
73129: LD_VAR 0 5
73133: PPUSH
73134: LD_VAR 0 6
73138: PPUSH
73139: LD_VAR 0 2
73143: PPUSH
73144: CALL_OW 309
73148: IFFALSE 73159
// ComStop ( unit ) ;
73150: LD_VAR 0 1
73154: PPUSH
73155: CALL_OW 141
// end ;
73159: LD_VAR 0 4
73163: RET
// export function Abs ( value ) ; begin
73164: LD_INT 0
73166: PPUSH
// result := value ;
73167: LD_ADDR_VAR 0 2
73171: PUSH
73172: LD_VAR 0 1
73176: ST_TO_ADDR
// if value < 0 then
73177: LD_VAR 0 1
73181: PUSH
73182: LD_INT 0
73184: LESS
73185: IFFALSE 73202
// result := value * - 1 ;
73187: LD_ADDR_VAR 0 2
73191: PUSH
73192: LD_VAR 0 1
73196: PUSH
73197: LD_INT 1
73199: NEG
73200: MUL
73201: ST_TO_ADDR
// end ;
73202: LD_VAR 0 2
73206: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73207: LD_INT 0
73209: PPUSH
73210: PPUSH
73211: PPUSH
73212: PPUSH
73213: PPUSH
73214: PPUSH
73215: PPUSH
73216: PPUSH
// if not unit or not building then
73217: LD_VAR 0 1
73221: NOT
73222: IFTRUE 73231
73224: PUSH
73225: LD_VAR 0 2
73229: NOT
73230: OR
73231: IFFALSE 73235
// exit ;
73233: GO 73463
// x := GetX ( building ) ;
73235: LD_ADDR_VAR 0 4
73239: PUSH
73240: LD_VAR 0 2
73244: PPUSH
73245: CALL_OW 250
73249: ST_TO_ADDR
// y := GetY ( building ) ;
73250: LD_ADDR_VAR 0 6
73254: PUSH
73255: LD_VAR 0 2
73259: PPUSH
73260: CALL_OW 251
73264: ST_TO_ADDR
// d := GetDir ( building ) ;
73265: LD_ADDR_VAR 0 8
73269: PUSH
73270: LD_VAR 0 2
73274: PPUSH
73275: CALL_OW 254
73279: ST_TO_ADDR
// r := 4 ;
73280: LD_ADDR_VAR 0 9
73284: PUSH
73285: LD_INT 4
73287: ST_TO_ADDR
// for i := 1 to 5 do
73288: LD_ADDR_VAR 0 10
73292: PUSH
73293: DOUBLE
73294: LD_INT 1
73296: DEC
73297: ST_TO_ADDR
73298: LD_INT 5
73300: PUSH
73301: FOR_TO
73302: IFFALSE 73461
// begin _x := ShiftX ( x , d , r + i ) ;
73304: LD_ADDR_VAR 0 5
73308: PUSH
73309: LD_VAR 0 4
73313: PPUSH
73314: LD_VAR 0 8
73318: PPUSH
73319: LD_VAR 0 9
73323: PUSH
73324: LD_VAR 0 10
73328: PLUS
73329: PPUSH
73330: CALL_OW 272
73334: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73335: LD_ADDR_VAR 0 7
73339: PUSH
73340: LD_VAR 0 6
73344: PPUSH
73345: LD_VAR 0 8
73349: PPUSH
73350: LD_VAR 0 9
73354: PUSH
73355: LD_VAR 0 10
73359: PLUS
73360: PPUSH
73361: CALL_OW 273
73365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73366: LD_VAR 0 5
73370: PPUSH
73371: LD_VAR 0 7
73375: PPUSH
73376: CALL_OW 488
73380: IFFALSE 73415
73382: PUSH
73383: LD_VAR 0 5
73387: PPUSH
73388: LD_VAR 0 7
73392: PPUSH
73393: CALL_OW 428
73397: PPUSH
73398: CALL_OW 247
73402: PUSH
73403: LD_INT 3
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: IN
73413: NOT
73414: AND
73415: IFFALSE 73459
// begin ComMoveXY ( unit , _x , _y ) ;
73417: LD_VAR 0 1
73421: PPUSH
73422: LD_VAR 0 5
73426: PPUSH
73427: LD_VAR 0 7
73431: PPUSH
73432: CALL_OW 111
// result := [ _x , _y ] ;
73436: LD_ADDR_VAR 0 3
73440: PUSH
73441: LD_VAR 0 5
73445: PUSH
73446: LD_VAR 0 7
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: ST_TO_ADDR
// exit ;
73455: POP
73456: POP
73457: GO 73463
// end ; end ;
73459: GO 73301
73461: POP
73462: POP
// end ;
73463: LD_VAR 0 3
73467: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73468: LD_INT 0
73470: PPUSH
73471: PPUSH
73472: PPUSH
// result := 0 ;
73473: LD_ADDR_VAR 0 3
73477: PUSH
73478: LD_INT 0
73480: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73481: LD_VAR 0 1
73485: PUSH
73486: LD_INT 0
73488: LESS
73489: IFTRUE 73501
73491: PUSH
73492: LD_VAR 0 1
73496: PUSH
73497: LD_INT 8
73499: GREATER
73500: OR
73501: IFTRUE 73513
73503: PUSH
73504: LD_VAR 0 2
73508: PUSH
73509: LD_INT 0
73511: LESS
73512: OR
73513: IFTRUE 73525
73515: PUSH
73516: LD_VAR 0 2
73520: PUSH
73521: LD_INT 8
73523: GREATER
73524: OR
73525: IFFALSE 73529
// exit ;
73527: GO 73604
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73529: LD_ADDR_VAR 0 4
73533: PUSH
73534: LD_INT 22
73536: PUSH
73537: LD_VAR 0 2
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PPUSH
73546: CALL_OW 69
73550: PUSH
73551: FOR_IN
73552: IFFALSE 73602
// begin un := UnitShoot ( i ) ;
73554: LD_ADDR_VAR 0 5
73558: PUSH
73559: LD_VAR 0 4
73563: PPUSH
73564: CALL_OW 504
73568: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73569: LD_VAR 0 5
73573: PPUSH
73574: CALL_OW 255
73578: PUSH
73579: LD_VAR 0 1
73583: EQUAL
73584: IFFALSE 73600
// begin result := un ;
73586: LD_ADDR_VAR 0 3
73590: PUSH
73591: LD_VAR 0 5
73595: ST_TO_ADDR
// exit ;
73596: POP
73597: POP
73598: GO 73604
// end ; end ;
73600: GO 73551
73602: POP
73603: POP
// end ;
73604: LD_VAR 0 3
73608: RET
// export function GetCargoBay ( units ) ; begin
73609: LD_INT 0
73611: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73612: LD_ADDR_VAR 0 2
73616: PUSH
73617: LD_VAR 0 1
73621: PPUSH
73622: LD_INT 2
73624: PUSH
73625: LD_INT 34
73627: PUSH
73628: LD_INT 12
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 34
73637: PUSH
73638: LD_INT 51
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 34
73647: PUSH
73648: LD_INT 32
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 34
73657: PUSH
73658: LD_INT 89
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: PPUSH
73672: CALL_OW 72
73676: ST_TO_ADDR
// end ;
73677: LD_VAR 0 2
73681: RET
// export function Negate ( value ) ; begin
73682: LD_INT 0
73684: PPUSH
// result := not value ;
73685: LD_ADDR_VAR 0 2
73689: PUSH
73690: LD_VAR 0 1
73694: NOT
73695: ST_TO_ADDR
// end ;
73696: LD_VAR 0 2
73700: RET
// export function Inc ( value ) ; begin
73701: LD_INT 0
73703: PPUSH
// result := value + 1 ;
73704: LD_ADDR_VAR 0 2
73708: PUSH
73709: LD_VAR 0 1
73713: PUSH
73714: LD_INT 1
73716: PLUS
73717: ST_TO_ADDR
// end ;
73718: LD_VAR 0 2
73722: RET
// export function Dec ( value ) ; begin
73723: LD_INT 0
73725: PPUSH
// result := value - 1 ;
73726: LD_ADDR_VAR 0 2
73730: PUSH
73731: LD_VAR 0 1
73735: PUSH
73736: LD_INT 1
73738: MINUS
73739: ST_TO_ADDR
// end ;
73740: LD_VAR 0 2
73744: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73745: LD_INT 0
73747: PPUSH
73748: PPUSH
73749: PPUSH
73750: PPUSH
73751: PPUSH
73752: PPUSH
73753: PPUSH
73754: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73755: LD_VAR 0 1
73759: PPUSH
73760: LD_VAR 0 2
73764: PPUSH
73765: CALL_OW 488
73769: NOT
73770: IFTRUE 73789
73772: PUSH
73773: LD_VAR 0 3
73777: PPUSH
73778: LD_VAR 0 4
73782: PPUSH
73783: CALL_OW 488
73787: NOT
73788: OR
73789: IFFALSE 73802
// begin result := - 1 ;
73791: LD_ADDR_VAR 0 5
73795: PUSH
73796: LD_INT 1
73798: NEG
73799: ST_TO_ADDR
// exit ;
73800: GO 74037
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73802: LD_ADDR_VAR 0 12
73806: PUSH
73807: LD_VAR 0 1
73811: PPUSH
73812: LD_VAR 0 2
73816: PPUSH
73817: LD_VAR 0 3
73821: PPUSH
73822: LD_VAR 0 4
73826: PPUSH
73827: CALL 72873 0 4
73831: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73832: LD_ADDR_VAR 0 11
73836: PUSH
73837: LD_VAR 0 1
73841: PPUSH
73842: LD_VAR 0 2
73846: PPUSH
73847: LD_VAR 0 12
73851: PUSH
73852: LD_INT 1
73854: ARRAY
73855: PPUSH
73856: LD_VAR 0 12
73860: PUSH
73861: LD_INT 2
73863: ARRAY
73864: PPUSH
73865: CALL_OW 298
73869: ST_TO_ADDR
// distance := 9999 ;
73870: LD_ADDR_VAR 0 10
73874: PUSH
73875: LD_INT 9999
73877: ST_TO_ADDR
// for i := 0 to 5 do
73878: LD_ADDR_VAR 0 6
73882: PUSH
73883: DOUBLE
73884: LD_INT 0
73886: DEC
73887: ST_TO_ADDR
73888: LD_INT 5
73890: PUSH
73891: FOR_TO
73892: IFFALSE 74035
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73894: LD_ADDR_VAR 0 7
73898: PUSH
73899: LD_VAR 0 1
73903: PPUSH
73904: LD_VAR 0 6
73908: PPUSH
73909: LD_VAR 0 11
73913: PPUSH
73914: CALL_OW 272
73918: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73919: LD_ADDR_VAR 0 8
73923: PUSH
73924: LD_VAR 0 2
73928: PPUSH
73929: LD_VAR 0 6
73933: PPUSH
73934: LD_VAR 0 11
73938: PPUSH
73939: CALL_OW 273
73943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73944: LD_VAR 0 7
73948: PPUSH
73949: LD_VAR 0 8
73953: PPUSH
73954: CALL_OW 488
73958: NOT
73959: IFFALSE 73963
// continue ;
73961: GO 73891
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73963: LD_ADDR_VAR 0 9
73967: PUSH
73968: LD_VAR 0 12
73972: PUSH
73973: LD_INT 1
73975: ARRAY
73976: PPUSH
73977: LD_VAR 0 12
73981: PUSH
73982: LD_INT 2
73984: ARRAY
73985: PPUSH
73986: LD_VAR 0 7
73990: PPUSH
73991: LD_VAR 0 8
73995: PPUSH
73996: CALL_OW 298
74000: ST_TO_ADDR
// if tmp < distance then
74001: LD_VAR 0 9
74005: PUSH
74006: LD_VAR 0 10
74010: LESS
74011: IFFALSE 74033
// begin result := i ;
74013: LD_ADDR_VAR 0 5
74017: PUSH
74018: LD_VAR 0 6
74022: ST_TO_ADDR
// distance := tmp ;
74023: LD_ADDR_VAR 0 10
74027: PUSH
74028: LD_VAR 0 9
74032: ST_TO_ADDR
// end ; end ;
74033: GO 73891
74035: POP
74036: POP
// end ;
74037: LD_VAR 0 5
74041: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74042: LD_INT 0
74044: PPUSH
74045: PPUSH
// if not driver or not IsInUnit ( driver ) then
74046: LD_VAR 0 1
74050: NOT
74051: IFTRUE 74065
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: CALL_OW 310
74063: NOT
74064: OR
74065: IFFALSE 74069
// exit ;
74067: GO 74159
// vehicle := IsInUnit ( driver ) ;
74069: LD_ADDR_VAR 0 3
74073: PUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: CALL_OW 310
74083: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74084: LD_VAR 0 1
74088: PPUSH
74089: LD_STRING \
74091: PUSH
74092: LD_INT 0
74094: PUSH
74095: LD_INT 0
74097: PUSH
74098: LD_INT 0
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: LD_INT 0
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: PUSH
74119: LD_STRING E
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: LD_INT 0
74127: PUSH
74128: LD_VAR 0 3
74132: PUSH
74133: LD_INT 0
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PPUSH
74155: CALL_OW 446
// end ;
74159: LD_VAR 0 2
74163: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
// if not driver or not IsInUnit ( driver ) then
74168: LD_VAR 0 1
74172: NOT
74173: IFTRUE 74187
74175: PUSH
74176: LD_VAR 0 1
74180: PPUSH
74181: CALL_OW 310
74185: NOT
74186: OR
74187: IFFALSE 74191
// exit ;
74189: GO 74281
// vehicle := IsInUnit ( driver ) ;
74191: LD_ADDR_VAR 0 3
74195: PUSH
74196: LD_VAR 0 1
74200: PPUSH
74201: CALL_OW 310
74205: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74206: LD_VAR 0 1
74210: PPUSH
74211: LD_STRING \
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: LD_INT 0
74219: PUSH
74220: LD_INT 0
74222: PUSH
74223: LD_INT 0
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: LD_INT 0
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: PUSH
74241: LD_STRING E
74243: PUSH
74244: LD_INT 0
74246: PUSH
74247: LD_INT 0
74249: PUSH
74250: LD_VAR 0 3
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PPUSH
74277: CALL_OW 447
// end ;
74281: LD_VAR 0 2
74285: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74286: LD_INT 0
74288: PPUSH
74289: PPUSH
74290: PPUSH
// tmp := [ ] ;
74291: LD_ADDR_VAR 0 5
74295: PUSH
74296: EMPTY
74297: ST_TO_ADDR
// for i in units do
74298: LD_ADDR_VAR 0 4
74302: PUSH
74303: LD_VAR 0 1
74307: PUSH
74308: FOR_IN
74309: IFFALSE 74347
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74311: LD_ADDR_VAR 0 5
74315: PUSH
74316: LD_VAR 0 5
74320: PPUSH
74321: LD_VAR 0 5
74325: PUSH
74326: LD_INT 1
74328: PLUS
74329: PPUSH
74330: LD_VAR 0 4
74334: PPUSH
74335: CALL_OW 256
74339: PPUSH
74340: CALL_OW 2
74344: ST_TO_ADDR
74345: GO 74308
74347: POP
74348: POP
// if not tmp then
74349: LD_VAR 0 5
74353: NOT
74354: IFFALSE 74358
// exit ;
74356: GO 74406
// if asc then
74358: LD_VAR 0 2
74362: IFFALSE 74386
// result := SortListByListAsc ( units , tmp ) else
74364: LD_ADDR_VAR 0 3
74368: PUSH
74369: LD_VAR 0 1
74373: PPUSH
74374: LD_VAR 0 5
74378: PPUSH
74379: CALL_OW 76
74383: ST_TO_ADDR
74384: GO 74406
// result := SortListByListDesc ( units , tmp ) ;
74386: LD_ADDR_VAR 0 3
74390: PUSH
74391: LD_VAR 0 1
74395: PPUSH
74396: LD_VAR 0 5
74400: PPUSH
74401: CALL_OW 77
74405: ST_TO_ADDR
// end ;
74406: LD_VAR 0 3
74410: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74411: LD_INT 0
74413: PPUSH
74414: PPUSH
// task := GetTaskList ( mech ) ;
74415: LD_ADDR_VAR 0 4
74419: PUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: CALL_OW 437
74429: ST_TO_ADDR
// if not task then
74430: LD_VAR 0 4
74434: NOT
74435: IFFALSE 74439
// exit ;
74437: GO 74483
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74439: LD_ADDR_VAR 0 3
74443: PUSH
74444: LD_VAR 0 4
74448: PUSH
74449: LD_INT 1
74451: ARRAY
74452: PUSH
74453: LD_INT 1
74455: ARRAY
74456: PUSH
74457: LD_STRING r
74459: EQUAL
74460: IFFALSE 74482
74462: PUSH
74463: LD_VAR 0 4
74467: PUSH
74468: LD_INT 1
74470: ARRAY
74471: PUSH
74472: LD_INT 4
74474: ARRAY
74475: PUSH
74476: LD_VAR 0 2
74480: EQUAL
74481: AND
74482: ST_TO_ADDR
// end ;
74483: LD_VAR 0 3
74487: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74488: LD_INT 0
74490: PPUSH
// SetDir ( unit , d ) ;
74491: LD_VAR 0 1
74495: PPUSH
74496: LD_VAR 0 4
74500: PPUSH
74501: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
74505: LD_ADDR_VAR 0 6
74509: PUSH
74510: LD_VAR 0 1
74514: PPUSH
74515: LD_VAR 0 2
74519: PPUSH
74520: LD_VAR 0 3
74524: PPUSH
74525: LD_VAR 0 5
74529: PPUSH
74530: CALL_OW 48
74534: ST_TO_ADDR
// end ;
74535: LD_VAR 0 6
74539: RET
// export function ToNaturalNumber ( number ) ; begin
74540: LD_INT 0
74542: PPUSH
// result := number div 1 ;
74543: LD_ADDR_VAR 0 2
74547: PUSH
74548: LD_VAR 0 1
74552: PUSH
74553: LD_INT 1
74555: DIV
74556: ST_TO_ADDR
// if number < 0 then
74557: LD_VAR 0 1
74561: PUSH
74562: LD_INT 0
74564: LESS
74565: IFFALSE 74575
// result := 0 ;
74567: LD_ADDR_VAR 0 2
74571: PUSH
74572: LD_INT 0
74574: ST_TO_ADDR
// end ;
74575: LD_VAR 0 2
74579: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74580: LD_INT 0
74582: PPUSH
74583: PPUSH
74584: PPUSH
// if not buildings then
74585: LD_VAR 0 1
74589: NOT
74590: IFFALSE 74594
// exit ;
74592: GO 74709
// tmp := [ ] ;
74594: LD_ADDR_VAR 0 5
74598: PUSH
74599: EMPTY
74600: ST_TO_ADDR
// for b in buildings do
74601: LD_ADDR_VAR 0 4
74605: PUSH
74606: LD_VAR 0 1
74610: PUSH
74611: FOR_IN
74612: IFFALSE 74650
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74614: LD_ADDR_VAR 0 5
74618: PUSH
74619: LD_VAR 0 5
74623: PPUSH
74624: LD_VAR 0 5
74628: PUSH
74629: LD_INT 1
74631: PLUS
74632: PPUSH
74633: LD_VAR 0 4
74637: PPUSH
74638: CALL_OW 266
74642: PPUSH
74643: CALL_OW 1
74647: ST_TO_ADDR
74648: GO 74611
74650: POP
74651: POP
// if not tmp then
74652: LD_VAR 0 5
74656: NOT
74657: IFFALSE 74661
// exit ;
74659: GO 74709
// if asc then
74661: LD_VAR 0 2
74665: IFFALSE 74689
// result := SortListByListAsc ( buildings , tmp ) else
74667: LD_ADDR_VAR 0 3
74671: PUSH
74672: LD_VAR 0 1
74676: PPUSH
74677: LD_VAR 0 5
74681: PPUSH
74682: CALL_OW 76
74686: ST_TO_ADDR
74687: GO 74709
// result := SortListByListDesc ( buildings , tmp ) ;
74689: LD_ADDR_VAR 0 3
74693: PUSH
74694: LD_VAR 0 1
74698: PPUSH
74699: LD_VAR 0 5
74703: PPUSH
74704: CALL_OW 77
74708: ST_TO_ADDR
// end ;
74709: LD_VAR 0 3
74713: RET
// export function SortByClass ( units , class ) ; var un ; begin
74714: LD_INT 0
74716: PPUSH
74717: PPUSH
// if not units or not class then
74718: LD_VAR 0 1
74722: NOT
74723: IFTRUE 74732
74725: PUSH
74726: LD_VAR 0 2
74730: NOT
74731: OR
74732: IFFALSE 74736
// exit ;
74734: GO 74831
// result := [ ] ;
74736: LD_ADDR_VAR 0 3
74740: PUSH
74741: EMPTY
74742: ST_TO_ADDR
// for un in units do
74743: LD_ADDR_VAR 0 4
74747: PUSH
74748: LD_VAR 0 1
74752: PUSH
74753: FOR_IN
74754: IFFALSE 74829
// if GetClass ( un ) = class then
74756: LD_VAR 0 4
74760: PPUSH
74761: CALL_OW 257
74765: PUSH
74766: LD_VAR 0 2
74770: EQUAL
74771: IFFALSE 74798
// result := Insert ( result , 1 , un ) else
74773: LD_ADDR_VAR 0 3
74777: PUSH
74778: LD_VAR 0 3
74782: PPUSH
74783: LD_INT 1
74785: PPUSH
74786: LD_VAR 0 4
74790: PPUSH
74791: CALL_OW 2
74795: ST_TO_ADDR
74796: GO 74827
// result := Replace ( result , result + 1 , un ) ;
74798: LD_ADDR_VAR 0 3
74802: PUSH
74803: LD_VAR 0 3
74807: PPUSH
74808: LD_VAR 0 3
74812: PUSH
74813: LD_INT 1
74815: PLUS
74816: PPUSH
74817: LD_VAR 0 4
74821: PPUSH
74822: CALL_OW 1
74826: ST_TO_ADDR
74827: GO 74753
74829: POP
74830: POP
// end ;
74831: LD_VAR 0 3
74835: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
74840: PPUSH
74841: PPUSH
74842: PPUSH
74843: PPUSH
74844: PPUSH
// result := [ ] ;
74845: LD_ADDR_VAR 0 4
74849: PUSH
74850: EMPTY
74851: ST_TO_ADDR
// if x - r < 0 then
74852: LD_VAR 0 1
74856: PUSH
74857: LD_VAR 0 3
74861: MINUS
74862: PUSH
74863: LD_INT 0
74865: LESS
74866: IFFALSE 74878
// min_x := 0 else
74868: LD_ADDR_VAR 0 8
74872: PUSH
74873: LD_INT 0
74875: ST_TO_ADDR
74876: GO 74894
// min_x := x - r ;
74878: LD_ADDR_VAR 0 8
74882: PUSH
74883: LD_VAR 0 1
74887: PUSH
74888: LD_VAR 0 3
74892: MINUS
74893: ST_TO_ADDR
// if y - r < 0 then
74894: LD_VAR 0 2
74898: PUSH
74899: LD_VAR 0 3
74903: MINUS
74904: PUSH
74905: LD_INT 0
74907: LESS
74908: IFFALSE 74920
// min_y := 0 else
74910: LD_ADDR_VAR 0 7
74914: PUSH
74915: LD_INT 0
74917: ST_TO_ADDR
74918: GO 74936
// min_y := y - r ;
74920: LD_ADDR_VAR 0 7
74924: PUSH
74925: LD_VAR 0 2
74929: PUSH
74930: LD_VAR 0 3
74934: MINUS
74935: ST_TO_ADDR
// max_x := x + r ;
74936: LD_ADDR_VAR 0 9
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_VAR 0 3
74950: PLUS
74951: ST_TO_ADDR
// max_y := y + r ;
74952: LD_ADDR_VAR 0 10
74956: PUSH
74957: LD_VAR 0 2
74961: PUSH
74962: LD_VAR 0 3
74966: PLUS
74967: ST_TO_ADDR
// for _x = min_x to max_x do
74968: LD_ADDR_VAR 0 5
74972: PUSH
74973: DOUBLE
74974: LD_VAR 0 8
74978: DEC
74979: ST_TO_ADDR
74980: LD_VAR 0 9
74984: PUSH
74985: FOR_TO
74986: IFFALSE 75087
// for _y = min_y to max_y do
74988: LD_ADDR_VAR 0 6
74992: PUSH
74993: DOUBLE
74994: LD_VAR 0 7
74998: DEC
74999: ST_TO_ADDR
75000: LD_VAR 0 10
75004: PUSH
75005: FOR_TO
75006: IFFALSE 75083
// begin if not ValidHex ( _x , _y ) then
75008: LD_VAR 0 5
75012: PPUSH
75013: LD_VAR 0 6
75017: PPUSH
75018: CALL_OW 488
75022: NOT
75023: IFFALSE 75027
// continue ;
75025: GO 75005
// if GetResourceTypeXY ( _x , _y ) then
75027: LD_VAR 0 5
75031: PPUSH
75032: LD_VAR 0 6
75036: PPUSH
75037: CALL_OW 283
75041: IFFALSE 75081
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75043: LD_ADDR_VAR 0 4
75047: PUSH
75048: LD_VAR 0 4
75052: PPUSH
75053: LD_VAR 0 4
75057: PUSH
75058: LD_INT 1
75060: PLUS
75061: PPUSH
75062: LD_VAR 0 5
75066: PUSH
75067: LD_VAR 0 6
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PPUSH
75076: CALL_OW 1
75080: ST_TO_ADDR
// end ;
75081: GO 75005
75083: POP
75084: POP
75085: GO 74985
75087: POP
75088: POP
// end ;
75089: LD_VAR 0 4
75093: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75094: LD_INT 0
75096: PPUSH
75097: PPUSH
75098: PPUSH
75099: PPUSH
75100: PPUSH
75101: PPUSH
75102: PPUSH
75103: PPUSH
// if not units then
75104: LD_VAR 0 1
75108: NOT
75109: IFFALSE 75113
// exit ;
75111: GO 75645
// result := UnitFilter ( units , [ f_ok ] ) ;
75113: LD_ADDR_VAR 0 3
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: LD_INT 50
75125: PUSH
75126: EMPTY
75127: LIST
75128: PPUSH
75129: CALL_OW 72
75133: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75134: LD_ADDR_VAR 0 8
75138: PUSH
75139: LD_VAR 0 1
75143: PUSH
75144: LD_INT 1
75146: ARRAY
75147: PPUSH
75148: CALL_OW 255
75152: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75153: LD_ADDR_VAR 0 10
75157: PUSH
75158: LD_INT 29
75160: PUSH
75161: LD_INT 91
75163: PUSH
75164: LD_INT 49
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: LIST
75171: ST_TO_ADDR
// if not result then
75172: LD_VAR 0 3
75176: NOT
75177: IFFALSE 75181
// exit ;
75179: GO 75645
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75181: LD_ADDR_VAR 0 5
75185: PUSH
75186: LD_INT 81
75188: PUSH
75189: LD_VAR 0 8
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PPUSH
75198: CALL_OW 69
75202: ST_TO_ADDR
// for i in result do
75203: LD_ADDR_VAR 0 4
75207: PUSH
75208: LD_VAR 0 3
75212: PUSH
75213: FOR_IN
75214: IFFALSE 75643
// begin tag := GetTag ( i ) + 1 ;
75216: LD_ADDR_VAR 0 9
75220: PUSH
75221: LD_VAR 0 4
75225: PPUSH
75226: CALL_OW 110
75230: PUSH
75231: LD_INT 1
75233: PLUS
75234: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
75235: LD_ADDR_VAR 0 7
75239: PUSH
75240: LD_VAR 0 4
75244: PPUSH
75245: CALL_OW 250
75249: PPUSH
75250: LD_VAR 0 4
75254: PPUSH
75255: CALL_OW 251
75259: PPUSH
75260: LD_INT 4
75262: PPUSH
75263: CALL 74836 0 3
75267: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
75268: LD_VAR 0 4
75272: PPUSH
75273: CALL_OW 247
75277: PUSH
75278: LD_INT 2
75280: EQUAL
75281: IFFALSE 75293
75283: PUSH
75284: LD_VAR 0 7
75288: PUSH
75289: LD_INT 2
75291: GREATER
75292: AND
75293: IFFALSE 75313
75295: PUSH
75296: LD_VAR 0 4
75300: PPUSH
75301: CALL_OW 264
75305: PUSH
75306: LD_VAR 0 10
75310: IN
75311: NOT
75312: AND
75313: IFFALSE 75352
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75315: LD_VAR 0 4
75319: PPUSH
75320: LD_VAR 0 7
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: PUSH
75329: LD_INT 1
75331: ARRAY
75332: PPUSH
75333: LD_VAR 0 7
75337: PUSH
75338: LD_INT 1
75340: ARRAY
75341: PUSH
75342: LD_INT 2
75344: ARRAY
75345: PPUSH
75346: CALL_OW 116
75350: GO 75641
// if path > tag then
75352: LD_VAR 0 2
75356: PUSH
75357: LD_VAR 0 9
75361: GREATER
75362: IFFALSE 75570
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75364: LD_ADDR_VAR 0 6
75368: PUSH
75369: LD_VAR 0 5
75373: PPUSH
75374: LD_INT 91
75376: PUSH
75377: LD_VAR 0 4
75381: PUSH
75382: LD_INT 8
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: LIST
75389: PPUSH
75390: CALL_OW 72
75394: ST_TO_ADDR
// if nearEnemy then
75395: LD_VAR 0 6
75399: IFFALSE 75468
// begin if GetWeapon ( i ) = ru_time_lapser then
75401: LD_VAR 0 4
75405: PPUSH
75406: CALL_OW 264
75410: PUSH
75411: LD_INT 49
75413: EQUAL
75414: IFFALSE 75442
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75416: LD_VAR 0 4
75420: PPUSH
75421: LD_VAR 0 6
75425: PPUSH
75426: LD_VAR 0 4
75430: PPUSH
75431: CALL_OW 74
75435: PPUSH
75436: CALL_OW 112
75440: GO 75466
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75442: LD_VAR 0 4
75446: PPUSH
75447: LD_VAR 0 6
75451: PPUSH
75452: LD_VAR 0 4
75456: PPUSH
75457: CALL_OW 74
75461: PPUSH
75462: CALL 76726 0 2
// end else
75466: GO 75568
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75468: LD_VAR 0 4
75472: PPUSH
75473: LD_VAR 0 2
75477: PUSH
75478: LD_VAR 0 9
75482: ARRAY
75483: PUSH
75484: LD_INT 1
75486: ARRAY
75487: PPUSH
75488: LD_VAR 0 2
75492: PUSH
75493: LD_VAR 0 9
75497: ARRAY
75498: PUSH
75499: LD_INT 2
75501: ARRAY
75502: PPUSH
75503: CALL_OW 297
75507: PUSH
75508: LD_INT 6
75510: GREATER
75511: IFFALSE 75554
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75513: LD_VAR 0 4
75517: PPUSH
75518: LD_VAR 0 2
75522: PUSH
75523: LD_VAR 0 9
75527: ARRAY
75528: PUSH
75529: LD_INT 1
75531: ARRAY
75532: PPUSH
75533: LD_VAR 0 2
75537: PUSH
75538: LD_VAR 0 9
75542: ARRAY
75543: PUSH
75544: LD_INT 2
75546: ARRAY
75547: PPUSH
75548: CALL_OW 114
75552: GO 75568
// SetTag ( i , tag ) ;
75554: LD_VAR 0 4
75558: PPUSH
75559: LD_VAR 0 9
75563: PPUSH
75564: CALL_OW 109
// end else
75568: GO 75641
// if enemy then
75570: LD_VAR 0 5
75574: IFFALSE 75641
// begin if GetWeapon ( i ) = ru_time_lapser then
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL_OW 264
75585: PUSH
75586: LD_INT 49
75588: EQUAL
75589: IFFALSE 75617
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75591: LD_VAR 0 4
75595: PPUSH
75596: LD_VAR 0 5
75600: PPUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: CALL_OW 74
75610: PPUSH
75611: CALL_OW 112
75615: GO 75641
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75617: LD_VAR 0 4
75621: PPUSH
75622: LD_VAR 0 5
75626: PPUSH
75627: LD_VAR 0 4
75631: PPUSH
75632: CALL_OW 74
75636: PPUSH
75637: CALL 76726 0 2
// end ; end ;
75641: GO 75213
75643: POP
75644: POP
// end ;
75645: LD_VAR 0 3
75649: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75650: LD_INT 0
75652: PPUSH
75653: PPUSH
75654: PPUSH
// if not unit or IsInUnit ( unit ) then
75655: LD_VAR 0 1
75659: NOT
75660: IFTRUE 75673
75662: PUSH
75663: LD_VAR 0 1
75667: PPUSH
75668: CALL_OW 310
75672: OR
75673: IFFALSE 75677
// exit ;
75675: GO 75768
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75677: LD_ADDR_VAR 0 4
75681: PUSH
75682: LD_VAR 0 1
75686: PPUSH
75687: CALL_OW 250
75691: PPUSH
75692: LD_VAR 0 2
75696: PPUSH
75697: LD_INT 1
75699: PPUSH
75700: CALL_OW 272
75704: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75705: LD_ADDR_VAR 0 5
75709: PUSH
75710: LD_VAR 0 1
75714: PPUSH
75715: CALL_OW 251
75719: PPUSH
75720: LD_VAR 0 2
75724: PPUSH
75725: LD_INT 1
75727: PPUSH
75728: CALL_OW 273
75732: ST_TO_ADDR
// if ValidHex ( x , y ) then
75733: LD_VAR 0 4
75737: PPUSH
75738: LD_VAR 0 5
75742: PPUSH
75743: CALL_OW 488
75747: IFFALSE 75768
// ComTurnXY ( unit , x , y ) ;
75749: LD_VAR 0 1
75753: PPUSH
75754: LD_VAR 0 4
75758: PPUSH
75759: LD_VAR 0 5
75763: PPUSH
75764: CALL_OW 118
// end ;
75768: LD_VAR 0 3
75772: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75773: LD_INT 0
75775: PPUSH
75776: PPUSH
// result := false ;
75777: LD_ADDR_VAR 0 3
75781: PUSH
75782: LD_INT 0
75784: ST_TO_ADDR
// if not units then
75785: LD_VAR 0 2
75789: NOT
75790: IFFALSE 75794
// exit ;
75792: GO 75839
// for i in units do
75794: LD_ADDR_VAR 0 4
75798: PUSH
75799: LD_VAR 0 2
75803: PUSH
75804: FOR_IN
75805: IFFALSE 75837
// if See ( side , i ) then
75807: LD_VAR 0 1
75811: PPUSH
75812: LD_VAR 0 4
75816: PPUSH
75817: CALL_OW 292
75821: IFFALSE 75835
// begin result := true ;
75823: LD_ADDR_VAR 0 3
75827: PUSH
75828: LD_INT 1
75830: ST_TO_ADDR
// exit ;
75831: POP
75832: POP
75833: GO 75839
// end ;
75835: GO 75804
75837: POP
75838: POP
// end ;
75839: LD_VAR 0 3
75843: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75844: LD_INT 0
75846: PPUSH
75847: PPUSH
75848: PPUSH
75849: PPUSH
// if not unit or not points then
75850: LD_VAR 0 1
75854: NOT
75855: IFTRUE 75864
75857: PUSH
75858: LD_VAR 0 2
75862: NOT
75863: OR
75864: IFFALSE 75868
// exit ;
75866: GO 75958
// dist := 99999 ;
75868: LD_ADDR_VAR 0 5
75872: PUSH
75873: LD_INT 99999
75875: ST_TO_ADDR
// for i in points do
75876: LD_ADDR_VAR 0 4
75880: PUSH
75881: LD_VAR 0 2
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75956
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75889: LD_ADDR_VAR 0 6
75893: PUSH
75894: LD_VAR 0 1
75898: PPUSH
75899: LD_VAR 0 4
75903: PUSH
75904: LD_INT 1
75906: ARRAY
75907: PPUSH
75908: LD_VAR 0 4
75912: PUSH
75913: LD_INT 2
75915: ARRAY
75916: PPUSH
75917: CALL_OW 297
75921: ST_TO_ADDR
// if tmpDist < dist then
75922: LD_VAR 0 6
75926: PUSH
75927: LD_VAR 0 5
75931: LESS
75932: IFFALSE 75954
// begin result := i ;
75934: LD_ADDR_VAR 0 3
75938: PUSH
75939: LD_VAR 0 4
75943: ST_TO_ADDR
// dist := tmpDist ;
75944: LD_ADDR_VAR 0 5
75948: PUSH
75949: LD_VAR 0 6
75953: ST_TO_ADDR
// end ; end ;
75954: GO 75886
75956: POP
75957: POP
// end ;
75958: LD_VAR 0 3
75962: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75963: LD_INT 0
75965: PPUSH
// uc_side := side ;
75966: LD_ADDR_OWVAR 20
75970: PUSH
75971: LD_VAR 0 1
75975: ST_TO_ADDR
// uc_nation := 3 ;
75976: LD_ADDR_OWVAR 21
75980: PUSH
75981: LD_INT 3
75983: ST_TO_ADDR
// vc_chassis := 25 ;
75984: LD_ADDR_OWVAR 37
75988: PUSH
75989: LD_INT 25
75991: ST_TO_ADDR
// vc_engine := engine_siberite ;
75992: LD_ADDR_OWVAR 39
75996: PUSH
75997: LD_INT 3
75999: ST_TO_ADDR
// vc_control := control_computer ;
76000: LD_ADDR_OWVAR 38
76004: PUSH
76005: LD_INT 3
76007: ST_TO_ADDR
// vc_weapon := 59 ;
76008: LD_ADDR_OWVAR 40
76012: PUSH
76013: LD_INT 59
76015: ST_TO_ADDR
// result := CreateVehicle ;
76016: LD_ADDR_VAR 0 5
76020: PUSH
76021: CALL_OW 45
76025: ST_TO_ADDR
// SetDir ( result , d ) ;
76026: LD_VAR 0 5
76030: PPUSH
76031: LD_VAR 0 4
76035: PPUSH
76036: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76040: LD_VAR 0 5
76044: PPUSH
76045: LD_VAR 0 2
76049: PPUSH
76050: LD_VAR 0 3
76054: PPUSH
76055: LD_INT 0
76057: PPUSH
76058: CALL_OW 48
// end ;
76062: LD_VAR 0 5
76066: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76067: LD_INT 0
76069: PPUSH
76070: PPUSH
76071: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76072: LD_ADDR_VAR 0 2
76076: PUSH
76077: LD_INT 0
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76095: LD_VAR 0 1
76099: NOT
76100: IFTRUE 76133
76102: PUSH
76103: LD_VAR 0 1
76107: PPUSH
76108: CALL_OW 264
76112: PUSH
76113: LD_INT 12
76115: PUSH
76116: LD_INT 51
76118: PUSH
76119: LD_INT 32
76121: PUSH
76122: LD_INT 89
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: IN
76131: NOT
76132: OR
76133: IFFALSE 76137
// exit ;
76135: GO 76235
// for i := 1 to 3 do
76137: LD_ADDR_VAR 0 3
76141: PUSH
76142: DOUBLE
76143: LD_INT 1
76145: DEC
76146: ST_TO_ADDR
76147: LD_INT 3
76149: PUSH
76150: FOR_TO
76151: IFFALSE 76233
// begin tmp := GetCargo ( cargo , i ) ;
76153: LD_ADDR_VAR 0 4
76157: PUSH
76158: LD_VAR 0 1
76162: PPUSH
76163: LD_VAR 0 3
76167: PPUSH
76168: CALL_OW 289
76172: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76173: LD_ADDR_VAR 0 2
76177: PUSH
76178: LD_VAR 0 2
76182: PPUSH
76183: LD_VAR 0 3
76187: PPUSH
76188: LD_VAR 0 4
76192: PPUSH
76193: CALL_OW 1
76197: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76198: LD_ADDR_VAR 0 2
76202: PUSH
76203: LD_VAR 0 2
76207: PPUSH
76208: LD_INT 4
76210: PPUSH
76211: LD_VAR 0 2
76215: PUSH
76216: LD_INT 4
76218: ARRAY
76219: PUSH
76220: LD_VAR 0 4
76224: PLUS
76225: PPUSH
76226: CALL_OW 1
76230: ST_TO_ADDR
// end ;
76231: GO 76150
76233: POP
76234: POP
// end ;
76235: LD_VAR 0 2
76239: RET
// export function Length ( array ) ; begin
76240: LD_INT 0
76242: PPUSH
// result := array + 0 ;
76243: LD_ADDR_VAR 0 2
76247: PUSH
76248: LD_VAR 0 1
76252: PUSH
76253: LD_INT 0
76255: PLUS
76256: ST_TO_ADDR
// end ;
76257: LD_VAR 0 2
76261: RET
// export function PrepareArray ( array ) ; begin
76262: LD_INT 0
76264: PPUSH
// result := array diff 0 ;
76265: LD_ADDR_VAR 0 2
76269: PUSH
76270: LD_VAR 0 1
76274: PUSH
76275: LD_INT 0
76277: DIFF
76278: ST_TO_ADDR
// if not result [ 1 ] then
76279: LD_VAR 0 2
76283: PUSH
76284: LD_INT 1
76286: ARRAY
76287: NOT
76288: IFFALSE 76308
// result := Delete ( result , 1 ) ;
76290: LD_ADDR_VAR 0 2
76294: PUSH
76295: LD_VAR 0 2
76299: PPUSH
76300: LD_INT 1
76302: PPUSH
76303: CALL_OW 3
76307: ST_TO_ADDR
// end ;
76308: LD_VAR 0 2
76312: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76313: LD_INT 0
76315: PPUSH
76316: PPUSH
76317: PPUSH
76318: PPUSH
// sibRocketRange := 25 ;
76319: LD_ADDR_VAR 0 6
76323: PUSH
76324: LD_INT 25
76326: ST_TO_ADDR
// result := false ;
76327: LD_ADDR_VAR 0 4
76331: PUSH
76332: LD_INT 0
76334: ST_TO_ADDR
// for i := 0 to 5 do
76335: LD_ADDR_VAR 0 5
76339: PUSH
76340: DOUBLE
76341: LD_INT 0
76343: DEC
76344: ST_TO_ADDR
76345: LD_INT 5
76347: PUSH
76348: FOR_TO
76349: IFFALSE 76416
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76351: LD_VAR 0 1
76355: PPUSH
76356: LD_VAR 0 5
76360: PPUSH
76361: LD_VAR 0 6
76365: PPUSH
76366: CALL_OW 272
76370: PPUSH
76371: LD_VAR 0 2
76375: PPUSH
76376: LD_VAR 0 5
76380: PPUSH
76381: LD_VAR 0 6
76385: PPUSH
76386: CALL_OW 273
76390: PPUSH
76391: LD_VAR 0 3
76395: PPUSH
76396: CALL_OW 309
76400: IFFALSE 76414
// begin result := true ;
76402: LD_ADDR_VAR 0 4
76406: PUSH
76407: LD_INT 1
76409: ST_TO_ADDR
// exit ;
76410: POP
76411: POP
76412: GO 76418
// end ;
76414: GO 76348
76416: POP
76417: POP
// end ;
76418: LD_VAR 0 4
76422: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76423: LD_INT 0
76425: PPUSH
76426: PPUSH
76427: PPUSH
// if btype = b_depot then
76428: LD_VAR 0 2
76432: PUSH
76433: LD_INT 0
76435: EQUAL
76436: IFFALSE 76448
// begin result := true ;
76438: LD_ADDR_VAR 0 3
76442: PUSH
76443: LD_INT 1
76445: ST_TO_ADDR
// exit ;
76446: GO 76568
// end ; pom := GetBase ( depot ) ;
76448: LD_ADDR_VAR 0 4
76452: PUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: CALL_OW 274
76462: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76463: LD_ADDR_VAR 0 5
76467: PUSH
76468: LD_VAR 0 2
76472: PPUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: CALL_OW 248
76482: PPUSH
76483: CALL_OW 450
76487: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76488: LD_ADDR_VAR 0 3
76492: PUSH
76493: LD_VAR 0 4
76497: PPUSH
76498: LD_INT 1
76500: PPUSH
76501: CALL_OW 275
76505: PUSH
76506: LD_VAR 0 5
76510: PUSH
76511: LD_INT 1
76513: ARRAY
76514: GREATEREQUAL
76515: IFFALSE 76541
76517: PUSH
76518: LD_VAR 0 4
76522: PPUSH
76523: LD_INT 2
76525: PPUSH
76526: CALL_OW 275
76530: PUSH
76531: LD_VAR 0 5
76535: PUSH
76536: LD_INT 2
76538: ARRAY
76539: GREATEREQUAL
76540: AND
76541: IFFALSE 76567
76543: PUSH
76544: LD_VAR 0 4
76548: PPUSH
76549: LD_INT 3
76551: PPUSH
76552: CALL_OW 275
76556: PUSH
76557: LD_VAR 0 5
76561: PUSH
76562: LD_INT 3
76564: ARRAY
76565: GREATEREQUAL
76566: AND
76567: ST_TO_ADDR
// end ;
76568: LD_VAR 0 3
76572: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76573: LD_INT 0
76575: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76576: LD_VAR 0 1
76580: PPUSH
76581: LD_VAR 0 2
76585: PPUSH
76586: LD_INT 0
76588: PPUSH
76589: LD_INT 0
76591: PPUSH
76592: LD_INT 1
76594: PPUSH
76595: LD_INT 0
76597: PPUSH
76598: CALL_OW 587
// end ;
76602: LD_VAR 0 3
76606: RET
// export function CenterOnNow ( unit ) ; begin
76607: LD_INT 0
76609: PPUSH
// result := IsInUnit ( unit ) ;
76610: LD_ADDR_VAR 0 2
76614: PUSH
76615: LD_VAR 0 1
76619: PPUSH
76620: CALL_OW 310
76624: ST_TO_ADDR
// if not result then
76625: LD_VAR 0 2
76629: NOT
76630: IFFALSE 76642
// result := unit ;
76632: LD_ADDR_VAR 0 2
76636: PUSH
76637: LD_VAR 0 1
76641: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76642: LD_VAR 0 1
76646: PPUSH
76647: CALL_OW 87
// end ;
76651: LD_VAR 0 2
76655: RET
// export function ComMoveHex ( unit , hex ) ; begin
76656: LD_INT 0
76658: PPUSH
// if not hex then
76659: LD_VAR 0 2
76663: NOT
76664: IFFALSE 76668
// exit ;
76666: GO 76721
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76668: LD_VAR 0 2
76672: PUSH
76673: LD_INT 1
76675: ARRAY
76676: PPUSH
76677: LD_VAR 0 2
76681: PUSH
76682: LD_INT 2
76684: ARRAY
76685: PPUSH
76686: CALL_OW 428
76690: IFFALSE 76694
// exit ;
76692: GO 76721
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76694: LD_VAR 0 1
76698: PPUSH
76699: LD_VAR 0 2
76703: PUSH
76704: LD_INT 1
76706: ARRAY
76707: PPUSH
76708: LD_VAR 0 2
76712: PUSH
76713: LD_INT 2
76715: ARRAY
76716: PPUSH
76717: CALL_OW 111
// end ;
76721: LD_VAR 0 3
76725: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76726: LD_INT 0
76728: PPUSH
76729: PPUSH
76730: PPUSH
// if not unit or not enemy then
76731: LD_VAR 0 1
76735: NOT
76736: IFTRUE 76745
76738: PUSH
76739: LD_VAR 0 2
76743: NOT
76744: OR
76745: IFFALSE 76749
// exit ;
76747: GO 76875
// x := GetX ( enemy ) ;
76749: LD_ADDR_VAR 0 4
76753: PUSH
76754: LD_VAR 0 2
76758: PPUSH
76759: CALL_OW 250
76763: ST_TO_ADDR
// y := GetY ( enemy ) ;
76764: LD_ADDR_VAR 0 5
76768: PUSH
76769: LD_VAR 0 2
76773: PPUSH
76774: CALL_OW 251
76778: ST_TO_ADDR
// if ValidHex ( x , y ) then
76779: LD_VAR 0 4
76783: PPUSH
76784: LD_VAR 0 5
76788: PPUSH
76789: CALL_OW 488
76793: IFFALSE 76875
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76795: LD_VAR 0 2
76799: PPUSH
76800: CALL_OW 247
76804: PUSH
76805: LD_INT 3
76807: PUSH
76808: LD_INT 2
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: IN
76815: IFTRUE 76838
76817: PUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: CALL_OW 255
76827: PPUSH
76828: LD_VAR 0 2
76832: PPUSH
76833: CALL_OW 292
76837: OR
76838: IFFALSE 76856
// ComAttackUnit ( unit , enemy ) else
76840: LD_VAR 0 1
76844: PPUSH
76845: LD_VAR 0 2
76849: PPUSH
76850: CALL_OW 115
76854: GO 76875
// ComAgressiveMove ( unit , x , y ) ;
76856: LD_VAR 0 1
76860: PPUSH
76861: LD_VAR 0 4
76865: PPUSH
76866: LD_VAR 0 5
76870: PPUSH
76871: CALL_OW 114
// end ;
76875: LD_VAR 0 3
76879: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76880: LD_INT 0
76882: PPUSH
76883: PPUSH
76884: PPUSH
// list := AreaToList ( area , 0 ) ;
76885: LD_ADDR_VAR 0 5
76889: PUSH
76890: LD_VAR 0 1
76894: PPUSH
76895: LD_INT 0
76897: PPUSH
76898: CALL_OW 517
76902: ST_TO_ADDR
// if not list then
76903: LD_VAR 0 5
76907: NOT
76908: IFFALSE 76912
// exit ;
76910: GO 77042
// if all then
76912: LD_VAR 0 2
76916: IFFALSE 77004
// begin for i := 1 to list [ 1 ] do
76918: LD_ADDR_VAR 0 4
76922: PUSH
76923: DOUBLE
76924: LD_INT 1
76926: DEC
76927: ST_TO_ADDR
76928: LD_VAR 0 5
76932: PUSH
76933: LD_INT 1
76935: ARRAY
76936: PUSH
76937: FOR_TO
76938: IFFALSE 77000
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76940: LD_ADDR_VAR 0 3
76944: PUSH
76945: LD_VAR 0 3
76949: PPUSH
76950: LD_VAR 0 3
76954: PUSH
76955: LD_INT 1
76957: PLUS
76958: PPUSH
76959: LD_VAR 0 5
76963: PUSH
76964: LD_INT 1
76966: ARRAY
76967: PUSH
76968: LD_VAR 0 4
76972: ARRAY
76973: PUSH
76974: LD_VAR 0 5
76978: PUSH
76979: LD_INT 2
76981: ARRAY
76982: PUSH
76983: LD_VAR 0 4
76987: ARRAY
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PPUSH
76993: CALL_OW 1
76997: ST_TO_ADDR
76998: GO 76937
77000: POP
77001: POP
// exit ;
77002: GO 77042
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77004: LD_ADDR_VAR 0 3
77008: PUSH
77009: LD_VAR 0 5
77013: PUSH
77014: LD_INT 1
77016: ARRAY
77017: PUSH
77018: LD_INT 1
77020: ARRAY
77021: PUSH
77022: LD_VAR 0 5
77026: PUSH
77027: LD_INT 2
77029: ARRAY
77030: PUSH
77031: LD_INT 1
77033: ARRAY
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: EMPTY
77040: LIST
77041: ST_TO_ADDR
// end ;
77042: LD_VAR 0 3
77046: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77047: LD_INT 0
77049: PPUSH
77050: PPUSH
// list := AreaToList ( area , 0 ) ;
77051: LD_ADDR_VAR 0 4
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: LD_INT 0
77063: PPUSH
77064: CALL_OW 517
77068: ST_TO_ADDR
// if not list then
77069: LD_VAR 0 4
77073: NOT
77074: IFFALSE 77078
// exit ;
77076: GO 77119
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77078: LD_ADDR_VAR 0 3
77082: PUSH
77083: LD_VAR 0 4
77087: PUSH
77088: LD_INT 1
77090: ARRAY
77091: PUSH
77092: LD_INT 1
77094: ARRAY
77095: PUSH
77096: LD_VAR 0 4
77100: PUSH
77101: LD_INT 2
77103: ARRAY
77104: PUSH
77105: LD_INT 1
77107: ARRAY
77108: PUSH
77109: LD_VAR 0 2
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: LIST
77118: ST_TO_ADDR
// end ;
77119: LD_VAR 0 3
77123: RET
// export function First ( array ) ; begin
77124: LD_INT 0
77126: PPUSH
// if not array then
77127: LD_VAR 0 1
77131: NOT
77132: IFFALSE 77136
// exit ;
77134: GO 77150
// result := array [ 1 ] ;
77136: LD_ADDR_VAR 0 2
77140: PUSH
77141: LD_VAR 0 1
77145: PUSH
77146: LD_INT 1
77148: ARRAY
77149: ST_TO_ADDR
// end ;
77150: LD_VAR 0 2
77154: RET
// export function Last ( array ) ; begin
77155: LD_INT 0
77157: PPUSH
// if not array then
77158: LD_VAR 0 1
77162: NOT
77163: IFFALSE 77167
// exit ;
77165: GO 77183
// result := array [ array ] ;
77167: LD_ADDR_VAR 0 2
77171: PUSH
77172: LD_VAR 0 1
77176: PUSH
77177: LD_VAR 0 1
77181: ARRAY
77182: ST_TO_ADDR
// end ;
77183: LD_VAR 0 2
77187: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
77188: LD_INT 0
77190: PPUSH
77191: PPUSH
// result := [ ] ;
77192: LD_ADDR_VAR 0 5
77196: PUSH
77197: EMPTY
77198: ST_TO_ADDR
// if not array then
77199: LD_VAR 0 1
77203: NOT
77204: IFFALSE 77208
// exit ;
77206: GO 77320
// for i := 1 to array do
77208: LD_ADDR_VAR 0 6
77212: PUSH
77213: DOUBLE
77214: LD_INT 1
77216: DEC
77217: ST_TO_ADDR
77218: LD_VAR 0 1
77222: PUSH
77223: FOR_TO
77224: IFFALSE 77318
// if array [ i ] [ index ] = value then
77226: LD_VAR 0 1
77230: PUSH
77231: LD_VAR 0 6
77235: ARRAY
77236: PUSH
77237: LD_VAR 0 2
77241: ARRAY
77242: PUSH
77243: LD_VAR 0 3
77247: EQUAL
77248: IFFALSE 77316
// begin if indexColumn then
77250: LD_VAR 0 4
77254: IFFALSE 77290
// result := Join ( result , array [ i ] [ indexColumn ] ) else
77256: LD_ADDR_VAR 0 5
77260: PUSH
77261: LD_VAR 0 5
77265: PPUSH
77266: LD_VAR 0 1
77270: PUSH
77271: LD_VAR 0 6
77275: ARRAY
77276: PUSH
77277: LD_VAR 0 4
77281: ARRAY
77282: PPUSH
77283: CALL 72328 0 2
77287: ST_TO_ADDR
77288: GO 77316
// result := Join ( result , array [ i ] ) ;
77290: LD_ADDR_VAR 0 5
77294: PUSH
77295: LD_VAR 0 5
77299: PPUSH
77300: LD_VAR 0 1
77304: PUSH
77305: LD_VAR 0 6
77309: ARRAY
77310: PPUSH
77311: CALL 72328 0 2
77315: ST_TO_ADDR
// end ;
77316: GO 77223
77318: POP
77319: POP
// end ;
77320: LD_VAR 0 5
77324: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77325: LD_INT 0
77327: PPUSH
// if not vehicles or not parkingPoint then
77328: LD_VAR 0 1
77332: NOT
77333: IFTRUE 77342
77335: PUSH
77336: LD_VAR 0 2
77340: NOT
77341: OR
77342: IFFALSE 77346
// exit ;
77344: GO 77444
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77346: LD_ADDR_VAR 0 1
77350: PUSH
77351: LD_VAR 0 1
77355: PPUSH
77356: LD_INT 50
77358: PUSH
77359: EMPTY
77360: LIST
77361: PUSH
77362: LD_INT 3
77364: PUSH
77365: LD_INT 92
77367: PUSH
77368: LD_VAR 0 2
77372: PUSH
77373: LD_INT 1
77375: ARRAY
77376: PUSH
77377: LD_VAR 0 2
77381: PUSH
77382: LD_INT 2
77384: ARRAY
77385: PUSH
77386: LD_INT 8
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: PPUSH
77403: CALL_OW 72
77407: ST_TO_ADDR
// if not vehicles then
77408: LD_VAR 0 1
77412: NOT
77413: IFFALSE 77417
// exit ;
77415: GO 77444
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77417: LD_VAR 0 1
77421: PPUSH
77422: LD_VAR 0 2
77426: PUSH
77427: LD_INT 1
77429: ARRAY
77430: PPUSH
77431: LD_VAR 0 2
77435: PUSH
77436: LD_INT 2
77438: ARRAY
77439: PPUSH
77440: CALL_OW 111
// end ;
77444: LD_VAR 0 3
77448: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77449: LD_INT 0
77451: PPUSH
77452: PPUSH
77453: PPUSH
// if not side or not area then
77454: LD_VAR 0 1
77458: NOT
77459: IFTRUE 77468
77461: PUSH
77462: LD_VAR 0 2
77466: NOT
77467: OR
77468: IFFALSE 77472
// exit ;
77470: GO 77591
// tmp := AreaToList ( area , 0 ) ;
77472: LD_ADDR_VAR 0 5
77476: PUSH
77477: LD_VAR 0 2
77481: PPUSH
77482: LD_INT 0
77484: PPUSH
77485: CALL_OW 517
77489: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
77490: LD_ADDR_VAR 0 4
77494: PUSH
77495: DOUBLE
77496: LD_INT 1
77498: DEC
77499: ST_TO_ADDR
77500: LD_VAR 0 5
77504: PUSH
77505: LD_INT 1
77507: ARRAY
77508: PUSH
77509: FOR_TO
77510: IFFALSE 77589
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
77512: LD_VAR 0 5
77516: PUSH
77517: LD_INT 1
77519: ARRAY
77520: PUSH
77521: LD_VAR 0 4
77525: ARRAY
77526: PPUSH
77527: LD_VAR 0 5
77531: PUSH
77532: LD_INT 2
77534: ARRAY
77535: PUSH
77536: LD_VAR 0 4
77540: ARRAY
77541: PPUSH
77542: CALL_OW 351
77546: IFFALSE 77587
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77548: LD_VAR 0 5
77552: PUSH
77553: LD_INT 1
77555: ARRAY
77556: PUSH
77557: LD_VAR 0 4
77561: ARRAY
77562: PPUSH
77563: LD_VAR 0 5
77567: PUSH
77568: LD_INT 2
77570: ARRAY
77571: PUSH
77572: LD_VAR 0 4
77576: ARRAY
77577: PPUSH
77578: LD_VAR 0 1
77582: PPUSH
77583: CALL_OW 244
// end ;
77587: GO 77509
77589: POP
77590: POP
// end ;
77591: LD_VAR 0 3
77595: RET
// export function UniqueArray ( array ) ; var i ; begin
77596: LD_INT 0
77598: PPUSH
77599: PPUSH
// result := [ ] ;
77600: LD_ADDR_VAR 0 2
77604: PUSH
77605: EMPTY
77606: ST_TO_ADDR
// if not array then
77607: LD_VAR 0 1
77611: NOT
77612: IFFALSE 77616
// exit ;
77614: GO 77677
// for i := 1 to array do
77616: LD_ADDR_VAR 0 3
77620: PUSH
77621: DOUBLE
77622: LD_INT 1
77624: DEC
77625: ST_TO_ADDR
77626: LD_VAR 0 1
77630: PUSH
77631: FOR_TO
77632: IFFALSE 77675
// if not array [ i ] in result then
77634: LD_VAR 0 1
77638: PUSH
77639: LD_VAR 0 3
77643: ARRAY
77644: PUSH
77645: LD_VAR 0 2
77649: IN
77650: NOT
77651: IFFALSE 77673
// result := Join ( result , i ) ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: LD_VAR 0 2
77662: PPUSH
77663: LD_VAR 0 3
77667: PPUSH
77668: CALL 72328 0 2
77672: ST_TO_ADDR
77673: GO 77631
77675: POP
77676: POP
// end ; end_of_file
77677: LD_VAR 0 2
77681: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77682: LD_VAR 0 1
77686: PUSH
77687: LD_INT 200
77689: DOUBLE
77690: GREATEREQUAL
77691: IFFALSE 77699
77693: LD_INT 299
77695: DOUBLE
77696: LESSEQUAL
77697: IFTRUE 77701
77699: GO 77733
77701: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77702: LD_VAR 0 1
77706: PPUSH
77707: LD_VAR 0 2
77711: PPUSH
77712: LD_VAR 0 3
77716: PPUSH
77717: LD_VAR 0 4
77721: PPUSH
77722: LD_VAR 0 5
77726: PPUSH
77727: CALL 28404 0 5
77731: GO 77810
77733: LD_INT 300
77735: DOUBLE
77736: GREATEREQUAL
77737: IFFALSE 77745
77739: LD_INT 399
77741: DOUBLE
77742: LESSEQUAL
77743: IFTRUE 77747
77745: GO 77809
77747: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77748: LD_VAR 0 1
77752: PPUSH
77753: LD_VAR 0 2
77757: PPUSH
77758: LD_VAR 0 3
77762: PPUSH
77763: LD_VAR 0 4
77767: PPUSH
77768: LD_VAR 0 5
77772: PPUSH
77773: LD_VAR 0 6
77777: PPUSH
77778: LD_VAR 0 7
77782: PPUSH
77783: LD_VAR 0 8
77787: PPUSH
77788: LD_VAR 0 9
77792: PPUSH
77793: LD_VAR 0 10
77797: PPUSH
77798: LD_VAR 0 11
77802: PPUSH
77803: CALL 24207 0 11
77807: GO 77810
77809: POP
// end ;
77810: PPOPN 11
77812: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77813: LD_VAR 0 1
77817: PPUSH
77818: LD_VAR 0 2
77822: PPUSH
77823: LD_VAR 0 3
77827: PPUSH
77828: LD_VAR 0 4
77832: PPUSH
77833: LD_VAR 0 5
77837: PPUSH
77838: CALL 27704 0 5
// end ; end_of_file
77842: PPOPN 5
77844: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77845: LD_VAR 0 1
77849: PPUSH
77850: LD_VAR 0 2
77854: PPUSH
77855: LD_VAR 0 3
77859: PPUSH
77860: LD_VAR 0 4
77864: PPUSH
77865: LD_VAR 0 5
77869: PPUSH
77870: LD_VAR 0 6
77874: PPUSH
77875: CALL 11747 0 6
// end ;
77879: PPOPN 6
77881: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77882: LD_INT 0
77884: PPUSH
// begin if not units then
77885: LD_VAR 0 1
77889: NOT
77890: IFFALSE 77894
// exit ;
77892: GO 77928
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77894: LD_VAR 0 1
77898: PPUSH
77899: LD_VAR 0 2
77903: PPUSH
77904: LD_VAR 0 3
77908: PPUSH
77909: LD_VAR 0 4
77913: PPUSH
77914: LD_VAR 0 5
77918: PPUSH
77919: LD_VAR 0 6
77923: PPUSH
77924: CALL 34101 0 6
// end ;
77928: PPOPN 7
77930: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77931: CALL 11627 0 0
// end ;
77935: PPOPN 1
77937: END
