// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1365 0 0
// PrepareDifficulty ;
 115: CALL 1661 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 27744 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 27744 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 27744 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 27744 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side = 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation = 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 27744 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1128: LD_INT 0
1130: PPUSH
// uc_nation := 3 ;
1131: LD_ADDR_OWVAR 21
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_side := 3 ;
1139: LD_ADDR_OWVAR 20
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// if Difficulty > 1 then
1147: LD_OWVAR 67
1151: PUSH
1152: LD_INT 1
1154: GREATER
1155: IFFALSE 1215
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 8
1168: PUSH
1169: LD_INT 9
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_OWVAR 67
1181: ARRAY
1182: PPUSH
1183: CALL_OW 380
// baseGuard := CreateHuman ;
1187: LD_ADDR_EXP 18
1191: PUSH
1192: CALL_OW 44
1196: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1197: LD_EXP 18
1201: PPUSH
1202: LD_INT 39
1204: PPUSH
1205: LD_INT 67
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1215: LD_INT 116
1217: PPUSH
1218: LD_INT 50
1220: PPUSH
1221: LD_INT 74
1223: PPUSH
1224: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1228: LD_INT 3
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 45
1236: PPUSH
1237: LD_INT 10
1239: PPUSH
1240: LD_INT 9
1242: PPUSH
1243: LD_INT 2
1245: PPUSH
1246: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1250: LD_INT 3
1252: PPUSH
1253: LD_INT 3
1255: PPUSH
1256: LD_INT 22
1258: PPUSH
1259: LD_INT 10
1261: PPUSH
1262: LD_INT 2
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1272: LD_INT 3
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 10
1283: PPUSH
1284: LD_INT 3
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 3
1299: PPUSH
1300: LD_INT 40
1302: PPUSH
1303: LD_INT 10
1305: PPUSH
1306: LD_INT 3
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1316: LD_INT 3
1318: PPUSH
1319: LD_INT 3
1321: PPUSH
1322: LD_INT 14
1324: PPUSH
1325: LD_INT 10
1327: PPUSH
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 1551 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: LD_INT 15
1346: PPUSH
1347: LD_INT 10
1349: PPUSH
1350: LD_INT 4
1352: PPUSH
1353: LD_INT 2
1355: PPUSH
1356: CALL 1551 0 6
// end ; end_of_file
1360: LD_VAR 0 1
1364: RET
// export function CreateNature ; var i ; begin
1365: LD_INT 0
1367: PPUSH
1368: PPUSH
// uc_side := 0 ;
1369: LD_ADDR_OWVAR 20
1373: PUSH
1374: LD_INT 0
1376: ST_TO_ADDR
// uc_nation := 0 ;
1377: LD_ADDR_OWVAR 21
1381: PUSH
1382: LD_INT 0
1384: ST_TO_ADDR
// hc_class := class_apeman ;
1385: LD_ADDR_OWVAR 28
1389: PUSH
1390: LD_INT 12
1392: ST_TO_ADDR
// hc_gallery :=  ;
1393: LD_ADDR_OWVAR 33
1397: PUSH
1398: LD_STRING 
1400: ST_TO_ADDR
// hc_name :=  ;
1401: LD_ADDR_OWVAR 26
1405: PUSH
1406: LD_STRING 
1408: ST_TO_ADDR
// for i = 1 to 7 do
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_INT 7
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1504
// begin hc_class := class_apeman ;
1425: LD_ADDR_OWVAR 28
1429: PUSH
1430: LD_INT 12
1432: ST_TO_ADDR
// hc_gallery :=  ;
1433: LD_ADDR_OWVAR 33
1437: PUSH
1438: LD_STRING 
1440: ST_TO_ADDR
// hc_name :=  ;
1441: LD_ADDR_OWVAR 26
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: LD_INT 0
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1472: LD_ADDR_OWVAR 29
1476: PUSH
1477: LD_INT 11
1479: PUSH
1480: LD_INT 10
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1487: CALL_OW 44
1491: PPUSH
1492: LD_INT 16
1494: PPUSH
1495: LD_INT 0
1497: PPUSH
1498: CALL_OW 49
// end ;
1502: GO 1422
1504: POP
1505: POP
// end ;
1506: LD_VAR 0 1
1510: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
// for i in charactersList do
1515: LD_ADDR_VAR 0 4
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1544
// SaveCharacters ( i , ident ) ;
1528: LD_VAR 0 4
1532: PPUSH
1533: LD_VAR 0 2
1537: PPUSH
1538: CALL_OW 38
1542: GO 1525
1544: POP
1545: POP
// end ;
1546: LD_VAR 0 3
1550: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1551: LD_INT 0
1553: PPUSH
1554: PPUSH
1555: PPUSH
1556: PPUSH
// for i = 1 to count do
1557: LD_ADDR_VAR 0 8
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_VAR 0 6
1571: PUSH
1572: FOR_TO
1573: IFFALSE 1654
// begin uc_side = side ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_VAR 0 1
1584: ST_TO_ADDR
// uc_nation = nation ;
1585: LD_ADDR_OWVAR 21
1589: PUSH
1590: LD_VAR 0 2
1594: ST_TO_ADDR
// hc_gallery =  ;
1595: LD_ADDR_OWVAR 33
1599: PUSH
1600: LD_STRING 
1602: ST_TO_ADDR
// hc_name =  ;
1603: LD_ADDR_OWVAR 26
1607: PUSH
1608: LD_STRING 
1610: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1611: LD_INT 0
1613: PPUSH
1614: LD_VAR 0 5
1618: PPUSH
1619: LD_VAR 0 4
1623: PPUSH
1624: CALL_OW 380
// un = CreateHuman ;
1628: LD_ADDR_VAR 0 10
1632: PUSH
1633: CALL_OW 44
1637: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1638: LD_VAR 0 10
1642: PPUSH
1643: LD_VAR 0 3
1647: PPUSH
1648: CALL_OW 52
// end ;
1652: GO 1572
1654: POP
1655: POP
// end ;
1656: LD_VAR 0 7
1660: RET
// export function PrepareDifficulty ; begin
1661: LD_INT 0
1663: PPUSH
// if difficulty = 1 then
1664: LD_OWVAR 67
1668: PUSH
1669: LD_INT 1
1671: EQUAL
1672: IFFALSE 1752
// begin SetTech ( 57 , 3 , state_disabled ) ;
1674: LD_INT 57
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1687: LD_INT 58
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1700: LD_INT 59
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 3
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1726: LD_INT 52
1728: PPUSH
1729: LD_INT 3
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1739: LD_INT 53
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 322
// end ; if difficulty = 2 then
1752: LD_OWVAR 67
1756: PUSH
1757: LD_INT 2
1759: EQUAL
1760: IFFALSE 1840
// begin SetTech ( 57 , 3 , state_enabled ) ;
1762: LD_INT 57
1764: PPUSH
1765: LD_INT 3
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1775: LD_INT 58
1777: PPUSH
1778: LD_INT 3
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1788: LD_INT 59
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1801: LD_INT 51
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1814: LD_INT 52
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1827: LD_INT 53
1829: PPUSH
1830: LD_INT 3
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 322
// end ; if difficulty = 3 then
1840: LD_OWVAR 67
1844: PUSH
1845: LD_INT 3
1847: EQUAL
1848: IFFALSE 1928
// begin SetTech ( 57 , 3 , state_enabled ) ;
1850: LD_INT 57
1852: PPUSH
1853: LD_INT 3
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1863: LD_INT 58
1865: PPUSH
1866: LD_INT 3
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1876: LD_INT 59
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1889: LD_INT 51
1891: PPUSH
1892: LD_INT 3
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1902: LD_INT 52
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1915: LD_INT 53
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 322
// end ; end ;
1928: LD_VAR 0 1
1932: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1940: LD_ADDR_VAR 0 8
1944: PUSH
1945: LD_INT 48
1947: PUSH
1948: LD_INT 49
1950: PUSH
1951: LD_INT 50
1953: PUSH
1954: LD_INT 20
1956: PUSH
1957: LD_INT 1
1959: PUSH
1960: LD_INT 69
1962: PUSH
1963: LD_INT 39
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 40
1971: PUSH
1972: LD_INT 71
1974: PUSH
1975: LD_INT 57
1977: PUSH
1978: LD_INT 58
1980: PUSH
1981: LD_INT 44
1983: PUSH
1984: LD_INT 32
1986: PUSH
1987: LD_INT 27
1989: PUSH
1990: LD_INT 23
1992: PUSH
1993: LD_INT 33
1995: PUSH
1996: LD_INT 54
1998: PUSH
1999: LD_INT 55
2001: PUSH
2002: LD_INT 56
2004: PUSH
2005: LD_INT 63
2007: PUSH
2008: LD_INT 64
2010: PUSH
2011: LD_INT 65
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 25
2028: PUSH
2029: LD_INT 51
2031: PUSH
2032: LD_INT 52
2034: PUSH
2035: LD_INT 59
2037: PUSH
2038: LD_INT 53
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: DOUBLE
2081: LD_INT 1
2083: DEC
2084: ST_TO_ADDR
2085: LD_VAR 0 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2167
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2093: LD_VAR 0 8
2097: PUSH
2098: LD_VAR 0 5
2102: ARRAY
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: CALL_OW 321
2113: PUSH
2114: LD_INT 1
2116: EQUAL
2117: PUSH
2118: LD_VAR 0 8
2122: PUSH
2123: LD_VAR 0 5
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 482
2138: PUSH
2139: LD_INT 1
2141: EQUAL
2142: AND
2143: IFFALSE 2165
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 8
2154: PUSH
2155: LD_VAR 0 5
2159: ARRAY
2160: PPUSH
2161: CALL_OW 184
2165: GO 2090
2167: POP
2168: POP
// end ;
2169: LD_VAR 0 4
2173: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2182: LD_ADDR_VAR 0 8
2186: PUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 313
2196: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2197: LD_ADDR_VAR 0 9
2201: PUSH
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_INT 22
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 25
2221: PUSH
2222: LD_INT 2
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 24
2231: PUSH
2232: LD_INT 750
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 3
2241: PUSH
2242: LD_INT 54
2244: PUSH
2245: EMPTY
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 70
2262: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2263: LD_ADDR_VAR 0 6
2267: PUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_INT 22
2275: PUSH
2276: LD_VAR 0 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 21
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 3
2297: PUSH
2298: LD_INT 24
2300: PUSH
2301: LD_INT 1000
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: PPUSH
2320: CALL_OW 70
2324: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2325: LD_VAR 0 6
2329: NOT
2330: PUSH
2331: LD_INT 22
2333: PUSH
2334: LD_VAR 0 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 25
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 24
2355: PUSH
2356: LD_INT 250
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: NOT
2373: AND
2374: IFFALSE 2378
// exit ;
2376: GO 2560
// if buildings_list > 0 and engineerOkInside then
2378: LD_VAR 0 6
2382: PUSH
2383: LD_INT 0
2385: GREATER
2386: PUSH
2387: LD_VAR 0 8
2391: AND
2392: IFFALSE 2403
// ComExitBuilding ( engineerOkInside ) ;
2394: LD_VAR 0 8
2398: PPUSH
2399: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2403: LD_VAR 0 6
2407: PUSH
2408: LD_INT 0
2410: GREATER
2411: PUSH
2412: LD_VAR 0 9
2416: PUSH
2417: LD_INT 0
2419: GREATER
2420: AND
2421: IFFALSE 2441
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2423: LD_VAR 0 9
2427: PPUSH
2428: LD_VAR 0 6
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2441: LD_VAR 0 6
2445: PUSH
2446: LD_INT 0
2448: EQUAL
2449: PUSH
2450: LD_VAR 0 4
2454: PUSH
2455: LD_INT 0
2457: EQUAL
2458: AND
2459: PUSH
2460: LD_VAR 0 9
2464: PUSH
2465: LD_INT 0
2467: GREATER
2468: AND
2469: IFFALSE 2485
// ComEnterUnit ( engineerOkOutside , building ) ;
2471: LD_VAR 0 9
2475: PPUSH
2476: LD_VAR 0 2
2480: PPUSH
2481: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2485: LD_VAR 0 9
2489: PUSH
2490: LD_INT 0
2492: GREATER
2493: PUSH
2494: LD_VAR 0 6
2498: PUSH
2499: LD_INT 0
2501: EQUAL
2502: AND
2503: PUSH
2504: LD_VAR 0 4
2508: PUSH
2509: LD_INT 0
2511: GREATER
2512: AND
2513: IFFALSE 2560
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2515: LD_VAR 0 9
2519: PPUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: LD_VAR 0 4
2533: PUSH
2534: LD_INT 2
2536: ARRAY
2537: PPUSH
2538: LD_VAR 0 4
2542: PUSH
2543: LD_INT 3
2545: ARRAY
2546: PPUSH
2547: LD_VAR 0 4
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 145
// end ;
2560: LD_VAR 0 5
2564: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2565: LD_INT 0
2567: PPUSH
2568: PPUSH
2569: PPUSH
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
2574: PPUSH
2575: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 22
2583: PUSH
2584: LD_VAR 0 1
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 25
2595: PUSH
2596: LD_INT 4
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 23
2605: PUSH
2606: LD_INT 2
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 24
2615: PUSH
2616: LD_INT 251
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2634: LD_ADDR_VAR 0 7
2638: PUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 22
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 23
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 25
2668: PUSH
2669: LD_INT 4
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 50
2678: PUSH
2679: EMPTY
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 70
2692: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2693: LD_ADDR_VAR 0 10
2697: PUSH
2698: LD_VAR 0 3
2702: PPUSH
2703: LD_INT 22
2705: PUSH
2706: LD_VAR 0 1
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 25
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: LD_INT 24
2747: PUSH
2748: LD_INT 750
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 70
2769: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2770: LD_ADDR_VAR 0 11
2774: PUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: LD_INT 22
2782: PUSH
2783: LD_VAR 0 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 21
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 3
2804: PUSH
2805: LD_INT 25
2807: PUSH
2808: LD_INT 3
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 24
2824: PUSH
2825: LD_INT 1000
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 70
2846: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2847: LD_VAR 0 10
2851: NOT
2852: PUSH
2853: LD_VAR 0 11
2857: NOT
2858: AND
2859: PUSH
2860: LD_VAR 0 6
2864: NOT
2865: AND
2866: IFFALSE 2870
// exit ;
2868: GO 3104
// if damageUnits > 0 and sci_list > 0 then
2870: LD_VAR 0 10
2874: PUSH
2875: LD_INT 0
2877: GREATER
2878: PUSH
2879: LD_VAR 0 6
2883: PUSH
2884: LD_INT 0
2886: GREATER
2887: AND
2888: IFFALSE 2904
// ComMoveToArea ( damageUnits , healArea ) ;
2890: LD_VAR 0 10
2894: PPUSH
2895: LD_VAR 0 2
2899: PPUSH
2900: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2904: LD_VAR 0 11
2908: PUSH
2909: LD_INT 0
2911: GREATER
2912: PUSH
2913: LD_VAR 0 6
2917: PUSH
2918: LD_INT 0
2920: GREATER
2921: AND
2922: IFFALSE 2933
// ComExitBuilding ( sci_list ) ;
2924: LD_VAR 0 6
2928: PPUSH
2929: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2933: LD_VAR 0 11
2937: PUSH
2938: LD_INT 0
2940: GREATER
2941: PUSH
2942: LD_VAR 0 7
2946: PUSH
2947: LD_INT 0
2949: GREATER
2950: AND
2951: IFFALSE 2971
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2953: LD_VAR 0 7
2957: PPUSH
2958: LD_VAR 0 11
2962: PUSH
2963: LD_INT 1
2965: ARRAY
2966: PPUSH
2967: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2971: LD_VAR 0 10
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: PUSH
2980: LD_VAR 0 11
2984: PUSH
2985: LD_INT 0
2987: EQUAL
2988: AND
2989: PUSH
2990: LD_VAR 0 7
2994: PUSH
2995: LD_INT 0
2997: GREATER
2998: AND
2999: IFFALSE 3104
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3001: LD_ADDR_VAR 0 12
3005: PUSH
3006: LD_INT 22
3008: PUSH
3009: LD_VAR 0 1
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 21
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 8
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 69
3047: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3048: LD_ADDR_VAR 0 13
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_VAR 0 12
3060: PPUSH
3061: CALL_OW 12
3065: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3066: LD_VAR 0 7
3070: PPUSH
3071: LD_INT 3
3073: PUSH
3074: LD_INT 60
3076: PUSH
3077: EMPTY
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 72
3088: PPUSH
3089: LD_VAR 0 12
3093: PUSH
3094: LD_VAR 0 13
3098: ARRAY
3099: PPUSH
3100: CALL_OW 120
// end ; end ;
3104: LD_VAR 0 5
3108: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3109: LD_INT 0
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
// tmpTab = [ ] ;
3115: LD_ADDR_VAR 0 6
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3122: LD_INT 22
3124: PUSH
3125: LD_VAR 0 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 32
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: PUSH
3153: LD_INT 0
3155: GREATER
3156: IFFALSE 3239
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3158: LD_ADDR_VAR 0 4
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_VAR 0 1
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PUSH
3175: LD_INT 30
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PPUSH
3189: CALL_OW 69
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3237
// begin for j in UnitsInside ( i ) do
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 313
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3233
// tmpTab = tmpTab ^ j ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_VAR 0 6
3224: PUSH
3225: LD_VAR 0 5
3229: ADD
3230: ST_TO_ADDR
3231: GO 3212
3233: POP
3234: POP
// end ;
3235: GO 3194
3237: POP
3238: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3239: LD_VAR 0 6
3243: PPUSH
3244: LD_VAR 0 2
3248: PPUSH
3249: CALL_OW 250
3253: PPUSH
3254: LD_VAR 0 2
3258: PPUSH
3259: CALL_OW 251
3263: PPUSH
3264: CALL_OW 114
// end ;
3268: LD_VAR 0 3
3272: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3273: LD_INT 0
3275: PPUSH
3276: PPUSH
3277: PPUSH
3278: PPUSH
// enable ;
3279: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3280: LD_ADDR_VAR 0 7
3284: PUSH
3285: LD_VAR 0 3
3289: PPUSH
3290: CALL_OW 435
3294: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3295: LD_ADDR_VAR 0 6
3299: PUSH
3300: LD_INT 22
3302: PUSH
3303: LD_VAR 0 1
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 34
3314: PUSH
3315: LD_VAR 0 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3333: LD_VAR 0 6
3337: PUSH
3338: LD_INT 0
3340: GREATER
3341: PUSH
3342: LD_VAR 0 3
3346: PPUSH
3347: CALL_OW 435
3351: AND
3352: PUSH
3353: LD_VAR 0 7
3357: PUSH
3358: LD_INT 0
3360: GREATER
3361: AND
3362: IFFALSE 3411
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3364: LD_VAR 0 6
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: LD_VAR 0 7
3377: PUSH
3378: LD_INT 1
3380: ARRAY
3381: PPUSH
3382: LD_VAR 0 7
3386: PUSH
3387: LD_INT 2
3389: ARRAY
3390: PPUSH
3391: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3395: LD_VAR 0 6
3399: PUSH
3400: LD_INT 1
3402: ARRAY
3403: PPUSH
3404: LD_INT 100
3406: PPUSH
3407: CALL_OW 240
// end ; end ;
3411: LD_VAR 0 4
3415: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
// for i = 1 to vehCount do
3420: LD_ADDR_VAR 0 9
3424: PUSH
3425: DOUBLE
3426: LD_INT 1
3428: DEC
3429: ST_TO_ADDR
3430: LD_VAR 0 3
3434: PUSH
3435: FOR_TO
3436: IFFALSE 3483
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_VAR 0 7
3447: PPUSH
3448: LD_VAR 0 5
3452: PPUSH
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 4
3462: PUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_VAR 0 4
3470: PPUSH
3471: CALL_OW 12
3475: ARRAY
3476: PPUSH
3477: CALL_OW 185
3481: GO 3435
3483: POP
3484: POP
// end ;
3485: LD_VAR 0 8
3489: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3498: LD_ADDR_VAR 0 6
3502: PUSH
3503: LD_INT 22
3505: PUSH
3506: LD_VAR 0 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 9
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3534: LD_ADDR_VAR 0 7
3538: PUSH
3539: LD_INT 81
3541: PUSH
3542: LD_VAR 0 1
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3577: LD_ADDR_VAR 0 4
3581: PUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: CALL_OW 12
3592: ST_TO_ADDR
// for i = 1 to list do
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_VAR 0 6
3607: PUSH
3608: FOR_TO
3609: IFFALSE 3811
// for ta in filter do
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_VAR 0 7
3620: PUSH
3621: FOR_IN
3622: IFFALSE 3807
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3624: LD_VAR 0 6
3628: PUSH
3629: LD_VAR 0 5
3633: ARRAY
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL_OW 296
3644: PUSH
3645: LD_INT 15
3647: LESSEQUAL
3648: IFFALSE 3805
// begin case c of 1 :
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3701
3663: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3664: LD_VAR 0 6
3668: PUSH
3669: LD_VAR 0 5
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 250
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 251
3694: PPUSH
3695: CALL_OW 154
3699: GO 3805
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3773
3709: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3710: LD_VAR 0 6
3714: PUSH
3715: LD_VAR 0 5
3719: ARRAY
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL_OW 250
3730: PUSH
3731: LD_INT 1
3733: NEG
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 12
3742: PLUS
3743: PPUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: CALL_OW 251
3753: PUSH
3754: LD_INT 1
3756: NEG
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: CALL_OW 12
3765: PLUS
3766: PPUSH
3767: CALL_OW 153
3771: GO 3805
3773: LD_INT 3
3775: DOUBLE
3776: EQUAL
3777: IFTRUE 3781
3779: GO 3804
3781: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3782: LD_VAR 0 6
3786: PUSH
3787: LD_VAR 0 5
3791: ARRAY
3792: PPUSH
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL_OW 115
3802: GO 3805
3804: POP
// end ; end ;
3805: GO 3621
3807: POP
3808: POP
3809: GO 3608
3811: POP
3812: POP
// end ;
3813: LD_VAR 0 2
3817: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
3822: PPUSH
3823: PPUSH
3824: PPUSH
3825: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3826: LD_ADDR_VAR 0 7
3830: PUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_INT 22
3838: PUSH
3839: LD_VAR 0 1
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 21
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 34
3860: PUSH
3861: LD_INT 52
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PPUSH
3873: CALL_OW 70
3877: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3878: LD_ADDR_VAR 0 8
3882: PUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 22
3890: PUSH
3891: LD_VAR 0 1
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 21
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 24
3915: PUSH
3916: LD_INT 1000
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: EMPTY
3933: LIST
3934: PPUSH
3935: CALL_OW 70
3939: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
3940: LD_VAR 0 8
3944: PUSH
3945: LD_INT 0
3947: GREATER
3948: PUSH
3949: LD_VAR 0 7
3953: PPUSH
3954: LD_INT 24
3956: PUSH
3957: LD_INT 750
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PPUSH
3964: CALL_OW 72
3968: PUSH
3969: LD_INT 0
3971: GREATER
3972: AND
3973: IFFALSE 3993
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
3975: LD_VAR 0 7
3979: PPUSH
3980: LD_VAR 0 8
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: PPUSH
3989: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
3993: LD_VAR 0 7
3997: PUSH
3998: LD_INT 0
4000: GREATER
4001: PUSH
4002: LD_VAR 0 8
4006: PUSH
4007: LD_INT 0
4009: EQUAL
4010: AND
4011: PUSH
4012: LD_EXP 10
4016: PUSH
4017: LD_INT 0
4019: GREATER
4020: AND
4021: IFFALSE 4068
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4023: LD_VAR 0 7
4027: PPUSH
4028: LD_EXP 10
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_EXP 10
4041: PUSH
4042: LD_INT 2
4044: ARRAY
4045: PPUSH
4046: LD_EXP 10
4050: PUSH
4051: LD_INT 3
4053: ARRAY
4054: PPUSH
4055: LD_EXP 10
4059: PUSH
4060: LD_INT 4
4062: ARRAY
4063: PPUSH
4064: CALL_OW 567
// end ; end_of_file
4068: LD_VAR 0 3
4072: RET
// every 0 0$1 do
4073: GO 4075
4075: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 14
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL 1933 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: CALL 1933 0 3
// end ;
4102: END
// every 0 0$1 trigger russianAI = 1 do
4103: LD_EXP 13
4107: PUSH
4108: LD_INT 1
4110: EQUAL
4111: IFFALSE 4200
4113: GO 4115
4115: DISABLE
// begin enable ;
4116: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 22
4122: PPUSH
4123: LD_INT 7
4125: PPUSH
4126: LD_EXP 10
4130: PPUSH
4131: CALL 2174 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4135: LD_INT 3
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: LD_INT 7
4143: PPUSH
4144: LD_INT 14
4146: PUSH
4147: LD_INT 15
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL_OW 12
4164: ARRAY
4165: PPUSH
4166: CALL 2565 0 4
// IntBazooka ( 3 ) ;
4170: LD_INT 3
4172: PPUSH
4173: CALL 3490 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 51
4182: PPUSH
4183: LD_INT 14
4185: PPUSH
4186: CALL 3273 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 7
4195: PPUSH
4196: CALL 3818 0 2
// end ;
4200: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4201: LD_EXP 11
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 5
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_OWVAR 67
4224: ARRAY
4225: GREATEREQUAL
4226: PUSH
4227: LD_EXP 12
4231: PUSH
4232: LD_INT 1
4234: PUSH
4235: LD_INT 2
4237: PUSH
4238: LD_INT 3
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: PUSH
4246: LD_OWVAR 67
4250: ARRAY
4251: GREATEREQUAL
4252: AND
4253: IFFALSE 4711
4255: GO 4257
4257: DISABLE
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
4262: PPUSH
4263: PPUSH
// begin enable ;
4264: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4265: LD_ADDR_VAR 0 2
4269: PUSH
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 12
4279: UNION
4280: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4281: LD_ADDR_EXP 11
4285: PUSH
4286: LD_EXP 11
4290: PUSH
4291: LD_VAR 0 2
4295: DIFF
4296: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4297: LD_ADDR_EXP 12
4301: PUSH
4302: LD_EXP 12
4306: PUSH
4307: LD_VAR 0 2
4311: DIFF
4312: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4313: LD_INT 116
4315: PPUSH
4316: CALL_OW 302
4320: IFFALSE 4389
// begin for j in tmp do
4322: LD_ADDR_VAR 0 1
4326: PUSH
4327: LD_VAR 0 2
4331: PUSH
4332: FOR_IN
4333: IFFALSE 4380
// if j mod 3 = 0 then
4335: LD_VAR 0 1
4339: PUSH
4340: LD_INT 3
4342: MOD
4343: PUSH
4344: LD_INT 0
4346: EQUAL
4347: IFFALSE 4363
// ComEnterUnit ( j , ruTeleport ) else
4349: LD_VAR 0 1
4353: PPUSH
4354: LD_INT 116
4356: PPUSH
4357: CALL_OW 120
4361: GO 4378
// ComAgressiveMove ( j , 117 , 92 ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_INT 117
4370: PPUSH
4371: LD_INT 92
4373: PPUSH
4374: CALL_OW 114
4378: GO 4332
4380: POP
4381: POP
// wait ( 0 0$8 ) ;
4382: LD_INT 280
4384: PPUSH
4385: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4389: LD_INT 35
4391: PPUSH
4392: CALL_OW 67
// for j in tmp do
4396: LD_ADDR_VAR 0 1
4400: PUSH
4401: LD_VAR 0 2
4405: PUSH
4406: FOR_IN
4407: IFFALSE 4702
// begin if IsDead ( j ) then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 301
4418: IFFALSE 4436
// tmp := tmp diff j ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_VAR 0 2
4429: PUSH
4430: LD_VAR 0 1
4434: DIFF
4435: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_INT 81
4443: PUSH
4444: LD_INT 3
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: PPUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 74
4465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_INT 81
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 1
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 74
4512: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 264
4522: PUSH
4523: LD_INT 49
4525: EQUAL
4526: IFFALSE 4634
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 34
4538: PUSH
4539: LD_INT 49
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PPUSH
4550: CALL_OW 72
4554: PUSH
4555: LD_INT 1
4557: GREATER
4558: IFFALSE 4608
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4560: LD_VAR 0 1
4564: PPUSH
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 49
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 72
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: CALL_OW 74
4601: PPUSH
4602: CALL_OW 112
4606: GO 4632
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4608: LD_VAR 0 1
4612: PPUSH
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 74
4627: PPUSH
4628: CALL_OW 112
// end else
4632: GO 4700
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4634: LD_VAR 0 1
4638: PPUSH
4639: LD_VAR 0 4
4643: PPUSH
4644: CALL_OW 296
4648: PUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_VAR 0 3
4658: PPUSH
4659: CALL_OW 296
4663: PUSH
4664: LD_INT 2
4666: PLUS
4667: LESS
4668: IFFALSE 4686
// ComAttackUnit ( j , target2 ) else
4670: LD_VAR 0 1
4674: PPUSH
4675: LD_VAR 0 4
4679: PPUSH
4680: CALL_OW 115
4684: GO 4700
// ComAttackUnit ( j , target1 ) ;
4686: LD_VAR 0 1
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 115
// end ; end ;
4700: GO 4406
4702: POP
4703: POP
// until not tmp ;
4704: LD_VAR 0 2
4708: NOT
4709: IFFALSE 4389
// end ;
4711: PPOPN 4
4713: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4714: LD_INT 22
4716: PPUSH
4717: CALL_OW 303
4721: PUSH
4722: LD_INT 22
4724: PPUSH
4725: CALL_OW 255
4729: PUSH
4730: LD_INT 1
4732: EQUAL
4733: OR
4734: IFFALSE 4749
4736: GO 4738
4738: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4739: LD_INT 3
4741: PPUSH
4742: LD_INT 22
4744: PPUSH
4745: CALL 3109 0 2
4749: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4750: LD_EXP 13
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 21
4771: PUSH
4772: LD_INT 2
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 50
4781: PUSH
4782: EMPTY
4783: LIST
4784: PUSH
4785: LD_INT 33
4787: PUSH
4788: LD_INT 3
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 34
4800: PUSH
4801: LD_INT 46
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 34
4810: PUSH
4811: LD_INT 45
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 44
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 34
4830: PUSH
4831: LD_INT 49
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 47
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 3
4870: LESS
4871: AND
4872: IFFALSE 5059
4874: GO 4876
4876: DISABLE
// begin enable ;
4877: ENABLE
// if russianRocketsAvalaible = 1 then
4878: LD_EXP 14
4882: PUSH
4883: LD_INT 1
4885: EQUAL
4886: IFFALSE 4943
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: LD_INT 3
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: LD_INT 5
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_OWVAR 67
4912: ARRAY
4913: PPUSH
4914: LD_INT 46
4916: PUSH
4917: LD_INT 45
4919: PUSH
4920: LD_INT 44
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PPUSH
4928: LD_INT 3
4930: PPUSH
4931: LD_INT 3
4933: PPUSH
4934: LD_INT 24
4936: PPUSH
4937: CALL 3416 0 7
4941: GO 5000
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: LD_INT 3
4951: PUSH
4952: LD_INT 4
4954: PUSH
4955: LD_INT 5
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PUSH
4963: LD_OWVAR 67
4967: ARRAY
4968: PPUSH
4969: LD_INT 46
4971: PUSH
4972: LD_INT 45
4974: PUSH
4975: LD_INT 44
4977: PUSH
4978: LD_INT 47
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: LD_INT 3
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 24
4995: PPUSH
4996: CALL 3416 0 7
// if russianTimeLapsers = 0 then
5000: LD_EXP 12
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: IFFALSE 5059
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 40
5015: PPUSH
5016: LD_INT 1
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: LD_OWVAR 67
5034: ARRAY
5035: PPUSH
5036: LD_INT 49
5038: PUSH
5039: LD_INT 49
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: LD_INT 3
5051: PPUSH
5052: LD_INT 24
5054: PPUSH
5055: CALL 3416 0 7
// end ;
5059: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5060: LD_EXP 18
5064: PUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_INT 58
5087: PUSH
5088: EMPTY
5089: LIST
5090: PUSH
5091: LD_INT 33
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 91
5103: PUSH
5104: LD_EXP 18
5108: PUSH
5109: LD_INT 45
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: AND
5129: IFFALSE 5233
5131: GO 5133
5133: DISABLE
// begin wait ( 0 0$5 ) ;
5134: LD_INT 175
5136: PPUSH
5137: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5141: LD_EXP 18
5145: PPUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 21
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 58
5168: PUSH
5169: EMPTY
5170: LIST
5171: PUSH
5172: LD_INT 33
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 91
5184: PUSH
5185: LD_EXP 18
5189: PUSH
5190: LD_INT 45
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 69
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5218: LD_EXP 18
5222: PPUSH
5223: LD_INT 127
5225: PPUSH
5226: LD_INT 63
5228: PPUSH
5229: CALL_OW 171
// end ; end_of_file
5233: END
// every 1 do var dec1 , dec2 ;
5234: GO 5236
5236: DISABLE
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
// begin InGameOn ;
5241: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5245: LD_INT 48
5247: PPUSH
5248: LD_STRING deltakappa
5250: PPUSH
5251: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5255: LD_INT 95
5257: PPUSH
5258: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5262: LD_INT 95
5264: PPUSH
5265: LD_INT 30
5267: PPUSH
5268: LD_INT 11
5270: PPUSH
5271: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5275: LD_INT 30
5277: PPUSH
5278: LD_INT 11
5280: PPUSH
5281: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5285: LD_EXP 5
5289: PPUSH
5290: LD_STRING D1-Pow-1
5292: PPUSH
5293: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5306: LD_EXP 1
5310: PPUSH
5311: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5315: LD_EXP 1
5319: PPUSH
5320: LD_STRING D1-JMM-1
5322: PPUSH
5323: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5327: LD_EXP 5
5331: PPUSH
5332: LD_STRING D1-Pow-2
5334: PPUSH
5335: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D1-JMM-2
5346: PPUSH
5347: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5351: LD_EXP 1
5355: PPUSH
5356: LD_INT 95
5358: PPUSH
5359: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5363: LD_STRING M1
5365: PPUSH
5366: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5370: LD_INT 35
5372: PPUSH
5373: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5377: LD_EXP 1
5381: PPUSH
5382: LD_INT 95
5384: PPUSH
5385: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5389: LD_INT 95
5391: PPUSH
5392: LD_INT 51
5394: PPUSH
5395: LD_INT 21
5397: PPUSH
5398: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5402: LD_INT 95
5404: PPUSH
5405: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5409: LD_INT 95
5411: PPUSH
5412: LD_INT 5
5414: PPUSH
5415: CALL_OW 308
5419: IFFALSE 5370
// if JMMGirl = 1 then
5421: LD_EXP 7
5425: PUSH
5426: LD_INT 1
5428: EQUAL
5429: IFFALSE 5742
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D2J-Joan-1
5438: PPUSH
5439: CALL_OW 94
// dec1 = query ( Q1 ) ;
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_STRING Q1
5450: PPUSH
5451: CALL_OW 97
5455: ST_TO_ADDR
// if dec1 = 1 then
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: EQUAL
5464: IFFALSE 5718
// begin ComExitVehicle ( JMM ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D2J-JMM-1
5482: PPUSH
5483: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5487: LD_EXP 2
5491: PPUSH
5492: LD_STRING D2J-Joan-2
5494: PPUSH
5495: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5499: LD_EXP 1
5503: PPUSH
5504: LD_STRING D2J-JMM-2
5506: PPUSH
5507: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5511: LD_EXP 2
5515: PPUSH
5516: LD_STRING D2J-Joan-3
5518: PPUSH
5519: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5523: LD_EXP 5
5527: PPUSH
5528: LD_STRING DPowell-Pow-1
5530: PPUSH
5531: CALL_OW 94
// dec2 = query ( Q2J ) ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_STRING Q2J
5542: PPUSH
5543: CALL_OW 97
5547: ST_TO_ADDR
// if dec2 = 1 then
5548: LD_VAR 0 2
5552: PUSH
5553: LD_INT 1
5555: EQUAL
5556: IFFALSE 5598
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5558: LD_EXP 1
5562: PPUSH
5563: LD_STRING D2Ja-JMM-1
5565: PPUSH
5566: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5570: LD_EXP 2
5574: PPUSH
5575: LD_STRING D2Ja-Joan-1
5577: PPUSH
5578: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D2Ja-JMM-2
5589: PPUSH
5590: CALL_OW 88
// InGameOff ;
5594: CALL_OW 9
// end ; if dec2 = 2 then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_INT 2
5605: EQUAL
5606: IFFALSE 5682
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5608: LD_EXP 1
5612: PPUSH
5613: LD_STRING D2Jb-JMM-1
5615: PPUSH
5616: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5620: LD_EXP 2
5624: PPUSH
5625: LD_STRING D2Jb-Joan-1
5627: PPUSH
5628: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5632: LD_EXP 1
5636: PPUSH
5637: LD_STRING D2Jb-JMM-2
5639: PPUSH
5640: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5644: LD_EXP 2
5648: PPUSH
5649: LD_STRING D2Jb-Joan-2
5651: PPUSH
5652: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5656: LD_EXP 1
5660: PPUSH
5661: LD_STRING D2Jb-JMM-3
5663: PPUSH
5664: CALL_OW 88
// fastEnd = 1 ;
5668: LD_ADDR_EXP 15
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// FinishMission ;
5676: CALL 9298 0 0
// exit ;
5680: GO 6312
// end ; if dec2 = 3 then
5682: LD_VAR 0 2
5686: PUSH
5687: LD_INT 3
5689: EQUAL
5690: IFFALSE 5718
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5692: LD_EXP 2
5696: PPUSH
5697: LD_STRING D2Jc-Joan-1
5699: PPUSH
5700: CALL_OW 94
// fastEnd = 1 ;
5704: LD_ADDR_EXP 15
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// FinishMission ;
5712: CALL 9298 0 0
// exit ;
5716: GO 6312
// end ; end ; if dec1 = 2 then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_INT 2
5725: EQUAL
5726: IFFALSE 5742
// begin fastEnd = 1 ;
5728: LD_ADDR_EXP 15
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// FinishMission ;
5736: CALL 9298 0 0
// exit ;
5740: GO 6312
// end ; end ; if JMMGirl = 2 then
5742: LD_EXP 7
5746: PUSH
5747: LD_INT 2
5749: EQUAL
5750: IFFALSE 6075
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5752: LD_EXP 3
5756: PPUSH
5757: LD_STRING D2L-Lisa-1
5759: PPUSH
5760: CALL_OW 94
// dec1 = query ( Q1 ) ;
5764: LD_ADDR_VAR 0 1
5768: PUSH
5769: LD_STRING Q1
5771: PPUSH
5772: CALL_OW 97
5776: ST_TO_ADDR
// if dec1 = 1 then
5777: LD_VAR 0 1
5781: PUSH
5782: LD_INT 1
5784: EQUAL
5785: IFFALSE 6051
// begin ComExitVehicle ( JMM ) ;
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5796: LD_EXP 1
5800: PPUSH
5801: LD_STRING D2L-JMM-1
5803: PPUSH
5804: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5808: LD_EXP 3
5812: PPUSH
5813: LD_STRING D2L-Lisa-2
5815: PPUSH
5816: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5820: LD_EXP 1
5824: PPUSH
5825: LD_STRING D2L-JMM-2
5827: PPUSH
5828: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5832: LD_EXP 3
5836: PPUSH
5837: LD_STRING D2L-Lisa-3
5839: PPUSH
5840: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5844: LD_EXP 5
5848: PPUSH
5849: LD_STRING DPowell-Pow-1
5851: PPUSH
5852: CALL_OW 94
// dec2 = query ( Q2L ) ;
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_STRING Q2L
5863: PPUSH
5864: CALL_OW 97
5868: ST_TO_ADDR
// if dec2 = 1 then
5869: LD_VAR 0 2
5873: PUSH
5874: LD_INT 1
5876: EQUAL
5877: IFFALSE 5943
// begin Say ( JMM , D2La-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D2La-JMM-1
5886: PPUSH
5887: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5891: LD_EXP 3
5895: PPUSH
5896: LD_STRING D2La-Lisa-1
5898: PPUSH
5899: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D2La-JMM-2
5910: PPUSH
5911: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5915: LD_EXP 3
5919: PPUSH
5920: LD_STRING D2La-Lisa-2
5922: PPUSH
5923: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D2La-JMM-3
5934: PPUSH
5935: CALL_OW 88
// InGameOff ;
5939: CALL_OW 9
// end ; if dec2 = 2 then
5943: LD_VAR 0 2
5947: PUSH
5948: LD_INT 2
5950: EQUAL
5951: IFFALSE 6015
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5953: LD_EXP 1
5957: PPUSH
5958: LD_STRING D2Lb-JMM-1
5960: PPUSH
5961: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5965: LD_EXP 3
5969: PPUSH
5970: LD_STRING D2Lb-Lisa-1
5972: PPUSH
5973: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5977: LD_EXP 1
5981: PPUSH
5982: LD_STRING D2Lb-JMM-2
5984: PPUSH
5985: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5989: LD_EXP 3
5993: PPUSH
5994: LD_STRING D2Lb-Lisa-2
5996: PPUSH
5997: CALL_OW 94
// fastEnd = 1 ;
6001: LD_ADDR_EXP 15
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// FinishMission ;
6009: CALL 9298 0 0
// exit ;
6013: GO 6312
// end ; if dec2 = 3 then
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: EQUAL
6023: IFFALSE 6051
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6025: LD_EXP 3
6029: PPUSH
6030: LD_STRING D2Lc-Lisa-1
6032: PPUSH
6033: CALL_OW 94
// fastEnd = 1 ;
6037: LD_ADDR_EXP 15
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// FinishMission ;
6045: CALL 9298 0 0
// exit ;
6049: GO 6312
// end ; end ; if dec1 = 2 then
6051: LD_VAR 0 1
6055: PUSH
6056: LD_INT 2
6058: EQUAL
6059: IFFALSE 6075
// begin fastEnd = 1 ;
6061: LD_ADDR_EXP 15
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// FinishMission ;
6069: CALL 9298 0 0
// exit ;
6073: GO 6312
// end ; end ; if JMMGirl = 3 then
6075: LD_EXP 7
6079: PUSH
6080: LD_INT 3
6082: EQUAL
6083: IFFALSE 6312
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6085: LD_EXP 4
6089: PPUSH
6090: LD_STRING D2X-Con-1
6092: PPUSH
6093: CALL_OW 94
// dec1 = query ( Q1 ) ;
6097: LD_ADDR_VAR 0 1
6101: PUSH
6102: LD_STRING Q1
6104: PPUSH
6105: CALL_OW 97
6109: ST_TO_ADDR
// if dec1 = 1 then
6110: LD_VAR 0 1
6114: PUSH
6115: LD_INT 1
6117: EQUAL
6118: IFFALSE 6288
// begin ComExitVehicle ( JMM ) ;
6120: LD_EXP 1
6124: PPUSH
6125: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D2X-JMM-1
6136: PPUSH
6137: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6141: LD_EXP 4
6145: PPUSH
6146: LD_STRING D2X-Con-2
6148: PPUSH
6149: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6153: LD_EXP 5
6157: PPUSH
6158: LD_STRING DPowell-Pow-1
6160: PPUSH
6161: CALL_OW 94
// dec2 = query ( Q2X ) ;
6165: LD_ADDR_VAR 0 2
6169: PUSH
6170: LD_STRING Q2X
6172: PPUSH
6173: CALL_OW 97
6177: ST_TO_ADDR
// if dec2 = 1 then
6178: LD_VAR 0 2
6182: PUSH
6183: LD_INT 1
6185: EQUAL
6186: IFFALSE 6204
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2Xa-JMM-1
6195: PPUSH
6196: CALL_OW 88
// InGameOff ;
6200: CALL_OW 9
// end ; if dec2 = 2 then
6204: LD_VAR 0 2
6208: PUSH
6209: LD_INT 2
6211: EQUAL
6212: IFFALSE 6252
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6214: LD_EXP 1
6218: PPUSH
6219: LD_STRING D2Xb-JMM-1
6221: PPUSH
6222: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6226: LD_EXP 4
6230: PPUSH
6231: LD_STRING D2Xb-Con-1
6233: PPUSH
6234: CALL_OW 94
// fastEnd = 1 ;
6238: LD_ADDR_EXP 15
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// FinishMission ;
6246: CALL 9298 0 0
// exit ;
6250: GO 6312
// end ; if dec2 = 3 then
6252: LD_VAR 0 2
6256: PUSH
6257: LD_INT 3
6259: EQUAL
6260: IFFALSE 6288
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6262: LD_EXP 4
6266: PPUSH
6267: LD_STRING D2Xc-Con-1
6269: PPUSH
6270: CALL_OW 94
// fastEnd = 1 ;
6274: LD_ADDR_EXP 15
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// FinishMission ;
6282: CALL 9298 0 0
// exit ;
6286: GO 6312
// end ; end ; if dec1 = 2 then
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6312
// begin fastEnd = 1 ;
6298: LD_ADDR_EXP 15
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// FinishMission ;
6306: CALL 9298 0 0
// exit ;
6310: GO 6312
// end ; end ; end ;
6312: PPOPN 2
6314: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6315: LD_EXP 1
6319: PPUSH
6320: LD_INT 6
6322: PPUSH
6323: CALL_OW 308
6327: IFFALSE 7069
6329: GO 6331
6331: DISABLE
// begin InGameOn ;
6332: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6336: LD_INT 35
6338: PPUSH
6339: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6343: LD_EXP 1
6347: PPUSH
6348: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6352: LD_EXP 1
6356: PPUSH
6357: LD_INT 62
6359: PPUSH
6360: LD_INT 104
6362: PPUSH
6363: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6367: LD_EXP 1
6371: PPUSH
6372: LD_EXP 2
6376: PPUSH
6377: CALL_OW 296
6381: PUSH
6382: LD_INT 4
6384: LESS
6385: PUSH
6386: LD_EXP 1
6390: PPUSH
6391: LD_EXP 3
6395: PPUSH
6396: CALL_OW 296
6400: PUSH
6401: LD_INT 4
6403: LESS
6404: OR
6405: PUSH
6406: LD_EXP 1
6410: PPUSH
6411: LD_EXP 4
6415: PPUSH
6416: CALL_OW 296
6420: PUSH
6421: LD_INT 4
6423: LESS
6424: OR
6425: IFFALSE 6336
// case JMMGirl of 1 :
6427: LD_EXP 7
6431: PUSH
6432: LD_INT 1
6434: DOUBLE
6435: EQUAL
6436: IFTRUE 6440
6438: GO 6652
6440: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6441: LD_INT 22
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6463: LD_EXP 2
6467: PPUSH
6468: LD_EXP 1
6472: PPUSH
6473: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6477: LD_EXP 1
6481: PPUSH
6482: LD_EXP 2
6486: PPUSH
6487: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6491: LD_EXP 2
6495: PUSH
6496: LD_EXP 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 87
// wait ( 0 0$1 ) ;
6509: LD_INT 35
6511: PPUSH
6512: CALL_OW 67
// DialogueOn ;
6516: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6520: LD_EXP 2
6524: PPUSH
6525: LD_STRING D3J-Joan-1
6527: PPUSH
6528: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D3J-JMM-1
6539: PPUSH
6540: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6544: LD_EXP 2
6548: PPUSH
6549: LD_STRING D3J-Joan-2
6551: PPUSH
6552: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D3J-JMM-2
6563: PPUSH
6564: CALL_OW 88
// wait ( 0 0$1 ) ;
6568: LD_INT 35
6570: PPUSH
6571: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6575: LD_EXP 1
6579: PPUSH
6580: LD_STRING D4-JMM-1
6582: PPUSH
6583: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6587: LD_EXP 2
6591: PPUSH
6592: LD_STRING D4-Joan-1
6594: PPUSH
6595: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6599: LD_EXP 1
6603: PPUSH
6604: LD_STRING D4-JMM-2
6606: PPUSH
6607: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6611: LD_EXP 2
6615: PPUSH
6616: LD_STRING D4-Joan-2
6618: PPUSH
6619: CALL_OW 88
// DialogueOff ;
6623: CALL_OW 7
// InGameOff ;
6627: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6631: LD_STRING M2J
6633: PPUSH
6634: CALL_OW 337
// SaveForQuickRestart ;
6638: CALL_OW 22
// russianAI = 1 ;
6642: LD_ADDR_EXP 13
6646: PUSH
6647: LD_INT 1
6649: ST_TO_ADDR
// end ; 2 :
6650: GO 7069
6652: LD_INT 2
6654: DOUBLE
6655: EQUAL
6656: IFTRUE 6660
6658: GO 6872
6660: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6661: LD_INT 22
6663: PUSH
6664: LD_INT 4
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 69
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6683: LD_EXP 3
6687: PPUSH
6688: LD_EXP 1
6692: PPUSH
6693: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6697: LD_EXP 1
6701: PPUSH
6702: LD_EXP 3
6706: PPUSH
6707: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6711: LD_EXP 3
6715: PUSH
6716: LD_EXP 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 87
// wait ( 0 0$1 ) ;
6729: LD_INT 35
6731: PPUSH
6732: CALL_OW 67
// DialogueOn ;
6736: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6740: LD_EXP 3
6744: PPUSH
6745: LD_STRING D3L-Lisa-1
6747: PPUSH
6748: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6752: LD_EXP 1
6756: PPUSH
6757: LD_STRING D3L-JMM-1
6759: PPUSH
6760: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6764: LD_EXP 3
6768: PPUSH
6769: LD_STRING D3L-Lisa-2
6771: PPUSH
6772: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6776: LD_EXP 1
6780: PPUSH
6781: LD_STRING D3L-JMM-2
6783: PPUSH
6784: CALL_OW 88
// wait ( 0 0$1 ) ;
6788: LD_INT 35
6790: PPUSH
6791: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6795: LD_EXP 1
6799: PPUSH
6800: LD_STRING D4-JMM-1
6802: PPUSH
6803: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6807: LD_EXP 3
6811: PPUSH
6812: LD_STRING D4-Lisa-1
6814: PPUSH
6815: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6819: LD_EXP 1
6823: PPUSH
6824: LD_STRING D4-JMM-1
6826: PPUSH
6827: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6831: LD_EXP 3
6835: PPUSH
6836: LD_STRING D4-Lisa-2
6838: PPUSH
6839: CALL_OW 88
// DialogueOff ;
6843: CALL_OW 7
// InGameOff ;
6847: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6851: LD_STRING M2L
6853: PPUSH
6854: CALL_OW 337
// SaveForQuickRestart ;
6858: CALL_OW 22
// russianAI = 1 ;
6862: LD_ADDR_EXP 13
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// end ; 3 :
6870: GO 7069
6872: LD_INT 3
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 7068
6880: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6881: LD_INT 22
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6903: LD_EXP 4
6907: PPUSH
6908: LD_EXP 1
6912: PPUSH
6913: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6917: LD_EXP 1
6921: PPUSH
6922: LD_EXP 4
6926: PPUSH
6927: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6931: LD_EXP 2
6935: PUSH
6936: LD_EXP 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 87
// wait ( 0 0$1 ) ;
6949: LD_INT 35
6951: PPUSH
6952: CALL_OW 67
// DialogueOn ;
6956: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6960: LD_EXP 4
6964: PPUSH
6965: LD_STRING D3X-Con-1
6967: PPUSH
6968: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D3J-JMM-1
6979: PPUSH
6980: CALL_OW 88
// wait ( 0 0$1 ) ;
6984: LD_INT 35
6986: PPUSH
6987: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6991: LD_EXP 1
6995: PPUSH
6996: LD_STRING D4-JMM-1
6998: PPUSH
6999: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7003: LD_EXP 4
7007: PPUSH
7008: LD_STRING D4-Con-1
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7015: LD_EXP 1
7019: PPUSH
7020: LD_STRING D4-JMM-2
7022: PPUSH
7023: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7027: LD_EXP 4
7031: PPUSH
7032: LD_STRING D4-Con-2
7034: PPUSH
7035: CALL_OW 88
// DialogueOff ;
7039: CALL_OW 7
// InGameOff ;
7043: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7047: LD_STRING M2X
7049: PPUSH
7050: CALL_OW 337
// SaveForQuickRestart ;
7054: CALL_OW 22
// russianAI = 1 ;
7058: LD_ADDR_EXP 13
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// end ; end ;
7066: GO 7069
7068: POP
// end ;
7069: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7070: LD_INT 32
7072: PPUSH
7073: CALL_OW 306
7077: IFFALSE 7410
7079: GO 7081
7081: DISABLE
// begin case JMMGirl of 1 :
7082: LD_EXP 7
7086: PUSH
7087: LD_INT 1
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7217
7095: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7096: LD_EXP 1
7100: PPUSH
7101: LD_STRING D6J-JMM-1
7103: PPUSH
7104: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7108: LD_STRING 13f_Denis
7110: PPUSH
7111: CALL_OW 28
7115: PUSH
7116: LD_INT 1
7118: EQUAL
7119: PUSH
7120: LD_STRING 13s_Denis
7122: PPUSH
7123: CALL_OW 28
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: OR
7132: IFFALSE 7172
// begin Say ( Joan , D6J-Joan-1 ) ;
7134: LD_EXP 2
7138: PPUSH
7139: LD_STRING D6J-Joan-1
7141: PPUSH
7142: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6J-JMM-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7158: LD_EXP 2
7162: PPUSH
7163: LD_STRING D6J-Joan-2
7165: PPUSH
7166: CALL_OW 88
// end else
7170: GO 7184
// begin Say ( Joan , D6J-Joan-2a ) ;
7172: LD_EXP 2
7176: PPUSH
7177: LD_STRING D6J-Joan-2a
7179: PPUSH
7180: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D6J-JMM-3
7191: PPUSH
7192: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7196: LD_EXP 2
7200: PPUSH
7201: LD_STRING D6J-Joan-3
7203: PPUSH
7204: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7208: LD_STRING M3
7210: PPUSH
7211: CALL_OW 337
// end ; 2 :
7215: GO 7410
7217: LD_INT 2
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7283
7225: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D6L-JMM-1
7233: PPUSH
7234: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7238: LD_EXP 3
7242: PPUSH
7243: LD_STRING D6L-Lisa-1
7245: PPUSH
7246: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7250: LD_EXP 1
7254: PPUSH
7255: LD_STRING D6L-JMM-2
7257: PPUSH
7258: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7262: LD_EXP 3
7266: PPUSH
7267: LD_STRING D6L-Lisa-2
7269: PPUSH
7270: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7274: LD_STRING M3
7276: PPUSH
7277: CALL_OW 337
// end ; 3 :
7281: GO 7410
7283: LD_INT 3
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7409
7291: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7292: LD_EXP 1
7296: PPUSH
7297: LD_STRING D6X-JMM-1
7299: PPUSH
7300: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7304: LD_EXP 4
7308: PPUSH
7309: LD_STRING D6X-Con-1
7311: PPUSH
7312: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7316: LD_EXP 1
7320: PPUSH
7321: LD_STRING D6X-JMM-2
7323: PPUSH
7324: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7328: LD_EXP 4
7332: PPUSH
7333: LD_STRING D6X-Con-2
7335: PPUSH
7336: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7340: LD_EXP 1
7344: PPUSH
7345: LD_STRING D6X-JMM-3
7347: PPUSH
7348: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7352: LD_EXP 4
7356: PPUSH
7357: LD_STRING D6X-Con-3
7359: PPUSH
7360: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7364: LD_EXP 1
7368: PPUSH
7369: LD_STRING D6X-JMM-4
7371: PPUSH
7372: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7376: LD_EXP 4
7380: PPUSH
7381: LD_STRING D6X-Con-4
7383: PPUSH
7384: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7388: LD_EXP 1
7392: PPUSH
7393: LD_STRING D6X-JMM-5
7395: PPUSH
7396: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7400: LD_STRING M3
7402: PPUSH
7403: CALL_OW 337
// end ; end ;
7407: GO 7410
7409: POP
// end ;
7410: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7411: LD_INT 22
7413: PUSH
7414: LD_INT 1
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 33
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PPUSH
7440: CALL_OW 306
7444: IFFALSE 7590
7446: GO 7448
7448: DISABLE
// begin case JMMGirl of 1 :
7449: LD_EXP 7
7453: PUSH
7454: LD_INT 1
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7499
7462: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7463: LD_EXP 1
7467: PPUSH
7468: LD_STRING D5-JMM-1
7470: PPUSH
7471: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7475: LD_INT 77
7477: PPUSH
7478: LD_INT 87
7480: PPUSH
7481: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7485: LD_EXP 2
7489: PPUSH
7490: LD_STRING D5-Joan-1
7492: PPUSH
7493: CALL_OW 88
// end ; 2 :
7497: GO 7590
7499: LD_INT 2
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7544
7507: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7508: LD_EXP 1
7512: PPUSH
7513: LD_STRING D5-JMM-1
7515: PPUSH
7516: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7520: LD_INT 77
7522: PPUSH
7523: LD_INT 87
7525: PPUSH
7526: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7530: LD_EXP 3
7534: PPUSH
7535: LD_STRING D5-Lisa-1
7537: PPUSH
7538: CALL_OW 88
// end ; 3 :
7542: GO 7590
7544: LD_INT 3
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7589
7552: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7553: LD_EXP 1
7557: PPUSH
7558: LD_STRING D5-JMM-1
7560: PPUSH
7561: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7565: LD_INT 77
7567: PPUSH
7568: LD_INT 87
7570: PPUSH
7571: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7575: LD_EXP 4
7579: PPUSH
7580: LD_STRING D5-Con-1
7582: PPUSH
7583: CALL_OW 88
// end ; end ;
7587: GO 7590
7589: POP
// end ;
7590: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7591: LD_INT 48
7593: PPUSH
7594: CALL_OW 255
7598: PUSH
7599: LD_INT 1
7601: EQUAL
7602: IFFALSE 7699
7604: GO 7606
7606: DISABLE
// begin DialogueOn ;
7607: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7611: LD_EXP 5
7615: PPUSH
7616: LD_STRING D7-Pow-1
7618: PPUSH
7619: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7623: LD_EXP 1
7627: PPUSH
7628: LD_STRING D7-JMM-1
7630: PPUSH
7631: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7635: LD_EXP 5
7639: PPUSH
7640: LD_STRING D7-Pow-2
7642: PPUSH
7643: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7647: LD_EXP 1
7651: PPUSH
7652: LD_STRING D7-JMM-2
7654: PPUSH
7655: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7659: LD_EXP 5
7663: PPUSH
7664: LD_STRING D7-Pow-3
7666: PPUSH
7667: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7671: LD_EXP 1
7675: PPUSH
7676: LD_STRING D7-JMM-3
7678: PPUSH
7679: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7683: LD_EXP 5
7687: PPUSH
7688: LD_STRING D7-Pow-4
7690: PPUSH
7691: CALL_OW 94
// DialogueOff ;
7695: CALL_OW 7
// end ; end_of_file
7699: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: LD_INT 3
7712: EQUAL
7713: IFFALSE 7787
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7715: LD_ADDR_EXP 10
7719: PUSH
7720: LD_EXP 10
7724: PPUSH
7725: LD_INT 1
7727: PPUSH
7728: CALL_OW 3
7732: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7733: LD_ADDR_EXP 10
7737: PUSH
7738: LD_EXP 10
7742: PPUSH
7743: LD_INT 1
7745: PPUSH
7746: CALL_OW 3
7750: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7751: LD_ADDR_EXP 10
7755: PUSH
7756: LD_EXP 10
7760: PPUSH
7761: LD_INT 1
7763: PPUSH
7764: CALL_OW 3
7768: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7769: LD_ADDR_EXP 10
7773: PUSH
7774: LD_EXP 10
7778: PPUSH
7779: LD_INT 1
7781: PPUSH
7782: CALL_OW 3
7786: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 255
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_INT 0
7813: EQUAL
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 2
7827: EQUAL
7828: OR
7829: PUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 266
7839: PUSH
7840: LD_INT 4
7842: EQUAL
7843: OR
7844: PUSH
7845: EMPTY
7846: LIST
7847: AND
7848: IFFALSE 7859
// ComUpgrade ( building ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 255
7868: PUSH
7869: LD_INT 3
7871: EQUAL
7872: PUSH
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 266
7882: PUSH
7883: LD_INT 32
7885: EQUAL
7886: AND
7887: IFFALSE 7928
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_INT 42
7896: PUSH
7897: LD_INT 43
7899: PUSH
7900: LD_INT 44
7902: PUSH
7903: LD_INT 46
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 1
7914: PPUSH
7915: LD_INT 4
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7928: LD_VAR 0 1
7932: PPUSH
7933: CALL_OW 255
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: PUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 266
7951: PUSH
7952: LD_INT 33
7954: EQUAL
7955: AND
7956: IFFALSE 7997
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 42
7965: PUSH
7966: LD_INT 43
7968: PUSH
7969: LD_INT 44
7971: PUSH
7972: LD_INT 46
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 1
7983: PPUSH
7984: LD_INT 4
7986: PPUSH
7987: CALL_OW 12
7991: ARRAY
7992: PPUSH
7993: CALL_OW 208
// end ;
7997: PPOPN 1
7999: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8000: LD_VAR 0 1
8004: PUSH
8005: LD_EXP 11
8009: IN
8010: IFFALSE 8028
// russianTanks := russianTanks diff unit ;
8012: LD_ADDR_EXP 11
8016: PUSH
8017: LD_EXP 11
8021: PUSH
8022: LD_VAR 0 1
8026: DIFF
8027: ST_TO_ADDR
// if unit in russianTimeLapsers then
8028: LD_VAR 0 1
8032: PUSH
8033: LD_EXP 12
8037: IN
8038: IFFALSE 8056
// russianTimeLapsers := russianTimeLapsers diff unit ;
8040: LD_ADDR_EXP 12
8044: PUSH
8045: LD_EXP 12
8049: PUSH
8050: LD_VAR 0 1
8054: DIFF
8055: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 255
8065: PUSH
8066: LD_INT 3
8068: EQUAL
8069: PUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 247
8079: PUSH
8080: LD_INT 3
8082: EQUAL
8083: AND
8084: IFFALSE 8548
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 31
8098: PUSH
8099: LD_INT 32
8101: PUSH
8102: LD_INT 36
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: LD_INT 24
8110: PUSH
8111: LD_INT 17
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 19
8119: PUSH
8120: LD_INT 20
8122: PUSH
8123: LD_INT 18
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 23
8131: PUSH
8132: LD_INT 16
8134: PUSH
8135: LD_INT 6
8137: PUSH
8138: LD_INT 29
8140: PUSH
8141: LD_INT 26
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 28
8149: PUSH
8150: LD_INT 27
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: IN
8186: IFFALSE 8272
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8188: LD_ADDR_EXP 10
8192: PUSH
8193: LD_EXP 10
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 266
8207: ADD
8208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8209: LD_ADDR_EXP 10
8213: PUSH
8214: LD_EXP 10
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 250
8228: ADD
8229: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8230: LD_ADDR_EXP 10
8234: PUSH
8235: LD_EXP 10
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 251
8249: ADD
8250: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8251: LD_ADDR_EXP 10
8255: PUSH
8256: LD_EXP 10
8260: PUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 254
8270: ADD
8271: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 266
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8364
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8287: LD_ADDR_EXP 10
8291: PUSH
8292: LD_EXP 10
8296: PUSH
8297: LD_INT 0
8299: ADD
8300: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8301: LD_ADDR_EXP 10
8305: PUSH
8306: LD_EXP 10
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 250
8320: ADD
8321: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8322: LD_ADDR_EXP 10
8326: PUSH
8327: LD_EXP 10
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 251
8341: ADD
8342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8343: LD_ADDR_EXP 10
8347: PUSH
8348: LD_EXP 10
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 254
8362: ADD
8363: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 266
8373: PUSH
8374: LD_INT 3
8376: EQUAL
8377: IFFALSE 8456
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8379: LD_ADDR_EXP 10
8383: PUSH
8384: LD_EXP 10
8388: PUSH
8389: LD_INT 2
8391: ADD
8392: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8393: LD_ADDR_EXP 10
8397: PUSH
8398: LD_EXP 10
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 250
8412: ADD
8413: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8414: LD_ADDR_EXP 10
8418: PUSH
8419: LD_EXP 10
8423: PUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 251
8433: ADD
8434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8435: LD_ADDR_EXP 10
8439: PUSH
8440: LD_EXP 10
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 254
8454: ADD
8455: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 266
8465: PUSH
8466: LD_INT 5
8468: EQUAL
8469: IFFALSE 8548
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8471: LD_ADDR_EXP 10
8475: PUSH
8476: LD_EXP 10
8480: PUSH
8481: LD_INT 4
8483: ADD
8484: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8485: LD_ADDR_EXP 10
8489: PUSH
8490: LD_EXP 10
8494: PUSH
8495: LD_VAR 0 1
8499: PPUSH
8500: CALL_OW 250
8504: ADD
8505: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8506: LD_ADDR_EXP 10
8510: PUSH
8511: LD_EXP 10
8515: PUSH
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 251
8525: ADD
8526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8527: LD_ADDR_EXP 10
8531: PUSH
8532: LD_EXP 10
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: CALL_OW 254
8546: ADD
8547: ST_TO_ADDR
// end ; end ; end ;
8548: PPOPN 1
8550: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8551: LD_VAR 0 3
8555: PPUSH
8556: CALL_OW 264
8560: PUSH
8561: LD_INT 10
8563: EQUAL
8564: IFFALSE 8580
// destroyCounter := destroyCounter + 1 ;
8566: LD_ADDR_EXP 17
8570: PUSH
8571: LD_EXP 17
8575: PUSH
8576: LD_INT 1
8578: PLUS
8579: ST_TO_ADDR
// end ;
8580: PPOPN 3
8582: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_INT 1
8590: EQUAL
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: LD_INT 40
8599: EQUAL
8600: OR
8601: IFFALSE 8725
// if GetSide ( vehicle ) = 3 then
8603: LD_VAR 0 1
8607: PPUSH
8608: CALL_OW 255
8612: PUSH
8613: LD_INT 3
8615: EQUAL
8616: IFFALSE 8725
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 264
8627: PUSH
8628: LD_INT 47
8630: EQUAL
8631: PUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 264
8641: PUSH
8642: LD_INT 46
8644: EQUAL
8645: OR
8646: PUSH
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 264
8656: PUSH
8657: LD_INT 45
8659: EQUAL
8660: OR
8661: PUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 264
8671: PUSH
8672: LD_INT 44
8674: EQUAL
8675: OR
8676: IFFALSE 8694
// russianTanks = russianTanks ^ vehicle ;
8678: LD_ADDR_EXP 11
8682: PUSH
8683: LD_EXP 11
8687: PUSH
8688: LD_VAR 0 1
8692: ADD
8693: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 264
8703: PUSH
8704: LD_INT 49
8706: EQUAL
8707: IFFALSE 8725
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8709: LD_ADDR_EXP 12
8713: PUSH
8714: LD_EXP 12
8718: PUSH
8719: LD_VAR 0 1
8723: ADD
8724: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 255
8734: PUSH
8735: LD_INT 1
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 264
8748: PUSH
8749: LD_INT 10
8751: EQUAL
8752: AND
8753: IFFALSE 8769
// amLaserCounter = amLaserCounter + 1 ;
8755: LD_ADDR_EXP 9
8759: PUSH
8760: LD_EXP 9
8764: PUSH
8765: LD_INT 1
8767: PLUS
8768: ST_TO_ADDR
// end ;
8769: PPOPN 2
8771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL 23861 0 1
// end ; end_of_file
8781: PPOPN 1
8783: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8784: LD_EXP 1
8788: PPUSH
8789: CALL_OW 310
8793: PPUSH
8794: LD_INT 12
8796: PPUSH
8797: CALL_OW 308
8801: PUSH
8802: LD_EXP 15
8806: PUSH
8807: LD_INT 0
8809: EQUAL
8810: AND
8811: IFFALSE 9157
8813: GO 8815
8815: DISABLE
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
// begin enable ;
8820: ENABLE
// if JMMGirl = 1 then
8821: LD_EXP 7
8825: PUSH
8826: LD_INT 1
8828: EQUAL
8829: IFFALSE 8846
// JMMGirlVeh = IsInUnit ( Joan ) ;
8831: LD_ADDR_VAR 0 1
8835: PUSH
8836: LD_EXP 2
8840: PPUSH
8841: CALL_OW 310
8845: ST_TO_ADDR
// if JMMGirl = 2 then
8846: LD_EXP 7
8850: PUSH
8851: LD_INT 2
8853: EQUAL
8854: IFFALSE 8871
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8856: LD_ADDR_VAR 0 1
8860: PUSH
8861: LD_EXP 3
8865: PPUSH
8866: CALL_OW 310
8870: ST_TO_ADDR
// if JMMGirl = 3 then
8871: LD_EXP 7
8875: PUSH
8876: LD_INT 3
8878: EQUAL
8879: IFFALSE 8896
// JMMGirlVeh = IsInUnit ( Connie ) ;
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_EXP 4
8890: PPUSH
8891: CALL_OW 310
8895: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8896: LD_EXP 1
8900: PPUSH
8901: CALL_OW 310
8905: PPUSH
8906: LD_EXP 2
8910: PPUSH
8911: CALL_OW 310
8915: PPUSH
8916: CALL_OW 296
8920: PUSH
8921: LD_INT 10
8923: LESS
8924: PUSH
8925: LD_EXP 1
8929: PPUSH
8930: CALL_OW 310
8934: PPUSH
8935: LD_EXP 3
8939: PPUSH
8940: CALL_OW 310
8944: PPUSH
8945: CALL_OW 296
8949: PUSH
8950: LD_INT 10
8952: LESS
8953: OR
8954: PUSH
8955: LD_EXP 1
8959: PPUSH
8960: CALL_OW 310
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 310
8974: PPUSH
8975: CALL_OW 296
8979: PUSH
8980: LD_INT 10
8982: LESS
8983: OR
8984: IFFALSE 9078
// begin case Query ( Q3b ) of 1 :
8986: LD_STRING Q3b
8988: PPUSH
8989: CALL_OW 97
8993: PUSH
8994: LD_INT 1
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9075
9002: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 265
9012: PUSH
9013: EMPTY
9014: LIST
9015: PUSH
9016: LD_VAR 0 1
9020: PPUSH
9021: CALL_OW 262
9025: PUSH
9026: EMPTY
9027: LIST
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 263
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 264
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: LD_STRING 14_JMMGirlVeh_1
9063: PPUSH
9064: CALL_OW 39
// FinishMission ;
9068: CALL 9298 0 0
// disable ;
9072: DISABLE
// end ; end ;
9073: GO 9076
9075: POP
// end else
9076: GO 9157
// begin if JMMGirl = 1 then
9078: LD_EXP 7
9082: PUSH
9083: LD_INT 1
9085: EQUAL
9086: IFFALSE 9103
// dec := Query ( Q3bJ ) else
9088: LD_ADDR_VAR 0 2
9092: PUSH
9093: LD_STRING Q3bJ
9095: PPUSH
9096: CALL_OW 97
9100: ST_TO_ADDR
9101: GO 9141
// if JMMGirl = 2 then
9103: LD_EXP 7
9107: PUSH
9108: LD_INT 2
9110: EQUAL
9111: IFFALSE 9128
// dec := Query ( Q3bL ) else
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_STRING Q3bL
9120: PPUSH
9121: CALL_OW 97
9125: ST_TO_ADDR
9126: GO 9141
// dec := Query ( Q3bX ) ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_STRING Q3bX
9135: PPUSH
9136: CALL_OW 97
9140: ST_TO_ADDR
// if dec = 1 then
9141: LD_VAR 0 2
9145: PUSH
9146: LD_INT 1
9148: EQUAL
9149: IFFALSE 9157
// begin FinishMission ;
9151: CALL 9298 0 0
// exit ;
9155: GO 9157
// end ; end ; end ;
9157: PPOPN 2
9159: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9160: LD_INT 22
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 21
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PPUSH
9184: CALL_OW 69
9188: PUSH
9189: LD_INT 0
9191: EQUAL
9192: PUSH
9193: LD_EXP 15
9197: PUSH
9198: LD_INT 0
9200: EQUAL
9201: AND
9202: IFFALSE 9297
9204: GO 9206
9206: DISABLE
// begin DialogueOn ;
9207: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9211: LD_EXP 1
9215: PPUSH
9216: LD_STRING DEnd-JMM-1
9218: PPUSH
9219: CALL_OW 88
// if JMMGirl = 1 then
9223: LD_EXP 7
9227: PUSH
9228: LD_INT 1
9230: EQUAL
9231: IFFALSE 9245
// Say ( Joan , DEnd-Joan-1 ) ;
9233: LD_EXP 2
9237: PPUSH
9238: LD_STRING DEnd-Joan-1
9240: PPUSH
9241: CALL_OW 88
// if JMMGirl = 2 then
9245: LD_EXP 7
9249: PUSH
9250: LD_INT 2
9252: EQUAL
9253: IFFALSE 9267
// Say ( Lisa , DEnd-Lisa-1 ) ;
9255: LD_EXP 3
9259: PPUSH
9260: LD_STRING DEnd-Lisa-1
9262: PPUSH
9263: CALL_OW 88
// if JMMGirl = 3 then
9267: LD_EXP 7
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9289
// Say ( Connie , DEnd-Con-1 ) ;
9277: LD_EXP 4
9281: PPUSH
9282: LD_STRING DEnd-Con-1
9284: PPUSH
9285: CALL_OW 88
// DialogueOff ;
9289: CALL_OW 7
// FinishMission ;
9293: CALL 9298 0 0
// end ;
9297: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
// m1 := false ;
9305: LD_ADDR_VAR 0 3
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// m2 := false ;
9313: LD_ADDR_VAR 0 4
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// m3 := false ;
9321: LD_ADDR_VAR 0 5
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9329: LD_EXP 1
9333: PPUSH
9334: LD_STRING 14_JMM
9336: PPUSH
9337: CALL_OW 38
// if tick <= 50 50$00 then
9341: LD_OWVAR 1
9345: PUSH
9346: LD_INT 105000
9348: LESSEQUAL
9349: IFFALSE 9358
// SetAchievement ( ACH_ASPEED_14 ) ;
9351: LD_STRING ACH_ASPEED_14
9353: PPUSH
9354: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9358: LD_EXP 1
9362: PPUSH
9363: CALL_OW 310
9367: PUSH
9368: LD_EXP 1
9372: PPUSH
9373: CALL_OW 310
9377: PPUSH
9378: CALL_OW 247
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: AND
9387: IFFALSE 9469
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_EXP 1
9398: PPUSH
9399: CALL_OW 310
9403: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9404: LD_VAR 0 2
9408: PPUSH
9409: CALL_OW 265
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 262
9426: PUSH
9427: EMPTY
9428: LIST
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: CALL_OW 263
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 264
9452: PUSH
9453: EMPTY
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_STRING 14_JMMVeh_1
9464: PPUSH
9465: CALL_OW 39
// end ; if fastEnd = 1 then
9469: LD_EXP 15
9473: PUSH
9474: LD_INT 1
9476: EQUAL
9477: IFFALSE 9566
// begin AddMedal ( fastend , - 1 ) ;
9479: LD_STRING fastend
9481: PPUSH
9482: LD_INT 1
9484: NEG
9485: PPUSH
9486: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9490: LD_STRING fastend
9492: PPUSH
9493: LD_INT 1
9495: NEG
9496: PPUSH
9497: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9501: LD_STRING fastend
9503: PPUSH
9504: LD_INT 1
9506: NEG
9507: PPUSH
9508: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9512: LD_EXP 7
9516: PPUSH
9517: LD_STRING 14_JMMGirl_1
9519: PPUSH
9520: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9524: LD_INT 0
9526: PPUSH
9527: LD_STRING 14_JMMGirlStatus_1
9529: PPUSH
9530: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9534: LD_INT 0
9536: PPUSH
9537: LD_STRING 14_KappaStatus_1
9539: PPUSH
9540: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9544: LD_STRING Eliminate
9546: PPUSH
9547: CALL_OW 102
// RewardPeople ( JMM ) ;
9551: LD_EXP 1
9555: PPUSH
9556: CALL_OW 43
// YouWin ;
9560: CALL_OW 103
// exit ;
9564: GO 10391
// end ; if fastEnd = 0 then
9566: LD_EXP 15
9570: PUSH
9571: LD_INT 0
9573: EQUAL
9574: IFFALSE 10284
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9576: LD_EXP 7
9580: PPUSH
9581: LD_STRING 14_JMMGirl_1
9583: PPUSH
9584: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9588: LD_INT 22
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 21
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 69
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: PUSH
9621: LD_INT 48
9623: PPUSH
9624: CALL_OW 255
9628: PUSH
9629: LD_INT 1
9631: EQUAL
9632: AND
9633: IFFALSE 9647
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9635: LD_INT 1
9637: PPUSH
9638: LD_STRING 14_KappaStatus_1
9640: PPUSH
9641: CALL_OW 39
9645: GO 9657
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9647: LD_INT 0
9649: PPUSH
9650: LD_STRING 14_KappaStatus_1
9652: PPUSH
9653: CALL_OW 39
// case JMMGirl of 1 :
9657: LD_EXP 7
9661: PUSH
9662: LD_INT 1
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9826
9670: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9671: LD_EXP 2
9675: PPUSH
9676: CALL_OW 302
9680: PUSH
9681: LD_EXP 2
9685: PPUSH
9686: CALL_OW 255
9690: PUSH
9691: LD_INT 1
9693: EQUAL
9694: AND
9695: PUSH
9696: LD_INT 22
9698: PUSH
9699: LD_INT 3
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 21
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: PUSH
9725: LD_INT 0
9727: EQUAL
9728: PUSH
9729: LD_EXP 1
9733: PPUSH
9734: CALL_OW 310
9738: PPUSH
9739: LD_EXP 2
9743: PPUSH
9744: CALL_OW 310
9748: PPUSH
9749: CALL_OW 296
9753: PUSH
9754: LD_INT 10
9756: LESS
9757: OR
9758: AND
9759: IFFALSE 9803
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9761: LD_INT 1
9763: PPUSH
9764: LD_STRING 14_JMMGirlStatus_1
9766: PPUSH
9767: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9771: LD_EXP 2
9775: PPUSH
9776: LD_STRING 14_Joan
9778: PPUSH
9779: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9783: LD_STRING protect
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 101
// m1 := true ;
9793: LD_ADDR_VAR 0 3
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// end else
9801: GO 9824
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9803: LD_INT 0
9805: PPUSH
9806: LD_STRING 14_JMMGirlStatus_1
9808: PPUSH
9809: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9813: LD_STRING protect
9815: PPUSH
9816: LD_INT 1
9818: NEG
9819: PPUSH
9820: CALL_OW 101
// end ; end ; 2 :
9824: GO 10155
9826: LD_INT 2
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9990
9834: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9835: LD_EXP 3
9839: PPUSH
9840: CALL_OW 302
9844: PUSH
9845: LD_EXP 3
9849: PPUSH
9850: CALL_OW 255
9854: PUSH
9855: LD_INT 1
9857: EQUAL
9858: AND
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 3
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 69
9888: PUSH
9889: LD_INT 0
9891: EQUAL
9892: PUSH
9893: LD_EXP 1
9897: PPUSH
9898: CALL_OW 310
9902: PPUSH
9903: LD_EXP 3
9907: PPUSH
9908: CALL_OW 310
9912: PPUSH
9913: CALL_OW 296
9917: PUSH
9918: LD_INT 10
9920: LESS
9921: OR
9922: AND
9923: IFFALSE 9967
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 1
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9935: LD_EXP 3
9939: PPUSH
9940: LD_STRING 14_Lisa
9942: PPUSH
9943: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9947: LD_STRING protect
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 101
// m1 := true ;
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// end else
9965: GO 9988
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9967: LD_INT 0
9969: PPUSH
9970: LD_STRING 14_JMMGirlStatus_1
9972: PPUSH
9973: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9977: LD_STRING protect
9979: PPUSH
9980: LD_INT 2
9982: NEG
9983: PPUSH
9984: CALL_OW 101
// end ; end ; 3 :
9988: GO 10155
9990: LD_INT 3
9992: DOUBLE
9993: EQUAL
9994: IFTRUE 9998
9996: GO 10154
9998: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9999: LD_EXP 4
10003: PPUSH
10004: CALL_OW 302
10008: PUSH
10009: LD_EXP 4
10013: PPUSH
10014: CALL_OW 255
10018: PUSH
10019: LD_INT 1
10021: EQUAL
10022: AND
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PUSH
10053: LD_INT 0
10055: EQUAL
10056: PUSH
10057: LD_EXP 1
10061: PPUSH
10062: CALL_OW 310
10066: PPUSH
10067: LD_EXP 4
10071: PPUSH
10072: CALL_OW 310
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 10
10084: LESS
10085: OR
10086: AND
10087: IFFALSE 10131
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10089: LD_INT 1
10091: PPUSH
10092: LD_STRING 14_JMMGirlStatus_1
10094: PPUSH
10095: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10099: LD_EXP 4
10103: PPUSH
10104: LD_STRING 14_Connie
10106: PPUSH
10107: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10111: LD_STRING protect
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 101
// m1 := true ;
10121: LD_ADDR_VAR 0 3
10125: PUSH
10126: LD_INT 1
10128: ST_TO_ADDR
// end else
10129: GO 10152
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10131: LD_INT 0
10133: PPUSH
10134: LD_STRING 14_JMMGirlStatus_1
10136: PPUSH
10137: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10141: LD_STRING protect
10143: PPUSH
10144: LD_INT 3
10146: NEG
10147: PPUSH
10148: CALL_OW 101
// end ; end ; end ;
10152: GO 10155
10154: POP
// if amLaserCounter >= 2 then
10155: LD_EXP 9
10159: PUSH
10160: LD_INT 2
10162: GREATEREQUAL
10163: IFFALSE 10185
// begin AddMedal ( double , 1 ) ;
10165: LD_STRING double
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 101
// m2 := true ;
10175: LD_ADDR_VAR 0 4
10179: PUSH
10180: LD_INT 1
10182: ST_TO_ADDR
// end else
10183: GO 10219
// begin if amLaserCounter = 1 then
10185: LD_EXP 9
10189: PUSH
10190: LD_INT 1
10192: EQUAL
10193: IFFALSE 10208
// AddMedal ( double , - 2 ) else
10195: LD_STRING double
10197: PPUSH
10198: LD_INT 2
10200: NEG
10201: PPUSH
10202: CALL_OW 101
10206: GO 10219
// AddMedal ( double , - 1 ) ;
10208: LD_STRING double
10210: PPUSH
10211: LD_INT 1
10213: NEG
10214: PPUSH
10215: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10219: LD_INT 22
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 69
10247: PUSH
10248: LD_INT 0
10250: EQUAL
10251: IFFALSE 10273
// begin AddMedal ( base , 1 ) ;
10253: LD_STRING base
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 101
// m3 := true ;
10263: LD_ADDR_VAR 0 5
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// end else
10271: GO 10284
// AddMedal ( base , - 1 ) ;
10273: LD_STRING base
10275: PPUSH
10276: LD_INT 1
10278: NEG
10279: PPUSH
10280: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_VAR 0 4
10293: AND
10294: PUSH
10295: LD_VAR 0 5
10299: AND
10300: PUSH
10301: LD_OWVAR 67
10305: PUSH
10306: LD_INT 3
10308: EQUAL
10309: AND
10310: IFFALSE 10322
// SetAchievementEX ( ACH_AMER , 14 ) ;
10312: LD_STRING ACH_AMER
10314: PPUSH
10315: LD_INT 14
10317: PPUSH
10318: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10322: LD_STRING Eliminate
10324: PPUSH
10325: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10329: LD_INT 22
10331: PUSH
10332: LD_INT 1
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 3
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: LD_INT 25
10361: PUSH
10362: LD_INT 16
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PPUSH
10383: CALL_OW 43
// YouWin ;
10387: CALL_OW 103
// end ; end_of_file
10391: LD_VAR 0 1
10395: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10396: LD_EXP 1
10400: PPUSH
10401: CALL_OW 301
10405: IFFALSE 10417
10407: GO 10409
10409: DISABLE
// YouLost ( JMM ) ; end_of_file
10410: LD_STRING JMM
10412: PPUSH
10413: CALL_OW 104
10417: END
// every 1 1$0 do
10418: GO 10420
10420: DISABLE
// begin enable ;
10421: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10422: LD_INT 3
10424: PPUSH
10425: LD_INT 5
10427: PPUSH
10428: CALL_OW 12
10432: PPUSH
10433: LD_INT 13
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 55
// end ; end_of_file
10443: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
10444: LD_INT 0
10446: PPUSH
// ar_miner := 81 ;
10447: LD_ADDR_EXP 26
10451: PUSH
10452: LD_INT 81
10454: ST_TO_ADDR
// ar_crane := 88 ;
10455: LD_ADDR_EXP 25
10459: PUSH
10460: LD_INT 88
10462: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10463: LD_ADDR_EXP 20
10467: PUSH
10468: LD_INT 89
10470: ST_TO_ADDR
// us_hack := 99 ;
10471: LD_ADDR_EXP 21
10475: PUSH
10476: LD_INT 99
10478: ST_TO_ADDR
// us_artillery := 97 ;
10479: LD_ADDR_EXP 22
10483: PUSH
10484: LD_INT 97
10486: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10487: LD_ADDR_EXP 23
10491: PUSH
10492: LD_INT 91
10494: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
10495: LD_ADDR_EXP 24
10499: PUSH
10500: LD_INT 92
10502: ST_TO_ADDR
// ru_radar := 98 ;
10503: LD_ADDR_EXP 19
10507: PUSH
10508: LD_INT 98
10510: ST_TO_ADDR
// tech_Artillery := 80 ;
10511: LD_ADDR_EXP 27
10515: PUSH
10516: LD_INT 80
10518: ST_TO_ADDR
// tech_RadMat := 81 ;
10519: LD_ADDR_EXP 28
10523: PUSH
10524: LD_INT 81
10526: ST_TO_ADDR
// tech_BasicTools := 82 ;
10527: LD_ADDR_EXP 29
10531: PUSH
10532: LD_INT 82
10534: ST_TO_ADDR
// tech_Cargo := 83 ;
10535: LD_ADDR_EXP 30
10539: PUSH
10540: LD_INT 83
10542: ST_TO_ADDR
// tech_Track := 84 ;
10543: LD_ADDR_EXP 31
10547: PUSH
10548: LD_INT 84
10550: ST_TO_ADDR
// tech_Crane := 85 ;
10551: LD_ADDR_EXP 32
10555: PUSH
10556: LD_INT 85
10558: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10559: LD_ADDR_EXP 33
10563: PUSH
10564: LD_INT 86
10566: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10567: LD_ADDR_EXP 34
10571: PUSH
10572: LD_INT 87
10574: ST_TO_ADDR
// end ;
10575: LD_VAR 0 1
10579: RET
// every 1 do
10580: GO 10582
10582: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10583: CALL 10444 0 0
10587: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10588: LD_VAR 0 2
10592: PUSH
10593: LD_INT 100
10595: EQUAL
10596: IFFALSE 11545
// begin if not StreamModeActive then
10598: LD_EXP 35
10602: NOT
10603: IFFALSE 10613
// StreamModeActive := true ;
10605: LD_ADDR_EXP 35
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 0 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 0
10620: EQUAL
10621: IFFALSE 10627
// InitStreamMode ;
10623: CALL 11703 0 0
// if p3 = 1 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 1
10634: EQUAL
10635: IFFALSE 10645
// sRocket := true ;
10637: LD_ADDR_EXP 40
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 2 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 2
10652: EQUAL
10653: IFFALSE 10663
// sSpeed := true ;
10655: LD_ADDR_EXP 39
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 3 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 3
10670: EQUAL
10671: IFFALSE 10681
// sEngine := true ;
10673: LD_ADDR_EXP 41
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 4 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 4
10688: EQUAL
10689: IFFALSE 10699
// sSpec := true ;
10691: LD_ADDR_EXP 38
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 5 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 5
10706: EQUAL
10707: IFFALSE 10717
// sLevel := true ;
10709: LD_ADDR_EXP 42
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 6 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 6
10724: EQUAL
10725: IFFALSE 10735
// sArmoury := true ;
10727: LD_ADDR_EXP 43
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 7 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 7
10742: EQUAL
10743: IFFALSE 10753
// sRadar := true ;
10745: LD_ADDR_EXP 44
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 8 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 8
10760: EQUAL
10761: IFFALSE 10771
// sBunker := true ;
10763: LD_ADDR_EXP 45
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 9 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 9
10778: EQUAL
10779: IFFALSE 10789
// sHack := true ;
10781: LD_ADDR_EXP 46
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 10 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 10
10796: EQUAL
10797: IFFALSE 10807
// sFire := true ;
10799: LD_ADDR_EXP 47
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 11 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 11
10814: EQUAL
10815: IFFALSE 10825
// sRefresh := true ;
10817: LD_ADDR_EXP 48
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 12 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 12
10832: EQUAL
10833: IFFALSE 10843
// sExp := true ;
10835: LD_ADDR_EXP 49
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 13 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 13
10850: EQUAL
10851: IFFALSE 10861
// sDepot := true ;
10853: LD_ADDR_EXP 50
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 14 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 14
10868: EQUAL
10869: IFFALSE 10879
// sFlag := true ;
10871: LD_ADDR_EXP 51
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 15 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 15
10886: EQUAL
10887: IFFALSE 10897
// sKamikadze := true ;
10889: LD_ADDR_EXP 59
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// if p3 = 16 then
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 16
10904: EQUAL
10905: IFFALSE 10915
// sTroll := true ;
10907: LD_ADDR_EXP 60
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// if p3 = 17 then
10915: LD_VAR 0 3
10919: PUSH
10920: LD_INT 17
10922: EQUAL
10923: IFFALSE 10933
// sSlow := true ;
10925: LD_ADDR_EXP 61
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// if p3 = 18 then
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 18
10940: EQUAL
10941: IFFALSE 10951
// sLack := true ;
10943: LD_ADDR_EXP 62
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// if p3 = 19 then
10951: LD_VAR 0 3
10955: PUSH
10956: LD_INT 19
10958: EQUAL
10959: IFFALSE 10969
// sTank := true ;
10961: LD_ADDR_EXP 64
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// if p3 = 20 then
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 20
10976: EQUAL
10977: IFFALSE 10987
// sRemote := true ;
10979: LD_ADDR_EXP 65
10983: PUSH
10984: LD_INT 1
10986: ST_TO_ADDR
// if p3 = 21 then
10987: LD_VAR 0 3
10991: PUSH
10992: LD_INT 21
10994: EQUAL
10995: IFFALSE 11005
// sPowell := true ;
10997: LD_ADDR_EXP 66
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// if p3 = 22 then
11005: LD_VAR 0 3
11009: PUSH
11010: LD_INT 22
11012: EQUAL
11013: IFFALSE 11023
// sTeleport := true ;
11015: LD_ADDR_EXP 69
11019: PUSH
11020: LD_INT 1
11022: ST_TO_ADDR
// if p3 = 23 then
11023: LD_VAR 0 3
11027: PUSH
11028: LD_INT 23
11030: EQUAL
11031: IFFALSE 11041
// sOilTower := true ;
11033: LD_ADDR_EXP 71
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// if p3 = 24 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_INT 24
11048: EQUAL
11049: IFFALSE 11059
// sShovel := true ;
11051: LD_ADDR_EXP 72
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// if p3 = 25 then
11059: LD_VAR 0 3
11063: PUSH
11064: LD_INT 25
11066: EQUAL
11067: IFFALSE 11077
// sSheik := true ;
11069: LD_ADDR_EXP 73
11073: PUSH
11074: LD_INT 1
11076: ST_TO_ADDR
// if p3 = 26 then
11077: LD_VAR 0 3
11081: PUSH
11082: LD_INT 26
11084: EQUAL
11085: IFFALSE 11095
// sEarthquake := true ;
11087: LD_ADDR_EXP 75
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// if p3 = 27 then
11095: LD_VAR 0 3
11099: PUSH
11100: LD_INT 27
11102: EQUAL
11103: IFFALSE 11113
// sAI := true ;
11105: LD_ADDR_EXP 76
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// if p3 = 28 then
11113: LD_VAR 0 3
11117: PUSH
11118: LD_INT 28
11120: EQUAL
11121: IFFALSE 11131
// sCargo := true ;
11123: LD_ADDR_EXP 79
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// if p3 = 29 then
11131: LD_VAR 0 3
11135: PUSH
11136: LD_INT 29
11138: EQUAL
11139: IFFALSE 11149
// sDLaser := true ;
11141: LD_ADDR_EXP 80
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// if p3 = 30 then
11149: LD_VAR 0 3
11153: PUSH
11154: LD_INT 30
11156: EQUAL
11157: IFFALSE 11167
// sExchange := true ;
11159: LD_ADDR_EXP 81
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// if p3 = 31 then
11167: LD_VAR 0 3
11171: PUSH
11172: LD_INT 31
11174: EQUAL
11175: IFFALSE 11185
// sFac := true ;
11177: LD_ADDR_EXP 82
11181: PUSH
11182: LD_INT 1
11184: ST_TO_ADDR
// if p3 = 32 then
11185: LD_VAR 0 3
11189: PUSH
11190: LD_INT 32
11192: EQUAL
11193: IFFALSE 11203
// sPower := true ;
11195: LD_ADDR_EXP 83
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// if p3 = 33 then
11203: LD_VAR 0 3
11207: PUSH
11208: LD_INT 33
11210: EQUAL
11211: IFFALSE 11221
// sRandom := true ;
11213: LD_ADDR_EXP 84
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// if p3 = 34 then
11221: LD_VAR 0 3
11225: PUSH
11226: LD_INT 34
11228: EQUAL
11229: IFFALSE 11239
// sShield := true ;
11231: LD_ADDR_EXP 85
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// if p3 = 35 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 35
11246: EQUAL
11247: IFFALSE 11257
// sTime := true ;
11249: LD_ADDR_EXP 86
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 36 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 36
11264: EQUAL
11265: IFFALSE 11275
// sTools := true ;
11267: LD_ADDR_EXP 87
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 101 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 101
11282: EQUAL
11283: IFFALSE 11293
// sSold := true ;
11285: LD_ADDR_EXP 52
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 102 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 102
11300: EQUAL
11301: IFFALSE 11311
// sDiff := true ;
11303: LD_ADDR_EXP 53
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 103 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 103
11318: EQUAL
11319: IFFALSE 11329
// sFog := true ;
11321: LD_ADDR_EXP 56
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 104 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 104
11336: EQUAL
11337: IFFALSE 11347
// sReset := true ;
11339: LD_ADDR_EXP 57
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 105 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 105
11354: EQUAL
11355: IFFALSE 11365
// sSun := true ;
11357: LD_ADDR_EXP 58
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 106 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 106
11372: EQUAL
11373: IFFALSE 11383
// sTiger := true ;
11375: LD_ADDR_EXP 54
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 107 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 107
11390: EQUAL
11391: IFFALSE 11401
// sBomb := true ;
11393: LD_ADDR_EXP 55
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 108 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 108
11408: EQUAL
11409: IFFALSE 11419
// sWound := true ;
11411: LD_ADDR_EXP 63
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 109 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 109
11426: EQUAL
11427: IFFALSE 11437
// sBetray := true ;
11429: LD_ADDR_EXP 67
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 110 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 110
11444: EQUAL
11445: IFFALSE 11455
// sContamin := true ;
11447: LD_ADDR_EXP 68
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 111 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 111
11462: EQUAL
11463: IFFALSE 11473
// sOil := true ;
11465: LD_ADDR_EXP 70
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 112 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 112
11480: EQUAL
11481: IFFALSE 11491
// sStu := true ;
11483: LD_ADDR_EXP 74
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 113 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 113
11498: EQUAL
11499: IFFALSE 11509
// sBazooka := true ;
11501: LD_ADDR_EXP 77
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 114 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 114
11516: EQUAL
11517: IFFALSE 11527
// sMortar := true ;
11519: LD_ADDR_EXP 78
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 115 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 115
11534: EQUAL
11535: IFFALSE 11545
// sRanger := true ;
11537: LD_ADDR_EXP 88
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// end ; if p2 = 101 then
11545: LD_VAR 0 2
11549: PUSH
11550: LD_INT 101
11552: EQUAL
11553: IFFALSE 11681
// begin case p3 of 1 :
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 1
11562: DOUBLE
11563: EQUAL
11564: IFTRUE 11568
11566: GO 11575
11568: POP
// hHackUnlimitedResources ; 2 :
11569: CALL 22716 0 0
11573: GO 11681
11575: LD_INT 2
11577: DOUBLE
11578: EQUAL
11579: IFTRUE 11583
11581: GO 11590
11583: POP
// hHackSetLevel10 ; 3 :
11584: CALL 22849 0 0
11588: GO 11681
11590: LD_INT 3
11592: DOUBLE
11593: EQUAL
11594: IFTRUE 11598
11596: GO 11605
11598: POP
// hHackSetLevel10YourUnits ; 4 :
11599: CALL 22934 0 0
11603: GO 11681
11605: LD_INT 4
11607: DOUBLE
11608: EQUAL
11609: IFTRUE 11613
11611: GO 11620
11613: POP
// hHackInvincible ; 5 :
11614: CALL 23382 0 0
11618: GO 11681
11620: LD_INT 5
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11635
11628: POP
// hHackInvisible ; 6 :
11629: CALL 23493 0 0
11633: GO 11681
11635: LD_INT 6
11637: DOUBLE
11638: EQUAL
11639: IFTRUE 11643
11641: GO 11650
11643: POP
// hHackChangeYourSide ; 7 :
11644: CALL 23550 0 0
11648: GO 11681
11650: LD_INT 7
11652: DOUBLE
11653: EQUAL
11654: IFTRUE 11658
11656: GO 11665
11658: POP
// hHackChangeUnitSide ; 8 :
11659: CALL 23592 0 0
11663: GO 11681
11665: LD_INT 8
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11680
11673: POP
// hHackFog ; end ;
11674: CALL 23693 0 0
11678: GO 11681
11680: POP
// end ; end ;
11681: PPOPN 6
11683: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11684: GO 11686
11686: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11687: LD_STRING initStreamRollete();
11689: PPUSH
11690: CALL_OW 559
// InitStreamMode ;
11694: CALL 11703 0 0
// DefineStreamItems ( ) ;
11698: CALL 12143 0 0
// end ;
11702: END
// function InitStreamMode ; begin
11703: LD_INT 0
11705: PPUSH
// streamModeActive := false ;
11706: LD_ADDR_EXP 35
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// normalCounter := 36 ;
11714: LD_ADDR_EXP 36
11718: PUSH
11719: LD_INT 36
11721: ST_TO_ADDR
// hardcoreCounter := 16 ;
11722: LD_ADDR_EXP 37
11726: PUSH
11727: LD_INT 16
11729: ST_TO_ADDR
// sRocket := false ;
11730: LD_ADDR_EXP 40
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// sSpeed := false ;
11738: LD_ADDR_EXP 39
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sEngine := false ;
11746: LD_ADDR_EXP 41
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// sSpec := false ;
11754: LD_ADDR_EXP 38
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// sLevel := false ;
11762: LD_ADDR_EXP 42
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// sArmoury := false ;
11770: LD_ADDR_EXP 43
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// sRadar := false ;
11778: LD_ADDR_EXP 44
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// sBunker := false ;
11786: LD_ADDR_EXP 45
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// sHack := false ;
11794: LD_ADDR_EXP 46
11798: PUSH
11799: LD_INT 0
11801: ST_TO_ADDR
// sFire := false ;
11802: LD_ADDR_EXP 47
11806: PUSH
11807: LD_INT 0
11809: ST_TO_ADDR
// sRefresh := false ;
11810: LD_ADDR_EXP 48
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// sExp := false ;
11818: LD_ADDR_EXP 49
11822: PUSH
11823: LD_INT 0
11825: ST_TO_ADDR
// sDepot := false ;
11826: LD_ADDR_EXP 50
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// sFlag := false ;
11834: LD_ADDR_EXP 51
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// sKamikadze := false ;
11842: LD_ADDR_EXP 59
11846: PUSH
11847: LD_INT 0
11849: ST_TO_ADDR
// sTroll := false ;
11850: LD_ADDR_EXP 60
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// sSlow := false ;
11858: LD_ADDR_EXP 61
11862: PUSH
11863: LD_INT 0
11865: ST_TO_ADDR
// sLack := false ;
11866: LD_ADDR_EXP 62
11870: PUSH
11871: LD_INT 0
11873: ST_TO_ADDR
// sTank := false ;
11874: LD_ADDR_EXP 64
11878: PUSH
11879: LD_INT 0
11881: ST_TO_ADDR
// sRemote := false ;
11882: LD_ADDR_EXP 65
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
// sPowell := false ;
11890: LD_ADDR_EXP 66
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// sTeleport := false ;
11898: LD_ADDR_EXP 69
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// sOilTower := false ;
11906: LD_ADDR_EXP 71
11910: PUSH
11911: LD_INT 0
11913: ST_TO_ADDR
// sShovel := false ;
11914: LD_ADDR_EXP 72
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// sSheik := false ;
11922: LD_ADDR_EXP 73
11926: PUSH
11927: LD_INT 0
11929: ST_TO_ADDR
// sEarthquake := false ;
11930: LD_ADDR_EXP 75
11934: PUSH
11935: LD_INT 0
11937: ST_TO_ADDR
// sAI := false ;
11938: LD_ADDR_EXP 76
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// sCargo := false ;
11946: LD_ADDR_EXP 79
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// sDLaser := false ;
11954: LD_ADDR_EXP 80
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// sExchange := false ;
11962: LD_ADDR_EXP 81
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// sFac := false ;
11970: LD_ADDR_EXP 82
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// sPower := false ;
11978: LD_ADDR_EXP 83
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// sRandom := false ;
11986: LD_ADDR_EXP 84
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// sShield := false ;
11994: LD_ADDR_EXP 85
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// sTime := false ;
12002: LD_ADDR_EXP 86
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// sTools := false ;
12010: LD_ADDR_EXP 87
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// sSold := false ;
12018: LD_ADDR_EXP 52
12022: PUSH
12023: LD_INT 0
12025: ST_TO_ADDR
// sDiff := false ;
12026: LD_ADDR_EXP 53
12030: PUSH
12031: LD_INT 0
12033: ST_TO_ADDR
// sFog := false ;
12034: LD_ADDR_EXP 56
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// sReset := false ;
12042: LD_ADDR_EXP 57
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// sSun := false ;
12050: LD_ADDR_EXP 58
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// sTiger := false ;
12058: LD_ADDR_EXP 54
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// sBomb := false ;
12066: LD_ADDR_EXP 55
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// sWound := false ;
12074: LD_ADDR_EXP 63
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// sBetray := false ;
12082: LD_ADDR_EXP 67
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// sContamin := false ;
12090: LD_ADDR_EXP 68
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// sOil := false ;
12098: LD_ADDR_EXP 70
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// sStu := false ;
12106: LD_ADDR_EXP 74
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// sBazooka := false ;
12114: LD_ADDR_EXP 77
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// sMortar := false ;
12122: LD_ADDR_EXP 78
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// sRanger := false ;
12130: LD_ADDR_EXP 88
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// end ;
12138: LD_VAR 0 1
12142: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12143: LD_INT 0
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
// result := [ ] ;
12150: LD_ADDR_VAR 0 1
12154: PUSH
12155: EMPTY
12156: ST_TO_ADDR
// if campaign_id = 1 then
12157: LD_OWVAR 69
12161: PUSH
12162: LD_INT 1
12164: EQUAL
12165: IFFALSE 15103
// begin case mission_number of 1 :
12167: LD_OWVAR 70
12171: PUSH
12172: LD_INT 1
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12244
12180: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12181: LD_ADDR_VAR 0 1
12185: PUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 4
12191: PUSH
12192: LD_INT 11
12194: PUSH
12195: LD_INT 12
12197: PUSH
12198: LD_INT 15
12200: PUSH
12201: LD_INT 16
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_INT 23
12209: PUSH
12210: LD_INT 26
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 101
12226: PUSH
12227: LD_INT 102
12229: PUSH
12230: LD_INT 106
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: ST_TO_ADDR
12242: GO 15101
12244: LD_INT 2
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12324
12252: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 4
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 15
12272: PUSH
12273: LD_INT 16
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 23
12281: PUSH
12282: LD_INT 26
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 101
12298: PUSH
12299: LD_INT 102
12301: PUSH
12302: LD_INT 105
12304: PUSH
12305: LD_INT 106
12307: PUSH
12308: LD_INT 108
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: ST_TO_ADDR
12322: GO 15101
12324: LD_INT 3
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12408
12332: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 4
12343: PUSH
12344: LD_INT 5
12346: PUSH
12347: LD_INT 11
12349: PUSH
12350: LD_INT 12
12352: PUSH
12353: LD_INT 15
12355: PUSH
12356: LD_INT 16
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: LD_INT 26
12364: PUSH
12365: LD_INT 36
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 101
12382: PUSH
12383: LD_INT 102
12385: PUSH
12386: LD_INT 105
12388: PUSH
12389: LD_INT 106
12391: PUSH
12392: LD_INT 108
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: ST_TO_ADDR
12406: GO 15101
12408: LD_INT 4
12410: DOUBLE
12411: EQUAL
12412: IFTRUE 12416
12414: GO 12500
12416: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12417: LD_ADDR_VAR 0 1
12421: PUSH
12422: LD_INT 2
12424: PUSH
12425: LD_INT 4
12427: PUSH
12428: LD_INT 5
12430: PUSH
12431: LD_INT 8
12433: PUSH
12434: LD_INT 11
12436: PUSH
12437: LD_INT 12
12439: PUSH
12440: LD_INT 15
12442: PUSH
12443: LD_INT 16
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_INT 23
12451: PUSH
12452: LD_INT 26
12454: PUSH
12455: LD_INT 36
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 101
12474: PUSH
12475: LD_INT 102
12477: PUSH
12478: LD_INT 105
12480: PUSH
12481: LD_INT 106
12483: PUSH
12484: LD_INT 108
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: ST_TO_ADDR
12498: GO 15101
12500: LD_INT 5
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12608
12508: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: LD_INT 5
12522: PUSH
12523: LD_INT 6
12525: PUSH
12526: LD_INT 8
12528: PUSH
12529: LD_INT 11
12531: PUSH
12532: LD_INT 12
12534: PUSH
12535: LD_INT 15
12537: PUSH
12538: LD_INT 16
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_INT 23
12546: PUSH
12547: LD_INT 25
12549: PUSH
12550: LD_INT 26
12552: PUSH
12553: LD_INT 36
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 101
12574: PUSH
12575: LD_INT 102
12577: PUSH
12578: LD_INT 105
12580: PUSH
12581: LD_INT 106
12583: PUSH
12584: LD_INT 108
12586: PUSH
12587: LD_INT 109
12589: PUSH
12590: LD_INT 112
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: ST_TO_ADDR
12606: GO 15101
12608: LD_INT 6
12610: DOUBLE
12611: EQUAL
12612: IFTRUE 12616
12614: GO 12736
12616: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12617: LD_ADDR_VAR 0 1
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: LD_INT 6
12633: PUSH
12634: LD_INT 8
12636: PUSH
12637: LD_INT 11
12639: PUSH
12640: LD_INT 12
12642: PUSH
12643: LD_INT 15
12645: PUSH
12646: LD_INT 16
12648: PUSH
12649: LD_INT 20
12651: PUSH
12652: LD_INT 21
12654: PUSH
12655: LD_INT 22
12657: PUSH
12658: LD_INT 23
12660: PUSH
12661: LD_INT 25
12663: PUSH
12664: LD_INT 26
12666: PUSH
12667: LD_INT 30
12669: PUSH
12670: LD_INT 31
12672: PUSH
12673: LD_INT 32
12675: PUSH
12676: LD_INT 36
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 101
12702: PUSH
12703: LD_INT 102
12705: PUSH
12706: LD_INT 105
12708: PUSH
12709: LD_INT 106
12711: PUSH
12712: LD_INT 108
12714: PUSH
12715: LD_INT 109
12717: PUSH
12718: LD_INT 112
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 15101
12736: LD_INT 7
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12844
12744: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 5
12758: PUSH
12759: LD_INT 7
12761: PUSH
12762: LD_INT 11
12764: PUSH
12765: LD_INT 12
12767: PUSH
12768: LD_INT 15
12770: PUSH
12771: LD_INT 16
12773: PUSH
12774: LD_INT 20
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 22
12782: PUSH
12783: LD_INT 23
12785: PUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 26
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 101
12810: PUSH
12811: LD_INT 102
12813: PUSH
12814: LD_INT 103
12816: PUSH
12817: LD_INT 105
12819: PUSH
12820: LD_INT 106
12822: PUSH
12823: LD_INT 108
12825: PUSH
12826: LD_INT 112
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: ST_TO_ADDR
12842: GO 15101
12844: LD_INT 8
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 12980
12852: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12853: LD_ADDR_VAR 0 1
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: LD_INT 4
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 6
12869: PUSH
12870: LD_INT 7
12872: PUSH
12873: LD_INT 8
12875: PUSH
12876: LD_INT 11
12878: PUSH
12879: LD_INT 12
12881: PUSH
12882: LD_INT 15
12884: PUSH
12885: LD_INT 16
12887: PUSH
12888: LD_INT 20
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 22
12896: PUSH
12897: LD_INT 23
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 26
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 31
12911: PUSH
12912: LD_INT 32
12914: PUSH
12915: LD_INT 36
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 101
12942: PUSH
12943: LD_INT 102
12945: PUSH
12946: LD_INT 103
12948: PUSH
12949: LD_INT 105
12951: PUSH
12952: LD_INT 106
12954: PUSH
12955: LD_INT 108
12957: PUSH
12958: LD_INT 109
12960: PUSH
12961: LD_INT 112
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: ST_TO_ADDR
12978: GO 15101
12980: LD_INT 9
12982: DOUBLE
12983: EQUAL
12984: IFTRUE 12988
12986: GO 13124
12988: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: LD_INT 2
12996: PUSH
12997: LD_INT 4
12999: PUSH
13000: LD_INT 5
13002: PUSH
13003: LD_INT 6
13005: PUSH
13006: LD_INT 7
13008: PUSH
13009: LD_INT 8
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 15
13020: PUSH
13021: LD_INT 16
13023: PUSH
13024: LD_INT 20
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 22
13032: PUSH
13033: LD_INT 23
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 28
13044: PUSH
13045: LD_INT 30
13047: PUSH
13048: LD_INT 31
13050: PUSH
13051: LD_INT 32
13053: PUSH
13054: LD_INT 36
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 101
13082: PUSH
13083: LD_INT 102
13085: PUSH
13086: LD_INT 103
13088: PUSH
13089: LD_INT 105
13091: PUSH
13092: LD_INT 106
13094: PUSH
13095: LD_INT 108
13097: PUSH
13098: LD_INT 109
13100: PUSH
13101: LD_INT 112
13103: PUSH
13104: LD_INT 114
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: ST_TO_ADDR
13122: GO 15101
13124: LD_INT 10
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13316
13132: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: LD_INT 4
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: LD_INT 6
13149: PUSH
13150: LD_INT 7
13152: PUSH
13153: LD_INT 8
13155: PUSH
13156: LD_INT 9
13158: PUSH
13159: LD_INT 10
13161: PUSH
13162: LD_INT 11
13164: PUSH
13165: LD_INT 12
13167: PUSH
13168: LD_INT 13
13170: PUSH
13171: LD_INT 14
13173: PUSH
13174: LD_INT 15
13176: PUSH
13177: LD_INT 16
13179: PUSH
13180: LD_INT 17
13182: PUSH
13183: LD_INT 18
13185: PUSH
13186: LD_INT 19
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_INT 23
13200: PUSH
13201: LD_INT 24
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 26
13209: PUSH
13210: LD_INT 28
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 31
13218: PUSH
13219: LD_INT 32
13221: PUSH
13222: LD_INT 36
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 101
13258: PUSH
13259: LD_INT 102
13261: PUSH
13262: LD_INT 103
13264: PUSH
13265: LD_INT 104
13267: PUSH
13268: LD_INT 105
13270: PUSH
13271: LD_INT 106
13273: PUSH
13274: LD_INT 107
13276: PUSH
13277: LD_INT 108
13279: PUSH
13280: LD_INT 109
13282: PUSH
13283: LD_INT 110
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: LD_INT 112
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: ST_TO_ADDR
13314: GO 15101
13316: LD_INT 11
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13516
13324: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: LD_INT 4
13338: PUSH
13339: LD_INT 5
13341: PUSH
13342: LD_INT 6
13344: PUSH
13345: LD_INT 7
13347: PUSH
13348: LD_INT 8
13350: PUSH
13351: LD_INT 9
13353: PUSH
13354: LD_INT 10
13356: PUSH
13357: LD_INT 11
13359: PUSH
13360: LD_INT 12
13362: PUSH
13363: LD_INT 13
13365: PUSH
13366: LD_INT 14
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 17
13377: PUSH
13378: LD_INT 18
13380: PUSH
13381: LD_INT 19
13383: PUSH
13384: LD_INT 20
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 23
13395: PUSH
13396: LD_INT 24
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 26
13404: PUSH
13405: LD_INT 28
13407: PUSH
13408: LD_INT 30
13410: PUSH
13411: LD_INT 31
13413: PUSH
13414: LD_INT 32
13416: PUSH
13417: LD_INT 34
13419: PUSH
13420: LD_INT 36
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 101
13458: PUSH
13459: LD_INT 102
13461: PUSH
13462: LD_INT 103
13464: PUSH
13465: LD_INT 104
13467: PUSH
13468: LD_INT 105
13470: PUSH
13471: LD_INT 106
13473: PUSH
13474: LD_INT 107
13476: PUSH
13477: LD_INT 108
13479: PUSH
13480: LD_INT 109
13482: PUSH
13483: LD_INT 110
13485: PUSH
13486: LD_INT 111
13488: PUSH
13489: LD_INT 112
13491: PUSH
13492: LD_INT 114
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: ST_TO_ADDR
13514: GO 15101
13516: LD_INT 12
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13732
13524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: LD_INT 3
13538: PUSH
13539: LD_INT 4
13541: PUSH
13542: LD_INT 5
13544: PUSH
13545: LD_INT 6
13547: PUSH
13548: LD_INT 7
13550: PUSH
13551: LD_INT 8
13553: PUSH
13554: LD_INT 9
13556: PUSH
13557: LD_INT 10
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: LD_INT 12
13565: PUSH
13566: LD_INT 13
13568: PUSH
13569: LD_INT 14
13571: PUSH
13572: LD_INT 15
13574: PUSH
13575: LD_INT 16
13577: PUSH
13578: LD_INT 17
13580: PUSH
13581: LD_INT 18
13583: PUSH
13584: LD_INT 19
13586: PUSH
13587: LD_INT 20
13589: PUSH
13590: LD_INT 21
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_INT 23
13598: PUSH
13599: LD_INT 24
13601: PUSH
13602: LD_INT 25
13604: PUSH
13605: LD_INT 26
13607: PUSH
13608: LD_INT 27
13610: PUSH
13611: LD_INT 28
13613: PUSH
13614: LD_INT 30
13616: PUSH
13617: LD_INT 31
13619: PUSH
13620: LD_INT 32
13622: PUSH
13623: LD_INT 33
13625: PUSH
13626: LD_INT 34
13628: PUSH
13629: LD_INT 36
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 101
13670: PUSH
13671: LD_INT 102
13673: PUSH
13674: LD_INT 103
13676: PUSH
13677: LD_INT 104
13679: PUSH
13680: LD_INT 105
13682: PUSH
13683: LD_INT 106
13685: PUSH
13686: LD_INT 107
13688: PUSH
13689: LD_INT 108
13691: PUSH
13692: LD_INT 109
13694: PUSH
13695: LD_INT 110
13697: PUSH
13698: LD_INT 111
13700: PUSH
13701: LD_INT 112
13703: PUSH
13704: LD_INT 113
13706: PUSH
13707: LD_INT 114
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: ST_TO_ADDR
13730: GO 15101
13732: LD_INT 13
13734: DOUBLE
13735: EQUAL
13736: IFTRUE 13740
13738: GO 13936
13740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13741: LD_ADDR_VAR 0 1
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: LD_INT 2
13751: PUSH
13752: LD_INT 3
13754: PUSH
13755: LD_INT 4
13757: PUSH
13758: LD_INT 5
13760: PUSH
13761: LD_INT 8
13763: PUSH
13764: LD_INT 9
13766: PUSH
13767: LD_INT 10
13769: PUSH
13770: LD_INT 11
13772: PUSH
13773: LD_INT 12
13775: PUSH
13776: LD_INT 14
13778: PUSH
13779: LD_INT 15
13781: PUSH
13782: LD_INT 16
13784: PUSH
13785: LD_INT 17
13787: PUSH
13788: LD_INT 18
13790: PUSH
13791: LD_INT 19
13793: PUSH
13794: LD_INT 20
13796: PUSH
13797: LD_INT 21
13799: PUSH
13800: LD_INT 22
13802: PUSH
13803: LD_INT 23
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 25
13811: PUSH
13812: LD_INT 26
13814: PUSH
13815: LD_INT 27
13817: PUSH
13818: LD_INT 28
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_INT 31
13826: PUSH
13827: LD_INT 32
13829: PUSH
13830: LD_INT 33
13832: PUSH
13833: LD_INT 34
13835: PUSH
13836: LD_INT 36
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 101
13874: PUSH
13875: LD_INT 102
13877: PUSH
13878: LD_INT 103
13880: PUSH
13881: LD_INT 104
13883: PUSH
13884: LD_INT 105
13886: PUSH
13887: LD_INT 106
13889: PUSH
13890: LD_INT 107
13892: PUSH
13893: LD_INT 108
13895: PUSH
13896: LD_INT 109
13898: PUSH
13899: LD_INT 110
13901: PUSH
13902: LD_INT 111
13904: PUSH
13905: LD_INT 112
13907: PUSH
13908: LD_INT 113
13910: PUSH
13911: LD_INT 114
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: ST_TO_ADDR
13934: GO 15101
13936: LD_INT 14
13938: DOUBLE
13939: EQUAL
13940: IFTRUE 13944
13942: GO 14156
13944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13945: LD_ADDR_VAR 0 1
13949: PUSH
13950: LD_INT 1
13952: PUSH
13953: LD_INT 2
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: LD_INT 4
13961: PUSH
13962: LD_INT 5
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: LD_INT 8
13973: PUSH
13974: LD_INT 9
13976: PUSH
13977: LD_INT 10
13979: PUSH
13980: LD_INT 11
13982: PUSH
13983: LD_INT 12
13985: PUSH
13986: LD_INT 13
13988: PUSH
13989: LD_INT 14
13991: PUSH
13992: LD_INT 15
13994: PUSH
13995: LD_INT 16
13997: PUSH
13998: LD_INT 17
14000: PUSH
14001: LD_INT 18
14003: PUSH
14004: LD_INT 19
14006: PUSH
14007: LD_INT 20
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_INT 23
14018: PUSH
14019: LD_INT 24
14021: PUSH
14022: LD_INT 25
14024: PUSH
14025: LD_INT 26
14027: PUSH
14028: LD_INT 27
14030: PUSH
14031: LD_INT 28
14033: PUSH
14034: LD_INT 29
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_INT 31
14042: PUSH
14043: LD_INT 32
14045: PUSH
14046: LD_INT 33
14048: PUSH
14049: LD_INT 34
14051: PUSH
14052: LD_INT 36
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 101
14094: PUSH
14095: LD_INT 102
14097: PUSH
14098: LD_INT 103
14100: PUSH
14101: LD_INT 104
14103: PUSH
14104: LD_INT 105
14106: PUSH
14107: LD_INT 106
14109: PUSH
14110: LD_INT 107
14112: PUSH
14113: LD_INT 108
14115: PUSH
14116: LD_INT 109
14118: PUSH
14119: LD_INT 110
14121: PUSH
14122: LD_INT 111
14124: PUSH
14125: LD_INT 112
14127: PUSH
14128: LD_INT 113
14130: PUSH
14131: LD_INT 114
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: ST_TO_ADDR
14154: GO 15101
14156: LD_INT 15
14158: DOUBLE
14159: EQUAL
14160: IFTRUE 14164
14162: GO 14376
14164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_INT 1
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: LD_INT 4
14181: PUSH
14182: LD_INT 5
14184: PUSH
14185: LD_INT 6
14187: PUSH
14188: LD_INT 7
14190: PUSH
14191: LD_INT 8
14193: PUSH
14194: LD_INT 9
14196: PUSH
14197: LD_INT 10
14199: PUSH
14200: LD_INT 11
14202: PUSH
14203: LD_INT 12
14205: PUSH
14206: LD_INT 13
14208: PUSH
14209: LD_INT 14
14211: PUSH
14212: LD_INT 15
14214: PUSH
14215: LD_INT 16
14217: PUSH
14218: LD_INT 17
14220: PUSH
14221: LD_INT 18
14223: PUSH
14224: LD_INT 19
14226: PUSH
14227: LD_INT 20
14229: PUSH
14230: LD_INT 21
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_INT 23
14238: PUSH
14239: LD_INT 24
14241: PUSH
14242: LD_INT 25
14244: PUSH
14245: LD_INT 26
14247: PUSH
14248: LD_INT 27
14250: PUSH
14251: LD_INT 28
14253: PUSH
14254: LD_INT 29
14256: PUSH
14257: LD_INT 30
14259: PUSH
14260: LD_INT 31
14262: PUSH
14263: LD_INT 32
14265: PUSH
14266: LD_INT 33
14268: PUSH
14269: LD_INT 34
14271: PUSH
14272: LD_INT 36
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 101
14314: PUSH
14315: LD_INT 102
14317: PUSH
14318: LD_INT 103
14320: PUSH
14321: LD_INT 104
14323: PUSH
14324: LD_INT 105
14326: PUSH
14327: LD_INT 106
14329: PUSH
14330: LD_INT 107
14332: PUSH
14333: LD_INT 108
14335: PUSH
14336: LD_INT 109
14338: PUSH
14339: LD_INT 110
14341: PUSH
14342: LD_INT 111
14344: PUSH
14345: LD_INT 112
14347: PUSH
14348: LD_INT 113
14350: PUSH
14351: LD_INT 114
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: ST_TO_ADDR
14374: GO 15101
14376: LD_INT 16
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14508
14384: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14385: LD_ADDR_VAR 0 1
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: LD_INT 4
14395: PUSH
14396: LD_INT 5
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: LD_INT 11
14404: PUSH
14405: LD_INT 12
14407: PUSH
14408: LD_INT 15
14410: PUSH
14411: LD_INT 16
14413: PUSH
14414: LD_INT 20
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 25
14428: PUSH
14429: LD_INT 26
14431: PUSH
14432: LD_INT 30
14434: PUSH
14435: LD_INT 31
14437: PUSH
14438: LD_INT 32
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 34
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 101
14470: PUSH
14471: LD_INT 102
14473: PUSH
14474: LD_INT 103
14476: PUSH
14477: LD_INT 106
14479: PUSH
14480: LD_INT 108
14482: PUSH
14483: LD_INT 112
14485: PUSH
14486: LD_INT 113
14488: PUSH
14489: LD_INT 114
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: ST_TO_ADDR
14506: GO 15101
14508: LD_INT 17
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14728
14516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14517: LD_ADDR_VAR 0 1
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 4
14533: PUSH
14534: LD_INT 5
14536: PUSH
14537: LD_INT 6
14539: PUSH
14540: LD_INT 7
14542: PUSH
14543: LD_INT 8
14545: PUSH
14546: LD_INT 9
14548: PUSH
14549: LD_INT 10
14551: PUSH
14552: LD_INT 11
14554: PUSH
14555: LD_INT 12
14557: PUSH
14558: LD_INT 13
14560: PUSH
14561: LD_INT 14
14563: PUSH
14564: LD_INT 15
14566: PUSH
14567: LD_INT 16
14569: PUSH
14570: LD_INT 17
14572: PUSH
14573: LD_INT 18
14575: PUSH
14576: LD_INT 19
14578: PUSH
14579: LD_INT 20
14581: PUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_INT 23
14590: PUSH
14591: LD_INT 24
14593: PUSH
14594: LD_INT 25
14596: PUSH
14597: LD_INT 26
14599: PUSH
14600: LD_INT 27
14602: PUSH
14603: LD_INT 28
14605: PUSH
14606: LD_INT 29
14608: PUSH
14609: LD_INT 30
14611: PUSH
14612: LD_INT 31
14614: PUSH
14615: LD_INT 32
14617: PUSH
14618: LD_INT 33
14620: PUSH
14621: LD_INT 34
14623: PUSH
14624: LD_INT 36
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 101
14666: PUSH
14667: LD_INT 102
14669: PUSH
14670: LD_INT 103
14672: PUSH
14673: LD_INT 104
14675: PUSH
14676: LD_INT 105
14678: PUSH
14679: LD_INT 106
14681: PUSH
14682: LD_INT 107
14684: PUSH
14685: LD_INT 108
14687: PUSH
14688: LD_INT 109
14690: PUSH
14691: LD_INT 110
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 112
14699: PUSH
14700: LD_INT 113
14702: PUSH
14703: LD_INT 114
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: ST_TO_ADDR
14726: GO 15101
14728: LD_INT 18
14730: DOUBLE
14731: EQUAL
14732: IFTRUE 14736
14734: GO 14872
14736: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 4
14747: PUSH
14748: LD_INT 5
14750: PUSH
14751: LD_INT 7
14753: PUSH
14754: LD_INT 11
14756: PUSH
14757: LD_INT 12
14759: PUSH
14760: LD_INT 15
14762: PUSH
14763: LD_INT 16
14765: PUSH
14766: LD_INT 20
14768: PUSH
14769: LD_INT 21
14771: PUSH
14772: LD_INT 22
14774: PUSH
14775: LD_INT 23
14777: PUSH
14778: LD_INT 25
14780: PUSH
14781: LD_INT 26
14783: PUSH
14784: LD_INT 30
14786: PUSH
14787: LD_INT 31
14789: PUSH
14790: LD_INT 32
14792: PUSH
14793: LD_INT 33
14795: PUSH
14796: LD_INT 34
14798: PUSH
14799: LD_INT 35
14801: PUSH
14802: LD_INT 36
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 101
14830: PUSH
14831: LD_INT 102
14833: PUSH
14834: LD_INT 103
14836: PUSH
14837: LD_INT 106
14839: PUSH
14840: LD_INT 108
14842: PUSH
14843: LD_INT 112
14845: PUSH
14846: LD_INT 113
14848: PUSH
14849: LD_INT 114
14851: PUSH
14852: LD_INT 115
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: ST_TO_ADDR
14870: GO 15101
14872: LD_INT 19
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14880
14878: GO 15100
14880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_INT 7
14906: PUSH
14907: LD_INT 8
14909: PUSH
14910: LD_INT 9
14912: PUSH
14913: LD_INT 10
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 13
14924: PUSH
14925: LD_INT 14
14927: PUSH
14928: LD_INT 15
14930: PUSH
14931: LD_INT 16
14933: PUSH
14934: LD_INT 17
14936: PUSH
14937: LD_INT 18
14939: PUSH
14940: LD_INT 19
14942: PUSH
14943: LD_INT 20
14945: PUSH
14946: LD_INT 21
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_INT 23
14954: PUSH
14955: LD_INT 24
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 26
14963: PUSH
14964: LD_INT 27
14966: PUSH
14967: LD_INT 28
14969: PUSH
14970: LD_INT 29
14972: PUSH
14973: LD_INT 30
14975: PUSH
14976: LD_INT 31
14978: PUSH
14979: LD_INT 32
14981: PUSH
14982: LD_INT 33
14984: PUSH
14985: LD_INT 34
14987: PUSH
14988: LD_INT 35
14990: PUSH
14991: LD_INT 36
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 101
15034: PUSH
15035: LD_INT 102
15037: PUSH
15038: LD_INT 103
15040: PUSH
15041: LD_INT 104
15043: PUSH
15044: LD_INT 105
15046: PUSH
15047: LD_INT 106
15049: PUSH
15050: LD_INT 107
15052: PUSH
15053: LD_INT 108
15055: PUSH
15056: LD_INT 109
15058: PUSH
15059: LD_INT 110
15061: PUSH
15062: LD_INT 111
15064: PUSH
15065: LD_INT 112
15067: PUSH
15068: LD_INT 113
15070: PUSH
15071: LD_INT 114
15073: PUSH
15074: LD_INT 115
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end else
15101: GO 15320
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15103: LD_ADDR_VAR 0 1
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: LD_INT 6
15125: PUSH
15126: LD_INT 7
15128: PUSH
15129: LD_INT 8
15131: PUSH
15132: LD_INT 9
15134: PUSH
15135: LD_INT 10
15137: PUSH
15138: LD_INT 11
15140: PUSH
15141: LD_INT 12
15143: PUSH
15144: LD_INT 13
15146: PUSH
15147: LD_INT 14
15149: PUSH
15150: LD_INT 15
15152: PUSH
15153: LD_INT 16
15155: PUSH
15156: LD_INT 17
15158: PUSH
15159: LD_INT 18
15161: PUSH
15162: LD_INT 19
15164: PUSH
15165: LD_INT 20
15167: PUSH
15168: LD_INT 21
15170: PUSH
15171: LD_INT 22
15173: PUSH
15174: LD_INT 23
15176: PUSH
15177: LD_INT 24
15179: PUSH
15180: LD_INT 25
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 27
15188: PUSH
15189: LD_INT 28
15191: PUSH
15192: LD_INT 29
15194: PUSH
15195: LD_INT 30
15197: PUSH
15198: LD_INT 31
15200: PUSH
15201: LD_INT 32
15203: PUSH
15204: LD_INT 33
15206: PUSH
15207: LD_INT 34
15209: PUSH
15210: LD_INT 35
15212: PUSH
15213: LD_INT 36
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 101
15256: PUSH
15257: LD_INT 102
15259: PUSH
15260: LD_INT 103
15262: PUSH
15263: LD_INT 104
15265: PUSH
15266: LD_INT 105
15268: PUSH
15269: LD_INT 106
15271: PUSH
15272: LD_INT 107
15274: PUSH
15275: LD_INT 108
15277: PUSH
15278: LD_INT 109
15280: PUSH
15281: LD_INT 110
15283: PUSH
15284: LD_INT 111
15286: PUSH
15287: LD_INT 112
15289: PUSH
15290: LD_INT 113
15292: PUSH
15293: LD_INT 114
15295: PUSH
15296: LD_INT 115
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: ST_TO_ADDR
// if result then
15320: LD_VAR 0 1
15324: IFFALSE 15613
// begin normal :=  ;
15326: LD_ADDR_VAR 0 3
15330: PUSH
15331: LD_STRING 
15333: ST_TO_ADDR
// hardcore :=  ;
15334: LD_ADDR_VAR 0 4
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// for i = 1 to normalCounter do
15342: LD_ADDR_VAR 0 5
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_EXP 36
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15459
// begin tmp := 0 ;
15360: LD_ADDR_VAR 0 2
15364: PUSH
15365: LD_STRING 0
15367: ST_TO_ADDR
// if result [ 1 ] then
15368: LD_VAR 0 1
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: IFFALSE 15441
// if result [ 1 ] [ 1 ] = i then
15378: LD_VAR 0 1
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PUSH
15391: LD_VAR 0 5
15395: EQUAL
15396: IFFALSE 15441
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: LD_VAR 0 1
15415: PUSH
15416: LD_INT 1
15418: ARRAY
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: CALL_OW 3
15427: PPUSH
15428: CALL_OW 1
15432: ST_TO_ADDR
// tmp := 1 ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_STRING 1
15440: ST_TO_ADDR
// end ; normal := normal & tmp ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_VAR 0 3
15450: PUSH
15451: LD_VAR 0 2
15455: STR
15456: ST_TO_ADDR
// end ;
15457: GO 15357
15459: POP
15460: POP
// for i = 1 to hardcoreCounter do
15461: LD_ADDR_VAR 0 5
15465: PUSH
15466: DOUBLE
15467: LD_INT 1
15469: DEC
15470: ST_TO_ADDR
15471: LD_EXP 37
15475: PUSH
15476: FOR_TO
15477: IFFALSE 15582
// begin tmp := 0 ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: LD_STRING 0
15486: ST_TO_ADDR
// if result [ 2 ] then
15487: LD_VAR 0 1
15491: PUSH
15492: LD_INT 2
15494: ARRAY
15495: IFFALSE 15564
// if result [ 2 ] [ 1 ] = 100 + i then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_INT 2
15504: ARRAY
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: PUSH
15510: LD_INT 100
15512: PUSH
15513: LD_VAR 0 5
15517: PLUS
15518: EQUAL
15519: IFFALSE 15564
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15521: LD_ADDR_VAR 0 1
15525: PUSH
15526: LD_VAR 0 1
15530: PPUSH
15531: LD_INT 2
15533: PPUSH
15534: LD_VAR 0 1
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 3
15550: PPUSH
15551: CALL_OW 1
15555: ST_TO_ADDR
// tmp := 1 ;
15556: LD_ADDR_VAR 0 2
15560: PUSH
15561: LD_STRING 1
15563: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15564: LD_ADDR_VAR 0 4
15568: PUSH
15569: LD_VAR 0 4
15573: PUSH
15574: LD_VAR 0 2
15578: STR
15579: ST_TO_ADDR
// end ;
15580: GO 15476
15582: POP
15583: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15584: LD_STRING getStreamItemsFromMission("
15586: PUSH
15587: LD_VAR 0 3
15591: STR
15592: PUSH
15593: LD_STRING ","
15595: STR
15596: PUSH
15597: LD_VAR 0 4
15601: STR
15602: PUSH
15603: LD_STRING ")
15605: STR
15606: PPUSH
15607: CALL_OW 559
// end else
15611: GO 15620
// ToLua ( getStreamItemsFromMission("","") ) ;
15613: LD_STRING getStreamItemsFromMission("","")
15615: PPUSH
15616: CALL_OW 559
// end ;
15620: LD_VAR 0 1
15624: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15625: LD_EXP 35
15629: PUSH
15630: LD_EXP 40
15634: AND
15635: IFFALSE 15759
15637: GO 15639
15639: DISABLE
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
// begin enable ;
15644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15645: LD_ADDR_VAR 0 2
15649: PUSH
15650: LD_INT 22
15652: PUSH
15653: LD_OWVAR 2
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 34
15667: PUSH
15668: LD_INT 7
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 34
15677: PUSH
15678: LD_INT 45
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 34
15687: PUSH
15688: LD_INT 28
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 34
15697: PUSH
15698: LD_INT 47
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 2
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 15759
// for i in tmp do
15730: LD_ADDR_VAR 0 1
15734: PUSH
15735: LD_VAR 0 2
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15757
// begin SetLives ( i , 0 ) ;
15743: LD_VAR 0 1
15747: PPUSH
15748: LD_INT 0
15750: PPUSH
15751: CALL_OW 234
// end ;
15755: GO 15740
15757: POP
15758: POP
// end ;
15759: PPOPN 2
15761: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15762: LD_EXP 35
15766: PUSH
15767: LD_EXP 41
15771: AND
15772: IFFALSE 15856
15774: GO 15776
15776: DISABLE
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
// begin enable ;
15781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15782: LD_ADDR_VAR 0 2
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_OWVAR 2
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: ST_TO_ADDR
// if not tmp then
15818: LD_VAR 0 2
15822: NOT
15823: IFFALSE 15827
// exit ;
15825: GO 15856
// for i in tmp do
15827: LD_ADDR_VAR 0 1
15831: PUSH
15832: LD_VAR 0 2
15836: PUSH
15837: FOR_IN
15838: IFFALSE 15854
// begin SetLives ( i , 0 ) ;
15840: LD_VAR 0 1
15844: PPUSH
15845: LD_INT 0
15847: PPUSH
15848: CALL_OW 234
// end ;
15852: GO 15837
15854: POP
15855: POP
// end ;
15856: PPOPN 2
15858: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15859: LD_EXP 35
15863: PUSH
15864: LD_EXP 38
15868: AND
15869: IFFALSE 15962
15871: GO 15873
15873: DISABLE
15874: LD_INT 0
15876: PPUSH
// begin enable ;
15877: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15878: LD_ADDR_VAR 0 1
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_OWVAR 2
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 25
15900: PUSH
15901: LD_INT 5
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 25
15910: PUSH
15911: LD_INT 9
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 25
15920: PUSH
15921: LD_INT 8
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: FOR_IN
15944: IFFALSE 15960
// begin SetClass ( i , 1 ) ;
15946: LD_VAR 0 1
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: CALL_OW 336
// end ;
15958: GO 15943
15960: POP
15961: POP
// end ;
15962: PPOPN 1
15964: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15965: LD_EXP 35
15969: PUSH
15970: LD_EXP 39
15974: AND
15975: PUSH
15976: LD_OWVAR 65
15980: PUSH
15981: LD_INT 7
15983: LESS
15984: AND
15985: IFFALSE 15999
15987: GO 15989
15989: DISABLE
// begin enable ;
15990: ENABLE
// game_speed := 7 ;
15991: LD_ADDR_OWVAR 65
15995: PUSH
15996: LD_INT 7
15998: ST_TO_ADDR
// end ;
15999: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16000: LD_EXP 35
16004: PUSH
16005: LD_EXP 42
16009: AND
16010: IFFALSE 16212
16012: GO 16014
16014: DISABLE
16015: LD_INT 0
16017: PPUSH
16018: PPUSH
16019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16020: LD_ADDR_VAR 0 3
16024: PUSH
16025: LD_INT 81
16027: PUSH
16028: LD_OWVAR 2
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 21
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PPUSH
16051: CALL_OW 69
16055: ST_TO_ADDR
// if not tmp then
16056: LD_VAR 0 3
16060: NOT
16061: IFFALSE 16065
// exit ;
16063: GO 16212
// if tmp > 5 then
16065: LD_VAR 0 3
16069: PUSH
16070: LD_INT 5
16072: GREATER
16073: IFFALSE 16085
// k := 5 else
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_INT 5
16082: ST_TO_ADDR
16083: GO 16095
// k := tmp ;
16085: LD_ADDR_VAR 0 2
16089: PUSH
16090: LD_VAR 0 3
16094: ST_TO_ADDR
// for i := 1 to k do
16095: LD_ADDR_VAR 0 1
16099: PUSH
16100: DOUBLE
16101: LD_INT 1
16103: DEC
16104: ST_TO_ADDR
16105: LD_VAR 0 2
16109: PUSH
16110: FOR_TO
16111: IFFALSE 16210
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16113: LD_VAR 0 3
16117: PUSH
16118: LD_VAR 0 1
16122: ARRAY
16123: PPUSH
16124: LD_VAR 0 1
16128: PUSH
16129: LD_INT 4
16131: MOD
16132: PUSH
16133: LD_INT 1
16135: PLUS
16136: PPUSH
16137: CALL_OW 259
16141: PUSH
16142: LD_INT 10
16144: LESS
16145: IFFALSE 16208
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16147: LD_VAR 0 3
16151: PUSH
16152: LD_VAR 0 1
16156: ARRAY
16157: PPUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 4
16165: MOD
16166: PUSH
16167: LD_INT 1
16169: PLUS
16170: PPUSH
16171: LD_VAR 0 3
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: LD_VAR 0 1
16186: PUSH
16187: LD_INT 4
16189: MOD
16190: PUSH
16191: LD_INT 1
16193: PLUS
16194: PPUSH
16195: CALL_OW 259
16199: PUSH
16200: LD_INT 1
16202: PLUS
16203: PPUSH
16204: CALL_OW 237
16208: GO 16110
16210: POP
16211: POP
// end ;
16212: PPOPN 3
16214: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16215: LD_EXP 35
16219: PUSH
16220: LD_EXP 43
16224: AND
16225: IFFALSE 16245
16227: GO 16229
16229: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16230: LD_INT 4
16232: PPUSH
16233: LD_OWVAR 2
16237: PPUSH
16238: LD_INT 0
16240: PPUSH
16241: CALL_OW 324
16245: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16246: LD_EXP 35
16250: PUSH
16251: LD_EXP 72
16255: AND
16256: IFFALSE 16276
16258: GO 16260
16260: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16261: LD_INT 19
16263: PPUSH
16264: LD_OWVAR 2
16268: PPUSH
16269: LD_INT 0
16271: PPUSH
16272: CALL_OW 324
16276: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16277: LD_EXP 35
16281: PUSH
16282: LD_EXP 44
16286: AND
16287: IFFALSE 16389
16289: GO 16291
16291: DISABLE
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
// begin enable ;
16296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16297: LD_ADDR_VAR 0 2
16301: PUSH
16302: LD_INT 22
16304: PUSH
16305: LD_OWVAR 2
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 11
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 34
16329: PUSH
16330: LD_INT 30
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 69
16350: ST_TO_ADDR
// if not tmp then
16351: LD_VAR 0 2
16355: NOT
16356: IFFALSE 16360
// exit ;
16358: GO 16389
// for i in tmp do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 2
16369: PUSH
16370: FOR_IN
16371: IFFALSE 16387
// begin SetLives ( i , 0 ) ;
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_INT 0
16380: PPUSH
16381: CALL_OW 234
// end ;
16385: GO 16370
16387: POP
16388: POP
// end ;
16389: PPOPN 2
16391: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16392: LD_EXP 35
16396: PUSH
16397: LD_EXP 45
16401: AND
16402: IFFALSE 16422
16404: GO 16406
16406: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16407: LD_INT 32
16409: PPUSH
16410: LD_OWVAR 2
16414: PPUSH
16415: LD_INT 0
16417: PPUSH
16418: CALL_OW 324
16422: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16423: LD_EXP 35
16427: PUSH
16428: LD_EXP 46
16432: AND
16433: IFFALSE 16614
16435: GO 16437
16437: DISABLE
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
16442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 33
16462: PUSH
16463: LD_INT 3
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// if not tmp then
16479: LD_VAR 0 2
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16614
// side := 0 ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// for i := 1 to 8 do
16496: LD_ADDR_VAR 0 1
16500: PUSH
16501: DOUBLE
16502: LD_INT 1
16504: DEC
16505: ST_TO_ADDR
16506: LD_INT 8
16508: PUSH
16509: FOR_TO
16510: IFFALSE 16558
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16512: LD_OWVAR 2
16516: PUSH
16517: LD_VAR 0 1
16521: NONEQUAL
16522: PUSH
16523: LD_OWVAR 2
16527: PPUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 81
16537: PUSH
16538: LD_INT 2
16540: EQUAL
16541: AND
16542: IFFALSE 16556
// begin side := i ;
16544: LD_ADDR_VAR 0 3
16548: PUSH
16549: LD_VAR 0 1
16553: ST_TO_ADDR
// break ;
16554: GO 16558
// end ;
16556: GO 16509
16558: POP
16559: POP
// if not side then
16560: LD_VAR 0 3
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16614
// for i := 1 to tmp do
16569: LD_ADDR_VAR 0 1
16573: PUSH
16574: DOUBLE
16575: LD_INT 1
16577: DEC
16578: ST_TO_ADDR
16579: LD_VAR 0 2
16583: PUSH
16584: FOR_TO
16585: IFFALSE 16612
// if Prob ( 60 ) then
16587: LD_INT 60
16589: PPUSH
16590: CALL_OW 13
16594: IFFALSE 16610
// SetSide ( i , side ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_VAR 0 3
16605: PPUSH
16606: CALL_OW 235
16610: GO 16584
16612: POP
16613: POP
// end ;
16614: PPOPN 3
16616: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16617: LD_EXP 35
16621: PUSH
16622: LD_EXP 48
16626: AND
16627: IFFALSE 16746
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16635: LD_ADDR_VAR 0 1
16639: PUSH
16640: LD_INT 22
16642: PUSH
16643: LD_OWVAR 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 21
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 3
16664: PUSH
16665: LD_INT 23
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL_OW 69
16688: PUSH
16689: FOR_IN
16690: IFFALSE 16744
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 257
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: LD_INT 2
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: LD_INT 4
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: IN
16720: IFFALSE 16742
// SetClass ( un , rand ( 1 , 4 ) ) ;
16722: LD_VAR 0 1
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 4
16732: PPUSH
16733: CALL_OW 12
16737: PPUSH
16738: CALL_OW 336
16742: GO 16689
16744: POP
16745: POP
// end ;
16746: PPOPN 1
16748: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16749: LD_EXP 35
16753: PUSH
16754: LD_EXP 47
16758: AND
16759: IFFALSE 16838
16761: GO 16763
16763: DISABLE
16764: LD_INT 0
16766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16767: LD_ADDR_VAR 0 1
16771: PUSH
16772: LD_INT 22
16774: PUSH
16775: LD_OWVAR 2
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 3
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PPUSH
16798: CALL_OW 69
16802: ST_TO_ADDR
// if not tmp then
16803: LD_VAR 0 1
16807: NOT
16808: IFFALSE 16812
// exit ;
16810: GO 16838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16812: LD_VAR 0 1
16816: PUSH
16817: LD_INT 1
16819: PPUSH
16820: LD_VAR 0 1
16824: PPUSH
16825: CALL_OW 12
16829: ARRAY
16830: PPUSH
16831: LD_INT 100
16833: PPUSH
16834: CALL_OW 234
// end ;
16838: PPOPN 1
16840: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16841: LD_EXP 35
16845: PUSH
16846: LD_EXP 49
16850: AND
16851: IFFALSE 16949
16853: GO 16855
16855: DISABLE
16856: LD_INT 0
16858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: LD_INT 22
16866: PUSH
16867: LD_OWVAR 2
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 21
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: ST_TO_ADDR
// if not tmp then
16895: LD_VAR 0 1
16899: NOT
16900: IFFALSE 16904
// exit ;
16902: GO 16949
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16904: LD_VAR 0 1
16908: PUSH
16909: LD_INT 1
16911: PPUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL_OW 12
16921: ARRAY
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: LD_INT 4
16928: PPUSH
16929: CALL_OW 12
16933: PPUSH
16934: LD_INT 3000
16936: PPUSH
16937: LD_INT 9000
16939: PPUSH
16940: CALL_OW 12
16944: PPUSH
16945: CALL_OW 492
// end ;
16949: PPOPN 1
16951: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16952: LD_EXP 35
16956: PUSH
16957: LD_EXP 50
16961: AND
16962: IFFALSE 16982
16964: GO 16966
16966: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16967: LD_INT 1
16969: PPUSH
16970: LD_OWVAR 2
16974: PPUSH
16975: LD_INT 0
16977: PPUSH
16978: CALL_OW 324
16982: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16983: LD_EXP 35
16987: PUSH
16988: LD_EXP 51
16992: AND
16993: IFFALSE 17076
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 22
17009: PUSH
17010: LD_OWVAR 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 21
17021: PUSH
17022: LD_INT 3
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 69
17037: ST_TO_ADDR
// if not tmp then
17038: LD_VAR 0 2
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17076
// for i in tmp do
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: LD_VAR 0 2
17056: PUSH
17057: FOR_IN
17058: IFFALSE 17074
// SetBLevel ( i , 10 ) ;
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 10
17067: PPUSH
17068: CALL_OW 241
17072: GO 17057
17074: POP
17075: POP
// end ;
17076: PPOPN 2
17078: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17079: LD_EXP 35
17083: PUSH
17084: LD_EXP 52
17088: AND
17089: IFFALSE 17200
17091: GO 17093
17093: DISABLE
17094: LD_INT 0
17096: PPUSH
17097: PPUSH
17098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17099: LD_ADDR_VAR 0 3
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_OWVAR 2
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PPUSH
17130: CALL_OW 69
17134: ST_TO_ADDR
// if not tmp then
17135: LD_VAR 0 3
17139: NOT
17140: IFFALSE 17144
// exit ;
17142: GO 17200
// un := tmp [ rand ( 1 , tmp ) ] ;
17144: LD_ADDR_VAR 0 2
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_INT 1
17156: PPUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: CALL_OW 12
17166: ARRAY
17167: ST_TO_ADDR
// if Crawls ( un ) then
17168: LD_VAR 0 2
17172: PPUSH
17173: CALL_OW 318
17177: IFFALSE 17188
// ComWalk ( un ) ;
17179: LD_VAR 0 2
17183: PPUSH
17184: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17188: LD_VAR 0 2
17192: PPUSH
17193: LD_INT 5
17195: PPUSH
17196: CALL_OW 336
// end ;
17200: PPOPN 3
17202: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17203: LD_EXP 35
17207: PUSH
17208: LD_EXP 53
17212: AND
17213: PUSH
17214: LD_OWVAR 67
17218: PUSH
17219: LD_INT 3
17221: LESS
17222: AND
17223: IFFALSE 17242
17225: GO 17227
17227: DISABLE
// Difficulty := Difficulty + 1 ;
17228: LD_ADDR_OWVAR 67
17232: PUSH
17233: LD_OWVAR 67
17237: PUSH
17238: LD_INT 1
17240: PLUS
17241: ST_TO_ADDR
17242: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17243: LD_EXP 35
17247: PUSH
17248: LD_EXP 54
17252: AND
17253: IFFALSE 17356
17255: GO 17257
17257: DISABLE
17258: LD_INT 0
17260: PPUSH
// begin for i := 1 to 5 do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: DOUBLE
17267: LD_INT 1
17269: DEC
17270: ST_TO_ADDR
17271: LD_INT 5
17273: PUSH
17274: FOR_TO
17275: IFFALSE 17354
// begin uc_nation := nation_nature ;
17277: LD_ADDR_OWVAR 21
17281: PUSH
17282: LD_INT 0
17284: ST_TO_ADDR
// uc_side := 0 ;
17285: LD_ADDR_OWVAR 20
17289: PUSH
17290: LD_INT 0
17292: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17293: LD_ADDR_OWVAR 29
17297: PUSH
17298: LD_INT 12
17300: PUSH
17301: LD_INT 12
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: ST_TO_ADDR
// hc_agressivity := 20 ;
17308: LD_ADDR_OWVAR 35
17312: PUSH
17313: LD_INT 20
17315: ST_TO_ADDR
// hc_class := class_tiger ;
17316: LD_ADDR_OWVAR 28
17320: PUSH
17321: LD_INT 14
17323: ST_TO_ADDR
// hc_gallery :=  ;
17324: LD_ADDR_OWVAR 33
17328: PUSH
17329: LD_STRING 
17331: ST_TO_ADDR
// hc_name :=  ;
17332: LD_ADDR_OWVAR 26
17336: PUSH
17337: LD_STRING 
17339: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17340: CALL_OW 44
17344: PPUSH
17345: LD_INT 0
17347: PPUSH
17348: CALL_OW 51
// end ;
17352: GO 17274
17354: POP
17355: POP
// end ;
17356: PPOPN 1
17358: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17359: LD_EXP 35
17363: PUSH
17364: LD_EXP 55
17368: AND
17369: IFFALSE 17378
17371: GO 17373
17373: DISABLE
// StreamSibBomb ;
17374: CALL 17379 0 0
17378: END
// export function StreamSibBomb ; var i , x , y ; begin
17379: LD_INT 0
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
// result := false ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_INT 0
17392: ST_TO_ADDR
// for i := 1 to 16 do
17393: LD_ADDR_VAR 0 2
17397: PUSH
17398: DOUBLE
17399: LD_INT 1
17401: DEC
17402: ST_TO_ADDR
17403: LD_INT 16
17405: PUSH
17406: FOR_TO
17407: IFFALSE 17606
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: LD_INT 10
17416: PUSH
17417: LD_INT 20
17419: PUSH
17420: LD_INT 30
17422: PUSH
17423: LD_INT 40
17425: PUSH
17426: LD_INT 50
17428: PUSH
17429: LD_INT 60
17431: PUSH
17432: LD_INT 70
17434: PUSH
17435: LD_INT 80
17437: PUSH
17438: LD_INT 90
17440: PUSH
17441: LD_INT 100
17443: PUSH
17444: LD_INT 110
17446: PUSH
17447: LD_INT 120
17449: PUSH
17450: LD_INT 130
17452: PUSH
17453: LD_INT 140
17455: PUSH
17456: LD_INT 150
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_INT 15
17481: PPUSH
17482: CALL_OW 12
17486: ARRAY
17487: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17488: LD_ADDR_VAR 0 4
17492: PUSH
17493: LD_INT 10
17495: PUSH
17496: LD_INT 20
17498: PUSH
17499: LD_INT 30
17501: PUSH
17502: LD_INT 40
17504: PUSH
17505: LD_INT 50
17507: PUSH
17508: LD_INT 60
17510: PUSH
17511: LD_INT 70
17513: PUSH
17514: LD_INT 80
17516: PUSH
17517: LD_INT 90
17519: PUSH
17520: LD_INT 100
17522: PUSH
17523: LD_INT 110
17525: PUSH
17526: LD_INT 120
17528: PUSH
17529: LD_INT 130
17531: PUSH
17532: LD_INT 140
17534: PUSH
17535: LD_INT 150
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_INT 15
17560: PPUSH
17561: CALL_OW 12
17565: ARRAY
17566: ST_TO_ADDR
// if ValidHex ( x , y ) then
17567: LD_VAR 0 3
17571: PPUSH
17572: LD_VAR 0 4
17576: PPUSH
17577: CALL_OW 488
17581: IFFALSE 17604
// begin result := [ x , y ] ;
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: LD_VAR 0 3
17592: PUSH
17593: LD_VAR 0 4
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: ST_TO_ADDR
// break ;
17602: GO 17606
// end ; end ;
17604: GO 17406
17606: POP
17607: POP
// if result then
17608: LD_VAR 0 1
17612: IFFALSE 17672
// begin ToLua ( playSibBomb() ) ;
17614: LD_STRING playSibBomb()
17616: PPUSH
17617: CALL_OW 559
// wait ( 0 0$14 ) ;
17621: LD_INT 490
17623: PPUSH
17624: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 1
17635: ARRAY
17636: PPUSH
17637: LD_VAR 0 1
17641: PUSH
17642: LD_INT 2
17644: ARRAY
17645: PPUSH
17646: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17650: LD_VAR 0 1
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PPUSH
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 2
17666: ARRAY
17667: PPUSH
17668: CALL_OW 429
// end ; end ;
17672: LD_VAR 0 1
17676: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17677: LD_EXP 35
17681: PUSH
17682: LD_EXP 57
17686: AND
17687: IFFALSE 17699
17689: GO 17691
17691: DISABLE
// YouLost (  ) ;
17692: LD_STRING 
17694: PPUSH
17695: CALL_OW 104
17699: END
// every 0 0$1 trigger StreamModeActive and sFog do
17700: LD_EXP 35
17704: PUSH
17705: LD_EXP 56
17709: AND
17710: IFFALSE 17724
17712: GO 17714
17714: DISABLE
// FogOff ( your_side ) ;
17715: LD_OWVAR 2
17719: PPUSH
17720: CALL_OW 344
17724: END
// every 0 0$1 trigger StreamModeActive and sSun do
17725: LD_EXP 35
17729: PUSH
17730: LD_EXP 58
17734: AND
17735: IFFALSE 17763
17737: GO 17739
17739: DISABLE
// begin solar_recharge_percent := 0 ;
17740: LD_ADDR_OWVAR 79
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17748: LD_INT 10500
17750: PPUSH
17751: CALL_OW 67
// solar_recharge_percent := 100 ;
17755: LD_ADDR_OWVAR 79
17759: PUSH
17760: LD_INT 100
17762: ST_TO_ADDR
// end ;
17763: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17764: LD_EXP 35
17768: PUSH
17769: LD_EXP 59
17773: AND
17774: IFFALSE 18013
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
17782: PPUSH
17783: PPUSH
// begin tmp := [ ] ;
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: EMPTY
17790: ST_TO_ADDR
// for i := 1 to 6 do
17791: LD_ADDR_VAR 0 1
17795: PUSH
17796: DOUBLE
17797: LD_INT 1
17799: DEC
17800: ST_TO_ADDR
17801: LD_INT 6
17803: PUSH
17804: FOR_TO
17805: IFFALSE 17910
// begin uc_nation := nation_nature ;
17807: LD_ADDR_OWVAR 21
17811: PUSH
17812: LD_INT 0
17814: ST_TO_ADDR
// uc_side := 0 ;
17815: LD_ADDR_OWVAR 20
17819: PUSH
17820: LD_INT 0
17822: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17823: LD_ADDR_OWVAR 29
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 12
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// hc_agressivity := 20 ;
17838: LD_ADDR_OWVAR 35
17842: PUSH
17843: LD_INT 20
17845: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17846: LD_ADDR_OWVAR 28
17850: PUSH
17851: LD_INT 17
17853: ST_TO_ADDR
// hc_gallery :=  ;
17854: LD_ADDR_OWVAR 33
17858: PUSH
17859: LD_STRING 
17861: ST_TO_ADDR
// hc_name :=  ;
17862: LD_ADDR_OWVAR 26
17866: PUSH
17867: LD_STRING 
17869: ST_TO_ADDR
// un := CreateHuman ;
17870: LD_ADDR_VAR 0 2
17874: PUSH
17875: CALL_OW 44
17879: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: CALL_OW 51
// tmp := tmp ^ un ;
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: LD_VAR 0 3
17901: PUSH
17902: LD_VAR 0 2
17906: ADD
17907: ST_TO_ADDR
// end ;
17908: GO 17804
17910: POP
17911: POP
// repeat wait ( 0 0$1 ) ;
17912: LD_INT 35
17914: PPUSH
17915: CALL_OW 67
// for un in tmp do
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: LD_VAR 0 3
17928: PUSH
17929: FOR_IN
17930: IFFALSE 18004
// begin if IsDead ( un ) then
17932: LD_VAR 0 2
17936: PPUSH
17937: CALL_OW 301
17941: IFFALSE 17961
// begin tmp := tmp diff un ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_VAR 0 3
17952: PUSH
17953: LD_VAR 0 2
17957: DIFF
17958: ST_TO_ADDR
// continue ;
17959: GO 17929
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17961: LD_VAR 0 2
17965: PPUSH
17966: LD_INT 3
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 69
17987: PPUSH
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL_OW 74
17997: PPUSH
17998: CALL_OW 115
// end ;
18002: GO 17929
18004: POP
18005: POP
// until not tmp ;
18006: LD_VAR 0 3
18010: NOT
18011: IFFALSE 17912
// end ;
18013: PPOPN 3
18015: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18016: LD_EXP 35
18020: PUSH
18021: LD_EXP 60
18025: AND
18026: IFFALSE 18080
18028: GO 18030
18030: DISABLE
// begin ToLua ( displayTroll(); ) ;
18031: LD_STRING displayTroll();
18033: PPUSH
18034: CALL_OW 559
// wait ( 3 3$00 ) ;
18038: LD_INT 6300
18040: PPUSH
18041: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18045: LD_STRING hideTroll();
18047: PPUSH
18048: CALL_OW 559
// wait ( 1 1$00 ) ;
18052: LD_INT 2100
18054: PPUSH
18055: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18059: LD_STRING displayTroll();
18061: PPUSH
18062: CALL_OW 559
// wait ( 1 1$00 ) ;
18066: LD_INT 2100
18068: PPUSH
18069: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18073: LD_STRING hideTroll();
18075: PPUSH
18076: CALL_OW 559
// end ;
18080: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18081: LD_EXP 35
18085: PUSH
18086: LD_EXP 61
18090: AND
18091: IFFALSE 18154
18093: GO 18095
18095: DISABLE
18096: LD_INT 0
18098: PPUSH
// begin p := 0 ;
18099: LD_ADDR_VAR 0 1
18103: PUSH
18104: LD_INT 0
18106: ST_TO_ADDR
// repeat game_speed := 1 ;
18107: LD_ADDR_OWVAR 65
18111: PUSH
18112: LD_INT 1
18114: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18115: LD_INT 35
18117: PPUSH
18118: CALL_OW 67
// p := p + 1 ;
18122: LD_ADDR_VAR 0 1
18126: PUSH
18127: LD_VAR 0 1
18131: PUSH
18132: LD_INT 1
18134: PLUS
18135: ST_TO_ADDR
// until p >= 60 ;
18136: LD_VAR 0 1
18140: PUSH
18141: LD_INT 60
18143: GREATEREQUAL
18144: IFFALSE 18107
// game_speed := 4 ;
18146: LD_ADDR_OWVAR 65
18150: PUSH
18151: LD_INT 4
18153: ST_TO_ADDR
// end ;
18154: PPOPN 1
18156: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18157: LD_EXP 35
18161: PUSH
18162: LD_EXP 62
18166: AND
18167: IFFALSE 18313
18169: GO 18171
18171: DISABLE
18172: LD_INT 0
18174: PPUSH
18175: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18176: LD_ADDR_VAR 0 1
18180: PUSH
18181: LD_INT 22
18183: PUSH
18184: LD_OWVAR 2
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: LD_INT 30
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 30
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PPUSH
18225: CALL_OW 69
18229: ST_TO_ADDR
// if not depot then
18230: LD_VAR 0 1
18234: NOT
18235: IFFALSE 18239
// exit ;
18237: GO 18313
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18239: LD_ADDR_VAR 0 2
18243: PUSH
18244: LD_VAR 0 1
18248: PUSH
18249: LD_INT 1
18251: PPUSH
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 12
18261: ARRAY
18262: PPUSH
18263: CALL_OW 274
18267: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_INT 1
18275: PPUSH
18276: LD_INT 0
18278: PPUSH
18279: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_INT 2
18290: PPUSH
18291: LD_INT 0
18293: PPUSH
18294: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_INT 3
18305: PPUSH
18306: LD_INT 0
18308: PPUSH
18309: CALL_OW 277
// end ;
18313: PPOPN 2
18315: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18316: LD_EXP 35
18320: PUSH
18321: LD_EXP 63
18325: AND
18326: IFFALSE 18423
18328: GO 18330
18330: DISABLE
18331: LD_INT 0
18333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18334: LD_ADDR_VAR 0 1
18338: PUSH
18339: LD_INT 22
18341: PUSH
18342: LD_OWVAR 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 21
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 3
18363: PUSH
18364: LD_INT 23
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 69
18387: ST_TO_ADDR
// if not tmp then
18388: LD_VAR 0 1
18392: NOT
18393: IFFALSE 18397
// exit ;
18395: GO 18423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18397: LD_VAR 0 1
18401: PUSH
18402: LD_INT 1
18404: PPUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 12
18414: ARRAY
18415: PPUSH
18416: LD_INT 200
18418: PPUSH
18419: CALL_OW 234
// end ;
18423: PPOPN 1
18425: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18426: LD_EXP 35
18430: PUSH
18431: LD_EXP 64
18435: AND
18436: IFFALSE 18515
18438: GO 18440
18440: DISABLE
18441: LD_INT 0
18443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18444: LD_ADDR_VAR 0 1
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 21
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 1
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18489: LD_VAR 0 1
18493: PUSH
18494: LD_INT 1
18496: PPUSH
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 12
18506: ARRAY
18507: PPUSH
18508: LD_INT 60
18510: PPUSH
18511: CALL_OW 234
// end ;
18515: PPOPN 1
18517: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18518: LD_EXP 35
18522: PUSH
18523: LD_EXP 65
18527: AND
18528: IFFALSE 18627
18530: GO 18532
18532: DISABLE
18533: LD_INT 0
18535: PPUSH
18536: PPUSH
// begin enable ;
18537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_OWVAR 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 61
18557: PUSH
18558: EMPTY
18559: LIST
18560: PUSH
18561: LD_INT 33
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 1
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18627
// for i in tmp do
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_VAR 0 1
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18625
// if IsControledBy ( i ) then
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 312
18612: IFFALSE 18623
// ComUnlink ( i ) ;
18614: LD_VAR 0 2
18618: PPUSH
18619: CALL_OW 136
18623: GO 18600
18625: POP
18626: POP
// end ;
18627: PPOPN 2
18629: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18630: LD_EXP 35
18634: PUSH
18635: LD_EXP 66
18639: AND
18640: IFFALSE 18780
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
18648: PPUSH
// begin ToLua ( displayPowell(); ) ;
18649: LD_STRING displayPowell();
18651: PPUSH
18652: CALL_OW 559
// uc_side := 0 ;
18656: LD_ADDR_OWVAR 20
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// uc_nation := 2 ;
18664: LD_ADDR_OWVAR 21
18668: PUSH
18669: LD_INT 2
18671: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18672: LD_ADDR_OWVAR 37
18676: PUSH
18677: LD_INT 14
18679: ST_TO_ADDR
// vc_engine := engine_siberite ;
18680: LD_ADDR_OWVAR 39
18684: PUSH
18685: LD_INT 3
18687: ST_TO_ADDR
// vc_control := control_apeman ;
18688: LD_ADDR_OWVAR 38
18692: PUSH
18693: LD_INT 5
18695: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18696: LD_ADDR_OWVAR 40
18700: PUSH
18701: LD_INT 29
18703: ST_TO_ADDR
// un := CreateVehicle ;
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: CALL_OW 45
18713: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18714: LD_VAR 0 2
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18726: LD_INT 35
18728: PPUSH
18729: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18733: LD_VAR 0 2
18737: PPUSH
18738: LD_INT 22
18740: PUSH
18741: LD_OWVAR 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: PPUSH
18755: LD_VAR 0 2
18759: PPUSH
18760: CALL_OW 74
18764: PPUSH
18765: CALL_OW 115
// until IsDead ( un ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: CALL_OW 301
18778: IFFALSE 18726
// end ;
18780: PPOPN 2
18782: END
// every 0 0$1 trigger StreamModeActive and sStu do
18783: LD_EXP 35
18787: PUSH
18788: LD_EXP 74
18792: AND
18793: IFFALSE 18809
18795: GO 18797
18797: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18798: LD_STRING displayStucuk();
18800: PPUSH
18801: CALL_OW 559
// ResetFog ;
18805: CALL_OW 335
// end ;
18809: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18810: LD_EXP 35
18814: PUSH
18815: LD_EXP 67
18819: AND
18820: IFFALSE 18961
18822: GO 18824
18824: DISABLE
18825: LD_INT 0
18827: PPUSH
18828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_OWVAR 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 21
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: ST_TO_ADDR
// if not tmp then
18865: LD_VAR 0 2
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18961
// un := tmp [ rand ( 1 , tmp ) ] ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_VAR 0 2
18891: PPUSH
18892: CALL_OW 12
18896: ARRAY
18897: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: LD_INT 0
18905: PPUSH
18906: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_OWVAR 3
18919: PUSH
18920: LD_VAR 0 1
18924: DIFF
18925: PPUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 74
18935: PPUSH
18936: CALL_OW 115
// wait ( 0 0$20 ) ;
18940: LD_INT 700
18942: PPUSH
18943: CALL_OW 67
// SetSide ( un , your_side ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_OWVAR 2
18956: PPUSH
18957: CALL_OW 235
// end ;
18961: PPOPN 2
18963: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18964: LD_EXP 35
18968: PUSH
18969: LD_EXP 68
18973: AND
18974: IFFALSE 19080
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18982: LD_ADDR_VAR 0 1
18986: PUSH
18987: LD_INT 22
18989: PUSH
18990: LD_OWVAR 2
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: LD_INT 30
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PPUSH
19031: CALL_OW 69
19035: ST_TO_ADDR
// if not depot then
19036: LD_VAR 0 1
19040: NOT
19041: IFFALSE 19045
// exit ;
19043: GO 19080
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 1
19052: ARRAY
19053: PPUSH
19054: CALL_OW 250
19058: PPUSH
19059: LD_VAR 0 1
19063: PUSH
19064: LD_INT 1
19066: ARRAY
19067: PPUSH
19068: CALL_OW 251
19072: PPUSH
19073: LD_INT 70
19075: PPUSH
19076: CALL_OW 495
// end ;
19080: PPOPN 1
19082: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19083: LD_EXP 35
19087: PUSH
19088: LD_EXP 69
19092: AND
19093: IFFALSE 19304
19095: GO 19097
19097: DISABLE
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
19102: PPUSH
19103: PPUSH
19104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19105: LD_ADDR_VAR 0 5
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_OWVAR 2
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 21
19124: PUSH
19125: LD_INT 1
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: ST_TO_ADDR
// if not tmp then
19141: LD_VAR 0 5
19145: NOT
19146: IFFALSE 19150
// exit ;
19148: GO 19304
// for i in tmp do
19150: LD_ADDR_VAR 0 1
19154: PUSH
19155: LD_VAR 0 5
19159: PUSH
19160: FOR_IN
19161: IFFALSE 19302
// begin d := rand ( 0 , 5 ) ;
19163: LD_ADDR_VAR 0 4
19167: PUSH
19168: LD_INT 0
19170: PPUSH
19171: LD_INT 5
19173: PPUSH
19174: CALL_OW 12
19178: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: CALL_OW 250
19193: PPUSH
19194: LD_VAR 0 4
19198: PPUSH
19199: LD_INT 3
19201: PPUSH
19202: LD_INT 12
19204: PPUSH
19205: CALL_OW 12
19209: PPUSH
19210: CALL_OW 272
19214: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 251
19229: PPUSH
19230: LD_VAR 0 4
19234: PPUSH
19235: LD_INT 3
19237: PPUSH
19238: LD_INT 12
19240: PPUSH
19241: CALL_OW 12
19245: PPUSH
19246: CALL_OW 273
19250: ST_TO_ADDR
// if ValidHex ( x , y ) then
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: CALL_OW 488
19265: IFFALSE 19300
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19267: LD_VAR 0 1
19271: PPUSH
19272: LD_VAR 0 2
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 3
19284: PPUSH
19285: LD_INT 6
19287: PPUSH
19288: CALL_OW 12
19292: PPUSH
19293: LD_INT 1
19295: PPUSH
19296: CALL_OW 483
// end ;
19300: GO 19160
19302: POP
19303: POP
// end ;
19304: PPOPN 5
19306: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19307: LD_EXP 35
19311: PUSH
19312: LD_EXP 70
19316: AND
19317: IFFALSE 19411
19319: GO 19321
19321: DISABLE
19322: LD_INT 0
19324: PPUSH
19325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19326: LD_ADDR_VAR 0 2
19330: PUSH
19331: LD_INT 22
19333: PUSH
19334: LD_OWVAR 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 32
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 21
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 69
19372: ST_TO_ADDR
// if not tmp then
19373: LD_VAR 0 2
19377: NOT
19378: IFFALSE 19382
// exit ;
19380: GO 19411
// for i in tmp do
19382: LD_ADDR_VAR 0 1
19386: PUSH
19387: LD_VAR 0 2
19391: PUSH
19392: FOR_IN
19393: IFFALSE 19409
// SetFuel ( i , 0 ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_INT 0
19402: PPUSH
19403: CALL_OW 240
19407: GO 19392
19409: POP
19410: POP
// end ;
19411: PPOPN 2
19413: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19414: LD_EXP 35
19418: PUSH
19419: LD_EXP 71
19423: AND
19424: IFFALSE 19490
19426: GO 19428
19428: DISABLE
19429: LD_INT 0
19431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19432: LD_ADDR_VAR 0 1
19436: PUSH
19437: LD_INT 22
19439: PUSH
19440: LD_OWVAR 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 30
19451: PUSH
19452: LD_INT 29
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PPUSH
19463: CALL_OW 69
19467: ST_TO_ADDR
// if not tmp then
19468: LD_VAR 0 1
19472: NOT
19473: IFFALSE 19477
// exit ;
19475: GO 19490
// DestroyUnit ( tmp [ 1 ] ) ;
19477: LD_VAR 0 1
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PPUSH
19486: CALL_OW 65
// end ;
19490: PPOPN 1
19492: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19493: LD_EXP 35
19497: PUSH
19498: LD_EXP 73
19502: AND
19503: IFFALSE 19632
19505: GO 19507
19507: DISABLE
19508: LD_INT 0
19510: PPUSH
// begin uc_side := 0 ;
19511: LD_ADDR_OWVAR 20
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// uc_nation := nation_arabian ;
19519: LD_ADDR_OWVAR 21
19523: PUSH
19524: LD_INT 2
19526: ST_TO_ADDR
// hc_gallery :=  ;
19527: LD_ADDR_OWVAR 33
19531: PUSH
19532: LD_STRING 
19534: ST_TO_ADDR
// hc_name :=  ;
19535: LD_ADDR_OWVAR 26
19539: PUSH
19540: LD_STRING 
19542: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19543: LD_INT 1
19545: PPUSH
19546: LD_INT 11
19548: PPUSH
19549: LD_INT 10
19551: PPUSH
19552: CALL_OW 380
// un := CreateHuman ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: CALL_OW 44
19565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19566: LD_VAR 0 1
19570: PPUSH
19571: LD_INT 1
19573: PPUSH
19574: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19578: LD_INT 35
19580: PPUSH
19581: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19585: LD_VAR 0 1
19589: PPUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 69
19606: PPUSH
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 74
19616: PPUSH
19617: CALL_OW 115
// until IsDead ( un ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 301
19630: IFFALSE 19578
// end ;
19632: PPOPN 1
19634: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19635: LD_EXP 35
19639: PUSH
19640: LD_EXP 75
19644: AND
19645: IFFALSE 19657
19647: GO 19649
19649: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19650: LD_STRING earthquake(getX(game), 0, 32)
19652: PPUSH
19653: CALL_OW 559
19657: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19658: LD_EXP 35
19662: PUSH
19663: LD_EXP 76
19667: AND
19668: IFFALSE 19759
19670: GO 19672
19672: DISABLE
19673: LD_INT 0
19675: PPUSH
// begin enable ;
19676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 33
19706: PUSH
19707: LD_INT 3
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: ST_TO_ADDR
// if not tmp then
19724: LD_VAR 0 1
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19733: LD_VAR 0 1
19737: PUSH
19738: LD_INT 1
19740: PPUSH
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 12
19750: ARRAY
19751: PPUSH
19752: LD_INT 1
19754: PPUSH
19755: CALL_OW 234
// end ;
19759: PPOPN 1
19761: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19762: LD_EXP 35
19766: PUSH
19767: LD_EXP 77
19771: AND
19772: IFFALSE 19913
19774: GO 19776
19776: DISABLE
19777: LD_INT 0
19779: PPUSH
19780: PPUSH
19781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19782: LD_ADDR_VAR 0 3
19786: PUSH
19787: LD_INT 22
19789: PUSH
19790: LD_OWVAR 2
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 25
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: ST_TO_ADDR
// if not tmp then
19818: LD_VAR 0 3
19822: NOT
19823: IFFALSE 19827
// exit ;
19825: GO 19913
// un := tmp [ rand ( 1 , tmp ) ] ;
19827: LD_ADDR_VAR 0 2
19831: PUSH
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: CALL_OW 12
19849: ARRAY
19850: ST_TO_ADDR
// if Crawls ( un ) then
19851: LD_VAR 0 2
19855: PPUSH
19856: CALL_OW 318
19860: IFFALSE 19871
// ComWalk ( un ) ;
19862: LD_VAR 0 2
19866: PPUSH
19867: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19871: LD_VAR 0 2
19875: PPUSH
19876: LD_INT 9
19878: PPUSH
19879: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19883: LD_INT 28
19885: PPUSH
19886: LD_OWVAR 2
19890: PPUSH
19891: LD_INT 2
19893: PPUSH
19894: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19898: LD_INT 29
19900: PPUSH
19901: LD_OWVAR 2
19905: PPUSH
19906: LD_INT 2
19908: PPUSH
19909: CALL_OW 322
// end ;
19913: PPOPN 3
19915: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19916: LD_EXP 35
19920: PUSH
19921: LD_EXP 78
19925: AND
19926: IFFALSE 20037
19928: GO 19930
19930: DISABLE
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
19935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_INT 22
19943: PUSH
19944: LD_OWVAR 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 25
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PPUSH
19967: CALL_OW 69
19971: ST_TO_ADDR
// if not tmp then
19972: LD_VAR 0 3
19976: NOT
19977: IFFALSE 19981
// exit ;
19979: GO 20037
// un := tmp [ rand ( 1 , tmp ) ] ;
19981: LD_ADDR_VAR 0 2
19985: PUSH
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_VAR 0 3
19998: PPUSH
19999: CALL_OW 12
20003: ARRAY
20004: ST_TO_ADDR
// if Crawls ( un ) then
20005: LD_VAR 0 2
20009: PPUSH
20010: CALL_OW 318
20014: IFFALSE 20025
// ComWalk ( un ) ;
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20025: LD_VAR 0 2
20029: PPUSH
20030: LD_INT 8
20032: PPUSH
20033: CALL_OW 336
// end ;
20037: PPOPN 3
20039: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20040: LD_EXP 35
20044: PUSH
20045: LD_EXP 79
20049: AND
20050: IFFALSE 20194
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_OWVAR 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 21
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 34
20091: PUSH
20092: LD_INT 12
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 34
20101: PUSH
20102: LD_INT 51
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 34
20111: PUSH
20112: LD_INT 32
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 69
20134: ST_TO_ADDR
// if not tmp then
20135: LD_VAR 0 2
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20194
// for i in tmp do
20144: LD_ADDR_VAR 0 1
20148: PUSH
20149: LD_VAR 0 2
20153: PUSH
20154: FOR_IN
20155: IFFALSE 20192
// if GetCargo ( i , mat_artifact ) = 0 then
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_INT 4
20164: PPUSH
20165: CALL_OW 289
20169: PUSH
20170: LD_INT 0
20172: EQUAL
20173: IFFALSE 20190
// SetCargo ( i , mat_siberit , 100 ) ;
20175: LD_VAR 0 1
20179: PPUSH
20180: LD_INT 3
20182: PPUSH
20183: LD_INT 100
20185: PPUSH
20186: CALL_OW 290
20190: GO 20154
20192: POP
20193: POP
// end ;
20194: PPOPN 2
20196: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20197: LD_EXP 35
20201: PUSH
20202: LD_EXP 80
20206: AND
20207: IFFALSE 20390
20209: GO 20211
20211: DISABLE
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20216: LD_ADDR_VAR 0 2
20220: PUSH
20221: LD_INT 22
20223: PUSH
20224: LD_OWVAR 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PPUSH
20233: CALL_OW 69
20237: ST_TO_ADDR
// if not tmp then
20238: LD_VAR 0 2
20242: NOT
20243: IFFALSE 20247
// exit ;
20245: GO 20390
// for i := 1 to 2 do
20247: LD_ADDR_VAR 0 1
20251: PUSH
20252: DOUBLE
20253: LD_INT 1
20255: DEC
20256: ST_TO_ADDR
20257: LD_INT 2
20259: PUSH
20260: FOR_TO
20261: IFFALSE 20388
// begin uc_side := your_side ;
20263: LD_ADDR_OWVAR 20
20267: PUSH
20268: LD_OWVAR 2
20272: ST_TO_ADDR
// uc_nation := nation_american ;
20273: LD_ADDR_OWVAR 21
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// vc_chassis := us_morphling ;
20281: LD_ADDR_OWVAR 37
20285: PUSH
20286: LD_INT 5
20288: ST_TO_ADDR
// vc_engine := engine_siberite ;
20289: LD_ADDR_OWVAR 39
20293: PUSH
20294: LD_INT 3
20296: ST_TO_ADDR
// vc_control := control_computer ;
20297: LD_ADDR_OWVAR 38
20301: PUSH
20302: LD_INT 3
20304: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20305: LD_ADDR_OWVAR 40
20309: PUSH
20310: LD_INT 10
20312: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: ARRAY
20321: PPUSH
20322: CALL_OW 310
20326: NOT
20327: IFFALSE 20374
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20329: CALL_OW 45
20333: PPUSH
20334: LD_VAR 0 2
20338: PUSH
20339: LD_INT 1
20341: ARRAY
20342: PPUSH
20343: CALL_OW 250
20347: PPUSH
20348: LD_VAR 0 2
20352: PUSH
20353: LD_INT 1
20355: ARRAY
20356: PPUSH
20357: CALL_OW 251
20361: PPUSH
20362: LD_INT 12
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: CALL_OW 50
20372: GO 20386
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20374: CALL_OW 45
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: CALL_OW 51
// end ;
20386: GO 20260
20388: POP
20389: POP
// end ;
20390: PPOPN 2
20392: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20393: LD_EXP 35
20397: PUSH
20398: LD_EXP 81
20402: AND
20403: IFFALSE 20625
20405: GO 20407
20407: DISABLE
20408: LD_INT 0
20410: PPUSH
20411: PPUSH
20412: PPUSH
20413: PPUSH
20414: PPUSH
20415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20416: LD_ADDR_VAR 0 6
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 21
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 3
20445: PUSH
20446: LD_INT 23
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not tmp then
20470: LD_VAR 0 6
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20625
// s1 := rand ( 1 , 4 ) ;
20479: LD_ADDR_VAR 0 2
20483: PUSH
20484: LD_INT 1
20486: PPUSH
20487: LD_INT 4
20489: PPUSH
20490: CALL_OW 12
20494: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20495: LD_ADDR_VAR 0 4
20499: PUSH
20500: LD_VAR 0 6
20504: PUSH
20505: LD_INT 1
20507: ARRAY
20508: PPUSH
20509: LD_VAR 0 2
20513: PPUSH
20514: CALL_OW 259
20518: ST_TO_ADDR
// if s1 = 1 then
20519: LD_VAR 0 2
20523: PUSH
20524: LD_INT 1
20526: EQUAL
20527: IFFALSE 20547
// s2 := rand ( 2 , 4 ) else
20529: LD_ADDR_VAR 0 3
20533: PUSH
20534: LD_INT 2
20536: PPUSH
20537: LD_INT 4
20539: PPUSH
20540: CALL_OW 12
20544: ST_TO_ADDR
20545: GO 20555
// s2 := 1 ;
20547: LD_ADDR_VAR 0 3
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20555: LD_ADDR_VAR 0 5
20559: PUSH
20560: LD_VAR 0 6
20564: PUSH
20565: LD_INT 1
20567: ARRAY
20568: PPUSH
20569: LD_VAR 0 3
20573: PPUSH
20574: CALL_OW 259
20578: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20579: LD_VAR 0 6
20583: PUSH
20584: LD_INT 1
20586: ARRAY
20587: PPUSH
20588: LD_VAR 0 2
20592: PPUSH
20593: LD_VAR 0 5
20597: PPUSH
20598: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20602: LD_VAR 0 6
20606: PUSH
20607: LD_INT 1
20609: ARRAY
20610: PPUSH
20611: LD_VAR 0 3
20615: PPUSH
20616: LD_VAR 0 4
20620: PPUSH
20621: CALL_OW 237
// end ;
20625: PPOPN 6
20627: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20628: LD_EXP 35
20632: PUSH
20633: LD_EXP 82
20637: AND
20638: IFFALSE 20717
20640: GO 20642
20642: DISABLE
20643: LD_INT 0
20645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20646: LD_ADDR_VAR 0 1
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_OWVAR 2
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 30
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 69
20681: ST_TO_ADDR
// if not tmp then
20682: LD_VAR 0 1
20686: NOT
20687: IFFALSE 20691
// exit ;
20689: GO 20717
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20691: LD_VAR 0 1
20695: PUSH
20696: LD_INT 1
20698: PPUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 12
20708: ARRAY
20709: PPUSH
20710: LD_INT 1
20712: PPUSH
20713: CALL_OW 234
// end ;
20717: PPOPN 1
20719: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20720: LD_EXP 35
20724: PUSH
20725: LD_EXP 83
20729: AND
20730: IFFALSE 20842
20732: GO 20734
20734: DISABLE
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20739: LD_ADDR_VAR 0 2
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_OWVAR 2
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 30
20761: PUSH
20762: LD_INT 27
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 26
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 30
20781: PUSH
20782: LD_INT 28
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PPUSH
20799: CALL_OW 69
20803: ST_TO_ADDR
// if not tmp then
20804: LD_VAR 0 2
20808: NOT
20809: IFFALSE 20813
// exit ;
20811: GO 20842
// for i in tmp do
20813: LD_ADDR_VAR 0 1
20817: PUSH
20818: LD_VAR 0 2
20822: PUSH
20823: FOR_IN
20824: IFFALSE 20840
// SetLives ( i , 1 ) ;
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 234
20838: GO 20823
20840: POP
20841: POP
// end ;
20842: PPOPN 2
20844: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20845: LD_EXP 35
20849: PUSH
20850: LD_EXP 84
20854: AND
20855: IFFALSE 21129
20857: GO 20859
20859: DISABLE
20860: LD_INT 0
20862: PPUSH
20863: PPUSH
20864: PPUSH
// begin i := rand ( 1 , 7 ) ;
20865: LD_ADDR_VAR 0 1
20869: PUSH
20870: LD_INT 1
20872: PPUSH
20873: LD_INT 7
20875: PPUSH
20876: CALL_OW 12
20880: ST_TO_ADDR
// case i of 1 :
20881: LD_VAR 0 1
20885: PUSH
20886: LD_INT 1
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20904
20894: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20895: LD_STRING earthquake(getX(game), 0, 32)
20897: PPUSH
20898: CALL_OW 559
20902: GO 21129
20904: LD_INT 2
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20926
20912: POP
// begin ToLua ( displayStucuk(); ) ;
20913: LD_STRING displayStucuk();
20915: PPUSH
20916: CALL_OW 559
// ResetFog ;
20920: CALL_OW 335
// end ; 3 :
20924: GO 21129
20926: LD_INT 3
20928: DOUBLE
20929: EQUAL
20930: IFTRUE 20934
20932: GO 21038
20934: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20935: LD_ADDR_VAR 0 2
20939: PUSH
20940: LD_INT 22
20942: PUSH
20943: LD_OWVAR 2
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 25
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: ST_TO_ADDR
// if not tmp then
20971: LD_VAR 0 2
20975: NOT
20976: IFFALSE 20980
// exit ;
20978: GO 21129
// un := tmp [ rand ( 1 , tmp ) ] ;
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: LD_VAR 0 2
20989: PUSH
20990: LD_INT 1
20992: PPUSH
20993: LD_VAR 0 2
20997: PPUSH
20998: CALL_OW 12
21002: ARRAY
21003: ST_TO_ADDR
// if Crawls ( un ) then
21004: LD_VAR 0 3
21008: PPUSH
21009: CALL_OW 318
21013: IFFALSE 21024
// ComWalk ( un ) ;
21015: LD_VAR 0 3
21019: PPUSH
21020: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21024: LD_VAR 0 3
21028: PPUSH
21029: LD_INT 8
21031: PPUSH
21032: CALL_OW 336
// end ; 4 :
21036: GO 21129
21038: LD_INT 4
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21107
21046: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: LD_INT 22
21054: PUSH
21055: LD_OWVAR 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 30
21066: PUSH
21067: LD_INT 29
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 69
21082: ST_TO_ADDR
// if not tmp then
21083: LD_VAR 0 2
21087: NOT
21088: IFFALSE 21092
// exit ;
21090: GO 21129
// DestroyUnit ( tmp [ 1 ] ) ;
21092: LD_VAR 0 2
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: CALL_OW 65
// end ; 5 .. 7 :
21105: GO 21129
21107: LD_INT 5
21109: DOUBLE
21110: GREATEREQUAL
21111: IFFALSE 21119
21113: LD_INT 7
21115: DOUBLE
21116: LESSEQUAL
21117: IFTRUE 21121
21119: GO 21128
21121: POP
// StreamSibBomb ; end ;
21122: CALL 17379 0 0
21126: GO 21129
21128: POP
// end ;
21129: PPOPN 3
21131: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21132: LD_EXP 35
21136: PUSH
21137: LD_EXP 85
21141: AND
21142: IFFALSE 21298
21144: GO 21146
21146: DISABLE
21147: LD_INT 0
21149: PPUSH
21150: PPUSH
21151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: LD_INT 81
21159: PUSH
21160: LD_OWVAR 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 21
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 21
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PPUSH
21201: CALL_OW 69
21205: ST_TO_ADDR
// if not tmp then
21206: LD_VAR 0 2
21210: NOT
21211: IFFALSE 21215
// exit ;
21213: GO 21298
// p := 0 ;
21215: LD_ADDR_VAR 0 3
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21223: LD_INT 35
21225: PPUSH
21226: CALL_OW 67
// p := p + 1 ;
21230: LD_ADDR_VAR 0 3
21234: PUSH
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 1
21242: PLUS
21243: ST_TO_ADDR
// for i in tmp do
21244: LD_ADDR_VAR 0 1
21248: PUSH
21249: LD_VAR 0 2
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21286
// if GetLives ( i ) < 1000 then
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 256
21266: PUSH
21267: LD_INT 1000
21269: LESS
21270: IFFALSE 21284
// SetLives ( i , 1000 ) ;
21272: LD_VAR 0 1
21276: PPUSH
21277: LD_INT 1000
21279: PPUSH
21280: CALL_OW 234
21284: GO 21254
21286: POP
21287: POP
// until p > 20 ;
21288: LD_VAR 0 3
21292: PUSH
21293: LD_INT 20
21295: GREATER
21296: IFFALSE 21223
// end ;
21298: PPOPN 3
21300: END
// every 0 0$1 trigger StreamModeActive and sTime do
21301: LD_EXP 35
21305: PUSH
21306: LD_EXP 86
21310: AND
21311: IFFALSE 21346
21313: GO 21315
21315: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21316: LD_INT 28
21318: PPUSH
21319: LD_OWVAR 2
21323: PPUSH
21324: LD_INT 2
21326: PPUSH
21327: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21331: LD_INT 30
21333: PPUSH
21334: LD_OWVAR 2
21338: PPUSH
21339: LD_INT 2
21341: PPUSH
21342: CALL_OW 322
// end ;
21346: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21347: LD_EXP 35
21351: PUSH
21352: LD_EXP 87
21356: AND
21357: IFFALSE 21478
21359: GO 21361
21361: DISABLE
21362: LD_INT 0
21364: PPUSH
21365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21366: LD_ADDR_VAR 0 2
21370: PUSH
21371: LD_INT 22
21373: PUSH
21374: LD_OWVAR 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 21
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 3
21395: PUSH
21396: LD_INT 23
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: ST_TO_ADDR
// if not tmp then
21420: LD_VAR 0 2
21424: NOT
21425: IFFALSE 21429
// exit ;
21427: GO 21478
// for i in tmp do
21429: LD_ADDR_VAR 0 1
21433: PUSH
21434: LD_VAR 0 2
21438: PUSH
21439: FOR_IN
21440: IFFALSE 21476
// begin if Crawls ( i ) then
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 318
21451: IFFALSE 21462
// ComWalk ( i ) ;
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 138
// SetClass ( i , 2 ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: LD_INT 2
21469: PPUSH
21470: CALL_OW 336
// end ;
21474: GO 21439
21476: POP
21477: POP
// end ;
21478: PPOPN 2
21480: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21481: LD_EXP 35
21485: PUSH
21486: LD_EXP 88
21490: AND
21491: IFFALSE 21772
21493: GO 21495
21495: DISABLE
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
21500: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21501: LD_OWVAR 2
21505: PPUSH
21506: LD_INT 9
21508: PPUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_INT 1
21514: PPUSH
21515: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21519: LD_INT 9
21521: PPUSH
21522: LD_OWVAR 2
21526: PPUSH
21527: CALL_OW 343
// uc_side := 9 ;
21531: LD_ADDR_OWVAR 20
21535: PUSH
21536: LD_INT 9
21538: ST_TO_ADDR
// uc_nation := 2 ;
21539: LD_ADDR_OWVAR 21
21543: PUSH
21544: LD_INT 2
21546: ST_TO_ADDR
// hc_name := Dark Warrior ;
21547: LD_ADDR_OWVAR 26
21551: PUSH
21552: LD_STRING Dark Warrior
21554: ST_TO_ADDR
// hc_gallery :=  ;
21555: LD_ADDR_OWVAR 33
21559: PUSH
21560: LD_STRING 
21562: ST_TO_ADDR
// hc_noskilllimit := true ;
21563: LD_ADDR_OWVAR 76
21567: PUSH
21568: LD_INT 1
21570: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21571: LD_ADDR_OWVAR 31
21575: PUSH
21576: LD_INT 30
21578: PUSH
21579: LD_INT 30
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 30
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: ST_TO_ADDR
// un := CreateHuman ;
21594: LD_ADDR_VAR 0 3
21598: PUSH
21599: CALL_OW 44
21603: ST_TO_ADDR
// hc_noskilllimit := false ;
21604: LD_ADDR_OWVAR 76
21608: PUSH
21609: LD_INT 0
21611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21612: LD_VAR 0 3
21616: PPUSH
21617: LD_INT 1
21619: PPUSH
21620: CALL_OW 51
// p := 0 ;
21624: LD_ADDR_VAR 0 2
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21632: LD_INT 35
21634: PPUSH
21635: CALL_OW 67
// p := p + 1 ;
21639: LD_ADDR_VAR 0 2
21643: PUSH
21644: LD_VAR 0 2
21648: PUSH
21649: LD_INT 1
21651: PLUS
21652: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21653: LD_VAR 0 3
21657: PPUSH
21658: CALL_OW 256
21662: PUSH
21663: LD_INT 1000
21665: LESS
21666: IFFALSE 21680
// SetLives ( un , 1000 ) ;
21668: LD_VAR 0 3
21672: PPUSH
21673: LD_INT 1000
21675: PPUSH
21676: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21680: LD_VAR 0 3
21684: PPUSH
21685: LD_INT 81
21687: PUSH
21688: LD_OWVAR 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 91
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 30
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PPUSH
21717: CALL_OW 69
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: CALL_OW 74
21731: PPUSH
21732: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21736: LD_VAR 0 2
21740: PUSH
21741: LD_INT 60
21743: GREATER
21744: PUSH
21745: LD_VAR 0 3
21749: PPUSH
21750: CALL_OW 301
21754: OR
21755: IFFALSE 21632
// if un then
21757: LD_VAR 0 3
21761: IFFALSE 21772
// RemoveUnit ( un ) ;
21763: LD_VAR 0 3
21767: PPUSH
21768: CALL_OW 64
// end ;
21772: PPOPN 3
21774: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21775: LD_INT 0
21777: PPUSH
// case cmd of 301 :
21778: LD_VAR 0 1
21782: PUSH
21783: LD_INT 301
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21823
21791: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21792: LD_VAR 0 6
21796: PPUSH
21797: LD_VAR 0 7
21801: PPUSH
21802: LD_VAR 0 8
21806: PPUSH
21807: LD_VAR 0 4
21811: PPUSH
21812: LD_VAR 0 5
21816: PPUSH
21817: CALL 23024 0 5
21821: GO 21944
21823: LD_INT 302
21825: DOUBLE
21826: EQUAL
21827: IFTRUE 21831
21829: GO 21868
21831: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21832: LD_VAR 0 6
21836: PPUSH
21837: LD_VAR 0 7
21841: PPUSH
21842: LD_VAR 0 8
21846: PPUSH
21847: LD_VAR 0 9
21851: PPUSH
21852: LD_VAR 0 4
21856: PPUSH
21857: LD_VAR 0 5
21861: PPUSH
21862: CALL 23115 0 6
21866: GO 21944
21868: LD_INT 303
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21913
21876: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21877: LD_VAR 0 6
21881: PPUSH
21882: LD_VAR 0 7
21886: PPUSH
21887: LD_VAR 0 8
21891: PPUSH
21892: LD_VAR 0 9
21896: PPUSH
21897: LD_VAR 0 4
21901: PPUSH
21902: LD_VAR 0 5
21906: PPUSH
21907: CALL 21949 0 6
21911: GO 21944
21913: LD_INT 304
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21943
21921: POP
// hHackTeleport ( unit , x , y ) ; end ;
21922: LD_VAR 0 2
21926: PPUSH
21927: LD_VAR 0 4
21931: PPUSH
21932: LD_VAR 0 5
21936: PPUSH
21937: CALL 23708 0 3
21941: GO 21944
21943: POP
// end ;
21944: LD_VAR 0 12
21948: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21953: LD_VAR 0 1
21957: PUSH
21958: LD_INT 1
21960: LESS
21961: PUSH
21962: LD_VAR 0 1
21966: PUSH
21967: LD_INT 3
21969: GREATER
21970: OR
21971: PUSH
21972: LD_VAR 0 5
21976: PPUSH
21977: LD_VAR 0 6
21981: PPUSH
21982: CALL_OW 428
21986: OR
21987: IFFALSE 21991
// exit ;
21989: GO 22711
// uc_side := your_side ;
21991: LD_ADDR_OWVAR 20
21995: PUSH
21996: LD_OWVAR 2
22000: ST_TO_ADDR
// uc_nation := nation ;
22001: LD_ADDR_OWVAR 21
22005: PUSH
22006: LD_VAR 0 1
22010: ST_TO_ADDR
// bc_level = 1 ;
22011: LD_ADDR_OWVAR 43
22015: PUSH
22016: LD_INT 1
22018: ST_TO_ADDR
// case btype of 1 :
22019: LD_VAR 0 2
22023: PUSH
22024: LD_INT 1
22026: DOUBLE
22027: EQUAL
22028: IFTRUE 22032
22030: GO 22043
22032: POP
// bc_type := b_depot ; 2 :
22033: LD_ADDR_OWVAR 42
22037: PUSH
22038: LD_INT 0
22040: ST_TO_ADDR
22041: GO 22655
22043: LD_INT 2
22045: DOUBLE
22046: EQUAL
22047: IFTRUE 22051
22049: GO 22062
22051: POP
// bc_type := b_warehouse ; 3 :
22052: LD_ADDR_OWVAR 42
22056: PUSH
22057: LD_INT 1
22059: ST_TO_ADDR
22060: GO 22655
22062: LD_INT 3
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22070
22068: GO 22081
22070: POP
// bc_type := b_lab ; 4 .. 9 :
22071: LD_ADDR_OWVAR 42
22075: PUSH
22076: LD_INT 6
22078: ST_TO_ADDR
22079: GO 22655
22081: LD_INT 4
22083: DOUBLE
22084: GREATEREQUAL
22085: IFFALSE 22093
22087: LD_INT 9
22089: DOUBLE
22090: LESSEQUAL
22091: IFTRUE 22095
22093: GO 22147
22095: POP
// begin bc_type := b_lab_half ;
22096: LD_ADDR_OWVAR 42
22100: PUSH
22101: LD_INT 7
22103: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22104: LD_ADDR_OWVAR 44
22108: PUSH
22109: LD_INT 10
22111: PUSH
22112: LD_INT 11
22114: PUSH
22115: LD_INT 12
22117: PUSH
22118: LD_INT 15
22120: PUSH
22121: LD_INT 14
22123: PUSH
22124: LD_INT 13
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_INT 3
22142: MINUS
22143: ARRAY
22144: ST_TO_ADDR
// end ; 10 .. 13 :
22145: GO 22655
22147: LD_INT 10
22149: DOUBLE
22150: GREATEREQUAL
22151: IFFALSE 22159
22153: LD_INT 13
22155: DOUBLE
22156: LESSEQUAL
22157: IFTRUE 22161
22159: GO 22238
22161: POP
// begin bc_type := b_lab_full ;
22162: LD_ADDR_OWVAR 42
22166: PUSH
22167: LD_INT 8
22169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22170: LD_ADDR_OWVAR 44
22174: PUSH
22175: LD_INT 10
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: LD_INT 14
22183: PUSH
22184: LD_INT 13
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PUSH
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 9
22200: MINUS
22201: ARRAY
22202: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22203: LD_ADDR_OWVAR 45
22207: PUSH
22208: LD_INT 11
22210: PUSH
22211: LD_INT 15
22213: PUSH
22214: LD_INT 12
22216: PUSH
22217: LD_INT 15
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: PUSH
22226: LD_VAR 0 2
22230: PUSH
22231: LD_INT 9
22233: MINUS
22234: ARRAY
22235: ST_TO_ADDR
// end ; 14 :
22236: GO 22655
22238: LD_INT 14
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22257
22246: POP
// bc_type := b_workshop ; 15 :
22247: LD_ADDR_OWVAR 42
22251: PUSH
22252: LD_INT 2
22254: ST_TO_ADDR
22255: GO 22655
22257: LD_INT 15
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22276
22265: POP
// bc_type := b_factory ; 16 :
22266: LD_ADDR_OWVAR 42
22270: PUSH
22271: LD_INT 3
22273: ST_TO_ADDR
22274: GO 22655
22276: LD_INT 16
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22295
22284: POP
// bc_type := b_ext_gun ; 17 :
22285: LD_ADDR_OWVAR 42
22289: PUSH
22290: LD_INT 17
22292: ST_TO_ADDR
22293: GO 22655
22295: LD_INT 17
22297: DOUBLE
22298: EQUAL
22299: IFTRUE 22303
22301: GO 22331
22303: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22304: LD_ADDR_OWVAR 42
22308: PUSH
22309: LD_INT 19
22311: PUSH
22312: LD_INT 23
22314: PUSH
22315: LD_INT 19
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: PUSH
22323: LD_VAR 0 1
22327: ARRAY
22328: ST_TO_ADDR
22329: GO 22655
22331: LD_INT 18
22333: DOUBLE
22334: EQUAL
22335: IFTRUE 22339
22337: GO 22350
22339: POP
// bc_type := b_ext_radar ; 19 :
22340: LD_ADDR_OWVAR 42
22344: PUSH
22345: LD_INT 20
22347: ST_TO_ADDR
22348: GO 22655
22350: LD_INT 19
22352: DOUBLE
22353: EQUAL
22354: IFTRUE 22358
22356: GO 22369
22358: POP
// bc_type := b_ext_radio ; 20 :
22359: LD_ADDR_OWVAR 42
22363: PUSH
22364: LD_INT 22
22366: ST_TO_ADDR
22367: GO 22655
22369: LD_INT 20
22371: DOUBLE
22372: EQUAL
22373: IFTRUE 22377
22375: GO 22388
22377: POP
// bc_type := b_ext_siberium ; 21 :
22378: LD_ADDR_OWVAR 42
22382: PUSH
22383: LD_INT 21
22385: ST_TO_ADDR
22386: GO 22655
22388: LD_INT 21
22390: DOUBLE
22391: EQUAL
22392: IFTRUE 22396
22394: GO 22407
22396: POP
// bc_type := b_ext_computer ; 22 :
22397: LD_ADDR_OWVAR 42
22401: PUSH
22402: LD_INT 24
22404: ST_TO_ADDR
22405: GO 22655
22407: LD_INT 22
22409: DOUBLE
22410: EQUAL
22411: IFTRUE 22415
22413: GO 22426
22415: POP
// bc_type := b_ext_track ; 23 :
22416: LD_ADDR_OWVAR 42
22420: PUSH
22421: LD_INT 16
22423: ST_TO_ADDR
22424: GO 22655
22426: LD_INT 23
22428: DOUBLE
22429: EQUAL
22430: IFTRUE 22434
22432: GO 22445
22434: POP
// bc_type := b_ext_laser ; 24 :
22435: LD_ADDR_OWVAR 42
22439: PUSH
22440: LD_INT 25
22442: ST_TO_ADDR
22443: GO 22655
22445: LD_INT 24
22447: DOUBLE
22448: EQUAL
22449: IFTRUE 22453
22451: GO 22464
22453: POP
// bc_type := b_control_tower ; 25 :
22454: LD_ADDR_OWVAR 42
22458: PUSH
22459: LD_INT 36
22461: ST_TO_ADDR
22462: GO 22655
22464: LD_INT 25
22466: DOUBLE
22467: EQUAL
22468: IFTRUE 22472
22470: GO 22483
22472: POP
// bc_type := b_breastwork ; 26 :
22473: LD_ADDR_OWVAR 42
22477: PUSH
22478: LD_INT 31
22480: ST_TO_ADDR
22481: GO 22655
22483: LD_INT 26
22485: DOUBLE
22486: EQUAL
22487: IFTRUE 22491
22489: GO 22502
22491: POP
// bc_type := b_bunker ; 27 :
22492: LD_ADDR_OWVAR 42
22496: PUSH
22497: LD_INT 32
22499: ST_TO_ADDR
22500: GO 22655
22502: LD_INT 27
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22521
22510: POP
// bc_type := b_turret ; 28 :
22511: LD_ADDR_OWVAR 42
22515: PUSH
22516: LD_INT 33
22518: ST_TO_ADDR
22519: GO 22655
22521: LD_INT 28
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22540
22529: POP
// bc_type := b_armoury ; 29 :
22530: LD_ADDR_OWVAR 42
22534: PUSH
22535: LD_INT 4
22537: ST_TO_ADDR
22538: GO 22655
22540: LD_INT 29
22542: DOUBLE
22543: EQUAL
22544: IFTRUE 22548
22546: GO 22559
22548: POP
// bc_type := b_barracks ; 30 :
22549: LD_ADDR_OWVAR 42
22553: PUSH
22554: LD_INT 5
22556: ST_TO_ADDR
22557: GO 22655
22559: LD_INT 30
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22578
22567: POP
// bc_type := b_solar_power ; 31 :
22568: LD_ADDR_OWVAR 42
22572: PUSH
22573: LD_INT 27
22575: ST_TO_ADDR
22576: GO 22655
22578: LD_INT 31
22580: DOUBLE
22581: EQUAL
22582: IFTRUE 22586
22584: GO 22597
22586: POP
// bc_type := b_oil_power ; 32 :
22587: LD_ADDR_OWVAR 42
22591: PUSH
22592: LD_INT 26
22594: ST_TO_ADDR
22595: GO 22655
22597: LD_INT 32
22599: DOUBLE
22600: EQUAL
22601: IFTRUE 22605
22603: GO 22616
22605: POP
// bc_type := b_siberite_power ; 33 :
22606: LD_ADDR_OWVAR 42
22610: PUSH
22611: LD_INT 28
22613: ST_TO_ADDR
22614: GO 22655
22616: LD_INT 33
22618: DOUBLE
22619: EQUAL
22620: IFTRUE 22624
22622: GO 22635
22624: POP
// bc_type := b_oil_mine ; 34 :
22625: LD_ADDR_OWVAR 42
22629: PUSH
22630: LD_INT 29
22632: ST_TO_ADDR
22633: GO 22655
22635: LD_INT 34
22637: DOUBLE
22638: EQUAL
22639: IFTRUE 22643
22641: GO 22654
22643: POP
// bc_type := b_siberite_mine ; end ;
22644: LD_ADDR_OWVAR 42
22648: PUSH
22649: LD_INT 30
22651: ST_TO_ADDR
22652: GO 22655
22654: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22655: LD_ADDR_VAR 0 8
22659: PUSH
22660: LD_VAR 0 5
22664: PPUSH
22665: LD_VAR 0 6
22669: PPUSH
22670: LD_VAR 0 3
22674: PPUSH
22675: CALL_OW 47
22679: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22680: LD_OWVAR 42
22684: PUSH
22685: LD_INT 32
22687: PUSH
22688: LD_INT 33
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: IN
22695: IFFALSE 22711
// PlaceWeaponTurret ( b , weapon ) ;
22697: LD_VAR 0 8
22701: PPUSH
22702: LD_VAR 0 4
22706: PPUSH
22707: CALL_OW 431
// end ;
22711: LD_VAR 0 7
22715: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22716: LD_INT 0
22718: PPUSH
22719: PPUSH
22720: PPUSH
22721: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22722: LD_ADDR_VAR 0 4
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_OWVAR 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 30
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 30
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 69
22775: ST_TO_ADDR
// if not tmp then
22776: LD_VAR 0 4
22780: NOT
22781: IFFALSE 22785
// exit ;
22783: GO 22844
// for i in tmp do
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_VAR 0 4
22794: PUSH
22795: FOR_IN
22796: IFFALSE 22842
// for j = 1 to 3 do
22798: LD_ADDR_VAR 0 3
22802: PUSH
22803: DOUBLE
22804: LD_INT 1
22806: DEC
22807: ST_TO_ADDR
22808: LD_INT 3
22810: PUSH
22811: FOR_TO
22812: IFFALSE 22838
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22814: LD_VAR 0 2
22818: PPUSH
22819: CALL_OW 274
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: LD_INT 99999
22831: PPUSH
22832: CALL_OW 277
22836: GO 22811
22838: POP
22839: POP
22840: GO 22795
22842: POP
22843: POP
// end ;
22844: LD_VAR 0 1
22848: RET
// export function hHackSetLevel10 ; var i , j ; begin
22849: LD_INT 0
22851: PPUSH
22852: PPUSH
22853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 21
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: PUSH
22874: FOR_IN
22875: IFFALSE 22927
// if IsSelected ( i ) then
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 306
22886: IFFALSE 22925
// begin for j := 1 to 4 do
22888: LD_ADDR_VAR 0 3
22892: PUSH
22893: DOUBLE
22894: LD_INT 1
22896: DEC
22897: ST_TO_ADDR
22898: LD_INT 4
22900: PUSH
22901: FOR_TO
22902: IFFALSE 22923
// SetSkill ( i , j , 10 ) ;
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_VAR 0 3
22913: PPUSH
22914: LD_INT 10
22916: PPUSH
22917: CALL_OW 237
22921: GO 22901
22923: POP
22924: POP
// end ;
22925: GO 22874
22927: POP
22928: POP
// end ;
22929: LD_VAR 0 1
22933: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22934: LD_INT 0
22936: PPUSH
22937: PPUSH
22938: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_INT 22
22946: PUSH
22947: LD_OWVAR 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 21
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL_OW 69
22974: PUSH
22975: FOR_IN
22976: IFFALSE 23017
// begin for j := 1 to 4 do
22978: LD_ADDR_VAR 0 3
22982: PUSH
22983: DOUBLE
22984: LD_INT 1
22986: DEC
22987: ST_TO_ADDR
22988: LD_INT 4
22990: PUSH
22991: FOR_TO
22992: IFFALSE 23013
// SetSkill ( i , j , 10 ) ;
22994: LD_VAR 0 2
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: LD_INT 10
23006: PPUSH
23007: CALL_OW 237
23011: GO 22991
23013: POP
23014: POP
// end ;
23015: GO 22975
23017: POP
23018: POP
// end ;
23019: LD_VAR 0 1
23023: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23024: LD_INT 0
23026: PPUSH
// uc_side := your_side ;
23027: LD_ADDR_OWVAR 20
23031: PUSH
23032: LD_OWVAR 2
23036: ST_TO_ADDR
// uc_nation := nation ;
23037: LD_ADDR_OWVAR 21
23041: PUSH
23042: LD_VAR 0 1
23046: ST_TO_ADDR
// InitHc ;
23047: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23051: LD_INT 0
23053: PPUSH
23054: LD_VAR 0 2
23058: PPUSH
23059: LD_VAR 0 3
23063: PPUSH
23064: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23068: LD_VAR 0 4
23072: PPUSH
23073: LD_VAR 0 5
23077: PPUSH
23078: CALL_OW 428
23082: PUSH
23083: LD_INT 0
23085: EQUAL
23086: IFFALSE 23110
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23088: CALL_OW 44
23092: PPUSH
23093: LD_VAR 0 4
23097: PPUSH
23098: LD_VAR 0 5
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: CALL_OW 48
// end ;
23110: LD_VAR 0 6
23114: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23115: LD_INT 0
23117: PPUSH
23118: PPUSH
// uc_side := your_side ;
23119: LD_ADDR_OWVAR 20
23123: PUSH
23124: LD_OWVAR 2
23128: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23129: LD_VAR 0 1
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: LD_INT 4
23145: PUSH
23146: LD_INT 5
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: IN
23156: IFFALSE 23168
// uc_nation := nation_american else
23158: LD_ADDR_OWVAR 21
23162: PUSH
23163: LD_INT 1
23165: ST_TO_ADDR
23166: GO 23211
// if chassis in [ 11 , 12 , 13 , 14 ] then
23168: LD_VAR 0 1
23172: PUSH
23173: LD_INT 11
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 13
23181: PUSH
23182: LD_INT 14
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: IN
23191: IFFALSE 23203
// uc_nation := nation_arabian else
23193: LD_ADDR_OWVAR 21
23197: PUSH
23198: LD_INT 2
23200: ST_TO_ADDR
23201: GO 23211
// uc_nation := nation_russian ;
23203: LD_ADDR_OWVAR 21
23207: PUSH
23208: LD_INT 3
23210: ST_TO_ADDR
// vc_chassis := chassis ;
23211: LD_ADDR_OWVAR 37
23215: PUSH
23216: LD_VAR 0 1
23220: ST_TO_ADDR
// vc_engine := engine ;
23221: LD_ADDR_OWVAR 39
23225: PUSH
23226: LD_VAR 0 2
23230: ST_TO_ADDR
// vc_control := control ;
23231: LD_ADDR_OWVAR 38
23235: PUSH
23236: LD_VAR 0 3
23240: ST_TO_ADDR
// vc_weapon := weapon ;
23241: LD_ADDR_OWVAR 40
23245: PUSH
23246: LD_VAR 0 4
23250: ST_TO_ADDR
// un := CreateVehicle ;
23251: LD_ADDR_VAR 0 8
23255: PUSH
23256: CALL_OW 45
23260: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23261: LD_VAR 0 8
23265: PPUSH
23266: LD_INT 0
23268: PPUSH
23269: LD_INT 5
23271: PPUSH
23272: CALL_OW 12
23276: PPUSH
23277: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23281: LD_VAR 0 8
23285: PPUSH
23286: LD_VAR 0 5
23290: PPUSH
23291: LD_VAR 0 6
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 48
// end ;
23303: LD_VAR 0 7
23307: RET
// export hInvincible ; every 1 do
23308: GO 23310
23310: DISABLE
// hInvincible := [ ] ;
23311: LD_ADDR_EXP 89
23315: PUSH
23316: EMPTY
23317: ST_TO_ADDR
23318: END
// every 10 do var i ;
23319: GO 23321
23321: DISABLE
23322: LD_INT 0
23324: PPUSH
// begin enable ;
23325: ENABLE
// if not hInvincible then
23326: LD_EXP 89
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23379
// for i in hInvincible do
23335: LD_ADDR_VAR 0 1
23339: PUSH
23340: LD_EXP 89
23344: PUSH
23345: FOR_IN
23346: IFFALSE 23377
// if GetLives ( i ) < 1000 then
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 256
23357: PUSH
23358: LD_INT 1000
23360: LESS
23361: IFFALSE 23375
// SetLives ( i , 1000 ) ;
23363: LD_VAR 0 1
23367: PPUSH
23368: LD_INT 1000
23370: PPUSH
23371: CALL_OW 234
23375: GO 23345
23377: POP
23378: POP
// end ;
23379: PPOPN 1
23381: END
// export function hHackInvincible ; var i ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: LD_INT 21
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 21
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: PPUSH
23419: CALL_OW 69
23423: PUSH
23424: FOR_IN
23425: IFFALSE 23486
// if IsSelected ( i ) then
23427: LD_VAR 0 2
23431: PPUSH
23432: CALL_OW 306
23436: IFFALSE 23484
// begin if i in hInvincible then
23438: LD_VAR 0 2
23442: PUSH
23443: LD_EXP 89
23447: IN
23448: IFFALSE 23468
// hInvincible := hInvincible diff i else
23450: LD_ADDR_EXP 89
23454: PUSH
23455: LD_EXP 89
23459: PUSH
23460: LD_VAR 0 2
23464: DIFF
23465: ST_TO_ADDR
23466: GO 23484
// hInvincible := hInvincible union i ;
23468: LD_ADDR_EXP 89
23472: PUSH
23473: LD_EXP 89
23477: PUSH
23478: LD_VAR 0 2
23482: UNION
23483: ST_TO_ADDR
// end ;
23484: GO 23424
23486: POP
23487: POP
// end ;
23488: LD_VAR 0 1
23492: RET
// export function hHackInvisible ; var i , j ; begin
23493: LD_INT 0
23495: PPUSH
23496: PPUSH
23497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 21
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23543
// if IsSelected ( i ) then
23521: LD_VAR 0 2
23525: PPUSH
23526: CALL_OW 306
23530: IFFALSE 23541
// ComForceInvisible ( i ) ;
23532: LD_VAR 0 2
23536: PPUSH
23537: CALL_OW 496
23541: GO 23518
23543: POP
23544: POP
// end ;
23545: LD_VAR 0 1
23549: RET
// export function hHackChangeYourSide ; begin
23550: LD_INT 0
23552: PPUSH
// if your_side = 8 then
23553: LD_OWVAR 2
23557: PUSH
23558: LD_INT 8
23560: EQUAL
23561: IFFALSE 23573
// your_side := 0 else
23563: LD_ADDR_OWVAR 2
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
23571: GO 23587
// your_side := your_side + 1 ;
23573: LD_ADDR_OWVAR 2
23577: PUSH
23578: LD_OWVAR 2
23582: PUSH
23583: LD_INT 1
23585: PLUS
23586: ST_TO_ADDR
// end ;
23587: LD_VAR 0 1
23591: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// for i in all_units do
23597: LD_ADDR_VAR 0 2
23601: PUSH
23602: LD_OWVAR 3
23606: PUSH
23607: FOR_IN
23608: IFFALSE 23686
// if IsSelected ( i ) then
23610: LD_VAR 0 2
23614: PPUSH
23615: CALL_OW 306
23619: IFFALSE 23684
// begin j := GetSide ( i ) ;
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_VAR 0 2
23630: PPUSH
23631: CALL_OW 255
23635: ST_TO_ADDR
// if j = 8 then
23636: LD_VAR 0 3
23640: PUSH
23641: LD_INT 8
23643: EQUAL
23644: IFFALSE 23656
// j := 0 else
23646: LD_ADDR_VAR 0 3
23650: PUSH
23651: LD_INT 0
23653: ST_TO_ADDR
23654: GO 23670
// j := j + 1 ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: LD_VAR 0 3
23665: PUSH
23666: LD_INT 1
23668: PLUS
23669: ST_TO_ADDR
// SetSide ( i , j ) ;
23670: LD_VAR 0 2
23674: PPUSH
23675: LD_VAR 0 3
23679: PPUSH
23680: CALL_OW 235
// end ;
23684: GO 23607
23686: POP
23687: POP
// end ;
23688: LD_VAR 0 1
23692: RET
// export function hHackFog ; begin
23693: LD_INT 0
23695: PPUSH
// FogOff ( true ) ;
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 344
// end ;
23703: LD_VAR 0 1
23707: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23708: LD_INT 0
23710: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23711: LD_VAR 0 1
23715: PPUSH
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: LD_INT 1
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: CALL_OW 483
// CenterOnXY ( x , y ) ;
23736: LD_VAR 0 2
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: CALL_OW 84
// end ; end_of_file
23750: LD_VAR 0 4
23754: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23755: LD_INT 0
23757: PPUSH
23758: PPUSH
23759: PPUSH
23760: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 264
23770: PUSH
23771: LD_EXP 23
23775: EQUAL
23776: IFFALSE 23848
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23778: LD_INT 68
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 255
23790: PPUSH
23791: CALL_OW 321
23795: PUSH
23796: LD_INT 2
23798: EQUAL
23799: IFFALSE 23811
// eff := 70 else
23801: LD_ADDR_VAR 0 4
23805: PUSH
23806: LD_INT 70
23808: ST_TO_ADDR
23809: GO 23819
// eff := 30 ;
23811: LD_ADDR_VAR 0 4
23815: PUSH
23816: LD_INT 30
23818: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 250
23828: PPUSH
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 251
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: CALL_OW 495
// end ; end ;
23848: LD_VAR 0 2
23852: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23853: LD_INT 0
23855: PPUSH
// end ;
23856: LD_VAR 0 4
23860: RET
// export function SOS_Command ( cmd ) ; begin
23861: LD_INT 0
23863: PPUSH
// end ;
23864: LD_VAR 0 2
23868: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23869: LD_INT 0
23871: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23872: LD_VAR 0 1
23876: PUSH
23877: LD_INT 250
23879: EQUAL
23880: PUSH
23881: LD_VAR 0 2
23885: PPUSH
23886: CALL_OW 264
23890: PUSH
23891: LD_EXP 26
23895: EQUAL
23896: AND
23897: IFFALSE 23918
// MinerPlaceMine ( unit , x , y ) ;
23899: LD_VAR 0 2
23903: PPUSH
23904: LD_VAR 0 4
23908: PPUSH
23909: LD_VAR 0 5
23913: PPUSH
23914: CALL 26259 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23918: LD_VAR 0 1
23922: PUSH
23923: LD_INT 251
23925: EQUAL
23926: PUSH
23927: LD_VAR 0 2
23931: PPUSH
23932: CALL_OW 264
23936: PUSH
23937: LD_EXP 26
23941: EQUAL
23942: AND
23943: IFFALSE 23964
// MinerDetonateMine ( unit , x , y ) ;
23945: LD_VAR 0 2
23949: PPUSH
23950: LD_VAR 0 4
23954: PPUSH
23955: LD_VAR 0 5
23959: PPUSH
23960: CALL 26536 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23964: LD_VAR 0 1
23968: PUSH
23969: LD_INT 252
23971: EQUAL
23972: PUSH
23973: LD_VAR 0 2
23977: PPUSH
23978: CALL_OW 264
23982: PUSH
23983: LD_EXP 26
23987: EQUAL
23988: AND
23989: IFFALSE 24010
// MinerCreateMinefield ( unit , x , y ) ;
23991: LD_VAR 0 2
23995: PPUSH
23996: LD_VAR 0 4
24000: PPUSH
24001: LD_VAR 0 5
24005: PPUSH
24006: CALL 26953 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24010: LD_VAR 0 1
24014: PUSH
24015: LD_INT 253
24017: EQUAL
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: CALL_OW 257
24028: PUSH
24029: LD_INT 5
24031: EQUAL
24032: AND
24033: IFFALSE 24054
// ComBinocular ( unit , x , y ) ;
24035: LD_VAR 0 2
24039: PPUSH
24040: LD_VAR 0 4
24044: PPUSH
24045: LD_VAR 0 5
24049: PPUSH
24050: CALL 27324 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24054: LD_VAR 0 1
24058: PUSH
24059: LD_INT 254
24061: EQUAL
24062: PUSH
24063: LD_VAR 0 2
24067: PPUSH
24068: CALL_OW 264
24072: PUSH
24073: LD_EXP 21
24077: EQUAL
24078: AND
24079: PUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: CALL_OW 263
24089: PUSH
24090: LD_INT 3
24092: EQUAL
24093: AND
24094: IFFALSE 24110
// HackDestroyVehicle ( unit , selectedUnit ) ;
24096: LD_VAR 0 2
24100: PPUSH
24101: LD_VAR 0 3
24105: PPUSH
24106: CALL 25619 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24110: LD_VAR 0 1
24114: PUSH
24115: LD_INT 255
24117: EQUAL
24118: PUSH
24119: LD_VAR 0 2
24123: PPUSH
24124: CALL_OW 264
24128: PUSH
24129: LD_INT 14
24131: PUSH
24132: LD_INT 53
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: IN
24139: AND
24140: PUSH
24141: LD_VAR 0 4
24145: PPUSH
24146: LD_VAR 0 5
24150: PPUSH
24151: CALL_OW 488
24155: AND
24156: IFFALSE 24180
// CutTreeXYR ( unit , x , y , 12 ) ;
24158: LD_VAR 0 2
24162: PPUSH
24163: LD_VAR 0 4
24167: PPUSH
24168: LD_VAR 0 5
24172: PPUSH
24173: LD_INT 12
24175: PPUSH
24176: CALL 24185 0 4
// end ;
24180: LD_VAR 0 6
24184: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24185: LD_INT 0
24187: PPUSH
24188: PPUSH
24189: PPUSH
24190: PPUSH
24191: PPUSH
24192: PPUSH
24193: PPUSH
24194: PPUSH
24195: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24196: LD_VAR 0 1
24200: NOT
24201: PUSH
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 488
24216: NOT
24217: OR
24218: PUSH
24219: LD_VAR 0 4
24223: NOT
24224: OR
24225: IFFALSE 24229
// exit ;
24227: GO 24569
// list := [ ] ;
24229: LD_ADDR_VAR 0 13
24233: PUSH
24234: EMPTY
24235: ST_TO_ADDR
// if x - r < 0 then
24236: LD_VAR 0 2
24240: PUSH
24241: LD_VAR 0 4
24245: MINUS
24246: PUSH
24247: LD_INT 0
24249: LESS
24250: IFFALSE 24262
// min_x := 0 else
24252: LD_ADDR_VAR 0 7
24256: PUSH
24257: LD_INT 0
24259: ST_TO_ADDR
24260: GO 24278
// min_x := x - r ;
24262: LD_ADDR_VAR 0 7
24266: PUSH
24267: LD_VAR 0 2
24271: PUSH
24272: LD_VAR 0 4
24276: MINUS
24277: ST_TO_ADDR
// if y - r < 0 then
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: MINUS
24288: PUSH
24289: LD_INT 0
24291: LESS
24292: IFFALSE 24304
// min_y := 0 else
24294: LD_ADDR_VAR 0 8
24298: PUSH
24299: LD_INT 0
24301: ST_TO_ADDR
24302: GO 24320
// min_y := y - r ;
24304: LD_ADDR_VAR 0 8
24308: PUSH
24309: LD_VAR 0 3
24313: PUSH
24314: LD_VAR 0 4
24318: MINUS
24319: ST_TO_ADDR
// max_x := x + r ;
24320: LD_ADDR_VAR 0 9
24324: PUSH
24325: LD_VAR 0 2
24329: PUSH
24330: LD_VAR 0 4
24334: PLUS
24335: ST_TO_ADDR
// max_y := y + r ;
24336: LD_ADDR_VAR 0 10
24340: PUSH
24341: LD_VAR 0 3
24345: PUSH
24346: LD_VAR 0 4
24350: PLUS
24351: ST_TO_ADDR
// for _x = min_x to max_x do
24352: LD_ADDR_VAR 0 11
24356: PUSH
24357: DOUBLE
24358: LD_VAR 0 7
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 9
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24487
// for _y = min_y to max_y do
24372: LD_ADDR_VAR 0 12
24376: PUSH
24377: DOUBLE
24378: LD_VAR 0 8
24382: DEC
24383: ST_TO_ADDR
24384: LD_VAR 0 10
24388: PUSH
24389: FOR_TO
24390: IFFALSE 24483
// begin if not ValidHex ( _x , _y ) then
24392: LD_VAR 0 11
24396: PPUSH
24397: LD_VAR 0 12
24401: PPUSH
24402: CALL_OW 488
24406: NOT
24407: IFFALSE 24411
// continue ;
24409: GO 24389
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24411: LD_VAR 0 11
24415: PPUSH
24416: LD_VAR 0 12
24420: PPUSH
24421: CALL_OW 351
24425: PUSH
24426: LD_VAR 0 11
24430: PPUSH
24431: LD_VAR 0 12
24435: PPUSH
24436: CALL_OW 554
24440: AND
24441: IFFALSE 24481
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24443: LD_ADDR_VAR 0 13
24447: PUSH
24448: LD_VAR 0 13
24452: PPUSH
24453: LD_VAR 0 13
24457: PUSH
24458: LD_INT 1
24460: PLUS
24461: PPUSH
24462: LD_VAR 0 11
24466: PUSH
24467: LD_VAR 0 12
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 2
24480: ST_TO_ADDR
// end ;
24481: GO 24389
24483: POP
24484: POP
24485: GO 24369
24487: POP
24488: POP
// if not list then
24489: LD_VAR 0 13
24493: NOT
24494: IFFALSE 24498
// exit ;
24496: GO 24569
// for i in list do
24498: LD_ADDR_VAR 0 6
24502: PUSH
24503: LD_VAR 0 13
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24567
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_STRING M
24518: PUSH
24519: LD_VAR 0 6
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: PUSH
24528: LD_VAR 0 6
24532: PUSH
24533: LD_INT 2
24535: ARRAY
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: PUSH
24558: EMPTY
24559: LIST
24560: PPUSH
24561: CALL_OW 447
24565: GO 24508
24567: POP
24568: POP
// end ;
24569: LD_VAR 0 5
24573: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24574: LD_EXP 90
24578: NOT
24579: IFFALSE 24629
24581: GO 24583
24583: DISABLE
// begin initHack := true ;
24584: LD_ADDR_EXP 90
24588: PUSH
24589: LD_INT 1
24591: ST_TO_ADDR
// hackTanks := [ ] ;
24592: LD_ADDR_EXP 91
24596: PUSH
24597: EMPTY
24598: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24599: LD_ADDR_EXP 92
24603: PUSH
24604: EMPTY
24605: ST_TO_ADDR
// hackLimit := 3 ;
24606: LD_ADDR_EXP 93
24610: PUSH
24611: LD_INT 3
24613: ST_TO_ADDR
// hackDist := 12 ;
24614: LD_ADDR_EXP 94
24618: PUSH
24619: LD_INT 12
24621: ST_TO_ADDR
// hackCounter := [ ] ;
24622: LD_ADDR_EXP 95
24626: PUSH
24627: EMPTY
24628: ST_TO_ADDR
// end ;
24629: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24630: LD_EXP 90
24634: PUSH
24635: LD_INT 34
24637: PUSH
24638: LD_EXP 21
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: AND
24652: IFFALSE 24907
24654: GO 24656
24656: DISABLE
24657: LD_INT 0
24659: PPUSH
24660: PPUSH
// begin enable ;
24661: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24662: LD_ADDR_VAR 0 1
24666: PUSH
24667: LD_INT 34
24669: PUSH
24670: LD_EXP 21
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL_OW 69
24683: PUSH
24684: FOR_IN
24685: IFFALSE 24905
// begin if not i in hackTanks then
24687: LD_VAR 0 1
24691: PUSH
24692: LD_EXP 91
24696: IN
24697: NOT
24698: IFFALSE 24781
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24700: LD_ADDR_EXP 91
24704: PUSH
24705: LD_EXP 91
24709: PPUSH
24710: LD_EXP 91
24714: PUSH
24715: LD_INT 1
24717: PLUS
24718: PPUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 1
24728: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24729: LD_ADDR_EXP 92
24733: PUSH
24734: LD_EXP 92
24738: PPUSH
24739: LD_EXP 92
24743: PUSH
24744: LD_INT 1
24746: PLUS
24747: PPUSH
24748: EMPTY
24749: PPUSH
24750: CALL_OW 1
24754: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24755: LD_ADDR_EXP 95
24759: PUSH
24760: LD_EXP 95
24764: PPUSH
24765: LD_EXP 95
24769: PUSH
24770: LD_INT 1
24772: PLUS
24773: PPUSH
24774: EMPTY
24775: PPUSH
24776: CALL_OW 1
24780: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 302
24790: NOT
24791: IFFALSE 24804
// begin HackUnlinkAll ( i ) ;
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL 24910 0 1
// continue ;
24802: GO 24684
// end ; HackCheckCapturedStatus ( i ) ;
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL 25353 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24813: LD_ADDR_VAR 0 2
24817: PUSH
24818: LD_INT 81
24820: PUSH
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL_OW 255
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 33
24837: PUSH
24838: LD_INT 3
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 91
24847: PUSH
24848: LD_VAR 0 1
24852: PUSH
24853: LD_EXP 94
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 50
24865: PUSH
24866: EMPTY
24867: LIST
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: PPUSH
24875: CALL_OW 69
24879: ST_TO_ADDR
// if not tmp then
24880: LD_VAR 0 2
24884: NOT
24885: IFFALSE 24889
// continue ;
24887: GO 24684
// HackLink ( i , tmp ) ;
24889: LD_VAR 0 1
24893: PPUSH
24894: LD_VAR 0 2
24898: PPUSH
24899: CALL 25046 0 2
// end ;
24903: GO 24684
24905: POP
24906: POP
// end ;
24907: PPOPN 2
24909: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24910: LD_INT 0
24912: PPUSH
24913: PPUSH
24914: PPUSH
// if not hack in hackTanks then
24915: LD_VAR 0 1
24919: PUSH
24920: LD_EXP 91
24924: IN
24925: NOT
24926: IFFALSE 24930
// exit ;
24928: GO 25041
// index := GetElementIndex ( hackTanks , hack ) ;
24930: LD_ADDR_VAR 0 4
24934: PUSH
24935: LD_EXP 91
24939: PPUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL 32475 0 2
24949: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24950: LD_EXP 92
24954: PUSH
24955: LD_VAR 0 4
24959: ARRAY
24960: IFFALSE 25041
// begin for i in hackTanksCaptured [ index ] do
24962: LD_ADDR_VAR 0 3
24966: PUSH
24967: LD_EXP 92
24971: PUSH
24972: LD_VAR 0 4
24976: ARRAY
24977: PUSH
24978: FOR_IN
24979: IFFALSE 25005
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24981: LD_VAR 0 3
24985: PUSH
24986: LD_INT 1
24988: ARRAY
24989: PPUSH
24990: LD_VAR 0 3
24994: PUSH
24995: LD_INT 2
24997: ARRAY
24998: PPUSH
24999: CALL_OW 235
25003: GO 24978
25005: POP
25006: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25007: LD_ADDR_EXP 92
25011: PUSH
25012: LD_EXP 92
25016: PPUSH
25017: LD_VAR 0 4
25021: PPUSH
25022: EMPTY
25023: PPUSH
25024: CALL_OW 1
25028: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_INT 0
25036: PPUSH
25037: CALL_OW 505
// end ; end ;
25041: LD_VAR 0 2
25045: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25046: LD_INT 0
25048: PPUSH
25049: PPUSH
25050: PPUSH
// if not hack in hackTanks or not vehicles then
25051: LD_VAR 0 1
25055: PUSH
25056: LD_EXP 91
25060: IN
25061: NOT
25062: PUSH
25063: LD_VAR 0 2
25067: NOT
25068: OR
25069: IFFALSE 25073
// exit ;
25071: GO 25348
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25073: LD_ADDR_VAR 0 2
25077: PUSH
25078: LD_VAR 0 1
25082: PPUSH
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: LD_INT 1
25093: PPUSH
25094: CALL 33125 0 4
25098: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25099: LD_ADDR_VAR 0 5
25103: PUSH
25104: LD_EXP 91
25108: PPUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL 32475 0 2
25118: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25119: LD_EXP 92
25123: PUSH
25124: LD_VAR 0 5
25128: ARRAY
25129: PUSH
25130: LD_EXP 93
25134: LESS
25135: IFFALSE 25324
// begin for i := 1 to vehicles do
25137: LD_ADDR_VAR 0 4
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_VAR 0 2
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25322
// begin if hackTanksCaptured [ index ] = hackLimit then
25155: LD_EXP 92
25159: PUSH
25160: LD_VAR 0 5
25164: ARRAY
25165: PUSH
25166: LD_EXP 93
25170: EQUAL
25171: IFFALSE 25175
// break ;
25173: GO 25322
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25175: LD_ADDR_EXP 95
25179: PUSH
25180: LD_EXP 95
25184: PPUSH
25185: LD_VAR 0 5
25189: PPUSH
25190: LD_EXP 95
25194: PUSH
25195: LD_VAR 0 5
25199: ARRAY
25200: PUSH
25201: LD_INT 1
25203: PLUS
25204: PPUSH
25205: CALL_OW 1
25209: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25210: LD_ADDR_EXP 92
25214: PUSH
25215: LD_EXP 92
25219: PPUSH
25220: LD_VAR 0 5
25224: PUSH
25225: LD_EXP 92
25229: PUSH
25230: LD_VAR 0 5
25234: ARRAY
25235: PUSH
25236: LD_INT 1
25238: PLUS
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PPUSH
25244: LD_VAR 0 2
25248: PUSH
25249: LD_VAR 0 4
25253: ARRAY
25254: PUSH
25255: LD_VAR 0 2
25259: PUSH
25260: LD_VAR 0 4
25264: ARRAY
25265: PPUSH
25266: CALL_OW 255
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL 32690 0 3
25279: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 4
25289: ARRAY
25290: PPUSH
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 255
25300: PPUSH
25301: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25305: LD_VAR 0 2
25309: PUSH
25310: LD_VAR 0 4
25314: ARRAY
25315: PPUSH
25316: CALL_OW 141
// end ;
25320: GO 25152
25322: POP
25323: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_EXP 92
25333: PUSH
25334: LD_VAR 0 5
25338: ARRAY
25339: PUSH
25340: LD_INT 0
25342: PLUS
25343: PPUSH
25344: CALL_OW 505
// end ;
25348: LD_VAR 0 3
25352: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
// if not hack in hackTanks then
25359: LD_VAR 0 1
25363: PUSH
25364: LD_EXP 91
25368: IN
25369: NOT
25370: IFFALSE 25374
// exit ;
25372: GO 25614
// index := GetElementIndex ( hackTanks , hack ) ;
25374: LD_ADDR_VAR 0 4
25378: PUSH
25379: LD_EXP 91
25383: PPUSH
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL 32475 0 2
25393: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: DOUBLE
25400: LD_EXP 92
25404: PUSH
25405: LD_VAR 0 4
25409: ARRAY
25410: INC
25411: ST_TO_ADDR
25412: LD_INT 1
25414: PUSH
25415: FOR_DOWNTO
25416: IFFALSE 25588
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25418: LD_ADDR_VAR 0 5
25422: PUSH
25423: LD_EXP 92
25427: PUSH
25428: LD_VAR 0 4
25432: ARRAY
25433: PUSH
25434: LD_VAR 0 3
25438: ARRAY
25439: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25440: LD_VAR 0 5
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: CALL_OW 302
25453: NOT
25454: PUSH
25455: LD_VAR 0 5
25459: PUSH
25460: LD_INT 1
25462: ARRAY
25463: PPUSH
25464: CALL_OW 255
25468: PUSH
25469: LD_VAR 0 1
25473: PPUSH
25474: CALL_OW 255
25478: NONEQUAL
25479: OR
25480: IFFALSE 25586
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25482: LD_VAR 0 5
25486: PUSH
25487: LD_INT 1
25489: ARRAY
25490: PPUSH
25491: CALL_OW 305
25495: PUSH
25496: LD_VAR 0 5
25500: PUSH
25501: LD_INT 1
25503: ARRAY
25504: PPUSH
25505: CALL_OW 255
25509: PUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 255
25519: EQUAL
25520: AND
25521: IFFALSE 25545
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25523: LD_VAR 0 5
25527: PUSH
25528: LD_INT 1
25530: ARRAY
25531: PPUSH
25532: LD_VAR 0 5
25536: PUSH
25537: LD_INT 2
25539: ARRAY
25540: PPUSH
25541: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25545: LD_ADDR_EXP 92
25549: PUSH
25550: LD_EXP 92
25554: PPUSH
25555: LD_VAR 0 4
25559: PPUSH
25560: LD_EXP 92
25564: PUSH
25565: LD_VAR 0 4
25569: ARRAY
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: CALL_OW 3
25580: PPUSH
25581: CALL_OW 1
25585: ST_TO_ADDR
// end ; end ;
25586: GO 25415
25588: POP
25589: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_EXP 92
25599: PUSH
25600: LD_VAR 0 4
25604: ARRAY
25605: PUSH
25606: LD_INT 0
25608: PLUS
25609: PPUSH
25610: CALL_OW 505
// end ;
25614: LD_VAR 0 2
25618: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
// if not hack in hackTanks then
25625: LD_VAR 0 1
25629: PUSH
25630: LD_EXP 91
25634: IN
25635: NOT
25636: IFFALSE 25640
// exit ;
25638: GO 25725
// index := GetElementIndex ( hackTanks , hack ) ;
25640: LD_ADDR_VAR 0 5
25644: PUSH
25645: LD_EXP 91
25649: PPUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL 32475 0 2
25659: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25660: LD_ADDR_VAR 0 4
25664: PUSH
25665: DOUBLE
25666: LD_INT 1
25668: DEC
25669: ST_TO_ADDR
25670: LD_EXP 92
25674: PUSH
25675: LD_VAR 0 5
25679: ARRAY
25680: PUSH
25681: FOR_TO
25682: IFFALSE 25723
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25684: LD_EXP 92
25688: PUSH
25689: LD_VAR 0 5
25693: ARRAY
25694: PUSH
25695: LD_VAR 0 4
25699: ARRAY
25700: PUSH
25701: LD_INT 1
25703: ARRAY
25704: PUSH
25705: LD_VAR 0 2
25709: EQUAL
25710: IFFALSE 25721
// KillUnit ( vehicle ) ;
25712: LD_VAR 0 2
25716: PPUSH
25717: CALL_OW 66
25721: GO 25681
25723: POP
25724: POP
// end ;
25725: LD_VAR 0 3
25729: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25730: LD_EXP 96
25734: NOT
25735: IFFALSE 25770
25737: GO 25739
25739: DISABLE
// begin initMiner := true ;
25740: LD_ADDR_EXP 96
25744: PUSH
25745: LD_INT 1
25747: ST_TO_ADDR
// minersList := [ ] ;
25748: LD_ADDR_EXP 97
25752: PUSH
25753: EMPTY
25754: ST_TO_ADDR
// minerMinesList := [ ] ;
25755: LD_ADDR_EXP 98
25759: PUSH
25760: EMPTY
25761: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25762: LD_ADDR_EXP 99
25766: PUSH
25767: LD_INT 5
25769: ST_TO_ADDR
// end ;
25770: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25771: LD_EXP 96
25775: PUSH
25776: LD_INT 34
25778: PUSH
25779: LD_EXP 26
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: AND
25793: IFFALSE 26256
25795: GO 25797
25797: DISABLE
25798: LD_INT 0
25800: PPUSH
25801: PPUSH
25802: PPUSH
25803: PPUSH
// begin enable ;
25804: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25805: LD_ADDR_VAR 0 1
25809: PUSH
25810: LD_INT 34
25812: PUSH
25813: LD_EXP 26
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 69
25826: PUSH
25827: FOR_IN
25828: IFFALSE 25900
// begin if not i in minersList then
25830: LD_VAR 0 1
25834: PUSH
25835: LD_EXP 97
25839: IN
25840: NOT
25841: IFFALSE 25898
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25843: LD_ADDR_EXP 97
25847: PUSH
25848: LD_EXP 97
25852: PPUSH
25853: LD_EXP 97
25857: PUSH
25858: LD_INT 1
25860: PLUS
25861: PPUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 1
25871: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25872: LD_ADDR_EXP 98
25876: PUSH
25877: LD_EXP 98
25881: PPUSH
25882: LD_EXP 98
25886: PUSH
25887: LD_INT 1
25889: PLUS
25890: PPUSH
25891: EMPTY
25892: PPUSH
25893: CALL_OW 1
25897: ST_TO_ADDR
// end end ;
25898: GO 25827
25900: POP
25901: POP
// for i := minerMinesList downto 1 do
25902: LD_ADDR_VAR 0 1
25906: PUSH
25907: DOUBLE
25908: LD_EXP 98
25912: INC
25913: ST_TO_ADDR
25914: LD_INT 1
25916: PUSH
25917: FOR_DOWNTO
25918: IFFALSE 26254
// begin if IsLive ( minersList [ i ] ) then
25920: LD_EXP 97
25924: PUSH
25925: LD_VAR 0 1
25929: ARRAY
25930: PPUSH
25931: CALL_OW 300
25935: IFFALSE 25963
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25937: LD_EXP 97
25941: PUSH
25942: LD_VAR 0 1
25946: ARRAY
25947: PPUSH
25948: LD_EXP 98
25952: PUSH
25953: LD_VAR 0 1
25957: ARRAY
25958: PPUSH
25959: CALL_OW 505
// if not minerMinesList [ i ] then
25963: LD_EXP 98
25967: PUSH
25968: LD_VAR 0 1
25972: ARRAY
25973: NOT
25974: IFFALSE 25978
// continue ;
25976: GO 25917
// for j := minerMinesList [ i ] downto 1 do
25978: LD_ADDR_VAR 0 2
25982: PUSH
25983: DOUBLE
25984: LD_EXP 98
25988: PUSH
25989: LD_VAR 0 1
25993: ARRAY
25994: INC
25995: ST_TO_ADDR
25996: LD_INT 1
25998: PUSH
25999: FOR_DOWNTO
26000: IFFALSE 26250
// begin side := GetSide ( minersList [ i ] ) ;
26002: LD_ADDR_VAR 0 3
26006: PUSH
26007: LD_EXP 97
26011: PUSH
26012: LD_VAR 0 1
26016: ARRAY
26017: PPUSH
26018: CALL_OW 255
26022: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26023: LD_ADDR_VAR 0 4
26027: PUSH
26028: LD_EXP 98
26032: PUSH
26033: LD_VAR 0 1
26037: ARRAY
26038: PUSH
26039: LD_VAR 0 2
26043: ARRAY
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: LD_EXP 98
26053: PUSH
26054: LD_VAR 0 1
26058: ARRAY
26059: PUSH
26060: LD_VAR 0 2
26064: ARRAY
26065: PUSH
26066: LD_INT 2
26068: ARRAY
26069: PPUSH
26070: CALL_OW 428
26074: ST_TO_ADDR
// if not tmp then
26075: LD_VAR 0 4
26079: NOT
26080: IFFALSE 26084
// continue ;
26082: GO 25999
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26084: LD_VAR 0 4
26088: PUSH
26089: LD_INT 81
26091: PUSH
26092: LD_VAR 0 3
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PPUSH
26101: CALL_OW 69
26105: IN
26106: PUSH
26107: LD_EXP 98
26111: PUSH
26112: LD_VAR 0 1
26116: ARRAY
26117: PUSH
26118: LD_VAR 0 2
26122: ARRAY
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: PPUSH
26128: LD_EXP 98
26132: PUSH
26133: LD_VAR 0 1
26137: ARRAY
26138: PUSH
26139: LD_VAR 0 2
26143: ARRAY
26144: PUSH
26145: LD_INT 2
26147: ARRAY
26148: PPUSH
26149: CALL_OW 458
26153: AND
26154: IFFALSE 26248
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26156: LD_EXP 98
26160: PUSH
26161: LD_VAR 0 1
26165: ARRAY
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: PUSH
26173: LD_INT 1
26175: ARRAY
26176: PPUSH
26177: LD_EXP 98
26181: PUSH
26182: LD_VAR 0 1
26186: ARRAY
26187: PUSH
26188: LD_VAR 0 2
26192: ARRAY
26193: PUSH
26194: LD_INT 2
26196: ARRAY
26197: PPUSH
26198: LD_VAR 0 3
26202: PPUSH
26203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26207: LD_ADDR_EXP 98
26211: PUSH
26212: LD_EXP 98
26216: PPUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: LD_EXP 98
26226: PUSH
26227: LD_VAR 0 1
26231: ARRAY
26232: PPUSH
26233: LD_VAR 0 2
26237: PPUSH
26238: CALL_OW 3
26242: PPUSH
26243: CALL_OW 1
26247: ST_TO_ADDR
// end ; end ;
26248: GO 25999
26250: POP
26251: POP
// end ;
26252: GO 25917
26254: POP
26255: POP
// end ;
26256: PPOPN 4
26258: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
// result := false ;
26263: LD_ADDR_VAR 0 4
26267: PUSH
26268: LD_INT 0
26270: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26271: LD_VAR 0 1
26275: PPUSH
26276: CALL_OW 264
26280: PUSH
26281: LD_EXP 26
26285: EQUAL
26286: NOT
26287: IFFALSE 26291
// exit ;
26289: GO 26531
// index := GetElementIndex ( minersList , unit ) ;
26291: LD_ADDR_VAR 0 5
26295: PUSH
26296: LD_EXP 97
26300: PPUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL 32475 0 2
26310: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26311: LD_EXP 98
26315: PUSH
26316: LD_VAR 0 5
26320: ARRAY
26321: PUSH
26322: LD_EXP 99
26326: GREATEREQUAL
26327: IFFALSE 26331
// exit ;
26329: GO 26531
// ComMoveXY ( unit , x , y ) ;
26331: LD_VAR 0 1
26335: PPUSH
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26350: LD_INT 35
26352: PPUSH
26353: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26357: LD_VAR 0 1
26361: PPUSH
26362: LD_VAR 0 2
26366: PPUSH
26367: LD_VAR 0 3
26371: PPUSH
26372: CALL 62539 0 3
26376: NOT
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 314
26387: AND
26388: IFFALSE 26392
// exit ;
26390: GO 26531
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26392: LD_VAR 0 2
26396: PPUSH
26397: LD_VAR 0 3
26401: PPUSH
26402: CALL_OW 428
26406: PUSH
26407: LD_VAR 0 1
26411: EQUAL
26412: PUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 314
26422: NOT
26423: AND
26424: IFFALSE 26350
// PlaySoundXY ( x , y , PlantMine ) ;
26426: LD_VAR 0 2
26430: PPUSH
26431: LD_VAR 0 3
26435: PPUSH
26436: LD_STRING PlantMine
26438: PPUSH
26439: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: LD_VAR 0 1
26457: PPUSH
26458: CALL_OW 255
26462: PPUSH
26463: LD_INT 0
26465: PPUSH
26466: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26470: LD_ADDR_EXP 98
26474: PUSH
26475: LD_EXP 98
26479: PPUSH
26480: LD_VAR 0 5
26484: PUSH
26485: LD_EXP 98
26489: PUSH
26490: LD_VAR 0 5
26494: ARRAY
26495: PUSH
26496: LD_INT 1
26498: PLUS
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PPUSH
26504: LD_VAR 0 2
26508: PUSH
26509: LD_VAR 0 3
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PPUSH
26518: CALL 32690 0 3
26522: ST_TO_ADDR
// result := true ;
26523: LD_ADDR_VAR 0 4
26527: PUSH
26528: LD_INT 1
26530: ST_TO_ADDR
// end ;
26531: LD_VAR 0 4
26535: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26536: LD_INT 0
26538: PPUSH
26539: PPUSH
26540: PPUSH
// if not unit in minersList then
26541: LD_VAR 0 1
26545: PUSH
26546: LD_EXP 97
26550: IN
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26948
// index := GetElementIndex ( minersList , unit ) ;
26556: LD_ADDR_VAR 0 6
26560: PUSH
26561: LD_EXP 97
26565: PPUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL 32475 0 2
26575: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26576: LD_ADDR_VAR 0 5
26580: PUSH
26581: DOUBLE
26582: LD_EXP 98
26586: PUSH
26587: LD_VAR 0 6
26591: ARRAY
26592: INC
26593: ST_TO_ADDR
26594: LD_INT 1
26596: PUSH
26597: FOR_DOWNTO
26598: IFFALSE 26759
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26600: LD_EXP 98
26604: PUSH
26605: LD_VAR 0 6
26609: ARRAY
26610: PUSH
26611: LD_VAR 0 5
26615: ARRAY
26616: PUSH
26617: LD_INT 1
26619: ARRAY
26620: PUSH
26621: LD_VAR 0 2
26625: EQUAL
26626: PUSH
26627: LD_EXP 98
26631: PUSH
26632: LD_VAR 0 6
26636: ARRAY
26637: PUSH
26638: LD_VAR 0 5
26642: ARRAY
26643: PUSH
26644: LD_INT 2
26646: ARRAY
26647: PUSH
26648: LD_VAR 0 3
26652: EQUAL
26653: AND
26654: IFFALSE 26757
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26656: LD_EXP 98
26660: PUSH
26661: LD_VAR 0 6
26665: ARRAY
26666: PUSH
26667: LD_VAR 0 5
26671: ARRAY
26672: PUSH
26673: LD_INT 1
26675: ARRAY
26676: PPUSH
26677: LD_EXP 98
26681: PUSH
26682: LD_VAR 0 6
26686: ARRAY
26687: PUSH
26688: LD_VAR 0 5
26692: ARRAY
26693: PUSH
26694: LD_INT 2
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 255
26707: PPUSH
26708: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26712: LD_ADDR_EXP 98
26716: PUSH
26717: LD_EXP 98
26721: PPUSH
26722: LD_VAR 0 6
26726: PPUSH
26727: LD_EXP 98
26731: PUSH
26732: LD_VAR 0 6
26736: ARRAY
26737: PPUSH
26738: LD_VAR 0 5
26742: PPUSH
26743: CALL_OW 3
26747: PPUSH
26748: CALL_OW 1
26752: ST_TO_ADDR
// exit ;
26753: POP
26754: POP
26755: GO 26948
// end ; end ;
26757: GO 26597
26759: POP
26760: POP
// for i := minerMinesList [ index ] downto 1 do
26761: LD_ADDR_VAR 0 5
26765: PUSH
26766: DOUBLE
26767: LD_EXP 98
26771: PUSH
26772: LD_VAR 0 6
26776: ARRAY
26777: INC
26778: ST_TO_ADDR
26779: LD_INT 1
26781: PUSH
26782: FOR_DOWNTO
26783: IFFALSE 26946
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26785: LD_EXP 98
26789: PUSH
26790: LD_VAR 0 6
26794: ARRAY
26795: PUSH
26796: LD_VAR 0 5
26800: ARRAY
26801: PUSH
26802: LD_INT 1
26804: ARRAY
26805: PPUSH
26806: LD_EXP 98
26810: PUSH
26811: LD_VAR 0 6
26815: ARRAY
26816: PUSH
26817: LD_VAR 0 5
26821: ARRAY
26822: PUSH
26823: LD_INT 2
26825: ARRAY
26826: PPUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_VAR 0 3
26836: PPUSH
26837: CALL_OW 298
26841: PUSH
26842: LD_INT 6
26844: LESS
26845: IFFALSE 26944
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26847: LD_EXP 98
26851: PUSH
26852: LD_VAR 0 6
26856: ARRAY
26857: PUSH
26858: LD_VAR 0 5
26862: ARRAY
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PPUSH
26868: LD_EXP 98
26872: PUSH
26873: LD_VAR 0 6
26877: ARRAY
26878: PUSH
26879: LD_VAR 0 5
26883: ARRAY
26884: PUSH
26885: LD_INT 2
26887: ARRAY
26888: PPUSH
26889: LD_VAR 0 1
26893: PPUSH
26894: CALL_OW 255
26898: PPUSH
26899: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26903: LD_ADDR_EXP 98
26907: PUSH
26908: LD_EXP 98
26912: PPUSH
26913: LD_VAR 0 6
26917: PPUSH
26918: LD_EXP 98
26922: PUSH
26923: LD_VAR 0 6
26927: ARRAY
26928: PPUSH
26929: LD_VAR 0 5
26933: PPUSH
26934: CALL_OW 3
26938: PPUSH
26939: CALL_OW 1
26943: ST_TO_ADDR
// end ; end ;
26944: GO 26782
26946: POP
26947: POP
// end ;
26948: LD_VAR 0 4
26952: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26953: LD_INT 0
26955: PPUSH
26956: PPUSH
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 264
26973: PUSH
26974: LD_EXP 26
26978: EQUAL
26979: NOT
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: LD_EXP 97
26990: IN
26991: NOT
26992: OR
26993: IFFALSE 26997
// exit ;
26995: GO 27319
// index := GetElementIndex ( minersList , unit ) ;
26997: LD_ADDR_VAR 0 6
27001: PUSH
27002: LD_EXP 97
27006: PPUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL 32475 0 2
27016: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27017: LD_ADDR_VAR 0 8
27021: PUSH
27022: LD_EXP 99
27026: PUSH
27027: LD_EXP 98
27031: PUSH
27032: LD_VAR 0 6
27036: ARRAY
27037: MINUS
27038: ST_TO_ADDR
// if not minesFreeAmount then
27039: LD_VAR 0 8
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27319
// tmp := [ ] ;
27048: LD_ADDR_VAR 0 7
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27055: LD_ADDR_VAR 0 5
27059: PUSH
27060: DOUBLE
27061: LD_INT 1
27063: DEC
27064: ST_TO_ADDR
27065: LD_VAR 0 8
27069: PUSH
27070: FOR_TO
27071: IFFALSE 27266
// begin _d := rand ( 0 , 5 ) ;
27073: LD_ADDR_VAR 0 11
27077: PUSH
27078: LD_INT 0
27080: PPUSH
27081: LD_INT 5
27083: PPUSH
27084: CALL_OW 12
27088: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27089: LD_ADDR_VAR 0 12
27093: PUSH
27094: LD_INT 2
27096: PPUSH
27097: LD_INT 6
27099: PPUSH
27100: CALL_OW 12
27104: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27105: LD_ADDR_VAR 0 9
27109: PUSH
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 11
27119: PPUSH
27120: LD_VAR 0 12
27124: PPUSH
27125: CALL_OW 272
27129: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27130: LD_ADDR_VAR 0 10
27134: PUSH
27135: LD_VAR 0 3
27139: PPUSH
27140: LD_VAR 0 11
27144: PPUSH
27145: LD_VAR 0 12
27149: PPUSH
27150: CALL_OW 273
27154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27155: LD_VAR 0 9
27159: PPUSH
27160: LD_VAR 0 10
27164: PPUSH
27165: CALL_OW 488
27169: PUSH
27170: LD_VAR 0 9
27174: PUSH
27175: LD_VAR 0 10
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_VAR 0 7
27188: IN
27189: NOT
27190: AND
27191: PUSH
27192: LD_VAR 0 9
27196: PPUSH
27197: LD_VAR 0 10
27201: PPUSH
27202: CALL_OW 458
27206: NOT
27207: AND
27208: IFFALSE 27250
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27210: LD_ADDR_VAR 0 7
27214: PUSH
27215: LD_VAR 0 7
27219: PPUSH
27220: LD_VAR 0 7
27224: PUSH
27225: LD_INT 1
27227: PLUS
27228: PPUSH
27229: LD_VAR 0 9
27233: PUSH
27234: LD_VAR 0 10
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PPUSH
27243: CALL_OW 1
27247: ST_TO_ADDR
27248: GO 27264
// i := i - 1 ;
27250: LD_ADDR_VAR 0 5
27254: PUSH
27255: LD_VAR 0 5
27259: PUSH
27260: LD_INT 1
27262: MINUS
27263: ST_TO_ADDR
// end ;
27264: GO 27070
27266: POP
27267: POP
// for i in tmp do
27268: LD_ADDR_VAR 0 5
27272: PUSH
27273: LD_VAR 0 7
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27317
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_VAR 0 5
27290: PUSH
27291: LD_INT 1
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 5
27299: PUSH
27300: LD_INT 2
27302: ARRAY
27303: PPUSH
27304: CALL 26259 0 3
27308: NOT
27309: IFFALSE 27315
// exit ;
27311: POP
27312: POP
27313: GO 27319
27315: GO 27278
27317: POP
27318: POP
// end ;
27319: LD_VAR 0 4
27323: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27324: LD_INT 0
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
// if not GetClass ( unit ) = class_sniper then
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 257
27342: PUSH
27343: LD_INT 5
27345: EQUAL
27346: NOT
27347: IFFALSE 27351
// exit ;
27349: GO 27739
// dist := 8 ;
27351: LD_ADDR_VAR 0 5
27355: PUSH
27356: LD_INT 8
27358: ST_TO_ADDR
// viewRange := 12 ;
27359: LD_ADDR_VAR 0 7
27363: PUSH
27364: LD_INT 12
27366: ST_TO_ADDR
// side := GetSide ( unit ) ;
27367: LD_ADDR_VAR 0 6
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 255
27381: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27382: LD_INT 61
27384: PPUSH
27385: LD_VAR 0 6
27389: PPUSH
27390: CALL_OW 321
27394: PUSH
27395: LD_INT 2
27397: EQUAL
27398: IFFALSE 27408
// viewRange := 16 ;
27400: LD_ADDR_VAR 0 7
27404: PUSH
27405: LD_INT 16
27407: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27408: LD_VAR 0 1
27412: PPUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 297
27427: PUSH
27428: LD_VAR 0 5
27432: GREATER
27433: IFFALSE 27512
// begin ComMoveXY ( unit , x , y ) ;
27435: LD_VAR 0 1
27439: PPUSH
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_VAR 0 3
27449: PPUSH
27450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27454: LD_INT 35
27456: PPUSH
27457: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27461: LD_VAR 0 1
27465: PPUSH
27466: LD_VAR 0 2
27470: PPUSH
27471: LD_VAR 0 3
27475: PPUSH
27476: CALL 62539 0 3
27480: NOT
27481: IFFALSE 27485
// exit ;
27483: GO 27739
// until GetDistUnitXY ( unit , x , y ) < dist ;
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_VAR 0 3
27499: PPUSH
27500: CALL_OW 297
27504: PUSH
27505: LD_VAR 0 5
27509: LESS
27510: IFFALSE 27454
// end ; ComTurnXY ( unit , x , y ) ;
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_VAR 0 2
27521: PPUSH
27522: LD_VAR 0 3
27526: PPUSH
27527: CALL_OW 118
// wait ( 5 ) ;
27531: LD_INT 5
27533: PPUSH
27534: CALL_OW 67
// _d := GetDir ( unit ) ;
27538: LD_ADDR_VAR 0 10
27542: PUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 254
27552: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27553: LD_ADDR_VAR 0 8
27557: PUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 250
27567: PPUSH
27568: LD_VAR 0 10
27572: PPUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: CALL_OW 272
27582: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27583: LD_ADDR_VAR 0 9
27587: PUSH
27588: LD_VAR 0 1
27592: PPUSH
27593: CALL_OW 251
27597: PPUSH
27598: LD_VAR 0 10
27602: PPUSH
27603: LD_VAR 0 5
27607: PPUSH
27608: CALL_OW 273
27612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27613: LD_VAR 0 8
27617: PPUSH
27618: LD_VAR 0 9
27622: PPUSH
27623: CALL_OW 488
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 27739
// ComAnimCustom ( unit , 1 ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_INT 1
27639: PPUSH
27640: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27644: LD_VAR 0 8
27648: PPUSH
27649: LD_VAR 0 9
27653: PPUSH
27654: LD_VAR 0 6
27658: PPUSH
27659: LD_VAR 0 7
27663: PPUSH
27664: CALL_OW 330
// repeat wait ( 1 ) ;
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 316
27684: PUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 314
27694: OR
27695: PUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 302
27705: NOT
27706: OR
27707: PUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 301
27717: OR
27718: IFFALSE 27668
// RemoveSeeing ( _x , _y , side ) ;
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 9
27729: PPUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 331
// end ; end_of_file
27739: LD_VAR 0 4
27743: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27744: LD_INT 0
27746: PPUSH
27747: PPUSH
// if exist_mode then
27748: LD_VAR 0 2
27752: IFFALSE 27777
// unit := CreateCharacter ( prefix & ident ) else
27754: LD_ADDR_VAR 0 5
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: LD_VAR 0 1
27768: STR
27769: PPUSH
27770: CALL_OW 34
27774: ST_TO_ADDR
27775: GO 27792
// unit := NewCharacter ( ident ) ;
27777: LD_ADDR_VAR 0 5
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 25
27791: ST_TO_ADDR
// result := unit ;
27792: LD_ADDR_VAR 0 4
27796: PUSH
27797: LD_VAR 0 5
27801: ST_TO_ADDR
// end ;
27802: LD_VAR 0 4
27806: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27807: LD_INT 0
27809: PPUSH
27810: PPUSH
// if not side or not nation then
27811: LD_VAR 0 1
27815: NOT
27816: PUSH
27817: LD_VAR 0 2
27821: NOT
27822: OR
27823: IFFALSE 27827
// exit ;
27825: GO 28591
// case nation of nation_american :
27827: LD_VAR 0 2
27831: PUSH
27832: LD_INT 1
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 28054
27840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27841: LD_ADDR_VAR 0 4
27845: PUSH
27846: LD_INT 35
27848: PUSH
27849: LD_INT 45
27851: PUSH
27852: LD_INT 46
27854: PUSH
27855: LD_INT 47
27857: PUSH
27858: LD_INT 82
27860: PUSH
27861: LD_INT 83
27863: PUSH
27864: LD_INT 84
27866: PUSH
27867: LD_INT 85
27869: PUSH
27870: LD_INT 86
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: LD_INT 6
27881: PUSH
27882: LD_INT 15
27884: PUSH
27885: LD_INT 16
27887: PUSH
27888: LD_INT 7
27890: PUSH
27891: LD_INT 12
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 10
27899: PUSH
27900: LD_INT 14
27902: PUSH
27903: LD_INT 20
27905: PUSH
27906: LD_INT 21
27908: PUSH
27909: LD_INT 22
27911: PUSH
27912: LD_INT 25
27914: PUSH
27915: LD_INT 32
27917: PUSH
27918: LD_INT 27
27920: PUSH
27921: LD_INT 36
27923: PUSH
27924: LD_INT 69
27926: PUSH
27927: LD_INT 39
27929: PUSH
27930: LD_INT 34
27932: PUSH
27933: LD_INT 40
27935: PUSH
27936: LD_INT 48
27938: PUSH
27939: LD_INT 49
27941: PUSH
27942: LD_INT 50
27944: PUSH
27945: LD_INT 51
27947: PUSH
27948: LD_INT 52
27950: PUSH
27951: LD_INT 53
27953: PUSH
27954: LD_INT 54
27956: PUSH
27957: LD_INT 55
27959: PUSH
27960: LD_INT 56
27962: PUSH
27963: LD_INT 57
27965: PUSH
27966: LD_INT 58
27968: PUSH
27969: LD_INT 59
27971: PUSH
27972: LD_INT 60
27974: PUSH
27975: LD_INT 61
27977: PUSH
27978: LD_INT 62
27980: PUSH
27981: LD_INT 80
27983: PUSH
27984: LD_INT 82
27986: PUSH
27987: LD_INT 83
27989: PUSH
27990: LD_INT 84
27992: PUSH
27993: LD_INT 85
27995: PUSH
27996: LD_INT 86
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: ST_TO_ADDR
28052: GO 28515
28054: LD_INT 2
28056: DOUBLE
28057: EQUAL
28058: IFTRUE 28062
28060: GO 28284
28062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_INT 35
28070: PUSH
28071: LD_INT 45
28073: PUSH
28074: LD_INT 46
28076: PUSH
28077: LD_INT 47
28079: PUSH
28080: LD_INT 82
28082: PUSH
28083: LD_INT 83
28085: PUSH
28086: LD_INT 84
28088: PUSH
28089: LD_INT 85
28091: PUSH
28092: LD_INT 87
28094: PUSH
28095: LD_INT 70
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 11
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 4
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: LD_INT 6
28115: PUSH
28116: LD_INT 15
28118: PUSH
28119: LD_INT 18
28121: PUSH
28122: LD_INT 7
28124: PUSH
28125: LD_INT 17
28127: PUSH
28128: LD_INT 8
28130: PUSH
28131: LD_INT 20
28133: PUSH
28134: LD_INT 21
28136: PUSH
28137: LD_INT 22
28139: PUSH
28140: LD_INT 72
28142: PUSH
28143: LD_INT 26
28145: PUSH
28146: LD_INT 69
28148: PUSH
28149: LD_INT 39
28151: PUSH
28152: LD_INT 40
28154: PUSH
28155: LD_INT 41
28157: PUSH
28158: LD_INT 42
28160: PUSH
28161: LD_INT 43
28163: PUSH
28164: LD_INT 48
28166: PUSH
28167: LD_INT 49
28169: PUSH
28170: LD_INT 50
28172: PUSH
28173: LD_INT 51
28175: PUSH
28176: LD_INT 52
28178: PUSH
28179: LD_INT 53
28181: PUSH
28182: LD_INT 54
28184: PUSH
28185: LD_INT 55
28187: PUSH
28188: LD_INT 56
28190: PUSH
28191: LD_INT 60
28193: PUSH
28194: LD_INT 61
28196: PUSH
28197: LD_INT 62
28199: PUSH
28200: LD_INT 66
28202: PUSH
28203: LD_INT 67
28205: PUSH
28206: LD_INT 68
28208: PUSH
28209: LD_INT 81
28211: PUSH
28212: LD_INT 82
28214: PUSH
28215: LD_INT 83
28217: PUSH
28218: LD_INT 84
28220: PUSH
28221: LD_INT 85
28223: PUSH
28224: LD_INT 87
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
28282: GO 28515
28284: LD_INT 3
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28514
28292: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_INT 46
28300: PUSH
28301: LD_INT 47
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 82
28312: PUSH
28313: LD_INT 83
28315: PUSH
28316: LD_INT 84
28318: PUSH
28319: LD_INT 85
28321: PUSH
28322: LD_INT 86
28324: PUSH
28325: LD_INT 11
28327: PUSH
28328: LD_INT 9
28330: PUSH
28331: LD_INT 20
28333: PUSH
28334: LD_INT 19
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 24
28342: PUSH
28343: LD_INT 22
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 28
28351: PUSH
28352: LD_INT 29
28354: PUSH
28355: LD_INT 30
28357: PUSH
28358: LD_INT 31
28360: PUSH
28361: LD_INT 37
28363: PUSH
28364: LD_INT 38
28366: PUSH
28367: LD_INT 32
28369: PUSH
28370: LD_INT 27
28372: PUSH
28373: LD_INT 33
28375: PUSH
28376: LD_INT 69
28378: PUSH
28379: LD_INT 39
28381: PUSH
28382: LD_INT 34
28384: PUSH
28385: LD_INT 40
28387: PUSH
28388: LD_INT 71
28390: PUSH
28391: LD_INT 23
28393: PUSH
28394: LD_INT 44
28396: PUSH
28397: LD_INT 48
28399: PUSH
28400: LD_INT 49
28402: PUSH
28403: LD_INT 50
28405: PUSH
28406: LD_INT 51
28408: PUSH
28409: LD_INT 52
28411: PUSH
28412: LD_INT 53
28414: PUSH
28415: LD_INT 54
28417: PUSH
28418: LD_INT 55
28420: PUSH
28421: LD_INT 56
28423: PUSH
28424: LD_INT 57
28426: PUSH
28427: LD_INT 58
28429: PUSH
28430: LD_INT 59
28432: PUSH
28433: LD_INT 63
28435: PUSH
28436: LD_INT 64
28438: PUSH
28439: LD_INT 65
28441: PUSH
28442: LD_INT 82
28444: PUSH
28445: LD_INT 83
28447: PUSH
28448: LD_INT 84
28450: PUSH
28451: LD_INT 85
28453: PUSH
28454: LD_INT 86
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
28512: GO 28515
28514: POP
// if state > - 1 and state < 3 then
28515: LD_VAR 0 3
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: GREATER
28524: PUSH
28525: LD_VAR 0 3
28529: PUSH
28530: LD_INT 3
28532: LESS
28533: AND
28534: IFFALSE 28591
// for i in result do
28536: LD_ADDR_VAR 0 5
28540: PUSH
28541: LD_VAR 0 4
28545: PUSH
28546: FOR_IN
28547: IFFALSE 28589
// if GetTech ( i , side ) <> state then
28549: LD_VAR 0 5
28553: PPUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: CALL_OW 321
28563: PUSH
28564: LD_VAR 0 3
28568: NONEQUAL
28569: IFFALSE 28587
// result := result diff i ;
28571: LD_ADDR_VAR 0 4
28575: PUSH
28576: LD_VAR 0 4
28580: PUSH
28581: LD_VAR 0 5
28585: DIFF
28586: ST_TO_ADDR
28587: GO 28546
28589: POP
28590: POP
// end ;
28591: LD_VAR 0 4
28595: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
// result := true ;
28601: LD_ADDR_VAR 0 3
28605: PUSH
28606: LD_INT 1
28608: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28609: LD_ADDR_VAR 0 5
28613: PUSH
28614: LD_VAR 0 2
28618: PPUSH
28619: CALL_OW 480
28623: ST_TO_ADDR
// if not tmp then
28624: LD_VAR 0 5
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28682
// for i in tmp do
28633: LD_ADDR_VAR 0 4
28637: PUSH
28638: LD_VAR 0 5
28642: PUSH
28643: FOR_IN
28644: IFFALSE 28680
// if GetTech ( i , side ) <> state_researched then
28646: LD_VAR 0 4
28650: PPUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL_OW 321
28660: PUSH
28661: LD_INT 2
28663: NONEQUAL
28664: IFFALSE 28678
// begin result := false ;
28666: LD_ADDR_VAR 0 3
28670: PUSH
28671: LD_INT 0
28673: ST_TO_ADDR
// exit ;
28674: POP
28675: POP
28676: GO 28682
// end ;
28678: GO 28643
28680: POP
28681: POP
// end ;
28682: LD_VAR 0 3
28686: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28687: LD_INT 0
28689: PPUSH
28690: PPUSH
28691: PPUSH
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28702: LD_VAR 0 1
28706: NOT
28707: PUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 257
28717: PUSH
28718: LD_INT 9
28720: NONEQUAL
28721: OR
28722: IFFALSE 28726
// exit ;
28724: GO 29299
// side := GetSide ( unit ) ;
28726: LD_ADDR_VAR 0 9
28730: PUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 255
28740: ST_TO_ADDR
// tech_space := tech_spacanom ;
28741: LD_ADDR_VAR 0 12
28745: PUSH
28746: LD_INT 29
28748: ST_TO_ADDR
// tech_time := tech_taurad ;
28749: LD_ADDR_VAR 0 13
28753: PUSH
28754: LD_INT 28
28756: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28757: LD_ADDR_VAR 0 11
28761: PUSH
28762: LD_VAR 0 1
28766: PPUSH
28767: CALL_OW 310
28771: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28772: LD_VAR 0 11
28776: PPUSH
28777: CALL_OW 247
28781: PUSH
28782: LD_INT 2
28784: EQUAL
28785: IFFALSE 28789
// exit ;
28787: GO 29299
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28789: LD_ADDR_VAR 0 8
28793: PUSH
28794: LD_INT 81
28796: PUSH
28797: LD_VAR 0 9
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: LD_INT 21
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// if not tmp then
28832: LD_VAR 0 8
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 29299
// if in_unit then
28841: LD_VAR 0 11
28845: IFFALSE 28869
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28847: LD_ADDR_VAR 0 10
28851: PUSH
28852: LD_VAR 0 8
28856: PPUSH
28857: LD_VAR 0 11
28861: PPUSH
28862: CALL_OW 74
28866: ST_TO_ADDR
28867: GO 28889
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28869: LD_ADDR_VAR 0 10
28873: PUSH
28874: LD_VAR 0 8
28878: PPUSH
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 74
28888: ST_TO_ADDR
// if not enemy then
28889: LD_VAR 0 10
28893: NOT
28894: IFFALSE 28898
// exit ;
28896: GO 29299
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28898: LD_VAR 0 11
28902: PUSH
28903: LD_VAR 0 11
28907: PPUSH
28908: LD_VAR 0 10
28912: PPUSH
28913: CALL_OW 296
28917: PUSH
28918: LD_INT 13
28920: GREATER
28921: AND
28922: PUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_VAR 0 10
28932: PPUSH
28933: CALL_OW 296
28937: PUSH
28938: LD_INT 12
28940: GREATER
28941: OR
28942: IFFALSE 28946
// exit ;
28944: GO 29299
// missile := [ 1 ] ;
28946: LD_ADDR_VAR 0 14
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: EMPTY
28955: LIST
28956: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28957: LD_VAR 0 9
28961: PPUSH
28962: LD_VAR 0 12
28966: PPUSH
28967: CALL_OW 325
28971: IFFALSE 29000
// missile := Insert ( missile , missile + 1 , 2 ) ;
28973: LD_ADDR_VAR 0 14
28977: PUSH
28978: LD_VAR 0 14
28982: PPUSH
28983: LD_VAR 0 14
28987: PUSH
28988: LD_INT 1
28990: PLUS
28991: PPUSH
28992: LD_INT 2
28994: PPUSH
28995: CALL_OW 2
28999: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29000: LD_VAR 0 9
29004: PPUSH
29005: LD_VAR 0 13
29009: PPUSH
29010: CALL_OW 325
29014: PUSH
29015: LD_VAR 0 10
29019: PPUSH
29020: CALL_OW 255
29024: PPUSH
29025: LD_VAR 0 13
29029: PPUSH
29030: CALL_OW 325
29034: NOT
29035: AND
29036: IFFALSE 29065
// missile := Insert ( missile , missile + 1 , 3 ) ;
29038: LD_ADDR_VAR 0 14
29042: PUSH
29043: LD_VAR 0 14
29047: PPUSH
29048: LD_VAR 0 14
29052: PUSH
29053: LD_INT 1
29055: PLUS
29056: PPUSH
29057: LD_INT 3
29059: PPUSH
29060: CALL_OW 2
29064: ST_TO_ADDR
// if missile < 2 then
29065: LD_VAR 0 14
29069: PUSH
29070: LD_INT 2
29072: LESS
29073: IFFALSE 29077
// exit ;
29075: GO 29299
// x := GetX ( enemy ) ;
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 10
29086: PPUSH
29087: CALL_OW 250
29091: ST_TO_ADDR
// y := GetY ( enemy ) ;
29092: LD_ADDR_VAR 0 5
29096: PUSH
29097: LD_VAR 0 10
29101: PPUSH
29102: CALL_OW 251
29106: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29107: LD_ADDR_VAR 0 6
29111: PUSH
29112: LD_VAR 0 4
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PPUSH
29121: LD_INT 1
29123: PPUSH
29124: CALL_OW 12
29128: PLUS
29129: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29130: LD_ADDR_VAR 0 7
29134: PUSH
29135: LD_VAR 0 5
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PPUSH
29144: LD_INT 1
29146: PPUSH
29147: CALL_OW 12
29151: PLUS
29152: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29153: LD_VAR 0 6
29157: PPUSH
29158: LD_VAR 0 7
29162: PPUSH
29163: CALL_OW 488
29167: NOT
29168: IFFALSE 29190
// begin _x := x ;
29170: LD_ADDR_VAR 0 6
29174: PUSH
29175: LD_VAR 0 4
29179: ST_TO_ADDR
// _y := y ;
29180: LD_ADDR_VAR 0 7
29184: PUSH
29185: LD_VAR 0 5
29189: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_INT 1
29197: PPUSH
29198: LD_VAR 0 14
29202: PPUSH
29203: CALL_OW 12
29207: ST_TO_ADDR
// case i of 1 :
29208: LD_VAR 0 3
29212: PUSH
29213: LD_INT 1
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29238
29221: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29222: LD_VAR 0 1
29226: PPUSH
29227: LD_VAR 0 10
29231: PPUSH
29232: CALL_OW 115
29236: GO 29299
29238: LD_INT 2
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29268
29246: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29247: LD_VAR 0 1
29251: PPUSH
29252: LD_VAR 0 6
29256: PPUSH
29257: LD_VAR 0 7
29261: PPUSH
29262: CALL_OW 153
29266: GO 29299
29268: LD_INT 3
29270: DOUBLE
29271: EQUAL
29272: IFTRUE 29276
29274: GO 29298
29276: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29277: LD_VAR 0 1
29281: PPUSH
29282: LD_VAR 0 6
29286: PPUSH
29287: LD_VAR 0 7
29291: PPUSH
29292: CALL_OW 154
29296: GO 29299
29298: POP
// end ;
29299: LD_VAR 0 2
29303: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
// if not unit or not building then
29312: LD_VAR 0 1
29316: NOT
29317: PUSH
29318: LD_VAR 0 2
29322: NOT
29323: OR
29324: IFFALSE 29328
// exit ;
29326: GO 29486
// x := GetX ( building ) ;
29328: LD_ADDR_VAR 0 5
29332: PUSH
29333: LD_VAR 0 2
29337: PPUSH
29338: CALL_OW 250
29342: ST_TO_ADDR
// y := GetY ( building ) ;
29343: LD_ADDR_VAR 0 6
29347: PUSH
29348: LD_VAR 0 2
29352: PPUSH
29353: CALL_OW 251
29357: ST_TO_ADDR
// for i = 0 to 5 do
29358: LD_ADDR_VAR 0 4
29362: PUSH
29363: DOUBLE
29364: LD_INT 0
29366: DEC
29367: ST_TO_ADDR
29368: LD_INT 5
29370: PUSH
29371: FOR_TO
29372: IFFALSE 29484
// begin _x := ShiftX ( x , i , 3 ) ;
29374: LD_ADDR_VAR 0 7
29378: PUSH
29379: LD_VAR 0 5
29383: PPUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: LD_INT 3
29391: PPUSH
29392: CALL_OW 272
29396: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29397: LD_ADDR_VAR 0 8
29401: PUSH
29402: LD_VAR 0 6
29406: PPUSH
29407: LD_VAR 0 4
29411: PPUSH
29412: LD_INT 3
29414: PPUSH
29415: CALL_OW 273
29419: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29420: LD_VAR 0 7
29424: PPUSH
29425: LD_VAR 0 8
29429: PPUSH
29430: CALL_OW 488
29434: NOT
29435: IFFALSE 29439
// continue ;
29437: GO 29371
// if HexInfo ( _x , _y ) = 0 then
29439: LD_VAR 0 7
29443: PPUSH
29444: LD_VAR 0 8
29448: PPUSH
29449: CALL_OW 428
29453: PUSH
29454: LD_INT 0
29456: EQUAL
29457: IFFALSE 29482
// begin ComMoveXY ( unit , _x , _y ) ;
29459: LD_VAR 0 1
29463: PPUSH
29464: LD_VAR 0 7
29468: PPUSH
29469: LD_VAR 0 8
29473: PPUSH
29474: CALL_OW 111
// exit ;
29478: POP
29479: POP
29480: GO 29486
// end ; end ;
29482: GO 29371
29484: POP
29485: POP
// end ;
29486: LD_VAR 0 3
29490: RET
// export function ScanBase ( side , base_area ) ; begin
29491: LD_INT 0
29493: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_VAR 0 2
29503: PPUSH
29504: LD_INT 81
29506: PUSH
29507: LD_VAR 0 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PPUSH
29516: CALL_OW 70
29520: ST_TO_ADDR
// end ;
29521: LD_VAR 0 3
29525: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
// result := false ;
29532: LD_ADDR_VAR 0 2
29536: PUSH
29537: LD_INT 0
29539: ST_TO_ADDR
// side := GetSide ( unit ) ;
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 255
29554: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29555: LD_ADDR_VAR 0 4
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 248
29569: ST_TO_ADDR
// case nat of 1 :
29570: LD_VAR 0 4
29574: PUSH
29575: LD_INT 1
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29594
29583: POP
// tech := tech_lassight ; 2 :
29584: LD_ADDR_VAR 0 5
29588: PUSH
29589: LD_INT 12
29591: ST_TO_ADDR
29592: GO 29633
29594: LD_INT 2
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29613
29602: POP
// tech := tech_mortar ; 3 :
29603: LD_ADDR_VAR 0 5
29607: PUSH
29608: LD_INT 41
29610: ST_TO_ADDR
29611: GO 29633
29613: LD_INT 3
29615: DOUBLE
29616: EQUAL
29617: IFTRUE 29621
29619: GO 29632
29621: POP
// tech := tech_bazooka ; end ;
29622: LD_ADDR_VAR 0 5
29626: PUSH
29627: LD_INT 44
29629: ST_TO_ADDR
29630: GO 29633
29632: POP
// if Researched ( side , tech ) then
29633: LD_VAR 0 3
29637: PPUSH
29638: LD_VAR 0 5
29642: PPUSH
29643: CALL_OW 325
29647: IFFALSE 29674
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29649: LD_ADDR_VAR 0 2
29653: PUSH
29654: LD_INT 5
29656: PUSH
29657: LD_INT 8
29659: PUSH
29660: LD_INT 9
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: LD_VAR 0 4
29672: ARRAY
29673: ST_TO_ADDR
// end ;
29674: LD_VAR 0 2
29678: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
29683: PPUSH
// if not mines then
29684: LD_VAR 0 2
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 29837
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_INT 81
29700: PUSH
29701: LD_VAR 0 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: LD_INT 21
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// for i in mines do
29736: LD_ADDR_VAR 0 4
29740: PUSH
29741: LD_VAR 0 2
29745: PUSH
29746: FOR_IN
29747: IFFALSE 29835
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29749: LD_VAR 0 4
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PPUSH
29758: LD_VAR 0 4
29762: PUSH
29763: LD_INT 2
29765: ARRAY
29766: PPUSH
29767: CALL_OW 458
29771: NOT
29772: IFFALSE 29776
// continue ;
29774: GO 29746
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29776: LD_VAR 0 4
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: PPUSH
29785: LD_VAR 0 4
29789: PUSH
29790: LD_INT 2
29792: ARRAY
29793: PPUSH
29794: CALL_OW 428
29798: PUSH
29799: LD_VAR 0 5
29803: IN
29804: IFFALSE 29833
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29806: LD_VAR 0 4
29810: PUSH
29811: LD_INT 1
29813: ARRAY
29814: PPUSH
29815: LD_VAR 0 4
29819: PUSH
29820: LD_INT 2
29822: ARRAY
29823: PPUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 456
// end ;
29833: GO 29746
29835: POP
29836: POP
// end ;
29837: LD_VAR 0 3
29841: RET
// export function Count ( array ) ; var i ; begin
29842: LD_INT 0
29844: PPUSH
29845: PPUSH
// result := 0 ;
29846: LD_ADDR_VAR 0 2
29850: PUSH
29851: LD_INT 0
29853: ST_TO_ADDR
// for i in array do
29854: LD_ADDR_VAR 0 3
29858: PUSH
29859: LD_VAR 0 1
29863: PUSH
29864: FOR_IN
29865: IFFALSE 29889
// if i then
29867: LD_VAR 0 3
29871: IFFALSE 29887
// result := result + 1 ;
29873: LD_ADDR_VAR 0 2
29877: PUSH
29878: LD_VAR 0 2
29882: PUSH
29883: LD_INT 1
29885: PLUS
29886: ST_TO_ADDR
29887: GO 29864
29889: POP
29890: POP
// end ;
29891: LD_VAR 0 2
29895: RET
// export function IsEmpty ( building ) ; begin
29896: LD_INT 0
29898: PPUSH
// if not building then
29899: LD_VAR 0 1
29903: NOT
29904: IFFALSE 29908
// exit ;
29906: GO 29951
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29908: LD_ADDR_VAR 0 2
29912: PUSH
29913: LD_VAR 0 1
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 255
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 58
29937: PUSH
29938: EMPTY
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PPUSH
29945: CALL_OW 69
29949: IN
29950: ST_TO_ADDR
// end ;
29951: LD_VAR 0 2
29955: RET
// export function IsNotFull ( building ) ; begin
29956: LD_INT 0
29958: PPUSH
// if not building then
29959: LD_VAR 0 1
29963: NOT
29964: IFFALSE 29968
// exit ;
29966: GO 29987
// result := UnitsInside ( building ) < 6 ;
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 313
29982: PUSH
29983: LD_INT 6
29985: LESS
29986: ST_TO_ADDR
// end ;
29987: LD_VAR 0 2
29991: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29992: LD_INT 0
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
// tmp := [ ] ;
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: EMPTY
30004: ST_TO_ADDR
// list := [ ] ;
30005: LD_ADDR_VAR 0 5
30009: PUSH
30010: EMPTY
30011: ST_TO_ADDR
// for i = 16 to 25 do
30012: LD_ADDR_VAR 0 4
30016: PUSH
30017: DOUBLE
30018: LD_INT 16
30020: DEC
30021: ST_TO_ADDR
30022: LD_INT 25
30024: PUSH
30025: FOR_TO
30026: IFFALSE 30099
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_VAR 0 3
30037: PUSH
30038: LD_INT 22
30040: PUSH
30041: LD_VAR 0 1
30045: PPUSH
30046: CALL_OW 255
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 91
30057: PUSH
30058: LD_VAR 0 1
30062: PUSH
30063: LD_INT 6
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 30
30073: PUSH
30074: LD_VAR 0 4
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: PPUSH
30091: CALL_OW 69
30095: ADD
30096: ST_TO_ADDR
30097: GO 30025
30099: POP
30100: POP
// for i = 1 to tmp do
30101: LD_ADDR_VAR 0 4
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_VAR 0 3
30115: PUSH
30116: FOR_TO
30117: IFFALSE 30205
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30119: LD_ADDR_VAR 0 5
30123: PUSH
30124: LD_VAR 0 5
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: LD_VAR 0 4
30138: ARRAY
30139: PPUSH
30140: CALL_OW 266
30144: PUSH
30145: LD_VAR 0 3
30149: PUSH
30150: LD_VAR 0 4
30154: ARRAY
30155: PPUSH
30156: CALL_OW 250
30160: PUSH
30161: LD_VAR 0 3
30165: PUSH
30166: LD_VAR 0 4
30170: ARRAY
30171: PPUSH
30172: CALL_OW 251
30176: PUSH
30177: LD_VAR 0 3
30181: PUSH
30182: LD_VAR 0 4
30186: ARRAY
30187: PPUSH
30188: CALL_OW 254
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: ADD
30202: ST_TO_ADDR
30203: GO 30116
30205: POP
30206: POP
// result := list ;
30207: LD_ADDR_VAR 0 2
30211: PUSH
30212: LD_VAR 0 5
30216: ST_TO_ADDR
// end ;
30217: LD_VAR 0 2
30221: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30222: LD_INT 0
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
// if not factory then
30231: LD_VAR 0 1
30235: NOT
30236: IFFALSE 30240
// exit ;
30238: GO 30833
// if control = control_apeman then
30240: LD_VAR 0 4
30244: PUSH
30245: LD_INT 5
30247: EQUAL
30248: IFFALSE 30357
// begin tmp := UnitsInside ( factory ) ;
30250: LD_ADDR_VAR 0 8
30254: PUSH
30255: LD_VAR 0 1
30259: PPUSH
30260: CALL_OW 313
30264: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30265: LD_VAR 0 8
30269: PPUSH
30270: LD_INT 25
30272: PUSH
30273: LD_INT 12
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PPUSH
30280: CALL_OW 72
30284: NOT
30285: IFFALSE 30295
// control := control_manual ;
30287: LD_ADDR_VAR 0 4
30291: PUSH
30292: LD_INT 1
30294: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30295: LD_ADDR_VAR 0 8
30299: PUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL 29992 0 1
30309: ST_TO_ADDR
// if tmp then
30310: LD_VAR 0 8
30314: IFFALSE 30357
// begin for i in tmp do
30316: LD_ADDR_VAR 0 7
30320: PUSH
30321: LD_VAR 0 8
30325: PUSH
30326: FOR_IN
30327: IFFALSE 30355
// if i [ 1 ] = b_ext_radio then
30329: LD_VAR 0 7
30333: PUSH
30334: LD_INT 1
30336: ARRAY
30337: PUSH
30338: LD_INT 22
30340: EQUAL
30341: IFFALSE 30353
// begin control := control_remote ;
30343: LD_ADDR_VAR 0 4
30347: PUSH
30348: LD_INT 2
30350: ST_TO_ADDR
// break ;
30351: GO 30355
// end ;
30353: GO 30326
30355: POP
30356: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30357: LD_VAR 0 1
30361: PPUSH
30362: LD_VAR 0 2
30366: PPUSH
30367: LD_VAR 0 3
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: LD_VAR 0 5
30381: PPUSH
30382: CALL_OW 448
30386: IFFALSE 30421
// begin result := [ chassis , engine , control , weapon ] ;
30388: LD_ADDR_VAR 0 6
30392: PUSH
30393: LD_VAR 0 2
30397: PUSH
30398: LD_VAR 0 3
30402: PUSH
30403: LD_VAR 0 4
30407: PUSH
30408: LD_VAR 0 5
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// exit ;
30419: GO 30833
// end ; _chassis := AvailableChassisList ( factory ) ;
30421: LD_ADDR_VAR 0 9
30425: PUSH
30426: LD_VAR 0 1
30430: PPUSH
30431: CALL_OW 475
30435: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30436: LD_ADDR_VAR 0 11
30440: PUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 476
30450: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30451: LD_ADDR_VAR 0 12
30455: PUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 477
30465: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30466: LD_ADDR_VAR 0 10
30470: PUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 478
30480: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30481: LD_VAR 0 9
30485: NOT
30486: PUSH
30487: LD_VAR 0 11
30491: NOT
30492: OR
30493: PUSH
30494: LD_VAR 0 12
30498: NOT
30499: OR
30500: PUSH
30501: LD_VAR 0 10
30505: NOT
30506: OR
30507: IFFALSE 30542
// begin result := [ chassis , engine , control , weapon ] ;
30509: LD_ADDR_VAR 0 6
30513: PUSH
30514: LD_VAR 0 2
30518: PUSH
30519: LD_VAR 0 3
30523: PUSH
30524: LD_VAR 0 4
30528: PUSH
30529: LD_VAR 0 5
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// exit ;
30540: GO 30833
// end ; if not chassis in _chassis then
30542: LD_VAR 0 2
30546: PUSH
30547: LD_VAR 0 9
30551: IN
30552: NOT
30553: IFFALSE 30579
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30555: LD_ADDR_VAR 0 2
30559: PUSH
30560: LD_VAR 0 9
30564: PUSH
30565: LD_INT 1
30567: PPUSH
30568: LD_VAR 0 9
30572: PPUSH
30573: CALL_OW 12
30577: ARRAY
30578: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30579: LD_VAR 0 2
30583: PPUSH
30584: LD_VAR 0 3
30588: PPUSH
30589: CALL 30838 0 2
30593: NOT
30594: IFFALSE 30653
// repeat engine := _engine [ 1 ] ;
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_VAR 0 11
30605: PUSH
30606: LD_INT 1
30608: ARRAY
30609: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30610: LD_ADDR_VAR 0 11
30614: PUSH
30615: LD_VAR 0 11
30619: PPUSH
30620: LD_INT 1
30622: PPUSH
30623: CALL_OW 3
30627: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30628: LD_VAR 0 2
30632: PPUSH
30633: LD_VAR 0 3
30637: PPUSH
30638: CALL 30838 0 2
30642: PUSH
30643: LD_VAR 0 11
30647: PUSH
30648: EMPTY
30649: EQUAL
30650: OR
30651: IFFALSE 30596
// if not control in _control then
30653: LD_VAR 0 4
30657: PUSH
30658: LD_VAR 0 12
30662: IN
30663: NOT
30664: IFFALSE 30690
// control := _control [ rand ( 1 , _control ) ] ;
30666: LD_ADDR_VAR 0 4
30670: PUSH
30671: LD_VAR 0 12
30675: PUSH
30676: LD_INT 1
30678: PPUSH
30679: LD_VAR 0 12
30683: PPUSH
30684: CALL_OW 12
30688: ARRAY
30689: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30690: LD_VAR 0 2
30694: PPUSH
30695: LD_VAR 0 5
30699: PPUSH
30700: CALL 31058 0 2
30704: NOT
30705: IFFALSE 30764
// repeat weapon := _weapon [ 1 ] ;
30707: LD_ADDR_VAR 0 5
30711: PUSH
30712: LD_VAR 0 10
30716: PUSH
30717: LD_INT 1
30719: ARRAY
30720: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30721: LD_ADDR_VAR 0 10
30725: PUSH
30726: LD_VAR 0 10
30730: PPUSH
30731: LD_INT 1
30733: PPUSH
30734: CALL_OW 3
30738: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30739: LD_VAR 0 2
30743: PPUSH
30744: LD_VAR 0 5
30748: PPUSH
30749: CALL 31058 0 2
30753: PUSH
30754: LD_VAR 0 10
30758: PUSH
30759: EMPTY
30760: EQUAL
30761: OR
30762: IFFALSE 30707
// result := [ ] ;
30764: LD_ADDR_VAR 0 6
30768: PUSH
30769: EMPTY
30770: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30771: LD_VAR 0 1
30775: PPUSH
30776: LD_VAR 0 2
30780: PPUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: LD_VAR 0 4
30790: PPUSH
30791: LD_VAR 0 5
30795: PPUSH
30796: CALL_OW 448
30800: IFFALSE 30833
// result := [ chassis , engine , control , weapon ] ;
30802: LD_ADDR_VAR 0 6
30806: PUSH
30807: LD_VAR 0 2
30811: PUSH
30812: LD_VAR 0 3
30816: PUSH
30817: LD_VAR 0 4
30821: PUSH
30822: LD_VAR 0 5
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// end ;
30833: LD_VAR 0 6
30837: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30838: LD_INT 0
30840: PPUSH
// if not chassis or not engine then
30841: LD_VAR 0 1
30845: NOT
30846: PUSH
30847: LD_VAR 0 2
30851: NOT
30852: OR
30853: IFFALSE 30857
// exit ;
30855: GO 31053
// case engine of engine_solar :
30857: LD_VAR 0 2
30861: PUSH
30862: LD_INT 2
30864: DOUBLE
30865: EQUAL
30866: IFTRUE 30870
30868: GO 30908
30870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_INT 11
30878: PUSH
30879: LD_INT 12
30881: PUSH
30882: LD_INT 13
30884: PUSH
30885: LD_INT 14
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
30906: GO 31037
30908: LD_INT 1
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30978
30916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30917: LD_ADDR_VAR 0 3
30921: PUSH
30922: LD_INT 11
30924: PUSH
30925: LD_INT 12
30927: PUSH
30928: LD_INT 13
30930: PUSH
30931: LD_INT 14
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 5
30948: PUSH
30949: LD_INT 21
30951: PUSH
30952: LD_INT 23
30954: PUSH
30955: LD_INT 22
30957: PUSH
30958: LD_INT 24
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31037
30978: LD_INT 3
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31036
30986: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 13
30994: PUSH
30995: LD_INT 14
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 4
31006: PUSH
31007: LD_INT 5
31009: PUSH
31010: LD_INT 21
31012: PUSH
31013: LD_INT 22
31015: PUSH
31016: LD_INT 23
31018: PUSH
31019: LD_INT 24
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
31034: GO 31037
31036: POP
// result := ( chassis in result ) ;
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_VAR 0 1
31046: PUSH
31047: LD_VAR 0 3
31051: IN
31052: ST_TO_ADDR
// end ;
31053: LD_VAR 0 3
31057: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31058: LD_INT 0
31060: PPUSH
// if not chassis or not weapon then
31061: LD_VAR 0 1
31065: NOT
31066: PUSH
31067: LD_VAR 0 2
31071: NOT
31072: OR
31073: IFFALSE 31077
// exit ;
31075: GO 32103
// case weapon of us_machine_gun :
31077: LD_VAR 0 2
31081: PUSH
31082: LD_INT 2
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31120
31090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 4
31107: PUSH
31108: LD_INT 5
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: ST_TO_ADDR
31118: GO 32087
31120: LD_INT 3
31122: DOUBLE
31123: EQUAL
31124: IFTRUE 31128
31126: GO 31158
31128: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31129: LD_ADDR_VAR 0 3
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 3
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: ST_TO_ADDR
31156: GO 32087
31158: LD_INT 11
31160: DOUBLE
31161: EQUAL
31162: IFTRUE 31166
31164: GO 31196
31166: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31167: LD_ADDR_VAR 0 3
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: LD_INT 4
31183: PUSH
31184: LD_INT 5
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: ST_TO_ADDR
31194: GO 32087
31196: LD_INT 4
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31230
31204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: LD_INT 4
31218: PUSH
31219: LD_INT 5
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
31228: GO 32087
31230: LD_INT 5
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31264
31238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 4
31252: PUSH
31253: LD_INT 5
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 32087
31264: LD_INT 9
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31298
31272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 4
31286: PUSH
31287: LD_INT 5
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
31296: GO 32087
31298: LD_INT 7
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31332
31306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: LD_INT 5
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: ST_TO_ADDR
31330: GO 32087
31332: LD_INT 12
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31366
31340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31341: LD_ADDR_VAR 0 3
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 4
31354: PUSH
31355: LD_INT 5
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
31364: GO 32087
31366: LD_INT 13
31368: DOUBLE
31369: EQUAL
31370: IFTRUE 31374
31372: GO 31400
31374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31375: LD_ADDR_VAR 0 3
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: LD_INT 4
31388: PUSH
31389: LD_INT 5
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: ST_TO_ADDR
31398: GO 32087
31400: LD_INT 14
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31426
31408: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 5
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: ST_TO_ADDR
31424: GO 32087
31426: LD_INT 6
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31452
31434: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_INT 4
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 32087
31452: LD_INT 10
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31478
31460: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 4
31468: PUSH
31469: LD_INT 5
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
31476: GO 32087
31478: LD_INT 22
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31512
31486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_INT 11
31494: PUSH
31495: LD_INT 12
31497: PUSH
31498: LD_INT 13
31500: PUSH
31501: LD_INT 14
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
31510: GO 32087
31512: LD_INT 23
31514: DOUBLE
31515: EQUAL
31516: IFTRUE 31520
31518: GO 31546
31520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31521: LD_ADDR_VAR 0 3
31525: PUSH
31526: LD_INT 11
31528: PUSH
31529: LD_INT 12
31531: PUSH
31532: LD_INT 13
31534: PUSH
31535: LD_INT 14
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: ST_TO_ADDR
31544: GO 32087
31546: LD_INT 24
31548: DOUBLE
31549: EQUAL
31550: IFTRUE 31554
31552: GO 31580
31554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31555: LD_ADDR_VAR 0 3
31559: PUSH
31560: LD_INT 11
31562: PUSH
31563: LD_INT 12
31565: PUSH
31566: LD_INT 13
31568: PUSH
31569: LD_INT 14
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
31578: GO 32087
31580: LD_INT 30
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31614
31588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31589: LD_ADDR_VAR 0 3
31593: PUSH
31594: LD_INT 11
31596: PUSH
31597: LD_INT 12
31599: PUSH
31600: LD_INT 13
31602: PUSH
31603: LD_INT 14
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: ST_TO_ADDR
31612: GO 32087
31614: LD_INT 25
31616: DOUBLE
31617: EQUAL
31618: IFTRUE 31622
31620: GO 31640
31622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31623: LD_ADDR_VAR 0 3
31627: PUSH
31628: LD_INT 13
31630: PUSH
31631: LD_INT 14
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: ST_TO_ADDR
31638: GO 32087
31640: LD_INT 27
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31666
31648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31649: LD_ADDR_VAR 0 3
31653: PUSH
31654: LD_INT 13
31656: PUSH
31657: LD_INT 14
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: ST_TO_ADDR
31664: GO 32087
31666: LD_INT 28
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31692
31674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_INT 13
31682: PUSH
31683: LD_INT 14
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: ST_TO_ADDR
31690: GO 32087
31692: LD_INT 29
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31718
31700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 13
31708: PUSH
31709: LD_INT 14
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: ST_TO_ADDR
31716: GO 32087
31718: LD_INT 31
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31744
31726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31727: LD_ADDR_VAR 0 3
31731: PUSH
31732: LD_INT 13
31734: PUSH
31735: LD_INT 14
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: ST_TO_ADDR
31742: GO 32087
31744: LD_INT 26
31746: DOUBLE
31747: EQUAL
31748: IFTRUE 31752
31750: GO 31770
31752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: LD_INT 13
31760: PUSH
31761: LD_INT 14
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: ST_TO_ADDR
31768: GO 32087
31770: LD_INT 42
31772: DOUBLE
31773: EQUAL
31774: IFTRUE 31778
31776: GO 31804
31778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31779: LD_ADDR_VAR 0 3
31783: PUSH
31784: LD_INT 21
31786: PUSH
31787: LD_INT 22
31789: PUSH
31790: LD_INT 23
31792: PUSH
31793: LD_INT 24
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
31802: GO 32087
31804: LD_INT 43
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31838
31812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: LD_INT 21
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: LD_INT 23
31826: PUSH
31827: LD_INT 24
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
31836: GO 32087
31838: LD_INT 44
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31872
31846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_INT 23
31860: PUSH
31861: LD_INT 24
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
31870: GO 32087
31872: LD_INT 45
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31906
31880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 21
31888: PUSH
31889: LD_INT 22
31891: PUSH
31892: LD_INT 23
31894: PUSH
31895: LD_INT 24
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
31904: GO 32087
31906: LD_INT 49
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31940
31914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 21
31922: PUSH
31923: LD_INT 22
31925: PUSH
31926: LD_INT 23
31928: PUSH
31929: LD_INT 24
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
31938: GO 32087
31940: LD_INT 51
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31974
31948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_INT 21
31956: PUSH
31957: LD_INT 22
31959: PUSH
31960: LD_INT 23
31962: PUSH
31963: LD_INT 24
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
31972: GO 32087
31974: LD_INT 52
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 32008
31982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_INT 21
31990: PUSH
31991: LD_INT 22
31993: PUSH
31994: LD_INT 23
31996: PUSH
31997: LD_INT 24
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
32006: GO 32087
32008: LD_INT 53
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32034
32016: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_INT 23
32024: PUSH
32025: LD_INT 24
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32087
32034: LD_INT 46
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32060
32042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 23
32050: PUSH
32051: LD_INT 24
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: ST_TO_ADDR
32058: GO 32087
32060: LD_INT 47
32062: DOUBLE
32063: EQUAL
32064: IFTRUE 32068
32066: GO 32086
32068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_INT 23
32076: PUSH
32077: LD_INT 24
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: ST_TO_ADDR
32084: GO 32087
32086: POP
// result := ( chassis in result ) ;
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: LD_VAR 0 3
32101: IN
32102: ST_TO_ADDR
// end ;
32103: LD_VAR 0 3
32107: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32108: LD_INT 0
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
// result := array ;
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_VAR 0 1
32126: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32127: LD_VAR 0 1
32131: NOT
32132: PUSH
32133: LD_VAR 0 2
32137: NOT
32138: OR
32139: PUSH
32140: LD_VAR 0 3
32144: NOT
32145: OR
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_VAR 0 1
32156: GREATER
32157: OR
32158: PUSH
32159: LD_VAR 0 3
32163: PUSH
32164: LD_VAR 0 1
32168: GREATER
32169: OR
32170: IFFALSE 32174
// exit ;
32172: GO 32470
// if direction then
32174: LD_VAR 0 4
32178: IFFALSE 32242
// begin d := 1 ;
32180: LD_ADDR_VAR 0 9
32184: PUSH
32185: LD_INT 1
32187: ST_TO_ADDR
// if i_from > i_to then
32188: LD_VAR 0 2
32192: PUSH
32193: LD_VAR 0 3
32197: GREATER
32198: IFFALSE 32224
// length := ( array - i_from ) + i_to else
32200: LD_ADDR_VAR 0 11
32204: PUSH
32205: LD_VAR 0 1
32209: PUSH
32210: LD_VAR 0 2
32214: MINUS
32215: PUSH
32216: LD_VAR 0 3
32220: PLUS
32221: ST_TO_ADDR
32222: GO 32240
// length := i_to - i_from ;
32224: LD_ADDR_VAR 0 11
32228: PUSH
32229: LD_VAR 0 3
32233: PUSH
32234: LD_VAR 0 2
32238: MINUS
32239: ST_TO_ADDR
// end else
32240: GO 32303
// begin d := - 1 ;
32242: LD_ADDR_VAR 0 9
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: ST_TO_ADDR
// if i_from > i_to then
32251: LD_VAR 0 2
32255: PUSH
32256: LD_VAR 0 3
32260: GREATER
32261: IFFALSE 32281
// length := i_from - i_to else
32263: LD_ADDR_VAR 0 11
32267: PUSH
32268: LD_VAR 0 2
32272: PUSH
32273: LD_VAR 0 3
32277: MINUS
32278: ST_TO_ADDR
32279: GO 32303
// length := ( array - i_to ) + i_from ;
32281: LD_ADDR_VAR 0 11
32285: PUSH
32286: LD_VAR 0 1
32290: PUSH
32291: LD_VAR 0 3
32295: MINUS
32296: PUSH
32297: LD_VAR 0 2
32301: PLUS
32302: ST_TO_ADDR
// end ; if not length then
32303: LD_VAR 0 11
32307: NOT
32308: IFFALSE 32312
// exit ;
32310: GO 32470
// tmp := array ;
32312: LD_ADDR_VAR 0 10
32316: PUSH
32317: LD_VAR 0 1
32321: ST_TO_ADDR
// for i = 1 to length do
32322: LD_ADDR_VAR 0 6
32326: PUSH
32327: DOUBLE
32328: LD_INT 1
32330: DEC
32331: ST_TO_ADDR
32332: LD_VAR 0 11
32336: PUSH
32337: FOR_TO
32338: IFFALSE 32458
// begin for j = 1 to array do
32340: LD_ADDR_VAR 0 7
32344: PUSH
32345: DOUBLE
32346: LD_INT 1
32348: DEC
32349: ST_TO_ADDR
32350: LD_VAR 0 1
32354: PUSH
32355: FOR_TO
32356: IFFALSE 32444
// begin k := j + d ;
32358: LD_ADDR_VAR 0 8
32362: PUSH
32363: LD_VAR 0 7
32367: PUSH
32368: LD_VAR 0 9
32372: PLUS
32373: ST_TO_ADDR
// if k > array then
32374: LD_VAR 0 8
32378: PUSH
32379: LD_VAR 0 1
32383: GREATER
32384: IFFALSE 32394
// k := 1 ;
32386: LD_ADDR_VAR 0 8
32390: PUSH
32391: LD_INT 1
32393: ST_TO_ADDR
// if not k then
32394: LD_VAR 0 8
32398: NOT
32399: IFFALSE 32411
// k := array ;
32401: LD_ADDR_VAR 0 8
32405: PUSH
32406: LD_VAR 0 1
32410: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32411: LD_ADDR_VAR 0 10
32415: PUSH
32416: LD_VAR 0 10
32420: PPUSH
32421: LD_VAR 0 8
32425: PPUSH
32426: LD_VAR 0 1
32430: PUSH
32431: LD_VAR 0 7
32435: ARRAY
32436: PPUSH
32437: CALL_OW 1
32441: ST_TO_ADDR
// end ;
32442: GO 32355
32444: POP
32445: POP
// array := tmp ;
32446: LD_ADDR_VAR 0 1
32450: PUSH
32451: LD_VAR 0 10
32455: ST_TO_ADDR
// end ;
32456: GO 32337
32458: POP
32459: POP
// result := array ;
32460: LD_ADDR_VAR 0 5
32464: PUSH
32465: LD_VAR 0 1
32469: ST_TO_ADDR
// end ;
32470: LD_VAR 0 5
32474: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32475: LD_INT 0
32477: PPUSH
32478: PPUSH
// result := 0 ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_INT 0
32486: ST_TO_ADDR
// if not array or not value in array then
32487: LD_VAR 0 1
32491: NOT
32492: PUSH
32493: LD_VAR 0 2
32497: PUSH
32498: LD_VAR 0 1
32502: IN
32503: NOT
32504: OR
32505: IFFALSE 32509
// exit ;
32507: GO 32563
// for i = 1 to array do
32509: LD_ADDR_VAR 0 4
32513: PUSH
32514: DOUBLE
32515: LD_INT 1
32517: DEC
32518: ST_TO_ADDR
32519: LD_VAR 0 1
32523: PUSH
32524: FOR_TO
32525: IFFALSE 32561
// if value = array [ i ] then
32527: LD_VAR 0 2
32531: PUSH
32532: LD_VAR 0 1
32536: PUSH
32537: LD_VAR 0 4
32541: ARRAY
32542: EQUAL
32543: IFFALSE 32559
// begin result := i ;
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: LD_VAR 0 4
32554: ST_TO_ADDR
// exit ;
32555: POP
32556: POP
32557: GO 32563
// end ;
32559: GO 32524
32561: POP
32562: POP
// end ;
32563: LD_VAR 0 3
32567: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32568: LD_INT 0
32570: PPUSH
// vc_chassis := chassis ;
32571: LD_ADDR_OWVAR 37
32575: PUSH
32576: LD_VAR 0 1
32580: ST_TO_ADDR
// vc_engine := engine ;
32581: LD_ADDR_OWVAR 39
32585: PUSH
32586: LD_VAR 0 2
32590: ST_TO_ADDR
// vc_control := control ;
32591: LD_ADDR_OWVAR 38
32595: PUSH
32596: LD_VAR 0 3
32600: ST_TO_ADDR
// vc_weapon := weapon ;
32601: LD_ADDR_OWVAR 40
32605: PUSH
32606: LD_VAR 0 4
32610: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32611: LD_ADDR_OWVAR 41
32615: PUSH
32616: LD_VAR 0 5
32620: ST_TO_ADDR
// end ;
32621: LD_VAR 0 6
32625: RET
// export function WantPlant ( unit ) ; var task ; begin
32626: LD_INT 0
32628: PPUSH
32629: PPUSH
// result := false ;
32630: LD_ADDR_VAR 0 2
32634: PUSH
32635: LD_INT 0
32637: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_VAR 0 1
32647: PPUSH
32648: CALL_OW 437
32652: ST_TO_ADDR
// if task then
32653: LD_VAR 0 3
32657: IFFALSE 32685
// if task [ 1 ] [ 1 ] = p then
32659: LD_VAR 0 3
32663: PUSH
32664: LD_INT 1
32666: ARRAY
32667: PUSH
32668: LD_INT 1
32670: ARRAY
32671: PUSH
32672: LD_STRING p
32674: EQUAL
32675: IFFALSE 32685
// result := true ;
32677: LD_ADDR_VAR 0 2
32681: PUSH
32682: LD_INT 1
32684: ST_TO_ADDR
// end ;
32685: LD_VAR 0 2
32689: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32690: LD_INT 0
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
// if pos < 1 then
32696: LD_VAR 0 2
32700: PUSH
32701: LD_INT 1
32703: LESS
32704: IFFALSE 32708
// exit ;
32706: GO 33011
// if pos = 1 then
32708: LD_VAR 0 2
32712: PUSH
32713: LD_INT 1
32715: EQUAL
32716: IFFALSE 32749
// result := Replace ( arr , pos [ 1 ] , value ) else
32718: LD_ADDR_VAR 0 4
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: LD_VAR 0 2
32732: PUSH
32733: LD_INT 1
32735: ARRAY
32736: PPUSH
32737: LD_VAR 0 3
32741: PPUSH
32742: CALL_OW 1
32746: ST_TO_ADDR
32747: GO 33011
// begin tmp := arr ;
32749: LD_ADDR_VAR 0 6
32753: PUSH
32754: LD_VAR 0 1
32758: ST_TO_ADDR
// s_arr := [ tmp ] ;
32759: LD_ADDR_VAR 0 7
32763: PUSH
32764: LD_VAR 0 6
32768: PUSH
32769: EMPTY
32770: LIST
32771: ST_TO_ADDR
// for i = 1 to pos - 1 do
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: DOUBLE
32778: LD_INT 1
32780: DEC
32781: ST_TO_ADDR
32782: LD_VAR 0 2
32786: PUSH
32787: LD_INT 1
32789: MINUS
32790: PUSH
32791: FOR_TO
32792: IFFALSE 32837
// begin tmp := tmp [ pos [ i ] ] ;
32794: LD_ADDR_VAR 0 6
32798: PUSH
32799: LD_VAR 0 6
32803: PUSH
32804: LD_VAR 0 2
32808: PUSH
32809: LD_VAR 0 5
32813: ARRAY
32814: ARRAY
32815: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32816: LD_ADDR_VAR 0 7
32820: PUSH
32821: LD_VAR 0 7
32825: PUSH
32826: LD_VAR 0 6
32830: PUSH
32831: EMPTY
32832: LIST
32833: ADD
32834: ST_TO_ADDR
// end ;
32835: GO 32791
32837: POP
32838: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 2
32853: PUSH
32854: LD_VAR 0 2
32858: ARRAY
32859: PPUSH
32860: LD_VAR 0 3
32864: PPUSH
32865: CALL_OW 1
32869: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32870: LD_ADDR_VAR 0 7
32874: PUSH
32875: LD_VAR 0 7
32879: PPUSH
32880: LD_VAR 0 7
32884: PPUSH
32885: LD_VAR 0 6
32889: PPUSH
32890: CALL_OW 1
32894: ST_TO_ADDR
// for i = s_arr downto 2 do
32895: LD_ADDR_VAR 0 5
32899: PUSH
32900: DOUBLE
32901: LD_VAR 0 7
32905: INC
32906: ST_TO_ADDR
32907: LD_INT 2
32909: PUSH
32910: FOR_DOWNTO
32911: IFFALSE 32995
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32913: LD_ADDR_VAR 0 6
32917: PUSH
32918: LD_VAR 0 7
32922: PUSH
32923: LD_VAR 0 5
32927: PUSH
32928: LD_INT 1
32930: MINUS
32931: ARRAY
32932: PPUSH
32933: LD_VAR 0 2
32937: PUSH
32938: LD_VAR 0 5
32942: PUSH
32943: LD_INT 1
32945: MINUS
32946: ARRAY
32947: PPUSH
32948: LD_VAR 0 7
32952: PUSH
32953: LD_VAR 0 5
32957: ARRAY
32958: PPUSH
32959: CALL_OW 1
32963: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32964: LD_ADDR_VAR 0 7
32968: PUSH
32969: LD_VAR 0 7
32973: PPUSH
32974: LD_VAR 0 5
32978: PUSH
32979: LD_INT 1
32981: MINUS
32982: PPUSH
32983: LD_VAR 0 6
32987: PPUSH
32988: CALL_OW 1
32992: ST_TO_ADDR
// end ;
32993: GO 32910
32995: POP
32996: POP
// result := s_arr [ 1 ] ;
32997: LD_ADDR_VAR 0 4
33001: PUSH
33002: LD_VAR 0 7
33006: PUSH
33007: LD_INT 1
33009: ARRAY
33010: ST_TO_ADDR
// end ; end ;
33011: LD_VAR 0 4
33015: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
// if not list then
33020: LD_VAR 0 1
33024: NOT
33025: IFFALSE 33029
// exit ;
33027: GO 33120
// i := list [ pos1 ] ;
33029: LD_ADDR_VAR 0 5
33033: PUSH
33034: LD_VAR 0 1
33038: PUSH
33039: LD_VAR 0 2
33043: ARRAY
33044: ST_TO_ADDR
// if not i then
33045: LD_VAR 0 5
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 33120
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33054: LD_ADDR_VAR 0 1
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: LD_VAR 0 2
33068: PPUSH
33069: LD_VAR 0 1
33073: PUSH
33074: LD_VAR 0 3
33078: ARRAY
33079: PPUSH
33080: CALL_OW 1
33084: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33085: LD_ADDR_VAR 0 1
33089: PUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: LD_VAR 0 3
33099: PPUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: CALL_OW 1
33109: ST_TO_ADDR
// result := list ;
33110: LD_ADDR_VAR 0 4
33114: PUSH
33115: LD_VAR 0 1
33119: ST_TO_ADDR
// end ;
33120: LD_VAR 0 4
33124: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33125: LD_INT 0
33127: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33128: LD_ADDR_VAR 0 5
33132: PUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 250
33142: PPUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 251
33152: PPUSH
33153: LD_VAR 0 2
33157: PPUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: CALL 33178 0 5
33172: ST_TO_ADDR
// end ;
33173: LD_VAR 0 5
33177: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
// if not list then
33184: LD_VAR 0 3
33188: NOT
33189: IFFALSE 33193
// exit ;
33191: GO 33581
// result := [ ] ;
33193: LD_ADDR_VAR 0 6
33197: PUSH
33198: EMPTY
33199: ST_TO_ADDR
// for i in list do
33200: LD_ADDR_VAR 0 7
33204: PUSH
33205: LD_VAR 0 3
33209: PUSH
33210: FOR_IN
33211: IFFALSE 33413
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33213: LD_ADDR_VAR 0 9
33217: PUSH
33218: LD_VAR 0 7
33222: PPUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: LD_VAR 0 2
33232: PPUSH
33233: CALL_OW 297
33237: ST_TO_ADDR
// if not result then
33238: LD_VAR 0 6
33242: NOT
33243: IFFALSE 33269
// result := [ [ i , tmp ] ] else
33245: LD_ADDR_VAR 0 6
33249: PUSH
33250: LD_VAR 0 7
33254: PUSH
33255: LD_VAR 0 9
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: EMPTY
33265: LIST
33266: ST_TO_ADDR
33267: GO 33411
// begin if result [ result ] [ 2 ] < tmp then
33269: LD_VAR 0 6
33273: PUSH
33274: LD_VAR 0 6
33278: ARRAY
33279: PUSH
33280: LD_INT 2
33282: ARRAY
33283: PUSH
33284: LD_VAR 0 9
33288: LESS
33289: IFFALSE 33331
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33291: LD_ADDR_VAR 0 6
33295: PUSH
33296: LD_VAR 0 6
33300: PPUSH
33301: LD_VAR 0 6
33305: PUSH
33306: LD_INT 1
33308: PLUS
33309: PPUSH
33310: LD_VAR 0 7
33314: PUSH
33315: LD_VAR 0 9
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PPUSH
33324: CALL_OW 2
33328: ST_TO_ADDR
33329: GO 33411
// for j = 1 to result do
33331: LD_ADDR_VAR 0 8
33335: PUSH
33336: DOUBLE
33337: LD_INT 1
33339: DEC
33340: ST_TO_ADDR
33341: LD_VAR 0 6
33345: PUSH
33346: FOR_TO
33347: IFFALSE 33409
// begin if tmp < result [ j ] [ 2 ] then
33349: LD_VAR 0 9
33353: PUSH
33354: LD_VAR 0 6
33358: PUSH
33359: LD_VAR 0 8
33363: ARRAY
33364: PUSH
33365: LD_INT 2
33367: ARRAY
33368: LESS
33369: IFFALSE 33407
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33371: LD_ADDR_VAR 0 6
33375: PUSH
33376: LD_VAR 0 6
33380: PPUSH
33381: LD_VAR 0 8
33385: PPUSH
33386: LD_VAR 0 7
33390: PUSH
33391: LD_VAR 0 9
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL_OW 2
33404: ST_TO_ADDR
// break ;
33405: GO 33409
// end ; end ;
33407: GO 33346
33409: POP
33410: POP
// end ; end ;
33411: GO 33210
33413: POP
33414: POP
// if result and not asc then
33415: LD_VAR 0 6
33419: PUSH
33420: LD_VAR 0 4
33424: NOT
33425: AND
33426: IFFALSE 33501
// begin tmp := result ;
33428: LD_ADDR_VAR 0 9
33432: PUSH
33433: LD_VAR 0 6
33437: ST_TO_ADDR
// for i = tmp downto 1 do
33438: LD_ADDR_VAR 0 7
33442: PUSH
33443: DOUBLE
33444: LD_VAR 0 9
33448: INC
33449: ST_TO_ADDR
33450: LD_INT 1
33452: PUSH
33453: FOR_DOWNTO
33454: IFFALSE 33499
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33456: LD_ADDR_VAR 0 6
33460: PUSH
33461: LD_VAR 0 6
33465: PPUSH
33466: LD_VAR 0 9
33470: PUSH
33471: LD_VAR 0 7
33475: MINUS
33476: PUSH
33477: LD_INT 1
33479: PLUS
33480: PPUSH
33481: LD_VAR 0 9
33485: PUSH
33486: LD_VAR 0 7
33490: ARRAY
33491: PPUSH
33492: CALL_OW 1
33496: ST_TO_ADDR
33497: GO 33453
33499: POP
33500: POP
// end ; tmp := [ ] ;
33501: LD_ADDR_VAR 0 9
33505: PUSH
33506: EMPTY
33507: ST_TO_ADDR
// if mode then
33508: LD_VAR 0 5
33512: IFFALSE 33581
// begin for i = 1 to result do
33514: LD_ADDR_VAR 0 7
33518: PUSH
33519: DOUBLE
33520: LD_INT 1
33522: DEC
33523: ST_TO_ADDR
33524: LD_VAR 0 6
33528: PUSH
33529: FOR_TO
33530: IFFALSE 33569
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33532: LD_ADDR_VAR 0 9
33536: PUSH
33537: LD_VAR 0 9
33541: PPUSH
33542: LD_VAR 0 7
33546: PPUSH
33547: LD_VAR 0 6
33551: PUSH
33552: LD_VAR 0 7
33556: ARRAY
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: CALL_OW 1
33566: ST_TO_ADDR
33567: GO 33529
33569: POP
33570: POP
// result := tmp ;
33571: LD_ADDR_VAR 0 6
33575: PUSH
33576: LD_VAR 0 9
33580: ST_TO_ADDR
// end ; end ;
33581: LD_VAR 0 6
33585: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33594: LD_ADDR_VAR 0 5
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// if not x or not y then
33616: LD_VAR 0 2
33620: NOT
33621: PUSH
33622: LD_VAR 0 3
33626: NOT
33627: OR
33628: IFFALSE 33632
// exit ;
33630: GO 35278
// if not range then
33632: LD_VAR 0 4
33636: NOT
33637: IFFALSE 33647
// range := 10 ;
33639: LD_ADDR_VAR 0 4
33643: PUSH
33644: LD_INT 10
33646: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33647: LD_ADDR_VAR 0 8
33651: PUSH
33652: LD_INT 81
33654: PUSH
33655: LD_VAR 0 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 92
33666: PUSH
33667: LD_VAR 0 2
33671: PUSH
33672: LD_VAR 0 3
33676: PUSH
33677: LD_VAR 0 4
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 21
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: PPUSH
33710: CALL_OW 69
33714: ST_TO_ADDR
// if not tmp then
33715: LD_VAR 0 8
33719: NOT
33720: IFFALSE 33724
// exit ;
33722: GO 35278
// for i in tmp do
33724: LD_ADDR_VAR 0 6
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: FOR_IN
33735: IFFALSE 35253
// begin points := [ 0 , 0 , 0 ] ;
33737: LD_ADDR_VAR 0 9
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// bpoints := 1 ;
33756: LD_ADDR_VAR 0 10
33760: PUSH
33761: LD_INT 1
33763: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 247
33773: PUSH
33774: LD_INT 1
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 34360
33782: POP
// begin if GetClass ( i ) = 1 then
33783: LD_VAR 0 6
33787: PPUSH
33788: CALL_OW 257
33792: PUSH
33793: LD_INT 1
33795: EQUAL
33796: IFFALSE 33817
// points := [ 10 , 5 , 3 ] ;
33798: LD_ADDR_VAR 0 9
33802: PUSH
33803: LD_INT 10
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33817: LD_VAR 0 6
33821: PPUSH
33822: CALL_OW 257
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: IN
33841: IFFALSE 33862
// points := [ 3 , 2 , 1 ] ;
33843: LD_ADDR_VAR 0 9
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33862: LD_VAR 0 6
33866: PPUSH
33867: CALL_OW 257
33871: PUSH
33872: LD_INT 5
33874: EQUAL
33875: IFFALSE 33896
// points := [ 130 , 5 , 2 ] ;
33877: LD_ADDR_VAR 0 9
33881: PUSH
33882: LD_INT 130
33884: PUSH
33885: LD_INT 5
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33896: LD_VAR 0 6
33900: PPUSH
33901: CALL_OW 257
33905: PUSH
33906: LD_INT 8
33908: EQUAL
33909: IFFALSE 33930
// points := [ 35 , 35 , 30 ] ;
33911: LD_ADDR_VAR 0 9
33915: PUSH
33916: LD_INT 35
33918: PUSH
33919: LD_INT 35
33921: PUSH
33922: LD_INT 30
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33930: LD_VAR 0 6
33934: PPUSH
33935: CALL_OW 257
33939: PUSH
33940: LD_INT 9
33942: EQUAL
33943: IFFALSE 33964
// points := [ 20 , 55 , 40 ] ;
33945: LD_ADDR_VAR 0 9
33949: PUSH
33950: LD_INT 20
33952: PUSH
33953: LD_INT 55
33955: PUSH
33956: LD_INT 40
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33964: LD_VAR 0 6
33968: PPUSH
33969: CALL_OW 257
33973: PUSH
33974: LD_INT 12
33976: PUSH
33977: LD_INT 16
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: IN
33984: IFFALSE 34005
// points := [ 5 , 3 , 2 ] ;
33986: LD_ADDR_VAR 0 9
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34005: LD_VAR 0 6
34009: PPUSH
34010: CALL_OW 257
34014: PUSH
34015: LD_INT 17
34017: EQUAL
34018: IFFALSE 34039
// points := [ 100 , 50 , 75 ] ;
34020: LD_ADDR_VAR 0 9
34024: PUSH
34025: LD_INT 100
34027: PUSH
34028: LD_INT 50
34030: PUSH
34031: LD_INT 75
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34039: LD_VAR 0 6
34043: PPUSH
34044: CALL_OW 257
34048: PUSH
34049: LD_INT 15
34051: EQUAL
34052: IFFALSE 34073
// points := [ 10 , 5 , 3 ] ;
34054: LD_ADDR_VAR 0 9
34058: PUSH
34059: LD_INT 10
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: LD_INT 3
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34073: LD_VAR 0 6
34077: PPUSH
34078: CALL_OW 257
34082: PUSH
34083: LD_INT 14
34085: EQUAL
34086: IFFALSE 34107
// points := [ 10 , 0 , 0 ] ;
34088: LD_ADDR_VAR 0 9
34092: PUSH
34093: LD_INT 10
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34107: LD_VAR 0 6
34111: PPUSH
34112: CALL_OW 257
34116: PUSH
34117: LD_INT 11
34119: EQUAL
34120: IFFALSE 34141
// points := [ 30 , 10 , 5 ] ;
34122: LD_ADDR_VAR 0 9
34126: PUSH
34127: LD_INT 30
34129: PUSH
34130: LD_INT 10
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34141: LD_VAR 0 1
34145: PPUSH
34146: LD_INT 5
34148: PPUSH
34149: CALL_OW 321
34153: PUSH
34154: LD_INT 2
34156: EQUAL
34157: IFFALSE 34174
// bpoints := bpoints * 1.8 ;
34159: LD_ADDR_VAR 0 10
34163: PUSH
34164: LD_VAR 0 10
34168: PUSH
34169: LD_REAL  1.80000000000000E+0000
34172: MUL
34173: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34174: LD_VAR 0 6
34178: PPUSH
34179: CALL_OW 257
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: IN
34202: PUSH
34203: LD_VAR 0 1
34207: PPUSH
34208: LD_INT 51
34210: PPUSH
34211: CALL_OW 321
34215: PUSH
34216: LD_INT 2
34218: EQUAL
34219: AND
34220: IFFALSE 34237
// bpoints := bpoints * 1.2 ;
34222: LD_ADDR_VAR 0 10
34226: PUSH
34227: LD_VAR 0 10
34231: PUSH
34232: LD_REAL  1.20000000000000E+0000
34235: MUL
34236: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 257
34246: PUSH
34247: LD_INT 5
34249: PUSH
34250: LD_INT 7
34252: PUSH
34253: LD_INT 9
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: IN
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: LD_INT 52
34269: PPUSH
34270: CALL_OW 321
34274: PUSH
34275: LD_INT 2
34277: EQUAL
34278: AND
34279: IFFALSE 34296
// bpoints := bpoints * 1.5 ;
34281: LD_ADDR_VAR 0 10
34285: PUSH
34286: LD_VAR 0 10
34290: PUSH
34291: LD_REAL  1.50000000000000E+0000
34294: MUL
34295: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34296: LD_VAR 0 1
34300: PPUSH
34301: LD_INT 66
34303: PPUSH
34304: CALL_OW 321
34308: PUSH
34309: LD_INT 2
34311: EQUAL
34312: IFFALSE 34329
// bpoints := bpoints * 1.1 ;
34314: LD_ADDR_VAR 0 10
34318: PUSH
34319: LD_VAR 0 10
34323: PUSH
34324: LD_REAL  1.10000000000000E+0000
34327: MUL
34328: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34329: LD_ADDR_VAR 0 10
34333: PUSH
34334: LD_VAR 0 10
34338: PUSH
34339: LD_VAR 0 6
34343: PPUSH
34344: LD_INT 1
34346: PPUSH
34347: CALL_OW 259
34351: PUSH
34352: LD_REAL  1.15000000000000E+0000
34355: MUL
34356: MUL
34357: ST_TO_ADDR
// end ; unit_vehicle :
34358: GO 35182
34360: LD_INT 2
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 35170
34368: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34369: LD_VAR 0 6
34373: PPUSH
34374: CALL_OW 264
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 42
34384: PUSH
34385: LD_INT 24
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 25 , 5 , 3 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 25
34402: PUSH
34403: LD_INT 5
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 4
34426: PUSH
34427: LD_INT 43
34429: PUSH
34430: LD_INT 25
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: IN
34438: IFFALSE 34459
// points := [ 40 , 15 , 5 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 40
34447: PUSH
34448: LD_INT 15
34450: PUSH
34451: LD_INT 5
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 264
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 23
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: IN
34479: IFFALSE 34500
// points := [ 7 , 25 , 8 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 7
34488: PUSH
34489: LD_INT 25
34491: PUSH
34492: LD_INT 8
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 264
34509: PUSH
34510: LD_INT 5
34512: PUSH
34513: LD_INT 27
34515: PUSH
34516: LD_INT 44
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: IN
34524: IFFALSE 34545
// points := [ 14 , 50 , 16 ] ;
34526: LD_ADDR_VAR 0 9
34530: PUSH
34531: LD_INT 14
34533: PUSH
34534: LD_INT 50
34536: PUSH
34537: LD_INT 16
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34545: LD_VAR 0 6
34549: PPUSH
34550: CALL_OW 264
34554: PUSH
34555: LD_INT 6
34557: PUSH
34558: LD_INT 46
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: IN
34565: IFFALSE 34586
// points := [ 32 , 120 , 70 ] ;
34567: LD_ADDR_VAR 0 9
34571: PUSH
34572: LD_INT 32
34574: PUSH
34575: LD_INT 120
34577: PUSH
34578: LD_INT 70
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34586: LD_VAR 0 6
34590: PPUSH
34591: CALL_OW 264
34595: PUSH
34596: LD_INT 7
34598: PUSH
34599: LD_INT 28
34601: PUSH
34602: LD_INT 45
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: IN
34610: IFFALSE 34631
// points := [ 35 , 20 , 45 ] ;
34612: LD_ADDR_VAR 0 9
34616: PUSH
34617: LD_INT 35
34619: PUSH
34620: LD_INT 20
34622: PUSH
34623: LD_INT 45
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34631: LD_VAR 0 6
34635: PPUSH
34636: CALL_OW 264
34640: PUSH
34641: LD_INT 47
34643: PUSH
34644: EMPTY
34645: LIST
34646: IN
34647: IFFALSE 34668
// points := [ 67 , 45 , 75 ] ;
34649: LD_ADDR_VAR 0 9
34653: PUSH
34654: LD_INT 67
34656: PUSH
34657: LD_INT 45
34659: PUSH
34660: LD_INT 75
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34668: LD_VAR 0 6
34672: PPUSH
34673: CALL_OW 264
34677: PUSH
34678: LD_INT 26
34680: PUSH
34681: EMPTY
34682: LIST
34683: IN
34684: IFFALSE 34705
// points := [ 120 , 30 , 80 ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_INT 120
34693: PUSH
34694: LD_INT 30
34696: PUSH
34697: LD_INT 80
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 264
34714: PUSH
34715: LD_INT 22
34717: PUSH
34718: EMPTY
34719: LIST
34720: IN
34721: IFFALSE 34742
// points := [ 40 , 1 , 1 ] ;
34723: LD_ADDR_VAR 0 9
34727: PUSH
34728: LD_INT 40
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34742: LD_VAR 0 6
34746: PPUSH
34747: CALL_OW 264
34751: PUSH
34752: LD_INT 29
34754: PUSH
34755: EMPTY
34756: LIST
34757: IN
34758: IFFALSE 34779
// points := [ 70 , 200 , 400 ] ;
34760: LD_ADDR_VAR 0 9
34764: PUSH
34765: LD_INT 70
34767: PUSH
34768: LD_INT 200
34770: PUSH
34771: LD_INT 400
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34779: LD_VAR 0 6
34783: PPUSH
34784: CALL_OW 264
34788: PUSH
34789: LD_INT 14
34791: PUSH
34792: LD_INT 53
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: IN
34799: IFFALSE 34820
// points := [ 40 , 10 , 20 ] ;
34801: LD_ADDR_VAR 0 9
34805: PUSH
34806: LD_INT 40
34808: PUSH
34809: LD_INT 10
34811: PUSH
34812: LD_INT 20
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34820: LD_VAR 0 6
34824: PPUSH
34825: CALL_OW 264
34829: PUSH
34830: LD_INT 9
34832: PUSH
34833: EMPTY
34834: LIST
34835: IN
34836: IFFALSE 34857
// points := [ 5 , 70 , 20 ] ;
34838: LD_ADDR_VAR 0 9
34842: PUSH
34843: LD_INT 5
34845: PUSH
34846: LD_INT 70
34848: PUSH
34849: LD_INT 20
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34857: LD_VAR 0 6
34861: PPUSH
34862: CALL_OW 264
34866: PUSH
34867: LD_INT 10
34869: PUSH
34870: EMPTY
34871: LIST
34872: IN
34873: IFFALSE 34894
// points := [ 35 , 110 , 70 ] ;
34875: LD_ADDR_VAR 0 9
34879: PUSH
34880: LD_INT 35
34882: PUSH
34883: LD_INT 110
34885: PUSH
34886: LD_INT 70
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34894: LD_VAR 0 6
34898: PPUSH
34899: CALL_OW 265
34903: PUSH
34904: LD_INT 25
34906: EQUAL
34907: IFFALSE 34928
// points := [ 80 , 65 , 100 ] ;
34909: LD_ADDR_VAR 0 9
34913: PUSH
34914: LD_INT 80
34916: PUSH
34917: LD_INT 65
34919: PUSH
34920: LD_INT 100
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34928: LD_VAR 0 6
34932: PPUSH
34933: CALL_OW 263
34937: PUSH
34938: LD_INT 1
34940: EQUAL
34941: IFFALSE 34976
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34943: LD_ADDR_VAR 0 10
34947: PUSH
34948: LD_VAR 0 10
34952: PUSH
34953: LD_VAR 0 6
34957: PPUSH
34958: CALL_OW 311
34962: PPUSH
34963: LD_INT 3
34965: PPUSH
34966: CALL_OW 259
34970: PUSH
34971: LD_INT 4
34973: MUL
34974: MUL
34975: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34976: LD_VAR 0 6
34980: PPUSH
34981: CALL_OW 263
34985: PUSH
34986: LD_INT 2
34988: EQUAL
34989: IFFALSE 35040
// begin j := IsControledBy ( i ) ;
34991: LD_ADDR_VAR 0 7
34995: PUSH
34996: LD_VAR 0 6
35000: PPUSH
35001: CALL_OW 312
35005: ST_TO_ADDR
// if j then
35006: LD_VAR 0 7
35010: IFFALSE 35040
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35012: LD_ADDR_VAR 0 10
35016: PUSH
35017: LD_VAR 0 10
35021: PUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: LD_INT 3
35029: PPUSH
35030: CALL_OW 259
35034: PUSH
35035: LD_INT 3
35037: MUL
35038: MUL
35039: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 264
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: LD_INT 6
35055: PUSH
35056: LD_INT 46
35058: PUSH
35059: LD_INT 44
35061: PUSH
35062: LD_INT 47
35064: PUSH
35065: LD_INT 45
35067: PUSH
35068: LD_INT 28
35070: PUSH
35071: LD_INT 7
35073: PUSH
35074: LD_INT 27
35076: PUSH
35077: LD_INT 29
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: IN
35092: PUSH
35093: LD_VAR 0 1
35097: PPUSH
35098: LD_INT 52
35100: PPUSH
35101: CALL_OW 321
35105: PUSH
35106: LD_INT 2
35108: EQUAL
35109: AND
35110: IFFALSE 35127
// bpoints := bpoints * 1.2 ;
35112: LD_ADDR_VAR 0 10
35116: PUSH
35117: LD_VAR 0 10
35121: PUSH
35122: LD_REAL  1.20000000000000E+0000
35125: MUL
35126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35127: LD_VAR 0 6
35131: PPUSH
35132: CALL_OW 264
35136: PUSH
35137: LD_INT 6
35139: PUSH
35140: LD_INT 46
35142: PUSH
35143: LD_INT 47
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: IN
35151: IFFALSE 35168
// bpoints := bpoints * 1.2 ;
35153: LD_ADDR_VAR 0 10
35157: PUSH
35158: LD_VAR 0 10
35162: PUSH
35163: LD_REAL  1.20000000000000E+0000
35166: MUL
35167: ST_TO_ADDR
// end ; unit_building :
35168: GO 35182
35170: LD_INT 3
35172: DOUBLE
35173: EQUAL
35174: IFTRUE 35178
35176: GO 35181
35178: POP
// ; end ;
35179: GO 35182
35181: POP
// for j = 1 to 3 do
35182: LD_ADDR_VAR 0 7
35186: PUSH
35187: DOUBLE
35188: LD_INT 1
35190: DEC
35191: ST_TO_ADDR
35192: LD_INT 3
35194: PUSH
35195: FOR_TO
35196: IFFALSE 35249
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35198: LD_ADDR_VAR 0 5
35202: PUSH
35203: LD_VAR 0 5
35207: PPUSH
35208: LD_VAR 0 7
35212: PPUSH
35213: LD_VAR 0 5
35217: PUSH
35218: LD_VAR 0 7
35222: ARRAY
35223: PUSH
35224: LD_VAR 0 9
35228: PUSH
35229: LD_VAR 0 7
35233: ARRAY
35234: PUSH
35235: LD_VAR 0 10
35239: MUL
35240: PLUS
35241: PPUSH
35242: CALL_OW 1
35246: ST_TO_ADDR
35247: GO 35195
35249: POP
35250: POP
// end ;
35251: GO 33734
35253: POP
35254: POP
// result := Replace ( result , 4 , tmp ) ;
35255: LD_ADDR_VAR 0 5
35259: PUSH
35260: LD_VAR 0 5
35264: PPUSH
35265: LD_INT 4
35267: PPUSH
35268: LD_VAR 0 8
35272: PPUSH
35273: CALL_OW 1
35277: ST_TO_ADDR
// end ;
35278: LD_VAR 0 5
35282: RET
// export function DangerAtRange ( unit , range ) ; begin
35283: LD_INT 0
35285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35286: LD_ADDR_VAR 0 3
35290: PUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 255
35300: PPUSH
35301: LD_VAR 0 1
35305: PPUSH
35306: CALL_OW 250
35310: PPUSH
35311: LD_VAR 0 1
35315: PPUSH
35316: CALL_OW 251
35320: PPUSH
35321: LD_VAR 0 2
35325: PPUSH
35326: CALL 33586 0 4
35330: ST_TO_ADDR
// end ;
35331: LD_VAR 0 3
35335: RET
// export function DangerInArea ( side , area ) ; begin
35336: LD_INT 0
35338: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_VAR 0 2
35348: PPUSH
35349: LD_INT 81
35351: PUSH
35352: LD_VAR 0 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PPUSH
35361: CALL_OW 70
35365: ST_TO_ADDR
// end ;
35366: LD_VAR 0 3
35370: RET
// export function IsExtension ( b ) ; begin
35371: LD_INT 0
35373: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35374: LD_ADDR_VAR 0 2
35378: PUSH
35379: LD_VAR 0 1
35383: PUSH
35384: LD_INT 23
35386: PUSH
35387: LD_INT 20
35389: PUSH
35390: LD_INT 22
35392: PUSH
35393: LD_INT 17
35395: PUSH
35396: LD_INT 24
35398: PUSH
35399: LD_INT 21
35401: PUSH
35402: LD_INT 19
35404: PUSH
35405: LD_INT 16
35407: PUSH
35408: LD_INT 25
35410: PUSH
35411: LD_INT 18
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: IN
35426: ST_TO_ADDR
// end ;
35427: LD_VAR 0 2
35431: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35432: LD_INT 0
35434: PPUSH
35435: PPUSH
35436: PPUSH
// result := [ ] ;
35437: LD_ADDR_VAR 0 3
35441: PUSH
35442: EMPTY
35443: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35444: LD_ADDR_VAR 0 4
35448: PUSH
35449: LD_VAR 0 2
35453: PPUSH
35454: LD_INT 21
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PPUSH
35464: CALL_OW 70
35468: ST_TO_ADDR
// if not tmp then
35469: LD_VAR 0 4
35473: NOT
35474: IFFALSE 35478
// exit ;
35476: GO 35536
// for i in tmp do
35478: LD_ADDR_VAR 0 5
35482: PUSH
35483: LD_VAR 0 4
35487: PUSH
35488: FOR_IN
35489: IFFALSE 35524
// if GetBase ( i ) <> base then
35491: LD_VAR 0 5
35495: PPUSH
35496: CALL_OW 274
35500: PUSH
35501: LD_VAR 0 1
35505: NONEQUAL
35506: IFFALSE 35522
// ComLinkToBase ( base , i ) ;
35508: LD_VAR 0 1
35512: PPUSH
35513: LD_VAR 0 5
35517: PPUSH
35518: CALL_OW 169
35522: GO 35488
35524: POP
35525: POP
// result := tmp ;
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_VAR 0 4
35535: ST_TO_ADDR
// end ;
35536: LD_VAR 0 3
35540: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35541: LD_INT 0
35543: PPUSH
35544: PPUSH
// if BuildingStatus ( b ) = bs_build then
35545: LD_VAR 0 2
35549: PPUSH
35550: CALL_OW 461
35554: PUSH
35555: LD_INT 1
35557: EQUAL
35558: IFFALSE 35618
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35560: LD_VAR 0 1
35564: PPUSH
35565: LD_STRING h
35567: PUSH
35568: LD_VAR 0 2
35572: PPUSH
35573: CALL_OW 250
35577: PUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: CALL_OW 251
35587: PUSH
35588: LD_VAR 0 2
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: PPUSH
35614: CALL_OW 446
// end ;
35618: LD_VAR 0 3
35622: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35623: LD_INT 0
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35631: LD_VAR 0 1
35635: NOT
35636: PUSH
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 263
35646: PUSH
35647: LD_INT 2
35649: EQUAL
35650: NOT
35651: OR
35652: IFFALSE 35656
// exit ;
35654: GO 35972
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_INT 22
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 255
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 36
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 34
35693: PUSH
35694: LD_INT 31
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PPUSH
35710: CALL_OW 69
35714: ST_TO_ADDR
// if not tmp then
35715: LD_VAR 0 6
35719: NOT
35720: IFFALSE 35724
// exit ;
35722: GO 35972
// result := [ ] ;
35724: LD_ADDR_VAR 0 2
35728: PUSH
35729: EMPTY
35730: ST_TO_ADDR
// for i in tmp do
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_VAR 0 6
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35813
// begin t := UnitsInside ( i ) ;
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: LD_VAR 0 3
35753: PPUSH
35754: CALL_OW 313
35758: ST_TO_ADDR
// if t then
35759: LD_VAR 0 4
35763: IFFALSE 35811
// for j in t do
35765: LD_ADDR_VAR 0 7
35769: PUSH
35770: LD_VAR 0 4
35774: PUSH
35775: FOR_IN
35776: IFFALSE 35809
// result := Insert ( result , result + 1 , j ) ;
35778: LD_ADDR_VAR 0 2
35782: PUSH
35783: LD_VAR 0 2
35787: PPUSH
35788: LD_VAR 0 2
35792: PUSH
35793: LD_INT 1
35795: PLUS
35796: PPUSH
35797: LD_VAR 0 7
35801: PPUSH
35802: CALL_OW 2
35806: ST_TO_ADDR
35807: GO 35775
35809: POP
35810: POP
// end ;
35811: GO 35741
35813: POP
35814: POP
// if not result then
35815: LD_VAR 0 2
35819: NOT
35820: IFFALSE 35824
// exit ;
35822: GO 35972
// mech := result [ 1 ] ;
35824: LD_ADDR_VAR 0 5
35828: PUSH
35829: LD_VAR 0 2
35833: PUSH
35834: LD_INT 1
35836: ARRAY
35837: ST_TO_ADDR
// if result > 1 then
35838: LD_VAR 0 2
35842: PUSH
35843: LD_INT 1
35845: GREATER
35846: IFFALSE 35958
// for i = 2 to result do
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: DOUBLE
35854: LD_INT 2
35856: DEC
35857: ST_TO_ADDR
35858: LD_VAR 0 2
35862: PUSH
35863: FOR_TO
35864: IFFALSE 35956
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35866: LD_ADDR_VAR 0 4
35870: PUSH
35871: LD_VAR 0 2
35875: PUSH
35876: LD_VAR 0 3
35880: ARRAY
35881: PPUSH
35882: LD_INT 3
35884: PPUSH
35885: CALL_OW 259
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_VAR 0 3
35899: ARRAY
35900: PPUSH
35901: CALL_OW 432
35905: MINUS
35906: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35907: LD_VAR 0 4
35911: PUSH
35912: LD_VAR 0 5
35916: PPUSH
35917: LD_INT 3
35919: PPUSH
35920: CALL_OW 259
35924: PUSH
35925: LD_VAR 0 5
35929: PPUSH
35930: CALL_OW 432
35934: MINUS
35935: GREATEREQUAL
35936: IFFALSE 35954
// mech := result [ i ] ;
35938: LD_ADDR_VAR 0 5
35942: PUSH
35943: LD_VAR 0 2
35947: PUSH
35948: LD_VAR 0 3
35952: ARRAY
35953: ST_TO_ADDR
// end ;
35954: GO 35863
35956: POP
35957: POP
// ComLinkTo ( vehicle , mech ) ;
35958: LD_VAR 0 1
35962: PPUSH
35963: LD_VAR 0 5
35967: PPUSH
35968: CALL_OW 135
// end ;
35972: LD_VAR 0 2
35976: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
// result := [ ] ;
35992: LD_ADDR_VAR 0 7
35996: PUSH
35997: EMPTY
35998: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 266
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: IN
36019: NOT
36020: IFFALSE 36024
// exit ;
36022: GO 37655
// if name then
36024: LD_VAR 0 3
36028: IFFALSE 36044
// SetBName ( base_dep , name ) ;
36030: LD_VAR 0 1
36034: PPUSH
36035: LD_VAR 0 3
36039: PPUSH
36040: CALL_OW 500
// base := GetBase ( base_dep ) ;
36044: LD_ADDR_VAR 0 15
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 274
36058: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36059: LD_ADDR_VAR 0 16
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 255
36073: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36074: LD_ADDR_VAR 0 17
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 248
36088: ST_TO_ADDR
// if sources then
36089: LD_VAR 0 5
36093: IFFALSE 36140
// for i = 1 to 3 do
36095: LD_ADDR_VAR 0 8
36099: PUSH
36100: DOUBLE
36101: LD_INT 1
36103: DEC
36104: ST_TO_ADDR
36105: LD_INT 3
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36138
// AddResourceType ( base , i , sources [ i ] ) ;
36111: LD_VAR 0 15
36115: PPUSH
36116: LD_VAR 0 8
36120: PPUSH
36121: LD_VAR 0 5
36125: PUSH
36126: LD_VAR 0 8
36130: ARRAY
36131: PPUSH
36132: CALL_OW 276
36136: GO 36108
36138: POP
36139: POP
// buildings := GetBaseBuildings ( base , area ) ;
36140: LD_ADDR_VAR 0 18
36144: PUSH
36145: LD_VAR 0 15
36149: PPUSH
36150: LD_VAR 0 2
36154: PPUSH
36155: CALL 35432 0 2
36159: ST_TO_ADDR
// InitHc ;
36160: CALL_OW 19
// InitUc ;
36164: CALL_OW 18
// uc_side := side ;
36168: LD_ADDR_OWVAR 20
36172: PUSH
36173: LD_VAR 0 16
36177: ST_TO_ADDR
// uc_nation := nation ;
36178: LD_ADDR_OWVAR 21
36182: PUSH
36183: LD_VAR 0 17
36187: ST_TO_ADDR
// if buildings then
36188: LD_VAR 0 18
36192: IFFALSE 37514
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36194: LD_ADDR_VAR 0 19
36198: PUSH
36199: LD_VAR 0 18
36203: PPUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 30
36209: PUSH
36210: LD_INT 29
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 30
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: PPUSH
36232: CALL_OW 72
36236: ST_TO_ADDR
// if tmp then
36237: LD_VAR 0 19
36241: IFFALSE 36289
// for i in tmp do
36243: LD_ADDR_VAR 0 8
36247: PUSH
36248: LD_VAR 0 19
36252: PUSH
36253: FOR_IN
36254: IFFALSE 36287
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36256: LD_VAR 0 8
36260: PPUSH
36261: CALL_OW 250
36265: PPUSH
36266: LD_VAR 0 8
36270: PPUSH
36271: CALL_OW 251
36275: PPUSH
36276: LD_VAR 0 16
36280: PPUSH
36281: CALL_OW 441
36285: GO 36253
36287: POP
36288: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36289: LD_VAR 0 18
36293: PPUSH
36294: LD_INT 2
36296: PUSH
36297: LD_INT 30
36299: PUSH
36300: LD_INT 32
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 30
36309: PUSH
36310: LD_INT 33
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: PPUSH
36322: CALL_OW 72
36326: IFFALSE 36414
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36328: LD_ADDR_VAR 0 8
36332: PUSH
36333: LD_VAR 0 18
36337: PPUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 30
36343: PUSH
36344: LD_INT 32
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 30
36353: PUSH
36354: LD_INT 33
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: PPUSH
36366: CALL_OW 72
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36412
// begin if not GetBWeapon ( i ) then
36374: LD_VAR 0 8
36378: PPUSH
36379: CALL_OW 269
36383: NOT
36384: IFFALSE 36410
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36386: LD_VAR 0 8
36390: PPUSH
36391: LD_VAR 0 8
36395: PPUSH
36396: LD_VAR 0 2
36400: PPUSH
36401: CALL 37660 0 2
36405: PPUSH
36406: CALL_OW 431
// end ;
36410: GO 36371
36412: POP
36413: POP
// end ; for i = 1 to personel do
36414: LD_ADDR_VAR 0 8
36418: PUSH
36419: DOUBLE
36420: LD_INT 1
36422: DEC
36423: ST_TO_ADDR
36424: LD_VAR 0 6
36428: PUSH
36429: FOR_TO
36430: IFFALSE 37494
// begin if i > 4 then
36432: LD_VAR 0 8
36436: PUSH
36437: LD_INT 4
36439: GREATER
36440: IFFALSE 36444
// break ;
36442: GO 37494
// case i of 1 :
36444: LD_VAR 0 8
36448: PUSH
36449: LD_INT 1
36451: DOUBLE
36452: EQUAL
36453: IFTRUE 36457
36455: GO 36537
36457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36458: LD_ADDR_VAR 0 12
36462: PUSH
36463: LD_VAR 0 18
36467: PPUSH
36468: LD_INT 22
36470: PUSH
36471: LD_VAR 0 16
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 58
36482: PUSH
36483: EMPTY
36484: LIST
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: LD_INT 30
36491: PUSH
36492: LD_INT 32
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 30
36501: PUSH
36502: LD_INT 4
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 30
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: PPUSH
36530: CALL_OW 72
36534: ST_TO_ADDR
36535: GO 36759
36537: LD_INT 2
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36545
36543: GO 36607
36545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36546: LD_ADDR_VAR 0 12
36550: PUSH
36551: LD_VAR 0 18
36555: PPUSH
36556: LD_INT 22
36558: PUSH
36559: LD_VAR 0 16
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 30
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 30
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PPUSH
36600: CALL_OW 72
36604: ST_TO_ADDR
36605: GO 36759
36607: LD_INT 3
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36677
36615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36616: LD_ADDR_VAR 0 12
36620: PUSH
36621: LD_VAR 0 18
36625: PPUSH
36626: LD_INT 22
36628: PUSH
36629: LD_VAR 0 16
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 30
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 30
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PPUSH
36670: CALL_OW 72
36674: ST_TO_ADDR
36675: GO 36759
36677: LD_INT 4
36679: DOUBLE
36680: EQUAL
36681: IFTRUE 36685
36683: GO 36758
36685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36686: LD_ADDR_VAR 0 12
36690: PUSH
36691: LD_VAR 0 18
36695: PPUSH
36696: LD_INT 22
36698: PUSH
36699: LD_VAR 0 16
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 2
36710: PUSH
36711: LD_INT 30
36713: PUSH
36714: LD_INT 6
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 30
36723: PUSH
36724: LD_INT 7
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 30
36733: PUSH
36734: LD_INT 8
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 72
36755: ST_TO_ADDR
36756: GO 36759
36758: POP
// if i = 1 then
36759: LD_VAR 0 8
36763: PUSH
36764: LD_INT 1
36766: EQUAL
36767: IFFALSE 36878
// begin tmp := [ ] ;
36769: LD_ADDR_VAR 0 19
36773: PUSH
36774: EMPTY
36775: ST_TO_ADDR
// for j in f do
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_VAR 0 12
36785: PUSH
36786: FOR_IN
36787: IFFALSE 36860
// if GetBType ( j ) = b_bunker then
36789: LD_VAR 0 9
36793: PPUSH
36794: CALL_OW 266
36798: PUSH
36799: LD_INT 32
36801: EQUAL
36802: IFFALSE 36829
// tmp := Insert ( tmp , 1 , j ) else
36804: LD_ADDR_VAR 0 19
36808: PUSH
36809: LD_VAR 0 19
36813: PPUSH
36814: LD_INT 1
36816: PPUSH
36817: LD_VAR 0 9
36821: PPUSH
36822: CALL_OW 2
36826: ST_TO_ADDR
36827: GO 36858
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36829: LD_ADDR_VAR 0 19
36833: PUSH
36834: LD_VAR 0 19
36838: PPUSH
36839: LD_VAR 0 19
36843: PUSH
36844: LD_INT 1
36846: PLUS
36847: PPUSH
36848: LD_VAR 0 9
36852: PPUSH
36853: CALL_OW 2
36857: ST_TO_ADDR
36858: GO 36786
36860: POP
36861: POP
// if tmp then
36862: LD_VAR 0 19
36866: IFFALSE 36878
// f := tmp ;
36868: LD_ADDR_VAR 0 12
36872: PUSH
36873: LD_VAR 0 19
36877: ST_TO_ADDR
// end ; x := personel [ i ] ;
36878: LD_ADDR_VAR 0 13
36882: PUSH
36883: LD_VAR 0 6
36887: PUSH
36888: LD_VAR 0 8
36892: ARRAY
36893: ST_TO_ADDR
// if x = - 1 then
36894: LD_VAR 0 13
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: EQUAL
36903: IFFALSE 37112
// begin for j in f do
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: LD_VAR 0 12
36914: PUSH
36915: FOR_IN
36916: IFFALSE 37108
// repeat InitHc ;
36918: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36922: LD_VAR 0 9
36926: PPUSH
36927: CALL_OW 266
36931: PUSH
36932: LD_INT 5
36934: EQUAL
36935: IFFALSE 37005
// begin if UnitsInside ( j ) < 3 then
36937: LD_VAR 0 9
36941: PPUSH
36942: CALL_OW 313
36946: PUSH
36947: LD_INT 3
36949: LESS
36950: IFFALSE 36986
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36952: LD_INT 0
36954: PPUSH
36955: LD_INT 5
36957: PUSH
36958: LD_INT 8
36960: PUSH
36961: LD_INT 9
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: PUSH
36969: LD_VAR 0 17
36973: ARRAY
36974: PPUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: CALL_OW 380
36984: GO 37003
// PrepareHuman ( false , i , skill ) ;
36986: LD_INT 0
36988: PPUSH
36989: LD_VAR 0 8
36993: PPUSH
36994: LD_VAR 0 4
36998: PPUSH
36999: CALL_OW 380
// end else
37003: GO 37022
// PrepareHuman ( false , i , skill ) ;
37005: LD_INT 0
37007: PPUSH
37008: LD_VAR 0 8
37012: PPUSH
37013: LD_VAR 0 4
37017: PPUSH
37018: CALL_OW 380
// un := CreateHuman ;
37022: LD_ADDR_VAR 0 14
37026: PUSH
37027: CALL_OW 44
37031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37032: LD_ADDR_VAR 0 7
37036: PUSH
37037: LD_VAR 0 7
37041: PPUSH
37042: LD_INT 1
37044: PPUSH
37045: LD_VAR 0 14
37049: PPUSH
37050: CALL_OW 2
37054: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37055: LD_VAR 0 14
37059: PPUSH
37060: LD_VAR 0 9
37064: PPUSH
37065: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37069: LD_VAR 0 9
37073: PPUSH
37074: CALL_OW 313
37078: PUSH
37079: LD_INT 6
37081: EQUAL
37082: PUSH
37083: LD_VAR 0 9
37087: PPUSH
37088: CALL_OW 266
37092: PUSH
37093: LD_INT 32
37095: PUSH
37096: LD_INT 31
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: IN
37103: OR
37104: IFFALSE 36918
37106: GO 36915
37108: POP
37109: POP
// end else
37110: GO 37492
// for j = 1 to x do
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: DOUBLE
37118: LD_INT 1
37120: DEC
37121: ST_TO_ADDR
37122: LD_VAR 0 13
37126: PUSH
37127: FOR_TO
37128: IFFALSE 37490
// begin InitHc ;
37130: CALL_OW 19
// if not f then
37134: LD_VAR 0 12
37138: NOT
37139: IFFALSE 37228
// begin PrepareHuman ( false , i , skill ) ;
37141: LD_INT 0
37143: PPUSH
37144: LD_VAR 0 8
37148: PPUSH
37149: LD_VAR 0 4
37153: PPUSH
37154: CALL_OW 380
// un := CreateHuman ;
37158: LD_ADDR_VAR 0 14
37162: PUSH
37163: CALL_OW 44
37167: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37168: LD_ADDR_VAR 0 7
37172: PUSH
37173: LD_VAR 0 7
37177: PPUSH
37178: LD_INT 1
37180: PPUSH
37181: LD_VAR 0 14
37185: PPUSH
37186: CALL_OW 2
37190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37191: LD_VAR 0 14
37195: PPUSH
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 250
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 251
37215: PPUSH
37216: LD_INT 10
37218: PPUSH
37219: LD_INT 0
37221: PPUSH
37222: CALL_OW 50
// continue ;
37226: GO 37127
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37228: LD_VAR 0 12
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PPUSH
37237: CALL_OW 313
37241: PUSH
37242: LD_VAR 0 12
37246: PUSH
37247: LD_INT 1
37249: ARRAY
37250: PPUSH
37251: CALL_OW 266
37255: PUSH
37256: LD_INT 32
37258: PUSH
37259: LD_INT 31
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: IN
37266: AND
37267: PUSH
37268: LD_VAR 0 12
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PPUSH
37277: CALL_OW 313
37281: PUSH
37282: LD_INT 6
37284: EQUAL
37285: OR
37286: IFFALSE 37306
// f := Delete ( f , 1 ) ;
37288: LD_ADDR_VAR 0 12
37292: PUSH
37293: LD_VAR 0 12
37297: PPUSH
37298: LD_INT 1
37300: PPUSH
37301: CALL_OW 3
37305: ST_TO_ADDR
// if not f then
37306: LD_VAR 0 12
37310: NOT
37311: IFFALSE 37329
// begin x := x + 2 ;
37313: LD_ADDR_VAR 0 13
37317: PUSH
37318: LD_VAR 0 13
37322: PUSH
37323: LD_INT 2
37325: PLUS
37326: ST_TO_ADDR
// continue ;
37327: GO 37127
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37329: LD_VAR 0 12
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: PPUSH
37338: CALL_OW 266
37342: PUSH
37343: LD_INT 5
37345: EQUAL
37346: IFFALSE 37420
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37348: LD_VAR 0 12
37352: PUSH
37353: LD_INT 1
37355: ARRAY
37356: PPUSH
37357: CALL_OW 313
37361: PUSH
37362: LD_INT 3
37364: LESS
37365: IFFALSE 37401
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37367: LD_INT 0
37369: PPUSH
37370: LD_INT 5
37372: PUSH
37373: LD_INT 8
37375: PUSH
37376: LD_INT 9
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: PUSH
37384: LD_VAR 0 17
37388: ARRAY
37389: PPUSH
37390: LD_VAR 0 4
37394: PPUSH
37395: CALL_OW 380
37399: GO 37418
// PrepareHuman ( false , i , skill ) ;
37401: LD_INT 0
37403: PPUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: LD_VAR 0 4
37413: PPUSH
37414: CALL_OW 380
// end else
37418: GO 37437
// PrepareHuman ( false , i , skill ) ;
37420: LD_INT 0
37422: PPUSH
37423: LD_VAR 0 8
37427: PPUSH
37428: LD_VAR 0 4
37432: PPUSH
37433: CALL_OW 380
// un := CreateHuman ;
37437: LD_ADDR_VAR 0 14
37441: PUSH
37442: CALL_OW 44
37446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37447: LD_ADDR_VAR 0 7
37451: PUSH
37452: LD_VAR 0 7
37456: PPUSH
37457: LD_INT 1
37459: PPUSH
37460: LD_VAR 0 14
37464: PPUSH
37465: CALL_OW 2
37469: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37470: LD_VAR 0 14
37474: PPUSH
37475: LD_VAR 0 12
37479: PUSH
37480: LD_INT 1
37482: ARRAY
37483: PPUSH
37484: CALL_OW 52
// end ;
37488: GO 37127
37490: POP
37491: POP
// end ;
37492: GO 36429
37494: POP
37495: POP
// result := result ^ buildings ;
37496: LD_ADDR_VAR 0 7
37500: PUSH
37501: LD_VAR 0 7
37505: PUSH
37506: LD_VAR 0 18
37510: ADD
37511: ST_TO_ADDR
// end else
37512: GO 37655
// begin for i = 1 to personel do
37514: LD_ADDR_VAR 0 8
37518: PUSH
37519: DOUBLE
37520: LD_INT 1
37522: DEC
37523: ST_TO_ADDR
37524: LD_VAR 0 6
37528: PUSH
37529: FOR_TO
37530: IFFALSE 37653
// begin if i > 4 then
37532: LD_VAR 0 8
37536: PUSH
37537: LD_INT 4
37539: GREATER
37540: IFFALSE 37544
// break ;
37542: GO 37653
// x := personel [ i ] ;
37544: LD_ADDR_VAR 0 13
37548: PUSH
37549: LD_VAR 0 6
37553: PUSH
37554: LD_VAR 0 8
37558: ARRAY
37559: ST_TO_ADDR
// if x = - 1 then
37560: LD_VAR 0 13
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: EQUAL
37569: IFFALSE 37573
// continue ;
37571: GO 37529
// PrepareHuman ( false , i , skill ) ;
37573: LD_INT 0
37575: PPUSH
37576: LD_VAR 0 8
37580: PPUSH
37581: LD_VAR 0 4
37585: PPUSH
37586: CALL_OW 380
// un := CreateHuman ;
37590: LD_ADDR_VAR 0 14
37594: PUSH
37595: CALL_OW 44
37599: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37600: LD_VAR 0 14
37604: PPUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 250
37614: PPUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 251
37624: PPUSH
37625: LD_INT 10
37627: PPUSH
37628: LD_INT 0
37630: PPUSH
37631: CALL_OW 50
// result := result ^ un ;
37635: LD_ADDR_VAR 0 7
37639: PUSH
37640: LD_VAR 0 7
37644: PUSH
37645: LD_VAR 0 14
37649: ADD
37650: ST_TO_ADDR
// end ;
37651: GO 37529
37653: POP
37654: POP
// end ; end ;
37655: LD_VAR 0 7
37659: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37660: LD_INT 0
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
37672: PPUSH
37673: PPUSH
37674: PPUSH
37675: PPUSH
37676: PPUSH
37677: PPUSH
// result := false ;
37678: LD_ADDR_VAR 0 3
37682: PUSH
37683: LD_INT 0
37685: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37686: LD_VAR 0 1
37690: NOT
37691: PUSH
37692: LD_VAR 0 1
37696: PPUSH
37697: CALL_OW 266
37701: PUSH
37702: LD_INT 32
37704: PUSH
37705: LD_INT 33
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: IN
37712: NOT
37713: OR
37714: IFFALSE 37718
// exit ;
37716: GO 38854
// nat := GetNation ( tower ) ;
37718: LD_ADDR_VAR 0 12
37722: PUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 248
37732: ST_TO_ADDR
// side := GetSide ( tower ) ;
37733: LD_ADDR_VAR 0 16
37737: PUSH
37738: LD_VAR 0 1
37742: PPUSH
37743: CALL_OW 255
37747: ST_TO_ADDR
// x := GetX ( tower ) ;
37748: LD_ADDR_VAR 0 10
37752: PUSH
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 250
37762: ST_TO_ADDR
// y := GetY ( tower ) ;
37763: LD_ADDR_VAR 0 11
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 251
37777: ST_TO_ADDR
// if not x or not y then
37778: LD_VAR 0 10
37782: NOT
37783: PUSH
37784: LD_VAR 0 11
37788: NOT
37789: OR
37790: IFFALSE 37794
// exit ;
37792: GO 38854
// weapon := 0 ;
37794: LD_ADDR_VAR 0 18
37798: PUSH
37799: LD_INT 0
37801: ST_TO_ADDR
// fac_list := [ ] ;
37802: LD_ADDR_VAR 0 17
37806: PUSH
37807: EMPTY
37808: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37809: LD_ADDR_VAR 0 6
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 274
37823: PPUSH
37824: LD_VAR 0 2
37828: PPUSH
37829: CALL 35432 0 2
37833: PPUSH
37834: LD_INT 30
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PPUSH
37844: CALL_OW 72
37848: ST_TO_ADDR
// if not factories then
37849: LD_VAR 0 6
37853: NOT
37854: IFFALSE 37858
// exit ;
37856: GO 38854
// for i in factories do
37858: LD_ADDR_VAR 0 8
37862: PUSH
37863: LD_VAR 0 6
37867: PUSH
37868: FOR_IN
37869: IFFALSE 37894
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37871: LD_ADDR_VAR 0 17
37875: PUSH
37876: LD_VAR 0 17
37880: PUSH
37881: LD_VAR 0 8
37885: PPUSH
37886: CALL_OW 478
37890: UNION
37891: ST_TO_ADDR
37892: GO 37868
37894: POP
37895: POP
// if not fac_list then
37896: LD_VAR 0 17
37900: NOT
37901: IFFALSE 37905
// exit ;
37903: GO 38854
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37905: LD_ADDR_VAR 0 5
37909: PUSH
37910: LD_INT 4
37912: PUSH
37913: LD_INT 5
37915: PUSH
37916: LD_INT 9
37918: PUSH
37919: LD_INT 10
37921: PUSH
37922: LD_INT 6
37924: PUSH
37925: LD_INT 7
37927: PUSH
37928: LD_INT 11
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 27
37942: PUSH
37943: LD_INT 28
37945: PUSH
37946: LD_INT 26
37948: PUSH
37949: LD_INT 30
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 43
37960: PUSH
37961: LD_INT 44
37963: PUSH
37964: LD_INT 46
37966: PUSH
37967: LD_INT 45
37969: PUSH
37970: LD_INT 47
37972: PUSH
37973: LD_INT 49
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: PUSH
37989: LD_VAR 0 12
37993: ARRAY
37994: ST_TO_ADDR
// for i in list do
37995: LD_ADDR_VAR 0 8
37999: PUSH
38000: LD_VAR 0 5
38004: PUSH
38005: FOR_IN
38006: IFFALSE 38039
// if not i in fac_list then
38008: LD_VAR 0 8
38012: PUSH
38013: LD_VAR 0 17
38017: IN
38018: NOT
38019: IFFALSE 38037
// list := list diff i ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_VAR 0 5
38030: PUSH
38031: LD_VAR 0 8
38035: DIFF
38036: ST_TO_ADDR
38037: GO 38005
38039: POP
38040: POP
// if not list then
38041: LD_VAR 0 5
38045: NOT
38046: IFFALSE 38050
// exit ;
38048: GO 38854
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38050: LD_VAR 0 12
38054: PUSH
38055: LD_INT 3
38057: EQUAL
38058: PUSH
38059: LD_INT 49
38061: PUSH
38062: LD_VAR 0 5
38066: IN
38067: AND
38068: PUSH
38069: LD_INT 31
38071: PPUSH
38072: LD_VAR 0 16
38076: PPUSH
38077: CALL_OW 321
38081: PUSH
38082: LD_INT 2
38084: EQUAL
38085: AND
38086: IFFALSE 38146
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38088: LD_INT 22
38090: PUSH
38091: LD_VAR 0 16
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 35
38102: PUSH
38103: LD_INT 49
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 91
38112: PUSH
38113: LD_VAR 0 1
38117: PUSH
38118: LD_INT 10
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: PPUSH
38131: CALL_OW 69
38135: NOT
38136: IFFALSE 38146
// weapon := ru_time_lapser ;
38138: LD_ADDR_VAR 0 18
38142: PUSH
38143: LD_INT 49
38145: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38146: LD_VAR 0 12
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: IN
38161: PUSH
38162: LD_INT 11
38164: PUSH
38165: LD_VAR 0 5
38169: IN
38170: PUSH
38171: LD_INT 30
38173: PUSH
38174: LD_VAR 0 5
38178: IN
38179: OR
38180: AND
38181: PUSH
38182: LD_INT 6
38184: PPUSH
38185: LD_VAR 0 16
38189: PPUSH
38190: CALL_OW 321
38194: PUSH
38195: LD_INT 2
38197: EQUAL
38198: AND
38199: IFFALSE 38364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38201: LD_INT 22
38203: PUSH
38204: LD_VAR 0 16
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: LD_INT 35
38218: PUSH
38219: LD_INT 11
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 35
38228: PUSH
38229: LD_INT 30
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 91
38243: PUSH
38244: LD_VAR 0 1
38248: PUSH
38249: LD_INT 18
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: PPUSH
38262: CALL_OW 69
38266: NOT
38267: PUSH
38268: LD_INT 22
38270: PUSH
38271: LD_VAR 0 16
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 30
38285: PUSH
38286: LD_INT 32
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 30
38295: PUSH
38296: LD_INT 33
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 91
38310: PUSH
38311: LD_VAR 0 1
38315: PUSH
38316: LD_INT 12
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: PUSH
38329: EMPTY
38330: LIST
38331: PPUSH
38332: CALL_OW 69
38336: PUSH
38337: LD_INT 2
38339: GREATER
38340: AND
38341: IFFALSE 38364
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38343: LD_ADDR_VAR 0 18
38347: PUSH
38348: LD_INT 11
38350: PUSH
38351: LD_INT 30
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_VAR 0 12
38362: ARRAY
38363: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38364: LD_VAR 0 18
38368: NOT
38369: PUSH
38370: LD_INT 40
38372: PPUSH
38373: LD_VAR 0 16
38377: PPUSH
38378: CALL_OW 321
38382: PUSH
38383: LD_INT 2
38385: EQUAL
38386: AND
38387: PUSH
38388: LD_INT 7
38390: PUSH
38391: LD_VAR 0 5
38395: IN
38396: PUSH
38397: LD_INT 28
38399: PUSH
38400: LD_VAR 0 5
38404: IN
38405: OR
38406: PUSH
38407: LD_INT 45
38409: PUSH
38410: LD_VAR 0 5
38414: IN
38415: OR
38416: AND
38417: IFFALSE 38671
// begin hex := GetHexInfo ( x , y ) ;
38419: LD_ADDR_VAR 0 4
38423: PUSH
38424: LD_VAR 0 10
38428: PPUSH
38429: LD_VAR 0 11
38433: PPUSH
38434: CALL_OW 546
38438: ST_TO_ADDR
// if hex [ 1 ] then
38439: LD_VAR 0 4
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: IFFALSE 38451
// exit ;
38449: GO 38854
// height := hex [ 2 ] ;
38451: LD_ADDR_VAR 0 15
38455: PUSH
38456: LD_VAR 0 4
38460: PUSH
38461: LD_INT 2
38463: ARRAY
38464: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38465: LD_ADDR_VAR 0 14
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: LD_INT 5
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: ST_TO_ADDR
// for i in tmp do
38488: LD_ADDR_VAR 0 8
38492: PUSH
38493: LD_VAR 0 14
38497: PUSH
38498: FOR_IN
38499: IFFALSE 38669
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38501: LD_ADDR_VAR 0 9
38505: PUSH
38506: LD_VAR 0 10
38510: PPUSH
38511: LD_VAR 0 8
38515: PPUSH
38516: LD_INT 5
38518: PPUSH
38519: CALL_OW 272
38523: PUSH
38524: LD_VAR 0 11
38528: PPUSH
38529: LD_VAR 0 8
38533: PPUSH
38534: LD_INT 5
38536: PPUSH
38537: CALL_OW 273
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38546: LD_VAR 0 9
38550: PUSH
38551: LD_INT 1
38553: ARRAY
38554: PPUSH
38555: LD_VAR 0 9
38559: PUSH
38560: LD_INT 2
38562: ARRAY
38563: PPUSH
38564: CALL_OW 488
38568: IFFALSE 38667
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38570: LD_ADDR_VAR 0 4
38574: PUSH
38575: LD_VAR 0 9
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: LD_VAR 0 9
38588: PUSH
38589: LD_INT 2
38591: ARRAY
38592: PPUSH
38593: CALL_OW 546
38597: ST_TO_ADDR
// if hex [ 1 ] then
38598: LD_VAR 0 4
38602: PUSH
38603: LD_INT 1
38605: ARRAY
38606: IFFALSE 38610
// continue ;
38608: GO 38498
// h := hex [ 2 ] ;
38610: LD_ADDR_VAR 0 13
38614: PUSH
38615: LD_VAR 0 4
38619: PUSH
38620: LD_INT 2
38622: ARRAY
38623: ST_TO_ADDR
// if h + 7 < height then
38624: LD_VAR 0 13
38628: PUSH
38629: LD_INT 7
38631: PLUS
38632: PUSH
38633: LD_VAR 0 15
38637: LESS
38638: IFFALSE 38667
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38640: LD_ADDR_VAR 0 18
38644: PUSH
38645: LD_INT 7
38647: PUSH
38648: LD_INT 28
38650: PUSH
38651: LD_INT 45
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: PUSH
38659: LD_VAR 0 12
38663: ARRAY
38664: ST_TO_ADDR
// break ;
38665: GO 38669
// end ; end ; end ;
38667: GO 38498
38669: POP
38670: POP
// end ; if not weapon then
38671: LD_VAR 0 18
38675: NOT
38676: IFFALSE 38736
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38678: LD_ADDR_VAR 0 5
38682: PUSH
38683: LD_VAR 0 5
38687: PUSH
38688: LD_INT 11
38690: PUSH
38691: LD_INT 30
38693: PUSH
38694: LD_INT 49
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: DIFF
38702: ST_TO_ADDR
// if not list then
38703: LD_VAR 0 5
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38854
// weapon := list [ rand ( 1 , list ) ] ;
38712: LD_ADDR_VAR 0 18
38716: PUSH
38717: LD_VAR 0 5
38721: PUSH
38722: LD_INT 1
38724: PPUSH
38725: LD_VAR 0 5
38729: PPUSH
38730: CALL_OW 12
38734: ARRAY
38735: ST_TO_ADDR
// end ; if weapon then
38736: LD_VAR 0 18
38740: IFFALSE 38854
// begin tmp := CostOfWeapon ( weapon ) ;
38742: LD_ADDR_VAR 0 14
38746: PUSH
38747: LD_VAR 0 18
38751: PPUSH
38752: CALL_OW 451
38756: ST_TO_ADDR
// j := GetBase ( tower ) ;
38757: LD_ADDR_VAR 0 9
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 274
38771: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38772: LD_VAR 0 9
38776: PPUSH
38777: LD_INT 1
38779: PPUSH
38780: CALL_OW 275
38784: PUSH
38785: LD_VAR 0 14
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: GREATEREQUAL
38794: PUSH
38795: LD_VAR 0 9
38799: PPUSH
38800: LD_INT 2
38802: PPUSH
38803: CALL_OW 275
38807: PUSH
38808: LD_VAR 0 14
38812: PUSH
38813: LD_INT 2
38815: ARRAY
38816: GREATEREQUAL
38817: AND
38818: PUSH
38819: LD_VAR 0 9
38823: PPUSH
38824: LD_INT 3
38826: PPUSH
38827: CALL_OW 275
38831: PUSH
38832: LD_VAR 0 14
38836: PUSH
38837: LD_INT 3
38839: ARRAY
38840: GREATEREQUAL
38841: AND
38842: IFFALSE 38854
// result := weapon ;
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_VAR 0 18
38853: ST_TO_ADDR
// end ; end ;
38854: LD_VAR 0 3
38858: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38859: LD_INT 0
38861: PPUSH
38862: PPUSH
// result := true ;
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_INT 1
38870: ST_TO_ADDR
// if array1 = array2 then
38871: LD_VAR 0 1
38875: PUSH
38876: LD_VAR 0 2
38880: EQUAL
38881: IFFALSE 38941
// begin for i = 1 to array1 do
38883: LD_ADDR_VAR 0 4
38887: PUSH
38888: DOUBLE
38889: LD_INT 1
38891: DEC
38892: ST_TO_ADDR
38893: LD_VAR 0 1
38897: PUSH
38898: FOR_TO
38899: IFFALSE 38937
// if array1 [ i ] <> array2 [ i ] then
38901: LD_VAR 0 1
38905: PUSH
38906: LD_VAR 0 4
38910: ARRAY
38911: PUSH
38912: LD_VAR 0 2
38916: PUSH
38917: LD_VAR 0 4
38921: ARRAY
38922: NONEQUAL
38923: IFFALSE 38935
// begin result := false ;
38925: LD_ADDR_VAR 0 3
38929: PUSH
38930: LD_INT 0
38932: ST_TO_ADDR
// break ;
38933: GO 38937
// end ;
38935: GO 38898
38937: POP
38938: POP
// end else
38939: GO 38949
// result := false ;
38941: LD_ADDR_VAR 0 3
38945: PUSH
38946: LD_INT 0
38948: ST_TO_ADDR
// end ;
38949: LD_VAR 0 3
38953: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
38958: PPUSH
// pom := GetBase ( fac ) ;
38959: LD_ADDR_VAR 0 5
38963: PUSH
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 274
38973: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_VAR 0 2
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 2
38995: ARRAY
38996: PPUSH
38997: LD_VAR 0 2
39001: PUSH
39002: LD_INT 3
39004: ARRAY
39005: PPUSH
39006: LD_VAR 0 2
39010: PUSH
39011: LD_INT 4
39013: ARRAY
39014: PPUSH
39015: CALL_OW 449
39019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_VAR 0 5
39029: PPUSH
39030: LD_INT 1
39032: PPUSH
39033: CALL_OW 275
39037: PUSH
39038: LD_VAR 0 4
39042: PUSH
39043: LD_INT 1
39045: ARRAY
39046: GREATEREQUAL
39047: PUSH
39048: LD_VAR 0 5
39052: PPUSH
39053: LD_INT 2
39055: PPUSH
39056: CALL_OW 275
39060: PUSH
39061: LD_VAR 0 4
39065: PUSH
39066: LD_INT 2
39068: ARRAY
39069: GREATEREQUAL
39070: AND
39071: PUSH
39072: LD_VAR 0 5
39076: PPUSH
39077: LD_INT 3
39079: PPUSH
39080: CALL_OW 275
39084: PUSH
39085: LD_VAR 0 4
39089: PUSH
39090: LD_INT 3
39092: ARRAY
39093: GREATEREQUAL
39094: AND
39095: ST_TO_ADDR
// end ;
39096: LD_VAR 0 3
39100: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39101: LD_INT 0
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
// pom := GetBase ( building ) ;
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 274
39121: ST_TO_ADDR
// if not pom then
39122: LD_VAR 0 3
39126: NOT
39127: IFFALSE 39131
// exit ;
39129: GO 39301
// btype := GetBType ( building ) ;
39131: LD_ADDR_VAR 0 5
39135: PUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 266
39145: ST_TO_ADDR
// if btype = b_armoury then
39146: LD_VAR 0 5
39150: PUSH
39151: LD_INT 4
39153: EQUAL
39154: IFFALSE 39164
// btype := b_barracks ;
39156: LD_ADDR_VAR 0 5
39160: PUSH
39161: LD_INT 5
39163: ST_TO_ADDR
// if btype = b_depot then
39164: LD_VAR 0 5
39168: PUSH
39169: LD_INT 0
39171: EQUAL
39172: IFFALSE 39182
// btype := b_warehouse ;
39174: LD_ADDR_VAR 0 5
39178: PUSH
39179: LD_INT 1
39181: ST_TO_ADDR
// if btype = b_workshop then
39182: LD_VAR 0 5
39186: PUSH
39187: LD_INT 2
39189: EQUAL
39190: IFFALSE 39200
// btype := b_factory ;
39192: LD_ADDR_VAR 0 5
39196: PUSH
39197: LD_INT 3
39199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39200: LD_ADDR_VAR 0 4
39204: PUSH
39205: LD_VAR 0 5
39209: PPUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 248
39219: PPUSH
39220: CALL_OW 450
39224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39225: LD_ADDR_VAR 0 2
39229: PUSH
39230: LD_VAR 0 3
39234: PPUSH
39235: LD_INT 1
39237: PPUSH
39238: CALL_OW 275
39242: PUSH
39243: LD_VAR 0 4
39247: PUSH
39248: LD_INT 1
39250: ARRAY
39251: GREATEREQUAL
39252: PUSH
39253: LD_VAR 0 3
39257: PPUSH
39258: LD_INT 2
39260: PPUSH
39261: CALL_OW 275
39265: PUSH
39266: LD_VAR 0 4
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: GREATEREQUAL
39275: AND
39276: PUSH
39277: LD_VAR 0 3
39281: PPUSH
39282: LD_INT 3
39284: PPUSH
39285: CALL_OW 275
39289: PUSH
39290: LD_VAR 0 4
39294: PUSH
39295: LD_INT 3
39297: ARRAY
39298: GREATEREQUAL
39299: AND
39300: ST_TO_ADDR
// end ;
39301: LD_VAR 0 2
39305: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39306: LD_INT 0
39308: PPUSH
39309: PPUSH
39310: PPUSH
// pom := GetBase ( building ) ;
39311: LD_ADDR_VAR 0 4
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 274
39325: ST_TO_ADDR
// if not pom then
39326: LD_VAR 0 4
39330: NOT
39331: IFFALSE 39335
// exit ;
39333: GO 39436
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39335: LD_ADDR_VAR 0 5
39339: PUSH
39340: LD_VAR 0 2
39344: PPUSH
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 248
39354: PPUSH
39355: CALL_OW 450
39359: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_VAR 0 4
39369: PPUSH
39370: LD_INT 1
39372: PPUSH
39373: CALL_OW 275
39377: PUSH
39378: LD_VAR 0 5
39382: PUSH
39383: LD_INT 1
39385: ARRAY
39386: GREATEREQUAL
39387: PUSH
39388: LD_VAR 0 4
39392: PPUSH
39393: LD_INT 2
39395: PPUSH
39396: CALL_OW 275
39400: PUSH
39401: LD_VAR 0 5
39405: PUSH
39406: LD_INT 2
39408: ARRAY
39409: GREATEREQUAL
39410: AND
39411: PUSH
39412: LD_VAR 0 4
39416: PPUSH
39417: LD_INT 3
39419: PPUSH
39420: CALL_OW 275
39424: PUSH
39425: LD_VAR 0 5
39429: PUSH
39430: LD_INT 3
39432: ARRAY
39433: GREATEREQUAL
39434: AND
39435: ST_TO_ADDR
// end ;
39436: LD_VAR 0 3
39440: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
// result := false ;
39453: LD_ADDR_VAR 0 6
39457: PUSH
39458: LD_INT 0
39460: ST_TO_ADDR
// if not base or not btype or not x or not y then
39461: LD_VAR 0 1
39465: NOT
39466: PUSH
39467: LD_VAR 0 2
39471: NOT
39472: OR
39473: PUSH
39474: LD_VAR 0 3
39478: NOT
39479: OR
39480: PUSH
39481: LD_VAR 0 4
39485: NOT
39486: OR
39487: IFFALSE 39491
// exit ;
39489: GO 40100
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39491: LD_ADDR_VAR 0 12
39495: PUSH
39496: LD_VAR 0 2
39500: PPUSH
39501: LD_VAR 0 3
39505: PPUSH
39506: LD_VAR 0 4
39510: PPUSH
39511: LD_VAR 0 5
39515: PPUSH
39516: LD_VAR 0 1
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: PPUSH
39525: CALL_OW 248
39529: PPUSH
39530: LD_INT 0
39532: PPUSH
39533: CALL 40937 0 6
39537: ST_TO_ADDR
// if not hexes then
39538: LD_VAR 0 12
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 40100
// for i = 1 to hexes do
39547: LD_ADDR_VAR 0 7
39551: PUSH
39552: DOUBLE
39553: LD_INT 1
39555: DEC
39556: ST_TO_ADDR
39557: LD_VAR 0 12
39561: PUSH
39562: FOR_TO
39563: IFFALSE 40098
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39565: LD_ADDR_VAR 0 11
39569: PUSH
39570: LD_VAR 0 12
39574: PUSH
39575: LD_VAR 0 7
39579: ARRAY
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: PPUSH
39585: LD_VAR 0 12
39589: PUSH
39590: LD_VAR 0 7
39594: ARRAY
39595: PUSH
39596: LD_INT 2
39598: ARRAY
39599: PPUSH
39600: CALL_OW 428
39604: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39605: LD_VAR 0 12
39609: PUSH
39610: LD_VAR 0 7
39614: ARRAY
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PPUSH
39620: LD_VAR 0 12
39624: PUSH
39625: LD_VAR 0 7
39629: ARRAY
39630: PUSH
39631: LD_INT 2
39633: ARRAY
39634: PPUSH
39635: CALL_OW 351
39639: PUSH
39640: LD_VAR 0 12
39644: PUSH
39645: LD_VAR 0 7
39649: ARRAY
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: PPUSH
39655: LD_VAR 0 12
39659: PUSH
39660: LD_VAR 0 7
39664: ARRAY
39665: PUSH
39666: LD_INT 2
39668: ARRAY
39669: PPUSH
39670: CALL_OW 488
39674: NOT
39675: OR
39676: PUSH
39677: LD_VAR 0 11
39681: PPUSH
39682: CALL_OW 247
39686: PUSH
39687: LD_INT 3
39689: EQUAL
39690: OR
39691: IFFALSE 39697
// exit ;
39693: POP
39694: POP
39695: GO 40100
// if not tmp or not tmp in base then
39697: LD_VAR 0 11
39701: NOT
39702: PUSH
39703: LD_VAR 0 11
39707: PUSH
39708: LD_VAR 0 1
39712: IN
39713: NOT
39714: OR
39715: IFFALSE 39719
// continue ;
39717: GO 39562
// result := true ;
39719: LD_ADDR_VAR 0 6
39723: PUSH
39724: LD_INT 1
39726: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39727: LD_ADDR_VAR 0 15
39731: PUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: LD_INT 22
39739: PUSH
39740: LD_VAR 0 11
39744: PPUSH
39745: CALL_OW 255
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 30
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 30
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PPUSH
39786: CALL_OW 72
39790: ST_TO_ADDR
// if dep then
39791: LD_VAR 0 15
39795: IFFALSE 39931
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39797: LD_ADDR_VAR 0 14
39801: PUSH
39802: LD_VAR 0 15
39806: PUSH
39807: LD_INT 1
39809: ARRAY
39810: PPUSH
39811: CALL_OW 250
39815: PPUSH
39816: LD_VAR 0 15
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PPUSH
39825: CALL_OW 254
39829: PPUSH
39830: LD_INT 5
39832: PPUSH
39833: CALL_OW 272
39837: PUSH
39838: LD_VAR 0 15
39842: PUSH
39843: LD_INT 1
39845: ARRAY
39846: PPUSH
39847: CALL_OW 251
39851: PPUSH
39852: LD_VAR 0 15
39856: PUSH
39857: LD_INT 1
39859: ARRAY
39860: PPUSH
39861: CALL_OW 254
39865: PPUSH
39866: LD_INT 5
39868: PPUSH
39869: CALL_OW 273
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39878: LD_VAR 0 14
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: PPUSH
39887: LD_VAR 0 14
39891: PUSH
39892: LD_INT 2
39894: ARRAY
39895: PPUSH
39896: CALL_OW 488
39900: IFFALSE 39931
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39902: LD_VAR 0 11
39906: PPUSH
39907: LD_VAR 0 14
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PPUSH
39916: LD_VAR 0 14
39920: PUSH
39921: LD_INT 2
39923: ARRAY
39924: PPUSH
39925: CALL_OW 111
// continue ;
39929: GO 39562
// end ; end ; r := GetDir ( tmp ) ;
39931: LD_ADDR_VAR 0 13
39935: PUSH
39936: LD_VAR 0 11
39940: PPUSH
39941: CALL_OW 254
39945: ST_TO_ADDR
// if r = 5 then
39946: LD_VAR 0 13
39950: PUSH
39951: LD_INT 5
39953: EQUAL
39954: IFFALSE 39964
// r := 0 ;
39956: LD_ADDR_VAR 0 13
39960: PUSH
39961: LD_INT 0
39963: ST_TO_ADDR
// for j = r to 5 do
39964: LD_ADDR_VAR 0 8
39968: PUSH
39969: DOUBLE
39970: LD_VAR 0 13
39974: DEC
39975: ST_TO_ADDR
39976: LD_INT 5
39978: PUSH
39979: FOR_TO
39980: IFFALSE 40094
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39982: LD_ADDR_VAR 0 9
39986: PUSH
39987: LD_VAR 0 11
39991: PPUSH
39992: CALL_OW 250
39996: PPUSH
39997: LD_VAR 0 8
40001: PPUSH
40002: LD_INT 2
40004: PPUSH
40005: CALL_OW 272
40009: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40010: LD_ADDR_VAR 0 10
40014: PUSH
40015: LD_VAR 0 11
40019: PPUSH
40020: CALL_OW 251
40024: PPUSH
40025: LD_VAR 0 8
40029: PPUSH
40030: LD_INT 2
40032: PPUSH
40033: CALL_OW 273
40037: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40038: LD_VAR 0 9
40042: PPUSH
40043: LD_VAR 0 10
40047: PPUSH
40048: CALL_OW 488
40052: PUSH
40053: LD_VAR 0 9
40057: PPUSH
40058: LD_VAR 0 10
40062: PPUSH
40063: CALL_OW 428
40067: NOT
40068: AND
40069: IFFALSE 40092
// begin ComMoveXY ( tmp , _x , _y ) ;
40071: LD_VAR 0 11
40075: PPUSH
40076: LD_VAR 0 9
40080: PPUSH
40081: LD_VAR 0 10
40085: PPUSH
40086: CALL_OW 111
// break ;
40090: GO 40094
// end ; end ;
40092: GO 39979
40094: POP
40095: POP
// end ;
40096: GO 39562
40098: POP
40099: POP
// end ;
40100: LD_VAR 0 6
40104: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40105: LD_INT 0
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
// result := false ;
40117: LD_ADDR_VAR 0 6
40121: PUSH
40122: LD_INT 0
40124: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40125: LD_VAR 0 1
40129: NOT
40130: PUSH
40131: LD_VAR 0 1
40135: PPUSH
40136: CALL_OW 266
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: IN
40151: NOT
40152: OR
40153: PUSH
40154: LD_VAR 0 2
40158: NOT
40159: OR
40160: PUSH
40161: LD_VAR 0 5
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 5
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: IN
40192: NOT
40193: OR
40194: PUSH
40195: LD_VAR 0 3
40199: PPUSH
40200: LD_VAR 0 4
40204: PPUSH
40205: CALL_OW 488
40209: NOT
40210: OR
40211: IFFALSE 40215
// exit ;
40213: GO 40932
// pom := GetBase ( depot ) ;
40215: LD_ADDR_VAR 0 10
40219: PUSH
40220: LD_VAR 0 1
40224: PPUSH
40225: CALL_OW 274
40229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40230: LD_ADDR_VAR 0 11
40234: PUSH
40235: LD_VAR 0 2
40239: PPUSH
40240: LD_VAR 0 1
40244: PPUSH
40245: CALL_OW 248
40249: PPUSH
40250: CALL_OW 450
40254: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40255: LD_VAR 0 10
40259: PPUSH
40260: LD_INT 1
40262: PPUSH
40263: CALL_OW 275
40267: PUSH
40268: LD_VAR 0 11
40272: PUSH
40273: LD_INT 1
40275: ARRAY
40276: GREATEREQUAL
40277: PUSH
40278: LD_VAR 0 10
40282: PPUSH
40283: LD_INT 2
40285: PPUSH
40286: CALL_OW 275
40290: PUSH
40291: LD_VAR 0 11
40295: PUSH
40296: LD_INT 2
40298: ARRAY
40299: GREATEREQUAL
40300: AND
40301: PUSH
40302: LD_VAR 0 10
40306: PPUSH
40307: LD_INT 3
40309: PPUSH
40310: CALL_OW 275
40314: PUSH
40315: LD_VAR 0 11
40319: PUSH
40320: LD_INT 3
40322: ARRAY
40323: GREATEREQUAL
40324: AND
40325: NOT
40326: IFFALSE 40330
// exit ;
40328: GO 40932
// if GetBType ( depot ) = b_depot then
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 266
40339: PUSH
40340: LD_INT 0
40342: EQUAL
40343: IFFALSE 40355
// dist := 28 else
40345: LD_ADDR_VAR 0 14
40349: PUSH
40350: LD_INT 28
40352: ST_TO_ADDR
40353: GO 40363
// dist := 36 ;
40355: LD_ADDR_VAR 0 14
40359: PUSH
40360: LD_INT 36
40362: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40363: LD_VAR 0 1
40367: PPUSH
40368: LD_VAR 0 3
40372: PPUSH
40373: LD_VAR 0 4
40377: PPUSH
40378: CALL_OW 297
40382: PUSH
40383: LD_VAR 0 14
40387: GREATER
40388: IFFALSE 40392
// exit ;
40390: GO 40932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40392: LD_ADDR_VAR 0 12
40396: PUSH
40397: LD_VAR 0 2
40401: PPUSH
40402: LD_VAR 0 3
40406: PPUSH
40407: LD_VAR 0 4
40411: PPUSH
40412: LD_VAR 0 5
40416: PPUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL_OW 248
40426: PPUSH
40427: LD_INT 0
40429: PPUSH
40430: CALL 40937 0 6
40434: ST_TO_ADDR
// if not hexes then
40435: LD_VAR 0 12
40439: NOT
40440: IFFALSE 40444
// exit ;
40442: GO 40932
// hex := GetHexInfo ( x , y ) ;
40444: LD_ADDR_VAR 0 15
40448: PUSH
40449: LD_VAR 0 3
40453: PPUSH
40454: LD_VAR 0 4
40458: PPUSH
40459: CALL_OW 546
40463: ST_TO_ADDR
// if hex [ 1 ] then
40464: LD_VAR 0 15
40468: PUSH
40469: LD_INT 1
40471: ARRAY
40472: IFFALSE 40476
// exit ;
40474: GO 40932
// height := hex [ 2 ] ;
40476: LD_ADDR_VAR 0 13
40480: PUSH
40481: LD_VAR 0 15
40485: PUSH
40486: LD_INT 2
40488: ARRAY
40489: ST_TO_ADDR
// for i = 1 to hexes do
40490: LD_ADDR_VAR 0 7
40494: PUSH
40495: DOUBLE
40496: LD_INT 1
40498: DEC
40499: ST_TO_ADDR
40500: LD_VAR 0 12
40504: PUSH
40505: FOR_TO
40506: IFFALSE 40836
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40508: LD_VAR 0 12
40512: PUSH
40513: LD_VAR 0 7
40517: ARRAY
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PPUSH
40523: LD_VAR 0 12
40527: PUSH
40528: LD_VAR 0 7
40532: ARRAY
40533: PUSH
40534: LD_INT 2
40536: ARRAY
40537: PPUSH
40538: CALL_OW 488
40542: NOT
40543: PUSH
40544: LD_VAR 0 12
40548: PUSH
40549: LD_VAR 0 7
40553: ARRAY
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PPUSH
40559: LD_VAR 0 12
40563: PUSH
40564: LD_VAR 0 7
40568: ARRAY
40569: PUSH
40570: LD_INT 2
40572: ARRAY
40573: PPUSH
40574: CALL_OW 428
40578: PUSH
40579: LD_INT 0
40581: GREATER
40582: OR
40583: PUSH
40584: LD_VAR 0 12
40588: PUSH
40589: LD_VAR 0 7
40593: ARRAY
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: PPUSH
40599: LD_VAR 0 12
40603: PUSH
40604: LD_VAR 0 7
40608: ARRAY
40609: PUSH
40610: LD_INT 2
40612: ARRAY
40613: PPUSH
40614: CALL_OW 351
40618: OR
40619: IFFALSE 40625
// exit ;
40621: POP
40622: POP
40623: GO 40932
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40625: LD_ADDR_VAR 0 8
40629: PUSH
40630: LD_VAR 0 12
40634: PUSH
40635: LD_VAR 0 7
40639: ARRAY
40640: PUSH
40641: LD_INT 1
40643: ARRAY
40644: PPUSH
40645: LD_VAR 0 12
40649: PUSH
40650: LD_VAR 0 7
40654: ARRAY
40655: PUSH
40656: LD_INT 2
40658: ARRAY
40659: PPUSH
40660: CALL_OW 546
40664: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40665: LD_VAR 0 8
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: PUSH
40674: LD_VAR 0 8
40678: PUSH
40679: LD_INT 2
40681: ARRAY
40682: PUSH
40683: LD_VAR 0 13
40687: PUSH
40688: LD_INT 2
40690: PLUS
40691: GREATER
40692: OR
40693: PUSH
40694: LD_VAR 0 8
40698: PUSH
40699: LD_INT 2
40701: ARRAY
40702: PUSH
40703: LD_VAR 0 13
40707: PUSH
40708: LD_INT 2
40710: MINUS
40711: LESS
40712: OR
40713: PUSH
40714: LD_VAR 0 8
40718: PUSH
40719: LD_INT 3
40721: ARRAY
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 8
40728: PUSH
40729: LD_INT 9
40731: PUSH
40732: LD_INT 10
40734: PUSH
40735: LD_INT 11
40737: PUSH
40738: LD_INT 12
40740: PUSH
40741: LD_INT 13
40743: PUSH
40744: LD_INT 16
40746: PUSH
40747: LD_INT 17
40749: PUSH
40750: LD_INT 18
40752: PUSH
40753: LD_INT 19
40755: PUSH
40756: LD_INT 20
40758: PUSH
40759: LD_INT 21
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: IN
40777: NOT
40778: OR
40779: PUSH
40780: LD_VAR 0 8
40784: PUSH
40785: LD_INT 5
40787: ARRAY
40788: NOT
40789: OR
40790: PUSH
40791: LD_VAR 0 8
40795: PUSH
40796: LD_INT 6
40798: ARRAY
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 7
40808: PUSH
40809: LD_INT 9
40811: PUSH
40812: LD_INT 10
40814: PUSH
40815: LD_INT 11
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: IN
40826: NOT
40827: OR
40828: IFFALSE 40834
// exit ;
40830: POP
40831: POP
40832: GO 40932
// end ;
40834: GO 40505
40836: POP
40837: POP
// side := GetSide ( depot ) ;
40838: LD_ADDR_VAR 0 9
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 255
40852: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40853: LD_VAR 0 9
40857: PPUSH
40858: LD_VAR 0 3
40862: PPUSH
40863: LD_VAR 0 4
40867: PPUSH
40868: LD_INT 20
40870: PPUSH
40871: CALL 33586 0 4
40875: PUSH
40876: LD_INT 4
40878: ARRAY
40879: IFFALSE 40883
// exit ;
40881: GO 40932
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40883: LD_VAR 0 2
40887: PUSH
40888: LD_INT 29
40890: PUSH
40891: LD_INT 30
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: IN
40898: PUSH
40899: LD_VAR 0 3
40903: PPUSH
40904: LD_VAR 0 4
40908: PPUSH
40909: LD_VAR 0 9
40913: PPUSH
40914: CALL_OW 440
40918: NOT
40919: AND
40920: IFFALSE 40924
// exit ;
40922: GO 40932
// result := true ;
40924: LD_ADDR_VAR 0 6
40928: PUSH
40929: LD_INT 1
40931: ST_TO_ADDR
// end ;
40932: LD_VAR 0 6
40936: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40937: LD_INT 0
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
// result = [ ] ;
40997: LD_ADDR_VAR 0 7
41001: PUSH
41002: EMPTY
41003: ST_TO_ADDR
// temp_list = [ ] ;
41004: LD_ADDR_VAR 0 9
41008: PUSH
41009: EMPTY
41010: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41011: LD_VAR 0 4
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: LD_INT 4
41030: PUSH
41031: LD_INT 5
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: IN
41042: NOT
41043: PUSH
41044: LD_VAR 0 1
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: IN
41059: PUSH
41060: LD_VAR 0 5
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: LD_INT 3
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: IN
41079: NOT
41080: AND
41081: OR
41082: IFFALSE 41086
// exit ;
41084: GO 59477
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41086: LD_VAR 0 1
41090: PUSH
41091: LD_INT 6
41093: PUSH
41094: LD_INT 7
41096: PUSH
41097: LD_INT 8
41099: PUSH
41100: LD_INT 13
41102: PUSH
41103: LD_INT 12
41105: PUSH
41106: LD_INT 15
41108: PUSH
41109: LD_INT 11
41111: PUSH
41112: LD_INT 14
41114: PUSH
41115: LD_INT 10
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: IN
41129: IFFALSE 41139
// btype = b_lab ;
41131: LD_ADDR_VAR 0 1
41135: PUSH
41136: LD_INT 6
41138: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41139: LD_VAR 0 6
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: IN
41158: NOT
41159: PUSH
41160: LD_VAR 0 1
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: LD_INT 6
41179: PUSH
41180: LD_INT 36
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: LD_INT 5
41188: PUSH
41189: LD_INT 31
41191: PUSH
41192: LD_INT 32
41194: PUSH
41195: LD_INT 33
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: IN
41211: NOT
41212: PUSH
41213: LD_VAR 0 6
41217: PUSH
41218: LD_INT 1
41220: EQUAL
41221: AND
41222: OR
41223: PUSH
41224: LD_VAR 0 1
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: IN
41239: NOT
41240: PUSH
41241: LD_VAR 0 6
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: AND
41250: OR
41251: IFFALSE 41261
// mode = 0 ;
41253: LD_ADDR_VAR 0 6
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// case mode of 0 :
41261: LD_VAR 0 6
41265: PUSH
41266: LD_INT 0
41268: DOUBLE
41269: EQUAL
41270: IFTRUE 41274
41272: GO 52727
41274: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41275: LD_ADDR_VAR 0 11
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41468: LD_ADDR_VAR 0 12
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 3
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41664: LD_ADDR_VAR 0 13
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: NEG
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: NEG
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41863: LD_ADDR_VAR 0 14
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 3
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42059: LD_ADDR_VAR 0 15
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42252: LD_ADDR_VAR 0 16
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42445: LD_ADDR_VAR 0 17
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42675: LD_ADDR_VAR 0 18
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42905: LD_ADDR_VAR 0 19
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43135: LD_ADDR_VAR 0 20
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43365: LD_ADDR_VAR 0 21
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43595: LD_ADDR_VAR 0 22
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43825: LD_ADDR_VAR 0 23
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44105: LD_ADDR_VAR 0 24
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44381: LD_ADDR_VAR 0 25
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44655: LD_ADDR_VAR 0 26
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44931: LD_ADDR_VAR 0 27
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45211: LD_ADDR_VAR 0 28
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 3
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45493: LD_ADDR_VAR 0 29
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45772: LD_ADDR_VAR 0 30
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46050: LD_ADDR_VAR 0 31
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46328: LD_ADDR_VAR 0 32
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 3
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46606: LD_ADDR_VAR 0 33
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46885: LD_ADDR_VAR 0 34
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47165: LD_ADDR_VAR 0 35
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47277: LD_ADDR_VAR 0 36
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47389: LD_ADDR_VAR 0 37
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47501: LD_ADDR_VAR 0 38
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47613: LD_ADDR_VAR 0 39
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47725: LD_ADDR_VAR 0 40
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47837: LD_ADDR_VAR 0 41
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 3
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48187: LD_ADDR_VAR 0 42
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 3
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48537: LD_ADDR_VAR 0 43
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 3
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48885: LD_ADDR_VAR 0 44
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49235: LD_ADDR_VAR 0 45
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: NEG
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49585: LD_ADDR_VAR 0 46
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 3
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49933: LD_ADDR_VAR 0 47
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50084: LD_ADDR_VAR 0 48
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50231: LD_ADDR_VAR 0 49
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50375: LD_ADDR_VAR 0 50
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50519: LD_ADDR_VAR 0 51
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50666: LD_ADDR_VAR 0 52
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50817: LD_ADDR_VAR 0 53
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51047: LD_ADDR_VAR 0 54
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51277: LD_ADDR_VAR 0 55
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51507: LD_ADDR_VAR 0 56
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51737: LD_ADDR_VAR 0 57
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51967: LD_ADDR_VAR 0 58
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52197: LD_ADDR_VAR 0 59
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52285: LD_ADDR_VAR 0 60
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52373: LD_ADDR_VAR 0 61
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52461: LD_ADDR_VAR 0 62
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52549: LD_ADDR_VAR 0 63
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52637: LD_ADDR_VAR 0 64
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// end ; 1 :
52725: GO 58622
52727: LD_INT 1
52729: DOUBLE
52730: EQUAL
52731: IFTRUE 52735
52733: GO 55358
52735: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52736: LD_ADDR_VAR 0 11
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52780: LD_ADDR_VAR 0 12
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52821: LD_ADDR_VAR 0 13
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52861: LD_ADDR_VAR 0 14
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52902: LD_ADDR_VAR 0 15
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52946: LD_ADDR_VAR 0 16
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52992: LD_ADDR_VAR 0 17
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53036: LD_ADDR_VAR 0 18
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53077: LD_ADDR_VAR 0 19
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53117: LD_ADDR_VAR 0 20
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53158: LD_ADDR_VAR 0 21
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53202: LD_ADDR_VAR 0 22
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53248: LD_ADDR_VAR 0 23
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 4
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53292: LD_ADDR_VAR 0 24
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53333: LD_ADDR_VAR 0 25
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 4
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53373: LD_ADDR_VAR 0 26
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53414: LD_ADDR_VAR 0 27
53418: PUSH
53419: LD_INT 3
53421: NEG
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 3
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 4
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53458: LD_ADDR_VAR 0 28
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 4
53489: NEG
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53504: LD_ADDR_VAR 0 29
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 4
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 4
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 5
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 5
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 6
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 6
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 5
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53659: LD_ADDR_VAR 0 30
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 4
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 4
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 5
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 5
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 6
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 6
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53802: LD_ADDR_VAR 0 31
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 4
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: LD_INT 4
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 4
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 5
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 6
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 6
53909: PUSH
53910: LD_INT 6
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 5
53919: PUSH
53920: LD_INT 6
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53941: LD_ADDR_VAR 0 32
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 5
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 5
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 6
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 6
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 5
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54084: LD_ADDR_VAR 0 33
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: NEG
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 4
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 4
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 5
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 5
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 6
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 6
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54239: LD_ADDR_VAR 0 34
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 3
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: NEG
54283: PUSH
54284: LD_INT 4
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 4
54294: NEG
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: NEG
54307: PUSH
54308: LD_INT 4
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 4
54318: NEG
54319: PUSH
54320: LD_INT 5
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 5
54330: NEG
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 5
54342: NEG
54343: PUSH
54344: LD_INT 5
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 5
54354: NEG
54355: PUSH
54356: LD_INT 6
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 6
54366: NEG
54367: PUSH
54368: LD_INT 5
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 6
54378: NEG
54379: PUSH
54380: LD_INT 6
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54402: LD_ADDR_VAR 0 41
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54446: LD_ADDR_VAR 0 42
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54487: LD_ADDR_VAR 0 43
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54527: LD_ADDR_VAR 0 44
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54568: LD_ADDR_VAR 0 45
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54612: LD_ADDR_VAR 0 46
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 3
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54658: LD_ADDR_VAR 0 47
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54691: LD_ADDR_VAR 0 48
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54722: LD_ADDR_VAR 0 49
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54751: LD_ADDR_VAR 0 50
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54780: LD_ADDR_VAR 0 51
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54811: LD_ADDR_VAR 0 52
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54844: LD_ADDR_VAR 0 53
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54888: LD_ADDR_VAR 0 54
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54929: LD_ADDR_VAR 0 55
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54969: LD_ADDR_VAR 0 56
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55010: LD_ADDR_VAR 0 57
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55054: LD_ADDR_VAR 0 58
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55100: LD_ADDR_VAR 0 59
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55144: LD_ADDR_VAR 0 60
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55185: LD_ADDR_VAR 0 61
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55225: LD_ADDR_VAR 0 62
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55266: LD_ADDR_VAR 0 63
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55310: LD_ADDR_VAR 0 64
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// end ; 2 :
55356: GO 58622
55358: LD_INT 2
55360: DOUBLE
55361: EQUAL
55362: IFTRUE 55366
55364: GO 58621
55366: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55367: LD_ADDR_VAR 0 29
55371: PUSH
55372: LD_INT 4
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 5
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 4
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 5
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 4
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 4
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 4
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 4
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 4
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 5
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 5
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 4
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 5
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 4
55706: NEG
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 4
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 4
55752: NEG
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: LD_INT 5
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 5
55812: NEG
55813: PUSH
55814: LD_INT 4
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 5
55824: NEG
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: LD_INT 5
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55905: LD_ADDR_VAR 0 30
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: LD_INT 4
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: LD_INT 5
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 4
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 5
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 5
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 5
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 5
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: LD_INT 4
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 4
56257: NEG
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 4
56293: NEG
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 5
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 4
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 4
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 5
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 5
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56452: LD_ADDR_VAR 0 31
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 5
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 5
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: LD_INT 4
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 4
56666: NEG
56667: PUSH
56668: LD_INT 5
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 5
56714: NEG
56715: PUSH
56716: LD_INT 4
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: LD_INT 5
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: LD_INT 5
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 3
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 4
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 4
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 4
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 4
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57002: LD_ADDR_VAR 0 32
57006: PUSH
57007: LD_INT 4
57009: NEG
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 4
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 5
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 5
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: NEG
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 4
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 5
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 4
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 4
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 5
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 5
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 5
57434: PUSH
57435: LD_INT 4
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: LD_INT 5
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: LD_INT 5
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: LD_INT 5
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57549: LD_ADDR_VAR 0 33
57553: PUSH
57554: LD_INT 4
57556: NEG
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 5
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 5
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 4
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: LD_INT 4
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 5
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 4
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 5
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 4
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 4
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 4
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 5
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58087: LD_ADDR_VAR 0 34
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 5
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 5
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 4
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 5
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 4
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 4
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 4
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: NEG
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 5
58551: NEG
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// end ; end ;
58619: GO 58622
58621: POP
// case btype of b_depot , b_warehouse :
58622: LD_VAR 0 1
58626: PUSH
58627: LD_INT 0
58629: DOUBLE
58630: EQUAL
58631: IFTRUE 58641
58633: LD_INT 1
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58641
58639: GO 58842
58641: POP
// case nation of nation_american :
58642: LD_VAR 0 5
58646: PUSH
58647: LD_INT 1
58649: DOUBLE
58650: EQUAL
58651: IFTRUE 58655
58653: GO 58711
58655: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58656: LD_ADDR_VAR 0 9
58660: PUSH
58661: LD_VAR 0 11
58665: PUSH
58666: LD_VAR 0 12
58670: PUSH
58671: LD_VAR 0 13
58675: PUSH
58676: LD_VAR 0 14
58680: PUSH
58681: LD_VAR 0 15
58685: PUSH
58686: LD_VAR 0 16
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: PUSH
58699: LD_VAR 0 4
58703: PUSH
58704: LD_INT 1
58706: PLUS
58707: ARRAY
58708: ST_TO_ADDR
58709: GO 58840
58711: LD_INT 2
58713: DOUBLE
58714: EQUAL
58715: IFTRUE 58719
58717: GO 58775
58719: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58720: LD_ADDR_VAR 0 9
58724: PUSH
58725: LD_VAR 0 17
58729: PUSH
58730: LD_VAR 0 18
58734: PUSH
58735: LD_VAR 0 19
58739: PUSH
58740: LD_VAR 0 20
58744: PUSH
58745: LD_VAR 0 21
58749: PUSH
58750: LD_VAR 0 22
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: PUSH
58763: LD_VAR 0 4
58767: PUSH
58768: LD_INT 1
58770: PLUS
58771: ARRAY
58772: ST_TO_ADDR
58773: GO 58840
58775: LD_INT 3
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58783
58781: GO 58839
58783: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58784: LD_ADDR_VAR 0 9
58788: PUSH
58789: LD_VAR 0 23
58793: PUSH
58794: LD_VAR 0 24
58798: PUSH
58799: LD_VAR 0 25
58803: PUSH
58804: LD_VAR 0 26
58808: PUSH
58809: LD_VAR 0 27
58813: PUSH
58814: LD_VAR 0 28
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: LD_VAR 0 4
58831: PUSH
58832: LD_INT 1
58834: PLUS
58835: ARRAY
58836: ST_TO_ADDR
58837: GO 58840
58839: POP
58840: GO 59395
58842: LD_INT 2
58844: DOUBLE
58845: EQUAL
58846: IFTRUE 58856
58848: LD_INT 3
58850: DOUBLE
58851: EQUAL
58852: IFTRUE 58856
58854: GO 58912
58856: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58857: LD_ADDR_VAR 0 9
58861: PUSH
58862: LD_VAR 0 29
58866: PUSH
58867: LD_VAR 0 30
58871: PUSH
58872: LD_VAR 0 31
58876: PUSH
58877: LD_VAR 0 32
58881: PUSH
58882: LD_VAR 0 33
58886: PUSH
58887: LD_VAR 0 34
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: PUSH
58900: LD_VAR 0 4
58904: PUSH
58905: LD_INT 1
58907: PLUS
58908: ARRAY
58909: ST_TO_ADDR
58910: GO 59395
58912: LD_INT 16
58914: DOUBLE
58915: EQUAL
58916: IFTRUE 58974
58918: LD_INT 17
58920: DOUBLE
58921: EQUAL
58922: IFTRUE 58974
58924: LD_INT 18
58926: DOUBLE
58927: EQUAL
58928: IFTRUE 58974
58930: LD_INT 19
58932: DOUBLE
58933: EQUAL
58934: IFTRUE 58974
58936: LD_INT 22
58938: DOUBLE
58939: EQUAL
58940: IFTRUE 58974
58942: LD_INT 20
58944: DOUBLE
58945: EQUAL
58946: IFTRUE 58974
58948: LD_INT 21
58950: DOUBLE
58951: EQUAL
58952: IFTRUE 58974
58954: LD_INT 23
58956: DOUBLE
58957: EQUAL
58958: IFTRUE 58974
58960: LD_INT 24
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 58974
58966: LD_INT 25
58968: DOUBLE
58969: EQUAL
58970: IFTRUE 58974
58972: GO 59030
58974: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58975: LD_ADDR_VAR 0 9
58979: PUSH
58980: LD_VAR 0 35
58984: PUSH
58985: LD_VAR 0 36
58989: PUSH
58990: LD_VAR 0 37
58994: PUSH
58995: LD_VAR 0 38
58999: PUSH
59000: LD_VAR 0 39
59004: PUSH
59005: LD_VAR 0 40
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: LD_VAR 0 4
59022: PUSH
59023: LD_INT 1
59025: PLUS
59026: ARRAY
59027: ST_TO_ADDR
59028: GO 59395
59030: LD_INT 6
59032: DOUBLE
59033: EQUAL
59034: IFTRUE 59086
59036: LD_INT 7
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59086
59042: LD_INT 8
59044: DOUBLE
59045: EQUAL
59046: IFTRUE 59086
59048: LD_INT 13
59050: DOUBLE
59051: EQUAL
59052: IFTRUE 59086
59054: LD_INT 12
59056: DOUBLE
59057: EQUAL
59058: IFTRUE 59086
59060: LD_INT 15
59062: DOUBLE
59063: EQUAL
59064: IFTRUE 59086
59066: LD_INT 11
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59086
59072: LD_INT 14
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59086
59078: LD_INT 10
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59086
59084: GO 59142
59086: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59087: LD_ADDR_VAR 0 9
59091: PUSH
59092: LD_VAR 0 41
59096: PUSH
59097: LD_VAR 0 42
59101: PUSH
59102: LD_VAR 0 43
59106: PUSH
59107: LD_VAR 0 44
59111: PUSH
59112: LD_VAR 0 45
59116: PUSH
59117: LD_VAR 0 46
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: PUSH
59130: LD_VAR 0 4
59134: PUSH
59135: LD_INT 1
59137: PLUS
59138: ARRAY
59139: ST_TO_ADDR
59140: GO 59395
59142: LD_INT 36
59144: DOUBLE
59145: EQUAL
59146: IFTRUE 59150
59148: GO 59206
59150: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59151: LD_ADDR_VAR 0 9
59155: PUSH
59156: LD_VAR 0 47
59160: PUSH
59161: LD_VAR 0 48
59165: PUSH
59166: LD_VAR 0 49
59170: PUSH
59171: LD_VAR 0 50
59175: PUSH
59176: LD_VAR 0 51
59180: PUSH
59181: LD_VAR 0 52
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: PUSH
59194: LD_VAR 0 4
59198: PUSH
59199: LD_INT 1
59201: PLUS
59202: ARRAY
59203: ST_TO_ADDR
59204: GO 59395
59206: LD_INT 4
59208: DOUBLE
59209: EQUAL
59210: IFTRUE 59232
59212: LD_INT 5
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59232
59218: LD_INT 34
59220: DOUBLE
59221: EQUAL
59222: IFTRUE 59232
59224: LD_INT 37
59226: DOUBLE
59227: EQUAL
59228: IFTRUE 59232
59230: GO 59288
59232: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59233: LD_ADDR_VAR 0 9
59237: PUSH
59238: LD_VAR 0 53
59242: PUSH
59243: LD_VAR 0 54
59247: PUSH
59248: LD_VAR 0 55
59252: PUSH
59253: LD_VAR 0 56
59257: PUSH
59258: LD_VAR 0 57
59262: PUSH
59263: LD_VAR 0 58
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: PUSH
59276: LD_VAR 0 4
59280: PUSH
59281: LD_INT 1
59283: PLUS
59284: ARRAY
59285: ST_TO_ADDR
59286: GO 59395
59288: LD_INT 31
59290: DOUBLE
59291: EQUAL
59292: IFTRUE 59338
59294: LD_INT 32
59296: DOUBLE
59297: EQUAL
59298: IFTRUE 59338
59300: LD_INT 33
59302: DOUBLE
59303: EQUAL
59304: IFTRUE 59338
59306: LD_INT 27
59308: DOUBLE
59309: EQUAL
59310: IFTRUE 59338
59312: LD_INT 26
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59338
59318: LD_INT 28
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59338
59324: LD_INT 29
59326: DOUBLE
59327: EQUAL
59328: IFTRUE 59338
59330: LD_INT 30
59332: DOUBLE
59333: EQUAL
59334: IFTRUE 59338
59336: GO 59394
59338: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59339: LD_ADDR_VAR 0 9
59343: PUSH
59344: LD_VAR 0 59
59348: PUSH
59349: LD_VAR 0 60
59353: PUSH
59354: LD_VAR 0 61
59358: PUSH
59359: LD_VAR 0 62
59363: PUSH
59364: LD_VAR 0 63
59368: PUSH
59369: LD_VAR 0 64
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: PUSH
59382: LD_VAR 0 4
59386: PUSH
59387: LD_INT 1
59389: PLUS
59390: ARRAY
59391: ST_TO_ADDR
59392: GO 59395
59394: POP
// temp_list2 = [ ] ;
59395: LD_ADDR_VAR 0 10
59399: PUSH
59400: EMPTY
59401: ST_TO_ADDR
// for i in temp_list do
59402: LD_ADDR_VAR 0 8
59406: PUSH
59407: LD_VAR 0 9
59411: PUSH
59412: FOR_IN
59413: IFFALSE 59465
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59415: LD_ADDR_VAR 0 10
59419: PUSH
59420: LD_VAR 0 10
59424: PUSH
59425: LD_VAR 0 8
59429: PUSH
59430: LD_INT 1
59432: ARRAY
59433: PUSH
59434: LD_VAR 0 2
59438: PLUS
59439: PUSH
59440: LD_VAR 0 8
59444: PUSH
59445: LD_INT 2
59447: ARRAY
59448: PUSH
59449: LD_VAR 0 3
59453: PLUS
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: EMPTY
59460: LIST
59461: ADD
59462: ST_TO_ADDR
59463: GO 59412
59465: POP
59466: POP
// result = temp_list2 ;
59467: LD_ADDR_VAR 0 7
59471: PUSH
59472: LD_VAR 0 10
59476: ST_TO_ADDR
// end ;
59477: LD_VAR 0 7
59481: RET
// export function EnemyInRange ( unit , dist ) ; begin
59482: LD_INT 0
59484: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59485: LD_ADDR_VAR 0 3
59489: PUSH
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL_OW 255
59499: PPUSH
59500: LD_VAR 0 1
59504: PPUSH
59505: CALL_OW 250
59509: PPUSH
59510: LD_VAR 0 1
59514: PPUSH
59515: CALL_OW 251
59519: PPUSH
59520: LD_VAR 0 2
59524: PPUSH
59525: CALL 33586 0 4
59529: PUSH
59530: LD_INT 4
59532: ARRAY
59533: ST_TO_ADDR
// end ;
59534: LD_VAR 0 3
59538: RET
// export function PlayerSeeMe ( unit ) ; begin
59539: LD_INT 0
59541: PPUSH
// result := See ( your_side , unit ) ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: LD_OWVAR 2
59551: PPUSH
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL_OW 292
59561: ST_TO_ADDR
// end ;
59562: LD_VAR 0 2
59566: RET
// export function ReverseDir ( unit ) ; begin
59567: LD_INT 0
59569: PPUSH
// if not unit then
59570: LD_VAR 0 1
59574: NOT
59575: IFFALSE 59579
// exit ;
59577: GO 59602
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59579: LD_ADDR_VAR 0 2
59583: PUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: CALL_OW 254
59593: PUSH
59594: LD_INT 3
59596: PLUS
59597: PUSH
59598: LD_INT 6
59600: MOD
59601: ST_TO_ADDR
// end ;
59602: LD_VAR 0 2
59606: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59607: LD_INT 0
59609: PPUSH
59610: PPUSH
59611: PPUSH
59612: PPUSH
59613: PPUSH
// if not hexes then
59614: LD_VAR 0 2
59618: NOT
59619: IFFALSE 59623
// exit ;
59621: GO 59771
// dist := 9999 ;
59623: LD_ADDR_VAR 0 5
59627: PUSH
59628: LD_INT 9999
59630: ST_TO_ADDR
// for i = 1 to hexes do
59631: LD_ADDR_VAR 0 4
59635: PUSH
59636: DOUBLE
59637: LD_INT 1
59639: DEC
59640: ST_TO_ADDR
59641: LD_VAR 0 2
59645: PUSH
59646: FOR_TO
59647: IFFALSE 59759
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59649: LD_VAR 0 1
59653: PPUSH
59654: LD_VAR 0 2
59658: PUSH
59659: LD_VAR 0 4
59663: ARRAY
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PPUSH
59669: LD_VAR 0 2
59673: PUSH
59674: LD_VAR 0 4
59678: ARRAY
59679: PUSH
59680: LD_INT 2
59682: ARRAY
59683: PPUSH
59684: CALL_OW 297
59688: PUSH
59689: LD_VAR 0 5
59693: LESS
59694: IFFALSE 59757
// begin hex := hexes [ i ] ;
59696: LD_ADDR_VAR 0 7
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_VAR 0 4
59710: ARRAY
59711: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59712: LD_ADDR_VAR 0 5
59716: PUSH
59717: LD_VAR 0 1
59721: PPUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_VAR 0 4
59731: ARRAY
59732: PUSH
59733: LD_INT 1
59735: ARRAY
59736: PPUSH
59737: LD_VAR 0 2
59741: PUSH
59742: LD_VAR 0 4
59746: ARRAY
59747: PUSH
59748: LD_INT 2
59750: ARRAY
59751: PPUSH
59752: CALL_OW 297
59756: ST_TO_ADDR
// end ; end ;
59757: GO 59646
59759: POP
59760: POP
// result := hex ;
59761: LD_ADDR_VAR 0 3
59765: PUSH
59766: LD_VAR 0 7
59770: ST_TO_ADDR
// end ;
59771: LD_VAR 0 3
59775: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59776: LD_INT 0
59778: PPUSH
59779: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59780: LD_VAR 0 1
59784: NOT
59785: PUSH
59786: LD_VAR 0 1
59790: PUSH
59791: LD_INT 21
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 23
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PPUSH
59815: CALL_OW 69
59819: IN
59820: NOT
59821: OR
59822: IFFALSE 59826
// exit ;
59824: GO 59873
// for i = 1 to 3 do
59826: LD_ADDR_VAR 0 3
59830: PUSH
59831: DOUBLE
59832: LD_INT 1
59834: DEC
59835: ST_TO_ADDR
59836: LD_INT 3
59838: PUSH
59839: FOR_TO
59840: IFFALSE 59871
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59842: LD_VAR 0 1
59846: PPUSH
59847: CALL_OW 250
59851: PPUSH
59852: LD_VAR 0 1
59856: PPUSH
59857: CALL_OW 251
59861: PPUSH
59862: LD_INT 1
59864: PPUSH
59865: CALL_OW 453
59869: GO 59839
59871: POP
59872: POP
// end ;
59873: LD_VAR 0 2
59877: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59878: LD_INT 0
59880: PPUSH
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59886: LD_VAR 0 1
59890: NOT
59891: PUSH
59892: LD_VAR 0 2
59896: NOT
59897: OR
59898: PUSH
59899: LD_VAR 0 1
59903: PPUSH
59904: CALL_OW 314
59908: OR
59909: IFFALSE 59913
// exit ;
59911: GO 60354
// x := GetX ( enemy_unit ) ;
59913: LD_ADDR_VAR 0 7
59917: PUSH
59918: LD_VAR 0 2
59922: PPUSH
59923: CALL_OW 250
59927: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59928: LD_ADDR_VAR 0 8
59932: PUSH
59933: LD_VAR 0 2
59937: PPUSH
59938: CALL_OW 251
59942: ST_TO_ADDR
// if not x or not y then
59943: LD_VAR 0 7
59947: NOT
59948: PUSH
59949: LD_VAR 0 8
59953: NOT
59954: OR
59955: IFFALSE 59959
// exit ;
59957: GO 60354
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59959: LD_ADDR_VAR 0 6
59963: PUSH
59964: LD_VAR 0 7
59968: PPUSH
59969: LD_INT 0
59971: PPUSH
59972: LD_INT 4
59974: PPUSH
59975: CALL_OW 272
59979: PUSH
59980: LD_VAR 0 8
59984: PPUSH
59985: LD_INT 0
59987: PPUSH
59988: LD_INT 4
59990: PPUSH
59991: CALL_OW 273
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_VAR 0 7
60004: PPUSH
60005: LD_INT 1
60007: PPUSH
60008: LD_INT 4
60010: PPUSH
60011: CALL_OW 272
60015: PUSH
60016: LD_VAR 0 8
60020: PPUSH
60021: LD_INT 1
60023: PPUSH
60024: LD_INT 4
60026: PPUSH
60027: CALL_OW 273
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_VAR 0 7
60040: PPUSH
60041: LD_INT 2
60043: PPUSH
60044: LD_INT 4
60046: PPUSH
60047: CALL_OW 272
60051: PUSH
60052: LD_VAR 0 8
60056: PPUSH
60057: LD_INT 2
60059: PPUSH
60060: LD_INT 4
60062: PPUSH
60063: CALL_OW 273
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_VAR 0 7
60076: PPUSH
60077: LD_INT 3
60079: PPUSH
60080: LD_INT 4
60082: PPUSH
60083: CALL_OW 272
60087: PUSH
60088: LD_VAR 0 8
60092: PPUSH
60093: LD_INT 3
60095: PPUSH
60096: LD_INT 4
60098: PPUSH
60099: CALL_OW 273
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_VAR 0 7
60112: PPUSH
60113: LD_INT 4
60115: PPUSH
60116: LD_INT 4
60118: PPUSH
60119: CALL_OW 272
60123: PUSH
60124: LD_VAR 0 8
60128: PPUSH
60129: LD_INT 4
60131: PPUSH
60132: LD_INT 4
60134: PPUSH
60135: CALL_OW 273
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_VAR 0 7
60148: PPUSH
60149: LD_INT 5
60151: PPUSH
60152: LD_INT 4
60154: PPUSH
60155: CALL_OW 272
60159: PUSH
60160: LD_VAR 0 8
60164: PPUSH
60165: LD_INT 5
60167: PPUSH
60168: LD_INT 4
60170: PPUSH
60171: CALL_OW 273
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: ST_TO_ADDR
// for i = tmp downto 1 do
60188: LD_ADDR_VAR 0 4
60192: PUSH
60193: DOUBLE
60194: LD_VAR 0 6
60198: INC
60199: ST_TO_ADDR
60200: LD_INT 1
60202: PUSH
60203: FOR_DOWNTO
60204: IFFALSE 60305
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60206: LD_VAR 0 6
60210: PUSH
60211: LD_VAR 0 4
60215: ARRAY
60216: PUSH
60217: LD_INT 1
60219: ARRAY
60220: PPUSH
60221: LD_VAR 0 6
60225: PUSH
60226: LD_VAR 0 4
60230: ARRAY
60231: PUSH
60232: LD_INT 2
60234: ARRAY
60235: PPUSH
60236: CALL_OW 488
60240: NOT
60241: PUSH
60242: LD_VAR 0 6
60246: PUSH
60247: LD_VAR 0 4
60251: ARRAY
60252: PUSH
60253: LD_INT 1
60255: ARRAY
60256: PPUSH
60257: LD_VAR 0 6
60261: PUSH
60262: LD_VAR 0 4
60266: ARRAY
60267: PUSH
60268: LD_INT 2
60270: ARRAY
60271: PPUSH
60272: CALL_OW 428
60276: PUSH
60277: LD_INT 0
60279: NONEQUAL
60280: OR
60281: IFFALSE 60303
// tmp := Delete ( tmp , i ) ;
60283: LD_ADDR_VAR 0 6
60287: PUSH
60288: LD_VAR 0 6
60292: PPUSH
60293: LD_VAR 0 4
60297: PPUSH
60298: CALL_OW 3
60302: ST_TO_ADDR
60303: GO 60203
60305: POP
60306: POP
// j := GetClosestHex ( unit , tmp ) ;
60307: LD_ADDR_VAR 0 5
60311: PUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: LD_VAR 0 6
60321: PPUSH
60322: CALL 59607 0 2
60326: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60327: LD_VAR 0 1
60331: PPUSH
60332: LD_VAR 0 5
60336: PUSH
60337: LD_INT 1
60339: ARRAY
60340: PPUSH
60341: LD_VAR 0 5
60345: PUSH
60346: LD_INT 2
60348: ARRAY
60349: PPUSH
60350: CALL_OW 111
// end ;
60354: LD_VAR 0 3
60358: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60359: LD_INT 0
60361: PPUSH
60362: PPUSH
60363: PPUSH
// uc_side = 0 ;
60364: LD_ADDR_OWVAR 20
60368: PUSH
60369: LD_INT 0
60371: ST_TO_ADDR
// uc_nation = 0 ;
60372: LD_ADDR_OWVAR 21
60376: PUSH
60377: LD_INT 0
60379: ST_TO_ADDR
// InitHc_All ( ) ;
60380: CALL_OW 584
// InitVc ;
60384: CALL_OW 20
// if mastodonts then
60388: LD_VAR 0 6
60392: IFFALSE 60459
// for i = 1 to mastodonts do
60394: LD_ADDR_VAR 0 11
60398: PUSH
60399: DOUBLE
60400: LD_INT 1
60402: DEC
60403: ST_TO_ADDR
60404: LD_VAR 0 6
60408: PUSH
60409: FOR_TO
60410: IFFALSE 60457
// begin vc_chassis := 31 ;
60412: LD_ADDR_OWVAR 37
60416: PUSH
60417: LD_INT 31
60419: ST_TO_ADDR
// vc_control := control_rider ;
60420: LD_ADDR_OWVAR 38
60424: PUSH
60425: LD_INT 4
60427: ST_TO_ADDR
// animal := CreateVehicle ;
60428: LD_ADDR_VAR 0 12
60432: PUSH
60433: CALL_OW 45
60437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60438: LD_VAR 0 12
60442: PPUSH
60443: LD_VAR 0 8
60447: PPUSH
60448: LD_INT 0
60450: PPUSH
60451: CALL 62647 0 3
// end ;
60455: GO 60409
60457: POP
60458: POP
// if horses then
60459: LD_VAR 0 5
60463: IFFALSE 60530
// for i = 1 to horses do
60465: LD_ADDR_VAR 0 11
60469: PUSH
60470: DOUBLE
60471: LD_INT 1
60473: DEC
60474: ST_TO_ADDR
60475: LD_VAR 0 5
60479: PUSH
60480: FOR_TO
60481: IFFALSE 60528
// begin hc_class := 21 ;
60483: LD_ADDR_OWVAR 28
60487: PUSH
60488: LD_INT 21
60490: ST_TO_ADDR
// hc_gallery :=  ;
60491: LD_ADDR_OWVAR 33
60495: PUSH
60496: LD_STRING 
60498: ST_TO_ADDR
// animal := CreateHuman ;
60499: LD_ADDR_VAR 0 12
60503: PUSH
60504: CALL_OW 44
60508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60509: LD_VAR 0 12
60513: PPUSH
60514: LD_VAR 0 8
60518: PPUSH
60519: LD_INT 0
60521: PPUSH
60522: CALL 62647 0 3
// end ;
60526: GO 60480
60528: POP
60529: POP
// if birds then
60530: LD_VAR 0 1
60534: IFFALSE 60601
// for i = 1 to birds do
60536: LD_ADDR_VAR 0 11
60540: PUSH
60541: DOUBLE
60542: LD_INT 1
60544: DEC
60545: ST_TO_ADDR
60546: LD_VAR 0 1
60550: PUSH
60551: FOR_TO
60552: IFFALSE 60599
// begin hc_class = 18 ;
60554: LD_ADDR_OWVAR 28
60558: PUSH
60559: LD_INT 18
60561: ST_TO_ADDR
// hc_gallery =  ;
60562: LD_ADDR_OWVAR 33
60566: PUSH
60567: LD_STRING 
60569: ST_TO_ADDR
// animal := CreateHuman ;
60570: LD_ADDR_VAR 0 12
60574: PUSH
60575: CALL_OW 44
60579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60580: LD_VAR 0 12
60584: PPUSH
60585: LD_VAR 0 8
60589: PPUSH
60590: LD_INT 0
60592: PPUSH
60593: CALL 62647 0 3
// end ;
60597: GO 60551
60599: POP
60600: POP
// if tigers then
60601: LD_VAR 0 2
60605: IFFALSE 60689
// for i = 1 to tigers do
60607: LD_ADDR_VAR 0 11
60611: PUSH
60612: DOUBLE
60613: LD_INT 1
60615: DEC
60616: ST_TO_ADDR
60617: LD_VAR 0 2
60621: PUSH
60622: FOR_TO
60623: IFFALSE 60687
// begin hc_class = class_tiger ;
60625: LD_ADDR_OWVAR 28
60629: PUSH
60630: LD_INT 14
60632: ST_TO_ADDR
// hc_gallery =  ;
60633: LD_ADDR_OWVAR 33
60637: PUSH
60638: LD_STRING 
60640: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60641: LD_ADDR_OWVAR 35
60645: PUSH
60646: LD_INT 7
60648: NEG
60649: PPUSH
60650: LD_INT 7
60652: PPUSH
60653: CALL_OW 12
60657: ST_TO_ADDR
// animal := CreateHuman ;
60658: LD_ADDR_VAR 0 12
60662: PUSH
60663: CALL_OW 44
60667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60668: LD_VAR 0 12
60672: PPUSH
60673: LD_VAR 0 8
60677: PPUSH
60678: LD_INT 0
60680: PPUSH
60681: CALL 62647 0 3
// end ;
60685: GO 60622
60687: POP
60688: POP
// if apemans then
60689: LD_VAR 0 3
60693: IFFALSE 60816
// for i = 1 to apemans do
60695: LD_ADDR_VAR 0 11
60699: PUSH
60700: DOUBLE
60701: LD_INT 1
60703: DEC
60704: ST_TO_ADDR
60705: LD_VAR 0 3
60709: PUSH
60710: FOR_TO
60711: IFFALSE 60814
// begin hc_class = class_apeman ;
60713: LD_ADDR_OWVAR 28
60717: PUSH
60718: LD_INT 12
60720: ST_TO_ADDR
// hc_gallery =  ;
60721: LD_ADDR_OWVAR 33
60725: PUSH
60726: LD_STRING 
60728: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60729: LD_ADDR_OWVAR 35
60733: PUSH
60734: LD_INT 5
60736: NEG
60737: PPUSH
60738: LD_INT 5
60740: PPUSH
60741: CALL_OW 12
60745: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60746: LD_ADDR_OWVAR 31
60750: PUSH
60751: LD_INT 1
60753: PPUSH
60754: LD_INT 3
60756: PPUSH
60757: CALL_OW 12
60761: PUSH
60762: LD_INT 1
60764: PPUSH
60765: LD_INT 3
60767: PPUSH
60768: CALL_OW 12
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: ST_TO_ADDR
// animal := CreateHuman ;
60785: LD_ADDR_VAR 0 12
60789: PUSH
60790: CALL_OW 44
60794: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60795: LD_VAR 0 12
60799: PPUSH
60800: LD_VAR 0 8
60804: PPUSH
60805: LD_INT 0
60807: PPUSH
60808: CALL 62647 0 3
// end ;
60812: GO 60710
60814: POP
60815: POP
// if enchidnas then
60816: LD_VAR 0 4
60820: IFFALSE 60887
// for i = 1 to enchidnas do
60822: LD_ADDR_VAR 0 11
60826: PUSH
60827: DOUBLE
60828: LD_INT 1
60830: DEC
60831: ST_TO_ADDR
60832: LD_VAR 0 4
60836: PUSH
60837: FOR_TO
60838: IFFALSE 60885
// begin hc_class = 13 ;
60840: LD_ADDR_OWVAR 28
60844: PUSH
60845: LD_INT 13
60847: ST_TO_ADDR
// hc_gallery =  ;
60848: LD_ADDR_OWVAR 33
60852: PUSH
60853: LD_STRING 
60855: ST_TO_ADDR
// animal := CreateHuman ;
60856: LD_ADDR_VAR 0 12
60860: PUSH
60861: CALL_OW 44
60865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60866: LD_VAR 0 12
60870: PPUSH
60871: LD_VAR 0 8
60875: PPUSH
60876: LD_INT 0
60878: PPUSH
60879: CALL 62647 0 3
// end ;
60883: GO 60837
60885: POP
60886: POP
// if fishes then
60887: LD_VAR 0 7
60891: IFFALSE 60958
// for i = 1 to fishes do
60893: LD_ADDR_VAR 0 11
60897: PUSH
60898: DOUBLE
60899: LD_INT 1
60901: DEC
60902: ST_TO_ADDR
60903: LD_VAR 0 7
60907: PUSH
60908: FOR_TO
60909: IFFALSE 60956
// begin hc_class = 20 ;
60911: LD_ADDR_OWVAR 28
60915: PUSH
60916: LD_INT 20
60918: ST_TO_ADDR
// hc_gallery =  ;
60919: LD_ADDR_OWVAR 33
60923: PUSH
60924: LD_STRING 
60926: ST_TO_ADDR
// animal := CreateHuman ;
60927: LD_ADDR_VAR 0 12
60931: PUSH
60932: CALL_OW 44
60936: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60937: LD_VAR 0 12
60941: PPUSH
60942: LD_VAR 0 9
60946: PPUSH
60947: LD_INT 0
60949: PPUSH
60950: CALL 62647 0 3
// end ;
60954: GO 60908
60956: POP
60957: POP
// end ;
60958: LD_VAR 0 10
60962: RET
// export function WantHeal ( sci , unit ) ; begin
60963: LD_INT 0
60965: PPUSH
// if GetTaskList ( sci ) > 0 then
60966: LD_VAR 0 1
60970: PPUSH
60971: CALL_OW 437
60975: PUSH
60976: LD_INT 0
60978: GREATER
60979: IFFALSE 61049
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60981: LD_VAR 0 1
60985: PPUSH
60986: CALL_OW 437
60990: PUSH
60991: LD_INT 1
60993: ARRAY
60994: PUSH
60995: LD_INT 1
60997: ARRAY
60998: PUSH
60999: LD_STRING l
61001: EQUAL
61002: PUSH
61003: LD_VAR 0 1
61007: PPUSH
61008: CALL_OW 437
61012: PUSH
61013: LD_INT 1
61015: ARRAY
61016: PUSH
61017: LD_INT 4
61019: ARRAY
61020: PUSH
61021: LD_VAR 0 2
61025: EQUAL
61026: AND
61027: IFFALSE 61039
// result := true else
61029: LD_ADDR_VAR 0 3
61033: PUSH
61034: LD_INT 1
61036: ST_TO_ADDR
61037: GO 61047
// result := false ;
61039: LD_ADDR_VAR 0 3
61043: PUSH
61044: LD_INT 0
61046: ST_TO_ADDR
// end else
61047: GO 61057
// result := false ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
// end ;
61057: LD_VAR 0 3
61061: RET
// export function HealTarget ( sci ) ; begin
61062: LD_INT 0
61064: PPUSH
// if not sci then
61065: LD_VAR 0 1
61069: NOT
61070: IFFALSE 61074
// exit ;
61072: GO 61139
// result := 0 ;
61074: LD_ADDR_VAR 0 2
61078: PUSH
61079: LD_INT 0
61081: ST_TO_ADDR
// if GetTaskList ( sci ) then
61082: LD_VAR 0 1
61086: PPUSH
61087: CALL_OW 437
61091: IFFALSE 61139
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61093: LD_VAR 0 1
61097: PPUSH
61098: CALL_OW 437
61102: PUSH
61103: LD_INT 1
61105: ARRAY
61106: PUSH
61107: LD_INT 1
61109: ARRAY
61110: PUSH
61111: LD_STRING l
61113: EQUAL
61114: IFFALSE 61139
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61116: LD_ADDR_VAR 0 2
61120: PUSH
61121: LD_VAR 0 1
61125: PPUSH
61126: CALL_OW 437
61130: PUSH
61131: LD_INT 1
61133: ARRAY
61134: PUSH
61135: LD_INT 4
61137: ARRAY
61138: ST_TO_ADDR
// end ;
61139: LD_VAR 0 2
61143: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61144: LD_INT 0
61146: PPUSH
61147: PPUSH
61148: PPUSH
61149: PPUSH
// if not base_units then
61150: LD_VAR 0 1
61154: NOT
61155: IFFALSE 61159
// exit ;
61157: GO 61246
// result := false ;
61159: LD_ADDR_VAR 0 2
61163: PUSH
61164: LD_INT 0
61166: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61167: LD_ADDR_VAR 0 5
61171: PUSH
61172: LD_VAR 0 1
61176: PPUSH
61177: LD_INT 21
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PPUSH
61187: CALL_OW 72
61191: ST_TO_ADDR
// if not tmp then
61192: LD_VAR 0 5
61196: NOT
61197: IFFALSE 61201
// exit ;
61199: GO 61246
// for i in tmp do
61201: LD_ADDR_VAR 0 3
61205: PUSH
61206: LD_VAR 0 5
61210: PUSH
61211: FOR_IN
61212: IFFALSE 61244
// begin result := EnemyInRange ( i , 22 ) ;
61214: LD_ADDR_VAR 0 2
61218: PUSH
61219: LD_VAR 0 3
61223: PPUSH
61224: LD_INT 22
61226: PPUSH
61227: CALL 59482 0 2
61231: ST_TO_ADDR
// if result then
61232: LD_VAR 0 2
61236: IFFALSE 61242
// exit ;
61238: POP
61239: POP
61240: GO 61246
// end ;
61242: GO 61211
61244: POP
61245: POP
// end ;
61246: LD_VAR 0 2
61250: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61251: LD_INT 0
61253: PPUSH
61254: PPUSH
// if not units then
61255: LD_VAR 0 1
61259: NOT
61260: IFFALSE 61264
// exit ;
61262: GO 61334
// result := [ ] ;
61264: LD_ADDR_VAR 0 3
61268: PUSH
61269: EMPTY
61270: ST_TO_ADDR
// for i in units do
61271: LD_ADDR_VAR 0 4
61275: PUSH
61276: LD_VAR 0 1
61280: PUSH
61281: FOR_IN
61282: IFFALSE 61332
// if GetTag ( i ) = tag then
61284: LD_VAR 0 4
61288: PPUSH
61289: CALL_OW 110
61293: PUSH
61294: LD_VAR 0 2
61298: EQUAL
61299: IFFALSE 61330
// result := Insert ( result , result + 1 , i ) ;
61301: LD_ADDR_VAR 0 3
61305: PUSH
61306: LD_VAR 0 3
61310: PPUSH
61311: LD_VAR 0 3
61315: PUSH
61316: LD_INT 1
61318: PLUS
61319: PPUSH
61320: LD_VAR 0 4
61324: PPUSH
61325: CALL_OW 2
61329: ST_TO_ADDR
61330: GO 61281
61332: POP
61333: POP
// end ;
61334: LD_VAR 0 3
61338: RET
// export function IsDriver ( un ) ; begin
61339: LD_INT 0
61341: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: LD_VAR 0 1
61351: PUSH
61352: LD_INT 55
61354: PUSH
61355: EMPTY
61356: LIST
61357: PPUSH
61358: CALL_OW 69
61362: IN
61363: ST_TO_ADDR
// end ;
61364: LD_VAR 0 2
61368: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61369: LD_INT 0
61371: PPUSH
61372: PPUSH
// list := [ ] ;
61373: LD_ADDR_VAR 0 5
61377: PUSH
61378: EMPTY
61379: ST_TO_ADDR
// case d of 0 :
61380: LD_VAR 0 3
61384: PUSH
61385: LD_INT 0
61387: DOUBLE
61388: EQUAL
61389: IFTRUE 61393
61391: GO 61526
61393: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61394: LD_ADDR_VAR 0 5
61398: PUSH
61399: LD_VAR 0 1
61403: PUSH
61404: LD_INT 4
61406: MINUS
61407: PUSH
61408: LD_VAR 0 2
61412: PUSH
61413: LD_INT 4
61415: MINUS
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: PUSH
61425: LD_VAR 0 1
61429: PUSH
61430: LD_INT 3
61432: MINUS
61433: PUSH
61434: LD_VAR 0 2
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_INT 4
61454: PLUS
61455: PUSH
61456: LD_VAR 0 2
61460: PUSH
61461: LD_INT 4
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_INT 3
61476: PLUS
61477: PUSH
61478: LD_VAR 0 2
61482: PUSH
61483: LD_INT 3
61485: PLUS
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: PUSH
61495: LD_VAR 0 1
61499: PUSH
61500: LD_VAR 0 2
61504: PUSH
61505: LD_INT 4
61507: PLUS
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// end ; 1 :
61524: GO 62224
61526: LD_INT 1
61528: DOUBLE
61529: EQUAL
61530: IFTRUE 61534
61532: GO 61667
61534: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61535: LD_ADDR_VAR 0 5
61539: PUSH
61540: LD_VAR 0 1
61544: PUSH
61545: LD_VAR 0 2
61549: PUSH
61550: LD_INT 4
61552: MINUS
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_INT 3
61569: MINUS
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_INT 3
61578: MINUS
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: PUSH
61588: LD_VAR 0 1
61592: PUSH
61593: LD_INT 4
61595: MINUS
61596: PUSH
61597: LD_VAR 0 2
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: LD_VAR 0 2
61619: PUSH
61620: LD_INT 3
61622: PLUS
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: PUSH
61632: LD_VAR 0 1
61636: PUSH
61637: LD_INT 4
61639: PLUS
61640: PUSH
61641: LD_VAR 0 2
61645: PUSH
61646: LD_INT 4
61648: PLUS
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// end ; 2 :
61665: GO 62224
61667: LD_INT 2
61669: DOUBLE
61670: EQUAL
61671: IFTRUE 61675
61673: GO 61804
61675: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61676: LD_ADDR_VAR 0 5
61680: PUSH
61681: LD_VAR 0 1
61685: PUSH
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 3
61693: MINUS
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: PUSH
61703: LD_VAR 0 1
61707: PUSH
61708: LD_INT 4
61710: PLUS
61711: PUSH
61712: LD_VAR 0 2
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_VAR 0 2
61734: PUSH
61735: LD_INT 4
61737: PLUS
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: LD_VAR 0 1
61751: PUSH
61752: LD_INT 3
61754: MINUS
61755: PUSH
61756: LD_VAR 0 2
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: PUSH
61769: LD_VAR 0 1
61773: PUSH
61774: LD_INT 4
61776: MINUS
61777: PUSH
61778: LD_VAR 0 2
61782: PUSH
61783: LD_INT 4
61785: MINUS
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// end ; 3 :
61802: GO 62224
61804: LD_INT 3
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61812
61810: GO 61945
61812: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61813: LD_ADDR_VAR 0 5
61817: PUSH
61818: LD_VAR 0 1
61822: PUSH
61823: LD_INT 3
61825: PLUS
61826: PUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_INT 4
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: PUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_INT 4
61847: PLUS
61848: PUSH
61849: LD_VAR 0 2
61853: PUSH
61854: LD_INT 4
61856: PLUS
61857: PUSH
61858: LD_INT 5
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: PUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_INT 4
61873: MINUS
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 1
61892: PUSH
61893: LD_VAR 0 2
61897: PUSH
61898: LD_INT 4
61900: MINUS
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: LD_VAR 0 1
61914: PUSH
61915: LD_INT 3
61917: MINUS
61918: PUSH
61919: LD_VAR 0 2
61923: PUSH
61924: LD_INT 3
61926: MINUS
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// end ; 4 :
61943: GO 62224
61945: LD_INT 4
61947: DOUBLE
61948: EQUAL
61949: IFTRUE 61953
61951: GO 62086
61953: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61954: LD_ADDR_VAR 0 5
61958: PUSH
61959: LD_VAR 0 1
61963: PUSH
61964: LD_VAR 0 2
61968: PUSH
61969: LD_INT 4
61971: PLUS
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 3
61988: PLUS
61989: PUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 3
61997: PLUS
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: PUSH
62007: LD_VAR 0 1
62011: PUSH
62012: LD_INT 4
62014: PLUS
62015: PUSH
62016: LD_VAR 0 2
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 1
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 3
62041: MINUS
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_INT 4
62058: MINUS
62059: PUSH
62060: LD_VAR 0 2
62064: PUSH
62065: LD_INT 4
62067: MINUS
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: ST_TO_ADDR
// end ; 5 :
62084: GO 62224
62086: LD_INT 5
62088: DOUBLE
62089: EQUAL
62090: IFTRUE 62094
62092: GO 62223
62094: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62095: LD_ADDR_VAR 0 5
62099: PUSH
62100: LD_VAR 0 1
62104: PUSH
62105: LD_INT 4
62107: MINUS
62108: PUSH
62109: LD_VAR 0 2
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: PUSH
62122: LD_VAR 0 1
62126: PUSH
62127: LD_VAR 0 2
62131: PUSH
62132: LD_INT 4
62134: MINUS
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 4
62151: PLUS
62152: PUSH
62153: LD_VAR 0 2
62157: PUSH
62158: LD_INT 4
62160: PLUS
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: PUSH
62170: LD_VAR 0 1
62174: PUSH
62175: LD_INT 3
62177: PLUS
62178: PUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 1
62196: PUSH
62197: LD_VAR 0 2
62201: PUSH
62202: LD_INT 3
62204: PLUS
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: ST_TO_ADDR
// end ; end ;
62221: GO 62224
62223: POP
// result := list ;
62224: LD_ADDR_VAR 0 4
62228: PUSH
62229: LD_VAR 0 5
62233: ST_TO_ADDR
// end ;
62234: LD_VAR 0 4
62238: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62239: LD_INT 0
62241: PPUSH
62242: PPUSH
62243: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62244: LD_VAR 0 1
62248: NOT
62249: PUSH
62250: LD_VAR 0 2
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 4
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: IN
62273: NOT
62274: OR
62275: IFFALSE 62279
// exit ;
62277: GO 62371
// tmp := [ ] ;
62279: LD_ADDR_VAR 0 5
62283: PUSH
62284: EMPTY
62285: ST_TO_ADDR
// for i in units do
62286: LD_ADDR_VAR 0 4
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: FOR_IN
62297: IFFALSE 62340
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62299: LD_ADDR_VAR 0 5
62303: PUSH
62304: LD_VAR 0 5
62308: PPUSH
62309: LD_VAR 0 5
62313: PUSH
62314: LD_INT 1
62316: PLUS
62317: PPUSH
62318: LD_VAR 0 4
62322: PPUSH
62323: LD_VAR 0 2
62327: PPUSH
62328: CALL_OW 259
62332: PPUSH
62333: CALL_OW 2
62337: ST_TO_ADDR
62338: GO 62296
62340: POP
62341: POP
// if not tmp then
62342: LD_VAR 0 5
62346: NOT
62347: IFFALSE 62351
// exit ;
62349: GO 62371
// result := SortListByListDesc ( units , tmp ) ;
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_VAR 0 5
62365: PPUSH
62366: CALL_OW 77
62370: ST_TO_ADDR
// end ;
62371: LD_VAR 0 3
62375: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62376: LD_INT 0
62378: PPUSH
62379: PPUSH
62380: PPUSH
// result := false ;
62381: LD_ADDR_VAR 0 3
62385: PUSH
62386: LD_INT 0
62388: ST_TO_ADDR
// x := GetX ( building ) ;
62389: LD_ADDR_VAR 0 4
62393: PUSH
62394: LD_VAR 0 2
62398: PPUSH
62399: CALL_OW 250
62403: ST_TO_ADDR
// y := GetY ( building ) ;
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: LD_VAR 0 2
62413: PPUSH
62414: CALL_OW 251
62418: ST_TO_ADDR
// if not building or not x or not y then
62419: LD_VAR 0 2
62423: NOT
62424: PUSH
62425: LD_VAR 0 4
62429: NOT
62430: OR
62431: PUSH
62432: LD_VAR 0 5
62436: NOT
62437: OR
62438: IFFALSE 62442
// exit ;
62440: GO 62534
// if GetTaskList ( unit ) then
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 437
62451: IFFALSE 62534
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62453: LD_STRING e
62455: PUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: CALL_OW 437
62465: PUSH
62466: LD_INT 1
62468: ARRAY
62469: PUSH
62470: LD_INT 1
62472: ARRAY
62473: EQUAL
62474: PUSH
62475: LD_VAR 0 4
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: CALL_OW 437
62489: PUSH
62490: LD_INT 1
62492: ARRAY
62493: PUSH
62494: LD_INT 2
62496: ARRAY
62497: EQUAL
62498: AND
62499: PUSH
62500: LD_VAR 0 5
62504: PUSH
62505: LD_VAR 0 1
62509: PPUSH
62510: CALL_OW 437
62514: PUSH
62515: LD_INT 1
62517: ARRAY
62518: PUSH
62519: LD_INT 3
62521: ARRAY
62522: EQUAL
62523: AND
62524: IFFALSE 62534
// result := true end ;
62526: LD_ADDR_VAR 0 3
62530: PUSH
62531: LD_INT 1
62533: ST_TO_ADDR
// end ;
62534: LD_VAR 0 3
62538: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62539: LD_INT 0
62541: PPUSH
// result := false ;
62542: LD_ADDR_VAR 0 4
62546: PUSH
62547: LD_INT 0
62549: ST_TO_ADDR
// if GetTaskList ( unit ) then
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 437
62559: IFFALSE 62642
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62561: LD_STRING M
62563: PUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 437
62573: PUSH
62574: LD_INT 1
62576: ARRAY
62577: PUSH
62578: LD_INT 1
62580: ARRAY
62581: EQUAL
62582: PUSH
62583: LD_VAR 0 2
62587: PUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 437
62597: PUSH
62598: LD_INT 1
62600: ARRAY
62601: PUSH
62602: LD_INT 2
62604: ARRAY
62605: EQUAL
62606: AND
62607: PUSH
62608: LD_VAR 0 3
62612: PUSH
62613: LD_VAR 0 1
62617: PPUSH
62618: CALL_OW 437
62622: PUSH
62623: LD_INT 1
62625: ARRAY
62626: PUSH
62627: LD_INT 3
62629: ARRAY
62630: EQUAL
62631: AND
62632: IFFALSE 62642
// result := true ;
62634: LD_ADDR_VAR 0 4
62638: PUSH
62639: LD_INT 1
62641: ST_TO_ADDR
// end ; end ;
62642: LD_VAR 0 4
62646: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62647: LD_INT 0
62649: PPUSH
62650: PPUSH
62651: PPUSH
62652: PPUSH
// if not unit or not area then
62653: LD_VAR 0 1
62657: NOT
62658: PUSH
62659: LD_VAR 0 2
62663: NOT
62664: OR
62665: IFFALSE 62669
// exit ;
62667: GO 62833
// tmp := AreaToList ( area , i ) ;
62669: LD_ADDR_VAR 0 6
62673: PUSH
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_VAR 0 5
62683: PPUSH
62684: CALL_OW 517
62688: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62689: LD_ADDR_VAR 0 5
62693: PUSH
62694: DOUBLE
62695: LD_INT 1
62697: DEC
62698: ST_TO_ADDR
62699: LD_VAR 0 6
62703: PUSH
62704: LD_INT 1
62706: ARRAY
62707: PUSH
62708: FOR_TO
62709: IFFALSE 62831
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62711: LD_ADDR_VAR 0 7
62715: PUSH
62716: LD_VAR 0 6
62720: PUSH
62721: LD_INT 1
62723: ARRAY
62724: PUSH
62725: LD_VAR 0 5
62729: ARRAY
62730: PUSH
62731: LD_VAR 0 6
62735: PUSH
62736: LD_INT 2
62738: ARRAY
62739: PUSH
62740: LD_VAR 0 5
62744: ARRAY
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62750: LD_VAR 0 7
62754: PUSH
62755: LD_INT 1
62757: ARRAY
62758: PPUSH
62759: LD_VAR 0 7
62763: PUSH
62764: LD_INT 2
62766: ARRAY
62767: PPUSH
62768: CALL_OW 428
62772: PUSH
62773: LD_INT 0
62775: EQUAL
62776: IFFALSE 62829
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62778: LD_VAR 0 1
62782: PPUSH
62783: LD_VAR 0 7
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PPUSH
62792: LD_VAR 0 7
62796: PUSH
62797: LD_INT 2
62799: ARRAY
62800: PPUSH
62801: LD_VAR 0 3
62805: PPUSH
62806: CALL_OW 48
// result := IsPlaced ( unit ) ;
62810: LD_ADDR_VAR 0 4
62814: PUSH
62815: LD_VAR 0 1
62819: PPUSH
62820: CALL_OW 305
62824: ST_TO_ADDR
// exit ;
62825: POP
62826: POP
62827: GO 62833
// end ; end ;
62829: GO 62708
62831: POP
62832: POP
// end ;
62833: LD_VAR 0 4
62837: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62838: LD_INT 0
62840: PPUSH
62841: PPUSH
62842: PPUSH
// if not side or side > 8 then
62843: LD_VAR 0 1
62847: NOT
62848: PUSH
62849: LD_VAR 0 1
62853: PUSH
62854: LD_INT 8
62856: GREATER
62857: OR
62858: IFFALSE 62862
// exit ;
62860: GO 63049
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62862: LD_ADDR_VAR 0 4
62866: PUSH
62867: LD_INT 22
62869: PUSH
62870: LD_VAR 0 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 21
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PPUSH
62893: CALL_OW 69
62897: ST_TO_ADDR
// if not tmp then
62898: LD_VAR 0 4
62902: NOT
62903: IFFALSE 62907
// exit ;
62905: GO 63049
// enable_addtolog := true ;
62907: LD_ADDR_OWVAR 81
62911: PUSH
62912: LD_INT 1
62914: ST_TO_ADDR
// AddToLog ( [ ) ;
62915: LD_STRING [
62917: PPUSH
62918: CALL_OW 561
// for i in tmp do
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_VAR 0 4
62931: PUSH
62932: FOR_IN
62933: IFFALSE 63040
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62935: LD_STRING [
62937: PUSH
62938: LD_VAR 0 3
62942: PPUSH
62943: CALL_OW 266
62947: STR
62948: PUSH
62949: LD_STRING , 
62951: STR
62952: PUSH
62953: LD_VAR 0 3
62957: PPUSH
62958: CALL_OW 250
62962: STR
62963: PUSH
62964: LD_STRING , 
62966: STR
62967: PUSH
62968: LD_VAR 0 3
62972: PPUSH
62973: CALL_OW 251
62977: STR
62978: PUSH
62979: LD_STRING , 
62981: STR
62982: PUSH
62983: LD_VAR 0 3
62987: PPUSH
62988: CALL_OW 254
62992: STR
62993: PUSH
62994: LD_STRING , 
62996: STR
62997: PUSH
62998: LD_VAR 0 3
63002: PPUSH
63003: LD_INT 1
63005: PPUSH
63006: CALL_OW 268
63010: STR
63011: PUSH
63012: LD_STRING , 
63014: STR
63015: PUSH
63016: LD_VAR 0 3
63020: PPUSH
63021: LD_INT 2
63023: PPUSH
63024: CALL_OW 268
63028: STR
63029: PUSH
63030: LD_STRING ],
63032: STR
63033: PPUSH
63034: CALL_OW 561
// end ;
63038: GO 62932
63040: POP
63041: POP
// AddToLog ( ]; ) ;
63042: LD_STRING ];
63044: PPUSH
63045: CALL_OW 561
// end ;
63049: LD_VAR 0 2
63053: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63054: LD_INT 0
63056: PPUSH
63057: PPUSH
63058: PPUSH
63059: PPUSH
63060: PPUSH
// if not area or not rate or not max then
63061: LD_VAR 0 1
63065: NOT
63066: PUSH
63067: LD_VAR 0 2
63071: NOT
63072: OR
63073: PUSH
63074: LD_VAR 0 4
63078: NOT
63079: OR
63080: IFFALSE 63084
// exit ;
63082: GO 63276
// while 1 do
63084: LD_INT 1
63086: IFFALSE 63276
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63088: LD_ADDR_VAR 0 9
63092: PUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_INT 1
63100: PPUSH
63101: CALL_OW 287
63105: PUSH
63106: LD_INT 10
63108: MUL
63109: ST_TO_ADDR
// r := rate / 10 ;
63110: LD_ADDR_VAR 0 7
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 10
63122: DIVREAL
63123: ST_TO_ADDR
// time := 1 1$00 ;
63124: LD_ADDR_VAR 0 8
63128: PUSH
63129: LD_INT 2100
63131: ST_TO_ADDR
// if amount < min then
63132: LD_VAR 0 9
63136: PUSH
63137: LD_VAR 0 3
63141: LESS
63142: IFFALSE 63160
// r := r * 2 else
63144: LD_ADDR_VAR 0 7
63148: PUSH
63149: LD_VAR 0 7
63153: PUSH
63154: LD_INT 2
63156: MUL
63157: ST_TO_ADDR
63158: GO 63186
// if amount > max then
63160: LD_VAR 0 9
63164: PUSH
63165: LD_VAR 0 4
63169: GREATER
63170: IFFALSE 63186
// r := r / 2 ;
63172: LD_ADDR_VAR 0 7
63176: PUSH
63177: LD_VAR 0 7
63181: PUSH
63182: LD_INT 2
63184: DIVREAL
63185: ST_TO_ADDR
// time := time / r ;
63186: LD_ADDR_VAR 0 8
63190: PUSH
63191: LD_VAR 0 8
63195: PUSH
63196: LD_VAR 0 7
63200: DIVREAL
63201: ST_TO_ADDR
// if time < 0 then
63202: LD_VAR 0 8
63206: PUSH
63207: LD_INT 0
63209: LESS
63210: IFFALSE 63227
// time := time * - 1 ;
63212: LD_ADDR_VAR 0 8
63216: PUSH
63217: LD_VAR 0 8
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: MUL
63226: ST_TO_ADDR
// wait ( time ) ;
63227: LD_VAR 0 8
63231: PPUSH
63232: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63236: LD_INT 35
63238: PPUSH
63239: LD_INT 875
63241: PPUSH
63242: CALL_OW 12
63246: PPUSH
63247: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63251: LD_INT 1
63253: PPUSH
63254: LD_INT 5
63256: PPUSH
63257: CALL_OW 12
63261: PPUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: LD_INT 1
63269: PPUSH
63270: CALL_OW 55
// end ;
63274: GO 63084
// end ;
63276: LD_VAR 0 5
63280: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63281: LD_INT 0
63283: PPUSH
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
// if not turrets or not factories then
63291: LD_VAR 0 1
63295: NOT
63296: PUSH
63297: LD_VAR 0 2
63301: NOT
63302: OR
63303: IFFALSE 63307
// exit ;
63305: GO 63614
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63307: LD_ADDR_VAR 0 10
63311: PUSH
63312: LD_INT 5
63314: PUSH
63315: LD_INT 6
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: LD_INT 4
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: LD_INT 5
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 24
63349: PUSH
63350: LD_INT 25
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 23
63359: PUSH
63360: LD_INT 27
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 42
63373: PUSH
63374: LD_INT 43
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 44
63383: PUSH
63384: LD_INT 46
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 45
63393: PUSH
63394: LD_INT 47
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// result := [ ] ;
63411: LD_ADDR_VAR 0 3
63415: PUSH
63416: EMPTY
63417: ST_TO_ADDR
// for i in turrets do
63418: LD_ADDR_VAR 0 4
63422: PUSH
63423: LD_VAR 0 1
63427: PUSH
63428: FOR_IN
63429: IFFALSE 63612
// begin nat := GetNation ( i ) ;
63431: LD_ADDR_VAR 0 7
63435: PUSH
63436: LD_VAR 0 4
63440: PPUSH
63441: CALL_OW 248
63445: ST_TO_ADDR
// weapon := 0 ;
63446: LD_ADDR_VAR 0 8
63450: PUSH
63451: LD_INT 0
63453: ST_TO_ADDR
// if not nat then
63454: LD_VAR 0 7
63458: NOT
63459: IFFALSE 63463
// continue ;
63461: GO 63428
// for j in list [ nat ] do
63463: LD_ADDR_VAR 0 5
63467: PUSH
63468: LD_VAR 0 10
63472: PUSH
63473: LD_VAR 0 7
63477: ARRAY
63478: PUSH
63479: FOR_IN
63480: IFFALSE 63521
// if GetBWeapon ( i ) = j [ 1 ] then
63482: LD_VAR 0 4
63486: PPUSH
63487: CALL_OW 269
63491: PUSH
63492: LD_VAR 0 5
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: EQUAL
63501: IFFALSE 63519
// begin weapon := j [ 2 ] ;
63503: LD_ADDR_VAR 0 8
63507: PUSH
63508: LD_VAR 0 5
63512: PUSH
63513: LD_INT 2
63515: ARRAY
63516: ST_TO_ADDR
// break ;
63517: GO 63521
// end ;
63519: GO 63479
63521: POP
63522: POP
// if not weapon then
63523: LD_VAR 0 8
63527: NOT
63528: IFFALSE 63532
// continue ;
63530: GO 63428
// for k in factories do
63532: LD_ADDR_VAR 0 6
63536: PUSH
63537: LD_VAR 0 2
63541: PUSH
63542: FOR_IN
63543: IFFALSE 63608
// begin weapons := AvailableWeaponList ( k ) ;
63545: LD_ADDR_VAR 0 9
63549: PUSH
63550: LD_VAR 0 6
63554: PPUSH
63555: CALL_OW 478
63559: ST_TO_ADDR
// if not weapons then
63560: LD_VAR 0 9
63564: NOT
63565: IFFALSE 63569
// continue ;
63567: GO 63542
// if weapon in weapons then
63569: LD_VAR 0 8
63573: PUSH
63574: LD_VAR 0 9
63578: IN
63579: IFFALSE 63606
// begin result := [ i , weapon ] ;
63581: LD_ADDR_VAR 0 3
63585: PUSH
63586: LD_VAR 0 4
63590: PUSH
63591: LD_VAR 0 8
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: ST_TO_ADDR
// exit ;
63600: POP
63601: POP
63602: POP
63603: POP
63604: GO 63614
// end ; end ;
63606: GO 63542
63608: POP
63609: POP
// end ;
63610: GO 63428
63612: POP
63613: POP
// end ;
63614: LD_VAR 0 3
63618: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63619: LD_INT 0
63621: PPUSH
// if not side or side > 8 then
63622: LD_VAR 0 3
63626: NOT
63627: PUSH
63628: LD_VAR 0 3
63632: PUSH
63633: LD_INT 8
63635: GREATER
63636: OR
63637: IFFALSE 63641
// exit ;
63639: GO 63700
// if not range then
63641: LD_VAR 0 4
63645: NOT
63646: IFFALSE 63657
// range := - 12 ;
63648: LD_ADDR_VAR 0 4
63652: PUSH
63653: LD_INT 12
63655: NEG
63656: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63657: LD_VAR 0 1
63661: PPUSH
63662: LD_VAR 0 2
63666: PPUSH
63667: LD_VAR 0 3
63671: PPUSH
63672: LD_VAR 0 4
63676: PPUSH
63677: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_VAR 0 2
63690: PPUSH
63691: LD_VAR 0 3
63695: PPUSH
63696: CALL_OW 331
// end ;
63700: LD_VAR 0 5
63704: RET
// export function Video ( mode ) ; begin
63705: LD_INT 0
63707: PPUSH
// ingame_video = mode ;
63708: LD_ADDR_OWVAR 52
63712: PUSH
63713: LD_VAR 0 1
63717: ST_TO_ADDR
// interface_hidden = mode ;
63718: LD_ADDR_OWVAR 54
63722: PUSH
63723: LD_VAR 0 1
63727: ST_TO_ADDR
// end ;
63728: LD_VAR 0 2
63732: RET
// export function Join ( array , element ) ; begin
63733: LD_INT 0
63735: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63736: LD_ADDR_VAR 0 3
63740: PUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: LD_VAR 0 1
63750: PUSH
63751: LD_INT 1
63753: PLUS
63754: PPUSH
63755: LD_VAR 0 2
63759: PPUSH
63760: CALL_OW 1
63764: ST_TO_ADDR
// end ;
63765: LD_VAR 0 3
63769: RET
// export function JoinUnion ( array , element ) ; begin
63770: LD_INT 0
63772: PPUSH
// result := array union element ;
63773: LD_ADDR_VAR 0 3
63777: PUSH
63778: LD_VAR 0 1
63782: PUSH
63783: LD_VAR 0 2
63787: UNION
63788: ST_TO_ADDR
// end ;
63789: LD_VAR 0 3
63793: RET
// export function GetBehemoths ( side ) ; begin
63794: LD_INT 0
63796: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63797: LD_ADDR_VAR 0 2
63801: PUSH
63802: LD_INT 22
63804: PUSH
63805: LD_VAR 0 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 31
63816: PUSH
63817: LD_INT 25
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PPUSH
63828: CALL_OW 69
63832: ST_TO_ADDR
// end ;
63833: LD_VAR 0 2
63837: RET
// export function Shuffle ( array ) ; var i , index ; begin
63838: LD_INT 0
63840: PPUSH
63841: PPUSH
63842: PPUSH
// result := [ ] ;
63843: LD_ADDR_VAR 0 2
63847: PUSH
63848: EMPTY
63849: ST_TO_ADDR
// if not array then
63850: LD_VAR 0 1
63854: NOT
63855: IFFALSE 63859
// exit ;
63857: GO 63958
// Randomize ;
63859: CALL_OW 10
// for i = array downto 1 do
63863: LD_ADDR_VAR 0 3
63867: PUSH
63868: DOUBLE
63869: LD_VAR 0 1
63873: INC
63874: ST_TO_ADDR
63875: LD_INT 1
63877: PUSH
63878: FOR_DOWNTO
63879: IFFALSE 63956
// begin index := rand ( 1 , array ) ;
63881: LD_ADDR_VAR 0 4
63885: PUSH
63886: LD_INT 1
63888: PPUSH
63889: LD_VAR 0 1
63893: PPUSH
63894: CALL_OW 12
63898: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63899: LD_ADDR_VAR 0 2
63903: PUSH
63904: LD_VAR 0 2
63908: PPUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 1
63916: PLUS
63917: PPUSH
63918: LD_VAR 0 1
63922: PUSH
63923: LD_VAR 0 4
63927: ARRAY
63928: PPUSH
63929: CALL_OW 2
63933: ST_TO_ADDR
// array := Delete ( array , index ) ;
63934: LD_ADDR_VAR 0 1
63938: PUSH
63939: LD_VAR 0 1
63943: PPUSH
63944: LD_VAR 0 4
63948: PPUSH
63949: CALL_OW 3
63953: ST_TO_ADDR
// end ;
63954: GO 63878
63956: POP
63957: POP
// end ;
63958: LD_VAR 0 2
63962: RET
// export function GetBaseMaterials ( base ) ; begin
63963: LD_INT 0
63965: PPUSH
// result := [ 0 , 0 , 0 ] ;
63966: LD_ADDR_VAR 0 2
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// if not base then
63985: LD_VAR 0 1
63989: NOT
63990: IFFALSE 63994
// exit ;
63992: GO 64043
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63994: LD_ADDR_VAR 0 2
63998: PUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: LD_INT 1
64006: PPUSH
64007: CALL_OW 275
64011: PUSH
64012: LD_VAR 0 1
64016: PPUSH
64017: LD_INT 2
64019: PPUSH
64020: CALL_OW 275
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: LD_INT 3
64032: PPUSH
64033: CALL_OW 275
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// end ;
64043: LD_VAR 0 2
64047: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64048: LD_INT 0
64050: PPUSH
64051: PPUSH
// result := array ;
64052: LD_ADDR_VAR 0 3
64056: PUSH
64057: LD_VAR 0 1
64061: ST_TO_ADDR
// if size > 0 then
64062: LD_VAR 0 2
64066: PUSH
64067: LD_INT 0
64069: GREATER
64070: IFFALSE 64116
// for i := array downto size do
64072: LD_ADDR_VAR 0 4
64076: PUSH
64077: DOUBLE
64078: LD_VAR 0 1
64082: INC
64083: ST_TO_ADDR
64084: LD_VAR 0 2
64088: PUSH
64089: FOR_DOWNTO
64090: IFFALSE 64114
// result := Delete ( result , result ) ;
64092: LD_ADDR_VAR 0 3
64096: PUSH
64097: LD_VAR 0 3
64101: PPUSH
64102: LD_VAR 0 3
64106: PPUSH
64107: CALL_OW 3
64111: ST_TO_ADDR
64112: GO 64089
64114: POP
64115: POP
// end ;
64116: LD_VAR 0 3
64120: RET
// export function ComExit ( unit ) ; var tmp ; begin
64121: LD_INT 0
64123: PPUSH
64124: PPUSH
// if not IsInUnit ( unit ) then
64125: LD_VAR 0 1
64129: PPUSH
64130: CALL_OW 310
64134: NOT
64135: IFFALSE 64139
// exit ;
64137: GO 64199
// tmp := IsInUnit ( unit ) ;
64139: LD_ADDR_VAR 0 3
64143: PUSH
64144: LD_VAR 0 1
64148: PPUSH
64149: CALL_OW 310
64153: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64154: LD_VAR 0 3
64158: PPUSH
64159: CALL_OW 247
64163: PUSH
64164: LD_INT 2
64166: EQUAL
64167: IFFALSE 64180
// ComExitVehicle ( unit ) else
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 121
64178: GO 64189
// ComExitBuilding ( unit ) ;
64180: LD_VAR 0 1
64184: PPUSH
64185: CALL_OW 122
// result := tmp ;
64189: LD_ADDR_VAR 0 2
64193: PUSH
64194: LD_VAR 0 3
64198: ST_TO_ADDR
// end ;
64199: LD_VAR 0 2
64203: RET
// export function ResetHc ; begin
64204: LD_INT 0
64206: PPUSH
// InitHc ;
64207: CALL_OW 19
// hc_importance := 0 ;
64211: LD_ADDR_OWVAR 32
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
// end ;
64219: LD_VAR 0 1
64223: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64224: LD_INT 0
64226: PPUSH
64227: PPUSH
64228: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64229: LD_ADDR_VAR 0 6
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_VAR 0 3
64243: PLUS
64244: PUSH
64245: LD_INT 2
64247: DIV
64248: ST_TO_ADDR
// if _x < 0 then
64249: LD_VAR 0 6
64253: PUSH
64254: LD_INT 0
64256: LESS
64257: IFFALSE 64274
// _x := _x * - 1 ;
64259: LD_ADDR_VAR 0 6
64263: PUSH
64264: LD_VAR 0 6
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: MUL
64273: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64274: LD_ADDR_VAR 0 7
64278: PUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_VAR 0 4
64288: PLUS
64289: PUSH
64290: LD_INT 2
64292: DIV
64293: ST_TO_ADDR
// if _y < 0 then
64294: LD_VAR 0 7
64298: PUSH
64299: LD_INT 0
64301: LESS
64302: IFFALSE 64319
// _y := _y * - 1 ;
64304: LD_ADDR_VAR 0 7
64308: PUSH
64309: LD_VAR 0 7
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: MUL
64318: ST_TO_ADDR
// result := [ _x , _y ] ;
64319: LD_ADDR_VAR 0 5
64323: PUSH
64324: LD_VAR 0 6
64328: PUSH
64329: LD_VAR 0 7
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// end ;
64338: LD_VAR 0 5
64342: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64343: LD_INT 0
64345: PPUSH
64346: PPUSH
64347: PPUSH
64348: PPUSH
// task := GetTaskList ( unit ) ;
64349: LD_ADDR_VAR 0 7
64353: PUSH
64354: LD_VAR 0 1
64358: PPUSH
64359: CALL_OW 437
64363: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64364: LD_VAR 0 7
64368: NOT
64369: PUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: LD_VAR 0 2
64379: PPUSH
64380: CALL_OW 308
64384: NOT
64385: AND
64386: IFFALSE 64390
// exit ;
64388: GO 64508
// if IsInArea ( unit , area ) then
64390: LD_VAR 0 1
64394: PPUSH
64395: LD_VAR 0 2
64399: PPUSH
64400: CALL_OW 308
64404: IFFALSE 64422
// begin ComMoveToArea ( unit , goAway ) ;
64406: LD_VAR 0 1
64410: PPUSH
64411: LD_VAR 0 3
64415: PPUSH
64416: CALL_OW 113
// exit ;
64420: GO 64508
// end ; if task [ 1 ] [ 1 ] <> M then
64422: LD_VAR 0 7
64426: PUSH
64427: LD_INT 1
64429: ARRAY
64430: PUSH
64431: LD_INT 1
64433: ARRAY
64434: PUSH
64435: LD_STRING M
64437: NONEQUAL
64438: IFFALSE 64442
// exit ;
64440: GO 64508
// x := task [ 1 ] [ 2 ] ;
64442: LD_ADDR_VAR 0 5
64446: PUSH
64447: LD_VAR 0 7
64451: PUSH
64452: LD_INT 1
64454: ARRAY
64455: PUSH
64456: LD_INT 2
64458: ARRAY
64459: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64460: LD_ADDR_VAR 0 6
64464: PUSH
64465: LD_VAR 0 7
64469: PUSH
64470: LD_INT 1
64472: ARRAY
64473: PUSH
64474: LD_INT 3
64476: ARRAY
64477: ST_TO_ADDR
// if InArea ( x , y , area ) then
64478: LD_VAR 0 5
64482: PPUSH
64483: LD_VAR 0 6
64487: PPUSH
64488: LD_VAR 0 2
64492: PPUSH
64493: CALL_OW 309
64497: IFFALSE 64508
// ComStop ( unit ) ;
64499: LD_VAR 0 1
64503: PPUSH
64504: CALL_OW 141
// end ;
64508: LD_VAR 0 4
64512: RET
// export function Abs ( value ) ; begin
64513: LD_INT 0
64515: PPUSH
// result := value ;
64516: LD_ADDR_VAR 0 2
64520: PUSH
64521: LD_VAR 0 1
64525: ST_TO_ADDR
// if value < 0 then
64526: LD_VAR 0 1
64530: PUSH
64531: LD_INT 0
64533: LESS
64534: IFFALSE 64551
// result := value * - 1 ;
64536: LD_ADDR_VAR 0 2
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: MUL
64550: ST_TO_ADDR
// end ; end_of_file
64551: LD_VAR 0 2
64555: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64556: LD_VAR 0 1
64560: PUSH
64561: LD_INT 200
64563: DOUBLE
64564: GREATEREQUAL
64565: IFFALSE 64573
64567: LD_INT 299
64569: DOUBLE
64570: LESSEQUAL
64571: IFTRUE 64575
64573: GO 64607
64575: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_VAR 0 2
64585: PPUSH
64586: LD_VAR 0 3
64590: PPUSH
64591: LD_VAR 0 4
64595: PPUSH
64596: LD_VAR 0 5
64600: PPUSH
64601: CALL 23869 0 5
64605: GO 64684
64607: LD_INT 300
64609: DOUBLE
64610: GREATEREQUAL
64611: IFFALSE 64619
64613: LD_INT 399
64615: DOUBLE
64616: LESSEQUAL
64617: IFTRUE 64621
64619: GO 64683
64621: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64622: LD_VAR 0 1
64626: PPUSH
64627: LD_VAR 0 2
64631: PPUSH
64632: LD_VAR 0 3
64636: PPUSH
64637: LD_VAR 0 4
64641: PPUSH
64642: LD_VAR 0 5
64646: PPUSH
64647: LD_VAR 0 6
64651: PPUSH
64652: LD_VAR 0 7
64656: PPUSH
64657: LD_VAR 0 8
64661: PPUSH
64662: LD_VAR 0 9
64666: PPUSH
64667: LD_VAR 0 10
64671: PPUSH
64672: LD_VAR 0 11
64676: PPUSH
64677: CALL 21775 0 11
64681: GO 64684
64683: POP
// end ;
64684: PPOPN 11
64686: END
