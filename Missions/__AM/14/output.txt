// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10844 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 32132 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 36972 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 32132 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 32132 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 32132 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 36972 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 36972 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 66091 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 36972 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 71963 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 32195 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2250
1740: PUSH
1741: LD_INT 3500
1743: PUSH
1744: LD_INT 4500
1746: PUSH
1747: LD_INT 5600
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 36972 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 36972 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 66012 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_full ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 62
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 69823 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 34234 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 70304 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 70221 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 45568 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 72427 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27238 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 70221 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27358 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 71184 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 69823 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 69823 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27342 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 36972 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 71963 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 36972 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 71963 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 36972 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 71963 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: EQUAL
9957: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9958: LD_EXP 8
9962: PPUSH
9963: LD_STRING 14_JMM
9965: PPUSH
9966: CALL_OW 38
// if tick <= 50 50$00 then
9970: LD_OWVAR 1
9974: PUSH
9975: LD_INT 105000
9977: LESSEQUAL
9978: IFFALSE 9987
// SetAchievement ( ACH_ASPEED_14 ) ;
9980: LD_STRING ACH_ASPEED_14
9982: PPUSH
9983: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9987: LD_EXP 8
9991: PPUSH
9992: CALL_OW 310
9996: PUSH
9997: LD_EXP 8
10001: PPUSH
10002: CALL_OW 310
10006: PPUSH
10007: CALL_OW 247
10011: PUSH
10012: LD_INT 2
10014: EQUAL
10015: AND
10016: IFFALSE 10098
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_EXP 8
10027: PPUSH
10028: CALL_OW 310
10032: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 265
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 262
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: CALL_OW 264
10081: PUSH
10082: EMPTY
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: LD_STRING 14_JMMVeh_1
10093: PPUSH
10094: CALL_OW 39
// end ; if fastEnd then
10098: LD_VAR 0 1
10102: IFFALSE 10193
// begin AddMedal ( fastend , - 1 ) ;
10104: LD_STRING fastend
10106: PPUSH
10107: LD_INT 1
10109: NEG
10110: PPUSH
10111: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10115: LD_STRING fastend
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10126: LD_STRING fastend
10128: PPUSH
10129: LD_INT 1
10131: NEG
10132: PPUSH
10133: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10137: LD_EXP 2
10141: PPUSH
10142: LD_STRING 14_JMMGirl_1
10144: PPUSH
10145: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_STRING 14_JMMGirlStatus_1
10154: PPUSH
10155: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_STRING 14_KappaStatus_1
10164: PPUSH
10165: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10169: LD_STRING Eliminate
10171: PPUSH
10172: CALL_OW 102
// RewardPeople ( JMM ) ;
10176: LD_EXP 8
10180: PPUSH
10181: CALL_OW 43
// YouWin ;
10185: CALL_OW 103
// exit ;
10189: GO 10839
// end else
10191: GO 10732
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10193: LD_EXP 2
10197: PPUSH
10198: LD_STRING 14_JMMGirl_1
10200: PPUSH
10201: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10205: LD_VAR 0 7
10209: PPUSH
10210: LD_STRING 14_KappaStatus_1
10212: PPUSH
10213: CALL_OW 39
// case JMMGirl of 1 :
10217: LD_EXP 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10358
10230: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10231: LD_EXP 10
10235: PPUSH
10236: CALL_OW 302
10240: PUSH
10241: LD_EXP 10
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: LD_INT 1
10253: EQUAL
10254: AND
10255: PUSH
10256: LD_VAR 0 7
10260: PUSH
10261: LD_EXP 8
10265: PPUSH
10266: CALL_OW 310
10270: PPUSH
10271: LD_EXP 10
10275: PPUSH
10276: CALL_OW 310
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 10
10288: LESS
10289: OR
10290: AND
10291: IFFALSE 10335
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_STRING 14_JMMGirlStatus_1
10298: PPUSH
10299: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10303: LD_EXP 10
10307: PPUSH
10308: LD_STRING 14_Joan
10310: PPUSH
10311: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10315: LD_STRING protect
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 101
// m1 := true ;
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// end else
10333: GO 10356
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10335: LD_INT 0
10337: PPUSH
10338: LD_STRING 14_JMMGirlStatus_1
10340: PPUSH
10341: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10345: LD_STRING protect
10347: PPUSH
10348: LD_INT 1
10350: NEG
10351: PPUSH
10352: CALL_OW 101
// end ; end ; 2 :
10356: GO 10631
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10494
10366: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10367: LD_EXP 11
10371: PPUSH
10372: CALL_OW 302
10376: PUSH
10377: LD_EXP 11
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: AND
10391: PUSH
10392: LD_VAR 0 7
10396: PUSH
10397: LD_EXP 8
10401: PPUSH
10402: CALL_OW 310
10406: PPUSH
10407: LD_EXP 11
10411: PPUSH
10412: CALL_OW 310
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 10
10424: LESS
10425: OR
10426: AND
10427: IFFALSE 10471
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10429: LD_INT 1
10431: PPUSH
10432: LD_STRING 14_JMMGirlStatus_1
10434: PPUSH
10435: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10439: LD_EXP 11
10443: PPUSH
10444: LD_STRING 14_Lisa
10446: PPUSH
10447: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10451: LD_STRING protect
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 101
// m1 := true ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// end else
10469: GO 10492
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10471: LD_INT 0
10473: PPUSH
10474: LD_STRING 14_JMMGirlStatus_1
10476: PPUSH
10477: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10481: LD_STRING protect
10483: PPUSH
10484: LD_INT 2
10486: NEG
10487: PPUSH
10488: CALL_OW 101
// end ; end ; 3 :
10492: GO 10631
10494: LD_INT 3
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10630
10502: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10503: LD_EXP 12
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 12
10517: PPUSH
10518: CALL_OW 255
10522: PUSH
10523: LD_INT 1
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_VAR 0 7
10532: PUSH
10533: LD_EXP 8
10537: PPUSH
10538: CALL_OW 310
10542: PPUSH
10543: LD_EXP 12
10547: PPUSH
10548: CALL_OW 310
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 10
10560: LESS
10561: OR
10562: AND
10563: IFFALSE 10607
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10565: LD_INT 1
10567: PPUSH
10568: LD_STRING 14_JMMGirlStatus_1
10570: PPUSH
10571: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10575: LD_EXP 12
10579: PPUSH
10580: LD_STRING 14_Connie
10582: PPUSH
10583: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10587: LD_STRING protect
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// m1 := true ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// end else
10605: GO 10628
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_STRING 14_JMMGirlStatus_1
10612: PPUSH
10613: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10617: LD_STRING protect
10619: PPUSH
10620: LD_INT 3
10622: NEG
10623: PPUSH
10624: CALL_OW 101
// end ; end ; end ;
10628: GO 10631
10630: POP
// if amLaserCounter >= 2 then
10631: LD_EXP 7
10635: PUSH
10636: LD_INT 2
10638: GREATEREQUAL
10639: IFFALSE 10661
// begin AddMedal ( double , 1 ) ;
10641: LD_STRING double
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 101
// m2 := true ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end else
10659: GO 10695
// begin if amLaserCounter = 1 then
10661: LD_EXP 7
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10684
// AddMedal ( double , - 2 ) else
10671: LD_STRING double
10673: PPUSH
10674: LD_INT 2
10676: NEG
10677: PPUSH
10678: CALL_OW 101
10682: GO 10695
// AddMedal ( double , - 1 ) ;
10684: LD_STRING double
10686: PPUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: CALL_OW 101
// end ; if ruEliminated then
10695: LD_VAR 0 7
10699: IFFALSE 10721
// begin AddMedal ( base , 1 ) ;
10701: LD_STRING base
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 101
// m3 := true ;
10711: LD_ADDR_VAR 0 6
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// end else
10719: GO 10732
// AddMedal ( base , - 1 ) ;
10721: LD_STRING base
10723: PPUSH
10724: LD_INT 1
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10732: LD_VAR 0 4
10736: PUSH
10737: LD_VAR 0 5
10741: AND
10742: PUSH
10743: LD_VAR 0 6
10747: AND
10748: PUSH
10749: LD_OWVAR 67
10753: PUSH
10754: LD_INT 3
10756: GREATEREQUAL
10757: AND
10758: IFFALSE 10770
// SetAchievementEX ( ACH_AMER , 14 ) ;
10760: LD_STRING ACH_AMER
10762: PPUSH
10763: LD_INT 14
10765: PPUSH
10766: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10770: LD_STRING Eliminate
10772: PPUSH
10773: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: CALL_OW 43
// YouWin ;
10835: CALL_OW 103
// end ; end_of_file
10839: LD_VAR 0 2
10843: RET
// export function CreateNature ; var i , un ; begin
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// PrepareEnchidna ;
10849: CALL 66260 0 0
// for i := 1 to 3 do
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_INT 3
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10916
// begin un := CreateHuman ;
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: CALL_OW 44
10878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 9
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// end ;
10914: GO 10866
10916: POP
10917: POP
// PrepareHorse ;
10918: CALL 66420 0 0
// for i := 1 to 2 do
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 2
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10985
// begin un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 5
10958: PPUSH
10959: CALL_OW 12
10963: PPUSH
10964: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 9
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 49
// end ;
10983: GO 10935
10985: POP
10986: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11086
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL 66091 0 1
// un := CreateHuman ;
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 5
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: LD_INT 0
11079: PPUSH
11080: CALL_OW 49
// end ;
11084: GO 11021
11086: POP
11087: POP
// PrepareFish ;
11088: CALL 66340 0 0
// for i := 1 to 2 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 2
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11155
// begin un := CreateHuman ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: CALL_OW 44
11117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: LD_INT 5
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// end ;
11153: GO 11105
11155: POP
11156: POP
// PrepareFrog ;
11157: CALL 66300 0 0
// for i := 1 to 2 do
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_INT 2
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11224
// begin un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 5
11197: PPUSH
11198: CALL_OW 12
11202: PPUSH
11203: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 7
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL_OW 49
// end ;
11222: GO 11174
11224: POP
11225: POP
// PrepareMastodont ;
11226: CALL 66460 0 0
// un := CreateVehicle ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: CALL_OW 45
11239: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 166
11247: PPUSH
11248: LD_INT 134
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL 71963 0 5
// end ; end_of_file
11261: LD_VAR 0 1
11265: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11266: LD_INT 14
11268: PPUSH
11269: CALL_OW 435
11273: PUSH
11274: LD_INT 20
11276: LESS
11277: IFFALSE 11319
11279: GO 11281
11281: DISABLE
// begin enable ;
11282: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11283: LD_INT 35
11285: PPUSH
11286: LD_INT 735
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 5
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 14
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 55
// end ;
11319: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11320: LD_INT 13
11322: PPUSH
11323: CALL_OW 435
11327: PUSH
11328: LD_INT 30
11330: LESS
11331: IFFALSE 11373
11333: GO 11335
11335: DISABLE
// begin enable ;
11336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11337: LD_INT 35
11339: PPUSH
11340: LD_INT 735
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 13
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 55
// end ;
11373: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11374: LD_INT 13
11376: PPUSH
11377: CALL_OW 435
11381: PUSH
11382: LD_INT 30
11384: LESS
11385: IFFALSE 11418
11387: GO 11389
11389: DISABLE
// begin enable ;
11390: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 5
11396: PPUSH
11397: CALL_OW 12
11401: PPUSH
11402: LD_INT 133
11404: PPUSH
11405: LD_INT 122
11407: PPUSH
11408: LD_INT 20
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 56
// end ; end_of_file end_of_file
11418: END
// export globalGameSaveCounter ; every 0 0$1 do
11419: GO 11421
11421: DISABLE
// begin enable ;
11422: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11423: LD_STRING updateTimer(
11425: PUSH
11426: LD_OWVAR 1
11430: STR
11431: PUSH
11432: LD_STRING );
11434: STR
11435: PPUSH
11436: CALL_OW 559
// end ;
11440: END
// every 0 0$1 do
11441: GO 11443
11443: DISABLE
// begin globalGameSaveCounter := 0 ;
11444: LD_ADDR_EXP 21
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11452: LD_STRING setGameSaveCounter(0)
11454: PPUSH
11455: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11459: LD_STRING initStreamRollete();
11461: PPUSH
11462: CALL_OW 559
// InitStreamMode ;
11466: CALL 12809 0 0
// DefineStreamItems ( false ) ;
11470: LD_INT 0
11472: PPUSH
11473: CALL 13273 0 1
// end ;
11477: END
// export function SOS_MapStart ( ) ; begin
11478: LD_INT 0
11480: PPUSH
// if streamModeActive then
11481: LD_EXP 22
11485: IFFALSE 11494
// DefineStreamItems ( true ) ;
11487: LD_INT 1
11489: PPUSH
11490: CALL 13273 0 1
// UpdateLuaVariables ( ) ;
11494: CALL 11511 0 0
// UpdateFactoryWaypoints ( ) ;
11498: CALL 26142 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11502: CALL 26399 0 0
// end ;
11506: LD_VAR 0 1
11510: RET
// function UpdateLuaVariables ( ) ; begin
11511: LD_INT 0
11513: PPUSH
// if globalGameSaveCounter then
11514: LD_EXP 21
11518: IFFALSE 11552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11520: LD_ADDR_EXP 21
11524: PUSH
11525: LD_EXP 21
11529: PPUSH
11530: CALL 71184 0 1
11534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11535: LD_STRING setGameSaveCounter(
11537: PUSH
11538: LD_EXP 21
11542: STR
11543: PUSH
11544: LD_STRING )
11546: STR
11547: PPUSH
11548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11552: LD_STRING setGameDifficulty(
11554: PUSH
11555: LD_OWVAR 67
11559: STR
11560: PUSH
11561: LD_STRING )
11563: STR
11564: PPUSH
11565: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11569: LD_STRING displayDifficulty(
11571: PUSH
11572: LD_OWVAR 67
11576: STR
11577: PUSH
11578: LD_STRING )
11580: STR
11581: PPUSH
11582: CALL_OW 559
// end ;
11586: LD_VAR 0 1
11590: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11591: LD_INT 0
11593: PPUSH
// if p2 = stream_mode then
11594: LD_VAR 0 2
11598: PUSH
11599: LD_INT 100
11601: EQUAL
11602: IFFALSE 12605
// begin if not StreamModeActive then
11604: LD_EXP 22
11608: NOT
11609: IFFALSE 11619
// StreamModeActive := true ;
11611: LD_ADDR_EXP 22
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// if p3 = 0 then
11619: LD_VAR 0 3
11623: PUSH
11624: LD_INT 0
11626: EQUAL
11627: IFFALSE 11633
// InitStreamMode ;
11629: CALL 12809 0 0
// if p3 = 1 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 1
11640: EQUAL
11641: IFFALSE 11651
// sRocket := true ;
11643: LD_ADDR_EXP 27
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 2 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 2
11658: EQUAL
11659: IFFALSE 11669
// sSpeed := true ;
11661: LD_ADDR_EXP 26
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 3 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 3
11676: EQUAL
11677: IFFALSE 11687
// sEngine := true ;
11679: LD_ADDR_EXP 28
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 4 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 4
11694: EQUAL
11695: IFFALSE 11705
// sSpec := true ;
11697: LD_ADDR_EXP 25
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 5 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 5
11712: EQUAL
11713: IFFALSE 11723
// sLevel := true ;
11715: LD_ADDR_EXP 29
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 6 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 6
11730: EQUAL
11731: IFFALSE 11741
// sArmoury := true ;
11733: LD_ADDR_EXP 30
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 7 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 7
11748: EQUAL
11749: IFFALSE 11759
// sRadar := true ;
11751: LD_ADDR_EXP 31
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 8 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 8
11766: EQUAL
11767: IFFALSE 11777
// sBunker := true ;
11769: LD_ADDR_EXP 32
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 9 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 9
11784: EQUAL
11785: IFFALSE 11795
// sHack := true ;
11787: LD_ADDR_EXP 33
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 10 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 10
11802: EQUAL
11803: IFFALSE 11813
// sFire := true ;
11805: LD_ADDR_EXP 34
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 11 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 11
11820: EQUAL
11821: IFFALSE 11831
// sRefresh := true ;
11823: LD_ADDR_EXP 35
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 12 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 12
11838: EQUAL
11839: IFFALSE 11849
// sExp := true ;
11841: LD_ADDR_EXP 36
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 13 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 13
11856: EQUAL
11857: IFFALSE 11867
// sDepot := true ;
11859: LD_ADDR_EXP 37
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 14 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 14
11874: EQUAL
11875: IFFALSE 11885
// sFlag := true ;
11877: LD_ADDR_EXP 38
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 15 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 15
11892: EQUAL
11893: IFFALSE 11903
// sKamikadze := true ;
11895: LD_ADDR_EXP 46
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 16 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 16
11910: EQUAL
11911: IFFALSE 11921
// sTroll := true ;
11913: LD_ADDR_EXP 47
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 17 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 17
11928: EQUAL
11929: IFFALSE 11939
// sSlow := true ;
11931: LD_ADDR_EXP 48
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 18 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 18
11946: EQUAL
11947: IFFALSE 11957
// sLack := true ;
11949: LD_ADDR_EXP 49
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 19 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 19
11964: EQUAL
11965: IFFALSE 11975
// sTank := true ;
11967: LD_ADDR_EXP 51
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 20 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 20
11982: EQUAL
11983: IFFALSE 11993
// sRemote := true ;
11985: LD_ADDR_EXP 52
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 21 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 21
12000: EQUAL
12001: IFFALSE 12011
// sPowell := true ;
12003: LD_ADDR_EXP 53
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 22 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 22
12018: EQUAL
12019: IFFALSE 12029
// sTeleport := true ;
12021: LD_ADDR_EXP 56
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 23 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 23
12036: EQUAL
12037: IFFALSE 12047
// sOilTower := true ;
12039: LD_ADDR_EXP 58
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 24 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 24
12054: EQUAL
12055: IFFALSE 12065
// sShovel := true ;
12057: LD_ADDR_EXP 59
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 25 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 25
12072: EQUAL
12073: IFFALSE 12083
// sSheik := true ;
12075: LD_ADDR_EXP 60
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 26 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 26
12090: EQUAL
12091: IFFALSE 12101
// sEarthquake := true ;
12093: LD_ADDR_EXP 62
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 27 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 27
12108: EQUAL
12109: IFFALSE 12119
// sAI := true ;
12111: LD_ADDR_EXP 63
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 28 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 28
12126: EQUAL
12127: IFFALSE 12137
// sCargo := true ;
12129: LD_ADDR_EXP 66
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 29 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 29
12144: EQUAL
12145: IFFALSE 12155
// sDLaser := true ;
12147: LD_ADDR_EXP 67
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 30 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 30
12162: EQUAL
12163: IFFALSE 12173
// sExchange := true ;
12165: LD_ADDR_EXP 68
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 31 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 31
12180: EQUAL
12181: IFFALSE 12191
// sFac := true ;
12183: LD_ADDR_EXP 69
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 32 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 32
12198: EQUAL
12199: IFFALSE 12209
// sPower := true ;
12201: LD_ADDR_EXP 70
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 33 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 33
12216: EQUAL
12217: IFFALSE 12227
// sRandom := true ;
12219: LD_ADDR_EXP 71
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 34 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 34
12234: EQUAL
12235: IFFALSE 12245
// sShield := true ;
12237: LD_ADDR_EXP 72
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 35 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 35
12252: EQUAL
12253: IFFALSE 12263
// sTime := true ;
12255: LD_ADDR_EXP 73
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 36 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 36
12270: EQUAL
12271: IFFALSE 12281
// sTools := true ;
12273: LD_ADDR_EXP 74
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 101 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 101
12288: EQUAL
12289: IFFALSE 12299
// sSold := true ;
12291: LD_ADDR_EXP 39
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 102 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 102
12306: EQUAL
12307: IFFALSE 12317
// sDiff := true ;
12309: LD_ADDR_EXP 40
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 103 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 103
12324: EQUAL
12325: IFFALSE 12335
// sFog := true ;
12327: LD_ADDR_EXP 43
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 104 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 104
12342: EQUAL
12343: IFFALSE 12353
// sReset := true ;
12345: LD_ADDR_EXP 44
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 105 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 105
12360: EQUAL
12361: IFFALSE 12371
// sSun := true ;
12363: LD_ADDR_EXP 45
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 106 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 106
12378: EQUAL
12379: IFFALSE 12389
// sTiger := true ;
12381: LD_ADDR_EXP 41
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 107 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 107
12396: EQUAL
12397: IFFALSE 12407
// sBomb := true ;
12399: LD_ADDR_EXP 42
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 108 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 108
12414: EQUAL
12415: IFFALSE 12425
// sWound := true ;
12417: LD_ADDR_EXP 50
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 109 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 109
12432: EQUAL
12433: IFFALSE 12443
// sBetray := true ;
12435: LD_ADDR_EXP 54
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 110 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 110
12450: EQUAL
12451: IFFALSE 12461
// sContamin := true ;
12453: LD_ADDR_EXP 55
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 111 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 111
12468: EQUAL
12469: IFFALSE 12479
// sOil := true ;
12471: LD_ADDR_EXP 57
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 112 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 112
12486: EQUAL
12487: IFFALSE 12497
// sStu := true ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 113 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 113
12504: EQUAL
12505: IFFALSE 12515
// sBazooka := true ;
12507: LD_ADDR_EXP 64
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 114 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 114
12522: EQUAL
12523: IFFALSE 12533
// sMortar := true ;
12525: LD_ADDR_EXP 65
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 115 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 115
12540: EQUAL
12541: IFFALSE 12551
// sRanger := true ;
12543: LD_ADDR_EXP 75
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 116 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 116
12558: EQUAL
12559: IFFALSE 12569
// sComputer := true ;
12561: LD_ADDR_EXP 76
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 117 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 117
12576: EQUAL
12577: IFFALSE 12587
// s30 := true ;
12579: LD_ADDR_EXP 77
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 118 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 118
12594: EQUAL
12595: IFFALSE 12605
// s60 := true ;
12597: LD_ADDR_EXP 78
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// end ; if p2 = hack_mode then
12605: LD_VAR 0 2
12609: PUSH
12610: LD_INT 101
12612: EQUAL
12613: IFFALSE 12741
// begin case p3 of 1 :
12615: LD_VAR 0 3
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12635
12628: POP
// hHackUnlimitedResources ; 2 :
12629: CALL 24888 0 0
12633: GO 12741
12635: LD_INT 2
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12650
12643: POP
// hHackSetLevel10 ; 3 :
12644: CALL 25021 0 0
12648: GO 12741
12650: LD_INT 3
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12665
12658: POP
// hHackSetLevel10YourUnits ; 4 :
12659: CALL 25106 0 0
12663: GO 12741
12665: LD_INT 4
12667: DOUBLE
12668: EQUAL
12669: IFTRUE 12673
12671: GO 12680
12673: POP
// hHackInvincible ; 5 :
12674: CALL 25554 0 0
12678: GO 12741
12680: LD_INT 5
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12695
12688: POP
// hHackInvisible ; 6 :
12689: CALL 25665 0 0
12693: GO 12741
12695: LD_INT 6
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12710
12703: POP
// hHackChangeYourSide ; 7 :
12704: CALL 25722 0 0
12708: GO 12741
12710: LD_INT 7
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12725
12718: POP
// hHackChangeUnitSide ; 8 :
12719: CALL 25764 0 0
12723: GO 12741
12725: LD_INT 8
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12740
12733: POP
// hHackFog ; end ;
12734: CALL 25865 0 0
12738: GO 12741
12740: POP
// end ; if p2 = game_save_mode then
12741: LD_VAR 0 2
12745: PUSH
12746: LD_INT 102
12748: EQUAL
12749: IFFALSE 12804
// begin if p3 = 1 then
12751: LD_VAR 0 3
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: IFFALSE 12771
// globalGameSaveCounter := p4 ;
12761: LD_ADDR_EXP 21
12765: PUSH
12766: LD_VAR 0 4
12770: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12771: LD_VAR 0 3
12775: PUSH
12776: LD_INT 2
12778: EQUAL
12779: PUSH
12780: LD_EXP 21
12784: AND
12785: IFFALSE 12804
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12787: LD_STRING setGameSaveCounter(
12789: PUSH
12790: LD_EXP 21
12794: STR
12795: PUSH
12796: LD_STRING )
12798: STR
12799: PPUSH
12800: CALL_OW 559
// end ; end ;
12804: LD_VAR 0 7
12808: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12809: LD_INT 0
12811: PPUSH
// streamModeActive := false ;
12812: LD_ADDR_EXP 22
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// normalCounter := 36 ;
12820: LD_ADDR_EXP 23
12824: PUSH
12825: LD_INT 36
12827: ST_TO_ADDR
// hardcoreCounter := 18 ;
12828: LD_ADDR_EXP 24
12832: PUSH
12833: LD_INT 18
12835: ST_TO_ADDR
// sRocket := false ;
12836: LD_ADDR_EXP 27
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sSpeed := false ;
12844: LD_ADDR_EXP 26
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sEngine := false ;
12852: LD_ADDR_EXP 28
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sSpec := false ;
12860: LD_ADDR_EXP 25
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sLevel := false ;
12868: LD_ADDR_EXP 29
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sArmoury := false ;
12876: LD_ADDR_EXP 30
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sRadar := false ;
12884: LD_ADDR_EXP 31
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sBunker := false ;
12892: LD_ADDR_EXP 32
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sHack := false ;
12900: LD_ADDR_EXP 33
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sFire := false ;
12908: LD_ADDR_EXP 34
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sRefresh := false ;
12916: LD_ADDR_EXP 35
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sExp := false ;
12924: LD_ADDR_EXP 36
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sDepot := false ;
12932: LD_ADDR_EXP 37
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sFlag := false ;
12940: LD_ADDR_EXP 38
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sKamikadze := false ;
12948: LD_ADDR_EXP 46
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sTroll := false ;
12956: LD_ADDR_EXP 47
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sSlow := false ;
12964: LD_ADDR_EXP 48
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sLack := false ;
12972: LD_ADDR_EXP 49
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sTank := false ;
12980: LD_ADDR_EXP 51
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sRemote := false ;
12988: LD_ADDR_EXP 52
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sPowell := false ;
12996: LD_ADDR_EXP 53
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sTeleport := false ;
13004: LD_ADDR_EXP 56
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sOilTower := false ;
13012: LD_ADDR_EXP 58
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sShovel := false ;
13020: LD_ADDR_EXP 59
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sSheik := false ;
13028: LD_ADDR_EXP 60
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sEarthquake := false ;
13036: LD_ADDR_EXP 62
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sAI := false ;
13044: LD_ADDR_EXP 63
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sCargo := false ;
13052: LD_ADDR_EXP 66
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sDLaser := false ;
13060: LD_ADDR_EXP 67
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sExchange := false ;
13068: LD_ADDR_EXP 68
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sFac := false ;
13076: LD_ADDR_EXP 69
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sPower := false ;
13084: LD_ADDR_EXP 70
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// sRandom := false ;
13092: LD_ADDR_EXP 71
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// sShield := false ;
13100: LD_ADDR_EXP 72
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// sTime := false ;
13108: LD_ADDR_EXP 73
13112: PUSH
13113: LD_INT 0
13115: ST_TO_ADDR
// sTools := false ;
13116: LD_ADDR_EXP 74
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// sSold := false ;
13124: LD_ADDR_EXP 39
13128: PUSH
13129: LD_INT 0
13131: ST_TO_ADDR
// sDiff := false ;
13132: LD_ADDR_EXP 40
13136: PUSH
13137: LD_INT 0
13139: ST_TO_ADDR
// sFog := false ;
13140: LD_ADDR_EXP 43
13144: PUSH
13145: LD_INT 0
13147: ST_TO_ADDR
// sReset := false ;
13148: LD_ADDR_EXP 44
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// sSun := false ;
13156: LD_ADDR_EXP 45
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// sTiger := false ;
13164: LD_ADDR_EXP 41
13168: PUSH
13169: LD_INT 0
13171: ST_TO_ADDR
// sBomb := false ;
13172: LD_ADDR_EXP 42
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// sWound := false ;
13180: LD_ADDR_EXP 50
13184: PUSH
13185: LD_INT 0
13187: ST_TO_ADDR
// sBetray := false ;
13188: LD_ADDR_EXP 54
13192: PUSH
13193: LD_INT 0
13195: ST_TO_ADDR
// sContamin := false ;
13196: LD_ADDR_EXP 55
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// sOil := false ;
13204: LD_ADDR_EXP 57
13208: PUSH
13209: LD_INT 0
13211: ST_TO_ADDR
// sStu := false ;
13212: LD_ADDR_EXP 61
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// sBazooka := false ;
13220: LD_ADDR_EXP 64
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// sMortar := false ;
13228: LD_ADDR_EXP 65
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// sRanger := false ;
13236: LD_ADDR_EXP 75
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// sComputer := false ;
13244: LD_ADDR_EXP 76
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// s30 := false ;
13252: LD_ADDR_EXP 77
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// s60 := false ;
13260: LD_ADDR_EXP 78
13264: PUSH
13265: LD_INT 0
13267: ST_TO_ADDR
// end ;
13268: LD_VAR 0 1
13272: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
// result := [ ] ;
13282: LD_ADDR_VAR 0 2
13286: PUSH
13287: EMPTY
13288: ST_TO_ADDR
// if campaign_id = 1 then
13289: LD_OWVAR 69
13293: PUSH
13294: LD_INT 1
13296: EQUAL
13297: IFFALSE 16463
// begin case mission_number of 1 :
13299: LD_OWVAR 70
13303: PUSH
13304: LD_INT 1
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13388
13312: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13313: LD_ADDR_VAR 0 2
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 4
13323: PUSH
13324: LD_INT 11
13326: PUSH
13327: LD_INT 12
13329: PUSH
13330: LD_INT 15
13332: PUSH
13333: LD_INT 16
13335: PUSH
13336: LD_INT 22
13338: PUSH
13339: LD_INT 23
13341: PUSH
13342: LD_INT 26
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 101
13358: PUSH
13359: LD_INT 102
13361: PUSH
13362: LD_INT 106
13364: PUSH
13365: LD_INT 116
13367: PUSH
13368: LD_INT 117
13370: PUSH
13371: LD_INT 118
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: ST_TO_ADDR
13386: GO 16461
13388: LD_INT 2
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13480
13396: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 11
13410: PUSH
13411: LD_INT 12
13413: PUSH
13414: LD_INT 15
13416: PUSH
13417: LD_INT 16
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 26
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 101
13442: PUSH
13443: LD_INT 102
13445: PUSH
13446: LD_INT 105
13448: PUSH
13449: LD_INT 106
13451: PUSH
13452: LD_INT 108
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: ST_TO_ADDR
13478: GO 16461
13480: LD_INT 3
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13576
13488: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13489: LD_ADDR_VAR 0 2
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: LD_INT 4
13499: PUSH
13500: LD_INT 5
13502: PUSH
13503: LD_INT 11
13505: PUSH
13506: LD_INT 12
13508: PUSH
13509: LD_INT 15
13511: PUSH
13512: LD_INT 16
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_INT 26
13520: PUSH
13521: LD_INT 36
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 101
13538: PUSH
13539: LD_INT 102
13541: PUSH
13542: LD_INT 105
13544: PUSH
13545: LD_INT 106
13547: PUSH
13548: LD_INT 108
13550: PUSH
13551: LD_INT 116
13553: PUSH
13554: LD_INT 117
13556: PUSH
13557: LD_INT 118
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: ST_TO_ADDR
13574: GO 16461
13576: LD_INT 4
13578: DOUBLE
13579: EQUAL
13580: IFTRUE 13584
13582: GO 13680
13584: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 4
13595: PUSH
13596: LD_INT 5
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: LD_INT 11
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 15
13610: PUSH
13611: LD_INT 16
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 23
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 36
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 101
13642: PUSH
13643: LD_INT 102
13645: PUSH
13646: LD_INT 105
13648: PUSH
13649: LD_INT 106
13651: PUSH
13652: LD_INT 108
13654: PUSH
13655: LD_INT 116
13657: PUSH
13658: LD_INT 117
13660: PUSH
13661: LD_INT 118
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: ST_TO_ADDR
13678: GO 16461
13680: LD_INT 5
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13800
13688: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_INT 2
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: LD_INT 5
13702: PUSH
13703: LD_INT 6
13705: PUSH
13706: LD_INT 8
13708: PUSH
13709: LD_INT 11
13711: PUSH
13712: LD_INT 12
13714: PUSH
13715: LD_INT 15
13717: PUSH
13718: LD_INT 16
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_INT 23
13726: PUSH
13727: LD_INT 25
13729: PUSH
13730: LD_INT 26
13732: PUSH
13733: LD_INT 36
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 101
13754: PUSH
13755: LD_INT 102
13757: PUSH
13758: LD_INT 105
13760: PUSH
13761: LD_INT 106
13763: PUSH
13764: LD_INT 108
13766: PUSH
13767: LD_INT 109
13769: PUSH
13770: LD_INT 112
13772: PUSH
13773: LD_INT 116
13775: PUSH
13776: LD_INT 117
13778: PUSH
13779: LD_INT 118
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 16461
13800: LD_INT 6
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13940
13808: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 5
13822: PUSH
13823: LD_INT 6
13825: PUSH
13826: LD_INT 8
13828: PUSH
13829: LD_INT 11
13831: PUSH
13832: LD_INT 12
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 20
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 22
13849: PUSH
13850: LD_INT 23
13852: PUSH
13853: LD_INT 25
13855: PUSH
13856: LD_INT 26
13858: PUSH
13859: LD_INT 30
13861: PUSH
13862: LD_INT 31
13864: PUSH
13865: LD_INT 32
13867: PUSH
13868: LD_INT 36
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 101
13894: PUSH
13895: LD_INT 102
13897: PUSH
13898: LD_INT 105
13900: PUSH
13901: LD_INT 106
13903: PUSH
13904: LD_INT 108
13906: PUSH
13907: LD_INT 109
13909: PUSH
13910: LD_INT 112
13912: PUSH
13913: LD_INT 116
13915: PUSH
13916: LD_INT 117
13918: PUSH
13919: LD_INT 118
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: ST_TO_ADDR
13938: GO 16461
13940: LD_INT 7
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 14060
13948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: LD_INT 7
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 15
13974: PUSH
13975: LD_INT 16
13977: PUSH
13978: LD_INT 20
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_INT 23
13989: PUSH
13990: LD_INT 25
13992: PUSH
13993: LD_INT 26
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 101
14014: PUSH
14015: LD_INT 102
14017: PUSH
14018: LD_INT 103
14020: PUSH
14021: LD_INT 105
14023: PUSH
14024: LD_INT 106
14026: PUSH
14027: LD_INT 108
14029: PUSH
14030: LD_INT 112
14032: PUSH
14033: LD_INT 116
14035: PUSH
14036: LD_INT 117
14038: PUSH
14039: LD_INT 118
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: ST_TO_ADDR
14058: GO 16461
14060: LD_INT 8
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14208
14068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 4
14079: PUSH
14080: LD_INT 5
14082: PUSH
14083: LD_INT 6
14085: PUSH
14086: LD_INT 7
14088: PUSH
14089: LD_INT 8
14091: PUSH
14092: LD_INT 11
14094: PUSH
14095: LD_INT 12
14097: PUSH
14098: LD_INT 15
14100: PUSH
14101: LD_INT 16
14103: PUSH
14104: LD_INT 20
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_INT 23
14115: PUSH
14116: LD_INT 25
14118: PUSH
14119: LD_INT 26
14121: PUSH
14122: LD_INT 30
14124: PUSH
14125: LD_INT 31
14127: PUSH
14128: LD_INT 32
14130: PUSH
14131: LD_INT 36
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 101
14158: PUSH
14159: LD_INT 102
14161: PUSH
14162: LD_INT 103
14164: PUSH
14165: LD_INT 105
14167: PUSH
14168: LD_INT 106
14170: PUSH
14171: LD_INT 108
14173: PUSH
14174: LD_INT 109
14176: PUSH
14177: LD_INT 112
14179: PUSH
14180: LD_INT 116
14182: PUSH
14183: LD_INT 117
14185: PUSH
14186: LD_INT 118
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: ST_TO_ADDR
14206: GO 16461
14208: LD_INT 9
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14364
14216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14217: LD_ADDR_VAR 0 2
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 4
14227: PUSH
14228: LD_INT 5
14230: PUSH
14231: LD_INT 6
14233: PUSH
14234: LD_INT 7
14236: PUSH
14237: LD_INT 8
14239: PUSH
14240: LD_INT 11
14242: PUSH
14243: LD_INT 12
14245: PUSH
14246: LD_INT 15
14248: PUSH
14249: LD_INT 16
14251: PUSH
14252: LD_INT 20
14254: PUSH
14255: LD_INT 21
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 23
14263: PUSH
14264: LD_INT 25
14266: PUSH
14267: LD_INT 26
14269: PUSH
14270: LD_INT 28
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 31
14278: PUSH
14279: LD_INT 32
14281: PUSH
14282: LD_INT 36
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 101
14310: PUSH
14311: LD_INT 102
14313: PUSH
14314: LD_INT 103
14316: PUSH
14317: LD_INT 105
14319: PUSH
14320: LD_INT 106
14322: PUSH
14323: LD_INT 108
14325: PUSH
14326: LD_INT 109
14328: PUSH
14329: LD_INT 112
14331: PUSH
14332: LD_INT 114
14334: PUSH
14335: LD_INT 116
14337: PUSH
14338: LD_INT 117
14340: PUSH
14341: LD_INT 118
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: ST_TO_ADDR
14362: GO 16461
14364: LD_INT 10
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14568
14372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14373: LD_ADDR_VAR 0 2
14377: PUSH
14378: LD_INT 2
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: LD_INT 6
14389: PUSH
14390: LD_INT 7
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: LD_INT 9
14398: PUSH
14399: LD_INT 10
14401: PUSH
14402: LD_INT 11
14404: PUSH
14405: LD_INT 12
14407: PUSH
14408: LD_INT 13
14410: PUSH
14411: LD_INT 14
14413: PUSH
14414: LD_INT 15
14416: PUSH
14417: LD_INT 16
14419: PUSH
14420: LD_INT 17
14422: PUSH
14423: LD_INT 18
14425: PUSH
14426: LD_INT 19
14428: PUSH
14429: LD_INT 20
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 25
14446: PUSH
14447: LD_INT 26
14449: PUSH
14450: LD_INT 28
14452: PUSH
14453: LD_INT 30
14455: PUSH
14456: LD_INT 31
14458: PUSH
14459: LD_INT 32
14461: PUSH
14462: LD_INT 36
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 101
14498: PUSH
14499: LD_INT 102
14501: PUSH
14502: LD_INT 103
14504: PUSH
14505: LD_INT 104
14507: PUSH
14508: LD_INT 105
14510: PUSH
14511: LD_INT 106
14513: PUSH
14514: LD_INT 107
14516: PUSH
14517: LD_INT 108
14519: PUSH
14520: LD_INT 109
14522: PUSH
14523: LD_INT 110
14525: PUSH
14526: LD_INT 111
14528: PUSH
14529: LD_INT 112
14531: PUSH
14532: LD_INT 114
14534: PUSH
14535: LD_INT 116
14537: PUSH
14538: LD_INT 117
14540: PUSH
14541: LD_INT 118
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 16461
14568: LD_INT 11
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14780
14576: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 6
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 8
14602: PUSH
14603: LD_INT 9
14605: PUSH
14606: LD_INT 10
14608: PUSH
14609: LD_INT 11
14611: PUSH
14612: LD_INT 12
14614: PUSH
14615: LD_INT 13
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 28
14659: PUSH
14660: LD_INT 30
14662: PUSH
14663: LD_INT 31
14665: PUSH
14666: LD_INT 32
14668: PUSH
14669: LD_INT 34
14671: PUSH
14672: LD_INT 36
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 101
14710: PUSH
14711: LD_INT 102
14713: PUSH
14714: LD_INT 103
14716: PUSH
14717: LD_INT 104
14719: PUSH
14720: LD_INT 105
14722: PUSH
14723: LD_INT 106
14725: PUSH
14726: LD_INT 107
14728: PUSH
14729: LD_INT 108
14731: PUSH
14732: LD_INT 109
14734: PUSH
14735: LD_INT 110
14737: PUSH
14738: LD_INT 111
14740: PUSH
14741: LD_INT 112
14743: PUSH
14744: LD_INT 114
14746: PUSH
14747: LD_INT 116
14749: PUSH
14750: LD_INT 117
14752: PUSH
14753: LD_INT 118
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: ST_TO_ADDR
14778: GO 16461
14780: LD_INT 12
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 15008
14788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14789: LD_ADDR_VAR 0 2
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: LD_INT 4
14805: PUSH
14806: LD_INT 5
14808: PUSH
14809: LD_INT 6
14811: PUSH
14812: LD_INT 7
14814: PUSH
14815: LD_INT 8
14817: PUSH
14818: LD_INT 9
14820: PUSH
14821: LD_INT 10
14823: PUSH
14824: LD_INT 11
14826: PUSH
14827: LD_INT 12
14829: PUSH
14830: LD_INT 13
14832: PUSH
14833: LD_INT 14
14835: PUSH
14836: LD_INT 15
14838: PUSH
14839: LD_INT 16
14841: PUSH
14842: LD_INT 17
14844: PUSH
14845: LD_INT 18
14847: PUSH
14848: LD_INT 19
14850: PUSH
14851: LD_INT 20
14853: PUSH
14854: LD_INT 21
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 23
14862: PUSH
14863: LD_INT 24
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 26
14871: PUSH
14872: LD_INT 27
14874: PUSH
14875: LD_INT 28
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 36
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 101
14934: PUSH
14935: LD_INT 102
14937: PUSH
14938: LD_INT 103
14940: PUSH
14941: LD_INT 104
14943: PUSH
14944: LD_INT 105
14946: PUSH
14947: LD_INT 106
14949: PUSH
14950: LD_INT 107
14952: PUSH
14953: LD_INT 108
14955: PUSH
14956: LD_INT 109
14958: PUSH
14959: LD_INT 110
14961: PUSH
14962: LD_INT 111
14964: PUSH
14965: LD_INT 112
14967: PUSH
14968: LD_INT 113
14970: PUSH
14971: LD_INT 114
14973: PUSH
14974: LD_INT 116
14976: PUSH
14977: LD_INT 117
14979: PUSH
14980: LD_INT 118
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 16461
15008: LD_INT 13
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15224
15016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: LD_INT 1
15024: PUSH
15025: LD_INT 2
15027: PUSH
15028: LD_INT 3
15030: PUSH
15031: LD_INT 4
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: LD_INT 9
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 14
15054: PUSH
15055: LD_INT 15
15057: PUSH
15058: LD_INT 16
15060: PUSH
15061: LD_INT 17
15063: PUSH
15064: LD_INT 18
15066: PUSH
15067: LD_INT 19
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 24
15084: PUSH
15085: LD_INT 25
15087: PUSH
15088: LD_INT 26
15090: PUSH
15091: LD_INT 27
15093: PUSH
15094: LD_INT 28
15096: PUSH
15097: LD_INT 30
15099: PUSH
15100: LD_INT 31
15102: PUSH
15103: LD_INT 32
15105: PUSH
15106: LD_INT 33
15108: PUSH
15109: LD_INT 34
15111: PUSH
15112: LD_INT 36
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 101
15150: PUSH
15151: LD_INT 102
15153: PUSH
15154: LD_INT 103
15156: PUSH
15157: LD_INT 104
15159: PUSH
15160: LD_INT 105
15162: PUSH
15163: LD_INT 106
15165: PUSH
15166: LD_INT 107
15168: PUSH
15169: LD_INT 108
15171: PUSH
15172: LD_INT 109
15174: PUSH
15175: LD_INT 110
15177: PUSH
15178: LD_INT 111
15180: PUSH
15181: LD_INT 112
15183: PUSH
15184: LD_INT 113
15186: PUSH
15187: LD_INT 114
15189: PUSH
15190: LD_INT 116
15192: PUSH
15193: LD_INT 117
15195: PUSH
15196: LD_INT 118
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: ST_TO_ADDR
15222: GO 16461
15224: LD_INT 14
15226: DOUBLE
15227: EQUAL
15228: IFTRUE 15232
15230: GO 15456
15232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15233: LD_ADDR_VAR 0 2
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: LD_INT 3
15246: PUSH
15247: LD_INT 4
15249: PUSH
15250: LD_INT 5
15252: PUSH
15253: LD_INT 6
15255: PUSH
15256: LD_INT 7
15258: PUSH
15259: LD_INT 8
15261: PUSH
15262: LD_INT 9
15264: PUSH
15265: LD_INT 10
15267: PUSH
15268: LD_INT 11
15270: PUSH
15271: LD_INT 12
15273: PUSH
15274: LD_INT 13
15276: PUSH
15277: LD_INT 14
15279: PUSH
15280: LD_INT 15
15282: PUSH
15283: LD_INT 16
15285: PUSH
15286: LD_INT 17
15288: PUSH
15289: LD_INT 18
15291: PUSH
15292: LD_INT 19
15294: PUSH
15295: LD_INT 20
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_INT 23
15306: PUSH
15307: LD_INT 24
15309: PUSH
15310: LD_INT 25
15312: PUSH
15313: LD_INT 26
15315: PUSH
15316: LD_INT 27
15318: PUSH
15319: LD_INT 28
15321: PUSH
15322: LD_INT 29
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 31
15330: PUSH
15331: LD_INT 32
15333: PUSH
15334: LD_INT 33
15336: PUSH
15337: LD_INT 34
15339: PUSH
15340: LD_INT 36
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 101
15382: PUSH
15383: LD_INT 102
15385: PUSH
15386: LD_INT 103
15388: PUSH
15389: LD_INT 104
15391: PUSH
15392: LD_INT 105
15394: PUSH
15395: LD_INT 106
15397: PUSH
15398: LD_INT 107
15400: PUSH
15401: LD_INT 108
15403: PUSH
15404: LD_INT 109
15406: PUSH
15407: LD_INT 110
15409: PUSH
15410: LD_INT 111
15412: PUSH
15413: LD_INT 112
15415: PUSH
15416: LD_INT 113
15418: PUSH
15419: LD_INT 114
15421: PUSH
15422: LD_INT 116
15424: PUSH
15425: LD_INT 117
15427: PUSH
15428: LD_INT 118
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: ST_TO_ADDR
15454: GO 16461
15456: LD_INT 15
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15688
15464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: LD_INT 4
15481: PUSH
15482: LD_INT 5
15484: PUSH
15485: LD_INT 6
15487: PUSH
15488: LD_INT 7
15490: PUSH
15491: LD_INT 8
15493: PUSH
15494: LD_INT 9
15496: PUSH
15497: LD_INT 10
15499: PUSH
15500: LD_INT 11
15502: PUSH
15503: LD_INT 12
15505: PUSH
15506: LD_INT 13
15508: PUSH
15509: LD_INT 14
15511: PUSH
15512: LD_INT 15
15514: PUSH
15515: LD_INT 16
15517: PUSH
15518: LD_INT 17
15520: PUSH
15521: LD_INT 18
15523: PUSH
15524: LD_INT 19
15526: PUSH
15527: LD_INT 20
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_INT 23
15538: PUSH
15539: LD_INT 24
15541: PUSH
15542: LD_INT 25
15544: PUSH
15545: LD_INT 26
15547: PUSH
15548: LD_INT 27
15550: PUSH
15551: LD_INT 28
15553: PUSH
15554: LD_INT 29
15556: PUSH
15557: LD_INT 30
15559: PUSH
15560: LD_INT 31
15562: PUSH
15563: LD_INT 32
15565: PUSH
15566: LD_INT 33
15568: PUSH
15569: LD_INT 34
15571: PUSH
15572: LD_INT 36
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 101
15614: PUSH
15615: LD_INT 102
15617: PUSH
15618: LD_INT 103
15620: PUSH
15621: LD_INT 104
15623: PUSH
15624: LD_INT 105
15626: PUSH
15627: LD_INT 106
15629: PUSH
15630: LD_INT 107
15632: PUSH
15633: LD_INT 108
15635: PUSH
15636: LD_INT 109
15638: PUSH
15639: LD_INT 110
15641: PUSH
15642: LD_INT 111
15644: PUSH
15645: LD_INT 112
15647: PUSH
15648: LD_INT 113
15650: PUSH
15651: LD_INT 114
15653: PUSH
15654: LD_INT 116
15656: PUSH
15657: LD_INT 117
15659: PUSH
15660: LD_INT 118
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 16461
15688: LD_INT 16
15690: DOUBLE
15691: EQUAL
15692: IFTRUE 15696
15694: GO 15832
15696: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_INT 2
15704: PUSH
15705: LD_INT 4
15707: PUSH
15708: LD_INT 5
15710: PUSH
15711: LD_INT 7
15713: PUSH
15714: LD_INT 11
15716: PUSH
15717: LD_INT 12
15719: PUSH
15720: LD_INT 15
15722: PUSH
15723: LD_INT 16
15725: PUSH
15726: LD_INT 20
15728: PUSH
15729: LD_INT 21
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_INT 23
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 26
15743: PUSH
15744: LD_INT 30
15746: PUSH
15747: LD_INT 31
15749: PUSH
15750: LD_INT 32
15752: PUSH
15753: LD_INT 33
15755: PUSH
15756: LD_INT 34
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 101
15782: PUSH
15783: LD_INT 102
15785: PUSH
15786: LD_INT 103
15788: PUSH
15789: LD_INT 106
15791: PUSH
15792: LD_INT 108
15794: PUSH
15795: LD_INT 112
15797: PUSH
15798: LD_INT 113
15800: PUSH
15801: LD_INT 114
15803: PUSH
15804: LD_INT 116
15806: PUSH
15807: LD_INT 117
15809: PUSH
15810: LD_INT 118
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 16461
15832: LD_INT 17
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 16064
15840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: LD_INT 3
15854: PUSH
15855: LD_INT 4
15857: PUSH
15858: LD_INT 5
15860: PUSH
15861: LD_INT 6
15863: PUSH
15864: LD_INT 7
15866: PUSH
15867: LD_INT 8
15869: PUSH
15870: LD_INT 9
15872: PUSH
15873: LD_INT 10
15875: PUSH
15876: LD_INT 11
15878: PUSH
15879: LD_INT 12
15881: PUSH
15882: LD_INT 13
15884: PUSH
15885: LD_INT 14
15887: PUSH
15888: LD_INT 15
15890: PUSH
15891: LD_INT 16
15893: PUSH
15894: LD_INT 17
15896: PUSH
15897: LD_INT 18
15899: PUSH
15900: LD_INT 19
15902: PUSH
15903: LD_INT 20
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 23
15914: PUSH
15915: LD_INT 24
15917: PUSH
15918: LD_INT 25
15920: PUSH
15921: LD_INT 26
15923: PUSH
15924: LD_INT 27
15926: PUSH
15927: LD_INT 28
15929: PUSH
15930: LD_INT 29
15932: PUSH
15933: LD_INT 30
15935: PUSH
15936: LD_INT 31
15938: PUSH
15939: LD_INT 32
15941: PUSH
15942: LD_INT 33
15944: PUSH
15945: LD_INT 34
15947: PUSH
15948: LD_INT 36
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 101
15990: PUSH
15991: LD_INT 102
15993: PUSH
15994: LD_INT 103
15996: PUSH
15997: LD_INT 104
15999: PUSH
16000: LD_INT 105
16002: PUSH
16003: LD_INT 106
16005: PUSH
16006: LD_INT 107
16008: PUSH
16009: LD_INT 108
16011: PUSH
16012: LD_INT 109
16014: PUSH
16015: LD_INT 110
16017: PUSH
16018: LD_INT 111
16020: PUSH
16021: LD_INT 112
16023: PUSH
16024: LD_INT 113
16026: PUSH
16027: LD_INT 114
16029: PUSH
16030: LD_INT 116
16032: PUSH
16033: LD_INT 117
16035: PUSH
16036: LD_INT 118
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: ST_TO_ADDR
16062: GO 16461
16064: LD_INT 18
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16220
16072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: LD_INT 5
16086: PUSH
16087: LD_INT 7
16089: PUSH
16090: LD_INT 11
16092: PUSH
16093: LD_INT 12
16095: PUSH
16096: LD_INT 15
16098: PUSH
16099: LD_INT 16
16101: PUSH
16102: LD_INT 20
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 25
16116: PUSH
16117: LD_INT 26
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 101
16166: PUSH
16167: LD_INT 102
16169: PUSH
16170: LD_INT 103
16172: PUSH
16173: LD_INT 106
16175: PUSH
16176: LD_INT 108
16178: PUSH
16179: LD_INT 112
16181: PUSH
16182: LD_INT 113
16184: PUSH
16185: LD_INT 114
16187: PUSH
16188: LD_INT 115
16190: PUSH
16191: LD_INT 116
16193: PUSH
16194: LD_INT 117
16196: PUSH
16197: LD_INT 118
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: ST_TO_ADDR
16218: GO 16461
16220: LD_INT 19
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16460
16228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16229: LD_ADDR_VAR 0 2
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 3
16242: PUSH
16243: LD_INT 4
16245: PUSH
16246: LD_INT 5
16248: PUSH
16249: LD_INT 6
16251: PUSH
16252: LD_INT 7
16254: PUSH
16255: LD_INT 8
16257: PUSH
16258: LD_INT 9
16260: PUSH
16261: LD_INT 10
16263: PUSH
16264: LD_INT 11
16266: PUSH
16267: LD_INT 12
16269: PUSH
16270: LD_INT 13
16272: PUSH
16273: LD_INT 14
16275: PUSH
16276: LD_INT 15
16278: PUSH
16279: LD_INT 16
16281: PUSH
16282: LD_INT 17
16284: PUSH
16285: LD_INT 18
16287: PUSH
16288: LD_INT 19
16290: PUSH
16291: LD_INT 20
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 22
16299: PUSH
16300: LD_INT 23
16302: PUSH
16303: LD_INT 24
16305: PUSH
16306: LD_INT 25
16308: PUSH
16309: LD_INT 26
16311: PUSH
16312: LD_INT 27
16314: PUSH
16315: LD_INT 28
16317: PUSH
16318: LD_INT 29
16320: PUSH
16321: LD_INT 30
16323: PUSH
16324: LD_INT 31
16326: PUSH
16327: LD_INT 32
16329: PUSH
16330: LD_INT 33
16332: PUSH
16333: LD_INT 34
16335: PUSH
16336: LD_INT 35
16338: PUSH
16339: LD_INT 36
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 101
16382: PUSH
16383: LD_INT 102
16385: PUSH
16386: LD_INT 103
16388: PUSH
16389: LD_INT 104
16391: PUSH
16392: LD_INT 105
16394: PUSH
16395: LD_INT 106
16397: PUSH
16398: LD_INT 107
16400: PUSH
16401: LD_INT 108
16403: PUSH
16404: LD_INT 109
16406: PUSH
16407: LD_INT 110
16409: PUSH
16410: LD_INT 111
16412: PUSH
16413: LD_INT 112
16415: PUSH
16416: LD_INT 113
16418: PUSH
16419: LD_INT 114
16421: PUSH
16422: LD_INT 115
16424: PUSH
16425: LD_INT 116
16427: PUSH
16428: LD_INT 117
16430: PUSH
16431: LD_INT 118
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: ST_TO_ADDR
16458: GO 16461
16460: POP
// end else
16461: GO 16692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: LD_INT 4
16479: PUSH
16480: LD_INT 5
16482: PUSH
16483: LD_INT 6
16485: PUSH
16486: LD_INT 7
16488: PUSH
16489: LD_INT 8
16491: PUSH
16492: LD_INT 9
16494: PUSH
16495: LD_INT 10
16497: PUSH
16498: LD_INT 11
16500: PUSH
16501: LD_INT 12
16503: PUSH
16504: LD_INT 13
16506: PUSH
16507: LD_INT 14
16509: PUSH
16510: LD_INT 15
16512: PUSH
16513: LD_INT 16
16515: PUSH
16516: LD_INT 17
16518: PUSH
16519: LD_INT 18
16521: PUSH
16522: LD_INT 19
16524: PUSH
16525: LD_INT 20
16527: PUSH
16528: LD_INT 21
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_INT 23
16536: PUSH
16537: LD_INT 24
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 27
16548: PUSH
16549: LD_INT 28
16551: PUSH
16552: LD_INT 29
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 31
16560: PUSH
16561: LD_INT 32
16563: PUSH
16564: LD_INT 33
16566: PUSH
16567: LD_INT 34
16569: PUSH
16570: LD_INT 35
16572: PUSH
16573: LD_INT 36
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 101
16616: PUSH
16617: LD_INT 102
16619: PUSH
16620: LD_INT 103
16622: PUSH
16623: LD_INT 104
16625: PUSH
16626: LD_INT 105
16628: PUSH
16629: LD_INT 106
16631: PUSH
16632: LD_INT 107
16634: PUSH
16635: LD_INT 108
16637: PUSH
16638: LD_INT 109
16640: PUSH
16641: LD_INT 110
16643: PUSH
16644: LD_INT 111
16646: PUSH
16647: LD_INT 112
16649: PUSH
16650: LD_INT 113
16652: PUSH
16653: LD_INT 114
16655: PUSH
16656: LD_INT 115
16658: PUSH
16659: LD_INT 116
16661: PUSH
16662: LD_INT 117
16664: PUSH
16665: LD_INT 118
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// if result then
16692: LD_VAR 0 2
16696: IFFALSE 17482
// begin normal :=  ;
16698: LD_ADDR_VAR 0 5
16702: PUSH
16703: LD_STRING 
16705: ST_TO_ADDR
// hardcore :=  ;
16706: LD_ADDR_VAR 0 6
16710: PUSH
16711: LD_STRING 
16713: ST_TO_ADDR
// active :=  ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_STRING 
16721: ST_TO_ADDR
// for i = 1 to normalCounter do
16722: LD_ADDR_VAR 0 8
16726: PUSH
16727: DOUBLE
16728: LD_INT 1
16730: DEC
16731: ST_TO_ADDR
16732: LD_EXP 23
16736: PUSH
16737: FOR_TO
16738: IFFALSE 16839
// begin tmp := 0 ;
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_STRING 0
16747: ST_TO_ADDR
// if result [ 1 ] then
16748: LD_VAR 0 2
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: IFFALSE 16821
// if result [ 1 ] [ 1 ] = i then
16758: LD_VAR 0 2
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PUSH
16767: LD_INT 1
16769: ARRAY
16770: PUSH
16771: LD_VAR 0 8
16775: EQUAL
16776: IFFALSE 16821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16778: LD_ADDR_VAR 0 2
16782: PUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_VAR 0 2
16795: PUSH
16796: LD_INT 1
16798: ARRAY
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 3
16807: PPUSH
16808: CALL_OW 1
16812: ST_TO_ADDR
// tmp := 1 ;
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_STRING 1
16820: ST_TO_ADDR
// end ; normal := normal & tmp ;
16821: LD_ADDR_VAR 0 5
16825: PUSH
16826: LD_VAR 0 5
16830: PUSH
16831: LD_VAR 0 3
16835: STR
16836: ST_TO_ADDR
// end ;
16837: GO 16737
16839: POP
16840: POP
// for i = 1 to hardcoreCounter do
16841: LD_ADDR_VAR 0 8
16845: PUSH
16846: DOUBLE
16847: LD_INT 1
16849: DEC
16850: ST_TO_ADDR
16851: LD_EXP 24
16855: PUSH
16856: FOR_TO
16857: IFFALSE 16962
// begin tmp := 0 ;
16859: LD_ADDR_VAR 0 3
16863: PUSH
16864: LD_STRING 0
16866: ST_TO_ADDR
// if result [ 2 ] then
16867: LD_VAR 0 2
16871: PUSH
16872: LD_INT 2
16874: ARRAY
16875: IFFALSE 16944
// if result [ 2 ] [ 1 ] = 100 + i then
16877: LD_VAR 0 2
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: PUSH
16890: LD_INT 100
16892: PUSH
16893: LD_VAR 0 8
16897: PLUS
16898: EQUAL
16899: IFFALSE 16944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_VAR 0 2
16910: PPUSH
16911: LD_INT 2
16913: PPUSH
16914: LD_VAR 0 2
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 3
16930: PPUSH
16931: CALL_OW 1
16935: ST_TO_ADDR
// tmp := 1 ;
16936: LD_ADDR_VAR 0 3
16940: PUSH
16941: LD_STRING 1
16943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16944: LD_ADDR_VAR 0 6
16948: PUSH
16949: LD_VAR 0 6
16953: PUSH
16954: LD_VAR 0 3
16958: STR
16959: ST_TO_ADDR
// end ;
16960: GO 16856
16962: POP
16963: POP
// if isGameLoad then
16964: LD_VAR 0 1
16968: IFFALSE 17443
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16970: LD_ADDR_VAR 0 4
16974: PUSH
16975: LD_EXP 27
16979: PUSH
16980: LD_EXP 26
16984: PUSH
16985: LD_EXP 28
16989: PUSH
16990: LD_EXP 25
16994: PUSH
16995: LD_EXP 29
16999: PUSH
17000: LD_EXP 30
17004: PUSH
17005: LD_EXP 31
17009: PUSH
17010: LD_EXP 32
17014: PUSH
17015: LD_EXP 33
17019: PUSH
17020: LD_EXP 34
17024: PUSH
17025: LD_EXP 35
17029: PUSH
17030: LD_EXP 36
17034: PUSH
17035: LD_EXP 37
17039: PUSH
17040: LD_EXP 38
17044: PUSH
17045: LD_EXP 46
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_EXP 48
17059: PUSH
17060: LD_EXP 49
17064: PUSH
17065: LD_EXP 51
17069: PUSH
17070: LD_EXP 52
17074: PUSH
17075: LD_EXP 53
17079: PUSH
17080: LD_EXP 56
17084: PUSH
17085: LD_EXP 58
17089: PUSH
17090: LD_EXP 59
17094: PUSH
17095: LD_EXP 60
17099: PUSH
17100: LD_EXP 62
17104: PUSH
17105: LD_EXP 63
17109: PUSH
17110: LD_EXP 66
17114: PUSH
17115: LD_EXP 67
17119: PUSH
17120: LD_EXP 68
17124: PUSH
17125: LD_EXP 69
17129: PUSH
17130: LD_EXP 70
17134: PUSH
17135: LD_EXP 71
17139: PUSH
17140: LD_EXP 72
17144: PUSH
17145: LD_EXP 73
17149: PUSH
17150: LD_EXP 74
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 43
17169: PUSH
17170: LD_EXP 44
17174: PUSH
17175: LD_EXP 45
17179: PUSH
17180: LD_EXP 41
17184: PUSH
17185: LD_EXP 42
17189: PUSH
17190: LD_EXP 50
17194: PUSH
17195: LD_EXP 54
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 57
17209: PUSH
17210: LD_EXP 61
17214: PUSH
17215: LD_EXP 64
17219: PUSH
17220: LD_EXP 65
17224: PUSH
17225: LD_EXP 75
17229: PUSH
17230: LD_EXP 76
17234: PUSH
17235: LD_EXP 77
17239: PUSH
17240: LD_EXP 78
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: ST_TO_ADDR
// tmp :=  ;
17301: LD_ADDR_VAR 0 3
17305: PUSH
17306: LD_STRING 
17308: ST_TO_ADDR
// for i = 1 to normalCounter do
17309: LD_ADDR_VAR 0 8
17313: PUSH
17314: DOUBLE
17315: LD_INT 1
17317: DEC
17318: ST_TO_ADDR
17319: LD_EXP 23
17323: PUSH
17324: FOR_TO
17325: IFFALSE 17361
// begin if flags [ i ] then
17327: LD_VAR 0 4
17331: PUSH
17332: LD_VAR 0 8
17336: ARRAY
17337: IFFALSE 17359
// tmp := tmp & i & ; ;
17339: LD_ADDR_VAR 0 3
17343: PUSH
17344: LD_VAR 0 3
17348: PUSH
17349: LD_VAR 0 8
17353: STR
17354: PUSH
17355: LD_STRING ;
17357: STR
17358: ST_TO_ADDR
// end ;
17359: GO 17324
17361: POP
17362: POP
// for i = 1 to hardcoreCounter do
17363: LD_ADDR_VAR 0 8
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_EXP 24
17377: PUSH
17378: FOR_TO
17379: IFFALSE 17425
// begin if flags [ normalCounter + i ] then
17381: LD_VAR 0 4
17385: PUSH
17386: LD_EXP 23
17390: PUSH
17391: LD_VAR 0 8
17395: PLUS
17396: ARRAY
17397: IFFALSE 17423
// tmp := tmp & ( 100 + i ) & ; ;
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: LD_VAR 0 3
17408: PUSH
17409: LD_INT 100
17411: PUSH
17412: LD_VAR 0 8
17416: PLUS
17417: STR
17418: PUSH
17419: LD_STRING ;
17421: STR
17422: ST_TO_ADDR
// end ;
17423: GO 17378
17425: POP
17426: POP
// if tmp then
17427: LD_VAR 0 3
17431: IFFALSE 17443
// active := tmp ;
17433: LD_ADDR_VAR 0 7
17437: PUSH
17438: LD_VAR 0 3
17442: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17443: LD_STRING getStreamItemsFromMission("
17445: PUSH
17446: LD_VAR 0 5
17450: STR
17451: PUSH
17452: LD_STRING ","
17454: STR
17455: PUSH
17456: LD_VAR 0 6
17460: STR
17461: PUSH
17462: LD_STRING ","
17464: STR
17465: PUSH
17466: LD_VAR 0 7
17470: STR
17471: PUSH
17472: LD_STRING ")
17474: STR
17475: PPUSH
17476: CALL_OW 559
// end else
17480: GO 17489
// ToLua ( getStreamItemsFromMission("","","") ) ;
17482: LD_STRING getStreamItemsFromMission("","","")
17484: PPUSH
17485: CALL_OW 559
// end ;
17489: LD_VAR 0 2
17493: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17494: LD_EXP 22
17498: PUSH
17499: LD_EXP 27
17503: AND
17504: IFFALSE 17628
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin enable ;
17513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 7
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 34
17546: PUSH
17547: LD_INT 45
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 34
17556: PUSH
17557: LD_INT 28
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 34
17566: PUSH
17567: LD_INT 47
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 2
17594: NOT
17595: IFFALSE 17599
// exit ;
17597: GO 17628
// for i in tmp do
17599: LD_ADDR_VAR 0 1
17603: PUSH
17604: LD_VAR 0 2
17608: PUSH
17609: FOR_IN
17610: IFFALSE 17626
// begin SetLives ( i , 0 ) ;
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 234
// end ;
17624: GO 17609
17626: POP
17627: POP
// end ;
17628: PPOPN 2
17630: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17631: LD_EXP 22
17635: PUSH
17636: LD_EXP 28
17640: AND
17641: IFFALSE 17725
17643: GO 17645
17645: DISABLE
17646: LD_INT 0
17648: PPUSH
17649: PPUSH
// begin enable ;
17650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: LD_INT 22
17658: PUSH
17659: LD_OWVAR 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 32
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 69
17686: ST_TO_ADDR
// if not tmp then
17687: LD_VAR 0 2
17691: NOT
17692: IFFALSE 17696
// exit ;
17694: GO 17725
// for i in tmp do
17696: LD_ADDR_VAR 0 1
17700: PUSH
17701: LD_VAR 0 2
17705: PUSH
17706: FOR_IN
17707: IFFALSE 17723
// begin SetLives ( i , 0 ) ;
17709: LD_VAR 0 1
17713: PPUSH
17714: LD_INT 0
17716: PPUSH
17717: CALL_OW 234
// end ;
17721: GO 17706
17723: POP
17724: POP
// end ;
17725: PPOPN 2
17727: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17728: LD_EXP 22
17732: PUSH
17733: LD_EXP 25
17737: AND
17738: IFFALSE 17831
17740: GO 17742
17742: DISABLE
17743: LD_INT 0
17745: PPUSH
// begin enable ;
17746: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_OWVAR 2
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 25
17769: PUSH
17770: LD_INT 5
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 25
17779: PUSH
17780: LD_INT 9
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 25
17789: PUSH
17790: LD_INT 8
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 69
17811: PUSH
17812: FOR_IN
17813: IFFALSE 17829
// begin SetClass ( i , 1 ) ;
17815: LD_VAR 0 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: CALL_OW 336
// end ;
17827: GO 17812
17829: POP
17830: POP
// end ;
17831: PPOPN 1
17833: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17834: LD_EXP 22
17838: PUSH
17839: LD_EXP 26
17843: AND
17844: PUSH
17845: LD_OWVAR 65
17849: PUSH
17850: LD_INT 7
17852: LESS
17853: AND
17854: IFFALSE 17868
17856: GO 17858
17858: DISABLE
// begin enable ;
17859: ENABLE
// game_speed := 7 ;
17860: LD_ADDR_OWVAR 65
17864: PUSH
17865: LD_INT 7
17867: ST_TO_ADDR
// end ;
17868: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17869: LD_EXP 22
17873: PUSH
17874: LD_EXP 29
17878: AND
17879: IFFALSE 18081
17881: GO 17883
17883: DISABLE
17884: LD_INT 0
17886: PPUSH
17887: PPUSH
17888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 81
17896: PUSH
17897: LD_OWVAR 2
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: ST_TO_ADDR
// if not tmp then
17925: LD_VAR 0 3
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 18081
// if tmp > 5 then
17934: LD_VAR 0 3
17938: PUSH
17939: LD_INT 5
17941: GREATER
17942: IFFALSE 17954
// k := 5 else
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_INT 5
17951: ST_TO_ADDR
17952: GO 17964
// k := tmp ;
17954: LD_ADDR_VAR 0 2
17958: PUSH
17959: LD_VAR 0 3
17963: ST_TO_ADDR
// for i := 1 to k do
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: DOUBLE
17970: LD_INT 1
17972: DEC
17973: ST_TO_ADDR
17974: LD_VAR 0 2
17978: PUSH
17979: FOR_TO
17980: IFFALSE 18079
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17982: LD_VAR 0 3
17986: PUSH
17987: LD_VAR 0 1
17991: ARRAY
17992: PPUSH
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 4
18000: MOD
18001: PUSH
18002: LD_INT 1
18004: PLUS
18005: PPUSH
18006: CALL_OW 259
18010: PUSH
18011: LD_INT 10
18013: LESS
18014: IFFALSE 18077
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18016: LD_VAR 0 3
18020: PUSH
18021: LD_VAR 0 1
18025: ARRAY
18026: PPUSH
18027: LD_VAR 0 1
18031: PUSH
18032: LD_INT 4
18034: MOD
18035: PUSH
18036: LD_INT 1
18038: PLUS
18039: PPUSH
18040: LD_VAR 0 3
18044: PUSH
18045: LD_VAR 0 1
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 1
18055: PUSH
18056: LD_INT 4
18058: MOD
18059: PUSH
18060: LD_INT 1
18062: PLUS
18063: PPUSH
18064: CALL_OW 259
18068: PUSH
18069: LD_INT 1
18071: PLUS
18072: PPUSH
18073: CALL_OW 237
18077: GO 17979
18079: POP
18080: POP
// end ;
18081: PPOPN 3
18083: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18084: LD_EXP 22
18088: PUSH
18089: LD_EXP 30
18093: AND
18094: IFFALSE 18114
18096: GO 18098
18098: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18099: LD_INT 4
18101: PPUSH
18102: LD_OWVAR 2
18106: PPUSH
18107: LD_INT 0
18109: PPUSH
18110: CALL_OW 324
18114: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18115: LD_EXP 22
18119: PUSH
18120: LD_EXP 59
18124: AND
18125: IFFALSE 18145
18127: GO 18129
18129: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18130: LD_INT 19
18132: PPUSH
18133: LD_OWVAR 2
18137: PPUSH
18138: LD_INT 0
18140: PPUSH
18141: CALL_OW 324
18145: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18146: LD_EXP 22
18150: PUSH
18151: LD_EXP 31
18155: AND
18156: IFFALSE 18258
18158: GO 18160
18160: DISABLE
18161: LD_INT 0
18163: PPUSH
18164: PPUSH
// begin enable ;
18165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 34
18188: PUSH
18189: LD_INT 11
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 34
18198: PUSH
18199: LD_INT 30
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: ST_TO_ADDR
// if not tmp then
18220: LD_VAR 0 2
18224: NOT
18225: IFFALSE 18229
// exit ;
18227: GO 18258
// for i in tmp do
18229: LD_ADDR_VAR 0 1
18233: PUSH
18234: LD_VAR 0 2
18238: PUSH
18239: FOR_IN
18240: IFFALSE 18256
// begin SetLives ( i , 0 ) ;
18242: LD_VAR 0 1
18246: PPUSH
18247: LD_INT 0
18249: PPUSH
18250: CALL_OW 234
// end ;
18254: GO 18239
18256: POP
18257: POP
// end ;
18258: PPOPN 2
18260: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18261: LD_EXP 22
18265: PUSH
18266: LD_EXP 32
18270: AND
18271: IFFALSE 18291
18273: GO 18275
18275: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18276: LD_INT 32
18278: PPUSH
18279: LD_OWVAR 2
18283: PPUSH
18284: LD_INT 0
18286: PPUSH
18287: CALL_OW 324
18291: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18292: LD_EXP 22
18296: PUSH
18297: LD_EXP 33
18301: AND
18302: IFFALSE 18483
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 33
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 2
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18483
// side := 0 ;
18357: LD_ADDR_VAR 0 3
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// for i := 1 to 8 do
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: DOUBLE
18371: LD_INT 1
18373: DEC
18374: ST_TO_ADDR
18375: LD_INT 8
18377: PUSH
18378: FOR_TO
18379: IFFALSE 18427
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18381: LD_OWVAR 2
18385: PUSH
18386: LD_VAR 0 1
18390: NONEQUAL
18391: PUSH
18392: LD_OWVAR 2
18396: PPUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 81
18406: PUSH
18407: LD_INT 2
18409: EQUAL
18410: AND
18411: IFFALSE 18425
// begin side := i ;
18413: LD_ADDR_VAR 0 3
18417: PUSH
18418: LD_VAR 0 1
18422: ST_TO_ADDR
// break ;
18423: GO 18427
// end ;
18425: GO 18378
18427: POP
18428: POP
// if not side then
18429: LD_VAR 0 3
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18483
// for i := 1 to tmp do
18438: LD_ADDR_VAR 0 1
18442: PUSH
18443: DOUBLE
18444: LD_INT 1
18446: DEC
18447: ST_TO_ADDR
18448: LD_VAR 0 2
18452: PUSH
18453: FOR_TO
18454: IFFALSE 18481
// if Prob ( 60 ) then
18456: LD_INT 60
18458: PPUSH
18459: CALL_OW 13
18463: IFFALSE 18479
// SetSide ( i , side ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: CALL_OW 235
18479: GO 18453
18481: POP
18482: POP
// end ;
18483: PPOPN 3
18485: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18486: LD_EXP 22
18490: PUSH
18491: LD_EXP 35
18495: AND
18496: IFFALSE 18615
18498: GO 18500
18500: DISABLE
18501: LD_INT 0
18503: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_INT 22
18511: PUSH
18512: LD_OWVAR 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 21
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 3
18533: PUSH
18534: LD_INT 23
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PPUSH
18553: CALL_OW 69
18557: PUSH
18558: FOR_IN
18559: IFFALSE 18613
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 257
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: LD_INT 4
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: IN
18589: IFFALSE 18611
// SetClass ( un , rand ( 1 , 4 ) ) ;
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_INT 4
18601: PPUSH
18602: CALL_OW 12
18606: PPUSH
18607: CALL_OW 336
18611: GO 18558
18613: POP
18614: POP
// end ;
18615: PPOPN 1
18617: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18618: LD_EXP 22
18622: PUSH
18623: LD_EXP 34
18627: AND
18628: IFFALSE 18707
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: ST_TO_ADDR
// if not tmp then
18672: LD_VAR 0 1
18676: NOT
18677: IFFALSE 18681
// exit ;
18679: GO 18707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 100
18702: PPUSH
18703: CALL_OW 234
// end ;
18707: PPOPN 1
18709: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18710: LD_EXP 22
18714: PUSH
18715: LD_EXP 36
18719: AND
18720: IFFALSE 18818
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18728: LD_ADDR_VAR 0 1
18732: PUSH
18733: LD_INT 22
18735: PUSH
18736: LD_OWVAR 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 69
18763: ST_TO_ADDR
// if not tmp then
18764: LD_VAR 0 1
18768: NOT
18769: IFFALSE 18773
// exit ;
18771: GO 18818
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18773: LD_VAR 0 1
18777: PUSH
18778: LD_INT 1
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 12
18790: ARRAY
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_INT 4
18797: PPUSH
18798: CALL_OW 12
18802: PPUSH
18803: LD_INT 3000
18805: PPUSH
18806: LD_INT 9000
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: CALL_OW 492
// end ;
18818: PPOPN 1
18820: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18821: LD_EXP 22
18825: PUSH
18826: LD_EXP 37
18830: AND
18831: IFFALSE 18851
18833: GO 18835
18835: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18836: LD_INT 1
18838: PPUSH
18839: LD_OWVAR 2
18843: PPUSH
18844: LD_INT 0
18846: PPUSH
18847: CALL_OW 324
18851: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18852: LD_EXP 22
18856: PUSH
18857: LD_EXP 38
18861: AND
18862: IFFALSE 18945
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 21
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 2
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18945
// for i in tmp do
18916: LD_ADDR_VAR 0 1
18920: PUSH
18921: LD_VAR 0 2
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18943
// SetBLevel ( i , 10 ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: LD_INT 10
18936: PPUSH
18937: CALL_OW 241
18941: GO 18926
18943: POP
18944: POP
// end ;
18945: PPOPN 2
18947: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18948: LD_EXP 22
18952: PUSH
18953: LD_EXP 39
18957: AND
18958: IFFALSE 19069
18960: GO 18962
18962: DISABLE
18963: LD_INT 0
18965: PPUSH
18966: PPUSH
18967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18968: LD_ADDR_VAR 0 3
18972: PUSH
18973: LD_INT 22
18975: PUSH
18976: LD_OWVAR 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 25
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 69
19003: ST_TO_ADDR
// if not tmp then
19004: LD_VAR 0 3
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19069
// un := tmp [ rand ( 1 , tmp ) ] ;
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 12
19035: ARRAY
19036: ST_TO_ADDR
// if Crawls ( un ) then
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 318
19046: IFFALSE 19057
// ComWalk ( un ) ;
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19057: LD_VAR 0 2
19061: PPUSH
19062: LD_INT 5
19064: PPUSH
19065: CALL_OW 336
// end ;
19069: PPOPN 3
19071: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19072: LD_EXP 22
19076: PUSH
19077: LD_EXP 40
19081: AND
19082: PUSH
19083: LD_OWVAR 67
19087: PUSH
19088: LD_INT 4
19090: LESS
19091: AND
19092: IFFALSE 19111
19094: GO 19096
19096: DISABLE
// begin Difficulty := Difficulty + 1 ;
19097: LD_ADDR_OWVAR 67
19101: PUSH
19102: LD_OWVAR 67
19106: PUSH
19107: LD_INT 1
19109: PLUS
19110: ST_TO_ADDR
// end ;
19111: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19112: LD_EXP 22
19116: PUSH
19117: LD_EXP 41
19121: AND
19122: IFFALSE 19225
19124: GO 19126
19126: DISABLE
19127: LD_INT 0
19129: PPUSH
// begin for i := 1 to 5 do
19130: LD_ADDR_VAR 0 1
19134: PUSH
19135: DOUBLE
19136: LD_INT 1
19138: DEC
19139: ST_TO_ADDR
19140: LD_INT 5
19142: PUSH
19143: FOR_TO
19144: IFFALSE 19223
// begin uc_nation := nation_nature ;
19146: LD_ADDR_OWVAR 21
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// uc_side := 0 ;
19154: LD_ADDR_OWVAR 20
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19162: LD_ADDR_OWVAR 29
19166: PUSH
19167: LD_INT 12
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: ST_TO_ADDR
// hc_agressivity := 20 ;
19177: LD_ADDR_OWVAR 35
19181: PUSH
19182: LD_INT 20
19184: ST_TO_ADDR
// hc_class := class_tiger ;
19185: LD_ADDR_OWVAR 28
19189: PUSH
19190: LD_INT 14
19192: ST_TO_ADDR
// hc_gallery :=  ;
19193: LD_ADDR_OWVAR 33
19197: PUSH
19198: LD_STRING 
19200: ST_TO_ADDR
// hc_name :=  ;
19201: LD_ADDR_OWVAR 26
19205: PUSH
19206: LD_STRING 
19208: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19209: CALL_OW 44
19213: PPUSH
19214: LD_INT 0
19216: PPUSH
19217: CALL_OW 51
// end ;
19221: GO 19143
19223: POP
19224: POP
// end ;
19225: PPOPN 1
19227: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19228: LD_EXP 22
19232: PUSH
19233: LD_EXP 42
19237: AND
19238: IFFALSE 19247
19240: GO 19242
19242: DISABLE
// StreamSibBomb ;
19243: CALL 19248 0 0
19247: END
// export function StreamSibBomb ; var i , x , y ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
// result := false ;
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// for i := 1 to 16 do
19262: LD_ADDR_VAR 0 2
19266: PUSH
19267: DOUBLE
19268: LD_INT 1
19270: DEC
19271: ST_TO_ADDR
19272: LD_INT 16
19274: PUSH
19275: FOR_TO
19276: IFFALSE 19475
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_INT 10
19285: PUSH
19286: LD_INT 20
19288: PUSH
19289: LD_INT 30
19291: PUSH
19292: LD_INT 40
19294: PUSH
19295: LD_INT 50
19297: PUSH
19298: LD_INT 60
19300: PUSH
19301: LD_INT 70
19303: PUSH
19304: LD_INT 80
19306: PUSH
19307: LD_INT 90
19309: PUSH
19310: LD_INT 100
19312: PUSH
19313: LD_INT 110
19315: PUSH
19316: LD_INT 120
19318: PUSH
19319: LD_INT 130
19321: PUSH
19322: LD_INT 140
19324: PUSH
19325: LD_INT 150
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_INT 15
19350: PPUSH
19351: CALL_OW 12
19355: ARRAY
19356: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19357: LD_ADDR_VAR 0 4
19361: PUSH
19362: LD_INT 10
19364: PUSH
19365: LD_INT 20
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 40
19373: PUSH
19374: LD_INT 50
19376: PUSH
19377: LD_INT 60
19379: PUSH
19380: LD_INT 70
19382: PUSH
19383: LD_INT 80
19385: PUSH
19386: LD_INT 90
19388: PUSH
19389: LD_INT 100
19391: PUSH
19392: LD_INT 110
19394: PUSH
19395: LD_INT 120
19397: PUSH
19398: LD_INT 130
19400: PUSH
19401: LD_INT 140
19403: PUSH
19404: LD_INT 150
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PPUSH
19427: LD_INT 15
19429: PPUSH
19430: CALL_OW 12
19434: ARRAY
19435: ST_TO_ADDR
// if ValidHex ( x , y ) then
19436: LD_VAR 0 3
19440: PPUSH
19441: LD_VAR 0 4
19445: PPUSH
19446: CALL_OW 488
19450: IFFALSE 19473
// begin result := [ x , y ] ;
19452: LD_ADDR_VAR 0 1
19456: PUSH
19457: LD_VAR 0 3
19461: PUSH
19462: LD_VAR 0 4
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// break ;
19471: GO 19475
// end ; end ;
19473: GO 19275
19475: POP
19476: POP
// if result then
19477: LD_VAR 0 1
19481: IFFALSE 19541
// begin ToLua ( playSibBomb() ) ;
19483: LD_STRING playSibBomb()
19485: PPUSH
19486: CALL_OW 559
// wait ( 0 0$14 ) ;
19490: LD_INT 490
19492: PPUSH
19493: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19497: LD_VAR 0 1
19501: PUSH
19502: LD_INT 1
19504: ARRAY
19505: PPUSH
19506: LD_VAR 0 1
19510: PUSH
19511: LD_INT 2
19513: ARRAY
19514: PPUSH
19515: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19519: LD_VAR 0 1
19523: PUSH
19524: LD_INT 1
19526: ARRAY
19527: PPUSH
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 2
19535: ARRAY
19536: PPUSH
19537: CALL_OW 429
// end ; end ;
19541: LD_VAR 0 1
19545: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19546: LD_EXP 22
19550: PUSH
19551: LD_EXP 44
19555: AND
19556: IFFALSE 19568
19558: GO 19560
19560: DISABLE
// YouLost (  ) ;
19561: LD_STRING 
19563: PPUSH
19564: CALL_OW 104
19568: END
// every 0 0$1 trigger StreamModeActive and sFog do
19569: LD_EXP 22
19573: PUSH
19574: LD_EXP 43
19578: AND
19579: IFFALSE 19593
19581: GO 19583
19583: DISABLE
// FogOff ( your_side ) ;
19584: LD_OWVAR 2
19588: PPUSH
19589: CALL_OW 344
19593: END
// every 0 0$1 trigger StreamModeActive and sSun do
19594: LD_EXP 22
19598: PUSH
19599: LD_EXP 45
19603: AND
19604: IFFALSE 19632
19606: GO 19608
19608: DISABLE
// begin solar_recharge_percent := 0 ;
19609: LD_ADDR_OWVAR 79
19613: PUSH
19614: LD_INT 0
19616: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19617: LD_INT 10500
19619: PPUSH
19620: CALL_OW 67
// solar_recharge_percent := 100 ;
19624: LD_ADDR_OWVAR 79
19628: PUSH
19629: LD_INT 100
19631: ST_TO_ADDR
// end ;
19632: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19633: LD_EXP 22
19637: PUSH
19638: LD_EXP 46
19642: AND
19643: IFFALSE 19882
19645: GO 19647
19647: DISABLE
19648: LD_INT 0
19650: PPUSH
19651: PPUSH
19652: PPUSH
// begin tmp := [ ] ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: EMPTY
19659: ST_TO_ADDR
// for i := 1 to 6 do
19660: LD_ADDR_VAR 0 1
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_INT 6
19672: PUSH
19673: FOR_TO
19674: IFFALSE 19779
// begin uc_nation := nation_nature ;
19676: LD_ADDR_OWVAR 21
19680: PUSH
19681: LD_INT 0
19683: ST_TO_ADDR
// uc_side := 0 ;
19684: LD_ADDR_OWVAR 20
19688: PUSH
19689: LD_INT 0
19691: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19692: LD_ADDR_OWVAR 29
19696: PUSH
19697: LD_INT 12
19699: PUSH
19700: LD_INT 12
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: ST_TO_ADDR
// hc_agressivity := 20 ;
19707: LD_ADDR_OWVAR 35
19711: PUSH
19712: LD_INT 20
19714: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19715: LD_ADDR_OWVAR 28
19719: PUSH
19720: LD_INT 17
19722: ST_TO_ADDR
// hc_gallery :=  ;
19723: LD_ADDR_OWVAR 33
19727: PUSH
19728: LD_STRING 
19730: ST_TO_ADDR
// hc_name :=  ;
19731: LD_ADDR_OWVAR 26
19735: PUSH
19736: LD_STRING 
19738: ST_TO_ADDR
// un := CreateHuman ;
19739: LD_ADDR_VAR 0 2
19743: PUSH
19744: CALL_OW 44
19748: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_INT 1
19756: PPUSH
19757: CALL_OW 51
// tmp := tmp ^ un ;
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: LD_VAR 0 3
19770: PUSH
19771: LD_VAR 0 2
19775: ADD
19776: ST_TO_ADDR
// end ;
19777: GO 19673
19779: POP
19780: POP
// repeat wait ( 0 0$1 ) ;
19781: LD_INT 35
19783: PPUSH
19784: CALL_OW 67
// for un in tmp do
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_VAR 0 3
19797: PUSH
19798: FOR_IN
19799: IFFALSE 19873
// begin if IsDead ( un ) then
19801: LD_VAR 0 2
19805: PPUSH
19806: CALL_OW 301
19810: IFFALSE 19830
// begin tmp := tmp diff un ;
19812: LD_ADDR_VAR 0 3
19816: PUSH
19817: LD_VAR 0 3
19821: PUSH
19822: LD_VAR 0 2
19826: DIFF
19827: ST_TO_ADDR
// continue ;
19828: GO 19798
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_INT 3
19837: PUSH
19838: LD_INT 22
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PPUSH
19852: CALL_OW 69
19856: PPUSH
19857: LD_VAR 0 2
19861: PPUSH
19862: CALL_OW 74
19866: PPUSH
19867: CALL_OW 115
// end ;
19871: GO 19798
19873: POP
19874: POP
// until not tmp ;
19875: LD_VAR 0 3
19879: NOT
19880: IFFALSE 19781
// end ;
19882: PPOPN 3
19884: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19885: LD_EXP 22
19889: PUSH
19890: LD_EXP 47
19894: AND
19895: IFFALSE 19949
19897: GO 19899
19899: DISABLE
// begin ToLua ( displayTroll(); ) ;
19900: LD_STRING displayTroll();
19902: PPUSH
19903: CALL_OW 559
// wait ( 3 3$00 ) ;
19907: LD_INT 6300
19909: PPUSH
19910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19914: LD_STRING hideTroll();
19916: PPUSH
19917: CALL_OW 559
// wait ( 1 1$00 ) ;
19921: LD_INT 2100
19923: PPUSH
19924: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19928: LD_STRING displayTroll();
19930: PPUSH
19931: CALL_OW 559
// wait ( 1 1$00 ) ;
19935: LD_INT 2100
19937: PPUSH
19938: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19942: LD_STRING hideTroll();
19944: PPUSH
19945: CALL_OW 559
// end ;
19949: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19950: LD_EXP 22
19954: PUSH
19955: LD_EXP 48
19959: AND
19960: IFFALSE 20023
19962: GO 19964
19964: DISABLE
19965: LD_INT 0
19967: PPUSH
// begin p := 0 ;
19968: LD_ADDR_VAR 0 1
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// repeat game_speed := 1 ;
19976: LD_ADDR_OWVAR 65
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19984: LD_INT 35
19986: PPUSH
19987: CALL_OW 67
// p := p + 1 ;
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_VAR 0 1
20000: PUSH
20001: LD_INT 1
20003: PLUS
20004: ST_TO_ADDR
// until p >= 60 ;
20005: LD_VAR 0 1
20009: PUSH
20010: LD_INT 60
20012: GREATEREQUAL
20013: IFFALSE 19976
// game_speed := 4 ;
20015: LD_ADDR_OWVAR 65
20019: PUSH
20020: LD_INT 4
20022: ST_TO_ADDR
// end ;
20023: PPOPN 1
20025: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20026: LD_EXP 22
20030: PUSH
20031: LD_EXP 49
20035: AND
20036: IFFALSE 20182
20038: GO 20040
20040: DISABLE
20041: LD_INT 0
20043: PPUSH
20044: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: LD_INT 22
20052: PUSH
20053: LD_OWVAR 2
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 30
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PPUSH
20094: CALL_OW 69
20098: ST_TO_ADDR
// if not depot then
20099: LD_VAR 0 1
20103: NOT
20104: IFFALSE 20108
// exit ;
20106: GO 20182
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_VAR 0 1
20117: PUSH
20118: LD_INT 1
20120: PPUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 12
20130: ARRAY
20131: PPUSH
20132: CALL_OW 274
20136: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20137: LD_VAR 0 2
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: LD_INT 0
20147: PPUSH
20148: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20152: LD_VAR 0 2
20156: PPUSH
20157: LD_INT 2
20159: PPUSH
20160: LD_INT 0
20162: PPUSH
20163: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 3
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: CALL_OW 277
// end ;
20182: PPOPN 2
20184: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20185: LD_EXP 22
20189: PUSH
20190: LD_EXP 50
20194: AND
20195: IFFALSE 20292
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_INT 22
20210: PUSH
20211: LD_OWVAR 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 21
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 23
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 1
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20266: LD_VAR 0 1
20270: PUSH
20271: LD_INT 1
20273: PPUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 12
20283: ARRAY
20284: PPUSH
20285: LD_INT 200
20287: PPUSH
20288: CALL_OW 234
// end ;
20292: PPOPN 1
20294: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20295: LD_EXP 22
20299: PUSH
20300: LD_EXP 51
20304: AND
20305: IFFALSE 20384
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20313: LD_ADDR_VAR 0 1
20317: PUSH
20318: LD_INT 22
20320: PUSH
20321: LD_OWVAR 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 21
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 69
20348: ST_TO_ADDR
// if not tmp then
20349: LD_VAR 0 1
20353: NOT
20354: IFFALSE 20358
// exit ;
20356: GO 20384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20358: LD_VAR 0 1
20362: PUSH
20363: LD_INT 1
20365: PPUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 12
20375: ARRAY
20376: PPUSH
20377: LD_INT 60
20379: PPUSH
20380: CALL_OW 234
// end ;
20384: PPOPN 1
20386: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 52
20396: AND
20397: IFFALSE 20496
20399: GO 20401
20401: DISABLE
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
// begin enable ;
20406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20407: LD_ADDR_VAR 0 1
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_OWVAR 2
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 61
20426: PUSH
20427: EMPTY
20428: LIST
20429: PUSH
20430: LD_INT 33
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: LIST
20444: PPUSH
20445: CALL_OW 69
20449: ST_TO_ADDR
// if not tmp then
20450: LD_VAR 0 1
20454: NOT
20455: IFFALSE 20459
// exit ;
20457: GO 20496
// for i in tmp do
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20494
// if IsControledBy ( i ) then
20472: LD_VAR 0 2
20476: PPUSH
20477: CALL_OW 312
20481: IFFALSE 20492
// ComUnlink ( i ) ;
20483: LD_VAR 0 2
20487: PPUSH
20488: CALL_OW 136
20492: GO 20469
20494: POP
20495: POP
// end ;
20496: PPOPN 2
20498: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20499: LD_EXP 22
20503: PUSH
20504: LD_EXP 53
20508: AND
20509: IFFALSE 20649
20511: GO 20513
20513: DISABLE
20514: LD_INT 0
20516: PPUSH
20517: PPUSH
// begin ToLua ( displayPowell(); ) ;
20518: LD_STRING displayPowell();
20520: PPUSH
20521: CALL_OW 559
// uc_side := 0 ;
20525: LD_ADDR_OWVAR 20
20529: PUSH
20530: LD_INT 0
20532: ST_TO_ADDR
// uc_nation := 2 ;
20533: LD_ADDR_OWVAR 21
20537: PUSH
20538: LD_INT 2
20540: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20541: LD_ADDR_OWVAR 37
20545: PUSH
20546: LD_INT 14
20548: ST_TO_ADDR
// vc_engine := engine_siberite ;
20549: LD_ADDR_OWVAR 39
20553: PUSH
20554: LD_INT 3
20556: ST_TO_ADDR
// vc_control := control_apeman ;
20557: LD_ADDR_OWVAR 38
20561: PUSH
20562: LD_INT 5
20564: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20565: LD_ADDR_OWVAR 40
20569: PUSH
20570: LD_INT 29
20572: ST_TO_ADDR
// un := CreateVehicle ;
20573: LD_ADDR_VAR 0 2
20577: PUSH
20578: CALL_OW 45
20582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20583: LD_VAR 0 2
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20595: LD_INT 35
20597: PPUSH
20598: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20602: LD_VAR 0 2
20606: PPUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: PPUSH
20624: LD_VAR 0 2
20628: PPUSH
20629: CALL_OW 74
20633: PPUSH
20634: CALL_OW 115
// until IsDead ( un ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: CALL_OW 301
20647: IFFALSE 20595
// end ;
20649: PPOPN 2
20651: END
// every 0 0$1 trigger StreamModeActive and sStu do
20652: LD_EXP 22
20656: PUSH
20657: LD_EXP 61
20661: AND
20662: IFFALSE 20678
20664: GO 20666
20666: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20667: LD_STRING displayStucuk();
20669: PPUSH
20670: CALL_OW 559
// ResetFog ;
20674: CALL_OW 335
// end ;
20678: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20679: LD_EXP 22
20683: PUSH
20684: LD_EXP 54
20688: AND
20689: IFFALSE 20830
20691: GO 20693
20693: DISABLE
20694: LD_INT 0
20696: PPUSH
20697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_INT 22
20705: PUSH
20706: LD_OWVAR 2
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 21
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PPUSH
20729: CALL_OW 69
20733: ST_TO_ADDR
// if not tmp then
20734: LD_VAR 0 2
20738: NOT
20739: IFFALSE 20743
// exit ;
20741: GO 20830
// un := tmp [ rand ( 1 , tmp ) ] ;
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 1
20755: PPUSH
20756: LD_VAR 0 2
20760: PPUSH
20761: CALL_OW 12
20765: ARRAY
20766: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20767: LD_VAR 0 1
20771: PPUSH
20772: LD_INT 0
20774: PPUSH
20775: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20779: LD_VAR 0 1
20783: PPUSH
20784: LD_OWVAR 3
20788: PUSH
20789: LD_VAR 0 1
20793: DIFF
20794: PPUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 74
20804: PPUSH
20805: CALL_OW 115
// wait ( 0 0$20 ) ;
20809: LD_INT 700
20811: PPUSH
20812: CALL_OW 67
// SetSide ( un , your_side ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_OWVAR 2
20825: PPUSH
20826: CALL_OW 235
// end ;
20830: PPOPN 2
20832: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20833: LD_EXP 22
20837: PUSH
20838: LD_EXP 55
20842: AND
20843: IFFALSE 20949
20845: GO 20847
20847: DISABLE
20848: LD_INT 0
20850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20851: LD_ADDR_VAR 0 1
20855: PUSH
20856: LD_INT 22
20858: PUSH
20859: LD_OWVAR 2
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: PUSH
20871: LD_INT 30
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 30
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: ST_TO_ADDR
// if not depot then
20905: LD_VAR 0 1
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 20949
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20914: LD_VAR 0 1
20918: PUSH
20919: LD_INT 1
20921: ARRAY
20922: PPUSH
20923: CALL_OW 250
20927: PPUSH
20928: LD_VAR 0 1
20932: PUSH
20933: LD_INT 1
20935: ARRAY
20936: PPUSH
20937: CALL_OW 251
20941: PPUSH
20942: LD_INT 70
20944: PPUSH
20945: CALL_OW 495
// end ;
20949: PPOPN 1
20951: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20952: LD_EXP 22
20956: PUSH
20957: LD_EXP 56
20961: AND
20962: IFFALSE 21173
20964: GO 20966
20966: DISABLE
20967: LD_INT 0
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20974: LD_ADDR_VAR 0 5
20978: PUSH
20979: LD_INT 22
20981: PUSH
20982: LD_OWVAR 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: ST_TO_ADDR
// if not tmp then
21010: LD_VAR 0 5
21014: NOT
21015: IFFALSE 21019
// exit ;
21017: GO 21173
// for i in tmp do
21019: LD_ADDR_VAR 0 1
21023: PUSH
21024: LD_VAR 0 5
21028: PUSH
21029: FOR_IN
21030: IFFALSE 21171
// begin d := rand ( 0 , 5 ) ;
21032: LD_ADDR_VAR 0 4
21036: PUSH
21037: LD_INT 0
21039: PPUSH
21040: LD_INT 5
21042: PPUSH
21043: CALL_OW 12
21047: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21048: LD_ADDR_VAR 0 2
21052: PUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 250
21062: PPUSH
21063: LD_VAR 0 4
21067: PPUSH
21068: LD_INT 3
21070: PPUSH
21071: LD_INT 12
21073: PPUSH
21074: CALL_OW 12
21078: PPUSH
21079: CALL_OW 272
21083: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_VAR 0 1
21093: PPUSH
21094: CALL_OW 251
21098: PPUSH
21099: LD_VAR 0 4
21103: PPUSH
21104: LD_INT 3
21106: PPUSH
21107: LD_INT 12
21109: PPUSH
21110: CALL_OW 12
21114: PPUSH
21115: CALL_OW 273
21119: ST_TO_ADDR
// if ValidHex ( x , y ) then
21120: LD_VAR 0 2
21124: PPUSH
21125: LD_VAR 0 3
21129: PPUSH
21130: CALL_OW 488
21134: IFFALSE 21169
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: LD_VAR 0 2
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: LD_INT 6
21156: PPUSH
21157: CALL_OW 12
21161: PPUSH
21162: LD_INT 1
21164: PPUSH
21165: CALL_OW 483
// end ;
21169: GO 21029
21171: POP
21172: POP
// end ;
21173: PPOPN 5
21175: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21176: LD_EXP 22
21180: PUSH
21181: LD_EXP 57
21185: AND
21186: IFFALSE 21280
21188: GO 21190
21190: DISABLE
21191: LD_INT 0
21193: PPUSH
21194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 32
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: ST_TO_ADDR
// if not tmp then
21242: LD_VAR 0 2
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21280
// for i in tmp do
21251: LD_ADDR_VAR 0 1
21255: PUSH
21256: LD_VAR 0 2
21260: PUSH
21261: FOR_IN
21262: IFFALSE 21278
// SetFuel ( i , 0 ) ;
21264: LD_VAR 0 1
21268: PPUSH
21269: LD_INT 0
21271: PPUSH
21272: CALL_OW 240
21276: GO 21261
21278: POP
21279: POP
// end ;
21280: PPOPN 2
21282: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21283: LD_EXP 22
21287: PUSH
21288: LD_EXP 58
21292: AND
21293: IFFALSE 21359
21295: GO 21297
21297: DISABLE
21298: LD_INT 0
21300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21301: LD_ADDR_VAR 0 1
21305: PUSH
21306: LD_INT 22
21308: PUSH
21309: LD_OWVAR 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 30
21320: PUSH
21321: LD_INT 29
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: ST_TO_ADDR
// if not tmp then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21359
// DestroyUnit ( tmp [ 1 ] ) ;
21346: LD_VAR 0 1
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PPUSH
21355: CALL_OW 65
// end ;
21359: PPOPN 1
21361: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21362: LD_EXP 22
21366: PUSH
21367: LD_EXP 60
21371: AND
21372: IFFALSE 21501
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
// begin uc_side := 0 ;
21380: LD_ADDR_OWVAR 20
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// uc_nation := nation_arabian ;
21388: LD_ADDR_OWVAR 21
21392: PUSH
21393: LD_INT 2
21395: ST_TO_ADDR
// hc_gallery :=  ;
21396: LD_ADDR_OWVAR 33
21400: PUSH
21401: LD_STRING 
21403: ST_TO_ADDR
// hc_name :=  ;
21404: LD_ADDR_OWVAR 26
21408: PUSH
21409: LD_STRING 
21411: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21412: LD_INT 1
21414: PPUSH
21415: LD_INT 11
21417: PPUSH
21418: LD_INT 10
21420: PPUSH
21421: CALL_OW 380
// un := CreateHuman ;
21425: LD_ADDR_VAR 0 1
21429: PUSH
21430: CALL_OW 44
21434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21447: LD_INT 35
21449: PPUSH
21450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_INT 22
21461: PUSH
21462: LD_OWVAR 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PPUSH
21471: CALL_OW 69
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 74
21485: PPUSH
21486: CALL_OW 115
// until IsDead ( un ) ;
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 301
21499: IFFALSE 21447
// end ;
21501: PPOPN 1
21503: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21504: LD_EXP 22
21508: PUSH
21509: LD_EXP 62
21513: AND
21514: IFFALSE 21526
21516: GO 21518
21518: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21519: LD_STRING earthquake(getX(game), 0, 32)
21521: PPUSH
21522: CALL_OW 559
21526: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21527: LD_EXP 22
21531: PUSH
21532: LD_EXP 63
21536: AND
21537: IFFALSE 21628
21539: GO 21541
21541: DISABLE
21542: LD_INT 0
21544: PPUSH
// begin enable ;
21545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_INT 22
21553: PUSH
21554: LD_OWVAR 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 21
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 33
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PPUSH
21588: CALL_OW 69
21592: ST_TO_ADDR
// if not tmp then
21593: LD_VAR 0 1
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 21628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21602: LD_VAR 0 1
21606: PUSH
21607: LD_INT 1
21609: PPUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 12
21619: ARRAY
21620: PPUSH
21621: LD_INT 1
21623: PPUSH
21624: CALL_OW 234
// end ;
21628: PPOPN 1
21630: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21631: LD_EXP 22
21635: PUSH
21636: LD_EXP 64
21640: AND
21641: IFFALSE 21782
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21651: LD_ADDR_VAR 0 3
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_OWVAR 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 25
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: ST_TO_ADDR
// if not tmp then
21687: LD_VAR 0 3
21691: NOT
21692: IFFALSE 21696
// exit ;
21694: GO 21782
// un := tmp [ rand ( 1 , tmp ) ] ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 1
21708: PPUSH
21709: LD_VAR 0 3
21713: PPUSH
21714: CALL_OW 12
21718: ARRAY
21719: ST_TO_ADDR
// if Crawls ( un ) then
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL_OW 318
21729: IFFALSE 21740
// ComWalk ( un ) ;
21731: LD_VAR 0 2
21735: PPUSH
21736: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21740: LD_VAR 0 2
21744: PPUSH
21745: LD_INT 9
21747: PPUSH
21748: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21752: LD_INT 28
21754: PPUSH
21755: LD_OWVAR 2
21759: PPUSH
21760: LD_INT 2
21762: PPUSH
21763: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21767: LD_INT 29
21769: PPUSH
21770: LD_OWVAR 2
21774: PPUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 322
// end ;
21782: PPOPN 3
21784: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21785: LD_EXP 22
21789: PUSH
21790: LD_EXP 65
21794: AND
21795: IFFALSE 21906
21797: GO 21799
21799: DISABLE
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
21804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_OWVAR 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: ST_TO_ADDR
// if not tmp then
21841: LD_VAR 0 3
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 21906
// un := tmp [ rand ( 1 , tmp ) ] ;
21850: LD_ADDR_VAR 0 2
21854: PUSH
21855: LD_VAR 0 3
21859: PUSH
21860: LD_INT 1
21862: PPUSH
21863: LD_VAR 0 3
21867: PPUSH
21868: CALL_OW 12
21872: ARRAY
21873: ST_TO_ADDR
// if Crawls ( un ) then
21874: LD_VAR 0 2
21878: PPUSH
21879: CALL_OW 318
21883: IFFALSE 21894
// ComWalk ( un ) ;
21885: LD_VAR 0 2
21889: PPUSH
21890: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21894: LD_VAR 0 2
21898: PPUSH
21899: LD_INT 8
21901: PPUSH
21902: CALL_OW 336
// end ;
21906: PPOPN 3
21908: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21909: LD_EXP 22
21913: PUSH
21914: LD_EXP 66
21918: AND
21919: IFFALSE 22063
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 21
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 34
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 34
21970: PUSH
21971: LD_INT 51
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 32
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 2
22008: NOT
22009: IFFALSE 22013
// exit ;
22011: GO 22063
// for i in tmp do
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: FOR_IN
22024: IFFALSE 22061
// if GetCargo ( i , mat_artifact ) = 0 then
22026: LD_VAR 0 1
22030: PPUSH
22031: LD_INT 4
22033: PPUSH
22034: CALL_OW 289
22038: PUSH
22039: LD_INT 0
22041: EQUAL
22042: IFFALSE 22059
// SetCargo ( i , mat_siberit , 100 ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_INT 3
22051: PPUSH
22052: LD_INT 100
22054: PPUSH
22055: CALL_OW 290
22059: GO 22023
22061: POP
22062: POP
// end ;
22063: PPOPN 2
22065: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22066: LD_EXP 22
22070: PUSH
22071: LD_EXP 67
22075: AND
22076: IFFALSE 22259
22078: GO 22080
22080: DISABLE
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_INT 22
22092: PUSH
22093: LD_OWVAR 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PPUSH
22102: CALL_OW 69
22106: ST_TO_ADDR
// if not tmp then
22107: LD_VAR 0 2
22111: NOT
22112: IFFALSE 22116
// exit ;
22114: GO 22259
// for i := 1 to 2 do
22116: LD_ADDR_VAR 0 1
22120: PUSH
22121: DOUBLE
22122: LD_INT 1
22124: DEC
22125: ST_TO_ADDR
22126: LD_INT 2
22128: PUSH
22129: FOR_TO
22130: IFFALSE 22257
// begin uc_side := your_side ;
22132: LD_ADDR_OWVAR 20
22136: PUSH
22137: LD_OWVAR 2
22141: ST_TO_ADDR
// uc_nation := nation_american ;
22142: LD_ADDR_OWVAR 21
22146: PUSH
22147: LD_INT 1
22149: ST_TO_ADDR
// vc_chassis := us_morphling ;
22150: LD_ADDR_OWVAR 37
22154: PUSH
22155: LD_INT 5
22157: ST_TO_ADDR
// vc_engine := engine_siberite ;
22158: LD_ADDR_OWVAR 39
22162: PUSH
22163: LD_INT 3
22165: ST_TO_ADDR
// vc_control := control_computer ;
22166: LD_ADDR_OWVAR 38
22170: PUSH
22171: LD_INT 3
22173: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22174: LD_ADDR_OWVAR 40
22178: PUSH
22179: LD_INT 10
22181: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22182: LD_VAR 0 2
22186: PUSH
22187: LD_INT 1
22189: ARRAY
22190: PPUSH
22191: CALL_OW 310
22195: NOT
22196: IFFALSE 22243
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22198: CALL_OW 45
22202: PPUSH
22203: LD_VAR 0 2
22207: PUSH
22208: LD_INT 1
22210: ARRAY
22211: PPUSH
22212: CALL_OW 250
22216: PPUSH
22217: LD_VAR 0 2
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: CALL_OW 251
22230: PPUSH
22231: LD_INT 12
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 50
22241: GO 22255
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22243: CALL_OW 45
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 51
// end ;
22255: GO 22129
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22262: LD_EXP 22
22266: PUSH
22267: LD_EXP 68
22271: AND
22272: IFFALSE 22494
22274: GO 22276
22276: DISABLE
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22285: LD_ADDR_VAR 0 6
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_OWVAR 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 21
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: ST_TO_ADDR
// if not tmp then
22339: LD_VAR 0 6
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22494
// s1 := rand ( 1 , 4 ) ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 1
22355: PPUSH
22356: LD_INT 4
22358: PPUSH
22359: CALL_OW 12
22363: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_VAR 0 6
22373: PUSH
22374: LD_INT 1
22376: ARRAY
22377: PPUSH
22378: LD_VAR 0 2
22382: PPUSH
22383: CALL_OW 259
22387: ST_TO_ADDR
// if s1 = 1 then
22388: LD_VAR 0 2
22392: PUSH
22393: LD_INT 1
22395: EQUAL
22396: IFFALSE 22416
// s2 := rand ( 2 , 4 ) else
22398: LD_ADDR_VAR 0 3
22402: PUSH
22403: LD_INT 2
22405: PPUSH
22406: LD_INT 4
22408: PPUSH
22409: CALL_OW 12
22413: ST_TO_ADDR
22414: GO 22424
// s2 := 1 ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22424: LD_ADDR_VAR 0 5
22428: PUSH
22429: LD_VAR 0 6
22433: PUSH
22434: LD_INT 1
22436: ARRAY
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 259
22447: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22448: LD_VAR 0 6
22452: PUSH
22453: LD_INT 1
22455: ARRAY
22456: PPUSH
22457: LD_VAR 0 2
22461: PPUSH
22462: LD_VAR 0 5
22466: PPUSH
22467: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22471: LD_VAR 0 6
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_VAR 0 4
22489: PPUSH
22490: CALL_OW 237
// end ;
22494: PPOPN 6
22496: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22497: LD_EXP 22
22501: PUSH
22502: LD_EXP 69
22506: AND
22507: IFFALSE 22586
22509: GO 22511
22511: DISABLE
22512: LD_INT 0
22514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22515: LD_ADDR_VAR 0 1
22519: PUSH
22520: LD_INT 22
22522: PUSH
22523: LD_OWVAR 2
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 30
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL_OW 69
22550: ST_TO_ADDR
// if not tmp then
22551: LD_VAR 0 1
22555: NOT
22556: IFFALSE 22560
// exit ;
22558: GO 22586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22560: LD_VAR 0 1
22564: PUSH
22565: LD_INT 1
22567: PPUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: CALL_OW 12
22577: ARRAY
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: CALL_OW 234
// end ;
22586: PPOPN 1
22588: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22589: LD_EXP 22
22593: PUSH
22594: LD_EXP 70
22598: AND
22599: IFFALSE 22711
22601: GO 22603
22603: DISABLE
22604: LD_INT 0
22606: PPUSH
22607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_OWVAR 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 27
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 30
22640: PUSH
22641: LD_INT 26
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: LD_INT 28
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: ST_TO_ADDR
// if not tmp then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22711
// for i in tmp do
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22709
// SetLives ( i , 1 ) ;
22695: LD_VAR 0 1
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 234
22707: GO 22692
22709: POP
22710: POP
// end ;
22711: PPOPN 2
22713: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22714: LD_EXP 22
22718: PUSH
22719: LD_EXP 71
22723: AND
22724: IFFALSE 23011
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// begin i := rand ( 1 , 7 ) ;
22734: LD_ADDR_VAR 0 1
22738: PUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_INT 7
22744: PPUSH
22745: CALL_OW 12
22749: ST_TO_ADDR
// case i of 1 :
22750: LD_VAR 0 1
22754: PUSH
22755: LD_INT 1
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22773
22763: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22764: LD_STRING earthquake(getX(game), 0, 32)
22766: PPUSH
22767: CALL_OW 559
22771: GO 23011
22773: LD_INT 2
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22795
22781: POP
// begin ToLua ( displayStucuk(); ) ;
22782: LD_STRING displayStucuk();
22784: PPUSH
22785: CALL_OW 559
// ResetFog ;
22789: CALL_OW 335
// end ; 3 :
22793: GO 23011
22795: LD_INT 3
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22907
22803: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_OWVAR 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 25
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 69
22839: ST_TO_ADDR
// if not tmp then
22840: LD_VAR 0 2
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 23011
// un := tmp [ rand ( 1 , tmp ) ] ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_VAR 0 2
22858: PUSH
22859: LD_INT 1
22861: PPUSH
22862: LD_VAR 0 2
22866: PPUSH
22867: CALL_OW 12
22871: ARRAY
22872: ST_TO_ADDR
// if Crawls ( un ) then
22873: LD_VAR 0 3
22877: PPUSH
22878: CALL_OW 318
22882: IFFALSE 22893
// ComWalk ( un ) ;
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_INT 8
22900: PPUSH
22901: CALL_OW 336
// end ; 4 :
22905: GO 23011
22907: LD_INT 4
22909: DOUBLE
22910: EQUAL
22911: IFTRUE 22915
22913: GO 22989
22915: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_OWVAR 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 30
22935: PUSH
22936: LD_INT 29
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: ST_TO_ADDR
// if not tmp then
22952: LD_VAR 0 2
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 23011
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22961: LD_VAR 0 2
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PPUSH
22970: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22974: LD_VAR 0 2
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: PPUSH
22983: CALL_OW 65
// end ; 5 .. 7 :
22987: GO 23011
22989: LD_INT 5
22991: DOUBLE
22992: GREATEREQUAL
22993: IFFALSE 23001
22995: LD_INT 7
22997: DOUBLE
22998: LESSEQUAL
22999: IFTRUE 23003
23001: GO 23010
23003: POP
// StreamSibBomb ; end ;
23004: CALL 19248 0 0
23008: GO 23011
23010: POP
// end ;
23011: PPOPN 3
23013: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23014: LD_EXP 22
23018: PUSH
23019: LD_EXP 72
23023: AND
23024: IFFALSE 23180
23026: GO 23028
23028: DISABLE
23029: LD_INT 0
23031: PPUSH
23032: PPUSH
23033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23034: LD_ADDR_VAR 0 2
23038: PUSH
23039: LD_INT 81
23041: PUSH
23042: LD_OWVAR 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 21
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PPUSH
23083: CALL_OW 69
23087: ST_TO_ADDR
// if not tmp then
23088: LD_VAR 0 2
23092: NOT
23093: IFFALSE 23097
// exit ;
23095: GO 23180
// p := 0 ;
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_INT 0
23104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23105: LD_INT 35
23107: PPUSH
23108: CALL_OW 67
// p := p + 1 ;
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_VAR 0 3
23121: PUSH
23122: LD_INT 1
23124: PLUS
23125: ST_TO_ADDR
// for i in tmp do
23126: LD_ADDR_VAR 0 1
23130: PUSH
23131: LD_VAR 0 2
23135: PUSH
23136: FOR_IN
23137: IFFALSE 23168
// if GetLives ( i ) < 1000 then
23139: LD_VAR 0 1
23143: PPUSH
23144: CALL_OW 256
23148: PUSH
23149: LD_INT 1000
23151: LESS
23152: IFFALSE 23166
// SetLives ( i , 1000 ) ;
23154: LD_VAR 0 1
23158: PPUSH
23159: LD_INT 1000
23161: PPUSH
23162: CALL_OW 234
23166: GO 23136
23168: POP
23169: POP
// until p > 20 ;
23170: LD_VAR 0 3
23174: PUSH
23175: LD_INT 20
23177: GREATER
23178: IFFALSE 23105
// end ;
23180: PPOPN 3
23182: END
// every 0 0$1 trigger StreamModeActive and sTime do
23183: LD_EXP 22
23187: PUSH
23188: LD_EXP 73
23192: AND
23193: IFFALSE 23228
23195: GO 23197
23197: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23198: LD_INT 28
23200: PPUSH
23201: LD_OWVAR 2
23205: PPUSH
23206: LD_INT 2
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23213: LD_INT 30
23215: PPUSH
23216: LD_OWVAR 2
23220: PPUSH
23221: LD_INT 2
23223: PPUSH
23224: CALL_OW 322
// end ;
23228: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23229: LD_EXP 22
23233: PUSH
23234: LD_EXP 74
23238: AND
23239: IFFALSE 23360
23241: GO 23243
23243: DISABLE
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: PUSH
23278: LD_INT 23
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 2
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23360
// for i in tmp do
23311: LD_ADDR_VAR 0 1
23315: PUSH
23316: LD_VAR 0 2
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23358
// begin if Crawls ( i ) then
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 318
23333: IFFALSE 23344
// ComWalk ( i ) ;
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 138
// SetClass ( i , 2 ) ;
23344: LD_VAR 0 1
23348: PPUSH
23349: LD_INT 2
23351: PPUSH
23352: CALL_OW 336
// end ;
23356: GO 23321
23358: POP
23359: POP
// end ;
23360: PPOPN 2
23362: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23363: LD_EXP 22
23367: PUSH
23368: LD_EXP 75
23372: AND
23373: IFFALSE 23661
23375: GO 23377
23377: DISABLE
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
23382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23383: LD_OWVAR 2
23387: PPUSH
23388: LD_INT 9
23390: PPUSH
23391: LD_INT 1
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23401: LD_INT 9
23403: PPUSH
23404: LD_OWVAR 2
23408: PPUSH
23409: CALL_OW 343
// uc_side := 9 ;
23413: LD_ADDR_OWVAR 20
23417: PUSH
23418: LD_INT 9
23420: ST_TO_ADDR
// uc_nation := 2 ;
23421: LD_ADDR_OWVAR 21
23425: PUSH
23426: LD_INT 2
23428: ST_TO_ADDR
// hc_name := Dark Warrior ;
23429: LD_ADDR_OWVAR 26
23433: PUSH
23434: LD_STRING Dark Warrior
23436: ST_TO_ADDR
// hc_gallery :=  ;
23437: LD_ADDR_OWVAR 33
23441: PUSH
23442: LD_STRING 
23444: ST_TO_ADDR
// hc_noskilllimit := true ;
23445: LD_ADDR_OWVAR 76
23449: PUSH
23450: LD_INT 1
23452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23453: LD_ADDR_OWVAR 31
23457: PUSH
23458: LD_INT 30
23460: PUSH
23461: LD_INT 30
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 30
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// un := CreateHuman ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: CALL_OW 44
23485: ST_TO_ADDR
// hc_noskilllimit := false ;
23486: LD_ADDR_OWVAR 76
23490: PUSH
23491: LD_INT 0
23493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23494: LD_VAR 0 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 51
// ToLua ( playRanger() ) ;
23506: LD_STRING playRanger()
23508: PPUSH
23509: CALL_OW 559
// p := 0 ;
23513: LD_ADDR_VAR 0 2
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23521: LD_INT 35
23523: PPUSH
23524: CALL_OW 67
// p := p + 1 ;
23528: LD_ADDR_VAR 0 2
23532: PUSH
23533: LD_VAR 0 2
23537: PUSH
23538: LD_INT 1
23540: PLUS
23541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23542: LD_VAR 0 3
23546: PPUSH
23547: CALL_OW 256
23551: PUSH
23552: LD_INT 1000
23554: LESS
23555: IFFALSE 23569
// SetLives ( un , 1000 ) ;
23557: LD_VAR 0 3
23561: PPUSH
23562: LD_INT 1000
23564: PPUSH
23565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_INT 81
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 91
23588: PUSH
23589: LD_VAR 0 3
23593: PUSH
23594: LD_INT 30
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PPUSH
23606: CALL_OW 69
23610: PPUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: CALL_OW 74
23620: PPUSH
23621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23625: LD_VAR 0 2
23629: PUSH
23630: LD_INT 80
23632: GREATER
23633: PUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: CALL_OW 301
23643: OR
23644: IFFALSE 23521
// if un then
23646: LD_VAR 0 3
23650: IFFALSE 23661
// RemoveUnit ( un ) ;
23652: LD_VAR 0 3
23656: PPUSH
23657: CALL_OW 64
// end ;
23661: PPOPN 3
23663: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23664: LD_EXP 76
23668: IFFALSE 23784
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23678: LD_ADDR_VAR 0 2
23682: PUSH
23683: LD_INT 81
23685: PUSH
23686: LD_OWVAR 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PPUSH
23709: CALL_OW 69
23713: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23714: LD_STRING playComputer()
23716: PPUSH
23717: CALL_OW 559
// if not tmp then
23721: LD_VAR 0 2
23725: NOT
23726: IFFALSE 23730
// exit ;
23728: GO 23784
// for i in tmp do
23730: LD_ADDR_VAR 0 1
23734: PUSH
23735: LD_VAR 0 2
23739: PUSH
23740: FOR_IN
23741: IFFALSE 23782
// for j := 1 to 4 do
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: DOUBLE
23749: LD_INT 1
23751: DEC
23752: ST_TO_ADDR
23753: LD_INT 4
23755: PUSH
23756: FOR_TO
23757: IFFALSE 23778
// SetSkill ( i , j , 10 ) ;
23759: LD_VAR 0 1
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 10
23771: PPUSH
23772: CALL_OW 237
23776: GO 23756
23778: POP
23779: POP
23780: GO 23740
23782: POP
23783: POP
// end ;
23784: PPOPN 3
23786: END
// every 0 0$1 trigger s30 do var i , tmp ;
23787: LD_EXP 77
23791: IFFALSE 23860
23793: GO 23795
23795: DISABLE
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23800: LD_ADDR_VAR 0 2
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_OWVAR 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not tmp then
23822: LD_VAR 0 2
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23860
// for i in tmp do
23831: LD_ADDR_VAR 0 1
23835: PUSH
23836: LD_VAR 0 2
23840: PUSH
23841: FOR_IN
23842: IFFALSE 23858
// SetLives ( i , 300 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 300
23851: PPUSH
23852: CALL_OW 234
23856: GO 23841
23858: POP
23859: POP
// end ;
23860: PPOPN 2
23862: END
// every 0 0$1 trigger s60 do var i , tmp ;
23863: LD_EXP 78
23867: IFFALSE 23936
23869: GO 23871
23871: DISABLE
23872: LD_INT 0
23874: PPUSH
23875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_OWVAR 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 2
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23936
// for i in tmp do
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_VAR 0 2
23916: PUSH
23917: FOR_IN
23918: IFFALSE 23934
// SetLives ( i , 600 ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 600
23927: PPUSH
23928: CALL_OW 234
23932: GO 23917
23934: POP
23935: POP
// end ;
23936: PPOPN 2
23938: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23939: LD_INT 0
23941: PPUSH
// case cmd of 301 :
23942: LD_VAR 0 1
23946: PUSH
23947: LD_INT 301
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 23987
23955: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23956: LD_VAR 0 6
23960: PPUSH
23961: LD_VAR 0 7
23965: PPUSH
23966: LD_VAR 0 8
23970: PPUSH
23971: LD_VAR 0 4
23975: PPUSH
23976: LD_VAR 0 5
23980: PPUSH
23981: CALL 25196 0 5
23985: GO 24108
23987: LD_INT 302
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24032
23995: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23996: LD_VAR 0 6
24000: PPUSH
24001: LD_VAR 0 7
24005: PPUSH
24006: LD_VAR 0 8
24010: PPUSH
24011: LD_VAR 0 9
24015: PPUSH
24016: LD_VAR 0 4
24020: PPUSH
24021: LD_VAR 0 5
24025: PPUSH
24026: CALL 25287 0 6
24030: GO 24108
24032: LD_INT 303
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24077
24040: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24041: LD_VAR 0 6
24045: PPUSH
24046: LD_VAR 0 7
24050: PPUSH
24051: LD_VAR 0 8
24055: PPUSH
24056: LD_VAR 0 9
24060: PPUSH
24061: LD_VAR 0 4
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL 24113 0 6
24075: GO 24108
24077: LD_INT 304
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24107
24085: POP
// hHackTeleport ( unit , x , y ) ; end ;
24086: LD_VAR 0 2
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: CALL 25880 0 3
24105: GO 24108
24107: POP
// end ;
24108: LD_VAR 0 12
24112: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24113: LD_INT 0
24115: PPUSH
24116: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24117: LD_VAR 0 1
24121: PUSH
24122: LD_INT 1
24124: LESS
24125: PUSH
24126: LD_VAR 0 1
24130: PUSH
24131: LD_INT 3
24133: GREATER
24134: OR
24135: PUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: LD_VAR 0 6
24145: PPUSH
24146: CALL_OW 428
24150: OR
24151: IFFALSE 24155
// exit ;
24153: GO 24883
// uc_side := your_side ;
24155: LD_ADDR_OWVAR 20
24159: PUSH
24160: LD_OWVAR 2
24164: ST_TO_ADDR
// uc_nation := nation ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_VAR 0 1
24174: ST_TO_ADDR
// bc_level = 1 ;
24175: LD_ADDR_OWVAR 43
24179: PUSH
24180: LD_INT 1
24182: ST_TO_ADDR
// case btype of 1 :
24183: LD_VAR 0 2
24187: PUSH
24188: LD_INT 1
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24207
24196: POP
// bc_type := b_depot ; 2 :
24197: LD_ADDR_OWVAR 42
24201: PUSH
24202: LD_INT 0
24204: ST_TO_ADDR
24205: GO 24827
24207: LD_INT 2
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24226
24215: POP
// bc_type := b_warehouse ; 3 :
24216: LD_ADDR_OWVAR 42
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
24224: GO 24827
24226: LD_INT 3
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24234
24232: GO 24245
24234: POP
// bc_type := b_lab ; 4 .. 9 :
24235: LD_ADDR_OWVAR 42
24239: PUSH
24240: LD_INT 6
24242: ST_TO_ADDR
24243: GO 24827
24245: LD_INT 4
24247: DOUBLE
24248: GREATEREQUAL
24249: IFFALSE 24257
24251: LD_INT 9
24253: DOUBLE
24254: LESSEQUAL
24255: IFTRUE 24259
24257: GO 24319
24259: POP
// begin bc_type := b_lab_half ;
24260: LD_ADDR_OWVAR 42
24264: PUSH
24265: LD_INT 7
24267: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24268: LD_ADDR_OWVAR 44
24272: PUSH
24273: LD_INT 10
24275: PUSH
24276: LD_INT 11
24278: PUSH
24279: LD_INT 12
24281: PUSH
24282: LD_INT 15
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: LD_INT 13
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: LD_VAR 0 2
24303: PUSH
24304: LD_INT 3
24306: MINUS
24307: ARRAY
24308: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24309: LD_ADDR_OWVAR 45
24313: PUSH
24314: LD_INT 9
24316: ST_TO_ADDR
// end ; 10 .. 13 :
24317: GO 24827
24319: LD_INT 10
24321: DOUBLE
24322: GREATEREQUAL
24323: IFFALSE 24331
24325: LD_INT 13
24327: DOUBLE
24328: LESSEQUAL
24329: IFTRUE 24333
24331: GO 24410
24333: POP
// begin bc_type := b_lab_full ;
24334: LD_ADDR_OWVAR 42
24338: PUSH
24339: LD_INT 8
24341: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24342: LD_ADDR_OWVAR 44
24346: PUSH
24347: LD_INT 10
24349: PUSH
24350: LD_INT 12
24352: PUSH
24353: LD_INT 14
24355: PUSH
24356: LD_INT 13
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: LD_VAR 0 2
24369: PUSH
24370: LD_INT 9
24372: MINUS
24373: ARRAY
24374: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24375: LD_ADDR_OWVAR 45
24379: PUSH
24380: LD_INT 11
24382: PUSH
24383: LD_INT 15
24385: PUSH
24386: LD_INT 12
24388: PUSH
24389: LD_INT 15
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PUSH
24398: LD_VAR 0 2
24402: PUSH
24403: LD_INT 9
24405: MINUS
24406: ARRAY
24407: ST_TO_ADDR
// end ; 14 :
24408: GO 24827
24410: LD_INT 14
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24429
24418: POP
// bc_type := b_workshop ; 15 :
24419: LD_ADDR_OWVAR 42
24423: PUSH
24424: LD_INT 2
24426: ST_TO_ADDR
24427: GO 24827
24429: LD_INT 15
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24448
24437: POP
// bc_type := b_factory ; 16 :
24438: LD_ADDR_OWVAR 42
24442: PUSH
24443: LD_INT 3
24445: ST_TO_ADDR
24446: GO 24827
24448: LD_INT 16
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24467
24456: POP
// bc_type := b_ext_gun ; 17 :
24457: LD_ADDR_OWVAR 42
24461: PUSH
24462: LD_INT 17
24464: ST_TO_ADDR
24465: GO 24827
24467: LD_INT 17
24469: DOUBLE
24470: EQUAL
24471: IFTRUE 24475
24473: GO 24503
24475: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24476: LD_ADDR_OWVAR 42
24480: PUSH
24481: LD_INT 19
24483: PUSH
24484: LD_INT 23
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: PUSH
24495: LD_VAR 0 1
24499: ARRAY
24500: ST_TO_ADDR
24501: GO 24827
24503: LD_INT 18
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24522
24511: POP
// bc_type := b_ext_radar ; 19 :
24512: LD_ADDR_OWVAR 42
24516: PUSH
24517: LD_INT 20
24519: ST_TO_ADDR
24520: GO 24827
24522: LD_INT 19
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24541
24530: POP
// bc_type := b_ext_radio ; 20 :
24531: LD_ADDR_OWVAR 42
24535: PUSH
24536: LD_INT 22
24538: ST_TO_ADDR
24539: GO 24827
24541: LD_INT 20
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24560
24549: POP
// bc_type := b_ext_siberium ; 21 :
24550: LD_ADDR_OWVAR 42
24554: PUSH
24555: LD_INT 21
24557: ST_TO_ADDR
24558: GO 24827
24560: LD_INT 21
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24579
24568: POP
// bc_type := b_ext_computer ; 22 :
24569: LD_ADDR_OWVAR 42
24573: PUSH
24574: LD_INT 24
24576: ST_TO_ADDR
24577: GO 24827
24579: LD_INT 22
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24598
24587: POP
// bc_type := b_ext_track ; 23 :
24588: LD_ADDR_OWVAR 42
24592: PUSH
24593: LD_INT 16
24595: ST_TO_ADDR
24596: GO 24827
24598: LD_INT 23
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24617
24606: POP
// bc_type := b_ext_laser ; 24 :
24607: LD_ADDR_OWVAR 42
24611: PUSH
24612: LD_INT 25
24614: ST_TO_ADDR
24615: GO 24827
24617: LD_INT 24
24619: DOUBLE
24620: EQUAL
24621: IFTRUE 24625
24623: GO 24636
24625: POP
// bc_type := b_control_tower ; 25 :
24626: LD_ADDR_OWVAR 42
24630: PUSH
24631: LD_INT 36
24633: ST_TO_ADDR
24634: GO 24827
24636: LD_INT 25
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24655
24644: POP
// bc_type := b_breastwork ; 26 :
24645: LD_ADDR_OWVAR 42
24649: PUSH
24650: LD_INT 31
24652: ST_TO_ADDR
24653: GO 24827
24655: LD_INT 26
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24674
24663: POP
// bc_type := b_bunker ; 27 :
24664: LD_ADDR_OWVAR 42
24668: PUSH
24669: LD_INT 32
24671: ST_TO_ADDR
24672: GO 24827
24674: LD_INT 27
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24693
24682: POP
// bc_type := b_turret ; 28 :
24683: LD_ADDR_OWVAR 42
24687: PUSH
24688: LD_INT 33
24690: ST_TO_ADDR
24691: GO 24827
24693: LD_INT 28
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24712
24701: POP
// bc_type := b_armoury ; 29 :
24702: LD_ADDR_OWVAR 42
24706: PUSH
24707: LD_INT 4
24709: ST_TO_ADDR
24710: GO 24827
24712: LD_INT 29
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24731
24720: POP
// bc_type := b_barracks ; 30 :
24721: LD_ADDR_OWVAR 42
24725: PUSH
24726: LD_INT 5
24728: ST_TO_ADDR
24729: GO 24827
24731: LD_INT 30
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24750
24739: POP
// bc_type := b_solar_power ; 31 :
24740: LD_ADDR_OWVAR 42
24744: PUSH
24745: LD_INT 27
24747: ST_TO_ADDR
24748: GO 24827
24750: LD_INT 31
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24769
24758: POP
// bc_type := b_oil_power ; 32 :
24759: LD_ADDR_OWVAR 42
24763: PUSH
24764: LD_INT 26
24766: ST_TO_ADDR
24767: GO 24827
24769: LD_INT 32
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24788
24777: POP
// bc_type := b_siberite_power ; 33 :
24778: LD_ADDR_OWVAR 42
24782: PUSH
24783: LD_INT 28
24785: ST_TO_ADDR
24786: GO 24827
24788: LD_INT 33
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24807
24796: POP
// bc_type := b_oil_mine ; 34 :
24797: LD_ADDR_OWVAR 42
24801: PUSH
24802: LD_INT 29
24804: ST_TO_ADDR
24805: GO 24827
24807: LD_INT 34
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24826
24815: POP
// bc_type := b_siberite_mine ; end ;
24816: LD_ADDR_OWVAR 42
24820: PUSH
24821: LD_INT 30
24823: ST_TO_ADDR
24824: GO 24827
24826: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24827: LD_ADDR_VAR 0 8
24831: PUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: LD_VAR 0 6
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: CALL_OW 47
24851: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24852: LD_OWVAR 42
24856: PUSH
24857: LD_INT 32
24859: PUSH
24860: LD_INT 33
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: IN
24867: IFFALSE 24883
// PlaceWeaponTurret ( b , weapon ) ;
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 4
24878: PPUSH
24879: CALL_OW 431
// end ;
24883: LD_VAR 0 7
24887: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
24893: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24894: LD_ADDR_VAR 0 4
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_OWVAR 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 30
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 30
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PPUSH
24943: CALL_OW 69
24947: ST_TO_ADDR
// if not tmp then
24948: LD_VAR 0 4
24952: NOT
24953: IFFALSE 24957
// exit ;
24955: GO 25016
// for i in tmp do
24957: LD_ADDR_VAR 0 2
24961: PUSH
24962: LD_VAR 0 4
24966: PUSH
24967: FOR_IN
24968: IFFALSE 25014
// for j = 1 to 3 do
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_INT 3
24982: PUSH
24983: FOR_TO
24984: IFFALSE 25010
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24986: LD_VAR 0 2
24990: PPUSH
24991: CALL_OW 274
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: LD_INT 99999
25003: PPUSH
25004: CALL_OW 277
25008: GO 24983
25010: POP
25011: POP
25012: GO 24967
25014: POP
25015: POP
// end ;
25016: LD_VAR 0 1
25020: RET
// export function hHackSetLevel10 ; var i , j ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_INT 21
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 69
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25099
// if IsSelected ( i ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 306
25058: IFFALSE 25097
// begin for j := 1 to 4 do
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: DOUBLE
25066: LD_INT 1
25068: DEC
25069: ST_TO_ADDR
25070: LD_INT 4
25072: PUSH
25073: FOR_TO
25074: IFFALSE 25095
// SetSkill ( i , j , 10 ) ;
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: LD_INT 10
25088: PPUSH
25089: CALL_OW 237
25093: GO 25073
25095: POP
25096: POP
// end ;
25097: GO 25046
25099: POP
25100: POP
// end ;
25101: LD_VAR 0 1
25105: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: PUSH
25147: FOR_IN
25148: IFFALSE 25189
// begin for j := 1 to 4 do
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: DOUBLE
25156: LD_INT 1
25158: DEC
25159: ST_TO_ADDR
25160: LD_INT 4
25162: PUSH
25163: FOR_TO
25164: IFFALSE 25185
// SetSkill ( i , j , 10 ) ;
25166: LD_VAR 0 2
25170: PPUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: LD_INT 10
25178: PPUSH
25179: CALL_OW 237
25183: GO 25163
25185: POP
25186: POP
// end ;
25187: GO 25147
25189: POP
25190: POP
// end ;
25191: LD_VAR 0 1
25195: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25196: LD_INT 0
25198: PPUSH
// uc_side := your_side ;
25199: LD_ADDR_OWVAR 20
25203: PUSH
25204: LD_OWVAR 2
25208: ST_TO_ADDR
// uc_nation := nation ;
25209: LD_ADDR_OWVAR 21
25213: PUSH
25214: LD_VAR 0 1
25218: ST_TO_ADDR
// InitHc ;
25219: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25223: LD_INT 0
25225: PPUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: CALL_OW 428
25254: PUSH
25255: LD_INT 0
25257: EQUAL
25258: IFFALSE 25282
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25260: CALL_OW 44
25264: PPUSH
25265: LD_VAR 0 4
25269: PPUSH
25270: LD_VAR 0 5
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL_OW 48
// end ;
25282: LD_VAR 0 6
25286: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25287: LD_INT 0
25289: PPUSH
25290: PPUSH
// uc_side := your_side ;
25291: LD_ADDR_OWVAR 20
25295: PUSH
25296: LD_OWVAR 2
25300: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25301: LD_VAR 0 1
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: LD_INT 5
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: IN
25328: IFFALSE 25340
// uc_nation := nation_american else
25330: LD_ADDR_OWVAR 21
25334: PUSH
25335: LD_INT 1
25337: ST_TO_ADDR
25338: GO 25383
// if chassis in [ 11 , 12 , 13 , 14 ] then
25340: LD_VAR 0 1
25344: PUSH
25345: LD_INT 11
25347: PUSH
25348: LD_INT 12
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: LD_INT 14
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: IN
25363: IFFALSE 25375
// uc_nation := nation_arabian else
25365: LD_ADDR_OWVAR 21
25369: PUSH
25370: LD_INT 2
25372: ST_TO_ADDR
25373: GO 25383
// uc_nation := nation_russian ;
25375: LD_ADDR_OWVAR 21
25379: PUSH
25380: LD_INT 3
25382: ST_TO_ADDR
// vc_chassis := chassis ;
25383: LD_ADDR_OWVAR 37
25387: PUSH
25388: LD_VAR 0 1
25392: ST_TO_ADDR
// vc_engine := engine ;
25393: LD_ADDR_OWVAR 39
25397: PUSH
25398: LD_VAR 0 2
25402: ST_TO_ADDR
// vc_control := control ;
25403: LD_ADDR_OWVAR 38
25407: PUSH
25408: LD_VAR 0 3
25412: ST_TO_ADDR
// vc_weapon := weapon ;
25413: LD_ADDR_OWVAR 40
25417: PUSH
25418: LD_VAR 0 4
25422: ST_TO_ADDR
// un := CreateVehicle ;
25423: LD_ADDR_VAR 0 8
25427: PUSH
25428: CALL_OW 45
25432: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25433: LD_VAR 0 8
25437: PPUSH
25438: LD_INT 0
25440: PPUSH
25441: LD_INT 5
25443: PPUSH
25444: CALL_OW 12
25448: PPUSH
25449: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25453: LD_VAR 0 8
25457: PPUSH
25458: LD_VAR 0 5
25462: PPUSH
25463: LD_VAR 0 6
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 48
// end ;
25475: LD_VAR 0 7
25479: RET
// export hInvincible ; every 1 do
25480: GO 25482
25482: DISABLE
// hInvincible := [ ] ;
25483: LD_ADDR_EXP 79
25487: PUSH
25488: EMPTY
25489: ST_TO_ADDR
25490: END
// every 10 do var i ;
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
// begin enable ;
25497: ENABLE
// if not hInvincible then
25498: LD_EXP 79
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25551
// for i in hInvincible do
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_EXP 79
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25549
// if GetLives ( i ) < 1000 then
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 256
25529: PUSH
25530: LD_INT 1000
25532: LESS
25533: IFFALSE 25547
// SetLives ( i , 1000 ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_INT 1000
25542: PPUSH
25543: CALL_OW 234
25547: GO 25517
25549: POP
25550: POP
// end ;
25551: PPOPN 1
25553: END
// export function hHackInvincible ; var i ; begin
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25558: LD_ADDR_VAR 0 2
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 21
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 21
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: PUSH
25596: FOR_IN
25597: IFFALSE 25658
// if IsSelected ( i ) then
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 306
25608: IFFALSE 25656
// begin if i in hInvincible then
25610: LD_VAR 0 2
25614: PUSH
25615: LD_EXP 79
25619: IN
25620: IFFALSE 25640
// hInvincible := hInvincible diff i else
25622: LD_ADDR_EXP 79
25626: PUSH
25627: LD_EXP 79
25631: PUSH
25632: LD_VAR 0 2
25636: DIFF
25637: ST_TO_ADDR
25638: GO 25656
// hInvincible := hInvincible union i ;
25640: LD_ADDR_EXP 79
25644: PUSH
25645: LD_EXP 79
25649: PUSH
25650: LD_VAR 0 2
25654: UNION
25655: ST_TO_ADDR
// end ;
25656: GO 25596
25658: POP
25659: POP
// end ;
25660: LD_VAR 0 1
25664: RET
// export function hHackInvisible ; var i , j ; begin
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
25669: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: PUSH
25690: FOR_IN
25691: IFFALSE 25715
// if IsSelected ( i ) then
25693: LD_VAR 0 2
25697: PPUSH
25698: CALL_OW 306
25702: IFFALSE 25713
// ComForceInvisible ( i ) ;
25704: LD_VAR 0 2
25708: PPUSH
25709: CALL_OW 496
25713: GO 25690
25715: POP
25716: POP
// end ;
25717: LD_VAR 0 1
25721: RET
// export function hHackChangeYourSide ; begin
25722: LD_INT 0
25724: PPUSH
// if your_side = 8 then
25725: LD_OWVAR 2
25729: PUSH
25730: LD_INT 8
25732: EQUAL
25733: IFFALSE 25745
// your_side := 0 else
25735: LD_ADDR_OWVAR 2
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
25743: GO 25759
// your_side := your_side + 1 ;
25745: LD_ADDR_OWVAR 2
25749: PUSH
25750: LD_OWVAR 2
25754: PUSH
25755: LD_INT 1
25757: PLUS
25758: ST_TO_ADDR
// end ;
25759: LD_VAR 0 1
25763: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25764: LD_INT 0
25766: PPUSH
25767: PPUSH
25768: PPUSH
// for i in all_units do
25769: LD_ADDR_VAR 0 2
25773: PUSH
25774: LD_OWVAR 3
25778: PUSH
25779: FOR_IN
25780: IFFALSE 25858
// if IsSelected ( i ) then
25782: LD_VAR 0 2
25786: PPUSH
25787: CALL_OW 306
25791: IFFALSE 25856
// begin j := GetSide ( i ) ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL_OW 255
25807: ST_TO_ADDR
// if j = 8 then
25808: LD_VAR 0 3
25812: PUSH
25813: LD_INT 8
25815: EQUAL
25816: IFFALSE 25828
// j := 0 else
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_INT 0
25825: ST_TO_ADDR
25826: GO 25842
// j := j + 1 ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_VAR 0 3
25837: PUSH
25838: LD_INT 1
25840: PLUS
25841: ST_TO_ADDR
// SetSide ( i , j ) ;
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: CALL_OW 235
// end ;
25856: GO 25779
25858: POP
25859: POP
// end ;
25860: LD_VAR 0 1
25864: RET
// export function hHackFog ; begin
25865: LD_INT 0
25867: PPUSH
// FogOff ( true ) ;
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 344
// end ;
25875: LD_VAR 0 1
25879: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25880: LD_INT 0
25882: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25883: LD_VAR 0 1
25887: PPUSH
25888: LD_VAR 0 2
25892: PPUSH
25893: LD_VAR 0 3
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 483
// CenterOnXY ( x , y ) ;
25908: LD_VAR 0 2
25912: PPUSH
25913: LD_VAR 0 3
25917: PPUSH
25918: CALL_OW 84
// end ;
25922: LD_VAR 0 4
25926: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25931: LD_VAR 0 1
25935: NOT
25936: PUSH
25937: LD_VAR 0 2
25941: PPUSH
25942: LD_VAR 0 3
25946: PPUSH
25947: CALL_OW 488
25951: NOT
25952: OR
25953: PUSH
25954: LD_VAR 0 1
25958: PPUSH
25959: CALL_OW 266
25963: PUSH
25964: LD_INT 3
25966: NONEQUAL
25967: PUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 247
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: NOT
25982: AND
25983: OR
25984: IFFALSE 25988
// exit ;
25986: GO 26137
// if GetType ( factory ) = unit_human then
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 247
25997: PUSH
25998: LD_INT 1
26000: EQUAL
26001: IFFALSE 26018
// factory := IsInUnit ( factory ) ;
26003: LD_ADDR_VAR 0 1
26007: PUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 310
26017: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 266
26027: PUSH
26028: LD_INT 3
26030: NONEQUAL
26031: IFFALSE 26035
// exit ;
26033: GO 26137
// if HexInfo ( x , y ) = factory then
26035: LD_VAR 0 2
26039: PPUSH
26040: LD_VAR 0 3
26044: PPUSH
26045: CALL_OW 428
26049: PUSH
26050: LD_VAR 0 1
26054: EQUAL
26055: IFFALSE 26082
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26057: LD_ADDR_EXP 80
26061: PUSH
26062: LD_EXP 80
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_INT 0
26074: PPUSH
26075: CALL_OW 1
26079: ST_TO_ADDR
26080: GO 26133
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26082: LD_ADDR_EXP 80
26086: PUSH
26087: LD_EXP 80
26091: PPUSH
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL_OW 255
26106: PUSH
26107: LD_VAR 0 1
26111: PUSH
26112: LD_VAR 0 2
26116: PUSH
26117: LD_VAR 0 3
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 1
26132: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26133: CALL 26142 0 0
// end ;
26137: LD_VAR 0 4
26141: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
26146: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26147: LD_STRING resetFactoryWaypoint();
26149: PPUSH
26150: CALL_OW 559
// if factoryWaypoints then
26154: LD_EXP 80
26158: IFFALSE 26284
// begin list := PrepareArray ( factoryWaypoints ) ;
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_EXP 80
26169: PPUSH
26170: CALL 73581 0 1
26174: ST_TO_ADDR
// for i := 1 to list do
26175: LD_ADDR_VAR 0 2
26179: PUSH
26180: DOUBLE
26181: LD_INT 1
26183: DEC
26184: ST_TO_ADDR
26185: LD_VAR 0 3
26189: PUSH
26190: FOR_TO
26191: IFFALSE 26282
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26193: LD_STRING setFactoryWaypointXY(
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 2
26205: ARRAY
26206: PUSH
26207: LD_INT 1
26209: ARRAY
26210: STR
26211: PUSH
26212: LD_STRING ,
26214: STR
26215: PUSH
26216: LD_VAR 0 3
26220: PUSH
26221: LD_VAR 0 2
26225: ARRAY
26226: PUSH
26227: LD_INT 2
26229: ARRAY
26230: STR
26231: PUSH
26232: LD_STRING ,
26234: STR
26235: PUSH
26236: LD_VAR 0 3
26240: PUSH
26241: LD_VAR 0 2
26245: ARRAY
26246: PUSH
26247: LD_INT 3
26249: ARRAY
26250: STR
26251: PUSH
26252: LD_STRING ,
26254: STR
26255: PUSH
26256: LD_VAR 0 3
26260: PUSH
26261: LD_VAR 0 2
26265: ARRAY
26266: PUSH
26267: LD_INT 4
26269: ARRAY
26270: STR
26271: PUSH
26272: LD_STRING )
26274: STR
26275: PPUSH
26276: CALL_OW 559
26280: GO 26190
26282: POP
26283: POP
// end ; end ;
26284: LD_VAR 0 1
26288: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26289: LD_INT 0
26291: PPUSH
// if HexInfo ( x , y ) = warehouse then
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_VAR 0 3
26301: PPUSH
26302: CALL_OW 428
26306: PUSH
26307: LD_VAR 0 1
26311: EQUAL
26312: IFFALSE 26339
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26314: LD_ADDR_EXP 81
26318: PUSH
26319: LD_EXP 81
26323: PPUSH
26324: LD_VAR 0 1
26328: PPUSH
26329: LD_INT 0
26331: PPUSH
26332: CALL_OW 1
26336: ST_TO_ADDR
26337: GO 26390
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26339: LD_ADDR_EXP 81
26343: PUSH
26344: LD_EXP 81
26348: PPUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: LD_VAR 0 1
26358: PPUSH
26359: CALL_OW 255
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_VAR 0 2
26373: PUSH
26374: LD_VAR 0 3
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: PPUSH
26385: CALL_OW 1
26389: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26390: CALL 26399 0 0
// end ;
26394: LD_VAR 0 4
26398: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26399: LD_INT 0
26401: PPUSH
26402: PPUSH
26403: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26404: LD_STRING resetWarehouseGatheringPoints();
26406: PPUSH
26407: CALL_OW 559
// if warehouseGatheringPoints then
26411: LD_EXP 81
26415: IFFALSE 26541
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26417: LD_ADDR_VAR 0 3
26421: PUSH
26422: LD_EXP 81
26426: PPUSH
26427: CALL 73581 0 1
26431: ST_TO_ADDR
// for i := 1 to list do
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: DOUBLE
26438: LD_INT 1
26440: DEC
26441: ST_TO_ADDR
26442: LD_VAR 0 3
26446: PUSH
26447: FOR_TO
26448: IFFALSE 26539
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26450: LD_STRING setWarehouseGatheringPointXY(
26452: PUSH
26453: LD_VAR 0 3
26457: PUSH
26458: LD_VAR 0 2
26462: ARRAY
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: STR
26468: PUSH
26469: LD_STRING ,
26471: STR
26472: PUSH
26473: LD_VAR 0 3
26477: PUSH
26478: LD_VAR 0 2
26482: ARRAY
26483: PUSH
26484: LD_INT 2
26486: ARRAY
26487: STR
26488: PUSH
26489: LD_STRING ,
26491: STR
26492: PUSH
26493: LD_VAR 0 3
26497: PUSH
26498: LD_VAR 0 2
26502: ARRAY
26503: PUSH
26504: LD_INT 3
26506: ARRAY
26507: STR
26508: PUSH
26509: LD_STRING ,
26511: STR
26512: PUSH
26513: LD_VAR 0 3
26517: PUSH
26518: LD_VAR 0 2
26522: ARRAY
26523: PUSH
26524: LD_INT 4
26526: ARRAY
26527: STR
26528: PUSH
26529: LD_STRING )
26531: STR
26532: PPUSH
26533: CALL_OW 559
26537: GO 26447
26539: POP
26540: POP
// end ; end ;
26541: LD_VAR 0 1
26545: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26546: LD_EXP 81
26550: IFFALSE 27235
26552: GO 26554
26554: DISABLE
26555: LD_INT 0
26557: PPUSH
26558: PPUSH
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
// begin enable ;
26566: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26567: LD_ADDR_VAR 0 3
26571: PUSH
26572: LD_EXP 81
26576: PPUSH
26577: CALL 73581 0 1
26581: ST_TO_ADDR
// if not list then
26582: LD_VAR 0 3
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 27235
// for i := 1 to list do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: DOUBLE
26597: LD_INT 1
26599: DEC
26600: ST_TO_ADDR
26601: LD_VAR 0 3
26605: PUSH
26606: FOR_TO
26607: IFFALSE 27233
// begin depot := list [ i ] [ 2 ] ;
26609: LD_ADDR_VAR 0 8
26613: PUSH
26614: LD_VAR 0 3
26618: PUSH
26619: LD_VAR 0 1
26623: ARRAY
26624: PUSH
26625: LD_INT 2
26627: ARRAY
26628: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26629: LD_ADDR_VAR 0 5
26633: PUSH
26634: LD_VAR 0 3
26638: PUSH
26639: LD_VAR 0 1
26643: ARRAY
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26649: LD_VAR 0 8
26653: PPUSH
26654: CALL_OW 301
26658: PUSH
26659: LD_VAR 0 5
26663: PUSH
26664: LD_VAR 0 8
26668: PPUSH
26669: CALL_OW 255
26673: NONEQUAL
26674: OR
26675: IFFALSE 26704
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26677: LD_ADDR_EXP 81
26681: PUSH
26682: LD_EXP 81
26686: PPUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 1
26699: ST_TO_ADDR
// exit ;
26700: POP
26701: POP
26702: GO 27235
// end ; x := list [ i ] [ 3 ] ;
26704: LD_ADDR_VAR 0 6
26708: PUSH
26709: LD_VAR 0 3
26713: PUSH
26714: LD_VAR 0 1
26718: ARRAY
26719: PUSH
26720: LD_INT 3
26722: ARRAY
26723: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26724: LD_ADDR_VAR 0 7
26728: PUSH
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PUSH
26740: LD_INT 4
26742: ARRAY
26743: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26744: LD_ADDR_VAR 0 9
26748: PUSH
26749: LD_VAR 0 6
26753: PPUSH
26754: LD_VAR 0 7
26758: PPUSH
26759: LD_INT 16
26761: PPUSH
26762: CALL 72169 0 3
26766: ST_TO_ADDR
// if not cratesNearbyPoint then
26767: LD_VAR 0 9
26771: NOT
26772: IFFALSE 26778
// exit ;
26774: POP
26775: POP
26776: GO 27235
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26778: LD_ADDR_VAR 0 4
26782: PUSH
26783: LD_INT 22
26785: PUSH
26786: LD_VAR 0 5
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 60
26800: PUSH
26801: EMPTY
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 91
26810: PUSH
26811: LD_VAR 0 8
26815: PUSH
26816: LD_INT 6
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 25
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 25
26839: PUSH
26840: LD_INT 16
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 69
26862: PUSH
26863: LD_VAR 0 8
26867: PPUSH
26868: CALL_OW 313
26872: PPUSH
26873: LD_INT 3
26875: PUSH
26876: LD_INT 60
26878: PUSH
26879: EMPTY
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 25
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 25
26901: PUSH
26902: LD_INT 16
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: CALL_OW 72
26922: UNION
26923: ST_TO_ADDR
// if tmp then
26924: LD_VAR 0 4
26928: IFFALSE 27008
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26930: LD_ADDR_VAR 0 4
26934: PUSH
26935: LD_VAR 0 4
26939: PPUSH
26940: LD_INT 3
26942: PPUSH
26943: CALL 70138 0 2
26947: ST_TO_ADDR
// for j in tmp do
26948: LD_ADDR_VAR 0 2
26952: PUSH
26953: LD_VAR 0 4
26957: PUSH
26958: FOR_IN
26959: IFFALSE 27002
// begin if IsInUnit ( j ) then
26961: LD_VAR 0 2
26965: PPUSH
26966: CALL_OW 310
26970: IFFALSE 26981
// ComExit ( j ) ;
26972: LD_VAR 0 2
26976: PPUSH
26977: CALL 70221 0 1
// AddComCollect ( j , x , y ) ;
26981: LD_VAR 0 2
26985: PPUSH
26986: LD_VAR 0 6
26990: PPUSH
26991: LD_VAR 0 7
26995: PPUSH
26996: CALL_OW 177
// end ;
27000: GO 26958
27002: POP
27003: POP
// exit ;
27004: POP
27005: POP
27006: GO 27235
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27008: LD_ADDR_VAR 0 4
27012: PUSH
27013: LD_INT 22
27015: PUSH
27016: LD_VAR 0 5
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 91
27027: PUSH
27028: LD_VAR 0 8
27032: PUSH
27033: LD_INT 8
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: LD_INT 34
27046: PUSH
27047: LD_INT 12
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 34
27056: PUSH
27057: LD_INT 51
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 34
27066: PUSH
27067: LD_INT 32
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 34
27076: PUSH
27077: LD_INT 89
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 69
27100: ST_TO_ADDR
// if tmp then
27101: LD_VAR 0 4
27105: IFFALSE 27231
// begin for j in tmp do
27107: LD_ADDR_VAR 0 2
27111: PUSH
27112: LD_VAR 0 4
27116: PUSH
27117: FOR_IN
27118: IFFALSE 27229
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27120: LD_VAR 0 2
27124: PPUSH
27125: CALL_OW 262
27129: PUSH
27130: LD_INT 3
27132: EQUAL
27133: PUSH
27134: LD_VAR 0 2
27138: PPUSH
27139: CALL_OW 261
27143: PUSH
27144: LD_INT 20
27146: GREATER
27147: OR
27148: PUSH
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 314
27158: NOT
27159: AND
27160: PUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 263
27170: PUSH
27171: LD_INT 1
27173: NONEQUAL
27174: PUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: CALL_OW 311
27184: OR
27185: AND
27186: IFFALSE 27227
// begin ComCollect ( j , x , y ) ;
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_VAR 0 6
27197: PPUSH
27198: LD_VAR 0 7
27202: PPUSH
27203: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 8
27216: PPUSH
27217: CALL_OW 172
// exit ;
27221: POP
27222: POP
27223: POP
27224: POP
27225: GO 27235
// end ;
27227: GO 27117
27229: POP
27230: POP
// end ; end ;
27231: GO 26606
27233: POP
27234: POP
// end ; end_of_file
27235: PPOPN 9
27237: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27238: LD_INT 0
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 264
27253: PUSH
27254: LD_INT 91
27256: EQUAL
27257: IFFALSE 27329
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27259: LD_INT 68
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 255
27271: PPUSH
27272: CALL_OW 321
27276: PUSH
27277: LD_INT 2
27279: EQUAL
27280: IFFALSE 27292
// eff := 70 else
27282: LD_ADDR_VAR 0 4
27286: PUSH
27287: LD_INT 70
27289: ST_TO_ADDR
27290: GO 27300
// eff := 30 ;
27292: LD_ADDR_VAR 0 4
27296: PUSH
27297: LD_INT 30
27299: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 250
27309: PPUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: CALL_OW 251
27319: PPUSH
27320: LD_VAR 0 4
27324: PPUSH
27325: CALL_OW 495
// end ; end ;
27329: LD_VAR 0 2
27333: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27334: LD_INT 0
27336: PPUSH
// end ;
27337: LD_VAR 0 4
27341: RET
// export function SOS_Command ( cmd ) ; begin
27342: LD_INT 0
27344: PPUSH
// end ;
27345: LD_VAR 0 2
27349: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27350: LD_INT 0
27352: PPUSH
// end ;
27353: LD_VAR 0 6
27357: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27358: LD_INT 0
27360: PPUSH
27361: PPUSH
// if not vehicle or not factory then
27362: LD_VAR 0 1
27366: NOT
27367: PUSH
27368: LD_VAR 0 2
27372: NOT
27373: OR
27374: IFFALSE 27378
// exit ;
27376: GO 27609
// if factoryWaypoints >= factory then
27378: LD_EXP 80
27382: PUSH
27383: LD_VAR 0 2
27387: GREATEREQUAL
27388: IFFALSE 27609
// if factoryWaypoints [ factory ] then
27390: LD_EXP 80
27394: PUSH
27395: LD_VAR 0 2
27399: ARRAY
27400: IFFALSE 27609
// begin if GetControl ( vehicle ) = control_manual then
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 263
27411: PUSH
27412: LD_INT 1
27414: EQUAL
27415: IFFALSE 27496
// begin driver := IsDrivenBy ( vehicle ) ;
27417: LD_ADDR_VAR 0 4
27421: PUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 311
27431: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27432: LD_VAR 0 4
27436: PPUSH
27437: LD_EXP 80
27441: PUSH
27442: LD_VAR 0 2
27446: ARRAY
27447: PUSH
27448: LD_INT 3
27450: ARRAY
27451: PPUSH
27452: LD_EXP 80
27456: PUSH
27457: LD_VAR 0 2
27461: ARRAY
27462: PUSH
27463: LD_INT 4
27465: ARRAY
27466: PPUSH
27467: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27471: LD_VAR 0 4
27475: PPUSH
27476: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27480: LD_VAR 0 4
27484: PPUSH
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 180
// end else
27494: GO 27609
// if GetControl ( vehicle ) = control_remote then
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 263
27505: PUSH
27506: LD_INT 2
27508: EQUAL
27509: IFFALSE 27570
// begin wait ( 0 0$2 ) ;
27511: LD_INT 70
27513: PPUSH
27514: CALL_OW 67
// if Connect ( vehicle ) then
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL 40440 0 1
27527: IFFALSE 27568
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27529: LD_VAR 0 1
27533: PPUSH
27534: LD_EXP 80
27538: PUSH
27539: LD_VAR 0 2
27543: ARRAY
27544: PUSH
27545: LD_INT 3
27547: ARRAY
27548: PPUSH
27549: LD_EXP 80
27553: PUSH
27554: LD_VAR 0 2
27558: ARRAY
27559: PUSH
27560: LD_INT 4
27562: ARRAY
27563: PPUSH
27564: CALL_OW 171
// end else
27568: GO 27609
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27570: LD_VAR 0 1
27574: PPUSH
27575: LD_EXP 80
27579: PUSH
27580: LD_VAR 0 2
27584: ARRAY
27585: PUSH
27586: LD_INT 3
27588: ARRAY
27589: PPUSH
27590: LD_EXP 80
27594: PUSH
27595: LD_VAR 0 2
27599: ARRAY
27600: PUSH
27601: LD_INT 4
27603: ARRAY
27604: PPUSH
27605: CALL_OW 171
// end ; end ;
27609: LD_VAR 0 3
27613: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27614: LD_INT 0
27616: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 250
27624: EQUAL
27625: PUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 264
27635: PUSH
27636: LD_INT 81
27638: EQUAL
27639: AND
27640: IFFALSE 27661
// MinerPlaceMine ( unit , x , y ) ;
27642: LD_VAR 0 2
27646: PPUSH
27647: LD_VAR 0 4
27651: PPUSH
27652: LD_VAR 0 5
27656: PPUSH
27657: CALL 30651 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27661: LD_VAR 0 1
27665: PUSH
27666: LD_INT 251
27668: EQUAL
27669: PUSH
27670: LD_VAR 0 2
27674: PPUSH
27675: CALL_OW 264
27679: PUSH
27680: LD_INT 81
27682: EQUAL
27683: AND
27684: IFFALSE 27705
// MinerDetonateMine ( unit , x , y ) ;
27686: LD_VAR 0 2
27690: PPUSH
27691: LD_VAR 0 4
27695: PPUSH
27696: LD_VAR 0 5
27700: PPUSH
27701: CALL 30926 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27705: LD_VAR 0 1
27709: PUSH
27710: LD_INT 252
27712: EQUAL
27713: PUSH
27714: LD_VAR 0 2
27718: PPUSH
27719: CALL_OW 264
27723: PUSH
27724: LD_INT 81
27726: EQUAL
27727: AND
27728: IFFALSE 27749
// MinerCreateMinefield ( unit , x , y ) ;
27730: LD_VAR 0 2
27734: PPUSH
27735: LD_VAR 0 4
27739: PPUSH
27740: LD_VAR 0 5
27744: PPUSH
27745: CALL 31343 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27749: LD_VAR 0 1
27753: PUSH
27754: LD_INT 253
27756: EQUAL
27757: PUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 257
27767: PUSH
27768: LD_INT 5
27770: EQUAL
27771: AND
27772: IFFALSE 27793
// ComBinocular ( unit , x , y ) ;
27774: LD_VAR 0 2
27778: PPUSH
27779: LD_VAR 0 4
27783: PPUSH
27784: LD_VAR 0 5
27788: PPUSH
27789: CALL 31712 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27793: LD_VAR 0 1
27797: PUSH
27798: LD_INT 254
27800: EQUAL
27801: PUSH
27802: LD_VAR 0 2
27806: PPUSH
27807: CALL_OW 264
27811: PUSH
27812: LD_INT 99
27814: EQUAL
27815: AND
27816: PUSH
27817: LD_VAR 0 3
27821: PPUSH
27822: CALL_OW 263
27826: PUSH
27827: LD_INT 3
27829: EQUAL
27830: AND
27831: IFFALSE 27847
// HackDestroyVehicle ( unit , selectedUnit ) ;
27833: LD_VAR 0 2
27837: PPUSH
27838: LD_VAR 0 3
27842: PPUSH
27843: CALL 30015 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27847: LD_VAR 0 1
27851: PUSH
27852: LD_INT 255
27854: EQUAL
27855: PUSH
27856: LD_VAR 0 2
27860: PPUSH
27861: CALL_OW 264
27865: PUSH
27866: LD_INT 14
27868: PUSH
27869: LD_INT 53
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: IN
27876: AND
27877: PUSH
27878: LD_VAR 0 4
27882: PPUSH
27883: LD_VAR 0 5
27887: PPUSH
27888: CALL_OW 488
27892: AND
27893: IFFALSE 27917
// CutTreeXYR ( unit , x , y , 12 ) ;
27895: LD_VAR 0 2
27899: PPUSH
27900: LD_VAR 0 4
27904: PPUSH
27905: LD_VAR 0 5
27909: PPUSH
27910: LD_INT 12
27912: PPUSH
27913: CALL 28012 0 4
// if cmd = 256 then
27917: LD_VAR 0 1
27921: PUSH
27922: LD_INT 256
27924: EQUAL
27925: IFFALSE 27946
// SetFactoryWaypoint ( unit , x , y ) ;
27927: LD_VAR 0 2
27931: PPUSH
27932: LD_VAR 0 4
27936: PPUSH
27937: LD_VAR 0 5
27941: PPUSH
27942: CALL 25927 0 3
// if cmd = 257 then
27946: LD_VAR 0 1
27950: PUSH
27951: LD_INT 257
27953: EQUAL
27954: IFFALSE 27975
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_VAR 0 4
27965: PPUSH
27966: LD_VAR 0 5
27970: PPUSH
27971: CALL 26289 0 3
// if cmd = 258 then
27975: LD_VAR 0 1
27979: PUSH
27980: LD_INT 258
27982: EQUAL
27983: IFFALSE 28007
// BurnTreeXYR ( unit , x , y , 8 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_VAR 0 4
27994: PPUSH
27995: LD_VAR 0 5
27999: PPUSH
28000: LD_INT 8
28002: PPUSH
28003: CALL 28406 0 4
// end ;
28007: LD_VAR 0 6
28011: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28012: LD_INT 0
28014: PPUSH
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
28020: PPUSH
28021: PPUSH
28022: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28023: LD_VAR 0 1
28027: PPUSH
28028: CALL_OW 302
28032: NOT
28033: PUSH
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL_OW 488
28048: NOT
28049: OR
28050: PUSH
28051: LD_VAR 0 4
28055: NOT
28056: OR
28057: IFFALSE 28061
// exit ;
28059: GO 28401
// list := [ ] ;
28061: LD_ADDR_VAR 0 13
28065: PUSH
28066: EMPTY
28067: ST_TO_ADDR
// if x - r < 0 then
28068: LD_VAR 0 2
28072: PUSH
28073: LD_VAR 0 4
28077: MINUS
28078: PUSH
28079: LD_INT 0
28081: LESS
28082: IFFALSE 28094
// min_x := 0 else
28084: LD_ADDR_VAR 0 7
28088: PUSH
28089: LD_INT 0
28091: ST_TO_ADDR
28092: GO 28110
// min_x := x - r ;
28094: LD_ADDR_VAR 0 7
28098: PUSH
28099: LD_VAR 0 2
28103: PUSH
28104: LD_VAR 0 4
28108: MINUS
28109: ST_TO_ADDR
// if y - r < 0 then
28110: LD_VAR 0 3
28114: PUSH
28115: LD_VAR 0 4
28119: MINUS
28120: PUSH
28121: LD_INT 0
28123: LESS
28124: IFFALSE 28136
// min_y := 0 else
28126: LD_ADDR_VAR 0 8
28130: PUSH
28131: LD_INT 0
28133: ST_TO_ADDR
28134: GO 28152
// min_y := y - r ;
28136: LD_ADDR_VAR 0 8
28140: PUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_VAR 0 4
28150: MINUS
28151: ST_TO_ADDR
// max_x := x + r ;
28152: LD_ADDR_VAR 0 9
28156: PUSH
28157: LD_VAR 0 2
28161: PUSH
28162: LD_VAR 0 4
28166: PLUS
28167: ST_TO_ADDR
// max_y := y + r ;
28168: LD_ADDR_VAR 0 10
28172: PUSH
28173: LD_VAR 0 3
28177: PUSH
28178: LD_VAR 0 4
28182: PLUS
28183: ST_TO_ADDR
// for _x = min_x to max_x do
28184: LD_ADDR_VAR 0 11
28188: PUSH
28189: DOUBLE
28190: LD_VAR 0 7
28194: DEC
28195: ST_TO_ADDR
28196: LD_VAR 0 9
28200: PUSH
28201: FOR_TO
28202: IFFALSE 28319
// for _y = min_y to max_y do
28204: LD_ADDR_VAR 0 12
28208: PUSH
28209: DOUBLE
28210: LD_VAR 0 8
28214: DEC
28215: ST_TO_ADDR
28216: LD_VAR 0 10
28220: PUSH
28221: FOR_TO
28222: IFFALSE 28315
// begin if not ValidHex ( _x , _y ) then
28224: LD_VAR 0 11
28228: PPUSH
28229: LD_VAR 0 12
28233: PPUSH
28234: CALL_OW 488
28238: NOT
28239: IFFALSE 28243
// continue ;
28241: GO 28221
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28243: LD_VAR 0 11
28247: PPUSH
28248: LD_VAR 0 12
28252: PPUSH
28253: CALL_OW 351
28257: PUSH
28258: LD_VAR 0 11
28262: PPUSH
28263: LD_VAR 0 12
28267: PPUSH
28268: CALL_OW 554
28272: AND
28273: IFFALSE 28313
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28275: LD_ADDR_VAR 0 13
28279: PUSH
28280: LD_VAR 0 13
28284: PPUSH
28285: LD_VAR 0 13
28289: PUSH
28290: LD_INT 1
28292: PLUS
28293: PPUSH
28294: LD_VAR 0 11
28298: PUSH
28299: LD_VAR 0 12
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PPUSH
28308: CALL_OW 2
28312: ST_TO_ADDR
// end ;
28313: GO 28221
28315: POP
28316: POP
28317: GO 28201
28319: POP
28320: POP
// if not list then
28321: LD_VAR 0 13
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28401
// for i in list do
28330: LD_ADDR_VAR 0 6
28334: PUSH
28335: LD_VAR 0 13
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28399
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_STRING M
28350: PUSH
28351: LD_VAR 0 6
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PUSH
28360: LD_VAR 0 6
28364: PUSH
28365: LD_INT 2
28367: ARRAY
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: PPUSH
28393: CALL_OW 447
28397: GO 28340
28399: POP
28400: POP
// end ;
28401: LD_VAR 0 5
28405: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28406: LD_INT 0
28408: PPUSH
28409: PPUSH
28410: PPUSH
28411: PPUSH
28412: PPUSH
28413: PPUSH
28414: PPUSH
28415: PPUSH
28416: PPUSH
28417: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 302
28427: NOT
28428: PUSH
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 488
28443: NOT
28444: OR
28445: PUSH
28446: LD_VAR 0 4
28450: NOT
28451: OR
28452: IFFALSE 28456
// exit ;
28454: GO 28969
// list := [ ] ;
28456: LD_ADDR_VAR 0 13
28460: PUSH
28461: EMPTY
28462: ST_TO_ADDR
// if x - r < 0 then
28463: LD_VAR 0 2
28467: PUSH
28468: LD_VAR 0 4
28472: MINUS
28473: PUSH
28474: LD_INT 0
28476: LESS
28477: IFFALSE 28489
// min_x := 0 else
28479: LD_ADDR_VAR 0 7
28483: PUSH
28484: LD_INT 0
28486: ST_TO_ADDR
28487: GO 28505
// min_x := x - r ;
28489: LD_ADDR_VAR 0 7
28493: PUSH
28494: LD_VAR 0 2
28498: PUSH
28499: LD_VAR 0 4
28503: MINUS
28504: ST_TO_ADDR
// if y - r < 0 then
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 4
28514: MINUS
28515: PUSH
28516: LD_INT 0
28518: LESS
28519: IFFALSE 28531
// min_y := 0 else
28521: LD_ADDR_VAR 0 8
28525: PUSH
28526: LD_INT 0
28528: ST_TO_ADDR
28529: GO 28547
// min_y := y - r ;
28531: LD_ADDR_VAR 0 8
28535: PUSH
28536: LD_VAR 0 3
28540: PUSH
28541: LD_VAR 0 4
28545: MINUS
28546: ST_TO_ADDR
// max_x := x + r ;
28547: LD_ADDR_VAR 0 9
28551: PUSH
28552: LD_VAR 0 2
28556: PUSH
28557: LD_VAR 0 4
28561: PLUS
28562: ST_TO_ADDR
// max_y := y + r ;
28563: LD_ADDR_VAR 0 10
28567: PUSH
28568: LD_VAR 0 3
28572: PUSH
28573: LD_VAR 0 4
28577: PLUS
28578: ST_TO_ADDR
// for _x = min_x to max_x do
28579: LD_ADDR_VAR 0 11
28583: PUSH
28584: DOUBLE
28585: LD_VAR 0 7
28589: DEC
28590: ST_TO_ADDR
28591: LD_VAR 0 9
28595: PUSH
28596: FOR_TO
28597: IFFALSE 28714
// for _y = min_y to max_y do
28599: LD_ADDR_VAR 0 12
28603: PUSH
28604: DOUBLE
28605: LD_VAR 0 8
28609: DEC
28610: ST_TO_ADDR
28611: LD_VAR 0 10
28615: PUSH
28616: FOR_TO
28617: IFFALSE 28710
// begin if not ValidHex ( _x , _y ) then
28619: LD_VAR 0 11
28623: PPUSH
28624: LD_VAR 0 12
28628: PPUSH
28629: CALL_OW 488
28633: NOT
28634: IFFALSE 28638
// continue ;
28636: GO 28616
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28638: LD_VAR 0 11
28642: PPUSH
28643: LD_VAR 0 12
28647: PPUSH
28648: CALL_OW 351
28652: PUSH
28653: LD_VAR 0 11
28657: PPUSH
28658: LD_VAR 0 12
28662: PPUSH
28663: CALL_OW 554
28667: AND
28668: IFFALSE 28708
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28670: LD_ADDR_VAR 0 13
28674: PUSH
28675: LD_VAR 0 13
28679: PPUSH
28680: LD_VAR 0 13
28684: PUSH
28685: LD_INT 1
28687: PLUS
28688: PPUSH
28689: LD_VAR 0 11
28693: PUSH
28694: LD_VAR 0 12
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PPUSH
28703: CALL_OW 2
28707: ST_TO_ADDR
// end ;
28708: GO 28616
28710: POP
28711: POP
28712: GO 28596
28714: POP
28715: POP
// if not list then
28716: LD_VAR 0 13
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28969
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28725: LD_ADDR_VAR 0 13
28729: PUSH
28730: LD_VAR 0 1
28734: PPUSH
28735: LD_VAR 0 13
28739: PPUSH
28740: LD_INT 1
28742: PPUSH
28743: LD_INT 1
28745: PPUSH
28746: CALL 37582 0 4
28750: ST_TO_ADDR
// ComStop ( flame ) ;
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 141
// for i in list do
28760: LD_ADDR_VAR 0 6
28764: PUSH
28765: LD_VAR 0 13
28769: PUSH
28770: FOR_IN
28771: IFFALSE 28802
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_VAR 0 6
28782: PUSH
28783: LD_INT 1
28785: ARRAY
28786: PPUSH
28787: LD_VAR 0 6
28791: PUSH
28792: LD_INT 2
28794: ARRAY
28795: PPUSH
28796: CALL_OW 176
28800: GO 28770
28802: POP
28803: POP
// repeat wait ( 0 0$1 ) ;
28804: LD_INT 35
28806: PPUSH
28807: CALL_OW 67
// task := GetTaskList ( flame ) ;
28811: LD_ADDR_VAR 0 14
28815: PUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 437
28825: ST_TO_ADDR
// if not task then
28826: LD_VAR 0 14
28830: NOT
28831: IFFALSE 28835
// exit ;
28833: GO 28969
// if task [ 1 ] [ 1 ] <> | then
28835: LD_VAR 0 14
28839: PUSH
28840: LD_INT 1
28842: ARRAY
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PUSH
28848: LD_STRING |
28850: NONEQUAL
28851: IFFALSE 28855
// exit ;
28853: GO 28969
// _x := task [ 1 ] [ 2 ] ;
28855: LD_ADDR_VAR 0 11
28859: PUSH
28860: LD_VAR 0 14
28864: PUSH
28865: LD_INT 1
28867: ARRAY
28868: PUSH
28869: LD_INT 2
28871: ARRAY
28872: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28873: LD_ADDR_VAR 0 12
28877: PUSH
28878: LD_VAR 0 14
28882: PUSH
28883: LD_INT 1
28885: ARRAY
28886: PUSH
28887: LD_INT 3
28889: ARRAY
28890: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28891: LD_VAR 0 11
28895: PPUSH
28896: LD_VAR 0 12
28900: PPUSH
28901: CALL_OW 351
28905: NOT
28906: PUSH
28907: LD_VAR 0 11
28911: PPUSH
28912: LD_VAR 0 12
28916: PPUSH
28917: CALL_OW 554
28921: NOT
28922: OR
28923: IFFALSE 28957
// begin task := Delete ( task , 1 ) ;
28925: LD_ADDR_VAR 0 14
28929: PUSH
28930: LD_VAR 0 14
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: CALL_OW 3
28942: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28943: LD_VAR 0 1
28947: PPUSH
28948: LD_VAR 0 14
28952: PPUSH
28953: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 314
28966: NOT
28967: IFFALSE 28804
// end ;
28969: LD_VAR 0 5
28973: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28974: LD_EXP 83
28978: NOT
28979: IFFALSE 29029
28981: GO 28983
28983: DISABLE
// begin initHack := true ;
28984: LD_ADDR_EXP 83
28988: PUSH
28989: LD_INT 1
28991: ST_TO_ADDR
// hackTanks := [ ] ;
28992: LD_ADDR_EXP 84
28996: PUSH
28997: EMPTY
28998: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28999: LD_ADDR_EXP 85
29003: PUSH
29004: EMPTY
29005: ST_TO_ADDR
// hackLimit := 3 ;
29006: LD_ADDR_EXP 86
29010: PUSH
29011: LD_INT 3
29013: ST_TO_ADDR
// hackDist := 12 ;
29014: LD_ADDR_EXP 87
29018: PUSH
29019: LD_INT 12
29021: ST_TO_ADDR
// hackCounter := [ ] ;
29022: LD_ADDR_EXP 88
29026: PUSH
29027: EMPTY
29028: ST_TO_ADDR
// end ;
29029: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29030: LD_EXP 83
29034: PUSH
29035: LD_INT 34
29037: PUSH
29038: LD_INT 99
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PPUSH
29045: CALL_OW 69
29049: AND
29050: IFFALSE 29303
29052: GO 29054
29054: DISABLE
29055: LD_INT 0
29057: PPUSH
29058: PPUSH
// begin enable ;
29059: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29060: LD_ADDR_VAR 0 1
29064: PUSH
29065: LD_INT 34
29067: PUSH
29068: LD_INT 99
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PPUSH
29075: CALL_OW 69
29079: PUSH
29080: FOR_IN
29081: IFFALSE 29301
// begin if not i in hackTanks then
29083: LD_VAR 0 1
29087: PUSH
29088: LD_EXP 84
29092: IN
29093: NOT
29094: IFFALSE 29177
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29096: LD_ADDR_EXP 84
29100: PUSH
29101: LD_EXP 84
29105: PPUSH
29106: LD_EXP 84
29110: PUSH
29111: LD_INT 1
29113: PLUS
29114: PPUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: CALL_OW 1
29124: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29125: LD_ADDR_EXP 85
29129: PUSH
29130: LD_EXP 85
29134: PPUSH
29135: LD_EXP 85
29139: PUSH
29140: LD_INT 1
29142: PLUS
29143: PPUSH
29144: EMPTY
29145: PPUSH
29146: CALL_OW 1
29150: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29151: LD_ADDR_EXP 88
29155: PUSH
29156: LD_EXP 88
29160: PPUSH
29161: LD_EXP 88
29165: PUSH
29166: LD_INT 1
29168: PLUS
29169: PPUSH
29170: EMPTY
29171: PPUSH
29172: CALL_OW 1
29176: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 302
29186: NOT
29187: IFFALSE 29200
// begin HackUnlinkAll ( i ) ;
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL 29306 0 1
// continue ;
29198: GO 29080
// end ; HackCheckCapturedStatus ( i ) ;
29200: LD_VAR 0 1
29204: PPUSH
29205: CALL 29749 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29209: LD_ADDR_VAR 0 2
29213: PUSH
29214: LD_INT 81
29216: PUSH
29217: LD_VAR 0 1
29221: PPUSH
29222: CALL_OW 255
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 33
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 91
29243: PUSH
29244: LD_VAR 0 1
29248: PUSH
29249: LD_EXP 87
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 50
29261: PUSH
29262: EMPTY
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: PPUSH
29271: CALL_OW 69
29275: ST_TO_ADDR
// if not tmp then
29276: LD_VAR 0 2
29280: NOT
29281: IFFALSE 29285
// continue ;
29283: GO 29080
// HackLink ( i , tmp ) ;
29285: LD_VAR 0 1
29289: PPUSH
29290: LD_VAR 0 2
29294: PPUSH
29295: CALL 29442 0 2
// end ;
29299: GO 29080
29301: POP
29302: POP
// end ;
29303: PPOPN 2
29305: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
// if not hack in hackTanks then
29311: LD_VAR 0 1
29315: PUSH
29316: LD_EXP 84
29320: IN
29321: NOT
29322: IFFALSE 29326
// exit ;
29324: GO 29437
// index := GetElementIndex ( hackTanks , hack ) ;
29326: LD_ADDR_VAR 0 4
29330: PUSH
29331: LD_EXP 84
29335: PPUSH
29336: LD_VAR 0 1
29340: PPUSH
29341: CALL 36879 0 2
29345: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29346: LD_EXP 85
29350: PUSH
29351: LD_VAR 0 4
29355: ARRAY
29356: IFFALSE 29437
// begin for i in hackTanksCaptured [ index ] do
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_EXP 85
29367: PUSH
29368: LD_VAR 0 4
29372: ARRAY
29373: PUSH
29374: FOR_IN
29375: IFFALSE 29401
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29377: LD_VAR 0 3
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 2
29393: ARRAY
29394: PPUSH
29395: CALL_OW 235
29399: GO 29374
29401: POP
29402: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29403: LD_ADDR_EXP 85
29407: PUSH
29408: LD_EXP 85
29412: PPUSH
29413: LD_VAR 0 4
29417: PPUSH
29418: EMPTY
29419: PPUSH
29420: CALL_OW 1
29424: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29425: LD_VAR 0 1
29429: PPUSH
29430: LD_INT 0
29432: PPUSH
29433: CALL_OW 505
// end ; end ;
29437: LD_VAR 0 2
29441: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29442: LD_INT 0
29444: PPUSH
29445: PPUSH
29446: PPUSH
// if not hack in hackTanks or not vehicles then
29447: LD_VAR 0 1
29451: PUSH
29452: LD_EXP 84
29456: IN
29457: NOT
29458: PUSH
29459: LD_VAR 0 2
29463: NOT
29464: OR
29465: IFFALSE 29469
// exit ;
29467: GO 29744
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29469: LD_ADDR_VAR 0 2
29473: PUSH
29474: LD_VAR 0 1
29478: PPUSH
29479: LD_VAR 0 2
29483: PPUSH
29484: LD_INT 1
29486: PPUSH
29487: LD_INT 1
29489: PPUSH
29490: CALL 37529 0 4
29494: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29495: LD_ADDR_VAR 0 5
29499: PUSH
29500: LD_EXP 84
29504: PPUSH
29505: LD_VAR 0 1
29509: PPUSH
29510: CALL 36879 0 2
29514: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29515: LD_EXP 85
29519: PUSH
29520: LD_VAR 0 5
29524: ARRAY
29525: PUSH
29526: LD_EXP 86
29530: LESS
29531: IFFALSE 29720
// begin for i := 1 to vehicles do
29533: LD_ADDR_VAR 0 4
29537: PUSH
29538: DOUBLE
29539: LD_INT 1
29541: DEC
29542: ST_TO_ADDR
29543: LD_VAR 0 2
29547: PUSH
29548: FOR_TO
29549: IFFALSE 29718
// begin if hackTanksCaptured [ index ] = hackLimit then
29551: LD_EXP 85
29555: PUSH
29556: LD_VAR 0 5
29560: ARRAY
29561: PUSH
29562: LD_EXP 86
29566: EQUAL
29567: IFFALSE 29571
// break ;
29569: GO 29718
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29571: LD_ADDR_EXP 88
29575: PUSH
29576: LD_EXP 88
29580: PPUSH
29581: LD_VAR 0 5
29585: PPUSH
29586: LD_EXP 88
29590: PUSH
29591: LD_VAR 0 5
29595: ARRAY
29596: PUSH
29597: LD_INT 1
29599: PLUS
29600: PPUSH
29601: CALL_OW 1
29605: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29606: LD_ADDR_EXP 85
29610: PUSH
29611: LD_EXP 85
29615: PPUSH
29616: LD_VAR 0 5
29620: PUSH
29621: LD_EXP 85
29625: PUSH
29626: LD_VAR 0 5
29630: ARRAY
29631: PUSH
29632: LD_INT 1
29634: PLUS
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PPUSH
29640: LD_VAR 0 2
29644: PUSH
29645: LD_VAR 0 4
29649: ARRAY
29650: PUSH
29651: LD_VAR 0 2
29655: PUSH
29656: LD_VAR 0 4
29660: ARRAY
29661: PPUSH
29662: CALL_OW 255
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PPUSH
29671: CALL 37094 0 3
29675: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29676: LD_VAR 0 2
29680: PUSH
29681: LD_VAR 0 4
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 255
29696: PPUSH
29697: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29701: LD_VAR 0 2
29705: PUSH
29706: LD_VAR 0 4
29710: ARRAY
29711: PPUSH
29712: CALL_OW 141
// end ;
29716: GO 29548
29718: POP
29719: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29720: LD_VAR 0 1
29724: PPUSH
29725: LD_EXP 85
29729: PUSH
29730: LD_VAR 0 5
29734: ARRAY
29735: PUSH
29736: LD_INT 0
29738: PLUS
29739: PPUSH
29740: CALL_OW 505
// end ;
29744: LD_VAR 0 3
29748: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
// if not hack in hackTanks then
29755: LD_VAR 0 1
29759: PUSH
29760: LD_EXP 84
29764: IN
29765: NOT
29766: IFFALSE 29770
// exit ;
29768: GO 30010
// index := GetElementIndex ( hackTanks , hack ) ;
29770: LD_ADDR_VAR 0 4
29774: PUSH
29775: LD_EXP 84
29779: PPUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL 36879 0 2
29789: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: DOUBLE
29796: LD_EXP 85
29800: PUSH
29801: LD_VAR 0 4
29805: ARRAY
29806: INC
29807: ST_TO_ADDR
29808: LD_INT 1
29810: PUSH
29811: FOR_DOWNTO
29812: IFFALSE 29984
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29814: LD_ADDR_VAR 0 5
29818: PUSH
29819: LD_EXP 85
29823: PUSH
29824: LD_VAR 0 4
29828: ARRAY
29829: PUSH
29830: LD_VAR 0 3
29834: ARRAY
29835: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29836: LD_VAR 0 5
29840: PUSH
29841: LD_INT 1
29843: ARRAY
29844: PPUSH
29845: CALL_OW 302
29849: NOT
29850: PUSH
29851: LD_VAR 0 5
29855: PUSH
29856: LD_INT 1
29858: ARRAY
29859: PPUSH
29860: CALL_OW 255
29864: PUSH
29865: LD_VAR 0 1
29869: PPUSH
29870: CALL_OW 255
29874: NONEQUAL
29875: OR
29876: IFFALSE 29982
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29878: LD_VAR 0 5
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: CALL_OW 305
29891: PUSH
29892: LD_VAR 0 5
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: CALL_OW 255
29905: PUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: CALL_OW 255
29915: EQUAL
29916: AND
29917: IFFALSE 29941
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29919: LD_VAR 0 5
29923: PUSH
29924: LD_INT 1
29926: ARRAY
29927: PPUSH
29928: LD_VAR 0 5
29932: PUSH
29933: LD_INT 2
29935: ARRAY
29936: PPUSH
29937: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29941: LD_ADDR_EXP 85
29945: PUSH
29946: LD_EXP 85
29950: PPUSH
29951: LD_VAR 0 4
29955: PPUSH
29956: LD_EXP 85
29960: PUSH
29961: LD_VAR 0 4
29965: ARRAY
29966: PPUSH
29967: LD_VAR 0 3
29971: PPUSH
29972: CALL_OW 3
29976: PPUSH
29977: CALL_OW 1
29981: ST_TO_ADDR
// end ; end ;
29982: GO 29811
29984: POP
29985: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29986: LD_VAR 0 1
29990: PPUSH
29991: LD_EXP 85
29995: PUSH
29996: LD_VAR 0 4
30000: ARRAY
30001: PUSH
30002: LD_INT 0
30004: PLUS
30005: PPUSH
30006: CALL_OW 505
// end ;
30010: LD_VAR 0 2
30014: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30015: LD_INT 0
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
// if not hack in hackTanks then
30021: LD_VAR 0 1
30025: PUSH
30026: LD_EXP 84
30030: IN
30031: NOT
30032: IFFALSE 30036
// exit ;
30034: GO 30121
// index := GetElementIndex ( hackTanks , hack ) ;
30036: LD_ADDR_VAR 0 5
30040: PUSH
30041: LD_EXP 84
30045: PPUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL 36879 0 2
30055: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30056: LD_ADDR_VAR 0 4
30060: PUSH
30061: DOUBLE
30062: LD_INT 1
30064: DEC
30065: ST_TO_ADDR
30066: LD_EXP 85
30070: PUSH
30071: LD_VAR 0 5
30075: ARRAY
30076: PUSH
30077: FOR_TO
30078: IFFALSE 30119
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30080: LD_EXP 85
30084: PUSH
30085: LD_VAR 0 5
30089: ARRAY
30090: PUSH
30091: LD_VAR 0 4
30095: ARRAY
30096: PUSH
30097: LD_INT 1
30099: ARRAY
30100: PUSH
30101: LD_VAR 0 2
30105: EQUAL
30106: IFFALSE 30117
// KillUnit ( vehicle ) ;
30108: LD_VAR 0 2
30112: PPUSH
30113: CALL_OW 66
30117: GO 30077
30119: POP
30120: POP
// end ;
30121: LD_VAR 0 3
30125: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30126: LD_EXP 89
30130: NOT
30131: IFFALSE 30166
30133: GO 30135
30135: DISABLE
// begin initMiner := true ;
30136: LD_ADDR_EXP 89
30140: PUSH
30141: LD_INT 1
30143: ST_TO_ADDR
// minersList := [ ] ;
30144: LD_ADDR_EXP 90
30148: PUSH
30149: EMPTY
30150: ST_TO_ADDR
// minerMinesList := [ ] ;
30151: LD_ADDR_EXP 91
30155: PUSH
30156: EMPTY
30157: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30158: LD_ADDR_EXP 92
30162: PUSH
30163: LD_INT 5
30165: ST_TO_ADDR
// end ;
30166: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30167: LD_EXP 89
30171: PUSH
30172: LD_INT 34
30174: PUSH
30175: LD_INT 81
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 69
30186: AND
30187: IFFALSE 30648
30189: GO 30191
30191: DISABLE
30192: LD_INT 0
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
// begin enable ;
30198: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30199: LD_ADDR_VAR 0 1
30203: PUSH
30204: LD_INT 34
30206: PUSH
30207: LD_INT 81
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PPUSH
30214: CALL_OW 69
30218: PUSH
30219: FOR_IN
30220: IFFALSE 30292
// begin if not i in minersList then
30222: LD_VAR 0 1
30226: PUSH
30227: LD_EXP 90
30231: IN
30232: NOT
30233: IFFALSE 30290
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30235: LD_ADDR_EXP 90
30239: PUSH
30240: LD_EXP 90
30244: PPUSH
30245: LD_EXP 90
30249: PUSH
30250: LD_INT 1
30252: PLUS
30253: PPUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 1
30263: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30264: LD_ADDR_EXP 91
30268: PUSH
30269: LD_EXP 91
30273: PPUSH
30274: LD_EXP 91
30278: PUSH
30279: LD_INT 1
30281: PLUS
30282: PPUSH
30283: EMPTY
30284: PPUSH
30285: CALL_OW 1
30289: ST_TO_ADDR
// end end ;
30290: GO 30219
30292: POP
30293: POP
// for i := minerMinesList downto 1 do
30294: LD_ADDR_VAR 0 1
30298: PUSH
30299: DOUBLE
30300: LD_EXP 91
30304: INC
30305: ST_TO_ADDR
30306: LD_INT 1
30308: PUSH
30309: FOR_DOWNTO
30310: IFFALSE 30646
// begin if IsLive ( minersList [ i ] ) then
30312: LD_EXP 90
30316: PUSH
30317: LD_VAR 0 1
30321: ARRAY
30322: PPUSH
30323: CALL_OW 300
30327: IFFALSE 30355
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30329: LD_EXP 90
30333: PUSH
30334: LD_VAR 0 1
30338: ARRAY
30339: PPUSH
30340: LD_EXP 91
30344: PUSH
30345: LD_VAR 0 1
30349: ARRAY
30350: PPUSH
30351: CALL_OW 505
// if not minerMinesList [ i ] then
30355: LD_EXP 91
30359: PUSH
30360: LD_VAR 0 1
30364: ARRAY
30365: NOT
30366: IFFALSE 30370
// continue ;
30368: GO 30309
// for j := minerMinesList [ i ] downto 1 do
30370: LD_ADDR_VAR 0 2
30374: PUSH
30375: DOUBLE
30376: LD_EXP 91
30380: PUSH
30381: LD_VAR 0 1
30385: ARRAY
30386: INC
30387: ST_TO_ADDR
30388: LD_INT 1
30390: PUSH
30391: FOR_DOWNTO
30392: IFFALSE 30642
// begin side := GetSide ( minersList [ i ] ) ;
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: LD_EXP 90
30403: PUSH
30404: LD_VAR 0 1
30408: ARRAY
30409: PPUSH
30410: CALL_OW 255
30414: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_EXP 91
30424: PUSH
30425: LD_VAR 0 1
30429: ARRAY
30430: PUSH
30431: LD_VAR 0 2
30435: ARRAY
30436: PUSH
30437: LD_INT 1
30439: ARRAY
30440: PPUSH
30441: LD_EXP 91
30445: PUSH
30446: LD_VAR 0 1
30450: ARRAY
30451: PUSH
30452: LD_VAR 0 2
30456: ARRAY
30457: PUSH
30458: LD_INT 2
30460: ARRAY
30461: PPUSH
30462: CALL_OW 428
30466: ST_TO_ADDR
// if not tmp then
30467: LD_VAR 0 4
30471: NOT
30472: IFFALSE 30476
// continue ;
30474: GO 30391
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30476: LD_VAR 0 4
30480: PUSH
30481: LD_INT 81
30483: PUSH
30484: LD_VAR 0 3
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PPUSH
30493: CALL_OW 69
30497: IN
30498: PUSH
30499: LD_EXP 91
30503: PUSH
30504: LD_VAR 0 1
30508: ARRAY
30509: PUSH
30510: LD_VAR 0 2
30514: ARRAY
30515: PUSH
30516: LD_INT 1
30518: ARRAY
30519: PPUSH
30520: LD_EXP 91
30524: PUSH
30525: LD_VAR 0 1
30529: ARRAY
30530: PUSH
30531: LD_VAR 0 2
30535: ARRAY
30536: PUSH
30537: LD_INT 2
30539: ARRAY
30540: PPUSH
30541: CALL_OW 458
30545: AND
30546: IFFALSE 30640
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30548: LD_EXP 91
30552: PUSH
30553: LD_VAR 0 1
30557: ARRAY
30558: PUSH
30559: LD_VAR 0 2
30563: ARRAY
30564: PUSH
30565: LD_INT 1
30567: ARRAY
30568: PPUSH
30569: LD_EXP 91
30573: PUSH
30574: LD_VAR 0 1
30578: ARRAY
30579: PUSH
30580: LD_VAR 0 2
30584: ARRAY
30585: PUSH
30586: LD_INT 2
30588: ARRAY
30589: PPUSH
30590: LD_VAR 0 3
30594: PPUSH
30595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30599: LD_ADDR_EXP 91
30603: PUSH
30604: LD_EXP 91
30608: PPUSH
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_EXP 91
30618: PUSH
30619: LD_VAR 0 1
30623: ARRAY
30624: PPUSH
30625: LD_VAR 0 2
30629: PPUSH
30630: CALL_OW 3
30634: PPUSH
30635: CALL_OW 1
30639: ST_TO_ADDR
// end ; end ;
30640: GO 30391
30642: POP
30643: POP
// end ;
30644: GO 30309
30646: POP
30647: POP
// end ;
30648: PPOPN 4
30650: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
// result := false ;
30655: LD_ADDR_VAR 0 4
30659: PUSH
30660: LD_INT 0
30662: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 264
30672: PUSH
30673: LD_INT 81
30675: EQUAL
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30921
// index := GetElementIndex ( minersList , unit ) ;
30681: LD_ADDR_VAR 0 5
30685: PUSH
30686: LD_EXP 90
30690: PPUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL 36879 0 2
30700: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30701: LD_EXP 91
30705: PUSH
30706: LD_VAR 0 5
30710: ARRAY
30711: PUSH
30712: LD_EXP 92
30716: GREATEREQUAL
30717: IFFALSE 30721
// exit ;
30719: GO 30921
// ComMoveXY ( unit , x , y ) ;
30721: LD_VAR 0 1
30725: PPUSH
30726: LD_VAR 0 2
30730: PPUSH
30731: LD_VAR 0 3
30735: PPUSH
30736: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30740: LD_INT 35
30742: PPUSH
30743: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30747: LD_VAR 0 1
30751: PPUSH
30752: LD_VAR 0 2
30756: PPUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: CALL 68620 0 3
30766: NOT
30767: PUSH
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 314
30777: AND
30778: IFFALSE 30782
// exit ;
30780: GO 30921
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: CALL_OW 428
30796: PUSH
30797: LD_VAR 0 1
30801: EQUAL
30802: PUSH
30803: LD_VAR 0 1
30807: PPUSH
30808: CALL_OW 314
30812: NOT
30813: AND
30814: IFFALSE 30740
// PlaySoundXY ( x , y , PlantMine ) ;
30816: LD_VAR 0 2
30820: PPUSH
30821: LD_VAR 0 3
30825: PPUSH
30826: LD_STRING PlantMine
30828: PPUSH
30829: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30833: LD_VAR 0 2
30837: PPUSH
30838: LD_VAR 0 3
30842: PPUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 255
30852: PPUSH
30853: LD_INT 0
30855: PPUSH
30856: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30860: LD_ADDR_EXP 91
30864: PUSH
30865: LD_EXP 91
30869: PPUSH
30870: LD_VAR 0 5
30874: PUSH
30875: LD_EXP 91
30879: PUSH
30880: LD_VAR 0 5
30884: ARRAY
30885: PUSH
30886: LD_INT 1
30888: PLUS
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PPUSH
30894: LD_VAR 0 2
30898: PUSH
30899: LD_VAR 0 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL 37094 0 3
30912: ST_TO_ADDR
// result := true ;
30913: LD_ADDR_VAR 0 4
30917: PUSH
30918: LD_INT 1
30920: ST_TO_ADDR
// end ;
30921: LD_VAR 0 4
30925: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
30930: PPUSH
// if not unit in minersList then
30931: LD_VAR 0 1
30935: PUSH
30936: LD_EXP 90
30940: IN
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31338
// index := GetElementIndex ( minersList , unit ) ;
30946: LD_ADDR_VAR 0 6
30950: PUSH
30951: LD_EXP 90
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL 36879 0 2
30965: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30966: LD_ADDR_VAR 0 5
30970: PUSH
30971: DOUBLE
30972: LD_EXP 91
30976: PUSH
30977: LD_VAR 0 6
30981: ARRAY
30982: INC
30983: ST_TO_ADDR
30984: LD_INT 1
30986: PUSH
30987: FOR_DOWNTO
30988: IFFALSE 31149
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30990: LD_EXP 91
30994: PUSH
30995: LD_VAR 0 6
30999: ARRAY
31000: PUSH
31001: LD_VAR 0 5
31005: ARRAY
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: PUSH
31011: LD_VAR 0 2
31015: EQUAL
31016: PUSH
31017: LD_EXP 91
31021: PUSH
31022: LD_VAR 0 6
31026: ARRAY
31027: PUSH
31028: LD_VAR 0 5
31032: ARRAY
31033: PUSH
31034: LD_INT 2
31036: ARRAY
31037: PUSH
31038: LD_VAR 0 3
31042: EQUAL
31043: AND
31044: IFFALSE 31147
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31046: LD_EXP 91
31050: PUSH
31051: LD_VAR 0 6
31055: ARRAY
31056: PUSH
31057: LD_VAR 0 5
31061: ARRAY
31062: PUSH
31063: LD_INT 1
31065: ARRAY
31066: PPUSH
31067: LD_EXP 91
31071: PUSH
31072: LD_VAR 0 6
31076: ARRAY
31077: PUSH
31078: LD_VAR 0 5
31082: ARRAY
31083: PUSH
31084: LD_INT 2
31086: ARRAY
31087: PPUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 255
31097: PPUSH
31098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31102: LD_ADDR_EXP 91
31106: PUSH
31107: LD_EXP 91
31111: PPUSH
31112: LD_VAR 0 6
31116: PPUSH
31117: LD_EXP 91
31121: PUSH
31122: LD_VAR 0 6
31126: ARRAY
31127: PPUSH
31128: LD_VAR 0 5
31132: PPUSH
31133: CALL_OW 3
31137: PPUSH
31138: CALL_OW 1
31142: ST_TO_ADDR
// exit ;
31143: POP
31144: POP
31145: GO 31338
// end ; end ;
31147: GO 30987
31149: POP
31150: POP
// for i := minerMinesList [ index ] downto 1 do
31151: LD_ADDR_VAR 0 5
31155: PUSH
31156: DOUBLE
31157: LD_EXP 91
31161: PUSH
31162: LD_VAR 0 6
31166: ARRAY
31167: INC
31168: ST_TO_ADDR
31169: LD_INT 1
31171: PUSH
31172: FOR_DOWNTO
31173: IFFALSE 31336
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31175: LD_EXP 91
31179: PUSH
31180: LD_VAR 0 6
31184: ARRAY
31185: PUSH
31186: LD_VAR 0 5
31190: ARRAY
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: LD_EXP 91
31200: PUSH
31201: LD_VAR 0 6
31205: ARRAY
31206: PUSH
31207: LD_VAR 0 5
31211: ARRAY
31212: PUSH
31213: LD_INT 2
31215: ARRAY
31216: PPUSH
31217: LD_VAR 0 2
31221: PPUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: CALL_OW 298
31231: PUSH
31232: LD_INT 6
31234: LESS
31235: IFFALSE 31334
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31237: LD_EXP 91
31241: PUSH
31242: LD_VAR 0 6
31246: ARRAY
31247: PUSH
31248: LD_VAR 0 5
31252: ARRAY
31253: PUSH
31254: LD_INT 1
31256: ARRAY
31257: PPUSH
31258: LD_EXP 91
31262: PUSH
31263: LD_VAR 0 6
31267: ARRAY
31268: PUSH
31269: LD_VAR 0 5
31273: ARRAY
31274: PUSH
31275: LD_INT 2
31277: ARRAY
31278: PPUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 255
31288: PPUSH
31289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31293: LD_ADDR_EXP 91
31297: PUSH
31298: LD_EXP 91
31302: PPUSH
31303: LD_VAR 0 6
31307: PPUSH
31308: LD_EXP 91
31312: PUSH
31313: LD_VAR 0 6
31317: ARRAY
31318: PPUSH
31319: LD_VAR 0 5
31323: PPUSH
31324: CALL_OW 3
31328: PPUSH
31329: CALL_OW 1
31333: ST_TO_ADDR
// end ; end ;
31334: GO 31172
31336: POP
31337: POP
// end ;
31338: LD_VAR 0 4
31342: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 264
31363: PUSH
31364: LD_INT 81
31366: EQUAL
31367: NOT
31368: PUSH
31369: LD_VAR 0 1
31373: PUSH
31374: LD_EXP 90
31378: IN
31379: NOT
31380: OR
31381: IFFALSE 31385
// exit ;
31383: GO 31707
// index := GetElementIndex ( minersList , unit ) ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_EXP 90
31394: PPUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL 36879 0 2
31404: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31405: LD_ADDR_VAR 0 8
31409: PUSH
31410: LD_EXP 92
31414: PUSH
31415: LD_EXP 91
31419: PUSH
31420: LD_VAR 0 6
31424: ARRAY
31425: MINUS
31426: ST_TO_ADDR
// if not minesFreeAmount then
31427: LD_VAR 0 8
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31707
// tmp := [ ] ;
31436: LD_ADDR_VAR 0 7
31440: PUSH
31441: EMPTY
31442: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31443: LD_ADDR_VAR 0 5
31447: PUSH
31448: DOUBLE
31449: LD_INT 1
31451: DEC
31452: ST_TO_ADDR
31453: LD_VAR 0 8
31457: PUSH
31458: FOR_TO
31459: IFFALSE 31654
// begin _d := rand ( 0 , 5 ) ;
31461: LD_ADDR_VAR 0 11
31465: PUSH
31466: LD_INT 0
31468: PPUSH
31469: LD_INT 5
31471: PPUSH
31472: CALL_OW 12
31476: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31477: LD_ADDR_VAR 0 12
31481: PUSH
31482: LD_INT 2
31484: PPUSH
31485: LD_INT 6
31487: PPUSH
31488: CALL_OW 12
31492: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_VAR 0 11
31507: PPUSH
31508: LD_VAR 0 12
31512: PPUSH
31513: CALL_OW 272
31517: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31518: LD_ADDR_VAR 0 10
31522: PUSH
31523: LD_VAR 0 3
31527: PPUSH
31528: LD_VAR 0 11
31532: PPUSH
31533: LD_VAR 0 12
31537: PPUSH
31538: CALL_OW 273
31542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31543: LD_VAR 0 9
31547: PPUSH
31548: LD_VAR 0 10
31552: PPUSH
31553: CALL_OW 488
31557: PUSH
31558: LD_VAR 0 9
31562: PUSH
31563: LD_VAR 0 10
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_VAR 0 7
31576: IN
31577: NOT
31578: AND
31579: PUSH
31580: LD_VAR 0 9
31584: PPUSH
31585: LD_VAR 0 10
31589: PPUSH
31590: CALL_OW 458
31594: NOT
31595: AND
31596: IFFALSE 31638
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31598: LD_ADDR_VAR 0 7
31602: PUSH
31603: LD_VAR 0 7
31607: PPUSH
31608: LD_VAR 0 7
31612: PUSH
31613: LD_INT 1
31615: PLUS
31616: PPUSH
31617: LD_VAR 0 9
31621: PUSH
31622: LD_VAR 0 10
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PPUSH
31631: CALL_OW 1
31635: ST_TO_ADDR
31636: GO 31652
// i := i - 1 ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_VAR 0 5
31647: PUSH
31648: LD_INT 1
31650: MINUS
31651: ST_TO_ADDR
// end ;
31652: GO 31458
31654: POP
31655: POP
// for i in tmp do
31656: LD_ADDR_VAR 0 5
31660: PUSH
31661: LD_VAR 0 7
31665: PUSH
31666: FOR_IN
31667: IFFALSE 31705
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31669: LD_VAR 0 1
31673: PPUSH
31674: LD_VAR 0 5
31678: PUSH
31679: LD_INT 1
31681: ARRAY
31682: PPUSH
31683: LD_VAR 0 5
31687: PUSH
31688: LD_INT 2
31690: ARRAY
31691: PPUSH
31692: CALL 30651 0 3
31696: NOT
31697: IFFALSE 31703
// exit ;
31699: POP
31700: POP
31701: GO 31707
31703: GO 31666
31705: POP
31706: POP
// end ;
31707: LD_VAR 0 4
31711: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31712: LD_INT 0
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
// if not GetClass ( unit ) = class_sniper then
31721: LD_VAR 0 1
31725: PPUSH
31726: CALL_OW 257
31730: PUSH
31731: LD_INT 5
31733: EQUAL
31734: NOT
31735: IFFALSE 31739
// exit ;
31737: GO 32127
// dist := 8 ;
31739: LD_ADDR_VAR 0 5
31743: PUSH
31744: LD_INT 8
31746: ST_TO_ADDR
// viewRange := 12 ;
31747: LD_ADDR_VAR 0 7
31751: PUSH
31752: LD_INT 12
31754: ST_TO_ADDR
// side := GetSide ( unit ) ;
31755: LD_ADDR_VAR 0 6
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 255
31769: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31770: LD_INT 61
31772: PPUSH
31773: LD_VAR 0 6
31777: PPUSH
31778: CALL_OW 321
31782: PUSH
31783: LD_INT 2
31785: EQUAL
31786: IFFALSE 31796
// viewRange := 16 ;
31788: LD_ADDR_VAR 0 7
31792: PUSH
31793: LD_INT 16
31795: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_VAR 0 2
31805: PPUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: CALL_OW 297
31815: PUSH
31816: LD_VAR 0 5
31820: GREATER
31821: IFFALSE 31900
// begin ComMoveXY ( unit , x , y ) ;
31823: LD_VAR 0 1
31827: PPUSH
31828: LD_VAR 0 2
31832: PPUSH
31833: LD_VAR 0 3
31837: PPUSH
31838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31842: LD_INT 35
31844: PPUSH
31845: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31849: LD_VAR 0 1
31853: PPUSH
31854: LD_VAR 0 2
31858: PPUSH
31859: LD_VAR 0 3
31863: PPUSH
31864: CALL 68620 0 3
31868: NOT
31869: IFFALSE 31873
// exit ;
31871: GO 32127
// until GetDistUnitXY ( unit , x , y ) < dist ;
31873: LD_VAR 0 1
31877: PPUSH
31878: LD_VAR 0 2
31882: PPUSH
31883: LD_VAR 0 3
31887: PPUSH
31888: CALL_OW 297
31892: PUSH
31893: LD_VAR 0 5
31897: LESS
31898: IFFALSE 31842
// end ; ComTurnXY ( unit , x , y ) ;
31900: LD_VAR 0 1
31904: PPUSH
31905: LD_VAR 0 2
31909: PPUSH
31910: LD_VAR 0 3
31914: PPUSH
31915: CALL_OW 118
// wait ( 5 ) ;
31919: LD_INT 5
31921: PPUSH
31922: CALL_OW 67
// _d := GetDir ( unit ) ;
31926: LD_ADDR_VAR 0 10
31930: PUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 254
31940: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31941: LD_ADDR_VAR 0 8
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 250
31955: PPUSH
31956: LD_VAR 0 10
31960: PPUSH
31961: LD_VAR 0 5
31965: PPUSH
31966: CALL_OW 272
31970: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31971: LD_ADDR_VAR 0 9
31975: PUSH
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 251
31985: PPUSH
31986: LD_VAR 0 10
31990: PPUSH
31991: LD_VAR 0 5
31995: PPUSH
31996: CALL_OW 273
32000: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32001: LD_VAR 0 8
32005: PPUSH
32006: LD_VAR 0 9
32010: PPUSH
32011: CALL_OW 488
32015: NOT
32016: IFFALSE 32020
// exit ;
32018: GO 32127
// ComAnimCustom ( unit , 1 ) ;
32020: LD_VAR 0 1
32024: PPUSH
32025: LD_INT 1
32027: PPUSH
32028: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32032: LD_VAR 0 8
32036: PPUSH
32037: LD_VAR 0 9
32041: PPUSH
32042: LD_VAR 0 6
32046: PPUSH
32047: LD_VAR 0 7
32051: PPUSH
32052: CALL_OW 330
// repeat wait ( 1 ) ;
32056: LD_INT 1
32058: PPUSH
32059: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 316
32072: PUSH
32073: LD_VAR 0 1
32077: PPUSH
32078: CALL_OW 314
32082: OR
32083: PUSH
32084: LD_VAR 0 1
32088: PPUSH
32089: CALL_OW 302
32093: NOT
32094: OR
32095: PUSH
32096: LD_VAR 0 1
32100: PPUSH
32101: CALL_OW 301
32105: OR
32106: IFFALSE 32056
// RemoveSeeing ( _x , _y , side ) ;
32108: LD_VAR 0 8
32112: PPUSH
32113: LD_VAR 0 9
32117: PPUSH
32118: LD_VAR 0 6
32122: PPUSH
32123: CALL_OW 331
// end ; end_of_file
32127: LD_VAR 0 4
32131: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32132: LD_INT 0
32134: PPUSH
32135: PPUSH
// if exist_mode then
32136: LD_VAR 0 2
32140: IFFALSE 32165
// unit := CreateCharacter ( prefix & ident ) else
32142: LD_ADDR_VAR 0 5
32146: PUSH
32147: LD_VAR 0 3
32151: PUSH
32152: LD_VAR 0 1
32156: STR
32157: PPUSH
32158: CALL_OW 34
32162: ST_TO_ADDR
32163: GO 32180
// unit := NewCharacter ( ident ) ;
32165: LD_ADDR_VAR 0 5
32169: PUSH
32170: LD_VAR 0 1
32174: PPUSH
32175: CALL_OW 25
32179: ST_TO_ADDR
// result := unit ;
32180: LD_ADDR_VAR 0 4
32184: PUSH
32185: LD_VAR 0 5
32189: ST_TO_ADDR
// end ;
32190: LD_VAR 0 4
32194: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
// if not side or not nation then
32199: LD_VAR 0 1
32203: NOT
32204: PUSH
32205: LD_VAR 0 2
32209: NOT
32210: OR
32211: IFFALSE 32215
// exit ;
32213: GO 32983
// case nation of nation_american :
32215: LD_VAR 0 2
32219: PUSH
32220: LD_INT 1
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32442
32228: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32229: LD_ADDR_VAR 0 4
32233: PUSH
32234: LD_INT 35
32236: PUSH
32237: LD_INT 45
32239: PUSH
32240: LD_INT 46
32242: PUSH
32243: LD_INT 47
32245: PUSH
32246: LD_INT 82
32248: PUSH
32249: LD_INT 83
32251: PUSH
32252: LD_INT 84
32254: PUSH
32255: LD_INT 85
32257: PUSH
32258: LD_INT 86
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 6
32269: PUSH
32270: LD_INT 15
32272: PUSH
32273: LD_INT 16
32275: PUSH
32276: LD_INT 7
32278: PUSH
32279: LD_INT 12
32281: PUSH
32282: LD_INT 13
32284: PUSH
32285: LD_INT 10
32287: PUSH
32288: LD_INT 14
32290: PUSH
32291: LD_INT 20
32293: PUSH
32294: LD_INT 21
32296: PUSH
32297: LD_INT 22
32299: PUSH
32300: LD_INT 25
32302: PUSH
32303: LD_INT 32
32305: PUSH
32306: LD_INT 27
32308: PUSH
32309: LD_INT 36
32311: PUSH
32312: LD_INT 69
32314: PUSH
32315: LD_INT 39
32317: PUSH
32318: LD_INT 34
32320: PUSH
32321: LD_INT 40
32323: PUSH
32324: LD_INT 48
32326: PUSH
32327: LD_INT 49
32329: PUSH
32330: LD_INT 50
32332: PUSH
32333: LD_INT 51
32335: PUSH
32336: LD_INT 52
32338: PUSH
32339: LD_INT 53
32341: PUSH
32342: LD_INT 54
32344: PUSH
32345: LD_INT 55
32347: PUSH
32348: LD_INT 56
32350: PUSH
32351: LD_INT 57
32353: PUSH
32354: LD_INT 58
32356: PUSH
32357: LD_INT 59
32359: PUSH
32360: LD_INT 60
32362: PUSH
32363: LD_INT 61
32365: PUSH
32366: LD_INT 62
32368: PUSH
32369: LD_INT 80
32371: PUSH
32372: LD_INT 82
32374: PUSH
32375: LD_INT 83
32377: PUSH
32378: LD_INT 84
32380: PUSH
32381: LD_INT 85
32383: PUSH
32384: LD_INT 86
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: ST_TO_ADDR
32440: GO 32907
32442: LD_INT 2
32444: DOUBLE
32445: EQUAL
32446: IFTRUE 32450
32448: GO 32676
32450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32451: LD_ADDR_VAR 0 4
32455: PUSH
32456: LD_INT 35
32458: PUSH
32459: LD_INT 45
32461: PUSH
32462: LD_INT 46
32464: PUSH
32465: LD_INT 47
32467: PUSH
32468: LD_INT 82
32470: PUSH
32471: LD_INT 83
32473: PUSH
32474: LD_INT 84
32476: PUSH
32477: LD_INT 85
32479: PUSH
32480: LD_INT 87
32482: PUSH
32483: LD_INT 70
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 11
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: LD_INT 4
32497: PUSH
32498: LD_INT 5
32500: PUSH
32501: LD_INT 6
32503: PUSH
32504: LD_INT 15
32506: PUSH
32507: LD_INT 18
32509: PUSH
32510: LD_INT 7
32512: PUSH
32513: LD_INT 17
32515: PUSH
32516: LD_INT 8
32518: PUSH
32519: LD_INT 20
32521: PUSH
32522: LD_INT 21
32524: PUSH
32525: LD_INT 22
32527: PUSH
32528: LD_INT 72
32530: PUSH
32531: LD_INT 26
32533: PUSH
32534: LD_INT 69
32536: PUSH
32537: LD_INT 39
32539: PUSH
32540: LD_INT 40
32542: PUSH
32543: LD_INT 41
32545: PUSH
32546: LD_INT 42
32548: PUSH
32549: LD_INT 43
32551: PUSH
32552: LD_INT 48
32554: PUSH
32555: LD_INT 49
32557: PUSH
32558: LD_INT 50
32560: PUSH
32561: LD_INT 51
32563: PUSH
32564: LD_INT 52
32566: PUSH
32567: LD_INT 53
32569: PUSH
32570: LD_INT 54
32572: PUSH
32573: LD_INT 55
32575: PUSH
32576: LD_INT 56
32578: PUSH
32579: LD_INT 60
32581: PUSH
32582: LD_INT 61
32584: PUSH
32585: LD_INT 62
32587: PUSH
32588: LD_INT 66
32590: PUSH
32591: LD_INT 67
32593: PUSH
32594: LD_INT 68
32596: PUSH
32597: LD_INT 81
32599: PUSH
32600: LD_INT 82
32602: PUSH
32603: LD_INT 83
32605: PUSH
32606: LD_INT 84
32608: PUSH
32609: LD_INT 85
32611: PUSH
32612: LD_INT 87
32614: PUSH
32615: LD_INT 88
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
32674: GO 32907
32676: LD_INT 3
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32906
32684: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32685: LD_ADDR_VAR 0 4
32689: PUSH
32690: LD_INT 46
32692: PUSH
32693: LD_INT 47
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 82
32704: PUSH
32705: LD_INT 83
32707: PUSH
32708: LD_INT 84
32710: PUSH
32711: LD_INT 85
32713: PUSH
32714: LD_INT 86
32716: PUSH
32717: LD_INT 11
32719: PUSH
32720: LD_INT 9
32722: PUSH
32723: LD_INT 20
32725: PUSH
32726: LD_INT 19
32728: PUSH
32729: LD_INT 21
32731: PUSH
32732: LD_INT 24
32734: PUSH
32735: LD_INT 22
32737: PUSH
32738: LD_INT 25
32740: PUSH
32741: LD_INT 28
32743: PUSH
32744: LD_INT 29
32746: PUSH
32747: LD_INT 30
32749: PUSH
32750: LD_INT 31
32752: PUSH
32753: LD_INT 37
32755: PUSH
32756: LD_INT 38
32758: PUSH
32759: LD_INT 32
32761: PUSH
32762: LD_INT 27
32764: PUSH
32765: LD_INT 33
32767: PUSH
32768: LD_INT 69
32770: PUSH
32771: LD_INT 39
32773: PUSH
32774: LD_INT 34
32776: PUSH
32777: LD_INT 40
32779: PUSH
32780: LD_INT 71
32782: PUSH
32783: LD_INT 23
32785: PUSH
32786: LD_INT 44
32788: PUSH
32789: LD_INT 48
32791: PUSH
32792: LD_INT 49
32794: PUSH
32795: LD_INT 50
32797: PUSH
32798: LD_INT 51
32800: PUSH
32801: LD_INT 52
32803: PUSH
32804: LD_INT 53
32806: PUSH
32807: LD_INT 54
32809: PUSH
32810: LD_INT 55
32812: PUSH
32813: LD_INT 56
32815: PUSH
32816: LD_INT 57
32818: PUSH
32819: LD_INT 58
32821: PUSH
32822: LD_INT 59
32824: PUSH
32825: LD_INT 63
32827: PUSH
32828: LD_INT 64
32830: PUSH
32831: LD_INT 65
32833: PUSH
32834: LD_INT 82
32836: PUSH
32837: LD_INT 83
32839: PUSH
32840: LD_INT 84
32842: PUSH
32843: LD_INT 85
32845: PUSH
32846: LD_INT 86
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
32904: GO 32907
32906: POP
// if state > - 1 and state < 3 then
32907: LD_VAR 0 3
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: GREATER
32916: PUSH
32917: LD_VAR 0 3
32921: PUSH
32922: LD_INT 3
32924: LESS
32925: AND
32926: IFFALSE 32983
// for i in result do
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: LD_VAR 0 4
32937: PUSH
32938: FOR_IN
32939: IFFALSE 32981
// if GetTech ( i , side ) <> state then
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 321
32955: PUSH
32956: LD_VAR 0 3
32960: NONEQUAL
32961: IFFALSE 32979
// result := result diff i ;
32963: LD_ADDR_VAR 0 4
32967: PUSH
32968: LD_VAR 0 4
32972: PUSH
32973: LD_VAR 0 5
32977: DIFF
32978: ST_TO_ADDR
32979: GO 32938
32981: POP
32982: POP
// end ;
32983: LD_VAR 0 4
32987: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
32992: PPUSH
// result := true ;
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 1
33000: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33001: LD_ADDR_VAR 0 5
33005: PUSH
33006: LD_VAR 0 2
33010: PPUSH
33011: CALL_OW 480
33015: ST_TO_ADDR
// if not tmp then
33016: LD_VAR 0 5
33020: NOT
33021: IFFALSE 33025
// exit ;
33023: GO 33074
// for i in tmp do
33025: LD_ADDR_VAR 0 4
33029: PUSH
33030: LD_VAR 0 5
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33072
// if GetTech ( i , side ) <> state_researched then
33038: LD_VAR 0 4
33042: PPUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 321
33052: PUSH
33053: LD_INT 2
33055: NONEQUAL
33056: IFFALSE 33070
// begin result := false ;
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 0
33065: ST_TO_ADDR
// exit ;
33066: POP
33067: POP
33068: GO 33074
// end ;
33070: GO 33035
33072: POP
33073: POP
// end ;
33074: LD_VAR 0 3
33078: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33079: LD_INT 0
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33094: LD_VAR 0 1
33098: NOT
33099: PUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 257
33109: PUSH
33110: LD_INT 9
33112: NONEQUAL
33113: OR
33114: IFFALSE 33118
// exit ;
33116: GO 33691
// side := GetSide ( unit ) ;
33118: LD_ADDR_VAR 0 9
33122: PUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 255
33132: ST_TO_ADDR
// tech_space := tech_spacanom ;
33133: LD_ADDR_VAR 0 12
33137: PUSH
33138: LD_INT 29
33140: ST_TO_ADDR
// tech_time := tech_taurad ;
33141: LD_ADDR_VAR 0 13
33145: PUSH
33146: LD_INT 28
33148: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33149: LD_ADDR_VAR 0 11
33153: PUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 310
33163: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33164: LD_VAR 0 11
33168: PPUSH
33169: CALL_OW 247
33173: PUSH
33174: LD_INT 2
33176: EQUAL
33177: IFFALSE 33181
// exit ;
33179: GO 33691
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33181: LD_ADDR_VAR 0 8
33185: PUSH
33186: LD_INT 81
33188: PUSH
33189: LD_VAR 0 9
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: LD_INT 21
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 69
33223: ST_TO_ADDR
// if not tmp then
33224: LD_VAR 0 8
33228: NOT
33229: IFFALSE 33233
// exit ;
33231: GO 33691
// if in_unit then
33233: LD_VAR 0 11
33237: IFFALSE 33261
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33239: LD_ADDR_VAR 0 10
33243: PUSH
33244: LD_VAR 0 8
33248: PPUSH
33249: LD_VAR 0 11
33253: PPUSH
33254: CALL_OW 74
33258: ST_TO_ADDR
33259: GO 33281
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33261: LD_ADDR_VAR 0 10
33265: PUSH
33266: LD_VAR 0 8
33270: PPUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 74
33280: ST_TO_ADDR
// if not enemy then
33281: LD_VAR 0 10
33285: NOT
33286: IFFALSE 33290
// exit ;
33288: GO 33691
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33290: LD_VAR 0 11
33294: PUSH
33295: LD_VAR 0 11
33299: PPUSH
33300: LD_VAR 0 10
33304: PPUSH
33305: CALL_OW 296
33309: PUSH
33310: LD_INT 13
33312: GREATER
33313: AND
33314: PUSH
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_VAR 0 10
33324: PPUSH
33325: CALL_OW 296
33329: PUSH
33330: LD_INT 12
33332: GREATER
33333: OR
33334: IFFALSE 33338
// exit ;
33336: GO 33691
// missile := [ 1 ] ;
33338: LD_ADDR_VAR 0 14
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33349: LD_VAR 0 9
33353: PPUSH
33354: LD_VAR 0 12
33358: PPUSH
33359: CALL_OW 325
33363: IFFALSE 33392
// missile := Replace ( missile , missile + 1 , 2 ) ;
33365: LD_ADDR_VAR 0 14
33369: PUSH
33370: LD_VAR 0 14
33374: PPUSH
33375: LD_VAR 0 14
33379: PUSH
33380: LD_INT 1
33382: PLUS
33383: PPUSH
33384: LD_INT 2
33386: PPUSH
33387: CALL_OW 1
33391: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33392: LD_VAR 0 9
33396: PPUSH
33397: LD_VAR 0 13
33401: PPUSH
33402: CALL_OW 325
33406: PUSH
33407: LD_VAR 0 10
33411: PPUSH
33412: CALL_OW 255
33416: PPUSH
33417: LD_VAR 0 13
33421: PPUSH
33422: CALL_OW 325
33426: NOT
33427: AND
33428: IFFALSE 33457
// missile := Replace ( missile , missile + 1 , 3 ) ;
33430: LD_ADDR_VAR 0 14
33434: PUSH
33435: LD_VAR 0 14
33439: PPUSH
33440: LD_VAR 0 14
33444: PUSH
33445: LD_INT 1
33447: PLUS
33448: PPUSH
33449: LD_INT 3
33451: PPUSH
33452: CALL_OW 1
33456: ST_TO_ADDR
// if missile < 2 then
33457: LD_VAR 0 14
33461: PUSH
33462: LD_INT 2
33464: LESS
33465: IFFALSE 33469
// exit ;
33467: GO 33691
// x := GetX ( enemy ) ;
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: LD_VAR 0 10
33478: PPUSH
33479: CALL_OW 250
33483: ST_TO_ADDR
// y := GetY ( enemy ) ;
33484: LD_ADDR_VAR 0 5
33488: PUSH
33489: LD_VAR 0 10
33493: PPUSH
33494: CALL_OW 251
33498: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33499: LD_ADDR_VAR 0 6
33503: PUSH
33504: LD_VAR 0 4
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PPUSH
33513: LD_INT 1
33515: PPUSH
33516: CALL_OW 12
33520: PLUS
33521: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33522: LD_ADDR_VAR 0 7
33526: PUSH
33527: LD_VAR 0 5
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PPUSH
33536: LD_INT 1
33538: PPUSH
33539: CALL_OW 12
33543: PLUS
33544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33545: LD_VAR 0 6
33549: PPUSH
33550: LD_VAR 0 7
33554: PPUSH
33555: CALL_OW 488
33559: NOT
33560: IFFALSE 33582
// begin _x := x ;
33562: LD_ADDR_VAR 0 6
33566: PUSH
33567: LD_VAR 0 4
33571: ST_TO_ADDR
// _y := y ;
33572: LD_ADDR_VAR 0 7
33576: PUSH
33577: LD_VAR 0 5
33581: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 1
33589: PPUSH
33590: LD_VAR 0 14
33594: PPUSH
33595: CALL_OW 12
33599: ST_TO_ADDR
// case i of 1 :
33600: LD_VAR 0 3
33604: PUSH
33605: LD_INT 1
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33613
33611: GO 33630
33613: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33614: LD_VAR 0 1
33618: PPUSH
33619: LD_VAR 0 10
33623: PPUSH
33624: CALL_OW 115
33628: GO 33691
33630: LD_INT 2
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33660
33638: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33639: LD_VAR 0 1
33643: PPUSH
33644: LD_VAR 0 6
33648: PPUSH
33649: LD_VAR 0 7
33653: PPUSH
33654: CALL_OW 153
33658: GO 33691
33660: LD_INT 3
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33690
33668: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_VAR 0 6
33678: PPUSH
33679: LD_VAR 0 7
33683: PPUSH
33684: CALL_OW 154
33688: GO 33691
33690: POP
// end ;
33691: LD_VAR 0 2
33695: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33696: LD_INT 0
33698: PPUSH
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
// if not unit or not building then
33704: LD_VAR 0 1
33708: NOT
33709: PUSH
33710: LD_VAR 0 2
33714: NOT
33715: OR
33716: IFFALSE 33720
// exit ;
33718: GO 33878
// x := GetX ( building ) ;
33720: LD_ADDR_VAR 0 5
33724: PUSH
33725: LD_VAR 0 2
33729: PPUSH
33730: CALL_OW 250
33734: ST_TO_ADDR
// y := GetY ( building ) ;
33735: LD_ADDR_VAR 0 6
33739: PUSH
33740: LD_VAR 0 2
33744: PPUSH
33745: CALL_OW 251
33749: ST_TO_ADDR
// for i = 0 to 5 do
33750: LD_ADDR_VAR 0 4
33754: PUSH
33755: DOUBLE
33756: LD_INT 0
33758: DEC
33759: ST_TO_ADDR
33760: LD_INT 5
33762: PUSH
33763: FOR_TO
33764: IFFALSE 33876
// begin _x := ShiftX ( x , i , 3 ) ;
33766: LD_ADDR_VAR 0 7
33770: PUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: LD_VAR 0 4
33780: PPUSH
33781: LD_INT 3
33783: PPUSH
33784: CALL_OW 272
33788: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33789: LD_ADDR_VAR 0 8
33793: PUSH
33794: LD_VAR 0 6
33798: PPUSH
33799: LD_VAR 0 4
33803: PPUSH
33804: LD_INT 3
33806: PPUSH
33807: CALL_OW 273
33811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33812: LD_VAR 0 7
33816: PPUSH
33817: LD_VAR 0 8
33821: PPUSH
33822: CALL_OW 488
33826: NOT
33827: IFFALSE 33831
// continue ;
33829: GO 33763
// if HexInfo ( _x , _y ) = 0 then
33831: LD_VAR 0 7
33835: PPUSH
33836: LD_VAR 0 8
33840: PPUSH
33841: CALL_OW 428
33845: PUSH
33846: LD_INT 0
33848: EQUAL
33849: IFFALSE 33874
// begin ComMoveXY ( unit , _x , _y ) ;
33851: LD_VAR 0 1
33855: PPUSH
33856: LD_VAR 0 7
33860: PPUSH
33861: LD_VAR 0 8
33865: PPUSH
33866: CALL_OW 111
// exit ;
33870: POP
33871: POP
33872: GO 33878
// end ; end ;
33874: GO 33763
33876: POP
33877: POP
// end ;
33878: LD_VAR 0 3
33882: RET
// export function ScanBase ( side , base_area ) ; begin
33883: LD_INT 0
33885: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_INT 81
33898: PUSH
33899: LD_VAR 0 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PPUSH
33908: CALL_OW 70
33912: ST_TO_ADDR
// end ;
33913: LD_VAR 0 3
33917: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33918: LD_INT 0
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
// result := false ;
33924: LD_ADDR_VAR 0 2
33928: PUSH
33929: LD_INT 0
33931: ST_TO_ADDR
// side := GetSide ( unit ) ;
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 255
33946: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33947: LD_ADDR_VAR 0 4
33951: PUSH
33952: LD_VAR 0 1
33956: PPUSH
33957: CALL_OW 248
33961: ST_TO_ADDR
// case nat of 1 :
33962: LD_VAR 0 4
33966: PUSH
33967: LD_INT 1
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 33986
33975: POP
// tech := tech_lassight ; 2 :
33976: LD_ADDR_VAR 0 5
33980: PUSH
33981: LD_INT 12
33983: ST_TO_ADDR
33984: GO 34025
33986: LD_INT 2
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34005
33994: POP
// tech := tech_mortar ; 3 :
33995: LD_ADDR_VAR 0 5
33999: PUSH
34000: LD_INT 41
34002: ST_TO_ADDR
34003: GO 34025
34005: LD_INT 3
34007: DOUBLE
34008: EQUAL
34009: IFTRUE 34013
34011: GO 34024
34013: POP
// tech := tech_bazooka ; end ;
34014: LD_ADDR_VAR 0 5
34018: PUSH
34019: LD_INT 44
34021: ST_TO_ADDR
34022: GO 34025
34024: POP
// if Researched ( side , tech ) then
34025: LD_VAR 0 3
34029: PPUSH
34030: LD_VAR 0 5
34034: PPUSH
34035: CALL_OW 325
34039: IFFALSE 34066
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34041: LD_ADDR_VAR 0 2
34045: PUSH
34046: LD_INT 5
34048: PUSH
34049: LD_INT 8
34051: PUSH
34052: LD_INT 9
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: PUSH
34060: LD_VAR 0 4
34064: ARRAY
34065: ST_TO_ADDR
// end ;
34066: LD_VAR 0 2
34070: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34071: LD_INT 0
34073: PPUSH
34074: PPUSH
34075: PPUSH
// if not mines then
34076: LD_VAR 0 2
34080: NOT
34081: IFFALSE 34085
// exit ;
34083: GO 34229
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34085: LD_ADDR_VAR 0 5
34089: PUSH
34090: LD_INT 81
34092: PUSH
34093: LD_VAR 0 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: LD_INT 21
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PPUSH
34123: CALL_OW 69
34127: ST_TO_ADDR
// for i in mines do
34128: LD_ADDR_VAR 0 4
34132: PUSH
34133: LD_VAR 0 2
34137: PUSH
34138: FOR_IN
34139: IFFALSE 34227
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34141: LD_VAR 0 4
34145: PUSH
34146: LD_INT 1
34148: ARRAY
34149: PPUSH
34150: LD_VAR 0 4
34154: PUSH
34155: LD_INT 2
34157: ARRAY
34158: PPUSH
34159: CALL_OW 458
34163: NOT
34164: IFFALSE 34168
// continue ;
34166: GO 34138
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34168: LD_VAR 0 4
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: PPUSH
34177: LD_VAR 0 4
34181: PUSH
34182: LD_INT 2
34184: ARRAY
34185: PPUSH
34186: CALL_OW 428
34190: PUSH
34191: LD_VAR 0 5
34195: IN
34196: IFFALSE 34225
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34198: LD_VAR 0 4
34202: PUSH
34203: LD_INT 1
34205: ARRAY
34206: PPUSH
34207: LD_VAR 0 4
34211: PUSH
34212: LD_INT 2
34214: ARRAY
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL_OW 456
// end ;
34225: GO 34138
34227: POP
34228: POP
// end ;
34229: LD_VAR 0 3
34233: RET
// export function Count ( array ) ; begin
34234: LD_INT 0
34236: PPUSH
// result := array + 0 ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_VAR 0 1
34246: PUSH
34247: LD_INT 0
34249: PLUS
34250: ST_TO_ADDR
// end ;
34251: LD_VAR 0 2
34255: RET
// export function IsEmpty ( building ) ; begin
34256: LD_INT 0
34258: PPUSH
// if not building then
34259: LD_VAR 0 1
34263: NOT
34264: IFFALSE 34268
// exit ;
34266: GO 34311
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34268: LD_ADDR_VAR 0 2
34272: PUSH
34273: LD_VAR 0 1
34277: PUSH
34278: LD_INT 22
34280: PUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: CALL_OW 255
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 58
34297: PUSH
34298: EMPTY
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PPUSH
34305: CALL_OW 69
34309: IN
34310: ST_TO_ADDR
// end ;
34311: LD_VAR 0 2
34315: RET
// export function IsNotFull ( building ) ; var places ; begin
34316: LD_INT 0
34318: PPUSH
34319: PPUSH
// if not building then
34320: LD_VAR 0 1
34324: NOT
34325: IFFALSE 34329
// exit ;
34327: GO 34357
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34329: LD_ADDR_VAR 0 2
34333: PUSH
34334: LD_VAR 0 1
34338: PPUSH
34339: LD_INT 3
34341: PUSH
34342: LD_INT 62
34344: PUSH
34345: EMPTY
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 72
34356: ST_TO_ADDR
// end ;
34357: LD_VAR 0 2
34361: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
// tmp := [ ] ;
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: EMPTY
34374: ST_TO_ADDR
// list := [ ] ;
34375: LD_ADDR_VAR 0 5
34379: PUSH
34380: EMPTY
34381: ST_TO_ADDR
// for i = 16 to 25 do
34382: LD_ADDR_VAR 0 4
34386: PUSH
34387: DOUBLE
34388: LD_INT 16
34390: DEC
34391: ST_TO_ADDR
34392: LD_INT 25
34394: PUSH
34395: FOR_TO
34396: IFFALSE 34469
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: LD_VAR 0 3
34407: PUSH
34408: LD_INT 22
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 255
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 91
34427: PUSH
34428: LD_VAR 0 1
34432: PUSH
34433: LD_INT 6
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 30
34443: PUSH
34444: LD_VAR 0 4
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: PPUSH
34461: CALL_OW 69
34465: ADD
34466: ST_TO_ADDR
34467: GO 34395
34469: POP
34470: POP
// for i = 1 to tmp do
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: DOUBLE
34477: LD_INT 1
34479: DEC
34480: ST_TO_ADDR
34481: LD_VAR 0 3
34485: PUSH
34486: FOR_TO
34487: IFFALSE 34575
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34489: LD_ADDR_VAR 0 5
34493: PUSH
34494: LD_VAR 0 5
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: LD_VAR 0 4
34508: ARRAY
34509: PPUSH
34510: CALL_OW 266
34514: PUSH
34515: LD_VAR 0 3
34519: PUSH
34520: LD_VAR 0 4
34524: ARRAY
34525: PPUSH
34526: CALL_OW 250
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_VAR 0 4
34540: ARRAY
34541: PPUSH
34542: CALL_OW 251
34546: PUSH
34547: LD_VAR 0 3
34551: PUSH
34552: LD_VAR 0 4
34556: ARRAY
34557: PPUSH
34558: CALL_OW 254
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: PUSH
34569: EMPTY
34570: LIST
34571: ADD
34572: ST_TO_ADDR
34573: GO 34486
34575: POP
34576: POP
// result := list ;
34577: LD_ADDR_VAR 0 2
34581: PUSH
34582: LD_VAR 0 5
34586: ST_TO_ADDR
// end ;
34587: LD_VAR 0 2
34591: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34592: LD_INT 0
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
// if not factory then
34601: LD_VAR 0 1
34605: NOT
34606: IFFALSE 34610
// exit ;
34608: GO 35203
// if control = control_apeman then
34610: LD_VAR 0 4
34614: PUSH
34615: LD_INT 5
34617: EQUAL
34618: IFFALSE 34727
// begin tmp := UnitsInside ( factory ) ;
34620: LD_ADDR_VAR 0 8
34624: PUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 313
34634: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34635: LD_VAR 0 8
34639: PPUSH
34640: LD_INT 25
34642: PUSH
34643: LD_INT 12
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 72
34654: NOT
34655: IFFALSE 34665
// control := control_manual ;
34657: LD_ADDR_VAR 0 4
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34665: LD_ADDR_VAR 0 8
34669: PUSH
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL 34362 0 1
34679: ST_TO_ADDR
// if tmp then
34680: LD_VAR 0 8
34684: IFFALSE 34727
// begin for i in tmp do
34686: LD_ADDR_VAR 0 7
34690: PUSH
34691: LD_VAR 0 8
34695: PUSH
34696: FOR_IN
34697: IFFALSE 34725
// if i [ 1 ] = b_ext_radio then
34699: LD_VAR 0 7
34703: PUSH
34704: LD_INT 1
34706: ARRAY
34707: PUSH
34708: LD_INT 22
34710: EQUAL
34711: IFFALSE 34723
// begin control := control_remote ;
34713: LD_ADDR_VAR 0 4
34717: PUSH
34718: LD_INT 2
34720: ST_TO_ADDR
// break ;
34721: GO 34725
// end ;
34723: GO 34696
34725: POP
34726: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34727: LD_VAR 0 1
34731: PPUSH
34732: LD_VAR 0 2
34736: PPUSH
34737: LD_VAR 0 3
34741: PPUSH
34742: LD_VAR 0 4
34746: PPUSH
34747: LD_VAR 0 5
34751: PPUSH
34752: CALL_OW 448
34756: IFFALSE 34791
// begin result := [ chassis , engine , control , weapon ] ;
34758: LD_ADDR_VAR 0 6
34762: PUSH
34763: LD_VAR 0 2
34767: PUSH
34768: LD_VAR 0 3
34772: PUSH
34773: LD_VAR 0 4
34777: PUSH
34778: LD_VAR 0 5
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: ST_TO_ADDR
// exit ;
34789: GO 35203
// end ; _chassis := AvailableChassisList ( factory ) ;
34791: LD_ADDR_VAR 0 9
34795: PUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 475
34805: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34806: LD_ADDR_VAR 0 11
34810: PUSH
34811: LD_VAR 0 1
34815: PPUSH
34816: CALL_OW 476
34820: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34821: LD_ADDR_VAR 0 12
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: CALL_OW 477
34835: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34836: LD_ADDR_VAR 0 10
34840: PUSH
34841: LD_VAR 0 1
34845: PPUSH
34846: CALL_OW 478
34850: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34851: LD_VAR 0 9
34855: NOT
34856: PUSH
34857: LD_VAR 0 11
34861: NOT
34862: OR
34863: PUSH
34864: LD_VAR 0 12
34868: NOT
34869: OR
34870: PUSH
34871: LD_VAR 0 10
34875: NOT
34876: OR
34877: IFFALSE 34912
// begin result := [ chassis , engine , control , weapon ] ;
34879: LD_ADDR_VAR 0 6
34883: PUSH
34884: LD_VAR 0 2
34888: PUSH
34889: LD_VAR 0 3
34893: PUSH
34894: LD_VAR 0 4
34898: PUSH
34899: LD_VAR 0 5
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
// exit ;
34910: GO 35203
// end ; if not chassis in _chassis then
34912: LD_VAR 0 2
34916: PUSH
34917: LD_VAR 0 9
34921: IN
34922: NOT
34923: IFFALSE 34949
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34925: LD_ADDR_VAR 0 2
34929: PUSH
34930: LD_VAR 0 9
34934: PUSH
34935: LD_INT 1
34937: PPUSH
34938: LD_VAR 0 9
34942: PPUSH
34943: CALL_OW 12
34947: ARRAY
34948: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34949: LD_VAR 0 2
34953: PPUSH
34954: LD_VAR 0 3
34958: PPUSH
34959: CALL 35208 0 2
34963: NOT
34964: IFFALSE 35023
// repeat engine := _engine [ 1 ] ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_VAR 0 11
34975: PUSH
34976: LD_INT 1
34978: ARRAY
34979: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34980: LD_ADDR_VAR 0 11
34984: PUSH
34985: LD_VAR 0 11
34989: PPUSH
34990: LD_INT 1
34992: PPUSH
34993: CALL_OW 3
34997: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34998: LD_VAR 0 2
35002: PPUSH
35003: LD_VAR 0 3
35007: PPUSH
35008: CALL 35208 0 2
35012: PUSH
35013: LD_VAR 0 11
35017: PUSH
35018: EMPTY
35019: EQUAL
35020: OR
35021: IFFALSE 34966
// if not control in _control then
35023: LD_VAR 0 4
35027: PUSH
35028: LD_VAR 0 12
35032: IN
35033: NOT
35034: IFFALSE 35060
// control := _control [ rand ( 1 , _control ) ] ;
35036: LD_ADDR_VAR 0 4
35040: PUSH
35041: LD_VAR 0 12
35045: PUSH
35046: LD_INT 1
35048: PPUSH
35049: LD_VAR 0 12
35053: PPUSH
35054: CALL_OW 12
35058: ARRAY
35059: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35060: LD_VAR 0 2
35064: PPUSH
35065: LD_VAR 0 5
35069: PPUSH
35070: CALL 35428 0 2
35074: NOT
35075: IFFALSE 35134
// repeat weapon := _weapon [ 1 ] ;
35077: LD_ADDR_VAR 0 5
35081: PUSH
35082: LD_VAR 0 10
35086: PUSH
35087: LD_INT 1
35089: ARRAY
35090: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35091: LD_ADDR_VAR 0 10
35095: PUSH
35096: LD_VAR 0 10
35100: PPUSH
35101: LD_INT 1
35103: PPUSH
35104: CALL_OW 3
35108: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35109: LD_VAR 0 2
35113: PPUSH
35114: LD_VAR 0 5
35118: PPUSH
35119: CALL 35428 0 2
35123: PUSH
35124: LD_VAR 0 10
35128: PUSH
35129: EMPTY
35130: EQUAL
35131: OR
35132: IFFALSE 35077
// result := [ ] ;
35134: LD_ADDR_VAR 0 6
35138: PUSH
35139: EMPTY
35140: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: LD_VAR 0 4
35160: PPUSH
35161: LD_VAR 0 5
35165: PPUSH
35166: CALL_OW 448
35170: IFFALSE 35203
// result := [ chassis , engine , control , weapon ] ;
35172: LD_ADDR_VAR 0 6
35176: PUSH
35177: LD_VAR 0 2
35181: PUSH
35182: LD_VAR 0 3
35186: PUSH
35187: LD_VAR 0 4
35191: PUSH
35192: LD_VAR 0 5
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// end ;
35203: LD_VAR 0 6
35207: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35208: LD_INT 0
35210: PPUSH
// if not chassis or not engine then
35211: LD_VAR 0 1
35215: NOT
35216: PUSH
35217: LD_VAR 0 2
35221: NOT
35222: OR
35223: IFFALSE 35227
// exit ;
35225: GO 35423
// case engine of engine_solar :
35227: LD_VAR 0 2
35231: PUSH
35232: LD_INT 2
35234: DOUBLE
35235: EQUAL
35236: IFTRUE 35240
35238: GO 35278
35240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35241: LD_ADDR_VAR 0 3
35245: PUSH
35246: LD_INT 11
35248: PUSH
35249: LD_INT 12
35251: PUSH
35252: LD_INT 13
35254: PUSH
35255: LD_INT 14
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
35276: GO 35407
35278: LD_INT 1
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35348
35286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_INT 11
35294: PUSH
35295: LD_INT 12
35297: PUSH
35298: LD_INT 13
35300: PUSH
35301: LD_INT 14
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: LD_INT 4
35315: PUSH
35316: LD_INT 5
35318: PUSH
35319: LD_INT 21
35321: PUSH
35322: LD_INT 23
35324: PUSH
35325: LD_INT 22
35327: PUSH
35328: LD_INT 24
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
35346: GO 35407
35348: LD_INT 3
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35406
35356: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35357: LD_ADDR_VAR 0 3
35361: PUSH
35362: LD_INT 13
35364: PUSH
35365: LD_INT 14
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 4
35376: PUSH
35377: LD_INT 5
35379: PUSH
35380: LD_INT 21
35382: PUSH
35383: LD_INT 22
35385: PUSH
35386: LD_INT 23
35388: PUSH
35389: LD_INT 24
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35407
35406: POP
// result := ( chassis in result ) ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_VAR 0 1
35416: PUSH
35417: LD_VAR 0 3
35421: IN
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 3
35427: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35428: LD_INT 0
35430: PPUSH
// if not chassis or not weapon then
35431: LD_VAR 0 1
35435: NOT
35436: PUSH
35437: LD_VAR 0 2
35441: NOT
35442: OR
35443: IFFALSE 35447
// exit ;
35445: GO 36507
// case weapon of us_machine_gun :
35447: LD_VAR 0 2
35451: PUSH
35452: LD_INT 2
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35460
35458: GO 35490
35460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35461: LD_ADDR_VAR 0 3
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 4
35477: PUSH
35478: LD_INT 5
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
35488: GO 36491
35490: LD_INT 3
35492: DOUBLE
35493: EQUAL
35494: IFTRUE 35498
35496: GO 35528
35498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35499: LD_ADDR_VAR 0 3
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 4
35515: PUSH
35516: LD_INT 5
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
35526: GO 36491
35528: LD_INT 11
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35566
35536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 3
35550: PUSH
35551: LD_INT 4
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
35564: GO 36491
35566: LD_INT 4
35568: DOUBLE
35569: EQUAL
35570: IFTRUE 35574
35572: GO 35600
35574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35575: LD_ADDR_VAR 0 3
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: LD_INT 5
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
35598: GO 36491
35600: LD_INT 5
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35608
35606: GO 35634
35608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 3
35619: PUSH
35620: LD_INT 4
35622: PUSH
35623: LD_INT 5
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
35632: GO 36491
35634: LD_INT 9
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35642
35640: GO 35668
35642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35643: LD_ADDR_VAR 0 3
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: LD_INT 4
35656: PUSH
35657: LD_INT 5
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: ST_TO_ADDR
35666: GO 36491
35668: LD_INT 7
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35676
35674: GO 35702
35676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35677: LD_ADDR_VAR 0 3
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 4
35690: PUSH
35691: LD_INT 5
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: ST_TO_ADDR
35700: GO 36491
35702: LD_INT 12
35704: DOUBLE
35705: EQUAL
35706: IFTRUE 35710
35708: GO 35736
35710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35711: LD_ADDR_VAR 0 3
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: LD_INT 4
35724: PUSH
35725: LD_INT 5
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: ST_TO_ADDR
35734: GO 36491
35736: LD_INT 13
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35744
35742: GO 35770
35744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35745: LD_ADDR_VAR 0 3
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 5
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: ST_TO_ADDR
35768: GO 36491
35770: LD_INT 14
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35778
35776: GO 35796
35778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35779: LD_ADDR_VAR 0 3
35783: PUSH
35784: LD_INT 4
35786: PUSH
35787: LD_INT 5
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: ST_TO_ADDR
35794: GO 36491
35796: LD_INT 6
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35804
35802: GO 35822
35804: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35805: LD_ADDR_VAR 0 3
35809: PUSH
35810: LD_INT 4
35812: PUSH
35813: LD_INT 5
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: ST_TO_ADDR
35820: GO 36491
35822: LD_INT 10
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35830
35828: GO 35848
35830: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_INT 4
35838: PUSH
35839: LD_INT 5
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: ST_TO_ADDR
35846: GO 36491
35848: LD_INT 22
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35856
35854: GO 35882
35856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35857: LD_ADDR_VAR 0 3
35861: PUSH
35862: LD_INT 11
35864: PUSH
35865: LD_INT 12
35867: PUSH
35868: LD_INT 13
35870: PUSH
35871: LD_INT 14
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: ST_TO_ADDR
35880: GO 36491
35882: LD_INT 23
35884: DOUBLE
35885: EQUAL
35886: IFTRUE 35890
35888: GO 35916
35890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_INT 11
35898: PUSH
35899: LD_INT 12
35901: PUSH
35902: LD_INT 13
35904: PUSH
35905: LD_INT 14
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
35914: GO 36491
35916: LD_INT 24
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35924
35922: GO 35950
35924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35925: LD_ADDR_VAR 0 3
35929: PUSH
35930: LD_INT 11
35932: PUSH
35933: LD_INT 12
35935: PUSH
35936: LD_INT 13
35938: PUSH
35939: LD_INT 14
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
35948: GO 36491
35950: LD_INT 30
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 35958
35956: GO 35984
35958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_INT 11
35966: PUSH
35967: LD_INT 12
35969: PUSH
35970: LD_INT 13
35972: PUSH
35973: LD_INT 14
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
35982: GO 36491
35984: LD_INT 25
35986: DOUBLE
35987: EQUAL
35988: IFTRUE 35992
35990: GO 36010
35992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35993: LD_ADDR_VAR 0 3
35997: PUSH
35998: LD_INT 13
36000: PUSH
36001: LD_INT 14
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: ST_TO_ADDR
36008: GO 36491
36010: LD_INT 27
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36036
36018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36019: LD_ADDR_VAR 0 3
36023: PUSH
36024: LD_INT 13
36026: PUSH
36027: LD_INT 14
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: ST_TO_ADDR
36034: GO 36491
36036: LD_INT 92
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36044
36042: GO 36070
36044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36045: LD_ADDR_VAR 0 3
36049: PUSH
36050: LD_INT 11
36052: PUSH
36053: LD_INT 12
36055: PUSH
36056: LD_INT 13
36058: PUSH
36059: LD_INT 14
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
36068: GO 36491
36070: LD_INT 28
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36096
36078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: LD_INT 13
36086: PUSH
36087: LD_INT 14
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: ST_TO_ADDR
36094: GO 36491
36096: LD_INT 29
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36104
36102: GO 36122
36104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36105: LD_ADDR_VAR 0 3
36109: PUSH
36110: LD_INT 13
36112: PUSH
36113: LD_INT 14
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: ST_TO_ADDR
36120: GO 36491
36122: LD_INT 31
36124: DOUBLE
36125: EQUAL
36126: IFTRUE 36130
36128: GO 36148
36130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36131: LD_ADDR_VAR 0 3
36135: PUSH
36136: LD_INT 13
36138: PUSH
36139: LD_INT 14
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: ST_TO_ADDR
36146: GO 36491
36148: LD_INT 26
36150: DOUBLE
36151: EQUAL
36152: IFTRUE 36156
36154: GO 36174
36156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36157: LD_ADDR_VAR 0 3
36161: PUSH
36162: LD_INT 13
36164: PUSH
36165: LD_INT 14
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: ST_TO_ADDR
36172: GO 36491
36174: LD_INT 42
36176: DOUBLE
36177: EQUAL
36178: IFTRUE 36182
36180: GO 36208
36182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36183: LD_ADDR_VAR 0 3
36187: PUSH
36188: LD_INT 21
36190: PUSH
36191: LD_INT 22
36193: PUSH
36194: LD_INT 23
36196: PUSH
36197: LD_INT 24
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
36206: GO 36491
36208: LD_INT 43
36210: DOUBLE
36211: EQUAL
36212: IFTRUE 36216
36214: GO 36242
36216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36217: LD_ADDR_VAR 0 3
36221: PUSH
36222: LD_INT 21
36224: PUSH
36225: LD_INT 22
36227: PUSH
36228: LD_INT 23
36230: PUSH
36231: LD_INT 24
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: ST_TO_ADDR
36240: GO 36491
36242: LD_INT 44
36244: DOUBLE
36245: EQUAL
36246: IFTRUE 36250
36248: GO 36276
36250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36251: LD_ADDR_VAR 0 3
36255: PUSH
36256: LD_INT 21
36258: PUSH
36259: LD_INT 22
36261: PUSH
36262: LD_INT 23
36264: PUSH
36265: LD_INT 24
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
36274: GO 36491
36276: LD_INT 45
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 36310
36284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_INT 21
36292: PUSH
36293: LD_INT 22
36295: PUSH
36296: LD_INT 23
36298: PUSH
36299: LD_INT 24
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
36308: GO 36491
36310: LD_INT 49
36312: DOUBLE
36313: EQUAL
36314: IFTRUE 36318
36316: GO 36344
36318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36319: LD_ADDR_VAR 0 3
36323: PUSH
36324: LD_INT 21
36326: PUSH
36327: LD_INT 22
36329: PUSH
36330: LD_INT 23
36332: PUSH
36333: LD_INT 24
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: ST_TO_ADDR
36342: GO 36491
36344: LD_INT 51
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36352
36350: GO 36378
36352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: LD_INT 21
36360: PUSH
36361: LD_INT 22
36363: PUSH
36364: LD_INT 23
36366: PUSH
36367: LD_INT 24
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: ST_TO_ADDR
36376: GO 36491
36378: LD_INT 52
36380: DOUBLE
36381: EQUAL
36382: IFTRUE 36386
36384: GO 36412
36386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_INT 21
36394: PUSH
36395: LD_INT 22
36397: PUSH
36398: LD_INT 23
36400: PUSH
36401: LD_INT 24
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
36410: GO 36491
36412: LD_INT 53
36414: DOUBLE
36415: EQUAL
36416: IFTRUE 36420
36418: GO 36438
36420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36421: LD_ADDR_VAR 0 3
36425: PUSH
36426: LD_INT 23
36428: PUSH
36429: LD_INT 24
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: ST_TO_ADDR
36436: GO 36491
36438: LD_INT 46
36440: DOUBLE
36441: EQUAL
36442: IFTRUE 36446
36444: GO 36464
36446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36447: LD_ADDR_VAR 0 3
36451: PUSH
36452: LD_INT 23
36454: PUSH
36455: LD_INT 24
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: ST_TO_ADDR
36462: GO 36491
36464: LD_INT 47
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 36490
36472: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36473: LD_ADDR_VAR 0 3
36477: PUSH
36478: LD_INT 23
36480: PUSH
36481: LD_INT 24
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: ST_TO_ADDR
36488: GO 36491
36490: POP
// result := ( chassis in result ) ;
36491: LD_ADDR_VAR 0 3
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_VAR 0 3
36505: IN
36506: ST_TO_ADDR
// end ;
36507: LD_VAR 0 3
36511: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36512: LD_INT 0
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
// result := array ;
36521: LD_ADDR_VAR 0 5
36525: PUSH
36526: LD_VAR 0 1
36530: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36531: LD_VAR 0 1
36535: NOT
36536: PUSH
36537: LD_VAR 0 2
36541: NOT
36542: OR
36543: PUSH
36544: LD_VAR 0 3
36548: NOT
36549: OR
36550: PUSH
36551: LD_VAR 0 2
36555: PUSH
36556: LD_VAR 0 1
36560: GREATER
36561: OR
36562: PUSH
36563: LD_VAR 0 3
36567: PUSH
36568: LD_VAR 0 1
36572: GREATER
36573: OR
36574: IFFALSE 36578
// exit ;
36576: GO 36874
// if direction then
36578: LD_VAR 0 4
36582: IFFALSE 36646
// begin d := 1 ;
36584: LD_ADDR_VAR 0 9
36588: PUSH
36589: LD_INT 1
36591: ST_TO_ADDR
// if i_from > i_to then
36592: LD_VAR 0 2
36596: PUSH
36597: LD_VAR 0 3
36601: GREATER
36602: IFFALSE 36628
// length := ( array - i_from ) + i_to else
36604: LD_ADDR_VAR 0 11
36608: PUSH
36609: LD_VAR 0 1
36613: PUSH
36614: LD_VAR 0 2
36618: MINUS
36619: PUSH
36620: LD_VAR 0 3
36624: PLUS
36625: ST_TO_ADDR
36626: GO 36644
// length := i_to - i_from ;
36628: LD_ADDR_VAR 0 11
36632: PUSH
36633: LD_VAR 0 3
36637: PUSH
36638: LD_VAR 0 2
36642: MINUS
36643: ST_TO_ADDR
// end else
36644: GO 36707
// begin d := - 1 ;
36646: LD_ADDR_VAR 0 9
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: ST_TO_ADDR
// if i_from > i_to then
36655: LD_VAR 0 2
36659: PUSH
36660: LD_VAR 0 3
36664: GREATER
36665: IFFALSE 36685
// length := i_from - i_to else
36667: LD_ADDR_VAR 0 11
36671: PUSH
36672: LD_VAR 0 2
36676: PUSH
36677: LD_VAR 0 3
36681: MINUS
36682: ST_TO_ADDR
36683: GO 36707
// length := ( array - i_to ) + i_from ;
36685: LD_ADDR_VAR 0 11
36689: PUSH
36690: LD_VAR 0 1
36694: PUSH
36695: LD_VAR 0 3
36699: MINUS
36700: PUSH
36701: LD_VAR 0 2
36705: PLUS
36706: ST_TO_ADDR
// end ; if not length then
36707: LD_VAR 0 11
36711: NOT
36712: IFFALSE 36716
// exit ;
36714: GO 36874
// tmp := array ;
36716: LD_ADDR_VAR 0 10
36720: PUSH
36721: LD_VAR 0 1
36725: ST_TO_ADDR
// for i = 1 to length do
36726: LD_ADDR_VAR 0 6
36730: PUSH
36731: DOUBLE
36732: LD_INT 1
36734: DEC
36735: ST_TO_ADDR
36736: LD_VAR 0 11
36740: PUSH
36741: FOR_TO
36742: IFFALSE 36862
// begin for j = 1 to array do
36744: LD_ADDR_VAR 0 7
36748: PUSH
36749: DOUBLE
36750: LD_INT 1
36752: DEC
36753: ST_TO_ADDR
36754: LD_VAR 0 1
36758: PUSH
36759: FOR_TO
36760: IFFALSE 36848
// begin k := j + d ;
36762: LD_ADDR_VAR 0 8
36766: PUSH
36767: LD_VAR 0 7
36771: PUSH
36772: LD_VAR 0 9
36776: PLUS
36777: ST_TO_ADDR
// if k > array then
36778: LD_VAR 0 8
36782: PUSH
36783: LD_VAR 0 1
36787: GREATER
36788: IFFALSE 36798
// k := 1 ;
36790: LD_ADDR_VAR 0 8
36794: PUSH
36795: LD_INT 1
36797: ST_TO_ADDR
// if not k then
36798: LD_VAR 0 8
36802: NOT
36803: IFFALSE 36815
// k := array ;
36805: LD_ADDR_VAR 0 8
36809: PUSH
36810: LD_VAR 0 1
36814: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36815: LD_ADDR_VAR 0 10
36819: PUSH
36820: LD_VAR 0 10
36824: PPUSH
36825: LD_VAR 0 8
36829: PPUSH
36830: LD_VAR 0 1
36834: PUSH
36835: LD_VAR 0 7
36839: ARRAY
36840: PPUSH
36841: CALL_OW 1
36845: ST_TO_ADDR
// end ;
36846: GO 36759
36848: POP
36849: POP
// array := tmp ;
36850: LD_ADDR_VAR 0 1
36854: PUSH
36855: LD_VAR 0 10
36859: ST_TO_ADDR
// end ;
36860: GO 36741
36862: POP
36863: POP
// result := array ;
36864: LD_ADDR_VAR 0 5
36868: PUSH
36869: LD_VAR 0 1
36873: ST_TO_ADDR
// end ;
36874: LD_VAR 0 5
36878: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36879: LD_INT 0
36881: PPUSH
36882: PPUSH
// result := 0 ;
36883: LD_ADDR_VAR 0 3
36887: PUSH
36888: LD_INT 0
36890: ST_TO_ADDR
// if not array or not value in array then
36891: LD_VAR 0 1
36895: NOT
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: LD_VAR 0 1
36906: IN
36907: NOT
36908: OR
36909: IFFALSE 36913
// exit ;
36911: GO 36967
// for i = 1 to array do
36913: LD_ADDR_VAR 0 4
36917: PUSH
36918: DOUBLE
36919: LD_INT 1
36921: DEC
36922: ST_TO_ADDR
36923: LD_VAR 0 1
36927: PUSH
36928: FOR_TO
36929: IFFALSE 36965
// if value = array [ i ] then
36931: LD_VAR 0 2
36935: PUSH
36936: LD_VAR 0 1
36940: PUSH
36941: LD_VAR 0 4
36945: ARRAY
36946: EQUAL
36947: IFFALSE 36963
// begin result := i ;
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_VAR 0 4
36958: ST_TO_ADDR
// exit ;
36959: POP
36960: POP
36961: GO 36967
// end ;
36963: GO 36928
36965: POP
36966: POP
// end ;
36967: LD_VAR 0 3
36971: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36972: LD_INT 0
36974: PPUSH
// vc_chassis := chassis ;
36975: LD_ADDR_OWVAR 37
36979: PUSH
36980: LD_VAR 0 1
36984: ST_TO_ADDR
// vc_engine := engine ;
36985: LD_ADDR_OWVAR 39
36989: PUSH
36990: LD_VAR 0 2
36994: ST_TO_ADDR
// vc_control := control ;
36995: LD_ADDR_OWVAR 38
36999: PUSH
37000: LD_VAR 0 3
37004: ST_TO_ADDR
// vc_weapon := weapon ;
37005: LD_ADDR_OWVAR 40
37009: PUSH
37010: LD_VAR 0 4
37014: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37015: LD_ADDR_OWVAR 41
37019: PUSH
37020: LD_VAR 0 5
37024: ST_TO_ADDR
// end ;
37025: LD_VAR 0 6
37029: RET
// export function WantPlant ( unit ) ; var task ; begin
37030: LD_INT 0
37032: PPUSH
37033: PPUSH
// result := false ;
37034: LD_ADDR_VAR 0 2
37038: PUSH
37039: LD_INT 0
37041: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37042: LD_ADDR_VAR 0 3
37046: PUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: CALL_OW 437
37056: ST_TO_ADDR
// if task then
37057: LD_VAR 0 3
37061: IFFALSE 37089
// if task [ 1 ] [ 1 ] = p then
37063: LD_VAR 0 3
37067: PUSH
37068: LD_INT 1
37070: ARRAY
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PUSH
37076: LD_STRING p
37078: EQUAL
37079: IFFALSE 37089
// result := true ;
37081: LD_ADDR_VAR 0 2
37085: PUSH
37086: LD_INT 1
37088: ST_TO_ADDR
// end ;
37089: LD_VAR 0 2
37093: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
// if pos < 1 then
37100: LD_VAR 0 2
37104: PUSH
37105: LD_INT 1
37107: LESS
37108: IFFALSE 37112
// exit ;
37110: GO 37415
// if pos = 1 then
37112: LD_VAR 0 2
37116: PUSH
37117: LD_INT 1
37119: EQUAL
37120: IFFALSE 37153
// result := Replace ( arr , pos [ 1 ] , value ) else
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: LD_VAR 0 2
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: PPUSH
37141: LD_VAR 0 3
37145: PPUSH
37146: CALL_OW 1
37150: ST_TO_ADDR
37151: GO 37415
// begin tmp := arr ;
37153: LD_ADDR_VAR 0 6
37157: PUSH
37158: LD_VAR 0 1
37162: ST_TO_ADDR
// s_arr := [ tmp ] ;
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: LD_VAR 0 6
37172: PUSH
37173: EMPTY
37174: LIST
37175: ST_TO_ADDR
// for i = 1 to pos - 1 do
37176: LD_ADDR_VAR 0 5
37180: PUSH
37181: DOUBLE
37182: LD_INT 1
37184: DEC
37185: ST_TO_ADDR
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 1
37193: MINUS
37194: PUSH
37195: FOR_TO
37196: IFFALSE 37241
// begin tmp := tmp [ pos [ i ] ] ;
37198: LD_ADDR_VAR 0 6
37202: PUSH
37203: LD_VAR 0 6
37207: PUSH
37208: LD_VAR 0 2
37212: PUSH
37213: LD_VAR 0 5
37217: ARRAY
37218: ARRAY
37219: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37220: LD_ADDR_VAR 0 7
37224: PUSH
37225: LD_VAR 0 7
37229: PUSH
37230: LD_VAR 0 6
37234: PUSH
37235: EMPTY
37236: LIST
37237: ADD
37238: ST_TO_ADDR
// end ;
37239: GO 37195
37241: POP
37242: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37243: LD_ADDR_VAR 0 6
37247: PUSH
37248: LD_VAR 0 6
37252: PPUSH
37253: LD_VAR 0 2
37257: PUSH
37258: LD_VAR 0 2
37262: ARRAY
37263: PPUSH
37264: LD_VAR 0 3
37268: PPUSH
37269: CALL_OW 1
37273: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37274: LD_ADDR_VAR 0 7
37278: PUSH
37279: LD_VAR 0 7
37283: PPUSH
37284: LD_VAR 0 7
37288: PPUSH
37289: LD_VAR 0 6
37293: PPUSH
37294: CALL_OW 1
37298: ST_TO_ADDR
// for i = s_arr downto 2 do
37299: LD_ADDR_VAR 0 5
37303: PUSH
37304: DOUBLE
37305: LD_VAR 0 7
37309: INC
37310: ST_TO_ADDR
37311: LD_INT 2
37313: PUSH
37314: FOR_DOWNTO
37315: IFFALSE 37399
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37317: LD_ADDR_VAR 0 6
37321: PUSH
37322: LD_VAR 0 7
37326: PUSH
37327: LD_VAR 0 5
37331: PUSH
37332: LD_INT 1
37334: MINUS
37335: ARRAY
37336: PPUSH
37337: LD_VAR 0 2
37341: PUSH
37342: LD_VAR 0 5
37346: PUSH
37347: LD_INT 1
37349: MINUS
37350: ARRAY
37351: PPUSH
37352: LD_VAR 0 7
37356: PUSH
37357: LD_VAR 0 5
37361: ARRAY
37362: PPUSH
37363: CALL_OW 1
37367: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37368: LD_ADDR_VAR 0 7
37372: PUSH
37373: LD_VAR 0 7
37377: PPUSH
37378: LD_VAR 0 5
37382: PUSH
37383: LD_INT 1
37385: MINUS
37386: PPUSH
37387: LD_VAR 0 6
37391: PPUSH
37392: CALL_OW 1
37396: ST_TO_ADDR
// end ;
37397: GO 37314
37399: POP
37400: POP
// result := s_arr [ 1 ] ;
37401: LD_ADDR_VAR 0 4
37405: PUSH
37406: LD_VAR 0 7
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: ST_TO_ADDR
// end ; end ;
37415: LD_VAR 0 4
37419: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37420: LD_INT 0
37422: PPUSH
37423: PPUSH
// if not list then
37424: LD_VAR 0 1
37428: NOT
37429: IFFALSE 37433
// exit ;
37431: GO 37524
// i := list [ pos1 ] ;
37433: LD_ADDR_VAR 0 5
37437: PUSH
37438: LD_VAR 0 1
37442: PUSH
37443: LD_VAR 0 2
37447: ARRAY
37448: ST_TO_ADDR
// if not i then
37449: LD_VAR 0 5
37453: NOT
37454: IFFALSE 37458
// exit ;
37456: GO 37524
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37458: LD_ADDR_VAR 0 1
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: LD_VAR 0 1
37477: PUSH
37478: LD_VAR 0 3
37482: ARRAY
37483: PPUSH
37484: CALL_OW 1
37488: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37489: LD_ADDR_VAR 0 1
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: LD_VAR 0 3
37503: PPUSH
37504: LD_VAR 0 5
37508: PPUSH
37509: CALL_OW 1
37513: ST_TO_ADDR
// result := list ;
37514: LD_ADDR_VAR 0 4
37518: PUSH
37519: LD_VAR 0 1
37523: ST_TO_ADDR
// end ;
37524: LD_VAR 0 4
37528: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37529: LD_INT 0
37531: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37532: LD_ADDR_VAR 0 5
37536: PUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 250
37546: PPUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 251
37556: PPUSH
37557: LD_VAR 0 2
37561: PPUSH
37562: LD_VAR 0 3
37566: PPUSH
37567: LD_VAR 0 4
37571: PPUSH
37572: CALL 37950 0 5
37576: ST_TO_ADDR
// end ;
37577: LD_VAR 0 5
37581: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37582: LD_INT 0
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
// if not list or not unit then
37588: LD_VAR 0 2
37592: NOT
37593: PUSH
37594: LD_VAR 0 1
37598: NOT
37599: OR
37600: IFFALSE 37604
// exit ;
37602: GO 37945
// result := [ ] ;
37604: LD_ADDR_VAR 0 5
37608: PUSH
37609: EMPTY
37610: ST_TO_ADDR
// for i in list do
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: LD_VAR 0 2
37620: PUSH
37621: FOR_IN
37622: IFFALSE 37840
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37624: LD_ADDR_VAR 0 8
37628: PUSH
37629: LD_VAR 0 1
37633: PPUSH
37634: LD_VAR 0 6
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: PPUSH
37643: LD_VAR 0 6
37647: PUSH
37648: LD_INT 2
37650: ARRAY
37651: PPUSH
37652: CALL_OW 297
37656: ST_TO_ADDR
// if not Count ( result ) then
37657: LD_VAR 0 5
37661: PPUSH
37662: CALL 34234 0 1
37666: NOT
37667: IFFALSE 37700
// begin result := Join ( result , [ i , tmp ] ) ;
37669: LD_ADDR_VAR 0 5
37673: PUSH
37674: LD_VAR 0 5
37678: PPUSH
37679: LD_VAR 0 6
37683: PUSH
37684: LD_VAR 0 8
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PPUSH
37693: CALL 69823 0 2
37697: ST_TO_ADDR
// continue ;
37698: GO 37621
// end ; if result [ result ] [ 2 ] <= tmp then
37700: LD_VAR 0 5
37704: PUSH
37705: LD_VAR 0 5
37709: ARRAY
37710: PUSH
37711: LD_INT 2
37713: ARRAY
37714: PUSH
37715: LD_VAR 0 8
37719: LESSEQUAL
37720: IFFALSE 37753
// result := Join ( result , [ i , tmp ] ) else
37722: LD_ADDR_VAR 0 5
37726: PUSH
37727: LD_VAR 0 5
37731: PPUSH
37732: LD_VAR 0 6
37736: PUSH
37737: LD_VAR 0 8
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PPUSH
37746: CALL 69823 0 2
37750: ST_TO_ADDR
37751: GO 37838
// begin for j := 1 to Count ( result ) do
37753: LD_ADDR_VAR 0 7
37757: PUSH
37758: DOUBLE
37759: LD_INT 1
37761: DEC
37762: ST_TO_ADDR
37763: LD_VAR 0 5
37767: PPUSH
37768: CALL 34234 0 1
37772: PUSH
37773: FOR_TO
37774: IFFALSE 37836
// begin if tmp < result [ j ] [ 2 ] then
37776: LD_VAR 0 8
37780: PUSH
37781: LD_VAR 0 5
37785: PUSH
37786: LD_VAR 0 7
37790: ARRAY
37791: PUSH
37792: LD_INT 2
37794: ARRAY
37795: LESS
37796: IFFALSE 37834
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_VAR 0 5
37807: PPUSH
37808: LD_VAR 0 7
37812: PPUSH
37813: LD_VAR 0 6
37817: PUSH
37818: LD_VAR 0 8
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PPUSH
37827: CALL_OW 2
37831: ST_TO_ADDR
// break ;
37832: GO 37836
// end ; end ;
37834: GO 37773
37836: POP
37837: POP
// end ; end ;
37838: GO 37621
37840: POP
37841: POP
// if result and not asc then
37842: LD_VAR 0 5
37846: PUSH
37847: LD_VAR 0 3
37851: NOT
37852: AND
37853: IFFALSE 37870
// result := ReverseArray ( result ) ;
37855: LD_ADDR_VAR 0 5
37859: PUSH
37860: LD_VAR 0 5
37864: PPUSH
37865: CALL 65110 0 1
37869: ST_TO_ADDR
// tmp := [ ] ;
37870: LD_ADDR_VAR 0 8
37874: PUSH
37875: EMPTY
37876: ST_TO_ADDR
// if mode then
37877: LD_VAR 0 4
37881: IFFALSE 37945
// begin for i := 1 to result do
37883: LD_ADDR_VAR 0 6
37887: PUSH
37888: DOUBLE
37889: LD_INT 1
37891: DEC
37892: ST_TO_ADDR
37893: LD_VAR 0 5
37897: PUSH
37898: FOR_TO
37899: IFFALSE 37933
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37901: LD_ADDR_VAR 0 8
37905: PUSH
37906: LD_VAR 0 8
37910: PPUSH
37911: LD_VAR 0 5
37915: PUSH
37916: LD_VAR 0 6
37920: ARRAY
37921: PUSH
37922: LD_INT 1
37924: ARRAY
37925: PPUSH
37926: CALL 69823 0 2
37930: ST_TO_ADDR
37931: GO 37898
37933: POP
37934: POP
// result := tmp ;
37935: LD_ADDR_VAR 0 5
37939: PUSH
37940: LD_VAR 0 8
37944: ST_TO_ADDR
// end ; end ;
37945: LD_VAR 0 5
37949: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
37955: PPUSH
// if not list then
37956: LD_VAR 0 3
37960: NOT
37961: IFFALSE 37965
// exit ;
37963: GO 38353
// result := [ ] ;
37965: LD_ADDR_VAR 0 6
37969: PUSH
37970: EMPTY
37971: ST_TO_ADDR
// for i in list do
37972: LD_ADDR_VAR 0 7
37976: PUSH
37977: LD_VAR 0 3
37981: PUSH
37982: FOR_IN
37983: IFFALSE 38185
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37985: LD_ADDR_VAR 0 9
37989: PUSH
37990: LD_VAR 0 7
37994: PPUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: LD_VAR 0 2
38004: PPUSH
38005: CALL_OW 297
38009: ST_TO_ADDR
// if not result then
38010: LD_VAR 0 6
38014: NOT
38015: IFFALSE 38041
// result := [ [ i , tmp ] ] else
38017: LD_ADDR_VAR 0 6
38021: PUSH
38022: LD_VAR 0 7
38026: PUSH
38027: LD_VAR 0 9
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: EMPTY
38037: LIST
38038: ST_TO_ADDR
38039: GO 38183
// begin if result [ result ] [ 2 ] < tmp then
38041: LD_VAR 0 6
38045: PUSH
38046: LD_VAR 0 6
38050: ARRAY
38051: PUSH
38052: LD_INT 2
38054: ARRAY
38055: PUSH
38056: LD_VAR 0 9
38060: LESS
38061: IFFALSE 38103
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38063: LD_ADDR_VAR 0 6
38067: PUSH
38068: LD_VAR 0 6
38072: PPUSH
38073: LD_VAR 0 6
38077: PUSH
38078: LD_INT 1
38080: PLUS
38081: PPUSH
38082: LD_VAR 0 7
38086: PUSH
38087: LD_VAR 0 9
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PPUSH
38096: CALL_OW 2
38100: ST_TO_ADDR
38101: GO 38183
// for j = 1 to result do
38103: LD_ADDR_VAR 0 8
38107: PUSH
38108: DOUBLE
38109: LD_INT 1
38111: DEC
38112: ST_TO_ADDR
38113: LD_VAR 0 6
38117: PUSH
38118: FOR_TO
38119: IFFALSE 38181
// begin if tmp < result [ j ] [ 2 ] then
38121: LD_VAR 0 9
38125: PUSH
38126: LD_VAR 0 6
38130: PUSH
38131: LD_VAR 0 8
38135: ARRAY
38136: PUSH
38137: LD_INT 2
38139: ARRAY
38140: LESS
38141: IFFALSE 38179
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38143: LD_ADDR_VAR 0 6
38147: PUSH
38148: LD_VAR 0 6
38152: PPUSH
38153: LD_VAR 0 8
38157: PPUSH
38158: LD_VAR 0 7
38162: PUSH
38163: LD_VAR 0 9
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PPUSH
38172: CALL_OW 2
38176: ST_TO_ADDR
// break ;
38177: GO 38181
// end ; end ;
38179: GO 38118
38181: POP
38182: POP
// end ; end ;
38183: GO 37982
38185: POP
38186: POP
// if result and not asc then
38187: LD_VAR 0 6
38191: PUSH
38192: LD_VAR 0 4
38196: NOT
38197: AND
38198: IFFALSE 38273
// begin tmp := result ;
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_VAR 0 6
38209: ST_TO_ADDR
// for i = tmp downto 1 do
38210: LD_ADDR_VAR 0 7
38214: PUSH
38215: DOUBLE
38216: LD_VAR 0 9
38220: INC
38221: ST_TO_ADDR
38222: LD_INT 1
38224: PUSH
38225: FOR_DOWNTO
38226: IFFALSE 38271
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38228: LD_ADDR_VAR 0 6
38232: PUSH
38233: LD_VAR 0 6
38237: PPUSH
38238: LD_VAR 0 9
38242: PUSH
38243: LD_VAR 0 7
38247: MINUS
38248: PUSH
38249: LD_INT 1
38251: PLUS
38252: PPUSH
38253: LD_VAR 0 9
38257: PUSH
38258: LD_VAR 0 7
38262: ARRAY
38263: PPUSH
38264: CALL_OW 1
38268: ST_TO_ADDR
38269: GO 38225
38271: POP
38272: POP
// end ; tmp := [ ] ;
38273: LD_ADDR_VAR 0 9
38277: PUSH
38278: EMPTY
38279: ST_TO_ADDR
// if mode then
38280: LD_VAR 0 5
38284: IFFALSE 38353
// begin for i = 1 to result do
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: DOUBLE
38292: LD_INT 1
38294: DEC
38295: ST_TO_ADDR
38296: LD_VAR 0 6
38300: PUSH
38301: FOR_TO
38302: IFFALSE 38341
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38304: LD_ADDR_VAR 0 9
38308: PUSH
38309: LD_VAR 0 9
38313: PPUSH
38314: LD_VAR 0 7
38318: PPUSH
38319: LD_VAR 0 6
38323: PUSH
38324: LD_VAR 0 7
38328: ARRAY
38329: PUSH
38330: LD_INT 1
38332: ARRAY
38333: PPUSH
38334: CALL_OW 1
38338: ST_TO_ADDR
38339: GO 38301
38341: POP
38342: POP
// result := tmp ;
38343: LD_ADDR_VAR 0 6
38347: PUSH
38348: LD_VAR 0 9
38352: ST_TO_ADDR
// end ; end ;
38353: LD_VAR 0 6
38357: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38358: LD_INT 0
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
// if not x or not y then
38388: LD_VAR 0 2
38392: NOT
38393: PUSH
38394: LD_VAR 0 3
38398: NOT
38399: OR
38400: IFFALSE 38404
// exit ;
38402: GO 40054
// if not range then
38404: LD_VAR 0 4
38408: NOT
38409: IFFALSE 38419
// range := 10 ;
38411: LD_ADDR_VAR 0 4
38415: PUSH
38416: LD_INT 10
38418: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38419: LD_ADDR_VAR 0 8
38423: PUSH
38424: LD_INT 81
38426: PUSH
38427: LD_VAR 0 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 92
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_VAR 0 3
38448: PUSH
38449: LD_VAR 0 4
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 21
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: PPUSH
38482: CALL_OW 69
38486: ST_TO_ADDR
// if not tmp then
38487: LD_VAR 0 8
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 40054
// for i in tmp do
38496: LD_ADDR_VAR 0 6
38500: PUSH
38501: LD_VAR 0 8
38505: PUSH
38506: FOR_IN
38507: IFFALSE 40029
// begin points := [ 0 , 0 , 0 ] ;
38509: LD_ADDR_VAR 0 9
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// bpoints := 1 ;
38528: LD_ADDR_VAR 0 10
38532: PUSH
38533: LD_INT 1
38535: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38536: LD_VAR 0 6
38540: PPUSH
38541: CALL_OW 247
38545: PUSH
38546: LD_INT 1
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 39132
38554: POP
// begin if GetClass ( i ) = 1 then
38555: LD_VAR 0 6
38559: PPUSH
38560: CALL_OW 257
38564: PUSH
38565: LD_INT 1
38567: EQUAL
38568: IFFALSE 38589
// points := [ 10 , 5 , 3 ] ;
38570: LD_ADDR_VAR 0 9
38574: PUSH
38575: LD_INT 10
38577: PUSH
38578: LD_INT 5
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38589: LD_VAR 0 6
38593: PPUSH
38594: CALL_OW 257
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 4
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: IN
38613: IFFALSE 38634
// points := [ 3 , 2 , 1 ] ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 257
38643: PUSH
38644: LD_INT 5
38646: EQUAL
38647: IFFALSE 38668
// points := [ 130 , 5 , 2 ] ;
38649: LD_ADDR_VAR 0 9
38653: PUSH
38654: LD_INT 130
38656: PUSH
38657: LD_INT 5
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38668: LD_VAR 0 6
38672: PPUSH
38673: CALL_OW 257
38677: PUSH
38678: LD_INT 8
38680: EQUAL
38681: IFFALSE 38702
// points := [ 35 , 35 , 30 ] ;
38683: LD_ADDR_VAR 0 9
38687: PUSH
38688: LD_INT 35
38690: PUSH
38691: LD_INT 35
38693: PUSH
38694: LD_INT 30
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38702: LD_VAR 0 6
38706: PPUSH
38707: CALL_OW 257
38711: PUSH
38712: LD_INT 9
38714: EQUAL
38715: IFFALSE 38736
// points := [ 20 , 55 , 40 ] ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_INT 20
38724: PUSH
38725: LD_INT 55
38727: PUSH
38728: LD_INT 40
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38736: LD_VAR 0 6
38740: PPUSH
38741: CALL_OW 257
38745: PUSH
38746: LD_INT 12
38748: PUSH
38749: LD_INT 16
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: IN
38756: IFFALSE 38777
// points := [ 5 , 3 , 2 ] ;
38758: LD_ADDR_VAR 0 9
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 257
38786: PUSH
38787: LD_INT 17
38789: EQUAL
38790: IFFALSE 38811
// points := [ 100 , 50 , 75 ] ;
38792: LD_ADDR_VAR 0 9
38796: PUSH
38797: LD_INT 100
38799: PUSH
38800: LD_INT 50
38802: PUSH
38803: LD_INT 75
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38811: LD_VAR 0 6
38815: PPUSH
38816: CALL_OW 257
38820: PUSH
38821: LD_INT 15
38823: EQUAL
38824: IFFALSE 38845
// points := [ 10 , 5 , 3 ] ;
38826: LD_ADDR_VAR 0 9
38830: PUSH
38831: LD_INT 10
38833: PUSH
38834: LD_INT 5
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38845: LD_VAR 0 6
38849: PPUSH
38850: CALL_OW 257
38854: PUSH
38855: LD_INT 14
38857: EQUAL
38858: IFFALSE 38879
// points := [ 10 , 0 , 0 ] ;
38860: LD_ADDR_VAR 0 9
38864: PUSH
38865: LD_INT 10
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38879: LD_VAR 0 6
38883: PPUSH
38884: CALL_OW 257
38888: PUSH
38889: LD_INT 11
38891: EQUAL
38892: IFFALSE 38913
// points := [ 30 , 10 , 5 ] ;
38894: LD_ADDR_VAR 0 9
38898: PUSH
38899: LD_INT 30
38901: PUSH
38902: LD_INT 10
38904: PUSH
38905: LD_INT 5
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38913: LD_VAR 0 1
38917: PPUSH
38918: LD_INT 5
38920: PPUSH
38921: CALL_OW 321
38925: PUSH
38926: LD_INT 2
38928: EQUAL
38929: IFFALSE 38946
// bpoints := bpoints * 1.8 ;
38931: LD_ADDR_VAR 0 10
38935: PUSH
38936: LD_VAR 0 10
38940: PUSH
38941: LD_REAL  1.80000000000000E+0000
38944: MUL
38945: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38946: LD_VAR 0 6
38950: PPUSH
38951: CALL_OW 257
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: LD_INT 4
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: IN
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_INT 51
38982: PPUSH
38983: CALL_OW 321
38987: PUSH
38988: LD_INT 2
38990: EQUAL
38991: AND
38992: IFFALSE 39009
// bpoints := bpoints * 1.2 ;
38994: LD_ADDR_VAR 0 10
38998: PUSH
38999: LD_VAR 0 10
39003: PUSH
39004: LD_REAL  1.20000000000000E+0000
39007: MUL
39008: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39009: LD_VAR 0 6
39013: PPUSH
39014: CALL_OW 257
39018: PUSH
39019: LD_INT 5
39021: PUSH
39022: LD_INT 7
39024: PUSH
39025: LD_INT 9
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: IN
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: LD_INT 52
39041: PPUSH
39042: CALL_OW 321
39046: PUSH
39047: LD_INT 2
39049: EQUAL
39050: AND
39051: IFFALSE 39068
// bpoints := bpoints * 1.5 ;
39053: LD_ADDR_VAR 0 10
39057: PUSH
39058: LD_VAR 0 10
39062: PUSH
39063: LD_REAL  1.50000000000000E+0000
39066: MUL
39067: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39068: LD_VAR 0 1
39072: PPUSH
39073: LD_INT 66
39075: PPUSH
39076: CALL_OW 321
39080: PUSH
39081: LD_INT 2
39083: EQUAL
39084: IFFALSE 39101
// bpoints := bpoints * 1.1 ;
39086: LD_ADDR_VAR 0 10
39090: PUSH
39091: LD_VAR 0 10
39095: PUSH
39096: LD_REAL  1.10000000000000E+0000
39099: MUL
39100: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39101: LD_ADDR_VAR 0 10
39105: PUSH
39106: LD_VAR 0 10
39110: PUSH
39111: LD_VAR 0 6
39115: PPUSH
39116: LD_INT 1
39118: PPUSH
39119: CALL_OW 259
39123: PUSH
39124: LD_REAL  1.15000000000000E+0000
39127: MUL
39128: MUL
39129: ST_TO_ADDR
// end ; unit_vehicle :
39130: GO 39958
39132: LD_INT 2
39134: DOUBLE
39135: EQUAL
39136: IFTRUE 39140
39138: GO 39946
39140: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39141: LD_VAR 0 6
39145: PPUSH
39146: CALL_OW 264
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 42
39156: PUSH
39157: LD_INT 24
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: IN
39165: IFFALSE 39186
// points := [ 25 , 5 , 3 ] ;
39167: LD_ADDR_VAR 0 9
39171: PUSH
39172: LD_INT 25
39174: PUSH
39175: LD_INT 5
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39186: LD_VAR 0 6
39190: PPUSH
39191: CALL_OW 264
39195: PUSH
39196: LD_INT 4
39198: PUSH
39199: LD_INT 43
39201: PUSH
39202: LD_INT 25
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: IN
39210: IFFALSE 39231
// points := [ 40 , 15 , 5 ] ;
39212: LD_ADDR_VAR 0 9
39216: PUSH
39217: LD_INT 40
39219: PUSH
39220: LD_INT 15
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39231: LD_VAR 0 6
39235: PPUSH
39236: CALL_OW 264
39240: PUSH
39241: LD_INT 3
39243: PUSH
39244: LD_INT 23
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: IN
39251: IFFALSE 39272
// points := [ 7 , 25 , 8 ] ;
39253: LD_ADDR_VAR 0 9
39257: PUSH
39258: LD_INT 7
39260: PUSH
39261: LD_INT 25
39263: PUSH
39264: LD_INT 8
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39272: LD_VAR 0 6
39276: PPUSH
39277: CALL_OW 264
39281: PUSH
39282: LD_INT 5
39284: PUSH
39285: LD_INT 27
39287: PUSH
39288: LD_INT 44
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: IN
39296: IFFALSE 39317
// points := [ 14 , 50 , 16 ] ;
39298: LD_ADDR_VAR 0 9
39302: PUSH
39303: LD_INT 14
39305: PUSH
39306: LD_INT 50
39308: PUSH
39309: LD_INT 16
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39317: LD_VAR 0 6
39321: PPUSH
39322: CALL_OW 264
39326: PUSH
39327: LD_INT 6
39329: PUSH
39330: LD_INT 46
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: IN
39337: IFFALSE 39358
// points := [ 32 , 120 , 70 ] ;
39339: LD_ADDR_VAR 0 9
39343: PUSH
39344: LD_INT 32
39346: PUSH
39347: LD_INT 120
39349: PUSH
39350: LD_INT 70
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39358: LD_VAR 0 6
39362: PPUSH
39363: CALL_OW 264
39367: PUSH
39368: LD_INT 7
39370: PUSH
39371: LD_INT 28
39373: PUSH
39374: LD_INT 45
39376: PUSH
39377: LD_INT 92
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: IN
39386: IFFALSE 39407
// points := [ 35 , 20 , 45 ] ;
39388: LD_ADDR_VAR 0 9
39392: PUSH
39393: LD_INT 35
39395: PUSH
39396: LD_INT 20
39398: PUSH
39399: LD_INT 45
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39407: LD_VAR 0 6
39411: PPUSH
39412: CALL_OW 264
39416: PUSH
39417: LD_INT 47
39419: PUSH
39420: EMPTY
39421: LIST
39422: IN
39423: IFFALSE 39444
// points := [ 67 , 45 , 75 ] ;
39425: LD_ADDR_VAR 0 9
39429: PUSH
39430: LD_INT 67
39432: PUSH
39433: LD_INT 45
39435: PUSH
39436: LD_INT 75
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39444: LD_VAR 0 6
39448: PPUSH
39449: CALL_OW 264
39453: PUSH
39454: LD_INT 26
39456: PUSH
39457: EMPTY
39458: LIST
39459: IN
39460: IFFALSE 39481
// points := [ 120 , 30 , 80 ] ;
39462: LD_ADDR_VAR 0 9
39466: PUSH
39467: LD_INT 120
39469: PUSH
39470: LD_INT 30
39472: PUSH
39473: LD_INT 80
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39481: LD_VAR 0 6
39485: PPUSH
39486: CALL_OW 264
39490: PUSH
39491: LD_INT 22
39493: PUSH
39494: EMPTY
39495: LIST
39496: IN
39497: IFFALSE 39518
// points := [ 40 , 1 , 1 ] ;
39499: LD_ADDR_VAR 0 9
39503: PUSH
39504: LD_INT 40
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39518: LD_VAR 0 6
39522: PPUSH
39523: CALL_OW 264
39527: PUSH
39528: LD_INT 29
39530: PUSH
39531: EMPTY
39532: LIST
39533: IN
39534: IFFALSE 39555
// points := [ 70 , 200 , 400 ] ;
39536: LD_ADDR_VAR 0 9
39540: PUSH
39541: LD_INT 70
39543: PUSH
39544: LD_INT 200
39546: PUSH
39547: LD_INT 400
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39555: LD_VAR 0 6
39559: PPUSH
39560: CALL_OW 264
39564: PUSH
39565: LD_INT 14
39567: PUSH
39568: LD_INT 53
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: IN
39575: IFFALSE 39596
// points := [ 40 , 10 , 20 ] ;
39577: LD_ADDR_VAR 0 9
39581: PUSH
39582: LD_INT 40
39584: PUSH
39585: LD_INT 10
39587: PUSH
39588: LD_INT 20
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39596: LD_VAR 0 6
39600: PPUSH
39601: CALL_OW 264
39605: PUSH
39606: LD_INT 9
39608: PUSH
39609: EMPTY
39610: LIST
39611: IN
39612: IFFALSE 39633
// points := [ 5 , 70 , 20 ] ;
39614: LD_ADDR_VAR 0 9
39618: PUSH
39619: LD_INT 5
39621: PUSH
39622: LD_INT 70
39624: PUSH
39625: LD_INT 20
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39633: LD_VAR 0 6
39637: PPUSH
39638: CALL_OW 264
39642: PUSH
39643: LD_INT 10
39645: PUSH
39646: EMPTY
39647: LIST
39648: IN
39649: IFFALSE 39670
// points := [ 35 , 110 , 70 ] ;
39651: LD_ADDR_VAR 0 9
39655: PUSH
39656: LD_INT 35
39658: PUSH
39659: LD_INT 110
39661: PUSH
39662: LD_INT 70
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39670: LD_VAR 0 6
39674: PPUSH
39675: CALL_OW 265
39679: PUSH
39680: LD_INT 25
39682: EQUAL
39683: IFFALSE 39704
// points := [ 80 , 65 , 100 ] ;
39685: LD_ADDR_VAR 0 9
39689: PUSH
39690: LD_INT 80
39692: PUSH
39693: LD_INT 65
39695: PUSH
39696: LD_INT 100
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39704: LD_VAR 0 6
39708: PPUSH
39709: CALL_OW 263
39713: PUSH
39714: LD_INT 1
39716: EQUAL
39717: IFFALSE 39752
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39719: LD_ADDR_VAR 0 10
39723: PUSH
39724: LD_VAR 0 10
39728: PUSH
39729: LD_VAR 0 6
39733: PPUSH
39734: CALL_OW 311
39738: PPUSH
39739: LD_INT 3
39741: PPUSH
39742: CALL_OW 259
39746: PUSH
39747: LD_INT 4
39749: MUL
39750: MUL
39751: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39752: LD_VAR 0 6
39756: PPUSH
39757: CALL_OW 263
39761: PUSH
39762: LD_INT 2
39764: EQUAL
39765: IFFALSE 39816
// begin j := IsControledBy ( i ) ;
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: LD_VAR 0 6
39776: PPUSH
39777: CALL_OW 312
39781: ST_TO_ADDR
// if j then
39782: LD_VAR 0 7
39786: IFFALSE 39816
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39788: LD_ADDR_VAR 0 10
39792: PUSH
39793: LD_VAR 0 10
39797: PUSH
39798: LD_VAR 0 7
39802: PPUSH
39803: LD_INT 3
39805: PPUSH
39806: CALL_OW 259
39810: PUSH
39811: LD_INT 3
39813: MUL
39814: MUL
39815: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39816: LD_VAR 0 6
39820: PPUSH
39821: CALL_OW 264
39825: PUSH
39826: LD_INT 5
39828: PUSH
39829: LD_INT 6
39831: PUSH
39832: LD_INT 46
39834: PUSH
39835: LD_INT 44
39837: PUSH
39838: LD_INT 47
39840: PUSH
39841: LD_INT 45
39843: PUSH
39844: LD_INT 28
39846: PUSH
39847: LD_INT 7
39849: PUSH
39850: LD_INT 27
39852: PUSH
39853: LD_INT 29
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: IN
39868: PUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: LD_INT 52
39876: PPUSH
39877: CALL_OW 321
39881: PUSH
39882: LD_INT 2
39884: EQUAL
39885: AND
39886: IFFALSE 39903
// bpoints := bpoints * 1.2 ;
39888: LD_ADDR_VAR 0 10
39892: PUSH
39893: LD_VAR 0 10
39897: PUSH
39898: LD_REAL  1.20000000000000E+0000
39901: MUL
39902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39903: LD_VAR 0 6
39907: PPUSH
39908: CALL_OW 264
39912: PUSH
39913: LD_INT 6
39915: PUSH
39916: LD_INT 46
39918: PUSH
39919: LD_INT 47
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: IN
39927: IFFALSE 39944
// bpoints := bpoints * 1.2 ;
39929: LD_ADDR_VAR 0 10
39933: PUSH
39934: LD_VAR 0 10
39938: PUSH
39939: LD_REAL  1.20000000000000E+0000
39942: MUL
39943: ST_TO_ADDR
// end ; unit_building :
39944: GO 39958
39946: LD_INT 3
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39954
39952: GO 39957
39954: POP
// ; end ;
39955: GO 39958
39957: POP
// for j = 1 to 3 do
39958: LD_ADDR_VAR 0 7
39962: PUSH
39963: DOUBLE
39964: LD_INT 1
39966: DEC
39967: ST_TO_ADDR
39968: LD_INT 3
39970: PUSH
39971: FOR_TO
39972: IFFALSE 40025
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39974: LD_ADDR_VAR 0 5
39978: PUSH
39979: LD_VAR 0 5
39983: PPUSH
39984: LD_VAR 0 7
39988: PPUSH
39989: LD_VAR 0 5
39993: PUSH
39994: LD_VAR 0 7
39998: ARRAY
39999: PUSH
40000: LD_VAR 0 9
40004: PUSH
40005: LD_VAR 0 7
40009: ARRAY
40010: PUSH
40011: LD_VAR 0 10
40015: MUL
40016: PLUS
40017: PPUSH
40018: CALL_OW 1
40022: ST_TO_ADDR
40023: GO 39971
40025: POP
40026: POP
// end ;
40027: GO 38506
40029: POP
40030: POP
// result := Replace ( result , 4 , tmp ) ;
40031: LD_ADDR_VAR 0 5
40035: PUSH
40036: LD_VAR 0 5
40040: PPUSH
40041: LD_INT 4
40043: PPUSH
40044: LD_VAR 0 8
40048: PPUSH
40049: CALL_OW 1
40053: ST_TO_ADDR
// end ;
40054: LD_VAR 0 5
40058: RET
// export function DangerAtRange ( unit , range ) ; begin
40059: LD_INT 0
40061: PPUSH
// if not unit then
40062: LD_VAR 0 1
40066: NOT
40067: IFFALSE 40071
// exit ;
40069: GO 40116
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40071: LD_ADDR_VAR 0 3
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 255
40085: PPUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 250
40095: PPUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 251
40105: PPUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL 38358 0 4
40115: ST_TO_ADDR
// end ;
40116: LD_VAR 0 3
40120: RET
// export function DangerInArea ( side , area ) ; begin
40121: LD_INT 0
40123: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_VAR 0 2
40133: PPUSH
40134: LD_INT 81
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PPUSH
40146: CALL_OW 70
40150: ST_TO_ADDR
// end ;
40151: LD_VAR 0 3
40155: RET
// export function IsExtension ( b ) ; begin
40156: LD_INT 0
40158: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40159: LD_ADDR_VAR 0 2
40163: PUSH
40164: LD_VAR 0 1
40168: PUSH
40169: LD_INT 23
40171: PUSH
40172: LD_INT 20
40174: PUSH
40175: LD_INT 22
40177: PUSH
40178: LD_INT 17
40180: PUSH
40181: LD_INT 24
40183: PUSH
40184: LD_INT 21
40186: PUSH
40187: LD_INT 19
40189: PUSH
40190: LD_INT 16
40192: PUSH
40193: LD_INT 25
40195: PUSH
40196: LD_INT 18
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: IN
40211: ST_TO_ADDR
// end ;
40212: LD_VAR 0 2
40216: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40217: LD_INT 0
40219: PPUSH
40220: PPUSH
40221: PPUSH
// result := [ ] ;
40222: LD_ADDR_VAR 0 4
40226: PUSH
40227: EMPTY
40228: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40229: LD_ADDR_VAR 0 5
40233: PUSH
40234: LD_VAR 0 2
40238: PPUSH
40239: LD_INT 21
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PPUSH
40249: CALL_OW 70
40253: ST_TO_ADDR
// if not tmp then
40254: LD_VAR 0 5
40258: NOT
40259: IFFALSE 40263
// exit ;
40261: GO 40327
// if checkLink then
40263: LD_VAR 0 3
40267: IFFALSE 40317
// begin for i in tmp do
40269: LD_ADDR_VAR 0 6
40273: PUSH
40274: LD_VAR 0 5
40278: PUSH
40279: FOR_IN
40280: IFFALSE 40315
// if GetBase ( i ) <> base then
40282: LD_VAR 0 6
40286: PPUSH
40287: CALL_OW 274
40291: PUSH
40292: LD_VAR 0 1
40296: NONEQUAL
40297: IFFALSE 40313
// ComLinkToBase ( base , i ) ;
40299: LD_VAR 0 1
40303: PPUSH
40304: LD_VAR 0 6
40308: PPUSH
40309: CALL_OW 169
40313: GO 40279
40315: POP
40316: POP
// end ; result := tmp ;
40317: LD_ADDR_VAR 0 4
40321: PUSH
40322: LD_VAR 0 5
40326: ST_TO_ADDR
// end ;
40327: LD_VAR 0 4
40331: RET
// export function ComComplete ( units , b ) ; var i ; begin
40332: LD_INT 0
40334: PPUSH
40335: PPUSH
// if not units then
40336: LD_VAR 0 1
40340: NOT
40341: IFFALSE 40345
// exit ;
40343: GO 40435
// for i in units do
40345: LD_ADDR_VAR 0 4
40349: PUSH
40350: LD_VAR 0 1
40354: PUSH
40355: FOR_IN
40356: IFFALSE 40433
// if BuildingStatus ( b ) = bs_build then
40358: LD_VAR 0 2
40362: PPUSH
40363: CALL_OW 461
40367: PUSH
40368: LD_INT 1
40370: EQUAL
40371: IFFALSE 40431
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40373: LD_VAR 0 4
40377: PPUSH
40378: LD_STRING h
40380: PUSH
40381: LD_VAR 0 2
40385: PPUSH
40386: CALL_OW 250
40390: PUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: CALL_OW 251
40400: PUSH
40401: LD_VAR 0 2
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: PPUSH
40427: CALL_OW 446
40431: GO 40355
40433: POP
40434: POP
// end ;
40435: LD_VAR 0 3
40439: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40440: LD_INT 0
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
40447: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40448: LD_VAR 0 1
40452: NOT
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 263
40463: PUSH
40464: LD_INT 2
40466: NONEQUAL
40467: OR
40468: IFFALSE 40472
// exit ;
40470: GO 40788
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40472: LD_ADDR_VAR 0 6
40476: PUSH
40477: LD_INT 22
40479: PUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: CALL_OW 255
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 30
40499: PUSH
40500: LD_INT 36
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 34
40509: PUSH
40510: LD_INT 31
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PPUSH
40526: CALL_OW 69
40530: ST_TO_ADDR
// if not tmp then
40531: LD_VAR 0 6
40535: NOT
40536: IFFALSE 40540
// exit ;
40538: GO 40788
// result := [ ] ;
40540: LD_ADDR_VAR 0 2
40544: PUSH
40545: EMPTY
40546: ST_TO_ADDR
// for i in tmp do
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_VAR 0 6
40556: PUSH
40557: FOR_IN
40558: IFFALSE 40629
// begin t := UnitsInside ( i ) ;
40560: LD_ADDR_VAR 0 4
40564: PUSH
40565: LD_VAR 0 3
40569: PPUSH
40570: CALL_OW 313
40574: ST_TO_ADDR
// if t then
40575: LD_VAR 0 4
40579: IFFALSE 40627
// for j in t do
40581: LD_ADDR_VAR 0 7
40585: PUSH
40586: LD_VAR 0 4
40590: PUSH
40591: FOR_IN
40592: IFFALSE 40625
// result := Replace ( result , result + 1 , j ) ;
40594: LD_ADDR_VAR 0 2
40598: PUSH
40599: LD_VAR 0 2
40603: PPUSH
40604: LD_VAR 0 2
40608: PUSH
40609: LD_INT 1
40611: PLUS
40612: PPUSH
40613: LD_VAR 0 7
40617: PPUSH
40618: CALL_OW 1
40622: ST_TO_ADDR
40623: GO 40591
40625: POP
40626: POP
// end ;
40627: GO 40557
40629: POP
40630: POP
// if not result then
40631: LD_VAR 0 2
40635: NOT
40636: IFFALSE 40640
// exit ;
40638: GO 40788
// mech := result [ 1 ] ;
40640: LD_ADDR_VAR 0 5
40644: PUSH
40645: LD_VAR 0 2
40649: PUSH
40650: LD_INT 1
40652: ARRAY
40653: ST_TO_ADDR
// if result > 1 then
40654: LD_VAR 0 2
40658: PUSH
40659: LD_INT 1
40661: GREATER
40662: IFFALSE 40774
// begin for i = 2 to result do
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: DOUBLE
40670: LD_INT 2
40672: DEC
40673: ST_TO_ADDR
40674: LD_VAR 0 2
40678: PUSH
40679: FOR_TO
40680: IFFALSE 40772
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_VAR 0 2
40691: PUSH
40692: LD_VAR 0 3
40696: ARRAY
40697: PPUSH
40698: LD_INT 3
40700: PPUSH
40701: CALL_OW 259
40705: PUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_VAR 0 3
40715: ARRAY
40716: PPUSH
40717: CALL_OW 432
40721: MINUS
40722: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40723: LD_VAR 0 4
40727: PUSH
40728: LD_VAR 0 5
40732: PPUSH
40733: LD_INT 3
40735: PPUSH
40736: CALL_OW 259
40740: PUSH
40741: LD_VAR 0 5
40745: PPUSH
40746: CALL_OW 432
40750: MINUS
40751: GREATEREQUAL
40752: IFFALSE 40770
// mech := result [ i ] ;
40754: LD_ADDR_VAR 0 5
40758: PUSH
40759: LD_VAR 0 2
40763: PUSH
40764: LD_VAR 0 3
40768: ARRAY
40769: ST_TO_ADDR
// end ;
40770: GO 40679
40772: POP
40773: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40774: LD_VAR 0 1
40778: PPUSH
40779: LD_VAR 0 5
40783: PPUSH
40784: CALL_OW 135
// end ;
40788: LD_VAR 0 2
40792: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40793: LD_INT 0
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
// result := [ ] ;
40808: LD_ADDR_VAR 0 7
40812: PUSH
40813: EMPTY
40814: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 266
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: IN
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 42474
// if name then
40840: LD_VAR 0 3
40844: IFFALSE 40860
// SetBName ( base_dep , name ) ;
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_VAR 0 3
40855: PPUSH
40856: CALL_OW 500
// base := GetBase ( base_dep ) ;
40860: LD_ADDR_VAR 0 15
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 274
40874: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40875: LD_ADDR_VAR 0 16
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 255
40889: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40890: LD_ADDR_VAR 0 17
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 248
40904: ST_TO_ADDR
// if sources then
40905: LD_VAR 0 5
40909: IFFALSE 40956
// for i = 1 to 3 do
40911: LD_ADDR_VAR 0 8
40915: PUSH
40916: DOUBLE
40917: LD_INT 1
40919: DEC
40920: ST_TO_ADDR
40921: LD_INT 3
40923: PUSH
40924: FOR_TO
40925: IFFALSE 40954
// AddResourceType ( base , i , sources [ i ] ) ;
40927: LD_VAR 0 15
40931: PPUSH
40932: LD_VAR 0 8
40936: PPUSH
40937: LD_VAR 0 5
40941: PUSH
40942: LD_VAR 0 8
40946: ARRAY
40947: PPUSH
40948: CALL_OW 276
40952: GO 40924
40954: POP
40955: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40956: LD_ADDR_VAR 0 18
40960: PUSH
40961: LD_VAR 0 15
40965: PPUSH
40966: LD_VAR 0 2
40970: PPUSH
40971: LD_INT 1
40973: PPUSH
40974: CALL 40217 0 3
40978: ST_TO_ADDR
// InitHc ;
40979: CALL_OW 19
// InitUc ;
40983: CALL_OW 18
// uc_side := side ;
40987: LD_ADDR_OWVAR 20
40991: PUSH
40992: LD_VAR 0 16
40996: ST_TO_ADDR
// uc_nation := nation ;
40997: LD_ADDR_OWVAR 21
41001: PUSH
41002: LD_VAR 0 17
41006: ST_TO_ADDR
// if buildings then
41007: LD_VAR 0 18
41011: IFFALSE 42333
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41013: LD_ADDR_VAR 0 19
41017: PUSH
41018: LD_VAR 0 18
41022: PPUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 30
41028: PUSH
41029: LD_INT 29
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 30
41038: PUSH
41039: LD_INT 30
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: PPUSH
41051: CALL_OW 72
41055: ST_TO_ADDR
// if tmp then
41056: LD_VAR 0 19
41060: IFFALSE 41108
// for i in tmp do
41062: LD_ADDR_VAR 0 8
41066: PUSH
41067: LD_VAR 0 19
41071: PUSH
41072: FOR_IN
41073: IFFALSE 41106
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41075: LD_VAR 0 8
41079: PPUSH
41080: CALL_OW 250
41084: PPUSH
41085: LD_VAR 0 8
41089: PPUSH
41090: CALL_OW 251
41094: PPUSH
41095: LD_VAR 0 16
41099: PPUSH
41100: CALL_OW 441
41104: GO 41072
41106: POP
41107: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41108: LD_VAR 0 18
41112: PPUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_INT 32
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 30
41128: PUSH
41129: LD_INT 33
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: PPUSH
41141: CALL_OW 72
41145: IFFALSE 41233
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41147: LD_ADDR_VAR 0 8
41151: PUSH
41152: LD_VAR 0 18
41156: PPUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 30
41162: PUSH
41163: LD_INT 32
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 30
41172: PUSH
41173: LD_INT 33
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: PPUSH
41185: CALL_OW 72
41189: PUSH
41190: FOR_IN
41191: IFFALSE 41231
// begin if not GetBWeapon ( i ) then
41193: LD_VAR 0 8
41197: PPUSH
41198: CALL_OW 269
41202: NOT
41203: IFFALSE 41229
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41205: LD_VAR 0 8
41209: PPUSH
41210: LD_VAR 0 8
41214: PPUSH
41215: LD_VAR 0 2
41219: PPUSH
41220: CALL 42479 0 2
41224: PPUSH
41225: CALL_OW 431
// end ;
41229: GO 41190
41231: POP
41232: POP
// end ; for i = 1 to personel do
41233: LD_ADDR_VAR 0 8
41237: PUSH
41238: DOUBLE
41239: LD_INT 1
41241: DEC
41242: ST_TO_ADDR
41243: LD_VAR 0 6
41247: PUSH
41248: FOR_TO
41249: IFFALSE 42313
// begin if i > 4 then
41251: LD_VAR 0 8
41255: PUSH
41256: LD_INT 4
41258: GREATER
41259: IFFALSE 41263
// break ;
41261: GO 42313
// case i of 1 :
41263: LD_VAR 0 8
41267: PUSH
41268: LD_INT 1
41270: DOUBLE
41271: EQUAL
41272: IFTRUE 41276
41274: GO 41356
41276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41277: LD_ADDR_VAR 0 12
41281: PUSH
41282: LD_VAR 0 18
41286: PPUSH
41287: LD_INT 22
41289: PUSH
41290: LD_VAR 0 16
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 58
41301: PUSH
41302: EMPTY
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: LD_INT 32
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 30
41320: PUSH
41321: LD_INT 4
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 30
41330: PUSH
41331: LD_INT 5
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: PPUSH
41349: CALL_OW 72
41353: ST_TO_ADDR
41354: GO 41578
41356: LD_INT 2
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41426
41364: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41365: LD_ADDR_VAR 0 12
41369: PUSH
41370: LD_VAR 0 18
41374: PPUSH
41375: LD_INT 22
41377: PUSH
41378: LD_VAR 0 16
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 30
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 30
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PPUSH
41419: CALL_OW 72
41423: ST_TO_ADDR
41424: GO 41578
41426: LD_INT 3
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41496
41434: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41435: LD_ADDR_VAR 0 12
41439: PUSH
41440: LD_VAR 0 18
41444: PPUSH
41445: LD_INT 22
41447: PUSH
41448: LD_VAR 0 16
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 30
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 30
41472: PUSH
41473: LD_INT 3
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PPUSH
41489: CALL_OW 72
41493: ST_TO_ADDR
41494: GO 41578
41496: LD_INT 4
41498: DOUBLE
41499: EQUAL
41500: IFTRUE 41504
41502: GO 41577
41504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41505: LD_ADDR_VAR 0 12
41509: PUSH
41510: LD_VAR 0 18
41514: PPUSH
41515: LD_INT 22
41517: PUSH
41518: LD_VAR 0 16
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 30
41532: PUSH
41533: LD_INT 6
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 7
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: LD_INT 8
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PPUSH
41570: CALL_OW 72
41574: ST_TO_ADDR
41575: GO 41578
41577: POP
// if i = 1 then
41578: LD_VAR 0 8
41582: PUSH
41583: LD_INT 1
41585: EQUAL
41586: IFFALSE 41697
// begin tmp := [ ] ;
41588: LD_ADDR_VAR 0 19
41592: PUSH
41593: EMPTY
41594: ST_TO_ADDR
// for j in f do
41595: LD_ADDR_VAR 0 9
41599: PUSH
41600: LD_VAR 0 12
41604: PUSH
41605: FOR_IN
41606: IFFALSE 41679
// if GetBType ( j ) = b_bunker then
41608: LD_VAR 0 9
41612: PPUSH
41613: CALL_OW 266
41617: PUSH
41618: LD_INT 32
41620: EQUAL
41621: IFFALSE 41648
// tmp := Insert ( tmp , 1 , j ) else
41623: LD_ADDR_VAR 0 19
41627: PUSH
41628: LD_VAR 0 19
41632: PPUSH
41633: LD_INT 1
41635: PPUSH
41636: LD_VAR 0 9
41640: PPUSH
41641: CALL_OW 2
41645: ST_TO_ADDR
41646: GO 41677
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41648: LD_ADDR_VAR 0 19
41652: PUSH
41653: LD_VAR 0 19
41657: PPUSH
41658: LD_VAR 0 19
41662: PUSH
41663: LD_INT 1
41665: PLUS
41666: PPUSH
41667: LD_VAR 0 9
41671: PPUSH
41672: CALL_OW 2
41676: ST_TO_ADDR
41677: GO 41605
41679: POP
41680: POP
// if tmp then
41681: LD_VAR 0 19
41685: IFFALSE 41697
// f := tmp ;
41687: LD_ADDR_VAR 0 12
41691: PUSH
41692: LD_VAR 0 19
41696: ST_TO_ADDR
// end ; x := personel [ i ] ;
41697: LD_ADDR_VAR 0 13
41701: PUSH
41702: LD_VAR 0 6
41706: PUSH
41707: LD_VAR 0 8
41711: ARRAY
41712: ST_TO_ADDR
// if x = - 1 then
41713: LD_VAR 0 13
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: EQUAL
41722: IFFALSE 41931
// begin for j in f do
41724: LD_ADDR_VAR 0 9
41728: PUSH
41729: LD_VAR 0 12
41733: PUSH
41734: FOR_IN
41735: IFFALSE 41927
// repeat InitHc ;
41737: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41741: LD_VAR 0 9
41745: PPUSH
41746: CALL_OW 266
41750: PUSH
41751: LD_INT 5
41753: EQUAL
41754: IFFALSE 41824
// begin if UnitsInside ( j ) < 3 then
41756: LD_VAR 0 9
41760: PPUSH
41761: CALL_OW 313
41765: PUSH
41766: LD_INT 3
41768: LESS
41769: IFFALSE 41805
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41771: LD_INT 0
41773: PPUSH
41774: LD_INT 5
41776: PUSH
41777: LD_INT 8
41779: PUSH
41780: LD_INT 9
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: PUSH
41788: LD_VAR 0 17
41792: ARRAY
41793: PPUSH
41794: LD_VAR 0 4
41798: PPUSH
41799: CALL_OW 380
41803: GO 41822
// PrepareHuman ( false , i , skill ) ;
41805: LD_INT 0
41807: PPUSH
41808: LD_VAR 0 8
41812: PPUSH
41813: LD_VAR 0 4
41817: PPUSH
41818: CALL_OW 380
// end else
41822: GO 41841
// PrepareHuman ( false , i , skill ) ;
41824: LD_INT 0
41826: PPUSH
41827: LD_VAR 0 8
41831: PPUSH
41832: LD_VAR 0 4
41836: PPUSH
41837: CALL_OW 380
// un := CreateHuman ;
41841: LD_ADDR_VAR 0 14
41845: PUSH
41846: CALL_OW 44
41850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41851: LD_ADDR_VAR 0 7
41855: PUSH
41856: LD_VAR 0 7
41860: PPUSH
41861: LD_INT 1
41863: PPUSH
41864: LD_VAR 0 14
41868: PPUSH
41869: CALL_OW 2
41873: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41874: LD_VAR 0 14
41878: PPUSH
41879: LD_VAR 0 9
41883: PPUSH
41884: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41888: LD_VAR 0 9
41892: PPUSH
41893: CALL_OW 313
41897: PUSH
41898: LD_INT 6
41900: EQUAL
41901: PUSH
41902: LD_VAR 0 9
41906: PPUSH
41907: CALL_OW 266
41911: PUSH
41912: LD_INT 32
41914: PUSH
41915: LD_INT 31
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: IN
41922: OR
41923: IFFALSE 41737
41925: GO 41734
41927: POP
41928: POP
// end else
41929: GO 42311
// for j = 1 to x do
41931: LD_ADDR_VAR 0 9
41935: PUSH
41936: DOUBLE
41937: LD_INT 1
41939: DEC
41940: ST_TO_ADDR
41941: LD_VAR 0 13
41945: PUSH
41946: FOR_TO
41947: IFFALSE 42309
// begin InitHc ;
41949: CALL_OW 19
// if not f then
41953: LD_VAR 0 12
41957: NOT
41958: IFFALSE 42047
// begin PrepareHuman ( false , i , skill ) ;
41960: LD_INT 0
41962: PPUSH
41963: LD_VAR 0 8
41967: PPUSH
41968: LD_VAR 0 4
41972: PPUSH
41973: CALL_OW 380
// un := CreateHuman ;
41977: LD_ADDR_VAR 0 14
41981: PUSH
41982: CALL_OW 44
41986: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41987: LD_ADDR_VAR 0 7
41991: PUSH
41992: LD_VAR 0 7
41996: PPUSH
41997: LD_INT 1
41999: PPUSH
42000: LD_VAR 0 14
42004: PPUSH
42005: CALL_OW 2
42009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42010: LD_VAR 0 14
42014: PPUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 250
42024: PPUSH
42025: LD_VAR 0 1
42029: PPUSH
42030: CALL_OW 251
42034: PPUSH
42035: LD_INT 10
42037: PPUSH
42038: LD_INT 0
42040: PPUSH
42041: CALL_OW 50
// continue ;
42045: GO 41946
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42047: LD_VAR 0 12
42051: PUSH
42052: LD_INT 1
42054: ARRAY
42055: PPUSH
42056: CALL_OW 313
42060: PUSH
42061: LD_VAR 0 12
42065: PUSH
42066: LD_INT 1
42068: ARRAY
42069: PPUSH
42070: CALL_OW 266
42074: PUSH
42075: LD_INT 32
42077: PUSH
42078: LD_INT 31
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: IN
42085: AND
42086: PUSH
42087: LD_VAR 0 12
42091: PUSH
42092: LD_INT 1
42094: ARRAY
42095: PPUSH
42096: CALL_OW 313
42100: PUSH
42101: LD_INT 6
42103: EQUAL
42104: OR
42105: IFFALSE 42125
// f := Delete ( f , 1 ) ;
42107: LD_ADDR_VAR 0 12
42111: PUSH
42112: LD_VAR 0 12
42116: PPUSH
42117: LD_INT 1
42119: PPUSH
42120: CALL_OW 3
42124: ST_TO_ADDR
// if not f then
42125: LD_VAR 0 12
42129: NOT
42130: IFFALSE 42148
// begin x := x + 2 ;
42132: LD_ADDR_VAR 0 13
42136: PUSH
42137: LD_VAR 0 13
42141: PUSH
42142: LD_INT 2
42144: PLUS
42145: ST_TO_ADDR
// continue ;
42146: GO 41946
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42148: LD_VAR 0 12
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: CALL_OW 266
42161: PUSH
42162: LD_INT 5
42164: EQUAL
42165: IFFALSE 42239
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42167: LD_VAR 0 12
42171: PUSH
42172: LD_INT 1
42174: ARRAY
42175: PPUSH
42176: CALL_OW 313
42180: PUSH
42181: LD_INT 3
42183: LESS
42184: IFFALSE 42220
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42186: LD_INT 0
42188: PPUSH
42189: LD_INT 5
42191: PUSH
42192: LD_INT 8
42194: PUSH
42195: LD_INT 9
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: PUSH
42203: LD_VAR 0 17
42207: ARRAY
42208: PPUSH
42209: LD_VAR 0 4
42213: PPUSH
42214: CALL_OW 380
42218: GO 42237
// PrepareHuman ( false , i , skill ) ;
42220: LD_INT 0
42222: PPUSH
42223: LD_VAR 0 8
42227: PPUSH
42228: LD_VAR 0 4
42232: PPUSH
42233: CALL_OW 380
// end else
42237: GO 42256
// PrepareHuman ( false , i , skill ) ;
42239: LD_INT 0
42241: PPUSH
42242: LD_VAR 0 8
42246: PPUSH
42247: LD_VAR 0 4
42251: PPUSH
42252: CALL_OW 380
// un := CreateHuman ;
42256: LD_ADDR_VAR 0 14
42260: PUSH
42261: CALL_OW 44
42265: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42266: LD_ADDR_VAR 0 7
42270: PUSH
42271: LD_VAR 0 7
42275: PPUSH
42276: LD_INT 1
42278: PPUSH
42279: LD_VAR 0 14
42283: PPUSH
42284: CALL_OW 2
42288: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42289: LD_VAR 0 14
42293: PPUSH
42294: LD_VAR 0 12
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: PPUSH
42303: CALL_OW 52
// end ;
42307: GO 41946
42309: POP
42310: POP
// end ;
42311: GO 41248
42313: POP
42314: POP
// result := result ^ buildings ;
42315: LD_ADDR_VAR 0 7
42319: PUSH
42320: LD_VAR 0 7
42324: PUSH
42325: LD_VAR 0 18
42329: ADD
42330: ST_TO_ADDR
// end else
42331: GO 42474
// begin for i = 1 to personel do
42333: LD_ADDR_VAR 0 8
42337: PUSH
42338: DOUBLE
42339: LD_INT 1
42341: DEC
42342: ST_TO_ADDR
42343: LD_VAR 0 6
42347: PUSH
42348: FOR_TO
42349: IFFALSE 42472
// begin if i > 4 then
42351: LD_VAR 0 8
42355: PUSH
42356: LD_INT 4
42358: GREATER
42359: IFFALSE 42363
// break ;
42361: GO 42472
// x := personel [ i ] ;
42363: LD_ADDR_VAR 0 13
42367: PUSH
42368: LD_VAR 0 6
42372: PUSH
42373: LD_VAR 0 8
42377: ARRAY
42378: ST_TO_ADDR
// if x = - 1 then
42379: LD_VAR 0 13
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: EQUAL
42388: IFFALSE 42392
// continue ;
42390: GO 42348
// PrepareHuman ( false , i , skill ) ;
42392: LD_INT 0
42394: PPUSH
42395: LD_VAR 0 8
42399: PPUSH
42400: LD_VAR 0 4
42404: PPUSH
42405: CALL_OW 380
// un := CreateHuman ;
42409: LD_ADDR_VAR 0 14
42413: PUSH
42414: CALL_OW 44
42418: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42419: LD_VAR 0 14
42423: PPUSH
42424: LD_VAR 0 1
42428: PPUSH
42429: CALL_OW 250
42433: PPUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 251
42443: PPUSH
42444: LD_INT 10
42446: PPUSH
42447: LD_INT 0
42449: PPUSH
42450: CALL_OW 50
// result := result ^ un ;
42454: LD_ADDR_VAR 0 7
42458: PUSH
42459: LD_VAR 0 7
42463: PUSH
42464: LD_VAR 0 14
42468: ADD
42469: ST_TO_ADDR
// end ;
42470: GO 42348
42472: POP
42473: POP
// end ; end ;
42474: LD_VAR 0 7
42478: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42479: LD_INT 0
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
42496: PPUSH
// result := false ;
42497: LD_ADDR_VAR 0 3
42501: PUSH
42502: LD_INT 0
42504: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42505: LD_VAR 0 1
42509: NOT
42510: PUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 266
42520: PUSH
42521: LD_INT 32
42523: PUSH
42524: LD_INT 33
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: IN
42531: NOT
42532: OR
42533: IFFALSE 42537
// exit ;
42535: GO 43646
// nat := GetNation ( tower ) ;
42537: LD_ADDR_VAR 0 12
42541: PUSH
42542: LD_VAR 0 1
42546: PPUSH
42547: CALL_OW 248
42551: ST_TO_ADDR
// side := GetSide ( tower ) ;
42552: LD_ADDR_VAR 0 16
42556: PUSH
42557: LD_VAR 0 1
42561: PPUSH
42562: CALL_OW 255
42566: ST_TO_ADDR
// x := GetX ( tower ) ;
42567: LD_ADDR_VAR 0 10
42571: PUSH
42572: LD_VAR 0 1
42576: PPUSH
42577: CALL_OW 250
42581: ST_TO_ADDR
// y := GetY ( tower ) ;
42582: LD_ADDR_VAR 0 11
42586: PUSH
42587: LD_VAR 0 1
42591: PPUSH
42592: CALL_OW 251
42596: ST_TO_ADDR
// if not x or not y then
42597: LD_VAR 0 10
42601: NOT
42602: PUSH
42603: LD_VAR 0 11
42607: NOT
42608: OR
42609: IFFALSE 42613
// exit ;
42611: GO 43646
// weapon := 0 ;
42613: LD_ADDR_VAR 0 18
42617: PUSH
42618: LD_INT 0
42620: ST_TO_ADDR
// fac_list := [ ] ;
42621: LD_ADDR_VAR 0 17
42625: PUSH
42626: EMPTY
42627: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42628: LD_ADDR_VAR 0 6
42632: PUSH
42633: LD_VAR 0 1
42637: PPUSH
42638: CALL_OW 274
42642: PPUSH
42643: LD_VAR 0 2
42647: PPUSH
42648: LD_INT 0
42650: PPUSH
42651: CALL 40217 0 3
42655: PPUSH
42656: LD_INT 30
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PPUSH
42666: CALL_OW 72
42670: ST_TO_ADDR
// if not factories then
42671: LD_VAR 0 6
42675: NOT
42676: IFFALSE 42680
// exit ;
42678: GO 43646
// for i in factories do
42680: LD_ADDR_VAR 0 8
42684: PUSH
42685: LD_VAR 0 6
42689: PUSH
42690: FOR_IN
42691: IFFALSE 42716
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42693: LD_ADDR_VAR 0 17
42697: PUSH
42698: LD_VAR 0 17
42702: PUSH
42703: LD_VAR 0 8
42707: PPUSH
42708: CALL_OW 478
42712: UNION
42713: ST_TO_ADDR
42714: GO 42690
42716: POP
42717: POP
// if not fac_list then
42718: LD_VAR 0 17
42722: NOT
42723: IFFALSE 42727
// exit ;
42725: GO 43646
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42727: LD_ADDR_VAR 0 5
42731: PUSH
42732: LD_INT 4
42734: PUSH
42735: LD_INT 5
42737: PUSH
42738: LD_INT 9
42740: PUSH
42741: LD_INT 10
42743: PUSH
42744: LD_INT 6
42746: PUSH
42747: LD_INT 7
42749: PUSH
42750: LD_INT 11
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 27
42764: PUSH
42765: LD_INT 28
42767: PUSH
42768: LD_INT 26
42770: PUSH
42771: LD_INT 30
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 43
42782: PUSH
42783: LD_INT 44
42785: PUSH
42786: LD_INT 46
42788: PUSH
42789: LD_INT 45
42791: PUSH
42792: LD_INT 47
42794: PUSH
42795: LD_INT 49
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: PUSH
42811: LD_VAR 0 12
42815: ARRAY
42816: ST_TO_ADDR
// list := list isect fac_list ;
42817: LD_ADDR_VAR 0 5
42821: PUSH
42822: LD_VAR 0 5
42826: PUSH
42827: LD_VAR 0 17
42831: ISECT
42832: ST_TO_ADDR
// if not list then
42833: LD_VAR 0 5
42837: NOT
42838: IFFALSE 42842
// exit ;
42840: GO 43646
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42842: LD_VAR 0 12
42846: PUSH
42847: LD_INT 3
42849: EQUAL
42850: PUSH
42851: LD_INT 49
42853: PUSH
42854: LD_VAR 0 5
42858: IN
42859: AND
42860: PUSH
42861: LD_INT 31
42863: PPUSH
42864: LD_VAR 0 16
42868: PPUSH
42869: CALL_OW 321
42873: PUSH
42874: LD_INT 2
42876: EQUAL
42877: AND
42878: IFFALSE 42938
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42880: LD_INT 22
42882: PUSH
42883: LD_VAR 0 16
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 35
42894: PUSH
42895: LD_INT 49
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 91
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 10
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: PPUSH
42923: CALL_OW 69
42927: NOT
42928: IFFALSE 42938
// weapon := ru_time_lapser ;
42930: LD_ADDR_VAR 0 18
42934: PUSH
42935: LD_INT 49
42937: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42938: LD_VAR 0 12
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: IN
42953: PUSH
42954: LD_INT 11
42956: PUSH
42957: LD_VAR 0 5
42961: IN
42962: PUSH
42963: LD_INT 30
42965: PUSH
42966: LD_VAR 0 5
42970: IN
42971: OR
42972: AND
42973: PUSH
42974: LD_INT 6
42976: PPUSH
42977: LD_VAR 0 16
42981: PPUSH
42982: CALL_OW 321
42986: PUSH
42987: LD_INT 2
42989: EQUAL
42990: AND
42991: IFFALSE 43156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42993: LD_INT 22
42995: PUSH
42996: LD_VAR 0 16
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 35
43010: PUSH
43011: LD_INT 11
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 35
43020: PUSH
43021: LD_INT 30
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 91
43035: PUSH
43036: LD_VAR 0 1
43040: PUSH
43041: LD_INT 18
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: LIST
43053: PPUSH
43054: CALL_OW 69
43058: NOT
43059: PUSH
43060: LD_INT 22
43062: PUSH
43063: LD_VAR 0 16
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 30
43077: PUSH
43078: LD_INT 32
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 30
43087: PUSH
43088: LD_INT 33
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 91
43102: PUSH
43103: LD_VAR 0 1
43107: PUSH
43108: LD_INT 12
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: PPUSH
43124: CALL_OW 69
43128: PUSH
43129: LD_INT 2
43131: GREATER
43132: AND
43133: IFFALSE 43156
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43135: LD_ADDR_VAR 0 18
43139: PUSH
43140: LD_INT 11
43142: PUSH
43143: LD_INT 30
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_VAR 0 12
43154: ARRAY
43155: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43156: LD_VAR 0 18
43160: NOT
43161: PUSH
43162: LD_INT 40
43164: PPUSH
43165: LD_VAR 0 16
43169: PPUSH
43170: CALL_OW 321
43174: PUSH
43175: LD_INT 2
43177: EQUAL
43178: AND
43179: PUSH
43180: LD_INT 7
43182: PUSH
43183: LD_VAR 0 5
43187: IN
43188: PUSH
43189: LD_INT 28
43191: PUSH
43192: LD_VAR 0 5
43196: IN
43197: OR
43198: PUSH
43199: LD_INT 45
43201: PUSH
43202: LD_VAR 0 5
43206: IN
43207: OR
43208: AND
43209: IFFALSE 43463
// begin hex := GetHexInfo ( x , y ) ;
43211: LD_ADDR_VAR 0 4
43215: PUSH
43216: LD_VAR 0 10
43220: PPUSH
43221: LD_VAR 0 11
43225: PPUSH
43226: CALL_OW 546
43230: ST_TO_ADDR
// if hex [ 1 ] then
43231: LD_VAR 0 4
43235: PUSH
43236: LD_INT 1
43238: ARRAY
43239: IFFALSE 43243
// exit ;
43241: GO 43646
// height := hex [ 2 ] ;
43243: LD_ADDR_VAR 0 15
43247: PUSH
43248: LD_VAR 0 4
43252: PUSH
43253: LD_INT 2
43255: ARRAY
43256: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43257: LD_ADDR_VAR 0 14
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// for i in tmp do
43280: LD_ADDR_VAR 0 8
43284: PUSH
43285: LD_VAR 0 14
43289: PUSH
43290: FOR_IN
43291: IFFALSE 43461
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43293: LD_ADDR_VAR 0 9
43297: PUSH
43298: LD_VAR 0 10
43302: PPUSH
43303: LD_VAR 0 8
43307: PPUSH
43308: LD_INT 5
43310: PPUSH
43311: CALL_OW 272
43315: PUSH
43316: LD_VAR 0 11
43320: PPUSH
43321: LD_VAR 0 8
43325: PPUSH
43326: LD_INT 5
43328: PPUSH
43329: CALL_OW 273
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43338: LD_VAR 0 9
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PPUSH
43347: LD_VAR 0 9
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: PPUSH
43356: CALL_OW 488
43360: IFFALSE 43459
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43362: LD_ADDR_VAR 0 4
43366: PUSH
43367: LD_VAR 0 9
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: PPUSH
43376: LD_VAR 0 9
43380: PUSH
43381: LD_INT 2
43383: ARRAY
43384: PPUSH
43385: CALL_OW 546
43389: ST_TO_ADDR
// if hex [ 1 ] then
43390: LD_VAR 0 4
43394: PUSH
43395: LD_INT 1
43397: ARRAY
43398: IFFALSE 43402
// continue ;
43400: GO 43290
// h := hex [ 2 ] ;
43402: LD_ADDR_VAR 0 13
43406: PUSH
43407: LD_VAR 0 4
43411: PUSH
43412: LD_INT 2
43414: ARRAY
43415: ST_TO_ADDR
// if h + 7 < height then
43416: LD_VAR 0 13
43420: PUSH
43421: LD_INT 7
43423: PLUS
43424: PUSH
43425: LD_VAR 0 15
43429: LESS
43430: IFFALSE 43459
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43432: LD_ADDR_VAR 0 18
43436: PUSH
43437: LD_INT 7
43439: PUSH
43440: LD_INT 28
43442: PUSH
43443: LD_INT 45
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: PUSH
43451: LD_VAR 0 12
43455: ARRAY
43456: ST_TO_ADDR
// break ;
43457: GO 43461
// end ; end ; end ;
43459: GO 43290
43461: POP
43462: POP
// end ; if not weapon then
43463: LD_VAR 0 18
43467: NOT
43468: IFFALSE 43528
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43470: LD_ADDR_VAR 0 5
43474: PUSH
43475: LD_VAR 0 5
43479: PUSH
43480: LD_INT 11
43482: PUSH
43483: LD_INT 30
43485: PUSH
43486: LD_INT 49
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: DIFF
43494: ST_TO_ADDR
// if not list then
43495: LD_VAR 0 5
43499: NOT
43500: IFFALSE 43504
// exit ;
43502: GO 43646
// weapon := list [ rand ( 1 , list ) ] ;
43504: LD_ADDR_VAR 0 18
43508: PUSH
43509: LD_VAR 0 5
43513: PUSH
43514: LD_INT 1
43516: PPUSH
43517: LD_VAR 0 5
43521: PPUSH
43522: CALL_OW 12
43526: ARRAY
43527: ST_TO_ADDR
// end ; if weapon then
43528: LD_VAR 0 18
43532: IFFALSE 43646
// begin tmp := CostOfWeapon ( weapon ) ;
43534: LD_ADDR_VAR 0 14
43538: PUSH
43539: LD_VAR 0 18
43543: PPUSH
43544: CALL_OW 451
43548: ST_TO_ADDR
// j := GetBase ( tower ) ;
43549: LD_ADDR_VAR 0 9
43553: PUSH
43554: LD_VAR 0 1
43558: PPUSH
43559: CALL_OW 274
43563: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43564: LD_VAR 0 9
43568: PPUSH
43569: LD_INT 1
43571: PPUSH
43572: CALL_OW 275
43576: PUSH
43577: LD_VAR 0 14
43581: PUSH
43582: LD_INT 1
43584: ARRAY
43585: GREATEREQUAL
43586: PUSH
43587: LD_VAR 0 9
43591: PPUSH
43592: LD_INT 2
43594: PPUSH
43595: CALL_OW 275
43599: PUSH
43600: LD_VAR 0 14
43604: PUSH
43605: LD_INT 2
43607: ARRAY
43608: GREATEREQUAL
43609: AND
43610: PUSH
43611: LD_VAR 0 9
43615: PPUSH
43616: LD_INT 3
43618: PPUSH
43619: CALL_OW 275
43623: PUSH
43624: LD_VAR 0 14
43628: PUSH
43629: LD_INT 3
43631: ARRAY
43632: GREATEREQUAL
43633: AND
43634: IFFALSE 43646
// result := weapon ;
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_VAR 0 18
43645: ST_TO_ADDR
// end ; end ;
43646: LD_VAR 0 3
43650: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43651: LD_INT 0
43653: PPUSH
43654: PPUSH
// result := true ;
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 1
43662: ST_TO_ADDR
// if array1 = array2 then
43663: LD_VAR 0 1
43667: PUSH
43668: LD_VAR 0 2
43672: EQUAL
43673: IFFALSE 43733
// begin for i = 1 to array1 do
43675: LD_ADDR_VAR 0 4
43679: PUSH
43680: DOUBLE
43681: LD_INT 1
43683: DEC
43684: ST_TO_ADDR
43685: LD_VAR 0 1
43689: PUSH
43690: FOR_TO
43691: IFFALSE 43729
// if array1 [ i ] <> array2 [ i ] then
43693: LD_VAR 0 1
43697: PUSH
43698: LD_VAR 0 4
43702: ARRAY
43703: PUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_VAR 0 4
43713: ARRAY
43714: NONEQUAL
43715: IFFALSE 43727
// begin result := false ;
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 0
43724: ST_TO_ADDR
// break ;
43725: GO 43729
// end ;
43727: GO 43690
43729: POP
43730: POP
// end else
43731: GO 43741
// result := false ;
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_INT 0
43740: ST_TO_ADDR
// end ;
43741: LD_VAR 0 3
43745: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43746: LD_INT 0
43748: PPUSH
43749: PPUSH
// if not array1 or not array2 then
43750: LD_VAR 0 1
43754: NOT
43755: PUSH
43756: LD_VAR 0 2
43760: NOT
43761: OR
43762: IFFALSE 43766
// exit ;
43764: GO 43830
// result := true ;
43766: LD_ADDR_VAR 0 3
43770: PUSH
43771: LD_INT 1
43773: ST_TO_ADDR
// for i = 1 to array1 do
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: DOUBLE
43780: LD_INT 1
43782: DEC
43783: ST_TO_ADDR
43784: LD_VAR 0 1
43788: PUSH
43789: FOR_TO
43790: IFFALSE 43828
// if array1 [ i ] <> array2 [ i ] then
43792: LD_VAR 0 1
43796: PUSH
43797: LD_VAR 0 4
43801: ARRAY
43802: PUSH
43803: LD_VAR 0 2
43807: PUSH
43808: LD_VAR 0 4
43812: ARRAY
43813: NONEQUAL
43814: IFFALSE 43826
// begin result := false ;
43816: LD_ADDR_VAR 0 3
43820: PUSH
43821: LD_INT 0
43823: ST_TO_ADDR
// break ;
43824: GO 43828
// end ;
43826: GO 43789
43828: POP
43829: POP
// end ;
43830: LD_VAR 0 3
43834: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43835: LD_INT 0
43837: PPUSH
43838: PPUSH
43839: PPUSH
// pom := GetBase ( fac ) ;
43840: LD_ADDR_VAR 0 5
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 274
43854: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43855: LD_ADDR_VAR 0 4
43859: PUSH
43860: LD_VAR 0 2
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PPUSH
43869: LD_VAR 0 2
43873: PUSH
43874: LD_INT 2
43876: ARRAY
43877: PPUSH
43878: LD_VAR 0 2
43882: PUSH
43883: LD_INT 3
43885: ARRAY
43886: PPUSH
43887: LD_VAR 0 2
43891: PUSH
43892: LD_INT 4
43894: ARRAY
43895: PPUSH
43896: CALL_OW 449
43900: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43901: LD_ADDR_VAR 0 3
43905: PUSH
43906: LD_VAR 0 5
43910: PPUSH
43911: LD_INT 1
43913: PPUSH
43914: CALL_OW 275
43918: PUSH
43919: LD_VAR 0 4
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: GREATEREQUAL
43928: PUSH
43929: LD_VAR 0 5
43933: PPUSH
43934: LD_INT 2
43936: PPUSH
43937: CALL_OW 275
43941: PUSH
43942: LD_VAR 0 4
43946: PUSH
43947: LD_INT 2
43949: ARRAY
43950: GREATEREQUAL
43951: AND
43952: PUSH
43953: LD_VAR 0 5
43957: PPUSH
43958: LD_INT 3
43960: PPUSH
43961: CALL_OW 275
43965: PUSH
43966: LD_VAR 0 4
43970: PUSH
43971: LD_INT 3
43973: ARRAY
43974: GREATEREQUAL
43975: AND
43976: ST_TO_ADDR
// end ;
43977: LD_VAR 0 3
43981: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43982: LD_INT 0
43984: PPUSH
43985: PPUSH
43986: PPUSH
43987: PPUSH
// pom := GetBase ( building ) ;
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_VAR 0 1
43997: PPUSH
43998: CALL_OW 274
44002: ST_TO_ADDR
// if not pom then
44003: LD_VAR 0 3
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 44182
// btype := GetBType ( building ) ;
44012: LD_ADDR_VAR 0 5
44016: PUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 266
44026: ST_TO_ADDR
// if btype = b_armoury then
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 4
44034: EQUAL
44035: IFFALSE 44045
// btype := b_barracks ;
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: LD_INT 5
44044: ST_TO_ADDR
// if btype = b_depot then
44045: LD_VAR 0 5
44049: PUSH
44050: LD_INT 0
44052: EQUAL
44053: IFFALSE 44063
// btype := b_warehouse ;
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: LD_INT 1
44062: ST_TO_ADDR
// if btype = b_workshop then
44063: LD_VAR 0 5
44067: PUSH
44068: LD_INT 2
44070: EQUAL
44071: IFFALSE 44081
// btype := b_factory ;
44073: LD_ADDR_VAR 0 5
44077: PUSH
44078: LD_INT 3
44080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44081: LD_ADDR_VAR 0 4
44085: PUSH
44086: LD_VAR 0 5
44090: PPUSH
44091: LD_VAR 0 1
44095: PPUSH
44096: CALL_OW 248
44100: PPUSH
44101: CALL_OW 450
44105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44106: LD_ADDR_VAR 0 2
44110: PUSH
44111: LD_VAR 0 3
44115: PPUSH
44116: LD_INT 1
44118: PPUSH
44119: CALL_OW 275
44123: PUSH
44124: LD_VAR 0 4
44128: PUSH
44129: LD_INT 1
44131: ARRAY
44132: GREATEREQUAL
44133: PUSH
44134: LD_VAR 0 3
44138: PPUSH
44139: LD_INT 2
44141: PPUSH
44142: CALL_OW 275
44146: PUSH
44147: LD_VAR 0 4
44151: PUSH
44152: LD_INT 2
44154: ARRAY
44155: GREATEREQUAL
44156: AND
44157: PUSH
44158: LD_VAR 0 3
44162: PPUSH
44163: LD_INT 3
44165: PPUSH
44166: CALL_OW 275
44170: PUSH
44171: LD_VAR 0 4
44175: PUSH
44176: LD_INT 3
44178: ARRAY
44179: GREATEREQUAL
44180: AND
44181: ST_TO_ADDR
// end ;
44182: LD_VAR 0 2
44186: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
44191: PPUSH
// pom := GetBase ( building ) ;
44192: LD_ADDR_VAR 0 4
44196: PUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL_OW 274
44206: ST_TO_ADDR
// if not pom then
44207: LD_VAR 0 4
44211: NOT
44212: IFFALSE 44216
// exit ;
44214: GO 44317
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44216: LD_ADDR_VAR 0 5
44220: PUSH
44221: LD_VAR 0 2
44225: PPUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: CALL_OW 248
44235: PPUSH
44236: CALL_OW 450
44240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44241: LD_ADDR_VAR 0 3
44245: PUSH
44246: LD_VAR 0 4
44250: PPUSH
44251: LD_INT 1
44253: PPUSH
44254: CALL_OW 275
44258: PUSH
44259: LD_VAR 0 5
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: GREATEREQUAL
44268: PUSH
44269: LD_VAR 0 4
44273: PPUSH
44274: LD_INT 2
44276: PPUSH
44277: CALL_OW 275
44281: PUSH
44282: LD_VAR 0 5
44286: PUSH
44287: LD_INT 2
44289: ARRAY
44290: GREATEREQUAL
44291: AND
44292: PUSH
44293: LD_VAR 0 4
44297: PPUSH
44298: LD_INT 3
44300: PPUSH
44301: CALL_OW 275
44305: PUSH
44306: LD_VAR 0 5
44310: PUSH
44311: LD_INT 3
44313: ARRAY
44314: GREATEREQUAL
44315: AND
44316: ST_TO_ADDR
// end ;
44317: LD_VAR 0 3
44321: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44322: LD_INT 0
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
// result := false ;
44335: LD_ADDR_VAR 0 8
44339: PUSH
44340: LD_INT 0
44342: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44343: LD_VAR 0 5
44347: NOT
44348: PUSH
44349: LD_VAR 0 1
44353: NOT
44354: OR
44355: PUSH
44356: LD_VAR 0 2
44360: NOT
44361: OR
44362: PUSH
44363: LD_VAR 0 3
44367: NOT
44368: OR
44369: IFFALSE 44373
// exit ;
44371: GO 45187
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44373: LD_ADDR_VAR 0 14
44377: PUSH
44378: LD_VAR 0 1
44382: PPUSH
44383: LD_VAR 0 2
44387: PPUSH
44388: LD_VAR 0 3
44392: PPUSH
44393: LD_VAR 0 4
44397: PPUSH
44398: LD_VAR 0 5
44402: PUSH
44403: LD_INT 1
44405: ARRAY
44406: PPUSH
44407: CALL_OW 248
44411: PPUSH
44412: LD_INT 0
44414: PPUSH
44415: CALL 46440 0 6
44419: ST_TO_ADDR
// if not hexes then
44420: LD_VAR 0 14
44424: NOT
44425: IFFALSE 44429
// exit ;
44427: GO 45187
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44429: LD_ADDR_VAR 0 17
44433: PUSH
44434: LD_VAR 0 5
44438: PPUSH
44439: LD_INT 22
44441: PUSH
44442: LD_VAR 0 13
44446: PPUSH
44447: CALL_OW 255
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 30
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 30
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PPUSH
44488: CALL_OW 72
44492: ST_TO_ADDR
// for i = 1 to hexes do
44493: LD_ADDR_VAR 0 9
44497: PUSH
44498: DOUBLE
44499: LD_INT 1
44501: DEC
44502: ST_TO_ADDR
44503: LD_VAR 0 14
44507: PUSH
44508: FOR_TO
44509: IFFALSE 45185
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44511: LD_ADDR_VAR 0 13
44515: PUSH
44516: LD_VAR 0 14
44520: PUSH
44521: LD_VAR 0 9
44525: ARRAY
44526: PUSH
44527: LD_INT 1
44529: ARRAY
44530: PPUSH
44531: LD_VAR 0 14
44535: PUSH
44536: LD_VAR 0 9
44540: ARRAY
44541: PUSH
44542: LD_INT 2
44544: ARRAY
44545: PPUSH
44546: CALL_OW 428
44550: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44551: LD_VAR 0 14
44555: PUSH
44556: LD_VAR 0 9
44560: ARRAY
44561: PUSH
44562: LD_INT 1
44564: ARRAY
44565: PPUSH
44566: LD_VAR 0 14
44570: PUSH
44571: LD_VAR 0 9
44575: ARRAY
44576: PUSH
44577: LD_INT 2
44579: ARRAY
44580: PPUSH
44581: CALL_OW 351
44585: PUSH
44586: LD_VAR 0 14
44590: PUSH
44591: LD_VAR 0 9
44595: ARRAY
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: PPUSH
44601: LD_VAR 0 14
44605: PUSH
44606: LD_VAR 0 9
44610: ARRAY
44611: PUSH
44612: LD_INT 2
44614: ARRAY
44615: PPUSH
44616: CALL_OW 488
44620: NOT
44621: OR
44622: PUSH
44623: LD_VAR 0 13
44627: PPUSH
44628: CALL_OW 247
44632: PUSH
44633: LD_INT 3
44635: EQUAL
44636: OR
44637: IFFALSE 44643
// exit ;
44639: POP
44640: POP
44641: GO 45187
// if not tmp then
44643: LD_VAR 0 13
44647: NOT
44648: IFFALSE 44652
// continue ;
44650: GO 44508
// result := true ;
44652: LD_ADDR_VAR 0 8
44656: PUSH
44657: LD_INT 1
44659: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44660: LD_VAR 0 6
44664: PUSH
44665: LD_VAR 0 13
44669: PPUSH
44670: CALL_OW 247
44674: PUSH
44675: LD_INT 2
44677: EQUAL
44678: AND
44679: PUSH
44680: LD_VAR 0 13
44684: PPUSH
44685: CALL_OW 263
44689: PUSH
44690: LD_INT 1
44692: EQUAL
44693: AND
44694: IFFALSE 44858
// begin if IsDrivenBy ( tmp ) then
44696: LD_VAR 0 13
44700: PPUSH
44701: CALL_OW 311
44705: IFFALSE 44709
// continue ;
44707: GO 44508
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44709: LD_VAR 0 6
44713: PPUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 60
44719: PUSH
44720: EMPTY
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 55
44732: PUSH
44733: EMPTY
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PPUSH
44744: CALL_OW 72
44748: IFFALSE 44856
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44750: LD_ADDR_VAR 0 18
44754: PUSH
44755: LD_VAR 0 6
44759: PPUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 60
44765: PUSH
44766: EMPTY
44767: LIST
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: LD_INT 55
44778: PUSH
44779: EMPTY
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PPUSH
44790: CALL_OW 72
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: ST_TO_ADDR
// if IsInUnit ( driver ) then
44799: LD_VAR 0 18
44803: PPUSH
44804: CALL_OW 310
44808: IFFALSE 44819
// ComExit ( driver ) ;
44810: LD_VAR 0 18
44814: PPUSH
44815: CALL 70221 0 1
// AddComEnterUnit ( driver , tmp ) ;
44819: LD_VAR 0 18
44823: PPUSH
44824: LD_VAR 0 13
44828: PPUSH
44829: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44833: LD_VAR 0 18
44837: PPUSH
44838: LD_VAR 0 7
44842: PPUSH
44843: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44847: LD_VAR 0 18
44851: PPUSH
44852: CALL_OW 181
// end ; continue ;
44856: GO 44508
// end ; if not cleaners or not tmp in cleaners then
44858: LD_VAR 0 6
44862: NOT
44863: PUSH
44864: LD_VAR 0 13
44868: PUSH
44869: LD_VAR 0 6
44873: IN
44874: NOT
44875: OR
44876: IFFALSE 45183
// begin if dep then
44878: LD_VAR 0 17
44882: IFFALSE 45018
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44884: LD_ADDR_VAR 0 16
44888: PUSH
44889: LD_VAR 0 17
44893: PUSH
44894: LD_INT 1
44896: ARRAY
44897: PPUSH
44898: CALL_OW 250
44902: PPUSH
44903: LD_VAR 0 17
44907: PUSH
44908: LD_INT 1
44910: ARRAY
44911: PPUSH
44912: CALL_OW 254
44916: PPUSH
44917: LD_INT 5
44919: PPUSH
44920: CALL_OW 272
44924: PUSH
44925: LD_VAR 0 17
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PPUSH
44934: CALL_OW 251
44938: PPUSH
44939: LD_VAR 0 17
44943: PUSH
44944: LD_INT 1
44946: ARRAY
44947: PPUSH
44948: CALL_OW 254
44952: PPUSH
44953: LD_INT 5
44955: PPUSH
44956: CALL_OW 273
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44965: LD_VAR 0 16
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: PPUSH
44974: LD_VAR 0 16
44978: PUSH
44979: LD_INT 2
44981: ARRAY
44982: PPUSH
44983: CALL_OW 488
44987: IFFALSE 45018
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44989: LD_VAR 0 13
44993: PPUSH
44994: LD_VAR 0 16
44998: PUSH
44999: LD_INT 1
45001: ARRAY
45002: PPUSH
45003: LD_VAR 0 16
45007: PUSH
45008: LD_INT 2
45010: ARRAY
45011: PPUSH
45012: CALL_OW 111
// continue ;
45016: GO 44508
// end ; end ; r := GetDir ( tmp ) ;
45018: LD_ADDR_VAR 0 15
45022: PUSH
45023: LD_VAR 0 13
45027: PPUSH
45028: CALL_OW 254
45032: ST_TO_ADDR
// if r = 5 then
45033: LD_VAR 0 15
45037: PUSH
45038: LD_INT 5
45040: EQUAL
45041: IFFALSE 45051
// r := 0 ;
45043: LD_ADDR_VAR 0 15
45047: PUSH
45048: LD_INT 0
45050: ST_TO_ADDR
// for j = r to 5 do
45051: LD_ADDR_VAR 0 10
45055: PUSH
45056: DOUBLE
45057: LD_VAR 0 15
45061: DEC
45062: ST_TO_ADDR
45063: LD_INT 5
45065: PUSH
45066: FOR_TO
45067: IFFALSE 45181
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45069: LD_ADDR_VAR 0 11
45073: PUSH
45074: LD_VAR 0 13
45078: PPUSH
45079: CALL_OW 250
45083: PPUSH
45084: LD_VAR 0 10
45088: PPUSH
45089: LD_INT 2
45091: PPUSH
45092: CALL_OW 272
45096: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45097: LD_ADDR_VAR 0 12
45101: PUSH
45102: LD_VAR 0 13
45106: PPUSH
45107: CALL_OW 251
45111: PPUSH
45112: LD_VAR 0 10
45116: PPUSH
45117: LD_INT 2
45119: PPUSH
45120: CALL_OW 273
45124: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45125: LD_VAR 0 11
45129: PPUSH
45130: LD_VAR 0 12
45134: PPUSH
45135: CALL_OW 488
45139: PUSH
45140: LD_VAR 0 11
45144: PPUSH
45145: LD_VAR 0 12
45149: PPUSH
45150: CALL_OW 428
45154: NOT
45155: AND
45156: IFFALSE 45179
// begin ComMoveXY ( tmp , _x , _y ) ;
45158: LD_VAR 0 13
45162: PPUSH
45163: LD_VAR 0 11
45167: PPUSH
45168: LD_VAR 0 12
45172: PPUSH
45173: CALL_OW 111
// break ;
45177: GO 45181
// end ; end ;
45179: GO 45066
45181: POP
45182: POP
// end ; end ;
45183: GO 44508
45185: POP
45186: POP
// end ;
45187: LD_VAR 0 8
45191: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45192: LD_INT 0
45194: PPUSH
// result := true ;
45195: LD_ADDR_VAR 0 3
45199: PUSH
45200: LD_INT 1
45202: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45203: LD_VAR 0 2
45207: PUSH
45208: LD_INT 24
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45222
45214: LD_INT 33
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45222
45220: GO 45247
45222: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45223: LD_ADDR_VAR 0 3
45227: PUSH
45228: LD_INT 32
45230: PPUSH
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL_OW 321
45240: PUSH
45241: LD_INT 2
45243: EQUAL
45244: ST_TO_ADDR
45245: GO 45563
45247: LD_INT 20
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45280
45255: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45256: LD_ADDR_VAR 0 3
45260: PUSH
45261: LD_INT 6
45263: PPUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 321
45273: PUSH
45274: LD_INT 2
45276: EQUAL
45277: ST_TO_ADDR
45278: GO 45563
45280: LD_INT 22
45282: DOUBLE
45283: EQUAL
45284: IFTRUE 45294
45286: LD_INT 36
45288: DOUBLE
45289: EQUAL
45290: IFTRUE 45294
45292: GO 45319
45294: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45295: LD_ADDR_VAR 0 3
45299: PUSH
45300: LD_INT 15
45302: PPUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: CALL_OW 321
45312: PUSH
45313: LD_INT 2
45315: EQUAL
45316: ST_TO_ADDR
45317: GO 45563
45319: LD_INT 30
45321: DOUBLE
45322: EQUAL
45323: IFTRUE 45327
45325: GO 45352
45327: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45328: LD_ADDR_VAR 0 3
45332: PUSH
45333: LD_INT 20
45335: PPUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 321
45345: PUSH
45346: LD_INT 2
45348: EQUAL
45349: ST_TO_ADDR
45350: GO 45563
45352: LD_INT 28
45354: DOUBLE
45355: EQUAL
45356: IFTRUE 45366
45358: LD_INT 21
45360: DOUBLE
45361: EQUAL
45362: IFTRUE 45366
45364: GO 45391
45366: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45367: LD_ADDR_VAR 0 3
45371: PUSH
45372: LD_INT 21
45374: PPUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 321
45384: PUSH
45385: LD_INT 2
45387: EQUAL
45388: ST_TO_ADDR
45389: GO 45563
45391: LD_INT 16
45393: DOUBLE
45394: EQUAL
45395: IFTRUE 45399
45397: GO 45424
45399: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45400: LD_ADDR_VAR 0 3
45404: PUSH
45405: LD_INT 84
45407: PPUSH
45408: LD_VAR 0 1
45412: PPUSH
45413: CALL_OW 321
45417: PUSH
45418: LD_INT 2
45420: EQUAL
45421: ST_TO_ADDR
45422: GO 45563
45424: LD_INT 19
45426: DOUBLE
45427: EQUAL
45428: IFTRUE 45438
45430: LD_INT 23
45432: DOUBLE
45433: EQUAL
45434: IFTRUE 45438
45436: GO 45463
45438: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45439: LD_ADDR_VAR 0 3
45443: PUSH
45444: LD_INT 83
45446: PPUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 321
45456: PUSH
45457: LD_INT 2
45459: EQUAL
45460: ST_TO_ADDR
45461: GO 45563
45463: LD_INT 17
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45471
45469: GO 45496
45471: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45472: LD_ADDR_VAR 0 3
45476: PUSH
45477: LD_INT 39
45479: PPUSH
45480: LD_VAR 0 1
45484: PPUSH
45485: CALL_OW 321
45489: PUSH
45490: LD_INT 2
45492: EQUAL
45493: ST_TO_ADDR
45494: GO 45563
45496: LD_INT 18
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45529
45504: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 40
45512: PPUSH
45513: LD_VAR 0 1
45517: PPUSH
45518: CALL_OW 321
45522: PUSH
45523: LD_INT 2
45525: EQUAL
45526: ST_TO_ADDR
45527: GO 45563
45529: LD_INT 27
45531: DOUBLE
45532: EQUAL
45533: IFTRUE 45537
45535: GO 45562
45537: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45538: LD_ADDR_VAR 0 3
45542: PUSH
45543: LD_INT 35
45545: PPUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 321
45555: PUSH
45556: LD_INT 2
45558: EQUAL
45559: ST_TO_ADDR
45560: GO 45563
45562: POP
// end ;
45563: LD_VAR 0 3
45567: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45568: LD_INT 0
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
// result := false ;
45581: LD_ADDR_VAR 0 6
45585: PUSH
45586: LD_INT 0
45588: ST_TO_ADDR
// if btype = b_depot then
45589: LD_VAR 0 2
45593: PUSH
45594: LD_INT 0
45596: EQUAL
45597: IFFALSE 45609
// begin result := true ;
45599: LD_ADDR_VAR 0 6
45603: PUSH
45604: LD_INT 1
45606: ST_TO_ADDR
// exit ;
45607: GO 46435
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45609: LD_VAR 0 1
45613: NOT
45614: PUSH
45615: LD_VAR 0 1
45619: PPUSH
45620: CALL_OW 266
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: IN
45635: NOT
45636: OR
45637: PUSH
45638: LD_VAR 0 2
45642: NOT
45643: OR
45644: PUSH
45645: LD_VAR 0 5
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: LD_INT 4
45664: PUSH
45665: LD_INT 5
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: IN
45676: NOT
45677: OR
45678: PUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: LD_VAR 0 4
45688: PPUSH
45689: CALL_OW 488
45693: NOT
45694: OR
45695: IFFALSE 45699
// exit ;
45697: GO 46435
// side := GetSide ( depot ) ;
45699: LD_ADDR_VAR 0 9
45703: PUSH
45704: LD_VAR 0 1
45708: PPUSH
45709: CALL_OW 255
45713: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45714: LD_VAR 0 9
45718: PPUSH
45719: LD_VAR 0 2
45723: PPUSH
45724: CALL 45192 0 2
45728: NOT
45729: IFFALSE 45733
// exit ;
45731: GO 46435
// pom := GetBase ( depot ) ;
45733: LD_ADDR_VAR 0 10
45737: PUSH
45738: LD_VAR 0 1
45742: PPUSH
45743: CALL_OW 274
45747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45748: LD_ADDR_VAR 0 11
45752: PUSH
45753: LD_VAR 0 2
45757: PPUSH
45758: LD_VAR 0 1
45762: PPUSH
45763: CALL_OW 248
45767: PPUSH
45768: CALL_OW 450
45772: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45773: LD_VAR 0 10
45777: PPUSH
45778: LD_INT 1
45780: PPUSH
45781: CALL_OW 275
45785: PUSH
45786: LD_VAR 0 11
45790: PUSH
45791: LD_INT 1
45793: ARRAY
45794: GREATEREQUAL
45795: PUSH
45796: LD_VAR 0 10
45800: PPUSH
45801: LD_INT 2
45803: PPUSH
45804: CALL_OW 275
45808: PUSH
45809: LD_VAR 0 11
45813: PUSH
45814: LD_INT 2
45816: ARRAY
45817: GREATEREQUAL
45818: AND
45819: PUSH
45820: LD_VAR 0 10
45824: PPUSH
45825: LD_INT 3
45827: PPUSH
45828: CALL_OW 275
45832: PUSH
45833: LD_VAR 0 11
45837: PUSH
45838: LD_INT 3
45840: ARRAY
45841: GREATEREQUAL
45842: AND
45843: NOT
45844: IFFALSE 45848
// exit ;
45846: GO 46435
// if GetBType ( depot ) = b_depot then
45848: LD_VAR 0 1
45852: PPUSH
45853: CALL_OW 266
45857: PUSH
45858: LD_INT 0
45860: EQUAL
45861: IFFALSE 45873
// dist := 28 else
45863: LD_ADDR_VAR 0 14
45867: PUSH
45868: LD_INT 28
45870: ST_TO_ADDR
45871: GO 45881
// dist := 36 ;
45873: LD_ADDR_VAR 0 14
45877: PUSH
45878: LD_INT 36
45880: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45881: LD_VAR 0 1
45885: PPUSH
45886: LD_VAR 0 3
45890: PPUSH
45891: LD_VAR 0 4
45895: PPUSH
45896: CALL_OW 297
45900: PUSH
45901: LD_VAR 0 14
45905: GREATER
45906: IFFALSE 45910
// exit ;
45908: GO 46435
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45910: LD_ADDR_VAR 0 12
45914: PUSH
45915: LD_VAR 0 2
45919: PPUSH
45920: LD_VAR 0 3
45924: PPUSH
45925: LD_VAR 0 4
45929: PPUSH
45930: LD_VAR 0 5
45934: PPUSH
45935: LD_VAR 0 1
45939: PPUSH
45940: CALL_OW 248
45944: PPUSH
45945: LD_INT 0
45947: PPUSH
45948: CALL 46440 0 6
45952: ST_TO_ADDR
// if not hexes then
45953: LD_VAR 0 12
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 46435
// hex := GetHexInfo ( x , y ) ;
45962: LD_ADDR_VAR 0 15
45966: PUSH
45967: LD_VAR 0 3
45971: PPUSH
45972: LD_VAR 0 4
45976: PPUSH
45977: CALL_OW 546
45981: ST_TO_ADDR
// if hex [ 1 ] then
45982: LD_VAR 0 15
45986: PUSH
45987: LD_INT 1
45989: ARRAY
45990: IFFALSE 45994
// exit ;
45992: GO 46435
// height := hex [ 2 ] ;
45994: LD_ADDR_VAR 0 13
45998: PUSH
45999: LD_VAR 0 15
46003: PUSH
46004: LD_INT 2
46006: ARRAY
46007: ST_TO_ADDR
// for i = 1 to hexes do
46008: LD_ADDR_VAR 0 7
46012: PUSH
46013: DOUBLE
46014: LD_INT 1
46016: DEC
46017: ST_TO_ADDR
46018: LD_VAR 0 12
46022: PUSH
46023: FOR_TO
46024: IFFALSE 46354
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46026: LD_VAR 0 12
46030: PUSH
46031: LD_VAR 0 7
46035: ARRAY
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: PPUSH
46041: LD_VAR 0 12
46045: PUSH
46046: LD_VAR 0 7
46050: ARRAY
46051: PUSH
46052: LD_INT 2
46054: ARRAY
46055: PPUSH
46056: CALL_OW 488
46060: NOT
46061: PUSH
46062: LD_VAR 0 12
46066: PUSH
46067: LD_VAR 0 7
46071: ARRAY
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PPUSH
46077: LD_VAR 0 12
46081: PUSH
46082: LD_VAR 0 7
46086: ARRAY
46087: PUSH
46088: LD_INT 2
46090: ARRAY
46091: PPUSH
46092: CALL_OW 428
46096: PUSH
46097: LD_INT 0
46099: GREATER
46100: OR
46101: PUSH
46102: LD_VAR 0 12
46106: PUSH
46107: LD_VAR 0 7
46111: ARRAY
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: LD_VAR 0 12
46121: PUSH
46122: LD_VAR 0 7
46126: ARRAY
46127: PUSH
46128: LD_INT 2
46130: ARRAY
46131: PPUSH
46132: CALL_OW 351
46136: OR
46137: IFFALSE 46143
// exit ;
46139: POP
46140: POP
46141: GO 46435
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46143: LD_ADDR_VAR 0 8
46147: PUSH
46148: LD_VAR 0 12
46152: PUSH
46153: LD_VAR 0 7
46157: ARRAY
46158: PUSH
46159: LD_INT 1
46161: ARRAY
46162: PPUSH
46163: LD_VAR 0 12
46167: PUSH
46168: LD_VAR 0 7
46172: ARRAY
46173: PUSH
46174: LD_INT 2
46176: ARRAY
46177: PPUSH
46178: CALL_OW 546
46182: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46183: LD_VAR 0 8
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: PUSH
46192: LD_VAR 0 8
46196: PUSH
46197: LD_INT 2
46199: ARRAY
46200: PUSH
46201: LD_VAR 0 13
46205: PUSH
46206: LD_INT 2
46208: PLUS
46209: GREATER
46210: OR
46211: PUSH
46212: LD_VAR 0 8
46216: PUSH
46217: LD_INT 2
46219: ARRAY
46220: PUSH
46221: LD_VAR 0 13
46225: PUSH
46226: LD_INT 2
46228: MINUS
46229: LESS
46230: OR
46231: PUSH
46232: LD_VAR 0 8
46236: PUSH
46237: LD_INT 3
46239: ARRAY
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 8
46246: PUSH
46247: LD_INT 9
46249: PUSH
46250: LD_INT 10
46252: PUSH
46253: LD_INT 11
46255: PUSH
46256: LD_INT 12
46258: PUSH
46259: LD_INT 13
46261: PUSH
46262: LD_INT 16
46264: PUSH
46265: LD_INT 17
46267: PUSH
46268: LD_INT 18
46270: PUSH
46271: LD_INT 19
46273: PUSH
46274: LD_INT 20
46276: PUSH
46277: LD_INT 21
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: IN
46295: NOT
46296: OR
46297: PUSH
46298: LD_VAR 0 8
46302: PUSH
46303: LD_INT 5
46305: ARRAY
46306: NOT
46307: OR
46308: PUSH
46309: LD_VAR 0 8
46313: PUSH
46314: LD_INT 6
46316: ARRAY
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 7
46326: PUSH
46327: LD_INT 9
46329: PUSH
46330: LD_INT 10
46332: PUSH
46333: LD_INT 11
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: IN
46344: NOT
46345: OR
46346: IFFALSE 46352
// exit ;
46348: POP
46349: POP
46350: GO 46435
// end ;
46352: GO 46023
46354: POP
46355: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46356: LD_VAR 0 9
46360: PPUSH
46361: LD_VAR 0 3
46365: PPUSH
46366: LD_VAR 0 4
46370: PPUSH
46371: LD_INT 20
46373: PPUSH
46374: CALL 38358 0 4
46378: PUSH
46379: LD_INT 4
46381: ARRAY
46382: IFFALSE 46386
// exit ;
46384: GO 46435
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46386: LD_VAR 0 2
46390: PUSH
46391: LD_INT 29
46393: PUSH
46394: LD_INT 30
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: IN
46401: PUSH
46402: LD_VAR 0 3
46406: PPUSH
46407: LD_VAR 0 4
46411: PPUSH
46412: LD_VAR 0 9
46416: PPUSH
46417: CALL_OW 440
46421: NOT
46422: AND
46423: IFFALSE 46427
// exit ;
46425: GO 46435
// result := true ;
46427: LD_ADDR_VAR 0 6
46431: PUSH
46432: LD_INT 1
46434: ST_TO_ADDR
// end ;
46435: LD_VAR 0 6
46439: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46440: LD_INT 0
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
46480: PPUSH
46481: PPUSH
46482: PPUSH
46483: PPUSH
46484: PPUSH
46485: PPUSH
46486: PPUSH
46487: PPUSH
46488: PPUSH
46489: PPUSH
46490: PPUSH
46491: PPUSH
46492: PPUSH
46493: PPUSH
46494: PPUSH
46495: PPUSH
46496: PPUSH
46497: PPUSH
46498: PPUSH
46499: PPUSH
// result = [ ] ;
46500: LD_ADDR_VAR 0 7
46504: PUSH
46505: EMPTY
46506: ST_TO_ADDR
// temp_list = [ ] ;
46507: LD_ADDR_VAR 0 9
46511: PUSH
46512: EMPTY
46513: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46514: LD_VAR 0 4
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: IN
46545: NOT
46546: PUSH
46547: LD_VAR 0 1
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: IN
46562: PUSH
46563: LD_VAR 0 5
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: IN
46582: NOT
46583: AND
46584: OR
46585: IFFALSE 46589
// exit ;
46587: GO 64980
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46589: LD_VAR 0 1
46593: PUSH
46594: LD_INT 6
46596: PUSH
46597: LD_INT 7
46599: PUSH
46600: LD_INT 8
46602: PUSH
46603: LD_INT 13
46605: PUSH
46606: LD_INT 12
46608: PUSH
46609: LD_INT 15
46611: PUSH
46612: LD_INT 11
46614: PUSH
46615: LD_INT 14
46617: PUSH
46618: LD_INT 10
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: IN
46632: IFFALSE 46642
// btype = b_lab ;
46634: LD_ADDR_VAR 0 1
46638: PUSH
46639: LD_INT 6
46641: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46642: LD_VAR 0 6
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: IN
46661: NOT
46662: PUSH
46663: LD_VAR 0 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 6
46682: PUSH
46683: LD_INT 36
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: LD_INT 5
46691: PUSH
46692: LD_INT 31
46694: PUSH
46695: LD_INT 32
46697: PUSH
46698: LD_INT 33
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: IN
46714: NOT
46715: PUSH
46716: LD_VAR 0 6
46720: PUSH
46721: LD_INT 1
46723: EQUAL
46724: AND
46725: OR
46726: PUSH
46727: LD_VAR 0 1
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: IN
46742: NOT
46743: PUSH
46744: LD_VAR 0 6
46748: PUSH
46749: LD_INT 2
46751: EQUAL
46752: AND
46753: OR
46754: IFFALSE 46764
// mode = 0 ;
46756: LD_ADDR_VAR 0 6
46760: PUSH
46761: LD_INT 0
46763: ST_TO_ADDR
// case mode of 0 :
46764: LD_VAR 0 6
46768: PUSH
46769: LD_INT 0
46771: DOUBLE
46772: EQUAL
46773: IFTRUE 46777
46775: GO 58230
46777: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46778: LD_ADDR_VAR 0 11
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46971: LD_ADDR_VAR 0 12
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47167: LD_ADDR_VAR 0 13
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47366: LD_ADDR_VAR 0 14
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47562: LD_ADDR_VAR 0 15
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47755: LD_ADDR_VAR 0 16
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 3
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 17
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48178: LD_ADDR_VAR 0 18
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48408: LD_ADDR_VAR 0 19
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48638: LD_ADDR_VAR 0 20
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48868: LD_ADDR_VAR 0 21
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49098: LD_ADDR_VAR 0 22
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49328: LD_ADDR_VAR 0 23
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49608: LD_ADDR_VAR 0 24
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49884: LD_ADDR_VAR 0 25
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 3
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50158: LD_ADDR_VAR 0 26
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50434: LD_ADDR_VAR 0 27
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50714: LD_ADDR_VAR 0 28
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50996: LD_ADDR_VAR 0 29
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51275: LD_ADDR_VAR 0 30
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51553: LD_ADDR_VAR 0 31
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 3
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 3
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51831: LD_ADDR_VAR 0 32
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52109: LD_ADDR_VAR 0 33
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52388: LD_ADDR_VAR 0 34
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52668: LD_ADDR_VAR 0 35
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52780: LD_ADDR_VAR 0 36
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52892: LD_ADDR_VAR 0 37
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53004: LD_ADDR_VAR 0 38
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53116: LD_ADDR_VAR 0 39
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53228: LD_ADDR_VAR 0 40
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53340: LD_ADDR_VAR 0 41
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53690: LD_ADDR_VAR 0 42
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 3
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54040: LD_ADDR_VAR 0 43
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54388: LD_ADDR_VAR 0 44
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 3
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54738: LD_ADDR_VAR 0 45
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55088: LD_ADDR_VAR 0 46
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55436: LD_ADDR_VAR 0 47
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55587: LD_ADDR_VAR 0 48
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55734: LD_ADDR_VAR 0 49
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55878: LD_ADDR_VAR 0 50
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56022: LD_ADDR_VAR 0 51
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56169: LD_ADDR_VAR 0 52
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56320: LD_ADDR_VAR 0 53
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56550: LD_ADDR_VAR 0 54
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56780: LD_ADDR_VAR 0 55
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57010: LD_ADDR_VAR 0 56
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57240: LD_ADDR_VAR 0 57
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57470: LD_ADDR_VAR 0 58
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57700: LD_ADDR_VAR 0 59
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57788: LD_ADDR_VAR 0 60
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57876: LD_ADDR_VAR 0 61
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57964: LD_ADDR_VAR 0 62
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58052: LD_ADDR_VAR 0 63
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58140: LD_ADDR_VAR 0 64
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// end ; 1 :
58228: GO 64125
58230: LD_INT 1
58232: DOUBLE
58233: EQUAL
58234: IFTRUE 58238
58236: GO 60861
58238: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58239: LD_ADDR_VAR 0 11
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58283: LD_ADDR_VAR 0 12
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58324: LD_ADDR_VAR 0 13
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58364: LD_ADDR_VAR 0 14
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58405: LD_ADDR_VAR 0 15
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58449: LD_ADDR_VAR 0 16
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58495: LD_ADDR_VAR 0 17
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58539: LD_ADDR_VAR 0 18
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58580: LD_ADDR_VAR 0 19
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58620: LD_ADDR_VAR 0 20
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 3
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58661: LD_ADDR_VAR 0 21
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58705: LD_ADDR_VAR 0 22
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58751: LD_ADDR_VAR 0 23
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 4
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 3
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58795: LD_ADDR_VAR 0 24
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58836: LD_ADDR_VAR 0 25
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 4
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: LD_INT 4
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58876: LD_ADDR_VAR 0 26
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58917: LD_ADDR_VAR 0 27
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58961: LD_ADDR_VAR 0 28
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 4
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: NEG
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59007: LD_ADDR_VAR 0 29
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 4
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 4
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 5
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 4
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 6
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 6
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 5
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59162: LD_ADDR_VAR 0 30
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 4
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 5
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 5
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 6
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 6
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59305: LD_ADDR_VAR 0 31
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: LD_INT 4
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 5
59382: PUSH
59383: LD_INT 5
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 6
59402: PUSH
59403: LD_INT 5
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 6
59412: PUSH
59413: LD_INT 6
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 5
59422: PUSH
59423: LD_INT 6
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59444: LD_ADDR_VAR 0 32
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 4
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 4
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 4
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 6
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 6
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 5
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59587: LD_ADDR_VAR 0 33
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 5
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 5
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 6
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 6
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59742: LD_ADDR_VAR 0 34
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: LD_INT 4
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: NEG
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 4
59809: NEG
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 4
59821: NEG
59822: PUSH
59823: LD_INT 5
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 5
59833: NEG
59834: PUSH
59835: LD_INT 4
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 5
59845: NEG
59846: PUSH
59847: LD_INT 5
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 5
59857: NEG
59858: PUSH
59859: LD_INT 6
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 6
59869: NEG
59870: PUSH
59871: LD_INT 5
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 6
59881: NEG
59882: PUSH
59883: LD_INT 6
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59905: LD_ADDR_VAR 0 41
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59949: LD_ADDR_VAR 0 42
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59990: LD_ADDR_VAR 0 43
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60030: LD_ADDR_VAR 0 44
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60071: LD_ADDR_VAR 0 45
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60115: LD_ADDR_VAR 0 46
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: LIST
60160: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60161: LD_ADDR_VAR 0 47
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60194: LD_ADDR_VAR 0 48
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60225: LD_ADDR_VAR 0 49
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60254: LD_ADDR_VAR 0 50
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60283: LD_ADDR_VAR 0 51
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60314: LD_ADDR_VAR 0 52
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60347: LD_ADDR_VAR 0 53
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60391: LD_ADDR_VAR 0 54
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60432: LD_ADDR_VAR 0 55
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60472: LD_ADDR_VAR 0 56
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60513: LD_ADDR_VAR 0 57
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60557: LD_ADDR_VAR 0 58
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60603: LD_ADDR_VAR 0 59
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60647: LD_ADDR_VAR 0 60
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60688: LD_ADDR_VAR 0 61
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60728: LD_ADDR_VAR 0 62
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60769: LD_ADDR_VAR 0 63
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60813: LD_ADDR_VAR 0 64
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: ST_TO_ADDR
// end ; 2 :
60859: GO 64125
60861: LD_INT 2
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60869
60867: GO 64124
60869: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60870: LD_ADDR_VAR 0 29
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 5
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 5
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: LD_INT 4
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 4
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 5
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 4
61209: NEG
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 4
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: NEG
61256: PUSH
61257: LD_INT 4
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 4
61267: NEG
61268: PUSH
61269: LD_INT 5
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 4
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 5
61315: NEG
61316: PUSH
61317: LD_INT 4
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 5
61327: NEG
61328: PUSH
61329: LD_INT 5
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: LD_INT 5
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 5
61351: NEG
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61408: LD_ADDR_VAR 0 30
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: LD_INT 5
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 4
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 4
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 4
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 5
61654: NEG
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 5
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 5
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 4
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 4
61760: NEG
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 4
61772: NEG
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: LD_INT 4
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: LD_INT 4
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: LD_INT 4
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 4
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 5
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: LD_INT 5
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61955: LD_ADDR_VAR 0 31
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 5
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 3
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: NEG
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 4
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 4
62169: NEG
62170: PUSH
62171: LD_INT 5
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 5
62217: NEG
62218: PUSH
62219: LD_INT 4
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 5
62229: NEG
62230: PUSH
62231: LD_INT 5
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: LD_INT 5
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 5
62253: NEG
62254: PUSH
62255: LD_INT 3
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 4
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 3
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: LD_INT 4
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 4
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 5
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 5
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 5
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62505: LD_ADDR_VAR 0 32
62509: PUSH
62510: LD_INT 4
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 4
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 4
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 5
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 5
62591: NEG
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: LD_INT 4
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 4
62674: NEG
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 4
62686: NEG
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: NEG
62699: PUSH
62700: LD_INT 4
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 4
62710: NEG
62711: PUSH
62712: LD_INT 2
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 4
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 5
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 4
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 4
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 5
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 3
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 4
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 4
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 2
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 4
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 4
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 4
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 5
62937: PUSH
62938: LD_INT 4
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 5
62947: PUSH
62948: LD_INT 5
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 4
62957: PUSH
62958: LD_INT 5
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: LD_INT 4
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 5
62987: PUSH
62988: LD_INT 3
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 3
62997: PUSH
62998: LD_INT 5
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63052: LD_ADDR_VAR 0 33
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 4
63071: NEG
63072: PUSH
63073: LD_INT 5
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 4
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: LD_INT 3
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 4
63107: NEG
63108: PUSH
63109: LD_INT 3
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 5
63119: NEG
63120: PUSH
63121: LD_INT 4
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 5
63131: NEG
63132: PUSH
63133: LD_INT 5
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: LD_INT 5
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 5
63155: NEG
63156: PUSH
63157: LD_INT 3
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 4
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 4
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 4
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 5
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 5
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 4
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 3
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 5
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: LD_INT 3
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 4
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 4
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 4
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 3
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 5
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 5
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63590: LD_ADDR_VAR 0 34
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 4
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 5
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: LD_INT 4
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 4
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 5
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: LD_INT 5
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 4
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 4
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 4
63792: PUSH
63793: LD_INT 4
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: LD_INT 3
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 5
63812: PUSH
63813: LD_INT 4
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 5
63822: PUSH
63823: LD_INT 5
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: LD_INT 5
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 5
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: LD_INT 5
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 4
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 3
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: LD_INT 4
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 4
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 4
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: NEG
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 3
64009: NEG
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 4
64020: NEG
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 5
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 5
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 5
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: ST_TO_ADDR
// end ; end ;
64122: GO 64125
64124: POP
// case btype of b_depot , b_warehouse :
64125: LD_VAR 0 1
64129: PUSH
64130: LD_INT 0
64132: DOUBLE
64133: EQUAL
64134: IFTRUE 64144
64136: LD_INT 1
64138: DOUBLE
64139: EQUAL
64140: IFTRUE 64144
64142: GO 64345
64144: POP
// case nation of nation_american :
64145: LD_VAR 0 5
64149: PUSH
64150: LD_INT 1
64152: DOUBLE
64153: EQUAL
64154: IFTRUE 64158
64156: GO 64214
64158: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64159: LD_ADDR_VAR 0 9
64163: PUSH
64164: LD_VAR 0 11
64168: PUSH
64169: LD_VAR 0 12
64173: PUSH
64174: LD_VAR 0 13
64178: PUSH
64179: LD_VAR 0 14
64183: PUSH
64184: LD_VAR 0 15
64188: PUSH
64189: LD_VAR 0 16
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: PUSH
64202: LD_VAR 0 4
64206: PUSH
64207: LD_INT 1
64209: PLUS
64210: ARRAY
64211: ST_TO_ADDR
64212: GO 64343
64214: LD_INT 2
64216: DOUBLE
64217: EQUAL
64218: IFTRUE 64222
64220: GO 64278
64222: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64223: LD_ADDR_VAR 0 9
64227: PUSH
64228: LD_VAR 0 17
64232: PUSH
64233: LD_VAR 0 18
64237: PUSH
64238: LD_VAR 0 19
64242: PUSH
64243: LD_VAR 0 20
64247: PUSH
64248: LD_VAR 0 21
64252: PUSH
64253: LD_VAR 0 22
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: PUSH
64266: LD_VAR 0 4
64270: PUSH
64271: LD_INT 1
64273: PLUS
64274: ARRAY
64275: ST_TO_ADDR
64276: GO 64343
64278: LD_INT 3
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64286
64284: GO 64342
64286: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64287: LD_ADDR_VAR 0 9
64291: PUSH
64292: LD_VAR 0 23
64296: PUSH
64297: LD_VAR 0 24
64301: PUSH
64302: LD_VAR 0 25
64306: PUSH
64307: LD_VAR 0 26
64311: PUSH
64312: LD_VAR 0 27
64316: PUSH
64317: LD_VAR 0 28
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: LD_VAR 0 4
64334: PUSH
64335: LD_INT 1
64337: PLUS
64338: ARRAY
64339: ST_TO_ADDR
64340: GO 64343
64342: POP
64343: GO 64898
64345: LD_INT 2
64347: DOUBLE
64348: EQUAL
64349: IFTRUE 64359
64351: LD_INT 3
64353: DOUBLE
64354: EQUAL
64355: IFTRUE 64359
64357: GO 64415
64359: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64360: LD_ADDR_VAR 0 9
64364: PUSH
64365: LD_VAR 0 29
64369: PUSH
64370: LD_VAR 0 30
64374: PUSH
64375: LD_VAR 0 31
64379: PUSH
64380: LD_VAR 0 32
64384: PUSH
64385: LD_VAR 0 33
64389: PUSH
64390: LD_VAR 0 34
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: PUSH
64403: LD_VAR 0 4
64407: PUSH
64408: LD_INT 1
64410: PLUS
64411: ARRAY
64412: ST_TO_ADDR
64413: GO 64898
64415: LD_INT 16
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64477
64421: LD_INT 17
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64477
64427: LD_INT 18
64429: DOUBLE
64430: EQUAL
64431: IFTRUE 64477
64433: LD_INT 19
64435: DOUBLE
64436: EQUAL
64437: IFTRUE 64477
64439: LD_INT 22
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64477
64445: LD_INT 20
64447: DOUBLE
64448: EQUAL
64449: IFTRUE 64477
64451: LD_INT 21
64453: DOUBLE
64454: EQUAL
64455: IFTRUE 64477
64457: LD_INT 23
64459: DOUBLE
64460: EQUAL
64461: IFTRUE 64477
64463: LD_INT 24
64465: DOUBLE
64466: EQUAL
64467: IFTRUE 64477
64469: LD_INT 25
64471: DOUBLE
64472: EQUAL
64473: IFTRUE 64477
64475: GO 64533
64477: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64478: LD_ADDR_VAR 0 9
64482: PUSH
64483: LD_VAR 0 35
64487: PUSH
64488: LD_VAR 0 36
64492: PUSH
64493: LD_VAR 0 37
64497: PUSH
64498: LD_VAR 0 38
64502: PUSH
64503: LD_VAR 0 39
64507: PUSH
64508: LD_VAR 0 40
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: PUSH
64521: LD_VAR 0 4
64525: PUSH
64526: LD_INT 1
64528: PLUS
64529: ARRAY
64530: ST_TO_ADDR
64531: GO 64898
64533: LD_INT 6
64535: DOUBLE
64536: EQUAL
64537: IFTRUE 64589
64539: LD_INT 7
64541: DOUBLE
64542: EQUAL
64543: IFTRUE 64589
64545: LD_INT 8
64547: DOUBLE
64548: EQUAL
64549: IFTRUE 64589
64551: LD_INT 13
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64589
64557: LD_INT 12
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64589
64563: LD_INT 15
64565: DOUBLE
64566: EQUAL
64567: IFTRUE 64589
64569: LD_INT 11
64571: DOUBLE
64572: EQUAL
64573: IFTRUE 64589
64575: LD_INT 14
64577: DOUBLE
64578: EQUAL
64579: IFTRUE 64589
64581: LD_INT 10
64583: DOUBLE
64584: EQUAL
64585: IFTRUE 64589
64587: GO 64645
64589: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64590: LD_ADDR_VAR 0 9
64594: PUSH
64595: LD_VAR 0 41
64599: PUSH
64600: LD_VAR 0 42
64604: PUSH
64605: LD_VAR 0 43
64609: PUSH
64610: LD_VAR 0 44
64614: PUSH
64615: LD_VAR 0 45
64619: PUSH
64620: LD_VAR 0 46
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: LD_VAR 0 4
64637: PUSH
64638: LD_INT 1
64640: PLUS
64641: ARRAY
64642: ST_TO_ADDR
64643: GO 64898
64645: LD_INT 36
64647: DOUBLE
64648: EQUAL
64649: IFTRUE 64653
64651: GO 64709
64653: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64654: LD_ADDR_VAR 0 9
64658: PUSH
64659: LD_VAR 0 47
64663: PUSH
64664: LD_VAR 0 48
64668: PUSH
64669: LD_VAR 0 49
64673: PUSH
64674: LD_VAR 0 50
64678: PUSH
64679: LD_VAR 0 51
64683: PUSH
64684: LD_VAR 0 52
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: PUSH
64697: LD_VAR 0 4
64701: PUSH
64702: LD_INT 1
64704: PLUS
64705: ARRAY
64706: ST_TO_ADDR
64707: GO 64898
64709: LD_INT 4
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64735
64715: LD_INT 5
64717: DOUBLE
64718: EQUAL
64719: IFTRUE 64735
64721: LD_INT 34
64723: DOUBLE
64724: EQUAL
64725: IFTRUE 64735
64727: LD_INT 37
64729: DOUBLE
64730: EQUAL
64731: IFTRUE 64735
64733: GO 64791
64735: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64736: LD_ADDR_VAR 0 9
64740: PUSH
64741: LD_VAR 0 53
64745: PUSH
64746: LD_VAR 0 54
64750: PUSH
64751: LD_VAR 0 55
64755: PUSH
64756: LD_VAR 0 56
64760: PUSH
64761: LD_VAR 0 57
64765: PUSH
64766: LD_VAR 0 58
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: LD_VAR 0 4
64783: PUSH
64784: LD_INT 1
64786: PLUS
64787: ARRAY
64788: ST_TO_ADDR
64789: GO 64898
64791: LD_INT 31
64793: DOUBLE
64794: EQUAL
64795: IFTRUE 64841
64797: LD_INT 32
64799: DOUBLE
64800: EQUAL
64801: IFTRUE 64841
64803: LD_INT 33
64805: DOUBLE
64806: EQUAL
64807: IFTRUE 64841
64809: LD_INT 27
64811: DOUBLE
64812: EQUAL
64813: IFTRUE 64841
64815: LD_INT 26
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64841
64821: LD_INT 28
64823: DOUBLE
64824: EQUAL
64825: IFTRUE 64841
64827: LD_INT 29
64829: DOUBLE
64830: EQUAL
64831: IFTRUE 64841
64833: LD_INT 30
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64897
64841: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64842: LD_ADDR_VAR 0 9
64846: PUSH
64847: LD_VAR 0 59
64851: PUSH
64852: LD_VAR 0 60
64856: PUSH
64857: LD_VAR 0 61
64861: PUSH
64862: LD_VAR 0 62
64866: PUSH
64867: LD_VAR 0 63
64871: PUSH
64872: LD_VAR 0 64
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: PUSH
64885: LD_VAR 0 4
64889: PUSH
64890: LD_INT 1
64892: PLUS
64893: ARRAY
64894: ST_TO_ADDR
64895: GO 64898
64897: POP
// temp_list2 = [ ] ;
64898: LD_ADDR_VAR 0 10
64902: PUSH
64903: EMPTY
64904: ST_TO_ADDR
// for i in temp_list do
64905: LD_ADDR_VAR 0 8
64909: PUSH
64910: LD_VAR 0 9
64914: PUSH
64915: FOR_IN
64916: IFFALSE 64968
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64918: LD_ADDR_VAR 0 10
64922: PUSH
64923: LD_VAR 0 10
64927: PUSH
64928: LD_VAR 0 8
64932: PUSH
64933: LD_INT 1
64935: ARRAY
64936: PUSH
64937: LD_VAR 0 2
64941: PLUS
64942: PUSH
64943: LD_VAR 0 8
64947: PUSH
64948: LD_INT 2
64950: ARRAY
64951: PUSH
64952: LD_VAR 0 3
64956: PLUS
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: ADD
64965: ST_TO_ADDR
64966: GO 64915
64968: POP
64969: POP
// result = temp_list2 ;
64970: LD_ADDR_VAR 0 7
64974: PUSH
64975: LD_VAR 0 10
64979: ST_TO_ADDR
// end ;
64980: LD_VAR 0 7
64984: RET
// export function EnemyInRange ( unit , dist ) ; begin
64985: LD_INT 0
64987: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64988: LD_ADDR_VAR 0 3
64992: PUSH
64993: LD_VAR 0 1
64997: PPUSH
64998: CALL_OW 255
65002: PPUSH
65003: LD_VAR 0 1
65007: PPUSH
65008: CALL_OW 250
65012: PPUSH
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 251
65022: PPUSH
65023: LD_VAR 0 2
65027: PPUSH
65028: CALL 38358 0 4
65032: PUSH
65033: LD_INT 4
65035: ARRAY
65036: ST_TO_ADDR
// end ;
65037: LD_VAR 0 3
65041: RET
// export function PlayerSeeMe ( unit ) ; begin
65042: LD_INT 0
65044: PPUSH
// result := See ( your_side , unit ) ;
65045: LD_ADDR_VAR 0 2
65049: PUSH
65050: LD_OWVAR 2
65054: PPUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: CALL_OW 292
65064: ST_TO_ADDR
// end ;
65065: LD_VAR 0 2
65069: RET
// export function ReverseDir ( unit ) ; begin
65070: LD_INT 0
65072: PPUSH
// if not unit then
65073: LD_VAR 0 1
65077: NOT
65078: IFFALSE 65082
// exit ;
65080: GO 65105
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65082: LD_ADDR_VAR 0 2
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 254
65096: PUSH
65097: LD_INT 3
65099: PLUS
65100: PUSH
65101: LD_INT 6
65103: MOD
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 2
65109: RET
// export function ReverseArray ( array ) ; var i ; begin
65110: LD_INT 0
65112: PPUSH
65113: PPUSH
// if not array then
65114: LD_VAR 0 1
65118: NOT
65119: IFFALSE 65123
// exit ;
65121: GO 65178
// result := [ ] ;
65123: LD_ADDR_VAR 0 2
65127: PUSH
65128: EMPTY
65129: ST_TO_ADDR
// for i := array downto 1 do
65130: LD_ADDR_VAR 0 3
65134: PUSH
65135: DOUBLE
65136: LD_VAR 0 1
65140: INC
65141: ST_TO_ADDR
65142: LD_INT 1
65144: PUSH
65145: FOR_DOWNTO
65146: IFFALSE 65176
// result := Join ( result , array [ i ] ) ;
65148: LD_ADDR_VAR 0 2
65152: PUSH
65153: LD_VAR 0 2
65157: PPUSH
65158: LD_VAR 0 1
65162: PUSH
65163: LD_VAR 0 3
65167: ARRAY
65168: PPUSH
65169: CALL 69823 0 2
65173: ST_TO_ADDR
65174: GO 65145
65176: POP
65177: POP
// end ;
65178: LD_VAR 0 2
65182: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65183: LD_INT 0
65185: PPUSH
65186: PPUSH
65187: PPUSH
65188: PPUSH
65189: PPUSH
65190: PPUSH
// if not unit or not hexes then
65191: LD_VAR 0 1
65195: NOT
65196: PUSH
65197: LD_VAR 0 2
65201: NOT
65202: OR
65203: IFFALSE 65207
// exit ;
65205: GO 65330
// dist := 9999 ;
65207: LD_ADDR_VAR 0 5
65211: PUSH
65212: LD_INT 9999
65214: ST_TO_ADDR
// for i = 1 to hexes do
65215: LD_ADDR_VAR 0 4
65219: PUSH
65220: DOUBLE
65221: LD_INT 1
65223: DEC
65224: ST_TO_ADDR
65225: LD_VAR 0 2
65229: PUSH
65230: FOR_TO
65231: IFFALSE 65318
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65233: LD_ADDR_VAR 0 6
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_VAR 0 2
65247: PUSH
65248: LD_VAR 0 4
65252: ARRAY
65253: PUSH
65254: LD_INT 1
65256: ARRAY
65257: PPUSH
65258: LD_VAR 0 2
65262: PUSH
65263: LD_VAR 0 4
65267: ARRAY
65268: PUSH
65269: LD_INT 2
65271: ARRAY
65272: PPUSH
65273: CALL_OW 297
65277: ST_TO_ADDR
// if tdist < dist then
65278: LD_VAR 0 6
65282: PUSH
65283: LD_VAR 0 5
65287: LESS
65288: IFFALSE 65316
// begin hex := hexes [ i ] ;
65290: LD_ADDR_VAR 0 8
65294: PUSH
65295: LD_VAR 0 2
65299: PUSH
65300: LD_VAR 0 4
65304: ARRAY
65305: ST_TO_ADDR
// dist := tdist ;
65306: LD_ADDR_VAR 0 5
65310: PUSH
65311: LD_VAR 0 6
65315: ST_TO_ADDR
// end ; end ;
65316: GO 65230
65318: POP
65319: POP
// result := hex ;
65320: LD_ADDR_VAR 0 3
65324: PUSH
65325: LD_VAR 0 8
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 3
65334: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65339: LD_VAR 0 1
65343: NOT
65344: PUSH
65345: LD_VAR 0 1
65349: PUSH
65350: LD_INT 21
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 23
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PPUSH
65374: CALL_OW 69
65378: IN
65379: NOT
65380: OR
65381: IFFALSE 65385
// exit ;
65383: GO 65432
// for i = 1 to 3 do
65385: LD_ADDR_VAR 0 3
65389: PUSH
65390: DOUBLE
65391: LD_INT 1
65393: DEC
65394: ST_TO_ADDR
65395: LD_INT 3
65397: PUSH
65398: FOR_TO
65399: IFFALSE 65430
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65401: LD_VAR 0 1
65405: PPUSH
65406: CALL_OW 250
65410: PPUSH
65411: LD_VAR 0 1
65415: PPUSH
65416: CALL_OW 251
65420: PPUSH
65421: LD_INT 1
65423: PPUSH
65424: CALL_OW 453
65428: GO 65398
65430: POP
65431: POP
// end ;
65432: LD_VAR 0 2
65436: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65437: LD_INT 0
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
65444: PPUSH
// if not unit or not enemy_unit then
65445: LD_VAR 0 1
65449: NOT
65450: PUSH
65451: LD_VAR 0 2
65455: NOT
65456: OR
65457: IFFALSE 65461
// exit ;
65459: GO 65928
// if GetLives ( i ) < 250 then
65461: LD_VAR 0 4
65465: PPUSH
65466: CALL_OW 256
65470: PUSH
65471: LD_INT 250
65473: LESS
65474: IFFALSE 65487
// begin ComAutodestruct ( i ) ;
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL 65335 0 1
// exit ;
65485: GO 65928
// end ; x := GetX ( enemy_unit ) ;
65487: LD_ADDR_VAR 0 7
65491: PUSH
65492: LD_VAR 0 2
65496: PPUSH
65497: CALL_OW 250
65501: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65502: LD_ADDR_VAR 0 8
65506: PUSH
65507: LD_VAR 0 2
65511: PPUSH
65512: CALL_OW 251
65516: ST_TO_ADDR
// if not x or not y then
65517: LD_VAR 0 7
65521: NOT
65522: PUSH
65523: LD_VAR 0 8
65527: NOT
65528: OR
65529: IFFALSE 65533
// exit ;
65531: GO 65928
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65533: LD_ADDR_VAR 0 6
65537: PUSH
65538: LD_VAR 0 7
65542: PPUSH
65543: LD_INT 0
65545: PPUSH
65546: LD_INT 4
65548: PPUSH
65549: CALL_OW 272
65553: PUSH
65554: LD_VAR 0 8
65558: PPUSH
65559: LD_INT 0
65561: PPUSH
65562: LD_INT 4
65564: PPUSH
65565: CALL_OW 273
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 7
65578: PPUSH
65579: LD_INT 1
65581: PPUSH
65582: LD_INT 4
65584: PPUSH
65585: CALL_OW 272
65589: PUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: LD_INT 1
65597: PPUSH
65598: LD_INT 4
65600: PPUSH
65601: CALL_OW 273
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_VAR 0 7
65614: PPUSH
65615: LD_INT 2
65617: PPUSH
65618: LD_INT 4
65620: PPUSH
65621: CALL_OW 272
65625: PUSH
65626: LD_VAR 0 8
65630: PPUSH
65631: LD_INT 2
65633: PPUSH
65634: LD_INT 4
65636: PPUSH
65637: CALL_OW 273
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_VAR 0 7
65650: PPUSH
65651: LD_INT 3
65653: PPUSH
65654: LD_INT 4
65656: PPUSH
65657: CALL_OW 272
65661: PUSH
65662: LD_VAR 0 8
65666: PPUSH
65667: LD_INT 3
65669: PPUSH
65670: LD_INT 4
65672: PPUSH
65673: CALL_OW 273
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_VAR 0 7
65686: PPUSH
65687: LD_INT 4
65689: PPUSH
65690: LD_INT 4
65692: PPUSH
65693: CALL_OW 272
65697: PUSH
65698: LD_VAR 0 8
65702: PPUSH
65703: LD_INT 4
65705: PPUSH
65706: LD_INT 4
65708: PPUSH
65709: CALL_OW 273
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_VAR 0 7
65722: PPUSH
65723: LD_INT 5
65725: PPUSH
65726: LD_INT 4
65728: PPUSH
65729: CALL_OW 272
65733: PUSH
65734: LD_VAR 0 8
65738: PPUSH
65739: LD_INT 5
65741: PPUSH
65742: LD_INT 4
65744: PPUSH
65745: CALL_OW 273
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// for i = tmp downto 1 do
65762: LD_ADDR_VAR 0 4
65766: PUSH
65767: DOUBLE
65768: LD_VAR 0 6
65772: INC
65773: ST_TO_ADDR
65774: LD_INT 1
65776: PUSH
65777: FOR_DOWNTO
65778: IFFALSE 65879
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65780: LD_VAR 0 6
65784: PUSH
65785: LD_VAR 0 4
65789: ARRAY
65790: PUSH
65791: LD_INT 1
65793: ARRAY
65794: PPUSH
65795: LD_VAR 0 6
65799: PUSH
65800: LD_VAR 0 4
65804: ARRAY
65805: PUSH
65806: LD_INT 2
65808: ARRAY
65809: PPUSH
65810: CALL_OW 488
65814: NOT
65815: PUSH
65816: LD_VAR 0 6
65820: PUSH
65821: LD_VAR 0 4
65825: ARRAY
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PPUSH
65831: LD_VAR 0 6
65835: PUSH
65836: LD_VAR 0 4
65840: ARRAY
65841: PUSH
65842: LD_INT 2
65844: ARRAY
65845: PPUSH
65846: CALL_OW 428
65850: PUSH
65851: LD_INT 0
65853: NONEQUAL
65854: OR
65855: IFFALSE 65877
// tmp := Delete ( tmp , i ) ;
65857: LD_ADDR_VAR 0 6
65861: PUSH
65862: LD_VAR 0 6
65866: PPUSH
65867: LD_VAR 0 4
65871: PPUSH
65872: CALL_OW 3
65876: ST_TO_ADDR
65877: GO 65777
65879: POP
65880: POP
// j := GetClosestHex ( unit , tmp ) ;
65881: LD_ADDR_VAR 0 5
65885: PUSH
65886: LD_VAR 0 1
65890: PPUSH
65891: LD_VAR 0 6
65895: PPUSH
65896: CALL 65183 0 2
65900: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65901: LD_VAR 0 1
65905: PPUSH
65906: LD_VAR 0 5
65910: PUSH
65911: LD_INT 1
65913: ARRAY
65914: PPUSH
65915: LD_VAR 0 5
65919: PUSH
65920: LD_INT 2
65922: ARRAY
65923: PPUSH
65924: CALL_OW 111
// end ;
65928: LD_VAR 0 3
65932: RET
// export function PrepareApemanSoldier ( ) ; begin
65933: LD_INT 0
65935: PPUSH
// uc_nation := 0 ;
65936: LD_ADDR_OWVAR 21
65940: PUSH
65941: LD_INT 0
65943: ST_TO_ADDR
// hc_sex := sex_male ;
65944: LD_ADDR_OWVAR 27
65948: PUSH
65949: LD_INT 1
65951: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65952: LD_ADDR_OWVAR 28
65956: PUSH
65957: LD_INT 15
65959: ST_TO_ADDR
// hc_gallery :=  ;
65960: LD_ADDR_OWVAR 33
65964: PUSH
65965: LD_STRING 
65967: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65968: LD_ADDR_OWVAR 31
65972: PUSH
65973: LD_INT 0
65975: PPUSH
65976: LD_INT 3
65978: PPUSH
65979: CALL_OW 12
65983: PUSH
65984: LD_INT 0
65986: PPUSH
65987: LD_INT 3
65989: PPUSH
65990: CALL_OW 12
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: ST_TO_ADDR
// end ;
66007: LD_VAR 0 1
66011: RET
// export function PrepareApemanEngineer ( ) ; begin
66012: LD_INT 0
66014: PPUSH
// uc_nation := 0 ;
66015: LD_ADDR_OWVAR 21
66019: PUSH
66020: LD_INT 0
66022: ST_TO_ADDR
// hc_sex := sex_male ;
66023: LD_ADDR_OWVAR 27
66027: PUSH
66028: LD_INT 1
66030: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66031: LD_ADDR_OWVAR 28
66035: PUSH
66036: LD_INT 16
66038: ST_TO_ADDR
// hc_gallery :=  ;
66039: LD_ADDR_OWVAR 33
66043: PUSH
66044: LD_STRING 
66046: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66047: LD_ADDR_OWVAR 31
66051: PUSH
66052: LD_INT 0
66054: PPUSH
66055: LD_INT 3
66057: PPUSH
66058: CALL_OW 12
66062: PUSH
66063: LD_INT 0
66065: PPUSH
66066: LD_INT 3
66068: PPUSH
66069: CALL_OW 12
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// end ;
66086: LD_VAR 0 1
66090: RET
// export function PrepareApeman ( agressivity ) ; begin
66091: LD_INT 0
66093: PPUSH
// uc_side := 0 ;
66094: LD_ADDR_OWVAR 20
66098: PUSH
66099: LD_INT 0
66101: ST_TO_ADDR
// uc_nation := 0 ;
66102: LD_ADDR_OWVAR 21
66106: PUSH
66107: LD_INT 0
66109: ST_TO_ADDR
// hc_sex := sex_male ;
66110: LD_ADDR_OWVAR 27
66114: PUSH
66115: LD_INT 1
66117: ST_TO_ADDR
// hc_class := class_apeman ;
66118: LD_ADDR_OWVAR 28
66122: PUSH
66123: LD_INT 12
66125: ST_TO_ADDR
// hc_gallery :=  ;
66126: LD_ADDR_OWVAR 33
66130: PUSH
66131: LD_STRING 
66133: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66134: LD_ADDR_OWVAR 35
66138: PUSH
66139: LD_VAR 0 1
66143: NEG
66144: PPUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: CALL_OW 12
66154: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66155: LD_ADDR_OWVAR 31
66159: PUSH
66160: LD_INT 0
66162: PPUSH
66163: LD_INT 3
66165: PPUSH
66166: CALL_OW 12
66170: PUSH
66171: LD_INT 0
66173: PPUSH
66174: LD_INT 3
66176: PPUSH
66177: CALL_OW 12
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: ST_TO_ADDR
// end ;
66194: LD_VAR 0 2
66198: RET
// export function PrepareTiger ( agressivity ) ; begin
66199: LD_INT 0
66201: PPUSH
// uc_side := 0 ;
66202: LD_ADDR_OWVAR 20
66206: PUSH
66207: LD_INT 0
66209: ST_TO_ADDR
// uc_nation := 0 ;
66210: LD_ADDR_OWVAR 21
66214: PUSH
66215: LD_INT 0
66217: ST_TO_ADDR
// hc_class := class_tiger ;
66218: LD_ADDR_OWVAR 28
66222: PUSH
66223: LD_INT 14
66225: ST_TO_ADDR
// hc_gallery :=  ;
66226: LD_ADDR_OWVAR 33
66230: PUSH
66231: LD_STRING 
66233: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66234: LD_ADDR_OWVAR 35
66238: PUSH
66239: LD_VAR 0 1
66243: NEG
66244: PPUSH
66245: LD_VAR 0 1
66249: PPUSH
66250: CALL_OW 12
66254: ST_TO_ADDR
// end ;
66255: LD_VAR 0 2
66259: RET
// export function PrepareEnchidna ( ) ; begin
66260: LD_INT 0
66262: PPUSH
// uc_side := 0 ;
66263: LD_ADDR_OWVAR 20
66267: PUSH
66268: LD_INT 0
66270: ST_TO_ADDR
// uc_nation := 0 ;
66271: LD_ADDR_OWVAR 21
66275: PUSH
66276: LD_INT 0
66278: ST_TO_ADDR
// hc_class := class_baggie ;
66279: LD_ADDR_OWVAR 28
66283: PUSH
66284: LD_INT 13
66286: ST_TO_ADDR
// hc_gallery :=  ;
66287: LD_ADDR_OWVAR 33
66291: PUSH
66292: LD_STRING 
66294: ST_TO_ADDR
// end ;
66295: LD_VAR 0 1
66299: RET
// export function PrepareFrog ( ) ; begin
66300: LD_INT 0
66302: PPUSH
// uc_side := 0 ;
66303: LD_ADDR_OWVAR 20
66307: PUSH
66308: LD_INT 0
66310: ST_TO_ADDR
// uc_nation := 0 ;
66311: LD_ADDR_OWVAR 21
66315: PUSH
66316: LD_INT 0
66318: ST_TO_ADDR
// hc_class := class_frog ;
66319: LD_ADDR_OWVAR 28
66323: PUSH
66324: LD_INT 19
66326: ST_TO_ADDR
// hc_gallery :=  ;
66327: LD_ADDR_OWVAR 33
66331: PUSH
66332: LD_STRING 
66334: ST_TO_ADDR
// end ;
66335: LD_VAR 0 1
66339: RET
// export function PrepareFish ( ) ; begin
66340: LD_INT 0
66342: PPUSH
// uc_side := 0 ;
66343: LD_ADDR_OWVAR 20
66347: PUSH
66348: LD_INT 0
66350: ST_TO_ADDR
// uc_nation := 0 ;
66351: LD_ADDR_OWVAR 21
66355: PUSH
66356: LD_INT 0
66358: ST_TO_ADDR
// hc_class := class_fish ;
66359: LD_ADDR_OWVAR 28
66363: PUSH
66364: LD_INT 20
66366: ST_TO_ADDR
// hc_gallery :=  ;
66367: LD_ADDR_OWVAR 33
66371: PUSH
66372: LD_STRING 
66374: ST_TO_ADDR
// end ;
66375: LD_VAR 0 1
66379: RET
// export function PrepareBird ( ) ; begin
66380: LD_INT 0
66382: PPUSH
// uc_side := 0 ;
66383: LD_ADDR_OWVAR 20
66387: PUSH
66388: LD_INT 0
66390: ST_TO_ADDR
// uc_nation := 0 ;
66391: LD_ADDR_OWVAR 21
66395: PUSH
66396: LD_INT 0
66398: ST_TO_ADDR
// hc_class := class_phororhacos ;
66399: LD_ADDR_OWVAR 28
66403: PUSH
66404: LD_INT 18
66406: ST_TO_ADDR
// hc_gallery :=  ;
66407: LD_ADDR_OWVAR 33
66411: PUSH
66412: LD_STRING 
66414: ST_TO_ADDR
// end ;
66415: LD_VAR 0 1
66419: RET
// export function PrepareHorse ( ) ; begin
66420: LD_INT 0
66422: PPUSH
// uc_side := 0 ;
66423: LD_ADDR_OWVAR 20
66427: PUSH
66428: LD_INT 0
66430: ST_TO_ADDR
// uc_nation := 0 ;
66431: LD_ADDR_OWVAR 21
66435: PUSH
66436: LD_INT 0
66438: ST_TO_ADDR
// hc_class := class_horse ;
66439: LD_ADDR_OWVAR 28
66443: PUSH
66444: LD_INT 21
66446: ST_TO_ADDR
// hc_gallery :=  ;
66447: LD_ADDR_OWVAR 33
66451: PUSH
66452: LD_STRING 
66454: ST_TO_ADDR
// end ;
66455: LD_VAR 0 1
66459: RET
// export function PrepareMastodont ( ) ; begin
66460: LD_INT 0
66462: PPUSH
// uc_side := 0 ;
66463: LD_ADDR_OWVAR 20
66467: PUSH
66468: LD_INT 0
66470: ST_TO_ADDR
// uc_nation := 0 ;
66471: LD_ADDR_OWVAR 21
66475: PUSH
66476: LD_INT 0
66478: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66479: LD_ADDR_OWVAR 37
66483: PUSH
66484: LD_INT 31
66486: ST_TO_ADDR
// vc_control := control_rider ;
66487: LD_ADDR_OWVAR 38
66491: PUSH
66492: LD_INT 4
66494: ST_TO_ADDR
// end ;
66495: LD_VAR 0 1
66499: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66500: LD_INT 0
66502: PPUSH
66503: PPUSH
66504: PPUSH
// uc_side = 0 ;
66505: LD_ADDR_OWVAR 20
66509: PUSH
66510: LD_INT 0
66512: ST_TO_ADDR
// uc_nation = 0 ;
66513: LD_ADDR_OWVAR 21
66517: PUSH
66518: LD_INT 0
66520: ST_TO_ADDR
// InitHc_All ( ) ;
66521: CALL_OW 584
// InitVc ;
66525: CALL_OW 20
// if mastodonts then
66529: LD_VAR 0 6
66533: IFFALSE 66600
// for i = 1 to mastodonts do
66535: LD_ADDR_VAR 0 11
66539: PUSH
66540: DOUBLE
66541: LD_INT 1
66543: DEC
66544: ST_TO_ADDR
66545: LD_VAR 0 6
66549: PUSH
66550: FOR_TO
66551: IFFALSE 66598
// begin vc_chassis := 31 ;
66553: LD_ADDR_OWVAR 37
66557: PUSH
66558: LD_INT 31
66560: ST_TO_ADDR
// vc_control := control_rider ;
66561: LD_ADDR_OWVAR 38
66565: PUSH
66566: LD_INT 4
66568: ST_TO_ADDR
// animal := CreateVehicle ;
66569: LD_ADDR_VAR 0 12
66573: PUSH
66574: CALL_OW 45
66578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66579: LD_VAR 0 12
66583: PPUSH
66584: LD_VAR 0 8
66588: PPUSH
66589: LD_INT 0
66591: PPUSH
66592: CALL 68728 0 3
// end ;
66596: GO 66550
66598: POP
66599: POP
// if horses then
66600: LD_VAR 0 5
66604: IFFALSE 66671
// for i = 1 to horses do
66606: LD_ADDR_VAR 0 11
66610: PUSH
66611: DOUBLE
66612: LD_INT 1
66614: DEC
66615: ST_TO_ADDR
66616: LD_VAR 0 5
66620: PUSH
66621: FOR_TO
66622: IFFALSE 66669
// begin hc_class := 21 ;
66624: LD_ADDR_OWVAR 28
66628: PUSH
66629: LD_INT 21
66631: ST_TO_ADDR
// hc_gallery :=  ;
66632: LD_ADDR_OWVAR 33
66636: PUSH
66637: LD_STRING 
66639: ST_TO_ADDR
// animal := CreateHuman ;
66640: LD_ADDR_VAR 0 12
66644: PUSH
66645: CALL_OW 44
66649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66650: LD_VAR 0 12
66654: PPUSH
66655: LD_VAR 0 8
66659: PPUSH
66660: LD_INT 0
66662: PPUSH
66663: CALL 68728 0 3
// end ;
66667: GO 66621
66669: POP
66670: POP
// if birds then
66671: LD_VAR 0 1
66675: IFFALSE 66742
// for i = 1 to birds do
66677: LD_ADDR_VAR 0 11
66681: PUSH
66682: DOUBLE
66683: LD_INT 1
66685: DEC
66686: ST_TO_ADDR
66687: LD_VAR 0 1
66691: PUSH
66692: FOR_TO
66693: IFFALSE 66740
// begin hc_class := 18 ;
66695: LD_ADDR_OWVAR 28
66699: PUSH
66700: LD_INT 18
66702: ST_TO_ADDR
// hc_gallery =  ;
66703: LD_ADDR_OWVAR 33
66707: PUSH
66708: LD_STRING 
66710: ST_TO_ADDR
// animal := CreateHuman ;
66711: LD_ADDR_VAR 0 12
66715: PUSH
66716: CALL_OW 44
66720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66721: LD_VAR 0 12
66725: PPUSH
66726: LD_VAR 0 8
66730: PPUSH
66731: LD_INT 0
66733: PPUSH
66734: CALL 68728 0 3
// end ;
66738: GO 66692
66740: POP
66741: POP
// if tigers then
66742: LD_VAR 0 2
66746: IFFALSE 66830
// for i = 1 to tigers do
66748: LD_ADDR_VAR 0 11
66752: PUSH
66753: DOUBLE
66754: LD_INT 1
66756: DEC
66757: ST_TO_ADDR
66758: LD_VAR 0 2
66762: PUSH
66763: FOR_TO
66764: IFFALSE 66828
// begin hc_class = class_tiger ;
66766: LD_ADDR_OWVAR 28
66770: PUSH
66771: LD_INT 14
66773: ST_TO_ADDR
// hc_gallery =  ;
66774: LD_ADDR_OWVAR 33
66778: PUSH
66779: LD_STRING 
66781: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66782: LD_ADDR_OWVAR 35
66786: PUSH
66787: LD_INT 7
66789: NEG
66790: PPUSH
66791: LD_INT 7
66793: PPUSH
66794: CALL_OW 12
66798: ST_TO_ADDR
// animal := CreateHuman ;
66799: LD_ADDR_VAR 0 12
66803: PUSH
66804: CALL_OW 44
66808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66809: LD_VAR 0 12
66813: PPUSH
66814: LD_VAR 0 8
66818: PPUSH
66819: LD_INT 0
66821: PPUSH
66822: CALL 68728 0 3
// end ;
66826: GO 66763
66828: POP
66829: POP
// if apemans then
66830: LD_VAR 0 3
66834: IFFALSE 66957
// for i = 1 to apemans do
66836: LD_ADDR_VAR 0 11
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_VAR 0 3
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66955
// begin hc_class = class_apeman ;
66854: LD_ADDR_OWVAR 28
66858: PUSH
66859: LD_INT 12
66861: ST_TO_ADDR
// hc_gallery =  ;
66862: LD_ADDR_OWVAR 33
66866: PUSH
66867: LD_STRING 
66869: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66870: LD_ADDR_OWVAR 35
66874: PUSH
66875: LD_INT 2
66877: NEG
66878: PPUSH
66879: LD_INT 2
66881: PPUSH
66882: CALL_OW 12
66886: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66887: LD_ADDR_OWVAR 31
66891: PUSH
66892: LD_INT 1
66894: PPUSH
66895: LD_INT 3
66897: PPUSH
66898: CALL_OW 12
66902: PUSH
66903: LD_INT 1
66905: PPUSH
66906: LD_INT 3
66908: PPUSH
66909: CALL_OW 12
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// animal := CreateHuman ;
66926: LD_ADDR_VAR 0 12
66930: PUSH
66931: CALL_OW 44
66935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66936: LD_VAR 0 12
66940: PPUSH
66941: LD_VAR 0 8
66945: PPUSH
66946: LD_INT 0
66948: PPUSH
66949: CALL 68728 0 3
// end ;
66953: GO 66851
66955: POP
66956: POP
// if enchidnas then
66957: LD_VAR 0 4
66961: IFFALSE 67028
// for i = 1 to enchidnas do
66963: LD_ADDR_VAR 0 11
66967: PUSH
66968: DOUBLE
66969: LD_INT 1
66971: DEC
66972: ST_TO_ADDR
66973: LD_VAR 0 4
66977: PUSH
66978: FOR_TO
66979: IFFALSE 67026
// begin hc_class = 13 ;
66981: LD_ADDR_OWVAR 28
66985: PUSH
66986: LD_INT 13
66988: ST_TO_ADDR
// hc_gallery =  ;
66989: LD_ADDR_OWVAR 33
66993: PUSH
66994: LD_STRING 
66996: ST_TO_ADDR
// animal := CreateHuman ;
66997: LD_ADDR_VAR 0 12
67001: PUSH
67002: CALL_OW 44
67006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67007: LD_VAR 0 12
67011: PPUSH
67012: LD_VAR 0 8
67016: PPUSH
67017: LD_INT 0
67019: PPUSH
67020: CALL 68728 0 3
// end ;
67024: GO 66978
67026: POP
67027: POP
// if fishes then
67028: LD_VAR 0 7
67032: IFFALSE 67099
// for i = 1 to fishes do
67034: LD_ADDR_VAR 0 11
67038: PUSH
67039: DOUBLE
67040: LD_INT 1
67042: DEC
67043: ST_TO_ADDR
67044: LD_VAR 0 7
67048: PUSH
67049: FOR_TO
67050: IFFALSE 67097
// begin hc_class = 20 ;
67052: LD_ADDR_OWVAR 28
67056: PUSH
67057: LD_INT 20
67059: ST_TO_ADDR
// hc_gallery =  ;
67060: LD_ADDR_OWVAR 33
67064: PUSH
67065: LD_STRING 
67067: ST_TO_ADDR
// animal := CreateHuman ;
67068: LD_ADDR_VAR 0 12
67072: PUSH
67073: CALL_OW 44
67077: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67078: LD_VAR 0 12
67082: PPUSH
67083: LD_VAR 0 9
67087: PPUSH
67088: LD_INT 0
67090: PPUSH
67091: CALL 68728 0 3
// end ;
67095: GO 67049
67097: POP
67098: POP
// end ;
67099: LD_VAR 0 10
67103: RET
// export function WantHeal ( sci , unit ) ; begin
67104: LD_INT 0
67106: PPUSH
// if GetTaskList ( sci ) > 0 then
67107: LD_VAR 0 1
67111: PPUSH
67112: CALL_OW 437
67116: PUSH
67117: LD_INT 0
67119: GREATER
67120: IFFALSE 67190
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67122: LD_VAR 0 1
67126: PPUSH
67127: CALL_OW 437
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: PUSH
67140: LD_STRING l
67142: EQUAL
67143: PUSH
67144: LD_VAR 0 1
67148: PPUSH
67149: CALL_OW 437
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: PUSH
67158: LD_INT 4
67160: ARRAY
67161: PUSH
67162: LD_VAR 0 2
67166: EQUAL
67167: AND
67168: IFFALSE 67180
// result := true else
67170: LD_ADDR_VAR 0 3
67174: PUSH
67175: LD_INT 1
67177: ST_TO_ADDR
67178: GO 67188
// result := false ;
67180: LD_ADDR_VAR 0 3
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// end else
67188: GO 67198
// result := false ;
67190: LD_ADDR_VAR 0 3
67194: PUSH
67195: LD_INT 0
67197: ST_TO_ADDR
// end ;
67198: LD_VAR 0 3
67202: RET
// export function HealTarget ( sci ) ; begin
67203: LD_INT 0
67205: PPUSH
// if not sci then
67206: LD_VAR 0 1
67210: NOT
67211: IFFALSE 67215
// exit ;
67213: GO 67280
// result := 0 ;
67215: LD_ADDR_VAR 0 2
67219: PUSH
67220: LD_INT 0
67222: ST_TO_ADDR
// if GetTaskList ( sci ) then
67223: LD_VAR 0 1
67227: PPUSH
67228: CALL_OW 437
67232: IFFALSE 67280
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 437
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PUSH
67252: LD_STRING l
67254: EQUAL
67255: IFFALSE 67280
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67257: LD_ADDR_VAR 0 2
67261: PUSH
67262: LD_VAR 0 1
67266: PPUSH
67267: CALL_OW 437
67271: PUSH
67272: LD_INT 1
67274: ARRAY
67275: PUSH
67276: LD_INT 4
67278: ARRAY
67279: ST_TO_ADDR
// end ;
67280: LD_VAR 0 2
67284: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67285: LD_INT 0
67287: PPUSH
67288: PPUSH
67289: PPUSH
67290: PPUSH
// if not base_units then
67291: LD_VAR 0 1
67295: NOT
67296: IFFALSE 67300
// exit ;
67298: GO 67387
// result := false ;
67300: LD_ADDR_VAR 0 2
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67308: LD_ADDR_VAR 0 5
67312: PUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: LD_INT 21
67320: PUSH
67321: LD_INT 3
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PPUSH
67328: CALL_OW 72
67332: ST_TO_ADDR
// if not tmp then
67333: LD_VAR 0 5
67337: NOT
67338: IFFALSE 67342
// exit ;
67340: GO 67387
// for i in tmp do
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_VAR 0 5
67351: PUSH
67352: FOR_IN
67353: IFFALSE 67385
// begin result := EnemyInRange ( i , 22 ) ;
67355: LD_ADDR_VAR 0 2
67359: PUSH
67360: LD_VAR 0 3
67364: PPUSH
67365: LD_INT 22
67367: PPUSH
67368: CALL 64985 0 2
67372: ST_TO_ADDR
// if result then
67373: LD_VAR 0 2
67377: IFFALSE 67383
// exit ;
67379: POP
67380: POP
67381: GO 67387
// end ;
67383: GO 67352
67385: POP
67386: POP
// end ;
67387: LD_VAR 0 2
67391: RET
// export function FilterByTag ( units , tag ) ; begin
67392: LD_INT 0
67394: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67395: LD_ADDR_VAR 0 3
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: LD_INT 120
67407: PUSH
67408: LD_VAR 0 2
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PPUSH
67417: CALL_OW 72
67421: ST_TO_ADDR
// end ;
67422: LD_VAR 0 3
67426: RET
// export function IsDriver ( un ) ; begin
67427: LD_INT 0
67429: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67430: LD_ADDR_VAR 0 2
67434: PUSH
67435: LD_VAR 0 1
67439: PUSH
67440: LD_INT 55
67442: PUSH
67443: EMPTY
67444: LIST
67445: PPUSH
67446: CALL_OW 69
67450: IN
67451: ST_TO_ADDR
// end ;
67452: LD_VAR 0 2
67456: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67457: LD_INT 0
67459: PPUSH
67460: PPUSH
// list := [ ] ;
67461: LD_ADDR_VAR 0 5
67465: PUSH
67466: EMPTY
67467: ST_TO_ADDR
// case d of 0 :
67468: LD_VAR 0 3
67472: PUSH
67473: LD_INT 0
67475: DOUBLE
67476: EQUAL
67477: IFTRUE 67481
67479: GO 67614
67481: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67482: LD_ADDR_VAR 0 5
67486: PUSH
67487: LD_VAR 0 1
67491: PUSH
67492: LD_INT 4
67494: MINUS
67495: PUSH
67496: LD_VAR 0 2
67500: PUSH
67501: LD_INT 4
67503: MINUS
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: PUSH
67513: LD_VAR 0 1
67517: PUSH
67518: LD_INT 3
67520: MINUS
67521: PUSH
67522: LD_VAR 0 2
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: PUSH
67535: LD_VAR 0 1
67539: PUSH
67540: LD_INT 4
67542: PLUS
67543: PUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: PUSH
67557: LD_VAR 0 1
67561: PUSH
67562: LD_INT 3
67564: PLUS
67565: PUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 3
67573: PLUS
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: PUSH
67583: LD_VAR 0 1
67587: PUSH
67588: LD_VAR 0 2
67592: PUSH
67593: LD_INT 4
67595: PLUS
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: ST_TO_ADDR
// end ; 1 :
67612: GO 68312
67614: LD_INT 1
67616: DOUBLE
67617: EQUAL
67618: IFTRUE 67622
67620: GO 67755
67622: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67623: LD_ADDR_VAR 0 5
67627: PUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_VAR 0 2
67637: PUSH
67638: LD_INT 4
67640: MINUS
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: PUSH
67650: LD_VAR 0 1
67654: PUSH
67655: LD_INT 3
67657: MINUS
67658: PUSH
67659: LD_VAR 0 2
67663: PUSH
67664: LD_INT 3
67666: MINUS
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_INT 4
67683: MINUS
67684: PUSH
67685: LD_VAR 0 2
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: LD_VAR 0 1
67702: PUSH
67703: LD_VAR 0 2
67707: PUSH
67708: LD_INT 3
67710: PLUS
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: PUSH
67720: LD_VAR 0 1
67724: PUSH
67725: LD_INT 4
67727: PLUS
67728: PUSH
67729: LD_VAR 0 2
67733: PUSH
67734: LD_INT 4
67736: PLUS
67737: PUSH
67738: LD_INT 5
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// end ; 2 :
67753: GO 68312
67755: LD_INT 2
67757: DOUBLE
67758: EQUAL
67759: IFTRUE 67763
67761: GO 67892
67763: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67764: LD_ADDR_VAR 0 5
67768: PUSH
67769: LD_VAR 0 1
67773: PUSH
67774: LD_VAR 0 2
67778: PUSH
67779: LD_INT 3
67781: MINUS
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: LD_INT 4
67798: PLUS
67799: PUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 4
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: PUSH
67813: LD_VAR 0 1
67817: PUSH
67818: LD_VAR 0 2
67822: PUSH
67823: LD_INT 4
67825: PLUS
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_INT 3
67842: MINUS
67843: PUSH
67844: LD_VAR 0 2
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: PUSH
67857: LD_VAR 0 1
67861: PUSH
67862: LD_INT 4
67864: MINUS
67865: PUSH
67866: LD_VAR 0 2
67870: PUSH
67871: LD_INT 4
67873: MINUS
67874: PUSH
67875: LD_INT 2
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: LIST
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// end ; 3 :
67890: GO 68312
67892: LD_INT 3
67894: DOUBLE
67895: EQUAL
67896: IFTRUE 67900
67898: GO 68033
67900: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67901: LD_ADDR_VAR 0 5
67905: PUSH
67906: LD_VAR 0 1
67910: PUSH
67911: LD_INT 3
67913: PLUS
67914: PUSH
67915: LD_VAR 0 2
67919: PUSH
67920: LD_INT 4
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: PUSH
67928: LD_VAR 0 1
67932: PUSH
67933: LD_INT 4
67935: PLUS
67936: PUSH
67937: LD_VAR 0 2
67941: PUSH
67942: LD_INT 4
67944: PLUS
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: LIST
67953: PUSH
67954: LD_VAR 0 1
67958: PUSH
67959: LD_INT 4
67961: MINUS
67962: PUSH
67963: LD_VAR 0 2
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: LIST
67975: PUSH
67976: LD_VAR 0 1
67980: PUSH
67981: LD_VAR 0 2
67985: PUSH
67986: LD_INT 4
67988: MINUS
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: PUSH
67998: LD_VAR 0 1
68002: PUSH
68003: LD_INT 3
68005: MINUS
68006: PUSH
68007: LD_VAR 0 2
68011: PUSH
68012: LD_INT 3
68014: MINUS
68015: PUSH
68016: LD_INT 2
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: ST_TO_ADDR
// end ; 4 :
68031: GO 68312
68033: LD_INT 4
68035: DOUBLE
68036: EQUAL
68037: IFTRUE 68041
68039: GO 68174
68041: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68042: LD_ADDR_VAR 0 5
68046: PUSH
68047: LD_VAR 0 1
68051: PUSH
68052: LD_VAR 0 2
68056: PUSH
68057: LD_INT 4
68059: PLUS
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: LIST
68068: PUSH
68069: LD_VAR 0 1
68073: PUSH
68074: LD_INT 3
68076: PLUS
68077: PUSH
68078: LD_VAR 0 2
68082: PUSH
68083: LD_INT 3
68085: PLUS
68086: PUSH
68087: LD_INT 5
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: PUSH
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 4
68102: PLUS
68103: PUSH
68104: LD_VAR 0 2
68108: PUSH
68109: LD_INT 4
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: PUSH
68117: LD_VAR 0 1
68121: PUSH
68122: LD_VAR 0 2
68126: PUSH
68127: LD_INT 3
68129: MINUS
68130: PUSH
68131: LD_INT 3
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: PUSH
68139: LD_VAR 0 1
68143: PUSH
68144: LD_INT 4
68146: MINUS
68147: PUSH
68148: LD_VAR 0 2
68152: PUSH
68153: LD_INT 4
68155: MINUS
68156: PUSH
68157: LD_INT 2
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// end ; 5 :
68172: GO 68312
68174: LD_INT 5
68176: DOUBLE
68177: EQUAL
68178: IFTRUE 68182
68180: GO 68311
68182: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68183: LD_ADDR_VAR 0 5
68187: PUSH
68188: LD_VAR 0 1
68192: PUSH
68193: LD_INT 4
68195: MINUS
68196: PUSH
68197: LD_VAR 0 2
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: LIST
68209: PUSH
68210: LD_VAR 0 1
68214: PUSH
68215: LD_VAR 0 2
68219: PUSH
68220: LD_INT 4
68222: MINUS
68223: PUSH
68224: LD_INT 3
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: PUSH
68232: LD_VAR 0 1
68236: PUSH
68237: LD_INT 4
68239: PLUS
68240: PUSH
68241: LD_VAR 0 2
68245: PUSH
68246: LD_INT 4
68248: PLUS
68249: PUSH
68250: LD_INT 5
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: LIST
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 3
68265: PLUS
68266: PUSH
68267: LD_VAR 0 2
68271: PUSH
68272: LD_INT 4
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: PUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_VAR 0 2
68289: PUSH
68290: LD_INT 3
68292: PLUS
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: LIST
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: ST_TO_ADDR
// end ; end ;
68309: GO 68312
68311: POP
// result := list ;
68312: LD_ADDR_VAR 0 4
68316: PUSH
68317: LD_VAR 0 5
68321: ST_TO_ADDR
// end ;
68322: LD_VAR 0 4
68326: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68327: LD_INT 0
68329: PPUSH
68330: PPUSH
68331: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68332: LD_VAR 0 1
68336: NOT
68337: PUSH
68338: LD_VAR 0 2
68342: PUSH
68343: LD_INT 1
68345: PUSH
68346: LD_INT 2
68348: PUSH
68349: LD_INT 3
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: IN
68361: NOT
68362: OR
68363: IFFALSE 68367
// exit ;
68365: GO 68450
// tmp := [ ] ;
68367: LD_ADDR_VAR 0 5
68371: PUSH
68372: EMPTY
68373: ST_TO_ADDR
// for i in units do
68374: LD_ADDR_VAR 0 4
68378: PUSH
68379: LD_VAR 0 1
68383: PUSH
68384: FOR_IN
68385: IFFALSE 68419
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68387: LD_ADDR_VAR 0 5
68391: PUSH
68392: LD_VAR 0 5
68396: PPUSH
68397: LD_VAR 0 4
68401: PPUSH
68402: LD_VAR 0 2
68406: PPUSH
68407: CALL_OW 259
68411: PPUSH
68412: CALL 69823 0 2
68416: ST_TO_ADDR
68417: GO 68384
68419: POP
68420: POP
// if not tmp then
68421: LD_VAR 0 5
68425: NOT
68426: IFFALSE 68430
// exit ;
68428: GO 68450
// result := SortListByListDesc ( units , tmp ) ;
68430: LD_ADDR_VAR 0 3
68434: PUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 5
68444: PPUSH
68445: CALL_OW 77
68449: ST_TO_ADDR
// end ;
68450: LD_VAR 0 3
68454: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68455: LD_INT 0
68457: PPUSH
68458: PPUSH
68459: PPUSH
// result := false ;
68460: LD_ADDR_VAR 0 3
68464: PUSH
68465: LD_INT 0
68467: ST_TO_ADDR
// if not building then
68468: LD_VAR 0 2
68472: NOT
68473: IFFALSE 68477
// exit ;
68475: GO 68615
// x := GetX ( building ) ;
68477: LD_ADDR_VAR 0 4
68481: PUSH
68482: LD_VAR 0 2
68486: PPUSH
68487: CALL_OW 250
68491: ST_TO_ADDR
// y := GetY ( building ) ;
68492: LD_ADDR_VAR 0 5
68496: PUSH
68497: LD_VAR 0 2
68501: PPUSH
68502: CALL_OW 251
68506: ST_TO_ADDR
// if not x or not y then
68507: LD_VAR 0 4
68511: NOT
68512: PUSH
68513: LD_VAR 0 5
68517: NOT
68518: OR
68519: IFFALSE 68523
// exit ;
68521: GO 68615
// if GetTaskList ( unit ) then
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 437
68532: IFFALSE 68615
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68534: LD_STRING e
68536: PUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 437
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: EQUAL
68555: PUSH
68556: LD_VAR 0 4
68560: PUSH
68561: LD_VAR 0 1
68565: PPUSH
68566: CALL_OW 437
68570: PUSH
68571: LD_INT 1
68573: ARRAY
68574: PUSH
68575: LD_INT 2
68577: ARRAY
68578: EQUAL
68579: AND
68580: PUSH
68581: LD_VAR 0 5
68585: PUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: CALL_OW 437
68595: PUSH
68596: LD_INT 1
68598: ARRAY
68599: PUSH
68600: LD_INT 3
68602: ARRAY
68603: EQUAL
68604: AND
68605: IFFALSE 68615
// result := true end ;
68607: LD_ADDR_VAR 0 3
68611: PUSH
68612: LD_INT 1
68614: ST_TO_ADDR
// end ;
68615: LD_VAR 0 3
68619: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68620: LD_INT 0
68622: PPUSH
// result := false ;
68623: LD_ADDR_VAR 0 4
68627: PUSH
68628: LD_INT 0
68630: ST_TO_ADDR
// if GetTaskList ( unit ) then
68631: LD_VAR 0 1
68635: PPUSH
68636: CALL_OW 437
68640: IFFALSE 68723
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68642: LD_STRING M
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 437
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PUSH
68659: LD_INT 1
68661: ARRAY
68662: EQUAL
68663: PUSH
68664: LD_VAR 0 2
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 437
68678: PUSH
68679: LD_INT 1
68681: ARRAY
68682: PUSH
68683: LD_INT 2
68685: ARRAY
68686: EQUAL
68687: AND
68688: PUSH
68689: LD_VAR 0 3
68693: PUSH
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL_OW 437
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PUSH
68708: LD_INT 3
68710: ARRAY
68711: EQUAL
68712: AND
68713: IFFALSE 68723
// result := true ;
68715: LD_ADDR_VAR 0 4
68719: PUSH
68720: LD_INT 1
68722: ST_TO_ADDR
// end ; end ;
68723: LD_VAR 0 4
68727: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68728: LD_INT 0
68730: PPUSH
68731: PPUSH
68732: PPUSH
68733: PPUSH
// if not unit or not area then
68734: LD_VAR 0 1
68738: NOT
68739: PUSH
68740: LD_VAR 0 2
68744: NOT
68745: OR
68746: IFFALSE 68750
// exit ;
68748: GO 68926
// tmp := AreaToList ( area , i ) ;
68750: LD_ADDR_VAR 0 6
68754: PUSH
68755: LD_VAR 0 2
68759: PPUSH
68760: LD_VAR 0 5
68764: PPUSH
68765: CALL_OW 517
68769: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68770: LD_ADDR_VAR 0 5
68774: PUSH
68775: DOUBLE
68776: LD_INT 1
68778: DEC
68779: ST_TO_ADDR
68780: LD_VAR 0 6
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: PUSH
68789: FOR_TO
68790: IFFALSE 68924
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68792: LD_ADDR_VAR 0 7
68796: PUSH
68797: LD_VAR 0 6
68801: PUSH
68802: LD_INT 1
68804: ARRAY
68805: PUSH
68806: LD_VAR 0 5
68810: ARRAY
68811: PUSH
68812: LD_VAR 0 6
68816: PUSH
68817: LD_INT 2
68819: ARRAY
68820: PUSH
68821: LD_VAR 0 5
68825: ARRAY
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68831: LD_INT 92
68833: PUSH
68834: LD_VAR 0 7
68838: PUSH
68839: LD_INT 1
68841: ARRAY
68842: PUSH
68843: LD_VAR 0 7
68847: PUSH
68848: LD_INT 2
68850: ARRAY
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: PPUSH
68861: CALL_OW 69
68865: PUSH
68866: LD_INT 0
68868: EQUAL
68869: IFFALSE 68922
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68871: LD_VAR 0 1
68875: PPUSH
68876: LD_VAR 0 7
68880: PUSH
68881: LD_INT 1
68883: ARRAY
68884: PPUSH
68885: LD_VAR 0 7
68889: PUSH
68890: LD_INT 2
68892: ARRAY
68893: PPUSH
68894: LD_VAR 0 3
68898: PPUSH
68899: CALL_OW 48
// result := IsPlaced ( unit ) ;
68903: LD_ADDR_VAR 0 4
68907: PUSH
68908: LD_VAR 0 1
68912: PPUSH
68913: CALL_OW 305
68917: ST_TO_ADDR
// exit ;
68918: POP
68919: POP
68920: GO 68926
// end ; end ;
68922: GO 68789
68924: POP
68925: POP
// end ;
68926: LD_VAR 0 4
68930: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
// if not side or side > 8 then
68936: LD_VAR 0 1
68940: NOT
68941: PUSH
68942: LD_VAR 0 1
68946: PUSH
68947: LD_INT 8
68949: GREATER
68950: OR
68951: IFFALSE 68955
// exit ;
68953: GO 69142
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68955: LD_ADDR_VAR 0 4
68959: PUSH
68960: LD_INT 22
68962: PUSH
68963: LD_VAR 0 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 21
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PPUSH
68986: CALL_OW 69
68990: ST_TO_ADDR
// if not tmp then
68991: LD_VAR 0 4
68995: NOT
68996: IFFALSE 69000
// exit ;
68998: GO 69142
// enable_addtolog := true ;
69000: LD_ADDR_OWVAR 81
69004: PUSH
69005: LD_INT 1
69007: ST_TO_ADDR
// AddToLog ( [ ) ;
69008: LD_STRING [
69010: PPUSH
69011: CALL_OW 561
// for i in tmp do
69015: LD_ADDR_VAR 0 3
69019: PUSH
69020: LD_VAR 0 4
69024: PUSH
69025: FOR_IN
69026: IFFALSE 69133
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69028: LD_STRING [
69030: PUSH
69031: LD_VAR 0 3
69035: PPUSH
69036: CALL_OW 266
69040: STR
69041: PUSH
69042: LD_STRING , 
69044: STR
69045: PUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: CALL_OW 250
69055: STR
69056: PUSH
69057: LD_STRING , 
69059: STR
69060: PUSH
69061: LD_VAR 0 3
69065: PPUSH
69066: CALL_OW 251
69070: STR
69071: PUSH
69072: LD_STRING , 
69074: STR
69075: PUSH
69076: LD_VAR 0 3
69080: PPUSH
69081: CALL_OW 254
69085: STR
69086: PUSH
69087: LD_STRING , 
69089: STR
69090: PUSH
69091: LD_VAR 0 3
69095: PPUSH
69096: LD_INT 1
69098: PPUSH
69099: CALL_OW 268
69103: STR
69104: PUSH
69105: LD_STRING , 
69107: STR
69108: PUSH
69109: LD_VAR 0 3
69113: PPUSH
69114: LD_INT 2
69116: PPUSH
69117: CALL_OW 268
69121: STR
69122: PUSH
69123: LD_STRING ],
69125: STR
69126: PPUSH
69127: CALL_OW 561
// end ;
69131: GO 69025
69133: POP
69134: POP
// AddToLog ( ]; ) ;
69135: LD_STRING ];
69137: PPUSH
69138: CALL_OW 561
// end ;
69142: LD_VAR 0 2
69146: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69147: LD_INT 0
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
// if not area or not rate or not max then
69154: LD_VAR 0 1
69158: NOT
69159: PUSH
69160: LD_VAR 0 2
69164: NOT
69165: OR
69166: PUSH
69167: LD_VAR 0 4
69171: NOT
69172: OR
69173: IFFALSE 69177
// exit ;
69175: GO 69366
// while 1 do
69177: LD_INT 1
69179: IFFALSE 69366
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69181: LD_ADDR_VAR 0 9
69185: PUSH
69186: LD_VAR 0 1
69190: PPUSH
69191: LD_INT 1
69193: PPUSH
69194: CALL_OW 287
69198: PUSH
69199: LD_INT 10
69201: MUL
69202: ST_TO_ADDR
// r := rate / 10 ;
69203: LD_ADDR_VAR 0 7
69207: PUSH
69208: LD_VAR 0 2
69212: PUSH
69213: LD_INT 10
69215: DIVREAL
69216: ST_TO_ADDR
// time := 1 1$00 ;
69217: LD_ADDR_VAR 0 8
69221: PUSH
69222: LD_INT 2100
69224: ST_TO_ADDR
// if amount < min then
69225: LD_VAR 0 9
69229: PUSH
69230: LD_VAR 0 3
69234: LESS
69235: IFFALSE 69253
// r := r * 2 else
69237: LD_ADDR_VAR 0 7
69241: PUSH
69242: LD_VAR 0 7
69246: PUSH
69247: LD_INT 2
69249: MUL
69250: ST_TO_ADDR
69251: GO 69279
// if amount > max then
69253: LD_VAR 0 9
69257: PUSH
69258: LD_VAR 0 4
69262: GREATER
69263: IFFALSE 69279
// r := r / 2 ;
69265: LD_ADDR_VAR 0 7
69269: PUSH
69270: LD_VAR 0 7
69274: PUSH
69275: LD_INT 2
69277: DIVREAL
69278: ST_TO_ADDR
// time := time / r ;
69279: LD_ADDR_VAR 0 8
69283: PUSH
69284: LD_VAR 0 8
69288: PUSH
69289: LD_VAR 0 7
69293: DIVREAL
69294: ST_TO_ADDR
// if time < 0 then
69295: LD_VAR 0 8
69299: PUSH
69300: LD_INT 0
69302: LESS
69303: IFFALSE 69320
// time := time * - 1 ;
69305: LD_ADDR_VAR 0 8
69309: PUSH
69310: LD_VAR 0 8
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: MUL
69319: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69320: LD_VAR 0 8
69324: PUSH
69325: LD_INT 35
69327: PPUSH
69328: LD_INT 875
69330: PPUSH
69331: CALL_OW 12
69335: PLUS
69336: PPUSH
69337: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69341: LD_INT 1
69343: PPUSH
69344: LD_INT 5
69346: PPUSH
69347: CALL_OW 12
69351: PPUSH
69352: LD_VAR 0 1
69356: PPUSH
69357: LD_INT 1
69359: PPUSH
69360: CALL_OW 55
// end ;
69364: GO 69177
// end ;
69366: LD_VAR 0 5
69370: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69371: LD_INT 0
69373: PPUSH
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
69378: PPUSH
69379: PPUSH
69380: PPUSH
// if not turrets or not factories then
69381: LD_VAR 0 1
69385: NOT
69386: PUSH
69387: LD_VAR 0 2
69391: NOT
69392: OR
69393: IFFALSE 69397
// exit ;
69395: GO 69704
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69397: LD_ADDR_VAR 0 10
69401: PUSH
69402: LD_INT 5
69404: PUSH
69405: LD_INT 6
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 2
69414: PUSH
69415: LD_INT 4
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: PUSH
69425: LD_INT 5
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 24
69439: PUSH
69440: LD_INT 25
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 23
69449: PUSH
69450: LD_INT 27
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 42
69463: PUSH
69464: LD_INT 43
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 44
69473: PUSH
69474: LD_INT 46
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 45
69483: PUSH
69484: LD_INT 47
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: LIST
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: LIST
69500: ST_TO_ADDR
// result := [ ] ;
69501: LD_ADDR_VAR 0 3
69505: PUSH
69506: EMPTY
69507: ST_TO_ADDR
// for i in turrets do
69508: LD_ADDR_VAR 0 4
69512: PUSH
69513: LD_VAR 0 1
69517: PUSH
69518: FOR_IN
69519: IFFALSE 69702
// begin nat := GetNation ( i ) ;
69521: LD_ADDR_VAR 0 7
69525: PUSH
69526: LD_VAR 0 4
69530: PPUSH
69531: CALL_OW 248
69535: ST_TO_ADDR
// weapon := 0 ;
69536: LD_ADDR_VAR 0 8
69540: PUSH
69541: LD_INT 0
69543: ST_TO_ADDR
// if not nat then
69544: LD_VAR 0 7
69548: NOT
69549: IFFALSE 69553
// continue ;
69551: GO 69518
// for j in list [ nat ] do
69553: LD_ADDR_VAR 0 5
69557: PUSH
69558: LD_VAR 0 10
69562: PUSH
69563: LD_VAR 0 7
69567: ARRAY
69568: PUSH
69569: FOR_IN
69570: IFFALSE 69611
// if GetBWeapon ( i ) = j [ 1 ] then
69572: LD_VAR 0 4
69576: PPUSH
69577: CALL_OW 269
69581: PUSH
69582: LD_VAR 0 5
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: EQUAL
69591: IFFALSE 69609
// begin weapon := j [ 2 ] ;
69593: LD_ADDR_VAR 0 8
69597: PUSH
69598: LD_VAR 0 5
69602: PUSH
69603: LD_INT 2
69605: ARRAY
69606: ST_TO_ADDR
// break ;
69607: GO 69611
// end ;
69609: GO 69569
69611: POP
69612: POP
// if not weapon then
69613: LD_VAR 0 8
69617: NOT
69618: IFFALSE 69622
// continue ;
69620: GO 69518
// for k in factories do
69622: LD_ADDR_VAR 0 6
69626: PUSH
69627: LD_VAR 0 2
69631: PUSH
69632: FOR_IN
69633: IFFALSE 69698
// begin weapons := AvailableWeaponList ( k ) ;
69635: LD_ADDR_VAR 0 9
69639: PUSH
69640: LD_VAR 0 6
69644: PPUSH
69645: CALL_OW 478
69649: ST_TO_ADDR
// if not weapons then
69650: LD_VAR 0 9
69654: NOT
69655: IFFALSE 69659
// continue ;
69657: GO 69632
// if weapon in weapons then
69659: LD_VAR 0 8
69663: PUSH
69664: LD_VAR 0 9
69668: IN
69669: IFFALSE 69696
// begin result := [ i , weapon ] ;
69671: LD_ADDR_VAR 0 3
69675: PUSH
69676: LD_VAR 0 4
69680: PUSH
69681: LD_VAR 0 8
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: ST_TO_ADDR
// exit ;
69690: POP
69691: POP
69692: POP
69693: POP
69694: GO 69704
// end ; end ;
69696: GO 69632
69698: POP
69699: POP
// end ;
69700: GO 69518
69702: POP
69703: POP
// end ;
69704: LD_VAR 0 3
69708: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69709: LD_INT 0
69711: PPUSH
// if not side or side > 8 then
69712: LD_VAR 0 3
69716: NOT
69717: PUSH
69718: LD_VAR 0 3
69722: PUSH
69723: LD_INT 8
69725: GREATER
69726: OR
69727: IFFALSE 69731
// exit ;
69729: GO 69790
// if not range then
69731: LD_VAR 0 4
69735: NOT
69736: IFFALSE 69747
// range := - 12 ;
69738: LD_ADDR_VAR 0 4
69742: PUSH
69743: LD_INT 12
69745: NEG
69746: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69747: LD_VAR 0 1
69751: PPUSH
69752: LD_VAR 0 2
69756: PPUSH
69757: LD_VAR 0 3
69761: PPUSH
69762: LD_VAR 0 4
69766: PPUSH
69767: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69771: LD_VAR 0 1
69775: PPUSH
69776: LD_VAR 0 2
69780: PPUSH
69781: LD_VAR 0 3
69785: PPUSH
69786: CALL_OW 331
// end ;
69790: LD_VAR 0 5
69794: RET
// export function Video ( mode ) ; begin
69795: LD_INT 0
69797: PPUSH
// ingame_video = mode ;
69798: LD_ADDR_OWVAR 52
69802: PUSH
69803: LD_VAR 0 1
69807: ST_TO_ADDR
// interface_hidden = mode ;
69808: LD_ADDR_OWVAR 54
69812: PUSH
69813: LD_VAR 0 1
69817: ST_TO_ADDR
// end ;
69818: LD_VAR 0 2
69822: RET
// export function Join ( array , element ) ; begin
69823: LD_INT 0
69825: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69826: LD_ADDR_VAR 0 3
69830: PUSH
69831: LD_VAR 0 1
69835: PPUSH
69836: LD_VAR 0 1
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: PPUSH
69845: LD_VAR 0 2
69849: PPUSH
69850: CALL_OW 1
69854: ST_TO_ADDR
// end ;
69855: LD_VAR 0 3
69859: RET
// export function JoinUnion ( array , element ) ; begin
69860: LD_INT 0
69862: PPUSH
// result := array union element ;
69863: LD_ADDR_VAR 0 3
69867: PUSH
69868: LD_VAR 0 1
69872: PUSH
69873: LD_VAR 0 2
69877: UNION
69878: ST_TO_ADDR
// end ;
69879: LD_VAR 0 3
69883: RET
// export function GetBehemoths ( side ) ; begin
69884: LD_INT 0
69886: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69887: LD_ADDR_VAR 0 2
69891: PUSH
69892: LD_INT 22
69894: PUSH
69895: LD_VAR 0 1
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 31
69906: PUSH
69907: LD_INT 25
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PPUSH
69918: CALL_OW 69
69922: ST_TO_ADDR
// end ;
69923: LD_VAR 0 2
69927: RET
// export function Shuffle ( array ) ; var i , index ; begin
69928: LD_INT 0
69930: PPUSH
69931: PPUSH
69932: PPUSH
// result := [ ] ;
69933: LD_ADDR_VAR 0 2
69937: PUSH
69938: EMPTY
69939: ST_TO_ADDR
// if not array then
69940: LD_VAR 0 1
69944: NOT
69945: IFFALSE 69949
// exit ;
69947: GO 70048
// Randomize ;
69949: CALL_OW 10
// for i = array downto 1 do
69953: LD_ADDR_VAR 0 3
69957: PUSH
69958: DOUBLE
69959: LD_VAR 0 1
69963: INC
69964: ST_TO_ADDR
69965: LD_INT 1
69967: PUSH
69968: FOR_DOWNTO
69969: IFFALSE 70046
// begin index := rand ( 1 , array ) ;
69971: LD_ADDR_VAR 0 4
69975: PUSH
69976: LD_INT 1
69978: PPUSH
69979: LD_VAR 0 1
69983: PPUSH
69984: CALL_OW 12
69988: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69989: LD_ADDR_VAR 0 2
69993: PUSH
69994: LD_VAR 0 2
69998: PPUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_INT 1
70006: PLUS
70007: PPUSH
70008: LD_VAR 0 1
70012: PUSH
70013: LD_VAR 0 4
70017: ARRAY
70018: PPUSH
70019: CALL_OW 2
70023: ST_TO_ADDR
// array := Delete ( array , index ) ;
70024: LD_ADDR_VAR 0 1
70028: PUSH
70029: LD_VAR 0 1
70033: PPUSH
70034: LD_VAR 0 4
70038: PPUSH
70039: CALL_OW 3
70043: ST_TO_ADDR
// end ;
70044: GO 69968
70046: POP
70047: POP
// end ;
70048: LD_VAR 0 2
70052: RET
// export function GetBaseMaterials ( base ) ; begin
70053: LD_INT 0
70055: PPUSH
// result := [ 0 , 0 , 0 ] ;
70056: LD_ADDR_VAR 0 2
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: ST_TO_ADDR
// if not base then
70075: LD_VAR 0 1
70079: NOT
70080: IFFALSE 70084
// exit ;
70082: GO 70133
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70084: LD_ADDR_VAR 0 2
70088: PUSH
70089: LD_VAR 0 1
70093: PPUSH
70094: LD_INT 1
70096: PPUSH
70097: CALL_OW 275
70101: PUSH
70102: LD_VAR 0 1
70106: PPUSH
70107: LD_INT 2
70109: PPUSH
70110: CALL_OW 275
70114: PUSH
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_INT 3
70122: PPUSH
70123: CALL_OW 275
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: ST_TO_ADDR
// end ;
70133: LD_VAR 0 2
70137: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70138: LD_INT 0
70140: PPUSH
70141: PPUSH
// result := array ;
70142: LD_ADDR_VAR 0 3
70146: PUSH
70147: LD_VAR 0 1
70151: ST_TO_ADDR
// if size >= result then
70152: LD_VAR 0 2
70156: PUSH
70157: LD_VAR 0 3
70161: GREATEREQUAL
70162: IFFALSE 70166
// exit ;
70164: GO 70216
// if size then
70166: LD_VAR 0 2
70170: IFFALSE 70216
// for i := array downto size do
70172: LD_ADDR_VAR 0 4
70176: PUSH
70177: DOUBLE
70178: LD_VAR 0 1
70182: INC
70183: ST_TO_ADDR
70184: LD_VAR 0 2
70188: PUSH
70189: FOR_DOWNTO
70190: IFFALSE 70214
// result := Delete ( result , result ) ;
70192: LD_ADDR_VAR 0 3
70196: PUSH
70197: LD_VAR 0 3
70201: PPUSH
70202: LD_VAR 0 3
70206: PPUSH
70207: CALL_OW 3
70211: ST_TO_ADDR
70212: GO 70189
70214: POP
70215: POP
// end ;
70216: LD_VAR 0 3
70220: RET
// export function ComExit ( unit ) ; var tmp ; begin
70221: LD_INT 0
70223: PPUSH
70224: PPUSH
// if not IsInUnit ( unit ) then
70225: LD_VAR 0 1
70229: PPUSH
70230: CALL_OW 310
70234: NOT
70235: IFFALSE 70239
// exit ;
70237: GO 70299
// tmp := IsInUnit ( unit ) ;
70239: LD_ADDR_VAR 0 3
70243: PUSH
70244: LD_VAR 0 1
70248: PPUSH
70249: CALL_OW 310
70253: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70254: LD_VAR 0 3
70258: PPUSH
70259: CALL_OW 247
70263: PUSH
70264: LD_INT 2
70266: EQUAL
70267: IFFALSE 70280
// ComExitVehicle ( unit ) else
70269: LD_VAR 0 1
70273: PPUSH
70274: CALL_OW 121
70278: GO 70289
// ComExitBuilding ( unit ) ;
70280: LD_VAR 0 1
70284: PPUSH
70285: CALL_OW 122
// result := tmp ;
70289: LD_ADDR_VAR 0 2
70293: PUSH
70294: LD_VAR 0 3
70298: ST_TO_ADDR
// end ;
70299: LD_VAR 0 2
70303: RET
// export function ComExitAll ( units ) ; var i ; begin
70304: LD_INT 0
70306: PPUSH
70307: PPUSH
// if not units then
70308: LD_VAR 0 1
70312: NOT
70313: IFFALSE 70317
// exit ;
70315: GO 70343
// for i in units do
70317: LD_ADDR_VAR 0 3
70321: PUSH
70322: LD_VAR 0 1
70326: PUSH
70327: FOR_IN
70328: IFFALSE 70341
// ComExit ( i ) ;
70330: LD_VAR 0 3
70334: PPUSH
70335: CALL 70221 0 1
70339: GO 70327
70341: POP
70342: POP
// end ;
70343: LD_VAR 0 2
70347: RET
// export function ResetHc ; begin
70348: LD_INT 0
70350: PPUSH
// InitHc ;
70351: CALL_OW 19
// hc_importance := 0 ;
70355: LD_ADDR_OWVAR 32
70359: PUSH
70360: LD_INT 0
70362: ST_TO_ADDR
// end ;
70363: LD_VAR 0 1
70367: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70368: LD_INT 0
70370: PPUSH
70371: PPUSH
70372: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70373: LD_ADDR_VAR 0 6
70377: PUSH
70378: LD_VAR 0 1
70382: PUSH
70383: LD_VAR 0 3
70387: PLUS
70388: PUSH
70389: LD_INT 2
70391: DIV
70392: ST_TO_ADDR
// if _x < 0 then
70393: LD_VAR 0 6
70397: PUSH
70398: LD_INT 0
70400: LESS
70401: IFFALSE 70418
// _x := _x * - 1 ;
70403: LD_ADDR_VAR 0 6
70407: PUSH
70408: LD_VAR 0 6
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: MUL
70417: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70418: LD_ADDR_VAR 0 7
70422: PUSH
70423: LD_VAR 0 2
70427: PUSH
70428: LD_VAR 0 4
70432: PLUS
70433: PUSH
70434: LD_INT 2
70436: DIV
70437: ST_TO_ADDR
// if _y < 0 then
70438: LD_VAR 0 7
70442: PUSH
70443: LD_INT 0
70445: LESS
70446: IFFALSE 70463
// _y := _y * - 1 ;
70448: LD_ADDR_VAR 0 7
70452: PUSH
70453: LD_VAR 0 7
70457: PUSH
70458: LD_INT 1
70460: NEG
70461: MUL
70462: ST_TO_ADDR
// result := [ _x , _y ] ;
70463: LD_ADDR_VAR 0 5
70467: PUSH
70468: LD_VAR 0 6
70472: PUSH
70473: LD_VAR 0 7
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: ST_TO_ADDR
// end ;
70482: LD_VAR 0 5
70486: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70487: LD_INT 0
70489: PPUSH
70490: PPUSH
70491: PPUSH
70492: PPUSH
// task := GetTaskList ( unit ) ;
70493: LD_ADDR_VAR 0 7
70497: PUSH
70498: LD_VAR 0 1
70502: PPUSH
70503: CALL_OW 437
70507: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70508: LD_VAR 0 7
70512: NOT
70513: PUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_VAR 0 2
70523: PPUSH
70524: CALL_OW 308
70528: NOT
70529: AND
70530: IFFALSE 70534
// exit ;
70532: GO 70652
// if IsInArea ( unit , area ) then
70534: LD_VAR 0 1
70538: PPUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: CALL_OW 308
70548: IFFALSE 70566
// begin ComMoveToArea ( unit , goAway ) ;
70550: LD_VAR 0 1
70554: PPUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: CALL_OW 113
// exit ;
70564: GO 70652
// end ; if task [ 1 ] [ 1 ] <> M then
70566: LD_VAR 0 7
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PUSH
70579: LD_STRING M
70581: NONEQUAL
70582: IFFALSE 70586
// exit ;
70584: GO 70652
// x := task [ 1 ] [ 2 ] ;
70586: LD_ADDR_VAR 0 5
70590: PUSH
70591: LD_VAR 0 7
70595: PUSH
70596: LD_INT 1
70598: ARRAY
70599: PUSH
70600: LD_INT 2
70602: ARRAY
70603: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70604: LD_ADDR_VAR 0 6
70608: PUSH
70609: LD_VAR 0 7
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: PUSH
70618: LD_INT 3
70620: ARRAY
70621: ST_TO_ADDR
// if InArea ( x , y , area ) then
70622: LD_VAR 0 5
70626: PPUSH
70627: LD_VAR 0 6
70631: PPUSH
70632: LD_VAR 0 2
70636: PPUSH
70637: CALL_OW 309
70641: IFFALSE 70652
// ComStop ( unit ) ;
70643: LD_VAR 0 1
70647: PPUSH
70648: CALL_OW 141
// end ;
70652: LD_VAR 0 4
70656: RET
// export function Abs ( value ) ; begin
70657: LD_INT 0
70659: PPUSH
// result := value ;
70660: LD_ADDR_VAR 0 2
70664: PUSH
70665: LD_VAR 0 1
70669: ST_TO_ADDR
// if value < 0 then
70670: LD_VAR 0 1
70674: PUSH
70675: LD_INT 0
70677: LESS
70678: IFFALSE 70695
// result := value * - 1 ;
70680: LD_ADDR_VAR 0 2
70684: PUSH
70685: LD_VAR 0 1
70689: PUSH
70690: LD_INT 1
70692: NEG
70693: MUL
70694: ST_TO_ADDR
// end ;
70695: LD_VAR 0 2
70699: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70700: LD_INT 0
70702: PPUSH
70703: PPUSH
70704: PPUSH
70705: PPUSH
70706: PPUSH
70707: PPUSH
70708: PPUSH
70709: PPUSH
// if not unit or not building then
70710: LD_VAR 0 1
70714: NOT
70715: PUSH
70716: LD_VAR 0 2
70720: NOT
70721: OR
70722: IFFALSE 70726
// exit ;
70724: GO 70952
// x := GetX ( building ) ;
70726: LD_ADDR_VAR 0 4
70730: PUSH
70731: LD_VAR 0 2
70735: PPUSH
70736: CALL_OW 250
70740: ST_TO_ADDR
// y := GetY ( building ) ;
70741: LD_ADDR_VAR 0 6
70745: PUSH
70746: LD_VAR 0 2
70750: PPUSH
70751: CALL_OW 251
70755: ST_TO_ADDR
// d := GetDir ( building ) ;
70756: LD_ADDR_VAR 0 8
70760: PUSH
70761: LD_VAR 0 2
70765: PPUSH
70766: CALL_OW 254
70770: ST_TO_ADDR
// r := 4 ;
70771: LD_ADDR_VAR 0 9
70775: PUSH
70776: LD_INT 4
70778: ST_TO_ADDR
// for i := 1 to 5 do
70779: LD_ADDR_VAR 0 10
70783: PUSH
70784: DOUBLE
70785: LD_INT 1
70787: DEC
70788: ST_TO_ADDR
70789: LD_INT 5
70791: PUSH
70792: FOR_TO
70793: IFFALSE 70950
// begin _x := ShiftX ( x , d , r + i ) ;
70795: LD_ADDR_VAR 0 5
70799: PUSH
70800: LD_VAR 0 4
70804: PPUSH
70805: LD_VAR 0 8
70809: PPUSH
70810: LD_VAR 0 9
70814: PUSH
70815: LD_VAR 0 10
70819: PLUS
70820: PPUSH
70821: CALL_OW 272
70825: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70826: LD_ADDR_VAR 0 7
70830: PUSH
70831: LD_VAR 0 6
70835: PPUSH
70836: LD_VAR 0 8
70840: PPUSH
70841: LD_VAR 0 9
70845: PUSH
70846: LD_VAR 0 10
70850: PLUS
70851: PPUSH
70852: CALL_OW 273
70856: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70857: LD_VAR 0 5
70861: PPUSH
70862: LD_VAR 0 7
70866: PPUSH
70867: CALL_OW 488
70871: PUSH
70872: LD_VAR 0 5
70876: PPUSH
70877: LD_VAR 0 7
70881: PPUSH
70882: CALL_OW 428
70886: PPUSH
70887: CALL_OW 247
70891: PUSH
70892: LD_INT 3
70894: PUSH
70895: LD_INT 2
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: IN
70902: NOT
70903: AND
70904: IFFALSE 70948
// begin ComMoveXY ( unit , _x , _y ) ;
70906: LD_VAR 0 1
70910: PPUSH
70911: LD_VAR 0 5
70915: PPUSH
70916: LD_VAR 0 7
70920: PPUSH
70921: CALL_OW 111
// result := [ _x , _y ] ;
70925: LD_ADDR_VAR 0 3
70929: PUSH
70930: LD_VAR 0 5
70934: PUSH
70935: LD_VAR 0 7
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: ST_TO_ADDR
// exit ;
70944: POP
70945: POP
70946: GO 70952
// end ; end ;
70948: GO 70792
70950: POP
70951: POP
// end ;
70952: LD_VAR 0 3
70956: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
// result := 0 ;
70962: LD_ADDR_VAR 0 3
70966: PUSH
70967: LD_INT 0
70969: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70970: LD_VAR 0 1
70974: PUSH
70975: LD_INT 0
70977: LESS
70978: PUSH
70979: LD_VAR 0 1
70983: PUSH
70984: LD_INT 8
70986: GREATER
70987: OR
70988: PUSH
70989: LD_VAR 0 2
70993: PUSH
70994: LD_INT 0
70996: LESS
70997: OR
70998: PUSH
70999: LD_VAR 0 2
71003: PUSH
71004: LD_INT 8
71006: GREATER
71007: OR
71008: IFFALSE 71012
// exit ;
71010: GO 71087
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71012: LD_ADDR_VAR 0 4
71016: PUSH
71017: LD_INT 22
71019: PUSH
71020: LD_VAR 0 2
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PPUSH
71029: CALL_OW 69
71033: PUSH
71034: FOR_IN
71035: IFFALSE 71085
// begin un := UnitShoot ( i ) ;
71037: LD_ADDR_VAR 0 5
71041: PUSH
71042: LD_VAR 0 4
71046: PPUSH
71047: CALL_OW 504
71051: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71052: LD_VAR 0 5
71056: PPUSH
71057: CALL_OW 255
71061: PUSH
71062: LD_VAR 0 1
71066: EQUAL
71067: IFFALSE 71083
// begin result := un ;
71069: LD_ADDR_VAR 0 3
71073: PUSH
71074: LD_VAR 0 5
71078: ST_TO_ADDR
// exit ;
71079: POP
71080: POP
71081: GO 71087
// end ; end ;
71083: GO 71034
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 3
71091: RET
// export function GetCargoBay ( units ) ; begin
71092: LD_INT 0
71094: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71095: LD_ADDR_VAR 0 2
71099: PUSH
71100: LD_VAR 0 1
71104: PPUSH
71105: LD_INT 2
71107: PUSH
71108: LD_INT 34
71110: PUSH
71111: LD_INT 12
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 34
71120: PUSH
71121: LD_INT 51
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 34
71130: PUSH
71131: LD_INT 32
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 34
71140: PUSH
71141: LD_INT 89
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: PPUSH
71155: CALL_OW 72
71159: ST_TO_ADDR
// end ;
71160: LD_VAR 0 2
71164: RET
// export function Negate ( value ) ; begin
71165: LD_INT 0
71167: PPUSH
// result := not value ;
71168: LD_ADDR_VAR 0 2
71172: PUSH
71173: LD_VAR 0 1
71177: NOT
71178: ST_TO_ADDR
// end ;
71179: LD_VAR 0 2
71183: RET
// export function Inc ( value ) ; begin
71184: LD_INT 0
71186: PPUSH
// result := value + 1 ;
71187: LD_ADDR_VAR 0 2
71191: PUSH
71192: LD_VAR 0 1
71196: PUSH
71197: LD_INT 1
71199: PLUS
71200: ST_TO_ADDR
// end ;
71201: LD_VAR 0 2
71205: RET
// export function Dec ( value ) ; begin
71206: LD_INT 0
71208: PPUSH
// result := value - 1 ;
71209: LD_ADDR_VAR 0 2
71213: PUSH
71214: LD_VAR 0 1
71218: PUSH
71219: LD_INT 1
71221: MINUS
71222: ST_TO_ADDR
// end ;
71223: LD_VAR 0 2
71227: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71228: LD_INT 0
71230: PPUSH
71231: PPUSH
71232: PPUSH
71233: PPUSH
71234: PPUSH
71235: PPUSH
71236: PPUSH
71237: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71238: LD_VAR 0 1
71242: PPUSH
71243: LD_VAR 0 2
71247: PPUSH
71248: CALL_OW 488
71252: NOT
71253: PUSH
71254: LD_VAR 0 3
71258: PPUSH
71259: LD_VAR 0 4
71263: PPUSH
71264: CALL_OW 488
71268: NOT
71269: OR
71270: IFFALSE 71283
// begin result := - 1 ;
71272: LD_ADDR_VAR 0 5
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: ST_TO_ADDR
// exit ;
71281: GO 71518
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71283: LD_ADDR_VAR 0 12
71287: PUSH
71288: LD_VAR 0 1
71292: PPUSH
71293: LD_VAR 0 2
71297: PPUSH
71298: LD_VAR 0 3
71302: PPUSH
71303: LD_VAR 0 4
71307: PPUSH
71308: CALL 70368 0 4
71312: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71313: LD_ADDR_VAR 0 11
71317: PUSH
71318: LD_VAR 0 1
71322: PPUSH
71323: LD_VAR 0 2
71327: PPUSH
71328: LD_VAR 0 12
71332: PUSH
71333: LD_INT 1
71335: ARRAY
71336: PPUSH
71337: LD_VAR 0 12
71341: PUSH
71342: LD_INT 2
71344: ARRAY
71345: PPUSH
71346: CALL_OW 298
71350: ST_TO_ADDR
// distance := 9999 ;
71351: LD_ADDR_VAR 0 10
71355: PUSH
71356: LD_INT 9999
71358: ST_TO_ADDR
// for i := 0 to 5 do
71359: LD_ADDR_VAR 0 6
71363: PUSH
71364: DOUBLE
71365: LD_INT 0
71367: DEC
71368: ST_TO_ADDR
71369: LD_INT 5
71371: PUSH
71372: FOR_TO
71373: IFFALSE 71516
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71375: LD_ADDR_VAR 0 7
71379: PUSH
71380: LD_VAR 0 1
71384: PPUSH
71385: LD_VAR 0 6
71389: PPUSH
71390: LD_VAR 0 11
71394: PPUSH
71395: CALL_OW 272
71399: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71400: LD_ADDR_VAR 0 8
71404: PUSH
71405: LD_VAR 0 2
71409: PPUSH
71410: LD_VAR 0 6
71414: PPUSH
71415: LD_VAR 0 11
71419: PPUSH
71420: CALL_OW 273
71424: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71425: LD_VAR 0 7
71429: PPUSH
71430: LD_VAR 0 8
71434: PPUSH
71435: CALL_OW 488
71439: NOT
71440: IFFALSE 71444
// continue ;
71442: GO 71372
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71444: LD_ADDR_VAR 0 9
71448: PUSH
71449: LD_VAR 0 12
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PPUSH
71458: LD_VAR 0 12
71462: PUSH
71463: LD_INT 2
71465: ARRAY
71466: PPUSH
71467: LD_VAR 0 7
71471: PPUSH
71472: LD_VAR 0 8
71476: PPUSH
71477: CALL_OW 298
71481: ST_TO_ADDR
// if tmp < distance then
71482: LD_VAR 0 9
71486: PUSH
71487: LD_VAR 0 10
71491: LESS
71492: IFFALSE 71514
// begin result := i ;
71494: LD_ADDR_VAR 0 5
71498: PUSH
71499: LD_VAR 0 6
71503: ST_TO_ADDR
// distance := tmp ;
71504: LD_ADDR_VAR 0 10
71508: PUSH
71509: LD_VAR 0 9
71513: ST_TO_ADDR
// end ; end ;
71514: GO 71372
71516: POP
71517: POP
// end ;
71518: LD_VAR 0 5
71522: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71523: LD_INT 0
71525: PPUSH
71526: PPUSH
// if not driver or not IsInUnit ( driver ) then
71527: LD_VAR 0 1
71531: NOT
71532: PUSH
71533: LD_VAR 0 1
71537: PPUSH
71538: CALL_OW 310
71542: NOT
71543: OR
71544: IFFALSE 71548
// exit ;
71546: GO 71638
// vehicle := IsInUnit ( driver ) ;
71548: LD_ADDR_VAR 0 3
71552: PUSH
71553: LD_VAR 0 1
71557: PPUSH
71558: CALL_OW 310
71562: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71563: LD_VAR 0 1
71567: PPUSH
71568: LD_STRING \
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: LD_INT 0
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: PUSH
71598: LD_STRING E
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 0
71606: PUSH
71607: LD_VAR 0 3
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PPUSH
71634: CALL_OW 446
// end ;
71638: LD_VAR 0 2
71642: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71643: LD_INT 0
71645: PPUSH
71646: PPUSH
// if not driver or not IsInUnit ( driver ) then
71647: LD_VAR 0 1
71651: NOT
71652: PUSH
71653: LD_VAR 0 1
71657: PPUSH
71658: CALL_OW 310
71662: NOT
71663: OR
71664: IFFALSE 71668
// exit ;
71666: GO 71758
// vehicle := IsInUnit ( driver ) ;
71668: LD_ADDR_VAR 0 3
71672: PUSH
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 310
71682: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71683: LD_VAR 0 1
71687: PPUSH
71688: LD_STRING \
71690: PUSH
71691: LD_INT 0
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: PUSH
71718: LD_STRING E
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: LD_INT 0
71726: PUSH
71727: LD_VAR 0 3
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PPUSH
71754: CALL_OW 447
// end ;
71758: LD_VAR 0 2
71762: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71763: LD_INT 0
71765: PPUSH
71766: PPUSH
71767: PPUSH
// tmp := [ ] ;
71768: LD_ADDR_VAR 0 5
71772: PUSH
71773: EMPTY
71774: ST_TO_ADDR
// for i in units do
71775: LD_ADDR_VAR 0 4
71779: PUSH
71780: LD_VAR 0 1
71784: PUSH
71785: FOR_IN
71786: IFFALSE 71824
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71788: LD_ADDR_VAR 0 5
71792: PUSH
71793: LD_VAR 0 5
71797: PPUSH
71798: LD_VAR 0 5
71802: PUSH
71803: LD_INT 1
71805: PLUS
71806: PPUSH
71807: LD_VAR 0 4
71811: PPUSH
71812: CALL_OW 256
71816: PPUSH
71817: CALL_OW 2
71821: ST_TO_ADDR
71822: GO 71785
71824: POP
71825: POP
// if not tmp then
71826: LD_VAR 0 5
71830: NOT
71831: IFFALSE 71835
// exit ;
71833: GO 71883
// if asc then
71835: LD_VAR 0 2
71839: IFFALSE 71863
// result := SortListByListAsc ( units , tmp ) else
71841: LD_ADDR_VAR 0 3
71845: PUSH
71846: LD_VAR 0 1
71850: PPUSH
71851: LD_VAR 0 5
71855: PPUSH
71856: CALL_OW 76
71860: ST_TO_ADDR
71861: GO 71883
// result := SortListByListDesc ( units , tmp ) ;
71863: LD_ADDR_VAR 0 3
71867: PUSH
71868: LD_VAR 0 1
71872: PPUSH
71873: LD_VAR 0 5
71877: PPUSH
71878: CALL_OW 77
71882: ST_TO_ADDR
// end ;
71883: LD_VAR 0 3
71887: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71888: LD_INT 0
71890: PPUSH
71891: PPUSH
// task := GetTaskList ( mech ) ;
71892: LD_ADDR_VAR 0 4
71896: PUSH
71897: LD_VAR 0 1
71901: PPUSH
71902: CALL_OW 437
71906: ST_TO_ADDR
// if not task then
71907: LD_VAR 0 4
71911: NOT
71912: IFFALSE 71916
// exit ;
71914: GO 71958
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71916: LD_ADDR_VAR 0 3
71920: PUSH
71921: LD_VAR 0 4
71925: PUSH
71926: LD_INT 1
71928: ARRAY
71929: PUSH
71930: LD_INT 1
71932: ARRAY
71933: PUSH
71934: LD_STRING r
71936: EQUAL
71937: PUSH
71938: LD_VAR 0 4
71942: PUSH
71943: LD_INT 1
71945: ARRAY
71946: PUSH
71947: LD_INT 4
71949: ARRAY
71950: PUSH
71951: LD_VAR 0 2
71955: EQUAL
71956: AND
71957: ST_TO_ADDR
// end ;
71958: LD_VAR 0 3
71962: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71963: LD_INT 0
71965: PPUSH
// SetDir ( unit , d ) ;
71966: LD_VAR 0 1
71970: PPUSH
71971: LD_VAR 0 4
71975: PPUSH
71976: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71980: LD_VAR 0 1
71984: PPUSH
71985: LD_VAR 0 2
71989: PPUSH
71990: LD_VAR 0 3
71994: PPUSH
71995: LD_VAR 0 5
71999: PPUSH
72000: CALL_OW 48
// end ;
72004: LD_VAR 0 6
72008: RET
// export function ToNaturalNumber ( number ) ; begin
72009: LD_INT 0
72011: PPUSH
// result := number div 1 ;
72012: LD_ADDR_VAR 0 2
72016: PUSH
72017: LD_VAR 0 1
72021: PUSH
72022: LD_INT 1
72024: DIV
72025: ST_TO_ADDR
// if number < 0 then
72026: LD_VAR 0 1
72030: PUSH
72031: LD_INT 0
72033: LESS
72034: IFFALSE 72044
// result := 0 ;
72036: LD_ADDR_VAR 0 2
72040: PUSH
72041: LD_INT 0
72043: ST_TO_ADDR
// end ;
72044: LD_VAR 0 2
72048: RET
// export function SortByClass ( units , class ) ; var un ; begin
72049: LD_INT 0
72051: PPUSH
72052: PPUSH
// if not units or not class then
72053: LD_VAR 0 1
72057: NOT
72058: PUSH
72059: LD_VAR 0 2
72063: NOT
72064: OR
72065: IFFALSE 72069
// exit ;
72067: GO 72164
// result := [ ] ;
72069: LD_ADDR_VAR 0 3
72073: PUSH
72074: EMPTY
72075: ST_TO_ADDR
// for un in units do
72076: LD_ADDR_VAR 0 4
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: FOR_IN
72087: IFFALSE 72162
// if GetClass ( un ) = class then
72089: LD_VAR 0 4
72093: PPUSH
72094: CALL_OW 257
72098: PUSH
72099: LD_VAR 0 2
72103: EQUAL
72104: IFFALSE 72131
// result := Insert ( result , 1 , un ) else
72106: LD_ADDR_VAR 0 3
72110: PUSH
72111: LD_VAR 0 3
72115: PPUSH
72116: LD_INT 1
72118: PPUSH
72119: LD_VAR 0 4
72123: PPUSH
72124: CALL_OW 2
72128: ST_TO_ADDR
72129: GO 72160
// result := Replace ( result , result + 1 , un ) ;
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: LD_VAR 0 3
72140: PPUSH
72141: LD_VAR 0 3
72145: PUSH
72146: LD_INT 1
72148: PLUS
72149: PPUSH
72150: LD_VAR 0 4
72154: PPUSH
72155: CALL_OW 1
72159: ST_TO_ADDR
72160: GO 72086
72162: POP
72163: POP
// end ;
72164: LD_VAR 0 3
72168: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72169: LD_INT 0
72171: PPUSH
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
// result := [ ] ;
72178: LD_ADDR_VAR 0 4
72182: PUSH
72183: EMPTY
72184: ST_TO_ADDR
// if x - r < 0 then
72185: LD_VAR 0 1
72189: PUSH
72190: LD_VAR 0 3
72194: MINUS
72195: PUSH
72196: LD_INT 0
72198: LESS
72199: IFFALSE 72211
// min_x := 0 else
72201: LD_ADDR_VAR 0 8
72205: PUSH
72206: LD_INT 0
72208: ST_TO_ADDR
72209: GO 72227
// min_x := x - r ;
72211: LD_ADDR_VAR 0 8
72215: PUSH
72216: LD_VAR 0 1
72220: PUSH
72221: LD_VAR 0 3
72225: MINUS
72226: ST_TO_ADDR
// if y - r < 0 then
72227: LD_VAR 0 2
72231: PUSH
72232: LD_VAR 0 3
72236: MINUS
72237: PUSH
72238: LD_INT 0
72240: LESS
72241: IFFALSE 72253
// min_y := 0 else
72243: LD_ADDR_VAR 0 7
72247: PUSH
72248: LD_INT 0
72250: ST_TO_ADDR
72251: GO 72269
// min_y := y - r ;
72253: LD_ADDR_VAR 0 7
72257: PUSH
72258: LD_VAR 0 2
72262: PUSH
72263: LD_VAR 0 3
72267: MINUS
72268: ST_TO_ADDR
// max_x := x + r ;
72269: LD_ADDR_VAR 0 9
72273: PUSH
72274: LD_VAR 0 1
72278: PUSH
72279: LD_VAR 0 3
72283: PLUS
72284: ST_TO_ADDR
// max_y := y + r ;
72285: LD_ADDR_VAR 0 10
72289: PUSH
72290: LD_VAR 0 2
72294: PUSH
72295: LD_VAR 0 3
72299: PLUS
72300: ST_TO_ADDR
// for _x = min_x to max_x do
72301: LD_ADDR_VAR 0 5
72305: PUSH
72306: DOUBLE
72307: LD_VAR 0 8
72311: DEC
72312: ST_TO_ADDR
72313: LD_VAR 0 9
72317: PUSH
72318: FOR_TO
72319: IFFALSE 72420
// for _y = min_y to max_y do
72321: LD_ADDR_VAR 0 6
72325: PUSH
72326: DOUBLE
72327: LD_VAR 0 7
72331: DEC
72332: ST_TO_ADDR
72333: LD_VAR 0 10
72337: PUSH
72338: FOR_TO
72339: IFFALSE 72416
// begin if not ValidHex ( _x , _y ) then
72341: LD_VAR 0 5
72345: PPUSH
72346: LD_VAR 0 6
72350: PPUSH
72351: CALL_OW 488
72355: NOT
72356: IFFALSE 72360
// continue ;
72358: GO 72338
// if GetResourceTypeXY ( _x , _y ) then
72360: LD_VAR 0 5
72364: PPUSH
72365: LD_VAR 0 6
72369: PPUSH
72370: CALL_OW 283
72374: IFFALSE 72414
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72376: LD_ADDR_VAR 0 4
72380: PUSH
72381: LD_VAR 0 4
72385: PPUSH
72386: LD_VAR 0 4
72390: PUSH
72391: LD_INT 1
72393: PLUS
72394: PPUSH
72395: LD_VAR 0 5
72399: PUSH
72400: LD_VAR 0 6
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PPUSH
72409: CALL_OW 1
72413: ST_TO_ADDR
// end ;
72414: GO 72338
72416: POP
72417: POP
72418: GO 72318
72420: POP
72421: POP
// end ;
72422: LD_VAR 0 4
72426: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72427: LD_INT 0
72429: PPUSH
72430: PPUSH
72431: PPUSH
72432: PPUSH
72433: PPUSH
72434: PPUSH
72435: PPUSH
72436: PPUSH
// if not units then
72437: LD_VAR 0 1
72441: NOT
72442: IFFALSE 72446
// exit ;
72444: GO 72970
// result := UnitFilter ( units , [ f_ok ] ) ;
72446: LD_ADDR_VAR 0 3
72450: PUSH
72451: LD_VAR 0 1
72455: PPUSH
72456: LD_INT 50
72458: PUSH
72459: EMPTY
72460: LIST
72461: PPUSH
72462: CALL_OW 72
72466: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72467: LD_ADDR_VAR 0 8
72471: PUSH
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 1
72479: ARRAY
72480: PPUSH
72481: CALL_OW 255
72485: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72486: LD_ADDR_VAR 0 10
72490: PUSH
72491: LD_INT 29
72493: PUSH
72494: LD_INT 91
72496: PUSH
72497: LD_INT 49
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: ST_TO_ADDR
// if not result then
72505: LD_VAR 0 3
72509: NOT
72510: IFFALSE 72514
// exit ;
72512: GO 72970
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72514: LD_ADDR_VAR 0 5
72518: PUSH
72519: LD_INT 81
72521: PUSH
72522: LD_VAR 0 8
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PPUSH
72531: CALL_OW 69
72535: ST_TO_ADDR
// for i in result do
72536: LD_ADDR_VAR 0 4
72540: PUSH
72541: LD_VAR 0 3
72545: PUSH
72546: FOR_IN
72547: IFFALSE 72968
// begin tag := GetTag ( i ) + 1 ;
72549: LD_ADDR_VAR 0 9
72553: PUSH
72554: LD_VAR 0 4
72558: PPUSH
72559: CALL_OW 110
72563: PUSH
72564: LD_INT 1
72566: PLUS
72567: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72568: LD_ADDR_VAR 0 7
72572: PUSH
72573: LD_VAR 0 4
72577: PPUSH
72578: CALL_OW 250
72582: PPUSH
72583: LD_VAR 0 4
72587: PPUSH
72588: CALL_OW 251
72592: PPUSH
72593: LD_INT 6
72595: PPUSH
72596: CALL 72169 0 3
72600: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72601: LD_VAR 0 4
72605: PPUSH
72606: CALL_OW 247
72610: PUSH
72611: LD_INT 2
72613: EQUAL
72614: PUSH
72615: LD_VAR 0 7
72619: AND
72620: PUSH
72621: LD_VAR 0 4
72625: PPUSH
72626: CALL_OW 264
72630: PUSH
72631: LD_VAR 0 10
72635: IN
72636: NOT
72637: AND
72638: IFFALSE 72677
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72640: LD_VAR 0 4
72644: PPUSH
72645: LD_VAR 0 7
72649: PUSH
72650: LD_INT 1
72652: ARRAY
72653: PUSH
72654: LD_INT 1
72656: ARRAY
72657: PPUSH
72658: LD_VAR 0 7
72662: PUSH
72663: LD_INT 1
72665: ARRAY
72666: PUSH
72667: LD_INT 2
72669: ARRAY
72670: PPUSH
72671: CALL_OW 116
72675: GO 72966
// if path > tag then
72677: LD_VAR 0 2
72681: PUSH
72682: LD_VAR 0 9
72686: GREATER
72687: IFFALSE 72895
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72689: LD_ADDR_VAR 0 6
72693: PUSH
72694: LD_VAR 0 5
72698: PPUSH
72699: LD_INT 91
72701: PUSH
72702: LD_VAR 0 4
72706: PUSH
72707: LD_INT 8
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: LIST
72714: PPUSH
72715: CALL_OW 72
72719: ST_TO_ADDR
// if nearEnemy then
72720: LD_VAR 0 6
72724: IFFALSE 72793
// begin if GetWeapon ( i ) = ru_time_lapser then
72726: LD_VAR 0 4
72730: PPUSH
72731: CALL_OW 264
72735: PUSH
72736: LD_INT 49
72738: EQUAL
72739: IFFALSE 72767
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72741: LD_VAR 0 4
72745: PPUSH
72746: LD_VAR 0 6
72750: PPUSH
72751: LD_VAR 0 4
72755: PPUSH
72756: CALL_OW 74
72760: PPUSH
72761: CALL_OW 112
72765: GO 72791
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72767: LD_VAR 0 4
72771: PPUSH
72772: LD_VAR 0 6
72776: PPUSH
72777: LD_VAR 0 4
72781: PPUSH
72782: CALL_OW 74
72786: PPUSH
72787: CALL 73895 0 2
// end else
72791: GO 72893
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72793: LD_VAR 0 4
72797: PPUSH
72798: LD_VAR 0 2
72802: PUSH
72803: LD_VAR 0 9
72807: ARRAY
72808: PUSH
72809: LD_INT 1
72811: ARRAY
72812: PPUSH
72813: LD_VAR 0 2
72817: PUSH
72818: LD_VAR 0 9
72822: ARRAY
72823: PUSH
72824: LD_INT 2
72826: ARRAY
72827: PPUSH
72828: CALL_OW 297
72832: PUSH
72833: LD_INT 6
72835: GREATER
72836: IFFALSE 72879
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72838: LD_VAR 0 4
72842: PPUSH
72843: LD_VAR 0 2
72847: PUSH
72848: LD_VAR 0 9
72852: ARRAY
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PPUSH
72858: LD_VAR 0 2
72862: PUSH
72863: LD_VAR 0 9
72867: ARRAY
72868: PUSH
72869: LD_INT 2
72871: ARRAY
72872: PPUSH
72873: CALL_OW 114
72877: GO 72893
// SetTag ( i , tag ) ;
72879: LD_VAR 0 4
72883: PPUSH
72884: LD_VAR 0 9
72888: PPUSH
72889: CALL_OW 109
// end else
72893: GO 72966
// if enemy then
72895: LD_VAR 0 5
72899: IFFALSE 72966
// begin if GetWeapon ( i ) = ru_time_lapser then
72901: LD_VAR 0 4
72905: PPUSH
72906: CALL_OW 264
72910: PUSH
72911: LD_INT 49
72913: EQUAL
72914: IFFALSE 72942
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72916: LD_VAR 0 4
72920: PPUSH
72921: LD_VAR 0 5
72925: PPUSH
72926: LD_VAR 0 4
72930: PPUSH
72931: CALL_OW 74
72935: PPUSH
72936: CALL_OW 112
72940: GO 72966
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72942: LD_VAR 0 4
72946: PPUSH
72947: LD_VAR 0 5
72951: PPUSH
72952: LD_VAR 0 4
72956: PPUSH
72957: CALL_OW 74
72961: PPUSH
72962: CALL 73895 0 2
// end ; end ;
72966: GO 72546
72968: POP
72969: POP
// end ;
72970: LD_VAR 0 3
72974: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72975: LD_INT 0
72977: PPUSH
72978: PPUSH
72979: PPUSH
// if not unit or IsInUnit ( unit ) then
72980: LD_VAR 0 1
72984: NOT
72985: PUSH
72986: LD_VAR 0 1
72990: PPUSH
72991: CALL_OW 310
72995: OR
72996: IFFALSE 73000
// exit ;
72998: GO 73091
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73000: LD_ADDR_VAR 0 4
73004: PUSH
73005: LD_VAR 0 1
73009: PPUSH
73010: CALL_OW 250
73014: PPUSH
73015: LD_VAR 0 2
73019: PPUSH
73020: LD_INT 1
73022: PPUSH
73023: CALL_OW 272
73027: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73028: LD_ADDR_VAR 0 5
73032: PUSH
73033: LD_VAR 0 1
73037: PPUSH
73038: CALL_OW 251
73042: PPUSH
73043: LD_VAR 0 2
73047: PPUSH
73048: LD_INT 1
73050: PPUSH
73051: CALL_OW 273
73055: ST_TO_ADDR
// if ValidHex ( x , y ) then
73056: LD_VAR 0 4
73060: PPUSH
73061: LD_VAR 0 5
73065: PPUSH
73066: CALL_OW 488
73070: IFFALSE 73091
// ComTurnXY ( unit , x , y ) ;
73072: LD_VAR 0 1
73076: PPUSH
73077: LD_VAR 0 4
73081: PPUSH
73082: LD_VAR 0 5
73086: PPUSH
73087: CALL_OW 118
// end ;
73091: LD_VAR 0 3
73095: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73096: LD_INT 0
73098: PPUSH
73099: PPUSH
// result := false ;
73100: LD_ADDR_VAR 0 3
73104: PUSH
73105: LD_INT 0
73107: ST_TO_ADDR
// if not units then
73108: LD_VAR 0 2
73112: NOT
73113: IFFALSE 73117
// exit ;
73115: GO 73162
// for i in units do
73117: LD_ADDR_VAR 0 4
73121: PUSH
73122: LD_VAR 0 2
73126: PUSH
73127: FOR_IN
73128: IFFALSE 73160
// if See ( side , i ) then
73130: LD_VAR 0 1
73134: PPUSH
73135: LD_VAR 0 4
73139: PPUSH
73140: CALL_OW 292
73144: IFFALSE 73158
// begin result := true ;
73146: LD_ADDR_VAR 0 3
73150: PUSH
73151: LD_INT 1
73153: ST_TO_ADDR
// exit ;
73154: POP
73155: POP
73156: GO 73162
// end ;
73158: GO 73127
73160: POP
73161: POP
// end ;
73162: LD_VAR 0 3
73166: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73167: LD_INT 0
73169: PPUSH
73170: PPUSH
73171: PPUSH
73172: PPUSH
// if not unit or not points then
73173: LD_VAR 0 1
73177: NOT
73178: PUSH
73179: LD_VAR 0 2
73183: NOT
73184: OR
73185: IFFALSE 73189
// exit ;
73187: GO 73279
// dist := 99999 ;
73189: LD_ADDR_VAR 0 5
73193: PUSH
73194: LD_INT 99999
73196: ST_TO_ADDR
// for i in points do
73197: LD_ADDR_VAR 0 4
73201: PUSH
73202: LD_VAR 0 2
73206: PUSH
73207: FOR_IN
73208: IFFALSE 73277
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73210: LD_ADDR_VAR 0 6
73214: PUSH
73215: LD_VAR 0 1
73219: PPUSH
73220: LD_VAR 0 4
73224: PUSH
73225: LD_INT 1
73227: ARRAY
73228: PPUSH
73229: LD_VAR 0 4
73233: PUSH
73234: LD_INT 2
73236: ARRAY
73237: PPUSH
73238: CALL_OW 297
73242: ST_TO_ADDR
// if tmpDist < dist then
73243: LD_VAR 0 6
73247: PUSH
73248: LD_VAR 0 5
73252: LESS
73253: IFFALSE 73275
// begin result := i ;
73255: LD_ADDR_VAR 0 3
73259: PUSH
73260: LD_VAR 0 4
73264: ST_TO_ADDR
// dist := tmpDist ;
73265: LD_ADDR_VAR 0 5
73269: PUSH
73270: LD_VAR 0 6
73274: ST_TO_ADDR
// end ; end ;
73275: GO 73207
73277: POP
73278: POP
// end ;
73279: LD_VAR 0 3
73283: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73284: LD_INT 0
73286: PPUSH
// uc_side := side ;
73287: LD_ADDR_OWVAR 20
73291: PUSH
73292: LD_VAR 0 1
73296: ST_TO_ADDR
// uc_nation := 3 ;
73297: LD_ADDR_OWVAR 21
73301: PUSH
73302: LD_INT 3
73304: ST_TO_ADDR
// vc_chassis := 25 ;
73305: LD_ADDR_OWVAR 37
73309: PUSH
73310: LD_INT 25
73312: ST_TO_ADDR
// vc_engine := engine_siberite ;
73313: LD_ADDR_OWVAR 39
73317: PUSH
73318: LD_INT 3
73320: ST_TO_ADDR
// vc_control := control_computer ;
73321: LD_ADDR_OWVAR 38
73325: PUSH
73326: LD_INT 3
73328: ST_TO_ADDR
// vc_weapon := 59 ;
73329: LD_ADDR_OWVAR 40
73333: PUSH
73334: LD_INT 59
73336: ST_TO_ADDR
// result := CreateVehicle ;
73337: LD_ADDR_VAR 0 5
73341: PUSH
73342: CALL_OW 45
73346: ST_TO_ADDR
// SetDir ( result , d ) ;
73347: LD_VAR 0 5
73351: PPUSH
73352: LD_VAR 0 4
73356: PPUSH
73357: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73361: LD_VAR 0 5
73365: PPUSH
73366: LD_VAR 0 2
73370: PPUSH
73371: LD_VAR 0 3
73375: PPUSH
73376: LD_INT 0
73378: PPUSH
73379: CALL_OW 48
// end ;
73383: LD_VAR 0 5
73387: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73388: LD_INT 0
73390: PPUSH
73391: PPUSH
73392: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73393: LD_ADDR_VAR 0 2
73397: PUSH
73398: LD_INT 0
73400: PUSH
73401: LD_INT 0
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73416: LD_VAR 0 1
73420: NOT
73421: PUSH
73422: LD_VAR 0 1
73426: PPUSH
73427: CALL_OW 264
73431: PUSH
73432: LD_INT 12
73434: PUSH
73435: LD_INT 51
73437: PUSH
73438: LD_INT 32
73440: PUSH
73441: LD_INT 89
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: IN
73450: NOT
73451: OR
73452: IFFALSE 73456
// exit ;
73454: GO 73554
// for i := 1 to 3 do
73456: LD_ADDR_VAR 0 3
73460: PUSH
73461: DOUBLE
73462: LD_INT 1
73464: DEC
73465: ST_TO_ADDR
73466: LD_INT 3
73468: PUSH
73469: FOR_TO
73470: IFFALSE 73552
// begin tmp := GetCargo ( cargo , i ) ;
73472: LD_ADDR_VAR 0 4
73476: PUSH
73477: LD_VAR 0 1
73481: PPUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: CALL_OW 289
73491: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73492: LD_ADDR_VAR 0 2
73496: PUSH
73497: LD_VAR 0 2
73501: PPUSH
73502: LD_VAR 0 3
73506: PPUSH
73507: LD_VAR 0 4
73511: PPUSH
73512: CALL_OW 1
73516: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73517: LD_ADDR_VAR 0 2
73521: PUSH
73522: LD_VAR 0 2
73526: PPUSH
73527: LD_INT 4
73529: PPUSH
73530: LD_VAR 0 2
73534: PUSH
73535: LD_INT 4
73537: ARRAY
73538: PUSH
73539: LD_VAR 0 4
73543: PLUS
73544: PPUSH
73545: CALL_OW 1
73549: ST_TO_ADDR
// end ;
73550: GO 73469
73552: POP
73553: POP
// end ;
73554: LD_VAR 0 2
73558: RET
// export function Length ( array ) ; begin
73559: LD_INT 0
73561: PPUSH
// result := array + 0 ;
73562: LD_ADDR_VAR 0 2
73566: PUSH
73567: LD_VAR 0 1
73571: PUSH
73572: LD_INT 0
73574: PLUS
73575: ST_TO_ADDR
// end ;
73576: LD_VAR 0 2
73580: RET
// export function PrepareArray ( array ) ; begin
73581: LD_INT 0
73583: PPUSH
// result := array diff 0 ;
73584: LD_ADDR_VAR 0 2
73588: PUSH
73589: LD_VAR 0 1
73593: PUSH
73594: LD_INT 0
73596: DIFF
73597: ST_TO_ADDR
// if not result [ 1 ] then
73598: LD_VAR 0 2
73602: PUSH
73603: LD_INT 1
73605: ARRAY
73606: NOT
73607: IFFALSE 73627
// result := Delete ( result , 1 ) ;
73609: LD_ADDR_VAR 0 2
73613: PUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: LD_INT 1
73621: PPUSH
73622: CALL_OW 3
73626: ST_TO_ADDR
// end ;
73627: LD_VAR 0 2
73631: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73632: LD_INT 0
73634: PPUSH
73635: PPUSH
73636: PPUSH
73637: PPUSH
// sibRocketRange := 25 ;
73638: LD_ADDR_VAR 0 6
73642: PUSH
73643: LD_INT 25
73645: ST_TO_ADDR
// result := false ;
73646: LD_ADDR_VAR 0 4
73650: PUSH
73651: LD_INT 0
73653: ST_TO_ADDR
// for i := 0 to 5 do
73654: LD_ADDR_VAR 0 5
73658: PUSH
73659: DOUBLE
73660: LD_INT 0
73662: DEC
73663: ST_TO_ADDR
73664: LD_INT 5
73666: PUSH
73667: FOR_TO
73668: IFFALSE 73735
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73670: LD_VAR 0 1
73674: PPUSH
73675: LD_VAR 0 5
73679: PPUSH
73680: LD_VAR 0 6
73684: PPUSH
73685: CALL_OW 272
73689: PPUSH
73690: LD_VAR 0 2
73694: PPUSH
73695: LD_VAR 0 5
73699: PPUSH
73700: LD_VAR 0 6
73704: PPUSH
73705: CALL_OW 273
73709: PPUSH
73710: LD_VAR 0 3
73714: PPUSH
73715: CALL_OW 309
73719: IFFALSE 73733
// begin result := true ;
73721: LD_ADDR_VAR 0 4
73725: PUSH
73726: LD_INT 1
73728: ST_TO_ADDR
// exit ;
73729: POP
73730: POP
73731: GO 73737
// end ;
73733: GO 73667
73735: POP
73736: POP
// end ;
73737: LD_VAR 0 4
73741: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73742: LD_INT 0
73744: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73745: LD_VAR 0 1
73749: PPUSH
73750: LD_VAR 0 2
73754: PPUSH
73755: LD_INT 0
73757: PPUSH
73758: LD_INT 0
73760: PPUSH
73761: LD_INT 1
73763: PPUSH
73764: LD_INT 0
73766: PPUSH
73767: CALL_OW 587
// end ;
73771: LD_VAR 0 3
73775: RET
// export function CenterOnNow ( unit ) ; begin
73776: LD_INT 0
73778: PPUSH
// result := IsInUnit ( unit ) ;
73779: LD_ADDR_VAR 0 2
73783: PUSH
73784: LD_VAR 0 1
73788: PPUSH
73789: CALL_OW 310
73793: ST_TO_ADDR
// if not result then
73794: LD_VAR 0 2
73798: NOT
73799: IFFALSE 73811
// result := unit ;
73801: LD_ADDR_VAR 0 2
73805: PUSH
73806: LD_VAR 0 1
73810: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73811: LD_VAR 0 1
73815: PPUSH
73816: CALL_OW 87
// end ;
73820: LD_VAR 0 2
73824: RET
// export function ComMoveHex ( unit , hex ) ; begin
73825: LD_INT 0
73827: PPUSH
// if not hex then
73828: LD_VAR 0 2
73832: NOT
73833: IFFALSE 73837
// exit ;
73835: GO 73890
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73837: LD_VAR 0 2
73841: PUSH
73842: LD_INT 1
73844: ARRAY
73845: PPUSH
73846: LD_VAR 0 2
73850: PUSH
73851: LD_INT 2
73853: ARRAY
73854: PPUSH
73855: CALL_OW 428
73859: IFFALSE 73863
// exit ;
73861: GO 73890
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73863: LD_VAR 0 1
73867: PPUSH
73868: LD_VAR 0 2
73872: PUSH
73873: LD_INT 1
73875: ARRAY
73876: PPUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_INT 2
73884: ARRAY
73885: PPUSH
73886: CALL_OW 111
// end ;
73890: LD_VAR 0 3
73894: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
// if not unit or not enemy then
73900: LD_VAR 0 1
73904: NOT
73905: PUSH
73906: LD_VAR 0 2
73910: NOT
73911: OR
73912: IFFALSE 73916
// exit ;
73914: GO 74040
// x := GetX ( enemy ) ;
73916: LD_ADDR_VAR 0 4
73920: PUSH
73921: LD_VAR 0 2
73925: PPUSH
73926: CALL_OW 250
73930: ST_TO_ADDR
// y := GetY ( enemy ) ;
73931: LD_ADDR_VAR 0 5
73935: PUSH
73936: LD_VAR 0 2
73940: PPUSH
73941: CALL_OW 251
73945: ST_TO_ADDR
// if ValidHex ( x , y ) then
73946: LD_VAR 0 4
73950: PPUSH
73951: LD_VAR 0 5
73955: PPUSH
73956: CALL_OW 488
73960: IFFALSE 74040
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73962: LD_VAR 0 2
73966: PPUSH
73967: CALL_OW 247
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: LD_INT 2
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: IN
73982: PUSH
73983: LD_VAR 0 1
73987: PPUSH
73988: CALL_OW 255
73992: PPUSH
73993: LD_VAR 0 2
73997: PPUSH
73998: CALL_OW 292
74002: OR
74003: IFFALSE 74021
// ComAttackUnit ( unit , enemy ) else
74005: LD_VAR 0 1
74009: PPUSH
74010: LD_VAR 0 2
74014: PPUSH
74015: CALL_OW 115
74019: GO 74040
// ComAgressiveMove ( unit , x , y ) ;
74021: LD_VAR 0 1
74025: PPUSH
74026: LD_VAR 0 4
74030: PPUSH
74031: LD_VAR 0 5
74035: PPUSH
74036: CALL_OW 114
// end ;
74040: LD_VAR 0 3
74044: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74045: LD_INT 0
74047: PPUSH
74048: PPUSH
74049: PPUSH
// list := AreaToList ( area , 0 ) ;
74050: LD_ADDR_VAR 0 5
74054: PUSH
74055: LD_VAR 0 1
74059: PPUSH
74060: LD_INT 0
74062: PPUSH
74063: CALL_OW 517
74067: ST_TO_ADDR
// if not list then
74068: LD_VAR 0 5
74072: NOT
74073: IFFALSE 74077
// exit ;
74075: GO 74207
// if all then
74077: LD_VAR 0 2
74081: IFFALSE 74169
// begin for i := 1 to list [ 1 ] do
74083: LD_ADDR_VAR 0 4
74087: PUSH
74088: DOUBLE
74089: LD_INT 1
74091: DEC
74092: ST_TO_ADDR
74093: LD_VAR 0 5
74097: PUSH
74098: LD_INT 1
74100: ARRAY
74101: PUSH
74102: FOR_TO
74103: IFFALSE 74165
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74105: LD_ADDR_VAR 0 3
74109: PUSH
74110: LD_VAR 0 3
74114: PPUSH
74115: LD_VAR 0 3
74119: PUSH
74120: LD_INT 1
74122: PLUS
74123: PPUSH
74124: LD_VAR 0 5
74128: PUSH
74129: LD_INT 1
74131: ARRAY
74132: PUSH
74133: LD_VAR 0 4
74137: ARRAY
74138: PUSH
74139: LD_VAR 0 5
74143: PUSH
74144: LD_INT 2
74146: ARRAY
74147: PUSH
74148: LD_VAR 0 4
74152: ARRAY
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PPUSH
74158: CALL_OW 1
74162: ST_TO_ADDR
74163: GO 74102
74165: POP
74166: POP
// exit ;
74167: GO 74207
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74169: LD_ADDR_VAR 0 3
74173: PUSH
74174: LD_VAR 0 5
74178: PUSH
74179: LD_INT 1
74181: ARRAY
74182: PUSH
74183: LD_INT 1
74185: ARRAY
74186: PUSH
74187: LD_VAR 0 5
74191: PUSH
74192: LD_INT 2
74194: ARRAY
74195: PUSH
74196: LD_INT 1
74198: ARRAY
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: EMPTY
74205: LIST
74206: ST_TO_ADDR
// end ;
74207: LD_VAR 0 3
74211: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74212: LD_INT 0
74214: PPUSH
74215: PPUSH
// list := AreaToList ( area , 0 ) ;
74216: LD_ADDR_VAR 0 4
74220: PUSH
74221: LD_VAR 0 1
74225: PPUSH
74226: LD_INT 0
74228: PPUSH
74229: CALL_OW 517
74233: ST_TO_ADDR
// if not list then
74234: LD_VAR 0 4
74238: NOT
74239: IFFALSE 74243
// exit ;
74241: GO 74284
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74243: LD_ADDR_VAR 0 3
74247: PUSH
74248: LD_VAR 0 4
74252: PUSH
74253: LD_INT 1
74255: ARRAY
74256: PUSH
74257: LD_INT 1
74259: ARRAY
74260: PUSH
74261: LD_VAR 0 4
74265: PUSH
74266: LD_INT 2
74268: ARRAY
74269: PUSH
74270: LD_INT 1
74272: ARRAY
74273: PUSH
74274: LD_VAR 0 2
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: ST_TO_ADDR
// end ;
74284: LD_VAR 0 3
74288: RET
// export function First ( array ) ; begin
74289: LD_INT 0
74291: PPUSH
// if not array then
74292: LD_VAR 0 1
74296: NOT
74297: IFFALSE 74301
// exit ;
74299: GO 74315
// result := array [ 1 ] ;
74301: LD_ADDR_VAR 0 2
74305: PUSH
74306: LD_VAR 0 1
74310: PUSH
74311: LD_INT 1
74313: ARRAY
74314: ST_TO_ADDR
// end ;
74315: LD_VAR 0 2
74319: RET
// export function Last ( array ) ; begin
74320: LD_INT 0
74322: PPUSH
// if not array then
74323: LD_VAR 0 1
74327: NOT
74328: IFFALSE 74332
// exit ;
74330: GO 74348
// result := array [ array ] ;
74332: LD_ADDR_VAR 0 2
74336: PUSH
74337: LD_VAR 0 1
74341: PUSH
74342: LD_VAR 0 1
74346: ARRAY
74347: ST_TO_ADDR
// end ;
74348: LD_VAR 0 2
74352: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74353: LD_INT 0
74355: PPUSH
74356: PPUSH
// result := [ ] ;
74357: LD_ADDR_VAR 0 5
74361: PUSH
74362: EMPTY
74363: ST_TO_ADDR
// if not array then
74364: LD_VAR 0 1
74368: NOT
74369: IFFALSE 74373
// exit ;
74371: GO 74485
// for i := 1 to array do
74373: LD_ADDR_VAR 0 6
74377: PUSH
74378: DOUBLE
74379: LD_INT 1
74381: DEC
74382: ST_TO_ADDR
74383: LD_VAR 0 1
74387: PUSH
74388: FOR_TO
74389: IFFALSE 74483
// if array [ i ] [ index ] = value then
74391: LD_VAR 0 1
74395: PUSH
74396: LD_VAR 0 6
74400: ARRAY
74401: PUSH
74402: LD_VAR 0 2
74406: ARRAY
74407: PUSH
74408: LD_VAR 0 3
74412: EQUAL
74413: IFFALSE 74481
// begin if indexColumn then
74415: LD_VAR 0 4
74419: IFFALSE 74455
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74421: LD_ADDR_VAR 0 5
74425: PUSH
74426: LD_VAR 0 5
74430: PPUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_VAR 0 6
74440: ARRAY
74441: PUSH
74442: LD_VAR 0 4
74446: ARRAY
74447: PPUSH
74448: CALL 69823 0 2
74452: ST_TO_ADDR
74453: GO 74481
// result := Join ( result , array [ i ] ) ;
74455: LD_ADDR_VAR 0 5
74459: PUSH
74460: LD_VAR 0 5
74464: PPUSH
74465: LD_VAR 0 1
74469: PUSH
74470: LD_VAR 0 6
74474: ARRAY
74475: PPUSH
74476: CALL 69823 0 2
74480: ST_TO_ADDR
// end ;
74481: GO 74388
74483: POP
74484: POP
// end ;
74485: LD_VAR 0 5
74489: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74490: LD_INT 0
74492: PPUSH
74493: PPUSH
74494: PPUSH
// if btype = b_depot then
74495: LD_VAR 0 2
74499: PUSH
74500: LD_INT 0
74502: EQUAL
74503: IFFALSE 74515
// begin result := true ;
74505: LD_ADDR_VAR 0 3
74509: PUSH
74510: LD_INT 1
74512: ST_TO_ADDR
// exit ;
74513: GO 74631
// end ; pom := GetBase ( depot ) ;
74515: LD_ADDR_VAR 0 4
74519: PUSH
74520: LD_VAR 0 1
74524: PPUSH
74525: CALL_OW 274
74529: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74530: LD_ADDR_VAR 0 5
74534: PUSH
74535: LD_VAR 0 2
74539: PPUSH
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 248
74549: PPUSH
74550: CALL_OW 450
74554: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74555: LD_ADDR_VAR 0 3
74559: PUSH
74560: LD_VAR 0 4
74564: PPUSH
74565: LD_INT 1
74567: PPUSH
74568: CALL_OW 275
74572: PUSH
74573: LD_VAR 0 5
74577: PUSH
74578: LD_INT 1
74580: ARRAY
74581: GREATEREQUAL
74582: PUSH
74583: LD_VAR 0 4
74587: PPUSH
74588: LD_INT 2
74590: PPUSH
74591: CALL_OW 275
74595: PUSH
74596: LD_VAR 0 5
74600: PUSH
74601: LD_INT 2
74603: ARRAY
74604: GREATEREQUAL
74605: AND
74606: PUSH
74607: LD_VAR 0 4
74611: PPUSH
74612: LD_INT 3
74614: PPUSH
74615: CALL_OW 275
74619: PUSH
74620: LD_VAR 0 5
74624: PUSH
74625: LD_INT 3
74627: ARRAY
74628: GREATEREQUAL
74629: AND
74630: ST_TO_ADDR
// end ;
74631: LD_VAR 0 3
74635: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74636: LD_INT 0
74638: PPUSH
// if not vehicles or not parkingPoint then
74639: LD_VAR 0 1
74643: NOT
74644: PUSH
74645: LD_VAR 0 2
74649: NOT
74650: OR
74651: IFFALSE 74655
// exit ;
74653: GO 74753
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74655: LD_ADDR_VAR 0 1
74659: PUSH
74660: LD_VAR 0 1
74664: PPUSH
74665: LD_INT 50
74667: PUSH
74668: EMPTY
74669: LIST
74670: PUSH
74671: LD_INT 3
74673: PUSH
74674: LD_INT 92
74676: PUSH
74677: LD_VAR 0 2
74681: PUSH
74682: LD_INT 1
74684: ARRAY
74685: PUSH
74686: LD_VAR 0 2
74690: PUSH
74691: LD_INT 2
74693: ARRAY
74694: PUSH
74695: LD_INT 8
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PPUSH
74712: CALL_OW 72
74716: ST_TO_ADDR
// if not vehicles then
74717: LD_VAR 0 1
74721: NOT
74722: IFFALSE 74726
// exit ;
74724: GO 74753
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74726: LD_VAR 0 1
74730: PPUSH
74731: LD_VAR 0 2
74735: PUSH
74736: LD_INT 1
74738: ARRAY
74739: PPUSH
74740: LD_VAR 0 2
74744: PUSH
74745: LD_INT 2
74747: ARRAY
74748: PPUSH
74749: CALL_OW 111
// end ;
74753: LD_VAR 0 3
74757: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
74762: PPUSH
// if not side or not area then
74763: LD_VAR 0 1
74767: NOT
74768: PUSH
74769: LD_VAR 0 2
74773: NOT
74774: OR
74775: IFFALSE 74779
// exit ;
74777: GO 74898
// tmp := AreaToList ( area , 0 ) ;
74779: LD_ADDR_VAR 0 5
74783: PUSH
74784: LD_VAR 0 2
74788: PPUSH
74789: LD_INT 0
74791: PPUSH
74792: CALL_OW 517
74796: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74797: LD_ADDR_VAR 0 4
74801: PUSH
74802: DOUBLE
74803: LD_INT 1
74805: DEC
74806: ST_TO_ADDR
74807: LD_VAR 0 5
74811: PUSH
74812: LD_INT 1
74814: ARRAY
74815: PUSH
74816: FOR_TO
74817: IFFALSE 74896
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74819: LD_VAR 0 5
74823: PUSH
74824: LD_INT 1
74826: ARRAY
74827: PUSH
74828: LD_VAR 0 4
74832: ARRAY
74833: PPUSH
74834: LD_VAR 0 5
74838: PUSH
74839: LD_INT 2
74841: ARRAY
74842: PUSH
74843: LD_VAR 0 4
74847: ARRAY
74848: PPUSH
74849: CALL_OW 351
74853: IFFALSE 74894
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74855: LD_VAR 0 5
74859: PUSH
74860: LD_INT 1
74862: ARRAY
74863: PUSH
74864: LD_VAR 0 4
74868: ARRAY
74869: PPUSH
74870: LD_VAR 0 5
74874: PUSH
74875: LD_INT 2
74877: ARRAY
74878: PUSH
74879: LD_VAR 0 4
74883: ARRAY
74884: PPUSH
74885: LD_VAR 0 1
74889: PPUSH
74890: CALL_OW 244
// end ;
74894: GO 74816
74896: POP
74897: POP
// end ; end_of_file
74898: LD_VAR 0 3
74902: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74903: LD_VAR 0 1
74907: PUSH
74908: LD_INT 200
74910: DOUBLE
74911: GREATEREQUAL
74912: IFFALSE 74920
74914: LD_INT 299
74916: DOUBLE
74917: LESSEQUAL
74918: IFTRUE 74922
74920: GO 74954
74922: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74923: LD_VAR 0 1
74927: PPUSH
74928: LD_VAR 0 2
74932: PPUSH
74933: LD_VAR 0 3
74937: PPUSH
74938: LD_VAR 0 4
74942: PPUSH
74943: LD_VAR 0 5
74947: PPUSH
74948: CALL 27614 0 5
74952: GO 75031
74954: LD_INT 300
74956: DOUBLE
74957: GREATEREQUAL
74958: IFFALSE 74966
74960: LD_INT 399
74962: DOUBLE
74963: LESSEQUAL
74964: IFTRUE 74968
74966: GO 75030
74968: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74969: LD_VAR 0 1
74973: PPUSH
74974: LD_VAR 0 2
74978: PPUSH
74979: LD_VAR 0 3
74983: PPUSH
74984: LD_VAR 0 4
74988: PPUSH
74989: LD_VAR 0 5
74993: PPUSH
74994: LD_VAR 0 6
74998: PPUSH
74999: LD_VAR 0 7
75003: PPUSH
75004: LD_VAR 0 8
75008: PPUSH
75009: LD_VAR 0 9
75013: PPUSH
75014: LD_VAR 0 10
75018: PPUSH
75019: LD_VAR 0 11
75023: PPUSH
75024: CALL 23939 0 11
75028: GO 75031
75030: POP
// end ;
75031: PPOPN 11
75033: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_VAR 0 2
75043: PPUSH
75044: LD_VAR 0 3
75048: PPUSH
75049: LD_VAR 0 4
75053: PPUSH
75054: LD_VAR 0 5
75058: PPUSH
75059: CALL 27350 0 5
// end ; end_of_file
75063: PPOPN 5
75065: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75066: LD_VAR 0 1
75070: PPUSH
75071: LD_VAR 0 2
75075: PPUSH
75076: LD_VAR 0 3
75080: PPUSH
75081: LD_VAR 0 4
75085: PPUSH
75086: LD_VAR 0 5
75090: PPUSH
75091: LD_VAR 0 6
75095: PPUSH
75096: CALL 11591 0 6
// end ;
75100: PPOPN 6
75102: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75103: LD_INT 0
75105: PPUSH
// begin if not units then
75106: LD_VAR 0 1
75110: NOT
75111: IFFALSE 75115
// exit ;
75113: GO 75115
// end ;
75115: PPOPN 7
75117: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75118: CALL 11478 0 0
// end ;
75122: PPOPN 1
75124: END
