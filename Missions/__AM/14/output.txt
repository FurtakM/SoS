// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// PrepareNature ;
 111: CALL 1350 0 0
// PrepareDifficulty ;
 115: CALL 1703 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 873 0 0
// PrepareRussianBase ;
 127: CALL 1113 0 0
// PrepareCommander ;
 131: CALL 1058 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING 13f_JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 1496 0 2
 598: ST_TO_ADDR
// if debugMode then
 599: LD_EXP 16
 603: IFFALSE 618
// JMM := NewCharacter ( JMM ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING JMM
 612: PPUSH
 613: CALL_OW 25
 617: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 95
 625: PPUSH
 626: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 630: LD_EXP 1
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 642: LD_ADDR_EXP 5
 646: PUSH
 647: LD_STRING Powell
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL 1496 0 2
 657: ST_TO_ADDR
// uc_side = 4 ;
 658: LD_ADDR_OWVAR 20
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 666: LD_ADDR_EXP 2
 670: PUSH
 671: LD_STRING 10c_Joan
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 1496 0 2
 681: ST_TO_ADDR
// if Joan then
 682: LD_EXP 2
 686: IFFALSE 725
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 688: LD_EXP 2
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 703: LD_EXP 2
 707: PPUSH
 708: LD_INT 4
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 1 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// end else
 723: GO 782
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_STRING 13s_Lisa
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL 1496 0 2
 740: ST_TO_ADDR
// if Lisa then
 741: LD_EXP 3
 745: IFFALSE 782
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL_OW 336
// JMMGirl = 2 ;
 774: LD_ADDR_EXP 7
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 782: LD_EXP 2
 786: NOT
 787: PUSH
 788: LD_EXP 3
 792: NOT
 793: AND
 794: IFFALSE 844
// begin Connie = NewCharacter ( Coonie ) ;
 796: LD_ADDR_EXP 4
 800: PUSH
 801: LD_STRING Coonie
 803: PPUSH
 804: CALL_OW 25
 808: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 809: LD_EXP 4
 813: PPUSH
 814: LD_INT 4
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: CALL_OW 336
// JMMGirl = 3 ;
 836: LD_ADDR_EXP 7
 840: PUSH
 841: LD_INT 3
 843: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 844: LD_EXP 2
 848: PUSH
 849: LD_EXP 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 140
// end ;
 868: LD_VAR 0 1
 872: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 873: LD_INT 0
 875: PPUSH
 876: PPUSH
 877: PPUSH
// for i = 1 to 5 do
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 5
 890: PUSH
 891: FOR_TO
 892: IFFALSE 1051
// begin vc_engine = rand ( 1 , 3 ) ;
 894: LD_ADDR_OWVAR 39
 898: PUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 3
 904: PPUSH
 905: CALL_OW 12
 909: ST_TO_ADDR
// vc_control = control_remote ;
 910: LD_ADDR_OWVAR 38
 914: PUSH
 915: LD_INT 2
 917: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 918: LD_ADDR_OWVAR 40
 922: PUSH
 923: LD_INT 5
 925: PUSH
 926: LD_INT 12
 928: PUSH
 929: LD_INT 13
 931: PUSH
 932: LD_INT 7
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 4
 948: MOD
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 955: LD_ADDR_OWVAR 37
 959: PUSH
 960: LD_INT 3
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_VAR 0 2
 974: PUSH
 975: LD_INT 2
 977: MOD
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: ARRAY
 983: ST_TO_ADDR
// veh = CreateVehicle ;
 984: LD_ADDR_VAR 0 3
 988: PUSH
 989: CALL_OW 45
 993: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 994: LD_VAR 0 3
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: LD_INT 5
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1014: LD_VAR 0 3
1018: PPUSH
1019: LD_INT 500
1021: PPUSH
1022: LD_INT 1000
1024: PPUSH
1025: CALL_OW 12
1029: PPUSH
1030: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1034: LD_VAR 0 3
1038: PPUSH
1039: LD_INT 15
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end ;
1049: GO 891
1051: POP
1052: POP
// end ; end_of_file
1053: LD_VAR 0 1
1057: RET
// export function PrepareCommander ; begin
1058: LD_INT 0
1060: PPUSH
// uc_side = 3 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 3
1068: ST_TO_ADDR
// uc_nation = 3 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 3
1076: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
1077: LD_ADDR_EXP 6
1081: PUSH
1082: LD_STRING Eisenstein
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL 1496 0 2
1092: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1093: LD_EXP 6
1097: PPUSH
1098: LD_INT 11
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// end ;
1108: LD_VAR 0 1
1112: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1113: LD_INT 0
1115: PPUSH
// uc_nation := 3 ;
1116: LD_ADDR_OWVAR 21
1120: PUSH
1121: LD_INT 3
1123: ST_TO_ADDR
// uc_side := 3 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 3
1131: ST_TO_ADDR
// if Difficulty > 1 then
1132: LD_OWVAR 67
1136: PUSH
1137: LD_INT 1
1139: GREATER
1140: IFFALSE 1200
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PUSH
1151: LD_INT 8
1153: PUSH
1154: LD_INT 9
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// baseGuard := CreateHuman ;
1172: LD_ADDR_EXP 18
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1182: LD_EXP 18
1186: PPUSH
1187: LD_INT 39
1189: PPUSH
1190: LD_INT 67
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1200: LD_INT 116
1202: PPUSH
1203: LD_INT 50
1205: PPUSH
1206: LD_INT 74
1208: PPUSH
1209: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 3
1218: PPUSH
1219: LD_INT 45
1221: PPUSH
1222: LD_INT 10
1224: PPUSH
1225: LD_INT 9
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 10
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 10
1268: PPUSH
1269: LD_INT 3
1271: PPUSH
1272: LD_INT 3
1274: PPUSH
1275: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 3
1284: PPUSH
1285: LD_INT 40
1287: PPUSH
1288: LD_INT 10
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 14
1309: PPUSH
1310: LD_INT 10
1312: PPUSH
1313: LD_INT 4
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 15
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 1593 0 6
// end ; end_of_file
1345: LD_VAR 0 1
1349: RET
// export function PrepareNature ; var i ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
// uc_side := 0 ;
1354: LD_ADDR_OWVAR 20
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_nation := 0 ;
1362: LD_ADDR_OWVAR 21
1366: PUSH
1367: LD_INT 0
1369: ST_TO_ADDR
// hc_class := class_apeman ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 12
1377: ST_TO_ADDR
// hc_gallery :=  ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING 
1385: ST_TO_ADDR
// hc_name :=  ;
1386: LD_ADDR_OWVAR 26
1390: PUSH
1391: LD_STRING 
1393: ST_TO_ADDR
// for i = 1 to 7 do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_INT 7
1406: PUSH
1407: FOR_TO
1408: IFFALSE 1489
// begin hc_class := class_apeman ;
1410: LD_ADDR_OWVAR 28
1414: PUSH
1415: LD_INT 12
1417: ST_TO_ADDR
// hc_gallery :=  ;
1418: LD_ADDR_OWVAR 33
1422: PUSH
1423: LD_STRING 
1425: ST_TO_ADDR
// hc_name :=  ;
1426: LD_ADDR_OWVAR 26
1430: PUSH
1431: LD_STRING 
1433: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1434: LD_ADDR_OWVAR 31
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: LD_INT 0
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1457: LD_ADDR_OWVAR 29
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 10
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1472: CALL_OW 44
1476: PPUSH
1477: LD_INT 16
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ;
1487: GO 1407
1489: POP
1490: POP
// end ;
1491: LD_VAR 0 1
1495: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
// if exist_mode then
1500: LD_VAR 0 2
1504: IFFALSE 1523
// begin unit := CreateCharacter ( ident ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 1
1515: PPUSH
1516: CALL_OW 34
1520: ST_TO_ADDR
// end else
1521: GO 1538
// begin unit := NewCharacter ( ident ) ;
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 25
1537: ST_TO_ADDR
// end ; result := unit ;
1538: LD_ADDR_VAR 0 3
1542: PUSH
1543: LD_VAR 0 4
1547: ST_TO_ADDR
// end ;
1548: LD_VAR 0 3
1552: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
// for i in charactersList do
1557: LD_ADDR_VAR 0 4
1561: PUSH
1562: LD_VAR 0 1
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1586
// SaveCharacters ( i , ident ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 38
1584: GO 1567
1586: POP
1587: POP
// end ;
1588: LD_VAR 0 3
1592: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1593: LD_INT 0
1595: PPUSH
1596: PPUSH
1597: PPUSH
1598: PPUSH
// for i = 1 to count do
1599: LD_ADDR_VAR 0 8
1603: PUSH
1604: DOUBLE
1605: LD_INT 1
1607: DEC
1608: ST_TO_ADDR
1609: LD_VAR 0 6
1613: PUSH
1614: FOR_TO
1615: IFFALSE 1696
// begin uc_side = side ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_VAR 0 1
1626: ST_TO_ADDR
// uc_nation = nation ;
1627: LD_ADDR_OWVAR 21
1631: PUSH
1632: LD_VAR 0 2
1636: ST_TO_ADDR
// hc_gallery =  ;
1637: LD_ADDR_OWVAR 33
1641: PUSH
1642: LD_STRING 
1644: ST_TO_ADDR
// hc_name =  ;
1645: LD_ADDR_OWVAR 26
1649: PUSH
1650: LD_STRING 
1652: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1653: LD_INT 0
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: CALL_OW 380
// un = CreateHuman ;
1670: LD_ADDR_VAR 0 10
1674: PUSH
1675: CALL_OW 44
1679: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1680: LD_VAR 0 10
1684: PPUSH
1685: LD_VAR 0 3
1689: PPUSH
1690: CALL_OW 52
// end ;
1694: GO 1614
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 7
1702: RET
// export function PrepareDifficulty ; begin
1703: LD_INT 0
1705: PPUSH
// if difficulty = 1 then
1706: LD_OWVAR 67
1710: PUSH
1711: LD_INT 1
1713: EQUAL
1714: IFFALSE 1794
// begin SetTech ( 57 , 3 , state_disabled ) ;
1716: LD_INT 57
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1729: LD_INT 58
1731: PPUSH
1732: LD_INT 3
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1742: LD_INT 59
1744: PPUSH
1745: LD_INT 3
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1755: LD_INT 51
1757: PPUSH
1758: LD_INT 3
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1768: LD_INT 52
1770: PPUSH
1771: LD_INT 3
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1781: LD_INT 53
1783: PPUSH
1784: LD_INT 3
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 322
// end ; if difficulty = 2 then
1794: LD_OWVAR 67
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1882
// begin SetTech ( 57 , 3 , state_enabled ) ;
1804: LD_INT 57
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1817: LD_INT 58
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1830: LD_INT 59
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1843: LD_INT 51
1845: PPUSH
1846: LD_INT 3
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1856: LD_INT 52
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1869: LD_INT 53
1871: PPUSH
1872: LD_INT 3
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 322
// end ; if difficulty = 3 then
1882: LD_OWVAR 67
1886: PUSH
1887: LD_INT 3
1889: EQUAL
1890: IFFALSE 1970
// begin SetTech ( 57 , 3 , state_enabled ) ;
1892: LD_INT 57
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1905: LD_INT 58
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1918: LD_INT 59
1920: PPUSH
1921: LD_INT 3
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1931: LD_INT 51
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1944: LD_INT 52
1946: PPUSH
1947: LD_INT 3
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1957: LD_INT 53
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 322
// end ; end ;
1970: LD_VAR 0 1
1974: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1982: LD_ADDR_VAR 0 8
1986: PUSH
1987: LD_INT 48
1989: PUSH
1990: LD_INT 49
1992: PUSH
1993: LD_INT 50
1995: PUSH
1996: LD_INT 20
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 69
2004: PUSH
2005: LD_INT 39
2007: PUSH
2008: LD_INT 34
2010: PUSH
2011: LD_INT 40
2013: PUSH
2014: LD_INT 71
2016: PUSH
2017: LD_INT 57
2019: PUSH
2020: LD_INT 58
2022: PUSH
2023: LD_INT 44
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: LD_INT 27
2031: PUSH
2032: LD_INT 23
2034: PUSH
2035: LD_INT 33
2037: PUSH
2038: LD_INT 54
2040: PUSH
2041: LD_INT 55
2043: PUSH
2044: LD_INT 56
2046: PUSH
2047: LD_INT 63
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: LD_INT 65
2055: PUSH
2056: LD_INT 30
2058: PUSH
2059: LD_INT 31
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 25
2070: PUSH
2071: LD_INT 51
2073: PUSH
2074: LD_INT 52
2076: PUSH
2077: LD_INT 59
2079: PUSH
2080: LD_INT 53
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2117: LD_ADDR_VAR 0 5
2121: PUSH
2122: DOUBLE
2123: LD_INT 1
2125: DEC
2126: ST_TO_ADDR
2127: LD_VAR 0 8
2131: PUSH
2132: FOR_TO
2133: IFFALSE 2209
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2135: LD_VAR 0 8
2139: PUSH
2140: LD_VAR 0 5
2144: ARRAY
2145: PPUSH
2146: LD_VAR 0 1
2150: PPUSH
2151: CALL_OW 321
2155: PUSH
2156: LD_INT 1
2158: EQUAL
2159: PUSH
2160: LD_VAR 0 8
2164: PUSH
2165: LD_VAR 0 5
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 3
2175: PPUSH
2176: CALL_OW 482
2180: PUSH
2181: LD_INT 1
2183: EQUAL
2184: AND
2185: IFFALSE 2207
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 8
2196: PUSH
2197: LD_VAR 0 5
2201: ARRAY
2202: PPUSH
2203: CALL_OW 184
2207: GO 2132
2209: POP
2210: POP
// end ;
2211: LD_VAR 0 4
2215: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2216: LD_INT 0
2218: PPUSH
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_VAR 0 2
2233: PPUSH
2234: CALL_OW 313
2238: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 24
2273: PUSH
2274: LD_INT 750
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 54
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 70
2304: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 3
2314: PPUSH
2315: LD_INT 22
2317: PUSH
2318: LD_VAR 0 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 21
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 24
2342: PUSH
2343: LD_INT 1000
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: PPUSH
2362: CALL_OW 70
2366: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2367: LD_VAR 0 6
2371: NOT
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_VAR 0 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 2
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 24
2397: PUSH
2398: LD_INT 250
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PPUSH
2410: CALL_OW 69
2414: NOT
2415: AND
2416: IFFALSE 2420
// exit ;
2418: GO 2602
// if buildings_list > 0 and engineerOkInside then
2420: LD_VAR 0 6
2424: PUSH
2425: LD_INT 0
2427: GREATER
2428: PUSH
2429: LD_VAR 0 8
2433: AND
2434: IFFALSE 2445
// ComExitBuilding ( engineerOkInside ) ;
2436: LD_VAR 0 8
2440: PPUSH
2441: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2445: LD_VAR 0 6
2449: PUSH
2450: LD_INT 0
2452: GREATER
2453: PUSH
2454: LD_VAR 0 9
2458: PUSH
2459: LD_INT 0
2461: GREATER
2462: AND
2463: IFFALSE 2483
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2465: LD_VAR 0 9
2469: PPUSH
2470: LD_VAR 0 6
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2483: LD_VAR 0 6
2487: PUSH
2488: LD_INT 0
2490: EQUAL
2491: PUSH
2492: LD_VAR 0 4
2496: PUSH
2497: LD_INT 0
2499: EQUAL
2500: AND
2501: PUSH
2502: LD_VAR 0 9
2506: PUSH
2507: LD_INT 0
2509: GREATER
2510: AND
2511: IFFALSE 2527
// ComEnterUnit ( engineerOkOutside , building ) ;
2513: LD_VAR 0 9
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2527: LD_VAR 0 9
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_VAR 0 6
2540: PUSH
2541: LD_INT 0
2543: EQUAL
2544: AND
2545: PUSH
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 0
2553: GREATER
2554: AND
2555: IFFALSE 2602
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2557: LD_VAR 0 9
2561: PPUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 3
2587: ARRAY
2588: PPUSH
2589: LD_VAR 0 4
2593: PUSH
2594: LD_INT 4
2596: ARRAY
2597: PPUSH
2598: CALL_OW 145
// end ;
2602: LD_VAR 0 5
2606: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2607: LD_INT 0
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2618: LD_ADDR_VAR 0 6
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 4
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 23
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 24
2657: PUSH
2658: LD_INT 251
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2676: LD_ADDR_VAR 0 7
2680: PUSH
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 23
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 25
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 50
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 70
2734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2735: LD_ADDR_VAR 0 10
2739: PUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 22
2747: PUSH
2748: LD_VAR 0 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 21
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 25
2772: PUSH
2773: LD_INT 3
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 24
2789: PUSH
2790: LD_INT 750
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 70
2811: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2812: LD_ADDR_VAR 0 11
2816: PUSH
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 22
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 21
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 3
2846: PUSH
2847: LD_INT 25
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 24
2866: PUSH
2867: LD_INT 1000
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PPUSH
2884: CALL_OW 70
2888: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2889: LD_VAR 0 10
2893: NOT
2894: PUSH
2895: LD_VAR 0 11
2899: NOT
2900: AND
2901: PUSH
2902: LD_VAR 0 6
2906: NOT
2907: AND
2908: IFFALSE 2912
// exit ;
2910: GO 3146
// if damageUnits > 0 and sci_list > 0 then
2912: LD_VAR 0 10
2916: PUSH
2917: LD_INT 0
2919: GREATER
2920: PUSH
2921: LD_VAR 0 6
2925: PUSH
2926: LD_INT 0
2928: GREATER
2929: AND
2930: IFFALSE 2946
// ComMoveToArea ( damageUnits , healArea ) ;
2932: LD_VAR 0 10
2936: PPUSH
2937: LD_VAR 0 2
2941: PPUSH
2942: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2946: LD_VAR 0 11
2950: PUSH
2951: LD_INT 0
2953: GREATER
2954: PUSH
2955: LD_VAR 0 6
2959: PUSH
2960: LD_INT 0
2962: GREATER
2963: AND
2964: IFFALSE 2975
// ComExitBuilding ( sci_list ) ;
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2975: LD_VAR 0 11
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: PUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 0
2991: GREATER
2992: AND
2993: IFFALSE 3013
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2995: LD_VAR 0 7
2999: PPUSH
3000: LD_VAR 0 11
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3013: LD_VAR 0 10
3017: PUSH
3018: LD_INT 0
3020: EQUAL
3021: PUSH
3022: LD_VAR 0 11
3026: PUSH
3027: LD_INT 0
3029: EQUAL
3030: AND
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: LD_INT 0
3039: GREATER
3040: AND
3041: IFFALSE 3146
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3043: LD_ADDR_VAR 0 12
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_VAR 0 1
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 30
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3090: LD_ADDR_VAR 0 13
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 12
3102: PPUSH
3103: CALL_OW 12
3107: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3108: LD_VAR 0 7
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 60
3118: PUSH
3119: EMPTY
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 72
3130: PPUSH
3131: LD_VAR 0 12
3135: PUSH
3136: LD_VAR 0 13
3140: ARRAY
3141: PPUSH
3142: CALL_OW 120
// end ; end ;
3146: LD_VAR 0 5
3150: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// tmpTab = [ ] ;
3157: LD_ADDR_VAR 0 6
3161: PUSH
3162: EMPTY
3163: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3164: LD_INT 22
3166: PUSH
3167: LD_VAR 0 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 30
3178: PUSH
3179: LD_INT 32
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: PUSH
3195: LD_INT 0
3197: GREATER
3198: IFFALSE 3281
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_VAR 0 1
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 30
3219: PUSH
3220: LD_INT 32
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PPUSH
3231: CALL_OW 69
3235: PUSH
3236: FOR_IN
3237: IFFALSE 3279
// begin for j in UnitsInside ( i ) do
3239: LD_ADDR_VAR 0 5
3243: PUSH
3244: LD_VAR 0 4
3248: PPUSH
3249: CALL_OW 313
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3275
// tmpTab = tmpTab ^ j ;
3257: LD_ADDR_VAR 0 6
3261: PUSH
3262: LD_VAR 0 6
3266: PUSH
3267: LD_VAR 0 5
3271: ADD
3272: ST_TO_ADDR
3273: GO 3254
3275: POP
3276: POP
// end ;
3277: GO 3236
3279: POP
3280: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3281: LD_VAR 0 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL_OW 250
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: CALL_OW 251
3305: PPUSH
3306: CALL_OW 114
// end ;
3310: LD_VAR 0 3
3314: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3315: LD_INT 0
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// enable ;
3321: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3322: LD_ADDR_VAR 0 7
3326: PUSH
3327: LD_VAR 0 3
3331: PPUSH
3332: CALL_OW 435
3336: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_VAR 0 1
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 34
3356: PUSH
3357: LD_VAR 0 2
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3375: LD_VAR 0 6
3379: PUSH
3380: LD_INT 0
3382: GREATER
3383: PUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 435
3393: AND
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_INT 0
3402: GREATER
3403: AND
3404: IFFALSE 3453
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3406: LD_VAR 0 6
3410: PUSH
3411: LD_INT 1
3413: ARRAY
3414: PPUSH
3415: LD_VAR 0 7
3419: PUSH
3420: LD_INT 1
3422: ARRAY
3423: PPUSH
3424: LD_VAR 0 7
3428: PUSH
3429: LD_INT 2
3431: ARRAY
3432: PPUSH
3433: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3437: LD_VAR 0 6
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 100
3448: PPUSH
3449: CALL_OW 240
// end ; end ;
3453: LD_VAR 0 4
3457: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
// for i = 1 to vehCount do
3462: LD_ADDR_VAR 0 9
3466: PUSH
3467: DOUBLE
3468: LD_INT 1
3470: DEC
3471: ST_TO_ADDR
3472: LD_VAR 0 3
3476: PUSH
3477: FOR_TO
3478: IFFALSE 3525
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3480: LD_VAR 0 2
3484: PPUSH
3485: LD_VAR 0 7
3489: PPUSH
3490: LD_VAR 0 5
3494: PPUSH
3495: LD_VAR 0 6
3499: PPUSH
3500: LD_VAR 0 4
3504: PUSH
3505: LD_INT 1
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: CALL_OW 12
3517: ARRAY
3518: PPUSH
3519: CALL_OW 185
3523: GO 3477
3525: POP
3526: POP
// end ;
3527: LD_VAR 0 8
3531: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3540: LD_ADDR_VAR 0 6
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 9
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3576: LD_ADDR_VAR 0 7
3580: PUSH
3581: LD_INT 81
3583: PUSH
3584: LD_VAR 0 1
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 3
3595: PUSH
3596: LD_INT 21
3598: PUSH
3599: LD_INT 3
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PPUSH
3614: CALL_OW 69
3618: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3619: LD_ADDR_VAR 0 4
3623: PUSH
3624: LD_INT 1
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: CALL_OW 12
3634: ST_TO_ADDR
// for i = 1 to list do
3635: LD_ADDR_VAR 0 5
3639: PUSH
3640: DOUBLE
3641: LD_INT 1
3643: DEC
3644: ST_TO_ADDR
3645: LD_VAR 0 6
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3853
// for ta in filter do
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_VAR 0 7
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3849
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3666: LD_VAR 0 6
3670: PUSH
3671: LD_VAR 0 5
3675: ARRAY
3676: PPUSH
3677: LD_VAR 0 3
3681: PPUSH
3682: CALL_OW 296
3686: PUSH
3687: LD_INT 15
3689: LESSEQUAL
3690: IFFALSE 3847
// begin case c of 1 :
3692: LD_VAR 0 4
3696: PUSH
3697: LD_INT 1
3699: DOUBLE
3700: EQUAL
3701: IFTRUE 3705
3703: GO 3743
3705: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3706: LD_VAR 0 6
3710: PUSH
3711: LD_VAR 0 5
3715: ARRAY
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 250
3726: PPUSH
3727: LD_VAR 0 3
3731: PPUSH
3732: CALL_OW 251
3736: PPUSH
3737: CALL_OW 154
3741: GO 3847
3743: LD_INT 2
3745: DOUBLE
3746: EQUAL
3747: IFTRUE 3751
3749: GO 3815
3751: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3752: LD_VAR 0 6
3756: PUSH
3757: LD_VAR 0 5
3761: ARRAY
3762: PPUSH
3763: LD_VAR 0 3
3767: PPUSH
3768: CALL_OW 250
3772: PUSH
3773: LD_INT 1
3775: NEG
3776: PPUSH
3777: LD_INT 1
3779: PPUSH
3780: CALL_OW 12
3784: PLUS
3785: PPUSH
3786: LD_VAR 0 3
3790: PPUSH
3791: CALL_OW 251
3795: PUSH
3796: LD_INT 1
3798: NEG
3799: PPUSH
3800: LD_INT 1
3802: PPUSH
3803: CALL_OW 12
3807: PLUS
3808: PPUSH
3809: CALL_OW 153
3813: GO 3847
3815: LD_INT 3
3817: DOUBLE
3818: EQUAL
3819: IFTRUE 3823
3821: GO 3846
3823: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3824: LD_VAR 0 6
3828: PUSH
3829: LD_VAR 0 5
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 3
3839: PPUSH
3840: CALL_OW 115
3844: GO 3847
3846: POP
// end ; end ;
3847: GO 3663
3849: POP
3850: POP
3851: GO 3650
3853: POP
3854: POP
// end ;
3855: LD_VAR 0 2
3859: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3860: LD_INT 0
3862: PPUSH
3863: PPUSH
3864: PPUSH
3865: PPUSH
3866: PPUSH
3867: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3868: LD_ADDR_VAR 0 7
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 22
3880: PUSH
3881: LD_VAR 0 1
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 21
3892: PUSH
3893: LD_INT 2
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 34
3902: PUSH
3903: LD_INT 52
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: PPUSH
3915: CALL_OW 70
3919: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3920: LD_ADDR_VAR 0 8
3924: PUSH
3925: LD_VAR 0 2
3929: PPUSH
3930: LD_INT 22
3932: PUSH
3933: LD_VAR 0 1
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 21
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: LD_INT 24
3957: PUSH
3958: LD_INT 1000
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: PPUSH
3977: CALL_OW 70
3981: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
3982: LD_VAR 0 8
3986: PUSH
3987: LD_INT 0
3989: GREATER
3990: PUSH
3991: LD_VAR 0 7
3995: PPUSH
3996: LD_INT 24
3998: PUSH
3999: LD_INT 750
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 72
4010: PUSH
4011: LD_INT 0
4013: GREATER
4014: AND
4015: IFFALSE 4035
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4017: LD_VAR 0 7
4021: PPUSH
4022: LD_VAR 0 8
4026: PUSH
4027: LD_INT 1
4029: ARRAY
4030: PPUSH
4031: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4035: LD_VAR 0 7
4039: PUSH
4040: LD_INT 0
4042: GREATER
4043: PUSH
4044: LD_VAR 0 8
4048: PUSH
4049: LD_INT 0
4051: EQUAL
4052: AND
4053: PUSH
4054: LD_EXP 10
4058: PUSH
4059: LD_INT 0
4061: GREATER
4062: AND
4063: IFFALSE 4110
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4065: LD_VAR 0 7
4069: PPUSH
4070: LD_EXP 10
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_EXP 10
4083: PUSH
4084: LD_INT 2
4086: ARRAY
4087: PPUSH
4088: LD_EXP 10
4092: PUSH
4093: LD_INT 3
4095: ARRAY
4096: PPUSH
4097: LD_EXP 10
4101: PUSH
4102: LD_INT 4
4104: ARRAY
4105: PPUSH
4106: CALL_OW 567
// end ; end_of_file
4110: LD_VAR 0 3
4114: RET
// every 0 0$1 do
4115: GO 4117
4117: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4118: LD_INT 3
4120: PPUSH
4121: LD_INT 14
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: CALL 1975 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4131: LD_INT 3
4133: PPUSH
4134: LD_INT 15
4136: PPUSH
4137: LD_INT 3
4139: PPUSH
4140: CALL 1975 0 3
// end ;
4144: END
// every 0 0$1 trigger russianAI = 1 do
4145: LD_EXP 13
4149: PUSH
4150: LD_INT 1
4152: EQUAL
4153: IFFALSE 4242
4155: GO 4157
4157: DISABLE
// begin enable ;
4158: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4159: LD_INT 3
4161: PPUSH
4162: LD_INT 22
4164: PPUSH
4165: LD_INT 7
4167: PPUSH
4168: LD_EXP 10
4172: PPUSH
4173: CALL 2216 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 8
4182: PPUSH
4183: LD_INT 7
4185: PPUSH
4186: LD_INT 14
4188: PUSH
4189: LD_INT 15
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 1
4198: PPUSH
4199: LD_INT 2
4201: PPUSH
4202: CALL_OW 12
4206: ARRAY
4207: PPUSH
4208: CALL 2607 0 4
// IntBazooka ( 3 ) ;
4212: LD_INT 3
4214: PPUSH
4215: CALL 3532 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 51
4224: PPUSH
4225: LD_INT 14
4227: PPUSH
4228: CALL 3315 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4232: LD_INT 3
4234: PPUSH
4235: LD_INT 7
4237: PPUSH
4238: CALL 3860 0 2
// end ;
4242: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4243: LD_EXP 11
4247: PUSH
4248: LD_INT 3
4250: PUSH
4251: LD_INT 4
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: LIST
4261: PUSH
4262: LD_OWVAR 67
4266: ARRAY
4267: GREATEREQUAL
4268: PUSH
4269: LD_EXP 12
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: PUSH
4288: LD_OWVAR 67
4292: ARRAY
4293: GREATEREQUAL
4294: AND
4295: IFFALSE 4753
4297: GO 4299
4299: DISABLE
4300: LD_INT 0
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
// begin enable ;
4306: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4307: LD_ADDR_VAR 0 2
4311: PUSH
4312: LD_EXP 11
4316: PUSH
4317: LD_EXP 12
4321: UNION
4322: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4323: LD_ADDR_EXP 11
4327: PUSH
4328: LD_EXP 11
4332: PUSH
4333: LD_VAR 0 2
4337: DIFF
4338: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4339: LD_ADDR_EXP 12
4343: PUSH
4344: LD_EXP 12
4348: PUSH
4349: LD_VAR 0 2
4353: DIFF
4354: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4355: LD_INT 116
4357: PPUSH
4358: CALL_OW 302
4362: IFFALSE 4431
// begin for j in tmp do
4364: LD_ADDR_VAR 0 1
4368: PUSH
4369: LD_VAR 0 2
4373: PUSH
4374: FOR_IN
4375: IFFALSE 4422
// if j mod 3 = 0 then
4377: LD_VAR 0 1
4381: PUSH
4382: LD_INT 3
4384: MOD
4385: PUSH
4386: LD_INT 0
4388: EQUAL
4389: IFFALSE 4405
// ComEnterUnit ( j , ruTeleport ) else
4391: LD_VAR 0 1
4395: PPUSH
4396: LD_INT 116
4398: PPUSH
4399: CALL_OW 120
4403: GO 4420
// ComAgressiveMove ( j , 117 , 92 ) ;
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_INT 117
4412: PPUSH
4413: LD_INT 92
4415: PPUSH
4416: CALL_OW 114
4420: GO 4374
4422: POP
4423: POP
// wait ( 0 0$8 ) ;
4424: LD_INT 280
4426: PPUSH
4427: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4431: LD_INT 35
4433: PPUSH
4434: CALL_OW 67
// for j in tmp do
4438: LD_ADDR_VAR 0 1
4442: PUSH
4443: LD_VAR 0 2
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4744
// begin if IsDead ( j ) then
4451: LD_VAR 0 1
4455: PPUSH
4456: CALL_OW 301
4460: IFFALSE 4478
// tmp := tmp diff j ;
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_VAR 0 2
4471: PUSH
4472: LD_VAR 0 1
4476: DIFF
4477: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4478: LD_ADDR_VAR 0 3
4482: PUSH
4483: LD_INT 81
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 69
4497: PPUSH
4498: LD_VAR 0 1
4502: PPUSH
4503: CALL_OW 74
4507: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4508: LD_ADDR_VAR 0 4
4512: PUSH
4513: LD_INT 81
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: PPUSH
4545: LD_VAR 0 1
4549: PPUSH
4550: CALL_OW 74
4554: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL_OW 264
4564: PUSH
4565: LD_INT 49
4567: EQUAL
4568: IFFALSE 4676
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
4570: LD_VAR 0 2
4574: PPUSH
4575: LD_INT 3
4577: PUSH
4578: LD_INT 34
4580: PUSH
4581: LD_INT 49
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 72
4596: PUSH
4597: LD_INT 1
4599: GREATER
4600: IFFALSE 4650
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4602: LD_VAR 0 1
4606: PPUSH
4607: LD_VAR 0 2
4611: PPUSH
4612: LD_INT 3
4614: PUSH
4615: LD_INT 34
4617: PUSH
4618: LD_INT 49
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PPUSH
4629: CALL_OW 72
4633: PPUSH
4634: LD_VAR 0 1
4638: PPUSH
4639: CALL_OW 74
4643: PPUSH
4644: CALL_OW 112
4648: GO 4674
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4650: LD_VAR 0 1
4654: PPUSH
4655: LD_VAR 0 3
4659: PPUSH
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 74
4669: PPUSH
4670: CALL_OW 112
// end else
4674: GO 4742
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4676: LD_VAR 0 1
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 296
4690: PUSH
4691: LD_VAR 0 1
4695: PPUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: CALL_OW 296
4705: PUSH
4706: LD_INT 2
4708: PLUS
4709: LESS
4710: IFFALSE 4728
// ComAttackUnit ( j , target2 ) else
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 4
4721: PPUSH
4722: CALL_OW 115
4726: GO 4742
// ComAttackUnit ( j , target1 ) ;
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_VAR 0 3
4737: PPUSH
4738: CALL_OW 115
// end ; end ;
4742: GO 4448
4744: POP
4745: POP
// until not tmp ;
4746: LD_VAR 0 2
4750: NOT
4751: IFFALSE 4431
// end ;
4753: PPOPN 4
4755: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4756: LD_INT 22
4758: PPUSH
4759: CALL_OW 303
4763: PUSH
4764: LD_INT 22
4766: PPUSH
4767: CALL_OW 255
4771: PUSH
4772: LD_INT 1
4774: EQUAL
4775: OR
4776: IFFALSE 4791
4778: GO 4780
4780: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4781: LD_INT 3
4783: PPUSH
4784: LD_INT 22
4786: PPUSH
4787: CALL 3151 0 2
4791: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4792: LD_EXP 13
4796: PUSH
4797: LD_INT 1
4799: EQUAL
4800: PUSH
4801: LD_INT 22
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 21
4813: PUSH
4814: LD_INT 2
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 50
4823: PUSH
4824: EMPTY
4825: LIST
4826: PUSH
4827: LD_INT 33
4829: PUSH
4830: LD_INT 3
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 34
4842: PUSH
4843: LD_INT 46
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 34
4852: PUSH
4853: LD_INT 45
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 34
4862: PUSH
4863: LD_INT 44
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 34
4872: PUSH
4873: LD_INT 49
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 34
4882: PUSH
4883: LD_INT 47
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 69
4909: PUSH
4910: LD_INT 3
4912: LESS
4913: AND
4914: IFFALSE 5101
4916: GO 4918
4918: DISABLE
// begin enable ;
4919: ENABLE
// if russianRocketsAvalaible = 1 then
4920: LD_EXP 14
4924: PUSH
4925: LD_INT 1
4927: EQUAL
4928: IFFALSE 4985
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4930: LD_INT 3
4932: PPUSH
4933: LD_INT 1
4935: PPUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: LD_OWVAR 67
4954: ARRAY
4955: PPUSH
4956: LD_INT 46
4958: PUSH
4959: LD_INT 45
4961: PUSH
4962: LD_INT 44
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PPUSH
4970: LD_INT 3
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: LD_INT 24
4978: PPUSH
4979: CALL 3458 0 7
4983: GO 5042
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 3
4993: PUSH
4994: LD_INT 4
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: PUSH
5005: LD_OWVAR 67
5009: ARRAY
5010: PPUSH
5011: LD_INT 46
5013: PUSH
5014: LD_INT 45
5016: PUSH
5017: LD_INT 44
5019: PUSH
5020: LD_INT 47
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: PPUSH
5029: LD_INT 3
5031: PPUSH
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 24
5037: PPUSH
5038: CALL 3458 0 7
// if russianTimeLapsers = 0 then
5042: LD_EXP 12
5046: PUSH
5047: LD_INT 0
5049: EQUAL
5050: IFFALSE 5101
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5052: LD_INT 3
5054: PPUSH
5055: LD_INT 40
5057: PPUSH
5058: LD_INT 1
5060: PUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PUSH
5072: LD_OWVAR 67
5076: ARRAY
5077: PPUSH
5078: LD_INT 49
5080: PUSH
5081: LD_INT 49
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 3
5093: PPUSH
5094: LD_INT 24
5096: PPUSH
5097: CALL 3458 0 7
// end ;
5101: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5102: LD_EXP 18
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 21
5119: PUSH
5120: LD_INT 2
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 58
5129: PUSH
5130: EMPTY
5131: LIST
5132: PUSH
5133: LD_INT 33
5135: PUSH
5136: LD_INT 1
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 91
5145: PUSH
5146: LD_EXP 18
5150: PUSH
5151: LD_INT 45
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: AND
5171: IFFALSE 5275
5173: GO 5175
5175: DISABLE
// begin wait ( 0 0$5 ) ;
5176: LD_INT 175
5178: PPUSH
5179: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5183: LD_EXP 18
5187: PPUSH
5188: LD_INT 22
5190: PUSH
5191: LD_INT 1
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 21
5200: PUSH
5201: LD_INT 2
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 58
5210: PUSH
5211: EMPTY
5212: LIST
5213: PUSH
5214: LD_INT 33
5216: PUSH
5217: LD_INT 1
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 91
5226: PUSH
5227: LD_EXP 18
5231: PUSH
5232: LD_INT 45
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 69
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5260: LD_EXP 18
5264: PPUSH
5265: LD_INT 127
5267: PPUSH
5268: LD_INT 63
5270: PPUSH
5271: CALL_OW 171
// end ; end_of_file
5275: END
// every 1 do var dec1 , dec2 ;
5276: GO 5278
5278: DISABLE
5279: LD_INT 0
5281: PPUSH
5282: PPUSH
// begin InGameOn ;
5283: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5287: LD_INT 48
5289: PPUSH
5290: LD_STRING deltakappa
5292: PPUSH
5293: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5297: LD_INT 95
5299: PPUSH
5300: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5304: LD_INT 95
5306: PPUSH
5307: LD_INT 30
5309: PPUSH
5310: LD_INT 11
5312: PPUSH
5313: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5317: LD_INT 30
5319: PPUSH
5320: LD_INT 11
5322: PPUSH
5323: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5327: LD_EXP 5
5331: PPUSH
5332: LD_STRING D1-Pow-1
5334: PPUSH
5335: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5339: LD_EXP 1
5343: PPUSH
5344: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5348: LD_EXP 1
5352: PPUSH
5353: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5357: LD_EXP 1
5361: PPUSH
5362: LD_STRING D1-JMM-1
5364: PPUSH
5365: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5369: LD_EXP 5
5373: PPUSH
5374: LD_STRING D1-Pow-2
5376: PPUSH
5377: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5381: LD_EXP 1
5385: PPUSH
5386: LD_STRING D1-JMM-2
5388: PPUSH
5389: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5393: LD_EXP 1
5397: PPUSH
5398: LD_INT 95
5400: PPUSH
5401: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5405: LD_STRING M1
5407: PPUSH
5408: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5412: LD_INT 35
5414: PPUSH
5415: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5419: LD_EXP 1
5423: PPUSH
5424: LD_INT 95
5426: PPUSH
5427: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5431: LD_INT 95
5433: PPUSH
5434: LD_INT 51
5436: PPUSH
5437: LD_INT 21
5439: PPUSH
5440: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5444: LD_INT 95
5446: PPUSH
5447: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5451: LD_INT 95
5453: PPUSH
5454: LD_INT 5
5456: PPUSH
5457: CALL_OW 308
5461: IFFALSE 5412
// if JMMGirl = 1 then
5463: LD_EXP 7
5467: PUSH
5468: LD_INT 1
5470: EQUAL
5471: IFFALSE 5784
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5473: LD_EXP 2
5477: PPUSH
5478: LD_STRING D2J-Joan-1
5480: PPUSH
5481: CALL_OW 94
// dec1 = query ( Q1 ) ;
5485: LD_ADDR_VAR 0 1
5489: PUSH
5490: LD_STRING Q1
5492: PPUSH
5493: CALL_OW 97
5497: ST_TO_ADDR
// if dec1 = 1 then
5498: LD_VAR 0 1
5502: PUSH
5503: LD_INT 1
5505: EQUAL
5506: IFFALSE 5760
// begin ComExitVehicle ( JMM ) ;
5508: LD_EXP 1
5512: PPUSH
5513: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5517: LD_EXP 1
5521: PPUSH
5522: LD_STRING D2J-JMM-1
5524: PPUSH
5525: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5529: LD_EXP 2
5533: PPUSH
5534: LD_STRING D2J-Joan-2
5536: PPUSH
5537: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5541: LD_EXP 1
5545: PPUSH
5546: LD_STRING D2J-JMM-2
5548: PPUSH
5549: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5553: LD_EXP 2
5557: PPUSH
5558: LD_STRING D2J-Joan-3
5560: PPUSH
5561: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5565: LD_EXP 5
5569: PPUSH
5570: LD_STRING DPowell-Pow-1
5572: PPUSH
5573: CALL_OW 94
// dec2 = query ( Q2J ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_STRING Q2J
5584: PPUSH
5585: CALL_OW 97
5589: ST_TO_ADDR
// if dec2 = 1 then
5590: LD_VAR 0 2
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5640
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5600: LD_EXP 1
5604: PPUSH
5605: LD_STRING D2Ja-JMM-1
5607: PPUSH
5608: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5612: LD_EXP 2
5616: PPUSH
5617: LD_STRING D2Ja-Joan-1
5619: PPUSH
5620: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5624: LD_EXP 1
5628: PPUSH
5629: LD_STRING D2Ja-JMM-2
5631: PPUSH
5632: CALL_OW 88
// InGameOff ;
5636: CALL_OW 9
// end ; if dec2 = 2 then
5640: LD_VAR 0 2
5644: PUSH
5645: LD_INT 2
5647: EQUAL
5648: IFFALSE 5724
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5650: LD_EXP 1
5654: PPUSH
5655: LD_STRING D2Jb-JMM-1
5657: PPUSH
5658: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5662: LD_EXP 2
5666: PPUSH
5667: LD_STRING D2Jb-Joan-1
5669: PPUSH
5670: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5674: LD_EXP 1
5678: PPUSH
5679: LD_STRING D2Jb-JMM-2
5681: PPUSH
5682: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5686: LD_EXP 2
5690: PPUSH
5691: LD_STRING D2Jb-Joan-2
5693: PPUSH
5694: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5698: LD_EXP 1
5702: PPUSH
5703: LD_STRING D2Jb-JMM-3
5705: PPUSH
5706: CALL_OW 88
// fastEnd = 1 ;
5710: LD_ADDR_EXP 15
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// FinishMission ;
5718: CALL 9340 0 0
// exit ;
5722: GO 6354
// end ; if dec2 = 3 then
5724: LD_VAR 0 2
5728: PUSH
5729: LD_INT 3
5731: EQUAL
5732: IFFALSE 5760
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5734: LD_EXP 2
5738: PPUSH
5739: LD_STRING D2Jc-Joan-1
5741: PPUSH
5742: CALL_OW 94
// fastEnd = 1 ;
5746: LD_ADDR_EXP 15
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// FinishMission ;
5754: CALL 9340 0 0
// exit ;
5758: GO 6354
// end ; end ; if dec1 = 2 then
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 2
5767: EQUAL
5768: IFFALSE 5784
// begin fastEnd = 1 ;
5770: LD_ADDR_EXP 15
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// FinishMission ;
5778: CALL 9340 0 0
// exit ;
5782: GO 6354
// end ; end ; if JMMGirl = 2 then
5784: LD_EXP 7
5788: PUSH
5789: LD_INT 2
5791: EQUAL
5792: IFFALSE 6117
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5794: LD_EXP 3
5798: PPUSH
5799: LD_STRING D2L-Lisa-1
5801: PPUSH
5802: CALL_OW 94
// dec1 = query ( Q1 ) ;
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_STRING Q1
5813: PPUSH
5814: CALL_OW 97
5818: ST_TO_ADDR
// if dec1 = 1 then
5819: LD_VAR 0 1
5823: PUSH
5824: LD_INT 1
5826: EQUAL
5827: IFFALSE 6093
// begin ComExitVehicle ( JMM ) ;
5829: LD_EXP 1
5833: PPUSH
5834: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5838: LD_EXP 1
5842: PPUSH
5843: LD_STRING D2L-JMM-1
5845: PPUSH
5846: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5850: LD_EXP 3
5854: PPUSH
5855: LD_STRING D2L-Lisa-2
5857: PPUSH
5858: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D2L-JMM-2
5869: PPUSH
5870: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5874: LD_EXP 3
5878: PPUSH
5879: LD_STRING D2L-Lisa-3
5881: PPUSH
5882: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5886: LD_EXP 5
5890: PPUSH
5891: LD_STRING DPowell-Pow-1
5893: PPUSH
5894: CALL_OW 94
// dec2 = query ( Q2L ) ;
5898: LD_ADDR_VAR 0 2
5902: PUSH
5903: LD_STRING Q2L
5905: PPUSH
5906: CALL_OW 97
5910: ST_TO_ADDR
// if dec2 = 1 then
5911: LD_VAR 0 2
5915: PUSH
5916: LD_INT 1
5918: EQUAL
5919: IFFALSE 5985
// begin Say ( JMM , D2La-JMM-1 ) ;
5921: LD_EXP 1
5925: PPUSH
5926: LD_STRING D2La-JMM-1
5928: PPUSH
5929: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5933: LD_EXP 3
5937: PPUSH
5938: LD_STRING D2La-Lisa-1
5940: PPUSH
5941: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5945: LD_EXP 1
5949: PPUSH
5950: LD_STRING D2La-JMM-2
5952: PPUSH
5953: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5957: LD_EXP 3
5961: PPUSH
5962: LD_STRING D2La-Lisa-2
5964: PPUSH
5965: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5969: LD_EXP 1
5973: PPUSH
5974: LD_STRING D2La-JMM-3
5976: PPUSH
5977: CALL_OW 88
// InGameOff ;
5981: CALL_OW 9
// end ; if dec2 = 2 then
5985: LD_VAR 0 2
5989: PUSH
5990: LD_INT 2
5992: EQUAL
5993: IFFALSE 6057
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5995: LD_EXP 1
5999: PPUSH
6000: LD_STRING D2Lb-JMM-1
6002: PPUSH
6003: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6007: LD_EXP 3
6011: PPUSH
6012: LD_STRING D2Lb-Lisa-1
6014: PPUSH
6015: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6019: LD_EXP 1
6023: PPUSH
6024: LD_STRING D2Lb-JMM-2
6026: PPUSH
6027: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6031: LD_EXP 3
6035: PPUSH
6036: LD_STRING D2Lb-Lisa-2
6038: PPUSH
6039: CALL_OW 94
// fastEnd = 1 ;
6043: LD_ADDR_EXP 15
6047: PUSH
6048: LD_INT 1
6050: ST_TO_ADDR
// FinishMission ;
6051: CALL 9340 0 0
// exit ;
6055: GO 6354
// end ; if dec2 = 3 then
6057: LD_VAR 0 2
6061: PUSH
6062: LD_INT 3
6064: EQUAL
6065: IFFALSE 6093
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6067: LD_EXP 3
6071: PPUSH
6072: LD_STRING D2Lc-Lisa-1
6074: PPUSH
6075: CALL_OW 94
// fastEnd = 1 ;
6079: LD_ADDR_EXP 15
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// FinishMission ;
6087: CALL 9340 0 0
// exit ;
6091: GO 6354
// end ; end ; if dec1 = 2 then
6093: LD_VAR 0 1
6097: PUSH
6098: LD_INT 2
6100: EQUAL
6101: IFFALSE 6117
// begin fastEnd = 1 ;
6103: LD_ADDR_EXP 15
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// FinishMission ;
6111: CALL 9340 0 0
// exit ;
6115: GO 6354
// end ; end ; if JMMGirl = 3 then
6117: LD_EXP 7
6121: PUSH
6122: LD_INT 3
6124: EQUAL
6125: IFFALSE 6354
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6127: LD_EXP 4
6131: PPUSH
6132: LD_STRING D2X-Con-1
6134: PPUSH
6135: CALL_OW 94
// dec1 = query ( Q1 ) ;
6139: LD_ADDR_VAR 0 1
6143: PUSH
6144: LD_STRING Q1
6146: PPUSH
6147: CALL_OW 97
6151: ST_TO_ADDR
// if dec1 = 1 then
6152: LD_VAR 0 1
6156: PUSH
6157: LD_INT 1
6159: EQUAL
6160: IFFALSE 6330
// begin ComExitVehicle ( JMM ) ;
6162: LD_EXP 1
6166: PPUSH
6167: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6171: LD_EXP 1
6175: PPUSH
6176: LD_STRING D2X-JMM-1
6178: PPUSH
6179: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6183: LD_EXP 4
6187: PPUSH
6188: LD_STRING D2X-Con-2
6190: PPUSH
6191: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6195: LD_EXP 5
6199: PPUSH
6200: LD_STRING DPowell-Pow-1
6202: PPUSH
6203: CALL_OW 94
// dec2 = query ( Q2X ) ;
6207: LD_ADDR_VAR 0 2
6211: PUSH
6212: LD_STRING Q2X
6214: PPUSH
6215: CALL_OW 97
6219: ST_TO_ADDR
// if dec2 = 1 then
6220: LD_VAR 0 2
6224: PUSH
6225: LD_INT 1
6227: EQUAL
6228: IFFALSE 6246
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Xa-JMM-1
6237: PPUSH
6238: CALL_OW 88
// InGameOff ;
6242: CALL_OW 9
// end ; if dec2 = 2 then
6246: LD_VAR 0 2
6250: PUSH
6251: LD_INT 2
6253: EQUAL
6254: IFFALSE 6294
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6256: LD_EXP 1
6260: PPUSH
6261: LD_STRING D2Xb-JMM-1
6263: PPUSH
6264: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6268: LD_EXP 4
6272: PPUSH
6273: LD_STRING D2Xb-Con-1
6275: PPUSH
6276: CALL_OW 94
// fastEnd = 1 ;
6280: LD_ADDR_EXP 15
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// FinishMission ;
6288: CALL 9340 0 0
// exit ;
6292: GO 6354
// end ; if dec2 = 3 then
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 3
6301: EQUAL
6302: IFFALSE 6330
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6304: LD_EXP 4
6308: PPUSH
6309: LD_STRING D2Xc-Con-1
6311: PPUSH
6312: CALL_OW 94
// fastEnd = 1 ;
6316: LD_ADDR_EXP 15
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// FinishMission ;
6324: CALL 9340 0 0
// exit ;
6328: GO 6354
// end ; end ; if dec1 = 2 then
6330: LD_VAR 0 1
6334: PUSH
6335: LD_INT 2
6337: EQUAL
6338: IFFALSE 6354
// begin fastEnd = 1 ;
6340: LD_ADDR_EXP 15
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// FinishMission ;
6348: CALL 9340 0 0
// exit ;
6352: GO 6354
// end ; end ; end ;
6354: PPOPN 2
6356: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6357: LD_EXP 1
6361: PPUSH
6362: LD_INT 6
6364: PPUSH
6365: CALL_OW 308
6369: IFFALSE 7111
6371: GO 6373
6373: DISABLE
// begin InGameOn ;
6374: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6378: LD_INT 35
6380: PPUSH
6381: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6385: LD_EXP 1
6389: PPUSH
6390: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_INT 62
6401: PPUSH
6402: LD_INT 104
6404: PPUSH
6405: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6409: LD_EXP 1
6413: PPUSH
6414: LD_EXP 2
6418: PPUSH
6419: CALL_OW 296
6423: PUSH
6424: LD_INT 4
6426: LESS
6427: PUSH
6428: LD_EXP 1
6432: PPUSH
6433: LD_EXP 3
6437: PPUSH
6438: CALL_OW 296
6442: PUSH
6443: LD_INT 4
6445: LESS
6446: OR
6447: PUSH
6448: LD_EXP 1
6452: PPUSH
6453: LD_EXP 4
6457: PPUSH
6458: CALL_OW 296
6462: PUSH
6463: LD_INT 4
6465: LESS
6466: OR
6467: IFFALSE 6378
// case JMMGirl of 1 :
6469: LD_EXP 7
6473: PUSH
6474: LD_INT 1
6476: DOUBLE
6477: EQUAL
6478: IFTRUE 6482
6480: GO 6694
6482: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6483: LD_INT 22
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PPUSH
6493: CALL_OW 69
6497: PPUSH
6498: LD_INT 1
6500: PPUSH
6501: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6505: LD_EXP 2
6509: PPUSH
6510: LD_EXP 1
6514: PPUSH
6515: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6519: LD_EXP 1
6523: PPUSH
6524: LD_EXP 2
6528: PPUSH
6529: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6533: LD_EXP 2
6537: PUSH
6538: LD_EXP 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL_OW 87
// wait ( 0 0$1 ) ;
6551: LD_INT 35
6553: PPUSH
6554: CALL_OW 67
// DialogueOn ;
6558: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6562: LD_EXP 2
6566: PPUSH
6567: LD_STRING D3J-Joan-1
6569: PPUSH
6570: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6574: LD_EXP 1
6578: PPUSH
6579: LD_STRING D3J-JMM-1
6581: PPUSH
6582: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6586: LD_EXP 2
6590: PPUSH
6591: LD_STRING D3J-Joan-2
6593: PPUSH
6594: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6598: LD_EXP 1
6602: PPUSH
6603: LD_STRING D3J-JMM-2
6605: PPUSH
6606: CALL_OW 88
// wait ( 0 0$1 ) ;
6610: LD_INT 35
6612: PPUSH
6613: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D4-JMM-1
6624: PPUSH
6625: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6629: LD_EXP 2
6633: PPUSH
6634: LD_STRING D4-Joan-1
6636: PPUSH
6637: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D4-JMM-2
6648: PPUSH
6649: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6653: LD_EXP 2
6657: PPUSH
6658: LD_STRING D4-Joan-2
6660: PPUSH
6661: CALL_OW 88
// DialogueOff ;
6665: CALL_OW 7
// InGameOff ;
6669: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6673: LD_STRING M2J
6675: PPUSH
6676: CALL_OW 337
// SaveForQuickRestart ;
6680: CALL_OW 22
// russianAI = 1 ;
6684: LD_ADDR_EXP 13
6688: PUSH
6689: LD_INT 1
6691: ST_TO_ADDR
// end ; 2 :
6692: GO 7111
6694: LD_INT 2
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6914
6702: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6703: LD_INT 22
6705: PUSH
6706: LD_INT 4
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: PPUSH
6718: LD_INT 1
6720: PPUSH
6721: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6725: LD_EXP 3
6729: PPUSH
6730: LD_EXP 1
6734: PPUSH
6735: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6739: LD_EXP 1
6743: PPUSH
6744: LD_EXP 3
6748: PPUSH
6749: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6753: LD_EXP 3
6757: PUSH
6758: LD_EXP 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PPUSH
6767: CALL_OW 87
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// DialogueOn ;
6778: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6782: LD_EXP 3
6786: PPUSH
6787: LD_STRING D3L-Lisa-1
6789: PPUSH
6790: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6794: LD_EXP 1
6798: PPUSH
6799: LD_STRING D3L-JMM-1
6801: PPUSH
6802: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6806: LD_EXP 3
6810: PPUSH
6811: LD_STRING D3L-Lisa-2
6813: PPUSH
6814: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6818: LD_EXP 1
6822: PPUSH
6823: LD_STRING D3L-JMM-2
6825: PPUSH
6826: CALL_OW 88
// wait ( 0 0$1 ) ;
6830: LD_INT 35
6832: PPUSH
6833: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6837: LD_EXP 1
6841: PPUSH
6842: LD_STRING D4-JMM-1
6844: PPUSH
6845: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6849: LD_EXP 3
6853: PPUSH
6854: LD_STRING D4-Lisa-1
6856: PPUSH
6857: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6861: LD_EXP 1
6865: PPUSH
6866: LD_STRING D4-JMM-1
6868: PPUSH
6869: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6873: LD_EXP 3
6877: PPUSH
6878: LD_STRING D4-Lisa-2
6880: PPUSH
6881: CALL_OW 88
// DialogueOff ;
6885: CALL_OW 7
// InGameOff ;
6889: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6893: LD_STRING M2L
6895: PPUSH
6896: CALL_OW 337
// SaveForQuickRestart ;
6900: CALL_OW 22
// russianAI = 1 ;
6904: LD_ADDR_EXP 13
6908: PUSH
6909: LD_INT 1
6911: ST_TO_ADDR
// end ; 3 :
6912: GO 7111
6914: LD_INT 3
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 7110
6922: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6923: LD_INT 22
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: PPUSH
6938: LD_INT 1
6940: PPUSH
6941: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6945: LD_EXP 4
6949: PPUSH
6950: LD_EXP 1
6954: PPUSH
6955: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6959: LD_EXP 1
6963: PPUSH
6964: LD_EXP 4
6968: PPUSH
6969: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6973: LD_EXP 2
6977: PUSH
6978: LD_EXP 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 87
// wait ( 0 0$1 ) ;
6991: LD_INT 35
6993: PPUSH
6994: CALL_OW 67
// DialogueOn ;
6998: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7002: LD_EXP 4
7006: PPUSH
7007: LD_STRING D3X-Con-1
7009: PPUSH
7010: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7014: LD_EXP 1
7018: PPUSH
7019: LD_STRING D3J-JMM-1
7021: PPUSH
7022: CALL_OW 88
// wait ( 0 0$1 ) ;
7026: LD_INT 35
7028: PPUSH
7029: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7033: LD_EXP 1
7037: PPUSH
7038: LD_STRING D4-JMM-1
7040: PPUSH
7041: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7045: LD_EXP 4
7049: PPUSH
7050: LD_STRING D4-Con-1
7052: PPUSH
7053: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7057: LD_EXP 1
7061: PPUSH
7062: LD_STRING D4-JMM-2
7064: PPUSH
7065: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7069: LD_EXP 4
7073: PPUSH
7074: LD_STRING D4-Con-2
7076: PPUSH
7077: CALL_OW 88
// DialogueOff ;
7081: CALL_OW 7
// InGameOff ;
7085: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7089: LD_STRING M2X
7091: PPUSH
7092: CALL_OW 337
// SaveForQuickRestart ;
7096: CALL_OW 22
// russianAI = 1 ;
7100: LD_ADDR_EXP 13
7104: PUSH
7105: LD_INT 1
7107: ST_TO_ADDR
// end ; end ;
7108: GO 7111
7110: POP
// end ;
7111: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7112: LD_INT 32
7114: PPUSH
7115: CALL_OW 306
7119: IFFALSE 7452
7121: GO 7123
7123: DISABLE
// begin case JMMGirl of 1 :
7124: LD_EXP 7
7128: PUSH
7129: LD_INT 1
7131: DOUBLE
7132: EQUAL
7133: IFTRUE 7137
7135: GO 7259
7137: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7138: LD_EXP 1
7142: PPUSH
7143: LD_STRING D6J-JMM-1
7145: PPUSH
7146: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7150: LD_STRING 13f_Denis
7152: PPUSH
7153: CALL_OW 28
7157: PUSH
7158: LD_INT 1
7160: EQUAL
7161: PUSH
7162: LD_STRING 13s_Denis
7164: PPUSH
7165: CALL_OW 28
7169: PUSH
7170: LD_INT 1
7172: EQUAL
7173: OR
7174: IFFALSE 7214
// begin Say ( Joan , D6J-Joan-1 ) ;
7176: LD_EXP 2
7180: PPUSH
7181: LD_STRING D6J-Joan-1
7183: PPUSH
7184: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7188: LD_EXP 1
7192: PPUSH
7193: LD_STRING D6J-JMM-2
7195: PPUSH
7196: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7200: LD_EXP 2
7204: PPUSH
7205: LD_STRING D6J-Joan-2
7207: PPUSH
7208: CALL_OW 88
// end else
7212: GO 7226
// begin Say ( Joan , D6J-Joan-2a ) ;
7214: LD_EXP 2
7218: PPUSH
7219: LD_STRING D6J-Joan-2a
7221: PPUSH
7222: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D6J-JMM-3
7233: PPUSH
7234: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7238: LD_EXP 2
7242: PPUSH
7243: LD_STRING D6J-Joan-3
7245: PPUSH
7246: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7250: LD_STRING M3
7252: PPUSH
7253: CALL_OW 337
// end ; 2 :
7257: GO 7452
7259: LD_INT 2
7261: DOUBLE
7262: EQUAL
7263: IFTRUE 7267
7265: GO 7325
7267: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D6L-JMM-1
7275: PPUSH
7276: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7280: LD_EXP 3
7284: PPUSH
7285: LD_STRING D6L-Lisa-1
7287: PPUSH
7288: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7292: LD_EXP 1
7296: PPUSH
7297: LD_STRING D6L-JMM-2
7299: PPUSH
7300: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7304: LD_EXP 3
7308: PPUSH
7309: LD_STRING D6L-Lisa-2
7311: PPUSH
7312: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7316: LD_STRING M3
7318: PPUSH
7319: CALL_OW 337
// end ; 3 :
7323: GO 7452
7325: LD_INT 3
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7451
7333: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7334: LD_EXP 1
7338: PPUSH
7339: LD_STRING D6X-JMM-1
7341: PPUSH
7342: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7346: LD_EXP 4
7350: PPUSH
7351: LD_STRING D6X-Con-1
7353: PPUSH
7354: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7358: LD_EXP 1
7362: PPUSH
7363: LD_STRING D6X-JMM-2
7365: PPUSH
7366: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7370: LD_EXP 4
7374: PPUSH
7375: LD_STRING D6X-Con-2
7377: PPUSH
7378: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7382: LD_EXP 1
7386: PPUSH
7387: LD_STRING D6X-JMM-3
7389: PPUSH
7390: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7394: LD_EXP 4
7398: PPUSH
7399: LD_STRING D6X-Con-3
7401: PPUSH
7402: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7406: LD_EXP 1
7410: PPUSH
7411: LD_STRING D6X-JMM-4
7413: PPUSH
7414: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7418: LD_EXP 4
7422: PPUSH
7423: LD_STRING D6X-Con-4
7425: PPUSH
7426: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7430: LD_EXP 1
7434: PPUSH
7435: LD_STRING D6X-JMM-5
7437: PPUSH
7438: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7442: LD_STRING M3
7444: PPUSH
7445: CALL_OW 337
// end ; end ;
7449: GO 7452
7451: POP
// end ;
7452: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7453: LD_INT 22
7455: PUSH
7456: LD_INT 1
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 33
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 69
7481: PPUSH
7482: CALL_OW 306
7486: IFFALSE 7632
7488: GO 7490
7490: DISABLE
// begin case JMMGirl of 1 :
7491: LD_EXP 7
7495: PUSH
7496: LD_INT 1
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7541
7504: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7505: LD_EXP 1
7509: PPUSH
7510: LD_STRING D5-JMM-1
7512: PPUSH
7513: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7517: LD_INT 77
7519: PPUSH
7520: LD_INT 87
7522: PPUSH
7523: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7527: LD_EXP 2
7531: PPUSH
7532: LD_STRING D5-Joan-1
7534: PPUSH
7535: CALL_OW 88
// end ; 2 :
7539: GO 7632
7541: LD_INT 2
7543: DOUBLE
7544: EQUAL
7545: IFTRUE 7549
7547: GO 7586
7549: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7550: LD_EXP 1
7554: PPUSH
7555: LD_STRING D5-JMM-1
7557: PPUSH
7558: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7562: LD_INT 77
7564: PPUSH
7565: LD_INT 87
7567: PPUSH
7568: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7572: LD_EXP 3
7576: PPUSH
7577: LD_STRING D5-Lisa-1
7579: PPUSH
7580: CALL_OW 88
// end ; 3 :
7584: GO 7632
7586: LD_INT 3
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7594
7592: GO 7631
7594: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7595: LD_EXP 1
7599: PPUSH
7600: LD_STRING D5-JMM-1
7602: PPUSH
7603: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7607: LD_INT 77
7609: PPUSH
7610: LD_INT 87
7612: PPUSH
7613: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7617: LD_EXP 4
7621: PPUSH
7622: LD_STRING D5-Con-1
7624: PPUSH
7625: CALL_OW 88
// end ; end ;
7629: GO 7632
7631: POP
// end ;
7632: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7633: LD_INT 48
7635: PPUSH
7636: CALL_OW 255
7640: PUSH
7641: LD_INT 1
7643: EQUAL
7644: IFFALSE 7741
7646: GO 7648
7648: DISABLE
// begin DialogueOn ;
7649: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7653: LD_EXP 5
7657: PPUSH
7658: LD_STRING D7-Pow-1
7660: PPUSH
7661: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7665: LD_EXP 1
7669: PPUSH
7670: LD_STRING D7-JMM-1
7672: PPUSH
7673: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7677: LD_EXP 5
7681: PPUSH
7682: LD_STRING D7-Pow-2
7684: PPUSH
7685: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7689: LD_EXP 1
7693: PPUSH
7694: LD_STRING D7-JMM-2
7696: PPUSH
7697: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7701: LD_EXP 5
7705: PPUSH
7706: LD_STRING D7-Pow-3
7708: PPUSH
7709: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7713: LD_EXP 1
7717: PPUSH
7718: LD_STRING D7-JMM-3
7720: PPUSH
7721: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7725: LD_EXP 5
7729: PPUSH
7730: LD_STRING D7-Pow-4
7732: PPUSH
7733: CALL_OW 94
// DialogueOff ;
7737: CALL_OW 7
// end ; end_of_file
7741: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 255
7751: PUSH
7752: LD_INT 3
7754: EQUAL
7755: IFFALSE 7829
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7757: LD_ADDR_EXP 10
7761: PUSH
7762: LD_EXP 10
7766: PPUSH
7767: LD_INT 1
7769: PPUSH
7770: CALL_OW 3
7774: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7775: LD_ADDR_EXP 10
7779: PUSH
7780: LD_EXP 10
7784: PPUSH
7785: LD_INT 1
7787: PPUSH
7788: CALL_OW 3
7792: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7793: LD_ADDR_EXP 10
7797: PUSH
7798: LD_EXP 10
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: CALL_OW 3
7810: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7811: LD_ADDR_EXP 10
7815: PUSH
7816: LD_EXP 10
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 3
7828: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 255
7838: PUSH
7839: LD_INT 3
7841: EQUAL
7842: PUSH
7843: LD_VAR 0 1
7847: PPUSH
7848: CALL_OW 266
7852: PUSH
7853: LD_INT 0
7855: EQUAL
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 266
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: OR
7871: PUSH
7872: LD_VAR 0 1
7876: PPUSH
7877: CALL_OW 266
7881: PUSH
7882: LD_INT 4
7884: EQUAL
7885: OR
7886: PUSH
7887: EMPTY
7888: LIST
7889: AND
7890: IFFALSE 7901
// ComUpgrade ( building ) ;
7892: LD_VAR 0 1
7896: PPUSH
7897: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 255
7910: PUSH
7911: LD_INT 3
7913: EQUAL
7914: PUSH
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 266
7924: PUSH
7925: LD_INT 32
7927: EQUAL
7928: AND
7929: IFFALSE 7970
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7931: LD_VAR 0 1
7935: PPUSH
7936: LD_INT 42
7938: PUSH
7939: LD_INT 43
7941: PUSH
7942: LD_INT 44
7944: PUSH
7945: LD_INT 46
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 1
7956: PPUSH
7957: LD_INT 4
7959: PPUSH
7960: CALL_OW 12
7964: ARRAY
7965: PPUSH
7966: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 3
7982: EQUAL
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 266
7993: PUSH
7994: LD_INT 33
7996: EQUAL
7997: AND
7998: IFFALSE 8039
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 42
8007: PUSH
8008: LD_INT 43
8010: PUSH
8011: LD_INT 44
8013: PUSH
8014: LD_INT 46
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 4
8028: PPUSH
8029: CALL_OW 12
8033: ARRAY
8034: PPUSH
8035: CALL_OW 208
// end ;
8039: PPOPN 1
8041: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_EXP 11
8051: IN
8052: IFFALSE 8070
// russianTanks := russianTanks diff unit ;
8054: LD_ADDR_EXP 11
8058: PUSH
8059: LD_EXP 11
8063: PUSH
8064: LD_VAR 0 1
8068: DIFF
8069: ST_TO_ADDR
// if unit in russianTimeLapsers then
8070: LD_VAR 0 1
8074: PUSH
8075: LD_EXP 12
8079: IN
8080: IFFALSE 8098
// russianTimeLapsers := russianTimeLapsers diff unit ;
8082: LD_ADDR_EXP 12
8086: PUSH
8087: LD_EXP 12
8091: PUSH
8092: LD_VAR 0 1
8096: DIFF
8097: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 255
8107: PUSH
8108: LD_INT 3
8110: EQUAL
8111: PUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 247
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: AND
8126: IFFALSE 8590
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 266
8137: PUSH
8138: LD_INT 31
8140: PUSH
8141: LD_INT 32
8143: PUSH
8144: LD_INT 36
8146: PUSH
8147: LD_INT 0
8149: PUSH
8150: LD_INT 24
8152: PUSH
8153: LD_INT 17
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 19
8161: PUSH
8162: LD_INT 20
8164: PUSH
8165: LD_INT 18
8167: PUSH
8168: LD_INT 21
8170: PUSH
8171: LD_INT 23
8173: PUSH
8174: LD_INT 16
8176: PUSH
8177: LD_INT 6
8179: PUSH
8180: LD_INT 29
8182: PUSH
8183: LD_INT 26
8185: PUSH
8186: LD_INT 30
8188: PUSH
8189: LD_INT 28
8191: PUSH
8192: LD_INT 27
8194: PUSH
8195: LD_INT 33
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 4
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: IN
8228: IFFALSE 8314
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8230: LD_ADDR_EXP 10
8234: PUSH
8235: LD_EXP 10
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: ADD
8250: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8251: LD_ADDR_EXP 10
8255: PUSH
8256: LD_EXP 10
8260: PUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 250
8270: ADD
8271: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8272: LD_ADDR_EXP 10
8276: PUSH
8277: LD_EXP 10
8281: PUSH
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 251
8291: ADD
8292: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8293: LD_ADDR_EXP 10
8297: PUSH
8298: LD_EXP 10
8302: PUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 254
8312: ADD
8313: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 266
8323: PUSH
8324: LD_INT 1
8326: EQUAL
8327: IFFALSE 8406
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8329: LD_ADDR_EXP 10
8333: PUSH
8334: LD_EXP 10
8338: PUSH
8339: LD_INT 0
8341: ADD
8342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8343: LD_ADDR_EXP 10
8347: PUSH
8348: LD_EXP 10
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 250
8362: ADD
8363: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8364: LD_ADDR_EXP 10
8368: PUSH
8369: LD_EXP 10
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 251
8383: ADD
8384: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8385: LD_ADDR_EXP 10
8389: PUSH
8390: LD_EXP 10
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: CALL_OW 254
8404: ADD
8405: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 266
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8498
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8421: LD_ADDR_EXP 10
8425: PUSH
8426: LD_EXP 10
8430: PUSH
8431: LD_INT 2
8433: ADD
8434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8435: LD_ADDR_EXP 10
8439: PUSH
8440: LD_EXP 10
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 250
8454: ADD
8455: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8456: LD_ADDR_EXP 10
8460: PUSH
8461: LD_EXP 10
8465: PUSH
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 251
8475: ADD
8476: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8477: LD_ADDR_EXP 10
8481: PUSH
8482: LD_EXP 10
8486: PUSH
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL_OW 254
8496: ADD
8497: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 266
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8590
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8513: LD_ADDR_EXP 10
8517: PUSH
8518: LD_EXP 10
8522: PUSH
8523: LD_INT 4
8525: ADD
8526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8527: LD_ADDR_EXP 10
8531: PUSH
8532: LD_EXP 10
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: CALL_OW 250
8546: ADD
8547: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8548: LD_ADDR_EXP 10
8552: PUSH
8553: LD_EXP 10
8557: PUSH
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL_OW 251
8567: ADD
8568: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8569: LD_ADDR_EXP 10
8573: PUSH
8574: LD_EXP 10
8578: PUSH
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 254
8588: ADD
8589: ST_TO_ADDR
// end ; end ; end ;
8590: PPOPN 1
8592: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8593: LD_VAR 0 3
8597: PPUSH
8598: CALL_OW 264
8602: PUSH
8603: LD_INT 10
8605: EQUAL
8606: IFFALSE 8622
// destroyCounter := destroyCounter + 1 ;
8608: LD_ADDR_EXP 17
8612: PUSH
8613: LD_EXP 17
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
// end ;
8622: PPOPN 3
8624: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8625: LD_VAR 0 2
8629: PUSH
8630: LD_INT 1
8632: EQUAL
8633: PUSH
8634: LD_VAR 0 2
8638: PUSH
8639: LD_INT 40
8641: EQUAL
8642: OR
8643: IFFALSE 8767
// if GetSide ( vehicle ) = 3 then
8645: LD_VAR 0 1
8649: PPUSH
8650: CALL_OW 255
8654: PUSH
8655: LD_INT 3
8657: EQUAL
8658: IFFALSE 8767
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8660: LD_VAR 0 1
8664: PPUSH
8665: CALL_OW 264
8669: PUSH
8670: LD_INT 47
8672: EQUAL
8673: PUSH
8674: LD_VAR 0 1
8678: PPUSH
8679: CALL_OW 264
8683: PUSH
8684: LD_INT 46
8686: EQUAL
8687: OR
8688: PUSH
8689: LD_VAR 0 1
8693: PPUSH
8694: CALL_OW 264
8698: PUSH
8699: LD_INT 45
8701: EQUAL
8702: OR
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 264
8713: PUSH
8714: LD_INT 44
8716: EQUAL
8717: OR
8718: IFFALSE 8736
// russianTanks = russianTanks ^ vehicle ;
8720: LD_ADDR_EXP 11
8724: PUSH
8725: LD_EXP 11
8729: PUSH
8730: LD_VAR 0 1
8734: ADD
8735: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8736: LD_VAR 0 1
8740: PPUSH
8741: CALL_OW 264
8745: PUSH
8746: LD_INT 49
8748: EQUAL
8749: IFFALSE 8767
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8751: LD_ADDR_EXP 12
8755: PUSH
8756: LD_EXP 12
8760: PUSH
8761: LD_VAR 0 1
8765: ADD
8766: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8767: LD_VAR 0 1
8771: PPUSH
8772: CALL_OW 255
8776: PUSH
8777: LD_INT 1
8779: EQUAL
8780: PUSH
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 264
8790: PUSH
8791: LD_INT 10
8793: EQUAL
8794: AND
8795: IFFALSE 8811
// amLaserCounter = amLaserCounter + 1 ;
8797: LD_ADDR_EXP 9
8801: PUSH
8802: LD_EXP 9
8806: PUSH
8807: LD_INT 1
8809: PLUS
8810: ST_TO_ADDR
// end ;
8811: PPOPN 2
8813: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8814: LD_VAR 0 1
8818: PPUSH
8819: CALL 21721 0 1
// end ; end_of_file
8823: PPOPN 1
8825: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8826: LD_EXP 1
8830: PPUSH
8831: CALL_OW 310
8835: PPUSH
8836: LD_INT 12
8838: PPUSH
8839: CALL_OW 308
8843: PUSH
8844: LD_EXP 15
8848: PUSH
8849: LD_INT 0
8851: EQUAL
8852: AND
8853: IFFALSE 9199
8855: GO 8857
8857: DISABLE
8858: LD_INT 0
8860: PPUSH
8861: PPUSH
// begin enable ;
8862: ENABLE
// if JMMGirl = 1 then
8863: LD_EXP 7
8867: PUSH
8868: LD_INT 1
8870: EQUAL
8871: IFFALSE 8888
// JMMGirlVeh = IsInUnit ( Joan ) ;
8873: LD_ADDR_VAR 0 1
8877: PUSH
8878: LD_EXP 2
8882: PPUSH
8883: CALL_OW 310
8887: ST_TO_ADDR
// if JMMGirl = 2 then
8888: LD_EXP 7
8892: PUSH
8893: LD_INT 2
8895: EQUAL
8896: IFFALSE 8913
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_EXP 3
8907: PPUSH
8908: CALL_OW 310
8912: ST_TO_ADDR
// if JMMGirl = 3 then
8913: LD_EXP 7
8917: PUSH
8918: LD_INT 3
8920: EQUAL
8921: IFFALSE 8938
// JMMGirlVeh = IsInUnit ( Connie ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_EXP 4
8932: PPUSH
8933: CALL_OW 310
8937: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8938: LD_EXP 1
8942: PPUSH
8943: CALL_OW 310
8947: PPUSH
8948: LD_EXP 2
8952: PPUSH
8953: CALL_OW 310
8957: PPUSH
8958: CALL_OW 296
8962: PUSH
8963: LD_INT 10
8965: LESS
8966: PUSH
8967: LD_EXP 1
8971: PPUSH
8972: CALL_OW 310
8976: PPUSH
8977: LD_EXP 3
8981: PPUSH
8982: CALL_OW 310
8986: PPUSH
8987: CALL_OW 296
8991: PUSH
8992: LD_INT 10
8994: LESS
8995: OR
8996: PUSH
8997: LD_EXP 1
9001: PPUSH
9002: CALL_OW 310
9006: PPUSH
9007: LD_EXP 4
9011: PPUSH
9012: CALL_OW 310
9016: PPUSH
9017: CALL_OW 296
9021: PUSH
9022: LD_INT 10
9024: LESS
9025: OR
9026: IFFALSE 9120
// begin case Query ( Q3b ) of 1 :
9028: LD_STRING Q3b
9030: PPUSH
9031: CALL_OW 97
9035: PUSH
9036: LD_INT 1
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9117
9044: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9045: LD_VAR 0 1
9049: PPUSH
9050: CALL_OW 265
9054: PUSH
9055: EMPTY
9056: LIST
9057: PUSH
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 262
9067: PUSH
9068: EMPTY
9069: LIST
9070: PUSH
9071: LD_VAR 0 1
9075: PPUSH
9076: CALL_OW 263
9080: PUSH
9081: EMPTY
9082: LIST
9083: PUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 264
9093: PUSH
9094: EMPTY
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PPUSH
9103: LD_STRING 14_JMMGirlVeh_1
9105: PPUSH
9106: CALL_OW 39
// FinishMission ;
9110: CALL 9340 0 0
// disable ;
9114: DISABLE
// end ; end ;
9115: GO 9118
9117: POP
// end else
9118: GO 9199
// begin if JMMGirl = 1 then
9120: LD_EXP 7
9124: PUSH
9125: LD_INT 1
9127: EQUAL
9128: IFFALSE 9145
// dec := Query ( Q3bJ ) else
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_STRING Q3bJ
9137: PPUSH
9138: CALL_OW 97
9142: ST_TO_ADDR
9143: GO 9183
// if JMMGirl = 2 then
9145: LD_EXP 7
9149: PUSH
9150: LD_INT 2
9152: EQUAL
9153: IFFALSE 9170
// dec := Query ( Q3bL ) else
9155: LD_ADDR_VAR 0 2
9159: PUSH
9160: LD_STRING Q3bL
9162: PPUSH
9163: CALL_OW 97
9167: ST_TO_ADDR
9168: GO 9183
// dec := Query ( Q3bX ) ;
9170: LD_ADDR_VAR 0 2
9174: PUSH
9175: LD_STRING Q3bX
9177: PPUSH
9178: CALL_OW 97
9182: ST_TO_ADDR
// if dec = 1 then
9183: LD_VAR 0 2
9187: PUSH
9188: LD_INT 1
9190: EQUAL
9191: IFFALSE 9199
// begin FinishMission ;
9193: CALL 9340 0 0
// exit ;
9197: GO 9199
// end ; end ; end ;
9199: PPOPN 2
9201: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9202: LD_INT 22
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 21
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: PUSH
9235: LD_EXP 15
9239: PUSH
9240: LD_INT 0
9242: EQUAL
9243: AND
9244: IFFALSE 9339
9246: GO 9248
9248: DISABLE
// begin DialogueOn ;
9249: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9253: LD_EXP 1
9257: PPUSH
9258: LD_STRING DEnd-JMM-1
9260: PPUSH
9261: CALL_OW 88
// if JMMGirl = 1 then
9265: LD_EXP 7
9269: PUSH
9270: LD_INT 1
9272: EQUAL
9273: IFFALSE 9287
// Say ( Joan , DEnd-Joan-1 ) ;
9275: LD_EXP 2
9279: PPUSH
9280: LD_STRING DEnd-Joan-1
9282: PPUSH
9283: CALL_OW 88
// if JMMGirl = 2 then
9287: LD_EXP 7
9291: PUSH
9292: LD_INT 2
9294: EQUAL
9295: IFFALSE 9309
// Say ( Lisa , DEnd-Lisa-1 ) ;
9297: LD_EXP 3
9301: PPUSH
9302: LD_STRING DEnd-Lisa-1
9304: PPUSH
9305: CALL_OW 88
// if JMMGirl = 3 then
9309: LD_EXP 7
9313: PUSH
9314: LD_INT 3
9316: EQUAL
9317: IFFALSE 9331
// Say ( Connie , DEnd-Con-1 ) ;
9319: LD_EXP 4
9323: PPUSH
9324: LD_STRING DEnd-Con-1
9326: PPUSH
9327: CALL_OW 88
// DialogueOff ;
9331: CALL_OW 7
// FinishMission ;
9335: CALL 9340 0 0
// end ;
9339: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9340: LD_INT 0
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// m1 := false ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// m2 := false ;
9355: LD_ADDR_VAR 0 4
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// m3 := false ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9371: LD_EXP 1
9375: PPUSH
9376: LD_STRING 14_JMM
9378: PPUSH
9379: CALL_OW 38
// if tick <= 50 50$00 then
9383: LD_OWVAR 1
9387: PUSH
9388: LD_INT 105000
9390: LESSEQUAL
9391: IFFALSE 9400
// SetAchievement ( ACH_ASPEED_14 ) ;
9393: LD_STRING ACH_ASPEED_14
9395: PPUSH
9396: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9400: LD_EXP 1
9404: PPUSH
9405: CALL_OW 310
9409: PUSH
9410: LD_EXP 1
9414: PPUSH
9415: CALL_OW 310
9419: PPUSH
9420: CALL_OW 247
9424: PUSH
9425: LD_INT 2
9427: EQUAL
9428: AND
9429: IFFALSE 9511
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_EXP 1
9440: PPUSH
9441: CALL_OW 310
9445: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9446: LD_VAR 0 2
9450: PPUSH
9451: CALL_OW 265
9455: PUSH
9456: EMPTY
9457: LIST
9458: PUSH
9459: LD_VAR 0 2
9463: PPUSH
9464: CALL_OW 262
9468: PUSH
9469: EMPTY
9470: LIST
9471: PUSH
9472: LD_VAR 0 2
9476: PPUSH
9477: CALL_OW 263
9481: PUSH
9482: EMPTY
9483: LIST
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: CALL_OW 264
9494: PUSH
9495: EMPTY
9496: LIST
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PPUSH
9504: LD_STRING 14_JMMVeh_1
9506: PPUSH
9507: CALL_OW 39
// end ; if fastEnd = 1 then
9511: LD_EXP 15
9515: PUSH
9516: LD_INT 1
9518: EQUAL
9519: IFFALSE 9608
// begin AddMedal ( fastend , - 1 ) ;
9521: LD_STRING fastend
9523: PPUSH
9524: LD_INT 1
9526: NEG
9527: PPUSH
9528: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9532: LD_STRING fastend
9534: PPUSH
9535: LD_INT 1
9537: NEG
9538: PPUSH
9539: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9543: LD_STRING fastend
9545: PPUSH
9546: LD_INT 1
9548: NEG
9549: PPUSH
9550: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9554: LD_EXP 7
9558: PPUSH
9559: LD_STRING 14_JMMGirl_1
9561: PPUSH
9562: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9566: LD_INT 0
9568: PPUSH
9569: LD_STRING 14_JMMGirlStatus_1
9571: PPUSH
9572: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9576: LD_INT 0
9578: PPUSH
9579: LD_STRING 14_KappaStatus_1
9581: PPUSH
9582: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9586: LD_STRING Eliminate
9588: PPUSH
9589: CALL_OW 102
// RewardPeople ( JMM ) ;
9593: LD_EXP 1
9597: PPUSH
9598: CALL_OW 43
// YouWin ;
9602: CALL_OW 103
// exit ;
9606: GO 10433
// end ; if fastEnd = 0 then
9608: LD_EXP 15
9612: PUSH
9613: LD_INT 0
9615: EQUAL
9616: IFFALSE 10326
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9618: LD_EXP 7
9622: PPUSH
9623: LD_STRING 14_JMMGirl_1
9625: PPUSH
9626: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9630: LD_INT 22
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 21
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: CALL_OW 69
9658: PUSH
9659: LD_INT 0
9661: EQUAL
9662: PUSH
9663: LD_INT 48
9665: PPUSH
9666: CALL_OW 255
9670: PUSH
9671: LD_INT 1
9673: EQUAL
9674: AND
9675: IFFALSE 9689
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9677: LD_INT 1
9679: PPUSH
9680: LD_STRING 14_KappaStatus_1
9682: PPUSH
9683: CALL_OW 39
9687: GO 9699
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9689: LD_INT 0
9691: PPUSH
9692: LD_STRING 14_KappaStatus_1
9694: PPUSH
9695: CALL_OW 39
// case JMMGirl of 1 :
9699: LD_EXP 7
9703: PUSH
9704: LD_INT 1
9706: DOUBLE
9707: EQUAL
9708: IFTRUE 9712
9710: GO 9868
9712: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9713: LD_EXP 2
9717: PPUSH
9718: CALL_OW 302
9722: PUSH
9723: LD_EXP 2
9727: PPUSH
9728: CALL_OW 255
9732: PUSH
9733: LD_INT 1
9735: EQUAL
9736: AND
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 3
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 21
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 69
9766: PUSH
9767: LD_INT 0
9769: EQUAL
9770: PUSH
9771: LD_EXP 1
9775: PPUSH
9776: CALL_OW 310
9780: PPUSH
9781: LD_EXP 2
9785: PPUSH
9786: CALL_OW 310
9790: PPUSH
9791: CALL_OW 296
9795: PUSH
9796: LD_INT 10
9798: LESS
9799: OR
9800: AND
9801: IFFALSE 9845
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9803: LD_INT 1
9805: PPUSH
9806: LD_STRING 14_JMMGirlStatus_1
9808: PPUSH
9809: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9813: LD_EXP 2
9817: PPUSH
9818: LD_STRING 14_Joan
9820: PPUSH
9821: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9825: LD_STRING protect
9827: PPUSH
9828: LD_INT 1
9830: PPUSH
9831: CALL_OW 101
// m1 := true ;
9835: LD_ADDR_VAR 0 3
9839: PUSH
9840: LD_INT 1
9842: ST_TO_ADDR
// end else
9843: GO 9866
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9845: LD_INT 0
9847: PPUSH
9848: LD_STRING 14_JMMGirlStatus_1
9850: PPUSH
9851: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9855: LD_STRING protect
9857: PPUSH
9858: LD_INT 1
9860: NEG
9861: PPUSH
9862: CALL_OW 101
// end ; end ; 2 :
9866: GO 10197
9868: LD_INT 2
9870: DOUBLE
9871: EQUAL
9872: IFTRUE 9876
9874: GO 10032
9876: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9877: LD_EXP 3
9881: PPUSH
9882: CALL_OW 302
9886: PUSH
9887: LD_EXP 3
9891: PPUSH
9892: CALL_OW 255
9896: PUSH
9897: LD_INT 1
9899: EQUAL
9900: AND
9901: PUSH
9902: LD_INT 22
9904: PUSH
9905: LD_INT 3
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 21
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PPUSH
9926: CALL_OW 69
9930: PUSH
9931: LD_INT 0
9933: EQUAL
9934: PUSH
9935: LD_EXP 1
9939: PPUSH
9940: CALL_OW 310
9944: PPUSH
9945: LD_EXP 3
9949: PPUSH
9950: CALL_OW 310
9954: PPUSH
9955: CALL_OW 296
9959: PUSH
9960: LD_INT 10
9962: LESS
9963: OR
9964: AND
9965: IFFALSE 10009
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9967: LD_INT 1
9969: PPUSH
9970: LD_STRING 14_JMMGirlStatus_1
9972: PPUSH
9973: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9977: LD_EXP 3
9981: PPUSH
9982: LD_STRING 14_Lisa
9984: PPUSH
9985: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9989: LD_STRING protect
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 101
// m1 := true ;
9999: LD_ADDR_VAR 0 3
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// end else
10007: GO 10030
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10009: LD_INT 0
10011: PPUSH
10012: LD_STRING 14_JMMGirlStatus_1
10014: PPUSH
10015: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10019: LD_STRING protect
10021: PPUSH
10022: LD_INT 2
10024: NEG
10025: PPUSH
10026: CALL_OW 101
// end ; end ; 3 :
10030: GO 10197
10032: LD_INT 3
10034: DOUBLE
10035: EQUAL
10036: IFTRUE 10040
10038: GO 10196
10040: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10041: LD_EXP 4
10045: PPUSH
10046: CALL_OW 302
10050: PUSH
10051: LD_EXP 4
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: AND
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_INT 3
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 21
10078: PUSH
10079: LD_INT 1
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PPUSH
10090: CALL_OW 69
10094: PUSH
10095: LD_INT 0
10097: EQUAL
10098: PUSH
10099: LD_EXP 1
10103: PPUSH
10104: CALL_OW 310
10108: PPUSH
10109: LD_EXP 4
10113: PPUSH
10114: CALL_OW 310
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 10
10126: LESS
10127: OR
10128: AND
10129: IFFALSE 10173
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_STRING 14_JMMGirlStatus_1
10136: PPUSH
10137: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10141: LD_EXP 4
10145: PPUSH
10146: LD_STRING 14_Connie
10148: PPUSH
10149: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10153: LD_STRING protect
10155: PPUSH
10156: LD_INT 1
10158: PPUSH
10159: CALL_OW 101
// m1 := true ;
10163: LD_ADDR_VAR 0 3
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// end else
10171: GO 10194
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10173: LD_INT 0
10175: PPUSH
10176: LD_STRING 14_JMMGirlStatus_1
10178: PPUSH
10179: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10183: LD_STRING protect
10185: PPUSH
10186: LD_INT 3
10188: NEG
10189: PPUSH
10190: CALL_OW 101
// end ; end ; end ;
10194: GO 10197
10196: POP
// if amLaserCounter >= 2 then
10197: LD_EXP 9
10201: PUSH
10202: LD_INT 2
10204: GREATEREQUAL
10205: IFFALSE 10227
// begin AddMedal ( double , 1 ) ;
10207: LD_STRING double
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 101
// m2 := true ;
10217: LD_ADDR_VAR 0 4
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// end else
10225: GO 10261
// begin if amLaserCounter = 1 then
10227: LD_EXP 9
10231: PUSH
10232: LD_INT 1
10234: EQUAL
10235: IFFALSE 10250
// AddMedal ( double , - 2 ) else
10237: LD_STRING double
10239: PPUSH
10240: LD_INT 2
10242: NEG
10243: PPUSH
10244: CALL_OW 101
10248: GO 10261
// AddMedal ( double , - 1 ) ;
10250: LD_STRING double
10252: PPUSH
10253: LD_INT 1
10255: NEG
10256: PPUSH
10257: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10261: LD_INT 22
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 21
10273: PUSH
10274: LD_INT 1
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_INT 0
10292: EQUAL
10293: IFFALSE 10315
// begin AddMedal ( base , 1 ) ;
10295: LD_STRING base
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 101
// m3 := true ;
10305: LD_ADDR_VAR 0 5
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// end else
10313: GO 10326
// AddMedal ( base , - 1 ) ;
10315: LD_STRING base
10317: PPUSH
10318: LD_INT 1
10320: NEG
10321: PPUSH
10322: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_VAR 0 4
10335: AND
10336: PUSH
10337: LD_VAR 0 5
10341: AND
10342: PUSH
10343: LD_OWVAR 67
10347: PUSH
10348: LD_INT 3
10350: EQUAL
10351: AND
10352: IFFALSE 10364
// SetAchievementEX ( ACH_AMER , 14 ) ;
10354: LD_STRING ACH_AMER
10356: PPUSH
10357: LD_INT 14
10359: PPUSH
10360: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10364: LD_STRING Eliminate
10366: PPUSH
10367: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 3
10383: PUSH
10384: LD_INT 25
10386: PUSH
10387: LD_INT 12
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 3
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 16
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 69
10424: PPUSH
10425: CALL_OW 43
// YouWin ;
10429: CALL_OW 103
// end ; end_of_file
10433: LD_VAR 0 1
10437: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10438: LD_EXP 1
10442: PPUSH
10443: CALL_OW 301
10447: IFFALSE 10459
10449: GO 10451
10451: DISABLE
// YouLost ( JMM ) ; end_of_file
10452: LD_STRING JMM
10454: PPUSH
10455: CALL_OW 104
10459: END
// every 1 1$0 do
10460: GO 10462
10462: DISABLE
// begin enable ;
10463: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10464: LD_INT 3
10466: PPUSH
10467: LD_INT 5
10469: PPUSH
10470: CALL_OW 12
10474: PPUSH
10475: LD_INT 13
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 55
// end ; end_of_file
10485: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
10486: GO 10488
10488: DISABLE
// begin ru_radar := 98 ;
10489: LD_ADDR_EXP 19
10493: PUSH
10494: LD_INT 98
10496: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10497: LD_ADDR_EXP 20
10501: PUSH
10502: LD_INT 89
10504: ST_TO_ADDR
// us_hack := 99 ;
10505: LD_ADDR_EXP 21
10509: PUSH
10510: LD_INT 99
10512: ST_TO_ADDR
// us_artillery := 97 ;
10513: LD_ADDR_EXP 22
10517: PUSH
10518: LD_INT 97
10520: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10521: LD_ADDR_EXP 23
10525: PUSH
10526: LD_INT 91
10528: ST_TO_ADDR
// tech_Artillery := 80 ;
10529: LD_ADDR_EXP 24
10533: PUSH
10534: LD_INT 80
10536: ST_TO_ADDR
// tech_RadMat := 81 ;
10537: LD_ADDR_EXP 25
10541: PUSH
10542: LD_INT 81
10544: ST_TO_ADDR
// tech_BasicTools := 82 ;
10545: LD_ADDR_EXP 26
10549: PUSH
10550: LD_INT 82
10552: ST_TO_ADDR
// tech_Cargo := 83 ;
10553: LD_ADDR_EXP 27
10557: PUSH
10558: LD_INT 83
10560: ST_TO_ADDR
// tech_Track := 84 ;
10561: LD_ADDR_EXP 28
10565: PUSH
10566: LD_INT 84
10568: ST_TO_ADDR
// tech_Crane := 85 ;
10569: LD_ADDR_EXP 29
10573: PUSH
10574: LD_INT 85
10576: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10577: LD_ADDR_EXP 30
10581: PUSH
10582: LD_INT 86
10584: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10585: LD_ADDR_EXP 31
10589: PUSH
10590: LD_INT 87
10592: ST_TO_ADDR
// end ; end_of_file end_of_file
10593: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10594: GO 10596
10596: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10597: LD_STRING initStreamRollete();
10599: PPUSH
10600: CALL_OW 559
// InitStreamMode ;
10604: CALL 10613 0 0
// DefineStreamItems ( ) ;
10608: CALL 11053 0 0
// end ;
10612: END
// function InitStreamMode ; begin
10613: LD_INT 0
10615: PPUSH
// streamModeActive := false ;
10616: LD_ADDR_EXP 32
10620: PUSH
10621: LD_INT 0
10623: ST_TO_ADDR
// normalCounter := 36 ;
10624: LD_ADDR_EXP 33
10628: PUSH
10629: LD_INT 36
10631: ST_TO_ADDR
// hardcoreCounter := 16 ;
10632: LD_ADDR_EXP 34
10636: PUSH
10637: LD_INT 16
10639: ST_TO_ADDR
// sRocket := false ;
10640: LD_ADDR_EXP 37
10644: PUSH
10645: LD_INT 0
10647: ST_TO_ADDR
// sSpeed := false ;
10648: LD_ADDR_EXP 36
10652: PUSH
10653: LD_INT 0
10655: ST_TO_ADDR
// sEngine := false ;
10656: LD_ADDR_EXP 38
10660: PUSH
10661: LD_INT 0
10663: ST_TO_ADDR
// sSpec := false ;
10664: LD_ADDR_EXP 35
10668: PUSH
10669: LD_INT 0
10671: ST_TO_ADDR
// sLevel := false ;
10672: LD_ADDR_EXP 39
10676: PUSH
10677: LD_INT 0
10679: ST_TO_ADDR
// sArmoury := false ;
10680: LD_ADDR_EXP 40
10684: PUSH
10685: LD_INT 0
10687: ST_TO_ADDR
// sRadar := false ;
10688: LD_ADDR_EXP 41
10692: PUSH
10693: LD_INT 0
10695: ST_TO_ADDR
// sBunker := false ;
10696: LD_ADDR_EXP 42
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// sHack := false ;
10704: LD_ADDR_EXP 43
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// sFire := false ;
10712: LD_ADDR_EXP 44
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// sRefresh := false ;
10720: LD_ADDR_EXP 45
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// sExp := false ;
10728: LD_ADDR_EXP 46
10732: PUSH
10733: LD_INT 0
10735: ST_TO_ADDR
// sDepot := false ;
10736: LD_ADDR_EXP 47
10740: PUSH
10741: LD_INT 0
10743: ST_TO_ADDR
// sFlag := false ;
10744: LD_ADDR_EXP 48
10748: PUSH
10749: LD_INT 0
10751: ST_TO_ADDR
// sKamikadze := false ;
10752: LD_ADDR_EXP 56
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// sTroll := false ;
10760: LD_ADDR_EXP 57
10764: PUSH
10765: LD_INT 0
10767: ST_TO_ADDR
// sSlow := false ;
10768: LD_ADDR_EXP 58
10772: PUSH
10773: LD_INT 0
10775: ST_TO_ADDR
// sLack := false ;
10776: LD_ADDR_EXP 59
10780: PUSH
10781: LD_INT 0
10783: ST_TO_ADDR
// sTank := false ;
10784: LD_ADDR_EXP 61
10788: PUSH
10789: LD_INT 0
10791: ST_TO_ADDR
// sRemote := false ;
10792: LD_ADDR_EXP 62
10796: PUSH
10797: LD_INT 0
10799: ST_TO_ADDR
// sPowell := false ;
10800: LD_ADDR_EXP 63
10804: PUSH
10805: LD_INT 0
10807: ST_TO_ADDR
// sTeleport := false ;
10808: LD_ADDR_EXP 66
10812: PUSH
10813: LD_INT 0
10815: ST_TO_ADDR
// sOilTower := false ;
10816: LD_ADDR_EXP 68
10820: PUSH
10821: LD_INT 0
10823: ST_TO_ADDR
// sShovel := false ;
10824: LD_ADDR_EXP 69
10828: PUSH
10829: LD_INT 0
10831: ST_TO_ADDR
// sSheik := false ;
10832: LD_ADDR_EXP 70
10836: PUSH
10837: LD_INT 0
10839: ST_TO_ADDR
// sEarthquake := false ;
10840: LD_ADDR_EXP 72
10844: PUSH
10845: LD_INT 0
10847: ST_TO_ADDR
// sAI := false ;
10848: LD_ADDR_EXP 73
10852: PUSH
10853: LD_INT 0
10855: ST_TO_ADDR
// sCargo := false ;
10856: LD_ADDR_EXP 76
10860: PUSH
10861: LD_INT 0
10863: ST_TO_ADDR
// sDLaser := false ;
10864: LD_ADDR_EXP 77
10868: PUSH
10869: LD_INT 0
10871: ST_TO_ADDR
// sExchange := false ;
10872: LD_ADDR_EXP 78
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// sFac := false ;
10880: LD_ADDR_EXP 79
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// sPower := false ;
10888: LD_ADDR_EXP 80
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// sRandom := false ;
10896: LD_ADDR_EXP 81
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// sShield := false ;
10904: LD_ADDR_EXP 82
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// sTime := false ;
10912: LD_ADDR_EXP 83
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// sTools := false ;
10920: LD_ADDR_EXP 84
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// sSold := false ;
10928: LD_ADDR_EXP 49
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// sDiff := false ;
10936: LD_ADDR_EXP 50
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// sFog := false ;
10944: LD_ADDR_EXP 53
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// sReset := false ;
10952: LD_ADDR_EXP 54
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// sSun := false ;
10960: LD_ADDR_EXP 55
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// sTiger := false ;
10968: LD_ADDR_EXP 51
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// sBomb := false ;
10976: LD_ADDR_EXP 52
10980: PUSH
10981: LD_INT 0
10983: ST_TO_ADDR
// sWound := false ;
10984: LD_ADDR_EXP 60
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// sBetray := false ;
10992: LD_ADDR_EXP 64
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// sContamin := false ;
11000: LD_ADDR_EXP 65
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// sOil := false ;
11008: LD_ADDR_EXP 67
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// sStu := false ;
11016: LD_ADDR_EXP 71
11020: PUSH
11021: LD_INT 0
11023: ST_TO_ADDR
// sBazooka := false ;
11024: LD_ADDR_EXP 74
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// sMortar := false ;
11032: LD_ADDR_EXP 75
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// sRanger := false ;
11040: LD_ADDR_EXP 85
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// end ;
11048: LD_VAR 0 1
11052: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11053: LD_INT 0
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
// result := [ ] ;
11060: LD_ADDR_VAR 0 1
11064: PUSH
11065: EMPTY
11066: ST_TO_ADDR
// if campaign_id = 1 then
11067: LD_OWVAR 69
11071: PUSH
11072: LD_INT 1
11074: EQUAL
11075: IFFALSE 14013
// begin case mission_number of 1 :
11077: LD_OWVAR 70
11081: PUSH
11082: LD_INT 1
11084: DOUBLE
11085: EQUAL
11086: IFTRUE 11090
11088: GO 11154
11090: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11091: LD_ADDR_VAR 0 1
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: LD_INT 11
11104: PUSH
11105: LD_INT 12
11107: PUSH
11108: LD_INT 15
11110: PUSH
11111: LD_INT 16
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_INT 23
11119: PUSH
11120: LD_INT 26
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 101
11136: PUSH
11137: LD_INT 102
11139: PUSH
11140: LD_INT 106
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: ST_TO_ADDR
11152: GO 14011
11154: LD_INT 2
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11162
11160: GO 11234
11162: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11163: LD_ADDR_VAR 0 1
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: LD_INT 4
11173: PUSH
11174: LD_INT 11
11176: PUSH
11177: LD_INT 12
11179: PUSH
11180: LD_INT 15
11182: PUSH
11183: LD_INT 16
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 23
11191: PUSH
11192: LD_INT 26
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 101
11208: PUSH
11209: LD_INT 102
11211: PUSH
11212: LD_INT 105
11214: PUSH
11215: LD_INT 106
11217: PUSH
11218: LD_INT 108
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
11232: GO 14011
11234: LD_INT 3
11236: DOUBLE
11237: EQUAL
11238: IFTRUE 11242
11240: GO 11318
11242: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11243: LD_ADDR_VAR 0 1
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 4
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: LD_INT 11
11259: PUSH
11260: LD_INT 12
11262: PUSH
11263: LD_INT 15
11265: PUSH
11266: LD_INT 16
11268: PUSH
11269: LD_INT 22
11271: PUSH
11272: LD_INT 26
11274: PUSH
11275: LD_INT 36
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 101
11292: PUSH
11293: LD_INT 102
11295: PUSH
11296: LD_INT 105
11298: PUSH
11299: LD_INT 106
11301: PUSH
11302: LD_INT 108
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: ST_TO_ADDR
11316: GO 14011
11318: LD_INT 4
11320: DOUBLE
11321: EQUAL
11322: IFTRUE 11326
11324: GO 11410
11326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11327: LD_ADDR_VAR 0 1
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: LD_INT 4
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: LD_INT 8
11343: PUSH
11344: LD_INT 11
11346: PUSH
11347: LD_INT 12
11349: PUSH
11350: LD_INT 15
11352: PUSH
11353: LD_INT 16
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 23
11361: PUSH
11362: LD_INT 26
11364: PUSH
11365: LD_INT 36
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 101
11384: PUSH
11385: LD_INT 102
11387: PUSH
11388: LD_INT 105
11390: PUSH
11391: LD_INT 106
11393: PUSH
11394: LD_INT 108
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: ST_TO_ADDR
11408: GO 14011
11410: LD_INT 5
11412: DOUBLE
11413: EQUAL
11414: IFTRUE 11418
11416: GO 11518
11418: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11419: LD_ADDR_VAR 0 1
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 4
11429: PUSH
11430: LD_INT 5
11432: PUSH
11433: LD_INT 6
11435: PUSH
11436: LD_INT 8
11438: PUSH
11439: LD_INT 11
11441: PUSH
11442: LD_INT 12
11444: PUSH
11445: LD_INT 15
11447: PUSH
11448: LD_INT 16
11450: PUSH
11451: LD_INT 22
11453: PUSH
11454: LD_INT 23
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 26
11462: PUSH
11463: LD_INT 36
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 101
11484: PUSH
11485: LD_INT 102
11487: PUSH
11488: LD_INT 105
11490: PUSH
11491: LD_INT 106
11493: PUSH
11494: LD_INT 108
11496: PUSH
11497: LD_INT 109
11499: PUSH
11500: LD_INT 112
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: ST_TO_ADDR
11516: GO 14011
11518: LD_INT 6
11520: DOUBLE
11521: EQUAL
11522: IFTRUE 11526
11524: GO 11646
11526: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11527: LD_ADDR_VAR 0 1
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 4
11537: PUSH
11538: LD_INT 5
11540: PUSH
11541: LD_INT 6
11543: PUSH
11544: LD_INT 8
11546: PUSH
11547: LD_INT 11
11549: PUSH
11550: LD_INT 12
11552: PUSH
11553: LD_INT 15
11555: PUSH
11556: LD_INT 16
11558: PUSH
11559: LD_INT 20
11561: PUSH
11562: LD_INT 21
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 23
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 26
11576: PUSH
11577: LD_INT 30
11579: PUSH
11580: LD_INT 31
11582: PUSH
11583: LD_INT 32
11585: PUSH
11586: LD_INT 36
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 101
11612: PUSH
11613: LD_INT 102
11615: PUSH
11616: LD_INT 105
11618: PUSH
11619: LD_INT 106
11621: PUSH
11622: LD_INT 108
11624: PUSH
11625: LD_INT 109
11627: PUSH
11628: LD_INT 112
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: ST_TO_ADDR
11644: GO 14011
11646: LD_INT 7
11648: DOUBLE
11649: EQUAL
11650: IFTRUE 11654
11652: GO 11754
11654: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11655: LD_ADDR_VAR 0 1
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: LD_INT 4
11665: PUSH
11666: LD_INT 5
11668: PUSH
11669: LD_INT 7
11671: PUSH
11672: LD_INT 11
11674: PUSH
11675: LD_INT 12
11677: PUSH
11678: LD_INT 15
11680: PUSH
11681: LD_INT 16
11683: PUSH
11684: LD_INT 20
11686: PUSH
11687: LD_INT 21
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 23
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 26
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 101
11720: PUSH
11721: LD_INT 102
11723: PUSH
11724: LD_INT 103
11726: PUSH
11727: LD_INT 105
11729: PUSH
11730: LD_INT 106
11732: PUSH
11733: LD_INT 108
11735: PUSH
11736: LD_INT 112
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: ST_TO_ADDR
11752: GO 14011
11754: LD_INT 8
11756: DOUBLE
11757: EQUAL
11758: IFTRUE 11762
11760: GO 11890
11762: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11763: LD_ADDR_VAR 0 1
11767: PUSH
11768: LD_INT 2
11770: PUSH
11771: LD_INT 4
11773: PUSH
11774: LD_INT 5
11776: PUSH
11777: LD_INT 6
11779: PUSH
11780: LD_INT 7
11782: PUSH
11783: LD_INT 8
11785: PUSH
11786: LD_INT 11
11788: PUSH
11789: LD_INT 12
11791: PUSH
11792: LD_INT 15
11794: PUSH
11795: LD_INT 16
11797: PUSH
11798: LD_INT 20
11800: PUSH
11801: LD_INT 21
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 25
11812: PUSH
11813: LD_INT 26
11815: PUSH
11816: LD_INT 30
11818: PUSH
11819: LD_INT 31
11821: PUSH
11822: LD_INT 32
11824: PUSH
11825: LD_INT 36
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 101
11852: PUSH
11853: LD_INT 102
11855: PUSH
11856: LD_INT 103
11858: PUSH
11859: LD_INT 105
11861: PUSH
11862: LD_INT 106
11864: PUSH
11865: LD_INT 108
11867: PUSH
11868: LD_INT 109
11870: PUSH
11871: LD_INT 112
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: ST_TO_ADDR
11888: GO 14011
11890: LD_INT 9
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 12034
11898: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11899: LD_ADDR_VAR 0 1
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: LD_INT 4
11909: PUSH
11910: LD_INT 5
11912: PUSH
11913: LD_INT 6
11915: PUSH
11916: LD_INT 7
11918: PUSH
11919: LD_INT 8
11921: PUSH
11922: LD_INT 11
11924: PUSH
11925: LD_INT 12
11927: PUSH
11928: LD_INT 15
11930: PUSH
11931: LD_INT 16
11933: PUSH
11934: LD_INT 20
11936: PUSH
11937: LD_INT 21
11939: PUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 23
11945: PUSH
11946: LD_INT 25
11948: PUSH
11949: LD_INT 26
11951: PUSH
11952: LD_INT 28
11954: PUSH
11955: LD_INT 30
11957: PUSH
11958: LD_INT 31
11960: PUSH
11961: LD_INT 32
11963: PUSH
11964: LD_INT 36
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 101
11992: PUSH
11993: LD_INT 102
11995: PUSH
11996: LD_INT 103
11998: PUSH
11999: LD_INT 105
12001: PUSH
12002: LD_INT 106
12004: PUSH
12005: LD_INT 108
12007: PUSH
12008: LD_INT 109
12010: PUSH
12011: LD_INT 112
12013: PUSH
12014: LD_INT 114
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: ST_TO_ADDR
12032: GO 14011
12034: LD_INT 10
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12226
12042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: LD_INT 4
12053: PUSH
12054: LD_INT 5
12056: PUSH
12057: LD_INT 6
12059: PUSH
12060: LD_INT 7
12062: PUSH
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: LD_INT 10
12071: PUSH
12072: LD_INT 11
12074: PUSH
12075: LD_INT 12
12077: PUSH
12078: LD_INT 13
12080: PUSH
12081: LD_INT 14
12083: PUSH
12084: LD_INT 15
12086: PUSH
12087: LD_INT 16
12089: PUSH
12090: LD_INT 17
12092: PUSH
12093: LD_INT 18
12095: PUSH
12096: LD_INT 19
12098: PUSH
12099: LD_INT 20
12101: PUSH
12102: LD_INT 21
12104: PUSH
12105: LD_INT 22
12107: PUSH
12108: LD_INT 23
12110: PUSH
12111: LD_INT 24
12113: PUSH
12114: LD_INT 25
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 28
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 36
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 101
12168: PUSH
12169: LD_INT 102
12171: PUSH
12172: LD_INT 103
12174: PUSH
12175: LD_INT 104
12177: PUSH
12178: LD_INT 105
12180: PUSH
12181: LD_INT 106
12183: PUSH
12184: LD_INT 107
12186: PUSH
12187: LD_INT 108
12189: PUSH
12190: LD_INT 109
12192: PUSH
12193: LD_INT 110
12195: PUSH
12196: LD_INT 111
12198: PUSH
12199: LD_INT 112
12201: PUSH
12202: LD_INT 114
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: ST_TO_ADDR
12224: GO 14011
12226: LD_INT 11
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12426
12234: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12235: LD_ADDR_VAR 0 1
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 4
12248: PUSH
12249: LD_INT 5
12251: PUSH
12252: LD_INT 6
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: LD_INT 8
12260: PUSH
12261: LD_INT 9
12263: PUSH
12264: LD_INT 10
12266: PUSH
12267: LD_INT 11
12269: PUSH
12270: LD_INT 12
12272: PUSH
12273: LD_INT 13
12275: PUSH
12276: LD_INT 14
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 17
12287: PUSH
12288: LD_INT 18
12290: PUSH
12291: LD_INT 19
12293: PUSH
12294: LD_INT 20
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: LD_INT 24
12308: PUSH
12309: LD_INT 25
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 31
12323: PUSH
12324: LD_INT 32
12326: PUSH
12327: LD_INT 34
12329: PUSH
12330: LD_INT 36
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 101
12368: PUSH
12369: LD_INT 102
12371: PUSH
12372: LD_INT 103
12374: PUSH
12375: LD_INT 104
12377: PUSH
12378: LD_INT 105
12380: PUSH
12381: LD_INT 106
12383: PUSH
12384: LD_INT 107
12386: PUSH
12387: LD_INT 108
12389: PUSH
12390: LD_INT 109
12392: PUSH
12393: LD_INT 110
12395: PUSH
12396: LD_INT 111
12398: PUSH
12399: LD_INT 112
12401: PUSH
12402: LD_INT 114
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: ST_TO_ADDR
12424: GO 14011
12426: LD_INT 12
12428: DOUBLE
12429: EQUAL
12430: IFTRUE 12434
12432: GO 12642
12434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12435: LD_ADDR_VAR 0 1
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: LD_INT 2
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: LD_INT 5
12454: PUSH
12455: LD_INT 6
12457: PUSH
12458: LD_INT 7
12460: PUSH
12461: LD_INT 8
12463: PUSH
12464: LD_INT 9
12466: PUSH
12467: LD_INT 10
12469: PUSH
12470: LD_INT 11
12472: PUSH
12473: LD_INT 12
12475: PUSH
12476: LD_INT 13
12478: PUSH
12479: LD_INT 14
12481: PUSH
12482: LD_INT 15
12484: PUSH
12485: LD_INT 16
12487: PUSH
12488: LD_INT 17
12490: PUSH
12491: LD_INT 18
12493: PUSH
12494: LD_INT 19
12496: PUSH
12497: LD_INT 20
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 22
12505: PUSH
12506: LD_INT 23
12508: PUSH
12509: LD_INT 24
12511: PUSH
12512: LD_INT 25
12514: PUSH
12515: LD_INT 26
12517: PUSH
12518: LD_INT 27
12520: PUSH
12521: LD_INT 28
12523: PUSH
12524: LD_INT 30
12526: PUSH
12527: LD_INT 31
12529: PUSH
12530: LD_INT 32
12532: PUSH
12533: LD_INT 33
12535: PUSH
12536: LD_INT 34
12538: PUSH
12539: LD_INT 36
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 103
12586: PUSH
12587: LD_INT 104
12589: PUSH
12590: LD_INT 105
12592: PUSH
12593: LD_INT 106
12595: PUSH
12596: LD_INT 107
12598: PUSH
12599: LD_INT 108
12601: PUSH
12602: LD_INT 109
12604: PUSH
12605: LD_INT 110
12607: PUSH
12608: LD_INT 111
12610: PUSH
12611: LD_INT 112
12613: PUSH
12614: LD_INT 113
12616: PUSH
12617: LD_INT 114
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: ST_TO_ADDR
12640: GO 14011
12642: LD_INT 13
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12846
12650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12651: LD_ADDR_VAR 0 1
12655: PUSH
12656: LD_INT 1
12658: PUSH
12659: LD_INT 2
12661: PUSH
12662: LD_INT 3
12664: PUSH
12665: LD_INT 4
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: LD_INT 8
12673: PUSH
12674: LD_INT 9
12676: PUSH
12677: LD_INT 10
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 12
12685: PUSH
12686: LD_INT 14
12688: PUSH
12689: LD_INT 15
12691: PUSH
12692: LD_INT 16
12694: PUSH
12695: LD_INT 17
12697: PUSH
12698: LD_INT 18
12700: PUSH
12701: LD_INT 19
12703: PUSH
12704: LD_INT 20
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 23
12715: PUSH
12716: LD_INT 24
12718: PUSH
12719: LD_INT 25
12721: PUSH
12722: LD_INT 26
12724: PUSH
12725: LD_INT 27
12727: PUSH
12728: LD_INT 28
12730: PUSH
12731: LD_INT 30
12733: PUSH
12734: LD_INT 31
12736: PUSH
12737: LD_INT 32
12739: PUSH
12740: LD_INT 33
12742: PUSH
12743: LD_INT 34
12745: PUSH
12746: LD_INT 36
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 101
12784: PUSH
12785: LD_INT 102
12787: PUSH
12788: LD_INT 103
12790: PUSH
12791: LD_INT 104
12793: PUSH
12794: LD_INT 105
12796: PUSH
12797: LD_INT 106
12799: PUSH
12800: LD_INT 107
12802: PUSH
12803: LD_INT 108
12805: PUSH
12806: LD_INT 109
12808: PUSH
12809: LD_INT 110
12811: PUSH
12812: LD_INT 111
12814: PUSH
12815: LD_INT 112
12817: PUSH
12818: LD_INT 113
12820: PUSH
12821: LD_INT 114
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
12844: GO 14011
12846: LD_INT 14
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 13066
12854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 4
12871: PUSH
12872: LD_INT 5
12874: PUSH
12875: LD_INT 6
12877: PUSH
12878: LD_INT 7
12880: PUSH
12881: LD_INT 8
12883: PUSH
12884: LD_INT 9
12886: PUSH
12887: LD_INT 10
12889: PUSH
12890: LD_INT 11
12892: PUSH
12893: LD_INT 12
12895: PUSH
12896: LD_INT 13
12898: PUSH
12899: LD_INT 14
12901: PUSH
12902: LD_INT 15
12904: PUSH
12905: LD_INT 16
12907: PUSH
12908: LD_INT 17
12910: PUSH
12911: LD_INT 18
12913: PUSH
12914: LD_INT 19
12916: PUSH
12917: LD_INT 20
12919: PUSH
12920: LD_INT 21
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_INT 23
12928: PUSH
12929: LD_INT 24
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 26
12937: PUSH
12938: LD_INT 27
12940: PUSH
12941: LD_INT 28
12943: PUSH
12944: LD_INT 29
12946: PUSH
12947: LD_INT 30
12949: PUSH
12950: LD_INT 31
12952: PUSH
12953: LD_INT 32
12955: PUSH
12956: LD_INT 33
12958: PUSH
12959: LD_INT 34
12961: PUSH
12962: LD_INT 36
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 101
13004: PUSH
13005: LD_INT 102
13007: PUSH
13008: LD_INT 103
13010: PUSH
13011: LD_INT 104
13013: PUSH
13014: LD_INT 105
13016: PUSH
13017: LD_INT 106
13019: PUSH
13020: LD_INT 107
13022: PUSH
13023: LD_INT 108
13025: PUSH
13026: LD_INT 109
13028: PUSH
13029: LD_INT 110
13031: PUSH
13032: LD_INT 111
13034: PUSH
13035: LD_INT 112
13037: PUSH
13038: LD_INT 113
13040: PUSH
13041: LD_INT 114
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: ST_TO_ADDR
13064: GO 14011
13066: LD_INT 15
13068: DOUBLE
13069: EQUAL
13070: IFTRUE 13074
13072: GO 13286
13074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13075: LD_ADDR_VAR 0 1
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: LD_INT 3
13088: PUSH
13089: LD_INT 4
13091: PUSH
13092: LD_INT 5
13094: PUSH
13095: LD_INT 6
13097: PUSH
13098: LD_INT 7
13100: PUSH
13101: LD_INT 8
13103: PUSH
13104: LD_INT 9
13106: PUSH
13107: LD_INT 10
13109: PUSH
13110: LD_INT 11
13112: PUSH
13113: LD_INT 12
13115: PUSH
13116: LD_INT 13
13118: PUSH
13119: LD_INT 14
13121: PUSH
13122: LD_INT 15
13124: PUSH
13125: LD_INT 16
13127: PUSH
13128: LD_INT 17
13130: PUSH
13131: LD_INT 18
13133: PUSH
13134: LD_INT 19
13136: PUSH
13137: LD_INT 20
13139: PUSH
13140: LD_INT 21
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_INT 23
13148: PUSH
13149: LD_INT 24
13151: PUSH
13152: LD_INT 25
13154: PUSH
13155: LD_INT 26
13157: PUSH
13158: LD_INT 27
13160: PUSH
13161: LD_INT 28
13163: PUSH
13164: LD_INT 29
13166: PUSH
13167: LD_INT 30
13169: PUSH
13170: LD_INT 31
13172: PUSH
13173: LD_INT 32
13175: PUSH
13176: LD_INT 33
13178: PUSH
13179: LD_INT 34
13181: PUSH
13182: LD_INT 36
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 101
13224: PUSH
13225: LD_INT 102
13227: PUSH
13228: LD_INT 103
13230: PUSH
13231: LD_INT 104
13233: PUSH
13234: LD_INT 105
13236: PUSH
13237: LD_INT 106
13239: PUSH
13240: LD_INT 107
13242: PUSH
13243: LD_INT 108
13245: PUSH
13246: LD_INT 109
13248: PUSH
13249: LD_INT 110
13251: PUSH
13252: LD_INT 111
13254: PUSH
13255: LD_INT 112
13257: PUSH
13258: LD_INT 113
13260: PUSH
13261: LD_INT 114
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: ST_TO_ADDR
13284: GO 14011
13286: LD_INT 16
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13418
13294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 7
13311: PUSH
13312: LD_INT 11
13314: PUSH
13315: LD_INT 12
13317: PUSH
13318: LD_INT 15
13320: PUSH
13321: LD_INT 16
13323: PUSH
13324: LD_INT 20
13326: PUSH
13327: LD_INT 21
13329: PUSH
13330: LD_INT 22
13332: PUSH
13333: LD_INT 23
13335: PUSH
13336: LD_INT 25
13338: PUSH
13339: LD_INT 26
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 31
13347: PUSH
13348: LD_INT 32
13350: PUSH
13351: LD_INT 33
13353: PUSH
13354: LD_INT 34
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 101
13380: PUSH
13381: LD_INT 102
13383: PUSH
13384: LD_INT 103
13386: PUSH
13387: LD_INT 106
13389: PUSH
13390: LD_INT 108
13392: PUSH
13393: LD_INT 112
13395: PUSH
13396: LD_INT 113
13398: PUSH
13399: LD_INT 114
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: ST_TO_ADDR
13416: GO 14011
13418: LD_INT 17
13420: DOUBLE
13421: EQUAL
13422: IFTRUE 13426
13424: GO 13638
13426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: LD_INT 3
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: LD_INT 5
13446: PUSH
13447: LD_INT 6
13449: PUSH
13450: LD_INT 7
13452: PUSH
13453: LD_INT 8
13455: PUSH
13456: LD_INT 9
13458: PUSH
13459: LD_INT 10
13461: PUSH
13462: LD_INT 11
13464: PUSH
13465: LD_INT 12
13467: PUSH
13468: LD_INT 13
13470: PUSH
13471: LD_INT 14
13473: PUSH
13474: LD_INT 15
13476: PUSH
13477: LD_INT 16
13479: PUSH
13480: LD_INT 17
13482: PUSH
13483: LD_INT 18
13485: PUSH
13486: LD_INT 19
13488: PUSH
13489: LD_INT 20
13491: PUSH
13492: LD_INT 21
13494: PUSH
13495: LD_INT 22
13497: PUSH
13498: LD_INT 23
13500: PUSH
13501: LD_INT 24
13503: PUSH
13504: LD_INT 25
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: LD_INT 27
13512: PUSH
13513: LD_INT 28
13515: PUSH
13516: LD_INT 29
13518: PUSH
13519: LD_INT 30
13521: PUSH
13522: LD_INT 31
13524: PUSH
13525: LD_INT 32
13527: PUSH
13528: LD_INT 33
13530: PUSH
13531: LD_INT 34
13533: PUSH
13534: LD_INT 36
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 101
13576: PUSH
13577: LD_INT 102
13579: PUSH
13580: LD_INT 103
13582: PUSH
13583: LD_INT 104
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 107
13594: PUSH
13595: LD_INT 108
13597: PUSH
13598: LD_INT 109
13600: PUSH
13601: LD_INT 110
13603: PUSH
13604: LD_INT 111
13606: PUSH
13607: LD_INT 112
13609: PUSH
13610: LD_INT 113
13612: PUSH
13613: LD_INT 114
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: ST_TO_ADDR
13636: GO 14011
13638: LD_INT 18
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13646
13644: GO 13782
13646: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 4
13657: PUSH
13658: LD_INT 5
13660: PUSH
13661: LD_INT 7
13663: PUSH
13664: LD_INT 11
13666: PUSH
13667: LD_INT 12
13669: PUSH
13670: LD_INT 15
13672: PUSH
13673: LD_INT 16
13675: PUSH
13676: LD_INT 20
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 23
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 26
13693: PUSH
13694: LD_INT 30
13696: PUSH
13697: LD_INT 31
13699: PUSH
13700: LD_INT 32
13702: PUSH
13703: LD_INT 33
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 35
13711: PUSH
13712: LD_INT 36
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 101
13740: PUSH
13741: LD_INT 102
13743: PUSH
13744: LD_INT 103
13746: PUSH
13747: LD_INT 106
13749: PUSH
13750: LD_INT 108
13752: PUSH
13753: LD_INT 112
13755: PUSH
13756: LD_INT 113
13758: PUSH
13759: LD_INT 114
13761: PUSH
13762: LD_INT 115
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: ST_TO_ADDR
13780: GO 14011
13782: LD_INT 19
13784: DOUBLE
13785: EQUAL
13786: IFTRUE 13790
13788: GO 14010
13790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13791: LD_ADDR_VAR 0 1
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 3
13804: PUSH
13805: LD_INT 4
13807: PUSH
13808: LD_INT 5
13810: PUSH
13811: LD_INT 6
13813: PUSH
13814: LD_INT 7
13816: PUSH
13817: LD_INT 8
13819: PUSH
13820: LD_INT 9
13822: PUSH
13823: LD_INT 10
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: LD_INT 12
13831: PUSH
13832: LD_INT 13
13834: PUSH
13835: LD_INT 14
13837: PUSH
13838: LD_INT 15
13840: PUSH
13841: LD_INT 16
13843: PUSH
13844: LD_INT 17
13846: PUSH
13847: LD_INT 18
13849: PUSH
13850: LD_INT 19
13852: PUSH
13853: LD_INT 20
13855: PUSH
13856: LD_INT 21
13858: PUSH
13859: LD_INT 22
13861: PUSH
13862: LD_INT 23
13864: PUSH
13865: LD_INT 24
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 26
13873: PUSH
13874: LD_INT 27
13876: PUSH
13877: LD_INT 28
13879: PUSH
13880: LD_INT 29
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 31
13888: PUSH
13889: LD_INT 32
13891: PUSH
13892: LD_INT 33
13894: PUSH
13895: LD_INT 34
13897: PUSH
13898: LD_INT 35
13900: PUSH
13901: LD_INT 36
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 101
13944: PUSH
13945: LD_INT 102
13947: PUSH
13948: LD_INT 103
13950: PUSH
13951: LD_INT 104
13953: PUSH
13954: LD_INT 105
13956: PUSH
13957: LD_INT 106
13959: PUSH
13960: LD_INT 107
13962: PUSH
13963: LD_INT 108
13965: PUSH
13966: LD_INT 109
13968: PUSH
13969: LD_INT 110
13971: PUSH
13972: LD_INT 111
13974: PUSH
13975: LD_INT 112
13977: PUSH
13978: LD_INT 113
13980: PUSH
13981: LD_INT 114
13983: PUSH
13984: LD_INT 115
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 14011
14010: POP
// end else
14011: GO 14230
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14013: LD_ADDR_VAR 0 1
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 27
14098: PUSH
14099: LD_INT 28
14101: PUSH
14102: LD_INT 29
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 33
14116: PUSH
14117: LD_INT 34
14119: PUSH
14120: LD_INT 35
14122: PUSH
14123: LD_INT 36
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 101
14166: PUSH
14167: LD_INT 102
14169: PUSH
14170: LD_INT 103
14172: PUSH
14173: LD_INT 104
14175: PUSH
14176: LD_INT 105
14178: PUSH
14179: LD_INT 106
14181: PUSH
14182: LD_INT 107
14184: PUSH
14185: LD_INT 108
14187: PUSH
14188: LD_INT 109
14190: PUSH
14191: LD_INT 110
14193: PUSH
14194: LD_INT 111
14196: PUSH
14197: LD_INT 112
14199: PUSH
14200: LD_INT 113
14202: PUSH
14203: LD_INT 114
14205: PUSH
14206: LD_INT 115
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: ST_TO_ADDR
// if result then
14230: LD_VAR 0 1
14234: IFFALSE 14523
// begin normal :=  ;
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: LD_STRING 
14243: ST_TO_ADDR
// hardcore :=  ;
14244: LD_ADDR_VAR 0 4
14248: PUSH
14249: LD_STRING 
14251: ST_TO_ADDR
// for i = 1 to normalCounter do
14252: LD_ADDR_VAR 0 5
14256: PUSH
14257: DOUBLE
14258: LD_INT 1
14260: DEC
14261: ST_TO_ADDR
14262: LD_EXP 33
14266: PUSH
14267: FOR_TO
14268: IFFALSE 14369
// begin tmp := 0 ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_STRING 0
14277: ST_TO_ADDR
// if result [ 1 ] then
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: IFFALSE 14351
// if result [ 1 ] [ 1 ] = i then
14288: LD_VAR 0 1
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PUSH
14301: LD_VAR 0 5
14305: EQUAL
14306: IFFALSE 14351
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: LD_VAR 0 1
14325: PUSH
14326: LD_INT 1
14328: ARRAY
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: CALL_OW 3
14337: PPUSH
14338: CALL_OW 1
14342: ST_TO_ADDR
// tmp := 1 ;
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_STRING 1
14350: ST_TO_ADDR
// end ; normal := normal & tmp ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 3
14360: PUSH
14361: LD_VAR 0 2
14365: STR
14366: ST_TO_ADDR
// end ;
14367: GO 14267
14369: POP
14370: POP
// for i = 1 to hardcoreCounter do
14371: LD_ADDR_VAR 0 5
14375: PUSH
14376: DOUBLE
14377: LD_INT 1
14379: DEC
14380: ST_TO_ADDR
14381: LD_EXP 34
14385: PUSH
14386: FOR_TO
14387: IFFALSE 14492
// begin tmp := 0 ;
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_STRING 0
14396: ST_TO_ADDR
// if result [ 2 ] then
14397: LD_VAR 0 1
14401: PUSH
14402: LD_INT 2
14404: ARRAY
14405: IFFALSE 14474
// if result [ 2 ] [ 1 ] = 100 + i then
14407: LD_VAR 0 1
14411: PUSH
14412: LD_INT 2
14414: ARRAY
14415: PUSH
14416: LD_INT 1
14418: ARRAY
14419: PUSH
14420: LD_INT 100
14422: PUSH
14423: LD_VAR 0 5
14427: PLUS
14428: EQUAL
14429: IFFALSE 14474
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_VAR 0 1
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: LD_VAR 0 1
14448: PUSH
14449: LD_INT 2
14451: ARRAY
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 3
14460: PPUSH
14461: CALL_OW 1
14465: ST_TO_ADDR
// tmp := 1 ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_STRING 1
14473: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14474: LD_ADDR_VAR 0 4
14478: PUSH
14479: LD_VAR 0 4
14483: PUSH
14484: LD_VAR 0 2
14488: STR
14489: ST_TO_ADDR
// end ;
14490: GO 14386
14492: POP
14493: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14494: LD_STRING getStreamItemsFromMission("
14496: PUSH
14497: LD_VAR 0 3
14501: STR
14502: PUSH
14503: LD_STRING ","
14505: STR
14506: PUSH
14507: LD_VAR 0 4
14511: STR
14512: PUSH
14513: LD_STRING ")
14515: STR
14516: PPUSH
14517: CALL_OW 559
// end else
14521: GO 14530
// ToLua ( getStreamItemsFromMission("","") ) ;
14523: LD_STRING getStreamItemsFromMission("","")
14525: PPUSH
14526: CALL_OW 559
// end ;
14530: LD_VAR 0 1
14534: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 100
14542: EQUAL
14543: IFFALSE 15492
// begin if not StreamModeActive then
14545: LD_EXP 32
14549: NOT
14550: IFFALSE 14560
// StreamModeActive := true ;
14552: LD_ADDR_EXP 32
14556: PUSH
14557: LD_INT 1
14559: ST_TO_ADDR
// if p3 = 0 then
14560: LD_VAR 0 3
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: IFFALSE 14574
// InitStreamMode ;
14570: CALL 10613 0 0
// if p3 = 1 then
14574: LD_VAR 0 3
14578: PUSH
14579: LD_INT 1
14581: EQUAL
14582: IFFALSE 14592
// sRocket := true ;
14584: LD_ADDR_EXP 37
14588: PUSH
14589: LD_INT 1
14591: ST_TO_ADDR
// if p3 = 2 then
14592: LD_VAR 0 3
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: IFFALSE 14610
// sSpeed := true ;
14602: LD_ADDR_EXP 36
14606: PUSH
14607: LD_INT 1
14609: ST_TO_ADDR
// if p3 = 3 then
14610: LD_VAR 0 3
14614: PUSH
14615: LD_INT 3
14617: EQUAL
14618: IFFALSE 14628
// sEngine := true ;
14620: LD_ADDR_EXP 38
14624: PUSH
14625: LD_INT 1
14627: ST_TO_ADDR
// if p3 = 4 then
14628: LD_VAR 0 3
14632: PUSH
14633: LD_INT 4
14635: EQUAL
14636: IFFALSE 14646
// sSpec := true ;
14638: LD_ADDR_EXP 35
14642: PUSH
14643: LD_INT 1
14645: ST_TO_ADDR
// if p3 = 5 then
14646: LD_VAR 0 3
14650: PUSH
14651: LD_INT 5
14653: EQUAL
14654: IFFALSE 14664
// sLevel := true ;
14656: LD_ADDR_EXP 39
14660: PUSH
14661: LD_INT 1
14663: ST_TO_ADDR
// if p3 = 6 then
14664: LD_VAR 0 3
14668: PUSH
14669: LD_INT 6
14671: EQUAL
14672: IFFALSE 14682
// sArmoury := true ;
14674: LD_ADDR_EXP 40
14678: PUSH
14679: LD_INT 1
14681: ST_TO_ADDR
// if p3 = 7 then
14682: LD_VAR 0 3
14686: PUSH
14687: LD_INT 7
14689: EQUAL
14690: IFFALSE 14700
// sRadar := true ;
14692: LD_ADDR_EXP 41
14696: PUSH
14697: LD_INT 1
14699: ST_TO_ADDR
// if p3 = 8 then
14700: LD_VAR 0 3
14704: PUSH
14705: LD_INT 8
14707: EQUAL
14708: IFFALSE 14718
// sBunker := true ;
14710: LD_ADDR_EXP 42
14714: PUSH
14715: LD_INT 1
14717: ST_TO_ADDR
// if p3 = 9 then
14718: LD_VAR 0 3
14722: PUSH
14723: LD_INT 9
14725: EQUAL
14726: IFFALSE 14736
// sHack := true ;
14728: LD_ADDR_EXP 43
14732: PUSH
14733: LD_INT 1
14735: ST_TO_ADDR
// if p3 = 10 then
14736: LD_VAR 0 3
14740: PUSH
14741: LD_INT 10
14743: EQUAL
14744: IFFALSE 14754
// sFire := true ;
14746: LD_ADDR_EXP 44
14750: PUSH
14751: LD_INT 1
14753: ST_TO_ADDR
// if p3 = 11 then
14754: LD_VAR 0 3
14758: PUSH
14759: LD_INT 11
14761: EQUAL
14762: IFFALSE 14772
// sRefresh := true ;
14764: LD_ADDR_EXP 45
14768: PUSH
14769: LD_INT 1
14771: ST_TO_ADDR
// if p3 = 12 then
14772: LD_VAR 0 3
14776: PUSH
14777: LD_INT 12
14779: EQUAL
14780: IFFALSE 14790
// sExp := true ;
14782: LD_ADDR_EXP 46
14786: PUSH
14787: LD_INT 1
14789: ST_TO_ADDR
// if p3 = 13 then
14790: LD_VAR 0 3
14794: PUSH
14795: LD_INT 13
14797: EQUAL
14798: IFFALSE 14808
// sDepot := true ;
14800: LD_ADDR_EXP 47
14804: PUSH
14805: LD_INT 1
14807: ST_TO_ADDR
// if p3 = 14 then
14808: LD_VAR 0 3
14812: PUSH
14813: LD_INT 14
14815: EQUAL
14816: IFFALSE 14826
// sFlag := true ;
14818: LD_ADDR_EXP 48
14822: PUSH
14823: LD_INT 1
14825: ST_TO_ADDR
// if p3 = 15 then
14826: LD_VAR 0 3
14830: PUSH
14831: LD_INT 15
14833: EQUAL
14834: IFFALSE 14844
// sKamikadze := true ;
14836: LD_ADDR_EXP 56
14840: PUSH
14841: LD_INT 1
14843: ST_TO_ADDR
// if p3 = 16 then
14844: LD_VAR 0 3
14848: PUSH
14849: LD_INT 16
14851: EQUAL
14852: IFFALSE 14862
// sTroll := true ;
14854: LD_ADDR_EXP 57
14858: PUSH
14859: LD_INT 1
14861: ST_TO_ADDR
// if p3 = 17 then
14862: LD_VAR 0 3
14866: PUSH
14867: LD_INT 17
14869: EQUAL
14870: IFFALSE 14880
// sSlow := true ;
14872: LD_ADDR_EXP 58
14876: PUSH
14877: LD_INT 1
14879: ST_TO_ADDR
// if p3 = 18 then
14880: LD_VAR 0 3
14884: PUSH
14885: LD_INT 18
14887: EQUAL
14888: IFFALSE 14898
// sLack := true ;
14890: LD_ADDR_EXP 59
14894: PUSH
14895: LD_INT 1
14897: ST_TO_ADDR
// if p3 = 19 then
14898: LD_VAR 0 3
14902: PUSH
14903: LD_INT 19
14905: EQUAL
14906: IFFALSE 14916
// sTank := true ;
14908: LD_ADDR_EXP 61
14912: PUSH
14913: LD_INT 1
14915: ST_TO_ADDR
// if p3 = 20 then
14916: LD_VAR 0 3
14920: PUSH
14921: LD_INT 20
14923: EQUAL
14924: IFFALSE 14934
// sRemote := true ;
14926: LD_ADDR_EXP 62
14930: PUSH
14931: LD_INT 1
14933: ST_TO_ADDR
// if p3 = 21 then
14934: LD_VAR 0 3
14938: PUSH
14939: LD_INT 21
14941: EQUAL
14942: IFFALSE 14952
// sPowell := true ;
14944: LD_ADDR_EXP 63
14948: PUSH
14949: LD_INT 1
14951: ST_TO_ADDR
// if p3 = 22 then
14952: LD_VAR 0 3
14956: PUSH
14957: LD_INT 22
14959: EQUAL
14960: IFFALSE 14970
// sTeleport := true ;
14962: LD_ADDR_EXP 66
14966: PUSH
14967: LD_INT 1
14969: ST_TO_ADDR
// if p3 = 23 then
14970: LD_VAR 0 3
14974: PUSH
14975: LD_INT 23
14977: EQUAL
14978: IFFALSE 14988
// sOilTower := true ;
14980: LD_ADDR_EXP 68
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// if p3 = 24 then
14988: LD_VAR 0 3
14992: PUSH
14993: LD_INT 24
14995: EQUAL
14996: IFFALSE 15006
// sShovel := true ;
14998: LD_ADDR_EXP 69
15002: PUSH
15003: LD_INT 1
15005: ST_TO_ADDR
// if p3 = 25 then
15006: LD_VAR 0 3
15010: PUSH
15011: LD_INT 25
15013: EQUAL
15014: IFFALSE 15024
// sSheik := true ;
15016: LD_ADDR_EXP 70
15020: PUSH
15021: LD_INT 1
15023: ST_TO_ADDR
// if p3 = 26 then
15024: LD_VAR 0 3
15028: PUSH
15029: LD_INT 26
15031: EQUAL
15032: IFFALSE 15042
// sEarthquake := true ;
15034: LD_ADDR_EXP 72
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// if p3 = 27 then
15042: LD_VAR 0 3
15046: PUSH
15047: LD_INT 27
15049: EQUAL
15050: IFFALSE 15060
// sAI := true ;
15052: LD_ADDR_EXP 73
15056: PUSH
15057: LD_INT 1
15059: ST_TO_ADDR
// if p3 = 28 then
15060: LD_VAR 0 3
15064: PUSH
15065: LD_INT 28
15067: EQUAL
15068: IFFALSE 15078
// sCargo := true ;
15070: LD_ADDR_EXP 76
15074: PUSH
15075: LD_INT 1
15077: ST_TO_ADDR
// if p3 = 29 then
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 29
15085: EQUAL
15086: IFFALSE 15096
// sDLaser := true ;
15088: LD_ADDR_EXP 77
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// if p3 = 30 then
15096: LD_VAR 0 3
15100: PUSH
15101: LD_INT 30
15103: EQUAL
15104: IFFALSE 15114
// sExchange := true ;
15106: LD_ADDR_EXP 78
15110: PUSH
15111: LD_INT 1
15113: ST_TO_ADDR
// if p3 = 31 then
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 31
15121: EQUAL
15122: IFFALSE 15132
// sFac := true ;
15124: LD_ADDR_EXP 79
15128: PUSH
15129: LD_INT 1
15131: ST_TO_ADDR
// if p3 = 32 then
15132: LD_VAR 0 3
15136: PUSH
15137: LD_INT 32
15139: EQUAL
15140: IFFALSE 15150
// sPower := true ;
15142: LD_ADDR_EXP 80
15146: PUSH
15147: LD_INT 1
15149: ST_TO_ADDR
// if p3 = 33 then
15150: LD_VAR 0 3
15154: PUSH
15155: LD_INT 33
15157: EQUAL
15158: IFFALSE 15168
// sRandom := true ;
15160: LD_ADDR_EXP 81
15164: PUSH
15165: LD_INT 1
15167: ST_TO_ADDR
// if p3 = 34 then
15168: LD_VAR 0 3
15172: PUSH
15173: LD_INT 34
15175: EQUAL
15176: IFFALSE 15186
// sShield := true ;
15178: LD_ADDR_EXP 82
15182: PUSH
15183: LD_INT 1
15185: ST_TO_ADDR
// if p3 = 35 then
15186: LD_VAR 0 3
15190: PUSH
15191: LD_INT 35
15193: EQUAL
15194: IFFALSE 15204
// sTime := true ;
15196: LD_ADDR_EXP 83
15200: PUSH
15201: LD_INT 1
15203: ST_TO_ADDR
// if p3 = 36 then
15204: LD_VAR 0 3
15208: PUSH
15209: LD_INT 36
15211: EQUAL
15212: IFFALSE 15222
// sTools := true ;
15214: LD_ADDR_EXP 84
15218: PUSH
15219: LD_INT 1
15221: ST_TO_ADDR
// if p3 = 101 then
15222: LD_VAR 0 3
15226: PUSH
15227: LD_INT 101
15229: EQUAL
15230: IFFALSE 15240
// sSold := true ;
15232: LD_ADDR_EXP 49
15236: PUSH
15237: LD_INT 1
15239: ST_TO_ADDR
// if p3 = 102 then
15240: LD_VAR 0 3
15244: PUSH
15245: LD_INT 102
15247: EQUAL
15248: IFFALSE 15258
// sDiff := true ;
15250: LD_ADDR_EXP 50
15254: PUSH
15255: LD_INT 1
15257: ST_TO_ADDR
// if p3 = 103 then
15258: LD_VAR 0 3
15262: PUSH
15263: LD_INT 103
15265: EQUAL
15266: IFFALSE 15276
// sFog := true ;
15268: LD_ADDR_EXP 53
15272: PUSH
15273: LD_INT 1
15275: ST_TO_ADDR
// if p3 = 104 then
15276: LD_VAR 0 3
15280: PUSH
15281: LD_INT 104
15283: EQUAL
15284: IFFALSE 15294
// sReset := true ;
15286: LD_ADDR_EXP 54
15290: PUSH
15291: LD_INT 1
15293: ST_TO_ADDR
// if p3 = 105 then
15294: LD_VAR 0 3
15298: PUSH
15299: LD_INT 105
15301: EQUAL
15302: IFFALSE 15312
// sSun := true ;
15304: LD_ADDR_EXP 55
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// if p3 = 106 then
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 106
15319: EQUAL
15320: IFFALSE 15330
// sTiger := true ;
15322: LD_ADDR_EXP 51
15326: PUSH
15327: LD_INT 1
15329: ST_TO_ADDR
// if p3 = 107 then
15330: LD_VAR 0 3
15334: PUSH
15335: LD_INT 107
15337: EQUAL
15338: IFFALSE 15348
// sBomb := true ;
15340: LD_ADDR_EXP 52
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// if p3 = 108 then
15348: LD_VAR 0 3
15352: PUSH
15353: LD_INT 108
15355: EQUAL
15356: IFFALSE 15366
// sWound := true ;
15358: LD_ADDR_EXP 60
15362: PUSH
15363: LD_INT 1
15365: ST_TO_ADDR
// if p3 = 109 then
15366: LD_VAR 0 3
15370: PUSH
15371: LD_INT 109
15373: EQUAL
15374: IFFALSE 15384
// sBetray := true ;
15376: LD_ADDR_EXP 64
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if p3 = 110 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 110
15391: EQUAL
15392: IFFALSE 15402
// sContamin := true ;
15394: LD_ADDR_EXP 65
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if p3 = 111 then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 111
15409: EQUAL
15410: IFFALSE 15420
// sOil := true ;
15412: LD_ADDR_EXP 67
15416: PUSH
15417: LD_INT 1
15419: ST_TO_ADDR
// if p3 = 112 then
15420: LD_VAR 0 3
15424: PUSH
15425: LD_INT 112
15427: EQUAL
15428: IFFALSE 15438
// sStu := true ;
15430: LD_ADDR_EXP 71
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// if p3 = 113 then
15438: LD_VAR 0 3
15442: PUSH
15443: LD_INT 113
15445: EQUAL
15446: IFFALSE 15456
// sBazooka := true ;
15448: LD_ADDR_EXP 74
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// if p3 = 114 then
15456: LD_VAR 0 3
15460: PUSH
15461: LD_INT 114
15463: EQUAL
15464: IFFALSE 15474
// sMortar := true ;
15466: LD_ADDR_EXP 75
15470: PUSH
15471: LD_INT 1
15473: ST_TO_ADDR
// if p3 = 115 then
15474: LD_VAR 0 3
15478: PUSH
15479: LD_INT 115
15481: EQUAL
15482: IFFALSE 15492
// sRanger := true ;
15484: LD_ADDR_EXP 85
15488: PUSH
15489: LD_INT 1
15491: ST_TO_ADDR
// end ; end ;
15492: PPOPN 6
15494: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15495: LD_EXP 32
15499: PUSH
15500: LD_EXP 37
15504: AND
15505: IFFALSE 15629
15507: GO 15509
15509: DISABLE
15510: LD_INT 0
15512: PPUSH
15513: PPUSH
// begin enable ;
15514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15515: LD_ADDR_VAR 0 2
15519: PUSH
15520: LD_INT 22
15522: PUSH
15523: LD_OWVAR 2
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 2
15534: PUSH
15535: LD_INT 34
15537: PUSH
15538: LD_INT 7
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 34
15547: PUSH
15548: LD_INT 45
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 34
15557: PUSH
15558: LD_INT 28
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 34
15567: PUSH
15568: LD_INT 47
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: ST_TO_ADDR
// if not tmp then
15591: LD_VAR 0 2
15595: NOT
15596: IFFALSE 15600
// exit ;
15598: GO 15629
// for i in tmp do
15600: LD_ADDR_VAR 0 1
15604: PUSH
15605: LD_VAR 0 2
15609: PUSH
15610: FOR_IN
15611: IFFALSE 15627
// begin SetLives ( i , 0 ) ;
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 234
// end ;
15625: GO 15610
15627: POP
15628: POP
// end ;
15629: PPOPN 2
15631: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15632: LD_EXP 32
15636: PUSH
15637: LD_EXP 38
15641: AND
15642: IFFALSE 15726
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
// begin enable ;
15651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_OWVAR 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 32
15671: PUSH
15672: LD_INT 3
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: ST_TO_ADDR
// if not tmp then
15688: LD_VAR 0 2
15692: NOT
15693: IFFALSE 15697
// exit ;
15695: GO 15726
// for i in tmp do
15697: LD_ADDR_VAR 0 1
15701: PUSH
15702: LD_VAR 0 2
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15724
// begin SetLives ( i , 0 ) ;
15710: LD_VAR 0 1
15714: PPUSH
15715: LD_INT 0
15717: PPUSH
15718: CALL_OW 234
// end ;
15722: GO 15707
15724: POP
15725: POP
// end ;
15726: PPOPN 2
15728: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15729: LD_EXP 32
15733: PUSH
15734: LD_EXP 35
15738: AND
15739: IFFALSE 15832
15741: GO 15743
15743: DISABLE
15744: LD_INT 0
15746: PPUSH
// begin enable ;
15747: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15748: LD_ADDR_VAR 0 1
15752: PUSH
15753: LD_INT 22
15755: PUSH
15756: LD_OWVAR 2
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 5
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 25
15780: PUSH
15781: LD_INT 9
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 25
15790: PUSH
15791: LD_INT 8
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PPUSH
15808: CALL_OW 69
15812: PUSH
15813: FOR_IN
15814: IFFALSE 15830
// begin SetClass ( i , 1 ) ;
15816: LD_VAR 0 1
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: CALL_OW 336
// end ;
15828: GO 15813
15830: POP
15831: POP
// end ;
15832: PPOPN 1
15834: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15835: LD_EXP 32
15839: PUSH
15840: LD_EXP 36
15844: AND
15845: PUSH
15846: LD_OWVAR 65
15850: PUSH
15851: LD_INT 7
15853: LESS
15854: AND
15855: IFFALSE 15869
15857: GO 15859
15859: DISABLE
// begin enable ;
15860: ENABLE
// game_speed := 7 ;
15861: LD_ADDR_OWVAR 65
15865: PUSH
15866: LD_INT 7
15868: ST_TO_ADDR
// end ;
15869: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15870: LD_EXP 32
15874: PUSH
15875: LD_EXP 39
15879: AND
15880: IFFALSE 16082
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
15888: PPUSH
15889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15890: LD_ADDR_VAR 0 3
15894: PUSH
15895: LD_INT 81
15897: PUSH
15898: LD_OWVAR 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 21
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: ST_TO_ADDR
// if not tmp then
15926: LD_VAR 0 3
15930: NOT
15931: IFFALSE 15935
// exit ;
15933: GO 16082
// if tmp > 5 then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 5
15942: GREATER
15943: IFFALSE 15955
// k := 5 else
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 5
15952: ST_TO_ADDR
15953: GO 15965
// k := tmp ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_VAR 0 3
15964: ST_TO_ADDR
// for i := 1 to k do
15965: LD_ADDR_VAR 0 1
15969: PUSH
15970: DOUBLE
15971: LD_INT 1
15973: DEC
15974: ST_TO_ADDR
15975: LD_VAR 0 2
15979: PUSH
15980: FOR_TO
15981: IFFALSE 16080
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15983: LD_VAR 0 3
15987: PUSH
15988: LD_VAR 0 1
15992: ARRAY
15993: PPUSH
15994: LD_VAR 0 1
15998: PUSH
15999: LD_INT 4
16001: MOD
16002: PUSH
16003: LD_INT 1
16005: PLUS
16006: PPUSH
16007: CALL_OW 259
16011: PUSH
16012: LD_INT 10
16014: LESS
16015: IFFALSE 16078
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16017: LD_VAR 0 3
16021: PUSH
16022: LD_VAR 0 1
16026: ARRAY
16027: PPUSH
16028: LD_VAR 0 1
16032: PUSH
16033: LD_INT 4
16035: MOD
16036: PUSH
16037: LD_INT 1
16039: PLUS
16040: PPUSH
16041: LD_VAR 0 3
16045: PUSH
16046: LD_VAR 0 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 1
16056: PUSH
16057: LD_INT 4
16059: MOD
16060: PUSH
16061: LD_INT 1
16063: PLUS
16064: PPUSH
16065: CALL_OW 259
16069: PUSH
16070: LD_INT 1
16072: PLUS
16073: PPUSH
16074: CALL_OW 237
16078: GO 15980
16080: POP
16081: POP
// end ;
16082: PPOPN 3
16084: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16085: LD_EXP 32
16089: PUSH
16090: LD_EXP 40
16094: AND
16095: IFFALSE 16115
16097: GO 16099
16099: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16100: LD_INT 4
16102: PPUSH
16103: LD_OWVAR 2
16107: PPUSH
16108: LD_INT 0
16110: PPUSH
16111: CALL_OW 324
16115: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16116: LD_EXP 32
16120: PUSH
16121: LD_EXP 69
16125: AND
16126: IFFALSE 16146
16128: GO 16130
16130: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16131: LD_INT 19
16133: PPUSH
16134: LD_OWVAR 2
16138: PPUSH
16139: LD_INT 0
16141: PPUSH
16142: CALL_OW 324
16146: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16147: LD_EXP 32
16151: PUSH
16152: LD_EXP 41
16156: AND
16157: IFFALSE 16259
16159: GO 16161
16161: DISABLE
16162: LD_INT 0
16164: PPUSH
16165: PPUSH
// begin enable ;
16166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16167: LD_ADDR_VAR 0 2
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_OWVAR 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: LD_INT 34
16189: PUSH
16190: LD_INT 11
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 34
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: ST_TO_ADDR
// if not tmp then
16221: LD_VAR 0 2
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16259
// for i in tmp do
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: LD_VAR 0 2
16239: PUSH
16240: FOR_IN
16241: IFFALSE 16257
// begin SetLives ( i , 0 ) ;
16243: LD_VAR 0 1
16247: PPUSH
16248: LD_INT 0
16250: PPUSH
16251: CALL_OW 234
// end ;
16255: GO 16240
16257: POP
16258: POP
// end ;
16259: PPOPN 2
16261: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16262: LD_EXP 32
16266: PUSH
16267: LD_EXP 42
16271: AND
16272: IFFALSE 16292
16274: GO 16276
16276: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16277: LD_INT 32
16279: PPUSH
16280: LD_OWVAR 2
16284: PPUSH
16285: LD_INT 0
16287: PPUSH
16288: CALL_OW 324
16292: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16293: LD_EXP 32
16297: PUSH
16298: LD_EXP 43
16302: AND
16303: IFFALSE 16484
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
16312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16313: LD_ADDR_VAR 0 2
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_OWVAR 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 33
16332: PUSH
16333: LD_INT 3
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 2
16353: NOT
16354: IFFALSE 16358
// exit ;
16356: GO 16484
// side := 0 ;
16358: LD_ADDR_VAR 0 3
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// for i := 1 to 8 do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: DOUBLE
16372: LD_INT 1
16374: DEC
16375: ST_TO_ADDR
16376: LD_INT 8
16378: PUSH
16379: FOR_TO
16380: IFFALSE 16428
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16382: LD_OWVAR 2
16386: PUSH
16387: LD_VAR 0 1
16391: NONEQUAL
16392: PUSH
16393: LD_OWVAR 2
16397: PPUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 81
16407: PUSH
16408: LD_INT 2
16410: EQUAL
16411: AND
16412: IFFALSE 16426
// begin side := i ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_VAR 0 1
16423: ST_TO_ADDR
// break ;
16424: GO 16428
// end ;
16426: GO 16379
16428: POP
16429: POP
// if not side then
16430: LD_VAR 0 3
16434: NOT
16435: IFFALSE 16439
// exit ;
16437: GO 16484
// for i := 1 to tmp do
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: DOUBLE
16445: LD_INT 1
16447: DEC
16448: ST_TO_ADDR
16449: LD_VAR 0 2
16453: PUSH
16454: FOR_TO
16455: IFFALSE 16482
// if Prob ( 60 ) then
16457: LD_INT 60
16459: PPUSH
16460: CALL_OW 13
16464: IFFALSE 16480
// SetSide ( i , side ) ;
16466: LD_VAR 0 1
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: CALL_OW 235
16480: GO 16454
16482: POP
16483: POP
// end ;
16484: PPOPN 3
16486: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16487: LD_EXP 32
16491: PUSH
16492: LD_EXP 45
16496: AND
16497: IFFALSE 16616
16499: GO 16501
16501: DISABLE
16502: LD_INT 0
16504: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16505: LD_ADDR_VAR 0 1
16509: PUSH
16510: LD_INT 22
16512: PUSH
16513: LD_OWVAR 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: LD_INT 23
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: PUSH
16559: FOR_IN
16560: IFFALSE 16614
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 257
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: LD_INT 3
16580: PUSH
16581: LD_INT 4
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: IN
16590: IFFALSE 16612
// SetClass ( un , rand ( 1 , 4 ) ) ;
16592: LD_VAR 0 1
16596: PPUSH
16597: LD_INT 1
16599: PPUSH
16600: LD_INT 4
16602: PPUSH
16603: CALL_OW 12
16607: PPUSH
16608: CALL_OW 336
16612: GO 16559
16614: POP
16615: POP
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16619: LD_EXP 32
16623: PUSH
16624: LD_EXP 44
16628: AND
16629: IFFALSE 16708
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_OWVAR 2
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 21
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 69
16672: ST_TO_ADDR
// if not tmp then
16673: LD_VAR 0 1
16677: NOT
16678: IFFALSE 16682
// exit ;
16680: GO 16708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 12
16699: ARRAY
16700: PPUSH
16701: LD_INT 100
16703: PPUSH
16704: CALL_OW 234
// end ;
16708: PPOPN 1
16710: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16711: LD_EXP 32
16715: PUSH
16716: LD_EXP 46
16720: AND
16721: IFFALSE 16819
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 21
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 69
16764: ST_TO_ADDR
// if not tmp then
16765: LD_VAR 0 1
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16819
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16774: LD_VAR 0 1
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 12
16791: ARRAY
16792: PPUSH
16793: LD_INT 1
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: CALL_OW 12
16803: PPUSH
16804: LD_INT 3000
16806: PPUSH
16807: LD_INT 9000
16809: PPUSH
16810: CALL_OW 12
16814: PPUSH
16815: CALL_OW 492
// end ;
16819: PPOPN 1
16821: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16822: LD_EXP 32
16826: PUSH
16827: LD_EXP 47
16831: AND
16832: IFFALSE 16852
16834: GO 16836
16836: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16837: LD_INT 1
16839: PPUSH
16840: LD_OWVAR 2
16844: PPUSH
16845: LD_INT 0
16847: PPUSH
16848: CALL_OW 324
16852: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16853: LD_EXP 32
16857: PUSH
16858: LD_EXP 48
16862: AND
16863: IFFALSE 16946
16865: GO 16867
16867: DISABLE
16868: LD_INT 0
16870: PPUSH
16871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16872: LD_ADDR_VAR 0 2
16876: PUSH
16877: LD_INT 22
16879: PUSH
16880: LD_OWVAR 2
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 3
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not tmp then
16908: LD_VAR 0 2
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16946
// for i in tmp do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_VAR 0 2
16926: PUSH
16927: FOR_IN
16928: IFFALSE 16944
// SetBLevel ( i , 10 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 10
16937: PPUSH
16938: CALL_OW 241
16942: GO 16927
16944: POP
16945: POP
// end ;
16946: PPOPN 2
16948: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16949: LD_EXP 32
16953: PUSH
16954: LD_EXP 49
16958: AND
16959: IFFALSE 17070
16961: GO 16963
16963: DISABLE
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_OWVAR 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 25
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 3
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17070
// un := tmp [ rand ( 1 , tmp ) ] ;
17014: LD_ADDR_VAR 0 2
17018: PUSH
17019: LD_VAR 0 3
17023: PUSH
17024: LD_INT 1
17026: PPUSH
17027: LD_VAR 0 3
17031: PPUSH
17032: CALL_OW 12
17036: ARRAY
17037: ST_TO_ADDR
// if Crawls ( un ) then
17038: LD_VAR 0 2
17042: PPUSH
17043: CALL_OW 318
17047: IFFALSE 17058
// ComWalk ( un ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17058: LD_VAR 0 2
17062: PPUSH
17063: LD_INT 5
17065: PPUSH
17066: CALL_OW 336
// end ;
17070: PPOPN 3
17072: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17073: LD_EXP 32
17077: PUSH
17078: LD_EXP 50
17082: AND
17083: PUSH
17084: LD_OWVAR 67
17088: PUSH
17089: LD_INT 3
17091: LESS
17092: AND
17093: IFFALSE 17112
17095: GO 17097
17097: DISABLE
// Difficulty := Difficulty + 1 ;
17098: LD_ADDR_OWVAR 67
17102: PUSH
17103: LD_OWVAR 67
17107: PUSH
17108: LD_INT 1
17110: PLUS
17111: ST_TO_ADDR
17112: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17113: LD_EXP 32
17117: PUSH
17118: LD_EXP 51
17122: AND
17123: IFFALSE 17226
17125: GO 17127
17127: DISABLE
17128: LD_INT 0
17130: PPUSH
// begin for i := 1 to 5 do
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: DOUBLE
17137: LD_INT 1
17139: DEC
17140: ST_TO_ADDR
17141: LD_INT 5
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17224
// begin uc_nation := nation_nature ;
17147: LD_ADDR_OWVAR 21
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// uc_side := 0 ;
17155: LD_ADDR_OWVAR 20
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17163: LD_ADDR_OWVAR 29
17167: PUSH
17168: LD_INT 12
17170: PUSH
17171: LD_INT 12
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: ST_TO_ADDR
// hc_agressivity := 20 ;
17178: LD_ADDR_OWVAR 35
17182: PUSH
17183: LD_INT 20
17185: ST_TO_ADDR
// hc_class := class_tiger ;
17186: LD_ADDR_OWVAR 28
17190: PUSH
17191: LD_INT 14
17193: ST_TO_ADDR
// hc_gallery :=  ;
17194: LD_ADDR_OWVAR 33
17198: PUSH
17199: LD_STRING 
17201: ST_TO_ADDR
// hc_name :=  ;
17202: LD_ADDR_OWVAR 26
17206: PUSH
17207: LD_STRING 
17209: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17210: CALL_OW 44
17214: PPUSH
17215: LD_INT 0
17217: PPUSH
17218: CALL_OW 51
// end ;
17222: GO 17144
17224: POP
17225: POP
// end ;
17226: PPOPN 1
17228: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17229: LD_EXP 32
17233: PUSH
17234: LD_EXP 52
17238: AND
17239: IFFALSE 17248
17241: GO 17243
17243: DISABLE
// StreamSibBomb ;
17244: CALL 17249 0 0
17248: END
// export function StreamSibBomb ; var i , x , y ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
// result := false ;
17255: LD_ADDR_VAR 0 1
17259: PUSH
17260: LD_INT 0
17262: ST_TO_ADDR
// for i := 1 to 16 do
17263: LD_ADDR_VAR 0 2
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 16
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17476
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17279: LD_ADDR_VAR 0 3
17283: PUSH
17284: LD_INT 10
17286: PUSH
17287: LD_INT 20
17289: PUSH
17290: LD_INT 30
17292: PUSH
17293: LD_INT 40
17295: PUSH
17296: LD_INT 50
17298: PUSH
17299: LD_INT 60
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 80
17307: PUSH
17308: LD_INT 90
17310: PUSH
17311: LD_INT 100
17313: PUSH
17314: LD_INT 110
17316: PUSH
17317: LD_INT 120
17319: PUSH
17320: LD_INT 130
17322: PUSH
17323: LD_INT 140
17325: PUSH
17326: LD_INT 150
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: PPUSH
17349: LD_INT 15
17351: PPUSH
17352: CALL_OW 12
17356: ARRAY
17357: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17358: LD_ADDR_VAR 0 4
17362: PUSH
17363: LD_INT 10
17365: PUSH
17366: LD_INT 20
17368: PUSH
17369: LD_INT 30
17371: PUSH
17372: LD_INT 40
17374: PUSH
17375: LD_INT 50
17377: PUSH
17378: LD_INT 60
17380: PUSH
17381: LD_INT 70
17383: PUSH
17384: LD_INT 80
17386: PUSH
17387: LD_INT 90
17389: PUSH
17390: LD_INT 100
17392: PUSH
17393: LD_INT 110
17395: PUSH
17396: LD_INT 120
17398: PUSH
17399: LD_INT 130
17401: PUSH
17402: LD_INT 140
17404: PUSH
17405: LD_INT 150
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 1
17427: PPUSH
17428: LD_INT 15
17430: PPUSH
17431: CALL_OW 12
17435: ARRAY
17436: ST_TO_ADDR
// if ValidHex ( x , y ) then
17437: LD_VAR 0 3
17441: PPUSH
17442: LD_VAR 0 4
17446: PPUSH
17447: CALL_OW 488
17451: IFFALSE 17474
// begin result := [ x , y ] ;
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: LD_VAR 0 3
17462: PUSH
17463: LD_VAR 0 4
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: ST_TO_ADDR
// break ;
17472: GO 17476
// end ; end ;
17474: GO 17276
17476: POP
17477: POP
// if result then
17478: LD_VAR 0 1
17482: IFFALSE 17542
// begin ToLua ( playSibBomb() ) ;
17484: LD_STRING playSibBomb()
17486: PPUSH
17487: CALL_OW 559
// wait ( 0 0$14 ) ;
17491: LD_INT 490
17493: PPUSH
17494: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17498: LD_VAR 0 1
17502: PUSH
17503: LD_INT 1
17505: ARRAY
17506: PPUSH
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 2
17514: ARRAY
17515: PPUSH
17516: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17520: LD_VAR 0 1
17524: PUSH
17525: LD_INT 1
17527: ARRAY
17528: PPUSH
17529: LD_VAR 0 1
17533: PUSH
17534: LD_INT 2
17536: ARRAY
17537: PPUSH
17538: CALL_OW 429
// end ; end ;
17542: LD_VAR 0 1
17546: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17547: LD_EXP 32
17551: PUSH
17552: LD_EXP 54
17556: AND
17557: IFFALSE 17569
17559: GO 17561
17561: DISABLE
// YouLost (  ) ;
17562: LD_STRING 
17564: PPUSH
17565: CALL_OW 104
17569: END
// every 0 0$1 trigger StreamModeActive and sFog do
17570: LD_EXP 32
17574: PUSH
17575: LD_EXP 53
17579: AND
17580: IFFALSE 17594
17582: GO 17584
17584: DISABLE
// FogOff ( your_side ) ;
17585: LD_OWVAR 2
17589: PPUSH
17590: CALL_OW 344
17594: END
// every 0 0$1 trigger StreamModeActive and sSun do
17595: LD_EXP 32
17599: PUSH
17600: LD_EXP 55
17604: AND
17605: IFFALSE 17633
17607: GO 17609
17609: DISABLE
// begin solar_recharge_percent := 0 ;
17610: LD_ADDR_OWVAR 79
17614: PUSH
17615: LD_INT 0
17617: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17618: LD_INT 10500
17620: PPUSH
17621: CALL_OW 67
// solar_recharge_percent := 100 ;
17625: LD_ADDR_OWVAR 79
17629: PUSH
17630: LD_INT 100
17632: ST_TO_ADDR
// end ;
17633: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17634: LD_EXP 32
17638: PUSH
17639: LD_EXP 56
17643: AND
17644: IFFALSE 17883
17646: GO 17648
17648: DISABLE
17649: LD_INT 0
17651: PPUSH
17652: PPUSH
17653: PPUSH
// begin tmp := [ ] ;
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: EMPTY
17660: ST_TO_ADDR
// for i := 1 to 6 do
17661: LD_ADDR_VAR 0 1
17665: PUSH
17666: DOUBLE
17667: LD_INT 1
17669: DEC
17670: ST_TO_ADDR
17671: LD_INT 6
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17780
// begin uc_nation := nation_nature ;
17677: LD_ADDR_OWVAR 21
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// uc_side := 0 ;
17685: LD_ADDR_OWVAR 20
17689: PUSH
17690: LD_INT 0
17692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17693: LD_ADDR_OWVAR 29
17697: PUSH
17698: LD_INT 12
17700: PUSH
17701: LD_INT 12
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: ST_TO_ADDR
// hc_agressivity := 20 ;
17708: LD_ADDR_OWVAR 35
17712: PUSH
17713: LD_INT 20
17715: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17716: LD_ADDR_OWVAR 28
17720: PUSH
17721: LD_INT 17
17723: ST_TO_ADDR
// hc_gallery :=  ;
17724: LD_ADDR_OWVAR 33
17728: PUSH
17729: LD_STRING 
17731: ST_TO_ADDR
// hc_name :=  ;
17732: LD_ADDR_OWVAR 26
17736: PUSH
17737: LD_STRING 
17739: ST_TO_ADDR
// un := CreateHuman ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 51
// tmp := tmp ^ un ;
17762: LD_ADDR_VAR 0 3
17766: PUSH
17767: LD_VAR 0 3
17771: PUSH
17772: LD_VAR 0 2
17776: ADD
17777: ST_TO_ADDR
// end ;
17778: GO 17674
17780: POP
17781: POP
// repeat wait ( 0 0$1 ) ;
17782: LD_INT 35
17784: PPUSH
17785: CALL_OW 67
// for un in tmp do
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 3
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17874
// begin if IsDead ( un ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 301
17811: IFFALSE 17831
// begin tmp := tmp diff un ;
17813: LD_ADDR_VAR 0 3
17817: PUSH
17818: LD_VAR 0 3
17822: PUSH
17823: LD_VAR 0 2
17827: DIFF
17828: ST_TO_ADDR
// continue ;
17829: GO 17799
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17831: LD_VAR 0 2
17835: PPUSH
17836: LD_INT 3
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PPUSH
17853: CALL_OW 69
17857: PPUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: CALL_OW 74
17867: PPUSH
17868: CALL_OW 115
// end ;
17872: GO 17799
17874: POP
17875: POP
// until not tmp ;
17876: LD_VAR 0 3
17880: NOT
17881: IFFALSE 17782
// end ;
17883: PPOPN 3
17885: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17886: LD_EXP 32
17890: PUSH
17891: LD_EXP 57
17895: AND
17896: IFFALSE 17950
17898: GO 17900
17900: DISABLE
// begin ToLua ( displayTroll(); ) ;
17901: LD_STRING displayTroll();
17903: PPUSH
17904: CALL_OW 559
// wait ( 3 3$00 ) ;
17908: LD_INT 6300
17910: PPUSH
17911: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17915: LD_STRING hideTroll();
17917: PPUSH
17918: CALL_OW 559
// wait ( 1 1$00 ) ;
17922: LD_INT 2100
17924: PPUSH
17925: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17929: LD_STRING displayTroll();
17931: PPUSH
17932: CALL_OW 559
// wait ( 1 1$00 ) ;
17936: LD_INT 2100
17938: PPUSH
17939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17943: LD_STRING hideTroll();
17945: PPUSH
17946: CALL_OW 559
// end ;
17950: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17951: LD_EXP 32
17955: PUSH
17956: LD_EXP 58
17960: AND
17961: IFFALSE 18024
17963: GO 17965
17965: DISABLE
17966: LD_INT 0
17968: PPUSH
// begin p := 0 ;
17969: LD_ADDR_VAR 0 1
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// repeat game_speed := 1 ;
17977: LD_ADDR_OWVAR 65
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17985: LD_INT 35
17987: PPUSH
17988: CALL_OW 67
// p := p + 1 ;
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: LD_VAR 0 1
18001: PUSH
18002: LD_INT 1
18004: PLUS
18005: ST_TO_ADDR
// until p >= 60 ;
18006: LD_VAR 0 1
18010: PUSH
18011: LD_INT 60
18013: GREATEREQUAL
18014: IFFALSE 17977
// game_speed := 4 ;
18016: LD_ADDR_OWVAR 65
18020: PUSH
18021: LD_INT 4
18023: ST_TO_ADDR
// end ;
18024: PPOPN 1
18026: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18027: LD_EXP 32
18031: PUSH
18032: LD_EXP 59
18036: AND
18037: IFFALSE 18183
18039: GO 18041
18041: DISABLE
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18046: LD_ADDR_VAR 0 1
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_OWVAR 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: LD_INT 30
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 30
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// if not depot then
18100: LD_VAR 0 1
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18183
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18109: LD_ADDR_VAR 0 2
18113: PUSH
18114: LD_VAR 0 1
18118: PUSH
18119: LD_INT 1
18121: PPUSH
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL_OW 12
18131: ARRAY
18132: PPUSH
18133: CALL_OW 274
18137: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18138: LD_VAR 0 2
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 0
18148: PPUSH
18149: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 2
18160: PPUSH
18161: LD_INT 0
18163: PPUSH
18164: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_INT 3
18175: PPUSH
18176: LD_INT 0
18178: PPUSH
18179: CALL_OW 277
// end ;
18183: PPOPN 2
18185: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18186: LD_EXP 32
18190: PUSH
18191: LD_EXP 60
18195: AND
18196: IFFALSE 18293
18198: GO 18200
18200: DISABLE
18201: LD_INT 0
18203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_INT 22
18211: PUSH
18212: LD_OWVAR 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 21
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: LD_INT 23
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: PPUSH
18253: CALL_OW 69
18257: ST_TO_ADDR
// if not tmp then
18258: LD_VAR 0 1
18262: NOT
18263: IFFALSE 18267
// exit ;
18265: GO 18293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18267: LD_VAR 0 1
18271: PUSH
18272: LD_INT 1
18274: PPUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 12
18284: ARRAY
18285: PPUSH
18286: LD_INT 200
18288: PPUSH
18289: CALL_OW 234
// end ;
18293: PPOPN 1
18295: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18296: LD_EXP 32
18300: PUSH
18301: LD_EXP 61
18305: AND
18306: IFFALSE 18385
18308: GO 18310
18310: DISABLE
18311: LD_INT 0
18313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_OWVAR 2
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 21
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PPUSH
18345: CALL_OW 69
18349: ST_TO_ADDR
// if not tmp then
18350: LD_VAR 0 1
18354: NOT
18355: IFFALSE 18359
// exit ;
18357: GO 18385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18359: LD_VAR 0 1
18363: PUSH
18364: LD_INT 1
18366: PPUSH
18367: LD_VAR 0 1
18371: PPUSH
18372: CALL_OW 12
18376: ARRAY
18377: PPUSH
18378: LD_INT 60
18380: PPUSH
18381: CALL_OW 234
// end ;
18385: PPOPN 1
18387: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18388: LD_EXP 32
18392: PUSH
18393: LD_EXP 62
18397: AND
18398: IFFALSE 18497
18400: GO 18402
18402: DISABLE
18403: LD_INT 0
18405: PPUSH
18406: PPUSH
// begin enable ;
18407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18408: LD_ADDR_VAR 0 1
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_OWVAR 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 61
18427: PUSH
18428: EMPTY
18429: LIST
18430: PUSH
18431: LD_INT 33
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 69
18450: ST_TO_ADDR
// if not tmp then
18451: LD_VAR 0 1
18455: NOT
18456: IFFALSE 18460
// exit ;
18458: GO 18497
// for i in tmp do
18460: LD_ADDR_VAR 0 2
18464: PUSH
18465: LD_VAR 0 1
18469: PUSH
18470: FOR_IN
18471: IFFALSE 18495
// if IsControledBy ( i ) then
18473: LD_VAR 0 2
18477: PPUSH
18478: CALL_OW 312
18482: IFFALSE 18493
// ComUnlink ( i ) ;
18484: LD_VAR 0 2
18488: PPUSH
18489: CALL_OW 136
18493: GO 18470
18495: POP
18496: POP
// end ;
18497: PPOPN 2
18499: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18500: LD_EXP 32
18504: PUSH
18505: LD_EXP 63
18509: AND
18510: IFFALSE 18650
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
18518: PPUSH
// begin ToLua ( displayPowell(); ) ;
18519: LD_STRING displayPowell();
18521: PPUSH
18522: CALL_OW 559
// uc_side := 0 ;
18526: LD_ADDR_OWVAR 20
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// uc_nation := 2 ;
18534: LD_ADDR_OWVAR 21
18538: PUSH
18539: LD_INT 2
18541: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18542: LD_ADDR_OWVAR 37
18546: PUSH
18547: LD_INT 14
18549: ST_TO_ADDR
// vc_engine := engine_siberite ;
18550: LD_ADDR_OWVAR 39
18554: PUSH
18555: LD_INT 3
18557: ST_TO_ADDR
// vc_control := control_apeman ;
18558: LD_ADDR_OWVAR 38
18562: PUSH
18563: LD_INT 5
18565: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18566: LD_ADDR_OWVAR 40
18570: PUSH
18571: LD_INT 29
18573: ST_TO_ADDR
// un := CreateVehicle ;
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: CALL_OW 45
18583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18584: LD_VAR 0 2
18588: PPUSH
18589: LD_INT 1
18591: PPUSH
18592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18596: LD_INT 35
18598: PPUSH
18599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_INT 22
18610: PUSH
18611: LD_OWVAR 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PPUSH
18620: CALL_OW 69
18624: PPUSH
18625: LD_VAR 0 2
18629: PPUSH
18630: CALL_OW 74
18634: PPUSH
18635: CALL_OW 115
// until IsDead ( un ) ;
18639: LD_VAR 0 2
18643: PPUSH
18644: CALL_OW 301
18648: IFFALSE 18596
// end ;
18650: PPOPN 2
18652: END
// every 0 0$1 trigger StreamModeActive and sStu do
18653: LD_EXP 32
18657: PUSH
18658: LD_EXP 71
18662: AND
18663: IFFALSE 18679
18665: GO 18667
18667: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18668: LD_STRING displayStucuk();
18670: PPUSH
18671: CALL_OW 559
// ResetFog ;
18675: CALL_OW 335
// end ;
18679: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18680: LD_EXP 32
18684: PUSH
18685: LD_EXP 64
18689: AND
18690: IFFALSE 18831
18692: GO 18694
18694: DISABLE
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_INT 22
18706: PUSH
18707: LD_OWVAR 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 21
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: ST_TO_ADDR
// if not tmp then
18735: LD_VAR 0 2
18739: NOT
18740: IFFALSE 18744
// exit ;
18742: GO 18831
// un := tmp [ rand ( 1 , tmp ) ] ;
18744: LD_ADDR_VAR 0 1
18748: PUSH
18749: LD_VAR 0 2
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_VAR 0 2
18761: PPUSH
18762: CALL_OW 12
18766: ARRAY
18767: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_INT 0
18775: PPUSH
18776: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: LD_OWVAR 3
18789: PUSH
18790: LD_VAR 0 1
18794: DIFF
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 74
18805: PPUSH
18806: CALL_OW 115
// wait ( 0 0$20 ) ;
18810: LD_INT 700
18812: PPUSH
18813: CALL_OW 67
// SetSide ( un , your_side ) ;
18817: LD_VAR 0 1
18821: PPUSH
18822: LD_OWVAR 2
18826: PPUSH
18827: CALL_OW 235
// end ;
18831: PPOPN 2
18833: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18834: LD_EXP 32
18838: PUSH
18839: LD_EXP 65
18843: AND
18844: IFFALSE 18950
18846: GO 18848
18848: DISABLE
18849: LD_INT 0
18851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18852: LD_ADDR_VAR 0 1
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_OWVAR 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 30
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 30
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: ST_TO_ADDR
// if not depot then
18906: LD_VAR 0 1
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 18950
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18915: LD_VAR 0 1
18919: PUSH
18920: LD_INT 1
18922: ARRAY
18923: PPUSH
18924: CALL_OW 250
18928: PPUSH
18929: LD_VAR 0 1
18933: PUSH
18934: LD_INT 1
18936: ARRAY
18937: PPUSH
18938: CALL_OW 251
18942: PPUSH
18943: LD_INT 70
18945: PPUSH
18946: CALL_OW 495
// end ;
18950: PPOPN 1
18952: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18953: LD_EXP 32
18957: PUSH
18958: LD_EXP 66
18962: AND
18963: IFFALSE 19174
18965: GO 18967
18967: DISABLE
18968: LD_INT 0
18970: PPUSH
18971: PPUSH
18972: PPUSH
18973: PPUSH
18974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18975: LD_ADDR_VAR 0 5
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_OWVAR 2
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 21
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: ST_TO_ADDR
// if not tmp then
19011: LD_VAR 0 5
19015: NOT
19016: IFFALSE 19020
// exit ;
19018: GO 19174
// for i in tmp do
19020: LD_ADDR_VAR 0 1
19024: PUSH
19025: LD_VAR 0 5
19029: PUSH
19030: FOR_IN
19031: IFFALSE 19172
// begin d := rand ( 0 , 5 ) ;
19033: LD_ADDR_VAR 0 4
19037: PUSH
19038: LD_INT 0
19040: PPUSH
19041: LD_INT 5
19043: PPUSH
19044: CALL_OW 12
19048: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_VAR 0 1
19058: PPUSH
19059: CALL_OW 250
19063: PPUSH
19064: LD_VAR 0 4
19068: PPUSH
19069: LD_INT 3
19071: PPUSH
19072: LD_INT 12
19074: PPUSH
19075: CALL_OW 12
19079: PPUSH
19080: CALL_OW 272
19084: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 251
19099: PPUSH
19100: LD_VAR 0 4
19104: PPUSH
19105: LD_INT 3
19107: PPUSH
19108: LD_INT 12
19110: PPUSH
19111: CALL_OW 12
19115: PPUSH
19116: CALL_OW 273
19120: ST_TO_ADDR
// if ValidHex ( x , y ) then
19121: LD_VAR 0 2
19125: PPUSH
19126: LD_VAR 0 3
19130: PPUSH
19131: CALL_OW 488
19135: IFFALSE 19170
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19137: LD_VAR 0 1
19141: PPUSH
19142: LD_VAR 0 2
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 3
19154: PPUSH
19155: LD_INT 6
19157: PPUSH
19158: CALL_OW 12
19162: PPUSH
19163: LD_INT 1
19165: PPUSH
19166: CALL_OW 483
// end ;
19170: GO 19030
19172: POP
19173: POP
// end ;
19174: PPOPN 5
19176: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19177: LD_EXP 32
19181: PUSH
19182: LD_EXP 67
19186: AND
19187: IFFALSE 19281
19189: GO 19191
19191: DISABLE
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: LD_INT 22
19203: PUSH
19204: LD_OWVAR 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 32
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 21
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: PPUSH
19238: CALL_OW 69
19242: ST_TO_ADDR
// if not tmp then
19243: LD_VAR 0 2
19247: NOT
19248: IFFALSE 19252
// exit ;
19250: GO 19281
// for i in tmp do
19252: LD_ADDR_VAR 0 1
19256: PUSH
19257: LD_VAR 0 2
19261: PUSH
19262: FOR_IN
19263: IFFALSE 19279
// SetFuel ( i , 0 ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_INT 0
19272: PPUSH
19273: CALL_OW 240
19277: GO 19262
19279: POP
19280: POP
// end ;
19281: PPOPN 2
19283: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19284: LD_EXP 32
19288: PUSH
19289: LD_EXP 68
19293: AND
19294: IFFALSE 19360
19296: GO 19298
19298: DISABLE
19299: LD_INT 0
19301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19302: LD_ADDR_VAR 0 1
19306: PUSH
19307: LD_INT 22
19309: PUSH
19310: LD_OWVAR 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 30
19321: PUSH
19322: LD_INT 29
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: ST_TO_ADDR
// if not tmp then
19338: LD_VAR 0 1
19342: NOT
19343: IFFALSE 19347
// exit ;
19345: GO 19360
// DestroyUnit ( tmp [ 1 ] ) ;
19347: LD_VAR 0 1
19351: PUSH
19352: LD_INT 1
19354: ARRAY
19355: PPUSH
19356: CALL_OW 65
// end ;
19360: PPOPN 1
19362: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19363: LD_EXP 32
19367: PUSH
19368: LD_EXP 70
19372: AND
19373: IFFALSE 19502
19375: GO 19377
19377: DISABLE
19378: LD_INT 0
19380: PPUSH
// begin uc_side := 0 ;
19381: LD_ADDR_OWVAR 20
19385: PUSH
19386: LD_INT 0
19388: ST_TO_ADDR
// uc_nation := nation_arabian ;
19389: LD_ADDR_OWVAR 21
19393: PUSH
19394: LD_INT 2
19396: ST_TO_ADDR
// hc_gallery :=  ;
19397: LD_ADDR_OWVAR 33
19401: PUSH
19402: LD_STRING 
19404: ST_TO_ADDR
// hc_name :=  ;
19405: LD_ADDR_OWVAR 26
19409: PUSH
19410: LD_STRING 
19412: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19413: LD_INT 1
19415: PPUSH
19416: LD_INT 11
19418: PPUSH
19419: LD_INT 10
19421: PPUSH
19422: CALL_OW 380
// un := CreateHuman ;
19426: LD_ADDR_VAR 0 1
19430: PUSH
19431: CALL_OW 44
19435: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_INT 1
19443: PPUSH
19444: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19448: LD_INT 35
19450: PPUSH
19451: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19455: LD_VAR 0 1
19459: PPUSH
19460: LD_INT 22
19462: PUSH
19463: LD_OWVAR 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 69
19476: PPUSH
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 74
19486: PPUSH
19487: CALL_OW 115
// until IsDead ( un ) ;
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 301
19500: IFFALSE 19448
// end ;
19502: PPOPN 1
19504: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19505: LD_EXP 32
19509: PUSH
19510: LD_EXP 72
19514: AND
19515: IFFALSE 19527
19517: GO 19519
19519: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19520: LD_STRING earthquake(getX(game), 0, 32)
19522: PPUSH
19523: CALL_OW 559
19527: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19528: LD_EXP 32
19532: PUSH
19533: LD_EXP 73
19537: AND
19538: IFFALSE 19629
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
// begin enable ;
19546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19547: LD_ADDR_VAR 0 1
19551: PUSH
19552: LD_INT 22
19554: PUSH
19555: LD_OWVAR 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 21
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 33
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: ST_TO_ADDR
// if not tmp then
19594: LD_VAR 0 1
19598: NOT
19599: IFFALSE 19603
// exit ;
19601: GO 19629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 1
19610: PPUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 12
19620: ARRAY
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 234
// end ;
19629: PPOPN 1
19631: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19632: LD_EXP 32
19636: PUSH
19637: LD_EXP 74
19641: AND
19642: IFFALSE 19783
19644: GO 19646
19646: DISABLE
19647: LD_INT 0
19649: PPUSH
19650: PPUSH
19651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19652: LD_ADDR_VAR 0 3
19656: PUSH
19657: LD_INT 22
19659: PUSH
19660: LD_OWVAR 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 25
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PPUSH
19683: CALL_OW 69
19687: ST_TO_ADDR
// if not tmp then
19688: LD_VAR 0 3
19692: NOT
19693: IFFALSE 19697
// exit ;
19695: GO 19783
// un := tmp [ rand ( 1 , tmp ) ] ;
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: CALL_OW 12
19719: ARRAY
19720: ST_TO_ADDR
// if Crawls ( un ) then
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL_OW 318
19730: IFFALSE 19741
// ComWalk ( un ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19741: LD_VAR 0 2
19745: PPUSH
19746: LD_INT 9
19748: PPUSH
19749: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19753: LD_INT 28
19755: PPUSH
19756: LD_OWVAR 2
19760: PPUSH
19761: LD_INT 2
19763: PPUSH
19764: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19768: LD_INT 29
19770: PPUSH
19771: LD_OWVAR 2
19775: PPUSH
19776: LD_INT 2
19778: PPUSH
19779: CALL_OW 322
// end ;
19783: PPOPN 3
19785: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19786: LD_EXP 32
19790: PUSH
19791: LD_EXP 75
19795: AND
19796: IFFALSE 19907
19798: GO 19800
19800: DISABLE
19801: LD_INT 0
19803: PPUSH
19804: PPUSH
19805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19806: LD_ADDR_VAR 0 3
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 25
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: ST_TO_ADDR
// if not tmp then
19842: LD_VAR 0 3
19846: NOT
19847: IFFALSE 19851
// exit ;
19849: GO 19907
// un := tmp [ rand ( 1 , tmp ) ] ;
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_VAR 0 3
19860: PUSH
19861: LD_INT 1
19863: PPUSH
19864: LD_VAR 0 3
19868: PPUSH
19869: CALL_OW 12
19873: ARRAY
19874: ST_TO_ADDR
// if Crawls ( un ) then
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 318
19884: IFFALSE 19895
// ComWalk ( un ) ;
19886: LD_VAR 0 2
19890: PPUSH
19891: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19895: LD_VAR 0 2
19899: PPUSH
19900: LD_INT 8
19902: PPUSH
19903: CALL_OW 336
// end ;
19907: PPOPN 3
19909: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19910: LD_EXP 32
19914: PUSH
19915: LD_EXP 76
19919: AND
19920: IFFALSE 20064
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19929: LD_ADDR_VAR 0 2
19933: PUSH
19934: LD_INT 22
19936: PUSH
19937: LD_OWVAR 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 21
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: LD_INT 34
19961: PUSH
19962: LD_INT 12
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 34
19971: PUSH
19972: LD_INT 51
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 34
19981: PUSH
19982: LD_INT 32
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 69
20004: ST_TO_ADDR
// if not tmp then
20005: LD_VAR 0 2
20009: NOT
20010: IFFALSE 20014
// exit ;
20012: GO 20064
// for i in tmp do
20014: LD_ADDR_VAR 0 1
20018: PUSH
20019: LD_VAR 0 2
20023: PUSH
20024: FOR_IN
20025: IFFALSE 20062
// if GetCargo ( i , mat_artifact ) = 0 then
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_INT 4
20034: PPUSH
20035: CALL_OW 289
20039: PUSH
20040: LD_INT 0
20042: EQUAL
20043: IFFALSE 20060
// SetCargo ( i , mat_siberit , 100 ) ;
20045: LD_VAR 0 1
20049: PPUSH
20050: LD_INT 3
20052: PPUSH
20053: LD_INT 100
20055: PPUSH
20056: CALL_OW 290
20060: GO 20024
20062: POP
20063: POP
// end ;
20064: PPOPN 2
20066: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20067: LD_EXP 32
20071: PUSH
20072: LD_EXP 77
20076: AND
20077: IFFALSE 20230
20079: GO 20081
20081: DISABLE
20082: LD_INT 0
20084: PPUSH
20085: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20086: LD_ADDR_VAR 0 2
20090: PUSH
20091: LD_INT 22
20093: PUSH
20094: LD_OWVAR 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 2
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20230
// for i := 1 to 2 do
20117: LD_ADDR_VAR 0 1
20121: PUSH
20122: DOUBLE
20123: LD_INT 1
20125: DEC
20126: ST_TO_ADDR
20127: LD_INT 2
20129: PUSH
20130: FOR_TO
20131: IFFALSE 20228
// begin uc_side := your_side ;
20133: LD_ADDR_OWVAR 20
20137: PUSH
20138: LD_OWVAR 2
20142: ST_TO_ADDR
// uc_nation := nation_american ;
20143: LD_ADDR_OWVAR 21
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// vc_chassis := us_morphling ;
20151: LD_ADDR_OWVAR 37
20155: PUSH
20156: LD_INT 5
20158: ST_TO_ADDR
// vc_engine := engine_siberite ;
20159: LD_ADDR_OWVAR 39
20163: PUSH
20164: LD_INT 3
20166: ST_TO_ADDR
// vc_control := control_computer ;
20167: LD_ADDR_OWVAR 38
20171: PUSH
20172: LD_INT 3
20174: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20175: LD_ADDR_OWVAR 40
20179: PUSH
20180: LD_INT 10
20182: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20183: CALL_OW 45
20187: PPUSH
20188: LD_VAR 0 2
20192: PUSH
20193: LD_INT 1
20195: ARRAY
20196: PPUSH
20197: CALL_OW 250
20201: PPUSH
20202: LD_VAR 0 2
20206: PUSH
20207: LD_INT 1
20209: ARRAY
20210: PPUSH
20211: CALL_OW 251
20215: PPUSH
20216: LD_INT 12
20218: PPUSH
20219: LD_INT 1
20221: PPUSH
20222: CALL_OW 50
// end ;
20226: GO 20130
20228: POP
20229: POP
// end ;
20230: PPOPN 2
20232: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20233: LD_EXP 32
20237: PUSH
20238: LD_EXP 78
20242: AND
20243: IFFALSE 20465
20245: GO 20247
20247: DISABLE
20248: LD_INT 0
20250: PPUSH
20251: PPUSH
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20256: LD_ADDR_VAR 0 6
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_OWVAR 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 3
20285: PUSH
20286: LD_INT 23
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: PPUSH
20305: CALL_OW 69
20309: ST_TO_ADDR
// if not tmp then
20310: LD_VAR 0 6
20314: NOT
20315: IFFALSE 20319
// exit ;
20317: GO 20465
// s1 := rand ( 1 , 4 ) ;
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: LD_INT 1
20326: PPUSH
20327: LD_INT 4
20329: PPUSH
20330: CALL_OW 12
20334: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20335: LD_ADDR_VAR 0 4
20339: PUSH
20340: LD_VAR 0 6
20344: PUSH
20345: LD_INT 1
20347: ARRAY
20348: PPUSH
20349: LD_VAR 0 2
20353: PPUSH
20354: CALL_OW 259
20358: ST_TO_ADDR
// if s1 = 1 then
20359: LD_VAR 0 2
20363: PUSH
20364: LD_INT 1
20366: EQUAL
20367: IFFALSE 20387
// s2 := rand ( 2 , 4 ) else
20369: LD_ADDR_VAR 0 3
20373: PUSH
20374: LD_INT 2
20376: PPUSH
20377: LD_INT 4
20379: PPUSH
20380: CALL_OW 12
20384: ST_TO_ADDR
20385: GO 20395
// s2 := 1 ;
20387: LD_ADDR_VAR 0 3
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20395: LD_ADDR_VAR 0 5
20399: PUSH
20400: LD_VAR 0 6
20404: PUSH
20405: LD_INT 1
20407: ARRAY
20408: PPUSH
20409: LD_VAR 0 3
20413: PPUSH
20414: CALL_OW 259
20418: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20419: LD_VAR 0 6
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 5
20437: PPUSH
20438: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20442: LD_VAR 0 6
20446: PUSH
20447: LD_INT 1
20449: ARRAY
20450: PPUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: LD_VAR 0 4
20460: PPUSH
20461: CALL_OW 237
// end ;
20465: PPOPN 6
20467: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20468: LD_EXP 32
20472: PUSH
20473: LD_EXP 79
20477: AND
20478: IFFALSE 20557
20480: GO 20482
20482: DISABLE
20483: LD_INT 0
20485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20486: LD_ADDR_VAR 0 1
20490: PUSH
20491: LD_INT 22
20493: PUSH
20494: LD_OWVAR 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 30
20505: PUSH
20506: LD_INT 3
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 69
20521: ST_TO_ADDR
// if not tmp then
20522: LD_VAR 0 1
20526: NOT
20527: IFFALSE 20531
// exit ;
20529: GO 20557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20531: LD_VAR 0 1
20535: PUSH
20536: LD_INT 1
20538: PPUSH
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL_OW 12
20548: ARRAY
20549: PPUSH
20550: LD_INT 1
20552: PPUSH
20553: CALL_OW 234
// end ;
20557: PPOPN 1
20559: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20560: LD_EXP 32
20564: PUSH
20565: LD_EXP 80
20569: AND
20570: IFFALSE 20682
20572: GO 20574
20574: DISABLE
20575: LD_INT 0
20577: PPUSH
20578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20579: LD_ADDR_VAR 0 2
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_OWVAR 2
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 30
20601: PUSH
20602: LD_INT 27
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 30
20611: PUSH
20612: LD_INT 26
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 30
20621: PUSH
20622: LD_INT 28
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PPUSH
20639: CALL_OW 69
20643: ST_TO_ADDR
// if not tmp then
20644: LD_VAR 0 2
20648: NOT
20649: IFFALSE 20653
// exit ;
20651: GO 20682
// for i in tmp do
20653: LD_ADDR_VAR 0 1
20657: PUSH
20658: LD_VAR 0 2
20662: PUSH
20663: FOR_IN
20664: IFFALSE 20680
// SetLives ( i , 1 ) ;
20666: LD_VAR 0 1
20670: PPUSH
20671: LD_INT 1
20673: PPUSH
20674: CALL_OW 234
20678: GO 20663
20680: POP
20681: POP
// end ;
20682: PPOPN 2
20684: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20685: LD_EXP 32
20689: PUSH
20690: LD_EXP 81
20694: AND
20695: IFFALSE 20969
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
// begin i := rand ( 1 , 7 ) ;
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_INT 1
20712: PPUSH
20713: LD_INT 7
20715: PPUSH
20716: CALL_OW 12
20720: ST_TO_ADDR
// case i of 1 :
20721: LD_VAR 0 1
20725: PUSH
20726: LD_INT 1
20728: DOUBLE
20729: EQUAL
20730: IFTRUE 20734
20732: GO 20744
20734: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20735: LD_STRING earthquake(getX(game), 0, 32)
20737: PPUSH
20738: CALL_OW 559
20742: GO 20969
20744: LD_INT 2
20746: DOUBLE
20747: EQUAL
20748: IFTRUE 20752
20750: GO 20766
20752: POP
// begin ToLua ( displayStucuk(); ) ;
20753: LD_STRING displayStucuk();
20755: PPUSH
20756: CALL_OW 559
// ResetFog ;
20760: CALL_OW 335
// end ; 3 :
20764: GO 20969
20766: LD_INT 3
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20878
20774: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20775: LD_ADDR_VAR 0 2
20779: PUSH
20780: LD_INT 22
20782: PUSH
20783: LD_OWVAR 2
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 25
20794: PUSH
20795: LD_INT 1
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PPUSH
20806: CALL_OW 69
20810: ST_TO_ADDR
// if not tmp then
20811: LD_VAR 0 2
20815: NOT
20816: IFFALSE 20820
// exit ;
20818: GO 20969
// un := tmp [ rand ( 1 , tmp ) ] ;
20820: LD_ADDR_VAR 0 3
20824: PUSH
20825: LD_VAR 0 2
20829: PUSH
20830: LD_INT 1
20832: PPUSH
20833: LD_VAR 0 2
20837: PPUSH
20838: CALL_OW 12
20842: ARRAY
20843: ST_TO_ADDR
// if Crawls ( un ) then
20844: LD_VAR 0 3
20848: PPUSH
20849: CALL_OW 318
20853: IFFALSE 20864
// ComWalk ( un ) ;
20855: LD_VAR 0 3
20859: PPUSH
20860: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20864: LD_VAR 0 3
20868: PPUSH
20869: LD_INT 8
20871: PPUSH
20872: CALL_OW 336
// end ; 4 :
20876: GO 20969
20878: LD_INT 4
20880: DOUBLE
20881: EQUAL
20882: IFTRUE 20886
20884: GO 20947
20886: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20887: LD_ADDR_VAR 0 2
20891: PUSH
20892: LD_INT 22
20894: PUSH
20895: LD_OWVAR 2
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: LD_INT 29
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 69
20922: ST_TO_ADDR
// if not tmp then
20923: LD_VAR 0 2
20927: NOT
20928: IFFALSE 20932
// exit ;
20930: GO 20969
// DestroyUnit ( tmp [ 1 ] ) ;
20932: LD_VAR 0 2
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: PPUSH
20941: CALL_OW 65
// end ; 5 .. 7 :
20945: GO 20969
20947: LD_INT 5
20949: DOUBLE
20950: GREATEREQUAL
20951: IFFALSE 20959
20953: LD_INT 7
20955: DOUBLE
20956: LESSEQUAL
20957: IFTRUE 20961
20959: GO 20968
20961: POP
// StreamSibBomb ; end ;
20962: CALL 17249 0 0
20966: GO 20969
20968: POP
// end ;
20969: PPOPN 3
20971: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20972: LD_EXP 32
20976: PUSH
20977: LD_EXP 82
20981: AND
20982: IFFALSE 21138
20984: GO 20986
20986: DISABLE
20987: LD_INT 0
20989: PPUSH
20990: PPUSH
20991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20992: LD_ADDR_VAR 0 2
20996: PUSH
20997: LD_INT 81
20999: PUSH
21000: LD_OWVAR 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 21
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PPUSH
21041: CALL_OW 69
21045: ST_TO_ADDR
// if not tmp then
21046: LD_VAR 0 2
21050: NOT
21051: IFFALSE 21055
// exit ;
21053: GO 21138
// p := 0 ;
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21063: LD_INT 35
21065: PPUSH
21066: CALL_OW 67
// p := p + 1 ;
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 1
21082: PLUS
21083: ST_TO_ADDR
// for i in tmp do
21084: LD_ADDR_VAR 0 1
21088: PUSH
21089: LD_VAR 0 2
21093: PUSH
21094: FOR_IN
21095: IFFALSE 21126
// if GetLives ( i ) < 1000 then
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 256
21106: PUSH
21107: LD_INT 1000
21109: LESS
21110: IFFALSE 21124
// SetLives ( i , 1000 ) ;
21112: LD_VAR 0 1
21116: PPUSH
21117: LD_INT 1000
21119: PPUSH
21120: CALL_OW 234
21124: GO 21094
21126: POP
21127: POP
// until p > 20 ;
21128: LD_VAR 0 3
21132: PUSH
21133: LD_INT 20
21135: GREATER
21136: IFFALSE 21063
// end ;
21138: PPOPN 3
21140: END
// every 0 0$1 trigger StreamModeActive and sTime do
21141: LD_EXP 32
21145: PUSH
21146: LD_EXP 83
21150: AND
21151: IFFALSE 21186
21153: GO 21155
21155: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21156: LD_INT 28
21158: PPUSH
21159: LD_OWVAR 2
21163: PPUSH
21164: LD_INT 2
21166: PPUSH
21167: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21171: LD_INT 30
21173: PPUSH
21174: LD_OWVAR 2
21178: PPUSH
21179: LD_INT 2
21181: PPUSH
21182: CALL_OW 322
// end ;
21186: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21187: LD_EXP 32
21191: PUSH
21192: LD_EXP 84
21196: AND
21197: IFFALSE 21318
21199: GO 21201
21201: DISABLE
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21206: LD_ADDR_VAR 0 2
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_OWVAR 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: LD_INT 23
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 69
21259: ST_TO_ADDR
// if not tmp then
21260: LD_VAR 0 2
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21318
// for i in tmp do
21269: LD_ADDR_VAR 0 1
21273: PUSH
21274: LD_VAR 0 2
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21316
// begin if Crawls ( i ) then
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 318
21291: IFFALSE 21302
// ComWalk ( i ) ;
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 138
// SetClass ( i , 2 ) ;
21302: LD_VAR 0 1
21306: PPUSH
21307: LD_INT 2
21309: PPUSH
21310: CALL_OW 336
// end ;
21314: GO 21279
21316: POP
21317: POP
// end ;
21318: PPOPN 2
21320: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21321: LD_EXP 32
21325: PUSH
21326: LD_EXP 85
21330: AND
21331: IFFALSE 21612
21333: GO 21335
21335: DISABLE
21336: LD_INT 0
21338: PPUSH
21339: PPUSH
21340: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21341: LD_OWVAR 2
21345: PPUSH
21346: LD_INT 9
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21359: LD_INT 9
21361: PPUSH
21362: LD_OWVAR 2
21366: PPUSH
21367: CALL_OW 343
// uc_side := 9 ;
21371: LD_ADDR_OWVAR 20
21375: PUSH
21376: LD_INT 9
21378: ST_TO_ADDR
// uc_nation := 2 ;
21379: LD_ADDR_OWVAR 21
21383: PUSH
21384: LD_INT 2
21386: ST_TO_ADDR
// hc_name := Dark Warrior ;
21387: LD_ADDR_OWVAR 26
21391: PUSH
21392: LD_STRING Dark Warrior
21394: ST_TO_ADDR
// hc_gallery :=  ;
21395: LD_ADDR_OWVAR 33
21399: PUSH
21400: LD_STRING 
21402: ST_TO_ADDR
// hc_noskilllimit := true ;
21403: LD_ADDR_OWVAR 76
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21411: LD_ADDR_OWVAR 31
21415: PUSH
21416: LD_INT 30
21418: PUSH
21419: LD_INT 30
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 30
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// un := CreateHuman ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: CALL_OW 44
21443: ST_TO_ADDR
// hc_noskilllimit := false ;
21444: LD_ADDR_OWVAR 76
21448: PUSH
21449: LD_INT 0
21451: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21452: LD_VAR 0 3
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 51
// p := 0 ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21472: LD_INT 35
21474: PPUSH
21475: CALL_OW 67
// p := p + 1 ;
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_VAR 0 2
21488: PUSH
21489: LD_INT 1
21491: PLUS
21492: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21493: LD_VAR 0 3
21497: PPUSH
21498: CALL_OW 256
21502: PUSH
21503: LD_INT 1000
21505: LESS
21506: IFFALSE 21520
// SetLives ( un , 1000 ) ;
21508: LD_VAR 0 3
21512: PPUSH
21513: LD_INT 1000
21515: PPUSH
21516: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21520: LD_VAR 0 3
21524: PPUSH
21525: LD_INT 81
21527: PUSH
21528: LD_OWVAR 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 91
21539: PUSH
21540: LD_VAR 0 3
21544: PUSH
21545: LD_INT 30
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PPUSH
21557: CALL_OW 69
21561: PPUSH
21562: LD_VAR 0 3
21566: PPUSH
21567: CALL_OW 74
21571: PPUSH
21572: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21576: LD_VAR 0 2
21580: PUSH
21581: LD_INT 60
21583: GREATER
21584: PUSH
21585: LD_VAR 0 3
21589: PPUSH
21590: CALL_OW 301
21594: OR
21595: IFFALSE 21472
// if un then
21597: LD_VAR 0 3
21601: IFFALSE 21612
// RemoveUnit ( un ) ;
21603: LD_VAR 0 3
21607: PPUSH
21608: CALL_OW 64
// end ; end_of_file
21612: PPOPN 3
21614: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 264
21630: PUSH
21631: LD_EXP 23
21635: EQUAL
21636: IFFALSE 21708
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21638: LD_INT 68
21640: PPUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 255
21650: PPUSH
21651: CALL_OW 321
21655: PUSH
21656: LD_INT 2
21658: EQUAL
21659: IFFALSE 21671
// eff := 70 else
21661: LD_ADDR_VAR 0 4
21665: PUSH
21666: LD_INT 70
21668: ST_TO_ADDR
21669: GO 21679
// eff := 30 ;
21671: LD_ADDR_VAR 0 4
21675: PUSH
21676: LD_INT 30
21678: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 250
21688: PPUSH
21689: LD_VAR 0 1
21693: PPUSH
21694: CALL_OW 251
21698: PPUSH
21699: LD_VAR 0 4
21703: PPUSH
21704: CALL_OW 495
// end ; end ;
21708: LD_VAR 0 2
21712: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21713: LD_INT 0
21715: PPUSH
// end ;
21716: LD_VAR 0 4
21720: RET
// export function SOS_Command ( cmd ) ; begin
21721: LD_INT 0
21723: PPUSH
// end ;
21724: LD_VAR 0 2
21728: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21729: LD_VAR 0 1
21733: PUSH
21734: LD_INT 255
21736: EQUAL
21737: PUSH
21738: LD_VAR 0 2
21742: PPUSH
21743: CALL_OW 264
21747: PUSH
21748: LD_INT 14
21750: PUSH
21751: LD_INT 53
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: IN
21758: AND
21759: PUSH
21760: LD_VAR 0 4
21764: PPUSH
21765: LD_VAR 0 5
21769: PPUSH
21770: CALL_OW 488
21774: AND
21775: IFFALSE 21799
// CutTreeXYR ( unit , x , y , 12 ) ;
21777: LD_VAR 0 2
21781: PPUSH
21782: LD_VAR 0 4
21786: PPUSH
21787: LD_VAR 0 5
21791: PPUSH
21792: LD_INT 12
21794: PPUSH
21795: CALL 21802 0 4
// end ;
21799: PPOPN 5
21801: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
21812: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21813: LD_VAR 0 1
21817: NOT
21818: PUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 488
21833: NOT
21834: OR
21835: PUSH
21836: LD_VAR 0 4
21840: NOT
21841: OR
21842: IFFALSE 21846
// exit ;
21844: GO 22186
// list := [ ] ;
21846: LD_ADDR_VAR 0 13
21850: PUSH
21851: EMPTY
21852: ST_TO_ADDR
// if x - r < 0 then
21853: LD_VAR 0 2
21857: PUSH
21858: LD_VAR 0 4
21862: MINUS
21863: PUSH
21864: LD_INT 0
21866: LESS
21867: IFFALSE 21879
// min_x := 0 else
21869: LD_ADDR_VAR 0 7
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
21877: GO 21895
// min_x := x - r ;
21879: LD_ADDR_VAR 0 7
21883: PUSH
21884: LD_VAR 0 2
21888: PUSH
21889: LD_VAR 0 4
21893: MINUS
21894: ST_TO_ADDR
// if y - r < 0 then
21895: LD_VAR 0 3
21899: PUSH
21900: LD_VAR 0 4
21904: MINUS
21905: PUSH
21906: LD_INT 0
21908: LESS
21909: IFFALSE 21921
// min_y := 0 else
21911: LD_ADDR_VAR 0 8
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
21919: GO 21937
// min_y := y - r ;
21921: LD_ADDR_VAR 0 8
21925: PUSH
21926: LD_VAR 0 3
21930: PUSH
21931: LD_VAR 0 4
21935: MINUS
21936: ST_TO_ADDR
// max_x := x + r ;
21937: LD_ADDR_VAR 0 9
21941: PUSH
21942: LD_VAR 0 2
21946: PUSH
21947: LD_VAR 0 4
21951: PLUS
21952: ST_TO_ADDR
// max_y := y + r ;
21953: LD_ADDR_VAR 0 10
21957: PUSH
21958: LD_VAR 0 3
21962: PUSH
21963: LD_VAR 0 4
21967: PLUS
21968: ST_TO_ADDR
// for _x = min_x to max_x do
21969: LD_ADDR_VAR 0 11
21973: PUSH
21974: DOUBLE
21975: LD_VAR 0 7
21979: DEC
21980: ST_TO_ADDR
21981: LD_VAR 0 9
21985: PUSH
21986: FOR_TO
21987: IFFALSE 22104
// for _y = min_y to max_y do
21989: LD_ADDR_VAR 0 12
21993: PUSH
21994: DOUBLE
21995: LD_VAR 0 8
21999: DEC
22000: ST_TO_ADDR
22001: LD_VAR 0 10
22005: PUSH
22006: FOR_TO
22007: IFFALSE 22100
// begin if not ValidHex ( _x , _y ) then
22009: LD_VAR 0 11
22013: PPUSH
22014: LD_VAR 0 12
22018: PPUSH
22019: CALL_OW 488
22023: NOT
22024: IFFALSE 22028
// continue ;
22026: GO 22006
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22028: LD_VAR 0 11
22032: PPUSH
22033: LD_VAR 0 12
22037: PPUSH
22038: CALL_OW 351
22042: PUSH
22043: LD_VAR 0 11
22047: PPUSH
22048: LD_VAR 0 12
22052: PPUSH
22053: CALL_OW 554
22057: AND
22058: IFFALSE 22098
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22060: LD_ADDR_VAR 0 13
22064: PUSH
22065: LD_VAR 0 13
22069: PPUSH
22070: LD_VAR 0 13
22074: PUSH
22075: LD_INT 1
22077: PLUS
22078: PPUSH
22079: LD_VAR 0 11
22083: PUSH
22084: LD_VAR 0 12
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: CALL_OW 2
22097: ST_TO_ADDR
// end ;
22098: GO 22006
22100: POP
22101: POP
22102: GO 21986
22104: POP
22105: POP
// if not list then
22106: LD_VAR 0 13
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22186
// for i in list do
22115: LD_ADDR_VAR 0 6
22119: PUSH
22120: LD_VAR 0 13
22124: PUSH
22125: FOR_IN
22126: IFFALSE 22184
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_STRING M
22135: PUSH
22136: LD_VAR 0 6
22140: PUSH
22141: LD_INT 1
22143: ARRAY
22144: PUSH
22145: LD_VAR 0 6
22149: PUSH
22150: LD_INT 2
22152: ARRAY
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: PPUSH
22178: CALL_OW 447
22182: GO 22125
22184: POP
22185: POP
// end ;
22186: LD_VAR 0 5
22190: RET
