// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1288 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 752 0 0
// PrepareRussianBase ;
 115: CALL 941 0 0
// PrepareCommander ;
 119: CALL 886 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1081 0 2
 475: ST_TO_ADDR
// if debugMode then
 476: LD_EXP 16
 480: IFFALSE 495
// JMM := NewCharacter ( JMM ) ;
 482: LD_ADDR_EXP 1
 486: PUSH
 487: LD_STRING JMM
 489: PPUSH
 490: CALL_OW 25
 494: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 495: LD_EXP 1
 499: PPUSH
 500: LD_INT 95
 502: PPUSH
 503: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 507: LD_EXP 1
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 519: LD_ADDR_EXP 5
 523: PUSH
 524: LD_STRING Powell
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: CALL 1081 0 2
 534: ST_TO_ADDR
// uc_side = 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 543: LD_STRING 10c_Joan
 545: PPUSH
 546: CALL_OW 28
 550: PUSH
 551: LD_INT 1
 553: EQUAL
 554: IFFALSE 609
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 556: LD_ADDR_EXP 2
 560: PUSH
 561: LD_STRING 10c_Joan
 563: PPUSH
 564: LD_INT 1
 566: PPUSH
 567: CALL 1081 0 2
 571: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 572: LD_EXP 2
 576: PPUSH
 577: LD_INT 4
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 587: LD_EXP 2
 591: PPUSH
 592: LD_INT 4
 594: PPUSH
 595: CALL_OW 336
// JMMGirl = 1 ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_INT 1
 606: ST_TO_ADDR
// end else
 607: GO 723
// begin if TestCharacters ( 13s_Lisa ) = true then
 609: LD_STRING 13s_Lisa
 611: PPUSH
 612: CALL_OW 28
 616: PUSH
 617: LD_INT 1
 619: EQUAL
 620: IFFALSE 675
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 622: LD_ADDR_EXP 3
 626: PUSH
 627: LD_STRING 13s_Lisa
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: CALL 1081 0 2
 637: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 638: LD_EXP 3
 642: PPUSH
 643: LD_INT 4
 645: PPUSH
 646: LD_INT 0
 648: PPUSH
 649: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 653: LD_EXP 3
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: CALL_OW 336
// JMMGirl = 2 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 2
 672: ST_TO_ADDR
// end else
 673: GO 723
// begin Connie = NewCharacter ( Coonie ) ;
 675: LD_ADDR_EXP 4
 679: PUSH
 680: LD_STRING Coonie
 682: PPUSH
 683: CALL_OW 25
 687: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 688: LD_EXP 4
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 703: LD_EXP 4
 707: PPUSH
 708: LD_INT 3
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 3 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 3
 722: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 723: LD_EXP 2
 727: PUSH
 728: LD_EXP 3
 732: PUSH
 733: LD_EXP 4
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 140
// end ;
 747: LD_VAR 0 1
 751: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
 756: PPUSH
// for i = 1 to 5 do
 757: LD_ADDR_VAR 0 2
 761: PUSH
 762: DOUBLE
 763: LD_INT 1
 765: DEC
 766: ST_TO_ADDR
 767: LD_INT 5
 769: PUSH
 770: FOR_TO
 771: IFFALSE 879
// begin vc_engine = 1 ;
 773: LD_ADDR_OWVAR 39
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// vc_control = 2 ;
 781: LD_ADDR_OWVAR 38
 785: PUSH
 786: LD_INT 2
 788: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 789: LD_ADDR_OWVAR 40
 793: PUSH
 794: LD_INT 9
 796: PUSH
 797: LD_INT 5
 799: PUSH
 800: LD_INT 12
 802: PUSH
 803: LD_INT 4
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 4
 817: PPUSH
 818: CALL_OW 12
 822: ARRAY
 823: ST_TO_ADDR
// vc_chassis = 2 ;
 824: LD_ADDR_OWVAR 37
 828: PUSH
 829: LD_INT 2
 831: ST_TO_ADDR
// veh = CreateVehicle ;
 832: LD_ADDR_VAR 0 3
 836: PUSH
 837: CALL_OW 45
 841: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 842: LD_VAR 0 3
 846: PPUSH
 847: LD_INT 500
 849: PPUSH
 850: LD_INT 1000
 852: PPUSH
 853: CALL_OW 12
 857: PPUSH
 858: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 862: LD_VAR 0 3
 866: PPUSH
 867: LD_INT 15
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// end ;
 877: GO 770
 879: POP
 880: POP
// end ; end_of_file
 881: LD_VAR 0 1
 885: RET
// export function PrepareCommander ; begin
 886: LD_INT 0
 888: PPUSH
// uc_side = 3 ;
 889: LD_ADDR_OWVAR 20
 893: PUSH
 894: LD_INT 3
 896: ST_TO_ADDR
// uc_nation = 3 ;
 897: LD_ADDR_OWVAR 21
 901: PUSH
 902: LD_INT 3
 904: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 905: LD_ADDR_EXP 6
 909: PUSH
 910: LD_STRING Eisenstein
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL 1081 0 2
 920: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 11
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareRussianBase ; begin
 941: LD_INT 0
 943: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 944: LD_INT 3
 946: PPUSH
 947: LD_INT 3
 949: PPUSH
 950: LD_INT 45
 952: PPUSH
 953: LD_INT 10
 955: PPUSH
 956: LD_INT 9
 958: PPUSH
 959: LD_INT 2
 961: PPUSH
 962: CALL 1178 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 966: LD_INT 3
 968: PPUSH
 969: LD_INT 3
 971: PPUSH
 972: LD_INT 22
 974: PPUSH
 975: LD_INT 10
 977: PPUSH
 978: LD_INT 2
 980: PPUSH
 981: LD_INT 2
 983: PPUSH
 984: CALL 1178 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 988: LD_INT 3
 990: PPUSH
 991: LD_INT 3
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 10
 999: PPUSH
1000: LD_INT 3
1002: PPUSH
1003: LD_INT 3
1005: PPUSH
1006: CALL 1178 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1010: LD_INT 3
1012: PPUSH
1013: LD_INT 3
1015: PPUSH
1016: LD_INT 40
1018: PPUSH
1019: LD_INT 10
1021: PPUSH
1022: LD_INT 3
1024: PPUSH
1025: LD_INT 3
1027: PPUSH
1028: CALL 1178 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1032: LD_INT 3
1034: PPUSH
1035: LD_INT 3
1037: PPUSH
1038: LD_INT 14
1040: PPUSH
1041: LD_INT 10
1043: PPUSH
1044: LD_INT 4
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 1178 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1054: LD_INT 3
1056: PPUSH
1057: LD_INT 3
1059: PPUSH
1060: LD_INT 15
1062: PPUSH
1063: LD_INT 10
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: LD_INT 2
1071: PPUSH
1072: CALL 1178 0 6
// end ; end_of_file
1076: LD_VAR 0 1
1080: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1081: LD_INT 0
1083: PPUSH
1084: PPUSH
// if exist_mode then
1085: LD_VAR 0 2
1089: IFFALSE 1108
// begin unit := CreateCharacter ( ident ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_VAR 0 1
1100: PPUSH
1101: CALL_OW 34
1105: ST_TO_ADDR
// end else
1106: GO 1123
// begin unit := NewCharacter ( ident ) ;
1108: LD_ADDR_VAR 0 4
1112: PUSH
1113: LD_VAR 0 1
1117: PPUSH
1118: CALL_OW 25
1122: ST_TO_ADDR
// end ; result := unit ;
1123: LD_ADDR_VAR 0 3
1127: PUSH
1128: LD_VAR 0 4
1132: ST_TO_ADDR
// end ;
1133: LD_VAR 0 3
1137: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1138: LD_INT 0
1140: PPUSH
1141: PPUSH
// for i in charactersList do
1142: LD_ADDR_VAR 0 4
1146: PUSH
1147: LD_VAR 0 1
1151: PUSH
1152: FOR_IN
1153: IFFALSE 1171
// SaveCharacters ( i , ident ) ;
1155: LD_VAR 0 4
1159: PPUSH
1160: LD_VAR 0 2
1164: PPUSH
1165: CALL_OW 38
1169: GO 1152
1171: POP
1172: POP
// end ;
1173: LD_VAR 0 3
1177: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
1183: PPUSH
// for i = 1 to count do
1184: LD_ADDR_VAR 0 8
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_VAR 0 6
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1281
// begin uc_side = side ;
1202: LD_ADDR_OWVAR 20
1206: PUSH
1207: LD_VAR 0 1
1211: ST_TO_ADDR
// uc_nation = nation ;
1212: LD_ADDR_OWVAR 21
1216: PUSH
1217: LD_VAR 0 2
1221: ST_TO_ADDR
// hc_gallery =  ;
1222: LD_ADDR_OWVAR 33
1226: PUSH
1227: LD_STRING 
1229: ST_TO_ADDR
// hc_name =  ;
1230: LD_ADDR_OWVAR 26
1234: PUSH
1235: LD_STRING 
1237: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1238: LD_INT 0
1240: PPUSH
1241: LD_VAR 0 5
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 380
// un = CreateHuman ;
1255: LD_ADDR_VAR 0 10
1259: PUSH
1260: CALL_OW 44
1264: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1265: LD_VAR 0 10
1269: PPUSH
1270: LD_VAR 0 3
1274: PPUSH
1275: CALL_OW 52
// end ;
1279: GO 1199
1281: POP
1282: POP
// end ;
1283: LD_VAR 0 7
1287: RET
// export function PrepareDifficulty ; begin
1288: LD_INT 0
1290: PPUSH
// if difficulty = 1 then
1291: LD_OWVAR 67
1295: PUSH
1296: LD_INT 1
1298: EQUAL
1299: IFFALSE 1379
// begin SetTech ( 57 , 3 , state_disabled ) ;
1301: LD_INT 57
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1314: LD_INT 58
1316: PPUSH
1317: LD_INT 3
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1327: LD_INT 59
1329: PPUSH
1330: LD_INT 3
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1340: LD_INT 51
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1353: LD_INT 52
1355: PPUSH
1356: LD_INT 3
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1366: LD_INT 53
1368: PPUSH
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 322
// end ; if difficulty = 2 then
1379: LD_OWVAR 67
1383: PUSH
1384: LD_INT 2
1386: EQUAL
1387: IFFALSE 1467
// begin SetTech ( 57 , 3 , state_enabled ) ;
1389: LD_INT 57
1391: PPUSH
1392: LD_INT 3
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1402: LD_INT 58
1404: PPUSH
1405: LD_INT 3
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1415: LD_INT 59
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1428: LD_INT 51
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1441: LD_INT 52
1443: PPUSH
1444: LD_INT 3
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1454: LD_INT 53
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 0
1462: PPUSH
1463: CALL_OW 322
// end ; if difficulty = 3 then
1467: LD_OWVAR 67
1471: PUSH
1472: LD_INT 3
1474: EQUAL
1475: IFFALSE 1555
// begin SetTech ( 57 , 3 , state_enabled ) ;
1477: LD_INT 57
1479: PPUSH
1480: LD_INT 3
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1490: LD_INT 58
1492: PPUSH
1493: LD_INT 3
1495: PPUSH
1496: LD_INT 1
1498: PPUSH
1499: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1503: LD_INT 59
1505: PPUSH
1506: LD_INT 3
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1516: LD_INT 51
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1529: LD_INT 52
1531: PPUSH
1532: LD_INT 3
1534: PPUSH
1535: LD_INT 1
1537: PPUSH
1538: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1542: LD_INT 53
1544: PPUSH
1545: LD_INT 3
1547: PPUSH
1548: LD_INT 1
1550: PPUSH
1551: CALL_OW 322
// end ; end ;
1555: LD_VAR 0 1
1559: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
1564: PPUSH
1565: PPUSH
1566: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1567: LD_ADDR_VAR 0 8
1571: PUSH
1572: LD_INT 48
1574: PUSH
1575: LD_INT 49
1577: PUSH
1578: LD_INT 50
1580: PUSH
1581: LD_INT 20
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 69
1589: PUSH
1590: LD_INT 39
1592: PUSH
1593: LD_INT 34
1595: PUSH
1596: LD_INT 40
1598: PUSH
1599: LD_INT 71
1601: PUSH
1602: LD_INT 57
1604: PUSH
1605: LD_INT 58
1607: PUSH
1608: LD_INT 44
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: LD_INT 27
1616: PUSH
1617: LD_INT 23
1619: PUSH
1620: LD_INT 33
1622: PUSH
1623: LD_INT 54
1625: PUSH
1626: LD_INT 55
1628: PUSH
1629: LD_INT 56
1631: PUSH
1632: LD_INT 63
1634: PUSH
1635: LD_INT 64
1637: PUSH
1638: LD_INT 65
1640: PUSH
1641: LD_INT 30
1643: PUSH
1644: LD_INT 31
1646: PUSH
1647: LD_INT 21
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 25
1655: PUSH
1656: LD_INT 51
1658: PUSH
1659: LD_INT 52
1661: PUSH
1662: LD_INT 59
1664: PUSH
1665: LD_INT 53
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1702: LD_ADDR_VAR 0 5
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_VAR 0 8
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1794
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1720: LD_VAR 0 8
1724: PUSH
1725: LD_VAR 0 5
1729: ARRAY
1730: PPUSH
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 321
1740: PUSH
1741: LD_INT 1
1743: EQUAL
1744: PUSH
1745: LD_VAR 0 8
1749: PUSH
1750: LD_VAR 0 5
1754: ARRAY
1755: PPUSH
1756: LD_VAR 0 3
1760: PPUSH
1761: CALL_OW 482
1765: PUSH
1766: LD_INT 1
1768: EQUAL
1769: AND
1770: IFFALSE 1792
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1772: LD_VAR 0 2
1776: PPUSH
1777: LD_VAR 0 8
1781: PUSH
1782: LD_VAR 0 5
1786: ARRAY
1787: PPUSH
1788: CALL_OW 184
1792: GO 1717
1794: POP
1795: POP
// end ;
1796: LD_VAR 0 4
1800: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1801: LD_INT 0
1803: PPUSH
1804: PPUSH
1805: PPUSH
1806: PPUSH
1807: PPUSH
1808: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1809: LD_ADDR_VAR 0 8
1813: PUSH
1814: LD_VAR 0 2
1818: PPUSH
1819: CALL_OW 313
1823: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1824: LD_ADDR_VAR 0 9
1828: PUSH
1829: LD_VAR 0 3
1833: PPUSH
1834: LD_INT 22
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 25
1848: PUSH
1849: LD_INT 2
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 24
1858: PUSH
1859: LD_INT 750
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 3
1868: PUSH
1869: LD_INT 54
1871: PUSH
1872: EMPTY
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 70
1889: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1890: LD_ADDR_VAR 0 6
1894: PUSH
1895: LD_VAR 0 3
1899: PPUSH
1900: LD_INT 22
1902: PUSH
1903: LD_VAR 0 1
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 21
1914: PUSH
1915: LD_INT 3
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: LD_INT 24
1927: PUSH
1928: LD_INT 1000
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: PPUSH
1947: CALL_OW 70
1951: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1952: LD_VAR 0 6
1956: NOT
1957: PUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 24
1982: PUSH
1983: LD_INT 250
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: NOT
2000: AND
2001: IFFALSE 2005
// exit ;
2003: GO 2187
// if buildings_list > 0 and engineerOkInside then
2005: LD_VAR 0 6
2009: PUSH
2010: LD_INT 0
2012: GREATER
2013: PUSH
2014: LD_VAR 0 8
2018: AND
2019: IFFALSE 2030
// ComExitBuilding ( engineerOkInside ) ;
2021: LD_VAR 0 8
2025: PPUSH
2026: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2030: LD_VAR 0 6
2034: PUSH
2035: LD_INT 0
2037: GREATER
2038: PUSH
2039: LD_VAR 0 9
2043: PUSH
2044: LD_INT 0
2046: GREATER
2047: AND
2048: IFFALSE 2068
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2050: LD_VAR 0 9
2054: PPUSH
2055: LD_VAR 0 6
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2068: LD_VAR 0 6
2072: PUSH
2073: LD_INT 0
2075: EQUAL
2076: PUSH
2077: LD_VAR 0 4
2081: PUSH
2082: LD_INT 0
2084: EQUAL
2085: AND
2086: PUSH
2087: LD_VAR 0 9
2091: PUSH
2092: LD_INT 0
2094: GREATER
2095: AND
2096: IFFALSE 2112
// ComEnterUnit ( engineerOkOutside , building ) ;
2098: LD_VAR 0 9
2102: PPUSH
2103: LD_VAR 0 2
2107: PPUSH
2108: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2112: LD_VAR 0 9
2116: PUSH
2117: LD_INT 0
2119: GREATER
2120: PUSH
2121: LD_VAR 0 6
2125: PUSH
2126: LD_INT 0
2128: EQUAL
2129: AND
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: LD_INT 0
2138: GREATER
2139: AND
2140: IFFALSE 2187
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2142: LD_VAR 0 9
2146: PPUSH
2147: LD_VAR 0 4
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 4
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PPUSH
2165: LD_VAR 0 4
2169: PUSH
2170: LD_INT 3
2172: ARRAY
2173: PPUSH
2174: LD_VAR 0 4
2178: PUSH
2179: LD_INT 4
2181: ARRAY
2182: PPUSH
2183: CALL_OW 145
// end ;
2187: LD_VAR 0 5
2191: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2203: LD_ADDR_VAR 0 6
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_VAR 0 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 25
2222: PUSH
2223: LD_INT 4
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 23
2232: PUSH
2233: LD_INT 2
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 24
2242: PUSH
2243: LD_INT 251
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 69
2260: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2261: LD_ADDR_VAR 0 7
2265: PUSH
2266: LD_VAR 0 3
2270: PPUSH
2271: LD_INT 22
2273: PUSH
2274: LD_VAR 0 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 23
2285: PUSH
2286: LD_INT 2
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 25
2295: PUSH
2296: LD_INT 4
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PUSH
2303: LD_INT 50
2305: PUSH
2306: EMPTY
2307: LIST
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: PPUSH
2315: CALL_OW 70
2319: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2320: LD_ADDR_VAR 0 10
2324: PUSH
2325: LD_VAR 0 3
2329: PPUSH
2330: LD_INT 22
2332: PUSH
2333: LD_VAR 0 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: LD_INT 25
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 3
2371: PUSH
2372: LD_INT 24
2374: PUSH
2375: LD_INT 750
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: PPUSH
2392: CALL_OW 70
2396: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2397: LD_ADDR_VAR 0 11
2401: PUSH
2402: LD_VAR 0 2
2406: PPUSH
2407: LD_INT 22
2409: PUSH
2410: LD_VAR 0 1
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 21
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 25
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 3
2448: PUSH
2449: LD_INT 24
2451: PUSH
2452: LD_INT 1000
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 70
2473: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2474: LD_VAR 0 10
2478: NOT
2479: PUSH
2480: LD_VAR 0 11
2484: NOT
2485: AND
2486: PUSH
2487: LD_VAR 0 6
2491: NOT
2492: AND
2493: IFFALSE 2497
// exit ;
2495: GO 2731
// if damageUnits > 0 and sci_list > 0 then
2497: LD_VAR 0 10
2501: PUSH
2502: LD_INT 0
2504: GREATER
2505: PUSH
2506: LD_VAR 0 6
2510: PUSH
2511: LD_INT 0
2513: GREATER
2514: AND
2515: IFFALSE 2531
// ComMoveToArea ( damageUnits , healArea ) ;
2517: LD_VAR 0 10
2521: PPUSH
2522: LD_VAR 0 2
2526: PPUSH
2527: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2531: LD_VAR 0 11
2535: PUSH
2536: LD_INT 0
2538: GREATER
2539: PUSH
2540: LD_VAR 0 6
2544: PUSH
2545: LD_INT 0
2547: GREATER
2548: AND
2549: IFFALSE 2560
// ComExitBuilding ( sci_list ) ;
2551: LD_VAR 0 6
2555: PPUSH
2556: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2560: LD_VAR 0 11
2564: PUSH
2565: LD_INT 0
2567: GREATER
2568: PUSH
2569: LD_VAR 0 7
2573: PUSH
2574: LD_INT 0
2576: GREATER
2577: AND
2578: IFFALSE 2598
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2580: LD_VAR 0 7
2584: PPUSH
2585: LD_VAR 0 11
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2598: LD_VAR 0 10
2602: PUSH
2603: LD_INT 0
2605: EQUAL
2606: PUSH
2607: LD_VAR 0 11
2611: PUSH
2612: LD_INT 0
2614: EQUAL
2615: AND
2616: PUSH
2617: LD_VAR 0 7
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: AND
2626: IFFALSE 2731
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2628: LD_ADDR_VAR 0 12
2632: PUSH
2633: LD_INT 22
2635: PUSH
2636: LD_VAR 0 1
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 21
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 30
2657: PUSH
2658: LD_INT 8
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: PPUSH
2670: CALL_OW 69
2674: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2675: LD_ADDR_VAR 0 13
2679: PUSH
2680: LD_INT 1
2682: PPUSH
2683: LD_VAR 0 12
2687: PPUSH
2688: CALL_OW 12
2692: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2693: LD_VAR 0 7
2697: PPUSH
2698: LD_INT 3
2700: PUSH
2701: LD_INT 60
2703: PUSH
2704: EMPTY
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: PPUSH
2716: LD_VAR 0 12
2720: PUSH
2721: LD_VAR 0 13
2725: ARRAY
2726: PPUSH
2727: CALL_OW 120
// end ; end ;
2731: LD_VAR 0 5
2735: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2736: LD_INT 0
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
// tmpTab = [ ] ;
2742: LD_ADDR_VAR 0 6
2746: PUSH
2747: EMPTY
2748: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_VAR 0 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 30
2763: PUSH
2764: LD_INT 32
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PPUSH
2775: CALL_OW 69
2779: PUSH
2780: LD_INT 0
2782: GREATER
2783: IFFALSE 2866
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2785: LD_ADDR_VAR 0 4
2789: PUSH
2790: LD_INT 22
2792: PUSH
2793: LD_VAR 0 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 30
2804: PUSH
2805: LD_INT 32
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: FOR_IN
2822: IFFALSE 2864
// begin for j in UnitsInside ( i ) do
2824: LD_ADDR_VAR 0 5
2828: PUSH
2829: LD_VAR 0 4
2833: PPUSH
2834: CALL_OW 313
2838: PUSH
2839: FOR_IN
2840: IFFALSE 2860
// tmpTab = tmpTab ^ j ;
2842: LD_ADDR_VAR 0 6
2846: PUSH
2847: LD_VAR 0 6
2851: PUSH
2852: LD_VAR 0 5
2856: ADD
2857: ST_TO_ADDR
2858: GO 2839
2860: POP
2861: POP
// end ;
2862: GO 2821
2864: POP
2865: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2866: LD_VAR 0 6
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 250
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: CALL_OW 251
2890: PPUSH
2891: CALL_OW 114
// end ;
2895: LD_VAR 0 3
2899: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2900: LD_INT 0
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// enable ;
2906: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
2907: LD_ADDR_VAR 0 7
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: CALL_OW 435
2921: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_VAR 0 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 34
2941: PUSH
2942: LD_VAR 0 2
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 69
2959: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
2960: LD_VAR 0 6
2964: PUSH
2965: LD_INT 0
2967: GREATER
2968: PUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: CALL_OW 435
2978: AND
2979: PUSH
2980: LD_VAR 0 7
2984: PUSH
2985: LD_INT 0
2987: GREATER
2988: AND
2989: IFFALSE 3038
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2991: LD_VAR 0 6
2995: PUSH
2996: LD_INT 1
2998: ARRAY
2999: PPUSH
3000: LD_VAR 0 7
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: LD_VAR 0 7
3013: PUSH
3014: LD_INT 2
3016: ARRAY
3017: PPUSH
3018: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3022: LD_VAR 0 6
3026: PUSH
3027: LD_INT 1
3029: ARRAY
3030: PPUSH
3031: LD_INT 100
3033: PPUSH
3034: CALL_OW 240
// end ; end ;
3038: LD_VAR 0 4
3042: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3050: LD_ADDR_VAR 0 6
3054: PUSH
3055: LD_INT 22
3057: PUSH
3058: LD_VAR 0 1
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 30
3072: PUSH
3073: LD_INT 31
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: LD_INT 30
3082: PUSH
3083: LD_INT 32
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 30
3092: PUSH
3093: LD_INT 33
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 30
3102: PUSH
3103: LD_INT 4
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 30
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3137: LD_ADDR_VAR 0 7
3141: PUSH
3142: LD_INT 22
3144: PUSH
3145: LD_VAR 0 2
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 21
3156: PUSH
3157: LD_INT 3
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: LD_INT 58
3166: PUSH
3167: EMPTY
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: PPUSH
3175: CALL_OW 69
3179: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3180: LD_VAR 0 6
3184: PUSH
3185: LD_INT 0
3187: GREATER
3188: PUSH
3189: LD_VAR 0 7
3193: PUSH
3194: LD_INT 0
3196: GREATER
3197: AND
3198: IFFALSE 3268
// begin for i in turretsList do
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_VAR 0 6
3209: PUSH
3210: FOR_IN
3211: IFFALSE 3266
// begin for j in enemyBuildings do
3213: LD_ADDR_VAR 0 5
3217: PUSH
3218: LD_VAR 0 7
3222: PUSH
3223: FOR_IN
3224: IFFALSE 3262
// begin if GetDistUnits ( i , j ) < 20 then
3226: LD_VAR 0 4
3230: PPUSH
3231: LD_VAR 0 5
3235: PPUSH
3236: CALL_OW 296
3240: PUSH
3241: LD_INT 20
3243: LESS
3244: IFFALSE 3260
// begin ComAttackUnit ( i , j ) ;
3246: LD_VAR 0 4
3250: PPUSH
3251: LD_VAR 0 5
3255: PPUSH
3256: CALL_OW 115
// end ; end ;
3260: GO 3223
3262: POP
3263: POP
// end ;
3264: GO 3210
3266: POP
3267: POP
// end ; end ;
3268: LD_VAR 0 3
3272: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3273: LD_INT 0
3275: PPUSH
3276: PPUSH
// for i = 1 to vehCount do
3277: LD_ADDR_VAR 0 9
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_VAR 0 3
3291: PUSH
3292: FOR_TO
3293: IFFALSE 3340
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3295: LD_VAR 0 2
3299: PPUSH
3300: LD_VAR 0 7
3304: PPUSH
3305: LD_VAR 0 5
3309: PPUSH
3310: LD_VAR 0 6
3314: PPUSH
3315: LD_VAR 0 4
3319: PUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: CALL_OW 12
3332: ARRAY
3333: PPUSH
3334: CALL_OW 185
3338: GO 3292
3340: POP
3341: POP
// end ;
3342: LD_VAR 0 8
3346: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3347: LD_INT 0
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
3354: PPUSH
3355: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3356: LD_EXP 11
3360: PUSH
3361: LD_INT 2
3363: PUSH
3364: LD_INT 3
3366: PUSH
3367: LD_INT 4
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: LD_OWVAR 67
3379: ARRAY
3380: GREATEREQUAL
3381: PUSH
3382: LD_EXP 12
3386: PUSH
3387: LD_INT 1
3389: PUSH
3390: LD_INT 1
3392: PUSH
3393: LD_INT 2
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_OWVAR 67
3405: ARRAY
3406: GREATEREQUAL
3407: AND
3408: IFFALSE 3717
// begin repeat wait ( 0 0$1 ) ;
3410: LD_INT 35
3412: PPUSH
3413: CALL_OW 67
// for j in russianTanks do
3417: LD_ADDR_VAR 0 4
3421: PUSH
3422: LD_EXP 11
3426: PUSH
3427: FOR_IN
3428: IFFALSE 3705
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3430: LD_ADDR_VAR 0 5
3434: PUSH
3435: LD_EXP 12
3439: PPUSH
3440: LD_INT 3
3442: PUSH
3443: LD_INT 60
3445: PUSH
3446: EMPTY
3447: LIST
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 72
3457: ST_TO_ADDR
// if tmp then
3458: LD_VAR 0 5
3462: IFFALSE 3478
// ComMoveUnit ( tmp , j ) ;
3464: LD_VAR 0 5
3468: PPUSH
3469: LD_VAR 0 4
3473: PPUSH
3474: CALL_OW 112
// if GetSide ( j ) <> side then
3478: LD_VAR 0 4
3482: PPUSH
3483: CALL_OW 255
3487: PUSH
3488: LD_VAR 0 1
3492: NONEQUAL
3493: IFFALSE 3506
// begin ComStop ( j ) ;
3495: LD_VAR 0 4
3499: PPUSH
3500: CALL_OW 141
// continue ;
3504: GO 3427
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3506: LD_ADDR_VAR 0 7
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_VAR 0 1
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 101
3525: PUSH
3526: LD_INT 1
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PPUSH
3537: CALL_OW 69
3541: PPUSH
3542: LD_VAR 0 4
3546: PPUSH
3547: CALL_OW 74
3551: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3552: LD_ADDR_VAR 0 8
3556: PUSH
3557: LD_INT 81
3559: PUSH
3560: LD_VAR 0 1
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 101
3571: PUSH
3572: LD_INT 1
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: LD_INT 59
3584: PUSH
3585: EMPTY
3586: LIST
3587: PUSH
3588: LD_INT 21
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 21
3600: PUSH
3601: LD_INT 2
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: EMPTY
3620: LIST
3621: PPUSH
3622: CALL_OW 69
3626: PPUSH
3627: LD_VAR 0 4
3631: PPUSH
3632: CALL_OW 74
3636: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_VAR 0 7
3646: PPUSH
3647: CALL_OW 296
3651: PUSH
3652: LD_INT 8
3654: PLUS
3655: PUSH
3656: LD_VAR 0 4
3660: PPUSH
3661: LD_VAR 0 8
3665: PPUSH
3666: CALL_OW 296
3670: LESS
3671: IFFALSE 3689
// ComAttackUnit ( j , target1 ) else
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 7
3682: PPUSH
3683: CALL_OW 115
3687: GO 3703
// ComAttackUnit ( j , target2 ) ;
3689: LD_VAR 0 4
3693: PPUSH
3694: LD_VAR 0 8
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3427
3705: POP
3706: POP
// until russianTanks = 0 ;
3707: LD_EXP 11
3711: PUSH
3712: LD_INT 0
3714: EQUAL
3715: IFFALSE 3410
// end ; end ;
3717: LD_VAR 0 2
3721: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3730: LD_ADDR_VAR 0 6
3734: PUSH
3735: LD_INT 22
3737: PUSH
3738: LD_VAR 0 1
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 25
3749: PUSH
3750: LD_INT 9
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PPUSH
3761: CALL_OW 69
3765: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3766: LD_ADDR_VAR 0 7
3770: PUSH
3771: LD_INT 81
3773: PUSH
3774: LD_VAR 0 1
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 3
3785: PUSH
3786: LD_INT 21
3788: PUSH
3789: LD_INT 3
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PPUSH
3804: CALL_OW 69
3808: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_INT 1
3816: PPUSH
3817: LD_INT 3
3819: PPUSH
3820: CALL_OW 12
3824: ST_TO_ADDR
// for i = 1 to list do
3825: LD_ADDR_VAR 0 5
3829: PUSH
3830: DOUBLE
3831: LD_INT 1
3833: DEC
3834: ST_TO_ADDR
3835: LD_VAR 0 6
3839: PUSH
3840: FOR_TO
3841: IFFALSE 4043
// for ta in filter do
3843: LD_ADDR_VAR 0 3
3847: PUSH
3848: LD_VAR 0 7
3852: PUSH
3853: FOR_IN
3854: IFFALSE 4039
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3856: LD_VAR 0 6
3860: PUSH
3861: LD_VAR 0 5
3865: ARRAY
3866: PPUSH
3867: LD_VAR 0 3
3871: PPUSH
3872: CALL_OW 296
3876: PUSH
3877: LD_INT 15
3879: LESSEQUAL
3880: IFFALSE 4037
// begin case c of 1 :
3882: LD_VAR 0 4
3886: PUSH
3887: LD_INT 1
3889: DOUBLE
3890: EQUAL
3891: IFTRUE 3895
3893: GO 3933
3895: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3896: LD_VAR 0 6
3900: PUSH
3901: LD_VAR 0 5
3905: ARRAY
3906: PPUSH
3907: LD_VAR 0 3
3911: PPUSH
3912: CALL_OW 250
3916: PPUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 251
3926: PPUSH
3927: CALL_OW 154
3931: GO 4037
3933: LD_INT 2
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 4005
3941: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3942: LD_VAR 0 6
3946: PUSH
3947: LD_VAR 0 5
3951: ARRAY
3952: PPUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 250
3962: PUSH
3963: LD_INT 1
3965: NEG
3966: PPUSH
3967: LD_INT 1
3969: PPUSH
3970: CALL_OW 12
3974: PLUS
3975: PPUSH
3976: LD_VAR 0 3
3980: PPUSH
3981: CALL_OW 251
3985: PUSH
3986: LD_INT 1
3988: NEG
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: CALL_OW 12
3997: PLUS
3998: PPUSH
3999: CALL_OW 153
4003: GO 4037
4005: LD_INT 3
4007: DOUBLE
4008: EQUAL
4009: IFTRUE 4013
4011: GO 4036
4013: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4014: LD_VAR 0 6
4018: PUSH
4019: LD_VAR 0 5
4023: ARRAY
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: CALL_OW 115
4034: GO 4037
4036: POP
// end ; end ;
4037: GO 3853
4039: POP
4040: POP
4041: GO 3840
4043: POP
4044: POP
// end ;
4045: LD_VAR 0 2
4049: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4058: LD_ADDR_VAR 0 7
4062: PUSH
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_INT 22
4070: PUSH
4071: LD_VAR 0 1
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 21
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 34
4092: PUSH
4093: LD_INT 52
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 70
4109: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4110: LD_ADDR_VAR 0 8
4114: PUSH
4115: LD_VAR 0 2
4119: PPUSH
4120: LD_INT 22
4122: PUSH
4123: LD_VAR 0 1
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 21
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 3
4144: PUSH
4145: LD_INT 24
4147: PUSH
4148: LD_INT 1000
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: PPUSH
4167: CALL_OW 70
4171: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4172: LD_VAR 0 8
4176: PUSH
4177: LD_INT 0
4179: GREATER
4180: PUSH
4181: LD_VAR 0 7
4185: PPUSH
4186: LD_INT 24
4188: PUSH
4189: LD_INT 750
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 72
4200: PUSH
4201: LD_INT 0
4203: GREATER
4204: AND
4205: IFFALSE 4225
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4207: LD_VAR 0 7
4211: PPUSH
4212: LD_VAR 0 8
4216: PUSH
4217: LD_INT 1
4219: ARRAY
4220: PPUSH
4221: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4225: LD_VAR 0 7
4229: PUSH
4230: LD_INT 0
4232: GREATER
4233: PUSH
4234: LD_VAR 0 8
4238: PUSH
4239: LD_INT 0
4241: EQUAL
4242: AND
4243: PUSH
4244: LD_EXP 10
4248: PUSH
4249: LD_INT 0
4251: GREATER
4252: AND
4253: IFFALSE 4300
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4255: LD_VAR 0 7
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 1
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 2
4276: ARRAY
4277: PPUSH
4278: LD_EXP 10
4282: PUSH
4283: LD_INT 3
4285: ARRAY
4286: PPUSH
4287: LD_EXP 10
4291: PUSH
4292: LD_INT 4
4294: ARRAY
4295: PPUSH
4296: CALL_OW 567
// end ; end_of_file
4300: LD_VAR 0 3
4304: RET
// every 0 0$1 do
4305: GO 4307
4307: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4308: LD_INT 3
4310: PPUSH
4311: LD_INT 14
4313: PPUSH
4314: LD_INT 3
4316: PPUSH
4317: CALL 1560 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4321: LD_INT 3
4323: PPUSH
4324: LD_INT 15
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL 1560 0 3
// end ;
4334: END
// every 0 0$1 trigger russianAI = 1 do
4335: LD_EXP 13
4339: PUSH
4340: LD_INT 1
4342: EQUAL
4343: IFFALSE 4449
4345: GO 4347
4347: DISABLE
// begin enable ;
4348: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 22
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_EXP 10
4362: PPUSH
4363: CALL 1801 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4367: LD_INT 3
4369: PPUSH
4370: LD_INT 8
4372: PPUSH
4373: LD_INT 7
4375: PPUSH
4376: LD_INT 14
4378: PUSH
4379: LD_INT 15
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 1
4388: PPUSH
4389: LD_INT 2
4391: PPUSH
4392: CALL_OW 12
4396: ARRAY
4397: PPUSH
4398: CALL 2192 0 4
// AttackVehicles ( 3 ) ;
4402: LD_INT 3
4404: PPUSH
4405: CALL 3347 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4409: LD_INT 3
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: CALL 3043 0 2
// IntBazooka ( 3 ) ;
4419: LD_INT 3
4421: PPUSH
4422: CALL 3722 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4426: LD_INT 3
4428: PPUSH
4429: LD_INT 51
4431: PPUSH
4432: LD_INT 14
4434: PPUSH
4435: CALL 2900 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4439: LD_INT 3
4441: PPUSH
4442: LD_INT 7
4444: PPUSH
4445: CALL 4050 0 2
// end ;
4449: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4450: LD_INT 22
4452: PPUSH
4453: CALL_OW 303
4457: PUSH
4458: LD_INT 22
4460: PPUSH
4461: CALL_OW 255
4465: PUSH
4466: LD_INT 1
4468: EQUAL
4469: OR
4470: IFFALSE 4485
4472: GO 4474
4474: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4475: LD_INT 3
4477: PPUSH
4478: LD_INT 22
4480: PPUSH
4481: CALL 2736 0 2
4485: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4486: LD_EXP 13
4490: PUSH
4491: LD_INT 1
4493: EQUAL
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 3
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 50
4517: PUSH
4518: EMPTY
4519: LIST
4520: PUSH
4521: LD_INT 33
4523: PUSH
4524: LD_INT 3
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 34
4536: PUSH
4537: LD_INT 46
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 34
4546: PUSH
4547: LD_INT 45
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 34
4556: PUSH
4557: LD_INT 44
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 49
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 34
4576: PUSH
4577: LD_INT 47
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: PPUSH
4599: CALL_OW 69
4603: PUSH
4604: LD_INT 0
4606: EQUAL
4607: AND
4608: IFFALSE 4795
4610: GO 4612
4612: DISABLE
// begin enable ;
4613: ENABLE
// if russianRocketsAvalaible = 1 then
4614: LD_EXP 14
4618: PUSH
4619: LD_INT 1
4621: EQUAL
4622: IFFALSE 4679
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4624: LD_INT 3
4626: PPUSH
4627: LD_INT 1
4629: PPUSH
4630: LD_INT 3
4632: PUSH
4633: LD_INT 4
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: PUSH
4644: LD_OWVAR 67
4648: ARRAY
4649: PPUSH
4650: LD_INT 46
4652: PUSH
4653: LD_INT 45
4655: PUSH
4656: LD_INT 44
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: PPUSH
4664: LD_INT 3
4666: PPUSH
4667: LD_INT 3
4669: PPUSH
4670: LD_INT 24
4672: PPUSH
4673: CALL 3273 0 7
4677: GO 4736
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4679: LD_INT 3
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 4
4690: PUSH
4691: LD_INT 4
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_OWVAR 67
4703: ARRAY
4704: PPUSH
4705: LD_INT 46
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 44
4713: PUSH
4714: LD_INT 47
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: PPUSH
4723: LD_INT 3
4725: PPUSH
4726: LD_INT 3
4728: PPUSH
4729: LD_INT 24
4731: PPUSH
4732: CALL 3273 0 7
// if russianTimeLapsers = 0 then
4736: LD_EXP 12
4740: PUSH
4741: LD_INT 0
4743: EQUAL
4744: IFFALSE 4795
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 40
4751: PPUSH
4752: LD_INT 1
4754: PUSH
4755: LD_INT 2
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: LD_INT 49
4774: PUSH
4775: LD_INT 49
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: LD_INT 3
4784: PPUSH
4785: LD_INT 3
4787: PPUSH
4788: LD_INT 24
4790: PPUSH
4791: CALL 3273 0 7
// end ; end_of_file
4795: END
// every 1 do var dec1 , dec2 ;
4796: GO 4798
4798: DISABLE
4799: LD_INT 0
4801: PPUSH
4802: PPUSH
// begin InGameOn ;
4803: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
4807: LD_INT 48
4809: PPUSH
4810: LD_STRING deltakappa
4812: PPUSH
4813: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4817: LD_INT 95
4819: PPUSH
4820: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4824: LD_INT 95
4826: PPUSH
4827: LD_INT 30
4829: PPUSH
4830: LD_INT 11
4832: PPUSH
4833: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4837: LD_INT 30
4839: PPUSH
4840: LD_INT 11
4842: PPUSH
4843: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4847: LD_EXP 5
4851: PPUSH
4852: LD_STRING D1-Pow-1
4854: PPUSH
4855: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4859: LD_EXP 1
4863: PPUSH
4864: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4868: LD_EXP 1
4872: PPUSH
4873: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4877: LD_EXP 1
4881: PPUSH
4882: LD_STRING D1-JMM-1
4884: PPUSH
4885: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4889: LD_EXP 5
4893: PPUSH
4894: LD_STRING D1-Pow-2
4896: PPUSH
4897: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4901: LD_EXP 1
4905: PPUSH
4906: LD_STRING D1-JMM-2
4908: PPUSH
4909: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4913: LD_EXP 1
4917: PPUSH
4918: LD_INT 95
4920: PPUSH
4921: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4925: LD_STRING M1
4927: PPUSH
4928: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4932: LD_INT 35
4934: PPUSH
4935: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4939: LD_EXP 1
4943: PPUSH
4944: LD_INT 95
4946: PPUSH
4947: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4951: LD_INT 95
4953: PPUSH
4954: LD_INT 51
4956: PPUSH
4957: LD_INT 21
4959: PPUSH
4960: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4964: LD_INT 95
4966: PPUSH
4967: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4971: LD_INT 95
4973: PPUSH
4974: LD_INT 5
4976: PPUSH
4977: CALL_OW 308
4981: IFFALSE 4932
// if JMMGirl = 1 then
4983: LD_EXP 7
4987: PUSH
4988: LD_INT 1
4990: EQUAL
4991: IFFALSE 5304
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4993: LD_EXP 2
4997: PPUSH
4998: LD_STRING D2J-Joan-1
5000: PPUSH
5001: CALL_OW 94
// dec1 = query ( Q1 ) ;
5005: LD_ADDR_VAR 0 1
5009: PUSH
5010: LD_STRING Q1
5012: PPUSH
5013: CALL_OW 97
5017: ST_TO_ADDR
// if dec1 = 1 then
5018: LD_VAR 0 1
5022: PUSH
5023: LD_INT 1
5025: EQUAL
5026: IFFALSE 5280
// begin ComExitVehicle ( JMM ) ;
5028: LD_EXP 1
5032: PPUSH
5033: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5037: LD_EXP 1
5041: PPUSH
5042: LD_STRING D2J-JMM-1
5044: PPUSH
5045: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5049: LD_EXP 2
5053: PPUSH
5054: LD_STRING D2J-Joan-2
5056: PPUSH
5057: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5061: LD_EXP 1
5065: PPUSH
5066: LD_STRING D2J-JMM-2
5068: PPUSH
5069: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5073: LD_EXP 2
5077: PPUSH
5078: LD_STRING D2J-Joan-3
5080: PPUSH
5081: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5085: LD_EXP 5
5089: PPUSH
5090: LD_STRING DPowell-Pow-1
5092: PPUSH
5093: CALL_OW 94
// dec2 = query ( Q2J ) ;
5097: LD_ADDR_VAR 0 2
5101: PUSH
5102: LD_STRING Q2J
5104: PPUSH
5105: CALL_OW 97
5109: ST_TO_ADDR
// if dec2 = 1 then
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 1
5117: EQUAL
5118: IFFALSE 5160
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5120: LD_EXP 1
5124: PPUSH
5125: LD_STRING D2Ja-JMM-1
5127: PPUSH
5128: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5132: LD_EXP 2
5136: PPUSH
5137: LD_STRING D2Ja-Joan-1
5139: PPUSH
5140: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5144: LD_EXP 1
5148: PPUSH
5149: LD_STRING D2Ja-JMM-2
5151: PPUSH
5152: CALL_OW 88
// InGameOff ;
5156: CALL_OW 9
// end ; if dec2 = 2 then
5160: LD_VAR 0 2
5164: PUSH
5165: LD_INT 2
5167: EQUAL
5168: IFFALSE 5244
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5170: LD_EXP 1
5174: PPUSH
5175: LD_STRING D2Jb-JMM-1
5177: PPUSH
5178: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5182: LD_EXP 2
5186: PPUSH
5187: LD_STRING D2Jb-Joan-1
5189: PPUSH
5190: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D2Jb-JMM-2
5201: PPUSH
5202: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5206: LD_EXP 2
5210: PPUSH
5211: LD_STRING D2Jb-Joan-2
5213: PPUSH
5214: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D2Jb-JMM-3
5225: PPUSH
5226: CALL_OW 88
// fastEnd = 1 ;
5230: LD_ADDR_EXP 15
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// FinishMission ;
5238: CALL 9146 0 0
// exit ;
5242: GO 5874
// end ; if dec2 = 3 then
5244: LD_VAR 0 2
5248: PUSH
5249: LD_INT 3
5251: EQUAL
5252: IFFALSE 5280
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5254: LD_EXP 2
5258: PPUSH
5259: LD_STRING D2Jc-Joan-1
5261: PPUSH
5262: CALL_OW 94
// fastEnd = 1 ;
5266: LD_ADDR_EXP 15
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// FinishMission ;
5274: CALL 9146 0 0
// exit ;
5278: GO 5874
// end ; end ; if dec1 = 2 then
5280: LD_VAR 0 1
5284: PUSH
5285: LD_INT 2
5287: EQUAL
5288: IFFALSE 5304
// begin fastEnd = 1 ;
5290: LD_ADDR_EXP 15
5294: PUSH
5295: LD_INT 1
5297: ST_TO_ADDR
// FinishMission ;
5298: CALL 9146 0 0
// exit ;
5302: GO 5874
// end ; end ; if JMMGirl = 2 then
5304: LD_EXP 7
5308: PUSH
5309: LD_INT 2
5311: EQUAL
5312: IFFALSE 5637
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5314: LD_EXP 3
5318: PPUSH
5319: LD_STRING D2L-Lisa-1
5321: PPUSH
5322: CALL_OW 94
// dec1 = query ( Q1 ) ;
5326: LD_ADDR_VAR 0 1
5330: PUSH
5331: LD_STRING Q1
5333: PPUSH
5334: CALL_OW 97
5338: ST_TO_ADDR
// if dec1 = 1 then
5339: LD_VAR 0 1
5343: PUSH
5344: LD_INT 1
5346: EQUAL
5347: IFFALSE 5613
// begin ComExitVehicle ( JMM ) ;
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5358: LD_EXP 1
5362: PPUSH
5363: LD_STRING D2L-JMM-1
5365: PPUSH
5366: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5370: LD_EXP 3
5374: PPUSH
5375: LD_STRING D2L-Lisa-2
5377: PPUSH
5378: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5382: LD_EXP 1
5386: PPUSH
5387: LD_STRING D2L-JMM-2
5389: PPUSH
5390: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5394: LD_EXP 3
5398: PPUSH
5399: LD_STRING D2L-Lisa-3
5401: PPUSH
5402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5406: LD_EXP 5
5410: PPUSH
5411: LD_STRING DPowell-Pow-1
5413: PPUSH
5414: CALL_OW 94
// dec2 = query ( Q2L ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_STRING Q2L
5425: PPUSH
5426: CALL_OW 97
5430: ST_TO_ADDR
// if dec2 = 1 then
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5505
// begin Say ( JMM , D2La-JMM-1 ) ;
5441: LD_EXP 1
5445: PPUSH
5446: LD_STRING D2La-JMM-1
5448: PPUSH
5449: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5453: LD_EXP 3
5457: PPUSH
5458: LD_STRING D2La-Lisa-1
5460: PPUSH
5461: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5465: LD_EXP 1
5469: PPUSH
5470: LD_STRING D2La-JMM-2
5472: PPUSH
5473: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5477: LD_EXP 3
5481: PPUSH
5482: LD_STRING D2La-Lisa-2
5484: PPUSH
5485: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5489: LD_EXP 1
5493: PPUSH
5494: LD_STRING D2La-JMM-3
5496: PPUSH
5497: CALL_OW 88
// InGameOff ;
5501: CALL_OW 9
// end ; if dec2 = 2 then
5505: LD_VAR 0 2
5509: PUSH
5510: LD_INT 2
5512: EQUAL
5513: IFFALSE 5577
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5515: LD_EXP 1
5519: PPUSH
5520: LD_STRING D2Lb-JMM-1
5522: PPUSH
5523: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5527: LD_EXP 3
5531: PPUSH
5532: LD_STRING D2Lb-Lisa-1
5534: PPUSH
5535: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5539: LD_EXP 1
5543: PPUSH
5544: LD_STRING D2Lb-JMM-2
5546: PPUSH
5547: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5551: LD_EXP 3
5555: PPUSH
5556: LD_STRING D2Lb-Lisa-2
5558: PPUSH
5559: CALL_OW 94
// fastEnd = 1 ;
5563: LD_ADDR_EXP 15
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// FinishMission ;
5571: CALL 9146 0 0
// exit ;
5575: GO 5874
// end ; if dec2 = 3 then
5577: LD_VAR 0 2
5581: PUSH
5582: LD_INT 3
5584: EQUAL
5585: IFFALSE 5613
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5587: LD_EXP 3
5591: PPUSH
5592: LD_STRING D2Lc-Lisa-1
5594: PPUSH
5595: CALL_OW 94
// fastEnd = 1 ;
5599: LD_ADDR_EXP 15
5603: PUSH
5604: LD_INT 1
5606: ST_TO_ADDR
// FinishMission ;
5607: CALL 9146 0 0
// exit ;
5611: GO 5874
// end ; end ; if dec1 = 2 then
5613: LD_VAR 0 1
5617: PUSH
5618: LD_INT 2
5620: EQUAL
5621: IFFALSE 5637
// begin fastEnd = 1 ;
5623: LD_ADDR_EXP 15
5627: PUSH
5628: LD_INT 1
5630: ST_TO_ADDR
// FinishMission ;
5631: CALL 9146 0 0
// exit ;
5635: GO 5874
// end ; end ; if JMMGirl = 3 then
5637: LD_EXP 7
5641: PUSH
5642: LD_INT 3
5644: EQUAL
5645: IFFALSE 5874
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5647: LD_EXP 4
5651: PPUSH
5652: LD_STRING D2X-Con-1
5654: PPUSH
5655: CALL_OW 94
// dec1 = query ( Q1 ) ;
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_STRING Q1
5666: PPUSH
5667: CALL_OW 97
5671: ST_TO_ADDR
// if dec1 = 1 then
5672: LD_VAR 0 1
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: IFFALSE 5850
// begin ComExitVehicle ( JMM ) ;
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_STRING D2X-JMM-1
5698: PPUSH
5699: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5703: LD_EXP 4
5707: PPUSH
5708: LD_STRING D2X-Con-2
5710: PPUSH
5711: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5715: LD_EXP 5
5719: PPUSH
5720: LD_STRING DPowell-Pow-1
5722: PPUSH
5723: CALL_OW 94
// dec2 = query ( Q2X ) ;
5727: LD_ADDR_VAR 0 2
5731: PUSH
5732: LD_STRING Q2X
5734: PPUSH
5735: CALL_OW 97
5739: ST_TO_ADDR
// if dec2 = 1 then
5740: LD_VAR 0 2
5744: PUSH
5745: LD_INT 1
5747: EQUAL
5748: IFFALSE 5766
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5750: LD_EXP 1
5754: PPUSH
5755: LD_STRING D2Xa-JMM-1
5757: PPUSH
5758: CALL_OW 88
// InGameOff ;
5762: CALL_OW 9
// end ; if dec2 = 2 then
5766: LD_VAR 0 2
5770: PUSH
5771: LD_INT 2
5773: EQUAL
5774: IFFALSE 5814
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING D2Xb-JMM-1
5783: PPUSH
5784: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5788: LD_EXP 4
5792: PPUSH
5793: LD_STRING D2Xb-Con-1
5795: PPUSH
5796: CALL_OW 94
// fastEnd = 1 ;
5800: LD_ADDR_EXP 15
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// FinishMission ;
5808: CALL 9146 0 0
// exit ;
5812: GO 5874
// end ; if dec2 = 3 then
5814: LD_VAR 0 2
5818: PUSH
5819: LD_INT 3
5821: EQUAL
5822: IFFALSE 5850
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5824: LD_EXP 4
5828: PPUSH
5829: LD_STRING D2Xc-Con-1
5831: PPUSH
5832: CALL_OW 94
// fastEnd = 1 ;
5836: LD_ADDR_EXP 15
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// FinishMission ;
5844: CALL 9146 0 0
// exit ;
5848: GO 5874
// end ; end ; if dec1 = 2 then
5850: LD_VAR 0 1
5854: PUSH
5855: LD_INT 2
5857: EQUAL
5858: IFFALSE 5874
// begin fastEnd = 1 ;
5860: LD_ADDR_EXP 15
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// FinishMission ;
5868: CALL 9146 0 0
// exit ;
5872: GO 5874
// end ; end ; end ;
5874: PPOPN 2
5876: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5877: LD_EXP 1
5881: PPUSH
5882: LD_INT 6
5884: PPUSH
5885: CALL_OW 308
5889: IFFALSE 6631
5891: GO 5893
5893: DISABLE
// begin InGameOn ;
5894: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5898: LD_INT 35
5900: PPUSH
5901: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5905: LD_EXP 1
5909: PPUSH
5910: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5914: LD_EXP 1
5918: PPUSH
5919: LD_INT 62
5921: PPUSH
5922: LD_INT 104
5924: PPUSH
5925: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5929: LD_EXP 1
5933: PPUSH
5934: LD_EXP 2
5938: PPUSH
5939: CALL_OW 296
5943: PUSH
5944: LD_INT 4
5946: LESS
5947: PUSH
5948: LD_EXP 1
5952: PPUSH
5953: LD_EXP 3
5957: PPUSH
5958: CALL_OW 296
5962: PUSH
5963: LD_INT 4
5965: LESS
5966: OR
5967: PUSH
5968: LD_EXP 1
5972: PPUSH
5973: LD_EXP 4
5977: PPUSH
5978: CALL_OW 296
5982: PUSH
5983: LD_INT 4
5985: LESS
5986: OR
5987: IFFALSE 5898
// case JMMGirl of 1 :
5989: LD_EXP 7
5993: PUSH
5994: LD_INT 1
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6002
6000: GO 6214
6002: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6003: LD_INT 22
6005: PUSH
6006: LD_INT 4
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL_OW 69
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6025: LD_EXP 2
6029: PPUSH
6030: LD_EXP 1
6034: PPUSH
6035: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6039: LD_EXP 1
6043: PPUSH
6044: LD_EXP 2
6048: PPUSH
6049: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6053: LD_EXP 2
6057: PUSH
6058: LD_EXP 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 87
// wait ( 0 0$1 ) ;
6071: LD_INT 35
6073: PPUSH
6074: CALL_OW 67
// DialogueOn ;
6078: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6082: LD_EXP 2
6086: PPUSH
6087: LD_STRING D3J-Joan-1
6089: PPUSH
6090: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6094: LD_EXP 1
6098: PPUSH
6099: LD_STRING D3J-JMM-1
6101: PPUSH
6102: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6106: LD_EXP 2
6110: PPUSH
6111: LD_STRING D3J-Joan-2
6113: PPUSH
6114: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_STRING D3J-JMM-2
6125: PPUSH
6126: CALL_OW 88
// wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D4-JMM-1
6144: PPUSH
6145: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6149: LD_EXP 2
6153: PPUSH
6154: LD_STRING D4-Joan-1
6156: PPUSH
6157: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6161: LD_EXP 1
6165: PPUSH
6166: LD_STRING D4-JMM-2
6168: PPUSH
6169: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6173: LD_EXP 2
6177: PPUSH
6178: LD_STRING D4-Joan-2
6180: PPUSH
6181: CALL_OW 88
// DialogueOff ;
6185: CALL_OW 7
// InGameOff ;
6189: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6193: LD_STRING M2J
6195: PPUSH
6196: CALL_OW 337
// SaveForQuickRestart ;
6200: CALL_OW 22
// russianAI = 1 ;
6204: LD_ADDR_EXP 13
6208: PUSH
6209: LD_INT 1
6211: ST_TO_ADDR
// end ; 2 :
6212: GO 6631
6214: LD_INT 2
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6222
6220: GO 6434
6222: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6223: LD_INT 22
6225: PUSH
6226: LD_INT 4
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 69
6237: PPUSH
6238: LD_INT 1
6240: PPUSH
6241: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6245: LD_EXP 3
6249: PPUSH
6250: LD_EXP 1
6254: PPUSH
6255: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6259: LD_EXP 1
6263: PPUSH
6264: LD_EXP 3
6268: PPUSH
6269: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6273: LD_EXP 3
6277: PUSH
6278: LD_EXP 1
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 87
// wait ( 0 0$1 ) ;
6291: LD_INT 35
6293: PPUSH
6294: CALL_OW 67
// DialogueOn ;
6298: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6302: LD_EXP 3
6306: PPUSH
6307: LD_STRING D3L-Lisa-1
6309: PPUSH
6310: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6314: LD_EXP 1
6318: PPUSH
6319: LD_STRING D3L-JMM-1
6321: PPUSH
6322: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6326: LD_EXP 3
6330: PPUSH
6331: LD_STRING D3L-Lisa-2
6333: PPUSH
6334: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING D3L-JMM-2
6345: PPUSH
6346: CALL_OW 88
// wait ( 0 0$1 ) ;
6350: LD_INT 35
6352: PPUSH
6353: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6357: LD_EXP 1
6361: PPUSH
6362: LD_STRING D4-JMM-1
6364: PPUSH
6365: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6369: LD_EXP 3
6373: PPUSH
6374: LD_STRING D4-Lisa-1
6376: PPUSH
6377: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6381: LD_EXP 1
6385: PPUSH
6386: LD_STRING D4-JMM-1
6388: PPUSH
6389: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6393: LD_EXP 3
6397: PPUSH
6398: LD_STRING D4-Lisa-2
6400: PPUSH
6401: CALL_OW 88
// DialogueOff ;
6405: CALL_OW 7
// InGameOff ;
6409: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6413: LD_STRING M2L
6415: PPUSH
6416: CALL_OW 337
// SaveForQuickRestart ;
6420: CALL_OW 22
// russianAI = 1 ;
6424: LD_ADDR_EXP 13
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// end ; 3 :
6432: GO 6631
6434: LD_INT 3
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6630
6442: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6443: LD_INT 22
6445: PUSH
6446: LD_INT 4
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6465: LD_EXP 4
6469: PPUSH
6470: LD_EXP 1
6474: PPUSH
6475: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_EXP 4
6488: PPUSH
6489: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6493: LD_EXP 2
6497: PUSH
6498: LD_EXP 1
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 87
// wait ( 0 0$1 ) ;
6511: LD_INT 35
6513: PPUSH
6514: CALL_OW 67
// DialogueOn ;
6518: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6522: LD_EXP 4
6526: PPUSH
6527: LD_STRING D3X-Con-1
6529: PPUSH
6530: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6534: LD_EXP 1
6538: PPUSH
6539: LD_STRING D3J-JMM-1
6541: PPUSH
6542: CALL_OW 88
// wait ( 0 0$1 ) ;
6546: LD_INT 35
6548: PPUSH
6549: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6553: LD_EXP 1
6557: PPUSH
6558: LD_STRING D4-JMM-1
6560: PPUSH
6561: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6565: LD_EXP 4
6569: PPUSH
6570: LD_STRING D4-Con-1
6572: PPUSH
6573: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6577: LD_EXP 1
6581: PPUSH
6582: LD_STRING D4-JMM-2
6584: PPUSH
6585: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6589: LD_EXP 4
6593: PPUSH
6594: LD_STRING D4-Con-2
6596: PPUSH
6597: CALL_OW 88
// DialogueOff ;
6601: CALL_OW 7
// InGameOff ;
6605: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6609: LD_STRING M2X
6611: PPUSH
6612: CALL_OW 337
// SaveForQuickRestart ;
6616: CALL_OW 22
// russianAI = 1 ;
6620: LD_ADDR_EXP 13
6624: PUSH
6625: LD_INT 1
6627: ST_TO_ADDR
// end ; end ;
6628: GO 6631
6630: POP
// end ;
6631: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6632: LD_INT 32
6634: PPUSH
6635: CALL_OW 306
6639: IFFALSE 6972
6641: GO 6643
6643: DISABLE
// begin case JMMGirl of 1 :
6644: LD_EXP 7
6648: PUSH
6649: LD_INT 1
6651: DOUBLE
6652: EQUAL
6653: IFTRUE 6657
6655: GO 6779
6657: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6658: LD_EXP 1
6662: PPUSH
6663: LD_STRING D6J-JMM-1
6665: PPUSH
6666: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6670: LD_STRING 13f_Denis
6672: PPUSH
6673: CALL_OW 28
6677: PUSH
6678: LD_INT 1
6680: EQUAL
6681: PUSH
6682: LD_STRING 13s_Denis
6684: PPUSH
6685: CALL_OW 28
6689: PUSH
6690: LD_INT 1
6692: EQUAL
6693: OR
6694: IFFALSE 6734
// begin Say ( Joan , D6J-Joan-1 ) ;
6696: LD_EXP 2
6700: PPUSH
6701: LD_STRING D6J-Joan-1
6703: PPUSH
6704: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6708: LD_EXP 1
6712: PPUSH
6713: LD_STRING D6J-JMM-2
6715: PPUSH
6716: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6720: LD_EXP 2
6724: PPUSH
6725: LD_STRING D6J-Joan-2
6727: PPUSH
6728: CALL_OW 88
// end else
6732: GO 6746
// begin Say ( Joan , D6J-Joan-2a ) ;
6734: LD_EXP 2
6738: PPUSH
6739: LD_STRING D6J-Joan-2a
6741: PPUSH
6742: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6746: LD_EXP 1
6750: PPUSH
6751: LD_STRING D6J-JMM-3
6753: PPUSH
6754: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6758: LD_EXP 2
6762: PPUSH
6763: LD_STRING D6J-Joan-3
6765: PPUSH
6766: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6770: LD_STRING M3
6772: PPUSH
6773: CALL_OW 337
// end ; 2 :
6777: GO 6972
6779: LD_INT 2
6781: DOUBLE
6782: EQUAL
6783: IFTRUE 6787
6785: GO 6845
6787: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6788: LD_EXP 1
6792: PPUSH
6793: LD_STRING D6L-JMM-1
6795: PPUSH
6796: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6800: LD_EXP 3
6804: PPUSH
6805: LD_STRING D6L-Lisa-1
6807: PPUSH
6808: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6812: LD_EXP 1
6816: PPUSH
6817: LD_STRING D6L-JMM-2
6819: PPUSH
6820: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6824: LD_EXP 3
6828: PPUSH
6829: LD_STRING D6L-Lisa-2
6831: PPUSH
6832: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6836: LD_STRING M3
6838: PPUSH
6839: CALL_OW 337
// end ; 3 :
6843: GO 6972
6845: LD_INT 3
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6971
6853: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6854: LD_EXP 1
6858: PPUSH
6859: LD_STRING D6X-JMM-1
6861: PPUSH
6862: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6866: LD_EXP 4
6870: PPUSH
6871: LD_STRING D6X-Con-1
6873: PPUSH
6874: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6878: LD_EXP 1
6882: PPUSH
6883: LD_STRING D6X-JMM-2
6885: PPUSH
6886: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6890: LD_EXP 4
6894: PPUSH
6895: LD_STRING D6X-Con-2
6897: PPUSH
6898: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6902: LD_EXP 1
6906: PPUSH
6907: LD_STRING D6X-JMM-3
6909: PPUSH
6910: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6914: LD_EXP 4
6918: PPUSH
6919: LD_STRING D6X-Con-3
6921: PPUSH
6922: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6926: LD_EXP 1
6930: PPUSH
6931: LD_STRING D6X-JMM-4
6933: PPUSH
6934: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6938: LD_EXP 4
6942: PPUSH
6943: LD_STRING D6X-Con-4
6945: PPUSH
6946: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_STRING D6X-JMM-5
6957: PPUSH
6958: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6962: LD_STRING M3
6964: PPUSH
6965: CALL_OW 337
// end ; end ;
6969: GO 6972
6971: POP
// end ;
6972: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6973: LD_INT 22
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 33
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: PPUSH
7002: CALL_OW 306
7006: IFFALSE 7152
7008: GO 7010
7010: DISABLE
// begin case JMMGirl of 1 :
7011: LD_EXP 7
7015: PUSH
7016: LD_INT 1
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7061
7024: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7025: LD_EXP 1
7029: PPUSH
7030: LD_STRING D5-JMM-1
7032: PPUSH
7033: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7037: LD_INT 77
7039: PPUSH
7040: LD_INT 87
7042: PPUSH
7043: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7047: LD_EXP 2
7051: PPUSH
7052: LD_STRING D5-Joan-1
7054: PPUSH
7055: CALL_OW 88
// end ; 2 :
7059: GO 7152
7061: LD_INT 2
7063: DOUBLE
7064: EQUAL
7065: IFTRUE 7069
7067: GO 7106
7069: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7070: LD_EXP 1
7074: PPUSH
7075: LD_STRING D5-JMM-1
7077: PPUSH
7078: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7082: LD_INT 77
7084: PPUSH
7085: LD_INT 87
7087: PPUSH
7088: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7092: LD_EXP 3
7096: PPUSH
7097: LD_STRING D5-Lisa-1
7099: PPUSH
7100: CALL_OW 88
// end ; 3 :
7104: GO 7152
7106: LD_INT 3
7108: DOUBLE
7109: EQUAL
7110: IFTRUE 7114
7112: GO 7151
7114: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7115: LD_EXP 1
7119: PPUSH
7120: LD_STRING D5-JMM-1
7122: PPUSH
7123: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7127: LD_INT 77
7129: PPUSH
7130: LD_INT 87
7132: PPUSH
7133: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7137: LD_EXP 4
7141: PPUSH
7142: LD_STRING D5-Con-1
7144: PPUSH
7145: CALL_OW 88
// end ; end ;
7149: GO 7152
7151: POP
// end ;
7152: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7153: LD_INT 48
7155: PPUSH
7156: CALL_OW 255
7160: PUSH
7161: LD_INT 1
7163: EQUAL
7164: IFFALSE 7261
7166: GO 7168
7168: DISABLE
// begin DialogueOn ;
7169: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7173: LD_EXP 5
7177: PPUSH
7178: LD_STRING D7-Pow-1
7180: PPUSH
7181: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7185: LD_EXP 1
7189: PPUSH
7190: LD_STRING D7-JMM-1
7192: PPUSH
7193: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7197: LD_EXP 5
7201: PPUSH
7202: LD_STRING D7-Pow-2
7204: PPUSH
7205: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7209: LD_EXP 1
7213: PPUSH
7214: LD_STRING D7-JMM-2
7216: PPUSH
7217: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7221: LD_EXP 5
7225: PPUSH
7226: LD_STRING D7-Pow-3
7228: PPUSH
7229: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7233: LD_EXP 1
7237: PPUSH
7238: LD_STRING D7-JMM-3
7240: PPUSH
7241: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7245: LD_EXP 5
7249: PPUSH
7250: LD_STRING D7-Pow-4
7252: PPUSH
7253: CALL_OW 94
// DialogueOff ;
7257: CALL_OW 7
// end ; end_of_file
7261: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7262: LD_VAR 0 1
7266: PPUSH
7267: CALL_OW 255
7271: PUSH
7272: LD_INT 3
7274: EQUAL
7275: IFFALSE 7349
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7277: LD_ADDR_EXP 10
7281: PUSH
7282: LD_EXP 10
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: CALL_OW 3
7294: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7295: LD_ADDR_EXP 10
7299: PUSH
7300: LD_EXP 10
7304: PPUSH
7305: LD_INT 1
7307: PPUSH
7308: CALL_OW 3
7312: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7313: LD_ADDR_EXP 10
7317: PUSH
7318: LD_EXP 10
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 3
7330: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7331: LD_ADDR_EXP 10
7335: PUSH
7336: LD_EXP 10
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 3
7348: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7349: LD_VAR 0 1
7353: PPUSH
7354: CALL_OW 255
7358: PUSH
7359: LD_INT 3
7361: EQUAL
7362: PUSH
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 266
7372: PUSH
7373: LD_INT 0
7375: EQUAL
7376: PUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 266
7386: PUSH
7387: LD_INT 2
7389: EQUAL
7390: OR
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 266
7401: PUSH
7402: LD_INT 4
7404: EQUAL
7405: OR
7406: PUSH
7407: EMPTY
7408: LIST
7409: AND
7410: IFFALSE 7421
// ComUpgrade ( building ) ;
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7421: LD_VAR 0 1
7425: PPUSH
7426: CALL_OW 255
7430: PUSH
7431: LD_INT 3
7433: EQUAL
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 266
7444: PUSH
7445: LD_INT 32
7447: EQUAL
7448: AND
7449: IFFALSE 7490
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 42
7458: PUSH
7459: LD_INT 43
7461: PUSH
7462: LD_INT 44
7464: PUSH
7465: LD_INT 46
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 4
7479: PPUSH
7480: CALL_OW 12
7484: ARRAY
7485: PPUSH
7486: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 255
7499: PUSH
7500: LD_INT 3
7502: EQUAL
7503: PUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 266
7513: PUSH
7514: LD_INT 33
7516: EQUAL
7517: AND
7518: IFFALSE 7559
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7520: LD_VAR 0 1
7524: PPUSH
7525: LD_INT 42
7527: PUSH
7528: LD_INT 43
7530: PUSH
7531: LD_INT 44
7533: PUSH
7534: LD_INT 46
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 4
7548: PPUSH
7549: CALL_OW 12
7553: ARRAY
7554: PPUSH
7555: CALL_OW 208
// end ;
7559: PPOPN 1
7561: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 255
7571: PUSH
7572: LD_INT 3
7574: EQUAL
7575: PUSH
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 247
7585: PUSH
7586: LD_INT 3
7588: EQUAL
7589: AND
7590: IFFALSE 8282
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7592: LD_VAR 0 1
7596: PPUSH
7597: CALL_OW 266
7601: PUSH
7602: LD_INT 31
7604: EQUAL
7605: PUSH
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 266
7615: PUSH
7616: LD_INT 32
7618: EQUAL
7619: OR
7620: PUSH
7621: LD_VAR 0 1
7625: PPUSH
7626: CALL_OW 266
7630: PUSH
7631: LD_INT 36
7633: EQUAL
7634: OR
7635: PUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 266
7645: PUSH
7646: LD_INT 0
7648: EQUAL
7649: OR
7650: PUSH
7651: LD_VAR 0 1
7655: PPUSH
7656: CALL_OW 266
7660: PUSH
7661: LD_INT 24
7663: EQUAL
7664: OR
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 266
7675: PUSH
7676: LD_INT 17
7678: EQUAL
7679: OR
7680: PUSH
7681: LD_VAR 0 1
7685: PPUSH
7686: CALL_OW 266
7690: PUSH
7691: LD_INT 25
7693: EQUAL
7694: OR
7695: PUSH
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 266
7705: PUSH
7706: LD_INT 19
7708: EQUAL
7709: OR
7710: PUSH
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 266
7720: PUSH
7721: LD_INT 20
7723: EQUAL
7724: OR
7725: PUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: CALL_OW 266
7735: PUSH
7736: LD_INT 18
7738: EQUAL
7739: OR
7740: PUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 266
7750: PUSH
7751: LD_INT 21
7753: EQUAL
7754: OR
7755: PUSH
7756: LD_VAR 0 1
7760: PPUSH
7761: CALL_OW 266
7765: PUSH
7766: LD_INT 23
7768: EQUAL
7769: OR
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_INT 16
7783: EQUAL
7784: OR
7785: PUSH
7786: LD_VAR 0 1
7790: PPUSH
7791: CALL_OW 266
7795: PUSH
7796: LD_INT 6
7798: EQUAL
7799: OR
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_INT 29
7813: EQUAL
7814: OR
7815: PUSH
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 266
7825: PUSH
7826: LD_INT 26
7828: EQUAL
7829: OR
7830: PUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 266
7840: PUSH
7841: LD_INT 30
7843: EQUAL
7844: OR
7845: PUSH
7846: LD_VAR 0 1
7850: PPUSH
7851: CALL_OW 266
7855: PUSH
7856: LD_INT 28
7858: EQUAL
7859: OR
7860: PUSH
7861: LD_VAR 0 1
7865: PPUSH
7866: CALL_OW 266
7870: PUSH
7871: LD_INT 27
7873: EQUAL
7874: OR
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PUSH
7886: LD_INT 33
7888: EQUAL
7889: OR
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 2
7903: EQUAL
7904: OR
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 266
7915: PUSH
7916: LD_INT 4
7918: EQUAL
7919: OR
7920: IFFALSE 8006
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7922: LD_ADDR_EXP 10
7926: PUSH
7927: LD_EXP 10
7931: PUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 266
7941: ADD
7942: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7943: LD_ADDR_EXP 10
7947: PUSH
7948: LD_EXP 10
7952: PUSH
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 250
7962: ADD
7963: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7964: LD_ADDR_EXP 10
7968: PUSH
7969: LD_EXP 10
7973: PUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: CALL_OW 251
7983: ADD
7984: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7985: LD_ADDR_EXP 10
7989: PUSH
7990: LD_EXP 10
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 254
8004: ADD
8005: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 266
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: IFFALSE 8098
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8021: LD_ADDR_EXP 10
8025: PUSH
8026: LD_EXP 10
8030: PUSH
8031: LD_INT 0
8033: ADD
8034: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8035: LD_ADDR_EXP 10
8039: PUSH
8040: LD_EXP 10
8044: PUSH
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 250
8054: ADD
8055: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8056: LD_ADDR_EXP 10
8060: PUSH
8061: LD_EXP 10
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 251
8075: ADD
8076: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8077: LD_ADDR_EXP 10
8081: PUSH
8082: LD_EXP 10
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 254
8096: ADD
8097: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 266
8107: PUSH
8108: LD_INT 3
8110: EQUAL
8111: IFFALSE 8190
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8113: LD_ADDR_EXP 10
8117: PUSH
8118: LD_EXP 10
8122: PUSH
8123: LD_INT 2
8125: ADD
8126: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8127: LD_ADDR_EXP 10
8131: PUSH
8132: LD_EXP 10
8136: PUSH
8137: LD_VAR 0 1
8141: PPUSH
8142: CALL_OW 250
8146: ADD
8147: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8148: LD_ADDR_EXP 10
8152: PUSH
8153: LD_EXP 10
8157: PUSH
8158: LD_VAR 0 1
8162: PPUSH
8163: CALL_OW 251
8167: ADD
8168: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8169: LD_ADDR_EXP 10
8173: PUSH
8174: LD_EXP 10
8178: PUSH
8179: LD_VAR 0 1
8183: PPUSH
8184: CALL_OW 254
8188: ADD
8189: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8190: LD_VAR 0 1
8194: PPUSH
8195: CALL_OW 266
8199: PUSH
8200: LD_INT 5
8202: EQUAL
8203: IFFALSE 8282
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8205: LD_ADDR_EXP 10
8209: PUSH
8210: LD_EXP 10
8214: PUSH
8215: LD_INT 4
8217: ADD
8218: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8219: LD_ADDR_EXP 10
8223: PUSH
8224: LD_EXP 10
8228: PUSH
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 250
8238: ADD
8239: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8240: LD_ADDR_EXP 10
8244: PUSH
8245: LD_EXP 10
8249: PUSH
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 251
8259: ADD
8260: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8261: LD_ADDR_EXP 10
8265: PUSH
8266: LD_EXP 10
8270: PUSH
8271: LD_VAR 0 1
8275: PPUSH
8276: CALL_OW 254
8280: ADD
8281: ST_TO_ADDR
// end ; end ; end ;
8282: PPOPN 1
8284: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 1
8292: EQUAL
8293: PUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 40
8301: EQUAL
8302: OR
8303: IFFALSE 8427
// if GetSide ( vehicle ) = 3 then
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL_OW 255
8314: PUSH
8315: LD_INT 3
8317: EQUAL
8318: IFFALSE 8427
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 264
8329: PUSH
8330: LD_INT 47
8332: EQUAL
8333: PUSH
8334: LD_VAR 0 1
8338: PPUSH
8339: CALL_OW 264
8343: PUSH
8344: LD_INT 46
8346: EQUAL
8347: OR
8348: PUSH
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL_OW 264
8358: PUSH
8359: LD_INT 45
8361: EQUAL
8362: OR
8363: PUSH
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 264
8373: PUSH
8374: LD_INT 44
8376: EQUAL
8377: OR
8378: IFFALSE 8396
// russianTanks = russianTanks ^ vehicle ;
8380: LD_ADDR_EXP 11
8384: PUSH
8385: LD_EXP 11
8389: PUSH
8390: LD_VAR 0 1
8394: ADD
8395: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 264
8405: PUSH
8406: LD_INT 49
8408: EQUAL
8409: IFFALSE 8427
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8411: LD_ADDR_EXP 12
8415: PUSH
8416: LD_EXP 12
8420: PUSH
8421: LD_VAR 0 1
8425: ADD
8426: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 255
8436: PUSH
8437: LD_INT 1
8439: EQUAL
8440: PUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 264
8450: PUSH
8451: LD_INT 10
8453: EQUAL
8454: AND
8455: IFFALSE 8471
// amLaserCounter = amLaserCounter + 1 ;
8457: LD_ADDR_EXP 9
8461: PUSH
8462: LD_EXP 9
8466: PUSH
8467: LD_INT 1
8469: PLUS
8470: ST_TO_ADDR
// end ;
8471: PPOPN 2
8473: END
// on UnitGoesToRed ( unit ) do var i ;
8474: LD_INT 0
8476: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 255
8486: PUSH
8487: LD_INT 3
8489: EQUAL
8490: PUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: CALL_OW 247
8500: PUSH
8501: LD_INT 2
8503: EQUAL
8504: AND
8505: IFFALSE 8617
// begin if russianTanks > 0 then
8507: LD_EXP 11
8511: PUSH
8512: LD_INT 0
8514: GREATER
8515: IFFALSE 8562
// for i in russianTanks do
8517: LD_ADDR_VAR 0 2
8521: PUSH
8522: LD_EXP 11
8526: PUSH
8527: FOR_IN
8528: IFFALSE 8560
// if i = unit then
8530: LD_VAR 0 2
8534: PUSH
8535: LD_VAR 0 1
8539: EQUAL
8540: IFFALSE 8558
// russianTanks = russianTanks diff unit ;
8542: LD_ADDR_EXP 11
8546: PUSH
8547: LD_EXP 11
8551: PUSH
8552: LD_VAR 0 1
8556: DIFF
8557: ST_TO_ADDR
8558: GO 8527
8560: POP
8561: POP
// if russianTimeLapsers > 0 then
8562: LD_EXP 12
8566: PUSH
8567: LD_INT 0
8569: GREATER
8570: IFFALSE 8617
// for i in russianTimeLapsers do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_EXP 12
8581: PUSH
8582: FOR_IN
8583: IFFALSE 8615
// if i = unit then
8585: LD_VAR 0 2
8589: PUSH
8590: LD_VAR 0 1
8594: EQUAL
8595: IFFALSE 8613
// russianTimeLapsers = russianTimeLapsers diff unit ;
8597: LD_ADDR_EXP 12
8601: PUSH
8602: LD_EXP 12
8606: PUSH
8607: LD_VAR 0 1
8611: DIFF
8612: ST_TO_ADDR
8613: GO 8582
8615: POP
8616: POP
// end ; end ;
8617: PPOPN 2
8619: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL 10417 0 1
// end ; end_of_file
8629: PPOPN 1
8631: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8632: LD_EXP 1
8636: PPUSH
8637: CALL_OW 310
8641: PPUSH
8642: LD_INT 12
8644: PPUSH
8645: CALL_OW 308
8649: PUSH
8650: LD_EXP 15
8654: PUSH
8655: LD_INT 0
8657: EQUAL
8658: AND
8659: IFFALSE 9005
8661: GO 8663
8663: DISABLE
8664: LD_INT 0
8666: PPUSH
8667: PPUSH
// begin enable ;
8668: ENABLE
// if JMMGirl = 1 then
8669: LD_EXP 7
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: IFFALSE 8694
// JMMGirlVeh = IsInUnit ( Joan ) ;
8679: LD_ADDR_VAR 0 1
8683: PUSH
8684: LD_EXP 2
8688: PPUSH
8689: CALL_OW 310
8693: ST_TO_ADDR
// if JMMGirl = 2 then
8694: LD_EXP 7
8698: PUSH
8699: LD_INT 2
8701: EQUAL
8702: IFFALSE 8719
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_EXP 3
8713: PPUSH
8714: CALL_OW 310
8718: ST_TO_ADDR
// if JMMGirl = 3 then
8719: LD_EXP 7
8723: PUSH
8724: LD_INT 3
8726: EQUAL
8727: IFFALSE 8744
// JMMGirlVeh = IsInUnit ( Connie ) ;
8729: LD_ADDR_VAR 0 1
8733: PUSH
8734: LD_EXP 4
8738: PPUSH
8739: CALL_OW 310
8743: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 310
8753: PPUSH
8754: LD_EXP 2
8758: PPUSH
8759: CALL_OW 310
8763: PPUSH
8764: CALL_OW 296
8768: PUSH
8769: LD_INT 10
8771: LESS
8772: PUSH
8773: LD_EXP 1
8777: PPUSH
8778: CALL_OW 310
8782: PPUSH
8783: LD_EXP 3
8787: PPUSH
8788: CALL_OW 310
8792: PPUSH
8793: CALL_OW 296
8797: PUSH
8798: LD_INT 10
8800: LESS
8801: OR
8802: PUSH
8803: LD_EXP 1
8807: PPUSH
8808: CALL_OW 310
8812: PPUSH
8813: LD_EXP 4
8817: PPUSH
8818: CALL_OW 310
8822: PPUSH
8823: CALL_OW 296
8827: PUSH
8828: LD_INT 10
8830: LESS
8831: OR
8832: IFFALSE 8926
// begin case Query ( Q3b ) of 1 :
8834: LD_STRING Q3b
8836: PPUSH
8837: CALL_OW 97
8841: PUSH
8842: LD_INT 1
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 8923
8850: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL_OW 265
8860: PUSH
8861: EMPTY
8862: LIST
8863: PUSH
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 262
8873: PUSH
8874: EMPTY
8875: LIST
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 263
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 264
8899: PUSH
8900: EMPTY
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PPUSH
8909: LD_STRING 14_JMMGirlVeh_1
8911: PPUSH
8912: CALL_OW 39
// FinishMission ;
8916: CALL 9146 0 0
// disable ;
8920: DISABLE
// end ; end ;
8921: GO 8924
8923: POP
// end else
8924: GO 9005
// begin if JMMGirl = 1 then
8926: LD_EXP 7
8930: PUSH
8931: LD_INT 1
8933: EQUAL
8934: IFFALSE 8951
// dec := Query ( Q3bJ ) else
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_STRING Q3bJ
8943: PPUSH
8944: CALL_OW 97
8948: ST_TO_ADDR
8949: GO 8989
// if JMMGirl = 2 then
8951: LD_EXP 7
8955: PUSH
8956: LD_INT 2
8958: EQUAL
8959: IFFALSE 8976
// dec := Query ( Q3bL ) else
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_STRING Q3bL
8968: PPUSH
8969: CALL_OW 97
8973: ST_TO_ADDR
8974: GO 8989
// dec := Query ( Q3bX ) ;
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: LD_STRING Q3bX
8983: PPUSH
8984: CALL_OW 97
8988: ST_TO_ADDR
// if dec = 1 then
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 1
8996: EQUAL
8997: IFFALSE 9005
// begin FinishMission ;
8999: CALL 9146 0 0
// exit ;
9003: GO 9005
// end ; end ; end ;
9005: PPOPN 2
9007: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9008: LD_INT 22
9010: PUSH
9011: LD_INT 3
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 21
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: PUSH
9037: LD_INT 0
9039: EQUAL
9040: PUSH
9041: LD_EXP 15
9045: PUSH
9046: LD_INT 0
9048: EQUAL
9049: AND
9050: IFFALSE 9145
9052: GO 9054
9054: DISABLE
// begin DialogueOn ;
9055: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_STRING DEnd-JMM-1
9066: PPUSH
9067: CALL_OW 88
// if JMMGirl = 1 then
9071: LD_EXP 7
9075: PUSH
9076: LD_INT 1
9078: EQUAL
9079: IFFALSE 9093
// Say ( Joan , DEnd-Joan-1 ) ;
9081: LD_EXP 2
9085: PPUSH
9086: LD_STRING DEnd-Joan-1
9088: PPUSH
9089: CALL_OW 88
// if JMMGirl = 2 then
9093: LD_EXP 7
9097: PUSH
9098: LD_INT 2
9100: EQUAL
9101: IFFALSE 9115
// Say ( Lisa , DEnd-Lisa-1 ) ;
9103: LD_EXP 3
9107: PPUSH
9108: LD_STRING DEnd-Lisa-1
9110: PPUSH
9111: CALL_OW 88
// if JMMGirl = 3 then
9115: LD_EXP 7
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: IFFALSE 9137
// Say ( Connie , DEnd-Con-1 ) ;
9125: LD_EXP 4
9129: PPUSH
9130: LD_STRING DEnd-Con-1
9132: PPUSH
9133: CALL_OW 88
// DialogueOff ;
9137: CALL_OW 7
// FinishMission ;
9141: CALL 9146 0 0
// end ;
9145: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9146: LD_INT 0
9148: PPUSH
9149: PPUSH
9150: PPUSH
9151: PPUSH
9152: PPUSH
// m1 := false ;
9153: LD_ADDR_VAR 0 3
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// m2 := false ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// m3 := false ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9177: LD_EXP 1
9181: PPUSH
9182: LD_STRING 14_JMM
9184: PPUSH
9185: CALL_OW 38
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9189: LD_EXP 1
9193: PPUSH
9194: CALL_OW 310
9198: PUSH
9199: LD_EXP 1
9203: PPUSH
9204: CALL_OW 310
9208: PPUSH
9209: CALL_OW 247
9213: PUSH
9214: LD_INT 2
9216: EQUAL
9217: AND
9218: IFFALSE 9300
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9220: LD_ADDR_VAR 0 2
9224: PUSH
9225: LD_EXP 1
9229: PPUSH
9230: CALL_OW 310
9234: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9235: LD_VAR 0 2
9239: PPUSH
9240: CALL_OW 265
9244: PUSH
9245: EMPTY
9246: LIST
9247: PUSH
9248: LD_VAR 0 2
9252: PPUSH
9253: CALL_OW 262
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: LD_VAR 0 2
9265: PPUSH
9266: CALL_OW 263
9270: PUSH
9271: EMPTY
9272: LIST
9273: PUSH
9274: LD_VAR 0 2
9278: PPUSH
9279: CALL_OW 264
9283: PUSH
9284: EMPTY
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PPUSH
9293: LD_STRING 14_JMMVeh_1
9295: PPUSH
9296: CALL_OW 39
// end ; if fastEnd = 1 then
9300: LD_EXP 15
9304: PUSH
9305: LD_INT 1
9307: EQUAL
9308: IFFALSE 9397
// begin AddMedal ( fastend , - 1 ) ;
9310: LD_STRING fastend
9312: PPUSH
9313: LD_INT 1
9315: NEG
9316: PPUSH
9317: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9321: LD_STRING fastend
9323: PPUSH
9324: LD_INT 1
9326: NEG
9327: PPUSH
9328: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9332: LD_STRING fastend
9334: PPUSH
9335: LD_INT 1
9337: NEG
9338: PPUSH
9339: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9343: LD_EXP 7
9347: PPUSH
9348: LD_STRING 14_JMMGirl_1
9350: PPUSH
9351: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_STRING 14_JMMGirlStatus_1
9360: PPUSH
9361: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9365: LD_INT 0
9367: PPUSH
9368: LD_STRING 14_KappaStatus_1
9370: PPUSH
9371: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9375: LD_STRING Eliminate
9377: PPUSH
9378: CALL_OW 102
// RewardPeople ( JMM ) ;
9382: LD_EXP 1
9386: PPUSH
9387: CALL_OW 43
// YouWin ;
9391: CALL_OW 103
// exit ;
9395: GO 10222
// end ; if fastEnd = 0 then
9397: LD_EXP 15
9401: PUSH
9402: LD_INT 0
9404: EQUAL
9405: IFFALSE 10173
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9407: LD_INT 22
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 25
9422: PUSH
9423: LD_INT 12
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 3
9436: PUSH
9437: LD_INT 25
9439: PUSH
9440: LD_INT 16
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 69
9460: PPUSH
9461: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9465: LD_EXP 7
9469: PPUSH
9470: LD_STRING 14_JMMGirl_1
9472: PPUSH
9473: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9477: LD_INT 22
9479: PUSH
9480: LD_INT 3
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 21
9489: PUSH
9490: LD_INT 1
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PPUSH
9501: CALL_OW 69
9505: PUSH
9506: LD_INT 0
9508: EQUAL
9509: PUSH
9510: LD_INT 48
9512: PPUSH
9513: CALL_OW 255
9517: PUSH
9518: LD_INT 1
9520: EQUAL
9521: AND
9522: IFFALSE 9536
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9524: LD_INT 1
9526: PPUSH
9527: LD_STRING 14_KappaStatus_1
9529: PPUSH
9530: CALL_OW 39
9534: GO 9546
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9536: LD_INT 0
9538: PPUSH
9539: LD_STRING 14_KappaStatus_1
9541: PPUSH
9542: CALL_OW 39
// case JMMGirl of 1 :
9546: LD_EXP 7
9550: PUSH
9551: LD_INT 1
9553: DOUBLE
9554: EQUAL
9555: IFTRUE 9559
9557: GO 9715
9559: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9560: LD_EXP 2
9564: PPUSH
9565: CALL_OW 302
9569: PUSH
9570: LD_EXP 2
9574: PPUSH
9575: CALL_OW 255
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: AND
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: LD_INT 0
9616: EQUAL
9617: PUSH
9618: LD_EXP 1
9622: PPUSH
9623: CALL_OW 310
9627: PPUSH
9628: LD_EXP 2
9632: PPUSH
9633: CALL_OW 310
9637: PPUSH
9638: CALL_OW 296
9642: PUSH
9643: LD_INT 10
9645: LESS
9646: OR
9647: AND
9648: IFFALSE 9692
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9650: LD_INT 1
9652: PPUSH
9653: LD_STRING 14_JMMGirlStatus_1
9655: PPUSH
9656: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9660: LD_EXP 2
9664: PPUSH
9665: LD_STRING 14_Joan
9667: PPUSH
9668: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9672: LD_STRING protect
9674: PPUSH
9675: LD_INT 1
9677: PPUSH
9678: CALL_OW 101
// m1 := true ;
9682: LD_ADDR_VAR 0 3
9686: PUSH
9687: LD_INT 1
9689: ST_TO_ADDR
// end else
9690: GO 9713
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9692: LD_INT 0
9694: PPUSH
9695: LD_STRING 14_JMMGirlStatus_1
9697: PPUSH
9698: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9702: LD_STRING protect
9704: PPUSH
9705: LD_INT 1
9707: NEG
9708: PPUSH
9709: CALL_OW 101
// end ; end ; 2 :
9713: GO 10044
9715: LD_INT 2
9717: DOUBLE
9718: EQUAL
9719: IFTRUE 9723
9721: GO 9879
9723: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9724: LD_EXP 3
9728: PPUSH
9729: CALL_OW 302
9733: PUSH
9734: LD_EXP 3
9738: PPUSH
9739: CALL_OW 255
9743: PUSH
9744: LD_INT 1
9746: EQUAL
9747: AND
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 21
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: PUSH
9778: LD_INT 0
9780: EQUAL
9781: PUSH
9782: LD_EXP 1
9786: PPUSH
9787: CALL_OW 310
9791: PPUSH
9792: LD_EXP 3
9796: PPUSH
9797: CALL_OW 310
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 10
9809: LESS
9810: OR
9811: AND
9812: IFFALSE 9856
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9814: LD_INT 1
9816: PPUSH
9817: LD_STRING 14_JMMGirlStatus_1
9819: PPUSH
9820: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9824: LD_EXP 3
9828: PPUSH
9829: LD_STRING 14_Lisa
9831: PPUSH
9832: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9836: LD_STRING protect
9838: PPUSH
9839: LD_INT 1
9841: PPUSH
9842: CALL_OW 101
// m1 := true ;
9846: LD_ADDR_VAR 0 3
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// end else
9854: GO 9877
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9856: LD_INT 0
9858: PPUSH
9859: LD_STRING 14_JMMGirlStatus_1
9861: PPUSH
9862: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9866: LD_STRING protect
9868: PPUSH
9869: LD_INT 2
9871: NEG
9872: PPUSH
9873: CALL_OW 101
// end ; end ; 3 :
9877: GO 10044
9879: LD_INT 3
9881: DOUBLE
9882: EQUAL
9883: IFTRUE 9887
9885: GO 10043
9887: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9888: LD_EXP 4
9892: PPUSH
9893: CALL_OW 302
9897: PUSH
9898: LD_EXP 4
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: AND
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 21
9925: PUSH
9926: LD_INT 1
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: PUSH
9942: LD_INT 0
9944: EQUAL
9945: PUSH
9946: LD_EXP 1
9950: PPUSH
9951: CALL_OW 310
9955: PPUSH
9956: LD_EXP 4
9960: PPUSH
9961: CALL_OW 310
9965: PPUSH
9966: CALL_OW 296
9970: PUSH
9971: LD_INT 10
9973: LESS
9974: OR
9975: AND
9976: IFFALSE 10020
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9978: LD_INT 1
9980: PPUSH
9981: LD_STRING 14_JMMGirlStatus_1
9983: PPUSH
9984: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9988: LD_EXP 4
9992: PPUSH
9993: LD_STRING 14_Connie
9995: PPUSH
9996: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10000: LD_STRING protect
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 101
// m1 := true ;
10010: LD_ADDR_VAR 0 3
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// end else
10018: GO 10041
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10020: LD_INT 0
10022: PPUSH
10023: LD_STRING 14_JMMGirlStatus_1
10025: PPUSH
10026: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10030: LD_STRING protect
10032: PPUSH
10033: LD_INT 3
10035: NEG
10036: PPUSH
10037: CALL_OW 101
// end ; end ; end ;
10041: GO 10044
10043: POP
// if amLaserCounter >= 2 then
10044: LD_EXP 9
10048: PUSH
10049: LD_INT 2
10051: GREATEREQUAL
10052: IFFALSE 10074
// begin AddMedal ( double , 1 ) ;
10054: LD_STRING double
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 101
// m2 := true ;
10064: LD_ADDR_VAR 0 4
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// end else
10072: GO 10108
// begin if amLaserCounter = 1 then
10074: LD_EXP 9
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: IFFALSE 10097
// AddMedal ( double , - 2 ) else
10084: LD_STRING double
10086: PPUSH
10087: LD_INT 2
10089: NEG
10090: PPUSH
10091: CALL_OW 101
10095: GO 10108
// AddMedal ( double , - 1 ) ;
10097: LD_STRING double
10099: PPUSH
10100: LD_INT 1
10102: NEG
10103: PPUSH
10104: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10108: LD_INT 22
10110: PUSH
10111: LD_INT 3
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 1
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: PUSH
10137: LD_INT 0
10139: EQUAL
10140: IFFALSE 10162
// begin AddMedal ( base , 1 ) ;
10142: LD_STRING base
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 101
// m3 := true ;
10152: LD_ADDR_VAR 0 5
10156: PUSH
10157: LD_INT 1
10159: ST_TO_ADDR
// end else
10160: GO 10173
// AddMedal ( base , - 1 ) ;
10162: LD_STRING base
10164: PPUSH
10165: LD_INT 1
10167: NEG
10168: PPUSH
10169: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10173: LD_VAR 0 3
10177: PUSH
10178: LD_VAR 0 4
10182: AND
10183: PUSH
10184: LD_VAR 0 5
10188: AND
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 3
10197: EQUAL
10198: AND
10199: IFFALSE 10211
// SetAchievementEX ( ACH_AMER , 14 ) ;
10201: LD_STRING ACH_AMER
10203: PPUSH
10204: LD_INT 14
10206: PPUSH
10207: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10211: LD_STRING Eliminate
10213: PPUSH
10214: CALL_OW 102
// YouWin ;
10218: CALL_OW 103
// end ; end_of_file
10222: LD_VAR 0 1
10226: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10227: LD_EXP 1
10231: PPUSH
10232: CALL_OW 301
10236: IFFALSE 10248
10238: GO 10240
10240: DISABLE
// YouLost ( JMM ) ; end_of_file
10241: LD_STRING JMM
10243: PPUSH
10244: CALL_OW 104
10248: END
// every 1 1$0 do
10249: GO 10251
10251: DISABLE
// begin enable ;
10252: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10253: LD_INT 3
10255: PPUSH
10256: LD_INT 5
10258: PPUSH
10259: CALL_OW 12
10263: PPUSH
10264: LD_INT 13
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 55
// end ; end_of_file
10274: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10275: GO 10277
10277: DISABLE
// begin ru_radar := 98 ;
10278: LD_ADDR_EXP 17
10282: PUSH
10283: LD_INT 98
10285: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10286: LD_ADDR_EXP 18
10290: PUSH
10291: LD_INT 89
10293: ST_TO_ADDR
// us_hack := 99 ;
10294: LD_ADDR_EXP 19
10298: PUSH
10299: LD_INT 99
10301: ST_TO_ADDR
// us_artillery := 97 ;
10302: LD_ADDR_EXP 20
10306: PUSH
10307: LD_INT 97
10309: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10310: LD_ADDR_EXP 21
10314: PUSH
10315: LD_INT 91
10317: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
10318: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10319: LD_INT 0
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10325: LD_VAR 0 1
10329: PPUSH
10330: CALL_OW 264
10334: PUSH
10335: LD_EXP 21
10339: EQUAL
10340: IFFALSE 10412
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10342: LD_INT 68
10344: PPUSH
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 255
10354: PPUSH
10355: CALL_OW 321
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10375
// eff := 70 else
10365: LD_ADDR_VAR 0 6
10369: PUSH
10370: LD_INT 70
10372: ST_TO_ADDR
10373: GO 10383
// eff := 30 ;
10375: LD_ADDR_VAR 0 6
10379: PUSH
10380: LD_INT 30
10382: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 250
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: CALL_OW 251
10402: PPUSH
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 495
// end ; end ;
10412: LD_VAR 0 4
10416: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
10417: LD_INT 0
10419: PPUSH
10420: PPUSH
10421: PPUSH
10422: PPUSH
10423: PPUSH
10424: PPUSH
// if cmd = 124 then
10425: LD_VAR 0 1
10429: PUSH
10430: LD_INT 124
10432: EQUAL
10433: IFFALSE 10639
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
10435: LD_ADDR_VAR 0 5
10439: PUSH
10440: LD_INT 2
10442: PUSH
10443: LD_INT 34
10445: PUSH
10446: LD_INT 53
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 14
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: ST_TO_ADDR
// if not tmp then
10473: LD_VAR 0 5
10477: NOT
10478: IFFALSE 10482
// exit ;
10480: GO 10639
// for i in tmp do
10482: LD_ADDR_VAR 0 3
10486: PUSH
10487: LD_VAR 0 5
10491: PUSH
10492: FOR_IN
10493: IFFALSE 10637
// begin taskList := GetTaskList ( i ) ;
10495: LD_ADDR_VAR 0 6
10499: PUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: CALL_OW 437
10509: ST_TO_ADDR
// if not taskList then
10510: LD_VAR 0 6
10514: NOT
10515: IFFALSE 10519
// continue ;
10517: GO 10492
// for j = 1 to taskList do
10519: LD_ADDR_VAR 0 4
10523: PUSH
10524: DOUBLE
10525: LD_INT 1
10527: DEC
10528: ST_TO_ADDR
10529: LD_VAR 0 6
10533: PUSH
10534: FOR_TO
10535: IFFALSE 10633
// if taskList [ j ] [ 1 ] = | then
10537: LD_VAR 0 6
10541: PUSH
10542: LD_VAR 0 4
10546: ARRAY
10547: PUSH
10548: LD_INT 1
10550: ARRAY
10551: PUSH
10552: LD_STRING |
10554: EQUAL
10555: IFFALSE 10631
// begin _taskList := Delete ( taskList , 1 ) ;
10557: LD_ADDR_VAR 0 7
10561: PUSH
10562: LD_VAR 0 6
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 3
10574: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_VAR 0 7
10584: PPUSH
10585: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_VAR 0 6
10598: PUSH
10599: LD_VAR 0 4
10603: ARRAY
10604: PUSH
10605: LD_INT 2
10607: ARRAY
10608: PPUSH
10609: LD_VAR 0 6
10613: PUSH
10614: LD_VAR 0 4
10618: ARRAY
10619: PUSH
10620: LD_INT 3
10622: ARRAY
10623: PPUSH
10624: LD_INT 8
10626: PPUSH
10627: CALL 10644 0 4
// end ;
10631: GO 10534
10633: POP
10634: POP
// end ;
10635: GO 10492
10637: POP
10638: POP
// end ; end ;
10639: LD_VAR 0 2
10643: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10655: LD_VAR 0 1
10659: NOT
10660: PUSH
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: CALL_OW 488
10675: NOT
10676: OR
10677: PUSH
10678: LD_VAR 0 4
10682: NOT
10683: OR
10684: IFFALSE 10688
// exit ;
10686: GO 11028
// list := [ ] ;
10688: LD_ADDR_VAR 0 13
10692: PUSH
10693: EMPTY
10694: ST_TO_ADDR
// if x - r < 0 then
10695: LD_VAR 0 2
10699: PUSH
10700: LD_VAR 0 4
10704: MINUS
10705: PUSH
10706: LD_INT 0
10708: LESS
10709: IFFALSE 10721
// min_x := 0 else
10711: LD_ADDR_VAR 0 7
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
10719: GO 10737
// min_x := x - r ;
10721: LD_ADDR_VAR 0 7
10725: PUSH
10726: LD_VAR 0 2
10730: PUSH
10731: LD_VAR 0 4
10735: MINUS
10736: ST_TO_ADDR
// if y - r < 0 then
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 4
10746: MINUS
10747: PUSH
10748: LD_INT 0
10750: LESS
10751: IFFALSE 10763
// min_y := 0 else
10753: LD_ADDR_VAR 0 8
10757: PUSH
10758: LD_INT 0
10760: ST_TO_ADDR
10761: GO 10779
// min_y := y - r ;
10763: LD_ADDR_VAR 0 8
10767: PUSH
10768: LD_VAR 0 3
10772: PUSH
10773: LD_VAR 0 4
10777: MINUS
10778: ST_TO_ADDR
// max_x := x + r ;
10779: LD_ADDR_VAR 0 9
10783: PUSH
10784: LD_VAR 0 2
10788: PUSH
10789: LD_VAR 0 4
10793: PLUS
10794: ST_TO_ADDR
// max_y := y + r ;
10795: LD_ADDR_VAR 0 10
10799: PUSH
10800: LD_VAR 0 3
10804: PUSH
10805: LD_VAR 0 4
10809: PLUS
10810: ST_TO_ADDR
// for _x = min_x to max_x do
10811: LD_ADDR_VAR 0 11
10815: PUSH
10816: DOUBLE
10817: LD_VAR 0 7
10821: DEC
10822: ST_TO_ADDR
10823: LD_VAR 0 9
10827: PUSH
10828: FOR_TO
10829: IFFALSE 10946
// for _y = min_y to max_y do
10831: LD_ADDR_VAR 0 12
10835: PUSH
10836: DOUBLE
10837: LD_VAR 0 8
10841: DEC
10842: ST_TO_ADDR
10843: LD_VAR 0 10
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10942
// begin if not ValidHex ( _x , _y ) then
10851: LD_VAR 0 11
10855: PPUSH
10856: LD_VAR 0 12
10860: PPUSH
10861: CALL_OW 488
10865: NOT
10866: IFFALSE 10870
// continue ;
10868: GO 10848
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10870: LD_VAR 0 11
10874: PPUSH
10875: LD_VAR 0 12
10879: PPUSH
10880: CALL_OW 351
10884: PUSH
10885: LD_VAR 0 11
10889: PPUSH
10890: LD_VAR 0 12
10894: PPUSH
10895: CALL_OW 554
10899: AND
10900: IFFALSE 10940
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10902: LD_ADDR_VAR 0 13
10906: PUSH
10907: LD_VAR 0 13
10911: PPUSH
10912: LD_VAR 0 13
10916: PUSH
10917: LD_INT 1
10919: PLUS
10920: PPUSH
10921: LD_VAR 0 11
10925: PUSH
10926: LD_VAR 0 12
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 2
10939: ST_TO_ADDR
// end ;
10940: GO 10848
10942: POP
10943: POP
10944: GO 10828
10946: POP
10947: POP
// if not list then
10948: LD_VAR 0 13
10952: NOT
10953: IFFALSE 10957
// exit ;
10955: GO 11028
// for i in list do
10957: LD_ADDR_VAR 0 6
10961: PUSH
10962: LD_VAR 0 13
10966: PUSH
10967: FOR_IN
10968: IFFALSE 11026
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_STRING M
10977: PUSH
10978: LD_VAR 0 6
10982: PUSH
10983: LD_INT 1
10985: ARRAY
10986: PUSH
10987: LD_VAR 0 6
10991: PUSH
10992: LD_INT 2
10994: ARRAY
10995: PUSH
10996: LD_INT 0
10998: PUSH
10999: LD_INT 0
11001: PUSH
11002: LD_INT 0
11004: PUSH
11005: LD_INT 0
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: PPUSH
11020: CALL_OW 447
11024: GO 10967
11026: POP
11027: POP
// end ;
11028: LD_VAR 0 5
11032: RET
