// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 29862 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 29862 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 29862 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 29862 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 29862 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9574 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9574 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9574 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9574 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9574 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9574 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9574 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9574 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9574 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL 25222 0 1
// if unit in russianTanks then
8262: LD_VAR 0 1
8266: PUSH
8267: LD_EXP 11
8271: IN
8272: IFFALSE 8290
// russianTanks := russianTanks diff unit ;
8274: LD_ADDR_EXP 11
8278: PUSH
8279: LD_EXP 11
8283: PUSH
8284: LD_VAR 0 1
8288: DIFF
8289: ST_TO_ADDR
// if unit in russianTimeLapsers then
8290: LD_VAR 0 1
8294: PUSH
8295: LD_EXP 12
8299: IN
8300: IFFALSE 8318
// russianTimeLapsers := russianTimeLapsers diff unit ;
8302: LD_ADDR_EXP 12
8306: PUSH
8307: LD_EXP 12
8311: PUSH
8312: LD_VAR 0 1
8316: DIFF
8317: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 255
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 247
8341: PUSH
8342: LD_INT 3
8344: EQUAL
8345: AND
8346: IFFALSE 8810
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 266
8357: PUSH
8358: LD_INT 31
8360: PUSH
8361: LD_INT 32
8363: PUSH
8364: LD_INT 36
8366: PUSH
8367: LD_INT 0
8369: PUSH
8370: LD_INT 24
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 25
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 18
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 16
8396: PUSH
8397: LD_INT 6
8399: PUSH
8400: LD_INT 29
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: LD_INT 30
8408: PUSH
8409: LD_INT 28
8411: PUSH
8412: LD_INT 27
8414: PUSH
8415: LD_INT 33
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: LD_INT 4
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: IN
8448: IFFALSE 8534
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8450: LD_ADDR_EXP 10
8454: PUSH
8455: LD_EXP 10
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 266
8469: ADD
8470: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8471: LD_ADDR_EXP 10
8475: PUSH
8476: LD_EXP 10
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 250
8490: ADD
8491: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8492: LD_ADDR_EXP 10
8496: PUSH
8497: LD_EXP 10
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 251
8511: ADD
8512: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8513: LD_ADDR_EXP 10
8517: PUSH
8518: LD_EXP 10
8522: PUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 254
8532: ADD
8533: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 266
8543: PUSH
8544: LD_INT 1
8546: EQUAL
8547: IFFALSE 8626
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8549: LD_ADDR_EXP 10
8553: PUSH
8554: LD_EXP 10
8558: PUSH
8559: LD_INT 0
8561: ADD
8562: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8563: LD_ADDR_EXP 10
8567: PUSH
8568: LD_EXP 10
8572: PUSH
8573: LD_VAR 0 1
8577: PPUSH
8578: CALL_OW 250
8582: ADD
8583: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8584: LD_ADDR_EXP 10
8588: PUSH
8589: LD_EXP 10
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 251
8603: ADD
8604: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8605: LD_ADDR_EXP 10
8609: PUSH
8610: LD_EXP 10
8614: PUSH
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 254
8624: ADD
8625: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 266
8635: PUSH
8636: LD_INT 3
8638: EQUAL
8639: IFFALSE 8718
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8641: LD_ADDR_EXP 10
8645: PUSH
8646: LD_EXP 10
8650: PUSH
8651: LD_INT 2
8653: ADD
8654: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8655: LD_ADDR_EXP 10
8659: PUSH
8660: LD_EXP 10
8664: PUSH
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 250
8674: ADD
8675: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8676: LD_ADDR_EXP 10
8680: PUSH
8681: LD_EXP 10
8685: PUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 251
8695: ADD
8696: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8697: LD_ADDR_EXP 10
8701: PUSH
8702: LD_EXP 10
8706: PUSH
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 254
8716: ADD
8717: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 266
8727: PUSH
8728: LD_INT 5
8730: EQUAL
8731: IFFALSE 8810
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8733: LD_ADDR_EXP 10
8737: PUSH
8738: LD_EXP 10
8742: PUSH
8743: LD_INT 4
8745: ADD
8746: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8747: LD_ADDR_EXP 10
8751: PUSH
8752: LD_EXP 10
8756: PUSH
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 250
8766: ADD
8767: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8768: LD_ADDR_EXP 10
8772: PUSH
8773: LD_EXP 10
8777: PUSH
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 251
8787: ADD
8788: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8789: LD_ADDR_EXP 10
8793: PUSH
8794: LD_EXP 10
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 254
8808: ADD
8809: ST_TO_ADDR
// end ; end ; end ;
8810: PPOPN 1
8812: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8813: LD_VAR 0 3
8817: PPUSH
8818: CALL_OW 264
8822: PUSH
8823: LD_INT 10
8825: EQUAL
8826: IFFALSE 8842
// destroyCounter := destroyCounter + 1 ;
8828: LD_ADDR_EXP 17
8832: PUSH
8833: LD_EXP 17
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
// end ;
8842: PPOPN 3
8844: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL 25344 0 2
// if factory = ru_fact1 or factory = ru_fact2 then
8859: LD_VAR 0 2
8863: PUSH
8864: LD_INT 1
8866: EQUAL
8867: PUSH
8868: LD_VAR 0 2
8872: PUSH
8873: LD_INT 40
8875: EQUAL
8876: OR
8877: IFFALSE 9001
// if GetSide ( vehicle ) = 3 then
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 255
8888: PUSH
8889: LD_INT 3
8891: EQUAL
8892: IFFALSE 9001
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 264
8903: PUSH
8904: LD_INT 47
8906: EQUAL
8907: PUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 264
8917: PUSH
8918: LD_INT 46
8920: EQUAL
8921: OR
8922: PUSH
8923: LD_VAR 0 1
8927: PPUSH
8928: CALL_OW 264
8932: PUSH
8933: LD_INT 45
8935: EQUAL
8936: OR
8937: PUSH
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 264
8947: PUSH
8948: LD_INT 44
8950: EQUAL
8951: OR
8952: IFFALSE 8970
// russianTanks = russianTanks ^ vehicle ;
8954: LD_ADDR_EXP 11
8958: PUSH
8959: LD_EXP 11
8963: PUSH
8964: LD_VAR 0 1
8968: ADD
8969: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 264
8979: PUSH
8980: LD_INT 49
8982: EQUAL
8983: IFFALSE 9001
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8985: LD_ADDR_EXP 12
8989: PUSH
8990: LD_EXP 12
8994: PUSH
8995: LD_VAR 0 1
8999: ADD
9000: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 255
9010: PUSH
9011: LD_INT 1
9013: EQUAL
9014: PUSH
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 264
9024: PUSH
9025: LD_INT 10
9027: EQUAL
9028: AND
9029: IFFALSE 9045
// amLaserCounter = amLaserCounter + 1 ;
9031: LD_ADDR_EXP 9
9035: PUSH
9036: LD_EXP 9
9040: PUSH
9041: LD_INT 1
9043: PLUS
9044: ST_TO_ADDR
// end ;
9045: PPOPN 2
9047: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9048: LD_VAR 0 1
9052: PPUSH
9053: CALL 25328 0 1
// end ; end_of_file
9057: PPOPN 1
9059: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9060: LD_EXP 1
9064: PPUSH
9065: CALL_OW 310
9069: PPUSH
9070: LD_INT 12
9072: PPUSH
9073: CALL_OW 308
9077: PUSH
9078: LD_EXP 15
9082: PUSH
9083: LD_INT 0
9085: EQUAL
9086: AND
9087: IFFALSE 9433
9089: GO 9091
9091: DISABLE
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
// begin enable ;
9096: ENABLE
// if JMMGirl = 1 then
9097: LD_EXP 7
9101: PUSH
9102: LD_INT 1
9104: EQUAL
9105: IFFALSE 9122
// JMMGirlVeh = IsInUnit ( Joan ) ;
9107: LD_ADDR_VAR 0 1
9111: PUSH
9112: LD_EXP 2
9116: PPUSH
9117: CALL_OW 310
9121: ST_TO_ADDR
// if JMMGirl = 2 then
9122: LD_EXP 7
9126: PUSH
9127: LD_INT 2
9129: EQUAL
9130: IFFALSE 9147
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9132: LD_ADDR_VAR 0 1
9136: PUSH
9137: LD_EXP 3
9141: PPUSH
9142: CALL_OW 310
9146: ST_TO_ADDR
// if JMMGirl = 3 then
9147: LD_EXP 7
9151: PUSH
9152: LD_INT 3
9154: EQUAL
9155: IFFALSE 9172
// JMMGirlVeh = IsInUnit ( Connie ) ;
9157: LD_ADDR_VAR 0 1
9161: PUSH
9162: LD_EXP 4
9166: PPUSH
9167: CALL_OW 310
9171: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9172: LD_EXP 1
9176: PPUSH
9177: CALL_OW 310
9181: PPUSH
9182: LD_EXP 2
9186: PPUSH
9187: CALL_OW 310
9191: PPUSH
9192: CALL_OW 296
9196: PUSH
9197: LD_INT 10
9199: LESS
9200: PUSH
9201: LD_EXP 1
9205: PPUSH
9206: CALL_OW 310
9210: PPUSH
9211: LD_EXP 3
9215: PPUSH
9216: CALL_OW 310
9220: PPUSH
9221: CALL_OW 296
9225: PUSH
9226: LD_INT 10
9228: LESS
9229: OR
9230: PUSH
9231: LD_EXP 1
9235: PPUSH
9236: CALL_OW 310
9240: PPUSH
9241: LD_EXP 4
9245: PPUSH
9246: CALL_OW 310
9250: PPUSH
9251: CALL_OW 296
9255: PUSH
9256: LD_INT 10
9258: LESS
9259: OR
9260: IFFALSE 9354
// begin case Query ( Q3b ) of 1 :
9262: LD_STRING Q3b
9264: PPUSH
9265: CALL_OW 97
9269: PUSH
9270: LD_INT 1
9272: DOUBLE
9273: EQUAL
9274: IFTRUE 9278
9276: GO 9351
9278: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 265
9288: PUSH
9289: EMPTY
9290: LIST
9291: PUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 262
9301: PUSH
9302: EMPTY
9303: LIST
9304: PUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 263
9314: PUSH
9315: EMPTY
9316: LIST
9317: PUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 264
9327: PUSH
9328: EMPTY
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: PPUSH
9337: LD_STRING 14_JMMGirlVeh_1
9339: PPUSH
9340: CALL_OW 39
// FinishMission ;
9344: CALL 9574 0 0
// disable ;
9348: DISABLE
// end ; end ;
9349: GO 9352
9351: POP
// end else
9352: GO 9433
// begin if JMMGirl = 1 then
9354: LD_EXP 7
9358: PUSH
9359: LD_INT 1
9361: EQUAL
9362: IFFALSE 9379
// dec := Query ( Q3bJ ) else
9364: LD_ADDR_VAR 0 2
9368: PUSH
9369: LD_STRING Q3bJ
9371: PPUSH
9372: CALL_OW 97
9376: ST_TO_ADDR
9377: GO 9417
// if JMMGirl = 2 then
9379: LD_EXP 7
9383: PUSH
9384: LD_INT 2
9386: EQUAL
9387: IFFALSE 9404
// dec := Query ( Q3bL ) else
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_STRING Q3bL
9396: PPUSH
9397: CALL_OW 97
9401: ST_TO_ADDR
9402: GO 9417
// dec := Query ( Q3bX ) ;
9404: LD_ADDR_VAR 0 2
9408: PUSH
9409: LD_STRING Q3bX
9411: PPUSH
9412: CALL_OW 97
9416: ST_TO_ADDR
// if dec = 1 then
9417: LD_VAR 0 2
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9433
// begin FinishMission ;
9427: CALL 9574 0 0
// exit ;
9431: GO 9433
// end ; end ; end ;
9433: PPOPN 2
9435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9436: LD_INT 22
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 21
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: PUSH
9465: LD_INT 0
9467: EQUAL
9468: PUSH
9469: LD_EXP 15
9473: PUSH
9474: LD_INT 0
9476: EQUAL
9477: AND
9478: IFFALSE 9573
9480: GO 9482
9482: DISABLE
// begin DialogueOn ;
9483: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9487: LD_EXP 1
9491: PPUSH
9492: LD_STRING DEnd-JMM-1
9494: PPUSH
9495: CALL_OW 88
// if JMMGirl = 1 then
9499: LD_EXP 7
9503: PUSH
9504: LD_INT 1
9506: EQUAL
9507: IFFALSE 9521
// Say ( Joan , DEnd-Joan-1 ) ;
9509: LD_EXP 2
9513: PPUSH
9514: LD_STRING DEnd-Joan-1
9516: PPUSH
9517: CALL_OW 88
// if JMMGirl = 2 then
9521: LD_EXP 7
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: IFFALSE 9543
// Say ( Lisa , DEnd-Lisa-1 ) ;
9531: LD_EXP 3
9535: PPUSH
9536: LD_STRING DEnd-Lisa-1
9538: PPUSH
9539: CALL_OW 88
// if JMMGirl = 3 then
9543: LD_EXP 7
9547: PUSH
9548: LD_INT 3
9550: EQUAL
9551: IFFALSE 9565
// Say ( Connie , DEnd-Con-1 ) ;
9553: LD_EXP 4
9557: PPUSH
9558: LD_STRING DEnd-Con-1
9560: PPUSH
9561: CALL_OW 88
// DialogueOff ;
9565: CALL_OW 7
// FinishMission ;
9569: CALL 9574 0 0
// end ;
9573: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
// m1 := false ;
9581: LD_ADDR_VAR 0 3
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// m2 := false ;
9589: LD_ADDR_VAR 0 4
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// m3 := false ;
9597: LD_ADDR_VAR 0 5
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9605: LD_EXP 1
9609: PPUSH
9610: LD_STRING 14_JMM
9612: PPUSH
9613: CALL_OW 38
// if tick <= 50 50$00 then
9617: LD_OWVAR 1
9621: PUSH
9622: LD_INT 105000
9624: LESSEQUAL
9625: IFFALSE 9634
// SetAchievement ( ACH_ASPEED_14 ) ;
9627: LD_STRING ACH_ASPEED_14
9629: PPUSH
9630: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9634: LD_EXP 1
9638: PPUSH
9639: CALL_OW 310
9643: PUSH
9644: LD_EXP 1
9648: PPUSH
9649: CALL_OW 310
9653: PPUSH
9654: CALL_OW 247
9658: PUSH
9659: LD_INT 2
9661: EQUAL
9662: AND
9663: IFFALSE 9745
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: LD_EXP 1
9674: PPUSH
9675: CALL_OW 310
9679: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: CALL_OW 265
9689: PUSH
9690: EMPTY
9691: LIST
9692: PUSH
9693: LD_VAR 0 2
9697: PPUSH
9698: CALL_OW 262
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: LD_VAR 0 2
9710: PPUSH
9711: CALL_OW 263
9715: PUSH
9716: EMPTY
9717: LIST
9718: PUSH
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL_OW 264
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PPUSH
9738: LD_STRING 14_JMMVeh_1
9740: PPUSH
9741: CALL_OW 39
// end ; if fastEnd = 1 then
9745: LD_EXP 15
9749: PUSH
9750: LD_INT 1
9752: EQUAL
9753: IFFALSE 9842
// begin AddMedal ( fastend , - 1 ) ;
9755: LD_STRING fastend
9757: PPUSH
9758: LD_INT 1
9760: NEG
9761: PPUSH
9762: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9766: LD_STRING fastend
9768: PPUSH
9769: LD_INT 1
9771: NEG
9772: PPUSH
9773: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9777: LD_STRING fastend
9779: PPUSH
9780: LD_INT 1
9782: NEG
9783: PPUSH
9784: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9788: LD_EXP 7
9792: PPUSH
9793: LD_STRING 14_JMMGirl_1
9795: PPUSH
9796: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9800: LD_INT 0
9802: PPUSH
9803: LD_STRING 14_JMMGirlStatus_1
9805: PPUSH
9806: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9810: LD_INT 0
9812: PPUSH
9813: LD_STRING 14_KappaStatus_1
9815: PPUSH
9816: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9820: LD_STRING Eliminate
9822: PPUSH
9823: CALL_OW 102
// RewardPeople ( JMM ) ;
9827: LD_EXP 1
9831: PPUSH
9832: CALL_OW 43
// YouWin ;
9836: CALL_OW 103
// exit ;
9840: GO 10667
// end ; if fastEnd = 0 then
9842: LD_EXP 15
9846: PUSH
9847: LD_INT 0
9849: EQUAL
9850: IFFALSE 10560
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9852: LD_EXP 7
9856: PPUSH
9857: LD_STRING 14_JMMGirl_1
9859: PPUSH
9860: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9864: LD_INT 22
9866: PUSH
9867: LD_INT 3
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 69
9892: PUSH
9893: LD_INT 0
9895: EQUAL
9896: PUSH
9897: LD_INT 48
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: LD_INT 1
9907: EQUAL
9908: AND
9909: IFFALSE 9923
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9911: LD_INT 1
9913: PPUSH
9914: LD_STRING 14_KappaStatus_1
9916: PPUSH
9917: CALL_OW 39
9921: GO 9933
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9923: LD_INT 0
9925: PPUSH
9926: LD_STRING 14_KappaStatus_1
9928: PPUSH
9929: CALL_OW 39
// case JMMGirl of 1 :
9933: LD_EXP 7
9937: PUSH
9938: LD_INT 1
9940: DOUBLE
9941: EQUAL
9942: IFTRUE 9946
9944: GO 10102
9946: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9947: LD_EXP 2
9951: PPUSH
9952: CALL_OW 302
9956: PUSH
9957: LD_EXP 2
9961: PPUSH
9962: CALL_OW 255
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 21
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 69
10000: PUSH
10001: LD_INT 0
10003: EQUAL
10004: PUSH
10005: LD_EXP 1
10009: PPUSH
10010: CALL_OW 310
10014: PPUSH
10015: LD_EXP 2
10019: PPUSH
10020: CALL_OW 310
10024: PPUSH
10025: CALL_OW 296
10029: PUSH
10030: LD_INT 10
10032: LESS
10033: OR
10034: AND
10035: IFFALSE 10079
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10037: LD_INT 1
10039: PPUSH
10040: LD_STRING 14_JMMGirlStatus_1
10042: PPUSH
10043: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10047: LD_EXP 2
10051: PPUSH
10052: LD_STRING 14_Joan
10054: PPUSH
10055: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10059: LD_STRING protect
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 101
// m1 := true ;
10069: LD_ADDR_VAR 0 3
10073: PUSH
10074: LD_INT 1
10076: ST_TO_ADDR
// end else
10077: GO 10100
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10079: LD_INT 0
10081: PPUSH
10082: LD_STRING 14_JMMGirlStatus_1
10084: PPUSH
10085: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10089: LD_STRING protect
10091: PPUSH
10092: LD_INT 1
10094: NEG
10095: PPUSH
10096: CALL_OW 101
// end ; end ; 2 :
10100: GO 10431
10102: LD_INT 2
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10266
10110: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10111: LD_EXP 3
10115: PPUSH
10116: CALL_OW 302
10120: PUSH
10121: LD_EXP 3
10125: PPUSH
10126: CALL_OW 255
10130: PUSH
10131: LD_INT 1
10133: EQUAL
10134: AND
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: PUSH
10165: LD_INT 0
10167: EQUAL
10168: PUSH
10169: LD_EXP 1
10173: PPUSH
10174: CALL_OW 310
10178: PPUSH
10179: LD_EXP 3
10183: PPUSH
10184: CALL_OW 310
10188: PPUSH
10189: CALL_OW 296
10193: PUSH
10194: LD_INT 10
10196: LESS
10197: OR
10198: AND
10199: IFFALSE 10243
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10201: LD_INT 1
10203: PPUSH
10204: LD_STRING 14_JMMGirlStatus_1
10206: PPUSH
10207: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10211: LD_EXP 3
10215: PPUSH
10216: LD_STRING 14_Lisa
10218: PPUSH
10219: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10223: LD_STRING protect
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 101
// m1 := true ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// end else
10241: GO 10264
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10243: LD_INT 0
10245: PPUSH
10246: LD_STRING 14_JMMGirlStatus_1
10248: PPUSH
10249: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10253: LD_STRING protect
10255: PPUSH
10256: LD_INT 2
10258: NEG
10259: PPUSH
10260: CALL_OW 101
// end ; end ; 3 :
10264: GO 10431
10266: LD_INT 3
10268: DOUBLE
10269: EQUAL
10270: IFTRUE 10274
10272: GO 10430
10274: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10275: LD_EXP 4
10279: PPUSH
10280: CALL_OW 302
10284: PUSH
10285: LD_EXP 4
10289: PPUSH
10290: CALL_OW 255
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: AND
10299: PUSH
10300: LD_INT 22
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 1
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 69
10328: PUSH
10329: LD_INT 0
10331: EQUAL
10332: PUSH
10333: LD_EXP 1
10337: PPUSH
10338: CALL_OW 310
10342: PPUSH
10343: LD_EXP 4
10347: PPUSH
10348: CALL_OW 310
10352: PPUSH
10353: CALL_OW 296
10357: PUSH
10358: LD_INT 10
10360: LESS
10361: OR
10362: AND
10363: IFFALSE 10407
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10365: LD_INT 1
10367: PPUSH
10368: LD_STRING 14_JMMGirlStatus_1
10370: PPUSH
10371: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10375: LD_EXP 4
10379: PPUSH
10380: LD_STRING 14_Connie
10382: PPUSH
10383: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10387: LD_STRING protect
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 101
// m1 := true ;
10397: LD_ADDR_VAR 0 3
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// end else
10405: GO 10428
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10407: LD_INT 0
10409: PPUSH
10410: LD_STRING 14_JMMGirlStatus_1
10412: PPUSH
10413: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10417: LD_STRING protect
10419: PPUSH
10420: LD_INT 3
10422: NEG
10423: PPUSH
10424: CALL_OW 101
// end ; end ; end ;
10428: GO 10431
10430: POP
// if amLaserCounter >= 2 then
10431: LD_EXP 9
10435: PUSH
10436: LD_INT 2
10438: GREATEREQUAL
10439: IFFALSE 10461
// begin AddMedal ( double , 1 ) ;
10441: LD_STRING double
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 101
// m2 := true ;
10451: LD_ADDR_VAR 0 4
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// end else
10459: GO 10495
// begin if amLaserCounter = 1 then
10461: LD_EXP 9
10465: PUSH
10466: LD_INT 1
10468: EQUAL
10469: IFFALSE 10484
// AddMedal ( double , - 2 ) else
10471: LD_STRING double
10473: PPUSH
10474: LD_INT 2
10476: NEG
10477: PPUSH
10478: CALL_OW 101
10482: GO 10495
// AddMedal ( double , - 1 ) ;
10484: LD_STRING double
10486: PPUSH
10487: LD_INT 1
10489: NEG
10490: PPUSH
10491: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10495: LD_INT 22
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 21
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 69
10523: PUSH
10524: LD_INT 0
10526: EQUAL
10527: IFFALSE 10549
// begin AddMedal ( base , 1 ) ;
10529: LD_STRING base
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 101
// m3 := true ;
10539: LD_ADDR_VAR 0 5
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// end else
10547: GO 10560
// AddMedal ( base , - 1 ) ;
10549: LD_STRING base
10551: PPUSH
10552: LD_INT 1
10554: NEG
10555: PPUSH
10556: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_VAR 0 4
10569: AND
10570: PUSH
10571: LD_VAR 0 5
10575: AND
10576: PUSH
10577: LD_OWVAR 67
10581: PUSH
10582: LD_INT 3
10584: GREATEREQUAL
10585: AND
10586: IFFALSE 10598
// SetAchievementEX ( ACH_AMER , 14 ) ;
10588: LD_STRING ACH_AMER
10590: PPUSH
10591: LD_INT 14
10593: PPUSH
10594: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10598: LD_STRING Eliminate
10600: PPUSH
10601: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10605: LD_INT 22
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 3
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 12
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 3
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 16
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: PPUSH
10654: CALL_OW 69
10658: PPUSH
10659: CALL_OW 43
// YouWin ;
10663: CALL_OW 103
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10672: LD_EXP 1
10676: PPUSH
10677: CALL_OW 301
10681: IFFALSE 10693
10683: GO 10685
10685: DISABLE
// YouLost ( JMM ) ; end_of_file
10686: LD_STRING JMM
10688: PPUSH
10689: CALL_OW 104
10693: END
// every 1 1$0 do
10694: GO 10696
10696: DISABLE
// begin enable ;
10697: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10698: LD_INT 3
10700: PPUSH
10701: LD_INT 5
10703: PPUSH
10704: CALL_OW 12
10708: PPUSH
10709: LD_INT 13
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 55
// end ; end_of_file
10719: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10720: LD_INT 0
10722: PPUSH
// ar_miner := 81 ;
10723: LD_ADDR_EXP 26
10727: PUSH
10728: LD_INT 81
10730: ST_TO_ADDR
// ar_crane := 88 ;
10731: LD_ADDR_EXP 25
10735: PUSH
10736: LD_INT 88
10738: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10739: LD_ADDR_EXP 20
10743: PUSH
10744: LD_INT 89
10746: ST_TO_ADDR
// us_hack := 99 ;
10747: LD_ADDR_EXP 21
10751: PUSH
10752: LD_INT 99
10754: ST_TO_ADDR
// us_artillery := 97 ;
10755: LD_ADDR_EXP 22
10759: PUSH
10760: LD_INT 97
10762: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10763: LD_ADDR_EXP 23
10767: PUSH
10768: LD_INT 91
10770: ST_TO_ADDR
// ar_mortar := 92 ;
10771: LD_ADDR_EXP 24
10775: PUSH
10776: LD_INT 92
10778: ST_TO_ADDR
// ru_radar := 98 ;
10779: LD_ADDR_EXP 19
10783: PUSH
10784: LD_INT 98
10786: ST_TO_ADDR
// tech_Artillery := 80 ;
10787: LD_ADDR_EXP 27
10791: PUSH
10792: LD_INT 80
10794: ST_TO_ADDR
// tech_RadMat := 81 ;
10795: LD_ADDR_EXP 28
10799: PUSH
10800: LD_INT 81
10802: ST_TO_ADDR
// tech_BasicTools := 82 ;
10803: LD_ADDR_EXP 29
10807: PUSH
10808: LD_INT 82
10810: ST_TO_ADDR
// tech_Cargo := 83 ;
10811: LD_ADDR_EXP 30
10815: PUSH
10816: LD_INT 83
10818: ST_TO_ADDR
// tech_Track := 84 ;
10819: LD_ADDR_EXP 31
10823: PUSH
10824: LD_INT 84
10826: ST_TO_ADDR
// tech_Crane := 85 ;
10827: LD_ADDR_EXP 32
10831: PUSH
10832: LD_INT 85
10834: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10835: LD_ADDR_EXP 33
10839: PUSH
10840: LD_INT 86
10842: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10843: LD_ADDR_EXP 34
10847: PUSH
10848: LD_INT 87
10850: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10851: LD_ADDR_EXP 35
10855: PUSH
10856: LD_INT 88
10858: ST_TO_ADDR
// class_mastodont := 31 ;
10859: LD_ADDR_EXP 36
10863: PUSH
10864: LD_INT 31
10866: ST_TO_ADDR
// class_horse := 21 ;
10867: LD_ADDR_EXP 37
10871: PUSH
10872: LD_INT 21
10874: ST_TO_ADDR
// end ;
10875: LD_VAR 0 1
10879: RET
// every 1 do
10880: GO 10882
10882: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10883: CALL 10720 0 0
10887: END
// every 0 0$1 do
10888: GO 10890
10890: DISABLE
// begin enable ;
10891: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10892: LD_STRING updateTimer(
10894: PUSH
10895: LD_OWVAR 1
10899: STR
10900: PUSH
10901: LD_STRING );
10903: STR
10904: PPUSH
10905: CALL_OW 559
// end ;
10909: END
// export function SOS_MapStart ( ) ; begin
10910: LD_INT 0
10912: PPUSH
// if streamModeActive then
10913: LD_EXP 38
10917: IFFALSE 10926
// DefineStreamItems ( true ) ;
10919: LD_INT 1
10921: PPUSH
10922: CALL 12576 0 1
// UpdateFactoryWaypoints ( ) ;
10926: CALL 26160 0 0
// end ;
10930: LD_VAR 0 1
10934: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10935: LD_INT 0
10937: PPUSH
// if p2 = 100 then
10938: LD_VAR 0 2
10942: PUSH
10943: LD_INT 100
10945: EQUAL
10946: IFFALSE 11949
// begin if not StreamModeActive then
10948: LD_EXP 38
10952: NOT
10953: IFFALSE 10963
// StreamModeActive := true ;
10955: LD_ADDR_EXP 38
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 0 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 0
10970: EQUAL
10971: IFFALSE 10977
// InitStreamMode ;
10973: CALL 12112 0 0
// if p3 = 1 then
10977: LD_VAR 0 3
10981: PUSH
10982: LD_INT 1
10984: EQUAL
10985: IFFALSE 10995
// sRocket := true ;
10987: LD_ADDR_EXP 43
10991: PUSH
10992: LD_INT 1
10994: ST_TO_ADDR
// if p3 = 2 then
10995: LD_VAR 0 3
10999: PUSH
11000: LD_INT 2
11002: EQUAL
11003: IFFALSE 11013
// sSpeed := true ;
11005: LD_ADDR_EXP 42
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// if p3 = 3 then
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 3
11020: EQUAL
11021: IFFALSE 11031
// sEngine := true ;
11023: LD_ADDR_EXP 44
11027: PUSH
11028: LD_INT 1
11030: ST_TO_ADDR
// if p3 = 4 then
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 4
11038: EQUAL
11039: IFFALSE 11049
// sSpec := true ;
11041: LD_ADDR_EXP 41
11045: PUSH
11046: LD_INT 1
11048: ST_TO_ADDR
// if p3 = 5 then
11049: LD_VAR 0 3
11053: PUSH
11054: LD_INT 5
11056: EQUAL
11057: IFFALSE 11067
// sLevel := true ;
11059: LD_ADDR_EXP 45
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// if p3 = 6 then
11067: LD_VAR 0 3
11071: PUSH
11072: LD_INT 6
11074: EQUAL
11075: IFFALSE 11085
// sArmoury := true ;
11077: LD_ADDR_EXP 46
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// if p3 = 7 then
11085: LD_VAR 0 3
11089: PUSH
11090: LD_INT 7
11092: EQUAL
11093: IFFALSE 11103
// sRadar := true ;
11095: LD_ADDR_EXP 47
11099: PUSH
11100: LD_INT 1
11102: ST_TO_ADDR
// if p3 = 8 then
11103: LD_VAR 0 3
11107: PUSH
11108: LD_INT 8
11110: EQUAL
11111: IFFALSE 11121
// sBunker := true ;
11113: LD_ADDR_EXP 48
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// if p3 = 9 then
11121: LD_VAR 0 3
11125: PUSH
11126: LD_INT 9
11128: EQUAL
11129: IFFALSE 11139
// sHack := true ;
11131: LD_ADDR_EXP 49
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// if p3 = 10 then
11139: LD_VAR 0 3
11143: PUSH
11144: LD_INT 10
11146: EQUAL
11147: IFFALSE 11157
// sFire := true ;
11149: LD_ADDR_EXP 50
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// if p3 = 11 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 11
11164: EQUAL
11165: IFFALSE 11175
// sRefresh := true ;
11167: LD_ADDR_EXP 51
11171: PUSH
11172: LD_INT 1
11174: ST_TO_ADDR
// if p3 = 12 then
11175: LD_VAR 0 3
11179: PUSH
11180: LD_INT 12
11182: EQUAL
11183: IFFALSE 11193
// sExp := true ;
11185: LD_ADDR_EXP 52
11189: PUSH
11190: LD_INT 1
11192: ST_TO_ADDR
// if p3 = 13 then
11193: LD_VAR 0 3
11197: PUSH
11198: LD_INT 13
11200: EQUAL
11201: IFFALSE 11211
// sDepot := true ;
11203: LD_ADDR_EXP 53
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// if p3 = 14 then
11211: LD_VAR 0 3
11215: PUSH
11216: LD_INT 14
11218: EQUAL
11219: IFFALSE 11229
// sFlag := true ;
11221: LD_ADDR_EXP 54
11225: PUSH
11226: LD_INT 1
11228: ST_TO_ADDR
// if p3 = 15 then
11229: LD_VAR 0 3
11233: PUSH
11234: LD_INT 15
11236: EQUAL
11237: IFFALSE 11247
// sKamikadze := true ;
11239: LD_ADDR_EXP 62
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// if p3 = 16 then
11247: LD_VAR 0 3
11251: PUSH
11252: LD_INT 16
11254: EQUAL
11255: IFFALSE 11265
// sTroll := true ;
11257: LD_ADDR_EXP 63
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// if p3 = 17 then
11265: LD_VAR 0 3
11269: PUSH
11270: LD_INT 17
11272: EQUAL
11273: IFFALSE 11283
// sSlow := true ;
11275: LD_ADDR_EXP 64
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// if p3 = 18 then
11283: LD_VAR 0 3
11287: PUSH
11288: LD_INT 18
11290: EQUAL
11291: IFFALSE 11301
// sLack := true ;
11293: LD_ADDR_EXP 65
11297: PUSH
11298: LD_INT 1
11300: ST_TO_ADDR
// if p3 = 19 then
11301: LD_VAR 0 3
11305: PUSH
11306: LD_INT 19
11308: EQUAL
11309: IFFALSE 11319
// sTank := true ;
11311: LD_ADDR_EXP 67
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// if p3 = 20 then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 20
11326: EQUAL
11327: IFFALSE 11337
// sRemote := true ;
11329: LD_ADDR_EXP 68
11333: PUSH
11334: LD_INT 1
11336: ST_TO_ADDR
// if p3 = 21 then
11337: LD_VAR 0 3
11341: PUSH
11342: LD_INT 21
11344: EQUAL
11345: IFFALSE 11355
// sPowell := true ;
11347: LD_ADDR_EXP 69
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// if p3 = 22 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_INT 22
11362: EQUAL
11363: IFFALSE 11373
// sTeleport := true ;
11365: LD_ADDR_EXP 72
11369: PUSH
11370: LD_INT 1
11372: ST_TO_ADDR
// if p3 = 23 then
11373: LD_VAR 0 3
11377: PUSH
11378: LD_INT 23
11380: EQUAL
11381: IFFALSE 11391
// sOilTower := true ;
11383: LD_ADDR_EXP 74
11387: PUSH
11388: LD_INT 1
11390: ST_TO_ADDR
// if p3 = 24 then
11391: LD_VAR 0 3
11395: PUSH
11396: LD_INT 24
11398: EQUAL
11399: IFFALSE 11409
// sShovel := true ;
11401: LD_ADDR_EXP 75
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// if p3 = 25 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 25
11416: EQUAL
11417: IFFALSE 11427
// sSheik := true ;
11419: LD_ADDR_EXP 76
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// if p3 = 26 then
11427: LD_VAR 0 3
11431: PUSH
11432: LD_INT 26
11434: EQUAL
11435: IFFALSE 11445
// sEarthquake := true ;
11437: LD_ADDR_EXP 78
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// if p3 = 27 then
11445: LD_VAR 0 3
11449: PUSH
11450: LD_INT 27
11452: EQUAL
11453: IFFALSE 11463
// sAI := true ;
11455: LD_ADDR_EXP 79
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// if p3 = 28 then
11463: LD_VAR 0 3
11467: PUSH
11468: LD_INT 28
11470: EQUAL
11471: IFFALSE 11481
// sCargo := true ;
11473: LD_ADDR_EXP 82
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
// if p3 = 29 then
11481: LD_VAR 0 3
11485: PUSH
11486: LD_INT 29
11488: EQUAL
11489: IFFALSE 11499
// sDLaser := true ;
11491: LD_ADDR_EXP 83
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// if p3 = 30 then
11499: LD_VAR 0 3
11503: PUSH
11504: LD_INT 30
11506: EQUAL
11507: IFFALSE 11517
// sExchange := true ;
11509: LD_ADDR_EXP 84
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// if p3 = 31 then
11517: LD_VAR 0 3
11521: PUSH
11522: LD_INT 31
11524: EQUAL
11525: IFFALSE 11535
// sFac := true ;
11527: LD_ADDR_EXP 85
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// if p3 = 32 then
11535: LD_VAR 0 3
11539: PUSH
11540: LD_INT 32
11542: EQUAL
11543: IFFALSE 11553
// sPower := true ;
11545: LD_ADDR_EXP 86
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
// if p3 = 33 then
11553: LD_VAR 0 3
11557: PUSH
11558: LD_INT 33
11560: EQUAL
11561: IFFALSE 11571
// sRandom := true ;
11563: LD_ADDR_EXP 87
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// if p3 = 34 then
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 34
11578: EQUAL
11579: IFFALSE 11589
// sShield := true ;
11581: LD_ADDR_EXP 88
11585: PUSH
11586: LD_INT 1
11588: ST_TO_ADDR
// if p3 = 35 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 35
11596: EQUAL
11597: IFFALSE 11607
// sTime := true ;
11599: LD_ADDR_EXP 89
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 36 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 36
11614: EQUAL
11615: IFFALSE 11625
// sTools := true ;
11617: LD_ADDR_EXP 90
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 101 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 101
11632: EQUAL
11633: IFFALSE 11643
// sSold := true ;
11635: LD_ADDR_EXP 55
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 102 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 102
11650: EQUAL
11651: IFFALSE 11661
// sDiff := true ;
11653: LD_ADDR_EXP 56
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if p3 = 103 then
11661: LD_VAR 0 3
11665: PUSH
11666: LD_INT 103
11668: EQUAL
11669: IFFALSE 11679
// sFog := true ;
11671: LD_ADDR_EXP 59
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// if p3 = 104 then
11679: LD_VAR 0 3
11683: PUSH
11684: LD_INT 104
11686: EQUAL
11687: IFFALSE 11697
// sReset := true ;
11689: LD_ADDR_EXP 60
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// if p3 = 105 then
11697: LD_VAR 0 3
11701: PUSH
11702: LD_INT 105
11704: EQUAL
11705: IFFALSE 11715
// sSun := true ;
11707: LD_ADDR_EXP 61
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// if p3 = 106 then
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 106
11722: EQUAL
11723: IFFALSE 11733
// sTiger := true ;
11725: LD_ADDR_EXP 57
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if p3 = 107 then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_INT 107
11740: EQUAL
11741: IFFALSE 11751
// sBomb := true ;
11743: LD_ADDR_EXP 58
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// if p3 = 108 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 108
11758: EQUAL
11759: IFFALSE 11769
// sWound := true ;
11761: LD_ADDR_EXP 66
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// if p3 = 109 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 109
11776: EQUAL
11777: IFFALSE 11787
// sBetray := true ;
11779: LD_ADDR_EXP 70
11783: PUSH
11784: LD_INT 1
11786: ST_TO_ADDR
// if p3 = 110 then
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 110
11794: EQUAL
11795: IFFALSE 11805
// sContamin := true ;
11797: LD_ADDR_EXP 71
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// if p3 = 111 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 111
11812: EQUAL
11813: IFFALSE 11823
// sOil := true ;
11815: LD_ADDR_EXP 73
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if p3 = 112 then
11823: LD_VAR 0 3
11827: PUSH
11828: LD_INT 112
11830: EQUAL
11831: IFFALSE 11841
// sStu := true ;
11833: LD_ADDR_EXP 77
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if p3 = 113 then
11841: LD_VAR 0 3
11845: PUSH
11846: LD_INT 113
11848: EQUAL
11849: IFFALSE 11859
// sBazooka := true ;
11851: LD_ADDR_EXP 80
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// if p3 = 114 then
11859: LD_VAR 0 3
11863: PUSH
11864: LD_INT 114
11866: EQUAL
11867: IFFALSE 11877
// sMortar := true ;
11869: LD_ADDR_EXP 81
11873: PUSH
11874: LD_INT 1
11876: ST_TO_ADDR
// if p3 = 115 then
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 115
11884: EQUAL
11885: IFFALSE 11895
// sRanger := true ;
11887: LD_ADDR_EXP 91
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// if p3 = 116 then
11895: LD_VAR 0 3
11899: PUSH
11900: LD_INT 116
11902: EQUAL
11903: IFFALSE 11913
// sComputer := true ;
11905: LD_ADDR_EXP 92
11909: PUSH
11910: LD_INT 1
11912: ST_TO_ADDR
// if p3 = 117 then
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 117
11920: EQUAL
11921: IFFALSE 11931
// s30 := true ;
11923: LD_ADDR_EXP 93
11927: PUSH
11928: LD_INT 1
11930: ST_TO_ADDR
// if p3 = 118 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 118
11938: EQUAL
11939: IFFALSE 11949
// s60 := true ;
11941: LD_ADDR_EXP 94
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// end ; if p2 = 101 then
11949: LD_VAR 0 2
11953: PUSH
11954: LD_INT 101
11956: EQUAL
11957: IFFALSE 12085
// begin case p3 of 1 :
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 1
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11979
11972: POP
// hHackUnlimitedResources ; 2 :
11973: CALL 24183 0 0
11977: GO 12085
11979: LD_INT 2
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 11994
11987: POP
// hHackSetLevel10 ; 3 :
11988: CALL 24316 0 0
11992: GO 12085
11994: LD_INT 3
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12009
12002: POP
// hHackSetLevel10YourUnits ; 4 :
12003: CALL 24401 0 0
12007: GO 12085
12009: LD_INT 4
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// hHackInvincible ; 5 :
12018: CALL 24849 0 0
12022: GO 12085
12024: LD_INT 5
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12039
12032: POP
// hHackInvisible ; 6 :
12033: CALL 24960 0 0
12037: GO 12085
12039: LD_INT 6
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12054
12047: POP
// hHackChangeYourSide ; 7 :
12048: CALL 25017 0 0
12052: GO 12085
12054: LD_INT 7
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12069
12062: POP
// hHackChangeUnitSide ; 8 :
12063: CALL 25059 0 0
12067: GO 12085
12069: LD_INT 8
12071: DOUBLE
12072: EQUAL
12073: IFTRUE 12077
12075: GO 12084
12077: POP
// hHackFog ; end ;
12078: CALL 25160 0 0
12082: GO 12085
12084: POP
// end ; end ;
12085: LD_VAR 0 7
12089: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12090: GO 12092
12092: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12093: LD_STRING initStreamRollete();
12095: PPUSH
12096: CALL_OW 559
// InitStreamMode ;
12100: CALL 12112 0 0
// DefineStreamItems ( false ) ;
12104: LD_INT 0
12106: PPUSH
12107: CALL 12576 0 1
// end ;
12111: END
// function InitStreamMode ; begin
12112: LD_INT 0
12114: PPUSH
// streamModeActive := false ;
12115: LD_ADDR_EXP 38
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// normalCounter := 36 ;
12123: LD_ADDR_EXP 39
12127: PUSH
12128: LD_INT 36
12130: ST_TO_ADDR
// hardcoreCounter := 18 ;
12131: LD_ADDR_EXP 40
12135: PUSH
12136: LD_INT 18
12138: ST_TO_ADDR
// sRocket := false ;
12139: LD_ADDR_EXP 43
12143: PUSH
12144: LD_INT 0
12146: ST_TO_ADDR
// sSpeed := false ;
12147: LD_ADDR_EXP 42
12151: PUSH
12152: LD_INT 0
12154: ST_TO_ADDR
// sEngine := false ;
12155: LD_ADDR_EXP 44
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// sSpec := false ;
12163: LD_ADDR_EXP 41
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// sLevel := false ;
12171: LD_ADDR_EXP 45
12175: PUSH
12176: LD_INT 0
12178: ST_TO_ADDR
// sArmoury := false ;
12179: LD_ADDR_EXP 46
12183: PUSH
12184: LD_INT 0
12186: ST_TO_ADDR
// sRadar := false ;
12187: LD_ADDR_EXP 47
12191: PUSH
12192: LD_INT 0
12194: ST_TO_ADDR
// sBunker := false ;
12195: LD_ADDR_EXP 48
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
// sHack := false ;
12203: LD_ADDR_EXP 49
12207: PUSH
12208: LD_INT 0
12210: ST_TO_ADDR
// sFire := false ;
12211: LD_ADDR_EXP 50
12215: PUSH
12216: LD_INT 0
12218: ST_TO_ADDR
// sRefresh := false ;
12219: LD_ADDR_EXP 51
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// sExp := false ;
12227: LD_ADDR_EXP 52
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// sDepot := false ;
12235: LD_ADDR_EXP 53
12239: PUSH
12240: LD_INT 0
12242: ST_TO_ADDR
// sFlag := false ;
12243: LD_ADDR_EXP 54
12247: PUSH
12248: LD_INT 0
12250: ST_TO_ADDR
// sKamikadze := false ;
12251: LD_ADDR_EXP 62
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// sTroll := false ;
12259: LD_ADDR_EXP 63
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// sSlow := false ;
12267: LD_ADDR_EXP 64
12271: PUSH
12272: LD_INT 0
12274: ST_TO_ADDR
// sLack := false ;
12275: LD_ADDR_EXP 65
12279: PUSH
12280: LD_INT 0
12282: ST_TO_ADDR
// sTank := false ;
12283: LD_ADDR_EXP 67
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// sRemote := false ;
12291: LD_ADDR_EXP 68
12295: PUSH
12296: LD_INT 0
12298: ST_TO_ADDR
// sPowell := false ;
12299: LD_ADDR_EXP 69
12303: PUSH
12304: LD_INT 0
12306: ST_TO_ADDR
// sTeleport := false ;
12307: LD_ADDR_EXP 72
12311: PUSH
12312: LD_INT 0
12314: ST_TO_ADDR
// sOilTower := false ;
12315: LD_ADDR_EXP 74
12319: PUSH
12320: LD_INT 0
12322: ST_TO_ADDR
// sShovel := false ;
12323: LD_ADDR_EXP 75
12327: PUSH
12328: LD_INT 0
12330: ST_TO_ADDR
// sSheik := false ;
12331: LD_ADDR_EXP 76
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// sEarthquake := false ;
12339: LD_ADDR_EXP 78
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// sAI := false ;
12347: LD_ADDR_EXP 79
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// sCargo := false ;
12355: LD_ADDR_EXP 82
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// sDLaser := false ;
12363: LD_ADDR_EXP 83
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// sExchange := false ;
12371: LD_ADDR_EXP 84
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// sFac := false ;
12379: LD_ADDR_EXP 85
12383: PUSH
12384: LD_INT 0
12386: ST_TO_ADDR
// sPower := false ;
12387: LD_ADDR_EXP 86
12391: PUSH
12392: LD_INT 0
12394: ST_TO_ADDR
// sRandom := false ;
12395: LD_ADDR_EXP 87
12399: PUSH
12400: LD_INT 0
12402: ST_TO_ADDR
// sShield := false ;
12403: LD_ADDR_EXP 88
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// sTime := false ;
12411: LD_ADDR_EXP 89
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// sTools := false ;
12419: LD_ADDR_EXP 90
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// sSold := false ;
12427: LD_ADDR_EXP 55
12431: PUSH
12432: LD_INT 0
12434: ST_TO_ADDR
// sDiff := false ;
12435: LD_ADDR_EXP 56
12439: PUSH
12440: LD_INT 0
12442: ST_TO_ADDR
// sFog := false ;
12443: LD_ADDR_EXP 59
12447: PUSH
12448: LD_INT 0
12450: ST_TO_ADDR
// sReset := false ;
12451: LD_ADDR_EXP 60
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
// sSun := false ;
12459: LD_ADDR_EXP 61
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// sTiger := false ;
12467: LD_ADDR_EXP 57
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// sBomb := false ;
12475: LD_ADDR_EXP 58
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// sWound := false ;
12483: LD_ADDR_EXP 66
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// sBetray := false ;
12491: LD_ADDR_EXP 70
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// sContamin := false ;
12499: LD_ADDR_EXP 71
12503: PUSH
12504: LD_INT 0
12506: ST_TO_ADDR
// sOil := false ;
12507: LD_ADDR_EXP 73
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sStu := false ;
12515: LD_ADDR_EXP 77
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sBazooka := false ;
12523: LD_ADDR_EXP 80
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sMortar := false ;
12531: LD_ADDR_EXP 81
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sRanger := false ;
12539: LD_ADDR_EXP 91
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sComputer := false ;
12547: LD_ADDR_EXP 92
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// s30 := false ;
12555: LD_ADDR_EXP 93
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// s60 := false ;
12563: LD_ADDR_EXP 94
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// end ;
12571: LD_VAR 0 1
12575: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12576: LD_INT 0
12578: PPUSH
12579: PPUSH
12580: PPUSH
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
// result := [ ] ;
12585: LD_ADDR_VAR 0 2
12589: PUSH
12590: EMPTY
12591: ST_TO_ADDR
// if campaign_id = 1 then
12592: LD_OWVAR 69
12596: PUSH
12597: LD_INT 1
12599: EQUAL
12600: IFFALSE 15766
// begin case mission_number of 1 :
12602: LD_OWVAR 70
12606: PUSH
12607: LD_INT 1
12609: DOUBLE
12610: EQUAL
12611: IFTRUE 12615
12613: GO 12691
12615: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: LD_INT 11
12629: PUSH
12630: LD_INT 12
12632: PUSH
12633: LD_INT 15
12635: PUSH
12636: LD_INT 16
12638: PUSH
12639: LD_INT 22
12641: PUSH
12642: LD_INT 23
12644: PUSH
12645: LD_INT 26
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 101
12661: PUSH
12662: LD_INT 102
12664: PUSH
12665: LD_INT 106
12667: PUSH
12668: LD_INT 116
12670: PUSH
12671: LD_INT 117
12673: PUSH
12674: LD_INT 118
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: ST_TO_ADDR
12689: GO 15764
12691: LD_INT 2
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12783
12699: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12700: LD_ADDR_VAR 0 2
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: LD_INT 4
12710: PUSH
12711: LD_INT 11
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: LD_INT 15
12719: PUSH
12720: LD_INT 16
12722: PUSH
12723: LD_INT 22
12725: PUSH
12726: LD_INT 23
12728: PUSH
12729: LD_INT 26
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 101
12745: PUSH
12746: LD_INT 102
12748: PUSH
12749: LD_INT 105
12751: PUSH
12752: LD_INT 106
12754: PUSH
12755: LD_INT 108
12757: PUSH
12758: LD_INT 116
12760: PUSH
12761: LD_INT 117
12763: PUSH
12764: LD_INT 118
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: ST_TO_ADDR
12781: GO 15764
12783: LD_INT 3
12785: DOUBLE
12786: EQUAL
12787: IFTRUE 12791
12789: GO 12879
12791: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12792: LD_ADDR_VAR 0 2
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: LD_INT 4
12802: PUSH
12803: LD_INT 5
12805: PUSH
12806: LD_INT 11
12808: PUSH
12809: LD_INT 12
12811: PUSH
12812: LD_INT 15
12814: PUSH
12815: LD_INT 16
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 26
12823: PUSH
12824: LD_INT 36
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 101
12841: PUSH
12842: LD_INT 102
12844: PUSH
12845: LD_INT 105
12847: PUSH
12848: LD_INT 106
12850: PUSH
12851: LD_INT 108
12853: PUSH
12854: LD_INT 116
12856: PUSH
12857: LD_INT 117
12859: PUSH
12860: LD_INT 118
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: ST_TO_ADDR
12877: GO 15764
12879: LD_INT 4
12881: DOUBLE
12882: EQUAL
12883: IFTRUE 12887
12885: GO 12983
12887: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12888: LD_ADDR_VAR 0 2
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 4
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: LD_INT 8
12904: PUSH
12905: LD_INT 11
12907: PUSH
12908: LD_INT 12
12910: PUSH
12911: LD_INT 15
12913: PUSH
12914: LD_INT 16
12916: PUSH
12917: LD_INT 22
12919: PUSH
12920: LD_INT 23
12922: PUSH
12923: LD_INT 26
12925: PUSH
12926: LD_INT 36
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 101
12945: PUSH
12946: LD_INT 102
12948: PUSH
12949: LD_INT 105
12951: PUSH
12952: LD_INT 106
12954: PUSH
12955: LD_INT 108
12957: PUSH
12958: LD_INT 116
12960: PUSH
12961: LD_INT 117
12963: PUSH
12964: LD_INT 118
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: ST_TO_ADDR
12981: GO 15764
12983: LD_INT 5
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13103
12991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12992: LD_ADDR_VAR 0 2
12996: PUSH
12997: LD_INT 2
12999: PUSH
13000: LD_INT 4
13002: PUSH
13003: LD_INT 5
13005: PUSH
13006: LD_INT 6
13008: PUSH
13009: LD_INT 8
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 15
13020: PUSH
13021: LD_INT 16
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_INT 23
13029: PUSH
13030: LD_INT 25
13032: PUSH
13033: LD_INT 26
13035: PUSH
13036: LD_INT 36
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 101
13057: PUSH
13058: LD_INT 102
13060: PUSH
13061: LD_INT 105
13063: PUSH
13064: LD_INT 106
13066: PUSH
13067: LD_INT 108
13069: PUSH
13070: LD_INT 109
13072: PUSH
13073: LD_INT 112
13075: PUSH
13076: LD_INT 116
13078: PUSH
13079: LD_INT 117
13081: PUSH
13082: LD_INT 118
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: ST_TO_ADDR
13101: GO 15764
13103: LD_INT 6
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13243
13111: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: LD_INT 4
13122: PUSH
13123: LD_INT 5
13125: PUSH
13126: LD_INT 6
13128: PUSH
13129: LD_INT 8
13131: PUSH
13132: LD_INT 11
13134: PUSH
13135: LD_INT 12
13137: PUSH
13138: LD_INT 15
13140: PUSH
13141: LD_INT 16
13143: PUSH
13144: LD_INT 20
13146: PUSH
13147: LD_INT 21
13149: PUSH
13150: LD_INT 22
13152: PUSH
13153: LD_INT 23
13155: PUSH
13156: LD_INT 25
13158: PUSH
13159: LD_INT 26
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 31
13167: PUSH
13168: LD_INT 32
13170: PUSH
13171: LD_INT 36
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 101
13197: PUSH
13198: LD_INT 102
13200: PUSH
13201: LD_INT 105
13203: PUSH
13204: LD_INT 106
13206: PUSH
13207: LD_INT 108
13209: PUSH
13210: LD_INT 109
13212: PUSH
13213: LD_INT 112
13215: PUSH
13216: LD_INT 116
13218: PUSH
13219: LD_INT 117
13221: PUSH
13222: LD_INT 118
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: ST_TO_ADDR
13241: GO 15764
13243: LD_INT 7
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13363
13251: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13252: LD_ADDR_VAR 0 2
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: LD_INT 4
13262: PUSH
13263: LD_INT 5
13265: PUSH
13266: LD_INT 7
13268: PUSH
13269: LD_INT 11
13271: PUSH
13272: LD_INT 12
13274: PUSH
13275: LD_INT 15
13277: PUSH
13278: LD_INT 16
13280: PUSH
13281: LD_INT 20
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 101
13317: PUSH
13318: LD_INT 102
13320: PUSH
13321: LD_INT 103
13323: PUSH
13324: LD_INT 105
13326: PUSH
13327: LD_INT 106
13329: PUSH
13330: LD_INT 108
13332: PUSH
13333: LD_INT 112
13335: PUSH
13336: LD_INT 116
13338: PUSH
13339: LD_INT 117
13341: PUSH
13342: LD_INT 118
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: ST_TO_ADDR
13361: GO 15764
13363: LD_INT 8
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13511
13371: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13372: LD_ADDR_VAR 0 2
13376: PUSH
13377: LD_INT 2
13379: PUSH
13380: LD_INT 4
13382: PUSH
13383: LD_INT 5
13385: PUSH
13386: LD_INT 6
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 36
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 101
13461: PUSH
13462: LD_INT 102
13464: PUSH
13465: LD_INT 103
13467: PUSH
13468: LD_INT 105
13470: PUSH
13471: LD_INT 106
13473: PUSH
13474: LD_INT 108
13476: PUSH
13477: LD_INT 109
13479: PUSH
13480: LD_INT 112
13482: PUSH
13483: LD_INT 116
13485: PUSH
13486: LD_INT 117
13488: PUSH
13489: LD_INT 118
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: ST_TO_ADDR
13509: GO 15764
13511: LD_INT 9
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13667
13519: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: LD_INT 4
13530: PUSH
13531: LD_INT 5
13533: PUSH
13534: LD_INT 6
13536: PUSH
13537: LD_INT 7
13539: PUSH
13540: LD_INT 8
13542: PUSH
13543: LD_INT 11
13545: PUSH
13546: LD_INT 12
13548: PUSH
13549: LD_INT 15
13551: PUSH
13552: LD_INT 16
13554: PUSH
13555: LD_INT 20
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 23
13566: PUSH
13567: LD_INT 25
13569: PUSH
13570: LD_INT 26
13572: PUSH
13573: LD_INT 28
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 31
13581: PUSH
13582: LD_INT 32
13584: PUSH
13585: LD_INT 36
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 101
13613: PUSH
13614: LD_INT 102
13616: PUSH
13617: LD_INT 103
13619: PUSH
13620: LD_INT 105
13622: PUSH
13623: LD_INT 106
13625: PUSH
13626: LD_INT 108
13628: PUSH
13629: LD_INT 109
13631: PUSH
13632: LD_INT 112
13634: PUSH
13635: LD_INT 114
13637: PUSH
13638: LD_INT 116
13640: PUSH
13641: LD_INT 117
13643: PUSH
13644: LD_INT 118
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: ST_TO_ADDR
13665: GO 15764
13667: LD_INT 10
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13871
13675: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_INT 2
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: LD_INT 5
13689: PUSH
13690: LD_INT 6
13692: PUSH
13693: LD_INT 7
13695: PUSH
13696: LD_INT 8
13698: PUSH
13699: LD_INT 9
13701: PUSH
13702: LD_INT 10
13704: PUSH
13705: LD_INT 11
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: LD_INT 13
13713: PUSH
13714: LD_INT 14
13716: PUSH
13717: LD_INT 15
13719: PUSH
13720: LD_INT 16
13722: PUSH
13723: LD_INT 17
13725: PUSH
13726: LD_INT 18
13728: PUSH
13729: LD_INT 19
13731: PUSH
13732: LD_INT 20
13734: PUSH
13735: LD_INT 21
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_INT 23
13743: PUSH
13744: LD_INT 24
13746: PUSH
13747: LD_INT 25
13749: PUSH
13750: LD_INT 26
13752: PUSH
13753: LD_INT 28
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 31
13761: PUSH
13762: LD_INT 32
13764: PUSH
13765: LD_INT 36
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 101
13801: PUSH
13802: LD_INT 102
13804: PUSH
13805: LD_INT 103
13807: PUSH
13808: LD_INT 104
13810: PUSH
13811: LD_INT 105
13813: PUSH
13814: LD_INT 106
13816: PUSH
13817: LD_INT 107
13819: PUSH
13820: LD_INT 108
13822: PUSH
13823: LD_INT 109
13825: PUSH
13826: LD_INT 110
13828: PUSH
13829: LD_INT 111
13831: PUSH
13832: LD_INT 112
13834: PUSH
13835: LD_INT 114
13837: PUSH
13838: LD_INT 116
13840: PUSH
13841: LD_INT 117
13843: PUSH
13844: LD_INT 118
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: ST_TO_ADDR
13869: GO 15764
13871: LD_INT 11
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 14083
13879: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_INT 2
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 5
13896: PUSH
13897: LD_INT 6
13899: PUSH
13900: LD_INT 7
13902: PUSH
13903: LD_INT 8
13905: PUSH
13906: LD_INT 9
13908: PUSH
13909: LD_INT 10
13911: PUSH
13912: LD_INT 11
13914: PUSH
13915: LD_INT 12
13917: PUSH
13918: LD_INT 13
13920: PUSH
13921: LD_INT 14
13923: PUSH
13924: LD_INT 15
13926: PUSH
13927: LD_INT 16
13929: PUSH
13930: LD_INT 17
13932: PUSH
13933: LD_INT 18
13935: PUSH
13936: LD_INT 19
13938: PUSH
13939: LD_INT 20
13941: PUSH
13942: LD_INT 21
13944: PUSH
13945: LD_INT 22
13947: PUSH
13948: LD_INT 23
13950: PUSH
13951: LD_INT 24
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 26
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_INT 30
13965: PUSH
13966: LD_INT 31
13968: PUSH
13969: LD_INT 32
13971: PUSH
13972: LD_INT 34
13974: PUSH
13975: LD_INT 36
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 101
14013: PUSH
14014: LD_INT 102
14016: PUSH
14017: LD_INT 103
14019: PUSH
14020: LD_INT 104
14022: PUSH
14023: LD_INT 105
14025: PUSH
14026: LD_INT 106
14028: PUSH
14029: LD_INT 107
14031: PUSH
14032: LD_INT 108
14034: PUSH
14035: LD_INT 109
14037: PUSH
14038: LD_INT 110
14040: PUSH
14041: LD_INT 111
14043: PUSH
14044: LD_INT 112
14046: PUSH
14047: LD_INT 114
14049: PUSH
14050: LD_INT 116
14052: PUSH
14053: LD_INT 117
14055: PUSH
14056: LD_INT 118
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: ST_TO_ADDR
14081: GO 15764
14083: LD_INT 12
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14311
14091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14092: LD_ADDR_VAR 0 2
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: LD_INT 4
14108: PUSH
14109: LD_INT 5
14111: PUSH
14112: LD_INT 6
14114: PUSH
14115: LD_INT 7
14117: PUSH
14118: LD_INT 8
14120: PUSH
14121: LD_INT 9
14123: PUSH
14124: LD_INT 10
14126: PUSH
14127: LD_INT 11
14129: PUSH
14130: LD_INT 12
14132: PUSH
14133: LD_INT 13
14135: PUSH
14136: LD_INT 14
14138: PUSH
14139: LD_INT 15
14141: PUSH
14142: LD_INT 16
14144: PUSH
14145: LD_INT 17
14147: PUSH
14148: LD_INT 18
14150: PUSH
14151: LD_INT 19
14153: PUSH
14154: LD_INT 20
14156: PUSH
14157: LD_INT 21
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 24
14168: PUSH
14169: LD_INT 25
14171: PUSH
14172: LD_INT 26
14174: PUSH
14175: LD_INT 27
14177: PUSH
14178: LD_INT 28
14180: PUSH
14181: LD_INT 30
14183: PUSH
14184: LD_INT 31
14186: PUSH
14187: LD_INT 32
14189: PUSH
14190: LD_INT 33
14192: PUSH
14193: LD_INT 34
14195: PUSH
14196: LD_INT 36
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 101
14237: PUSH
14238: LD_INT 102
14240: PUSH
14241: LD_INT 103
14243: PUSH
14244: LD_INT 104
14246: PUSH
14247: LD_INT 105
14249: PUSH
14250: LD_INT 106
14252: PUSH
14253: LD_INT 107
14255: PUSH
14256: LD_INT 108
14258: PUSH
14259: LD_INT 109
14261: PUSH
14262: LD_INT 110
14264: PUSH
14265: LD_INT 111
14267: PUSH
14268: LD_INT 112
14270: PUSH
14271: LD_INT 113
14273: PUSH
14274: LD_INT 114
14276: PUSH
14277: LD_INT 116
14279: PUSH
14280: LD_INT 117
14282: PUSH
14283: LD_INT 118
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: ST_TO_ADDR
14309: GO 15764
14311: LD_INT 13
14313: DOUBLE
14314: EQUAL
14315: IFTRUE 14319
14317: GO 14527
14319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14320: LD_ADDR_VAR 0 2
14324: PUSH
14325: LD_INT 1
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 4
14336: PUSH
14337: LD_INT 5
14339: PUSH
14340: LD_INT 8
14342: PUSH
14343: LD_INT 9
14345: PUSH
14346: LD_INT 10
14348: PUSH
14349: LD_INT 11
14351: PUSH
14352: LD_INT 12
14354: PUSH
14355: LD_INT 14
14357: PUSH
14358: LD_INT 15
14360: PUSH
14361: LD_INT 16
14363: PUSH
14364: LD_INT 17
14366: PUSH
14367: LD_INT 18
14369: PUSH
14370: LD_INT 19
14372: PUSH
14373: LD_INT 20
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_INT 23
14384: PUSH
14385: LD_INT 24
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 26
14393: PUSH
14394: LD_INT 27
14396: PUSH
14397: LD_INT 28
14399: PUSH
14400: LD_INT 30
14402: PUSH
14403: LD_INT 31
14405: PUSH
14406: LD_INT 32
14408: PUSH
14409: LD_INT 33
14411: PUSH
14412: LD_INT 34
14414: PUSH
14415: LD_INT 36
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 101
14453: PUSH
14454: LD_INT 102
14456: PUSH
14457: LD_INT 103
14459: PUSH
14460: LD_INT 104
14462: PUSH
14463: LD_INT 105
14465: PUSH
14466: LD_INT 106
14468: PUSH
14469: LD_INT 107
14471: PUSH
14472: LD_INT 108
14474: PUSH
14475: LD_INT 109
14477: PUSH
14478: LD_INT 110
14480: PUSH
14481: LD_INT 111
14483: PUSH
14484: LD_INT 112
14486: PUSH
14487: LD_INT 113
14489: PUSH
14490: LD_INT 114
14492: PUSH
14493: LD_INT 116
14495: PUSH
14496: LD_INT 117
14498: PUSH
14499: LD_INT 118
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: ST_TO_ADDR
14525: GO 15764
14527: LD_INT 14
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14759
14535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14536: LD_ADDR_VAR 0 2
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: LD_INT 3
14549: PUSH
14550: LD_INT 4
14552: PUSH
14553: LD_INT 5
14555: PUSH
14556: LD_INT 6
14558: PUSH
14559: LD_INT 7
14561: PUSH
14562: LD_INT 8
14564: PUSH
14565: LD_INT 9
14567: PUSH
14568: LD_INT 10
14570: PUSH
14571: LD_INT 11
14573: PUSH
14574: LD_INT 12
14576: PUSH
14577: LD_INT 13
14579: PUSH
14580: LD_INT 14
14582: PUSH
14583: LD_INT 15
14585: PUSH
14586: LD_INT 16
14588: PUSH
14589: LD_INT 17
14591: PUSH
14592: LD_INT 18
14594: PUSH
14595: LD_INT 19
14597: PUSH
14598: LD_INT 20
14600: PUSH
14601: LD_INT 21
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_INT 23
14609: PUSH
14610: LD_INT 24
14612: PUSH
14613: LD_INT 25
14615: PUSH
14616: LD_INT 26
14618: PUSH
14619: LD_INT 27
14621: PUSH
14622: LD_INT 28
14624: PUSH
14625: LD_INT 29
14627: PUSH
14628: LD_INT 30
14630: PUSH
14631: LD_INT 31
14633: PUSH
14634: LD_INT 32
14636: PUSH
14637: LD_INT 33
14639: PUSH
14640: LD_INT 34
14642: PUSH
14643: LD_INT 36
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 101
14685: PUSH
14686: LD_INT 102
14688: PUSH
14689: LD_INT 103
14691: PUSH
14692: LD_INT 104
14694: PUSH
14695: LD_INT 105
14697: PUSH
14698: LD_INT 106
14700: PUSH
14701: LD_INT 107
14703: PUSH
14704: LD_INT 108
14706: PUSH
14707: LD_INT 109
14709: PUSH
14710: LD_INT 110
14712: PUSH
14713: LD_INT 111
14715: PUSH
14716: LD_INT 112
14718: PUSH
14719: LD_INT 113
14721: PUSH
14722: LD_INT 114
14724: PUSH
14725: LD_INT 116
14727: PUSH
14728: LD_INT 117
14730: PUSH
14731: LD_INT 118
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: ST_TO_ADDR
14757: GO 15764
14759: LD_INT 15
14761: DOUBLE
14762: EQUAL
14763: IFTRUE 14767
14765: GO 14991
14767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_INT 1
14775: PUSH
14776: LD_INT 2
14778: PUSH
14779: LD_INT 3
14781: PUSH
14782: LD_INT 4
14784: PUSH
14785: LD_INT 5
14787: PUSH
14788: LD_INT 6
14790: PUSH
14791: LD_INT 7
14793: PUSH
14794: LD_INT 8
14796: PUSH
14797: LD_INT 9
14799: PUSH
14800: LD_INT 10
14802: PUSH
14803: LD_INT 11
14805: PUSH
14806: LD_INT 12
14808: PUSH
14809: LD_INT 13
14811: PUSH
14812: LD_INT 14
14814: PUSH
14815: LD_INT 15
14817: PUSH
14818: LD_INT 16
14820: PUSH
14821: LD_INT 17
14823: PUSH
14824: LD_INT 18
14826: PUSH
14827: LD_INT 19
14829: PUSH
14830: LD_INT 20
14832: PUSH
14833: LD_INT 21
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_INT 23
14841: PUSH
14842: LD_INT 24
14844: PUSH
14845: LD_INT 25
14847: PUSH
14848: LD_INT 26
14850: PUSH
14851: LD_INT 27
14853: PUSH
14854: LD_INT 28
14856: PUSH
14857: LD_INT 29
14859: PUSH
14860: LD_INT 30
14862: PUSH
14863: LD_INT 31
14865: PUSH
14866: LD_INT 32
14868: PUSH
14869: LD_INT 33
14871: PUSH
14872: LD_INT 34
14874: PUSH
14875: LD_INT 36
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 103
14923: PUSH
14924: LD_INT 104
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 107
14935: PUSH
14936: LD_INT 108
14938: PUSH
14939: LD_INT 109
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 111
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: LD_INT 113
14953: PUSH
14954: LD_INT 114
14956: PUSH
14957: LD_INT 116
14959: PUSH
14960: LD_INT 117
14962: PUSH
14963: LD_INT 118
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 15764
14991: LD_INT 16
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15135
14999: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 4
15010: PUSH
15011: LD_INT 5
15013: PUSH
15014: LD_INT 7
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 12
15022: PUSH
15023: LD_INT 15
15025: PUSH
15026: LD_INT 16
15028: PUSH
15029: LD_INT 20
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 23
15040: PUSH
15041: LD_INT 25
15043: PUSH
15044: LD_INT 26
15046: PUSH
15047: LD_INT 30
15049: PUSH
15050: LD_INT 31
15052: PUSH
15053: LD_INT 32
15055: PUSH
15056: LD_INT 33
15058: PUSH
15059: LD_INT 34
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 101
15085: PUSH
15086: LD_INT 102
15088: PUSH
15089: LD_INT 103
15091: PUSH
15092: LD_INT 106
15094: PUSH
15095: LD_INT 108
15097: PUSH
15098: LD_INT 112
15100: PUSH
15101: LD_INT 113
15103: PUSH
15104: LD_INT 114
15106: PUSH
15107: LD_INT 116
15109: PUSH
15110: LD_INT 117
15112: PUSH
15113: LD_INT 118
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: ST_TO_ADDR
15133: GO 15764
15135: LD_INT 17
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15143
15141: GO 15367
15143: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15144: LD_ADDR_VAR 0 2
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 3
15157: PUSH
15158: LD_INT 4
15160: PUSH
15161: LD_INT 5
15163: PUSH
15164: LD_INT 6
15166: PUSH
15167: LD_INT 7
15169: PUSH
15170: LD_INT 8
15172: PUSH
15173: LD_INT 9
15175: PUSH
15176: LD_INT 10
15178: PUSH
15179: LD_INT 11
15181: PUSH
15182: LD_INT 12
15184: PUSH
15185: LD_INT 13
15187: PUSH
15188: LD_INT 14
15190: PUSH
15191: LD_INT 15
15193: PUSH
15194: LD_INT 16
15196: PUSH
15197: LD_INT 17
15199: PUSH
15200: LD_INT 18
15202: PUSH
15203: LD_INT 19
15205: PUSH
15206: LD_INT 20
15208: PUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 22
15214: PUSH
15215: LD_INT 23
15217: PUSH
15218: LD_INT 24
15220: PUSH
15221: LD_INT 25
15223: PUSH
15224: LD_INT 26
15226: PUSH
15227: LD_INT 27
15229: PUSH
15230: LD_INT 28
15232: PUSH
15233: LD_INT 29
15235: PUSH
15236: LD_INT 30
15238: PUSH
15239: LD_INT 31
15241: PUSH
15242: LD_INT 32
15244: PUSH
15245: LD_INT 33
15247: PUSH
15248: LD_INT 34
15250: PUSH
15251: LD_INT 36
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 101
15293: PUSH
15294: LD_INT 102
15296: PUSH
15297: LD_INT 103
15299: PUSH
15300: LD_INT 104
15302: PUSH
15303: LD_INT 105
15305: PUSH
15306: LD_INT 106
15308: PUSH
15309: LD_INT 107
15311: PUSH
15312: LD_INT 108
15314: PUSH
15315: LD_INT 109
15317: PUSH
15318: LD_INT 110
15320: PUSH
15321: LD_INT 111
15323: PUSH
15324: LD_INT 112
15326: PUSH
15327: LD_INT 113
15329: PUSH
15330: LD_INT 114
15332: PUSH
15333: LD_INT 116
15335: PUSH
15336: LD_INT 117
15338: PUSH
15339: LD_INT 118
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: ST_TO_ADDR
15365: GO 15764
15367: LD_INT 18
15369: DOUBLE
15370: EQUAL
15371: IFTRUE 15375
15373: GO 15523
15375: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: LD_INT 2
15383: PUSH
15384: LD_INT 4
15386: PUSH
15387: LD_INT 5
15389: PUSH
15390: LD_INT 7
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 12
15398: PUSH
15399: LD_INT 15
15401: PUSH
15402: LD_INT 16
15404: PUSH
15405: LD_INT 20
15407: PUSH
15408: LD_INT 21
15410: PUSH
15411: LD_INT 22
15413: PUSH
15414: LD_INT 23
15416: PUSH
15417: LD_INT 25
15419: PUSH
15420: LD_INT 26
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 31
15428: PUSH
15429: LD_INT 32
15431: PUSH
15432: LD_INT 33
15434: PUSH
15435: LD_INT 34
15437: PUSH
15438: LD_INT 35
15440: PUSH
15441: LD_INT 36
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 101
15469: PUSH
15470: LD_INT 102
15472: PUSH
15473: LD_INT 103
15475: PUSH
15476: LD_INT 106
15478: PUSH
15479: LD_INT 108
15481: PUSH
15482: LD_INT 112
15484: PUSH
15485: LD_INT 113
15487: PUSH
15488: LD_INT 114
15490: PUSH
15491: LD_INT 115
15493: PUSH
15494: LD_INT 116
15496: PUSH
15497: LD_INT 117
15499: PUSH
15500: LD_INT 118
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: ST_TO_ADDR
15521: GO 15764
15523: LD_INT 19
15525: DOUBLE
15526: EQUAL
15527: IFTRUE 15531
15529: GO 15763
15531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: LD_INT 2
15542: PUSH
15543: LD_INT 3
15545: PUSH
15546: LD_INT 4
15548: PUSH
15549: LD_INT 5
15551: PUSH
15552: LD_INT 6
15554: PUSH
15555: LD_INT 7
15557: PUSH
15558: LD_INT 8
15560: PUSH
15561: LD_INT 9
15563: PUSH
15564: LD_INT 10
15566: PUSH
15567: LD_INT 11
15569: PUSH
15570: LD_INT 12
15572: PUSH
15573: LD_INT 13
15575: PUSH
15576: LD_INT 14
15578: PUSH
15579: LD_INT 15
15581: PUSH
15582: LD_INT 16
15584: PUSH
15585: LD_INT 17
15587: PUSH
15588: LD_INT 18
15590: PUSH
15591: LD_INT 19
15593: PUSH
15594: LD_INT 20
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_INT 23
15605: PUSH
15606: LD_INT 24
15608: PUSH
15609: LD_INT 25
15611: PUSH
15612: LD_INT 26
15614: PUSH
15615: LD_INT 27
15617: PUSH
15618: LD_INT 28
15620: PUSH
15621: LD_INT 29
15623: PUSH
15624: LD_INT 30
15626: PUSH
15627: LD_INT 31
15629: PUSH
15630: LD_INT 32
15632: PUSH
15633: LD_INT 33
15635: PUSH
15636: LD_INT 34
15638: PUSH
15639: LD_INT 35
15641: PUSH
15642: LD_INT 36
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 101
15685: PUSH
15686: LD_INT 102
15688: PUSH
15689: LD_INT 103
15691: PUSH
15692: LD_INT 104
15694: PUSH
15695: LD_INT 105
15697: PUSH
15698: LD_INT 106
15700: PUSH
15701: LD_INT 107
15703: PUSH
15704: LD_INT 108
15706: PUSH
15707: LD_INT 109
15709: PUSH
15710: LD_INT 110
15712: PUSH
15713: LD_INT 111
15715: PUSH
15716: LD_INT 112
15718: PUSH
15719: LD_INT 113
15721: PUSH
15722: LD_INT 114
15724: PUSH
15725: LD_INT 115
15727: PUSH
15728: LD_INT 116
15730: PUSH
15731: LD_INT 117
15733: PUSH
15734: LD_INT 118
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: ST_TO_ADDR
15761: GO 15764
15763: POP
// end else
15764: GO 15995
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15766: LD_ADDR_VAR 0 2
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 3
15779: PUSH
15780: LD_INT 4
15782: PUSH
15783: LD_INT 5
15785: PUSH
15786: LD_INT 6
15788: PUSH
15789: LD_INT 7
15791: PUSH
15792: LD_INT 8
15794: PUSH
15795: LD_INT 9
15797: PUSH
15798: LD_INT 10
15800: PUSH
15801: LD_INT 11
15803: PUSH
15804: LD_INT 12
15806: PUSH
15807: LD_INT 13
15809: PUSH
15810: LD_INT 14
15812: PUSH
15813: LD_INT 15
15815: PUSH
15816: LD_INT 16
15818: PUSH
15819: LD_INT 17
15821: PUSH
15822: LD_INT 18
15824: PUSH
15825: LD_INT 19
15827: PUSH
15828: LD_INT 20
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_INT 23
15839: PUSH
15840: LD_INT 24
15842: PUSH
15843: LD_INT 25
15845: PUSH
15846: LD_INT 26
15848: PUSH
15849: LD_INT 27
15851: PUSH
15852: LD_INT 28
15854: PUSH
15855: LD_INT 29
15857: PUSH
15858: LD_INT 30
15860: PUSH
15861: LD_INT 31
15863: PUSH
15864: LD_INT 32
15866: PUSH
15867: LD_INT 33
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 35
15875: PUSH
15876: LD_INT 36
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 101
15919: PUSH
15920: LD_INT 102
15922: PUSH
15923: LD_INT 103
15925: PUSH
15926: LD_INT 104
15928: PUSH
15929: LD_INT 105
15931: PUSH
15932: LD_INT 106
15934: PUSH
15935: LD_INT 107
15937: PUSH
15938: LD_INT 108
15940: PUSH
15941: LD_INT 109
15943: PUSH
15944: LD_INT 110
15946: PUSH
15947: LD_INT 111
15949: PUSH
15950: LD_INT 112
15952: PUSH
15953: LD_INT 113
15955: PUSH
15956: LD_INT 114
15958: PUSH
15959: LD_INT 115
15961: PUSH
15962: LD_INT 116
15964: PUSH
15965: LD_INT 117
15967: PUSH
15968: LD_INT 118
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: ST_TO_ADDR
// if result then
15995: LD_VAR 0 2
15999: IFFALSE 16785
// begin normal :=  ;
16001: LD_ADDR_VAR 0 5
16005: PUSH
16006: LD_STRING 
16008: ST_TO_ADDR
// hardcore :=  ;
16009: LD_ADDR_VAR 0 6
16013: PUSH
16014: LD_STRING 
16016: ST_TO_ADDR
// active :=  ;
16017: LD_ADDR_VAR 0 7
16021: PUSH
16022: LD_STRING 
16024: ST_TO_ADDR
// for i = 1 to normalCounter do
16025: LD_ADDR_VAR 0 8
16029: PUSH
16030: DOUBLE
16031: LD_INT 1
16033: DEC
16034: ST_TO_ADDR
16035: LD_EXP 39
16039: PUSH
16040: FOR_TO
16041: IFFALSE 16142
// begin tmp := 0 ;
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_STRING 0
16050: ST_TO_ADDR
// if result [ 1 ] then
16051: LD_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: IFFALSE 16124
// if result [ 1 ] [ 1 ] = i then
16061: LD_VAR 0 2
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PUSH
16074: LD_VAR 0 8
16078: EQUAL
16079: IFFALSE 16124
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: LD_VAR 0 2
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 3
16110: PPUSH
16111: CALL_OW 1
16115: ST_TO_ADDR
// tmp := 1 ;
16116: LD_ADDR_VAR 0 3
16120: PUSH
16121: LD_STRING 1
16123: ST_TO_ADDR
// end ; normal := normal & tmp ;
16124: LD_ADDR_VAR 0 5
16128: PUSH
16129: LD_VAR 0 5
16133: PUSH
16134: LD_VAR 0 3
16138: STR
16139: ST_TO_ADDR
// end ;
16140: GO 16040
16142: POP
16143: POP
// for i = 1 to hardcoreCounter do
16144: LD_ADDR_VAR 0 8
16148: PUSH
16149: DOUBLE
16150: LD_INT 1
16152: DEC
16153: ST_TO_ADDR
16154: LD_EXP 40
16158: PUSH
16159: FOR_TO
16160: IFFALSE 16265
// begin tmp := 0 ;
16162: LD_ADDR_VAR 0 3
16166: PUSH
16167: LD_STRING 0
16169: ST_TO_ADDR
// if result [ 2 ] then
16170: LD_VAR 0 2
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: IFFALSE 16247
// if result [ 2 ] [ 1 ] = 100 + i then
16180: LD_VAR 0 2
16184: PUSH
16185: LD_INT 2
16187: ARRAY
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PUSH
16193: LD_INT 100
16195: PUSH
16196: LD_VAR 0 8
16200: PLUS
16201: EQUAL
16202: IFFALSE 16247
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16204: LD_ADDR_VAR 0 2
16208: PUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: LD_INT 2
16216: PPUSH
16217: LD_VAR 0 2
16221: PUSH
16222: LD_INT 2
16224: ARRAY
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: CALL_OW 3
16233: PPUSH
16234: CALL_OW 1
16238: ST_TO_ADDR
// tmp := 1 ;
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_STRING 1
16246: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16247: LD_ADDR_VAR 0 6
16251: PUSH
16252: LD_VAR 0 6
16256: PUSH
16257: LD_VAR 0 3
16261: STR
16262: ST_TO_ADDR
// end ;
16263: GO 16159
16265: POP
16266: POP
// if isGameLoad then
16267: LD_VAR 0 1
16271: IFFALSE 16746
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: LD_EXP 43
16282: PUSH
16283: LD_EXP 42
16287: PUSH
16288: LD_EXP 44
16292: PUSH
16293: LD_EXP 41
16297: PUSH
16298: LD_EXP 45
16302: PUSH
16303: LD_EXP 46
16307: PUSH
16308: LD_EXP 47
16312: PUSH
16313: LD_EXP 48
16317: PUSH
16318: LD_EXP 49
16322: PUSH
16323: LD_EXP 50
16327: PUSH
16328: LD_EXP 51
16332: PUSH
16333: LD_EXP 52
16337: PUSH
16338: LD_EXP 53
16342: PUSH
16343: LD_EXP 54
16347: PUSH
16348: LD_EXP 62
16352: PUSH
16353: LD_EXP 63
16357: PUSH
16358: LD_EXP 64
16362: PUSH
16363: LD_EXP 65
16367: PUSH
16368: LD_EXP 67
16372: PUSH
16373: LD_EXP 68
16377: PUSH
16378: LD_EXP 69
16382: PUSH
16383: LD_EXP 72
16387: PUSH
16388: LD_EXP 74
16392: PUSH
16393: LD_EXP 75
16397: PUSH
16398: LD_EXP 76
16402: PUSH
16403: LD_EXP 78
16407: PUSH
16408: LD_EXP 79
16412: PUSH
16413: LD_EXP 82
16417: PUSH
16418: LD_EXP 83
16422: PUSH
16423: LD_EXP 84
16427: PUSH
16428: LD_EXP 85
16432: PUSH
16433: LD_EXP 86
16437: PUSH
16438: LD_EXP 87
16442: PUSH
16443: LD_EXP 88
16447: PUSH
16448: LD_EXP 89
16452: PUSH
16453: LD_EXP 90
16457: PUSH
16458: LD_EXP 55
16462: PUSH
16463: LD_EXP 56
16467: PUSH
16468: LD_EXP 59
16472: PUSH
16473: LD_EXP 60
16477: PUSH
16478: LD_EXP 61
16482: PUSH
16483: LD_EXP 57
16487: PUSH
16488: LD_EXP 58
16492: PUSH
16493: LD_EXP 66
16497: PUSH
16498: LD_EXP 70
16502: PUSH
16503: LD_EXP 71
16507: PUSH
16508: LD_EXP 73
16512: PUSH
16513: LD_EXP 77
16517: PUSH
16518: LD_EXP 80
16522: PUSH
16523: LD_EXP 81
16527: PUSH
16528: LD_EXP 91
16532: PUSH
16533: LD_EXP 92
16537: PUSH
16538: LD_EXP 93
16542: PUSH
16543: LD_EXP 94
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: ST_TO_ADDR
// tmp :=  ;
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_STRING 
16611: ST_TO_ADDR
// for i = 1 to normalCounter do
16612: LD_ADDR_VAR 0 8
16616: PUSH
16617: DOUBLE
16618: LD_INT 1
16620: DEC
16621: ST_TO_ADDR
16622: LD_EXP 39
16626: PUSH
16627: FOR_TO
16628: IFFALSE 16664
// begin if flags [ i ] then
16630: LD_VAR 0 4
16634: PUSH
16635: LD_VAR 0 8
16639: ARRAY
16640: IFFALSE 16662
// tmp := tmp & i & ; ;
16642: LD_ADDR_VAR 0 3
16646: PUSH
16647: LD_VAR 0 3
16651: PUSH
16652: LD_VAR 0 8
16656: STR
16657: PUSH
16658: LD_STRING ;
16660: STR
16661: ST_TO_ADDR
// end ;
16662: GO 16627
16664: POP
16665: POP
// for i = 1 to hardcoreCounter do
16666: LD_ADDR_VAR 0 8
16670: PUSH
16671: DOUBLE
16672: LD_INT 1
16674: DEC
16675: ST_TO_ADDR
16676: LD_EXP 40
16680: PUSH
16681: FOR_TO
16682: IFFALSE 16728
// begin if flags [ normalCounter + i ] then
16684: LD_VAR 0 4
16688: PUSH
16689: LD_EXP 39
16693: PUSH
16694: LD_VAR 0 8
16698: PLUS
16699: ARRAY
16700: IFFALSE 16726
// tmp := tmp & ( 100 + i ) & ; ;
16702: LD_ADDR_VAR 0 3
16706: PUSH
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 100
16714: PUSH
16715: LD_VAR 0 8
16719: PLUS
16720: STR
16721: PUSH
16722: LD_STRING ;
16724: STR
16725: ST_TO_ADDR
// end ;
16726: GO 16681
16728: POP
16729: POP
// if tmp then
16730: LD_VAR 0 3
16734: IFFALSE 16746
// active := tmp ;
16736: LD_ADDR_VAR 0 7
16740: PUSH
16741: LD_VAR 0 3
16745: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16746: LD_STRING getStreamItemsFromMission("
16748: PUSH
16749: LD_VAR 0 5
16753: STR
16754: PUSH
16755: LD_STRING ","
16757: STR
16758: PUSH
16759: LD_VAR 0 6
16763: STR
16764: PUSH
16765: LD_STRING ","
16767: STR
16768: PUSH
16769: LD_VAR 0 7
16773: STR
16774: PUSH
16775: LD_STRING ")
16777: STR
16778: PPUSH
16779: CALL_OW 559
// end else
16783: GO 16792
// ToLua ( getStreamItemsFromMission("","","") ) ;
16785: LD_STRING getStreamItemsFromMission("","","")
16787: PPUSH
16788: CALL_OW 559
// end ;
16792: LD_VAR 0 2
16796: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16797: LD_EXP 38
16801: PUSH
16802: LD_EXP 43
16806: AND
16807: IFFALSE 16931
16809: GO 16811
16811: DISABLE
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
// begin enable ;
16816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16817: LD_ADDR_VAR 0 2
16821: PUSH
16822: LD_INT 22
16824: PUSH
16825: LD_OWVAR 2
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 34
16839: PUSH
16840: LD_INT 7
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 34
16849: PUSH
16850: LD_INT 45
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 34
16859: PUSH
16860: LD_INT 28
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 34
16869: PUSH
16870: LD_INT 47
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PPUSH
16888: CALL_OW 69
16892: ST_TO_ADDR
// if not tmp then
16893: LD_VAR 0 2
16897: NOT
16898: IFFALSE 16902
// exit ;
16900: GO 16931
// for i in tmp do
16902: LD_ADDR_VAR 0 1
16906: PUSH
16907: LD_VAR 0 2
16911: PUSH
16912: FOR_IN
16913: IFFALSE 16929
// begin SetLives ( i , 0 ) ;
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_INT 0
16922: PPUSH
16923: CALL_OW 234
// end ;
16927: GO 16912
16929: POP
16930: POP
// end ;
16931: PPOPN 2
16933: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16934: LD_EXP 38
16938: PUSH
16939: LD_EXP 44
16943: AND
16944: IFFALSE 17028
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
// begin enable ;
16953: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_INT 22
16961: PUSH
16962: LD_OWVAR 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 32
16973: PUSH
16974: LD_INT 3
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: ST_TO_ADDR
// if not tmp then
16990: LD_VAR 0 2
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17028
// for i in tmp do
16999: LD_ADDR_VAR 0 1
17003: PUSH
17004: LD_VAR 0 2
17008: PUSH
17009: FOR_IN
17010: IFFALSE 17026
// begin SetLives ( i , 0 ) ;
17012: LD_VAR 0 1
17016: PPUSH
17017: LD_INT 0
17019: PPUSH
17020: CALL_OW 234
// end ;
17024: GO 17009
17026: POP
17027: POP
// end ;
17028: PPOPN 2
17030: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17031: LD_EXP 38
17035: PUSH
17036: LD_EXP 41
17040: AND
17041: IFFALSE 17134
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
// begin enable ;
17049: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_OWVAR 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 25
17072: PUSH
17073: LD_INT 5
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 25
17082: PUSH
17083: LD_INT 9
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 25
17092: PUSH
17093: LD_INT 8
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17132
// begin SetClass ( i , 1 ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: CALL_OW 336
// end ;
17130: GO 17115
17132: POP
17133: POP
// end ;
17134: PPOPN 1
17136: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17137: LD_EXP 38
17141: PUSH
17142: LD_EXP 42
17146: AND
17147: PUSH
17148: LD_OWVAR 65
17152: PUSH
17153: LD_INT 7
17155: LESS
17156: AND
17157: IFFALSE 17171
17159: GO 17161
17161: DISABLE
// begin enable ;
17162: ENABLE
// game_speed := 7 ;
17163: LD_ADDR_OWVAR 65
17167: PUSH
17168: LD_INT 7
17170: ST_TO_ADDR
// end ;
17171: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17172: LD_EXP 38
17176: PUSH
17177: LD_EXP 45
17181: AND
17182: IFFALSE 17384
17184: GO 17186
17186: DISABLE
17187: LD_INT 0
17189: PPUSH
17190: PPUSH
17191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17192: LD_ADDR_VAR 0 3
17196: PUSH
17197: LD_INT 81
17199: PUSH
17200: LD_OWVAR 2
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 21
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: ST_TO_ADDR
// if not tmp then
17228: LD_VAR 0 3
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17384
// if tmp > 5 then
17237: LD_VAR 0 3
17241: PUSH
17242: LD_INT 5
17244: GREATER
17245: IFFALSE 17257
// k := 5 else
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: LD_INT 5
17254: ST_TO_ADDR
17255: GO 17267
// k := tmp ;
17257: LD_ADDR_VAR 0 2
17261: PUSH
17262: LD_VAR 0 3
17266: ST_TO_ADDR
// for i := 1 to k do
17267: LD_ADDR_VAR 0 1
17271: PUSH
17272: DOUBLE
17273: LD_INT 1
17275: DEC
17276: ST_TO_ADDR
17277: LD_VAR 0 2
17281: PUSH
17282: FOR_TO
17283: IFFALSE 17382
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17285: LD_VAR 0 3
17289: PUSH
17290: LD_VAR 0 1
17294: ARRAY
17295: PPUSH
17296: LD_VAR 0 1
17300: PUSH
17301: LD_INT 4
17303: MOD
17304: PUSH
17305: LD_INT 1
17307: PLUS
17308: PPUSH
17309: CALL_OW 259
17313: PUSH
17314: LD_INT 10
17316: LESS
17317: IFFALSE 17380
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17319: LD_VAR 0 3
17323: PUSH
17324: LD_VAR 0 1
17328: ARRAY
17329: PPUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 4
17337: MOD
17338: PUSH
17339: LD_INT 1
17341: PLUS
17342: PPUSH
17343: LD_VAR 0 3
17347: PUSH
17348: LD_VAR 0 1
17352: ARRAY
17353: PPUSH
17354: LD_VAR 0 1
17358: PUSH
17359: LD_INT 4
17361: MOD
17362: PUSH
17363: LD_INT 1
17365: PLUS
17366: PPUSH
17367: CALL_OW 259
17371: PUSH
17372: LD_INT 1
17374: PLUS
17375: PPUSH
17376: CALL_OW 237
17380: GO 17282
17382: POP
17383: POP
// end ;
17384: PPOPN 3
17386: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17387: LD_EXP 38
17391: PUSH
17392: LD_EXP 46
17396: AND
17397: IFFALSE 17417
17399: GO 17401
17401: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17402: LD_INT 4
17404: PPUSH
17405: LD_OWVAR 2
17409: PPUSH
17410: LD_INT 0
17412: PPUSH
17413: CALL_OW 324
17417: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17418: LD_EXP 38
17422: PUSH
17423: LD_EXP 75
17427: AND
17428: IFFALSE 17448
17430: GO 17432
17432: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17433: LD_INT 19
17435: PPUSH
17436: LD_OWVAR 2
17440: PPUSH
17441: LD_INT 0
17443: PPUSH
17444: CALL_OW 324
17448: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17449: LD_EXP 38
17453: PUSH
17454: LD_EXP 47
17458: AND
17459: IFFALSE 17561
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
// begin enable ;
17468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 22
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 34
17491: PUSH
17492: LD_INT 11
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 34
17501: PUSH
17502: LD_INT 30
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17561
// for i in tmp do
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_VAR 0 2
17541: PUSH
17542: FOR_IN
17543: IFFALSE 17559
// begin SetLives ( i , 0 ) ;
17545: LD_VAR 0 1
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 234
// end ;
17557: GO 17542
17559: POP
17560: POP
// end ;
17561: PPOPN 2
17563: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17564: LD_EXP 38
17568: PUSH
17569: LD_EXP 48
17573: AND
17574: IFFALSE 17594
17576: GO 17578
17578: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17579: LD_INT 32
17581: PPUSH
17582: LD_OWVAR 2
17586: PPUSH
17587: LD_INT 0
17589: PPUSH
17590: CALL_OW 324
17594: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17595: LD_EXP 38
17599: PUSH
17600: LD_EXP 49
17604: AND
17605: IFFALSE 17786
17607: GO 17609
17609: DISABLE
17610: LD_INT 0
17612: PPUSH
17613: PPUSH
17614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17615: LD_ADDR_VAR 0 2
17619: PUSH
17620: LD_INT 22
17622: PUSH
17623: LD_OWVAR 2
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 33
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: ST_TO_ADDR
// if not tmp then
17651: LD_VAR 0 2
17655: NOT
17656: IFFALSE 17660
// exit ;
17658: GO 17786
// side := 0 ;
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_INT 0
17667: ST_TO_ADDR
// for i := 1 to 8 do
17668: LD_ADDR_VAR 0 1
17672: PUSH
17673: DOUBLE
17674: LD_INT 1
17676: DEC
17677: ST_TO_ADDR
17678: LD_INT 8
17680: PUSH
17681: FOR_TO
17682: IFFALSE 17730
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17684: LD_OWVAR 2
17688: PUSH
17689: LD_VAR 0 1
17693: NONEQUAL
17694: PUSH
17695: LD_OWVAR 2
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 81
17709: PUSH
17710: LD_INT 2
17712: EQUAL
17713: AND
17714: IFFALSE 17728
// begin side := i ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_VAR 0 1
17725: ST_TO_ADDR
// break ;
17726: GO 17730
// end ;
17728: GO 17681
17730: POP
17731: POP
// if not side then
17732: LD_VAR 0 3
17736: NOT
17737: IFFALSE 17741
// exit ;
17739: GO 17786
// for i := 1 to tmp do
17741: LD_ADDR_VAR 0 1
17745: PUSH
17746: DOUBLE
17747: LD_INT 1
17749: DEC
17750: ST_TO_ADDR
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17784
// if Prob ( 60 ) then
17759: LD_INT 60
17761: PPUSH
17762: CALL_OW 13
17766: IFFALSE 17782
// SetSide ( i , side ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: CALL_OW 235
17782: GO 17756
17784: POP
17785: POP
// end ;
17786: PPOPN 3
17788: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17789: LD_EXP 38
17793: PUSH
17794: LD_EXP 51
17798: AND
17799: IFFALSE 17918
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17807: LD_ADDR_VAR 0 1
17811: PUSH
17812: LD_INT 22
17814: PUSH
17815: LD_OWVAR 2
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 21
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: LD_INT 23
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: PPUSH
17856: CALL_OW 69
17860: PUSH
17861: FOR_IN
17862: IFFALSE 17916
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17864: LD_VAR 0 1
17868: PPUSH
17869: CALL_OW 257
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: LD_INT 4
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: IN
17892: IFFALSE 17914
// SetClass ( un , rand ( 1 , 4 ) ) ;
17894: LD_VAR 0 1
17898: PPUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_INT 4
17904: PPUSH
17905: CALL_OW 12
17909: PPUSH
17910: CALL_OW 336
17914: GO 17861
17916: POP
17917: POP
// end ;
17918: PPOPN 1
17920: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17921: LD_EXP 38
17925: PUSH
17926: LD_EXP 50
17930: AND
17931: IFFALSE 18010
17933: GO 17935
17935: DISABLE
17936: LD_INT 0
17938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17939: LD_ADDR_VAR 0 1
17943: PUSH
17944: LD_INT 22
17946: PUSH
17947: LD_OWVAR 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 3
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: ST_TO_ADDR
// if not tmp then
17975: LD_VAR 0 1
17979: NOT
17980: IFFALSE 17984
// exit ;
17982: GO 18010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17984: LD_VAR 0 1
17988: PUSH
17989: LD_INT 1
17991: PPUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 12
18001: ARRAY
18002: PPUSH
18003: LD_INT 100
18005: PPUSH
18006: CALL_OW 234
// end ;
18010: PPOPN 1
18012: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18013: LD_EXP 38
18017: PUSH
18018: LD_EXP 52
18022: AND
18023: IFFALSE 18121
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_OWVAR 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 21
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: ST_TO_ADDR
// if not tmp then
18067: LD_VAR 0 1
18071: NOT
18072: IFFALSE 18076
// exit ;
18074: GO 18121
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_VAR 0 1
18088: PPUSH
18089: CALL_OW 12
18093: ARRAY
18094: PPUSH
18095: LD_INT 1
18097: PPUSH
18098: LD_INT 4
18100: PPUSH
18101: CALL_OW 12
18105: PPUSH
18106: LD_INT 3000
18108: PPUSH
18109: LD_INT 9000
18111: PPUSH
18112: CALL_OW 12
18116: PPUSH
18117: CALL_OW 492
// end ;
18121: PPOPN 1
18123: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18124: LD_EXP 38
18128: PUSH
18129: LD_EXP 53
18133: AND
18134: IFFALSE 18154
18136: GO 18138
18138: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18139: LD_INT 1
18141: PPUSH
18142: LD_OWVAR 2
18146: PPUSH
18147: LD_INT 0
18149: PPUSH
18150: CALL_OW 324
18154: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18155: LD_EXP 38
18159: PUSH
18160: LD_EXP 54
18164: AND
18165: IFFALSE 18248
18167: GO 18169
18169: DISABLE
18170: LD_INT 0
18172: PPUSH
18173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_OWVAR 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not tmp then
18210: LD_VAR 0 2
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18248
// for i in tmp do
18219: LD_ADDR_VAR 0 1
18223: PUSH
18224: LD_VAR 0 2
18228: PUSH
18229: FOR_IN
18230: IFFALSE 18246
// SetBLevel ( i , 10 ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_INT 10
18239: PPUSH
18240: CALL_OW 241
18244: GO 18229
18246: POP
18247: POP
// end ;
18248: PPOPN 2
18250: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18251: LD_EXP 38
18255: PUSH
18256: LD_EXP 55
18260: AND
18261: IFFALSE 18372
18263: GO 18265
18265: DISABLE
18266: LD_INT 0
18268: PPUSH
18269: PPUSH
18270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18271: LD_ADDR_VAR 0 3
18275: PUSH
18276: LD_INT 22
18278: PUSH
18279: LD_OWVAR 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 25
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: ST_TO_ADDR
// if not tmp then
18307: LD_VAR 0 3
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18372
// un := tmp [ rand ( 1 , tmp ) ] ;
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: LD_VAR 0 3
18325: PUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_VAR 0 3
18333: PPUSH
18334: CALL_OW 12
18338: ARRAY
18339: ST_TO_ADDR
// if Crawls ( un ) then
18340: LD_VAR 0 2
18344: PPUSH
18345: CALL_OW 318
18349: IFFALSE 18360
// ComWalk ( un ) ;
18351: LD_VAR 0 2
18355: PPUSH
18356: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_INT 5
18367: PPUSH
18368: CALL_OW 336
// end ;
18372: PPOPN 3
18374: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18375: LD_EXP 38
18379: PUSH
18380: LD_EXP 56
18384: AND
18385: PUSH
18386: LD_OWVAR 67
18390: PUSH
18391: LD_INT 4
18393: LESS
18394: AND
18395: IFFALSE 18414
18397: GO 18399
18399: DISABLE
// begin Difficulty := Difficulty + 1 ;
18400: LD_ADDR_OWVAR 67
18404: PUSH
18405: LD_OWVAR 67
18409: PUSH
18410: LD_INT 1
18412: PLUS
18413: ST_TO_ADDR
// end ;
18414: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18415: LD_EXP 38
18419: PUSH
18420: LD_EXP 57
18424: AND
18425: IFFALSE 18528
18427: GO 18429
18429: DISABLE
18430: LD_INT 0
18432: PPUSH
// begin for i := 1 to 5 do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: DOUBLE
18439: LD_INT 1
18441: DEC
18442: ST_TO_ADDR
18443: LD_INT 5
18445: PUSH
18446: FOR_TO
18447: IFFALSE 18526
// begin uc_nation := nation_nature ;
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// uc_side := 0 ;
18457: LD_ADDR_OWVAR 20
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18465: LD_ADDR_OWVAR 29
18469: PUSH
18470: LD_INT 12
18472: PUSH
18473: LD_INT 12
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// hc_agressivity := 20 ;
18480: LD_ADDR_OWVAR 35
18484: PUSH
18485: LD_INT 20
18487: ST_TO_ADDR
// hc_class := class_tiger ;
18488: LD_ADDR_OWVAR 28
18492: PUSH
18493: LD_INT 14
18495: ST_TO_ADDR
// hc_gallery :=  ;
18496: LD_ADDR_OWVAR 33
18500: PUSH
18501: LD_STRING 
18503: ST_TO_ADDR
// hc_name :=  ;
18504: LD_ADDR_OWVAR 26
18508: PUSH
18509: LD_STRING 
18511: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18512: CALL_OW 44
18516: PPUSH
18517: LD_INT 0
18519: PPUSH
18520: CALL_OW 51
// end ;
18524: GO 18446
18526: POP
18527: POP
// end ;
18528: PPOPN 1
18530: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18531: LD_EXP 38
18535: PUSH
18536: LD_EXP 58
18540: AND
18541: IFFALSE 18550
18543: GO 18545
18545: DISABLE
// StreamSibBomb ;
18546: CALL 18551 0 0
18550: END
// export function StreamSibBomb ; var i , x , y ; begin
18551: LD_INT 0
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
// result := false ;
18557: LD_ADDR_VAR 0 1
18561: PUSH
18562: LD_INT 0
18564: ST_TO_ADDR
// for i := 1 to 16 do
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: DOUBLE
18571: LD_INT 1
18573: DEC
18574: ST_TO_ADDR
18575: LD_INT 16
18577: PUSH
18578: FOR_TO
18579: IFFALSE 18778
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18581: LD_ADDR_VAR 0 3
18585: PUSH
18586: LD_INT 10
18588: PUSH
18589: LD_INT 20
18591: PUSH
18592: LD_INT 30
18594: PUSH
18595: LD_INT 40
18597: PUSH
18598: LD_INT 50
18600: PUSH
18601: LD_INT 60
18603: PUSH
18604: LD_INT 70
18606: PUSH
18607: LD_INT 80
18609: PUSH
18610: LD_INT 90
18612: PUSH
18613: LD_INT 100
18615: PUSH
18616: LD_INT 110
18618: PUSH
18619: LD_INT 120
18621: PUSH
18622: LD_INT 130
18624: PUSH
18625: LD_INT 140
18627: PUSH
18628: LD_INT 150
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_INT 15
18653: PPUSH
18654: CALL_OW 12
18658: ARRAY
18659: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18660: LD_ADDR_VAR 0 4
18664: PUSH
18665: LD_INT 10
18667: PUSH
18668: LD_INT 20
18670: PUSH
18671: LD_INT 30
18673: PUSH
18674: LD_INT 40
18676: PUSH
18677: LD_INT 50
18679: PUSH
18680: LD_INT 60
18682: PUSH
18683: LD_INT 70
18685: PUSH
18686: LD_INT 80
18688: PUSH
18689: LD_INT 90
18691: PUSH
18692: LD_INT 100
18694: PUSH
18695: LD_INT 110
18697: PUSH
18698: LD_INT 120
18700: PUSH
18701: LD_INT 130
18703: PUSH
18704: LD_INT 140
18706: PUSH
18707: LD_INT 150
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PPUSH
18730: LD_INT 15
18732: PPUSH
18733: CALL_OW 12
18737: ARRAY
18738: ST_TO_ADDR
// if ValidHex ( x , y ) then
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_VAR 0 4
18748: PPUSH
18749: CALL_OW 488
18753: IFFALSE 18776
// begin result := [ x , y ] ;
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_VAR 0 3
18764: PUSH
18765: LD_VAR 0 4
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: ST_TO_ADDR
// break ;
18774: GO 18778
// end ; end ;
18776: GO 18578
18778: POP
18779: POP
// if result then
18780: LD_VAR 0 1
18784: IFFALSE 18844
// begin ToLua ( playSibBomb() ) ;
18786: LD_STRING playSibBomb()
18788: PPUSH
18789: CALL_OW 559
// wait ( 0 0$14 ) ;
18793: LD_INT 490
18795: PPUSH
18796: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18800: LD_VAR 0 1
18804: PUSH
18805: LD_INT 1
18807: ARRAY
18808: PPUSH
18809: LD_VAR 0 1
18813: PUSH
18814: LD_INT 2
18816: ARRAY
18817: PPUSH
18818: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18822: LD_VAR 0 1
18826: PUSH
18827: LD_INT 1
18829: ARRAY
18830: PPUSH
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 2
18838: ARRAY
18839: PPUSH
18840: CALL_OW 429
// end ; end ;
18844: LD_VAR 0 1
18848: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18849: LD_EXP 38
18853: PUSH
18854: LD_EXP 60
18858: AND
18859: IFFALSE 18871
18861: GO 18863
18863: DISABLE
// YouLost (  ) ;
18864: LD_STRING 
18866: PPUSH
18867: CALL_OW 104
18871: END
// every 0 0$1 trigger StreamModeActive and sFog do
18872: LD_EXP 38
18876: PUSH
18877: LD_EXP 59
18881: AND
18882: IFFALSE 18896
18884: GO 18886
18886: DISABLE
// FogOff ( your_side ) ;
18887: LD_OWVAR 2
18891: PPUSH
18892: CALL_OW 344
18896: END
// every 0 0$1 trigger StreamModeActive and sSun do
18897: LD_EXP 38
18901: PUSH
18902: LD_EXP 61
18906: AND
18907: IFFALSE 18935
18909: GO 18911
18911: DISABLE
// begin solar_recharge_percent := 0 ;
18912: LD_ADDR_OWVAR 79
18916: PUSH
18917: LD_INT 0
18919: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18920: LD_INT 10500
18922: PPUSH
18923: CALL_OW 67
// solar_recharge_percent := 100 ;
18927: LD_ADDR_OWVAR 79
18931: PUSH
18932: LD_INT 100
18934: ST_TO_ADDR
// end ;
18935: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18936: LD_EXP 38
18940: PUSH
18941: LD_EXP 62
18945: AND
18946: IFFALSE 19185
18948: GO 18950
18950: DISABLE
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// begin tmp := [ ] ;
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: EMPTY
18962: ST_TO_ADDR
// for i := 1 to 6 do
18963: LD_ADDR_VAR 0 1
18967: PUSH
18968: DOUBLE
18969: LD_INT 1
18971: DEC
18972: ST_TO_ADDR
18973: LD_INT 6
18975: PUSH
18976: FOR_TO
18977: IFFALSE 19082
// begin uc_nation := nation_nature ;
18979: LD_ADDR_OWVAR 21
18983: PUSH
18984: LD_INT 0
18986: ST_TO_ADDR
// uc_side := 0 ;
18987: LD_ADDR_OWVAR 20
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18995: LD_ADDR_OWVAR 29
18999: PUSH
19000: LD_INT 12
19002: PUSH
19003: LD_INT 12
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// hc_agressivity := 20 ;
19010: LD_ADDR_OWVAR 35
19014: PUSH
19015: LD_INT 20
19017: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19018: LD_ADDR_OWVAR 28
19022: PUSH
19023: LD_INT 17
19025: ST_TO_ADDR
// hc_gallery :=  ;
19026: LD_ADDR_OWVAR 33
19030: PUSH
19031: LD_STRING 
19033: ST_TO_ADDR
// hc_name :=  ;
19034: LD_ADDR_OWVAR 26
19038: PUSH
19039: LD_STRING 
19041: ST_TO_ADDR
// un := CreateHuman ;
19042: LD_ADDR_VAR 0 2
19046: PUSH
19047: CALL_OW 44
19051: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: CALL_OW 51
// tmp := tmp ^ un ;
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_VAR 0 3
19073: PUSH
19074: LD_VAR 0 2
19078: ADD
19079: ST_TO_ADDR
// end ;
19080: GO 18976
19082: POP
19083: POP
// repeat wait ( 0 0$1 ) ;
19084: LD_INT 35
19086: PPUSH
19087: CALL_OW 67
// for un in tmp do
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_VAR 0 3
19100: PUSH
19101: FOR_IN
19102: IFFALSE 19176
// begin if IsDead ( un ) then
19104: LD_VAR 0 2
19108: PPUSH
19109: CALL_OW 301
19113: IFFALSE 19133
// begin tmp := tmp diff un ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_VAR 0 3
19124: PUSH
19125: LD_VAR 0 2
19129: DIFF
19130: ST_TO_ADDR
// continue ;
19131: GO 19101
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19133: LD_VAR 0 2
19137: PPUSH
19138: LD_INT 3
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: PPUSH
19160: LD_VAR 0 2
19164: PPUSH
19165: CALL_OW 74
19169: PPUSH
19170: CALL_OW 115
// end ;
19174: GO 19101
19176: POP
19177: POP
// until not tmp ;
19178: LD_VAR 0 3
19182: NOT
19183: IFFALSE 19084
// end ;
19185: PPOPN 3
19187: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19188: LD_EXP 38
19192: PUSH
19193: LD_EXP 63
19197: AND
19198: IFFALSE 19252
19200: GO 19202
19202: DISABLE
// begin ToLua ( displayTroll(); ) ;
19203: LD_STRING displayTroll();
19205: PPUSH
19206: CALL_OW 559
// wait ( 3 3$00 ) ;
19210: LD_INT 6300
19212: PPUSH
19213: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19217: LD_STRING hideTroll();
19219: PPUSH
19220: CALL_OW 559
// wait ( 1 1$00 ) ;
19224: LD_INT 2100
19226: PPUSH
19227: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19231: LD_STRING displayTroll();
19233: PPUSH
19234: CALL_OW 559
// wait ( 1 1$00 ) ;
19238: LD_INT 2100
19240: PPUSH
19241: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19245: LD_STRING hideTroll();
19247: PPUSH
19248: CALL_OW 559
// end ;
19252: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19253: LD_EXP 38
19257: PUSH
19258: LD_EXP 64
19262: AND
19263: IFFALSE 19326
19265: GO 19267
19267: DISABLE
19268: LD_INT 0
19270: PPUSH
// begin p := 0 ;
19271: LD_ADDR_VAR 0 1
19275: PUSH
19276: LD_INT 0
19278: ST_TO_ADDR
// repeat game_speed := 1 ;
19279: LD_ADDR_OWVAR 65
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19287: LD_INT 35
19289: PPUSH
19290: CALL_OW 67
// p := p + 1 ;
19294: LD_ADDR_VAR 0 1
19298: PUSH
19299: LD_VAR 0 1
19303: PUSH
19304: LD_INT 1
19306: PLUS
19307: ST_TO_ADDR
// until p >= 60 ;
19308: LD_VAR 0 1
19312: PUSH
19313: LD_INT 60
19315: GREATEREQUAL
19316: IFFALSE 19279
// game_speed := 4 ;
19318: LD_ADDR_OWVAR 65
19322: PUSH
19323: LD_INT 4
19325: ST_TO_ADDR
// end ;
19326: PPOPN 1
19328: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19329: LD_EXP 38
19333: PUSH
19334: LD_EXP 65
19338: AND
19339: IFFALSE 19485
19341: GO 19343
19343: DISABLE
19344: LD_INT 0
19346: PPUSH
19347: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19348: LD_ADDR_VAR 0 1
19352: PUSH
19353: LD_INT 22
19355: PUSH
19356: LD_OWVAR 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 30
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: ST_TO_ADDR
// if not depot then
19402: LD_VAR 0 1
19406: NOT
19407: IFFALSE 19411
// exit ;
19409: GO 19485
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19411: LD_ADDR_VAR 0 2
19415: PUSH
19416: LD_VAR 0 1
19420: PUSH
19421: LD_INT 1
19423: PPUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 12
19433: ARRAY
19434: PPUSH
19435: CALL_OW 274
19439: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19440: LD_VAR 0 2
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 0
19450: PPUSH
19451: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19455: LD_VAR 0 2
19459: PPUSH
19460: LD_INT 2
19462: PPUSH
19463: LD_INT 0
19465: PPUSH
19466: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_INT 3
19477: PPUSH
19478: LD_INT 0
19480: PPUSH
19481: CALL_OW 277
// end ;
19485: PPOPN 2
19487: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19488: LD_EXP 38
19492: PUSH
19493: LD_EXP 66
19497: AND
19498: IFFALSE 19595
19500: GO 19502
19502: DISABLE
19503: LD_INT 0
19505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19506: LD_ADDR_VAR 0 1
19510: PUSH
19511: LD_INT 22
19513: PUSH
19514: LD_OWVAR 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 21
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 3
19535: PUSH
19536: LD_INT 23
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: ST_TO_ADDR
// if not tmp then
19560: LD_VAR 0 1
19564: NOT
19565: IFFALSE 19569
// exit ;
19567: GO 19595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19569: LD_VAR 0 1
19573: PUSH
19574: LD_INT 1
19576: PPUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 12
19586: ARRAY
19587: PPUSH
19588: LD_INT 200
19590: PPUSH
19591: CALL_OW 234
// end ;
19595: PPOPN 1
19597: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19598: LD_EXP 38
19602: PUSH
19603: LD_EXP 67
19607: AND
19608: IFFALSE 19687
19610: GO 19612
19612: DISABLE
19613: LD_INT 0
19615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19616: LD_ADDR_VAR 0 1
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_OWVAR 2
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 21
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: ST_TO_ADDR
// if not tmp then
19652: LD_VAR 0 1
19656: NOT
19657: IFFALSE 19661
// exit ;
19659: GO 19687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19661: LD_VAR 0 1
19665: PUSH
19666: LD_INT 1
19668: PPUSH
19669: LD_VAR 0 1
19673: PPUSH
19674: CALL_OW 12
19678: ARRAY
19679: PPUSH
19680: LD_INT 60
19682: PPUSH
19683: CALL_OW 234
// end ;
19687: PPOPN 1
19689: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19690: LD_EXP 38
19694: PUSH
19695: LD_EXP 68
19699: AND
19700: IFFALSE 19799
19702: GO 19704
19704: DISABLE
19705: LD_INT 0
19707: PPUSH
19708: PPUSH
// begin enable ;
19709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19710: LD_ADDR_VAR 0 1
19714: PUSH
19715: LD_INT 22
19717: PUSH
19718: LD_OWVAR 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 61
19729: PUSH
19730: EMPTY
19731: LIST
19732: PUSH
19733: LD_INT 33
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 69
19752: ST_TO_ADDR
// if not tmp then
19753: LD_VAR 0 1
19757: NOT
19758: IFFALSE 19762
// exit ;
19760: GO 19799
// for i in tmp do
19762: LD_ADDR_VAR 0 2
19766: PUSH
19767: LD_VAR 0 1
19771: PUSH
19772: FOR_IN
19773: IFFALSE 19797
// if IsControledBy ( i ) then
19775: LD_VAR 0 2
19779: PPUSH
19780: CALL_OW 312
19784: IFFALSE 19795
// ComUnlink ( i ) ;
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL_OW 136
19795: GO 19772
19797: POP
19798: POP
// end ;
19799: PPOPN 2
19801: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19802: LD_EXP 38
19806: PUSH
19807: LD_EXP 69
19811: AND
19812: IFFALSE 19952
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
19820: PPUSH
// begin ToLua ( displayPowell(); ) ;
19821: LD_STRING displayPowell();
19823: PPUSH
19824: CALL_OW 559
// uc_side := 0 ;
19828: LD_ADDR_OWVAR 20
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// uc_nation := 2 ;
19836: LD_ADDR_OWVAR 21
19840: PUSH
19841: LD_INT 2
19843: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19844: LD_ADDR_OWVAR 37
19848: PUSH
19849: LD_INT 14
19851: ST_TO_ADDR
// vc_engine := engine_siberite ;
19852: LD_ADDR_OWVAR 39
19856: PUSH
19857: LD_INT 3
19859: ST_TO_ADDR
// vc_control := control_apeman ;
19860: LD_ADDR_OWVAR 38
19864: PUSH
19865: LD_INT 5
19867: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19868: LD_ADDR_OWVAR 40
19872: PUSH
19873: LD_INT 29
19875: ST_TO_ADDR
// un := CreateVehicle ;
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: CALL_OW 45
19885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19886: LD_VAR 0 2
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19898: LD_INT 35
19900: PPUSH
19901: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19905: LD_VAR 0 2
19909: PPUSH
19910: LD_INT 22
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PPUSH
19922: CALL_OW 69
19926: PPUSH
19927: LD_VAR 0 2
19931: PPUSH
19932: CALL_OW 74
19936: PPUSH
19937: CALL_OW 115
// until IsDead ( un ) ;
19941: LD_VAR 0 2
19945: PPUSH
19946: CALL_OW 301
19950: IFFALSE 19898
// end ;
19952: PPOPN 2
19954: END
// every 0 0$1 trigger StreamModeActive and sStu do
19955: LD_EXP 38
19959: PUSH
19960: LD_EXP 77
19964: AND
19965: IFFALSE 19981
19967: GO 19969
19969: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19970: LD_STRING displayStucuk();
19972: PPUSH
19973: CALL_OW 559
// ResetFog ;
19977: CALL_OW 335
// end ;
19981: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19982: LD_EXP 38
19986: PUSH
19987: LD_EXP 70
19991: AND
19992: IFFALSE 20133
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 21
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20133
// un := tmp [ rand ( 1 , tmp ) ] ;
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL_OW 12
20068: ARRAY
20069: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20070: LD_VAR 0 1
20074: PPUSH
20075: LD_INT 0
20077: PPUSH
20078: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20082: LD_VAR 0 1
20086: PPUSH
20087: LD_OWVAR 3
20091: PUSH
20092: LD_VAR 0 1
20096: DIFF
20097: PPUSH
20098: LD_VAR 0 1
20102: PPUSH
20103: CALL_OW 74
20107: PPUSH
20108: CALL_OW 115
// wait ( 0 0$20 ) ;
20112: LD_INT 700
20114: PPUSH
20115: CALL_OW 67
// SetSide ( un , your_side ) ;
20119: LD_VAR 0 1
20123: PPUSH
20124: LD_OWVAR 2
20128: PPUSH
20129: CALL_OW 235
// end ;
20133: PPOPN 2
20135: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20136: LD_EXP 38
20140: PUSH
20141: LD_EXP 71
20145: AND
20146: IFFALSE 20252
20148: GO 20150
20150: DISABLE
20151: LD_INT 0
20153: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20154: LD_ADDR_VAR 0 1
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_OWVAR 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 30
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 30
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PPUSH
20203: CALL_OW 69
20207: ST_TO_ADDR
// if not depot then
20208: LD_VAR 0 1
20212: NOT
20213: IFFALSE 20217
// exit ;
20215: GO 20252
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20217: LD_VAR 0 1
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: CALL_OW 250
20230: PPUSH
20231: LD_VAR 0 1
20235: PUSH
20236: LD_INT 1
20238: ARRAY
20239: PPUSH
20240: CALL_OW 251
20244: PPUSH
20245: LD_INT 70
20247: PPUSH
20248: CALL_OW 495
// end ;
20252: PPOPN 1
20254: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20255: LD_EXP 38
20259: PUSH
20260: LD_EXP 72
20264: AND
20265: IFFALSE 20476
20267: GO 20269
20269: DISABLE
20270: LD_INT 0
20272: PPUSH
20273: PPUSH
20274: PPUSH
20275: PPUSH
20276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20277: LD_ADDR_VAR 0 5
20281: PUSH
20282: LD_INT 22
20284: PUSH
20285: LD_OWVAR 2
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 21
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PPUSH
20308: CALL_OW 69
20312: ST_TO_ADDR
// if not tmp then
20313: LD_VAR 0 5
20317: NOT
20318: IFFALSE 20322
// exit ;
20320: GO 20476
// for i in tmp do
20322: LD_ADDR_VAR 0 1
20326: PUSH
20327: LD_VAR 0 5
20331: PUSH
20332: FOR_IN
20333: IFFALSE 20474
// begin d := rand ( 0 , 5 ) ;
20335: LD_ADDR_VAR 0 4
20339: PUSH
20340: LD_INT 0
20342: PPUSH
20343: LD_INT 5
20345: PPUSH
20346: CALL_OW 12
20350: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20351: LD_ADDR_VAR 0 2
20355: PUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 250
20365: PPUSH
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_INT 3
20373: PPUSH
20374: LD_INT 12
20376: PPUSH
20377: CALL_OW 12
20381: PPUSH
20382: CALL_OW 272
20386: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20387: LD_ADDR_VAR 0 3
20391: PUSH
20392: LD_VAR 0 1
20396: PPUSH
20397: CALL_OW 251
20401: PPUSH
20402: LD_VAR 0 4
20406: PPUSH
20407: LD_INT 3
20409: PPUSH
20410: LD_INT 12
20412: PPUSH
20413: CALL_OW 12
20417: PPUSH
20418: CALL_OW 273
20422: ST_TO_ADDR
// if ValidHex ( x , y ) then
20423: LD_VAR 0 2
20427: PPUSH
20428: LD_VAR 0 3
20432: PPUSH
20433: CALL_OW 488
20437: IFFALSE 20472
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: LD_VAR 0 3
20453: PPUSH
20454: LD_INT 3
20456: PPUSH
20457: LD_INT 6
20459: PPUSH
20460: CALL_OW 12
20464: PPUSH
20465: LD_INT 1
20467: PPUSH
20468: CALL_OW 483
// end ;
20472: GO 20332
20474: POP
20475: POP
// end ;
20476: PPOPN 5
20478: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20479: LD_EXP 38
20483: PUSH
20484: LD_EXP 73
20488: AND
20489: IFFALSE 20583
20491: GO 20493
20493: DISABLE
20494: LD_INT 0
20496: PPUSH
20497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: LD_INT 22
20505: PUSH
20506: LD_OWVAR 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 32
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: PPUSH
20540: CALL_OW 69
20544: ST_TO_ADDR
// if not tmp then
20545: LD_VAR 0 2
20549: NOT
20550: IFFALSE 20554
// exit ;
20552: GO 20583
// for i in tmp do
20554: LD_ADDR_VAR 0 1
20558: PUSH
20559: LD_VAR 0 2
20563: PUSH
20564: FOR_IN
20565: IFFALSE 20581
// SetFuel ( i , 0 ) ;
20567: LD_VAR 0 1
20571: PPUSH
20572: LD_INT 0
20574: PPUSH
20575: CALL_OW 240
20579: GO 20564
20581: POP
20582: POP
// end ;
20583: PPOPN 2
20585: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20586: LD_EXP 38
20590: PUSH
20591: LD_EXP 74
20595: AND
20596: IFFALSE 20662
20598: GO 20600
20600: DISABLE
20601: LD_INT 0
20603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20604: LD_ADDR_VAR 0 1
20608: PUSH
20609: LD_INT 22
20611: PUSH
20612: LD_OWVAR 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 30
20623: PUSH
20624: LD_INT 29
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PPUSH
20635: CALL_OW 69
20639: ST_TO_ADDR
// if not tmp then
20640: LD_VAR 0 1
20644: NOT
20645: IFFALSE 20649
// exit ;
20647: GO 20662
// DestroyUnit ( tmp [ 1 ] ) ;
20649: LD_VAR 0 1
20653: PUSH
20654: LD_INT 1
20656: ARRAY
20657: PPUSH
20658: CALL_OW 65
// end ;
20662: PPOPN 1
20664: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20665: LD_EXP 38
20669: PUSH
20670: LD_EXP 76
20674: AND
20675: IFFALSE 20804
20677: GO 20679
20679: DISABLE
20680: LD_INT 0
20682: PPUSH
// begin uc_side := 0 ;
20683: LD_ADDR_OWVAR 20
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// uc_nation := nation_arabian ;
20691: LD_ADDR_OWVAR 21
20695: PUSH
20696: LD_INT 2
20698: ST_TO_ADDR
// hc_gallery :=  ;
20699: LD_ADDR_OWVAR 33
20703: PUSH
20704: LD_STRING 
20706: ST_TO_ADDR
// hc_name :=  ;
20707: LD_ADDR_OWVAR 26
20711: PUSH
20712: LD_STRING 
20714: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20715: LD_INT 1
20717: PPUSH
20718: LD_INT 11
20720: PPUSH
20721: LD_INT 10
20723: PPUSH
20724: CALL_OW 380
// un := CreateHuman ;
20728: LD_ADDR_VAR 0 1
20732: PUSH
20733: CALL_OW 44
20737: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20738: LD_VAR 0 1
20742: PPUSH
20743: LD_INT 1
20745: PPUSH
20746: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20750: LD_INT 35
20752: PPUSH
20753: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_INT 22
20764: PUSH
20765: LD_OWVAR 2
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: PPUSH
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 74
20788: PPUSH
20789: CALL_OW 115
// until IsDead ( un ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 301
20802: IFFALSE 20750
// end ;
20804: PPOPN 1
20806: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20807: LD_EXP 38
20811: PUSH
20812: LD_EXP 78
20816: AND
20817: IFFALSE 20829
20819: GO 20821
20821: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20822: LD_STRING earthquake(getX(game), 0, 32)
20824: PPUSH
20825: CALL_OW 559
20829: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20830: LD_EXP 38
20834: PUSH
20835: LD_EXP 79
20839: AND
20840: IFFALSE 20931
20842: GO 20844
20844: DISABLE
20845: LD_INT 0
20847: PPUSH
// begin enable ;
20848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20849: LD_ADDR_VAR 0 1
20853: PUSH
20854: LD_INT 22
20856: PUSH
20857: LD_OWVAR 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 21
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 33
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: ST_TO_ADDR
// if not tmp then
20896: LD_VAR 0 1
20900: NOT
20901: IFFALSE 20905
// exit ;
20903: GO 20931
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20905: LD_VAR 0 1
20909: PUSH
20910: LD_INT 1
20912: PPUSH
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 12
20922: ARRAY
20923: PPUSH
20924: LD_INT 1
20926: PPUSH
20927: CALL_OW 234
// end ;
20931: PPOPN 1
20933: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20934: LD_EXP 38
20938: PUSH
20939: LD_EXP 80
20943: AND
20944: IFFALSE 21085
20946: GO 20948
20948: DISABLE
20949: LD_INT 0
20951: PPUSH
20952: PPUSH
20953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20954: LD_ADDR_VAR 0 3
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 25
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 69
20989: ST_TO_ADDR
// if not tmp then
20990: LD_VAR 0 3
20994: NOT
20995: IFFALSE 20999
// exit ;
20997: GO 21085
// un := tmp [ rand ( 1 , tmp ) ] ;
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 1
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: CALL_OW 12
21021: ARRAY
21022: ST_TO_ADDR
// if Crawls ( un ) then
21023: LD_VAR 0 2
21027: PPUSH
21028: CALL_OW 318
21032: IFFALSE 21043
// ComWalk ( un ) ;
21034: LD_VAR 0 2
21038: PPUSH
21039: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21043: LD_VAR 0 2
21047: PPUSH
21048: LD_INT 9
21050: PPUSH
21051: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21055: LD_INT 28
21057: PPUSH
21058: LD_OWVAR 2
21062: PPUSH
21063: LD_INT 2
21065: PPUSH
21066: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21070: LD_INT 29
21072: PPUSH
21073: LD_OWVAR 2
21077: PPUSH
21078: LD_INT 2
21080: PPUSH
21081: CALL_OW 322
// end ;
21085: PPOPN 3
21087: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21088: LD_EXP 38
21092: PUSH
21093: LD_EXP 81
21097: AND
21098: IFFALSE 21209
21100: GO 21102
21102: DISABLE
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_OWVAR 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 25
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// if not tmp then
21144: LD_VAR 0 3
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21209
// un := tmp [ rand ( 1 , tmp ) ] ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 1
21165: PPUSH
21166: LD_VAR 0 3
21170: PPUSH
21171: CALL_OW 12
21175: ARRAY
21176: ST_TO_ADDR
// if Crawls ( un ) then
21177: LD_VAR 0 2
21181: PPUSH
21182: CALL_OW 318
21186: IFFALSE 21197
// ComWalk ( un ) ;
21188: LD_VAR 0 2
21192: PPUSH
21193: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21197: LD_VAR 0 2
21201: PPUSH
21202: LD_INT 8
21204: PPUSH
21205: CALL_OW 336
// end ;
21209: PPOPN 3
21211: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21212: LD_EXP 38
21216: PUSH
21217: LD_EXP 82
21221: AND
21222: IFFALSE 21366
21224: GO 21226
21226: DISABLE
21227: LD_INT 0
21229: PPUSH
21230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21231: LD_ADDR_VAR 0 2
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_OWVAR 2
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 21
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 34
21263: PUSH
21264: LD_INT 12
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 34
21273: PUSH
21274: LD_INT 51
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 34
21283: PUSH
21284: LD_INT 32
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: PPUSH
21302: CALL_OW 69
21306: ST_TO_ADDR
// if not tmp then
21307: LD_VAR 0 2
21311: NOT
21312: IFFALSE 21316
// exit ;
21314: GO 21366
// for i in tmp do
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_VAR 0 2
21325: PUSH
21326: FOR_IN
21327: IFFALSE 21364
// if GetCargo ( i , mat_artifact ) = 0 then
21329: LD_VAR 0 1
21333: PPUSH
21334: LD_INT 4
21336: PPUSH
21337: CALL_OW 289
21341: PUSH
21342: LD_INT 0
21344: EQUAL
21345: IFFALSE 21362
// SetCargo ( i , mat_siberit , 100 ) ;
21347: LD_VAR 0 1
21351: PPUSH
21352: LD_INT 3
21354: PPUSH
21355: LD_INT 100
21357: PPUSH
21358: CALL_OW 290
21362: GO 21326
21364: POP
21365: POP
// end ;
21366: PPOPN 2
21368: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21369: LD_EXP 38
21373: PUSH
21374: LD_EXP 83
21378: AND
21379: IFFALSE 21562
21381: GO 21383
21383: DISABLE
21384: LD_INT 0
21386: PPUSH
21387: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_INT 22
21395: PUSH
21396: LD_OWVAR 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PPUSH
21405: CALL_OW 69
21409: ST_TO_ADDR
// if not tmp then
21410: LD_VAR 0 2
21414: NOT
21415: IFFALSE 21419
// exit ;
21417: GO 21562
// for i := 1 to 2 do
21419: LD_ADDR_VAR 0 1
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: LD_INT 2
21431: PUSH
21432: FOR_TO
21433: IFFALSE 21560
// begin uc_side := your_side ;
21435: LD_ADDR_OWVAR 20
21439: PUSH
21440: LD_OWVAR 2
21444: ST_TO_ADDR
// uc_nation := nation_american ;
21445: LD_ADDR_OWVAR 21
21449: PUSH
21450: LD_INT 1
21452: ST_TO_ADDR
// vc_chassis := us_morphling ;
21453: LD_ADDR_OWVAR 37
21457: PUSH
21458: LD_INT 5
21460: ST_TO_ADDR
// vc_engine := engine_siberite ;
21461: LD_ADDR_OWVAR 39
21465: PUSH
21466: LD_INT 3
21468: ST_TO_ADDR
// vc_control := control_computer ;
21469: LD_ADDR_OWVAR 38
21473: PUSH
21474: LD_INT 3
21476: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21477: LD_ADDR_OWVAR 40
21481: PUSH
21482: LD_INT 10
21484: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21485: LD_VAR 0 2
21489: PUSH
21490: LD_INT 1
21492: ARRAY
21493: PPUSH
21494: CALL_OW 310
21498: NOT
21499: IFFALSE 21546
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21501: CALL_OW 45
21505: PPUSH
21506: LD_VAR 0 2
21510: PUSH
21511: LD_INT 1
21513: ARRAY
21514: PPUSH
21515: CALL_OW 250
21519: PPUSH
21520: LD_VAR 0 2
21524: PUSH
21525: LD_INT 1
21527: ARRAY
21528: PPUSH
21529: CALL_OW 251
21533: PPUSH
21534: LD_INT 12
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 50
21544: GO 21558
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21546: CALL_OW 45
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: CALL_OW 51
// end ;
21558: GO 21432
21560: POP
21561: POP
// end ;
21562: PPOPN 2
21564: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21565: LD_EXP 38
21569: PUSH
21570: LD_EXP 84
21574: AND
21575: IFFALSE 21797
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21588: LD_ADDR_VAR 0 6
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_OWVAR 2
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 21
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: ST_TO_ADDR
// if not tmp then
21642: LD_VAR 0 6
21646: NOT
21647: IFFALSE 21651
// exit ;
21649: GO 21797
// s1 := rand ( 1 , 4 ) ;
21651: LD_ADDR_VAR 0 2
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_INT 4
21661: PPUSH
21662: CALL_OW 12
21666: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21667: LD_ADDR_VAR 0 4
21671: PUSH
21672: LD_VAR 0 6
21676: PUSH
21677: LD_INT 1
21679: ARRAY
21680: PPUSH
21681: LD_VAR 0 2
21685: PPUSH
21686: CALL_OW 259
21690: ST_TO_ADDR
// if s1 = 1 then
21691: LD_VAR 0 2
21695: PUSH
21696: LD_INT 1
21698: EQUAL
21699: IFFALSE 21719
// s2 := rand ( 2 , 4 ) else
21701: LD_ADDR_VAR 0 3
21705: PUSH
21706: LD_INT 2
21708: PPUSH
21709: LD_INT 4
21711: PPUSH
21712: CALL_OW 12
21716: ST_TO_ADDR
21717: GO 21727
// s2 := 1 ;
21719: LD_ADDR_VAR 0 3
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21727: LD_ADDR_VAR 0 5
21731: PUSH
21732: LD_VAR 0 6
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: CALL_OW 259
21750: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21751: LD_VAR 0 6
21755: PUSH
21756: LD_INT 1
21758: ARRAY
21759: PPUSH
21760: LD_VAR 0 2
21764: PPUSH
21765: LD_VAR 0 5
21769: PPUSH
21770: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21774: LD_VAR 0 6
21778: PUSH
21779: LD_INT 1
21781: ARRAY
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: LD_VAR 0 4
21792: PPUSH
21793: CALL_OW 237
// end ;
21797: PPOPN 6
21799: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21800: LD_EXP 38
21804: PUSH
21805: LD_EXP 85
21809: AND
21810: IFFALSE 21889
21812: GO 21814
21814: DISABLE
21815: LD_INT 0
21817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21818: LD_ADDR_VAR 0 1
21822: PUSH
21823: LD_INT 22
21825: PUSH
21826: LD_OWVAR 2
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 3
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 69
21853: ST_TO_ADDR
// if not tmp then
21854: LD_VAR 0 1
21858: NOT
21859: IFFALSE 21863
// exit ;
21861: GO 21889
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21863: LD_VAR 0 1
21867: PUSH
21868: LD_INT 1
21870: PPUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 12
21880: ARRAY
21881: PPUSH
21882: LD_INT 1
21884: PPUSH
21885: CALL_OW 234
// end ;
21889: PPOPN 1
21891: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21892: LD_EXP 38
21896: PUSH
21897: LD_EXP 86
21901: AND
21902: IFFALSE 22014
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_OWVAR 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: LD_INT 30
21933: PUSH
21934: LD_INT 27
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 30
21943: PUSH
21944: LD_INT 26
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 30
21953: PUSH
21954: LD_INT 28
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PPUSH
21971: CALL_OW 69
21975: ST_TO_ADDR
// if not tmp then
21976: LD_VAR 0 2
21980: NOT
21981: IFFALSE 21985
// exit ;
21983: GO 22014
// for i in tmp do
21985: LD_ADDR_VAR 0 1
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: FOR_IN
21996: IFFALSE 22012
// SetLives ( i , 1 ) ;
21998: LD_VAR 0 1
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 234
22010: GO 21995
22012: POP
22013: POP
// end ;
22014: PPOPN 2
22016: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22017: LD_EXP 38
22021: PUSH
22022: LD_EXP 87
22026: AND
22027: IFFALSE 22314
22029: GO 22031
22031: DISABLE
22032: LD_INT 0
22034: PPUSH
22035: PPUSH
22036: PPUSH
// begin i := rand ( 1 , 7 ) ;
22037: LD_ADDR_VAR 0 1
22041: PUSH
22042: LD_INT 1
22044: PPUSH
22045: LD_INT 7
22047: PPUSH
22048: CALL_OW 12
22052: ST_TO_ADDR
// case i of 1 :
22053: LD_VAR 0 1
22057: PUSH
22058: LD_INT 1
22060: DOUBLE
22061: EQUAL
22062: IFTRUE 22066
22064: GO 22076
22066: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22067: LD_STRING earthquake(getX(game), 0, 32)
22069: PPUSH
22070: CALL_OW 559
22074: GO 22314
22076: LD_INT 2
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22098
22084: POP
// begin ToLua ( displayStucuk(); ) ;
22085: LD_STRING displayStucuk();
22087: PPUSH
22088: CALL_OW 559
// ResetFog ;
22092: CALL_OW 335
// end ; 3 :
22096: GO 22314
22098: LD_INT 3
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22210
22106: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: LD_INT 22
22114: PUSH
22115: LD_OWVAR 2
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 25
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PPUSH
22138: CALL_OW 69
22142: ST_TO_ADDR
// if not tmp then
22143: LD_VAR 0 2
22147: NOT
22148: IFFALSE 22152
// exit ;
22150: GO 22314
// un := tmp [ rand ( 1 , tmp ) ] ;
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: LD_VAR 0 2
22161: PUSH
22162: LD_INT 1
22164: PPUSH
22165: LD_VAR 0 2
22169: PPUSH
22170: CALL_OW 12
22174: ARRAY
22175: ST_TO_ADDR
// if Crawls ( un ) then
22176: LD_VAR 0 3
22180: PPUSH
22181: CALL_OW 318
22185: IFFALSE 22196
// ComWalk ( un ) ;
22187: LD_VAR 0 3
22191: PPUSH
22192: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22196: LD_VAR 0 3
22200: PPUSH
22201: LD_INT 8
22203: PPUSH
22204: CALL_OW 336
// end ; 4 :
22208: GO 22314
22210: LD_INT 4
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 22292
22218: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22219: LD_ADDR_VAR 0 2
22223: PUSH
22224: LD_INT 22
22226: PUSH
22227: LD_OWVAR 2
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 30
22238: PUSH
22239: LD_INT 29
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PPUSH
22250: CALL_OW 69
22254: ST_TO_ADDR
// if not tmp then
22255: LD_VAR 0 2
22259: NOT
22260: IFFALSE 22264
// exit ;
22262: GO 22314
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: PPUSH
22273: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22277: LD_VAR 0 2
22281: PUSH
22282: LD_INT 1
22284: ARRAY
22285: PPUSH
22286: CALL_OW 65
// end ; 5 .. 7 :
22290: GO 22314
22292: LD_INT 5
22294: DOUBLE
22295: GREATEREQUAL
22296: IFFALSE 22304
22298: LD_INT 7
22300: DOUBLE
22301: LESSEQUAL
22302: IFTRUE 22306
22304: GO 22313
22306: POP
// StreamSibBomb ; end ;
22307: CALL 18551 0 0
22311: GO 22314
22313: POP
// end ;
22314: PPOPN 3
22316: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22317: LD_EXP 38
22321: PUSH
22322: LD_EXP 88
22326: AND
22327: IFFALSE 22483
22329: GO 22331
22331: DISABLE
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22337: LD_ADDR_VAR 0 2
22341: PUSH
22342: LD_INT 81
22344: PUSH
22345: LD_OWVAR 2
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 21
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PPUSH
22386: CALL_OW 69
22390: ST_TO_ADDR
// if not tmp then
22391: LD_VAR 0 2
22395: NOT
22396: IFFALSE 22400
// exit ;
22398: GO 22483
// p := 0 ;
22400: LD_ADDR_VAR 0 3
22404: PUSH
22405: LD_INT 0
22407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22408: LD_INT 35
22410: PPUSH
22411: CALL_OW 67
// p := p + 1 ;
22415: LD_ADDR_VAR 0 3
22419: PUSH
22420: LD_VAR 0 3
22424: PUSH
22425: LD_INT 1
22427: PLUS
22428: ST_TO_ADDR
// for i in tmp do
22429: LD_ADDR_VAR 0 1
22433: PUSH
22434: LD_VAR 0 2
22438: PUSH
22439: FOR_IN
22440: IFFALSE 22471
// if GetLives ( i ) < 1000 then
22442: LD_VAR 0 1
22446: PPUSH
22447: CALL_OW 256
22451: PUSH
22452: LD_INT 1000
22454: LESS
22455: IFFALSE 22469
// SetLives ( i , 1000 ) ;
22457: LD_VAR 0 1
22461: PPUSH
22462: LD_INT 1000
22464: PPUSH
22465: CALL_OW 234
22469: GO 22439
22471: POP
22472: POP
// until p > 20 ;
22473: LD_VAR 0 3
22477: PUSH
22478: LD_INT 20
22480: GREATER
22481: IFFALSE 22408
// end ;
22483: PPOPN 3
22485: END
// every 0 0$1 trigger StreamModeActive and sTime do
22486: LD_EXP 38
22490: PUSH
22491: LD_EXP 89
22495: AND
22496: IFFALSE 22531
22498: GO 22500
22500: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22501: LD_INT 28
22503: PPUSH
22504: LD_OWVAR 2
22508: PPUSH
22509: LD_INT 2
22511: PPUSH
22512: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22516: LD_INT 30
22518: PPUSH
22519: LD_OWVAR 2
22523: PPUSH
22524: LD_INT 2
22526: PPUSH
22527: CALL_OW 322
// end ;
22531: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22532: LD_EXP 38
22536: PUSH
22537: LD_EXP 90
22541: AND
22542: IFFALSE 22663
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 22
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 23
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// if not tmp then
22605: LD_VAR 0 2
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22663
// for i in tmp do
22614: LD_ADDR_VAR 0 1
22618: PUSH
22619: LD_VAR 0 2
22623: PUSH
22624: FOR_IN
22625: IFFALSE 22661
// begin if Crawls ( i ) then
22627: LD_VAR 0 1
22631: PPUSH
22632: CALL_OW 318
22636: IFFALSE 22647
// ComWalk ( i ) ;
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 138
// SetClass ( i , 2 ) ;
22647: LD_VAR 0 1
22651: PPUSH
22652: LD_INT 2
22654: PPUSH
22655: CALL_OW 336
// end ;
22659: GO 22624
22661: POP
22662: POP
// end ;
22663: PPOPN 2
22665: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22666: LD_EXP 38
22670: PUSH
22671: LD_EXP 91
22675: AND
22676: IFFALSE 22964
22678: GO 22680
22680: DISABLE
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22686: LD_OWVAR 2
22690: PPUSH
22691: LD_INT 9
22693: PPUSH
22694: LD_INT 1
22696: PPUSH
22697: LD_INT 1
22699: PPUSH
22700: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22704: LD_INT 9
22706: PPUSH
22707: LD_OWVAR 2
22711: PPUSH
22712: CALL_OW 343
// uc_side := 9 ;
22716: LD_ADDR_OWVAR 20
22720: PUSH
22721: LD_INT 9
22723: ST_TO_ADDR
// uc_nation := 2 ;
22724: LD_ADDR_OWVAR 21
22728: PUSH
22729: LD_INT 2
22731: ST_TO_ADDR
// hc_name := Dark Warrior ;
22732: LD_ADDR_OWVAR 26
22736: PUSH
22737: LD_STRING Dark Warrior
22739: ST_TO_ADDR
// hc_gallery :=  ;
22740: LD_ADDR_OWVAR 33
22744: PUSH
22745: LD_STRING 
22747: ST_TO_ADDR
// hc_noskilllimit := true ;
22748: LD_ADDR_OWVAR 76
22752: PUSH
22753: LD_INT 1
22755: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22756: LD_ADDR_OWVAR 31
22760: PUSH
22761: LD_INT 30
22763: PUSH
22764: LD_INT 30
22766: PUSH
22767: LD_INT 30
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: ST_TO_ADDR
// un := CreateHuman ;
22779: LD_ADDR_VAR 0 3
22783: PUSH
22784: CALL_OW 44
22788: ST_TO_ADDR
// hc_noskilllimit := false ;
22789: LD_ADDR_OWVAR 76
22793: PUSH
22794: LD_INT 0
22796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22797: LD_VAR 0 3
22801: PPUSH
22802: LD_INT 1
22804: PPUSH
22805: CALL_OW 51
// ToLua ( playRanger() ) ;
22809: LD_STRING playRanger()
22811: PPUSH
22812: CALL_OW 559
// p := 0 ;
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 0
22823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22824: LD_INT 35
22826: PPUSH
22827: CALL_OW 67
// p := p + 1 ;
22831: LD_ADDR_VAR 0 2
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: LD_INT 1
22843: PLUS
22844: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22845: LD_VAR 0 3
22849: PPUSH
22850: CALL_OW 256
22854: PUSH
22855: LD_INT 1000
22857: LESS
22858: IFFALSE 22872
// SetLives ( un , 1000 ) ;
22860: LD_VAR 0 3
22864: PPUSH
22865: LD_INT 1000
22867: PPUSH
22868: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22872: LD_VAR 0 3
22876: PPUSH
22877: LD_INT 81
22879: PUSH
22880: LD_OWVAR 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 91
22891: PUSH
22892: LD_VAR 0 3
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: PPUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: CALL_OW 74
22923: PPUSH
22924: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22928: LD_VAR 0 2
22932: PUSH
22933: LD_INT 80
22935: GREATER
22936: PUSH
22937: LD_VAR 0 3
22941: PPUSH
22942: CALL_OW 301
22946: OR
22947: IFFALSE 22824
// if un then
22949: LD_VAR 0 3
22953: IFFALSE 22964
// RemoveUnit ( un ) ;
22955: LD_VAR 0 3
22959: PPUSH
22960: CALL_OW 64
// end ;
22964: PPOPN 3
22966: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22967: LD_EXP 92
22971: IFFALSE 23087
22973: GO 22975
22975: DISABLE
22976: LD_INT 0
22978: PPUSH
22979: PPUSH
22980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22981: LD_ADDR_VAR 0 2
22985: PUSH
22986: LD_INT 81
22988: PUSH
22989: LD_OWVAR 2
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 21
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23017: LD_STRING playComputer()
23019: PPUSH
23020: CALL_OW 559
// if not tmp then
23024: LD_VAR 0 2
23028: NOT
23029: IFFALSE 23033
// exit ;
23031: GO 23087
// for i in tmp do
23033: LD_ADDR_VAR 0 1
23037: PUSH
23038: LD_VAR 0 2
23042: PUSH
23043: FOR_IN
23044: IFFALSE 23085
// for j := 1 to 4 do
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: DOUBLE
23052: LD_INT 1
23054: DEC
23055: ST_TO_ADDR
23056: LD_INT 4
23058: PUSH
23059: FOR_TO
23060: IFFALSE 23081
// SetSkill ( i , j , 10 ) ;
23062: LD_VAR 0 1
23066: PPUSH
23067: LD_VAR 0 3
23071: PPUSH
23072: LD_INT 10
23074: PPUSH
23075: CALL_OW 237
23079: GO 23059
23081: POP
23082: POP
23083: GO 23043
23085: POP
23086: POP
// end ;
23087: PPOPN 3
23089: END
// every 0 0$1 trigger s30 do var i , tmp ;
23090: LD_EXP 93
23094: IFFALSE 23163
23096: GO 23098
23098: DISABLE
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 69
23124: ST_TO_ADDR
// if not tmp then
23125: LD_VAR 0 2
23129: NOT
23130: IFFALSE 23134
// exit ;
23132: GO 23163
// for i in tmp do
23134: LD_ADDR_VAR 0 1
23138: PUSH
23139: LD_VAR 0 2
23143: PUSH
23144: FOR_IN
23145: IFFALSE 23161
// SetLives ( i , 300 ) ;
23147: LD_VAR 0 1
23151: PPUSH
23152: LD_INT 300
23154: PPUSH
23155: CALL_OW 234
23159: GO 23144
23161: POP
23162: POP
// end ;
23163: PPOPN 2
23165: END
// every 0 0$1 trigger s60 do var i , tmp ;
23166: LD_EXP 94
23170: IFFALSE 23239
23172: GO 23174
23174: DISABLE
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 22
23186: PUSH
23187: LD_OWVAR 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PPUSH
23196: CALL_OW 69
23200: ST_TO_ADDR
// if not tmp then
23201: LD_VAR 0 2
23205: NOT
23206: IFFALSE 23210
// exit ;
23208: GO 23239
// for i in tmp do
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_VAR 0 2
23219: PUSH
23220: FOR_IN
23221: IFFALSE 23237
// SetLives ( i , 600 ) ;
23223: LD_VAR 0 1
23227: PPUSH
23228: LD_INT 600
23230: PPUSH
23231: CALL_OW 234
23235: GO 23220
23237: POP
23238: POP
// end ;
23239: PPOPN 2
23241: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23242: LD_INT 0
23244: PPUSH
// case cmd of 301 :
23245: LD_VAR 0 1
23249: PUSH
23250: LD_INT 301
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23290
23258: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23259: LD_VAR 0 6
23263: PPUSH
23264: LD_VAR 0 7
23268: PPUSH
23269: LD_VAR 0 8
23273: PPUSH
23274: LD_VAR 0 4
23278: PPUSH
23279: LD_VAR 0 5
23283: PPUSH
23284: CALL 24491 0 5
23288: GO 23411
23290: LD_INT 302
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23335
23298: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23299: LD_VAR 0 6
23303: PPUSH
23304: LD_VAR 0 7
23308: PPUSH
23309: LD_VAR 0 8
23313: PPUSH
23314: LD_VAR 0 9
23318: PPUSH
23319: LD_VAR 0 4
23323: PPUSH
23324: LD_VAR 0 5
23328: PPUSH
23329: CALL 24582 0 6
23333: GO 23411
23335: LD_INT 303
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 23380
23343: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23344: LD_VAR 0 6
23348: PPUSH
23349: LD_VAR 0 7
23353: PPUSH
23354: LD_VAR 0 8
23358: PPUSH
23359: LD_VAR 0 9
23363: PPUSH
23364: LD_VAR 0 4
23368: PPUSH
23369: LD_VAR 0 5
23373: PPUSH
23374: CALL 23416 0 6
23378: GO 23411
23380: LD_INT 304
23382: DOUBLE
23383: EQUAL
23384: IFTRUE 23388
23386: GO 23410
23388: POP
// hHackTeleport ( unit , x , y ) ; end ;
23389: LD_VAR 0 2
23393: PPUSH
23394: LD_VAR 0 4
23398: PPUSH
23399: LD_VAR 0 5
23403: PPUSH
23404: CALL 25175 0 3
23408: GO 23411
23410: POP
// end ;
23411: LD_VAR 0 12
23415: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23416: LD_INT 0
23418: PPUSH
23419: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23420: LD_VAR 0 1
23424: PUSH
23425: LD_INT 1
23427: LESS
23428: PUSH
23429: LD_VAR 0 1
23433: PUSH
23434: LD_INT 3
23436: GREATER
23437: OR
23438: PUSH
23439: LD_VAR 0 5
23443: PPUSH
23444: LD_VAR 0 6
23448: PPUSH
23449: CALL_OW 428
23453: OR
23454: IFFALSE 23458
// exit ;
23456: GO 24178
// uc_side := your_side ;
23458: LD_ADDR_OWVAR 20
23462: PUSH
23463: LD_OWVAR 2
23467: ST_TO_ADDR
// uc_nation := nation ;
23468: LD_ADDR_OWVAR 21
23472: PUSH
23473: LD_VAR 0 1
23477: ST_TO_ADDR
// bc_level = 1 ;
23478: LD_ADDR_OWVAR 43
23482: PUSH
23483: LD_INT 1
23485: ST_TO_ADDR
// case btype of 1 :
23486: LD_VAR 0 2
23490: PUSH
23491: LD_INT 1
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23510
23499: POP
// bc_type := b_depot ; 2 :
23500: LD_ADDR_OWVAR 42
23504: PUSH
23505: LD_INT 0
23507: ST_TO_ADDR
23508: GO 24122
23510: LD_INT 2
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23529
23518: POP
// bc_type := b_warehouse ; 3 :
23519: LD_ADDR_OWVAR 42
23523: PUSH
23524: LD_INT 1
23526: ST_TO_ADDR
23527: GO 24122
23529: LD_INT 3
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23548
23537: POP
// bc_type := b_lab ; 4 .. 9 :
23538: LD_ADDR_OWVAR 42
23542: PUSH
23543: LD_INT 6
23545: ST_TO_ADDR
23546: GO 24122
23548: LD_INT 4
23550: DOUBLE
23551: GREATEREQUAL
23552: IFFALSE 23560
23554: LD_INT 9
23556: DOUBLE
23557: LESSEQUAL
23558: IFTRUE 23562
23560: GO 23614
23562: POP
// begin bc_type := b_lab_half ;
23563: LD_ADDR_OWVAR 42
23567: PUSH
23568: LD_INT 7
23570: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23571: LD_ADDR_OWVAR 44
23575: PUSH
23576: LD_INT 10
23578: PUSH
23579: LD_INT 11
23581: PUSH
23582: LD_INT 12
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 14
23590: PUSH
23591: LD_INT 13
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: LD_VAR 0 2
23606: PUSH
23607: LD_INT 3
23609: MINUS
23610: ARRAY
23611: ST_TO_ADDR
// end ; 10 .. 13 :
23612: GO 24122
23614: LD_INT 10
23616: DOUBLE
23617: GREATEREQUAL
23618: IFFALSE 23626
23620: LD_INT 13
23622: DOUBLE
23623: LESSEQUAL
23624: IFTRUE 23628
23626: GO 23705
23628: POP
// begin bc_type := b_lab_full ;
23629: LD_ADDR_OWVAR 42
23633: PUSH
23634: LD_INT 8
23636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23637: LD_ADDR_OWVAR 44
23641: PUSH
23642: LD_INT 10
23644: PUSH
23645: LD_INT 12
23647: PUSH
23648: LD_INT 14
23650: PUSH
23651: LD_INT 13
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: LD_VAR 0 2
23664: PUSH
23665: LD_INT 9
23667: MINUS
23668: ARRAY
23669: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23670: LD_ADDR_OWVAR 45
23674: PUSH
23675: LD_INT 11
23677: PUSH
23678: LD_INT 15
23680: PUSH
23681: LD_INT 12
23683: PUSH
23684: LD_INT 15
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_VAR 0 2
23697: PUSH
23698: LD_INT 9
23700: MINUS
23701: ARRAY
23702: ST_TO_ADDR
// end ; 14 :
23703: GO 24122
23705: LD_INT 14
23707: DOUBLE
23708: EQUAL
23709: IFTRUE 23713
23711: GO 23724
23713: POP
// bc_type := b_workshop ; 15 :
23714: LD_ADDR_OWVAR 42
23718: PUSH
23719: LD_INT 2
23721: ST_TO_ADDR
23722: GO 24122
23724: LD_INT 15
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23743
23732: POP
// bc_type := b_factory ; 16 :
23733: LD_ADDR_OWVAR 42
23737: PUSH
23738: LD_INT 3
23740: ST_TO_ADDR
23741: GO 24122
23743: LD_INT 16
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23762
23751: POP
// bc_type := b_ext_gun ; 17 :
23752: LD_ADDR_OWVAR 42
23756: PUSH
23757: LD_INT 17
23759: ST_TO_ADDR
23760: GO 24122
23762: LD_INT 17
23764: DOUBLE
23765: EQUAL
23766: IFTRUE 23770
23768: GO 23798
23770: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23771: LD_ADDR_OWVAR 42
23775: PUSH
23776: LD_INT 19
23778: PUSH
23779: LD_INT 23
23781: PUSH
23782: LD_INT 19
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: LD_VAR 0 1
23794: ARRAY
23795: ST_TO_ADDR
23796: GO 24122
23798: LD_INT 18
23800: DOUBLE
23801: EQUAL
23802: IFTRUE 23806
23804: GO 23817
23806: POP
// bc_type := b_ext_radar ; 19 :
23807: LD_ADDR_OWVAR 42
23811: PUSH
23812: LD_INT 20
23814: ST_TO_ADDR
23815: GO 24122
23817: LD_INT 19
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23836
23825: POP
// bc_type := b_ext_radio ; 20 :
23826: LD_ADDR_OWVAR 42
23830: PUSH
23831: LD_INT 22
23833: ST_TO_ADDR
23834: GO 24122
23836: LD_INT 20
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23855
23844: POP
// bc_type := b_ext_siberium ; 21 :
23845: LD_ADDR_OWVAR 42
23849: PUSH
23850: LD_INT 21
23852: ST_TO_ADDR
23853: GO 24122
23855: LD_INT 21
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23874
23863: POP
// bc_type := b_ext_computer ; 22 :
23864: LD_ADDR_OWVAR 42
23868: PUSH
23869: LD_INT 24
23871: ST_TO_ADDR
23872: GO 24122
23874: LD_INT 22
23876: DOUBLE
23877: EQUAL
23878: IFTRUE 23882
23880: GO 23893
23882: POP
// bc_type := b_ext_track ; 23 :
23883: LD_ADDR_OWVAR 42
23887: PUSH
23888: LD_INT 16
23890: ST_TO_ADDR
23891: GO 24122
23893: LD_INT 23
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 23912
23901: POP
// bc_type := b_ext_laser ; 24 :
23902: LD_ADDR_OWVAR 42
23906: PUSH
23907: LD_INT 25
23909: ST_TO_ADDR
23910: GO 24122
23912: LD_INT 24
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23931
23920: POP
// bc_type := b_control_tower ; 25 :
23921: LD_ADDR_OWVAR 42
23925: PUSH
23926: LD_INT 36
23928: ST_TO_ADDR
23929: GO 24122
23931: LD_INT 25
23933: DOUBLE
23934: EQUAL
23935: IFTRUE 23939
23937: GO 23950
23939: POP
// bc_type := b_breastwork ; 26 :
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 31
23947: ST_TO_ADDR
23948: GO 24122
23950: LD_INT 26
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23958
23956: GO 23969
23958: POP
// bc_type := b_bunker ; 27 :
23959: LD_ADDR_OWVAR 42
23963: PUSH
23964: LD_INT 32
23966: ST_TO_ADDR
23967: GO 24122
23969: LD_INT 27
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23977
23975: GO 23988
23977: POP
// bc_type := b_turret ; 28 :
23978: LD_ADDR_OWVAR 42
23982: PUSH
23983: LD_INT 33
23985: ST_TO_ADDR
23986: GO 24122
23988: LD_INT 28
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24007
23996: POP
// bc_type := b_armoury ; 29 :
23997: LD_ADDR_OWVAR 42
24001: PUSH
24002: LD_INT 4
24004: ST_TO_ADDR
24005: GO 24122
24007: LD_INT 29
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24026
24015: POP
// bc_type := b_barracks ; 30 :
24016: LD_ADDR_OWVAR 42
24020: PUSH
24021: LD_INT 5
24023: ST_TO_ADDR
24024: GO 24122
24026: LD_INT 30
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24045
24034: POP
// bc_type := b_solar_power ; 31 :
24035: LD_ADDR_OWVAR 42
24039: PUSH
24040: LD_INT 27
24042: ST_TO_ADDR
24043: GO 24122
24045: LD_INT 31
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24064
24053: POP
// bc_type := b_oil_power ; 32 :
24054: LD_ADDR_OWVAR 42
24058: PUSH
24059: LD_INT 26
24061: ST_TO_ADDR
24062: GO 24122
24064: LD_INT 32
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24083
24072: POP
// bc_type := b_siberite_power ; 33 :
24073: LD_ADDR_OWVAR 42
24077: PUSH
24078: LD_INT 28
24080: ST_TO_ADDR
24081: GO 24122
24083: LD_INT 33
24085: DOUBLE
24086: EQUAL
24087: IFTRUE 24091
24089: GO 24102
24091: POP
// bc_type := b_oil_mine ; 34 :
24092: LD_ADDR_OWVAR 42
24096: PUSH
24097: LD_INT 29
24099: ST_TO_ADDR
24100: GO 24122
24102: LD_INT 34
24104: DOUBLE
24105: EQUAL
24106: IFTRUE 24110
24108: GO 24121
24110: POP
// bc_type := b_siberite_mine ; end ;
24111: LD_ADDR_OWVAR 42
24115: PUSH
24116: LD_INT 30
24118: ST_TO_ADDR
24119: GO 24122
24121: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24122: LD_ADDR_VAR 0 8
24126: PUSH
24127: LD_VAR 0 5
24131: PPUSH
24132: LD_VAR 0 6
24136: PPUSH
24137: LD_VAR 0 3
24141: PPUSH
24142: CALL_OW 47
24146: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24147: LD_OWVAR 42
24151: PUSH
24152: LD_INT 32
24154: PUSH
24155: LD_INT 33
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: IN
24162: IFFALSE 24178
// PlaceWeaponTurret ( b , weapon ) ;
24164: LD_VAR 0 8
24168: PPUSH
24169: LD_VAR 0 4
24173: PPUSH
24174: CALL_OW 431
// end ;
24178: LD_VAR 0 7
24182: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24183: LD_INT 0
24185: PPUSH
24186: PPUSH
24187: PPUSH
24188: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24189: LD_ADDR_VAR 0 4
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: LD_INT 30
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 30
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PPUSH
24238: CALL_OW 69
24242: ST_TO_ADDR
// if not tmp then
24243: LD_VAR 0 4
24247: NOT
24248: IFFALSE 24252
// exit ;
24250: GO 24311
// for i in tmp do
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 4
24261: PUSH
24262: FOR_IN
24263: IFFALSE 24309
// for j = 1 to 3 do
24265: LD_ADDR_VAR 0 3
24269: PUSH
24270: DOUBLE
24271: LD_INT 1
24273: DEC
24274: ST_TO_ADDR
24275: LD_INT 3
24277: PUSH
24278: FOR_TO
24279: IFFALSE 24305
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24281: LD_VAR 0 2
24285: PPUSH
24286: CALL_OW 274
24290: PPUSH
24291: LD_VAR 0 3
24295: PPUSH
24296: LD_INT 99999
24298: PPUSH
24299: CALL_OW 277
24303: GO 24278
24305: POP
24306: POP
24307: GO 24262
24309: POP
24310: POP
// end ;
24311: LD_VAR 0 1
24315: RET
// export function hHackSetLevel10 ; var i , j ; begin
24316: LD_INT 0
24318: PPUSH
24319: PPUSH
24320: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24321: LD_ADDR_VAR 0 2
24325: PUSH
24326: LD_INT 21
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 69
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24394
// if IsSelected ( i ) then
24344: LD_VAR 0 2
24348: PPUSH
24349: CALL_OW 306
24353: IFFALSE 24392
// begin for j := 1 to 4 do
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: DOUBLE
24361: LD_INT 1
24363: DEC
24364: ST_TO_ADDR
24365: LD_INT 4
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24390
// SetSkill ( i , j , 10 ) ;
24371: LD_VAR 0 2
24375: PPUSH
24376: LD_VAR 0 3
24380: PPUSH
24381: LD_INT 10
24383: PPUSH
24384: CALL_OW 237
24388: GO 24368
24390: POP
24391: POP
// end ;
24392: GO 24341
24394: POP
24395: POP
// end ;
24396: LD_VAR 0 1
24400: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24401: LD_INT 0
24403: PPUSH
24404: PPUSH
24405: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24406: LD_ADDR_VAR 0 2
24410: PUSH
24411: LD_INT 22
24413: PUSH
24414: LD_OWVAR 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PPUSH
24437: CALL_OW 69
24441: PUSH
24442: FOR_IN
24443: IFFALSE 24484
// begin for j := 1 to 4 do
24445: LD_ADDR_VAR 0 3
24449: PUSH
24450: DOUBLE
24451: LD_INT 1
24453: DEC
24454: ST_TO_ADDR
24455: LD_INT 4
24457: PUSH
24458: FOR_TO
24459: IFFALSE 24480
// SetSkill ( i , j , 10 ) ;
24461: LD_VAR 0 2
24465: PPUSH
24466: LD_VAR 0 3
24470: PPUSH
24471: LD_INT 10
24473: PPUSH
24474: CALL_OW 237
24478: GO 24458
24480: POP
24481: POP
// end ;
24482: GO 24442
24484: POP
24485: POP
// end ;
24486: LD_VAR 0 1
24490: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24491: LD_INT 0
24493: PPUSH
// uc_side := your_side ;
24494: LD_ADDR_OWVAR 20
24498: PUSH
24499: LD_OWVAR 2
24503: ST_TO_ADDR
// uc_nation := nation ;
24504: LD_ADDR_OWVAR 21
24508: PUSH
24509: LD_VAR 0 1
24513: ST_TO_ADDR
// InitHc ;
24514: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24518: LD_INT 0
24520: PPUSH
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24535: LD_VAR 0 4
24539: PPUSH
24540: LD_VAR 0 5
24544: PPUSH
24545: CALL_OW 428
24549: PUSH
24550: LD_INT 0
24552: EQUAL
24553: IFFALSE 24577
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24555: CALL_OW 44
24559: PPUSH
24560: LD_VAR 0 4
24564: PPUSH
24565: LD_VAR 0 5
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 48
// end ;
24577: LD_VAR 0 6
24581: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
// uc_side := your_side ;
24586: LD_ADDR_OWVAR 20
24590: PUSH
24591: LD_OWVAR 2
24595: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24596: LD_VAR 0 1
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 3
24609: PUSH
24610: LD_INT 4
24612: PUSH
24613: LD_INT 5
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: IN
24623: IFFALSE 24635
// uc_nation := nation_american else
24625: LD_ADDR_OWVAR 21
24629: PUSH
24630: LD_INT 1
24632: ST_TO_ADDR
24633: GO 24678
// if chassis in [ 11 , 12 , 13 , 14 ] then
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 11
24642: PUSH
24643: LD_INT 12
24645: PUSH
24646: LD_INT 13
24648: PUSH
24649: LD_INT 14
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: IN
24658: IFFALSE 24670
// uc_nation := nation_arabian else
24660: LD_ADDR_OWVAR 21
24664: PUSH
24665: LD_INT 2
24667: ST_TO_ADDR
24668: GO 24678
// uc_nation := nation_russian ;
24670: LD_ADDR_OWVAR 21
24674: PUSH
24675: LD_INT 3
24677: ST_TO_ADDR
// vc_chassis := chassis ;
24678: LD_ADDR_OWVAR 37
24682: PUSH
24683: LD_VAR 0 1
24687: ST_TO_ADDR
// vc_engine := engine ;
24688: LD_ADDR_OWVAR 39
24692: PUSH
24693: LD_VAR 0 2
24697: ST_TO_ADDR
// vc_control := control ;
24698: LD_ADDR_OWVAR 38
24702: PUSH
24703: LD_VAR 0 3
24707: ST_TO_ADDR
// vc_weapon := weapon ;
24708: LD_ADDR_OWVAR 40
24712: PUSH
24713: LD_VAR 0 4
24717: ST_TO_ADDR
// un := CreateVehicle ;
24718: LD_ADDR_VAR 0 8
24722: PUSH
24723: CALL_OW 45
24727: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24728: LD_VAR 0 8
24732: PPUSH
24733: LD_INT 0
24735: PPUSH
24736: LD_INT 5
24738: PPUSH
24739: CALL_OW 12
24743: PPUSH
24744: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24748: LD_VAR 0 8
24752: PPUSH
24753: LD_VAR 0 5
24757: PPUSH
24758: LD_VAR 0 6
24762: PPUSH
24763: LD_INT 1
24765: PPUSH
24766: CALL_OW 48
// end ;
24770: LD_VAR 0 7
24774: RET
// export hInvincible ; every 1 do
24775: GO 24777
24777: DISABLE
// hInvincible := [ ] ;
24778: LD_ADDR_EXP 95
24782: PUSH
24783: EMPTY
24784: ST_TO_ADDR
24785: END
// every 10 do var i ;
24786: GO 24788
24788: DISABLE
24789: LD_INT 0
24791: PPUSH
// begin enable ;
24792: ENABLE
// if not hInvincible then
24793: LD_EXP 95
24797: NOT
24798: IFFALSE 24802
// exit ;
24800: GO 24846
// for i in hInvincible do
24802: LD_ADDR_VAR 0 1
24806: PUSH
24807: LD_EXP 95
24811: PUSH
24812: FOR_IN
24813: IFFALSE 24844
// if GetLives ( i ) < 1000 then
24815: LD_VAR 0 1
24819: PPUSH
24820: CALL_OW 256
24824: PUSH
24825: LD_INT 1000
24827: LESS
24828: IFFALSE 24842
// SetLives ( i , 1000 ) ;
24830: LD_VAR 0 1
24834: PPUSH
24835: LD_INT 1000
24837: PPUSH
24838: CALL_OW 234
24842: GO 24812
24844: POP
24845: POP
// end ;
24846: PPOPN 1
24848: END
// export function hHackInvincible ; var i ; begin
24849: LD_INT 0
24851: PPUSH
24852: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24853: LD_ADDR_VAR 0 2
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 21
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: PUSH
24891: FOR_IN
24892: IFFALSE 24953
// if IsSelected ( i ) then
24894: LD_VAR 0 2
24898: PPUSH
24899: CALL_OW 306
24903: IFFALSE 24951
// begin if i in hInvincible then
24905: LD_VAR 0 2
24909: PUSH
24910: LD_EXP 95
24914: IN
24915: IFFALSE 24935
// hInvincible := hInvincible diff i else
24917: LD_ADDR_EXP 95
24921: PUSH
24922: LD_EXP 95
24926: PUSH
24927: LD_VAR 0 2
24931: DIFF
24932: ST_TO_ADDR
24933: GO 24951
// hInvincible := hInvincible union i ;
24935: LD_ADDR_EXP 95
24939: PUSH
24940: LD_EXP 95
24944: PUSH
24945: LD_VAR 0 2
24949: UNION
24950: ST_TO_ADDR
// end ;
24951: GO 24891
24953: POP
24954: POP
// end ;
24955: LD_VAR 0 1
24959: RET
// export function hHackInvisible ; var i , j ; begin
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
24964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 21
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PPUSH
24980: CALL_OW 69
24984: PUSH
24985: FOR_IN
24986: IFFALSE 25010
// if IsSelected ( i ) then
24988: LD_VAR 0 2
24992: PPUSH
24993: CALL_OW 306
24997: IFFALSE 25008
// ComForceInvisible ( i ) ;
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 496
25008: GO 24985
25010: POP
25011: POP
// end ;
25012: LD_VAR 0 1
25016: RET
// export function hHackChangeYourSide ; begin
25017: LD_INT 0
25019: PPUSH
// if your_side = 8 then
25020: LD_OWVAR 2
25024: PUSH
25025: LD_INT 8
25027: EQUAL
25028: IFFALSE 25040
// your_side := 0 else
25030: LD_ADDR_OWVAR 2
25034: PUSH
25035: LD_INT 0
25037: ST_TO_ADDR
25038: GO 25054
// your_side := your_side + 1 ;
25040: LD_ADDR_OWVAR 2
25044: PUSH
25045: LD_OWVAR 2
25049: PUSH
25050: LD_INT 1
25052: PLUS
25053: ST_TO_ADDR
// end ;
25054: LD_VAR 0 1
25058: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
// for i in all_units do
25064: LD_ADDR_VAR 0 2
25068: PUSH
25069: LD_OWVAR 3
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25153
// if IsSelected ( i ) then
25077: LD_VAR 0 2
25081: PPUSH
25082: CALL_OW 306
25086: IFFALSE 25151
// begin j := GetSide ( i ) ;
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: LD_VAR 0 2
25097: PPUSH
25098: CALL_OW 255
25102: ST_TO_ADDR
// if j = 8 then
25103: LD_VAR 0 3
25107: PUSH
25108: LD_INT 8
25110: EQUAL
25111: IFFALSE 25123
// j := 0 else
25113: LD_ADDR_VAR 0 3
25117: PUSH
25118: LD_INT 0
25120: ST_TO_ADDR
25121: GO 25137
// j := j + 1 ;
25123: LD_ADDR_VAR 0 3
25127: PUSH
25128: LD_VAR 0 3
25132: PUSH
25133: LD_INT 1
25135: PLUS
25136: ST_TO_ADDR
// SetSide ( i , j ) ;
25137: LD_VAR 0 2
25141: PPUSH
25142: LD_VAR 0 3
25146: PPUSH
25147: CALL_OW 235
// end ;
25151: GO 25074
25153: POP
25154: POP
// end ;
25155: LD_VAR 0 1
25159: RET
// export function hHackFog ; begin
25160: LD_INT 0
25162: PPUSH
// FogOff ( true ) ;
25163: LD_INT 1
25165: PPUSH
25166: CALL_OW 344
// end ;
25170: LD_VAR 0 1
25174: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25175: LD_INT 0
25177: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25178: LD_VAR 0 1
25182: PPUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_VAR 0 3
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: CALL_OW 483
// CenterOnXY ( x , y ) ;
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 3
25212: PPUSH
25213: CALL_OW 84
// end ; end_of_file
25217: LD_VAR 0 4
25221: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
25226: PPUSH
25227: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 264
25237: PUSH
25238: LD_EXP 23
25242: EQUAL
25243: IFFALSE 25315
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25245: LD_INT 68
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 255
25257: PPUSH
25258: CALL_OW 321
25262: PUSH
25263: LD_INT 2
25265: EQUAL
25266: IFFALSE 25278
// eff := 70 else
25268: LD_ADDR_VAR 0 4
25272: PUSH
25273: LD_INT 70
25275: ST_TO_ADDR
25276: GO 25286
// eff := 30 ;
25278: LD_ADDR_VAR 0 4
25282: PUSH
25283: LD_INT 30
25285: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 250
25295: PPUSH
25296: LD_VAR 0 1
25300: PPUSH
25301: CALL_OW 251
25305: PPUSH
25306: LD_VAR 0 4
25310: PPUSH
25311: CALL_OW 495
// end ; end ;
25315: LD_VAR 0 2
25319: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25320: LD_INT 0
25322: PPUSH
// end ;
25323: LD_VAR 0 4
25327: RET
// export function SOS_Command ( cmd ) ; begin
25328: LD_INT 0
25330: PPUSH
// end ;
25331: LD_VAR 0 2
25335: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25336: LD_INT 0
25338: PPUSH
// end ;
25339: LD_VAR 0 6
25343: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25344: LD_INT 0
25346: PPUSH
25347: PPUSH
// if not vehicle or not factory then
25348: LD_VAR 0 1
25352: NOT
25353: PUSH
25354: LD_VAR 0 2
25358: NOT
25359: OR
25360: IFFALSE 25364
// exit ;
25362: GO 25595
// if factoryWaypoints >= factory then
25364: LD_EXP 96
25368: PUSH
25369: LD_VAR 0 2
25373: GREATEREQUAL
25374: IFFALSE 25595
// if factoryWaypoints [ factory ] then
25376: LD_EXP 96
25380: PUSH
25381: LD_VAR 0 2
25385: ARRAY
25386: IFFALSE 25595
// begin if GetControl ( vehicle ) = control_manual then
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 263
25397: PUSH
25398: LD_INT 1
25400: EQUAL
25401: IFFALSE 25482
// begin driver := IsDrivenBy ( vehicle ) ;
25403: LD_ADDR_VAR 0 4
25407: PUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 311
25417: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25418: LD_VAR 0 4
25422: PPUSH
25423: LD_EXP 96
25427: PUSH
25428: LD_VAR 0 2
25432: ARRAY
25433: PUSH
25434: LD_INT 3
25436: ARRAY
25437: PPUSH
25438: LD_EXP 96
25442: PUSH
25443: LD_VAR 0 2
25447: ARRAY
25448: PUSH
25449: LD_INT 4
25451: ARRAY
25452: PPUSH
25453: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25457: LD_VAR 0 4
25461: PPUSH
25462: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25466: LD_VAR 0 4
25470: PPUSH
25471: LD_VAR 0 2
25475: PPUSH
25476: CALL_OW 180
// end else
25480: GO 25595
// if GetControl ( vehicle ) = control_remote then
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL_OW 263
25491: PUSH
25492: LD_INT 2
25494: EQUAL
25495: IFFALSE 25556
// begin wait ( 0 0$2 ) ;
25497: LD_INT 70
25499: PPUSH
25500: CALL_OW 67
// if Connect ( vehicle ) then
25504: LD_VAR 0 1
25508: PPUSH
25509: CALL 37819 0 1
25513: IFFALSE 25554
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25515: LD_VAR 0 1
25519: PPUSH
25520: LD_EXP 96
25524: PUSH
25525: LD_VAR 0 2
25529: ARRAY
25530: PUSH
25531: LD_INT 3
25533: ARRAY
25534: PPUSH
25535: LD_EXP 96
25539: PUSH
25540: LD_VAR 0 2
25544: ARRAY
25545: PUSH
25546: LD_INT 4
25548: ARRAY
25549: PPUSH
25550: CALL_OW 171
// end else
25554: GO 25595
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25556: LD_VAR 0 1
25560: PPUSH
25561: LD_EXP 96
25565: PUSH
25566: LD_VAR 0 2
25570: ARRAY
25571: PUSH
25572: LD_INT 3
25574: ARRAY
25575: PPUSH
25576: LD_EXP 96
25580: PUSH
25581: LD_VAR 0 2
25585: ARRAY
25586: PUSH
25587: LD_INT 4
25589: ARRAY
25590: PPUSH
25591: CALL_OW 171
// end ; end ;
25595: LD_VAR 0 3
25599: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25600: LD_INT 0
25602: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25603: LD_VAR 0 1
25607: PUSH
25608: LD_INT 250
25610: EQUAL
25611: PUSH
25612: LD_VAR 0 2
25616: PPUSH
25617: CALL_OW 264
25621: PUSH
25622: LD_EXP 26
25626: EQUAL
25627: AND
25628: IFFALSE 25649
// MinerPlaceMine ( unit , x , y ) ;
25630: LD_VAR 0 2
25634: PPUSH
25635: LD_VAR 0 4
25639: PPUSH
25640: LD_VAR 0 5
25644: PPUSH
25645: CALL 28377 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25649: LD_VAR 0 1
25653: PUSH
25654: LD_INT 251
25656: EQUAL
25657: PUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: CALL_OW 264
25667: PUSH
25668: LD_EXP 26
25672: EQUAL
25673: AND
25674: IFFALSE 25695
// MinerDetonateMine ( unit , x , y ) ;
25676: LD_VAR 0 2
25680: PPUSH
25681: LD_VAR 0 4
25685: PPUSH
25686: LD_VAR 0 5
25690: PPUSH
25691: CALL 28654 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25695: LD_VAR 0 1
25699: PUSH
25700: LD_INT 252
25702: EQUAL
25703: PUSH
25704: LD_VAR 0 2
25708: PPUSH
25709: CALL_OW 264
25713: PUSH
25714: LD_EXP 26
25718: EQUAL
25719: AND
25720: IFFALSE 25741
// MinerCreateMinefield ( unit , x , y ) ;
25722: LD_VAR 0 2
25726: PPUSH
25727: LD_VAR 0 4
25731: PPUSH
25732: LD_VAR 0 5
25736: PPUSH
25737: CALL 29071 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25741: LD_VAR 0 1
25745: PUSH
25746: LD_INT 253
25748: EQUAL
25749: PUSH
25750: LD_VAR 0 2
25754: PPUSH
25755: CALL_OW 257
25759: PUSH
25760: LD_INT 5
25762: EQUAL
25763: AND
25764: IFFALSE 25785
// ComBinocular ( unit , x , y ) ;
25766: LD_VAR 0 2
25770: PPUSH
25771: LD_VAR 0 4
25775: PPUSH
25776: LD_VAR 0 5
25780: PPUSH
25781: CALL 29442 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25785: LD_VAR 0 1
25789: PUSH
25790: LD_INT 254
25792: EQUAL
25793: PUSH
25794: LD_VAR 0 2
25798: PPUSH
25799: CALL_OW 264
25803: PUSH
25804: LD_EXP 21
25808: EQUAL
25809: AND
25810: PUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: CALL_OW 263
25820: PUSH
25821: LD_INT 3
25823: EQUAL
25824: AND
25825: IFFALSE 25841
// HackDestroyVehicle ( unit , selectedUnit ) ;
25827: LD_VAR 0 2
25831: PPUSH
25832: LD_VAR 0 3
25836: PPUSH
25837: CALL 27737 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25841: LD_VAR 0 1
25845: PUSH
25846: LD_INT 255
25848: EQUAL
25849: PUSH
25850: LD_VAR 0 2
25854: PPUSH
25855: CALL_OW 264
25859: PUSH
25860: LD_INT 14
25862: PUSH
25863: LD_INT 53
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: IN
25870: AND
25871: PUSH
25872: LD_VAR 0 4
25876: PPUSH
25877: LD_VAR 0 5
25881: PPUSH
25882: CALL_OW 488
25886: AND
25887: IFFALSE 25911
// CutTreeXYR ( unit , x , y , 12 ) ;
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_VAR 0 4
25898: PPUSH
25899: LD_VAR 0 5
25903: PPUSH
25904: LD_INT 12
25906: PPUSH
25907: CALL 26303 0 4
// if cmd = 256 then
25911: LD_VAR 0 1
25915: PUSH
25916: LD_INT 256
25918: EQUAL
25919: IFFALSE 25940
// SetFactoryWaypoint ( unit , x , y ) ;
25921: LD_VAR 0 2
25925: PPUSH
25926: LD_VAR 0 4
25930: PPUSH
25931: LD_VAR 0 5
25935: PPUSH
25936: CALL 25945 0 3
// end ;
25940: LD_VAR 0 6
25944: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25949: LD_VAR 0 1
25953: NOT
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_VAR 0 3
25964: PPUSH
25965: CALL_OW 488
25969: NOT
25970: OR
25971: PUSH
25972: LD_VAR 0 1
25976: PPUSH
25977: CALL_OW 266
25981: PUSH
25982: LD_INT 3
25984: NONEQUAL
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 247
25995: PUSH
25996: LD_INT 1
25998: EQUAL
25999: NOT
26000: AND
26001: OR
26002: IFFALSE 26006
// exit ;
26004: GO 26155
// if GetType ( factory ) = unit_human then
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 247
26015: PUSH
26016: LD_INT 1
26018: EQUAL
26019: IFFALSE 26036
// factory := IsInUnit ( factory ) ;
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 310
26035: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 3
26048: NONEQUAL
26049: IFFALSE 26053
// exit ;
26051: GO 26155
// if HexInfo ( x , y ) = factory then
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: CALL_OW 428
26067: PUSH
26068: LD_VAR 0 1
26072: EQUAL
26073: IFFALSE 26100
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26075: LD_ADDR_EXP 96
26079: PUSH
26080: LD_EXP 96
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
26098: GO 26151
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26100: LD_ADDR_EXP 96
26104: PUSH
26105: LD_EXP 96
26109: PPUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 255
26124: PUSH
26125: LD_VAR 0 1
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 1
26150: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26151: CALL 26160 0 0
// end ;
26155: LD_VAR 0 4
26159: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26164: LD_STRING resetFactoryWaypoint();
26166: PPUSH
26167: CALL_OW 559
// if factoryWaypoints then
26171: LD_EXP 96
26175: IFFALSE 26298
// begin for i := 1 to factoryWaypoints do
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: DOUBLE
26183: LD_INT 1
26185: DEC
26186: ST_TO_ADDR
26187: LD_EXP 96
26191: PUSH
26192: FOR_TO
26193: IFFALSE 26296
// if factoryWaypoints [ i ] then
26195: LD_EXP 96
26199: PUSH
26200: LD_VAR 0 2
26204: ARRAY
26205: IFFALSE 26294
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26207: LD_STRING setFactoryWaypointXY(
26209: PUSH
26210: LD_EXP 96
26214: PUSH
26215: LD_VAR 0 2
26219: ARRAY
26220: PUSH
26221: LD_INT 1
26223: ARRAY
26224: STR
26225: PUSH
26226: LD_STRING ,
26228: STR
26229: PUSH
26230: LD_EXP 96
26234: PUSH
26235: LD_VAR 0 2
26239: ARRAY
26240: PUSH
26241: LD_INT 2
26243: ARRAY
26244: STR
26245: PUSH
26246: LD_STRING ,
26248: STR
26249: PUSH
26250: LD_EXP 96
26254: PUSH
26255: LD_VAR 0 2
26259: ARRAY
26260: PUSH
26261: LD_INT 3
26263: ARRAY
26264: STR
26265: PUSH
26266: LD_STRING ,
26268: STR
26269: PUSH
26270: LD_EXP 96
26274: PUSH
26275: LD_VAR 0 2
26279: ARRAY
26280: PUSH
26281: LD_INT 4
26283: ARRAY
26284: STR
26285: PUSH
26286: LD_STRING )
26288: STR
26289: PPUSH
26290: CALL_OW 559
26294: GO 26192
26296: POP
26297: POP
// end ; end ;
26298: LD_VAR 0 1
26302: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26303: LD_INT 0
26305: PPUSH
26306: PPUSH
26307: PPUSH
26308: PPUSH
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26314: LD_VAR 0 1
26318: NOT
26319: PUSH
26320: LD_VAR 0 2
26324: PPUSH
26325: LD_VAR 0 3
26329: PPUSH
26330: CALL_OW 488
26334: NOT
26335: OR
26336: PUSH
26337: LD_VAR 0 4
26341: NOT
26342: OR
26343: IFFALSE 26347
// exit ;
26345: GO 26687
// list := [ ] ;
26347: LD_ADDR_VAR 0 13
26351: PUSH
26352: EMPTY
26353: ST_TO_ADDR
// if x - r < 0 then
26354: LD_VAR 0 2
26358: PUSH
26359: LD_VAR 0 4
26363: MINUS
26364: PUSH
26365: LD_INT 0
26367: LESS
26368: IFFALSE 26380
// min_x := 0 else
26370: LD_ADDR_VAR 0 7
26374: PUSH
26375: LD_INT 0
26377: ST_TO_ADDR
26378: GO 26396
// min_x := x - r ;
26380: LD_ADDR_VAR 0 7
26384: PUSH
26385: LD_VAR 0 2
26389: PUSH
26390: LD_VAR 0 4
26394: MINUS
26395: ST_TO_ADDR
// if y - r < 0 then
26396: LD_VAR 0 3
26400: PUSH
26401: LD_VAR 0 4
26405: MINUS
26406: PUSH
26407: LD_INT 0
26409: LESS
26410: IFFALSE 26422
// min_y := 0 else
26412: LD_ADDR_VAR 0 8
26416: PUSH
26417: LD_INT 0
26419: ST_TO_ADDR
26420: GO 26438
// min_y := y - r ;
26422: LD_ADDR_VAR 0 8
26426: PUSH
26427: LD_VAR 0 3
26431: PUSH
26432: LD_VAR 0 4
26436: MINUS
26437: ST_TO_ADDR
// max_x := x + r ;
26438: LD_ADDR_VAR 0 9
26442: PUSH
26443: LD_VAR 0 2
26447: PUSH
26448: LD_VAR 0 4
26452: PLUS
26453: ST_TO_ADDR
// max_y := y + r ;
26454: LD_ADDR_VAR 0 10
26458: PUSH
26459: LD_VAR 0 3
26463: PUSH
26464: LD_VAR 0 4
26468: PLUS
26469: ST_TO_ADDR
// for _x = min_x to max_x do
26470: LD_ADDR_VAR 0 11
26474: PUSH
26475: DOUBLE
26476: LD_VAR 0 7
26480: DEC
26481: ST_TO_ADDR
26482: LD_VAR 0 9
26486: PUSH
26487: FOR_TO
26488: IFFALSE 26605
// for _y = min_y to max_y do
26490: LD_ADDR_VAR 0 12
26494: PUSH
26495: DOUBLE
26496: LD_VAR 0 8
26500: DEC
26501: ST_TO_ADDR
26502: LD_VAR 0 10
26506: PUSH
26507: FOR_TO
26508: IFFALSE 26601
// begin if not ValidHex ( _x , _y ) then
26510: LD_VAR 0 11
26514: PPUSH
26515: LD_VAR 0 12
26519: PPUSH
26520: CALL_OW 488
26524: NOT
26525: IFFALSE 26529
// continue ;
26527: GO 26507
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26529: LD_VAR 0 11
26533: PPUSH
26534: LD_VAR 0 12
26538: PPUSH
26539: CALL_OW 351
26543: PUSH
26544: LD_VAR 0 11
26548: PPUSH
26549: LD_VAR 0 12
26553: PPUSH
26554: CALL_OW 554
26558: AND
26559: IFFALSE 26599
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26561: LD_ADDR_VAR 0 13
26565: PUSH
26566: LD_VAR 0 13
26570: PPUSH
26571: LD_VAR 0 13
26575: PUSH
26576: LD_INT 1
26578: PLUS
26579: PPUSH
26580: LD_VAR 0 11
26584: PUSH
26585: LD_VAR 0 12
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PPUSH
26594: CALL_OW 2
26598: ST_TO_ADDR
// end ;
26599: GO 26507
26601: POP
26602: POP
26603: GO 26487
26605: POP
26606: POP
// if not list then
26607: LD_VAR 0 13
26611: NOT
26612: IFFALSE 26616
// exit ;
26614: GO 26687
// for i in list do
26616: LD_ADDR_VAR 0 6
26620: PUSH
26621: LD_VAR 0 13
26625: PUSH
26626: FOR_IN
26627: IFFALSE 26685
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26629: LD_VAR 0 1
26633: PPUSH
26634: LD_STRING M
26636: PUSH
26637: LD_VAR 0 6
26641: PUSH
26642: LD_INT 1
26644: ARRAY
26645: PUSH
26646: LD_VAR 0 6
26650: PUSH
26651: LD_INT 2
26653: ARRAY
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: PPUSH
26679: CALL_OW 447
26683: GO 26626
26685: POP
26686: POP
// end ;
26687: LD_VAR 0 5
26691: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26692: LD_EXP 97
26696: NOT
26697: IFFALSE 26747
26699: GO 26701
26701: DISABLE
// begin initHack := true ;
26702: LD_ADDR_EXP 97
26706: PUSH
26707: LD_INT 1
26709: ST_TO_ADDR
// hackTanks := [ ] ;
26710: LD_ADDR_EXP 98
26714: PUSH
26715: EMPTY
26716: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26717: LD_ADDR_EXP 99
26721: PUSH
26722: EMPTY
26723: ST_TO_ADDR
// hackLimit := 3 ;
26724: LD_ADDR_EXP 100
26728: PUSH
26729: LD_INT 3
26731: ST_TO_ADDR
// hackDist := 12 ;
26732: LD_ADDR_EXP 101
26736: PUSH
26737: LD_INT 12
26739: ST_TO_ADDR
// hackCounter := [ ] ;
26740: LD_ADDR_EXP 102
26744: PUSH
26745: EMPTY
26746: ST_TO_ADDR
// end ;
26747: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26748: LD_EXP 97
26752: PUSH
26753: LD_INT 34
26755: PUSH
26756: LD_EXP 21
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 69
26769: AND
26770: IFFALSE 27025
26772: GO 26774
26774: DISABLE
26775: LD_INT 0
26777: PPUSH
26778: PPUSH
// begin enable ;
26779: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_INT 34
26787: PUSH
26788: LD_EXP 21
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PPUSH
26797: CALL_OW 69
26801: PUSH
26802: FOR_IN
26803: IFFALSE 27023
// begin if not i in hackTanks then
26805: LD_VAR 0 1
26809: PUSH
26810: LD_EXP 98
26814: IN
26815: NOT
26816: IFFALSE 26899
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26818: LD_ADDR_EXP 98
26822: PUSH
26823: LD_EXP 98
26827: PPUSH
26828: LD_EXP 98
26832: PUSH
26833: LD_INT 1
26835: PLUS
26836: PPUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 1
26846: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26847: LD_ADDR_EXP 99
26851: PUSH
26852: LD_EXP 99
26856: PPUSH
26857: LD_EXP 99
26861: PUSH
26862: LD_INT 1
26864: PLUS
26865: PPUSH
26866: EMPTY
26867: PPUSH
26868: CALL_OW 1
26872: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26873: LD_ADDR_EXP 102
26877: PUSH
26878: LD_EXP 102
26882: PPUSH
26883: LD_EXP 102
26887: PUSH
26888: LD_INT 1
26890: PLUS
26891: PPUSH
26892: EMPTY
26893: PPUSH
26894: CALL_OW 1
26898: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 302
26908: NOT
26909: IFFALSE 26922
// begin HackUnlinkAll ( i ) ;
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL 27028 0 1
// continue ;
26920: GO 26802
// end ; HackCheckCapturedStatus ( i ) ;
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL 27471 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_INT 81
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 255
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 33
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 91
26965: PUSH
26966: LD_VAR 0 1
26970: PUSH
26971: LD_EXP 101
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 50
26983: PUSH
26984: EMPTY
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 69
26997: ST_TO_ADDR
// if not tmp then
26998: LD_VAR 0 2
27002: NOT
27003: IFFALSE 27007
// continue ;
27005: GO 26802
// HackLink ( i , tmp ) ;
27007: LD_VAR 0 1
27011: PPUSH
27012: LD_VAR 0 2
27016: PPUSH
27017: CALL 27164 0 2
// end ;
27021: GO 26802
27023: POP
27024: POP
// end ;
27025: PPOPN 2
27027: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
27032: PPUSH
// if not hack in hackTanks then
27033: LD_VAR 0 1
27037: PUSH
27038: LD_EXP 98
27042: IN
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27159
// index := GetElementIndex ( hackTanks , hack ) ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_EXP 98
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL 34633 0 2
27067: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27068: LD_EXP 99
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: IFFALSE 27159
// begin for i in hackTanksCaptured [ index ] do
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_EXP 99
27089: PUSH
27090: LD_VAR 0 4
27094: ARRAY
27095: PUSH
27096: FOR_IN
27097: IFFALSE 27123
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27099: LD_VAR 0 3
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 3
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: CALL_OW 235
27121: GO 27096
27123: POP
27124: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27125: LD_ADDR_EXP 99
27129: PUSH
27130: LD_EXP 99
27134: PPUSH
27135: LD_VAR 0 4
27139: PPUSH
27140: EMPTY
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27147: LD_VAR 0 1
27151: PPUSH
27152: LD_INT 0
27154: PPUSH
27155: CALL_OW 505
// end ; end ;
27159: LD_VAR 0 2
27163: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
// if not hack in hackTanks or not vehicles then
27169: LD_VAR 0 1
27173: PUSH
27174: LD_EXP 98
27178: IN
27179: NOT
27180: PUSH
27181: LD_VAR 0 2
27185: NOT
27186: OR
27187: IFFALSE 27191
// exit ;
27189: GO 27466
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27191: LD_ADDR_VAR 0 2
27195: PUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_VAR 0 2
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: LD_INT 1
27211: PPUSH
27212: CALL 35283 0 4
27216: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_EXP 98
27226: PPUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL 34633 0 2
27236: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27237: LD_EXP 99
27241: PUSH
27242: LD_VAR 0 5
27246: ARRAY
27247: PUSH
27248: LD_EXP 100
27252: LESS
27253: IFFALSE 27442
// begin for i := 1 to vehicles do
27255: LD_ADDR_VAR 0 4
27259: PUSH
27260: DOUBLE
27261: LD_INT 1
27263: DEC
27264: ST_TO_ADDR
27265: LD_VAR 0 2
27269: PUSH
27270: FOR_TO
27271: IFFALSE 27440
// begin if hackTanksCaptured [ index ] = hackLimit then
27273: LD_EXP 99
27277: PUSH
27278: LD_VAR 0 5
27282: ARRAY
27283: PUSH
27284: LD_EXP 100
27288: EQUAL
27289: IFFALSE 27293
// break ;
27291: GO 27440
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27293: LD_ADDR_EXP 102
27297: PUSH
27298: LD_EXP 102
27302: PPUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: LD_EXP 102
27312: PUSH
27313: LD_VAR 0 5
27317: ARRAY
27318: PUSH
27319: LD_INT 1
27321: PLUS
27322: PPUSH
27323: CALL_OW 1
27327: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27328: LD_ADDR_EXP 99
27332: PUSH
27333: LD_EXP 99
27337: PPUSH
27338: LD_VAR 0 5
27342: PUSH
27343: LD_EXP 99
27347: PUSH
27348: LD_VAR 0 5
27352: ARRAY
27353: PUSH
27354: LD_INT 1
27356: PLUS
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: LD_VAR 0 2
27366: PUSH
27367: LD_VAR 0 4
27371: ARRAY
27372: PUSH
27373: LD_VAR 0 2
27377: PUSH
27378: LD_VAR 0 4
27382: ARRAY
27383: PPUSH
27384: CALL_OW 255
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL 34848 0 3
27397: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27398: LD_VAR 0 2
27402: PUSH
27403: LD_VAR 0 4
27407: ARRAY
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 255
27418: PPUSH
27419: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27423: LD_VAR 0 2
27427: PUSH
27428: LD_VAR 0 4
27432: ARRAY
27433: PPUSH
27434: CALL_OW 141
// end ;
27438: GO 27270
27440: POP
27441: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27442: LD_VAR 0 1
27446: PPUSH
27447: LD_EXP 99
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_INT 0
27460: PLUS
27461: PPUSH
27462: CALL_OW 505
// end ;
27466: LD_VAR 0 3
27470: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27471: LD_INT 0
27473: PPUSH
27474: PPUSH
27475: PPUSH
27476: PPUSH
// if not hack in hackTanks then
27477: LD_VAR 0 1
27481: PUSH
27482: LD_EXP 98
27486: IN
27487: NOT
27488: IFFALSE 27492
// exit ;
27490: GO 27732
// index := GetElementIndex ( hackTanks , hack ) ;
27492: LD_ADDR_VAR 0 4
27496: PUSH
27497: LD_EXP 98
27501: PPUSH
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL 34633 0 2
27511: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: DOUBLE
27518: LD_EXP 99
27522: PUSH
27523: LD_VAR 0 4
27527: ARRAY
27528: INC
27529: ST_TO_ADDR
27530: LD_INT 1
27532: PUSH
27533: FOR_DOWNTO
27534: IFFALSE 27706
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_EXP 99
27545: PUSH
27546: LD_VAR 0 4
27550: ARRAY
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27558: LD_VAR 0 5
27562: PUSH
27563: LD_INT 1
27565: ARRAY
27566: PPUSH
27567: CALL_OW 302
27571: NOT
27572: PUSH
27573: LD_VAR 0 5
27577: PUSH
27578: LD_INT 1
27580: ARRAY
27581: PPUSH
27582: CALL_OW 255
27586: PUSH
27587: LD_VAR 0 1
27591: PPUSH
27592: CALL_OW 255
27596: NONEQUAL
27597: OR
27598: IFFALSE 27704
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27600: LD_VAR 0 5
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PPUSH
27609: CALL_OW 305
27613: PUSH
27614: LD_VAR 0 5
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PPUSH
27623: CALL_OW 255
27627: PUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: CALL_OW 255
27637: EQUAL
27638: AND
27639: IFFALSE 27663
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27641: LD_VAR 0 5
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: PPUSH
27650: LD_VAR 0 5
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27663: LD_ADDR_EXP 99
27667: PUSH
27668: LD_EXP 99
27672: PPUSH
27673: LD_VAR 0 4
27677: PPUSH
27678: LD_EXP 99
27682: PUSH
27683: LD_VAR 0 4
27687: ARRAY
27688: PPUSH
27689: LD_VAR 0 3
27693: PPUSH
27694: CALL_OW 3
27698: PPUSH
27699: CALL_OW 1
27703: ST_TO_ADDR
// end ; end ;
27704: GO 27533
27706: POP
27707: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27708: LD_VAR 0 1
27712: PPUSH
27713: LD_EXP 99
27717: PUSH
27718: LD_VAR 0 4
27722: ARRAY
27723: PUSH
27724: LD_INT 0
27726: PLUS
27727: PPUSH
27728: CALL_OW 505
// end ;
27732: LD_VAR 0 2
27736: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27737: LD_INT 0
27739: PPUSH
27740: PPUSH
27741: PPUSH
27742: PPUSH
// if not hack in hackTanks then
27743: LD_VAR 0 1
27747: PUSH
27748: LD_EXP 98
27752: IN
27753: NOT
27754: IFFALSE 27758
// exit ;
27756: GO 27843
// index := GetElementIndex ( hackTanks , hack ) ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_EXP 98
27767: PPUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL 34633 0 2
27777: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27778: LD_ADDR_VAR 0 4
27782: PUSH
27783: DOUBLE
27784: LD_INT 1
27786: DEC
27787: ST_TO_ADDR
27788: LD_EXP 99
27792: PUSH
27793: LD_VAR 0 5
27797: ARRAY
27798: PUSH
27799: FOR_TO
27800: IFFALSE 27841
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27802: LD_EXP 99
27806: PUSH
27807: LD_VAR 0 5
27811: ARRAY
27812: PUSH
27813: LD_VAR 0 4
27817: ARRAY
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: PUSH
27823: LD_VAR 0 2
27827: EQUAL
27828: IFFALSE 27839
// KillUnit ( vehicle ) ;
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 66
27839: GO 27799
27841: POP
27842: POP
// end ;
27843: LD_VAR 0 3
27847: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27848: LD_EXP 103
27852: NOT
27853: IFFALSE 27888
27855: GO 27857
27857: DISABLE
// begin initMiner := true ;
27858: LD_ADDR_EXP 103
27862: PUSH
27863: LD_INT 1
27865: ST_TO_ADDR
// minersList := [ ] ;
27866: LD_ADDR_EXP 104
27870: PUSH
27871: EMPTY
27872: ST_TO_ADDR
// minerMinesList := [ ] ;
27873: LD_ADDR_EXP 105
27877: PUSH
27878: EMPTY
27879: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27880: LD_ADDR_EXP 106
27884: PUSH
27885: LD_INT 5
27887: ST_TO_ADDR
// end ;
27888: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27889: LD_EXP 103
27893: PUSH
27894: LD_INT 34
27896: PUSH
27897: LD_EXP 26
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: AND
27911: IFFALSE 28374
27913: GO 27915
27915: DISABLE
27916: LD_INT 0
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
// begin enable ;
27922: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: LD_INT 34
27930: PUSH
27931: LD_EXP 26
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PPUSH
27940: CALL_OW 69
27944: PUSH
27945: FOR_IN
27946: IFFALSE 28018
// begin if not i in minersList then
27948: LD_VAR 0 1
27952: PUSH
27953: LD_EXP 104
27957: IN
27958: NOT
27959: IFFALSE 28016
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27961: LD_ADDR_EXP 104
27965: PUSH
27966: LD_EXP 104
27970: PPUSH
27971: LD_EXP 104
27975: PUSH
27976: LD_INT 1
27978: PLUS
27979: PPUSH
27980: LD_VAR 0 1
27984: PPUSH
27985: CALL_OW 1
27989: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27990: LD_ADDR_EXP 105
27994: PUSH
27995: LD_EXP 105
27999: PPUSH
28000: LD_EXP 105
28004: PUSH
28005: LD_INT 1
28007: PLUS
28008: PPUSH
28009: EMPTY
28010: PPUSH
28011: CALL_OW 1
28015: ST_TO_ADDR
// end end ;
28016: GO 27945
28018: POP
28019: POP
// for i := minerMinesList downto 1 do
28020: LD_ADDR_VAR 0 1
28024: PUSH
28025: DOUBLE
28026: LD_EXP 105
28030: INC
28031: ST_TO_ADDR
28032: LD_INT 1
28034: PUSH
28035: FOR_DOWNTO
28036: IFFALSE 28372
// begin if IsLive ( minersList [ i ] ) then
28038: LD_EXP 104
28042: PUSH
28043: LD_VAR 0 1
28047: ARRAY
28048: PPUSH
28049: CALL_OW 300
28053: IFFALSE 28081
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28055: LD_EXP 104
28059: PUSH
28060: LD_VAR 0 1
28064: ARRAY
28065: PPUSH
28066: LD_EXP 105
28070: PUSH
28071: LD_VAR 0 1
28075: ARRAY
28076: PPUSH
28077: CALL_OW 505
// if not minerMinesList [ i ] then
28081: LD_EXP 105
28085: PUSH
28086: LD_VAR 0 1
28090: ARRAY
28091: NOT
28092: IFFALSE 28096
// continue ;
28094: GO 28035
// for j := minerMinesList [ i ] downto 1 do
28096: LD_ADDR_VAR 0 2
28100: PUSH
28101: DOUBLE
28102: LD_EXP 105
28106: PUSH
28107: LD_VAR 0 1
28111: ARRAY
28112: INC
28113: ST_TO_ADDR
28114: LD_INT 1
28116: PUSH
28117: FOR_DOWNTO
28118: IFFALSE 28368
// begin side := GetSide ( minersList [ i ] ) ;
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_EXP 104
28129: PUSH
28130: LD_VAR 0 1
28134: ARRAY
28135: PPUSH
28136: CALL_OW 255
28140: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28141: LD_ADDR_VAR 0 4
28145: PUSH
28146: LD_EXP 105
28150: PUSH
28151: LD_VAR 0 1
28155: ARRAY
28156: PUSH
28157: LD_VAR 0 2
28161: ARRAY
28162: PUSH
28163: LD_INT 1
28165: ARRAY
28166: PPUSH
28167: LD_EXP 105
28171: PUSH
28172: LD_VAR 0 1
28176: ARRAY
28177: PUSH
28178: LD_VAR 0 2
28182: ARRAY
28183: PUSH
28184: LD_INT 2
28186: ARRAY
28187: PPUSH
28188: CALL_OW 428
28192: ST_TO_ADDR
// if not tmp then
28193: LD_VAR 0 4
28197: NOT
28198: IFFALSE 28202
// continue ;
28200: GO 28117
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28202: LD_VAR 0 4
28206: PUSH
28207: LD_INT 81
28209: PUSH
28210: LD_VAR 0 3
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PPUSH
28219: CALL_OW 69
28223: IN
28224: PUSH
28225: LD_EXP 105
28229: PUSH
28230: LD_VAR 0 1
28234: ARRAY
28235: PUSH
28236: LD_VAR 0 2
28240: ARRAY
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: LD_EXP 105
28250: PUSH
28251: LD_VAR 0 1
28255: ARRAY
28256: PUSH
28257: LD_VAR 0 2
28261: ARRAY
28262: PUSH
28263: LD_INT 2
28265: ARRAY
28266: PPUSH
28267: CALL_OW 458
28271: AND
28272: IFFALSE 28366
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28274: LD_EXP 105
28278: PUSH
28279: LD_VAR 0 1
28283: ARRAY
28284: PUSH
28285: LD_VAR 0 2
28289: ARRAY
28290: PUSH
28291: LD_INT 1
28293: ARRAY
28294: PPUSH
28295: LD_EXP 105
28299: PUSH
28300: LD_VAR 0 1
28304: ARRAY
28305: PUSH
28306: LD_VAR 0 2
28310: ARRAY
28311: PUSH
28312: LD_INT 2
28314: ARRAY
28315: PPUSH
28316: LD_VAR 0 3
28320: PPUSH
28321: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28325: LD_ADDR_EXP 105
28329: PUSH
28330: LD_EXP 105
28334: PPUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: LD_EXP 105
28344: PUSH
28345: LD_VAR 0 1
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 2
28355: PPUSH
28356: CALL_OW 3
28360: PPUSH
28361: CALL_OW 1
28365: ST_TO_ADDR
// end ; end ;
28366: GO 28117
28368: POP
28369: POP
// end ;
28370: GO 28035
28372: POP
28373: POP
// end ;
28374: PPOPN 4
28376: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
// result := false ;
28381: LD_ADDR_VAR 0 4
28385: PUSH
28386: LD_INT 0
28388: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL_OW 264
28398: PUSH
28399: LD_EXP 26
28403: EQUAL
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28649
// index := GetElementIndex ( minersList , unit ) ;
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: LD_EXP 104
28418: PPUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL 34633 0 2
28428: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28429: LD_EXP 105
28433: PUSH
28434: LD_VAR 0 5
28438: ARRAY
28439: PUSH
28440: LD_EXP 106
28444: GREATEREQUAL
28445: IFFALSE 28449
// exit ;
28447: GO 28649
// ComMoveXY ( unit , x , y ) ;
28449: LD_VAR 0 1
28453: PPUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_VAR 0 3
28463: PPUSH
28464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28468: LD_INT 35
28470: PPUSH
28471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: LD_VAR 0 3
28489: PPUSH
28490: CALL 65352 0 3
28494: NOT
28495: PUSH
28496: LD_VAR 0 1
28500: PPUSH
28501: CALL_OW 314
28505: AND
28506: IFFALSE 28510
// exit ;
28508: GO 28649
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28510: LD_VAR 0 2
28514: PPUSH
28515: LD_VAR 0 3
28519: PPUSH
28520: CALL_OW 428
28524: PUSH
28525: LD_VAR 0 1
28529: EQUAL
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 314
28540: NOT
28541: AND
28542: IFFALSE 28468
// PlaySoundXY ( x , y , PlantMine ) ;
28544: LD_VAR 0 2
28548: PPUSH
28549: LD_VAR 0 3
28553: PPUSH
28554: LD_STRING PlantMine
28556: PPUSH
28557: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 255
28580: PPUSH
28581: LD_INT 0
28583: PPUSH
28584: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28588: LD_ADDR_EXP 105
28592: PUSH
28593: LD_EXP 105
28597: PPUSH
28598: LD_VAR 0 5
28602: PUSH
28603: LD_EXP 105
28607: PUSH
28608: LD_VAR 0 5
28612: ARRAY
28613: PUSH
28614: LD_INT 1
28616: PLUS
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PPUSH
28622: LD_VAR 0 2
28626: PUSH
28627: LD_VAR 0 3
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PPUSH
28636: CALL 34848 0 3
28640: ST_TO_ADDR
// result := true ;
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_INT 1
28648: ST_TO_ADDR
// end ;
28649: LD_VAR 0 4
28653: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
28658: PPUSH
// if not unit in minersList then
28659: LD_VAR 0 1
28663: PUSH
28664: LD_EXP 104
28668: IN
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 29066
// index := GetElementIndex ( minersList , unit ) ;
28674: LD_ADDR_VAR 0 6
28678: PUSH
28679: LD_EXP 104
28683: PPUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL 34633 0 2
28693: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28694: LD_ADDR_VAR 0 5
28698: PUSH
28699: DOUBLE
28700: LD_EXP 105
28704: PUSH
28705: LD_VAR 0 6
28709: ARRAY
28710: INC
28711: ST_TO_ADDR
28712: LD_INT 1
28714: PUSH
28715: FOR_DOWNTO
28716: IFFALSE 28877
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28718: LD_EXP 105
28722: PUSH
28723: LD_VAR 0 6
28727: ARRAY
28728: PUSH
28729: LD_VAR 0 5
28733: ARRAY
28734: PUSH
28735: LD_INT 1
28737: ARRAY
28738: PUSH
28739: LD_VAR 0 2
28743: EQUAL
28744: PUSH
28745: LD_EXP 105
28749: PUSH
28750: LD_VAR 0 6
28754: ARRAY
28755: PUSH
28756: LD_VAR 0 5
28760: ARRAY
28761: PUSH
28762: LD_INT 2
28764: ARRAY
28765: PUSH
28766: LD_VAR 0 3
28770: EQUAL
28771: AND
28772: IFFALSE 28875
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28774: LD_EXP 105
28778: PUSH
28779: LD_VAR 0 6
28783: ARRAY
28784: PUSH
28785: LD_VAR 0 5
28789: ARRAY
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: LD_EXP 105
28799: PUSH
28800: LD_VAR 0 6
28804: ARRAY
28805: PUSH
28806: LD_VAR 0 5
28810: ARRAY
28811: PUSH
28812: LD_INT 2
28814: ARRAY
28815: PPUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 255
28825: PPUSH
28826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28830: LD_ADDR_EXP 105
28834: PUSH
28835: LD_EXP 105
28839: PPUSH
28840: LD_VAR 0 6
28844: PPUSH
28845: LD_EXP 105
28849: PUSH
28850: LD_VAR 0 6
28854: ARRAY
28855: PPUSH
28856: LD_VAR 0 5
28860: PPUSH
28861: CALL_OW 3
28865: PPUSH
28866: CALL_OW 1
28870: ST_TO_ADDR
// exit ;
28871: POP
28872: POP
28873: GO 29066
// end ; end ;
28875: GO 28715
28877: POP
28878: POP
// for i := minerMinesList [ index ] downto 1 do
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: DOUBLE
28885: LD_EXP 105
28889: PUSH
28890: LD_VAR 0 6
28894: ARRAY
28895: INC
28896: ST_TO_ADDR
28897: LD_INT 1
28899: PUSH
28900: FOR_DOWNTO
28901: IFFALSE 29064
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28903: LD_EXP 105
28907: PUSH
28908: LD_VAR 0 6
28912: ARRAY
28913: PUSH
28914: LD_VAR 0 5
28918: ARRAY
28919: PUSH
28920: LD_INT 1
28922: ARRAY
28923: PPUSH
28924: LD_EXP 105
28928: PUSH
28929: LD_VAR 0 6
28933: ARRAY
28934: PUSH
28935: LD_VAR 0 5
28939: ARRAY
28940: PUSH
28941: LD_INT 2
28943: ARRAY
28944: PPUSH
28945: LD_VAR 0 2
28949: PPUSH
28950: LD_VAR 0 3
28954: PPUSH
28955: CALL_OW 298
28959: PUSH
28960: LD_INT 6
28962: LESS
28963: IFFALSE 29062
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28965: LD_EXP 105
28969: PUSH
28970: LD_VAR 0 6
28974: ARRAY
28975: PUSH
28976: LD_VAR 0 5
28980: ARRAY
28981: PUSH
28982: LD_INT 1
28984: ARRAY
28985: PPUSH
28986: LD_EXP 105
28990: PUSH
28991: LD_VAR 0 6
28995: ARRAY
28996: PUSH
28997: LD_VAR 0 5
29001: ARRAY
29002: PUSH
29003: LD_INT 2
29005: ARRAY
29006: PPUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 255
29016: PPUSH
29017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29021: LD_ADDR_EXP 105
29025: PUSH
29026: LD_EXP 105
29030: PPUSH
29031: LD_VAR 0 6
29035: PPUSH
29036: LD_EXP 105
29040: PUSH
29041: LD_VAR 0 6
29045: ARRAY
29046: PPUSH
29047: LD_VAR 0 5
29051: PPUSH
29052: CALL_OW 3
29056: PPUSH
29057: CALL_OW 1
29061: ST_TO_ADDR
// end ; end ;
29062: GO 28900
29064: POP
29065: POP
// end ;
29066: LD_VAR 0 4
29070: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29071: LD_INT 0
29073: PPUSH
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 264
29091: PUSH
29092: LD_EXP 26
29096: EQUAL
29097: NOT
29098: PUSH
29099: LD_VAR 0 1
29103: PUSH
29104: LD_EXP 104
29108: IN
29109: NOT
29110: OR
29111: IFFALSE 29115
// exit ;
29113: GO 29437
// index := GetElementIndex ( minersList , unit ) ;
29115: LD_ADDR_VAR 0 6
29119: PUSH
29120: LD_EXP 104
29124: PPUSH
29125: LD_VAR 0 1
29129: PPUSH
29130: CALL 34633 0 2
29134: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29135: LD_ADDR_VAR 0 8
29139: PUSH
29140: LD_EXP 106
29144: PUSH
29145: LD_EXP 105
29149: PUSH
29150: LD_VAR 0 6
29154: ARRAY
29155: MINUS
29156: ST_TO_ADDR
// if not minesFreeAmount then
29157: LD_VAR 0 8
29161: NOT
29162: IFFALSE 29166
// exit ;
29164: GO 29437
// tmp := [ ] ;
29166: LD_ADDR_VAR 0 7
29170: PUSH
29171: EMPTY
29172: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29173: LD_ADDR_VAR 0 5
29177: PUSH
29178: DOUBLE
29179: LD_INT 1
29181: DEC
29182: ST_TO_ADDR
29183: LD_VAR 0 8
29187: PUSH
29188: FOR_TO
29189: IFFALSE 29384
// begin _d := rand ( 0 , 5 ) ;
29191: LD_ADDR_VAR 0 11
29195: PUSH
29196: LD_INT 0
29198: PPUSH
29199: LD_INT 5
29201: PPUSH
29202: CALL_OW 12
29206: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29207: LD_ADDR_VAR 0 12
29211: PUSH
29212: LD_INT 2
29214: PPUSH
29215: LD_INT 6
29217: PPUSH
29218: CALL_OW 12
29222: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29223: LD_ADDR_VAR 0 9
29227: PUSH
29228: LD_VAR 0 2
29232: PPUSH
29233: LD_VAR 0 11
29237: PPUSH
29238: LD_VAR 0 12
29242: PPUSH
29243: CALL_OW 272
29247: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29248: LD_ADDR_VAR 0 10
29252: PUSH
29253: LD_VAR 0 3
29257: PPUSH
29258: LD_VAR 0 11
29262: PPUSH
29263: LD_VAR 0 12
29267: PPUSH
29268: CALL_OW 273
29272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29273: LD_VAR 0 9
29277: PPUSH
29278: LD_VAR 0 10
29282: PPUSH
29283: CALL_OW 488
29287: PUSH
29288: LD_VAR 0 9
29292: PUSH
29293: LD_VAR 0 10
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_VAR 0 7
29306: IN
29307: NOT
29308: AND
29309: PUSH
29310: LD_VAR 0 9
29314: PPUSH
29315: LD_VAR 0 10
29319: PPUSH
29320: CALL_OW 458
29324: NOT
29325: AND
29326: IFFALSE 29368
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29328: LD_ADDR_VAR 0 7
29332: PUSH
29333: LD_VAR 0 7
29337: PPUSH
29338: LD_VAR 0 7
29342: PUSH
29343: LD_INT 1
29345: PLUS
29346: PPUSH
29347: LD_VAR 0 9
29351: PUSH
29352: LD_VAR 0 10
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PPUSH
29361: CALL_OW 1
29365: ST_TO_ADDR
29366: GO 29382
// i := i - 1 ;
29368: LD_ADDR_VAR 0 5
29372: PUSH
29373: LD_VAR 0 5
29377: PUSH
29378: LD_INT 1
29380: MINUS
29381: ST_TO_ADDR
// end ;
29382: GO 29188
29384: POP
29385: POP
// for i in tmp do
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: LD_VAR 0 7
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29435
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29399: LD_VAR 0 1
29403: PPUSH
29404: LD_VAR 0 5
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: PPUSH
29413: LD_VAR 0 5
29417: PUSH
29418: LD_INT 2
29420: ARRAY
29421: PPUSH
29422: CALL 28377 0 3
29426: NOT
29427: IFFALSE 29433
// exit ;
29429: POP
29430: POP
29431: GO 29437
29433: GO 29396
29435: POP
29436: POP
// end ;
29437: LD_VAR 0 4
29441: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29442: LD_INT 0
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
// if not GetClass ( unit ) = class_sniper then
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 257
29460: PUSH
29461: LD_INT 5
29463: EQUAL
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29857
// dist := 8 ;
29469: LD_ADDR_VAR 0 5
29473: PUSH
29474: LD_INT 8
29476: ST_TO_ADDR
// viewRange := 12 ;
29477: LD_ADDR_VAR 0 7
29481: PUSH
29482: LD_INT 12
29484: ST_TO_ADDR
// side := GetSide ( unit ) ;
29485: LD_ADDR_VAR 0 6
29489: PUSH
29490: LD_VAR 0 1
29494: PPUSH
29495: CALL_OW 255
29499: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29500: LD_INT 61
29502: PPUSH
29503: LD_VAR 0 6
29507: PPUSH
29508: CALL_OW 321
29512: PUSH
29513: LD_INT 2
29515: EQUAL
29516: IFFALSE 29526
// viewRange := 16 ;
29518: LD_ADDR_VAR 0 7
29522: PUSH
29523: LD_INT 16
29525: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_VAR 0 2
29535: PPUSH
29536: LD_VAR 0 3
29540: PPUSH
29541: CALL_OW 297
29545: PUSH
29546: LD_VAR 0 5
29550: GREATER
29551: IFFALSE 29630
// begin ComMoveXY ( unit , x , y ) ;
29553: LD_VAR 0 1
29557: PPUSH
29558: LD_VAR 0 2
29562: PPUSH
29563: LD_VAR 0 3
29567: PPUSH
29568: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29572: LD_INT 35
29574: PPUSH
29575: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29579: LD_VAR 0 1
29583: PPUSH
29584: LD_VAR 0 2
29588: PPUSH
29589: LD_VAR 0 3
29593: PPUSH
29594: CALL 65352 0 3
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29857
// until GetDistUnitXY ( unit , x , y ) < dist ;
29603: LD_VAR 0 1
29607: PPUSH
29608: LD_VAR 0 2
29612: PPUSH
29613: LD_VAR 0 3
29617: PPUSH
29618: CALL_OW 297
29622: PUSH
29623: LD_VAR 0 5
29627: LESS
29628: IFFALSE 29572
// end ; ComTurnXY ( unit , x , y ) ;
29630: LD_VAR 0 1
29634: PPUSH
29635: LD_VAR 0 2
29639: PPUSH
29640: LD_VAR 0 3
29644: PPUSH
29645: CALL_OW 118
// wait ( 5 ) ;
29649: LD_INT 5
29651: PPUSH
29652: CALL_OW 67
// _d := GetDir ( unit ) ;
29656: LD_ADDR_VAR 0 10
29660: PUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 254
29670: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29671: LD_ADDR_VAR 0 8
29675: PUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 250
29685: PPUSH
29686: LD_VAR 0 10
29690: PPUSH
29691: LD_VAR 0 5
29695: PPUSH
29696: CALL_OW 272
29700: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29701: LD_ADDR_VAR 0 9
29705: PUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 251
29715: PPUSH
29716: LD_VAR 0 10
29720: PPUSH
29721: LD_VAR 0 5
29725: PPUSH
29726: CALL_OW 273
29730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29731: LD_VAR 0 8
29735: PPUSH
29736: LD_VAR 0 9
29740: PPUSH
29741: CALL_OW 488
29745: NOT
29746: IFFALSE 29750
// exit ;
29748: GO 29857
// ComAnimCustom ( unit , 1 ) ;
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_INT 1
29757: PPUSH
29758: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29762: LD_VAR 0 8
29766: PPUSH
29767: LD_VAR 0 9
29771: PPUSH
29772: LD_VAR 0 6
29776: PPUSH
29777: LD_VAR 0 7
29781: PPUSH
29782: CALL_OW 330
// repeat wait ( 1 ) ;
29786: LD_INT 1
29788: PPUSH
29789: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29793: LD_VAR 0 1
29797: PPUSH
29798: CALL_OW 316
29802: PUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 314
29812: OR
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 302
29823: NOT
29824: OR
29825: PUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL_OW 301
29835: OR
29836: IFFALSE 29786
// RemoveSeeing ( _x , _y , side ) ;
29838: LD_VAR 0 8
29842: PPUSH
29843: LD_VAR 0 9
29847: PPUSH
29848: LD_VAR 0 6
29852: PPUSH
29853: CALL_OW 331
// end ; end_of_file
29857: LD_VAR 0 4
29861: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
// if exist_mode then
29866: LD_VAR 0 2
29870: IFFALSE 29895
// unit := CreateCharacter ( prefix & ident ) else
29872: LD_ADDR_VAR 0 5
29876: PUSH
29877: LD_VAR 0 3
29881: PUSH
29882: LD_VAR 0 1
29886: STR
29887: PPUSH
29888: CALL_OW 34
29892: ST_TO_ADDR
29893: GO 29910
// unit := NewCharacter ( ident ) ;
29895: LD_ADDR_VAR 0 5
29899: PUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 25
29909: ST_TO_ADDR
// result := unit ;
29910: LD_ADDR_VAR 0 4
29914: PUSH
29915: LD_VAR 0 5
29919: ST_TO_ADDR
// end ;
29920: LD_VAR 0 4
29924: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29925: LD_INT 0
29927: PPUSH
29928: PPUSH
// if not side or not nation then
29929: LD_VAR 0 1
29933: NOT
29934: PUSH
29935: LD_VAR 0 2
29939: NOT
29940: OR
29941: IFFALSE 29945
// exit ;
29943: GO 30713
// case nation of nation_american :
29945: LD_VAR 0 2
29949: PUSH
29950: LD_INT 1
29952: DOUBLE
29953: EQUAL
29954: IFTRUE 29958
29956: GO 30172
29958: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29959: LD_ADDR_VAR 0 4
29963: PUSH
29964: LD_INT 35
29966: PUSH
29967: LD_INT 45
29969: PUSH
29970: LD_INT 46
29972: PUSH
29973: LD_INT 47
29975: PUSH
29976: LD_INT 82
29978: PUSH
29979: LD_INT 83
29981: PUSH
29982: LD_INT 84
29984: PUSH
29985: LD_INT 85
29987: PUSH
29988: LD_INT 86
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: LD_INT 6
29999: PUSH
30000: LD_INT 15
30002: PUSH
30003: LD_INT 16
30005: PUSH
30006: LD_INT 7
30008: PUSH
30009: LD_INT 12
30011: PUSH
30012: LD_INT 13
30014: PUSH
30015: LD_INT 10
30017: PUSH
30018: LD_INT 14
30020: PUSH
30021: LD_INT 20
30023: PUSH
30024: LD_INT 21
30026: PUSH
30027: LD_INT 22
30029: PUSH
30030: LD_INT 25
30032: PUSH
30033: LD_INT 32
30035: PUSH
30036: LD_INT 27
30038: PUSH
30039: LD_INT 36
30041: PUSH
30042: LD_INT 69
30044: PUSH
30045: LD_INT 39
30047: PUSH
30048: LD_INT 34
30050: PUSH
30051: LD_INT 40
30053: PUSH
30054: LD_INT 48
30056: PUSH
30057: LD_INT 49
30059: PUSH
30060: LD_INT 50
30062: PUSH
30063: LD_INT 51
30065: PUSH
30066: LD_INT 52
30068: PUSH
30069: LD_INT 53
30071: PUSH
30072: LD_INT 54
30074: PUSH
30075: LD_INT 55
30077: PUSH
30078: LD_INT 56
30080: PUSH
30081: LD_INT 57
30083: PUSH
30084: LD_INT 58
30086: PUSH
30087: LD_INT 59
30089: PUSH
30090: LD_INT 60
30092: PUSH
30093: LD_INT 61
30095: PUSH
30096: LD_INT 62
30098: PUSH
30099: LD_INT 80
30101: PUSH
30102: LD_INT 82
30104: PUSH
30105: LD_INT 83
30107: PUSH
30108: LD_INT 84
30110: PUSH
30111: LD_INT 85
30113: PUSH
30114: LD_INT 86
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
30170: GO 30637
30172: LD_INT 2
30174: DOUBLE
30175: EQUAL
30176: IFTRUE 30180
30178: GO 30406
30180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30181: LD_ADDR_VAR 0 4
30185: PUSH
30186: LD_INT 35
30188: PUSH
30189: LD_INT 45
30191: PUSH
30192: LD_INT 46
30194: PUSH
30195: LD_INT 47
30197: PUSH
30198: LD_INT 82
30200: PUSH
30201: LD_INT 83
30203: PUSH
30204: LD_INT 84
30206: PUSH
30207: LD_INT 85
30209: PUSH
30210: LD_INT 87
30212: PUSH
30213: LD_INT 70
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 11
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: LD_INT 5
30230: PUSH
30231: LD_INT 6
30233: PUSH
30234: LD_INT 15
30236: PUSH
30237: LD_INT 18
30239: PUSH
30240: LD_INT 7
30242: PUSH
30243: LD_INT 17
30245: PUSH
30246: LD_INT 8
30248: PUSH
30249: LD_INT 20
30251: PUSH
30252: LD_INT 21
30254: PUSH
30255: LD_INT 22
30257: PUSH
30258: LD_INT 72
30260: PUSH
30261: LD_INT 26
30263: PUSH
30264: LD_INT 69
30266: PUSH
30267: LD_INT 39
30269: PUSH
30270: LD_INT 40
30272: PUSH
30273: LD_INT 41
30275: PUSH
30276: LD_INT 42
30278: PUSH
30279: LD_INT 43
30281: PUSH
30282: LD_INT 48
30284: PUSH
30285: LD_INT 49
30287: PUSH
30288: LD_INT 50
30290: PUSH
30291: LD_INT 51
30293: PUSH
30294: LD_INT 52
30296: PUSH
30297: LD_INT 53
30299: PUSH
30300: LD_INT 54
30302: PUSH
30303: LD_INT 55
30305: PUSH
30306: LD_INT 56
30308: PUSH
30309: LD_INT 60
30311: PUSH
30312: LD_INT 61
30314: PUSH
30315: LD_INT 62
30317: PUSH
30318: LD_INT 66
30320: PUSH
30321: LD_INT 67
30323: PUSH
30324: LD_INT 68
30326: PUSH
30327: LD_INT 81
30329: PUSH
30330: LD_INT 82
30332: PUSH
30333: LD_INT 83
30335: PUSH
30336: LD_INT 84
30338: PUSH
30339: LD_INT 85
30341: PUSH
30342: LD_INT 87
30344: PUSH
30345: LD_INT 88
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
30404: GO 30637
30406: LD_INT 3
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30636
30414: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_INT 46
30422: PUSH
30423: LD_INT 47
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 82
30434: PUSH
30435: LD_INT 83
30437: PUSH
30438: LD_INT 84
30440: PUSH
30441: LD_INT 85
30443: PUSH
30444: LD_INT 86
30446: PUSH
30447: LD_INT 11
30449: PUSH
30450: LD_INT 9
30452: PUSH
30453: LD_INT 20
30455: PUSH
30456: LD_INT 19
30458: PUSH
30459: LD_INT 21
30461: PUSH
30462: LD_INT 24
30464: PUSH
30465: LD_INT 22
30467: PUSH
30468: LD_INT 25
30470: PUSH
30471: LD_INT 28
30473: PUSH
30474: LD_INT 29
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 31
30482: PUSH
30483: LD_INT 37
30485: PUSH
30486: LD_INT 38
30488: PUSH
30489: LD_INT 32
30491: PUSH
30492: LD_INT 27
30494: PUSH
30495: LD_INT 33
30497: PUSH
30498: LD_INT 69
30500: PUSH
30501: LD_INT 39
30503: PUSH
30504: LD_INT 34
30506: PUSH
30507: LD_INT 40
30509: PUSH
30510: LD_INT 71
30512: PUSH
30513: LD_INT 23
30515: PUSH
30516: LD_INT 44
30518: PUSH
30519: LD_INT 48
30521: PUSH
30522: LD_INT 49
30524: PUSH
30525: LD_INT 50
30527: PUSH
30528: LD_INT 51
30530: PUSH
30531: LD_INT 52
30533: PUSH
30534: LD_INT 53
30536: PUSH
30537: LD_INT 54
30539: PUSH
30540: LD_INT 55
30542: PUSH
30543: LD_INT 56
30545: PUSH
30546: LD_INT 57
30548: PUSH
30549: LD_INT 58
30551: PUSH
30552: LD_INT 59
30554: PUSH
30555: LD_INT 63
30557: PUSH
30558: LD_INT 64
30560: PUSH
30561: LD_INT 65
30563: PUSH
30564: LD_INT 82
30566: PUSH
30567: LD_INT 83
30569: PUSH
30570: LD_INT 84
30572: PUSH
30573: LD_INT 85
30575: PUSH
30576: LD_INT 86
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
30634: GO 30637
30636: POP
// if state > - 1 and state < 3 then
30637: LD_VAR 0 3
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: GREATER
30646: PUSH
30647: LD_VAR 0 3
30651: PUSH
30652: LD_INT 3
30654: LESS
30655: AND
30656: IFFALSE 30713
// for i in result do
30658: LD_ADDR_VAR 0 5
30662: PUSH
30663: LD_VAR 0 4
30667: PUSH
30668: FOR_IN
30669: IFFALSE 30711
// if GetTech ( i , side ) <> state then
30671: LD_VAR 0 5
30675: PPUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 321
30685: PUSH
30686: LD_VAR 0 3
30690: NONEQUAL
30691: IFFALSE 30709
// result := result diff i ;
30693: LD_ADDR_VAR 0 4
30697: PUSH
30698: LD_VAR 0 4
30702: PUSH
30703: LD_VAR 0 5
30707: DIFF
30708: ST_TO_ADDR
30709: GO 30668
30711: POP
30712: POP
// end ;
30713: LD_VAR 0 4
30717: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
30722: PPUSH
// result := true ;
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_INT 1
30730: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30731: LD_ADDR_VAR 0 5
30735: PUSH
30736: LD_VAR 0 2
30740: PPUSH
30741: CALL_OW 480
30745: ST_TO_ADDR
// if not tmp then
30746: LD_VAR 0 5
30750: NOT
30751: IFFALSE 30755
// exit ;
30753: GO 30804
// for i in tmp do
30755: LD_ADDR_VAR 0 4
30759: PUSH
30760: LD_VAR 0 5
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30802
// if GetTech ( i , side ) <> state_researched then
30768: LD_VAR 0 4
30772: PPUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 321
30782: PUSH
30783: LD_INT 2
30785: NONEQUAL
30786: IFFALSE 30800
// begin result := false ;
30788: LD_ADDR_VAR 0 3
30792: PUSH
30793: LD_INT 0
30795: ST_TO_ADDR
// exit ;
30796: POP
30797: POP
30798: GO 30804
// end ;
30800: GO 30765
30802: POP
30803: POP
// end ;
30804: LD_VAR 0 3
30808: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30809: LD_INT 0
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30824: LD_VAR 0 1
30828: NOT
30829: PUSH
30830: LD_VAR 0 1
30834: PPUSH
30835: CALL_OW 257
30839: PUSH
30840: LD_INT 9
30842: NONEQUAL
30843: OR
30844: IFFALSE 30848
// exit ;
30846: GO 31421
// side := GetSide ( unit ) ;
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 255
30862: ST_TO_ADDR
// tech_space := tech_spacanom ;
30863: LD_ADDR_VAR 0 12
30867: PUSH
30868: LD_INT 29
30870: ST_TO_ADDR
// tech_time := tech_taurad ;
30871: LD_ADDR_VAR 0 13
30875: PUSH
30876: LD_INT 28
30878: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30879: LD_ADDR_VAR 0 11
30883: PUSH
30884: LD_VAR 0 1
30888: PPUSH
30889: CALL_OW 310
30893: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30894: LD_VAR 0 11
30898: PPUSH
30899: CALL_OW 247
30903: PUSH
30904: LD_INT 2
30906: EQUAL
30907: IFFALSE 30911
// exit ;
30909: GO 31421
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30911: LD_ADDR_VAR 0 8
30915: PUSH
30916: LD_INT 81
30918: PUSH
30919: LD_VAR 0 9
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: CALL_OW 69
30953: ST_TO_ADDR
// if not tmp then
30954: LD_VAR 0 8
30958: NOT
30959: IFFALSE 30963
// exit ;
30961: GO 31421
// if in_unit then
30963: LD_VAR 0 11
30967: IFFALSE 30991
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30969: LD_ADDR_VAR 0 10
30973: PUSH
30974: LD_VAR 0 8
30978: PPUSH
30979: LD_VAR 0 11
30983: PPUSH
30984: CALL_OW 74
30988: ST_TO_ADDR
30989: GO 31011
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30991: LD_ADDR_VAR 0 10
30995: PUSH
30996: LD_VAR 0 8
31000: PPUSH
31001: LD_VAR 0 1
31005: PPUSH
31006: CALL_OW 74
31010: ST_TO_ADDR
// if not enemy then
31011: LD_VAR 0 10
31015: NOT
31016: IFFALSE 31020
// exit ;
31018: GO 31421
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31020: LD_VAR 0 11
31024: PUSH
31025: LD_VAR 0 11
31029: PPUSH
31030: LD_VAR 0 10
31034: PPUSH
31035: CALL_OW 296
31039: PUSH
31040: LD_INT 13
31042: GREATER
31043: AND
31044: PUSH
31045: LD_VAR 0 1
31049: PPUSH
31050: LD_VAR 0 10
31054: PPUSH
31055: CALL_OW 296
31059: PUSH
31060: LD_INT 12
31062: GREATER
31063: OR
31064: IFFALSE 31068
// exit ;
31066: GO 31421
// missile := [ 1 ] ;
31068: LD_ADDR_VAR 0 14
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31079: LD_VAR 0 9
31083: PPUSH
31084: LD_VAR 0 12
31088: PPUSH
31089: CALL_OW 325
31093: IFFALSE 31122
// missile := Replace ( missile , missile + 1 , 2 ) ;
31095: LD_ADDR_VAR 0 14
31099: PUSH
31100: LD_VAR 0 14
31104: PPUSH
31105: LD_VAR 0 14
31109: PUSH
31110: LD_INT 1
31112: PLUS
31113: PPUSH
31114: LD_INT 2
31116: PPUSH
31117: CALL_OW 1
31121: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31122: LD_VAR 0 9
31126: PPUSH
31127: LD_VAR 0 13
31131: PPUSH
31132: CALL_OW 325
31136: PUSH
31137: LD_VAR 0 10
31141: PPUSH
31142: CALL_OW 255
31146: PPUSH
31147: LD_VAR 0 13
31151: PPUSH
31152: CALL_OW 325
31156: NOT
31157: AND
31158: IFFALSE 31187
// missile := Replace ( missile , missile + 1 , 3 ) ;
31160: LD_ADDR_VAR 0 14
31164: PUSH
31165: LD_VAR 0 14
31169: PPUSH
31170: LD_VAR 0 14
31174: PUSH
31175: LD_INT 1
31177: PLUS
31178: PPUSH
31179: LD_INT 3
31181: PPUSH
31182: CALL_OW 1
31186: ST_TO_ADDR
// if missile < 2 then
31187: LD_VAR 0 14
31191: PUSH
31192: LD_INT 2
31194: LESS
31195: IFFALSE 31199
// exit ;
31197: GO 31421
// x := GetX ( enemy ) ;
31199: LD_ADDR_VAR 0 4
31203: PUSH
31204: LD_VAR 0 10
31208: PPUSH
31209: CALL_OW 250
31213: ST_TO_ADDR
// y := GetY ( enemy ) ;
31214: LD_ADDR_VAR 0 5
31218: PUSH
31219: LD_VAR 0 10
31223: PPUSH
31224: CALL_OW 251
31228: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31229: LD_ADDR_VAR 0 6
31233: PUSH
31234: LD_VAR 0 4
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PPUSH
31243: LD_INT 1
31245: PPUSH
31246: CALL_OW 12
31250: PLUS
31251: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31252: LD_ADDR_VAR 0 7
31256: PUSH
31257: LD_VAR 0 5
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PPUSH
31266: LD_INT 1
31268: PPUSH
31269: CALL_OW 12
31273: PLUS
31274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31275: LD_VAR 0 6
31279: PPUSH
31280: LD_VAR 0 7
31284: PPUSH
31285: CALL_OW 488
31289: NOT
31290: IFFALSE 31312
// begin _x := x ;
31292: LD_ADDR_VAR 0 6
31296: PUSH
31297: LD_VAR 0 4
31301: ST_TO_ADDR
// _y := y ;
31302: LD_ADDR_VAR 0 7
31306: PUSH
31307: LD_VAR 0 5
31311: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31312: LD_ADDR_VAR 0 3
31316: PUSH
31317: LD_INT 1
31319: PPUSH
31320: LD_VAR 0 14
31324: PPUSH
31325: CALL_OW 12
31329: ST_TO_ADDR
// case i of 1 :
31330: LD_VAR 0 3
31334: PUSH
31335: LD_INT 1
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31360
31343: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31344: LD_VAR 0 1
31348: PPUSH
31349: LD_VAR 0 10
31353: PPUSH
31354: CALL_OW 115
31358: GO 31421
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31390
31368: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31369: LD_VAR 0 1
31373: PPUSH
31374: LD_VAR 0 6
31378: PPUSH
31379: LD_VAR 0 7
31383: PPUSH
31384: CALL_OW 153
31388: GO 31421
31390: LD_INT 3
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31420
31398: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 6
31408: PPUSH
31409: LD_VAR 0 7
31413: PPUSH
31414: CALL_OW 154
31418: GO 31421
31420: POP
// end ;
31421: LD_VAR 0 2
31425: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31426: LD_INT 0
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
// if not unit or not building then
31434: LD_VAR 0 1
31438: NOT
31439: PUSH
31440: LD_VAR 0 2
31444: NOT
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 31608
// x := GetX ( building ) ;
31450: LD_ADDR_VAR 0 5
31454: PUSH
31455: LD_VAR 0 2
31459: PPUSH
31460: CALL_OW 250
31464: ST_TO_ADDR
// y := GetY ( building ) ;
31465: LD_ADDR_VAR 0 6
31469: PUSH
31470: LD_VAR 0 2
31474: PPUSH
31475: CALL_OW 251
31479: ST_TO_ADDR
// for i = 0 to 5 do
31480: LD_ADDR_VAR 0 4
31484: PUSH
31485: DOUBLE
31486: LD_INT 0
31488: DEC
31489: ST_TO_ADDR
31490: LD_INT 5
31492: PUSH
31493: FOR_TO
31494: IFFALSE 31606
// begin _x := ShiftX ( x , i , 3 ) ;
31496: LD_ADDR_VAR 0 7
31500: PUSH
31501: LD_VAR 0 5
31505: PPUSH
31506: LD_VAR 0 4
31510: PPUSH
31511: LD_INT 3
31513: PPUSH
31514: CALL_OW 272
31518: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31519: LD_ADDR_VAR 0 8
31523: PUSH
31524: LD_VAR 0 6
31528: PPUSH
31529: LD_VAR 0 4
31533: PPUSH
31534: LD_INT 3
31536: PPUSH
31537: CALL_OW 273
31541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31542: LD_VAR 0 7
31546: PPUSH
31547: LD_VAR 0 8
31551: PPUSH
31552: CALL_OW 488
31556: NOT
31557: IFFALSE 31561
// continue ;
31559: GO 31493
// if HexInfo ( _x , _y ) = 0 then
31561: LD_VAR 0 7
31565: PPUSH
31566: LD_VAR 0 8
31570: PPUSH
31571: CALL_OW 428
31575: PUSH
31576: LD_INT 0
31578: EQUAL
31579: IFFALSE 31604
// begin ComMoveXY ( unit , _x , _y ) ;
31581: LD_VAR 0 1
31585: PPUSH
31586: LD_VAR 0 7
31590: PPUSH
31591: LD_VAR 0 8
31595: PPUSH
31596: CALL_OW 111
// exit ;
31600: POP
31601: POP
31602: GO 31608
// end ; end ;
31604: GO 31493
31606: POP
31607: POP
// end ;
31608: LD_VAR 0 3
31612: RET
// export function ScanBase ( side , base_area ) ; begin
31613: LD_INT 0
31615: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31616: LD_ADDR_VAR 0 3
31620: PUSH
31621: LD_VAR 0 2
31625: PPUSH
31626: LD_INT 81
31628: PUSH
31629: LD_VAR 0 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PPUSH
31638: CALL_OW 70
31642: ST_TO_ADDR
// end ;
31643: LD_VAR 0 3
31647: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31648: LD_INT 0
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
// result := false ;
31654: LD_ADDR_VAR 0 2
31658: PUSH
31659: LD_INT 0
31661: ST_TO_ADDR
// side := GetSide ( unit ) ;
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 255
31676: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31677: LD_ADDR_VAR 0 4
31681: PUSH
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 248
31691: ST_TO_ADDR
// case nat of 1 :
31692: LD_VAR 0 4
31696: PUSH
31697: LD_INT 1
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31716
31705: POP
// tech := tech_lassight ; 2 :
31706: LD_ADDR_VAR 0 5
31710: PUSH
31711: LD_INT 12
31713: ST_TO_ADDR
31714: GO 31755
31716: LD_INT 2
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// tech := tech_mortar ; 3 :
31725: LD_ADDR_VAR 0 5
31729: PUSH
31730: LD_INT 41
31732: ST_TO_ADDR
31733: GO 31755
31735: LD_INT 3
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// tech := tech_bazooka ; end ;
31744: LD_ADDR_VAR 0 5
31748: PUSH
31749: LD_INT 44
31751: ST_TO_ADDR
31752: GO 31755
31754: POP
// if Researched ( side , tech ) then
31755: LD_VAR 0 3
31759: PPUSH
31760: LD_VAR 0 5
31764: PPUSH
31765: CALL_OW 325
31769: IFFALSE 31796
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31771: LD_ADDR_VAR 0 2
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: LD_INT 8
31781: PUSH
31782: LD_INT 9
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: PUSH
31790: LD_VAR 0 4
31794: ARRAY
31795: ST_TO_ADDR
// end ;
31796: LD_VAR 0 2
31800: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31801: LD_INT 0
31803: PPUSH
31804: PPUSH
31805: PPUSH
// if not mines then
31806: LD_VAR 0 2
31810: NOT
31811: IFFALSE 31815
// exit ;
31813: GO 31959
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31815: LD_ADDR_VAR 0 5
31819: PUSH
31820: LD_INT 81
31822: PUSH
31823: LD_VAR 0 1
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 3
31834: PUSH
31835: LD_INT 21
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PPUSH
31853: CALL_OW 69
31857: ST_TO_ADDR
// for i in mines do
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_VAR 0 2
31867: PUSH
31868: FOR_IN
31869: IFFALSE 31957
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31871: LD_VAR 0 4
31875: PUSH
31876: LD_INT 1
31878: ARRAY
31879: PPUSH
31880: LD_VAR 0 4
31884: PUSH
31885: LD_INT 2
31887: ARRAY
31888: PPUSH
31889: CALL_OW 458
31893: NOT
31894: IFFALSE 31898
// continue ;
31896: GO 31868
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31898: LD_VAR 0 4
31902: PUSH
31903: LD_INT 1
31905: ARRAY
31906: PPUSH
31907: LD_VAR 0 4
31911: PUSH
31912: LD_INT 2
31914: ARRAY
31915: PPUSH
31916: CALL_OW 428
31920: PUSH
31921: LD_VAR 0 5
31925: IN
31926: IFFALSE 31955
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31928: LD_VAR 0 4
31932: PUSH
31933: LD_INT 1
31935: ARRAY
31936: PPUSH
31937: LD_VAR 0 4
31941: PUSH
31942: LD_INT 2
31944: ARRAY
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 456
// end ;
31955: GO 31868
31957: POP
31958: POP
// end ;
31959: LD_VAR 0 3
31963: RET
// export function Count ( array ) ; var i ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
// result := 0 ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_INT 0
31975: ST_TO_ADDR
// for i in array do
31976: LD_ADDR_VAR 0 3
31980: PUSH
31981: LD_VAR 0 1
31985: PUSH
31986: FOR_IN
31987: IFFALSE 32011
// if i then
31989: LD_VAR 0 3
31993: IFFALSE 32009
// result := result + 1 ;
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: LD_INT 1
32007: PLUS
32008: ST_TO_ADDR
32009: GO 31986
32011: POP
32012: POP
// end ;
32013: LD_VAR 0 2
32017: RET
// export function IsEmpty ( building ) ; begin
32018: LD_INT 0
32020: PPUSH
// if not building then
32021: LD_VAR 0 1
32025: NOT
32026: IFFALSE 32030
// exit ;
32028: GO 32073
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32030: LD_ADDR_VAR 0 2
32034: PUSH
32035: LD_VAR 0 1
32039: PUSH
32040: LD_INT 22
32042: PUSH
32043: LD_VAR 0 1
32047: PPUSH
32048: CALL_OW 255
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 58
32059: PUSH
32060: EMPTY
32061: LIST
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PPUSH
32067: CALL_OW 69
32071: IN
32072: ST_TO_ADDR
// end ;
32073: LD_VAR 0 2
32077: RET
// export function IsNotFull ( building ) ; begin
32078: LD_INT 0
32080: PPUSH
// if not building then
32081: LD_VAR 0 1
32085: NOT
32086: IFFALSE 32090
// exit ;
32088: GO 32109
// result := UnitsInside ( building ) < 6 ;
32090: LD_ADDR_VAR 0 2
32094: PUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: CALL_OW 313
32104: PUSH
32105: LD_INT 6
32107: LESS
32108: ST_TO_ADDR
// end ;
32109: LD_VAR 0 2
32113: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32114: LD_INT 0
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
// tmp := [ ] ;
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: EMPTY
32126: ST_TO_ADDR
// list := [ ] ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: EMPTY
32133: ST_TO_ADDR
// for i = 16 to 25 do
32134: LD_ADDR_VAR 0 4
32138: PUSH
32139: DOUBLE
32140: LD_INT 16
32142: DEC
32143: ST_TO_ADDR
32144: LD_INT 25
32146: PUSH
32147: FOR_TO
32148: IFFALSE 32221
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_VAR 0 3
32159: PUSH
32160: LD_INT 22
32162: PUSH
32163: LD_VAR 0 1
32167: PPUSH
32168: CALL_OW 255
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 91
32179: PUSH
32180: LD_VAR 0 1
32184: PUSH
32185: LD_INT 6
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 30
32195: PUSH
32196: LD_VAR 0 4
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: PPUSH
32213: CALL_OW 69
32217: ADD
32218: ST_TO_ADDR
32219: GO 32147
32221: POP
32222: POP
// for i = 1 to tmp do
32223: LD_ADDR_VAR 0 4
32227: PUSH
32228: DOUBLE
32229: LD_INT 1
32231: DEC
32232: ST_TO_ADDR
32233: LD_VAR 0 3
32237: PUSH
32238: FOR_TO
32239: IFFALSE 32327
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32241: LD_ADDR_VAR 0 5
32245: PUSH
32246: LD_VAR 0 5
32250: PUSH
32251: LD_VAR 0 3
32255: PUSH
32256: LD_VAR 0 4
32260: ARRAY
32261: PPUSH
32262: CALL_OW 266
32266: PUSH
32267: LD_VAR 0 3
32271: PUSH
32272: LD_VAR 0 4
32276: ARRAY
32277: PPUSH
32278: CALL_OW 250
32282: PUSH
32283: LD_VAR 0 3
32287: PUSH
32288: LD_VAR 0 4
32292: ARRAY
32293: PPUSH
32294: CALL_OW 251
32298: PUSH
32299: LD_VAR 0 3
32303: PUSH
32304: LD_VAR 0 4
32308: ARRAY
32309: PPUSH
32310: CALL_OW 254
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: PUSH
32321: EMPTY
32322: LIST
32323: ADD
32324: ST_TO_ADDR
32325: GO 32238
32327: POP
32328: POP
// result := list ;
32329: LD_ADDR_VAR 0 2
32333: PUSH
32334: LD_VAR 0 5
32338: ST_TO_ADDR
// end ;
32339: LD_VAR 0 2
32343: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32344: LD_INT 0
32346: PPUSH
32347: PPUSH
32348: PPUSH
32349: PPUSH
32350: PPUSH
32351: PPUSH
32352: PPUSH
// if not factory then
32353: LD_VAR 0 1
32357: NOT
32358: IFFALSE 32362
// exit ;
32360: GO 32955
// if control = control_apeman then
32362: LD_VAR 0 4
32366: PUSH
32367: LD_INT 5
32369: EQUAL
32370: IFFALSE 32479
// begin tmp := UnitsInside ( factory ) ;
32372: LD_ADDR_VAR 0 8
32376: PUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 313
32386: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32387: LD_VAR 0 8
32391: PPUSH
32392: LD_INT 25
32394: PUSH
32395: LD_INT 12
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PPUSH
32402: CALL_OW 72
32406: NOT
32407: IFFALSE 32417
// control := control_manual ;
32409: LD_ADDR_VAR 0 4
32413: PUSH
32414: LD_INT 1
32416: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32417: LD_ADDR_VAR 0 8
32421: PUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL 32114 0 1
32431: ST_TO_ADDR
// if tmp then
32432: LD_VAR 0 8
32436: IFFALSE 32479
// begin for i in tmp do
32438: LD_ADDR_VAR 0 7
32442: PUSH
32443: LD_VAR 0 8
32447: PUSH
32448: FOR_IN
32449: IFFALSE 32477
// if i [ 1 ] = b_ext_radio then
32451: LD_VAR 0 7
32455: PUSH
32456: LD_INT 1
32458: ARRAY
32459: PUSH
32460: LD_INT 22
32462: EQUAL
32463: IFFALSE 32475
// begin control := control_remote ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_INT 2
32472: ST_TO_ADDR
// break ;
32473: GO 32477
// end ;
32475: GO 32448
32477: POP
32478: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32479: LD_VAR 0 1
32483: PPUSH
32484: LD_VAR 0 2
32488: PPUSH
32489: LD_VAR 0 3
32493: PPUSH
32494: LD_VAR 0 4
32498: PPUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: CALL_OW 448
32508: IFFALSE 32543
// begin result := [ chassis , engine , control , weapon ] ;
32510: LD_ADDR_VAR 0 6
32514: PUSH
32515: LD_VAR 0 2
32519: PUSH
32520: LD_VAR 0 3
32524: PUSH
32525: LD_VAR 0 4
32529: PUSH
32530: LD_VAR 0 5
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: ST_TO_ADDR
// exit ;
32541: GO 32955
// end ; _chassis := AvailableChassisList ( factory ) ;
32543: LD_ADDR_VAR 0 9
32547: PUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 475
32557: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32558: LD_ADDR_VAR 0 11
32562: PUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 476
32572: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32573: LD_ADDR_VAR 0 12
32577: PUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 477
32587: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32588: LD_ADDR_VAR 0 10
32592: PUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 478
32602: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32603: LD_VAR 0 9
32607: NOT
32608: PUSH
32609: LD_VAR 0 11
32613: NOT
32614: OR
32615: PUSH
32616: LD_VAR 0 12
32620: NOT
32621: OR
32622: PUSH
32623: LD_VAR 0 10
32627: NOT
32628: OR
32629: IFFALSE 32664
// begin result := [ chassis , engine , control , weapon ] ;
32631: LD_ADDR_VAR 0 6
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_VAR 0 3
32645: PUSH
32646: LD_VAR 0 4
32650: PUSH
32651: LD_VAR 0 5
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
// exit ;
32662: GO 32955
// end ; if not chassis in _chassis then
32664: LD_VAR 0 2
32668: PUSH
32669: LD_VAR 0 9
32673: IN
32674: NOT
32675: IFFALSE 32701
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32677: LD_ADDR_VAR 0 2
32681: PUSH
32682: LD_VAR 0 9
32686: PUSH
32687: LD_INT 1
32689: PPUSH
32690: LD_VAR 0 9
32694: PPUSH
32695: CALL_OW 12
32699: ARRAY
32700: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32701: LD_VAR 0 2
32705: PPUSH
32706: LD_VAR 0 3
32710: PPUSH
32711: CALL 32960 0 2
32715: NOT
32716: IFFALSE 32775
// repeat engine := _engine [ 1 ] ;
32718: LD_ADDR_VAR 0 3
32722: PUSH
32723: LD_VAR 0 11
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32732: LD_ADDR_VAR 0 11
32736: PUSH
32737: LD_VAR 0 11
32741: PPUSH
32742: LD_INT 1
32744: PPUSH
32745: CALL_OW 3
32749: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32750: LD_VAR 0 2
32754: PPUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL 32960 0 2
32764: PUSH
32765: LD_VAR 0 11
32769: PUSH
32770: EMPTY
32771: EQUAL
32772: OR
32773: IFFALSE 32718
// if not control in _control then
32775: LD_VAR 0 4
32779: PUSH
32780: LD_VAR 0 12
32784: IN
32785: NOT
32786: IFFALSE 32812
// control := _control [ rand ( 1 , _control ) ] ;
32788: LD_ADDR_VAR 0 4
32792: PUSH
32793: LD_VAR 0 12
32797: PUSH
32798: LD_INT 1
32800: PPUSH
32801: LD_VAR 0 12
32805: PPUSH
32806: CALL_OW 12
32810: ARRAY
32811: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32812: LD_VAR 0 2
32816: PPUSH
32817: LD_VAR 0 5
32821: PPUSH
32822: CALL 33180 0 2
32826: NOT
32827: IFFALSE 32886
// repeat weapon := _weapon [ 1 ] ;
32829: LD_ADDR_VAR 0 5
32833: PUSH
32834: LD_VAR 0 10
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32843: LD_ADDR_VAR 0 10
32847: PUSH
32848: LD_VAR 0 10
32852: PPUSH
32853: LD_INT 1
32855: PPUSH
32856: CALL_OW 3
32860: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 5
32870: PPUSH
32871: CALL 33180 0 2
32875: PUSH
32876: LD_VAR 0 10
32880: PUSH
32881: EMPTY
32882: EQUAL
32883: OR
32884: IFFALSE 32829
// result := [ ] ;
32886: LD_ADDR_VAR 0 6
32890: PUSH
32891: EMPTY
32892: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32893: LD_VAR 0 1
32897: PPUSH
32898: LD_VAR 0 2
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: LD_VAR 0 5
32917: PPUSH
32918: CALL_OW 448
32922: IFFALSE 32955
// result := [ chassis , engine , control , weapon ] ;
32924: LD_ADDR_VAR 0 6
32928: PUSH
32929: LD_VAR 0 2
32933: PUSH
32934: LD_VAR 0 3
32938: PUSH
32939: LD_VAR 0 4
32943: PUSH
32944: LD_VAR 0 5
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
// end ;
32955: LD_VAR 0 6
32959: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32960: LD_INT 0
32962: PPUSH
// if not chassis or not engine then
32963: LD_VAR 0 1
32967: NOT
32968: PUSH
32969: LD_VAR 0 2
32973: NOT
32974: OR
32975: IFFALSE 32979
// exit ;
32977: GO 33175
// case engine of engine_solar :
32979: LD_VAR 0 2
32983: PUSH
32984: LD_INT 2
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33030
32992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 11
33000: PUSH
33001: LD_INT 12
33003: PUSH
33004: LD_INT 13
33006: PUSH
33007: LD_INT 14
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
33028: GO 33159
33030: LD_INT 1
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33100
33038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33039: LD_ADDR_VAR 0 3
33043: PUSH
33044: LD_INT 11
33046: PUSH
33047: LD_INT 12
33049: PUSH
33050: LD_INT 13
33052: PUSH
33053: LD_INT 14
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: LD_INT 4
33067: PUSH
33068: LD_INT 5
33070: PUSH
33071: LD_INT 21
33073: PUSH
33074: LD_INT 23
33076: PUSH
33077: LD_INT 22
33079: PUSH
33080: LD_INT 24
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
33098: GO 33159
33100: LD_INT 3
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33158
33108: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 13
33116: PUSH
33117: LD_INT 14
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: LD_INT 21
33134: PUSH
33135: LD_INT 22
33137: PUSH
33138: LD_INT 23
33140: PUSH
33141: LD_INT 24
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
33156: GO 33159
33158: POP
// result := ( chassis in result ) ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_VAR 0 1
33168: PUSH
33169: LD_VAR 0 3
33173: IN
33174: ST_TO_ADDR
// end ;
33175: LD_VAR 0 3
33179: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33180: LD_INT 0
33182: PPUSH
// if not chassis or not weapon then
33183: LD_VAR 0 1
33187: NOT
33188: PUSH
33189: LD_VAR 0 2
33193: NOT
33194: OR
33195: IFFALSE 33199
// exit ;
33197: GO 34261
// case weapon of us_machine_gun :
33199: LD_VAR 0 2
33203: PUSH
33204: LD_INT 2
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33242
33212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: LD_INT 5
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
33240: GO 34245
33242: LD_INT 3
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33280
33250: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: LD_INT 5
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
33278: GO 34245
33280: LD_INT 11
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33318
33288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: ST_TO_ADDR
33316: GO 34245
33318: LD_INT 4
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33352
33326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 3
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: LD_INT 5
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 34245
33352: LD_INT 5
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33386
33360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: LD_INT 5
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: ST_TO_ADDR
33384: GO 34245
33386: LD_INT 9
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33420
33394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: LD_INT 4
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: ST_TO_ADDR
33418: GO 34245
33420: LD_INT 7
33422: DOUBLE
33423: EQUAL
33424: IFTRUE 33428
33426: GO 33454
33428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33429: LD_ADDR_VAR 0 3
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 3
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: LD_INT 5
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: ST_TO_ADDR
33452: GO 34245
33454: LD_INT 12
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33488
33462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: LD_INT 5
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
33486: GO 34245
33488: LD_INT 13
33490: DOUBLE
33491: EQUAL
33492: IFTRUE 33496
33494: GO 33522
33496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33497: LD_ADDR_VAR 0 3
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: LD_INT 4
33510: PUSH
33511: LD_INT 5
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
33520: GO 34245
33522: LD_INT 14
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33530
33528: GO 33548
33530: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_INT 4
33538: PUSH
33539: LD_INT 5
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: ST_TO_ADDR
33546: GO 34245
33548: LD_INT 6
33550: DOUBLE
33551: EQUAL
33552: IFTRUE 33556
33554: GO 33574
33556: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: ST_TO_ADDR
33572: GO 34245
33574: LD_INT 10
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33600
33582: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 4
33590: PUSH
33591: LD_INT 5
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: ST_TO_ADDR
33598: GO 34245
33600: LD_INT 22
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33608
33606: GO 33634
33608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_INT 11
33616: PUSH
33617: LD_INT 12
33619: PUSH
33620: LD_INT 13
33622: PUSH
33623: LD_INT 14
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
33632: GO 34245
33634: LD_INT 23
33636: DOUBLE
33637: EQUAL
33638: IFTRUE 33642
33640: GO 33668
33642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: LD_INT 11
33650: PUSH
33651: LD_INT 12
33653: PUSH
33654: LD_INT 13
33656: PUSH
33657: LD_INT 14
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: ST_TO_ADDR
33666: GO 34245
33668: LD_INT 24
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33702
33676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33677: LD_ADDR_VAR 0 3
33681: PUSH
33682: LD_INT 11
33684: PUSH
33685: LD_INT 12
33687: PUSH
33688: LD_INT 13
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: ST_TO_ADDR
33700: GO 34245
33702: LD_INT 30
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33710
33708: GO 33736
33710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33711: LD_ADDR_VAR 0 3
33715: PUSH
33716: LD_INT 11
33718: PUSH
33719: LD_INT 12
33721: PUSH
33722: LD_INT 13
33724: PUSH
33725: LD_INT 14
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: ST_TO_ADDR
33734: GO 34245
33736: LD_INT 25
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33744
33742: GO 33762
33744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_INT 13
33752: PUSH
33753: LD_INT 14
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: ST_TO_ADDR
33760: GO 34245
33762: LD_INT 27
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33788
33770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 13
33778: PUSH
33779: LD_INT 14
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: ST_TO_ADDR
33786: GO 34245
33788: LD_EXP 24
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33798
33796: GO 33824
33798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_INT 11
33806: PUSH
33807: LD_INT 12
33809: PUSH
33810: LD_INT 13
33812: PUSH
33813: LD_INT 14
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
33822: GO 34245
33824: LD_INT 28
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33850
33832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33833: LD_ADDR_VAR 0 3
33837: PUSH
33838: LD_INT 13
33840: PUSH
33841: LD_INT 14
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: ST_TO_ADDR
33848: GO 34245
33850: LD_INT 29
33852: DOUBLE
33853: EQUAL
33854: IFTRUE 33858
33856: GO 33876
33858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33859: LD_ADDR_VAR 0 3
33863: PUSH
33864: LD_INT 13
33866: PUSH
33867: LD_INT 14
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 34245
33876: LD_INT 31
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33902
33884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 13
33892: PUSH
33893: LD_INT 14
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 34245
33902: LD_INT 26
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33928
33910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 13
33918: PUSH
33919: LD_INT 14
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 34245
33928: LD_INT 42
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33962
33936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 21
33944: PUSH
33945: LD_INT 22
33947: PUSH
33948: LD_INT 23
33950: PUSH
33951: LD_INT 24
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
33960: GO 34245
33962: LD_INT 43
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33996
33970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 21
33978: PUSH
33979: LD_INT 22
33981: PUSH
33982: LD_INT 23
33984: PUSH
33985: LD_INT 24
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: ST_TO_ADDR
33994: GO 34245
33996: LD_INT 44
33998: DOUBLE
33999: EQUAL
34000: IFTRUE 34004
34002: GO 34030
34004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34005: LD_ADDR_VAR 0 3
34009: PUSH
34010: LD_INT 21
34012: PUSH
34013: LD_INT 22
34015: PUSH
34016: LD_INT 23
34018: PUSH
34019: LD_INT 24
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 34245
34030: LD_INT 45
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34064
34038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_INT 21
34046: PUSH
34047: LD_INT 22
34049: PUSH
34050: LD_INT 23
34052: PUSH
34053: LD_INT 24
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34245
34064: LD_INT 49
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34098
34072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 21
34080: PUSH
34081: LD_INT 22
34083: PUSH
34084: LD_INT 23
34086: PUSH
34087: LD_INT 24
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
34096: GO 34245
34098: LD_INT 51
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34132
34106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 21
34114: PUSH
34115: LD_INT 22
34117: PUSH
34118: LD_INT 23
34120: PUSH
34121: LD_INT 24
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: ST_TO_ADDR
34130: GO 34245
34132: LD_INT 52
34134: DOUBLE
34135: EQUAL
34136: IFTRUE 34140
34138: GO 34166
34140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_INT 21
34148: PUSH
34149: LD_INT 22
34151: PUSH
34152: LD_INT 23
34154: PUSH
34155: LD_INT 24
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
34164: GO 34245
34166: LD_INT 53
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34192
34174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34175: LD_ADDR_VAR 0 3
34179: PUSH
34180: LD_INT 23
34182: PUSH
34183: LD_INT 24
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: ST_TO_ADDR
34190: GO 34245
34192: LD_INT 46
34194: DOUBLE
34195: EQUAL
34196: IFTRUE 34200
34198: GO 34218
34200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34201: LD_ADDR_VAR 0 3
34205: PUSH
34206: LD_INT 23
34208: PUSH
34209: LD_INT 24
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: ST_TO_ADDR
34216: GO 34245
34218: LD_INT 47
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34244
34226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_INT 23
34234: PUSH
34235: LD_INT 24
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 34245
34244: POP
// result := ( chassis in result ) ;
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_VAR 0 1
34254: PUSH
34255: LD_VAR 0 3
34259: IN
34260: ST_TO_ADDR
// end ;
34261: LD_VAR 0 3
34265: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34266: LD_INT 0
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
// result := array ;
34275: LD_ADDR_VAR 0 5
34279: PUSH
34280: LD_VAR 0 1
34284: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34285: LD_VAR 0 1
34289: NOT
34290: PUSH
34291: LD_VAR 0 2
34295: NOT
34296: OR
34297: PUSH
34298: LD_VAR 0 3
34302: NOT
34303: OR
34304: PUSH
34305: LD_VAR 0 2
34309: PUSH
34310: LD_VAR 0 1
34314: GREATER
34315: OR
34316: PUSH
34317: LD_VAR 0 3
34321: PUSH
34322: LD_VAR 0 1
34326: GREATER
34327: OR
34328: IFFALSE 34332
// exit ;
34330: GO 34628
// if direction then
34332: LD_VAR 0 4
34336: IFFALSE 34400
// begin d := 1 ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_INT 1
34345: ST_TO_ADDR
// if i_from > i_to then
34346: LD_VAR 0 2
34350: PUSH
34351: LD_VAR 0 3
34355: GREATER
34356: IFFALSE 34382
// length := ( array - i_from ) + i_to else
34358: LD_ADDR_VAR 0 11
34362: PUSH
34363: LD_VAR 0 1
34367: PUSH
34368: LD_VAR 0 2
34372: MINUS
34373: PUSH
34374: LD_VAR 0 3
34378: PLUS
34379: ST_TO_ADDR
34380: GO 34398
// length := i_to - i_from ;
34382: LD_ADDR_VAR 0 11
34386: PUSH
34387: LD_VAR 0 3
34391: PUSH
34392: LD_VAR 0 2
34396: MINUS
34397: ST_TO_ADDR
// end else
34398: GO 34461
// begin d := - 1 ;
34400: LD_ADDR_VAR 0 9
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: ST_TO_ADDR
// if i_from > i_to then
34409: LD_VAR 0 2
34413: PUSH
34414: LD_VAR 0 3
34418: GREATER
34419: IFFALSE 34439
// length := i_from - i_to else
34421: LD_ADDR_VAR 0 11
34425: PUSH
34426: LD_VAR 0 2
34430: PUSH
34431: LD_VAR 0 3
34435: MINUS
34436: ST_TO_ADDR
34437: GO 34461
// length := ( array - i_to ) + i_from ;
34439: LD_ADDR_VAR 0 11
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_VAR 0 3
34453: MINUS
34454: PUSH
34455: LD_VAR 0 2
34459: PLUS
34460: ST_TO_ADDR
// end ; if not length then
34461: LD_VAR 0 11
34465: NOT
34466: IFFALSE 34470
// exit ;
34468: GO 34628
// tmp := array ;
34470: LD_ADDR_VAR 0 10
34474: PUSH
34475: LD_VAR 0 1
34479: ST_TO_ADDR
// for i = 1 to length do
34480: LD_ADDR_VAR 0 6
34484: PUSH
34485: DOUBLE
34486: LD_INT 1
34488: DEC
34489: ST_TO_ADDR
34490: LD_VAR 0 11
34494: PUSH
34495: FOR_TO
34496: IFFALSE 34616
// begin for j = 1 to array do
34498: LD_ADDR_VAR 0 7
34502: PUSH
34503: DOUBLE
34504: LD_INT 1
34506: DEC
34507: ST_TO_ADDR
34508: LD_VAR 0 1
34512: PUSH
34513: FOR_TO
34514: IFFALSE 34602
// begin k := j + d ;
34516: LD_ADDR_VAR 0 8
34520: PUSH
34521: LD_VAR 0 7
34525: PUSH
34526: LD_VAR 0 9
34530: PLUS
34531: ST_TO_ADDR
// if k > array then
34532: LD_VAR 0 8
34536: PUSH
34537: LD_VAR 0 1
34541: GREATER
34542: IFFALSE 34552
// k := 1 ;
34544: LD_ADDR_VAR 0 8
34548: PUSH
34549: LD_INT 1
34551: ST_TO_ADDR
// if not k then
34552: LD_VAR 0 8
34556: NOT
34557: IFFALSE 34569
// k := array ;
34559: LD_ADDR_VAR 0 8
34563: PUSH
34564: LD_VAR 0 1
34568: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34569: LD_ADDR_VAR 0 10
34573: PUSH
34574: LD_VAR 0 10
34578: PPUSH
34579: LD_VAR 0 8
34583: PPUSH
34584: LD_VAR 0 1
34588: PUSH
34589: LD_VAR 0 7
34593: ARRAY
34594: PPUSH
34595: CALL_OW 1
34599: ST_TO_ADDR
// end ;
34600: GO 34513
34602: POP
34603: POP
// array := tmp ;
34604: LD_ADDR_VAR 0 1
34608: PUSH
34609: LD_VAR 0 10
34613: ST_TO_ADDR
// end ;
34614: GO 34495
34616: POP
34617: POP
// result := array ;
34618: LD_ADDR_VAR 0 5
34622: PUSH
34623: LD_VAR 0 1
34627: ST_TO_ADDR
// end ;
34628: LD_VAR 0 5
34632: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34633: LD_INT 0
34635: PPUSH
34636: PPUSH
// result := 0 ;
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 0
34644: ST_TO_ADDR
// if not array or not value in array then
34645: LD_VAR 0 1
34649: NOT
34650: PUSH
34651: LD_VAR 0 2
34655: PUSH
34656: LD_VAR 0 1
34660: IN
34661: NOT
34662: OR
34663: IFFALSE 34667
// exit ;
34665: GO 34721
// for i = 1 to array do
34667: LD_ADDR_VAR 0 4
34671: PUSH
34672: DOUBLE
34673: LD_INT 1
34675: DEC
34676: ST_TO_ADDR
34677: LD_VAR 0 1
34681: PUSH
34682: FOR_TO
34683: IFFALSE 34719
// if value = array [ i ] then
34685: LD_VAR 0 2
34689: PUSH
34690: LD_VAR 0 1
34694: PUSH
34695: LD_VAR 0 4
34699: ARRAY
34700: EQUAL
34701: IFFALSE 34717
// begin result := i ;
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_VAR 0 4
34712: ST_TO_ADDR
// exit ;
34713: POP
34714: POP
34715: GO 34721
// end ;
34717: GO 34682
34719: POP
34720: POP
// end ;
34721: LD_VAR 0 3
34725: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34726: LD_INT 0
34728: PPUSH
// vc_chassis := chassis ;
34729: LD_ADDR_OWVAR 37
34733: PUSH
34734: LD_VAR 0 1
34738: ST_TO_ADDR
// vc_engine := engine ;
34739: LD_ADDR_OWVAR 39
34743: PUSH
34744: LD_VAR 0 2
34748: ST_TO_ADDR
// vc_control := control ;
34749: LD_ADDR_OWVAR 38
34753: PUSH
34754: LD_VAR 0 3
34758: ST_TO_ADDR
// vc_weapon := weapon ;
34759: LD_ADDR_OWVAR 40
34763: PUSH
34764: LD_VAR 0 4
34768: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34769: LD_ADDR_OWVAR 41
34773: PUSH
34774: LD_VAR 0 5
34778: ST_TO_ADDR
// end ;
34779: LD_VAR 0 6
34783: RET
// export function WantPlant ( unit ) ; var task ; begin
34784: LD_INT 0
34786: PPUSH
34787: PPUSH
// result := false ;
34788: LD_ADDR_VAR 0 2
34792: PUSH
34793: LD_INT 0
34795: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 437
34810: ST_TO_ADDR
// if task then
34811: LD_VAR 0 3
34815: IFFALSE 34843
// if task [ 1 ] [ 1 ] = p then
34817: LD_VAR 0 3
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: PUSH
34826: LD_INT 1
34828: ARRAY
34829: PUSH
34830: LD_STRING p
34832: EQUAL
34833: IFFALSE 34843
// result := true ;
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: LD_INT 1
34842: ST_TO_ADDR
// end ;
34843: LD_VAR 0 2
34847: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
// if pos < 1 then
34854: LD_VAR 0 2
34858: PUSH
34859: LD_INT 1
34861: LESS
34862: IFFALSE 34866
// exit ;
34864: GO 35169
// if pos = 1 then
34866: LD_VAR 0 2
34870: PUSH
34871: LD_INT 1
34873: EQUAL
34874: IFFALSE 34907
// result := Replace ( arr , pos [ 1 ] , value ) else
34876: LD_ADDR_VAR 0 4
34880: PUSH
34881: LD_VAR 0 1
34885: PPUSH
34886: LD_VAR 0 2
34890: PUSH
34891: LD_INT 1
34893: ARRAY
34894: PPUSH
34895: LD_VAR 0 3
34899: PPUSH
34900: CALL_OW 1
34904: ST_TO_ADDR
34905: GO 35169
// begin tmp := arr ;
34907: LD_ADDR_VAR 0 6
34911: PUSH
34912: LD_VAR 0 1
34916: ST_TO_ADDR
// s_arr := [ tmp ] ;
34917: LD_ADDR_VAR 0 7
34921: PUSH
34922: LD_VAR 0 6
34926: PUSH
34927: EMPTY
34928: LIST
34929: ST_TO_ADDR
// for i = 1 to pos - 1 do
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: DOUBLE
34936: LD_INT 1
34938: DEC
34939: ST_TO_ADDR
34940: LD_VAR 0 2
34944: PUSH
34945: LD_INT 1
34947: MINUS
34948: PUSH
34949: FOR_TO
34950: IFFALSE 34995
// begin tmp := tmp [ pos [ i ] ] ;
34952: LD_ADDR_VAR 0 6
34956: PUSH
34957: LD_VAR 0 6
34961: PUSH
34962: LD_VAR 0 2
34966: PUSH
34967: LD_VAR 0 5
34971: ARRAY
34972: ARRAY
34973: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34974: LD_ADDR_VAR 0 7
34978: PUSH
34979: LD_VAR 0 7
34983: PUSH
34984: LD_VAR 0 6
34988: PUSH
34989: EMPTY
34990: LIST
34991: ADD
34992: ST_TO_ADDR
// end ;
34993: GO 34949
34995: POP
34996: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34997: LD_ADDR_VAR 0 6
35001: PUSH
35002: LD_VAR 0 6
35006: PPUSH
35007: LD_VAR 0 2
35011: PUSH
35012: LD_VAR 0 2
35016: ARRAY
35017: PPUSH
35018: LD_VAR 0 3
35022: PPUSH
35023: CALL_OW 1
35027: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35028: LD_ADDR_VAR 0 7
35032: PUSH
35033: LD_VAR 0 7
35037: PPUSH
35038: LD_VAR 0 7
35042: PPUSH
35043: LD_VAR 0 6
35047: PPUSH
35048: CALL_OW 1
35052: ST_TO_ADDR
// for i = s_arr downto 2 do
35053: LD_ADDR_VAR 0 5
35057: PUSH
35058: DOUBLE
35059: LD_VAR 0 7
35063: INC
35064: ST_TO_ADDR
35065: LD_INT 2
35067: PUSH
35068: FOR_DOWNTO
35069: IFFALSE 35153
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35071: LD_ADDR_VAR 0 6
35075: PUSH
35076: LD_VAR 0 7
35080: PUSH
35081: LD_VAR 0 5
35085: PUSH
35086: LD_INT 1
35088: MINUS
35089: ARRAY
35090: PPUSH
35091: LD_VAR 0 2
35095: PUSH
35096: LD_VAR 0 5
35100: PUSH
35101: LD_INT 1
35103: MINUS
35104: ARRAY
35105: PPUSH
35106: LD_VAR 0 7
35110: PUSH
35111: LD_VAR 0 5
35115: ARRAY
35116: PPUSH
35117: CALL_OW 1
35121: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35122: LD_ADDR_VAR 0 7
35126: PUSH
35127: LD_VAR 0 7
35131: PPUSH
35132: LD_VAR 0 5
35136: PUSH
35137: LD_INT 1
35139: MINUS
35140: PPUSH
35141: LD_VAR 0 6
35145: PPUSH
35146: CALL_OW 1
35150: ST_TO_ADDR
// end ;
35151: GO 35068
35153: POP
35154: POP
// result := s_arr [ 1 ] ;
35155: LD_ADDR_VAR 0 4
35159: PUSH
35160: LD_VAR 0 7
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: ST_TO_ADDR
// end ; end ;
35169: LD_VAR 0 4
35173: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
// if not list then
35178: LD_VAR 0 1
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 35278
// i := list [ pos1 ] ;
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: LD_VAR 0 1
35196: PUSH
35197: LD_VAR 0 2
35201: ARRAY
35202: ST_TO_ADDR
// if not i then
35203: LD_VAR 0 5
35207: NOT
35208: IFFALSE 35212
// exit ;
35210: GO 35278
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35212: LD_ADDR_VAR 0 1
35216: PUSH
35217: LD_VAR 0 1
35221: PPUSH
35222: LD_VAR 0 2
35226: PPUSH
35227: LD_VAR 0 1
35231: PUSH
35232: LD_VAR 0 3
35236: ARRAY
35237: PPUSH
35238: CALL_OW 1
35242: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35243: LD_ADDR_VAR 0 1
35247: PUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: LD_VAR 0 3
35257: PPUSH
35258: LD_VAR 0 5
35262: PPUSH
35263: CALL_OW 1
35267: ST_TO_ADDR
// result := list ;
35268: LD_ADDR_VAR 0 4
35272: PUSH
35273: LD_VAR 0 1
35277: ST_TO_ADDR
// end ;
35278: LD_VAR 0 4
35282: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35283: LD_INT 0
35285: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35286: LD_ADDR_VAR 0 5
35290: PUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 250
35300: PPUSH
35301: LD_VAR 0 1
35305: PPUSH
35306: CALL_OW 251
35310: PPUSH
35311: LD_VAR 0 2
35315: PPUSH
35316: LD_VAR 0 3
35320: PPUSH
35321: LD_VAR 0 4
35325: PPUSH
35326: CALL 35336 0 5
35330: ST_TO_ADDR
// end ;
35331: LD_VAR 0 5
35335: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35336: LD_INT 0
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
// if not list then
35342: LD_VAR 0 3
35346: NOT
35347: IFFALSE 35351
// exit ;
35349: GO 35739
// result := [ ] ;
35351: LD_ADDR_VAR 0 6
35355: PUSH
35356: EMPTY
35357: ST_TO_ADDR
// for i in list do
35358: LD_ADDR_VAR 0 7
35362: PUSH
35363: LD_VAR 0 3
35367: PUSH
35368: FOR_IN
35369: IFFALSE 35571
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35371: LD_ADDR_VAR 0 9
35375: PUSH
35376: LD_VAR 0 7
35380: PPUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: LD_VAR 0 2
35390: PPUSH
35391: CALL_OW 297
35395: ST_TO_ADDR
// if not result then
35396: LD_VAR 0 6
35400: NOT
35401: IFFALSE 35427
// result := [ [ i , tmp ] ] else
35403: LD_ADDR_VAR 0 6
35407: PUSH
35408: LD_VAR 0 7
35412: PUSH
35413: LD_VAR 0 9
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: EMPTY
35423: LIST
35424: ST_TO_ADDR
35425: GO 35569
// begin if result [ result ] [ 2 ] < tmp then
35427: LD_VAR 0 6
35431: PUSH
35432: LD_VAR 0 6
35436: ARRAY
35437: PUSH
35438: LD_INT 2
35440: ARRAY
35441: PUSH
35442: LD_VAR 0 9
35446: LESS
35447: IFFALSE 35489
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35449: LD_ADDR_VAR 0 6
35453: PUSH
35454: LD_VAR 0 6
35458: PPUSH
35459: LD_VAR 0 6
35463: PUSH
35464: LD_INT 1
35466: PLUS
35467: PPUSH
35468: LD_VAR 0 7
35472: PUSH
35473: LD_VAR 0 9
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PPUSH
35482: CALL_OW 2
35486: ST_TO_ADDR
35487: GO 35569
// for j = 1 to result do
35489: LD_ADDR_VAR 0 8
35493: PUSH
35494: DOUBLE
35495: LD_INT 1
35497: DEC
35498: ST_TO_ADDR
35499: LD_VAR 0 6
35503: PUSH
35504: FOR_TO
35505: IFFALSE 35567
// begin if tmp < result [ j ] [ 2 ] then
35507: LD_VAR 0 9
35511: PUSH
35512: LD_VAR 0 6
35516: PUSH
35517: LD_VAR 0 8
35521: ARRAY
35522: PUSH
35523: LD_INT 2
35525: ARRAY
35526: LESS
35527: IFFALSE 35565
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35529: LD_ADDR_VAR 0 6
35533: PUSH
35534: LD_VAR 0 6
35538: PPUSH
35539: LD_VAR 0 8
35543: PPUSH
35544: LD_VAR 0 7
35548: PUSH
35549: LD_VAR 0 9
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PPUSH
35558: CALL_OW 2
35562: ST_TO_ADDR
// break ;
35563: GO 35567
// end ; end ;
35565: GO 35504
35567: POP
35568: POP
// end ; end ;
35569: GO 35368
35571: POP
35572: POP
// if result and not asc then
35573: LD_VAR 0 6
35577: PUSH
35578: LD_VAR 0 4
35582: NOT
35583: AND
35584: IFFALSE 35659
// begin tmp := result ;
35586: LD_ADDR_VAR 0 9
35590: PUSH
35591: LD_VAR 0 6
35595: ST_TO_ADDR
// for i = tmp downto 1 do
35596: LD_ADDR_VAR 0 7
35600: PUSH
35601: DOUBLE
35602: LD_VAR 0 9
35606: INC
35607: ST_TO_ADDR
35608: LD_INT 1
35610: PUSH
35611: FOR_DOWNTO
35612: IFFALSE 35657
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35614: LD_ADDR_VAR 0 6
35618: PUSH
35619: LD_VAR 0 6
35623: PPUSH
35624: LD_VAR 0 9
35628: PUSH
35629: LD_VAR 0 7
35633: MINUS
35634: PUSH
35635: LD_INT 1
35637: PLUS
35638: PPUSH
35639: LD_VAR 0 9
35643: PUSH
35644: LD_VAR 0 7
35648: ARRAY
35649: PPUSH
35650: CALL_OW 1
35654: ST_TO_ADDR
35655: GO 35611
35657: POP
35658: POP
// end ; tmp := [ ] ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: EMPTY
35665: ST_TO_ADDR
// if mode then
35666: LD_VAR 0 5
35670: IFFALSE 35739
// begin for i = 1 to result do
35672: LD_ADDR_VAR 0 7
35676: PUSH
35677: DOUBLE
35678: LD_INT 1
35680: DEC
35681: ST_TO_ADDR
35682: LD_VAR 0 6
35686: PUSH
35687: FOR_TO
35688: IFFALSE 35727
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35690: LD_ADDR_VAR 0 9
35694: PUSH
35695: LD_VAR 0 9
35699: PPUSH
35700: LD_VAR 0 7
35704: PPUSH
35705: LD_VAR 0 6
35709: PUSH
35710: LD_VAR 0 7
35714: ARRAY
35715: PUSH
35716: LD_INT 1
35718: ARRAY
35719: PPUSH
35720: CALL_OW 1
35724: ST_TO_ADDR
35725: GO 35687
35727: POP
35728: POP
// result := tmp ;
35729: LD_ADDR_VAR 0 6
35733: PUSH
35734: LD_VAR 0 9
35738: ST_TO_ADDR
// end ; end ;
35739: LD_VAR 0 6
35743: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35744: LD_INT 0
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35752: LD_ADDR_VAR 0 5
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// if not x or not y then
35774: LD_VAR 0 2
35778: NOT
35779: PUSH
35780: LD_VAR 0 3
35784: NOT
35785: OR
35786: IFFALSE 35790
// exit ;
35788: GO 37442
// if not range then
35790: LD_VAR 0 4
35794: NOT
35795: IFFALSE 35805
// range := 10 ;
35797: LD_ADDR_VAR 0 4
35801: PUSH
35802: LD_INT 10
35804: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35805: LD_ADDR_VAR 0 8
35809: PUSH
35810: LD_INT 81
35812: PUSH
35813: LD_VAR 0 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 92
35824: PUSH
35825: LD_VAR 0 2
35829: PUSH
35830: LD_VAR 0 3
35834: PUSH
35835: LD_VAR 0 4
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 21
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PPUSH
35868: CALL_OW 69
35872: ST_TO_ADDR
// if not tmp then
35873: LD_VAR 0 8
35877: NOT
35878: IFFALSE 35882
// exit ;
35880: GO 37442
// for i in tmp do
35882: LD_ADDR_VAR 0 6
35886: PUSH
35887: LD_VAR 0 8
35891: PUSH
35892: FOR_IN
35893: IFFALSE 37417
// begin points := [ 0 , 0 , 0 ] ;
35895: LD_ADDR_VAR 0 9
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// bpoints := 1 ;
35914: LD_ADDR_VAR 0 10
35918: PUSH
35919: LD_INT 1
35921: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35922: LD_VAR 0 6
35926: PPUSH
35927: CALL_OW 247
35931: PUSH
35932: LD_INT 1
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 36518
35940: POP
// begin if GetClass ( i ) = 1 then
35941: LD_VAR 0 6
35945: PPUSH
35946: CALL_OW 257
35950: PUSH
35951: LD_INT 1
35953: EQUAL
35954: IFFALSE 35975
// points := [ 10 , 5 , 3 ] ;
35956: LD_ADDR_VAR 0 9
35960: PUSH
35961: LD_INT 10
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: LD_INT 3
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35975: LD_VAR 0 6
35979: PPUSH
35980: CALL_OW 257
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 3
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: IN
35999: IFFALSE 36020
// points := [ 3 , 2 , 1 ] ;
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_INT 3
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36020: LD_VAR 0 6
36024: PPUSH
36025: CALL_OW 257
36029: PUSH
36030: LD_INT 5
36032: EQUAL
36033: IFFALSE 36054
// points := [ 130 , 5 , 2 ] ;
36035: LD_ADDR_VAR 0 9
36039: PUSH
36040: LD_INT 130
36042: PUSH
36043: LD_INT 5
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36054: LD_VAR 0 6
36058: PPUSH
36059: CALL_OW 257
36063: PUSH
36064: LD_INT 8
36066: EQUAL
36067: IFFALSE 36088
// points := [ 35 , 35 , 30 ] ;
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_INT 35
36076: PUSH
36077: LD_INT 35
36079: PUSH
36080: LD_INT 30
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36088: LD_VAR 0 6
36092: PPUSH
36093: CALL_OW 257
36097: PUSH
36098: LD_INT 9
36100: EQUAL
36101: IFFALSE 36122
// points := [ 20 , 55 , 40 ] ;
36103: LD_ADDR_VAR 0 9
36107: PUSH
36108: LD_INT 20
36110: PUSH
36111: LD_INT 55
36113: PUSH
36114: LD_INT 40
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36122: LD_VAR 0 6
36126: PPUSH
36127: CALL_OW 257
36131: PUSH
36132: LD_INT 12
36134: PUSH
36135: LD_INT 16
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: IN
36142: IFFALSE 36163
// points := [ 5 , 3 , 2 ] ;
36144: LD_ADDR_VAR 0 9
36148: PUSH
36149: LD_INT 5
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36163: LD_VAR 0 6
36167: PPUSH
36168: CALL_OW 257
36172: PUSH
36173: LD_INT 17
36175: EQUAL
36176: IFFALSE 36197
// points := [ 100 , 50 , 75 ] ;
36178: LD_ADDR_VAR 0 9
36182: PUSH
36183: LD_INT 100
36185: PUSH
36186: LD_INT 50
36188: PUSH
36189: LD_INT 75
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36197: LD_VAR 0 6
36201: PPUSH
36202: CALL_OW 257
36206: PUSH
36207: LD_INT 15
36209: EQUAL
36210: IFFALSE 36231
// points := [ 10 , 5 , 3 ] ;
36212: LD_ADDR_VAR 0 9
36216: PUSH
36217: LD_INT 10
36219: PUSH
36220: LD_INT 5
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36231: LD_VAR 0 6
36235: PPUSH
36236: CALL_OW 257
36240: PUSH
36241: LD_INT 14
36243: EQUAL
36244: IFFALSE 36265
// points := [ 10 , 0 , 0 ] ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_INT 10
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36265: LD_VAR 0 6
36269: PPUSH
36270: CALL_OW 257
36274: PUSH
36275: LD_INT 11
36277: EQUAL
36278: IFFALSE 36299
// points := [ 30 , 10 , 5 ] ;
36280: LD_ADDR_VAR 0 9
36284: PUSH
36285: LD_INT 30
36287: PUSH
36288: LD_INT 10
36290: PUSH
36291: LD_INT 5
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36299: LD_VAR 0 1
36303: PPUSH
36304: LD_INT 5
36306: PPUSH
36307: CALL_OW 321
36311: PUSH
36312: LD_INT 2
36314: EQUAL
36315: IFFALSE 36332
// bpoints := bpoints * 1.8 ;
36317: LD_ADDR_VAR 0 10
36321: PUSH
36322: LD_VAR 0 10
36326: PUSH
36327: LD_REAL  1.80000000000000E+0000
36330: MUL
36331: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36332: LD_VAR 0 6
36336: PPUSH
36337: CALL_OW 257
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: LD_INT 4
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: IN
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: LD_INT 51
36368: PPUSH
36369: CALL_OW 321
36373: PUSH
36374: LD_INT 2
36376: EQUAL
36377: AND
36378: IFFALSE 36395
// bpoints := bpoints * 1.2 ;
36380: LD_ADDR_VAR 0 10
36384: PUSH
36385: LD_VAR 0 10
36389: PUSH
36390: LD_REAL  1.20000000000000E+0000
36393: MUL
36394: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36395: LD_VAR 0 6
36399: PPUSH
36400: CALL_OW 257
36404: PUSH
36405: LD_INT 5
36407: PUSH
36408: LD_INT 7
36410: PUSH
36411: LD_INT 9
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: IN
36419: PUSH
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_INT 52
36427: PPUSH
36428: CALL_OW 321
36432: PUSH
36433: LD_INT 2
36435: EQUAL
36436: AND
36437: IFFALSE 36454
// bpoints := bpoints * 1.5 ;
36439: LD_ADDR_VAR 0 10
36443: PUSH
36444: LD_VAR 0 10
36448: PUSH
36449: LD_REAL  1.50000000000000E+0000
36452: MUL
36453: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_INT 66
36461: PPUSH
36462: CALL_OW 321
36466: PUSH
36467: LD_INT 2
36469: EQUAL
36470: IFFALSE 36487
// bpoints := bpoints * 1.1 ;
36472: LD_ADDR_VAR 0 10
36476: PUSH
36477: LD_VAR 0 10
36481: PUSH
36482: LD_REAL  1.10000000000000E+0000
36485: MUL
36486: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36487: LD_ADDR_VAR 0 10
36491: PUSH
36492: LD_VAR 0 10
36496: PUSH
36497: LD_VAR 0 6
36501: PPUSH
36502: LD_INT 1
36504: PPUSH
36505: CALL_OW 259
36509: PUSH
36510: LD_REAL  1.15000000000000E+0000
36513: MUL
36514: MUL
36515: ST_TO_ADDR
// end ; unit_vehicle :
36516: GO 37346
36518: LD_INT 2
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36526
36524: GO 37334
36526: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36527: LD_VAR 0 6
36531: PPUSH
36532: CALL_OW 264
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 42
36542: PUSH
36543: LD_INT 24
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: IN
36551: IFFALSE 36572
// points := [ 25 , 5 , 3 ] ;
36553: LD_ADDR_VAR 0 9
36557: PUSH
36558: LD_INT 25
36560: PUSH
36561: LD_INT 5
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36572: LD_VAR 0 6
36576: PPUSH
36577: CALL_OW 264
36581: PUSH
36582: LD_INT 4
36584: PUSH
36585: LD_INT 43
36587: PUSH
36588: LD_INT 25
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: IN
36596: IFFALSE 36617
// points := [ 40 , 15 , 5 ] ;
36598: LD_ADDR_VAR 0 9
36602: PUSH
36603: LD_INT 40
36605: PUSH
36606: LD_INT 15
36608: PUSH
36609: LD_INT 5
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36617: LD_VAR 0 6
36621: PPUSH
36622: CALL_OW 264
36626: PUSH
36627: LD_INT 3
36629: PUSH
36630: LD_INT 23
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: IN
36637: IFFALSE 36658
// points := [ 7 , 25 , 8 ] ;
36639: LD_ADDR_VAR 0 9
36643: PUSH
36644: LD_INT 7
36646: PUSH
36647: LD_INT 25
36649: PUSH
36650: LD_INT 8
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36658: LD_VAR 0 6
36662: PPUSH
36663: CALL_OW 264
36667: PUSH
36668: LD_INT 5
36670: PUSH
36671: LD_INT 27
36673: PUSH
36674: LD_INT 44
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: IN
36682: IFFALSE 36703
// points := [ 14 , 50 , 16 ] ;
36684: LD_ADDR_VAR 0 9
36688: PUSH
36689: LD_INT 14
36691: PUSH
36692: LD_INT 50
36694: PUSH
36695: LD_INT 16
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36703: LD_VAR 0 6
36707: PPUSH
36708: CALL_OW 264
36712: PUSH
36713: LD_INT 6
36715: PUSH
36716: LD_INT 46
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: IN
36723: IFFALSE 36744
// points := [ 32 , 120 , 70 ] ;
36725: LD_ADDR_VAR 0 9
36729: PUSH
36730: LD_INT 32
36732: PUSH
36733: LD_INT 120
36735: PUSH
36736: LD_INT 70
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36744: LD_VAR 0 6
36748: PPUSH
36749: CALL_OW 264
36753: PUSH
36754: LD_INT 7
36756: PUSH
36757: LD_INT 28
36759: PUSH
36760: LD_INT 45
36762: PUSH
36763: LD_EXP 24
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: IN
36774: IFFALSE 36795
// points := [ 35 , 20 , 45 ] ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_INT 35
36783: PUSH
36784: LD_INT 20
36786: PUSH
36787: LD_INT 45
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 264
36804: PUSH
36805: LD_INT 47
36807: PUSH
36808: EMPTY
36809: LIST
36810: IN
36811: IFFALSE 36832
// points := [ 67 , 45 , 75 ] ;
36813: LD_ADDR_VAR 0 9
36817: PUSH
36818: LD_INT 67
36820: PUSH
36821: LD_INT 45
36823: PUSH
36824: LD_INT 75
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 264
36841: PUSH
36842: LD_INT 26
36844: PUSH
36845: EMPTY
36846: LIST
36847: IN
36848: IFFALSE 36869
// points := [ 120 , 30 , 80 ] ;
36850: LD_ADDR_VAR 0 9
36854: PUSH
36855: LD_INT 120
36857: PUSH
36858: LD_INT 30
36860: PUSH
36861: LD_INT 80
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36869: LD_VAR 0 6
36873: PPUSH
36874: CALL_OW 264
36878: PUSH
36879: LD_INT 22
36881: PUSH
36882: EMPTY
36883: LIST
36884: IN
36885: IFFALSE 36906
// points := [ 40 , 1 , 1 ] ;
36887: LD_ADDR_VAR 0 9
36891: PUSH
36892: LD_INT 40
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36906: LD_VAR 0 6
36910: PPUSH
36911: CALL_OW 264
36915: PUSH
36916: LD_INT 29
36918: PUSH
36919: EMPTY
36920: LIST
36921: IN
36922: IFFALSE 36943
// points := [ 70 , 200 , 400 ] ;
36924: LD_ADDR_VAR 0 9
36928: PUSH
36929: LD_INT 70
36931: PUSH
36932: LD_INT 200
36934: PUSH
36935: LD_INT 400
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36943: LD_VAR 0 6
36947: PPUSH
36948: CALL_OW 264
36952: PUSH
36953: LD_INT 14
36955: PUSH
36956: LD_INT 53
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: IN
36963: IFFALSE 36984
// points := [ 40 , 10 , 20 ] ;
36965: LD_ADDR_VAR 0 9
36969: PUSH
36970: LD_INT 40
36972: PUSH
36973: LD_INT 10
36975: PUSH
36976: LD_INT 20
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36984: LD_VAR 0 6
36988: PPUSH
36989: CALL_OW 264
36993: PUSH
36994: LD_INT 9
36996: PUSH
36997: EMPTY
36998: LIST
36999: IN
37000: IFFALSE 37021
// points := [ 5 , 70 , 20 ] ;
37002: LD_ADDR_VAR 0 9
37006: PUSH
37007: LD_INT 5
37009: PUSH
37010: LD_INT 70
37012: PUSH
37013: LD_INT 20
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37021: LD_VAR 0 6
37025: PPUSH
37026: CALL_OW 264
37030: PUSH
37031: LD_INT 10
37033: PUSH
37034: EMPTY
37035: LIST
37036: IN
37037: IFFALSE 37058
// points := [ 35 , 110 , 70 ] ;
37039: LD_ADDR_VAR 0 9
37043: PUSH
37044: LD_INT 35
37046: PUSH
37047: LD_INT 110
37049: PUSH
37050: LD_INT 70
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 265
37067: PUSH
37068: LD_INT 25
37070: EQUAL
37071: IFFALSE 37092
// points := [ 80 , 65 , 100 ] ;
37073: LD_ADDR_VAR 0 9
37077: PUSH
37078: LD_INT 80
37080: PUSH
37081: LD_INT 65
37083: PUSH
37084: LD_INT 100
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37092: LD_VAR 0 6
37096: PPUSH
37097: CALL_OW 263
37101: PUSH
37102: LD_INT 1
37104: EQUAL
37105: IFFALSE 37140
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37107: LD_ADDR_VAR 0 10
37111: PUSH
37112: LD_VAR 0 10
37116: PUSH
37117: LD_VAR 0 6
37121: PPUSH
37122: CALL_OW 311
37126: PPUSH
37127: LD_INT 3
37129: PPUSH
37130: CALL_OW 259
37134: PUSH
37135: LD_INT 4
37137: MUL
37138: MUL
37139: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37140: LD_VAR 0 6
37144: PPUSH
37145: CALL_OW 263
37149: PUSH
37150: LD_INT 2
37152: EQUAL
37153: IFFALSE 37204
// begin j := IsControledBy ( i ) ;
37155: LD_ADDR_VAR 0 7
37159: PUSH
37160: LD_VAR 0 6
37164: PPUSH
37165: CALL_OW 312
37169: ST_TO_ADDR
// if j then
37170: LD_VAR 0 7
37174: IFFALSE 37204
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37176: LD_ADDR_VAR 0 10
37180: PUSH
37181: LD_VAR 0 10
37185: PUSH
37186: LD_VAR 0 7
37190: PPUSH
37191: LD_INT 3
37193: PPUSH
37194: CALL_OW 259
37198: PUSH
37199: LD_INT 3
37201: MUL
37202: MUL
37203: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37204: LD_VAR 0 6
37208: PPUSH
37209: CALL_OW 264
37213: PUSH
37214: LD_INT 5
37216: PUSH
37217: LD_INT 6
37219: PUSH
37220: LD_INT 46
37222: PUSH
37223: LD_INT 44
37225: PUSH
37226: LD_INT 47
37228: PUSH
37229: LD_INT 45
37231: PUSH
37232: LD_INT 28
37234: PUSH
37235: LD_INT 7
37237: PUSH
37238: LD_INT 27
37240: PUSH
37241: LD_INT 29
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: IN
37256: PUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: LD_INT 52
37264: PPUSH
37265: CALL_OW 321
37269: PUSH
37270: LD_INT 2
37272: EQUAL
37273: AND
37274: IFFALSE 37291
// bpoints := bpoints * 1.2 ;
37276: LD_ADDR_VAR 0 10
37280: PUSH
37281: LD_VAR 0 10
37285: PUSH
37286: LD_REAL  1.20000000000000E+0000
37289: MUL
37290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37291: LD_VAR 0 6
37295: PPUSH
37296: CALL_OW 264
37300: PUSH
37301: LD_INT 6
37303: PUSH
37304: LD_INT 46
37306: PUSH
37307: LD_INT 47
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: IN
37315: IFFALSE 37332
// bpoints := bpoints * 1.2 ;
37317: LD_ADDR_VAR 0 10
37321: PUSH
37322: LD_VAR 0 10
37326: PUSH
37327: LD_REAL  1.20000000000000E+0000
37330: MUL
37331: ST_TO_ADDR
// end ; unit_building :
37332: GO 37346
37334: LD_INT 3
37336: DOUBLE
37337: EQUAL
37338: IFTRUE 37342
37340: GO 37345
37342: POP
// ; end ;
37343: GO 37346
37345: POP
// for j = 1 to 3 do
37346: LD_ADDR_VAR 0 7
37350: PUSH
37351: DOUBLE
37352: LD_INT 1
37354: DEC
37355: ST_TO_ADDR
37356: LD_INT 3
37358: PUSH
37359: FOR_TO
37360: IFFALSE 37413
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37362: LD_ADDR_VAR 0 5
37366: PUSH
37367: LD_VAR 0 5
37371: PPUSH
37372: LD_VAR 0 7
37376: PPUSH
37377: LD_VAR 0 5
37381: PUSH
37382: LD_VAR 0 7
37386: ARRAY
37387: PUSH
37388: LD_VAR 0 9
37392: PUSH
37393: LD_VAR 0 7
37397: ARRAY
37398: PUSH
37399: LD_VAR 0 10
37403: MUL
37404: PLUS
37405: PPUSH
37406: CALL_OW 1
37410: ST_TO_ADDR
37411: GO 37359
37413: POP
37414: POP
// end ;
37415: GO 35892
37417: POP
37418: POP
// result := Replace ( result , 4 , tmp ) ;
37419: LD_ADDR_VAR 0 5
37423: PUSH
37424: LD_VAR 0 5
37428: PPUSH
37429: LD_INT 4
37431: PPUSH
37432: LD_VAR 0 8
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
// end ;
37442: LD_VAR 0 5
37446: RET
// export function DangerAtRange ( unit , range ) ; begin
37447: LD_INT 0
37449: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37450: LD_ADDR_VAR 0 3
37454: PUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: CALL_OW 255
37464: PPUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 250
37474: PPUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 251
37484: PPUSH
37485: LD_VAR 0 2
37489: PPUSH
37490: CALL 35744 0 4
37494: ST_TO_ADDR
// end ;
37495: LD_VAR 0 3
37499: RET
// export function DangerInArea ( side , area ) ; begin
37500: LD_INT 0
37502: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37503: LD_ADDR_VAR 0 3
37507: PUSH
37508: LD_VAR 0 2
37512: PPUSH
37513: LD_INT 81
37515: PUSH
37516: LD_VAR 0 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PPUSH
37525: CALL_OW 70
37529: ST_TO_ADDR
// end ;
37530: LD_VAR 0 3
37534: RET
// export function IsExtension ( b ) ; begin
37535: LD_INT 0
37537: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37538: LD_ADDR_VAR 0 2
37542: PUSH
37543: LD_VAR 0 1
37547: PUSH
37548: LD_INT 23
37550: PUSH
37551: LD_INT 20
37553: PUSH
37554: LD_INT 22
37556: PUSH
37557: LD_INT 17
37559: PUSH
37560: LD_INT 24
37562: PUSH
37563: LD_INT 21
37565: PUSH
37566: LD_INT 19
37568: PUSH
37569: LD_INT 16
37571: PUSH
37572: LD_INT 25
37574: PUSH
37575: LD_INT 18
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: IN
37590: ST_TO_ADDR
// end ;
37591: LD_VAR 0 2
37595: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37596: LD_INT 0
37598: PPUSH
37599: PPUSH
37600: PPUSH
// result := [ ] ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: EMPTY
37607: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37608: LD_ADDR_VAR 0 5
37612: PUSH
37613: LD_VAR 0 2
37617: PPUSH
37618: LD_INT 21
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 70
37632: ST_TO_ADDR
// if not tmp then
37633: LD_VAR 0 5
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37706
// if checkLink then
37642: LD_VAR 0 3
37646: IFFALSE 37696
// begin for i in tmp do
37648: LD_ADDR_VAR 0 6
37652: PUSH
37653: LD_VAR 0 5
37657: PUSH
37658: FOR_IN
37659: IFFALSE 37694
// if GetBase ( i ) <> base then
37661: LD_VAR 0 6
37665: PPUSH
37666: CALL_OW 274
37670: PUSH
37671: LD_VAR 0 1
37675: NONEQUAL
37676: IFFALSE 37692
// ComLinkToBase ( base , i ) ;
37678: LD_VAR 0 1
37682: PPUSH
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 169
37692: GO 37658
37694: POP
37695: POP
// end ; result := tmp ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_VAR 0 5
37705: ST_TO_ADDR
// end ;
37706: LD_VAR 0 4
37710: RET
// export function ComComplete ( units , b ) ; var i ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
// if not units then
37715: LD_VAR 0 1
37719: NOT
37720: IFFALSE 37724
// exit ;
37722: GO 37814
// for i in units do
37724: LD_ADDR_VAR 0 4
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: FOR_IN
37735: IFFALSE 37812
// if BuildingStatus ( b ) = bs_build then
37737: LD_VAR 0 2
37741: PPUSH
37742: CALL_OW 461
37746: PUSH
37747: LD_INT 1
37749: EQUAL
37750: IFFALSE 37810
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37752: LD_VAR 0 4
37756: PPUSH
37757: LD_STRING h
37759: PUSH
37760: LD_VAR 0 2
37764: PPUSH
37765: CALL_OW 250
37769: PUSH
37770: LD_VAR 0 2
37774: PPUSH
37775: CALL_OW 251
37779: PUSH
37780: LD_VAR 0 2
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: PPUSH
37806: CALL_OW 446
37810: GO 37734
37812: POP
37813: POP
// end ;
37814: LD_VAR 0 3
37818: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37819: LD_INT 0
37821: PPUSH
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37827: LD_VAR 0 1
37831: NOT
37832: PUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 263
37842: PUSH
37843: LD_INT 2
37845: NONEQUAL
37846: OR
37847: IFFALSE 37851
// exit ;
37849: GO 38167
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37851: LD_ADDR_VAR 0 6
37855: PUSH
37856: LD_INT 22
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 255
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 30
37878: PUSH
37879: LD_INT 36
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 34
37888: PUSH
37889: LD_INT 31
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PPUSH
37905: CALL_OW 69
37909: ST_TO_ADDR
// if not tmp then
37910: LD_VAR 0 6
37914: NOT
37915: IFFALSE 37919
// exit ;
37917: GO 38167
// result := [ ] ;
37919: LD_ADDR_VAR 0 2
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// for i in tmp do
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: LD_VAR 0 6
37935: PUSH
37936: FOR_IN
37937: IFFALSE 38008
// begin t := UnitsInside ( i ) ;
37939: LD_ADDR_VAR 0 4
37943: PUSH
37944: LD_VAR 0 3
37948: PPUSH
37949: CALL_OW 313
37953: ST_TO_ADDR
// if t then
37954: LD_VAR 0 4
37958: IFFALSE 38006
// for j in t do
37960: LD_ADDR_VAR 0 7
37964: PUSH
37965: LD_VAR 0 4
37969: PUSH
37970: FOR_IN
37971: IFFALSE 38004
// result := Replace ( result , result + 1 , j ) ;
37973: LD_ADDR_VAR 0 2
37977: PUSH
37978: LD_VAR 0 2
37982: PPUSH
37983: LD_VAR 0 2
37987: PUSH
37988: LD_INT 1
37990: PLUS
37991: PPUSH
37992: LD_VAR 0 7
37996: PPUSH
37997: CALL_OW 1
38001: ST_TO_ADDR
38002: GO 37970
38004: POP
38005: POP
// end ;
38006: GO 37936
38008: POP
38009: POP
// if not result then
38010: LD_VAR 0 2
38014: NOT
38015: IFFALSE 38019
// exit ;
38017: GO 38167
// mech := result [ 1 ] ;
38019: LD_ADDR_VAR 0 5
38023: PUSH
38024: LD_VAR 0 2
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: ST_TO_ADDR
// if result > 1 then
38033: LD_VAR 0 2
38037: PUSH
38038: LD_INT 1
38040: GREATER
38041: IFFALSE 38153
// begin for i = 2 to result do
38043: LD_ADDR_VAR 0 3
38047: PUSH
38048: DOUBLE
38049: LD_INT 2
38051: DEC
38052: ST_TO_ADDR
38053: LD_VAR 0 2
38057: PUSH
38058: FOR_TO
38059: IFFALSE 38151
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38061: LD_ADDR_VAR 0 4
38065: PUSH
38066: LD_VAR 0 2
38070: PUSH
38071: LD_VAR 0 3
38075: ARRAY
38076: PPUSH
38077: LD_INT 3
38079: PPUSH
38080: CALL_OW 259
38084: PUSH
38085: LD_VAR 0 2
38089: PUSH
38090: LD_VAR 0 3
38094: ARRAY
38095: PPUSH
38096: CALL_OW 432
38100: MINUS
38101: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38102: LD_VAR 0 4
38106: PUSH
38107: LD_VAR 0 5
38111: PPUSH
38112: LD_INT 3
38114: PPUSH
38115: CALL_OW 259
38119: PUSH
38120: LD_VAR 0 5
38124: PPUSH
38125: CALL_OW 432
38129: MINUS
38130: GREATEREQUAL
38131: IFFALSE 38149
// mech := result [ i ] ;
38133: LD_ADDR_VAR 0 5
38137: PUSH
38138: LD_VAR 0 2
38142: PUSH
38143: LD_VAR 0 3
38147: ARRAY
38148: ST_TO_ADDR
// end ;
38149: GO 38058
38151: POP
38152: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38153: LD_VAR 0 1
38157: PPUSH
38158: LD_VAR 0 5
38162: PPUSH
38163: CALL_OW 135
// end ;
38167: LD_VAR 0 2
38171: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38172: LD_INT 0
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
// result := [ ] ;
38187: LD_ADDR_VAR 0 7
38191: PUSH
38192: EMPTY
38193: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 266
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: IN
38214: NOT
38215: IFFALSE 38219
// exit ;
38217: GO 39853
// if name then
38219: LD_VAR 0 3
38223: IFFALSE 38239
// SetBName ( base_dep , name ) ;
38225: LD_VAR 0 1
38229: PPUSH
38230: LD_VAR 0 3
38234: PPUSH
38235: CALL_OW 500
// base := GetBase ( base_dep ) ;
38239: LD_ADDR_VAR 0 15
38243: PUSH
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL_OW 274
38253: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38254: LD_ADDR_VAR 0 16
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL_OW 255
38268: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38269: LD_ADDR_VAR 0 17
38273: PUSH
38274: LD_VAR 0 1
38278: PPUSH
38279: CALL_OW 248
38283: ST_TO_ADDR
// if sources then
38284: LD_VAR 0 5
38288: IFFALSE 38335
// for i = 1 to 3 do
38290: LD_ADDR_VAR 0 8
38294: PUSH
38295: DOUBLE
38296: LD_INT 1
38298: DEC
38299: ST_TO_ADDR
38300: LD_INT 3
38302: PUSH
38303: FOR_TO
38304: IFFALSE 38333
// AddResourceType ( base , i , sources [ i ] ) ;
38306: LD_VAR 0 15
38310: PPUSH
38311: LD_VAR 0 8
38315: PPUSH
38316: LD_VAR 0 5
38320: PUSH
38321: LD_VAR 0 8
38325: ARRAY
38326: PPUSH
38327: CALL_OW 276
38331: GO 38303
38333: POP
38334: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38335: LD_ADDR_VAR 0 18
38339: PUSH
38340: LD_VAR 0 15
38344: PPUSH
38345: LD_VAR 0 2
38349: PPUSH
38350: LD_INT 1
38352: PPUSH
38353: CALL 37596 0 3
38357: ST_TO_ADDR
// InitHc ;
38358: CALL_OW 19
// InitUc ;
38362: CALL_OW 18
// uc_side := side ;
38366: LD_ADDR_OWVAR 20
38370: PUSH
38371: LD_VAR 0 16
38375: ST_TO_ADDR
// uc_nation := nation ;
38376: LD_ADDR_OWVAR 21
38380: PUSH
38381: LD_VAR 0 17
38385: ST_TO_ADDR
// if buildings then
38386: LD_VAR 0 18
38390: IFFALSE 39712
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38392: LD_ADDR_VAR 0 19
38396: PUSH
38397: LD_VAR 0 18
38401: PPUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 30
38407: PUSH
38408: LD_INT 29
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 30
38417: PUSH
38418: LD_INT 30
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: PPUSH
38430: CALL_OW 72
38434: ST_TO_ADDR
// if tmp then
38435: LD_VAR 0 19
38439: IFFALSE 38487
// for i in tmp do
38441: LD_ADDR_VAR 0 8
38445: PUSH
38446: LD_VAR 0 19
38450: PUSH
38451: FOR_IN
38452: IFFALSE 38485
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38454: LD_VAR 0 8
38458: PPUSH
38459: CALL_OW 250
38463: PPUSH
38464: LD_VAR 0 8
38468: PPUSH
38469: CALL_OW 251
38473: PPUSH
38474: LD_VAR 0 16
38478: PPUSH
38479: CALL_OW 441
38483: GO 38451
38485: POP
38486: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38487: LD_VAR 0 18
38491: PPUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 30
38497: PUSH
38498: LD_INT 32
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 30
38507: PUSH
38508: LD_INT 33
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL_OW 72
38524: IFFALSE 38612
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38526: LD_ADDR_VAR 0 8
38530: PUSH
38531: LD_VAR 0 18
38535: PPUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 32
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 30
38551: PUSH
38552: LD_INT 33
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PPUSH
38564: CALL_OW 72
38568: PUSH
38569: FOR_IN
38570: IFFALSE 38610
// begin if not GetBWeapon ( i ) then
38572: LD_VAR 0 8
38576: PPUSH
38577: CALL_OW 269
38581: NOT
38582: IFFALSE 38608
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38584: LD_VAR 0 8
38588: PPUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_VAR 0 2
38598: PPUSH
38599: CALL 39858 0 2
38603: PPUSH
38604: CALL_OW 431
// end ;
38608: GO 38569
38610: POP
38611: POP
// end ; for i = 1 to personel do
38612: LD_ADDR_VAR 0 8
38616: PUSH
38617: DOUBLE
38618: LD_INT 1
38620: DEC
38621: ST_TO_ADDR
38622: LD_VAR 0 6
38626: PUSH
38627: FOR_TO
38628: IFFALSE 39692
// begin if i > 4 then
38630: LD_VAR 0 8
38634: PUSH
38635: LD_INT 4
38637: GREATER
38638: IFFALSE 38642
// break ;
38640: GO 39692
// case i of 1 :
38642: LD_VAR 0 8
38646: PUSH
38647: LD_INT 1
38649: DOUBLE
38650: EQUAL
38651: IFTRUE 38655
38653: GO 38735
38655: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38656: LD_ADDR_VAR 0 12
38660: PUSH
38661: LD_VAR 0 18
38665: PPUSH
38666: LD_INT 22
38668: PUSH
38669: LD_VAR 0 16
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 58
38680: PUSH
38681: EMPTY
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 30
38689: PUSH
38690: LD_INT 32
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 30
38699: PUSH
38700: LD_INT 4
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 30
38709: PUSH
38710: LD_INT 5
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: PPUSH
38728: CALL_OW 72
38732: ST_TO_ADDR
38733: GO 38957
38735: LD_INT 2
38737: DOUBLE
38738: EQUAL
38739: IFTRUE 38743
38741: GO 38805
38743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38744: LD_ADDR_VAR 0 12
38748: PUSH
38749: LD_VAR 0 18
38753: PPUSH
38754: LD_INT 22
38756: PUSH
38757: LD_VAR 0 16
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 30
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 30
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PPUSH
38798: CALL_OW 72
38802: ST_TO_ADDR
38803: GO 38957
38805: LD_INT 3
38807: DOUBLE
38808: EQUAL
38809: IFTRUE 38813
38811: GO 38875
38813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38814: LD_ADDR_VAR 0 12
38818: PUSH
38819: LD_VAR 0 18
38823: PPUSH
38824: LD_INT 22
38826: PUSH
38827: LD_VAR 0 16
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: LD_INT 30
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PPUSH
38868: CALL_OW 72
38872: ST_TO_ADDR
38873: GO 38957
38875: LD_INT 4
38877: DOUBLE
38878: EQUAL
38879: IFTRUE 38883
38881: GO 38956
38883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38884: LD_ADDR_VAR 0 12
38888: PUSH
38889: LD_VAR 0 18
38893: PPUSH
38894: LD_INT 22
38896: PUSH
38897: LD_VAR 0 16
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 30
38911: PUSH
38912: LD_INT 6
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 30
38921: PUSH
38922: LD_INT 7
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 30
38931: PUSH
38932: LD_INT 8
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PPUSH
38949: CALL_OW 72
38953: ST_TO_ADDR
38954: GO 38957
38956: POP
// if i = 1 then
38957: LD_VAR 0 8
38961: PUSH
38962: LD_INT 1
38964: EQUAL
38965: IFFALSE 39076
// begin tmp := [ ] ;
38967: LD_ADDR_VAR 0 19
38971: PUSH
38972: EMPTY
38973: ST_TO_ADDR
// for j in f do
38974: LD_ADDR_VAR 0 9
38978: PUSH
38979: LD_VAR 0 12
38983: PUSH
38984: FOR_IN
38985: IFFALSE 39058
// if GetBType ( j ) = b_bunker then
38987: LD_VAR 0 9
38991: PPUSH
38992: CALL_OW 266
38996: PUSH
38997: LD_INT 32
38999: EQUAL
39000: IFFALSE 39027
// tmp := Insert ( tmp , 1 , j ) else
39002: LD_ADDR_VAR 0 19
39006: PUSH
39007: LD_VAR 0 19
39011: PPUSH
39012: LD_INT 1
39014: PPUSH
39015: LD_VAR 0 9
39019: PPUSH
39020: CALL_OW 2
39024: ST_TO_ADDR
39025: GO 39056
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39027: LD_ADDR_VAR 0 19
39031: PUSH
39032: LD_VAR 0 19
39036: PPUSH
39037: LD_VAR 0 19
39041: PUSH
39042: LD_INT 1
39044: PLUS
39045: PPUSH
39046: LD_VAR 0 9
39050: PPUSH
39051: CALL_OW 2
39055: ST_TO_ADDR
39056: GO 38984
39058: POP
39059: POP
// if tmp then
39060: LD_VAR 0 19
39064: IFFALSE 39076
// f := tmp ;
39066: LD_ADDR_VAR 0 12
39070: PUSH
39071: LD_VAR 0 19
39075: ST_TO_ADDR
// end ; x := personel [ i ] ;
39076: LD_ADDR_VAR 0 13
39080: PUSH
39081: LD_VAR 0 6
39085: PUSH
39086: LD_VAR 0 8
39090: ARRAY
39091: ST_TO_ADDR
// if x = - 1 then
39092: LD_VAR 0 13
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: EQUAL
39101: IFFALSE 39310
// begin for j in f do
39103: LD_ADDR_VAR 0 9
39107: PUSH
39108: LD_VAR 0 12
39112: PUSH
39113: FOR_IN
39114: IFFALSE 39306
// repeat InitHc ;
39116: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39120: LD_VAR 0 9
39124: PPUSH
39125: CALL_OW 266
39129: PUSH
39130: LD_INT 5
39132: EQUAL
39133: IFFALSE 39203
// begin if UnitsInside ( j ) < 3 then
39135: LD_VAR 0 9
39139: PPUSH
39140: CALL_OW 313
39144: PUSH
39145: LD_INT 3
39147: LESS
39148: IFFALSE 39184
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39150: LD_INT 0
39152: PPUSH
39153: LD_INT 5
39155: PUSH
39156: LD_INT 8
39158: PUSH
39159: LD_INT 9
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: LD_VAR 0 17
39171: ARRAY
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: CALL_OW 380
39182: GO 39201
// PrepareHuman ( false , i , skill ) ;
39184: LD_INT 0
39186: PPUSH
39187: LD_VAR 0 8
39191: PPUSH
39192: LD_VAR 0 4
39196: PPUSH
39197: CALL_OW 380
// end else
39201: GO 39220
// PrepareHuman ( false , i , skill ) ;
39203: LD_INT 0
39205: PPUSH
39206: LD_VAR 0 8
39210: PPUSH
39211: LD_VAR 0 4
39215: PPUSH
39216: CALL_OW 380
// un := CreateHuman ;
39220: LD_ADDR_VAR 0 14
39224: PUSH
39225: CALL_OW 44
39229: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39230: LD_ADDR_VAR 0 7
39234: PUSH
39235: LD_VAR 0 7
39239: PPUSH
39240: LD_INT 1
39242: PPUSH
39243: LD_VAR 0 14
39247: PPUSH
39248: CALL_OW 2
39252: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39253: LD_VAR 0 14
39257: PPUSH
39258: LD_VAR 0 9
39262: PPUSH
39263: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39267: LD_VAR 0 9
39271: PPUSH
39272: CALL_OW 313
39276: PUSH
39277: LD_INT 6
39279: EQUAL
39280: PUSH
39281: LD_VAR 0 9
39285: PPUSH
39286: CALL_OW 266
39290: PUSH
39291: LD_INT 32
39293: PUSH
39294: LD_INT 31
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: IN
39301: OR
39302: IFFALSE 39116
39304: GO 39113
39306: POP
39307: POP
// end else
39308: GO 39690
// for j = 1 to x do
39310: LD_ADDR_VAR 0 9
39314: PUSH
39315: DOUBLE
39316: LD_INT 1
39318: DEC
39319: ST_TO_ADDR
39320: LD_VAR 0 13
39324: PUSH
39325: FOR_TO
39326: IFFALSE 39688
// begin InitHc ;
39328: CALL_OW 19
// if not f then
39332: LD_VAR 0 12
39336: NOT
39337: IFFALSE 39426
// begin PrepareHuman ( false , i , skill ) ;
39339: LD_INT 0
39341: PPUSH
39342: LD_VAR 0 8
39346: PPUSH
39347: LD_VAR 0 4
39351: PPUSH
39352: CALL_OW 380
// un := CreateHuman ;
39356: LD_ADDR_VAR 0 14
39360: PUSH
39361: CALL_OW 44
39365: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39366: LD_ADDR_VAR 0 7
39370: PUSH
39371: LD_VAR 0 7
39375: PPUSH
39376: LD_INT 1
39378: PPUSH
39379: LD_VAR 0 14
39383: PPUSH
39384: CALL_OW 2
39388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39389: LD_VAR 0 14
39393: PPUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 250
39403: PPUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 251
39413: PPUSH
39414: LD_INT 10
39416: PPUSH
39417: LD_INT 0
39419: PPUSH
39420: CALL_OW 50
// continue ;
39424: GO 39325
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39426: LD_VAR 0 12
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PPUSH
39435: CALL_OW 313
39439: PUSH
39440: LD_VAR 0 12
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PPUSH
39449: CALL_OW 266
39453: PUSH
39454: LD_INT 32
39456: PUSH
39457: LD_INT 31
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: IN
39464: AND
39465: PUSH
39466: LD_VAR 0 12
39470: PUSH
39471: LD_INT 1
39473: ARRAY
39474: PPUSH
39475: CALL_OW 313
39479: PUSH
39480: LD_INT 6
39482: EQUAL
39483: OR
39484: IFFALSE 39504
// f := Delete ( f , 1 ) ;
39486: LD_ADDR_VAR 0 12
39490: PUSH
39491: LD_VAR 0 12
39495: PPUSH
39496: LD_INT 1
39498: PPUSH
39499: CALL_OW 3
39503: ST_TO_ADDR
// if not f then
39504: LD_VAR 0 12
39508: NOT
39509: IFFALSE 39527
// begin x := x + 2 ;
39511: LD_ADDR_VAR 0 13
39515: PUSH
39516: LD_VAR 0 13
39520: PUSH
39521: LD_INT 2
39523: PLUS
39524: ST_TO_ADDR
// continue ;
39525: GO 39325
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39527: LD_VAR 0 12
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: CALL_OW 266
39540: PUSH
39541: LD_INT 5
39543: EQUAL
39544: IFFALSE 39618
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39546: LD_VAR 0 12
39550: PUSH
39551: LD_INT 1
39553: ARRAY
39554: PPUSH
39555: CALL_OW 313
39559: PUSH
39560: LD_INT 3
39562: LESS
39563: IFFALSE 39599
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39565: LD_INT 0
39567: PPUSH
39568: LD_INT 5
39570: PUSH
39571: LD_INT 8
39573: PUSH
39574: LD_INT 9
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: PUSH
39582: LD_VAR 0 17
39586: ARRAY
39587: PPUSH
39588: LD_VAR 0 4
39592: PPUSH
39593: CALL_OW 380
39597: GO 39616
// PrepareHuman ( false , i , skill ) ;
39599: LD_INT 0
39601: PPUSH
39602: LD_VAR 0 8
39606: PPUSH
39607: LD_VAR 0 4
39611: PPUSH
39612: CALL_OW 380
// end else
39616: GO 39635
// PrepareHuman ( false , i , skill ) ;
39618: LD_INT 0
39620: PPUSH
39621: LD_VAR 0 8
39625: PPUSH
39626: LD_VAR 0 4
39630: PPUSH
39631: CALL_OW 380
// un := CreateHuman ;
39635: LD_ADDR_VAR 0 14
39639: PUSH
39640: CALL_OW 44
39644: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39645: LD_ADDR_VAR 0 7
39649: PUSH
39650: LD_VAR 0 7
39654: PPUSH
39655: LD_INT 1
39657: PPUSH
39658: LD_VAR 0 14
39662: PPUSH
39663: CALL_OW 2
39667: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39668: LD_VAR 0 14
39672: PPUSH
39673: LD_VAR 0 12
39677: PUSH
39678: LD_INT 1
39680: ARRAY
39681: PPUSH
39682: CALL_OW 52
// end ;
39686: GO 39325
39688: POP
39689: POP
// end ;
39690: GO 38627
39692: POP
39693: POP
// result := result ^ buildings ;
39694: LD_ADDR_VAR 0 7
39698: PUSH
39699: LD_VAR 0 7
39703: PUSH
39704: LD_VAR 0 18
39708: ADD
39709: ST_TO_ADDR
// end else
39710: GO 39853
// begin for i = 1 to personel do
39712: LD_ADDR_VAR 0 8
39716: PUSH
39717: DOUBLE
39718: LD_INT 1
39720: DEC
39721: ST_TO_ADDR
39722: LD_VAR 0 6
39726: PUSH
39727: FOR_TO
39728: IFFALSE 39851
// begin if i > 4 then
39730: LD_VAR 0 8
39734: PUSH
39735: LD_INT 4
39737: GREATER
39738: IFFALSE 39742
// break ;
39740: GO 39851
// x := personel [ i ] ;
39742: LD_ADDR_VAR 0 13
39746: PUSH
39747: LD_VAR 0 6
39751: PUSH
39752: LD_VAR 0 8
39756: ARRAY
39757: ST_TO_ADDR
// if x = - 1 then
39758: LD_VAR 0 13
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: EQUAL
39767: IFFALSE 39771
// continue ;
39769: GO 39727
// PrepareHuman ( false , i , skill ) ;
39771: LD_INT 0
39773: PPUSH
39774: LD_VAR 0 8
39778: PPUSH
39779: LD_VAR 0 4
39783: PPUSH
39784: CALL_OW 380
// un := CreateHuman ;
39788: LD_ADDR_VAR 0 14
39792: PUSH
39793: CALL_OW 44
39797: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39798: LD_VAR 0 14
39802: PPUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 250
39812: PPUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 251
39822: PPUSH
39823: LD_INT 10
39825: PPUSH
39826: LD_INT 0
39828: PPUSH
39829: CALL_OW 50
// result := result ^ un ;
39833: LD_ADDR_VAR 0 7
39837: PUSH
39838: LD_VAR 0 7
39842: PUSH
39843: LD_VAR 0 14
39847: ADD
39848: ST_TO_ADDR
// end ;
39849: GO 39727
39851: POP
39852: POP
// end ; end ;
39853: LD_VAR 0 7
39857: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39858: LD_INT 0
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
// result := false ;
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_INT 0
39883: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39884: LD_VAR 0 1
39888: NOT
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 266
39899: PUSH
39900: LD_INT 32
39902: PUSH
39903: LD_INT 33
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: IN
39910: NOT
39911: OR
39912: IFFALSE 39916
// exit ;
39914: GO 41025
// nat := GetNation ( tower ) ;
39916: LD_ADDR_VAR 0 12
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 248
39930: ST_TO_ADDR
// side := GetSide ( tower ) ;
39931: LD_ADDR_VAR 0 16
39935: PUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: CALL_OW 255
39945: ST_TO_ADDR
// x := GetX ( tower ) ;
39946: LD_ADDR_VAR 0 10
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 250
39960: ST_TO_ADDR
// y := GetY ( tower ) ;
39961: LD_ADDR_VAR 0 11
39965: PUSH
39966: LD_VAR 0 1
39970: PPUSH
39971: CALL_OW 251
39975: ST_TO_ADDR
// if not x or not y then
39976: LD_VAR 0 10
39980: NOT
39981: PUSH
39982: LD_VAR 0 11
39986: NOT
39987: OR
39988: IFFALSE 39992
// exit ;
39990: GO 41025
// weapon := 0 ;
39992: LD_ADDR_VAR 0 18
39996: PUSH
39997: LD_INT 0
39999: ST_TO_ADDR
// fac_list := [ ] ;
40000: LD_ADDR_VAR 0 17
40004: PUSH
40005: EMPTY
40006: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40007: LD_ADDR_VAR 0 6
40011: PUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: CALL_OW 274
40021: PPUSH
40022: LD_VAR 0 2
40026: PPUSH
40027: LD_INT 0
40029: PPUSH
40030: CALL 37596 0 3
40034: PPUSH
40035: LD_INT 30
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL_OW 72
40049: ST_TO_ADDR
// if not factories then
40050: LD_VAR 0 6
40054: NOT
40055: IFFALSE 40059
// exit ;
40057: GO 41025
// for i in factories do
40059: LD_ADDR_VAR 0 8
40063: PUSH
40064: LD_VAR 0 6
40068: PUSH
40069: FOR_IN
40070: IFFALSE 40095
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40072: LD_ADDR_VAR 0 17
40076: PUSH
40077: LD_VAR 0 17
40081: PUSH
40082: LD_VAR 0 8
40086: PPUSH
40087: CALL_OW 478
40091: UNION
40092: ST_TO_ADDR
40093: GO 40069
40095: POP
40096: POP
// if not fac_list then
40097: LD_VAR 0 17
40101: NOT
40102: IFFALSE 40106
// exit ;
40104: GO 41025
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40106: LD_ADDR_VAR 0 5
40110: PUSH
40111: LD_INT 4
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: LD_INT 9
40119: PUSH
40120: LD_INT 10
40122: PUSH
40123: LD_INT 6
40125: PUSH
40126: LD_INT 7
40128: PUSH
40129: LD_INT 11
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 27
40143: PUSH
40144: LD_INT 28
40146: PUSH
40147: LD_INT 26
40149: PUSH
40150: LD_INT 30
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 43
40161: PUSH
40162: LD_INT 44
40164: PUSH
40165: LD_INT 46
40167: PUSH
40168: LD_INT 45
40170: PUSH
40171: LD_INT 47
40173: PUSH
40174: LD_INT 49
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: PUSH
40190: LD_VAR 0 12
40194: ARRAY
40195: ST_TO_ADDR
// list := list isect fac_list ;
40196: LD_ADDR_VAR 0 5
40200: PUSH
40201: LD_VAR 0 5
40205: PUSH
40206: LD_VAR 0 17
40210: ISECT
40211: ST_TO_ADDR
// if not list then
40212: LD_VAR 0 5
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 41025
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40221: LD_VAR 0 12
40225: PUSH
40226: LD_INT 3
40228: EQUAL
40229: PUSH
40230: LD_INT 49
40232: PUSH
40233: LD_VAR 0 5
40237: IN
40238: AND
40239: PUSH
40240: LD_INT 31
40242: PPUSH
40243: LD_VAR 0 16
40247: PPUSH
40248: CALL_OW 321
40252: PUSH
40253: LD_INT 2
40255: EQUAL
40256: AND
40257: IFFALSE 40317
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40259: LD_INT 22
40261: PUSH
40262: LD_VAR 0 16
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 35
40273: PUSH
40274: LD_INT 49
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 91
40283: PUSH
40284: LD_VAR 0 1
40288: PUSH
40289: LD_INT 10
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: PPUSH
40302: CALL_OW 69
40306: NOT
40307: IFFALSE 40317
// weapon := ru_time_lapser ;
40309: LD_ADDR_VAR 0 18
40313: PUSH
40314: LD_INT 49
40316: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40317: LD_VAR 0 12
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: IN
40332: PUSH
40333: LD_INT 11
40335: PUSH
40336: LD_VAR 0 5
40340: IN
40341: PUSH
40342: LD_INT 30
40344: PUSH
40345: LD_VAR 0 5
40349: IN
40350: OR
40351: AND
40352: PUSH
40353: LD_INT 6
40355: PPUSH
40356: LD_VAR 0 16
40360: PPUSH
40361: CALL_OW 321
40365: PUSH
40366: LD_INT 2
40368: EQUAL
40369: AND
40370: IFFALSE 40535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40372: LD_INT 22
40374: PUSH
40375: LD_VAR 0 16
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 35
40389: PUSH
40390: LD_INT 11
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 35
40399: PUSH
40400: LD_INT 30
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 91
40414: PUSH
40415: LD_VAR 0 1
40419: PUSH
40420: LD_INT 18
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: PPUSH
40433: CALL_OW 69
40437: NOT
40438: PUSH
40439: LD_INT 22
40441: PUSH
40442: LD_VAR 0 16
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 30
40456: PUSH
40457: LD_INT 32
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 30
40466: PUSH
40467: LD_INT 33
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 91
40481: PUSH
40482: LD_VAR 0 1
40486: PUSH
40487: LD_INT 12
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: PPUSH
40503: CALL_OW 69
40507: PUSH
40508: LD_INT 2
40510: GREATER
40511: AND
40512: IFFALSE 40535
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40514: LD_ADDR_VAR 0 18
40518: PUSH
40519: LD_INT 11
40521: PUSH
40522: LD_INT 30
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_VAR 0 12
40533: ARRAY
40534: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40535: LD_VAR 0 18
40539: NOT
40540: PUSH
40541: LD_INT 40
40543: PPUSH
40544: LD_VAR 0 16
40548: PPUSH
40549: CALL_OW 321
40553: PUSH
40554: LD_INT 2
40556: EQUAL
40557: AND
40558: PUSH
40559: LD_INT 7
40561: PUSH
40562: LD_VAR 0 5
40566: IN
40567: PUSH
40568: LD_INT 28
40570: PUSH
40571: LD_VAR 0 5
40575: IN
40576: OR
40577: PUSH
40578: LD_INT 45
40580: PUSH
40581: LD_VAR 0 5
40585: IN
40586: OR
40587: AND
40588: IFFALSE 40842
// begin hex := GetHexInfo ( x , y ) ;
40590: LD_ADDR_VAR 0 4
40594: PUSH
40595: LD_VAR 0 10
40599: PPUSH
40600: LD_VAR 0 11
40604: PPUSH
40605: CALL_OW 546
40609: ST_TO_ADDR
// if hex [ 1 ] then
40610: LD_VAR 0 4
40614: PUSH
40615: LD_INT 1
40617: ARRAY
40618: IFFALSE 40622
// exit ;
40620: GO 41025
// height := hex [ 2 ] ;
40622: LD_ADDR_VAR 0 15
40626: PUSH
40627: LD_VAR 0 4
40631: PUSH
40632: LD_INT 2
40634: ARRAY
40635: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40636: LD_ADDR_VAR 0 14
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: LD_INT 5
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// for i in tmp do
40659: LD_ADDR_VAR 0 8
40663: PUSH
40664: LD_VAR 0 14
40668: PUSH
40669: FOR_IN
40670: IFFALSE 40840
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40672: LD_ADDR_VAR 0 9
40676: PUSH
40677: LD_VAR 0 10
40681: PPUSH
40682: LD_VAR 0 8
40686: PPUSH
40687: LD_INT 5
40689: PPUSH
40690: CALL_OW 272
40694: PUSH
40695: LD_VAR 0 11
40699: PPUSH
40700: LD_VAR 0 8
40704: PPUSH
40705: LD_INT 5
40707: PPUSH
40708: CALL_OW 273
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40717: LD_VAR 0 9
40721: PUSH
40722: LD_INT 1
40724: ARRAY
40725: PPUSH
40726: LD_VAR 0 9
40730: PUSH
40731: LD_INT 2
40733: ARRAY
40734: PPUSH
40735: CALL_OW 488
40739: IFFALSE 40838
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_VAR 0 9
40750: PUSH
40751: LD_INT 1
40753: ARRAY
40754: PPUSH
40755: LD_VAR 0 9
40759: PUSH
40760: LD_INT 2
40762: ARRAY
40763: PPUSH
40764: CALL_OW 546
40768: ST_TO_ADDR
// if hex [ 1 ] then
40769: LD_VAR 0 4
40773: PUSH
40774: LD_INT 1
40776: ARRAY
40777: IFFALSE 40781
// continue ;
40779: GO 40669
// h := hex [ 2 ] ;
40781: LD_ADDR_VAR 0 13
40785: PUSH
40786: LD_VAR 0 4
40790: PUSH
40791: LD_INT 2
40793: ARRAY
40794: ST_TO_ADDR
// if h + 7 < height then
40795: LD_VAR 0 13
40799: PUSH
40800: LD_INT 7
40802: PLUS
40803: PUSH
40804: LD_VAR 0 15
40808: LESS
40809: IFFALSE 40838
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40811: LD_ADDR_VAR 0 18
40815: PUSH
40816: LD_INT 7
40818: PUSH
40819: LD_INT 28
40821: PUSH
40822: LD_INT 45
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: PUSH
40830: LD_VAR 0 12
40834: ARRAY
40835: ST_TO_ADDR
// break ;
40836: GO 40840
// end ; end ; end ;
40838: GO 40669
40840: POP
40841: POP
// end ; if not weapon then
40842: LD_VAR 0 18
40846: NOT
40847: IFFALSE 40907
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40849: LD_ADDR_VAR 0 5
40853: PUSH
40854: LD_VAR 0 5
40858: PUSH
40859: LD_INT 11
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 49
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: DIFF
40873: ST_TO_ADDR
// if not list then
40874: LD_VAR 0 5
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 41025
// weapon := list [ rand ( 1 , list ) ] ;
40883: LD_ADDR_VAR 0 18
40887: PUSH
40888: LD_VAR 0 5
40892: PUSH
40893: LD_INT 1
40895: PPUSH
40896: LD_VAR 0 5
40900: PPUSH
40901: CALL_OW 12
40905: ARRAY
40906: ST_TO_ADDR
// end ; if weapon then
40907: LD_VAR 0 18
40911: IFFALSE 41025
// begin tmp := CostOfWeapon ( weapon ) ;
40913: LD_ADDR_VAR 0 14
40917: PUSH
40918: LD_VAR 0 18
40922: PPUSH
40923: CALL_OW 451
40927: ST_TO_ADDR
// j := GetBase ( tower ) ;
40928: LD_ADDR_VAR 0 9
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 274
40942: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40943: LD_VAR 0 9
40947: PPUSH
40948: LD_INT 1
40950: PPUSH
40951: CALL_OW 275
40955: PUSH
40956: LD_VAR 0 14
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: GREATEREQUAL
40965: PUSH
40966: LD_VAR 0 9
40970: PPUSH
40971: LD_INT 2
40973: PPUSH
40974: CALL_OW 275
40978: PUSH
40979: LD_VAR 0 14
40983: PUSH
40984: LD_INT 2
40986: ARRAY
40987: GREATEREQUAL
40988: AND
40989: PUSH
40990: LD_VAR 0 9
40994: PPUSH
40995: LD_INT 3
40997: PPUSH
40998: CALL_OW 275
41002: PUSH
41003: LD_VAR 0 14
41007: PUSH
41008: LD_INT 3
41010: ARRAY
41011: GREATEREQUAL
41012: AND
41013: IFFALSE 41025
// result := weapon ;
41015: LD_ADDR_VAR 0 3
41019: PUSH
41020: LD_VAR 0 18
41024: ST_TO_ADDR
// end ; end ;
41025: LD_VAR 0 3
41029: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41030: LD_INT 0
41032: PPUSH
41033: PPUSH
// result := true ;
41034: LD_ADDR_VAR 0 3
41038: PUSH
41039: LD_INT 1
41041: ST_TO_ADDR
// if array1 = array2 then
41042: LD_VAR 0 1
41046: PUSH
41047: LD_VAR 0 2
41051: EQUAL
41052: IFFALSE 41112
// begin for i = 1 to array1 do
41054: LD_ADDR_VAR 0 4
41058: PUSH
41059: DOUBLE
41060: LD_INT 1
41062: DEC
41063: ST_TO_ADDR
41064: LD_VAR 0 1
41068: PUSH
41069: FOR_TO
41070: IFFALSE 41108
// if array1 [ i ] <> array2 [ i ] then
41072: LD_VAR 0 1
41076: PUSH
41077: LD_VAR 0 4
41081: ARRAY
41082: PUSH
41083: LD_VAR 0 2
41087: PUSH
41088: LD_VAR 0 4
41092: ARRAY
41093: NONEQUAL
41094: IFFALSE 41106
// begin result := false ;
41096: LD_ADDR_VAR 0 3
41100: PUSH
41101: LD_INT 0
41103: ST_TO_ADDR
// break ;
41104: GO 41108
// end ;
41106: GO 41069
41108: POP
41109: POP
// end else
41110: GO 41120
// result := false ;
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 0
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 3
41124: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
// if not array1 or not array2 then
41129: LD_VAR 0 1
41133: NOT
41134: PUSH
41135: LD_VAR 0 2
41139: NOT
41140: OR
41141: IFFALSE 41145
// exit ;
41143: GO 41209
// result := true ;
41145: LD_ADDR_VAR 0 3
41149: PUSH
41150: LD_INT 1
41152: ST_TO_ADDR
// for i = 1 to array1 do
41153: LD_ADDR_VAR 0 4
41157: PUSH
41158: DOUBLE
41159: LD_INT 1
41161: DEC
41162: ST_TO_ADDR
41163: LD_VAR 0 1
41167: PUSH
41168: FOR_TO
41169: IFFALSE 41207
// if array1 [ i ] <> array2 [ i ] then
41171: LD_VAR 0 1
41175: PUSH
41176: LD_VAR 0 4
41180: ARRAY
41181: PUSH
41182: LD_VAR 0 2
41186: PUSH
41187: LD_VAR 0 4
41191: ARRAY
41192: NONEQUAL
41193: IFFALSE 41205
// begin result := false ;
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 0
41202: ST_TO_ADDR
// break ;
41203: GO 41207
// end ;
41205: GO 41168
41207: POP
41208: POP
// end ;
41209: LD_VAR 0 3
41213: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
41218: PPUSH
// pom := GetBase ( fac ) ;
41219: LD_ADDR_VAR 0 5
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 274
41233: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_VAR 0 2
41243: PUSH
41244: LD_INT 1
41246: ARRAY
41247: PPUSH
41248: LD_VAR 0 2
41252: PUSH
41253: LD_INT 2
41255: ARRAY
41256: PPUSH
41257: LD_VAR 0 2
41261: PUSH
41262: LD_INT 3
41264: ARRAY
41265: PPUSH
41266: LD_VAR 0 2
41270: PUSH
41271: LD_INT 4
41273: ARRAY
41274: PPUSH
41275: CALL_OW 449
41279: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_VAR 0 5
41289: PPUSH
41290: LD_INT 1
41292: PPUSH
41293: CALL_OW 275
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: GREATEREQUAL
41307: PUSH
41308: LD_VAR 0 5
41312: PPUSH
41313: LD_INT 2
41315: PPUSH
41316: CALL_OW 275
41320: PUSH
41321: LD_VAR 0 4
41325: PUSH
41326: LD_INT 2
41328: ARRAY
41329: GREATEREQUAL
41330: AND
41331: PUSH
41332: LD_VAR 0 5
41336: PPUSH
41337: LD_INT 3
41339: PPUSH
41340: CALL_OW 275
41344: PUSH
41345: LD_VAR 0 4
41349: PUSH
41350: LD_INT 3
41352: ARRAY
41353: GREATEREQUAL
41354: AND
41355: ST_TO_ADDR
// end ;
41356: LD_VAR 0 3
41360: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41361: LD_INT 0
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
// pom := GetBase ( building ) ;
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 274
41381: ST_TO_ADDR
// if not pom then
41382: LD_VAR 0 3
41386: NOT
41387: IFFALSE 41391
// exit ;
41389: GO 41561
// btype := GetBType ( building ) ;
41391: LD_ADDR_VAR 0 5
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 266
41405: ST_TO_ADDR
// if btype = b_armoury then
41406: LD_VAR 0 5
41410: PUSH
41411: LD_INT 4
41413: EQUAL
41414: IFFALSE 41424
// btype := b_barracks ;
41416: LD_ADDR_VAR 0 5
41420: PUSH
41421: LD_INT 5
41423: ST_TO_ADDR
// if btype = b_depot then
41424: LD_VAR 0 5
41428: PUSH
41429: LD_INT 0
41431: EQUAL
41432: IFFALSE 41442
// btype := b_warehouse ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_INT 1
41441: ST_TO_ADDR
// if btype = b_workshop then
41442: LD_VAR 0 5
41446: PUSH
41447: LD_INT 2
41449: EQUAL
41450: IFFALSE 41460
// btype := b_factory ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_INT 3
41459: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: LD_VAR 0 5
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 248
41479: PPUSH
41480: CALL_OW 450
41484: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41485: LD_ADDR_VAR 0 2
41489: PUSH
41490: LD_VAR 0 3
41494: PPUSH
41495: LD_INT 1
41497: PPUSH
41498: CALL_OW 275
41502: PUSH
41503: LD_VAR 0 4
41507: PUSH
41508: LD_INT 1
41510: ARRAY
41511: GREATEREQUAL
41512: PUSH
41513: LD_VAR 0 3
41517: PPUSH
41518: LD_INT 2
41520: PPUSH
41521: CALL_OW 275
41525: PUSH
41526: LD_VAR 0 4
41530: PUSH
41531: LD_INT 2
41533: ARRAY
41534: GREATEREQUAL
41535: AND
41536: PUSH
41537: LD_VAR 0 3
41541: PPUSH
41542: LD_INT 3
41544: PPUSH
41545: CALL_OW 275
41549: PUSH
41550: LD_VAR 0 4
41554: PUSH
41555: LD_INT 3
41557: ARRAY
41558: GREATEREQUAL
41559: AND
41560: ST_TO_ADDR
// end ;
41561: LD_VAR 0 2
41565: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41566: LD_INT 0
41568: PPUSH
41569: PPUSH
41570: PPUSH
// pom := GetBase ( building ) ;
41571: LD_ADDR_VAR 0 4
41575: PUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 274
41585: ST_TO_ADDR
// if not pom then
41586: LD_VAR 0 4
41590: NOT
41591: IFFALSE 41595
// exit ;
41593: GO 41696
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: LD_VAR 0 1
41609: PPUSH
41610: CALL_OW 248
41614: PPUSH
41615: CALL_OW 450
41619: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_VAR 0 4
41629: PPUSH
41630: LD_INT 1
41632: PPUSH
41633: CALL_OW 275
41637: PUSH
41638: LD_VAR 0 5
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: GREATEREQUAL
41647: PUSH
41648: LD_VAR 0 4
41652: PPUSH
41653: LD_INT 2
41655: PPUSH
41656: CALL_OW 275
41660: PUSH
41661: LD_VAR 0 5
41665: PUSH
41666: LD_INT 2
41668: ARRAY
41669: GREATEREQUAL
41670: AND
41671: PUSH
41672: LD_VAR 0 4
41676: PPUSH
41677: LD_INT 3
41679: PPUSH
41680: CALL_OW 275
41684: PUSH
41685: LD_VAR 0 5
41689: PUSH
41690: LD_INT 3
41692: ARRAY
41693: GREATEREQUAL
41694: AND
41695: ST_TO_ADDR
// end ;
41696: LD_VAR 0 3
41700: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41701: LD_INT 0
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
// result := false ;
41714: LD_ADDR_VAR 0 8
41718: PUSH
41719: LD_INT 0
41721: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41722: LD_VAR 0 5
41726: NOT
41727: PUSH
41728: LD_VAR 0 1
41732: NOT
41733: OR
41734: PUSH
41735: LD_VAR 0 2
41739: NOT
41740: OR
41741: PUSH
41742: LD_VAR 0 3
41746: NOT
41747: OR
41748: IFFALSE 41752
// exit ;
41750: GO 42566
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41752: LD_ADDR_VAR 0 14
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_VAR 0 2
41766: PPUSH
41767: LD_VAR 0 3
41771: PPUSH
41772: LD_VAR 0 4
41776: PPUSH
41777: LD_VAR 0 5
41781: PUSH
41782: LD_INT 1
41784: ARRAY
41785: PPUSH
41786: CALL_OW 248
41790: PPUSH
41791: LD_INT 0
41793: PPUSH
41794: CALL 43803 0 6
41798: ST_TO_ADDR
// if not hexes then
41799: LD_VAR 0 14
41803: NOT
41804: IFFALSE 41808
// exit ;
41806: GO 42566
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41808: LD_ADDR_VAR 0 17
41812: PUSH
41813: LD_VAR 0 5
41817: PPUSH
41818: LD_INT 22
41820: PUSH
41821: LD_VAR 0 13
41825: PPUSH
41826: CALL_OW 255
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 30
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 30
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PPUSH
41867: CALL_OW 72
41871: ST_TO_ADDR
// for i = 1 to hexes do
41872: LD_ADDR_VAR 0 9
41876: PUSH
41877: DOUBLE
41878: LD_INT 1
41880: DEC
41881: ST_TO_ADDR
41882: LD_VAR 0 14
41886: PUSH
41887: FOR_TO
41888: IFFALSE 42564
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41890: LD_ADDR_VAR 0 13
41894: PUSH
41895: LD_VAR 0 14
41899: PUSH
41900: LD_VAR 0 9
41904: ARRAY
41905: PUSH
41906: LD_INT 1
41908: ARRAY
41909: PPUSH
41910: LD_VAR 0 14
41914: PUSH
41915: LD_VAR 0 9
41919: ARRAY
41920: PUSH
41921: LD_INT 2
41923: ARRAY
41924: PPUSH
41925: CALL_OW 428
41929: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41930: LD_VAR 0 14
41934: PUSH
41935: LD_VAR 0 9
41939: ARRAY
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PPUSH
41945: LD_VAR 0 14
41949: PUSH
41950: LD_VAR 0 9
41954: ARRAY
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: PPUSH
41960: CALL_OW 351
41964: PUSH
41965: LD_VAR 0 14
41969: PUSH
41970: LD_VAR 0 9
41974: ARRAY
41975: PUSH
41976: LD_INT 1
41978: ARRAY
41979: PPUSH
41980: LD_VAR 0 14
41984: PUSH
41985: LD_VAR 0 9
41989: ARRAY
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: PPUSH
41995: CALL_OW 488
41999: NOT
42000: OR
42001: PUSH
42002: LD_VAR 0 13
42006: PPUSH
42007: CALL_OW 247
42011: PUSH
42012: LD_INT 3
42014: EQUAL
42015: OR
42016: IFFALSE 42022
// exit ;
42018: POP
42019: POP
42020: GO 42566
// if not tmp then
42022: LD_VAR 0 13
42026: NOT
42027: IFFALSE 42031
// continue ;
42029: GO 41887
// result := true ;
42031: LD_ADDR_VAR 0 8
42035: PUSH
42036: LD_INT 1
42038: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42039: LD_VAR 0 6
42043: PUSH
42044: LD_VAR 0 13
42048: PPUSH
42049: CALL_OW 247
42053: PUSH
42054: LD_INT 2
42056: EQUAL
42057: AND
42058: PUSH
42059: LD_VAR 0 13
42063: PPUSH
42064: CALL_OW 263
42068: PUSH
42069: LD_INT 1
42071: EQUAL
42072: AND
42073: IFFALSE 42237
// begin if IsDrivenBy ( tmp ) then
42075: LD_VAR 0 13
42079: PPUSH
42080: CALL_OW 311
42084: IFFALSE 42088
// continue ;
42086: GO 41887
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42088: LD_VAR 0 6
42092: PPUSH
42093: LD_INT 3
42095: PUSH
42096: LD_INT 60
42098: PUSH
42099: EMPTY
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: LD_INT 55
42111: PUSH
42112: EMPTY
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PPUSH
42123: CALL_OW 72
42127: IFFALSE 42235
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42129: LD_ADDR_VAR 0 18
42133: PUSH
42134: LD_VAR 0 6
42138: PPUSH
42139: LD_INT 3
42141: PUSH
42142: LD_INT 60
42144: PUSH
42145: EMPTY
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: LD_INT 55
42157: PUSH
42158: EMPTY
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PPUSH
42169: CALL_OW 72
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: ST_TO_ADDR
// if IsInUnit ( driver ) then
42178: LD_VAR 0 18
42182: PPUSH
42183: CALL_OW 310
42187: IFFALSE 42198
// ComExit ( driver ) ;
42189: LD_VAR 0 18
42193: PPUSH
42194: CALL 66931 0 1
// AddComEnterUnit ( driver , tmp ) ;
42198: LD_VAR 0 18
42202: PPUSH
42203: LD_VAR 0 13
42207: PPUSH
42208: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42212: LD_VAR 0 18
42216: PPUSH
42217: LD_VAR 0 7
42221: PPUSH
42222: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42226: LD_VAR 0 18
42230: PPUSH
42231: CALL_OW 181
// end ; continue ;
42235: GO 41887
// end ; if not cleaners or not tmp in cleaners then
42237: LD_VAR 0 6
42241: NOT
42242: PUSH
42243: LD_VAR 0 13
42247: PUSH
42248: LD_VAR 0 6
42252: IN
42253: NOT
42254: OR
42255: IFFALSE 42562
// begin if dep then
42257: LD_VAR 0 17
42261: IFFALSE 42397
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42263: LD_ADDR_VAR 0 16
42267: PUSH
42268: LD_VAR 0 17
42272: PUSH
42273: LD_INT 1
42275: ARRAY
42276: PPUSH
42277: CALL_OW 250
42281: PPUSH
42282: LD_VAR 0 17
42286: PUSH
42287: LD_INT 1
42289: ARRAY
42290: PPUSH
42291: CALL_OW 254
42295: PPUSH
42296: LD_INT 5
42298: PPUSH
42299: CALL_OW 272
42303: PUSH
42304: LD_VAR 0 17
42308: PUSH
42309: LD_INT 1
42311: ARRAY
42312: PPUSH
42313: CALL_OW 251
42317: PPUSH
42318: LD_VAR 0 17
42322: PUSH
42323: LD_INT 1
42325: ARRAY
42326: PPUSH
42327: CALL_OW 254
42331: PPUSH
42332: LD_INT 5
42334: PPUSH
42335: CALL_OW 273
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42344: LD_VAR 0 16
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: PPUSH
42353: LD_VAR 0 16
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 488
42366: IFFALSE 42397
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42368: LD_VAR 0 13
42372: PPUSH
42373: LD_VAR 0 16
42377: PUSH
42378: LD_INT 1
42380: ARRAY
42381: PPUSH
42382: LD_VAR 0 16
42386: PUSH
42387: LD_INT 2
42389: ARRAY
42390: PPUSH
42391: CALL_OW 111
// continue ;
42395: GO 41887
// end ; end ; r := GetDir ( tmp ) ;
42397: LD_ADDR_VAR 0 15
42401: PUSH
42402: LD_VAR 0 13
42406: PPUSH
42407: CALL_OW 254
42411: ST_TO_ADDR
// if r = 5 then
42412: LD_VAR 0 15
42416: PUSH
42417: LD_INT 5
42419: EQUAL
42420: IFFALSE 42430
// r := 0 ;
42422: LD_ADDR_VAR 0 15
42426: PUSH
42427: LD_INT 0
42429: ST_TO_ADDR
// for j = r to 5 do
42430: LD_ADDR_VAR 0 10
42434: PUSH
42435: DOUBLE
42436: LD_VAR 0 15
42440: DEC
42441: ST_TO_ADDR
42442: LD_INT 5
42444: PUSH
42445: FOR_TO
42446: IFFALSE 42560
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42448: LD_ADDR_VAR 0 11
42452: PUSH
42453: LD_VAR 0 13
42457: PPUSH
42458: CALL_OW 250
42462: PPUSH
42463: LD_VAR 0 10
42467: PPUSH
42468: LD_INT 2
42470: PPUSH
42471: CALL_OW 272
42475: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42476: LD_ADDR_VAR 0 12
42480: PUSH
42481: LD_VAR 0 13
42485: PPUSH
42486: CALL_OW 251
42490: PPUSH
42491: LD_VAR 0 10
42495: PPUSH
42496: LD_INT 2
42498: PPUSH
42499: CALL_OW 273
42503: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42504: LD_VAR 0 11
42508: PPUSH
42509: LD_VAR 0 12
42513: PPUSH
42514: CALL_OW 488
42518: PUSH
42519: LD_VAR 0 11
42523: PPUSH
42524: LD_VAR 0 12
42528: PPUSH
42529: CALL_OW 428
42533: NOT
42534: AND
42535: IFFALSE 42558
// begin ComMoveXY ( tmp , _x , _y ) ;
42537: LD_VAR 0 13
42541: PPUSH
42542: LD_VAR 0 11
42546: PPUSH
42547: LD_VAR 0 12
42551: PPUSH
42552: CALL_OW 111
// break ;
42556: GO 42560
// end ; end ;
42558: GO 42445
42560: POP
42561: POP
// end ; end ;
42562: GO 41887
42564: POP
42565: POP
// end ;
42566: LD_VAR 0 8
42570: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42571: LD_INT 0
42573: PPUSH
// result := true ;
42574: LD_ADDR_VAR 0 3
42578: PUSH
42579: LD_INT 1
42581: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42582: LD_VAR 0 2
42586: PUSH
42587: LD_INT 24
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42601
42593: LD_INT 33
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42601
42599: GO 42626
42601: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_INT 32
42609: PPUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 321
42619: PUSH
42620: LD_INT 2
42622: EQUAL
42623: ST_TO_ADDR
42624: GO 42946
42626: LD_INT 20
42628: DOUBLE
42629: EQUAL
42630: IFTRUE 42634
42632: GO 42659
42634: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42635: LD_ADDR_VAR 0 3
42639: PUSH
42640: LD_INT 6
42642: PPUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 321
42652: PUSH
42653: LD_INT 2
42655: EQUAL
42656: ST_TO_ADDR
42657: GO 42946
42659: LD_INT 22
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42673
42665: LD_INT 36
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42698
42673: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 15
42681: PPUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: CALL_OW 321
42691: PUSH
42692: LD_INT 2
42694: EQUAL
42695: ST_TO_ADDR
42696: GO 42946
42698: LD_INT 30
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42731
42706: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_INT 20
42714: PPUSH
42715: LD_VAR 0 1
42719: PPUSH
42720: CALL_OW 321
42724: PUSH
42725: LD_INT 2
42727: EQUAL
42728: ST_TO_ADDR
42729: GO 42946
42731: LD_INT 28
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42745
42737: LD_INT 21
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42745
42743: GO 42770
42745: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_INT 21
42753: PPUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 321
42763: PUSH
42764: LD_INT 2
42766: EQUAL
42767: ST_TO_ADDR
42768: GO 42946
42770: LD_INT 16
42772: DOUBLE
42773: EQUAL
42774: IFTRUE 42778
42776: GO 42805
42778: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_EXP 31
42788: PPUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 321
42798: PUSH
42799: LD_INT 2
42801: EQUAL
42802: ST_TO_ADDR
42803: GO 42946
42805: LD_INT 19
42807: DOUBLE
42808: EQUAL
42809: IFTRUE 42819
42811: LD_INT 23
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42846
42819: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_EXP 30
42829: PPUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 321
42839: PUSH
42840: LD_INT 2
42842: EQUAL
42843: ST_TO_ADDR
42844: GO 42946
42846: LD_INT 17
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42879
42854: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 39
42862: PPUSH
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 321
42872: PUSH
42873: LD_INT 2
42875: EQUAL
42876: ST_TO_ADDR
42877: GO 42946
42879: LD_INT 18
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42912
42887: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 40
42895: PPUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL_OW 321
42905: PUSH
42906: LD_INT 2
42908: EQUAL
42909: ST_TO_ADDR
42910: GO 42946
42912: LD_INT 27
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42920
42918: GO 42945
42920: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_INT 35
42928: PPUSH
42929: LD_VAR 0 1
42933: PPUSH
42934: CALL_OW 321
42938: PUSH
42939: LD_INT 2
42941: EQUAL
42942: ST_TO_ADDR
42943: GO 42946
42945: POP
// end ;
42946: LD_VAR 0 3
42950: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42951: LD_INT 0
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
// result := false ;
42964: LD_ADDR_VAR 0 6
42968: PUSH
42969: LD_INT 0
42971: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42972: LD_VAR 0 1
42976: NOT
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 266
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: IN
42998: NOT
42999: OR
43000: PUSH
43001: LD_VAR 0 2
43005: NOT
43006: OR
43007: PUSH
43008: LD_VAR 0 5
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 4
43027: PUSH
43028: LD_INT 5
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: IN
43039: NOT
43040: OR
43041: PUSH
43042: LD_VAR 0 3
43046: PPUSH
43047: LD_VAR 0 4
43051: PPUSH
43052: CALL_OW 488
43056: NOT
43057: OR
43058: IFFALSE 43062
// exit ;
43060: GO 43798
// side := GetSide ( depot ) ;
43062: LD_ADDR_VAR 0 9
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 255
43076: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43077: LD_VAR 0 9
43081: PPUSH
43082: LD_VAR 0 2
43086: PPUSH
43087: CALL 42571 0 2
43091: NOT
43092: IFFALSE 43096
// exit ;
43094: GO 43798
// pom := GetBase ( depot ) ;
43096: LD_ADDR_VAR 0 10
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 274
43110: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43111: LD_ADDR_VAR 0 11
43115: PUSH
43116: LD_VAR 0 2
43120: PPUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 248
43130: PPUSH
43131: CALL_OW 450
43135: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43136: LD_VAR 0 10
43140: PPUSH
43141: LD_INT 1
43143: PPUSH
43144: CALL_OW 275
43148: PUSH
43149: LD_VAR 0 11
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: GREATEREQUAL
43158: PUSH
43159: LD_VAR 0 10
43163: PPUSH
43164: LD_INT 2
43166: PPUSH
43167: CALL_OW 275
43171: PUSH
43172: LD_VAR 0 11
43176: PUSH
43177: LD_INT 2
43179: ARRAY
43180: GREATEREQUAL
43181: AND
43182: PUSH
43183: LD_VAR 0 10
43187: PPUSH
43188: LD_INT 3
43190: PPUSH
43191: CALL_OW 275
43195: PUSH
43196: LD_VAR 0 11
43200: PUSH
43201: LD_INT 3
43203: ARRAY
43204: GREATEREQUAL
43205: AND
43206: NOT
43207: IFFALSE 43211
// exit ;
43209: GO 43798
// if GetBType ( depot ) = b_depot then
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 266
43220: PUSH
43221: LD_INT 0
43223: EQUAL
43224: IFFALSE 43236
// dist := 28 else
43226: LD_ADDR_VAR 0 14
43230: PUSH
43231: LD_INT 28
43233: ST_TO_ADDR
43234: GO 43244
// dist := 36 ;
43236: LD_ADDR_VAR 0 14
43240: PUSH
43241: LD_INT 36
43243: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43244: LD_VAR 0 1
43248: PPUSH
43249: LD_VAR 0 3
43253: PPUSH
43254: LD_VAR 0 4
43258: PPUSH
43259: CALL_OW 297
43263: PUSH
43264: LD_VAR 0 14
43268: GREATER
43269: IFFALSE 43273
// exit ;
43271: GO 43798
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43273: LD_ADDR_VAR 0 12
43277: PUSH
43278: LD_VAR 0 2
43282: PPUSH
43283: LD_VAR 0 3
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: LD_VAR 0 5
43297: PPUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: CALL_OW 248
43307: PPUSH
43308: LD_INT 0
43310: PPUSH
43311: CALL 43803 0 6
43315: ST_TO_ADDR
// if not hexes then
43316: LD_VAR 0 12
43320: NOT
43321: IFFALSE 43325
// exit ;
43323: GO 43798
// hex := GetHexInfo ( x , y ) ;
43325: LD_ADDR_VAR 0 15
43329: PUSH
43330: LD_VAR 0 3
43334: PPUSH
43335: LD_VAR 0 4
43339: PPUSH
43340: CALL_OW 546
43344: ST_TO_ADDR
// if hex [ 1 ] then
43345: LD_VAR 0 15
43349: PUSH
43350: LD_INT 1
43352: ARRAY
43353: IFFALSE 43357
// exit ;
43355: GO 43798
// height := hex [ 2 ] ;
43357: LD_ADDR_VAR 0 13
43361: PUSH
43362: LD_VAR 0 15
43366: PUSH
43367: LD_INT 2
43369: ARRAY
43370: ST_TO_ADDR
// for i = 1 to hexes do
43371: LD_ADDR_VAR 0 7
43375: PUSH
43376: DOUBLE
43377: LD_INT 1
43379: DEC
43380: ST_TO_ADDR
43381: LD_VAR 0 12
43385: PUSH
43386: FOR_TO
43387: IFFALSE 43717
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43389: LD_VAR 0 12
43393: PUSH
43394: LD_VAR 0 7
43398: ARRAY
43399: PUSH
43400: LD_INT 1
43402: ARRAY
43403: PPUSH
43404: LD_VAR 0 12
43408: PUSH
43409: LD_VAR 0 7
43413: ARRAY
43414: PUSH
43415: LD_INT 2
43417: ARRAY
43418: PPUSH
43419: CALL_OW 488
43423: NOT
43424: PUSH
43425: LD_VAR 0 12
43429: PUSH
43430: LD_VAR 0 7
43434: ARRAY
43435: PUSH
43436: LD_INT 1
43438: ARRAY
43439: PPUSH
43440: LD_VAR 0 12
43444: PUSH
43445: LD_VAR 0 7
43449: ARRAY
43450: PUSH
43451: LD_INT 2
43453: ARRAY
43454: PPUSH
43455: CALL_OW 428
43459: PUSH
43460: LD_INT 0
43462: GREATER
43463: OR
43464: PUSH
43465: LD_VAR 0 12
43469: PUSH
43470: LD_VAR 0 7
43474: ARRAY
43475: PUSH
43476: LD_INT 1
43478: ARRAY
43479: PPUSH
43480: LD_VAR 0 12
43484: PUSH
43485: LD_VAR 0 7
43489: ARRAY
43490: PUSH
43491: LD_INT 2
43493: ARRAY
43494: PPUSH
43495: CALL_OW 351
43499: OR
43500: IFFALSE 43506
// exit ;
43502: POP
43503: POP
43504: GO 43798
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43506: LD_ADDR_VAR 0 8
43510: PUSH
43511: LD_VAR 0 12
43515: PUSH
43516: LD_VAR 0 7
43520: ARRAY
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: PPUSH
43526: LD_VAR 0 12
43530: PUSH
43531: LD_VAR 0 7
43535: ARRAY
43536: PUSH
43537: LD_INT 2
43539: ARRAY
43540: PPUSH
43541: CALL_OW 546
43545: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43546: LD_VAR 0 8
43550: PUSH
43551: LD_INT 1
43553: ARRAY
43554: PUSH
43555: LD_VAR 0 8
43559: PUSH
43560: LD_INT 2
43562: ARRAY
43563: PUSH
43564: LD_VAR 0 13
43568: PUSH
43569: LD_INT 2
43571: PLUS
43572: GREATER
43573: OR
43574: PUSH
43575: LD_VAR 0 8
43579: PUSH
43580: LD_INT 2
43582: ARRAY
43583: PUSH
43584: LD_VAR 0 13
43588: PUSH
43589: LD_INT 2
43591: MINUS
43592: LESS
43593: OR
43594: PUSH
43595: LD_VAR 0 8
43599: PUSH
43600: LD_INT 3
43602: ARRAY
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 8
43609: PUSH
43610: LD_INT 9
43612: PUSH
43613: LD_INT 10
43615: PUSH
43616: LD_INT 11
43618: PUSH
43619: LD_INT 12
43621: PUSH
43622: LD_INT 13
43624: PUSH
43625: LD_INT 16
43627: PUSH
43628: LD_INT 17
43630: PUSH
43631: LD_INT 18
43633: PUSH
43634: LD_INT 19
43636: PUSH
43637: LD_INT 20
43639: PUSH
43640: LD_INT 21
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: IN
43658: NOT
43659: OR
43660: PUSH
43661: LD_VAR 0 8
43665: PUSH
43666: LD_INT 5
43668: ARRAY
43669: NOT
43670: OR
43671: PUSH
43672: LD_VAR 0 8
43676: PUSH
43677: LD_INT 6
43679: ARRAY
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 7
43689: PUSH
43690: LD_INT 9
43692: PUSH
43693: LD_INT 10
43695: PUSH
43696: LD_INT 11
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: IN
43707: NOT
43708: OR
43709: IFFALSE 43715
// exit ;
43711: POP
43712: POP
43713: GO 43798
// end ;
43715: GO 43386
43717: POP
43718: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43719: LD_VAR 0 9
43723: PPUSH
43724: LD_VAR 0 3
43728: PPUSH
43729: LD_VAR 0 4
43733: PPUSH
43734: LD_INT 20
43736: PPUSH
43737: CALL 35744 0 4
43741: PUSH
43742: LD_INT 4
43744: ARRAY
43745: IFFALSE 43749
// exit ;
43747: GO 43798
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43749: LD_VAR 0 2
43753: PUSH
43754: LD_INT 29
43756: PUSH
43757: LD_INT 30
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: IN
43764: PUSH
43765: LD_VAR 0 3
43769: PPUSH
43770: LD_VAR 0 4
43774: PPUSH
43775: LD_VAR 0 9
43779: PPUSH
43780: CALL_OW 440
43784: NOT
43785: AND
43786: IFFALSE 43790
// exit ;
43788: GO 43798
// result := true ;
43790: LD_ADDR_VAR 0 6
43794: PUSH
43795: LD_INT 1
43797: ST_TO_ADDR
// end ;
43798: LD_VAR 0 6
43802: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43803: LD_INT 0
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
// result = [ ] ;
43863: LD_ADDR_VAR 0 7
43867: PUSH
43868: EMPTY
43869: ST_TO_ADDR
// temp_list = [ ] ;
43870: LD_ADDR_VAR 0 9
43874: PUSH
43875: EMPTY
43876: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43877: LD_VAR 0 4
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 4
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: IN
43908: NOT
43909: PUSH
43910: LD_VAR 0 1
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: IN
43925: PUSH
43926: LD_VAR 0 5
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: IN
43945: NOT
43946: AND
43947: OR
43948: IFFALSE 43952
// exit ;
43950: GO 62343
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43952: LD_VAR 0 1
43956: PUSH
43957: LD_INT 6
43959: PUSH
43960: LD_INT 7
43962: PUSH
43963: LD_INT 8
43965: PUSH
43966: LD_INT 13
43968: PUSH
43969: LD_INT 12
43971: PUSH
43972: LD_INT 15
43974: PUSH
43975: LD_INT 11
43977: PUSH
43978: LD_INT 14
43980: PUSH
43981: LD_INT 10
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: IN
43995: IFFALSE 44005
// btype = b_lab ;
43997: LD_ADDR_VAR 0 1
44001: PUSH
44002: LD_INT 6
44004: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44005: LD_VAR 0 6
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: IN
44024: NOT
44025: PUSH
44026: LD_VAR 0 1
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: LD_INT 6
44045: PUSH
44046: LD_INT 36
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 5
44054: PUSH
44055: LD_INT 31
44057: PUSH
44058: LD_INT 32
44060: PUSH
44061: LD_INT 33
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: IN
44077: NOT
44078: PUSH
44079: LD_VAR 0 6
44083: PUSH
44084: LD_INT 1
44086: EQUAL
44087: AND
44088: OR
44089: PUSH
44090: LD_VAR 0 1
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: IN
44105: NOT
44106: PUSH
44107: LD_VAR 0 6
44111: PUSH
44112: LD_INT 2
44114: EQUAL
44115: AND
44116: OR
44117: IFFALSE 44127
// mode = 0 ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_INT 0
44126: ST_TO_ADDR
// case mode of 0 :
44127: LD_VAR 0 6
44131: PUSH
44132: LD_INT 0
44134: DOUBLE
44135: EQUAL
44136: IFTRUE 44140
44138: GO 55593
44140: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44141: LD_ADDR_VAR 0 11
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44334: LD_ADDR_VAR 0 12
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44530: LD_ADDR_VAR 0 13
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 3
44701: NEG
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44729: LD_ADDR_VAR 0 14
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 3
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44925: LD_ADDR_VAR 0 15
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 3
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45118: LD_ADDR_VAR 0 16
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45311: LD_ADDR_VAR 0 17
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45541: LD_ADDR_VAR 0 18
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45771: LD_ADDR_VAR 0 19
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46001: LD_ADDR_VAR 0 20
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46231: LD_ADDR_VAR 0 21
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46461: LD_ADDR_VAR 0 22
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46691: LD_ADDR_VAR 0 23
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46971: LD_ADDR_VAR 0 24
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47247: LD_ADDR_VAR 0 25
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 3
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47521: LD_ADDR_VAR 0 26
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47797: LD_ADDR_VAR 0 27
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48077: LD_ADDR_VAR 0 28
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48359: LD_ADDR_VAR 0 29
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48638: LD_ADDR_VAR 0 30
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 3
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48916: LD_ADDR_VAR 0 31
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49194: LD_ADDR_VAR 0 32
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 3
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49472: LD_ADDR_VAR 0 33
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49751: LD_ADDR_VAR 0 34
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50031: LD_ADDR_VAR 0 35
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50143: LD_ADDR_VAR 0 36
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50255: LD_ADDR_VAR 0 37
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50367: LD_ADDR_VAR 0 38
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50479: LD_ADDR_VAR 0 39
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50591: LD_ADDR_VAR 0 40
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50703: LD_ADDR_VAR 0 41
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51053: LD_ADDR_VAR 0 42
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51403: LD_ADDR_VAR 0 43
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51751: LD_ADDR_VAR 0 44
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52101: LD_ADDR_VAR 0 45
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 46
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52799: LD_ADDR_VAR 0 47
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52950: LD_ADDR_VAR 0 48
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53097: LD_ADDR_VAR 0 49
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53241: LD_ADDR_VAR 0 50
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53385: LD_ADDR_VAR 0 51
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53532: LD_ADDR_VAR 0 52
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53683: LD_ADDR_VAR 0 53
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53913: LD_ADDR_VAR 0 54
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54143: LD_ADDR_VAR 0 55
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54373: LD_ADDR_VAR 0 56
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54603: LD_ADDR_VAR 0 57
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54833: LD_ADDR_VAR 0 58
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55063: LD_ADDR_VAR 0 59
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55151: LD_ADDR_VAR 0 60
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55239: LD_ADDR_VAR 0 61
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55327: LD_ADDR_VAR 0 62
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55415: LD_ADDR_VAR 0 63
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55503: LD_ADDR_VAR 0 64
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// end ; 1 :
55591: GO 61488
55593: LD_INT 1
55595: DOUBLE
55596: EQUAL
55597: IFTRUE 55601
55599: GO 58224
55601: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55602: LD_ADDR_VAR 0 11
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55646: LD_ADDR_VAR 0 12
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55687: LD_ADDR_VAR 0 13
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55727: LD_ADDR_VAR 0 14
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55768: LD_ADDR_VAR 0 15
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55812: LD_ADDR_VAR 0 16
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 3
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55858: LD_ADDR_VAR 0 17
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55902: LD_ADDR_VAR 0 18
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55943: LD_ADDR_VAR 0 19
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55983: LD_ADDR_VAR 0 20
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56024: LD_ADDR_VAR 0 21
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56068: LD_ADDR_VAR 0 22
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56114: LD_ADDR_VAR 0 23
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56158: LD_ADDR_VAR 0 24
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56199: LD_ADDR_VAR 0 25
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56239: LD_ADDR_VAR 0 26
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 4
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56280: LD_ADDR_VAR 0 27
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 4
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56324: LD_ADDR_VAR 0 28
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: LD_INT 4
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 4
56355: NEG
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56370: LD_ADDR_VAR 0 29
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 4
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 5
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 5
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 4
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 6
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 6
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 5
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56525: LD_ADDR_VAR 0 30
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 4
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 4
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 5
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 5
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 5
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 6
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 6
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56668: LD_ADDR_VAR 0 31
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: LD_INT 4
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 4
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 5
56735: PUSH
56736: LD_INT 4
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 5
56745: PUSH
56746: LD_INT 5
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 5
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 6
56765: PUSH
56766: LD_INT 5
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 6
56775: PUSH
56776: LD_INT 6
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 5
56785: PUSH
56786: LD_INT 6
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56807: LD_ADDR_VAR 0 32
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 4
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 5
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 5
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 4
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 6
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 6
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 5
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56950: LD_ADDR_VAR 0 33
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 6
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 6
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57105: LD_ADDR_VAR 0 34
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 4
57172: NEG
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: LD_INT 5
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: LD_INT 4
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 5
57208: NEG
57209: PUSH
57210: LD_INT 5
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 5
57220: NEG
57221: PUSH
57222: LD_INT 6
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 6
57232: NEG
57233: PUSH
57234: LD_INT 5
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 6
57244: NEG
57245: PUSH
57246: LD_INT 6
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57268: LD_ADDR_VAR 0 41
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57312: LD_ADDR_VAR 0 42
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57353: LD_ADDR_VAR 0 43
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57393: LD_ADDR_VAR 0 44
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57434: LD_ADDR_VAR 0 45
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57478: LD_ADDR_VAR 0 46
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 3
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57524: LD_ADDR_VAR 0 47
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57557: LD_ADDR_VAR 0 48
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57588: LD_ADDR_VAR 0 49
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57617: LD_ADDR_VAR 0 50
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57646: LD_ADDR_VAR 0 51
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57677: LD_ADDR_VAR 0 52
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57710: LD_ADDR_VAR 0 53
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57754: LD_ADDR_VAR 0 54
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57795: LD_ADDR_VAR 0 55
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57835: LD_ADDR_VAR 0 56
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57876: LD_ADDR_VAR 0 57
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57920: LD_ADDR_VAR 0 58
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57966: LD_ADDR_VAR 0 59
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58010: LD_ADDR_VAR 0 60
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58051: LD_ADDR_VAR 0 61
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58091: LD_ADDR_VAR 0 62
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58132: LD_ADDR_VAR 0 63
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58176: LD_ADDR_VAR 0 64
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: ST_TO_ADDR
// end ; 2 :
58222: GO 61488
58224: LD_INT 2
58226: DOUBLE
58227: EQUAL
58228: IFTRUE 58232
58230: GO 61487
58232: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58233: LD_ADDR_VAR 0 29
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 5
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: LD_INT 5
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 4
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 5
58678: NEG
58679: PUSH
58680: LD_INT 4
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: NEG
58691: PUSH
58692: LD_INT 5
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 5
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 5
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58771: LD_ADDR_VAR 0 30
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: LD_INT 4
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 5
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 5
58808: PUSH
58809: LD_INT 5
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: LD_INT 5
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: LD_INT 4
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: LD_INT 5
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 4
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 4
58961: NEG
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 5
59017: NEG
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: NEG
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 3
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: NEG
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: NEG
59136: PUSH
59137: LD_INT 4
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 4
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 5
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 4
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 4
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 5
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: LD_INT 5
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59318: LD_ADDR_VAR 0 31
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 5
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 5
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 5
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 4
59497: NEG
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: LD_INT 5
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 5
59580: NEG
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 5
59592: NEG
59593: PUSH
59594: LD_INT 5
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 5
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 5
59616: NEG
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59868: LD_ADDR_VAR 0 32
59872: PUSH
59873: LD_INT 4
59875: NEG
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 5
59931: NEG
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 4
60037: NEG
60038: PUSH
60039: LD_INT 3
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: LD_INT 4
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 5
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 5
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 5
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 4
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 5
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: LD_INT 5
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: LD_INT 5
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60415: LD_ADDR_VAR 0 33
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: LD_INT 5
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: LD_INT 4
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 4
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 5
60482: NEG
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: NEG
60495: PUSH
60496: LD_INT 5
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: LD_INT 5
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 5
60518: NEG
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 3
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 5
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 4
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 4
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: LD_INT 4
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 5
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 5
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 5
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60953: LD_ADDR_VAR 0 34
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 4
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 5
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 4
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 4
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 5
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 5
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: LD_INT 4
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 5
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: LD_INT 5
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: LD_INT 4
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 5
61225: PUSH
61226: LD_INT 3
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 5
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 4
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 4
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 4
61338: NEG
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 4
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 5
61394: NEG
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 5
61405: NEG
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 5
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// end ; end ;
61485: GO 61488
61487: POP
// case btype of b_depot , b_warehouse :
61488: LD_VAR 0 1
61492: PUSH
61493: LD_INT 0
61495: DOUBLE
61496: EQUAL
61497: IFTRUE 61507
61499: LD_INT 1
61501: DOUBLE
61502: EQUAL
61503: IFTRUE 61507
61505: GO 61708
61507: POP
// case nation of nation_american :
61508: LD_VAR 0 5
61512: PUSH
61513: LD_INT 1
61515: DOUBLE
61516: EQUAL
61517: IFTRUE 61521
61519: GO 61577
61521: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61522: LD_ADDR_VAR 0 9
61526: PUSH
61527: LD_VAR 0 11
61531: PUSH
61532: LD_VAR 0 12
61536: PUSH
61537: LD_VAR 0 13
61541: PUSH
61542: LD_VAR 0 14
61546: PUSH
61547: LD_VAR 0 15
61551: PUSH
61552: LD_VAR 0 16
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: LD_VAR 0 4
61569: PUSH
61570: LD_INT 1
61572: PLUS
61573: ARRAY
61574: ST_TO_ADDR
61575: GO 61706
61577: LD_INT 2
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61585
61583: GO 61641
61585: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61586: LD_ADDR_VAR 0 9
61590: PUSH
61591: LD_VAR 0 17
61595: PUSH
61596: LD_VAR 0 18
61600: PUSH
61601: LD_VAR 0 19
61605: PUSH
61606: LD_VAR 0 20
61610: PUSH
61611: LD_VAR 0 21
61615: PUSH
61616: LD_VAR 0 22
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: PUSH
61629: LD_VAR 0 4
61633: PUSH
61634: LD_INT 1
61636: PLUS
61637: ARRAY
61638: ST_TO_ADDR
61639: GO 61706
61641: LD_INT 3
61643: DOUBLE
61644: EQUAL
61645: IFTRUE 61649
61647: GO 61705
61649: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61650: LD_ADDR_VAR 0 9
61654: PUSH
61655: LD_VAR 0 23
61659: PUSH
61660: LD_VAR 0 24
61664: PUSH
61665: LD_VAR 0 25
61669: PUSH
61670: LD_VAR 0 26
61674: PUSH
61675: LD_VAR 0 27
61679: PUSH
61680: LD_VAR 0 28
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: PUSH
61693: LD_VAR 0 4
61697: PUSH
61698: LD_INT 1
61700: PLUS
61701: ARRAY
61702: ST_TO_ADDR
61703: GO 61706
61705: POP
61706: GO 62261
61708: LD_INT 2
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61722
61714: LD_INT 3
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61722
61720: GO 61778
61722: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61723: LD_ADDR_VAR 0 9
61727: PUSH
61728: LD_VAR 0 29
61732: PUSH
61733: LD_VAR 0 30
61737: PUSH
61738: LD_VAR 0 31
61742: PUSH
61743: LD_VAR 0 32
61747: PUSH
61748: LD_VAR 0 33
61752: PUSH
61753: LD_VAR 0 34
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 4
61770: PUSH
61771: LD_INT 1
61773: PLUS
61774: ARRAY
61775: ST_TO_ADDR
61776: GO 62261
61778: LD_INT 16
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61840
61784: LD_INT 17
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61840
61790: LD_INT 18
61792: DOUBLE
61793: EQUAL
61794: IFTRUE 61840
61796: LD_INT 19
61798: DOUBLE
61799: EQUAL
61800: IFTRUE 61840
61802: LD_INT 22
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61840
61808: LD_INT 20
61810: DOUBLE
61811: EQUAL
61812: IFTRUE 61840
61814: LD_INT 21
61816: DOUBLE
61817: EQUAL
61818: IFTRUE 61840
61820: LD_INT 23
61822: DOUBLE
61823: EQUAL
61824: IFTRUE 61840
61826: LD_INT 24
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61840
61832: LD_INT 25
61834: DOUBLE
61835: EQUAL
61836: IFTRUE 61840
61838: GO 61896
61840: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61841: LD_ADDR_VAR 0 9
61845: PUSH
61846: LD_VAR 0 35
61850: PUSH
61851: LD_VAR 0 36
61855: PUSH
61856: LD_VAR 0 37
61860: PUSH
61861: LD_VAR 0 38
61865: PUSH
61866: LD_VAR 0 39
61870: PUSH
61871: LD_VAR 0 40
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: LD_VAR 0 4
61888: PUSH
61889: LD_INT 1
61891: PLUS
61892: ARRAY
61893: ST_TO_ADDR
61894: GO 62261
61896: LD_INT 6
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61952
61902: LD_INT 7
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61952
61908: LD_INT 8
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61952
61914: LD_INT 13
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61952
61920: LD_INT 12
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61952
61926: LD_INT 15
61928: DOUBLE
61929: EQUAL
61930: IFTRUE 61952
61932: LD_INT 11
61934: DOUBLE
61935: EQUAL
61936: IFTRUE 61952
61938: LD_INT 14
61940: DOUBLE
61941: EQUAL
61942: IFTRUE 61952
61944: LD_INT 10
61946: DOUBLE
61947: EQUAL
61948: IFTRUE 61952
61950: GO 62008
61952: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61953: LD_ADDR_VAR 0 9
61957: PUSH
61958: LD_VAR 0 41
61962: PUSH
61963: LD_VAR 0 42
61967: PUSH
61968: LD_VAR 0 43
61972: PUSH
61973: LD_VAR 0 44
61977: PUSH
61978: LD_VAR 0 45
61982: PUSH
61983: LD_VAR 0 46
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: PUSH
61996: LD_VAR 0 4
62000: PUSH
62001: LD_INT 1
62003: PLUS
62004: ARRAY
62005: ST_TO_ADDR
62006: GO 62261
62008: LD_INT 36
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62016
62014: GO 62072
62016: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62017: LD_ADDR_VAR 0 9
62021: PUSH
62022: LD_VAR 0 47
62026: PUSH
62027: LD_VAR 0 48
62031: PUSH
62032: LD_VAR 0 49
62036: PUSH
62037: LD_VAR 0 50
62041: PUSH
62042: LD_VAR 0 51
62046: PUSH
62047: LD_VAR 0 52
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: PUSH
62060: LD_VAR 0 4
62064: PUSH
62065: LD_INT 1
62067: PLUS
62068: ARRAY
62069: ST_TO_ADDR
62070: GO 62261
62072: LD_INT 4
62074: DOUBLE
62075: EQUAL
62076: IFTRUE 62098
62078: LD_INT 5
62080: DOUBLE
62081: EQUAL
62082: IFTRUE 62098
62084: LD_INT 34
62086: DOUBLE
62087: EQUAL
62088: IFTRUE 62098
62090: LD_INT 37
62092: DOUBLE
62093: EQUAL
62094: IFTRUE 62098
62096: GO 62154
62098: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62099: LD_ADDR_VAR 0 9
62103: PUSH
62104: LD_VAR 0 53
62108: PUSH
62109: LD_VAR 0 54
62113: PUSH
62114: LD_VAR 0 55
62118: PUSH
62119: LD_VAR 0 56
62123: PUSH
62124: LD_VAR 0 57
62128: PUSH
62129: LD_VAR 0 58
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_VAR 0 4
62146: PUSH
62147: LD_INT 1
62149: PLUS
62150: ARRAY
62151: ST_TO_ADDR
62152: GO 62261
62154: LD_INT 31
62156: DOUBLE
62157: EQUAL
62158: IFTRUE 62204
62160: LD_INT 32
62162: DOUBLE
62163: EQUAL
62164: IFTRUE 62204
62166: LD_INT 33
62168: DOUBLE
62169: EQUAL
62170: IFTRUE 62204
62172: LD_INT 27
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62204
62178: LD_INT 26
62180: DOUBLE
62181: EQUAL
62182: IFTRUE 62204
62184: LD_INT 28
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62204
62190: LD_INT 29
62192: DOUBLE
62193: EQUAL
62194: IFTRUE 62204
62196: LD_INT 30
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62204
62202: GO 62260
62204: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62205: LD_ADDR_VAR 0 9
62209: PUSH
62210: LD_VAR 0 59
62214: PUSH
62215: LD_VAR 0 60
62219: PUSH
62220: LD_VAR 0 61
62224: PUSH
62225: LD_VAR 0 62
62229: PUSH
62230: LD_VAR 0 63
62234: PUSH
62235: LD_VAR 0 64
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: PUSH
62248: LD_VAR 0 4
62252: PUSH
62253: LD_INT 1
62255: PLUS
62256: ARRAY
62257: ST_TO_ADDR
62258: GO 62261
62260: POP
// temp_list2 = [ ] ;
62261: LD_ADDR_VAR 0 10
62265: PUSH
62266: EMPTY
62267: ST_TO_ADDR
// for i in temp_list do
62268: LD_ADDR_VAR 0 8
62272: PUSH
62273: LD_VAR 0 9
62277: PUSH
62278: FOR_IN
62279: IFFALSE 62331
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62281: LD_ADDR_VAR 0 10
62285: PUSH
62286: LD_VAR 0 10
62290: PUSH
62291: LD_VAR 0 8
62295: PUSH
62296: LD_INT 1
62298: ARRAY
62299: PUSH
62300: LD_VAR 0 2
62304: PLUS
62305: PUSH
62306: LD_VAR 0 8
62310: PUSH
62311: LD_INT 2
62313: ARRAY
62314: PUSH
62315: LD_VAR 0 3
62319: PLUS
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: EMPTY
62326: LIST
62327: ADD
62328: ST_TO_ADDR
62329: GO 62278
62331: POP
62332: POP
// result = temp_list2 ;
62333: LD_ADDR_VAR 0 7
62337: PUSH
62338: LD_VAR 0 10
62342: ST_TO_ADDR
// end ;
62343: LD_VAR 0 7
62347: RET
// export function EnemyInRange ( unit , dist ) ; begin
62348: LD_INT 0
62350: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: CALL_OW 255
62365: PPUSH
62366: LD_VAR 0 1
62370: PPUSH
62371: CALL_OW 250
62375: PPUSH
62376: LD_VAR 0 1
62380: PPUSH
62381: CALL_OW 251
62385: PPUSH
62386: LD_VAR 0 2
62390: PPUSH
62391: CALL 35744 0 4
62395: PUSH
62396: LD_INT 4
62398: ARRAY
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 3
62404: RET
// export function PlayerSeeMe ( unit ) ; begin
62405: LD_INT 0
62407: PPUSH
// result := See ( your_side , unit ) ;
62408: LD_ADDR_VAR 0 2
62412: PUSH
62413: LD_OWVAR 2
62417: PPUSH
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 292
62427: ST_TO_ADDR
// end ;
62428: LD_VAR 0 2
62432: RET
// export function ReverseDir ( unit ) ; begin
62433: LD_INT 0
62435: PPUSH
// if not unit then
62436: LD_VAR 0 1
62440: NOT
62441: IFFALSE 62445
// exit ;
62443: GO 62468
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62445: LD_ADDR_VAR 0 2
62449: PUSH
62450: LD_VAR 0 1
62454: PPUSH
62455: CALL_OW 254
62459: PUSH
62460: LD_INT 3
62462: PLUS
62463: PUSH
62464: LD_INT 6
62466: MOD
62467: ST_TO_ADDR
// end ;
62468: LD_VAR 0 2
62472: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62473: LD_INT 0
62475: PPUSH
62476: PPUSH
62477: PPUSH
62478: PPUSH
62479: PPUSH
// if not hexes then
62480: LD_VAR 0 2
62484: NOT
62485: IFFALSE 62489
// exit ;
62487: GO 62637
// dist := 9999 ;
62489: LD_ADDR_VAR 0 5
62493: PUSH
62494: LD_INT 9999
62496: ST_TO_ADDR
// for i = 1 to hexes do
62497: LD_ADDR_VAR 0 4
62501: PUSH
62502: DOUBLE
62503: LD_INT 1
62505: DEC
62506: ST_TO_ADDR
62507: LD_VAR 0 2
62511: PUSH
62512: FOR_TO
62513: IFFALSE 62625
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62515: LD_VAR 0 1
62519: PPUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_VAR 0 4
62529: ARRAY
62530: PUSH
62531: LD_INT 1
62533: ARRAY
62534: PPUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_VAR 0 4
62544: ARRAY
62545: PUSH
62546: LD_INT 2
62548: ARRAY
62549: PPUSH
62550: CALL_OW 297
62554: PUSH
62555: LD_VAR 0 5
62559: LESS
62560: IFFALSE 62623
// begin hex := hexes [ i ] ;
62562: LD_ADDR_VAR 0 7
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: LD_VAR 0 4
62576: ARRAY
62577: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62578: LD_ADDR_VAR 0 5
62582: PUSH
62583: LD_VAR 0 1
62587: PPUSH
62588: LD_VAR 0 2
62592: PUSH
62593: LD_VAR 0 4
62597: ARRAY
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: PPUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_VAR 0 4
62612: ARRAY
62613: PUSH
62614: LD_INT 2
62616: ARRAY
62617: PPUSH
62618: CALL_OW 297
62622: ST_TO_ADDR
// end ; end ;
62623: GO 62512
62625: POP
62626: POP
// result := hex ;
62627: LD_ADDR_VAR 0 3
62631: PUSH
62632: LD_VAR 0 7
62636: ST_TO_ADDR
// end ;
62637: LD_VAR 0 3
62641: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62642: LD_INT 0
62644: PPUSH
62645: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62646: LD_VAR 0 1
62650: NOT
62651: PUSH
62652: LD_VAR 0 1
62656: PUSH
62657: LD_INT 21
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 23
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PPUSH
62681: CALL_OW 69
62685: IN
62686: NOT
62687: OR
62688: IFFALSE 62692
// exit ;
62690: GO 62739
// for i = 1 to 3 do
62692: LD_ADDR_VAR 0 3
62696: PUSH
62697: DOUBLE
62698: LD_INT 1
62700: DEC
62701: ST_TO_ADDR
62702: LD_INT 3
62704: PUSH
62705: FOR_TO
62706: IFFALSE 62737
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62708: LD_VAR 0 1
62712: PPUSH
62713: CALL_OW 250
62717: PPUSH
62718: LD_VAR 0 1
62722: PPUSH
62723: CALL_OW 251
62727: PPUSH
62728: LD_INT 1
62730: PPUSH
62731: CALL_OW 453
62735: GO 62705
62737: POP
62738: POP
// end ;
62739: LD_VAR 0 2
62743: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62744: LD_INT 0
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
62750: PPUSH
62751: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62752: LD_VAR 0 1
62756: NOT
62757: PUSH
62758: LD_VAR 0 2
62762: NOT
62763: OR
62764: PUSH
62765: LD_VAR 0 1
62769: PPUSH
62770: CALL_OW 314
62774: OR
62775: IFFALSE 62779
// exit ;
62777: GO 63220
// x := GetX ( enemy_unit ) ;
62779: LD_ADDR_VAR 0 7
62783: PUSH
62784: LD_VAR 0 2
62788: PPUSH
62789: CALL_OW 250
62793: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62794: LD_ADDR_VAR 0 8
62798: PUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: CALL_OW 251
62808: ST_TO_ADDR
// if not x or not y then
62809: LD_VAR 0 7
62813: NOT
62814: PUSH
62815: LD_VAR 0 8
62819: NOT
62820: OR
62821: IFFALSE 62825
// exit ;
62823: GO 63220
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62825: LD_ADDR_VAR 0 6
62829: PUSH
62830: LD_VAR 0 7
62834: PPUSH
62835: LD_INT 0
62837: PPUSH
62838: LD_INT 4
62840: PPUSH
62841: CALL_OW 272
62845: PUSH
62846: LD_VAR 0 8
62850: PPUSH
62851: LD_INT 0
62853: PPUSH
62854: LD_INT 4
62856: PPUSH
62857: CALL_OW 273
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_VAR 0 7
62870: PPUSH
62871: LD_INT 1
62873: PPUSH
62874: LD_INT 4
62876: PPUSH
62877: CALL_OW 272
62881: PUSH
62882: LD_VAR 0 8
62886: PPUSH
62887: LD_INT 1
62889: PPUSH
62890: LD_INT 4
62892: PPUSH
62893: CALL_OW 273
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_VAR 0 7
62906: PPUSH
62907: LD_INT 2
62909: PPUSH
62910: LD_INT 4
62912: PPUSH
62913: CALL_OW 272
62917: PUSH
62918: LD_VAR 0 8
62922: PPUSH
62923: LD_INT 2
62925: PPUSH
62926: LD_INT 4
62928: PPUSH
62929: CALL_OW 273
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_VAR 0 7
62942: PPUSH
62943: LD_INT 3
62945: PPUSH
62946: LD_INT 4
62948: PPUSH
62949: CALL_OW 272
62953: PUSH
62954: LD_VAR 0 8
62958: PPUSH
62959: LD_INT 3
62961: PPUSH
62962: LD_INT 4
62964: PPUSH
62965: CALL_OW 273
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_VAR 0 7
62978: PPUSH
62979: LD_INT 4
62981: PPUSH
62982: LD_INT 4
62984: PPUSH
62985: CALL_OW 272
62989: PUSH
62990: LD_VAR 0 8
62994: PPUSH
62995: LD_INT 4
62997: PPUSH
62998: LD_INT 4
63000: PPUSH
63001: CALL_OW 273
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_VAR 0 7
63014: PPUSH
63015: LD_INT 5
63017: PPUSH
63018: LD_INT 4
63020: PPUSH
63021: CALL_OW 272
63025: PUSH
63026: LD_VAR 0 8
63030: PPUSH
63031: LD_INT 5
63033: PPUSH
63034: LD_INT 4
63036: PPUSH
63037: CALL_OW 273
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// for i = tmp downto 1 do
63054: LD_ADDR_VAR 0 4
63058: PUSH
63059: DOUBLE
63060: LD_VAR 0 6
63064: INC
63065: ST_TO_ADDR
63066: LD_INT 1
63068: PUSH
63069: FOR_DOWNTO
63070: IFFALSE 63171
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63072: LD_VAR 0 6
63076: PUSH
63077: LD_VAR 0 4
63081: ARRAY
63082: PUSH
63083: LD_INT 1
63085: ARRAY
63086: PPUSH
63087: LD_VAR 0 6
63091: PUSH
63092: LD_VAR 0 4
63096: ARRAY
63097: PUSH
63098: LD_INT 2
63100: ARRAY
63101: PPUSH
63102: CALL_OW 488
63106: NOT
63107: PUSH
63108: LD_VAR 0 6
63112: PUSH
63113: LD_VAR 0 4
63117: ARRAY
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PPUSH
63123: LD_VAR 0 6
63127: PUSH
63128: LD_VAR 0 4
63132: ARRAY
63133: PUSH
63134: LD_INT 2
63136: ARRAY
63137: PPUSH
63138: CALL_OW 428
63142: PUSH
63143: LD_INT 0
63145: NONEQUAL
63146: OR
63147: IFFALSE 63169
// tmp := Delete ( tmp , i ) ;
63149: LD_ADDR_VAR 0 6
63153: PUSH
63154: LD_VAR 0 6
63158: PPUSH
63159: LD_VAR 0 4
63163: PPUSH
63164: CALL_OW 3
63168: ST_TO_ADDR
63169: GO 63069
63171: POP
63172: POP
// j := GetClosestHex ( unit , tmp ) ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: LD_VAR 0 1
63182: PPUSH
63183: LD_VAR 0 6
63187: PPUSH
63188: CALL 62473 0 2
63192: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63193: LD_VAR 0 1
63197: PPUSH
63198: LD_VAR 0 5
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 5
63211: PUSH
63212: LD_INT 2
63214: ARRAY
63215: PPUSH
63216: CALL_OW 111
// end ;
63220: LD_VAR 0 3
63224: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63225: LD_INT 0
63227: PPUSH
63228: PPUSH
63229: PPUSH
// uc_side = 0 ;
63230: LD_ADDR_OWVAR 20
63234: PUSH
63235: LD_INT 0
63237: ST_TO_ADDR
// uc_nation = 0 ;
63238: LD_ADDR_OWVAR 21
63242: PUSH
63243: LD_INT 0
63245: ST_TO_ADDR
// InitHc_All ( ) ;
63246: CALL_OW 584
// InitVc ;
63250: CALL_OW 20
// if mastodonts then
63254: LD_VAR 0 6
63258: IFFALSE 63325
// for i = 1 to mastodonts do
63260: LD_ADDR_VAR 0 11
63264: PUSH
63265: DOUBLE
63266: LD_INT 1
63268: DEC
63269: ST_TO_ADDR
63270: LD_VAR 0 6
63274: PUSH
63275: FOR_TO
63276: IFFALSE 63323
// begin vc_chassis := 31 ;
63278: LD_ADDR_OWVAR 37
63282: PUSH
63283: LD_INT 31
63285: ST_TO_ADDR
// vc_control := control_rider ;
63286: LD_ADDR_OWVAR 38
63290: PUSH
63291: LD_INT 4
63293: ST_TO_ADDR
// animal := CreateVehicle ;
63294: LD_ADDR_VAR 0 12
63298: PUSH
63299: CALL_OW 45
63303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63304: LD_VAR 0 12
63308: PPUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_INT 0
63316: PPUSH
63317: CALL 65460 0 3
// end ;
63321: GO 63275
63323: POP
63324: POP
// if horses then
63325: LD_VAR 0 5
63329: IFFALSE 63396
// for i = 1 to horses do
63331: LD_ADDR_VAR 0 11
63335: PUSH
63336: DOUBLE
63337: LD_INT 1
63339: DEC
63340: ST_TO_ADDR
63341: LD_VAR 0 5
63345: PUSH
63346: FOR_TO
63347: IFFALSE 63394
// begin hc_class := 21 ;
63349: LD_ADDR_OWVAR 28
63353: PUSH
63354: LD_INT 21
63356: ST_TO_ADDR
// hc_gallery :=  ;
63357: LD_ADDR_OWVAR 33
63361: PUSH
63362: LD_STRING 
63364: ST_TO_ADDR
// animal := CreateHuman ;
63365: LD_ADDR_VAR 0 12
63369: PUSH
63370: CALL_OW 44
63374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63375: LD_VAR 0 12
63379: PPUSH
63380: LD_VAR 0 8
63384: PPUSH
63385: LD_INT 0
63387: PPUSH
63388: CALL 65460 0 3
// end ;
63392: GO 63346
63394: POP
63395: POP
// if birds then
63396: LD_VAR 0 1
63400: IFFALSE 63467
// for i = 1 to birds do
63402: LD_ADDR_VAR 0 11
63406: PUSH
63407: DOUBLE
63408: LD_INT 1
63410: DEC
63411: ST_TO_ADDR
63412: LD_VAR 0 1
63416: PUSH
63417: FOR_TO
63418: IFFALSE 63465
// begin hc_class = 18 ;
63420: LD_ADDR_OWVAR 28
63424: PUSH
63425: LD_INT 18
63427: ST_TO_ADDR
// hc_gallery =  ;
63428: LD_ADDR_OWVAR 33
63432: PUSH
63433: LD_STRING 
63435: ST_TO_ADDR
// animal := CreateHuman ;
63436: LD_ADDR_VAR 0 12
63440: PUSH
63441: CALL_OW 44
63445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63446: LD_VAR 0 12
63450: PPUSH
63451: LD_VAR 0 8
63455: PPUSH
63456: LD_INT 0
63458: PPUSH
63459: CALL 65460 0 3
// end ;
63463: GO 63417
63465: POP
63466: POP
// if tigers then
63467: LD_VAR 0 2
63471: IFFALSE 63555
// for i = 1 to tigers do
63473: LD_ADDR_VAR 0 11
63477: PUSH
63478: DOUBLE
63479: LD_INT 1
63481: DEC
63482: ST_TO_ADDR
63483: LD_VAR 0 2
63487: PUSH
63488: FOR_TO
63489: IFFALSE 63553
// begin hc_class = class_tiger ;
63491: LD_ADDR_OWVAR 28
63495: PUSH
63496: LD_INT 14
63498: ST_TO_ADDR
// hc_gallery =  ;
63499: LD_ADDR_OWVAR 33
63503: PUSH
63504: LD_STRING 
63506: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63507: LD_ADDR_OWVAR 35
63511: PUSH
63512: LD_INT 7
63514: NEG
63515: PPUSH
63516: LD_INT 7
63518: PPUSH
63519: CALL_OW 12
63523: ST_TO_ADDR
// animal := CreateHuman ;
63524: LD_ADDR_VAR 0 12
63528: PUSH
63529: CALL_OW 44
63533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63534: LD_VAR 0 12
63538: PPUSH
63539: LD_VAR 0 8
63543: PPUSH
63544: LD_INT 0
63546: PPUSH
63547: CALL 65460 0 3
// end ;
63551: GO 63488
63553: POP
63554: POP
// if apemans then
63555: LD_VAR 0 3
63559: IFFALSE 63682
// for i = 1 to apemans do
63561: LD_ADDR_VAR 0 11
63565: PUSH
63566: DOUBLE
63567: LD_INT 1
63569: DEC
63570: ST_TO_ADDR
63571: LD_VAR 0 3
63575: PUSH
63576: FOR_TO
63577: IFFALSE 63680
// begin hc_class = class_apeman ;
63579: LD_ADDR_OWVAR 28
63583: PUSH
63584: LD_INT 12
63586: ST_TO_ADDR
// hc_gallery =  ;
63587: LD_ADDR_OWVAR 33
63591: PUSH
63592: LD_STRING 
63594: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63595: LD_ADDR_OWVAR 35
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PPUSH
63604: LD_INT 2
63606: PPUSH
63607: CALL_OW 12
63611: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63612: LD_ADDR_OWVAR 31
63616: PUSH
63617: LD_INT 1
63619: PPUSH
63620: LD_INT 3
63622: PPUSH
63623: CALL_OW 12
63627: PUSH
63628: LD_INT 1
63630: PPUSH
63631: LD_INT 3
63633: PPUSH
63634: CALL_OW 12
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: ST_TO_ADDR
// animal := CreateHuman ;
63651: LD_ADDR_VAR 0 12
63655: PUSH
63656: CALL_OW 44
63660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63661: LD_VAR 0 12
63665: PPUSH
63666: LD_VAR 0 8
63670: PPUSH
63671: LD_INT 0
63673: PPUSH
63674: CALL 65460 0 3
// end ;
63678: GO 63576
63680: POP
63681: POP
// if enchidnas then
63682: LD_VAR 0 4
63686: IFFALSE 63753
// for i = 1 to enchidnas do
63688: LD_ADDR_VAR 0 11
63692: PUSH
63693: DOUBLE
63694: LD_INT 1
63696: DEC
63697: ST_TO_ADDR
63698: LD_VAR 0 4
63702: PUSH
63703: FOR_TO
63704: IFFALSE 63751
// begin hc_class = 13 ;
63706: LD_ADDR_OWVAR 28
63710: PUSH
63711: LD_INT 13
63713: ST_TO_ADDR
// hc_gallery =  ;
63714: LD_ADDR_OWVAR 33
63718: PUSH
63719: LD_STRING 
63721: ST_TO_ADDR
// animal := CreateHuman ;
63722: LD_ADDR_VAR 0 12
63726: PUSH
63727: CALL_OW 44
63731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63732: LD_VAR 0 12
63736: PPUSH
63737: LD_VAR 0 8
63741: PPUSH
63742: LD_INT 0
63744: PPUSH
63745: CALL 65460 0 3
// end ;
63749: GO 63703
63751: POP
63752: POP
// if fishes then
63753: LD_VAR 0 7
63757: IFFALSE 63824
// for i = 1 to fishes do
63759: LD_ADDR_VAR 0 11
63763: PUSH
63764: DOUBLE
63765: LD_INT 1
63767: DEC
63768: ST_TO_ADDR
63769: LD_VAR 0 7
63773: PUSH
63774: FOR_TO
63775: IFFALSE 63822
// begin hc_class = 20 ;
63777: LD_ADDR_OWVAR 28
63781: PUSH
63782: LD_INT 20
63784: ST_TO_ADDR
// hc_gallery =  ;
63785: LD_ADDR_OWVAR 33
63789: PUSH
63790: LD_STRING 
63792: ST_TO_ADDR
// animal := CreateHuman ;
63793: LD_ADDR_VAR 0 12
63797: PUSH
63798: CALL_OW 44
63802: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63803: LD_VAR 0 12
63807: PPUSH
63808: LD_VAR 0 9
63812: PPUSH
63813: LD_INT 0
63815: PPUSH
63816: CALL 65460 0 3
// end ;
63820: GO 63774
63822: POP
63823: POP
// end ;
63824: LD_VAR 0 10
63828: RET
// export function WantHeal ( sci , unit ) ; begin
63829: LD_INT 0
63831: PPUSH
// if GetTaskList ( sci ) > 0 then
63832: LD_VAR 0 1
63836: PPUSH
63837: CALL_OW 437
63841: PUSH
63842: LD_INT 0
63844: GREATER
63845: IFFALSE 63915
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63847: LD_VAR 0 1
63851: PPUSH
63852: CALL_OW 437
63856: PUSH
63857: LD_INT 1
63859: ARRAY
63860: PUSH
63861: LD_INT 1
63863: ARRAY
63864: PUSH
63865: LD_STRING l
63867: EQUAL
63868: PUSH
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 437
63878: PUSH
63879: LD_INT 1
63881: ARRAY
63882: PUSH
63883: LD_INT 4
63885: ARRAY
63886: PUSH
63887: LD_VAR 0 2
63891: EQUAL
63892: AND
63893: IFFALSE 63905
// result := true else
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_INT 1
63902: ST_TO_ADDR
63903: GO 63913
// result := false ;
63905: LD_ADDR_VAR 0 3
63909: PUSH
63910: LD_INT 0
63912: ST_TO_ADDR
// end else
63913: GO 63923
// result := false ;
63915: LD_ADDR_VAR 0 3
63919: PUSH
63920: LD_INT 0
63922: ST_TO_ADDR
// end ;
63923: LD_VAR 0 3
63927: RET
// export function HealTarget ( sci ) ; begin
63928: LD_INT 0
63930: PPUSH
// if not sci then
63931: LD_VAR 0 1
63935: NOT
63936: IFFALSE 63940
// exit ;
63938: GO 64005
// result := 0 ;
63940: LD_ADDR_VAR 0 2
63944: PUSH
63945: LD_INT 0
63947: ST_TO_ADDR
// if GetTaskList ( sci ) then
63948: LD_VAR 0 1
63952: PPUSH
63953: CALL_OW 437
63957: IFFALSE 64005
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63959: LD_VAR 0 1
63963: PPUSH
63964: CALL_OW 437
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PUSH
63973: LD_INT 1
63975: ARRAY
63976: PUSH
63977: LD_STRING l
63979: EQUAL
63980: IFFALSE 64005
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63982: LD_ADDR_VAR 0 2
63986: PUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 437
63996: PUSH
63997: LD_INT 1
63999: ARRAY
64000: PUSH
64001: LD_INT 4
64003: ARRAY
64004: ST_TO_ADDR
// end ;
64005: LD_VAR 0 2
64009: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64010: LD_INT 0
64012: PPUSH
64013: PPUSH
64014: PPUSH
64015: PPUSH
// if not base_units then
64016: LD_VAR 0 1
64020: NOT
64021: IFFALSE 64025
// exit ;
64023: GO 64112
// result := false ;
64025: LD_ADDR_VAR 0 2
64029: PUSH
64030: LD_INT 0
64032: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64033: LD_ADDR_VAR 0 5
64037: PUSH
64038: LD_VAR 0 1
64042: PPUSH
64043: LD_INT 21
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PPUSH
64053: CALL_OW 72
64057: ST_TO_ADDR
// if not tmp then
64058: LD_VAR 0 5
64062: NOT
64063: IFFALSE 64067
// exit ;
64065: GO 64112
// for i in tmp do
64067: LD_ADDR_VAR 0 3
64071: PUSH
64072: LD_VAR 0 5
64076: PUSH
64077: FOR_IN
64078: IFFALSE 64110
// begin result := EnemyInRange ( i , 22 ) ;
64080: LD_ADDR_VAR 0 2
64084: PUSH
64085: LD_VAR 0 3
64089: PPUSH
64090: LD_INT 22
64092: PPUSH
64093: CALL 62348 0 2
64097: ST_TO_ADDR
// if result then
64098: LD_VAR 0 2
64102: IFFALSE 64108
// exit ;
64104: POP
64105: POP
64106: GO 64112
// end ;
64108: GO 64077
64110: POP
64111: POP
// end ;
64112: LD_VAR 0 2
64116: RET
// export function FilterByTag ( units , tag ) ; begin
64117: LD_INT 0
64119: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64120: LD_ADDR_VAR 0 3
64124: PUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: LD_INT 120
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PPUSH
64142: CALL_OW 72
64146: ST_TO_ADDR
// end ;
64147: LD_VAR 0 3
64151: RET
// export function IsDriver ( un ) ; begin
64152: LD_INT 0
64154: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64155: LD_ADDR_VAR 0 2
64159: PUSH
64160: LD_VAR 0 1
64164: PUSH
64165: LD_INT 55
64167: PUSH
64168: EMPTY
64169: LIST
64170: PPUSH
64171: CALL_OW 69
64175: IN
64176: ST_TO_ADDR
// end ;
64177: LD_VAR 0 2
64181: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64182: LD_INT 0
64184: PPUSH
64185: PPUSH
// list := [ ] ;
64186: LD_ADDR_VAR 0 5
64190: PUSH
64191: EMPTY
64192: ST_TO_ADDR
// case d of 0 :
64193: LD_VAR 0 3
64197: PUSH
64198: LD_INT 0
64200: DOUBLE
64201: EQUAL
64202: IFTRUE 64206
64204: GO 64339
64206: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64207: LD_ADDR_VAR 0 5
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_INT 4
64219: MINUS
64220: PUSH
64221: LD_VAR 0 2
64225: PUSH
64226: LD_INT 4
64228: MINUS
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: PUSH
64238: LD_VAR 0 1
64242: PUSH
64243: LD_INT 3
64245: MINUS
64246: PUSH
64247: LD_VAR 0 2
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 4
64267: PLUS
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 4
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: LD_INT 3
64289: PLUS
64290: PUSH
64291: LD_VAR 0 2
64295: PUSH
64296: LD_INT 3
64298: PLUS
64299: PUSH
64300: LD_INT 5
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: PUSH
64308: LD_VAR 0 1
64312: PUSH
64313: LD_VAR 0 2
64317: PUSH
64318: LD_INT 4
64320: PLUS
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// end ; 1 :
64337: GO 65037
64339: LD_INT 1
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64480
64347: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_VAR 0 2
64362: PUSH
64363: LD_INT 4
64365: MINUS
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_INT 3
64382: MINUS
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_INT 3
64391: MINUS
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: PUSH
64401: LD_VAR 0 1
64405: PUSH
64406: LD_INT 4
64408: MINUS
64409: PUSH
64410: LD_VAR 0 2
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 3
64435: PLUS
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: LD_VAR 0 1
64449: PUSH
64450: LD_INT 4
64452: PLUS
64453: PUSH
64454: LD_VAR 0 2
64458: PUSH
64459: LD_INT 4
64461: PLUS
64462: PUSH
64463: LD_INT 5
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: ST_TO_ADDR
// end ; 2 :
64478: GO 65037
64480: LD_INT 2
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64488
64486: GO 64617
64488: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_VAR 0 1
64498: PUSH
64499: LD_VAR 0 2
64503: PUSH
64504: LD_INT 3
64506: MINUS
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: PUSH
64516: LD_VAR 0 1
64520: PUSH
64521: LD_INT 4
64523: PLUS
64524: PUSH
64525: LD_VAR 0 2
64529: PUSH
64530: LD_INT 4
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_VAR 0 2
64547: PUSH
64548: LD_INT 4
64550: PLUS
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_INT 3
64567: MINUS
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_INT 4
64589: MINUS
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 4
64598: MINUS
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: ST_TO_ADDR
// end ; 3 :
64615: GO 65037
64617: LD_INT 3
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64625
64623: GO 64758
64625: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64626: LD_ADDR_VAR 0 5
64630: PUSH
64631: LD_VAR 0 1
64635: PUSH
64636: LD_INT 3
64638: PLUS
64639: PUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_INT 4
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: PUSH
64653: LD_VAR 0 1
64657: PUSH
64658: LD_INT 4
64660: PLUS
64661: PUSH
64662: LD_VAR 0 2
64666: PUSH
64667: LD_INT 4
64669: PLUS
64670: PUSH
64671: LD_INT 5
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_INT 4
64686: MINUS
64687: PUSH
64688: LD_VAR 0 2
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_VAR 0 2
64710: PUSH
64711: LD_INT 4
64713: MINUS
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: PUSH
64723: LD_VAR 0 1
64727: PUSH
64728: LD_INT 3
64730: MINUS
64731: PUSH
64732: LD_VAR 0 2
64736: PUSH
64737: LD_INT 3
64739: MINUS
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// end ; 4 :
64756: GO 65037
64758: LD_INT 4
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64766
64764: GO 64899
64766: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64767: LD_ADDR_VAR 0 5
64771: PUSH
64772: LD_VAR 0 1
64776: PUSH
64777: LD_VAR 0 2
64781: PUSH
64782: LD_INT 4
64784: PLUS
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 1
64798: PUSH
64799: LD_INT 3
64801: PLUS
64802: PUSH
64803: LD_VAR 0 2
64807: PUSH
64808: LD_INT 3
64810: PLUS
64811: PUSH
64812: LD_INT 5
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_INT 4
64827: PLUS
64828: PUSH
64829: LD_VAR 0 2
64833: PUSH
64834: LD_INT 4
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 3
64854: MINUS
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: LD_VAR 0 1
64868: PUSH
64869: LD_INT 4
64871: MINUS
64872: PUSH
64873: LD_VAR 0 2
64877: PUSH
64878: LD_INT 4
64880: MINUS
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// end ; 5 :
64897: GO 65037
64899: LD_INT 5
64901: DOUBLE
64902: EQUAL
64903: IFTRUE 64907
64905: GO 65036
64907: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64908: LD_ADDR_VAR 0 5
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_INT 4
64920: MINUS
64921: PUSH
64922: LD_VAR 0 2
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: PUSH
64935: LD_VAR 0 1
64939: PUSH
64940: LD_VAR 0 2
64944: PUSH
64945: LD_INT 4
64947: MINUS
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: LD_VAR 0 1
64961: PUSH
64962: LD_INT 4
64964: PLUS
64965: PUSH
64966: LD_VAR 0 2
64970: PUSH
64971: LD_INT 4
64973: PLUS
64974: PUSH
64975: LD_INT 5
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_INT 3
64990: PLUS
64991: PUSH
64992: LD_VAR 0 2
64996: PUSH
64997: LD_INT 4
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: LD_VAR 0 2
65014: PUSH
65015: LD_INT 3
65017: PLUS
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// end ; end ;
65034: GO 65037
65036: POP
// result := list ;
65037: LD_ADDR_VAR 0 4
65041: PUSH
65042: LD_VAR 0 5
65046: ST_TO_ADDR
// end ;
65047: LD_VAR 0 4
65051: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
65056: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65057: LD_VAR 0 1
65061: NOT
65062: PUSH
65063: LD_VAR 0 2
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: LD_INT 4
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: IN
65086: NOT
65087: OR
65088: IFFALSE 65092
// exit ;
65090: GO 65184
// tmp := [ ] ;
65092: LD_ADDR_VAR 0 5
65096: PUSH
65097: EMPTY
65098: ST_TO_ADDR
// for i in units do
65099: LD_ADDR_VAR 0 4
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: FOR_IN
65110: IFFALSE 65153
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: LD_VAR 0 5
65121: PPUSH
65122: LD_VAR 0 5
65126: PUSH
65127: LD_INT 1
65129: PLUS
65130: PPUSH
65131: LD_VAR 0 4
65135: PPUSH
65136: LD_VAR 0 2
65140: PPUSH
65141: CALL_OW 259
65145: PPUSH
65146: CALL_OW 2
65150: ST_TO_ADDR
65151: GO 65109
65153: POP
65154: POP
// if not tmp then
65155: LD_VAR 0 5
65159: NOT
65160: IFFALSE 65164
// exit ;
65162: GO 65184
// result := SortListByListDesc ( units , tmp ) ;
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_VAR 0 1
65173: PPUSH
65174: LD_VAR 0 5
65178: PPUSH
65179: CALL_OW 77
65183: ST_TO_ADDR
// end ;
65184: LD_VAR 0 3
65188: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65189: LD_INT 0
65191: PPUSH
65192: PPUSH
65193: PPUSH
// result := false ;
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_INT 0
65201: ST_TO_ADDR
// x := GetX ( building ) ;
65202: LD_ADDR_VAR 0 4
65206: PUSH
65207: LD_VAR 0 2
65211: PPUSH
65212: CALL_OW 250
65216: ST_TO_ADDR
// y := GetY ( building ) ;
65217: LD_ADDR_VAR 0 5
65221: PUSH
65222: LD_VAR 0 2
65226: PPUSH
65227: CALL_OW 251
65231: ST_TO_ADDR
// if not building or not x or not y then
65232: LD_VAR 0 2
65236: NOT
65237: PUSH
65238: LD_VAR 0 4
65242: NOT
65243: OR
65244: PUSH
65245: LD_VAR 0 5
65249: NOT
65250: OR
65251: IFFALSE 65255
// exit ;
65253: GO 65347
// if GetTaskList ( unit ) then
65255: LD_VAR 0 1
65259: PPUSH
65260: CALL_OW 437
65264: IFFALSE 65347
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65266: LD_STRING e
65268: PUSH
65269: LD_VAR 0 1
65273: PPUSH
65274: CALL_OW 437
65278: PUSH
65279: LD_INT 1
65281: ARRAY
65282: PUSH
65283: LD_INT 1
65285: ARRAY
65286: EQUAL
65287: PUSH
65288: LD_VAR 0 4
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 437
65302: PUSH
65303: LD_INT 1
65305: ARRAY
65306: PUSH
65307: LD_INT 2
65309: ARRAY
65310: EQUAL
65311: AND
65312: PUSH
65313: LD_VAR 0 5
65317: PUSH
65318: LD_VAR 0 1
65322: PPUSH
65323: CALL_OW 437
65327: PUSH
65328: LD_INT 1
65330: ARRAY
65331: PUSH
65332: LD_INT 3
65334: ARRAY
65335: EQUAL
65336: AND
65337: IFFALSE 65347
// result := true end ;
65339: LD_ADDR_VAR 0 3
65343: PUSH
65344: LD_INT 1
65346: ST_TO_ADDR
// end ;
65347: LD_VAR 0 3
65351: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65352: LD_INT 0
65354: PPUSH
// result := false ;
65355: LD_ADDR_VAR 0 4
65359: PUSH
65360: LD_INT 0
65362: ST_TO_ADDR
// if GetTaskList ( unit ) then
65363: LD_VAR 0 1
65367: PPUSH
65368: CALL_OW 437
65372: IFFALSE 65455
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65374: LD_STRING M
65376: PUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: CALL_OW 437
65386: PUSH
65387: LD_INT 1
65389: ARRAY
65390: PUSH
65391: LD_INT 1
65393: ARRAY
65394: EQUAL
65395: PUSH
65396: LD_VAR 0 2
65400: PUSH
65401: LD_VAR 0 1
65405: PPUSH
65406: CALL_OW 437
65410: PUSH
65411: LD_INT 1
65413: ARRAY
65414: PUSH
65415: LD_INT 2
65417: ARRAY
65418: EQUAL
65419: AND
65420: PUSH
65421: LD_VAR 0 3
65425: PUSH
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 437
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PUSH
65440: LD_INT 3
65442: ARRAY
65443: EQUAL
65444: AND
65445: IFFALSE 65455
// result := true ;
65447: LD_ADDR_VAR 0 4
65451: PUSH
65452: LD_INT 1
65454: ST_TO_ADDR
// end ; end ;
65455: LD_VAR 0 4
65459: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65460: LD_INT 0
65462: PPUSH
65463: PPUSH
65464: PPUSH
65465: PPUSH
// if not unit or not area then
65466: LD_VAR 0 1
65470: NOT
65471: PUSH
65472: LD_VAR 0 2
65476: NOT
65477: OR
65478: IFFALSE 65482
// exit ;
65480: GO 65646
// tmp := AreaToList ( area , i ) ;
65482: LD_ADDR_VAR 0 6
65486: PUSH
65487: LD_VAR 0 2
65491: PPUSH
65492: LD_VAR 0 5
65496: PPUSH
65497: CALL_OW 517
65501: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65502: LD_ADDR_VAR 0 5
65506: PUSH
65507: DOUBLE
65508: LD_INT 1
65510: DEC
65511: ST_TO_ADDR
65512: LD_VAR 0 6
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: PUSH
65521: FOR_TO
65522: IFFALSE 65644
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65524: LD_ADDR_VAR 0 7
65528: PUSH
65529: LD_VAR 0 6
65533: PUSH
65534: LD_INT 1
65536: ARRAY
65537: PUSH
65538: LD_VAR 0 5
65542: ARRAY
65543: PUSH
65544: LD_VAR 0 6
65548: PUSH
65549: LD_INT 2
65551: ARRAY
65552: PUSH
65553: LD_VAR 0 5
65557: ARRAY
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65563: LD_VAR 0 7
65567: PUSH
65568: LD_INT 1
65570: ARRAY
65571: PPUSH
65572: LD_VAR 0 7
65576: PUSH
65577: LD_INT 2
65579: ARRAY
65580: PPUSH
65581: CALL_OW 428
65585: PUSH
65586: LD_INT 0
65588: EQUAL
65589: IFFALSE 65642
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65591: LD_VAR 0 1
65595: PPUSH
65596: LD_VAR 0 7
65600: PUSH
65601: LD_INT 1
65603: ARRAY
65604: PPUSH
65605: LD_VAR 0 7
65609: PUSH
65610: LD_INT 2
65612: ARRAY
65613: PPUSH
65614: LD_VAR 0 3
65618: PPUSH
65619: CALL_OW 48
// result := IsPlaced ( unit ) ;
65623: LD_ADDR_VAR 0 4
65627: PUSH
65628: LD_VAR 0 1
65632: PPUSH
65633: CALL_OW 305
65637: ST_TO_ADDR
// exit ;
65638: POP
65639: POP
65640: GO 65646
// end ; end ;
65642: GO 65521
65644: POP
65645: POP
// end ;
65646: LD_VAR 0 4
65650: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65651: LD_INT 0
65653: PPUSH
65654: PPUSH
65655: PPUSH
// if not side or side > 8 then
65656: LD_VAR 0 1
65660: NOT
65661: PUSH
65662: LD_VAR 0 1
65666: PUSH
65667: LD_INT 8
65669: GREATER
65670: OR
65671: IFFALSE 65675
// exit ;
65673: GO 65862
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65675: LD_ADDR_VAR 0 4
65679: PUSH
65680: LD_INT 22
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 21
65694: PUSH
65695: LD_INT 3
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PPUSH
65706: CALL_OW 69
65710: ST_TO_ADDR
// if not tmp then
65711: LD_VAR 0 4
65715: NOT
65716: IFFALSE 65720
// exit ;
65718: GO 65862
// enable_addtolog := true ;
65720: LD_ADDR_OWVAR 81
65724: PUSH
65725: LD_INT 1
65727: ST_TO_ADDR
// AddToLog ( [ ) ;
65728: LD_STRING [
65730: PPUSH
65731: CALL_OW 561
// for i in tmp do
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_VAR 0 4
65744: PUSH
65745: FOR_IN
65746: IFFALSE 65853
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65748: LD_STRING [
65750: PUSH
65751: LD_VAR 0 3
65755: PPUSH
65756: CALL_OW 266
65760: STR
65761: PUSH
65762: LD_STRING , 
65764: STR
65765: PUSH
65766: LD_VAR 0 3
65770: PPUSH
65771: CALL_OW 250
65775: STR
65776: PUSH
65777: LD_STRING , 
65779: STR
65780: PUSH
65781: LD_VAR 0 3
65785: PPUSH
65786: CALL_OW 251
65790: STR
65791: PUSH
65792: LD_STRING , 
65794: STR
65795: PUSH
65796: LD_VAR 0 3
65800: PPUSH
65801: CALL_OW 254
65805: STR
65806: PUSH
65807: LD_STRING , 
65809: STR
65810: PUSH
65811: LD_VAR 0 3
65815: PPUSH
65816: LD_INT 1
65818: PPUSH
65819: CALL_OW 268
65823: STR
65824: PUSH
65825: LD_STRING , 
65827: STR
65828: PUSH
65829: LD_VAR 0 3
65833: PPUSH
65834: LD_INT 2
65836: PPUSH
65837: CALL_OW 268
65841: STR
65842: PUSH
65843: LD_STRING ],
65845: STR
65846: PPUSH
65847: CALL_OW 561
// end ;
65851: GO 65745
65853: POP
65854: POP
// AddToLog ( ]; ) ;
65855: LD_STRING ];
65857: PPUSH
65858: CALL_OW 561
// end ;
65862: LD_VAR 0 2
65866: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65867: LD_INT 0
65869: PPUSH
65870: PPUSH
65871: PPUSH
65872: PPUSH
65873: PPUSH
// if not area or not rate or not max then
65874: LD_VAR 0 1
65878: NOT
65879: PUSH
65880: LD_VAR 0 2
65884: NOT
65885: OR
65886: PUSH
65887: LD_VAR 0 4
65891: NOT
65892: OR
65893: IFFALSE 65897
// exit ;
65895: GO 66086
// while 1 do
65897: LD_INT 1
65899: IFFALSE 66086
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65901: LD_ADDR_VAR 0 9
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: LD_INT 1
65913: PPUSH
65914: CALL_OW 287
65918: PUSH
65919: LD_INT 10
65921: MUL
65922: ST_TO_ADDR
// r := rate / 10 ;
65923: LD_ADDR_VAR 0 7
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_INT 10
65935: DIVREAL
65936: ST_TO_ADDR
// time := 1 1$00 ;
65937: LD_ADDR_VAR 0 8
65941: PUSH
65942: LD_INT 2100
65944: ST_TO_ADDR
// if amount < min then
65945: LD_VAR 0 9
65949: PUSH
65950: LD_VAR 0 3
65954: LESS
65955: IFFALSE 65973
// r := r * 2 else
65957: LD_ADDR_VAR 0 7
65961: PUSH
65962: LD_VAR 0 7
65966: PUSH
65967: LD_INT 2
65969: MUL
65970: ST_TO_ADDR
65971: GO 65999
// if amount > max then
65973: LD_VAR 0 9
65977: PUSH
65978: LD_VAR 0 4
65982: GREATER
65983: IFFALSE 65999
// r := r / 2 ;
65985: LD_ADDR_VAR 0 7
65989: PUSH
65990: LD_VAR 0 7
65994: PUSH
65995: LD_INT 2
65997: DIVREAL
65998: ST_TO_ADDR
// time := time / r ;
65999: LD_ADDR_VAR 0 8
66003: PUSH
66004: LD_VAR 0 8
66008: PUSH
66009: LD_VAR 0 7
66013: DIVREAL
66014: ST_TO_ADDR
// if time < 0 then
66015: LD_VAR 0 8
66019: PUSH
66020: LD_INT 0
66022: LESS
66023: IFFALSE 66040
// time := time * - 1 ;
66025: LD_ADDR_VAR 0 8
66029: PUSH
66030: LD_VAR 0 8
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: MUL
66039: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66040: LD_VAR 0 8
66044: PUSH
66045: LD_INT 35
66047: PPUSH
66048: LD_INT 875
66050: PPUSH
66051: CALL_OW 12
66055: PLUS
66056: PPUSH
66057: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66061: LD_INT 1
66063: PPUSH
66064: LD_INT 5
66066: PPUSH
66067: CALL_OW 12
66071: PPUSH
66072: LD_VAR 0 1
66076: PPUSH
66077: LD_INT 1
66079: PPUSH
66080: CALL_OW 55
// end ;
66084: GO 65897
// end ;
66086: LD_VAR 0 5
66090: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66091: LD_INT 0
66093: PPUSH
66094: PPUSH
66095: PPUSH
66096: PPUSH
66097: PPUSH
66098: PPUSH
66099: PPUSH
66100: PPUSH
// if not turrets or not factories then
66101: LD_VAR 0 1
66105: NOT
66106: PUSH
66107: LD_VAR 0 2
66111: NOT
66112: OR
66113: IFFALSE 66117
// exit ;
66115: GO 66424
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66117: LD_ADDR_VAR 0 10
66121: PUSH
66122: LD_INT 5
66124: PUSH
66125: LD_INT 6
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: LD_INT 4
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: LD_INT 5
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 24
66159: PUSH
66160: LD_INT 25
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 23
66169: PUSH
66170: LD_INT 27
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 42
66183: PUSH
66184: LD_INT 43
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 44
66193: PUSH
66194: LD_INT 46
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 45
66203: PUSH
66204: LD_INT 47
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// result := [ ] ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: EMPTY
66227: ST_TO_ADDR
// for i in turrets do
66228: LD_ADDR_VAR 0 4
66232: PUSH
66233: LD_VAR 0 1
66237: PUSH
66238: FOR_IN
66239: IFFALSE 66422
// begin nat := GetNation ( i ) ;
66241: LD_ADDR_VAR 0 7
66245: PUSH
66246: LD_VAR 0 4
66250: PPUSH
66251: CALL_OW 248
66255: ST_TO_ADDR
// weapon := 0 ;
66256: LD_ADDR_VAR 0 8
66260: PUSH
66261: LD_INT 0
66263: ST_TO_ADDR
// if not nat then
66264: LD_VAR 0 7
66268: NOT
66269: IFFALSE 66273
// continue ;
66271: GO 66238
// for j in list [ nat ] do
66273: LD_ADDR_VAR 0 5
66277: PUSH
66278: LD_VAR 0 10
66282: PUSH
66283: LD_VAR 0 7
66287: ARRAY
66288: PUSH
66289: FOR_IN
66290: IFFALSE 66331
// if GetBWeapon ( i ) = j [ 1 ] then
66292: LD_VAR 0 4
66296: PPUSH
66297: CALL_OW 269
66301: PUSH
66302: LD_VAR 0 5
66306: PUSH
66307: LD_INT 1
66309: ARRAY
66310: EQUAL
66311: IFFALSE 66329
// begin weapon := j [ 2 ] ;
66313: LD_ADDR_VAR 0 8
66317: PUSH
66318: LD_VAR 0 5
66322: PUSH
66323: LD_INT 2
66325: ARRAY
66326: ST_TO_ADDR
// break ;
66327: GO 66331
// end ;
66329: GO 66289
66331: POP
66332: POP
// if not weapon then
66333: LD_VAR 0 8
66337: NOT
66338: IFFALSE 66342
// continue ;
66340: GO 66238
// for k in factories do
66342: LD_ADDR_VAR 0 6
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: FOR_IN
66353: IFFALSE 66418
// begin weapons := AvailableWeaponList ( k ) ;
66355: LD_ADDR_VAR 0 9
66359: PUSH
66360: LD_VAR 0 6
66364: PPUSH
66365: CALL_OW 478
66369: ST_TO_ADDR
// if not weapons then
66370: LD_VAR 0 9
66374: NOT
66375: IFFALSE 66379
// continue ;
66377: GO 66352
// if weapon in weapons then
66379: LD_VAR 0 8
66383: PUSH
66384: LD_VAR 0 9
66388: IN
66389: IFFALSE 66416
// begin result := [ i , weapon ] ;
66391: LD_ADDR_VAR 0 3
66395: PUSH
66396: LD_VAR 0 4
66400: PUSH
66401: LD_VAR 0 8
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: ST_TO_ADDR
// exit ;
66410: POP
66411: POP
66412: POP
66413: POP
66414: GO 66424
// end ; end ;
66416: GO 66352
66418: POP
66419: POP
// end ;
66420: GO 66238
66422: POP
66423: POP
// end ;
66424: LD_VAR 0 3
66428: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66429: LD_INT 0
66431: PPUSH
// if not side or side > 8 then
66432: LD_VAR 0 3
66436: NOT
66437: PUSH
66438: LD_VAR 0 3
66442: PUSH
66443: LD_INT 8
66445: GREATER
66446: OR
66447: IFFALSE 66451
// exit ;
66449: GO 66510
// if not range then
66451: LD_VAR 0 4
66455: NOT
66456: IFFALSE 66467
// range := - 12 ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: LD_INT 12
66465: NEG
66466: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66467: LD_VAR 0 1
66471: PPUSH
66472: LD_VAR 0 2
66476: PPUSH
66477: LD_VAR 0 3
66481: PPUSH
66482: LD_VAR 0 4
66486: PPUSH
66487: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66491: LD_VAR 0 1
66495: PPUSH
66496: LD_VAR 0 2
66500: PPUSH
66501: LD_VAR 0 3
66505: PPUSH
66506: CALL_OW 331
// end ;
66510: LD_VAR 0 5
66514: RET
// export function Video ( mode ) ; begin
66515: LD_INT 0
66517: PPUSH
// ingame_video = mode ;
66518: LD_ADDR_OWVAR 52
66522: PUSH
66523: LD_VAR 0 1
66527: ST_TO_ADDR
// interface_hidden = mode ;
66528: LD_ADDR_OWVAR 54
66532: PUSH
66533: LD_VAR 0 1
66537: ST_TO_ADDR
// end ;
66538: LD_VAR 0 2
66542: RET
// export function Join ( array , element ) ; begin
66543: LD_INT 0
66545: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66546: LD_ADDR_VAR 0 3
66550: PUSH
66551: LD_VAR 0 1
66555: PPUSH
66556: LD_VAR 0 1
66560: PUSH
66561: LD_INT 1
66563: PLUS
66564: PPUSH
66565: LD_VAR 0 2
66569: PPUSH
66570: CALL_OW 1
66574: ST_TO_ADDR
// end ;
66575: LD_VAR 0 3
66579: RET
// export function JoinUnion ( array , element ) ; begin
66580: LD_INT 0
66582: PPUSH
// result := array union element ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_VAR 0 2
66597: UNION
66598: ST_TO_ADDR
// end ;
66599: LD_VAR 0 3
66603: RET
// export function GetBehemoths ( side ) ; begin
66604: LD_INT 0
66606: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66607: LD_ADDR_VAR 0 2
66611: PUSH
66612: LD_INT 22
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 31
66626: PUSH
66627: LD_INT 25
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PPUSH
66638: CALL_OW 69
66642: ST_TO_ADDR
// end ;
66643: LD_VAR 0 2
66647: RET
// export function Shuffle ( array ) ; var i , index ; begin
66648: LD_INT 0
66650: PPUSH
66651: PPUSH
66652: PPUSH
// result := [ ] ;
66653: LD_ADDR_VAR 0 2
66657: PUSH
66658: EMPTY
66659: ST_TO_ADDR
// if not array then
66660: LD_VAR 0 1
66664: NOT
66665: IFFALSE 66669
// exit ;
66667: GO 66768
// Randomize ;
66669: CALL_OW 10
// for i = array downto 1 do
66673: LD_ADDR_VAR 0 3
66677: PUSH
66678: DOUBLE
66679: LD_VAR 0 1
66683: INC
66684: ST_TO_ADDR
66685: LD_INT 1
66687: PUSH
66688: FOR_DOWNTO
66689: IFFALSE 66766
// begin index := rand ( 1 , array ) ;
66691: LD_ADDR_VAR 0 4
66695: PUSH
66696: LD_INT 1
66698: PPUSH
66699: LD_VAR 0 1
66703: PPUSH
66704: CALL_OW 12
66708: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66709: LD_ADDR_VAR 0 2
66713: PUSH
66714: LD_VAR 0 2
66718: PPUSH
66719: LD_VAR 0 2
66723: PUSH
66724: LD_INT 1
66726: PLUS
66727: PPUSH
66728: LD_VAR 0 1
66732: PUSH
66733: LD_VAR 0 4
66737: ARRAY
66738: PPUSH
66739: CALL_OW 2
66743: ST_TO_ADDR
// array := Delete ( array , index ) ;
66744: LD_ADDR_VAR 0 1
66748: PUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 4
66758: PPUSH
66759: CALL_OW 3
66763: ST_TO_ADDR
// end ;
66764: GO 66688
66766: POP
66767: POP
// end ;
66768: LD_VAR 0 2
66772: RET
// export function GetBaseMaterials ( base ) ; begin
66773: LD_INT 0
66775: PPUSH
// result := [ 0 , 0 , 0 ] ;
66776: LD_ADDR_VAR 0 2
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: ST_TO_ADDR
// if not base then
66795: LD_VAR 0 1
66799: NOT
66800: IFFALSE 66804
// exit ;
66802: GO 66853
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66804: LD_ADDR_VAR 0 2
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: LD_INT 1
66816: PPUSH
66817: CALL_OW 275
66821: PUSH
66822: LD_VAR 0 1
66826: PPUSH
66827: LD_INT 2
66829: PPUSH
66830: CALL_OW 275
66834: PUSH
66835: LD_VAR 0 1
66839: PPUSH
66840: LD_INT 3
66842: PPUSH
66843: CALL_OW 275
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: ST_TO_ADDR
// end ;
66853: LD_VAR 0 2
66857: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66858: LD_INT 0
66860: PPUSH
66861: PPUSH
// result := array ;
66862: LD_ADDR_VAR 0 3
66866: PUSH
66867: LD_VAR 0 1
66871: ST_TO_ADDR
// if size > 0 then
66872: LD_VAR 0 2
66876: PUSH
66877: LD_INT 0
66879: GREATER
66880: IFFALSE 66926
// for i := array downto size do
66882: LD_ADDR_VAR 0 4
66886: PUSH
66887: DOUBLE
66888: LD_VAR 0 1
66892: INC
66893: ST_TO_ADDR
66894: LD_VAR 0 2
66898: PUSH
66899: FOR_DOWNTO
66900: IFFALSE 66924
// result := Delete ( result , result ) ;
66902: LD_ADDR_VAR 0 3
66906: PUSH
66907: LD_VAR 0 3
66911: PPUSH
66912: LD_VAR 0 3
66916: PPUSH
66917: CALL_OW 3
66921: ST_TO_ADDR
66922: GO 66899
66924: POP
66925: POP
// end ;
66926: LD_VAR 0 3
66930: RET
// export function ComExit ( unit ) ; var tmp ; begin
66931: LD_INT 0
66933: PPUSH
66934: PPUSH
// if not IsInUnit ( unit ) then
66935: LD_VAR 0 1
66939: PPUSH
66940: CALL_OW 310
66944: NOT
66945: IFFALSE 66949
// exit ;
66947: GO 67009
// tmp := IsInUnit ( unit ) ;
66949: LD_ADDR_VAR 0 3
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: CALL_OW 310
66963: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66964: LD_VAR 0 3
66968: PPUSH
66969: CALL_OW 247
66973: PUSH
66974: LD_INT 2
66976: EQUAL
66977: IFFALSE 66990
// ComExitVehicle ( unit ) else
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 121
66988: GO 66999
// ComExitBuilding ( unit ) ;
66990: LD_VAR 0 1
66994: PPUSH
66995: CALL_OW 122
// result := tmp ;
66999: LD_ADDR_VAR 0 2
67003: PUSH
67004: LD_VAR 0 3
67008: ST_TO_ADDR
// end ;
67009: LD_VAR 0 2
67013: RET
// export function ComExitAll ( units ) ; var i ; begin
67014: LD_INT 0
67016: PPUSH
67017: PPUSH
// if not units then
67018: LD_VAR 0 1
67022: NOT
67023: IFFALSE 67027
// exit ;
67025: GO 67053
// for i in units do
67027: LD_ADDR_VAR 0 3
67031: PUSH
67032: LD_VAR 0 1
67036: PUSH
67037: FOR_IN
67038: IFFALSE 67051
// ComExit ( i ) ;
67040: LD_VAR 0 3
67044: PPUSH
67045: CALL 66931 0 1
67049: GO 67037
67051: POP
67052: POP
// end ;
67053: LD_VAR 0 2
67057: RET
// export function ResetHc ; begin
67058: LD_INT 0
67060: PPUSH
// InitHc ;
67061: CALL_OW 19
// hc_importance := 0 ;
67065: LD_ADDR_OWVAR 32
67069: PUSH
67070: LD_INT 0
67072: ST_TO_ADDR
// end ;
67073: LD_VAR 0 1
67077: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67078: LD_INT 0
67080: PPUSH
67081: PPUSH
67082: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67083: LD_ADDR_VAR 0 6
67087: PUSH
67088: LD_VAR 0 1
67092: PUSH
67093: LD_VAR 0 3
67097: PLUS
67098: PUSH
67099: LD_INT 2
67101: DIV
67102: ST_TO_ADDR
// if _x < 0 then
67103: LD_VAR 0 6
67107: PUSH
67108: LD_INT 0
67110: LESS
67111: IFFALSE 67128
// _x := _x * - 1 ;
67113: LD_ADDR_VAR 0 6
67117: PUSH
67118: LD_VAR 0 6
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: MUL
67127: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67128: LD_ADDR_VAR 0 7
67132: PUSH
67133: LD_VAR 0 2
67137: PUSH
67138: LD_VAR 0 4
67142: PLUS
67143: PUSH
67144: LD_INT 2
67146: DIV
67147: ST_TO_ADDR
// if _y < 0 then
67148: LD_VAR 0 7
67152: PUSH
67153: LD_INT 0
67155: LESS
67156: IFFALSE 67173
// _y := _y * - 1 ;
67158: LD_ADDR_VAR 0 7
67162: PUSH
67163: LD_VAR 0 7
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: MUL
67172: ST_TO_ADDR
// result := [ _x , _y ] ;
67173: LD_ADDR_VAR 0 5
67177: PUSH
67178: LD_VAR 0 6
67182: PUSH
67183: LD_VAR 0 7
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: ST_TO_ADDR
// end ;
67192: LD_VAR 0 5
67196: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
67201: PPUSH
67202: PPUSH
// task := GetTaskList ( unit ) ;
67203: LD_ADDR_VAR 0 7
67207: PUSH
67208: LD_VAR 0 1
67212: PPUSH
67213: CALL_OW 437
67217: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67218: LD_VAR 0 7
67222: NOT
67223: PUSH
67224: LD_VAR 0 1
67228: PPUSH
67229: LD_VAR 0 2
67233: PPUSH
67234: CALL_OW 308
67238: NOT
67239: AND
67240: IFFALSE 67244
// exit ;
67242: GO 67362
// if IsInArea ( unit , area ) then
67244: LD_VAR 0 1
67248: PPUSH
67249: LD_VAR 0 2
67253: PPUSH
67254: CALL_OW 308
67258: IFFALSE 67276
// begin ComMoveToArea ( unit , goAway ) ;
67260: LD_VAR 0 1
67264: PPUSH
67265: LD_VAR 0 3
67269: PPUSH
67270: CALL_OW 113
// exit ;
67274: GO 67362
// end ; if task [ 1 ] [ 1 ] <> M then
67276: LD_VAR 0 7
67280: PUSH
67281: LD_INT 1
67283: ARRAY
67284: PUSH
67285: LD_INT 1
67287: ARRAY
67288: PUSH
67289: LD_STRING M
67291: NONEQUAL
67292: IFFALSE 67296
// exit ;
67294: GO 67362
// x := task [ 1 ] [ 2 ] ;
67296: LD_ADDR_VAR 0 5
67300: PUSH
67301: LD_VAR 0 7
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: PUSH
67310: LD_INT 2
67312: ARRAY
67313: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67314: LD_ADDR_VAR 0 6
67318: PUSH
67319: LD_VAR 0 7
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PUSH
67328: LD_INT 3
67330: ARRAY
67331: ST_TO_ADDR
// if InArea ( x , y , area ) then
67332: LD_VAR 0 5
67336: PPUSH
67337: LD_VAR 0 6
67341: PPUSH
67342: LD_VAR 0 2
67346: PPUSH
67347: CALL_OW 309
67351: IFFALSE 67362
// ComStop ( unit ) ;
67353: LD_VAR 0 1
67357: PPUSH
67358: CALL_OW 141
// end ;
67362: LD_VAR 0 4
67366: RET
// export function Abs ( value ) ; begin
67367: LD_INT 0
67369: PPUSH
// result := value ;
67370: LD_ADDR_VAR 0 2
67374: PUSH
67375: LD_VAR 0 1
67379: ST_TO_ADDR
// if value < 0 then
67380: LD_VAR 0 1
67384: PUSH
67385: LD_INT 0
67387: LESS
67388: IFFALSE 67405
// result := value * - 1 ;
67390: LD_ADDR_VAR 0 2
67394: PUSH
67395: LD_VAR 0 1
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: MUL
67404: ST_TO_ADDR
// end ;
67405: LD_VAR 0 2
67409: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
67414: PPUSH
67415: PPUSH
67416: PPUSH
67417: PPUSH
67418: PPUSH
67419: PPUSH
// if not unit or not building then
67420: LD_VAR 0 1
67424: NOT
67425: PUSH
67426: LD_VAR 0 2
67430: NOT
67431: OR
67432: IFFALSE 67436
// exit ;
67434: GO 67662
// x := GetX ( building ) ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_VAR 0 2
67445: PPUSH
67446: CALL_OW 250
67450: ST_TO_ADDR
// y := GetY ( building ) ;
67451: LD_ADDR_VAR 0 6
67455: PUSH
67456: LD_VAR 0 2
67460: PPUSH
67461: CALL_OW 251
67465: ST_TO_ADDR
// d := GetDir ( building ) ;
67466: LD_ADDR_VAR 0 8
67470: PUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 254
67480: ST_TO_ADDR
// r := 4 ;
67481: LD_ADDR_VAR 0 9
67485: PUSH
67486: LD_INT 4
67488: ST_TO_ADDR
// for i := 1 to 5 do
67489: LD_ADDR_VAR 0 10
67493: PUSH
67494: DOUBLE
67495: LD_INT 1
67497: DEC
67498: ST_TO_ADDR
67499: LD_INT 5
67501: PUSH
67502: FOR_TO
67503: IFFALSE 67660
// begin _x := ShiftX ( x , d , r + i ) ;
67505: LD_ADDR_VAR 0 5
67509: PUSH
67510: LD_VAR 0 4
67514: PPUSH
67515: LD_VAR 0 8
67519: PPUSH
67520: LD_VAR 0 9
67524: PUSH
67525: LD_VAR 0 10
67529: PLUS
67530: PPUSH
67531: CALL_OW 272
67535: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67536: LD_ADDR_VAR 0 7
67540: PUSH
67541: LD_VAR 0 6
67545: PPUSH
67546: LD_VAR 0 8
67550: PPUSH
67551: LD_VAR 0 9
67555: PUSH
67556: LD_VAR 0 10
67560: PLUS
67561: PPUSH
67562: CALL_OW 273
67566: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67567: LD_VAR 0 5
67571: PPUSH
67572: LD_VAR 0 7
67576: PPUSH
67577: CALL_OW 488
67581: PUSH
67582: LD_VAR 0 5
67586: PPUSH
67587: LD_VAR 0 7
67591: PPUSH
67592: CALL_OW 428
67596: PPUSH
67597: CALL_OW 247
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: IN
67612: NOT
67613: AND
67614: IFFALSE 67658
// begin ComMoveXY ( unit , _x , _y ) ;
67616: LD_VAR 0 1
67620: PPUSH
67621: LD_VAR 0 5
67625: PPUSH
67626: LD_VAR 0 7
67630: PPUSH
67631: CALL_OW 111
// result := [ _x , _y ] ;
67635: LD_ADDR_VAR 0 3
67639: PUSH
67640: LD_VAR 0 5
67644: PUSH
67645: LD_VAR 0 7
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// exit ;
67654: POP
67655: POP
67656: GO 67662
// end ; end ;
67658: GO 67502
67660: POP
67661: POP
// end ;
67662: LD_VAR 0 3
67666: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67667: LD_INT 0
67669: PPUSH
67670: PPUSH
67671: PPUSH
// result := 0 ;
67672: LD_ADDR_VAR 0 3
67676: PUSH
67677: LD_INT 0
67679: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67680: LD_VAR 0 1
67684: PUSH
67685: LD_INT 0
67687: LESS
67688: PUSH
67689: LD_VAR 0 1
67693: PUSH
67694: LD_INT 8
67696: GREATER
67697: OR
67698: PUSH
67699: LD_VAR 0 2
67703: PUSH
67704: LD_INT 0
67706: LESS
67707: OR
67708: PUSH
67709: LD_VAR 0 2
67713: PUSH
67714: LD_INT 8
67716: GREATER
67717: OR
67718: IFFALSE 67722
// exit ;
67720: GO 67797
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67722: LD_ADDR_VAR 0 4
67726: PUSH
67727: LD_INT 22
67729: PUSH
67730: LD_VAR 0 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PPUSH
67739: CALL_OW 69
67743: PUSH
67744: FOR_IN
67745: IFFALSE 67795
// begin un := UnitShoot ( i ) ;
67747: LD_ADDR_VAR 0 5
67751: PUSH
67752: LD_VAR 0 4
67756: PPUSH
67757: CALL_OW 504
67761: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67762: LD_VAR 0 5
67766: PPUSH
67767: CALL_OW 255
67771: PUSH
67772: LD_VAR 0 1
67776: EQUAL
67777: IFFALSE 67793
// begin result := un ;
67779: LD_ADDR_VAR 0 3
67783: PUSH
67784: LD_VAR 0 5
67788: ST_TO_ADDR
// exit ;
67789: POP
67790: POP
67791: GO 67797
// end ; end ;
67793: GO 67744
67795: POP
67796: POP
// end ;
67797: LD_VAR 0 3
67801: RET
// export function GetCargoBay ( units ) ; begin
67802: LD_INT 0
67804: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67805: LD_ADDR_VAR 0 2
67809: PUSH
67810: LD_VAR 0 1
67814: PPUSH
67815: LD_INT 2
67817: PUSH
67818: LD_INT 34
67820: PUSH
67821: LD_INT 12
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 34
67830: PUSH
67831: LD_INT 51
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 34
67840: PUSH
67841: LD_INT 32
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 34
67850: PUSH
67851: LD_EXP 20
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: PPUSH
67867: CALL_OW 72
67871: ST_TO_ADDR
// end ;
67872: LD_VAR 0 2
67876: RET
// export function Negate ( value ) ; begin
67877: LD_INT 0
67879: PPUSH
// result := not value ;
67880: LD_ADDR_VAR 0 2
67884: PUSH
67885: LD_VAR 0 1
67889: NOT
67890: ST_TO_ADDR
// end ;
67891: LD_VAR 0 2
67895: RET
// export function Inc ( value ) ; begin
67896: LD_INT 0
67898: PPUSH
// result := value + 1 ;
67899: LD_ADDR_VAR 0 2
67903: PUSH
67904: LD_VAR 0 1
67908: PUSH
67909: LD_INT 1
67911: PLUS
67912: ST_TO_ADDR
// end ;
67913: LD_VAR 0 2
67917: RET
// export function Dec ( value ) ; begin
67918: LD_INT 0
67920: PPUSH
// result := value - 1 ;
67921: LD_ADDR_VAR 0 2
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: LD_INT 1
67933: MINUS
67934: ST_TO_ADDR
// end ;
67935: LD_VAR 0 2
67939: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67940: LD_INT 0
67942: PPUSH
67943: PPUSH
67944: PPUSH
67945: PPUSH
67946: PPUSH
67947: PPUSH
67948: PPUSH
67949: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_VAR 0 2
67959: PPUSH
67960: CALL_OW 488
67964: NOT
67965: PUSH
67966: LD_VAR 0 3
67970: PPUSH
67971: LD_VAR 0 4
67975: PPUSH
67976: CALL_OW 488
67980: NOT
67981: OR
67982: IFFALSE 67995
// begin result := - 1 ;
67984: LD_ADDR_VAR 0 5
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: ST_TO_ADDR
// exit ;
67993: GO 68230
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67995: LD_ADDR_VAR 0 12
67999: PUSH
68000: LD_VAR 0 1
68004: PPUSH
68005: LD_VAR 0 2
68009: PPUSH
68010: LD_VAR 0 3
68014: PPUSH
68015: LD_VAR 0 4
68019: PPUSH
68020: CALL 67078 0 4
68024: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68025: LD_ADDR_VAR 0 11
68029: PUSH
68030: LD_VAR 0 1
68034: PPUSH
68035: LD_VAR 0 2
68039: PPUSH
68040: LD_VAR 0 12
68044: PUSH
68045: LD_INT 1
68047: ARRAY
68048: PPUSH
68049: LD_VAR 0 12
68053: PUSH
68054: LD_INT 2
68056: ARRAY
68057: PPUSH
68058: CALL_OW 298
68062: ST_TO_ADDR
// distance := 9999 ;
68063: LD_ADDR_VAR 0 10
68067: PUSH
68068: LD_INT 9999
68070: ST_TO_ADDR
// for i := 0 to 5 do
68071: LD_ADDR_VAR 0 6
68075: PUSH
68076: DOUBLE
68077: LD_INT 0
68079: DEC
68080: ST_TO_ADDR
68081: LD_INT 5
68083: PUSH
68084: FOR_TO
68085: IFFALSE 68228
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68087: LD_ADDR_VAR 0 7
68091: PUSH
68092: LD_VAR 0 1
68096: PPUSH
68097: LD_VAR 0 6
68101: PPUSH
68102: LD_VAR 0 11
68106: PPUSH
68107: CALL_OW 272
68111: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68112: LD_ADDR_VAR 0 8
68116: PUSH
68117: LD_VAR 0 2
68121: PPUSH
68122: LD_VAR 0 6
68126: PPUSH
68127: LD_VAR 0 11
68131: PPUSH
68132: CALL_OW 273
68136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68137: LD_VAR 0 7
68141: PPUSH
68142: LD_VAR 0 8
68146: PPUSH
68147: CALL_OW 488
68151: NOT
68152: IFFALSE 68156
// continue ;
68154: GO 68084
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68156: LD_ADDR_VAR 0 9
68160: PUSH
68161: LD_VAR 0 12
68165: PUSH
68166: LD_INT 1
68168: ARRAY
68169: PPUSH
68170: LD_VAR 0 12
68174: PUSH
68175: LD_INT 2
68177: ARRAY
68178: PPUSH
68179: LD_VAR 0 7
68183: PPUSH
68184: LD_VAR 0 8
68188: PPUSH
68189: CALL_OW 298
68193: ST_TO_ADDR
// if tmp < distance then
68194: LD_VAR 0 9
68198: PUSH
68199: LD_VAR 0 10
68203: LESS
68204: IFFALSE 68226
// begin result := i ;
68206: LD_ADDR_VAR 0 5
68210: PUSH
68211: LD_VAR 0 6
68215: ST_TO_ADDR
// distance := tmp ;
68216: LD_ADDR_VAR 0 10
68220: PUSH
68221: LD_VAR 0 9
68225: ST_TO_ADDR
// end ; end ;
68226: GO 68084
68228: POP
68229: POP
// end ;
68230: LD_VAR 0 5
68234: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68235: LD_INT 0
68237: PPUSH
68238: PPUSH
// if not driver or not IsInUnit ( driver ) then
68239: LD_VAR 0 1
68243: NOT
68244: PUSH
68245: LD_VAR 0 1
68249: PPUSH
68250: CALL_OW 310
68254: NOT
68255: OR
68256: IFFALSE 68260
// exit ;
68258: GO 68350
// vehicle := IsInUnit ( driver ) ;
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: CALL_OW 310
68274: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_STRING \
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: PUSH
68310: LD_STRING E
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_VAR 0 3
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PPUSH
68346: CALL_OW 446
// end ;
68350: LD_VAR 0 2
68354: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68355: LD_INT 0
68357: PPUSH
68358: PPUSH
// if not driver or not IsInUnit ( driver ) then
68359: LD_VAR 0 1
68363: NOT
68364: PUSH
68365: LD_VAR 0 1
68369: PPUSH
68370: CALL_OW 310
68374: NOT
68375: OR
68376: IFFALSE 68380
// exit ;
68378: GO 68470
// vehicle := IsInUnit ( driver ) ;
68380: LD_ADDR_VAR 0 3
68384: PUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 310
68394: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68395: LD_VAR 0 1
68399: PPUSH
68400: LD_STRING \
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: PUSH
68430: LD_STRING E
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_VAR 0 3
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PPUSH
68466: CALL_OW 447
// end ;
68470: LD_VAR 0 2
68474: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68475: LD_INT 0
68477: PPUSH
68478: PPUSH
68479: PPUSH
// tmp := [ ] ;
68480: LD_ADDR_VAR 0 5
68484: PUSH
68485: EMPTY
68486: ST_TO_ADDR
// for i in units do
68487: LD_ADDR_VAR 0 4
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: FOR_IN
68498: IFFALSE 68536
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68500: LD_ADDR_VAR 0 5
68504: PUSH
68505: LD_VAR 0 5
68509: PPUSH
68510: LD_VAR 0 5
68514: PUSH
68515: LD_INT 1
68517: PLUS
68518: PPUSH
68519: LD_VAR 0 4
68523: PPUSH
68524: CALL_OW 256
68528: PPUSH
68529: CALL_OW 2
68533: ST_TO_ADDR
68534: GO 68497
68536: POP
68537: POP
// if not tmp then
68538: LD_VAR 0 5
68542: NOT
68543: IFFALSE 68547
// exit ;
68545: GO 68595
// if asc then
68547: LD_VAR 0 2
68551: IFFALSE 68575
// result := SortListByListAsc ( units , tmp ) else
68553: LD_ADDR_VAR 0 3
68557: PUSH
68558: LD_VAR 0 1
68562: PPUSH
68563: LD_VAR 0 5
68567: PPUSH
68568: CALL_OW 76
68572: ST_TO_ADDR
68573: GO 68595
// result := SortListByListDesc ( units , tmp ) ;
68575: LD_ADDR_VAR 0 3
68579: PUSH
68580: LD_VAR 0 1
68584: PPUSH
68585: LD_VAR 0 5
68589: PPUSH
68590: CALL_OW 77
68594: ST_TO_ADDR
// end ;
68595: LD_VAR 0 3
68599: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68600: LD_INT 0
68602: PPUSH
68603: PPUSH
// task := GetTaskList ( mech ) ;
68604: LD_ADDR_VAR 0 4
68608: PUSH
68609: LD_VAR 0 1
68613: PPUSH
68614: CALL_OW 437
68618: ST_TO_ADDR
// if not task then
68619: LD_VAR 0 4
68623: NOT
68624: IFFALSE 68628
// exit ;
68626: GO 68670
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: LD_VAR 0 4
68637: PUSH
68638: LD_INT 1
68640: ARRAY
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: PUSH
68646: LD_STRING r
68648: EQUAL
68649: PUSH
68650: LD_VAR 0 4
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PUSH
68659: LD_INT 4
68661: ARRAY
68662: PUSH
68663: LD_VAR 0 2
68667: EQUAL
68668: AND
68669: ST_TO_ADDR
// end ;
68670: LD_VAR 0 3
68674: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68675: LD_INT 0
68677: PPUSH
// SetDir ( unit , d ) ;
68678: LD_VAR 0 1
68682: PPUSH
68683: LD_VAR 0 4
68687: PPUSH
68688: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68692: LD_VAR 0 1
68696: PPUSH
68697: LD_VAR 0 2
68701: PPUSH
68702: LD_VAR 0 3
68706: PPUSH
68707: LD_VAR 0 5
68711: PPUSH
68712: CALL_OW 48
// end ;
68716: LD_VAR 0 6
68720: RET
// export function ToNaturalNumber ( number ) ; begin
68721: LD_INT 0
68723: PPUSH
// result := number div 1 ;
68724: LD_ADDR_VAR 0 2
68728: PUSH
68729: LD_VAR 0 1
68733: PUSH
68734: LD_INT 1
68736: DIV
68737: ST_TO_ADDR
// if number < 0 then
68738: LD_VAR 0 1
68742: PUSH
68743: LD_INT 0
68745: LESS
68746: IFFALSE 68756
// result := 0 ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// end ;
68756: LD_VAR 0 2
68760: RET
// export function SortByClass ( units , class ) ; var un ; begin
68761: LD_INT 0
68763: PPUSH
68764: PPUSH
// if not units or not class then
68765: LD_VAR 0 1
68769: NOT
68770: PUSH
68771: LD_VAR 0 2
68775: NOT
68776: OR
68777: IFFALSE 68781
// exit ;
68779: GO 68876
// result := [ ] ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: EMPTY
68787: ST_TO_ADDR
// for un in units do
68788: LD_ADDR_VAR 0 4
68792: PUSH
68793: LD_VAR 0 1
68797: PUSH
68798: FOR_IN
68799: IFFALSE 68874
// if GetClass ( un ) = class then
68801: LD_VAR 0 4
68805: PPUSH
68806: CALL_OW 257
68810: PUSH
68811: LD_VAR 0 2
68815: EQUAL
68816: IFFALSE 68843
// result := Insert ( result , 1 , un ) else
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_VAR 0 3
68827: PPUSH
68828: LD_INT 1
68830: PPUSH
68831: LD_VAR 0 4
68835: PPUSH
68836: CALL_OW 2
68840: ST_TO_ADDR
68841: GO 68872
// result := Replace ( result , result + 1 , un ) ;
68843: LD_ADDR_VAR 0 3
68847: PUSH
68848: LD_VAR 0 3
68852: PPUSH
68853: LD_VAR 0 3
68857: PUSH
68858: LD_INT 1
68860: PLUS
68861: PPUSH
68862: LD_VAR 0 4
68866: PPUSH
68867: CALL_OW 1
68871: ST_TO_ADDR
68872: GO 68798
68874: POP
68875: POP
// end ;
68876: LD_VAR 0 3
68880: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68881: LD_INT 0
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
68888: PPUSH
68889: PPUSH
// result := [ ] ;
68890: LD_ADDR_VAR 0 4
68894: PUSH
68895: EMPTY
68896: ST_TO_ADDR
// if x - r < 0 then
68897: LD_VAR 0 1
68901: PUSH
68902: LD_VAR 0 3
68906: MINUS
68907: PUSH
68908: LD_INT 0
68910: LESS
68911: IFFALSE 68923
// min_x := 0 else
68913: LD_ADDR_VAR 0 8
68917: PUSH
68918: LD_INT 0
68920: ST_TO_ADDR
68921: GO 68939
// min_x := x - r ;
68923: LD_ADDR_VAR 0 8
68927: PUSH
68928: LD_VAR 0 1
68932: PUSH
68933: LD_VAR 0 3
68937: MINUS
68938: ST_TO_ADDR
// if y - r < 0 then
68939: LD_VAR 0 2
68943: PUSH
68944: LD_VAR 0 3
68948: MINUS
68949: PUSH
68950: LD_INT 0
68952: LESS
68953: IFFALSE 68965
// min_y := 0 else
68955: LD_ADDR_VAR 0 7
68959: PUSH
68960: LD_INT 0
68962: ST_TO_ADDR
68963: GO 68981
// min_y := y - r ;
68965: LD_ADDR_VAR 0 7
68969: PUSH
68970: LD_VAR 0 2
68974: PUSH
68975: LD_VAR 0 3
68979: MINUS
68980: ST_TO_ADDR
// max_x := x + r ;
68981: LD_ADDR_VAR 0 9
68985: PUSH
68986: LD_VAR 0 1
68990: PUSH
68991: LD_VAR 0 3
68995: PLUS
68996: ST_TO_ADDR
// max_y := y + r ;
68997: LD_ADDR_VAR 0 10
69001: PUSH
69002: LD_VAR 0 2
69006: PUSH
69007: LD_VAR 0 3
69011: PLUS
69012: ST_TO_ADDR
// for _x = min_x to max_x do
69013: LD_ADDR_VAR 0 5
69017: PUSH
69018: DOUBLE
69019: LD_VAR 0 8
69023: DEC
69024: ST_TO_ADDR
69025: LD_VAR 0 9
69029: PUSH
69030: FOR_TO
69031: IFFALSE 69132
// for _y = min_y to max_y do
69033: LD_ADDR_VAR 0 6
69037: PUSH
69038: DOUBLE
69039: LD_VAR 0 7
69043: DEC
69044: ST_TO_ADDR
69045: LD_VAR 0 10
69049: PUSH
69050: FOR_TO
69051: IFFALSE 69128
// begin if not ValidHex ( _x , _y ) then
69053: LD_VAR 0 5
69057: PPUSH
69058: LD_VAR 0 6
69062: PPUSH
69063: CALL_OW 488
69067: NOT
69068: IFFALSE 69072
// continue ;
69070: GO 69050
// if GetResourceTypeXY ( _x , _y ) then
69072: LD_VAR 0 5
69076: PPUSH
69077: LD_VAR 0 6
69081: PPUSH
69082: CALL_OW 283
69086: IFFALSE 69126
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69088: LD_ADDR_VAR 0 4
69092: PUSH
69093: LD_VAR 0 4
69097: PPUSH
69098: LD_VAR 0 4
69102: PUSH
69103: LD_INT 1
69105: PLUS
69106: PPUSH
69107: LD_VAR 0 5
69111: PUSH
69112: LD_VAR 0 6
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PPUSH
69121: CALL_OW 1
69125: ST_TO_ADDR
// end ;
69126: GO 69050
69128: POP
69129: POP
69130: GO 69030
69132: POP
69133: POP
// end ;
69134: LD_VAR 0 4
69138: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69139: LD_INT 0
69141: PPUSH
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
// if not units then
69149: LD_VAR 0 1
69153: NOT
69154: IFFALSE 69158
// exit ;
69156: GO 69583
// result := UnitFilter ( units , [ f_ok ] ) ;
69158: LD_ADDR_VAR 0 3
69162: PUSH
69163: LD_VAR 0 1
69167: PPUSH
69168: LD_INT 50
69170: PUSH
69171: EMPTY
69172: LIST
69173: PPUSH
69174: CALL_OW 72
69178: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69179: LD_ADDR_VAR 0 8
69183: PUSH
69184: LD_VAR 0 1
69188: PUSH
69189: LD_INT 1
69191: ARRAY
69192: PPUSH
69193: CALL_OW 255
69197: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69198: LD_ADDR_VAR 0 10
69202: PUSH
69203: LD_INT 29
69205: PUSH
69206: LD_EXP 23
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: ST_TO_ADDR
// if not result then
69215: LD_VAR 0 3
69219: NOT
69220: IFFALSE 69224
// exit ;
69222: GO 69583
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69224: LD_ADDR_VAR 0 5
69228: PUSH
69229: LD_INT 81
69231: PUSH
69232: LD_VAR 0 8
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PPUSH
69241: CALL_OW 69
69245: ST_TO_ADDR
// for i in result do
69246: LD_ADDR_VAR 0 4
69250: PUSH
69251: LD_VAR 0 3
69255: PUSH
69256: FOR_IN
69257: IFFALSE 69581
// begin tag := GetTag ( i ) + 1 ;
69259: LD_ADDR_VAR 0 9
69263: PUSH
69264: LD_VAR 0 4
69268: PPUSH
69269: CALL_OW 110
69273: PUSH
69274: LD_INT 1
69276: PLUS
69277: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69278: LD_ADDR_VAR 0 7
69282: PUSH
69283: LD_VAR 0 4
69287: PPUSH
69288: CALL_OW 250
69292: PPUSH
69293: LD_VAR 0 4
69297: PPUSH
69298: CALL_OW 251
69302: PPUSH
69303: LD_INT 6
69305: PPUSH
69306: CALL 68881 0 3
69310: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69311: LD_VAR 0 7
69315: PUSH
69316: LD_VAR 0 4
69320: PPUSH
69321: CALL_OW 264
69325: PUSH
69326: LD_VAR 0 10
69330: IN
69331: NOT
69332: AND
69333: IFFALSE 69372
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69335: LD_VAR 0 4
69339: PPUSH
69340: LD_VAR 0 7
69344: PUSH
69345: LD_INT 1
69347: ARRAY
69348: PUSH
69349: LD_INT 1
69351: ARRAY
69352: PPUSH
69353: LD_VAR 0 7
69357: PUSH
69358: LD_INT 1
69360: ARRAY
69361: PUSH
69362: LD_INT 2
69364: ARRAY
69365: PPUSH
69366: CALL_OW 116
69370: GO 69579
// if path > tag then
69372: LD_VAR 0 2
69376: PUSH
69377: LD_VAR 0 9
69381: GREATER
69382: IFFALSE 69549
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69384: LD_ADDR_VAR 0 6
69388: PUSH
69389: LD_VAR 0 5
69393: PPUSH
69394: LD_INT 91
69396: PUSH
69397: LD_VAR 0 4
69401: PUSH
69402: LD_INT 12
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: LIST
69409: PPUSH
69410: CALL_OW 72
69414: ST_TO_ADDR
// if nearEnemy then
69415: LD_VAR 0 6
69419: IFFALSE 69447
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69421: LD_VAR 0 4
69425: PPUSH
69426: LD_VAR 0 6
69430: PPUSH
69431: LD_VAR 0 4
69435: PPUSH
69436: CALL_OW 74
69440: PPUSH
69441: CALL_OW 115
69445: GO 69547
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69447: LD_VAR 0 4
69451: PPUSH
69452: LD_VAR 0 2
69456: PUSH
69457: LD_VAR 0 9
69461: ARRAY
69462: PUSH
69463: LD_INT 1
69465: ARRAY
69466: PPUSH
69467: LD_VAR 0 2
69471: PUSH
69472: LD_VAR 0 9
69476: ARRAY
69477: PUSH
69478: LD_INT 2
69480: ARRAY
69481: PPUSH
69482: CALL_OW 297
69486: PUSH
69487: LD_INT 6
69489: GREATER
69490: IFFALSE 69533
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69492: LD_VAR 0 4
69496: PPUSH
69497: LD_VAR 0 2
69501: PUSH
69502: LD_VAR 0 9
69506: ARRAY
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PPUSH
69512: LD_VAR 0 2
69516: PUSH
69517: LD_VAR 0 9
69521: ARRAY
69522: PUSH
69523: LD_INT 2
69525: ARRAY
69526: PPUSH
69527: CALL_OW 114
69531: GO 69547
// SetTag ( i , tag ) ;
69533: LD_VAR 0 4
69537: PPUSH
69538: LD_VAR 0 9
69542: PPUSH
69543: CALL_OW 109
// end else
69547: GO 69579
// if enemy then
69549: LD_VAR 0 5
69553: IFFALSE 69579
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69555: LD_VAR 0 4
69559: PPUSH
69560: LD_VAR 0 5
69564: PPUSH
69565: LD_VAR 0 4
69569: PPUSH
69570: CALL_OW 74
69574: PPUSH
69575: CALL_OW 115
// end ;
69579: GO 69256
69581: POP
69582: POP
// end ;
69583: LD_VAR 0 3
69587: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69588: LD_INT 0
69590: PPUSH
69591: PPUSH
69592: PPUSH
// if not unit or IsInUnit ( unit ) then
69593: LD_VAR 0 1
69597: NOT
69598: PUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL_OW 310
69608: OR
69609: IFFALSE 69613
// exit ;
69611: GO 69704
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69613: LD_ADDR_VAR 0 4
69617: PUSH
69618: LD_VAR 0 1
69622: PPUSH
69623: CALL_OW 250
69627: PPUSH
69628: LD_VAR 0 2
69632: PPUSH
69633: LD_INT 1
69635: PPUSH
69636: CALL_OW 272
69640: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69641: LD_ADDR_VAR 0 5
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: CALL_OW 251
69655: PPUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: LD_INT 1
69663: PPUSH
69664: CALL_OW 273
69668: ST_TO_ADDR
// if ValidHex ( x , y ) then
69669: LD_VAR 0 4
69673: PPUSH
69674: LD_VAR 0 5
69678: PPUSH
69679: CALL_OW 488
69683: IFFALSE 69704
// ComTurnXY ( unit , x , y ) ;
69685: LD_VAR 0 1
69689: PPUSH
69690: LD_VAR 0 4
69694: PPUSH
69695: LD_VAR 0 5
69699: PPUSH
69700: CALL_OW 118
// end ;
69704: LD_VAR 0 3
69708: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69709: LD_INT 0
69711: PPUSH
69712: PPUSH
// result := false ;
69713: LD_ADDR_VAR 0 3
69717: PUSH
69718: LD_INT 0
69720: ST_TO_ADDR
// if not units then
69721: LD_VAR 0 2
69725: NOT
69726: IFFALSE 69730
// exit ;
69728: GO 69775
// for i in units do
69730: LD_ADDR_VAR 0 4
69734: PUSH
69735: LD_VAR 0 2
69739: PUSH
69740: FOR_IN
69741: IFFALSE 69773
// if See ( side , i ) then
69743: LD_VAR 0 1
69747: PPUSH
69748: LD_VAR 0 4
69752: PPUSH
69753: CALL_OW 292
69757: IFFALSE 69771
// begin result := true ;
69759: LD_ADDR_VAR 0 3
69763: PUSH
69764: LD_INT 1
69766: ST_TO_ADDR
// exit ;
69767: POP
69768: POP
69769: GO 69775
// end ;
69771: GO 69740
69773: POP
69774: POP
// end ;
69775: LD_VAR 0 3
69779: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69780: LD_INT 0
69782: PPUSH
69783: PPUSH
69784: PPUSH
69785: PPUSH
// if not unit or not points then
69786: LD_VAR 0 1
69790: NOT
69791: PUSH
69792: LD_VAR 0 2
69796: NOT
69797: OR
69798: IFFALSE 69802
// exit ;
69800: GO 69892
// dist := 99999 ;
69802: LD_ADDR_VAR 0 5
69806: PUSH
69807: LD_INT 99999
69809: ST_TO_ADDR
// for i in points do
69810: LD_ADDR_VAR 0 4
69814: PUSH
69815: LD_VAR 0 2
69819: PUSH
69820: FOR_IN
69821: IFFALSE 69890
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69823: LD_ADDR_VAR 0 6
69827: PUSH
69828: LD_VAR 0 1
69832: PPUSH
69833: LD_VAR 0 4
69837: PUSH
69838: LD_INT 1
69840: ARRAY
69841: PPUSH
69842: LD_VAR 0 4
69846: PUSH
69847: LD_INT 2
69849: ARRAY
69850: PPUSH
69851: CALL_OW 297
69855: ST_TO_ADDR
// if tmpDist < dist then
69856: LD_VAR 0 6
69860: PUSH
69861: LD_VAR 0 5
69865: LESS
69866: IFFALSE 69888
// begin result := i ;
69868: LD_ADDR_VAR 0 3
69872: PUSH
69873: LD_VAR 0 4
69877: ST_TO_ADDR
// dist := tmpDist ;
69878: LD_ADDR_VAR 0 5
69882: PUSH
69883: LD_VAR 0 6
69887: ST_TO_ADDR
// end ; end ;
69888: GO 69820
69890: POP
69891: POP
// end ; end_of_file
69892: LD_VAR 0 3
69896: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69897: LD_VAR 0 1
69901: PUSH
69902: LD_INT 200
69904: DOUBLE
69905: GREATEREQUAL
69906: IFFALSE 69914
69908: LD_INT 299
69910: DOUBLE
69911: LESSEQUAL
69912: IFTRUE 69916
69914: GO 69948
69916: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69917: LD_VAR 0 1
69921: PPUSH
69922: LD_VAR 0 2
69926: PPUSH
69927: LD_VAR 0 3
69931: PPUSH
69932: LD_VAR 0 4
69936: PPUSH
69937: LD_VAR 0 5
69941: PPUSH
69942: CALL 25600 0 5
69946: GO 70025
69948: LD_INT 300
69950: DOUBLE
69951: GREATEREQUAL
69952: IFFALSE 69960
69954: LD_INT 399
69956: DOUBLE
69957: LESSEQUAL
69958: IFTRUE 69962
69960: GO 70024
69962: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_VAR 0 2
69972: PPUSH
69973: LD_VAR 0 3
69977: PPUSH
69978: LD_VAR 0 4
69982: PPUSH
69983: LD_VAR 0 5
69987: PPUSH
69988: LD_VAR 0 6
69992: PPUSH
69993: LD_VAR 0 7
69997: PPUSH
69998: LD_VAR 0 8
70002: PPUSH
70003: LD_VAR 0 9
70007: PPUSH
70008: LD_VAR 0 10
70012: PPUSH
70013: LD_VAR 0 11
70017: PPUSH
70018: CALL 23242 0 11
70022: GO 70025
70024: POP
// end ;
70025: PPOPN 11
70027: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70028: LD_VAR 0 1
70032: PPUSH
70033: LD_VAR 0 2
70037: PPUSH
70038: LD_VAR 0 3
70042: PPUSH
70043: LD_VAR 0 4
70047: PPUSH
70048: LD_VAR 0 5
70052: PPUSH
70053: CALL 25336 0 5
// end ; end_of_file
70057: PPOPN 5
70059: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70060: LD_VAR 0 1
70064: PPUSH
70065: LD_VAR 0 2
70069: PPUSH
70070: LD_VAR 0 3
70074: PPUSH
70075: LD_VAR 0 4
70079: PPUSH
70080: LD_VAR 0 5
70084: PPUSH
70085: LD_VAR 0 6
70089: PPUSH
70090: CALL 10935 0 6
// end ;
70094: PPOPN 6
70096: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70097: CALL 10910 0 0
// end ;
70101: PPOPN 1
70103: END
