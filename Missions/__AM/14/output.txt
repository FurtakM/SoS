// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1470 0 0
// PrepareDifficulty ;
 115: CALL 1766 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 27932 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 27932 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 27932 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 27932 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side = 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation = 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 27932 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1128: LD_INT 0
1130: PPUSH
// uc_nation := 3 ;
1131: LD_ADDR_OWVAR 21
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_side := 3 ;
1139: LD_ADDR_OWVAR 20
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// if Difficulty > 1 then
1147: LD_OWVAR 67
1151: PUSH
1152: LD_INT 1
1154: GREATER
1155: IFFALSE 1215
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 8
1168: PUSH
1169: LD_INT 9
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_OWVAR 67
1181: ARRAY
1182: PPUSH
1183: CALL_OW 380
// baseGuard := CreateHuman ;
1187: LD_ADDR_EXP 18
1191: PUSH
1192: CALL_OW 44
1196: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1197: LD_EXP 18
1201: PPUSH
1202: LD_INT 39
1204: PPUSH
1205: LD_INT 67
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1215: LD_INT 116
1217: PPUSH
1218: LD_INT 50
1220: PPUSH
1221: LD_INT 74
1223: PPUSH
1224: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1228: LD_INT 3
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 45
1236: PPUSH
1237: LD_INT 10
1239: PPUSH
1240: LD_INT 9
1242: PPUSH
1243: LD_INT 2
1245: PPUSH
1246: CALL 1656 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1250: LD_INT 3
1252: PPUSH
1253: LD_INT 3
1255: PPUSH
1256: LD_INT 22
1258: PPUSH
1259: LD_INT 10
1261: PPUSH
1262: LD_INT 2
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 1656 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1272: LD_INT 3
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 10
1283: PPUSH
1284: LD_INT 3
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: CALL 1656 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 3
1299: PPUSH
1300: LD_INT 40
1302: PPUSH
1303: LD_INT 10
1305: PPUSH
1306: LD_INT 3
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: CALL 1656 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1316: LD_INT 3
1318: PPUSH
1319: LD_INT 3
1321: PPUSH
1322: LD_INT 14
1324: PPUSH
1325: LD_INT 10
1327: PPUSH
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 1656 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: LD_INT 15
1346: PPUSH
1347: LD_INT 10
1349: PPUSH
1350: LD_INT 4
1352: PPUSH
1353: LD_INT 2
1355: PPUSH
1356: CALL 1656 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 ] [ Difficulty ] ) ;
1360: LD_INT 22
1362: PPUSH
1363: CALL_OW 274
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 3500
1373: PUSH
1374: LD_INT 4500
1376: PUSH
1377: LD_INT 6000
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: LIST
1384: PUSH
1385: LD_OWVAR 67
1389: ARRAY
1390: PPUSH
1391: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 ] [ Difficulty ] ) ;
1395: LD_INT 22
1397: PPUSH
1398: CALL_OW 274
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_INT 500
1408: PUSH
1409: LD_INT 1000
1411: PUSH
1412: LD_INT 2000
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_OWVAR 67
1424: ARRAY
1425: PPUSH
1426: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 ] [ Difficulty ] ) ;
1430: LD_INT 22
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 150
1443: PUSH
1444: LD_INT 250
1446: PUSH
1447: LD_INT 300
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_OWVAR 67
1459: ARRAY
1460: PPUSH
1461: CALL_OW 277
// end ; end_of_file
1465: LD_VAR 0 1
1469: RET
// export function CreateNature ; var i ; begin
1470: LD_INT 0
1472: PPUSH
1473: PPUSH
// uc_side := 0 ;
1474: LD_ADDR_OWVAR 20
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// uc_nation := 0 ;
1482: LD_ADDR_OWVAR 21
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// hc_class := class_apeman ;
1490: LD_ADDR_OWVAR 28
1494: PUSH
1495: LD_INT 12
1497: ST_TO_ADDR
// hc_gallery :=  ;
1498: LD_ADDR_OWVAR 33
1502: PUSH
1503: LD_STRING 
1505: ST_TO_ADDR
// hc_name :=  ;
1506: LD_ADDR_OWVAR 26
1510: PUSH
1511: LD_STRING 
1513: ST_TO_ADDR
// for i = 1 to 7 do
1514: LD_ADDR_VAR 0 2
1518: PUSH
1519: DOUBLE
1520: LD_INT 1
1522: DEC
1523: ST_TO_ADDR
1524: LD_INT 7
1526: PUSH
1527: FOR_TO
1528: IFFALSE 1609
// begin hc_class := class_apeman ;
1530: LD_ADDR_OWVAR 28
1534: PUSH
1535: LD_INT 12
1537: ST_TO_ADDR
// hc_gallery :=  ;
1538: LD_ADDR_OWVAR 33
1542: PUSH
1543: LD_STRING 
1545: ST_TO_ADDR
// hc_name :=  ;
1546: LD_ADDR_OWVAR 26
1550: PUSH
1551: LD_STRING 
1553: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1554: LD_ADDR_OWVAR 31
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 0
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1577: LD_ADDR_OWVAR 29
1581: PUSH
1582: LD_INT 11
1584: PUSH
1585: LD_INT 10
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1592: CALL_OW 44
1596: PPUSH
1597: LD_INT 16
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ;
1607: GO 1527
1609: POP
1610: POP
// end ;
1611: LD_VAR 0 1
1615: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1616: LD_INT 0
1618: PPUSH
1619: PPUSH
// for i in charactersList do
1620: LD_ADDR_VAR 0 4
1624: PUSH
1625: LD_VAR 0 1
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1649
// SaveCharacters ( i , ident ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 38
1647: GO 1630
1649: POP
1650: POP
// end ;
1651: LD_VAR 0 3
1655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1656: LD_INT 0
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
// for i = 1 to count do
1662: LD_ADDR_VAR 0 8
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_VAR 0 6
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1759
// begin uc_side = side ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_VAR 0 1
1689: ST_TO_ADDR
// uc_nation = nation ;
1690: LD_ADDR_OWVAR 21
1694: PUSH
1695: LD_VAR 0 2
1699: ST_TO_ADDR
// hc_gallery =  ;
1700: LD_ADDR_OWVAR 33
1704: PUSH
1705: LD_STRING 
1707: ST_TO_ADDR
// hc_name =  ;
1708: LD_ADDR_OWVAR 26
1712: PUSH
1713: LD_STRING 
1715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1716: LD_INT 0
1718: PPUSH
1719: LD_VAR 0 5
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 380
// un = CreateHuman ;
1733: LD_ADDR_VAR 0 10
1737: PUSH
1738: CALL_OW 44
1742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1743: LD_VAR 0 10
1747: PPUSH
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 52
// end ;
1757: GO 1677
1759: POP
1760: POP
// end ;
1761: LD_VAR 0 7
1765: RET
// export function PrepareDifficulty ; begin
1766: LD_INT 0
1768: PPUSH
// if difficulty = 1 then
1769: LD_OWVAR 67
1773: PUSH
1774: LD_INT 1
1776: EQUAL
1777: IFFALSE 1857
// begin SetTech ( 57 , 3 , state_disabled ) ;
1779: LD_INT 57
1781: PPUSH
1782: LD_INT 3
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1792: LD_INT 58
1794: PPUSH
1795: LD_INT 3
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1805: LD_INT 59
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1818: LD_INT 51
1820: PPUSH
1821: LD_INT 3
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1831: LD_INT 52
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1844: LD_INT 53
1846: PPUSH
1847: LD_INT 3
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 322
// end ; if difficulty = 2 then
1857: LD_OWVAR 67
1861: PUSH
1862: LD_INT 2
1864: EQUAL
1865: IFFALSE 1945
// begin SetTech ( 57 , 3 , state_enabled ) ;
1867: LD_INT 57
1869: PPUSH
1870: LD_INT 3
1872: PPUSH
1873: LD_INT 1
1875: PPUSH
1876: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1880: LD_INT 58
1882: PPUSH
1883: LD_INT 3
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1893: LD_INT 59
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1906: LD_INT 51
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: LD_INT 1
1914: PPUSH
1915: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1919: LD_INT 52
1921: PPUSH
1922: LD_INT 3
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1932: LD_INT 53
1934: PPUSH
1935: LD_INT 3
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 322
// end ; if difficulty = 3 then
1945: LD_OWVAR 67
1949: PUSH
1950: LD_INT 3
1952: EQUAL
1953: IFFALSE 2033
// begin SetTech ( 57 , 3 , state_enabled ) ;
1955: LD_INT 57
1957: PPUSH
1958: LD_INT 3
1960: PPUSH
1961: LD_INT 1
1963: PPUSH
1964: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1968: LD_INT 58
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 1
1976: PPUSH
1977: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1981: LD_INT 59
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1994: LD_INT 51
1996: PPUSH
1997: LD_INT 3
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2007: LD_INT 52
2009: PPUSH
2010: LD_INT 3
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2020: LD_INT 53
2022: PPUSH
2023: LD_INT 3
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 322
// end ; end ;
2033: LD_VAR 0 1
2037: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2038: LD_INT 0
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
2044: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2045: LD_ADDR_VAR 0 8
2049: PUSH
2050: LD_INT 48
2052: PUSH
2053: LD_INT 49
2055: PUSH
2056: LD_INT 50
2058: PUSH
2059: LD_INT 20
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 69
2067: PUSH
2068: LD_INT 39
2070: PUSH
2071: LD_INT 34
2073: PUSH
2074: LD_INT 40
2076: PUSH
2077: LD_INT 71
2079: PUSH
2080: LD_INT 57
2082: PUSH
2083: LD_INT 58
2085: PUSH
2086: LD_INT 44
2088: PUSH
2089: LD_INT 32
2091: PUSH
2092: LD_INT 27
2094: PUSH
2095: LD_INT 23
2097: PUSH
2098: LD_INT 33
2100: PUSH
2101: LD_INT 54
2103: PUSH
2104: LD_INT 55
2106: PUSH
2107: LD_INT 56
2109: PUSH
2110: LD_INT 63
2112: PUSH
2113: LD_INT 64
2115: PUSH
2116: LD_INT 65
2118: PUSH
2119: LD_INT 30
2121: PUSH
2122: LD_INT 31
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 22
2130: PUSH
2131: LD_INT 25
2133: PUSH
2134: LD_INT 51
2136: PUSH
2137: LD_INT 52
2139: PUSH
2140: LD_INT 59
2142: PUSH
2143: LD_INT 53
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2180: LD_ADDR_VAR 0 5
2184: PUSH
2185: DOUBLE
2186: LD_INT 1
2188: DEC
2189: ST_TO_ADDR
2190: LD_VAR 0 8
2194: PUSH
2195: FOR_TO
2196: IFFALSE 2272
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2198: LD_VAR 0 8
2202: PUSH
2203: LD_VAR 0 5
2207: ARRAY
2208: PPUSH
2209: LD_VAR 0 1
2213: PPUSH
2214: CALL_OW 321
2218: PUSH
2219: LD_INT 1
2221: EQUAL
2222: PUSH
2223: LD_VAR 0 8
2227: PUSH
2228: LD_VAR 0 5
2232: ARRAY
2233: PPUSH
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 482
2243: PUSH
2244: LD_INT 1
2246: EQUAL
2247: AND
2248: IFFALSE 2270
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_VAR 0 8
2259: PUSH
2260: LD_VAR 0 5
2264: ARRAY
2265: PPUSH
2266: CALL_OW 184
2270: GO 2195
2272: POP
2273: POP
// end ;
2274: LD_VAR 0 4
2278: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
2283: PPUSH
2284: PPUSH
2285: PPUSH
2286: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: CALL_OW 313
2301: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2302: LD_ADDR_VAR 0 9
2306: PUSH
2307: LD_VAR 0 3
2311: PPUSH
2312: LD_INT 22
2314: PUSH
2315: LD_VAR 0 1
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 25
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 24
2336: PUSH
2337: LD_INT 750
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 3
2346: PUSH
2347: LD_INT 54
2349: PUSH
2350: EMPTY
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 70
2367: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2368: LD_ADDR_VAR 0 6
2372: PUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: LD_INT 22
2380: PUSH
2381: LD_VAR 0 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 21
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 24
2405: PUSH
2406: LD_INT 1000
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: PPUSH
2425: CALL_OW 70
2429: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2430: LD_VAR 0 6
2434: NOT
2435: PUSH
2436: LD_INT 22
2438: PUSH
2439: LD_VAR 0 1
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 25
2450: PUSH
2451: LD_INT 2
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 24
2460: PUSH
2461: LD_INT 250
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 69
2477: NOT
2478: AND
2479: IFFALSE 2483
// exit ;
2481: GO 2665
// if buildings_list > 0 and engineerOkInside then
2483: LD_VAR 0 6
2487: PUSH
2488: LD_INT 0
2490: GREATER
2491: PUSH
2492: LD_VAR 0 8
2496: AND
2497: IFFALSE 2508
// ComExitBuilding ( engineerOkInside ) ;
2499: LD_VAR 0 8
2503: PPUSH
2504: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2508: LD_VAR 0 6
2512: PUSH
2513: LD_INT 0
2515: GREATER
2516: PUSH
2517: LD_VAR 0 9
2521: PUSH
2522: LD_INT 0
2524: GREATER
2525: AND
2526: IFFALSE 2546
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2528: LD_VAR 0 9
2532: PPUSH
2533: LD_VAR 0 6
2537: PUSH
2538: LD_INT 1
2540: ARRAY
2541: PPUSH
2542: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2546: LD_VAR 0 6
2550: PUSH
2551: LD_INT 0
2553: EQUAL
2554: PUSH
2555: LD_VAR 0 4
2559: PUSH
2560: LD_INT 0
2562: EQUAL
2563: AND
2564: PUSH
2565: LD_VAR 0 9
2569: PUSH
2570: LD_INT 0
2572: GREATER
2573: AND
2574: IFFALSE 2590
// ComEnterUnit ( engineerOkOutside , building ) ;
2576: LD_VAR 0 9
2580: PPUSH
2581: LD_VAR 0 2
2585: PPUSH
2586: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2590: LD_VAR 0 9
2594: PUSH
2595: LD_INT 0
2597: GREATER
2598: PUSH
2599: LD_VAR 0 6
2603: PUSH
2604: LD_INT 0
2606: EQUAL
2607: AND
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_INT 0
2616: GREATER
2617: AND
2618: IFFALSE 2665
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2620: LD_VAR 0 9
2624: PPUSH
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: PPUSH
2634: LD_VAR 0 4
2638: PUSH
2639: LD_INT 2
2641: ARRAY
2642: PPUSH
2643: LD_VAR 0 4
2647: PUSH
2648: LD_INT 3
2650: ARRAY
2651: PPUSH
2652: LD_VAR 0 4
2656: PUSH
2657: LD_INT 4
2659: ARRAY
2660: PPUSH
2661: CALL_OW 145
// end ;
2665: LD_VAR 0 5
2669: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2670: LD_INT 0
2672: PPUSH
2673: PPUSH
2674: PPUSH
2675: PPUSH
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
2680: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 6
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 25
2700: PUSH
2701: LD_INT 4
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 23
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 24
2720: PUSH
2721: LD_INT 251
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2739: LD_ADDR_VAR 0 7
2743: PUSH
2744: LD_VAR 0 3
2748: PPUSH
2749: LD_INT 22
2751: PUSH
2752: LD_VAR 0 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 23
2763: PUSH
2764: LD_INT 2
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 25
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 50
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: PPUSH
2793: CALL_OW 70
2797: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2798: LD_ADDR_VAR 0 10
2802: PUSH
2803: LD_VAR 0 3
2807: PPUSH
2808: LD_INT 22
2810: PUSH
2811: LD_VAR 0 1
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 21
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 25
2835: PUSH
2836: LD_INT 3
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: PUSH
2847: LD_INT 3
2849: PUSH
2850: LD_INT 24
2852: PUSH
2853: LD_INT 750
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PPUSH
2870: CALL_OW 70
2874: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2875: LD_ADDR_VAR 0 11
2879: PUSH
2880: LD_VAR 0 2
2884: PPUSH
2885: LD_INT 22
2887: PUSH
2888: LD_VAR 0 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 21
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: LD_INT 25
2912: PUSH
2913: LD_INT 3
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 24
2929: PUSH
2930: LD_INT 1000
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: PPUSH
2947: CALL_OW 70
2951: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2952: LD_VAR 0 10
2956: NOT
2957: PUSH
2958: LD_VAR 0 11
2962: NOT
2963: AND
2964: PUSH
2965: LD_VAR 0 6
2969: NOT
2970: AND
2971: IFFALSE 2975
// exit ;
2973: GO 3209
// if damageUnits > 0 and sci_list > 0 then
2975: LD_VAR 0 10
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: PUSH
2984: LD_VAR 0 6
2988: PUSH
2989: LD_INT 0
2991: GREATER
2992: AND
2993: IFFALSE 3009
// ComMoveToArea ( damageUnits , healArea ) ;
2995: LD_VAR 0 10
2999: PPUSH
3000: LD_VAR 0 2
3004: PPUSH
3005: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3009: LD_VAR 0 11
3013: PUSH
3014: LD_INT 0
3016: GREATER
3017: PUSH
3018: LD_VAR 0 6
3022: PUSH
3023: LD_INT 0
3025: GREATER
3026: AND
3027: IFFALSE 3038
// ComExitBuilding ( sci_list ) ;
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3038: LD_VAR 0 11
3042: PUSH
3043: LD_INT 0
3045: GREATER
3046: PUSH
3047: LD_VAR 0 7
3051: PUSH
3052: LD_INT 0
3054: GREATER
3055: AND
3056: IFFALSE 3076
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3058: LD_VAR 0 7
3062: PPUSH
3063: LD_VAR 0 11
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3076: LD_VAR 0 10
3080: PUSH
3081: LD_INT 0
3083: EQUAL
3084: PUSH
3085: LD_VAR 0 11
3089: PUSH
3090: LD_INT 0
3092: EQUAL
3093: AND
3094: PUSH
3095: LD_VAR 0 7
3099: PUSH
3100: LD_INT 0
3102: GREATER
3103: AND
3104: IFFALSE 3209
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3106: LD_ADDR_VAR 0 12
3110: PUSH
3111: LD_INT 22
3113: PUSH
3114: LD_VAR 0 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 21
3125: PUSH
3126: LD_INT 3
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: LD_INT 30
3135: PUSH
3136: LD_INT 8
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3153: LD_ADDR_VAR 0 13
3157: PUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_VAR 0 12
3165: PPUSH
3166: CALL_OW 12
3170: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3171: LD_VAR 0 7
3175: PPUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 60
3181: PUSH
3182: EMPTY
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PPUSH
3189: CALL_OW 72
3193: PPUSH
3194: LD_VAR 0 12
3198: PUSH
3199: LD_VAR 0 13
3203: ARRAY
3204: PPUSH
3205: CALL_OW 120
// end ; end ;
3209: LD_VAR 0 5
3213: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3214: LD_INT 0
3216: PPUSH
3217: PPUSH
3218: PPUSH
3219: PPUSH
// tmpTab = [ ] ;
3220: LD_ADDR_VAR 0 6
3224: PUSH
3225: EMPTY
3226: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3227: LD_INT 22
3229: PUSH
3230: LD_VAR 0 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 30
3241: PUSH
3242: LD_INT 32
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: CALL_OW 69
3257: PUSH
3258: LD_INT 0
3260: GREATER
3261: IFFALSE 3344
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3263: LD_ADDR_VAR 0 4
3267: PUSH
3268: LD_INT 22
3270: PUSH
3271: LD_VAR 0 1
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 30
3282: PUSH
3283: LD_INT 32
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PPUSH
3294: CALL_OW 69
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3342
// begin for j in UnitsInside ( i ) do
3302: LD_ADDR_VAR 0 5
3306: PUSH
3307: LD_VAR 0 4
3311: PPUSH
3312: CALL_OW 313
3316: PUSH
3317: FOR_IN
3318: IFFALSE 3338
// tmpTab = tmpTab ^ j ;
3320: LD_ADDR_VAR 0 6
3324: PUSH
3325: LD_VAR 0 6
3329: PUSH
3330: LD_VAR 0 5
3334: ADD
3335: ST_TO_ADDR
3336: GO 3317
3338: POP
3339: POP
// end ;
3340: GO 3299
3342: POP
3343: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3344: LD_VAR 0 6
3348: PPUSH
3349: LD_VAR 0 2
3353: PPUSH
3354: CALL_OW 250
3358: PPUSH
3359: LD_VAR 0 2
3363: PPUSH
3364: CALL_OW 251
3368: PPUSH
3369: CALL_OW 114
// end ;
3373: LD_VAR 0 3
3377: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
3383: PPUSH
// enable ;
3384: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3385: LD_ADDR_VAR 0 7
3389: PUSH
3390: LD_VAR 0 3
3394: PPUSH
3395: CALL_OW 435
3399: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3400: LD_ADDR_VAR 0 6
3404: PUSH
3405: LD_INT 22
3407: PUSH
3408: LD_VAR 0 1
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 34
3419: PUSH
3420: LD_VAR 0 2
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PPUSH
3433: CALL_OW 69
3437: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3438: LD_VAR 0 6
3442: PUSH
3443: LD_INT 0
3445: GREATER
3446: PUSH
3447: LD_VAR 0 3
3451: PPUSH
3452: CALL_OW 435
3456: AND
3457: PUSH
3458: LD_VAR 0 7
3462: PUSH
3463: LD_INT 0
3465: GREATER
3466: AND
3467: IFFALSE 3516
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3469: LD_VAR 0 6
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: LD_VAR 0 7
3482: PUSH
3483: LD_INT 1
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 7
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3500: LD_VAR 0 6
3504: PUSH
3505: LD_INT 1
3507: ARRAY
3508: PPUSH
3509: LD_INT 100
3511: PPUSH
3512: CALL_OW 240
// end ; end ;
3516: LD_VAR 0 4
3520: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3521: LD_INT 0
3523: PPUSH
3524: PPUSH
// for i = 1 to vehCount do
3525: LD_ADDR_VAR 0 9
3529: PUSH
3530: DOUBLE
3531: LD_INT 1
3533: DEC
3534: ST_TO_ADDR
3535: LD_VAR 0 3
3539: PUSH
3540: FOR_TO
3541: IFFALSE 3588
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3543: LD_VAR 0 2
3547: PPUSH
3548: LD_VAR 0 7
3552: PPUSH
3553: LD_VAR 0 5
3557: PPUSH
3558: LD_VAR 0 6
3562: PPUSH
3563: LD_VAR 0 4
3567: PUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 12
3580: ARRAY
3581: PPUSH
3582: CALL_OW 185
3586: GO 3540
3588: POP
3589: POP
// end ;
3590: LD_VAR 0 8
3594: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3595: LD_INT 0
3597: PPUSH
3598: PPUSH
3599: PPUSH
3600: PPUSH
3601: PPUSH
3602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3603: LD_ADDR_VAR 0 6
3607: PUSH
3608: LD_INT 22
3610: PUSH
3611: LD_VAR 0 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 25
3622: PUSH
3623: LD_INT 9
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PPUSH
3634: CALL_OW 69
3638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 81
3646: PUSH
3647: LD_VAR 0 1
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 3
3658: PUSH
3659: LD_INT 21
3661: PUSH
3662: LD_INT 3
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 69
3681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: LD_INT 1
3689: PPUSH
3690: LD_INT 3
3692: PPUSH
3693: CALL_OW 12
3697: ST_TO_ADDR
// for i = 1 to list do
3698: LD_ADDR_VAR 0 5
3702: PUSH
3703: DOUBLE
3704: LD_INT 1
3706: DEC
3707: ST_TO_ADDR
3708: LD_VAR 0 6
3712: PUSH
3713: FOR_TO
3714: IFFALSE 3916
// for ta in filter do
3716: LD_ADDR_VAR 0 3
3720: PUSH
3721: LD_VAR 0 7
3725: PUSH
3726: FOR_IN
3727: IFFALSE 3912
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3729: LD_VAR 0 6
3733: PUSH
3734: LD_VAR 0 5
3738: ARRAY
3739: PPUSH
3740: LD_VAR 0 3
3744: PPUSH
3745: CALL_OW 296
3749: PUSH
3750: LD_INT 15
3752: LESSEQUAL
3753: IFFALSE 3910
// begin case c of 1 :
3755: LD_VAR 0 4
3759: PUSH
3760: LD_INT 1
3762: DOUBLE
3763: EQUAL
3764: IFTRUE 3768
3766: GO 3806
3768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3769: LD_VAR 0 6
3773: PUSH
3774: LD_VAR 0 5
3778: ARRAY
3779: PPUSH
3780: LD_VAR 0 3
3784: PPUSH
3785: CALL_OW 250
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 251
3799: PPUSH
3800: CALL_OW 154
3804: GO 3910
3806: LD_INT 2
3808: DOUBLE
3809: EQUAL
3810: IFTRUE 3814
3812: GO 3878
3814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3815: LD_VAR 0 6
3819: PUSH
3820: LD_VAR 0 5
3824: ARRAY
3825: PPUSH
3826: LD_VAR 0 3
3830: PPUSH
3831: CALL_OW 250
3835: PUSH
3836: LD_INT 1
3838: NEG
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 12
3847: PLUS
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 251
3858: PUSH
3859: LD_INT 1
3861: NEG
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 12
3870: PLUS
3871: PPUSH
3872: CALL_OW 153
3876: GO 3910
3878: LD_INT 3
3880: DOUBLE
3881: EQUAL
3882: IFTRUE 3886
3884: GO 3909
3886: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3887: LD_VAR 0 6
3891: PUSH
3892: LD_VAR 0 5
3896: ARRAY
3897: PPUSH
3898: LD_VAR 0 3
3902: PPUSH
3903: CALL_OW 115
3907: GO 3910
3909: POP
// end ; end ;
3910: GO 3726
3912: POP
3913: POP
3914: GO 3713
3916: POP
3917: POP
// end ;
3918: LD_VAR 0 2
3922: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
3927: PPUSH
3928: PPUSH
3929: PPUSH
3930: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3931: LD_ADDR_VAR 0 7
3935: PUSH
3936: LD_VAR 0 2
3940: PPUSH
3941: LD_INT 22
3943: PUSH
3944: LD_VAR 0 1
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 21
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 34
3965: PUSH
3966: LD_INT 52
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: PPUSH
3978: CALL_OW 70
3982: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3983: LD_ADDR_VAR 0 8
3987: PUSH
3988: LD_VAR 0 2
3992: PPUSH
3993: LD_INT 22
3995: PUSH
3996: LD_VAR 0 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 21
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: LD_INT 3
4017: PUSH
4018: LD_INT 24
4020: PUSH
4021: LD_INT 1000
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PUSH
4037: EMPTY
4038: LIST
4039: PPUSH
4040: CALL_OW 70
4044: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4045: LD_VAR 0 8
4049: PUSH
4050: LD_INT 0
4052: GREATER
4053: PUSH
4054: LD_VAR 0 7
4058: PPUSH
4059: LD_INT 24
4061: PUSH
4062: LD_INT 750
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 72
4073: PUSH
4074: LD_INT 0
4076: GREATER
4077: AND
4078: IFFALSE 4098
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4080: LD_VAR 0 7
4084: PPUSH
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 1
4092: ARRAY
4093: PPUSH
4094: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4098: LD_VAR 0 7
4102: PUSH
4103: LD_INT 0
4105: GREATER
4106: PUSH
4107: LD_VAR 0 8
4111: PUSH
4112: LD_INT 0
4114: EQUAL
4115: AND
4116: PUSH
4117: LD_EXP 10
4121: PUSH
4122: LD_INT 0
4124: GREATER
4125: AND
4126: IFFALSE 4173
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4128: LD_VAR 0 7
4132: PPUSH
4133: LD_EXP 10
4137: PUSH
4138: LD_INT 1
4140: ARRAY
4141: PPUSH
4142: LD_EXP 10
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 10
4155: PUSH
4156: LD_INT 3
4158: ARRAY
4159: PPUSH
4160: LD_EXP 10
4164: PUSH
4165: LD_INT 4
4167: ARRAY
4168: PPUSH
4169: CALL_OW 567
// end ; end_of_file
4173: LD_VAR 0 3
4177: RET
// every 0 0$1 do
4178: GO 4180
4180: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4181: LD_INT 3
4183: PPUSH
4184: LD_INT 14
4186: PPUSH
4187: LD_INT 3
4189: PPUSH
4190: CALL 2038 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4194: LD_INT 3
4196: PPUSH
4197: LD_INT 15
4199: PPUSH
4200: LD_INT 3
4202: PPUSH
4203: CALL 2038 0 3
// end ;
4207: END
// every 0 0$1 trigger russianAI = 1 do
4208: LD_EXP 13
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: IFFALSE 4305
4218: GO 4220
4220: DISABLE
// begin enable ;
4221: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4222: LD_INT 3
4224: PPUSH
4225: LD_INT 22
4227: PPUSH
4228: LD_INT 7
4230: PPUSH
4231: LD_EXP 10
4235: PPUSH
4236: CALL 2279 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4240: LD_INT 3
4242: PPUSH
4243: LD_INT 8
4245: PPUSH
4246: LD_INT 7
4248: PPUSH
4249: LD_INT 14
4251: PUSH
4252: LD_INT 15
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: CALL_OW 12
4269: ARRAY
4270: PPUSH
4271: CALL 2670 0 4
// IntBazooka ( 3 ) ;
4275: LD_INT 3
4277: PPUSH
4278: CALL 3595 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 51
4287: PPUSH
4288: LD_INT 14
4290: PPUSH
4291: CALL 3378 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4295: LD_INT 3
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: CALL 3923 0 2
// end ;
4305: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4306: LD_EXP 11
4310: PUSH
4311: LD_INT 5
4313: PUSH
4314: LD_INT 6
4316: PUSH
4317: LD_INT 8
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: LD_OWVAR 67
4329: ARRAY
4330: GREATEREQUAL
4331: PUSH
4332: LD_EXP 12
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_OWVAR 67
4355: ARRAY
4356: GREATEREQUAL
4357: AND
4358: IFFALSE 4844
4360: GO 4362
4362: DISABLE
4363: LD_INT 0
4365: PPUSH
4366: PPUSH
4367: PPUSH
4368: PPUSH
// begin enable ;
4369: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4370: LD_ADDR_VAR 0 2
4374: PUSH
4375: LD_EXP 11
4379: PUSH
4380: LD_EXP 12
4384: UNION
4385: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4386: LD_ADDR_EXP 11
4390: PUSH
4391: LD_EXP 11
4395: PUSH
4396: LD_VAR 0 2
4400: DIFF
4401: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4402: LD_ADDR_EXP 12
4406: PUSH
4407: LD_EXP 12
4411: PUSH
4412: LD_VAR 0 2
4416: DIFF
4417: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4418: LD_INT 116
4420: PPUSH
4421: CALL_OW 302
4425: IFFALSE 4494
// begin for j in tmp do
4427: LD_ADDR_VAR 0 1
4431: PUSH
4432: LD_VAR 0 2
4436: PUSH
4437: FOR_IN
4438: IFFALSE 4485
// if j mod 3 = 0 then
4440: LD_VAR 0 1
4444: PUSH
4445: LD_INT 3
4447: MOD
4448: PUSH
4449: LD_INT 0
4451: EQUAL
4452: IFFALSE 4468
// ComEnterUnit ( j , ruTeleport ) else
4454: LD_VAR 0 1
4458: PPUSH
4459: LD_INT 116
4461: PPUSH
4462: CALL_OW 120
4466: GO 4483
// ComAgressiveMove ( j , 117 , 92 ) ;
4468: LD_VAR 0 1
4472: PPUSH
4473: LD_INT 117
4475: PPUSH
4476: LD_INT 92
4478: PPUSH
4479: CALL_OW 114
4483: GO 4437
4485: POP
4486: POP
// wait ( 0 0$14 ) ;
4487: LD_INT 490
4489: PPUSH
4490: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 67
// for j in tmp do
4501: LD_ADDR_VAR 0 1
4505: PUSH
4506: LD_VAR 0 2
4510: PUSH
4511: FOR_IN
4512: IFFALSE 4835
// begin if IsDead ( j ) then
4514: LD_VAR 0 1
4518: PPUSH
4519: CALL_OW 301
4523: IFFALSE 4541
// tmp := tmp diff j ;
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_VAR 0 2
4534: PUSH
4535: LD_VAR 0 1
4539: DIFF
4540: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: LD_INT 81
4548: PUSH
4549: LD_INT 3
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PPUSH
4556: CALL_OW 69
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 74
4570: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4571: LD_ADDR_VAR 0 4
4575: PUSH
4576: LD_INT 81
4578: PUSH
4579: LD_INT 3
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 21
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: PPUSH
4603: CALL_OW 69
4607: PPUSH
4608: LD_VAR 0 1
4612: PPUSH
4613: CALL_OW 74
4617: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 264
4627: PUSH
4628: LD_INT 49
4630: EQUAL
4631: IFFALSE 4767
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4633: LD_VAR 0 2
4637: PPUSH
4638: LD_INT 3
4640: PUSH
4641: LD_INT 34
4643: PUSH
4644: LD_INT 49
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PPUSH
4655: CALL_OW 72
4659: PUSH
4660: LD_INT 1
4662: GREATER
4663: PUSH
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 34
4674: PUSH
4675: LD_INT 49
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 72
4690: AND
4691: IFFALSE 4741
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_VAR 0 2
4702: PPUSH
4703: LD_INT 3
4705: PUSH
4706: LD_INT 34
4708: PUSH
4709: LD_INT 49
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 72
4724: PPUSH
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 74
4734: PPUSH
4735: CALL_OW 112
4739: GO 4765
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4741: LD_VAR 0 1
4745: PPUSH
4746: LD_VAR 0 3
4750: PPUSH
4751: LD_VAR 0 1
4755: PPUSH
4756: CALL_OW 74
4760: PPUSH
4761: CALL_OW 112
// end else
4765: GO 4833
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4767: LD_VAR 0 1
4771: PPUSH
4772: LD_VAR 0 4
4776: PPUSH
4777: CALL_OW 296
4781: PUSH
4782: LD_VAR 0 1
4786: PPUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 296
4796: PUSH
4797: LD_INT 2
4799: PLUS
4800: LESS
4801: IFFALSE 4819
// ComAttackUnit ( j , target2 ) else
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_VAR 0 4
4812: PPUSH
4813: CALL_OW 115
4817: GO 4833
// ComAttackUnit ( j , target1 ) ;
4819: LD_VAR 0 1
4823: PPUSH
4824: LD_VAR 0 3
4828: PPUSH
4829: CALL_OW 115
// end ; end ;
4833: GO 4511
4835: POP
4836: POP
// until not tmp ;
4837: LD_VAR 0 2
4841: NOT
4842: IFFALSE 4494
// end ;
4844: PPOPN 4
4846: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4847: LD_INT 22
4849: PPUSH
4850: CALL_OW 303
4854: PUSH
4855: LD_INT 22
4857: PPUSH
4858: CALL_OW 255
4862: PUSH
4863: LD_INT 1
4865: EQUAL
4866: OR
4867: IFFALSE 4882
4869: GO 4871
4871: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4872: LD_INT 3
4874: PPUSH
4875: LD_INT 22
4877: PPUSH
4878: CALL 3214 0 2
4882: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4883: LD_EXP 13
4887: PUSH
4888: LD_INT 1
4890: EQUAL
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 50
4914: PUSH
4915: EMPTY
4916: LIST
4917: PUSH
4918: LD_INT 33
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 2
4930: PUSH
4931: LD_INT 34
4933: PUSH
4934: LD_INT 46
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 34
4943: PUSH
4944: LD_INT 45
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 34
4953: PUSH
4954: LD_INT 44
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 34
4963: PUSH
4964: LD_INT 49
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 34
4973: PUSH
4974: LD_INT 47
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: LD_INT 3
5003: LESS
5004: AND
5005: IFFALSE 5192
5007: GO 5009
5009: DISABLE
// begin enable ;
5010: ENABLE
// if russianRocketsAvalaible = 1 then
5011: LD_EXP 14
5015: PUSH
5016: LD_INT 1
5018: EQUAL
5019: IFFALSE 5076
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5021: LD_INT 3
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: LD_INT 5
5029: PUSH
5030: LD_INT 6
5032: PUSH
5033: LD_INT 8
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: PUSH
5041: LD_OWVAR 67
5045: ARRAY
5046: PPUSH
5047: LD_INT 46
5049: PUSH
5050: LD_INT 45
5052: PUSH
5053: LD_INT 44
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: LD_INT 3
5063: PPUSH
5064: LD_INT 3
5066: PPUSH
5067: LD_INT 24
5069: PPUSH
5070: CALL 3521 0 7
5074: GO 5133
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 5
5084: PUSH
5085: LD_INT 6
5087: PUSH
5088: LD_INT 8
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_OWVAR 67
5100: ARRAY
5101: PPUSH
5102: LD_INT 46
5104: PUSH
5105: LD_INT 45
5107: PUSH
5108: LD_INT 44
5110: PUSH
5111: LD_INT 47
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 24
5128: PPUSH
5129: CALL 3521 0 7
// if russianTimeLapsers = 0 then
5133: LD_EXP 12
5137: PUSH
5138: LD_INT 0
5140: EQUAL
5141: IFFALSE 5192
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5143: LD_INT 3
5145: PPUSH
5146: LD_INT 40
5148: PPUSH
5149: LD_INT 1
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PUSH
5163: LD_OWVAR 67
5167: ARRAY
5168: PPUSH
5169: LD_INT 49
5171: PUSH
5172: LD_INT 49
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PPUSH
5179: LD_INT 3
5181: PPUSH
5182: LD_INT 3
5184: PPUSH
5185: LD_INT 24
5187: PPUSH
5188: CALL 3521 0 7
// end ;
5192: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5193: LD_EXP 18
5197: PUSH
5198: LD_INT 22
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 21
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 58
5220: PUSH
5221: EMPTY
5222: LIST
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 91
5236: PUSH
5237: LD_EXP 18
5241: PUSH
5242: LD_INT 45
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PPUSH
5257: CALL_OW 69
5261: AND
5262: IFFALSE 5366
5264: GO 5266
5266: DISABLE
// begin wait ( 0 0$5 ) ;
5267: LD_INT 175
5269: PPUSH
5270: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5274: LD_EXP 18
5278: PPUSH
5279: LD_INT 22
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 21
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 58
5301: PUSH
5302: EMPTY
5303: LIST
5304: PUSH
5305: LD_INT 33
5307: PUSH
5308: LD_INT 1
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 91
5317: PUSH
5318: LD_EXP 18
5322: PUSH
5323: LD_INT 45
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: PPUSH
5338: CALL_OW 69
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PPUSH
5347: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5351: LD_EXP 18
5355: PPUSH
5356: LD_INT 127
5358: PPUSH
5359: LD_INT 63
5361: PPUSH
5362: CALL_OW 171
// end ; end_of_file
5366: END
// every 1 do var dec1 , dec2 ;
5367: GO 5369
5369: DISABLE
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
// begin InGameOn ;
5374: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5378: LD_INT 48
5380: PPUSH
5381: LD_STRING deltakappa
5383: PPUSH
5384: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5388: LD_INT 95
5390: PPUSH
5391: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5395: LD_INT 95
5397: PPUSH
5398: LD_INT 30
5400: PPUSH
5401: LD_INT 11
5403: PPUSH
5404: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5408: LD_INT 30
5410: PPUSH
5411: LD_INT 11
5413: PPUSH
5414: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5418: LD_EXP 5
5422: PPUSH
5423: LD_STRING D1-Pow-1
5425: PPUSH
5426: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5430: LD_EXP 1
5434: PPUSH
5435: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5439: LD_EXP 1
5443: PPUSH
5444: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5448: LD_EXP 1
5452: PPUSH
5453: LD_STRING D1-JMM-1
5455: PPUSH
5456: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5460: LD_EXP 5
5464: PPUSH
5465: LD_STRING D1-Pow-2
5467: PPUSH
5468: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5472: LD_EXP 1
5476: PPUSH
5477: LD_STRING D1-JMM-2
5479: PPUSH
5480: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_INT 95
5491: PPUSH
5492: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5496: LD_STRING M1
5498: PPUSH
5499: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5503: LD_INT 35
5505: PPUSH
5506: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5510: LD_EXP 1
5514: PPUSH
5515: LD_INT 95
5517: PPUSH
5518: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5522: LD_INT 95
5524: PPUSH
5525: LD_INT 51
5527: PPUSH
5528: LD_INT 21
5530: PPUSH
5531: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5535: LD_INT 95
5537: PPUSH
5538: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5542: LD_INT 95
5544: PPUSH
5545: LD_INT 5
5547: PPUSH
5548: CALL_OW 308
5552: IFFALSE 5503
// if JMMGirl = 1 then
5554: LD_EXP 7
5558: PUSH
5559: LD_INT 1
5561: EQUAL
5562: IFFALSE 5875
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5564: LD_EXP 2
5568: PPUSH
5569: LD_STRING D2J-Joan-1
5571: PPUSH
5572: CALL_OW 94
// dec1 = query ( Q1 ) ;
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_STRING Q1
5583: PPUSH
5584: CALL_OW 97
5588: ST_TO_ADDR
// if dec1 = 1 then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: EQUAL
5597: IFFALSE 5851
// begin ComExitVehicle ( JMM ) ;
5599: LD_EXP 1
5603: PPUSH
5604: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5608: LD_EXP 1
5612: PPUSH
5613: LD_STRING D2J-JMM-1
5615: PPUSH
5616: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5620: LD_EXP 2
5624: PPUSH
5625: LD_STRING D2J-Joan-2
5627: PPUSH
5628: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5632: LD_EXP 1
5636: PPUSH
5637: LD_STRING D2J-JMM-2
5639: PPUSH
5640: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5644: LD_EXP 2
5648: PPUSH
5649: LD_STRING D2J-Joan-3
5651: PPUSH
5652: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5656: LD_EXP 5
5660: PPUSH
5661: LD_STRING DPowell-Pow-1
5663: PPUSH
5664: CALL_OW 94
// dec2 = query ( Q2J ) ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_STRING Q2J
5675: PPUSH
5676: CALL_OW 97
5680: ST_TO_ADDR
// if dec2 = 1 then
5681: LD_VAR 0 2
5685: PUSH
5686: LD_INT 1
5688: EQUAL
5689: IFFALSE 5731
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_STRING D2Ja-JMM-1
5698: PPUSH
5699: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5703: LD_EXP 2
5707: PPUSH
5708: LD_STRING D2Ja-Joan-1
5710: PPUSH
5711: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5715: LD_EXP 1
5719: PPUSH
5720: LD_STRING D2Ja-JMM-2
5722: PPUSH
5723: CALL_OW 88
// InGameOff ;
5727: CALL_OW 9
// end ; if dec2 = 2 then
5731: LD_VAR 0 2
5735: PUSH
5736: LD_INT 2
5738: EQUAL
5739: IFFALSE 5815
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5741: LD_EXP 1
5745: PPUSH
5746: LD_STRING D2Jb-JMM-1
5748: PPUSH
5749: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5753: LD_EXP 2
5757: PPUSH
5758: LD_STRING D2Jb-Joan-1
5760: PPUSH
5761: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5765: LD_EXP 1
5769: PPUSH
5770: LD_STRING D2Jb-JMM-2
5772: PPUSH
5773: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5777: LD_EXP 2
5781: PPUSH
5782: LD_STRING D2Jb-Joan-2
5784: PPUSH
5785: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5789: LD_EXP 1
5793: PPUSH
5794: LD_STRING D2Jb-JMM-3
5796: PPUSH
5797: CALL_OW 88
// fastEnd = 1 ;
5801: LD_ADDR_EXP 15
5805: PUSH
5806: LD_INT 1
5808: ST_TO_ADDR
// FinishMission ;
5809: CALL 9431 0 0
// exit ;
5813: GO 6445
// end ; if dec2 = 3 then
5815: LD_VAR 0 2
5819: PUSH
5820: LD_INT 3
5822: EQUAL
5823: IFFALSE 5851
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5825: LD_EXP 2
5829: PPUSH
5830: LD_STRING D2Jc-Joan-1
5832: PPUSH
5833: CALL_OW 94
// fastEnd = 1 ;
5837: LD_ADDR_EXP 15
5841: PUSH
5842: LD_INT 1
5844: ST_TO_ADDR
// FinishMission ;
5845: CALL 9431 0 0
// exit ;
5849: GO 6445
// end ; end ; if dec1 = 2 then
5851: LD_VAR 0 1
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5875
// begin fastEnd = 1 ;
5861: LD_ADDR_EXP 15
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// FinishMission ;
5869: CALL 9431 0 0
// exit ;
5873: GO 6445
// end ; end ; if JMMGirl = 2 then
5875: LD_EXP 7
5879: PUSH
5880: LD_INT 2
5882: EQUAL
5883: IFFALSE 6208
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5885: LD_EXP 3
5889: PPUSH
5890: LD_STRING D2L-Lisa-1
5892: PPUSH
5893: CALL_OW 94
// dec1 = query ( Q1 ) ;
5897: LD_ADDR_VAR 0 1
5901: PUSH
5902: LD_STRING Q1
5904: PPUSH
5905: CALL_OW 97
5909: ST_TO_ADDR
// if dec1 = 1 then
5910: LD_VAR 0 1
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 6184
// begin ComExitVehicle ( JMM ) ;
5920: LD_EXP 1
5924: PPUSH
5925: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5929: LD_EXP 1
5933: PPUSH
5934: LD_STRING D2L-JMM-1
5936: PPUSH
5937: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5941: LD_EXP 3
5945: PPUSH
5946: LD_STRING D2L-Lisa-2
5948: PPUSH
5949: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5953: LD_EXP 1
5957: PPUSH
5958: LD_STRING D2L-JMM-2
5960: PPUSH
5961: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5965: LD_EXP 3
5969: PPUSH
5970: LD_STRING D2L-Lisa-3
5972: PPUSH
5973: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5977: LD_EXP 5
5981: PPUSH
5982: LD_STRING DPowell-Pow-1
5984: PPUSH
5985: CALL_OW 94
// dec2 = query ( Q2L ) ;
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_STRING Q2L
5996: PPUSH
5997: CALL_OW 97
6001: ST_TO_ADDR
// if dec2 = 1 then
6002: LD_VAR 0 2
6006: PUSH
6007: LD_INT 1
6009: EQUAL
6010: IFFALSE 6076
// begin Say ( JMM , D2La-JMM-1 ) ;
6012: LD_EXP 1
6016: PPUSH
6017: LD_STRING D2La-JMM-1
6019: PPUSH
6020: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6024: LD_EXP 3
6028: PPUSH
6029: LD_STRING D2La-Lisa-1
6031: PPUSH
6032: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6036: LD_EXP 1
6040: PPUSH
6041: LD_STRING D2La-JMM-2
6043: PPUSH
6044: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6048: LD_EXP 3
6052: PPUSH
6053: LD_STRING D2La-Lisa-2
6055: PPUSH
6056: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6060: LD_EXP 1
6064: PPUSH
6065: LD_STRING D2La-JMM-3
6067: PPUSH
6068: CALL_OW 88
// InGameOff ;
6072: CALL_OW 9
// end ; if dec2 = 2 then
6076: LD_VAR 0 2
6080: PUSH
6081: LD_INT 2
6083: EQUAL
6084: IFFALSE 6148
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6086: LD_EXP 1
6090: PPUSH
6091: LD_STRING D2Lb-JMM-1
6093: PPUSH
6094: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6098: LD_EXP 3
6102: PPUSH
6103: LD_STRING D2Lb-Lisa-1
6105: PPUSH
6106: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6110: LD_EXP 1
6114: PPUSH
6115: LD_STRING D2Lb-JMM-2
6117: PPUSH
6118: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6122: LD_EXP 3
6126: PPUSH
6127: LD_STRING D2Lb-Lisa-2
6129: PPUSH
6130: CALL_OW 94
// fastEnd = 1 ;
6134: LD_ADDR_EXP 15
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// FinishMission ;
6142: CALL 9431 0 0
// exit ;
6146: GO 6445
// end ; if dec2 = 3 then
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 3
6155: EQUAL
6156: IFFALSE 6184
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6158: LD_EXP 3
6162: PPUSH
6163: LD_STRING D2Lc-Lisa-1
6165: PPUSH
6166: CALL_OW 94
// fastEnd = 1 ;
6170: LD_ADDR_EXP 15
6174: PUSH
6175: LD_INT 1
6177: ST_TO_ADDR
// FinishMission ;
6178: CALL 9431 0 0
// exit ;
6182: GO 6445
// end ; end ; if dec1 = 2 then
6184: LD_VAR 0 1
6188: PUSH
6189: LD_INT 2
6191: EQUAL
6192: IFFALSE 6208
// begin fastEnd = 1 ;
6194: LD_ADDR_EXP 15
6198: PUSH
6199: LD_INT 1
6201: ST_TO_ADDR
// FinishMission ;
6202: CALL 9431 0 0
// exit ;
6206: GO 6445
// end ; end ; if JMMGirl = 3 then
6208: LD_EXP 7
6212: PUSH
6213: LD_INT 3
6215: EQUAL
6216: IFFALSE 6445
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6218: LD_EXP 4
6222: PPUSH
6223: LD_STRING D2X-Con-1
6225: PPUSH
6226: CALL_OW 94
// dec1 = query ( Q1 ) ;
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_STRING Q1
6237: PPUSH
6238: CALL_OW 97
6242: ST_TO_ADDR
// if dec1 = 1 then
6243: LD_VAR 0 1
6247: PUSH
6248: LD_INT 1
6250: EQUAL
6251: IFFALSE 6421
// begin ComExitVehicle ( JMM ) ;
6253: LD_EXP 1
6257: PPUSH
6258: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6262: LD_EXP 1
6266: PPUSH
6267: LD_STRING D2X-JMM-1
6269: PPUSH
6270: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6274: LD_EXP 4
6278: PPUSH
6279: LD_STRING D2X-Con-2
6281: PPUSH
6282: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6286: LD_EXP 5
6290: PPUSH
6291: LD_STRING DPowell-Pow-1
6293: PPUSH
6294: CALL_OW 94
// dec2 = query ( Q2X ) ;
6298: LD_ADDR_VAR 0 2
6302: PUSH
6303: LD_STRING Q2X
6305: PPUSH
6306: CALL_OW 97
6310: ST_TO_ADDR
// if dec2 = 1 then
6311: LD_VAR 0 2
6315: PUSH
6316: LD_INT 1
6318: EQUAL
6319: IFFALSE 6337
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6321: LD_EXP 1
6325: PPUSH
6326: LD_STRING D2Xa-JMM-1
6328: PPUSH
6329: CALL_OW 88
// InGameOff ;
6333: CALL_OW 9
// end ; if dec2 = 2 then
6337: LD_VAR 0 2
6341: PUSH
6342: LD_INT 2
6344: EQUAL
6345: IFFALSE 6385
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6347: LD_EXP 1
6351: PPUSH
6352: LD_STRING D2Xb-JMM-1
6354: PPUSH
6355: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6359: LD_EXP 4
6363: PPUSH
6364: LD_STRING D2Xb-Con-1
6366: PPUSH
6367: CALL_OW 94
// fastEnd = 1 ;
6371: LD_ADDR_EXP 15
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// FinishMission ;
6379: CALL 9431 0 0
// exit ;
6383: GO 6445
// end ; if dec2 = 3 then
6385: LD_VAR 0 2
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: IFFALSE 6421
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6395: LD_EXP 4
6399: PPUSH
6400: LD_STRING D2Xc-Con-1
6402: PPUSH
6403: CALL_OW 94
// fastEnd = 1 ;
6407: LD_ADDR_EXP 15
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// FinishMission ;
6415: CALL 9431 0 0
// exit ;
6419: GO 6445
// end ; end ; if dec1 = 2 then
6421: LD_VAR 0 1
6425: PUSH
6426: LD_INT 2
6428: EQUAL
6429: IFFALSE 6445
// begin fastEnd = 1 ;
6431: LD_ADDR_EXP 15
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// FinishMission ;
6439: CALL 9431 0 0
// exit ;
6443: GO 6445
// end ; end ; end ;
6445: PPOPN 2
6447: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6448: LD_EXP 1
6452: PPUSH
6453: LD_INT 6
6455: PPUSH
6456: CALL_OW 308
6460: IFFALSE 7202
6462: GO 6464
6464: DISABLE
// begin InGameOn ;
6465: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6476: LD_EXP 1
6480: PPUSH
6481: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6485: LD_EXP 1
6489: PPUSH
6490: LD_INT 62
6492: PPUSH
6493: LD_INT 104
6495: PPUSH
6496: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6500: LD_EXP 1
6504: PPUSH
6505: LD_EXP 2
6509: PPUSH
6510: CALL_OW 296
6514: PUSH
6515: LD_INT 4
6517: LESS
6518: PUSH
6519: LD_EXP 1
6523: PPUSH
6524: LD_EXP 3
6528: PPUSH
6529: CALL_OW 296
6533: PUSH
6534: LD_INT 4
6536: LESS
6537: OR
6538: PUSH
6539: LD_EXP 1
6543: PPUSH
6544: LD_EXP 4
6548: PPUSH
6549: CALL_OW 296
6553: PUSH
6554: LD_INT 4
6556: LESS
6557: OR
6558: IFFALSE 6469
// case JMMGirl of 1 :
6560: LD_EXP 7
6564: PUSH
6565: LD_INT 1
6567: DOUBLE
6568: EQUAL
6569: IFTRUE 6573
6571: GO 6785
6573: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6574: LD_INT 22
6576: PUSH
6577: LD_INT 4
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL_OW 69
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6596: LD_EXP 2
6600: PPUSH
6601: LD_EXP 1
6605: PPUSH
6606: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6610: LD_EXP 1
6614: PPUSH
6615: LD_EXP 2
6619: PPUSH
6620: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6624: LD_EXP 2
6628: PUSH
6629: LD_EXP 1
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 87
// wait ( 0 0$1 ) ;
6642: LD_INT 35
6644: PPUSH
6645: CALL_OW 67
// DialogueOn ;
6649: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6653: LD_EXP 2
6657: PPUSH
6658: LD_STRING D3J-Joan-1
6660: PPUSH
6661: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6665: LD_EXP 1
6669: PPUSH
6670: LD_STRING D3J-JMM-1
6672: PPUSH
6673: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6677: LD_EXP 2
6681: PPUSH
6682: LD_STRING D3J-Joan-2
6684: PPUSH
6685: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6689: LD_EXP 1
6693: PPUSH
6694: LD_STRING D3J-JMM-2
6696: PPUSH
6697: CALL_OW 88
// wait ( 0 0$1 ) ;
6701: LD_INT 35
6703: PPUSH
6704: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6708: LD_EXP 1
6712: PPUSH
6713: LD_STRING D4-JMM-1
6715: PPUSH
6716: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6720: LD_EXP 2
6724: PPUSH
6725: LD_STRING D4-Joan-1
6727: PPUSH
6728: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING D4-JMM-2
6739: PPUSH
6740: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6744: LD_EXP 2
6748: PPUSH
6749: LD_STRING D4-Joan-2
6751: PPUSH
6752: CALL_OW 88
// DialogueOff ;
6756: CALL_OW 7
// InGameOff ;
6760: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6764: LD_STRING M2J
6766: PPUSH
6767: CALL_OW 337
// SaveForQuickRestart ;
6771: CALL_OW 22
// russianAI = 1 ;
6775: LD_ADDR_EXP 13
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// end ; 2 :
6783: GO 7202
6785: LD_INT 2
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 7005
6793: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6794: LD_INT 22
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 69
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6816: LD_EXP 3
6820: PPUSH
6821: LD_EXP 1
6825: PPUSH
6826: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6830: LD_EXP 1
6834: PPUSH
6835: LD_EXP 3
6839: PPUSH
6840: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6844: LD_EXP 3
6848: PUSH
6849: LD_EXP 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 87
// wait ( 0 0$1 ) ;
6862: LD_INT 35
6864: PPUSH
6865: CALL_OW 67
// DialogueOn ;
6869: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6873: LD_EXP 3
6877: PPUSH
6878: LD_STRING D3L-Lisa-1
6880: PPUSH
6881: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6885: LD_EXP 1
6889: PPUSH
6890: LD_STRING D3L-JMM-1
6892: PPUSH
6893: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6897: LD_EXP 3
6901: PPUSH
6902: LD_STRING D3L-Lisa-2
6904: PPUSH
6905: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6909: LD_EXP 1
6913: PPUSH
6914: LD_STRING D3L-JMM-2
6916: PPUSH
6917: CALL_OW 88
// wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6928: LD_EXP 1
6932: PPUSH
6933: LD_STRING D4-JMM-1
6935: PPUSH
6936: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6940: LD_EXP 3
6944: PPUSH
6945: LD_STRING D4-Lisa-1
6947: PPUSH
6948: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6952: LD_EXP 1
6956: PPUSH
6957: LD_STRING D4-JMM-1
6959: PPUSH
6960: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6964: LD_EXP 3
6968: PPUSH
6969: LD_STRING D4-Lisa-2
6971: PPUSH
6972: CALL_OW 88
// DialogueOff ;
6976: CALL_OW 7
// InGameOff ;
6980: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6984: LD_STRING M2L
6986: PPUSH
6987: CALL_OW 337
// SaveForQuickRestart ;
6991: CALL_OW 22
// russianAI = 1 ;
6995: LD_ADDR_EXP 13
6999: PUSH
7000: LD_INT 1
7002: ST_TO_ADDR
// end ; 3 :
7003: GO 7202
7005: LD_INT 3
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7013
7011: GO 7201
7013: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7014: LD_INT 22
7016: PUSH
7017: LD_INT 4
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7036: LD_EXP 4
7040: PPUSH
7041: LD_EXP 1
7045: PPUSH
7046: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7050: LD_EXP 1
7054: PPUSH
7055: LD_EXP 4
7059: PPUSH
7060: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7064: LD_EXP 2
7068: PUSH
7069: LD_EXP 1
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 87
// wait ( 0 0$1 ) ;
7082: LD_INT 35
7084: PPUSH
7085: CALL_OW 67
// DialogueOn ;
7089: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7093: LD_EXP 4
7097: PPUSH
7098: LD_STRING D3X-Con-1
7100: PPUSH
7101: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D3J-JMM-1
7112: PPUSH
7113: CALL_OW 88
// wait ( 0 0$1 ) ;
7117: LD_INT 35
7119: PPUSH
7120: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7124: LD_EXP 1
7128: PPUSH
7129: LD_STRING D4-JMM-1
7131: PPUSH
7132: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7136: LD_EXP 4
7140: PPUSH
7141: LD_STRING D4-Con-1
7143: PPUSH
7144: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7148: LD_EXP 1
7152: PPUSH
7153: LD_STRING D4-JMM-2
7155: PPUSH
7156: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7160: LD_EXP 4
7164: PPUSH
7165: LD_STRING D4-Con-2
7167: PPUSH
7168: CALL_OW 88
// DialogueOff ;
7172: CALL_OW 7
// InGameOff ;
7176: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7180: LD_STRING M2X
7182: PPUSH
7183: CALL_OW 337
// SaveForQuickRestart ;
7187: CALL_OW 22
// russianAI = 1 ;
7191: LD_ADDR_EXP 13
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// end ; end ;
7199: GO 7202
7201: POP
// end ;
7202: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7203: LD_INT 32
7205: PPUSH
7206: CALL_OW 306
7210: IFFALSE 7543
7212: GO 7214
7214: DISABLE
// begin case JMMGirl of 1 :
7215: LD_EXP 7
7219: PUSH
7220: LD_INT 1
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7350
7228: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7229: LD_EXP 1
7233: PPUSH
7234: LD_STRING D6J-JMM-1
7236: PPUSH
7237: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7241: LD_STRING 13f_Denis
7243: PPUSH
7244: CALL_OW 28
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: PUSH
7253: LD_STRING 13s_Denis
7255: PPUSH
7256: CALL_OW 28
7260: PUSH
7261: LD_INT 1
7263: EQUAL
7264: OR
7265: IFFALSE 7305
// begin Say ( Joan , D6J-Joan-1 ) ;
7267: LD_EXP 2
7271: PPUSH
7272: LD_STRING D6J-Joan-1
7274: PPUSH
7275: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7279: LD_EXP 1
7283: PPUSH
7284: LD_STRING D6J-JMM-2
7286: PPUSH
7287: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7291: LD_EXP 2
7295: PPUSH
7296: LD_STRING D6J-Joan-2
7298: PPUSH
7299: CALL_OW 88
// end else
7303: GO 7317
// begin Say ( Joan , D6J-Joan-2a ) ;
7305: LD_EXP 2
7309: PPUSH
7310: LD_STRING D6J-Joan-2a
7312: PPUSH
7313: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7317: LD_EXP 1
7321: PPUSH
7322: LD_STRING D6J-JMM-3
7324: PPUSH
7325: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7329: LD_EXP 2
7333: PPUSH
7334: LD_STRING D6J-Joan-3
7336: PPUSH
7337: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7341: LD_STRING M3
7343: PPUSH
7344: CALL_OW 337
// end ; 2 :
7348: GO 7543
7350: LD_INT 2
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7416
7358: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7359: LD_EXP 1
7363: PPUSH
7364: LD_STRING D6L-JMM-1
7366: PPUSH
7367: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7371: LD_EXP 3
7375: PPUSH
7376: LD_STRING D6L-Lisa-1
7378: PPUSH
7379: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7383: LD_EXP 1
7387: PPUSH
7388: LD_STRING D6L-JMM-2
7390: PPUSH
7391: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7395: LD_EXP 3
7399: PPUSH
7400: LD_STRING D6L-Lisa-2
7402: PPUSH
7403: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7407: LD_STRING M3
7409: PPUSH
7410: CALL_OW 337
// end ; 3 :
7414: GO 7543
7416: LD_INT 3
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7542
7424: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7425: LD_EXP 1
7429: PPUSH
7430: LD_STRING D6X-JMM-1
7432: PPUSH
7433: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7437: LD_EXP 4
7441: PPUSH
7442: LD_STRING D6X-Con-1
7444: PPUSH
7445: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7449: LD_EXP 1
7453: PPUSH
7454: LD_STRING D6X-JMM-2
7456: PPUSH
7457: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7461: LD_EXP 4
7465: PPUSH
7466: LD_STRING D6X-Con-2
7468: PPUSH
7469: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7473: LD_EXP 1
7477: PPUSH
7478: LD_STRING D6X-JMM-3
7480: PPUSH
7481: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7485: LD_EXP 4
7489: PPUSH
7490: LD_STRING D6X-Con-3
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7497: LD_EXP 1
7501: PPUSH
7502: LD_STRING D6X-JMM-4
7504: PPUSH
7505: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7509: LD_EXP 4
7513: PPUSH
7514: LD_STRING D6X-Con-4
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7521: LD_EXP 1
7525: PPUSH
7526: LD_STRING D6X-JMM-5
7528: PPUSH
7529: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7533: LD_STRING M3
7535: PPUSH
7536: CALL_OW 337
// end ; end ;
7540: GO 7543
7542: POP
// end ;
7543: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7544: LD_INT 22
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 33
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PPUSH
7568: CALL_OW 69
7572: PPUSH
7573: CALL_OW 306
7577: IFFALSE 7723
7579: GO 7581
7581: DISABLE
// begin case JMMGirl of 1 :
7582: LD_EXP 7
7586: PUSH
7587: LD_INT 1
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7632
7595: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7596: LD_EXP 1
7600: PPUSH
7601: LD_STRING D5-JMM-1
7603: PPUSH
7604: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7608: LD_INT 77
7610: PPUSH
7611: LD_INT 87
7613: PPUSH
7614: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7618: LD_EXP 2
7622: PPUSH
7623: LD_STRING D5-Joan-1
7625: PPUSH
7626: CALL_OW 88
// end ; 2 :
7630: GO 7723
7632: LD_INT 2
7634: DOUBLE
7635: EQUAL
7636: IFTRUE 7640
7638: GO 7677
7640: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D5-JMM-1
7648: PPUSH
7649: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7653: LD_INT 77
7655: PPUSH
7656: LD_INT 87
7658: PPUSH
7659: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7663: LD_EXP 3
7667: PPUSH
7668: LD_STRING D5-Lisa-1
7670: PPUSH
7671: CALL_OW 88
// end ; 3 :
7675: GO 7723
7677: LD_INT 3
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7722
7685: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7686: LD_EXP 1
7690: PPUSH
7691: LD_STRING D5-JMM-1
7693: PPUSH
7694: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7698: LD_INT 77
7700: PPUSH
7701: LD_INT 87
7703: PPUSH
7704: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7708: LD_EXP 4
7712: PPUSH
7713: LD_STRING D5-Con-1
7715: PPUSH
7716: CALL_OW 88
// end ; end ;
7720: GO 7723
7722: POP
// end ;
7723: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7724: LD_INT 48
7726: PPUSH
7727: CALL_OW 255
7731: PUSH
7732: LD_INT 1
7734: EQUAL
7735: IFFALSE 7832
7737: GO 7739
7739: DISABLE
// begin DialogueOn ;
7740: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7744: LD_EXP 5
7748: PPUSH
7749: LD_STRING D7-Pow-1
7751: PPUSH
7752: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7756: LD_EXP 1
7760: PPUSH
7761: LD_STRING D7-JMM-1
7763: PPUSH
7764: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7768: LD_EXP 5
7772: PPUSH
7773: LD_STRING D7-Pow-2
7775: PPUSH
7776: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7780: LD_EXP 1
7784: PPUSH
7785: LD_STRING D7-JMM-2
7787: PPUSH
7788: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7792: LD_EXP 5
7796: PPUSH
7797: LD_STRING D7-Pow-3
7799: PPUSH
7800: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7804: LD_EXP 1
7808: PPUSH
7809: LD_STRING D7-JMM-3
7811: PPUSH
7812: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7816: LD_EXP 5
7820: PPUSH
7821: LD_STRING D7-Pow-4
7823: PPUSH
7824: CALL_OW 94
// DialogueOff ;
7828: CALL_OW 7
// end ; end_of_file
7832: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 255
7842: PUSH
7843: LD_INT 3
7845: EQUAL
7846: IFFALSE 7920
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7848: LD_ADDR_EXP 10
7852: PUSH
7853: LD_EXP 10
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: CALL_OW 3
7865: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7866: LD_ADDR_EXP 10
7870: PUSH
7871: LD_EXP 10
7875: PPUSH
7876: LD_INT 1
7878: PPUSH
7879: CALL_OW 3
7883: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7884: LD_ADDR_EXP 10
7888: PUSH
7889: LD_EXP 10
7893: PPUSH
7894: LD_INT 1
7896: PPUSH
7897: CALL_OW 3
7901: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7902: LD_ADDR_EXP 10
7906: PUSH
7907: LD_EXP 10
7911: PPUSH
7912: LD_INT 1
7914: PPUSH
7915: CALL_OW 3
7919: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 255
7929: PUSH
7930: LD_INT 3
7932: EQUAL
7933: PUSH
7934: LD_VAR 0 1
7938: PPUSH
7939: CALL_OW 266
7943: PUSH
7944: LD_INT 0
7946: EQUAL
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 266
7957: PUSH
7958: LD_INT 2
7960: EQUAL
7961: OR
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 266
7972: PUSH
7973: LD_INT 4
7975: EQUAL
7976: OR
7977: PUSH
7978: EMPTY
7979: LIST
7980: AND
7981: IFFALSE 7992
// ComUpgrade ( building ) ;
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 255
8001: PUSH
8002: LD_INT 3
8004: EQUAL
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 266
8015: PUSH
8016: LD_INT 32
8018: EQUAL
8019: AND
8020: IFFALSE 8061
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 42
8029: PUSH
8030: LD_INT 43
8032: PUSH
8033: LD_INT 44
8035: PUSH
8036: LD_INT 46
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 1
8047: PPUSH
8048: LD_INT 4
8050: PPUSH
8051: CALL_OW 12
8055: ARRAY
8056: PPUSH
8057: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 255
8070: PUSH
8071: LD_INT 3
8073: EQUAL
8074: PUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 266
8084: PUSH
8085: LD_INT 33
8087: EQUAL
8088: AND
8089: IFFALSE 8130
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8091: LD_VAR 0 1
8095: PPUSH
8096: LD_INT 42
8098: PUSH
8099: LD_INT 43
8101: PUSH
8102: LD_INT 44
8104: PUSH
8105: LD_INT 46
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 1
8116: PPUSH
8117: LD_INT 4
8119: PPUSH
8120: CALL_OW 12
8124: ARRAY
8125: PPUSH
8126: CALL_OW 208
// end ;
8130: PPOPN 1
8132: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 11
8142: IN
8143: IFFALSE 8161
// russianTanks := russianTanks diff unit ;
8145: LD_ADDR_EXP 11
8149: PUSH
8150: LD_EXP 11
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if unit in russianTimeLapsers then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 12
8170: IN
8171: IFFALSE 8189
// russianTimeLapsers := russianTimeLapsers diff unit ;
8173: LD_ADDR_EXP 12
8177: PUSH
8178: LD_EXP 12
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL_OW 255
8198: PUSH
8199: LD_INT 3
8201: EQUAL
8202: PUSH
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 247
8212: PUSH
8213: LD_INT 3
8215: EQUAL
8216: AND
8217: IFFALSE 8681
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 266
8228: PUSH
8229: LD_INT 31
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 36
8237: PUSH
8238: LD_INT 0
8240: PUSH
8241: LD_INT 24
8243: PUSH
8244: LD_INT 17
8246: PUSH
8247: LD_INT 25
8249: PUSH
8250: LD_INT 19
8252: PUSH
8253: LD_INT 20
8255: PUSH
8256: LD_INT 18
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 23
8264: PUSH
8265: LD_INT 16
8267: PUSH
8268: LD_INT 6
8270: PUSH
8271: LD_INT 29
8273: PUSH
8274: LD_INT 26
8276: PUSH
8277: LD_INT 30
8279: PUSH
8280: LD_INT 28
8282: PUSH
8283: LD_INT 27
8285: PUSH
8286: LD_INT 33
8288: PUSH
8289: LD_INT 2
8291: PUSH
8292: LD_INT 4
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: IN
8319: IFFALSE 8405
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8321: LD_ADDR_EXP 10
8325: PUSH
8326: LD_EXP 10
8330: PUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 266
8340: ADD
8341: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8342: LD_ADDR_EXP 10
8346: PUSH
8347: LD_EXP 10
8351: PUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 250
8361: ADD
8362: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8363: LD_ADDR_EXP 10
8367: PUSH
8368: LD_EXP 10
8372: PUSH
8373: LD_VAR 0 1
8377: PPUSH
8378: CALL_OW 251
8382: ADD
8383: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8384: LD_ADDR_EXP 10
8388: PUSH
8389: LD_EXP 10
8393: PUSH
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 254
8403: ADD
8404: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 266
8414: PUSH
8415: LD_INT 1
8417: EQUAL
8418: IFFALSE 8497
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8420: LD_ADDR_EXP 10
8424: PUSH
8425: LD_EXP 10
8429: PUSH
8430: LD_INT 0
8432: ADD
8433: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8434: LD_ADDR_EXP 10
8438: PUSH
8439: LD_EXP 10
8443: PUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 250
8453: ADD
8454: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8455: LD_ADDR_EXP 10
8459: PUSH
8460: LD_EXP 10
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 251
8474: ADD
8475: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8476: LD_ADDR_EXP 10
8480: PUSH
8481: LD_EXP 10
8485: PUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 254
8495: ADD
8496: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 266
8506: PUSH
8507: LD_INT 3
8509: EQUAL
8510: IFFALSE 8589
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8512: LD_ADDR_EXP 10
8516: PUSH
8517: LD_EXP 10
8521: PUSH
8522: LD_INT 2
8524: ADD
8525: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8526: LD_ADDR_EXP 10
8530: PUSH
8531: LD_EXP 10
8535: PUSH
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 250
8545: ADD
8546: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8547: LD_ADDR_EXP 10
8551: PUSH
8552: LD_EXP 10
8556: PUSH
8557: LD_VAR 0 1
8561: PPUSH
8562: CALL_OW 251
8566: ADD
8567: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8568: LD_ADDR_EXP 10
8572: PUSH
8573: LD_EXP 10
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 254
8587: ADD
8588: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8589: LD_VAR 0 1
8593: PPUSH
8594: CALL_OW 266
8598: PUSH
8599: LD_INT 5
8601: EQUAL
8602: IFFALSE 8681
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8604: LD_ADDR_EXP 10
8608: PUSH
8609: LD_EXP 10
8613: PUSH
8614: LD_INT 4
8616: ADD
8617: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8618: LD_ADDR_EXP 10
8622: PUSH
8623: LD_EXP 10
8627: PUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 250
8637: ADD
8638: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8639: LD_ADDR_EXP 10
8643: PUSH
8644: LD_EXP 10
8648: PUSH
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 251
8658: ADD
8659: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8660: LD_ADDR_EXP 10
8664: PUSH
8665: LD_EXP 10
8669: PUSH
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 254
8679: ADD
8680: ST_TO_ADDR
// end ; end ; end ;
8681: PPOPN 1
8683: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8684: LD_VAR 0 3
8688: PPUSH
8689: CALL_OW 264
8693: PUSH
8694: LD_INT 10
8696: EQUAL
8697: IFFALSE 8713
// destroyCounter := destroyCounter + 1 ;
8699: LD_ADDR_EXP 17
8703: PUSH
8704: LD_EXP 17
8708: PUSH
8709: LD_INT 1
8711: PLUS
8712: ST_TO_ADDR
// end ;
8713: PPOPN 3
8715: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8716: LD_VAR 0 2
8720: PUSH
8721: LD_INT 1
8723: EQUAL
8724: PUSH
8725: LD_VAR 0 2
8729: PUSH
8730: LD_INT 40
8732: EQUAL
8733: OR
8734: IFFALSE 8858
// if GetSide ( vehicle ) = 3 then
8736: LD_VAR 0 1
8740: PPUSH
8741: CALL_OW 255
8745: PUSH
8746: LD_INT 3
8748: EQUAL
8749: IFFALSE 8858
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 264
8760: PUSH
8761: LD_INT 47
8763: EQUAL
8764: PUSH
8765: LD_VAR 0 1
8769: PPUSH
8770: CALL_OW 264
8774: PUSH
8775: LD_INT 46
8777: EQUAL
8778: OR
8779: PUSH
8780: LD_VAR 0 1
8784: PPUSH
8785: CALL_OW 264
8789: PUSH
8790: LD_INT 45
8792: EQUAL
8793: OR
8794: PUSH
8795: LD_VAR 0 1
8799: PPUSH
8800: CALL_OW 264
8804: PUSH
8805: LD_INT 44
8807: EQUAL
8808: OR
8809: IFFALSE 8827
// russianTanks = russianTanks ^ vehicle ;
8811: LD_ADDR_EXP 11
8815: PUSH
8816: LD_EXP 11
8820: PUSH
8821: LD_VAR 0 1
8825: ADD
8826: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 264
8836: PUSH
8837: LD_INT 49
8839: EQUAL
8840: IFFALSE 8858
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8842: LD_ADDR_EXP 12
8846: PUSH
8847: LD_EXP 12
8851: PUSH
8852: LD_VAR 0 1
8856: ADD
8857: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 255
8867: PUSH
8868: LD_INT 1
8870: EQUAL
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 264
8881: PUSH
8882: LD_INT 10
8884: EQUAL
8885: AND
8886: IFFALSE 8902
// amLaserCounter = amLaserCounter + 1 ;
8888: LD_ADDR_EXP 9
8892: PUSH
8893: LD_EXP 9
8897: PUSH
8898: LD_INT 1
8900: PLUS
8901: ST_TO_ADDR
// end ;
8902: PPOPN 2
8904: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8905: LD_VAR 0 1
8909: PPUSH
8910: CALL 24023 0 1
// end ; end_of_file
8914: PPOPN 1
8916: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8917: LD_EXP 1
8921: PPUSH
8922: CALL_OW 310
8926: PPUSH
8927: LD_INT 12
8929: PPUSH
8930: CALL_OW 308
8934: PUSH
8935: LD_EXP 15
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: AND
8944: IFFALSE 9290
8946: GO 8948
8948: DISABLE
8949: LD_INT 0
8951: PPUSH
8952: PPUSH
// begin enable ;
8953: ENABLE
// if JMMGirl = 1 then
8954: LD_EXP 7
8958: PUSH
8959: LD_INT 1
8961: EQUAL
8962: IFFALSE 8979
// JMMGirlVeh = IsInUnit ( Joan ) ;
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_EXP 2
8973: PPUSH
8974: CALL_OW 310
8978: ST_TO_ADDR
// if JMMGirl = 2 then
8979: LD_EXP 7
8983: PUSH
8984: LD_INT 2
8986: EQUAL
8987: IFFALSE 9004
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_EXP 3
8998: PPUSH
8999: CALL_OW 310
9003: ST_TO_ADDR
// if JMMGirl = 3 then
9004: LD_EXP 7
9008: PUSH
9009: LD_INT 3
9011: EQUAL
9012: IFFALSE 9029
// JMMGirlVeh = IsInUnit ( Connie ) ;
9014: LD_ADDR_VAR 0 1
9018: PUSH
9019: LD_EXP 4
9023: PPUSH
9024: CALL_OW 310
9028: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9029: LD_EXP 1
9033: PPUSH
9034: CALL_OW 310
9038: PPUSH
9039: LD_EXP 2
9043: PPUSH
9044: CALL_OW 310
9048: PPUSH
9049: CALL_OW 296
9053: PUSH
9054: LD_INT 10
9056: LESS
9057: PUSH
9058: LD_EXP 1
9062: PPUSH
9063: CALL_OW 310
9067: PPUSH
9068: LD_EXP 3
9072: PPUSH
9073: CALL_OW 310
9077: PPUSH
9078: CALL_OW 296
9082: PUSH
9083: LD_INT 10
9085: LESS
9086: OR
9087: PUSH
9088: LD_EXP 1
9092: PPUSH
9093: CALL_OW 310
9097: PPUSH
9098: LD_EXP 4
9102: PPUSH
9103: CALL_OW 310
9107: PPUSH
9108: CALL_OW 296
9112: PUSH
9113: LD_INT 10
9115: LESS
9116: OR
9117: IFFALSE 9211
// begin case Query ( Q3b ) of 1 :
9119: LD_STRING Q3b
9121: PPUSH
9122: CALL_OW 97
9126: PUSH
9127: LD_INT 1
9129: DOUBLE
9130: EQUAL
9131: IFTRUE 9135
9133: GO 9208
9135: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 265
9145: PUSH
9146: EMPTY
9147: LIST
9148: PUSH
9149: LD_VAR 0 1
9153: PPUSH
9154: CALL_OW 262
9158: PUSH
9159: EMPTY
9160: LIST
9161: PUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 263
9171: PUSH
9172: EMPTY
9173: LIST
9174: PUSH
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 264
9184: PUSH
9185: EMPTY
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PPUSH
9194: LD_STRING 14_JMMGirlVeh_1
9196: PPUSH
9197: CALL_OW 39
// FinishMission ;
9201: CALL 9431 0 0
// disable ;
9205: DISABLE
// end ; end ;
9206: GO 9209
9208: POP
// end else
9209: GO 9290
// begin if JMMGirl = 1 then
9211: LD_EXP 7
9215: PUSH
9216: LD_INT 1
9218: EQUAL
9219: IFFALSE 9236
// dec := Query ( Q3bJ ) else
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: LD_STRING Q3bJ
9228: PPUSH
9229: CALL_OW 97
9233: ST_TO_ADDR
9234: GO 9274
// if JMMGirl = 2 then
9236: LD_EXP 7
9240: PUSH
9241: LD_INT 2
9243: EQUAL
9244: IFFALSE 9261
// dec := Query ( Q3bL ) else
9246: LD_ADDR_VAR 0 2
9250: PUSH
9251: LD_STRING Q3bL
9253: PPUSH
9254: CALL_OW 97
9258: ST_TO_ADDR
9259: GO 9274
// dec := Query ( Q3bX ) ;
9261: LD_ADDR_VAR 0 2
9265: PUSH
9266: LD_STRING Q3bX
9268: PPUSH
9269: CALL_OW 97
9273: ST_TO_ADDR
// if dec = 1 then
9274: LD_VAR 0 2
9278: PUSH
9279: LD_INT 1
9281: EQUAL
9282: IFFALSE 9290
// begin FinishMission ;
9284: CALL 9431 0 0
// exit ;
9288: GO 9290
// end ; end ; end ;
9290: PPOPN 2
9292: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9293: LD_INT 22
9295: PUSH
9296: LD_INT 3
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 21
9305: PUSH
9306: LD_INT 1
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 69
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: PUSH
9326: LD_EXP 15
9330: PUSH
9331: LD_INT 0
9333: EQUAL
9334: AND
9335: IFFALSE 9430
9337: GO 9339
9339: DISABLE
// begin DialogueOn ;
9340: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9344: LD_EXP 1
9348: PPUSH
9349: LD_STRING DEnd-JMM-1
9351: PPUSH
9352: CALL_OW 88
// if JMMGirl = 1 then
9356: LD_EXP 7
9360: PUSH
9361: LD_INT 1
9363: EQUAL
9364: IFFALSE 9378
// Say ( Joan , DEnd-Joan-1 ) ;
9366: LD_EXP 2
9370: PPUSH
9371: LD_STRING DEnd-Joan-1
9373: PPUSH
9374: CALL_OW 88
// if JMMGirl = 2 then
9378: LD_EXP 7
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: IFFALSE 9400
// Say ( Lisa , DEnd-Lisa-1 ) ;
9388: LD_EXP 3
9392: PPUSH
9393: LD_STRING DEnd-Lisa-1
9395: PPUSH
9396: CALL_OW 88
// if JMMGirl = 3 then
9400: LD_EXP 7
9404: PUSH
9405: LD_INT 3
9407: EQUAL
9408: IFFALSE 9422
// Say ( Connie , DEnd-Con-1 ) ;
9410: LD_EXP 4
9414: PPUSH
9415: LD_STRING DEnd-Con-1
9417: PPUSH
9418: CALL_OW 88
// DialogueOff ;
9422: CALL_OW 7
// FinishMission ;
9426: CALL 9431 0 0
// end ;
9430: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9431: LD_INT 0
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
9437: PPUSH
// m1 := false ;
9438: LD_ADDR_VAR 0 3
9442: PUSH
9443: LD_INT 0
9445: ST_TO_ADDR
// m2 := false ;
9446: LD_ADDR_VAR 0 4
9450: PUSH
9451: LD_INT 0
9453: ST_TO_ADDR
// m3 := false ;
9454: LD_ADDR_VAR 0 5
9458: PUSH
9459: LD_INT 0
9461: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9462: LD_EXP 1
9466: PPUSH
9467: LD_STRING 14_JMM
9469: PPUSH
9470: CALL_OW 38
// if tick <= 50 50$00 then
9474: LD_OWVAR 1
9478: PUSH
9479: LD_INT 105000
9481: LESSEQUAL
9482: IFFALSE 9491
// SetAchievement ( ACH_ASPEED_14 ) ;
9484: LD_STRING ACH_ASPEED_14
9486: PPUSH
9487: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9491: LD_EXP 1
9495: PPUSH
9496: CALL_OW 310
9500: PUSH
9501: LD_EXP 1
9505: PPUSH
9506: CALL_OW 310
9510: PPUSH
9511: CALL_OW 247
9515: PUSH
9516: LD_INT 2
9518: EQUAL
9519: AND
9520: IFFALSE 9602
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_EXP 1
9531: PPUSH
9532: CALL_OW 310
9536: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9537: LD_VAR 0 2
9541: PPUSH
9542: CALL_OW 265
9546: PUSH
9547: EMPTY
9548: LIST
9549: PUSH
9550: LD_VAR 0 2
9554: PPUSH
9555: CALL_OW 262
9559: PUSH
9560: EMPTY
9561: LIST
9562: PUSH
9563: LD_VAR 0 2
9567: PPUSH
9568: CALL_OW 263
9572: PUSH
9573: EMPTY
9574: LIST
9575: PUSH
9576: LD_VAR 0 2
9580: PPUSH
9581: CALL_OW 264
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: PPUSH
9595: LD_STRING 14_JMMVeh_1
9597: PPUSH
9598: CALL_OW 39
// end ; if fastEnd = 1 then
9602: LD_EXP 15
9606: PUSH
9607: LD_INT 1
9609: EQUAL
9610: IFFALSE 9699
// begin AddMedal ( fastend , - 1 ) ;
9612: LD_STRING fastend
9614: PPUSH
9615: LD_INT 1
9617: NEG
9618: PPUSH
9619: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9623: LD_STRING fastend
9625: PPUSH
9626: LD_INT 1
9628: NEG
9629: PPUSH
9630: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9634: LD_STRING fastend
9636: PPUSH
9637: LD_INT 1
9639: NEG
9640: PPUSH
9641: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9645: LD_EXP 7
9649: PPUSH
9650: LD_STRING 14_JMMGirl_1
9652: PPUSH
9653: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9657: LD_INT 0
9659: PPUSH
9660: LD_STRING 14_JMMGirlStatus_1
9662: PPUSH
9663: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9667: LD_INT 0
9669: PPUSH
9670: LD_STRING 14_KappaStatus_1
9672: PPUSH
9673: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9677: LD_STRING Eliminate
9679: PPUSH
9680: CALL_OW 102
// RewardPeople ( JMM ) ;
9684: LD_EXP 1
9688: PPUSH
9689: CALL_OW 43
// YouWin ;
9693: CALL_OW 103
// exit ;
9697: GO 10524
// end ; if fastEnd = 0 then
9699: LD_EXP 15
9703: PUSH
9704: LD_INT 0
9706: EQUAL
9707: IFFALSE 10417
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9709: LD_EXP 7
9713: PPUSH
9714: LD_STRING 14_JMMGirl_1
9716: PPUSH
9717: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9721: LD_INT 22
9723: PUSH
9724: LD_INT 3
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PUSH
9750: LD_INT 0
9752: EQUAL
9753: PUSH
9754: LD_INT 48
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 1
9764: EQUAL
9765: AND
9766: IFFALSE 9780
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9768: LD_INT 1
9770: PPUSH
9771: LD_STRING 14_KappaStatus_1
9773: PPUSH
9774: CALL_OW 39
9778: GO 9790
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9780: LD_INT 0
9782: PPUSH
9783: LD_STRING 14_KappaStatus_1
9785: PPUSH
9786: CALL_OW 39
// case JMMGirl of 1 :
9790: LD_EXP 7
9794: PUSH
9795: LD_INT 1
9797: DOUBLE
9798: EQUAL
9799: IFTRUE 9803
9801: GO 9959
9803: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9804: LD_EXP 2
9808: PPUSH
9809: CALL_OW 302
9813: PUSH
9814: LD_EXP 2
9818: PPUSH
9819: CALL_OW 255
9823: PUSH
9824: LD_INT 1
9826: EQUAL
9827: AND
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: LD_INT 21
9841: PUSH
9842: LD_INT 1
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_INT 0
9860: EQUAL
9861: PUSH
9862: LD_EXP 1
9866: PPUSH
9867: CALL_OW 310
9871: PPUSH
9872: LD_EXP 2
9876: PPUSH
9877: CALL_OW 310
9881: PPUSH
9882: CALL_OW 296
9886: PUSH
9887: LD_INT 10
9889: LESS
9890: OR
9891: AND
9892: IFFALSE 9936
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9894: LD_INT 1
9896: PPUSH
9897: LD_STRING 14_JMMGirlStatus_1
9899: PPUSH
9900: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9904: LD_EXP 2
9908: PPUSH
9909: LD_STRING 14_Joan
9911: PPUSH
9912: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9916: LD_STRING protect
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 101
// m1 := true ;
9926: LD_ADDR_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// end else
9934: GO 9957
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9936: LD_INT 0
9938: PPUSH
9939: LD_STRING 14_JMMGirlStatus_1
9941: PPUSH
9942: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9946: LD_STRING protect
9948: PPUSH
9949: LD_INT 1
9951: NEG
9952: PPUSH
9953: CALL_OW 101
// end ; end ; 2 :
9957: GO 10288
9959: LD_INT 2
9961: DOUBLE
9962: EQUAL
9963: IFTRUE 9967
9965: GO 10123
9967: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9968: LD_EXP 3
9972: PPUSH
9973: CALL_OW 302
9977: PUSH
9978: LD_EXP 3
9982: PPUSH
9983: CALL_OW 255
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: AND
9992: PUSH
9993: LD_INT 22
9995: PUSH
9996: LD_INT 3
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 21
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PPUSH
10017: CALL_OW 69
10021: PUSH
10022: LD_INT 0
10024: EQUAL
10025: PUSH
10026: LD_EXP 1
10030: PPUSH
10031: CALL_OW 310
10035: PPUSH
10036: LD_EXP 3
10040: PPUSH
10041: CALL_OW 310
10045: PPUSH
10046: CALL_OW 296
10050: PUSH
10051: LD_INT 10
10053: LESS
10054: OR
10055: AND
10056: IFFALSE 10100
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10058: LD_INT 1
10060: PPUSH
10061: LD_STRING 14_JMMGirlStatus_1
10063: PPUSH
10064: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10068: LD_EXP 3
10072: PPUSH
10073: LD_STRING 14_Lisa
10075: PPUSH
10076: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10080: LD_STRING protect
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 101
// m1 := true ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// end else
10098: GO 10121
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10100: LD_INT 0
10102: PPUSH
10103: LD_STRING 14_JMMGirlStatus_1
10105: PPUSH
10106: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10110: LD_STRING protect
10112: PPUSH
10113: LD_INT 2
10115: NEG
10116: PPUSH
10117: CALL_OW 101
// end ; end ; 3 :
10121: GO 10288
10123: LD_INT 3
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10287
10131: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10132: LD_EXP 4
10136: PPUSH
10137: CALL_OW 302
10141: PUSH
10142: LD_EXP 4
10146: PPUSH
10147: CALL_OW 255
10151: PUSH
10152: LD_INT 1
10154: EQUAL
10155: AND
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: LD_INT 3
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 21
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: PUSH
10186: LD_INT 0
10188: EQUAL
10189: PUSH
10190: LD_EXP 1
10194: PPUSH
10195: CALL_OW 310
10199: PPUSH
10200: LD_EXP 4
10204: PPUSH
10205: CALL_OW 310
10209: PPUSH
10210: CALL_OW 296
10214: PUSH
10215: LD_INT 10
10217: LESS
10218: OR
10219: AND
10220: IFFALSE 10264
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10222: LD_INT 1
10224: PPUSH
10225: LD_STRING 14_JMMGirlStatus_1
10227: PPUSH
10228: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10232: LD_EXP 4
10236: PPUSH
10237: LD_STRING 14_Connie
10239: PPUSH
10240: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10244: LD_STRING protect
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 101
// m1 := true ;
10254: LD_ADDR_VAR 0 3
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// end else
10262: GO 10285
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10264: LD_INT 0
10266: PPUSH
10267: LD_STRING 14_JMMGirlStatus_1
10269: PPUSH
10270: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10274: LD_STRING protect
10276: PPUSH
10277: LD_INT 3
10279: NEG
10280: PPUSH
10281: CALL_OW 101
// end ; end ; end ;
10285: GO 10288
10287: POP
// if amLaserCounter >= 2 then
10288: LD_EXP 9
10292: PUSH
10293: LD_INT 2
10295: GREATEREQUAL
10296: IFFALSE 10318
// begin AddMedal ( double , 1 ) ;
10298: LD_STRING double
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 101
// m2 := true ;
10308: LD_ADDR_VAR 0 4
10312: PUSH
10313: LD_INT 1
10315: ST_TO_ADDR
// end else
10316: GO 10352
// begin if amLaserCounter = 1 then
10318: LD_EXP 9
10322: PUSH
10323: LD_INT 1
10325: EQUAL
10326: IFFALSE 10341
// AddMedal ( double , - 2 ) else
10328: LD_STRING double
10330: PPUSH
10331: LD_INT 2
10333: NEG
10334: PPUSH
10335: CALL_OW 101
10339: GO 10352
// AddMedal ( double , - 1 ) ;
10341: LD_STRING double
10343: PPUSH
10344: LD_INT 1
10346: NEG
10347: PPUSH
10348: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10352: LD_INT 22
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 21
10364: PUSH
10365: LD_INT 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: PUSH
10381: LD_INT 0
10383: EQUAL
10384: IFFALSE 10406
// begin AddMedal ( base , 1 ) ;
10386: LD_STRING base
10388: PPUSH
10389: LD_INT 1
10391: PPUSH
10392: CALL_OW 101
// m3 := true ;
10396: LD_ADDR_VAR 0 5
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// end else
10404: GO 10417
// AddMedal ( base , - 1 ) ;
10406: LD_STRING base
10408: PPUSH
10409: LD_INT 1
10411: NEG
10412: PPUSH
10413: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10417: LD_VAR 0 3
10421: PUSH
10422: LD_VAR 0 4
10426: AND
10427: PUSH
10428: LD_VAR 0 5
10432: AND
10433: PUSH
10434: LD_OWVAR 67
10438: PUSH
10439: LD_INT 3
10441: EQUAL
10442: AND
10443: IFFALSE 10455
// SetAchievementEX ( ACH_AMER , 14 ) ;
10445: LD_STRING ACH_AMER
10447: PPUSH
10448: LD_INT 14
10450: PPUSH
10451: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10455: LD_STRING Eliminate
10457: PPUSH
10458: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10462: LD_INT 22
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 3
10474: PUSH
10475: LD_INT 25
10477: PUSH
10478: LD_INT 12
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: LD_INT 25
10494: PUSH
10495: LD_INT 16
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: PPUSH
10516: CALL_OW 43
// YouWin ;
10520: CALL_OW 103
// end ; end_of_file
10524: LD_VAR 0 1
10528: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10529: LD_EXP 1
10533: PPUSH
10534: CALL_OW 301
10538: IFFALSE 10550
10540: GO 10542
10542: DISABLE
// YouLost ( JMM ) ; end_of_file
10543: LD_STRING JMM
10545: PPUSH
10546: CALL_OW 104
10550: END
// every 1 1$0 do
10551: GO 10553
10553: DISABLE
// begin enable ;
10554: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10555: LD_INT 3
10557: PPUSH
10558: LD_INT 5
10560: PPUSH
10561: CALL_OW 12
10565: PPUSH
10566: LD_INT 13
10568: PPUSH
10569: LD_INT 1
10571: PPUSH
10572: CALL_OW 55
// end ; end_of_file
10576: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10577: LD_INT 0
10579: PPUSH
// ar_miner := 81 ;
10580: LD_ADDR_EXP 26
10584: PUSH
10585: LD_INT 81
10587: ST_TO_ADDR
// ar_crane := 88 ;
10588: LD_ADDR_EXP 25
10592: PUSH
10593: LD_INT 88
10595: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10596: LD_ADDR_EXP 20
10600: PUSH
10601: LD_INT 89
10603: ST_TO_ADDR
// us_hack := 99 ;
10604: LD_ADDR_EXP 21
10608: PUSH
10609: LD_INT 99
10611: ST_TO_ADDR
// us_artillery := 97 ;
10612: LD_ADDR_EXP 22
10616: PUSH
10617: LD_INT 97
10619: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10620: LD_ADDR_EXP 23
10624: PUSH
10625: LD_INT 91
10627: ST_TO_ADDR
// ar_mortar := 92 ;
10628: LD_ADDR_EXP 24
10632: PUSH
10633: LD_INT 92
10635: ST_TO_ADDR
// ru_radar := 98 ;
10636: LD_ADDR_EXP 19
10640: PUSH
10641: LD_INT 98
10643: ST_TO_ADDR
// tech_Artillery := 80 ;
10644: LD_ADDR_EXP 27
10648: PUSH
10649: LD_INT 80
10651: ST_TO_ADDR
// tech_RadMat := 81 ;
10652: LD_ADDR_EXP 28
10656: PUSH
10657: LD_INT 81
10659: ST_TO_ADDR
// tech_BasicTools := 82 ;
10660: LD_ADDR_EXP 29
10664: PUSH
10665: LD_INT 82
10667: ST_TO_ADDR
// tech_Cargo := 83 ;
10668: LD_ADDR_EXP 30
10672: PUSH
10673: LD_INT 83
10675: ST_TO_ADDR
// tech_Track := 84 ;
10676: LD_ADDR_EXP 31
10680: PUSH
10681: LD_INT 84
10683: ST_TO_ADDR
// tech_Crane := 85 ;
10684: LD_ADDR_EXP 32
10688: PUSH
10689: LD_INT 85
10691: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10692: LD_ADDR_EXP 33
10696: PUSH
10697: LD_INT 86
10699: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10700: LD_ADDR_EXP 34
10704: PUSH
10705: LD_INT 87
10707: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10708: LD_ADDR_EXP 35
10712: PUSH
10713: LD_INT 88
10715: ST_TO_ADDR
// class_mastodont := 31 ;
10716: LD_ADDR_EXP 36
10720: PUSH
10721: LD_INT 31
10723: ST_TO_ADDR
// class_horse := 21 ;
10724: LD_ADDR_EXP 37
10728: PUSH
10729: LD_INT 21
10731: ST_TO_ADDR
// end ;
10732: LD_VAR 0 1
10736: RET
// every 1 do
10737: GO 10739
10739: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10740: CALL 10577 0 0
10744: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10745: LD_INT 0
10747: PPUSH
// if p2 = 100 then
10748: LD_VAR 0 2
10752: PUSH
10753: LD_INT 100
10755: EQUAL
10756: IFFALSE 11705
// begin if not StreamModeActive then
10758: LD_EXP 38
10762: NOT
10763: IFFALSE 10773
// StreamModeActive := true ;
10765: LD_ADDR_EXP 38
10769: PUSH
10770: LD_INT 1
10772: ST_TO_ADDR
// if p3 = 0 then
10773: LD_VAR 0 3
10777: PUSH
10778: LD_INT 0
10780: EQUAL
10781: IFFALSE 10787
// InitStreamMode ;
10783: CALL 11865 0 0
// if p3 = 1 then
10787: LD_VAR 0 3
10791: PUSH
10792: LD_INT 1
10794: EQUAL
10795: IFFALSE 10805
// sRocket := true ;
10797: LD_ADDR_EXP 43
10801: PUSH
10802: LD_INT 1
10804: ST_TO_ADDR
// if p3 = 2 then
10805: LD_VAR 0 3
10809: PUSH
10810: LD_INT 2
10812: EQUAL
10813: IFFALSE 10823
// sSpeed := true ;
10815: LD_ADDR_EXP 42
10819: PUSH
10820: LD_INT 1
10822: ST_TO_ADDR
// if p3 = 3 then
10823: LD_VAR 0 3
10827: PUSH
10828: LD_INT 3
10830: EQUAL
10831: IFFALSE 10841
// sEngine := true ;
10833: LD_ADDR_EXP 44
10837: PUSH
10838: LD_INT 1
10840: ST_TO_ADDR
// if p3 = 4 then
10841: LD_VAR 0 3
10845: PUSH
10846: LD_INT 4
10848: EQUAL
10849: IFFALSE 10859
// sSpec := true ;
10851: LD_ADDR_EXP 41
10855: PUSH
10856: LD_INT 1
10858: ST_TO_ADDR
// if p3 = 5 then
10859: LD_VAR 0 3
10863: PUSH
10864: LD_INT 5
10866: EQUAL
10867: IFFALSE 10877
// sLevel := true ;
10869: LD_ADDR_EXP 45
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// if p3 = 6 then
10877: LD_VAR 0 3
10881: PUSH
10882: LD_INT 6
10884: EQUAL
10885: IFFALSE 10895
// sArmoury := true ;
10887: LD_ADDR_EXP 46
10891: PUSH
10892: LD_INT 1
10894: ST_TO_ADDR
// if p3 = 7 then
10895: LD_VAR 0 3
10899: PUSH
10900: LD_INT 7
10902: EQUAL
10903: IFFALSE 10913
// sRadar := true ;
10905: LD_ADDR_EXP 47
10909: PUSH
10910: LD_INT 1
10912: ST_TO_ADDR
// if p3 = 8 then
10913: LD_VAR 0 3
10917: PUSH
10918: LD_INT 8
10920: EQUAL
10921: IFFALSE 10931
// sBunker := true ;
10923: LD_ADDR_EXP 48
10927: PUSH
10928: LD_INT 1
10930: ST_TO_ADDR
// if p3 = 9 then
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 9
10938: EQUAL
10939: IFFALSE 10949
// sHack := true ;
10941: LD_ADDR_EXP 49
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// if p3 = 10 then
10949: LD_VAR 0 3
10953: PUSH
10954: LD_INT 10
10956: EQUAL
10957: IFFALSE 10967
// sFire := true ;
10959: LD_ADDR_EXP 50
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// if p3 = 11 then
10967: LD_VAR 0 3
10971: PUSH
10972: LD_INT 11
10974: EQUAL
10975: IFFALSE 10985
// sRefresh := true ;
10977: LD_ADDR_EXP 51
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// if p3 = 12 then
10985: LD_VAR 0 3
10989: PUSH
10990: LD_INT 12
10992: EQUAL
10993: IFFALSE 11003
// sExp := true ;
10995: LD_ADDR_EXP 52
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// if p3 = 13 then
11003: LD_VAR 0 3
11007: PUSH
11008: LD_INT 13
11010: EQUAL
11011: IFFALSE 11021
// sDepot := true ;
11013: LD_ADDR_EXP 53
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// if p3 = 14 then
11021: LD_VAR 0 3
11025: PUSH
11026: LD_INT 14
11028: EQUAL
11029: IFFALSE 11039
// sFlag := true ;
11031: LD_ADDR_EXP 54
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// if p3 = 15 then
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 15
11046: EQUAL
11047: IFFALSE 11057
// sKamikadze := true ;
11049: LD_ADDR_EXP 62
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// if p3 = 16 then
11057: LD_VAR 0 3
11061: PUSH
11062: LD_INT 16
11064: EQUAL
11065: IFFALSE 11075
// sTroll := true ;
11067: LD_ADDR_EXP 63
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// if p3 = 17 then
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 17
11082: EQUAL
11083: IFFALSE 11093
// sSlow := true ;
11085: LD_ADDR_EXP 64
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// if p3 = 18 then
11093: LD_VAR 0 3
11097: PUSH
11098: LD_INT 18
11100: EQUAL
11101: IFFALSE 11111
// sLack := true ;
11103: LD_ADDR_EXP 65
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// if p3 = 19 then
11111: LD_VAR 0 3
11115: PUSH
11116: LD_INT 19
11118: EQUAL
11119: IFFALSE 11129
// sTank := true ;
11121: LD_ADDR_EXP 67
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// if p3 = 20 then
11129: LD_VAR 0 3
11133: PUSH
11134: LD_INT 20
11136: EQUAL
11137: IFFALSE 11147
// sRemote := true ;
11139: LD_ADDR_EXP 68
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// if p3 = 21 then
11147: LD_VAR 0 3
11151: PUSH
11152: LD_INT 21
11154: EQUAL
11155: IFFALSE 11165
// sPowell := true ;
11157: LD_ADDR_EXP 69
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// if p3 = 22 then
11165: LD_VAR 0 3
11169: PUSH
11170: LD_INT 22
11172: EQUAL
11173: IFFALSE 11183
// sTeleport := true ;
11175: LD_ADDR_EXP 72
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if p3 = 23 then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_INT 23
11190: EQUAL
11191: IFFALSE 11201
// sOilTower := true ;
11193: LD_ADDR_EXP 74
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// if p3 = 24 then
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 24
11208: EQUAL
11209: IFFALSE 11219
// sShovel := true ;
11211: LD_ADDR_EXP 75
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// if p3 = 25 then
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 25
11226: EQUAL
11227: IFFALSE 11237
// sSheik := true ;
11229: LD_ADDR_EXP 76
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// if p3 = 26 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 26
11244: EQUAL
11245: IFFALSE 11255
// sEarthquake := true ;
11247: LD_ADDR_EXP 78
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 27 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 27
11262: EQUAL
11263: IFFALSE 11273
// sAI := true ;
11265: LD_ADDR_EXP 79
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// if p3 = 28 then
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 28
11280: EQUAL
11281: IFFALSE 11291
// sCargo := true ;
11283: LD_ADDR_EXP 82
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// if p3 = 29 then
11291: LD_VAR 0 3
11295: PUSH
11296: LD_INT 29
11298: EQUAL
11299: IFFALSE 11309
// sDLaser := true ;
11301: LD_ADDR_EXP 83
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// if p3 = 30 then
11309: LD_VAR 0 3
11313: PUSH
11314: LD_INT 30
11316: EQUAL
11317: IFFALSE 11327
// sExchange := true ;
11319: LD_ADDR_EXP 84
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// if p3 = 31 then
11327: LD_VAR 0 3
11331: PUSH
11332: LD_INT 31
11334: EQUAL
11335: IFFALSE 11345
// sFac := true ;
11337: LD_ADDR_EXP 85
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
// if p3 = 32 then
11345: LD_VAR 0 3
11349: PUSH
11350: LD_INT 32
11352: EQUAL
11353: IFFALSE 11363
// sPower := true ;
11355: LD_ADDR_EXP 86
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// if p3 = 33 then
11363: LD_VAR 0 3
11367: PUSH
11368: LD_INT 33
11370: EQUAL
11371: IFFALSE 11381
// sRandom := true ;
11373: LD_ADDR_EXP 87
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// if p3 = 34 then
11381: LD_VAR 0 3
11385: PUSH
11386: LD_INT 34
11388: EQUAL
11389: IFFALSE 11399
// sShield := true ;
11391: LD_ADDR_EXP 88
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
// if p3 = 35 then
11399: LD_VAR 0 3
11403: PUSH
11404: LD_INT 35
11406: EQUAL
11407: IFFALSE 11417
// sTime := true ;
11409: LD_ADDR_EXP 89
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// if p3 = 36 then
11417: LD_VAR 0 3
11421: PUSH
11422: LD_INT 36
11424: EQUAL
11425: IFFALSE 11435
// sTools := true ;
11427: LD_ADDR_EXP 90
11431: PUSH
11432: LD_INT 1
11434: ST_TO_ADDR
// if p3 = 101 then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_INT 101
11442: EQUAL
11443: IFFALSE 11453
// sSold := true ;
11445: LD_ADDR_EXP 55
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// if p3 = 102 then
11453: LD_VAR 0 3
11457: PUSH
11458: LD_INT 102
11460: EQUAL
11461: IFFALSE 11471
// sDiff := true ;
11463: LD_ADDR_EXP 56
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// if p3 = 103 then
11471: LD_VAR 0 3
11475: PUSH
11476: LD_INT 103
11478: EQUAL
11479: IFFALSE 11489
// sFog := true ;
11481: LD_ADDR_EXP 59
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// if p3 = 104 then
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 104
11496: EQUAL
11497: IFFALSE 11507
// sReset := true ;
11499: LD_ADDR_EXP 60
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// if p3 = 105 then
11507: LD_VAR 0 3
11511: PUSH
11512: LD_INT 105
11514: EQUAL
11515: IFFALSE 11525
// sSun := true ;
11517: LD_ADDR_EXP 61
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// if p3 = 106 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 106
11532: EQUAL
11533: IFFALSE 11543
// sTiger := true ;
11535: LD_ADDR_EXP 57
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 107 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 107
11550: EQUAL
11551: IFFALSE 11561
// sBomb := true ;
11553: LD_ADDR_EXP 58
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 108 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 108
11568: EQUAL
11569: IFFALSE 11579
// sWound := true ;
11571: LD_ADDR_EXP 66
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 109 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 109
11586: EQUAL
11587: IFFALSE 11597
// sBetray := true ;
11589: LD_ADDR_EXP 70
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 110 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 110
11604: EQUAL
11605: IFFALSE 11615
// sContamin := true ;
11607: LD_ADDR_EXP 71
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 111 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 111
11622: EQUAL
11623: IFFALSE 11633
// sOil := true ;
11625: LD_ADDR_EXP 73
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 112 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 112
11640: EQUAL
11641: IFFALSE 11651
// sStu := true ;
11643: LD_ADDR_EXP 77
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 113 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 113
11658: EQUAL
11659: IFFALSE 11669
// sBazooka := true ;
11661: LD_ADDR_EXP 80
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 114 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 114
11676: EQUAL
11677: IFFALSE 11687
// sMortar := true ;
11679: LD_ADDR_EXP 81
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 115 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 115
11694: EQUAL
11695: IFFALSE 11705
// sRanger := true ;
11697: LD_ADDR_EXP 91
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// end ; if p2 = 101 then
11705: LD_VAR 0 2
11709: PUSH
11710: LD_INT 101
11712: EQUAL
11713: IFFALSE 11841
// begin case p3 of 1 :
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 1
11722: DOUBLE
11723: EQUAL
11724: IFTRUE 11728
11726: GO 11735
11728: POP
// hHackUnlimitedResources ; 2 :
11729: CALL 22878 0 0
11733: GO 11841
11735: LD_INT 2
11737: DOUBLE
11738: EQUAL
11739: IFTRUE 11743
11741: GO 11750
11743: POP
// hHackSetLevel10 ; 3 :
11744: CALL 23011 0 0
11748: GO 11841
11750: LD_INT 3
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11765
11758: POP
// hHackSetLevel10YourUnits ; 4 :
11759: CALL 23096 0 0
11763: GO 11841
11765: LD_INT 4
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11780
11773: POP
// hHackInvincible ; 5 :
11774: CALL 23544 0 0
11778: GO 11841
11780: LD_INT 5
11782: DOUBLE
11783: EQUAL
11784: IFTRUE 11788
11786: GO 11795
11788: POP
// hHackInvisible ; 6 :
11789: CALL 23655 0 0
11793: GO 11841
11795: LD_INT 6
11797: DOUBLE
11798: EQUAL
11799: IFTRUE 11803
11801: GO 11810
11803: POP
// hHackChangeYourSide ; 7 :
11804: CALL 23712 0 0
11808: GO 11841
11810: LD_INT 7
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11825
11818: POP
// hHackChangeUnitSide ; 8 :
11819: CALL 23754 0 0
11823: GO 11841
11825: LD_INT 8
11827: DOUBLE
11828: EQUAL
11829: IFTRUE 11833
11831: GO 11840
11833: POP
// hHackFog ; end ;
11834: CALL 23855 0 0
11838: GO 11841
11840: POP
// end ; end ;
11841: LD_VAR 0 7
11845: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11846: GO 11848
11848: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11849: LD_STRING initStreamRollete();
11851: PPUSH
11852: CALL_OW 559
// InitStreamMode ;
11856: CALL 11865 0 0
// DefineStreamItems ( ) ;
11860: CALL 12305 0 0
// end ;
11864: END
// function InitStreamMode ; begin
11865: LD_INT 0
11867: PPUSH
// streamModeActive := false ;
11868: LD_ADDR_EXP 38
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// normalCounter := 36 ;
11876: LD_ADDR_EXP 39
11880: PUSH
11881: LD_INT 36
11883: ST_TO_ADDR
// hardcoreCounter := 16 ;
11884: LD_ADDR_EXP 40
11888: PUSH
11889: LD_INT 16
11891: ST_TO_ADDR
// sRocket := false ;
11892: LD_ADDR_EXP 43
11896: PUSH
11897: LD_INT 0
11899: ST_TO_ADDR
// sSpeed := false ;
11900: LD_ADDR_EXP 42
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// sEngine := false ;
11908: LD_ADDR_EXP 44
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// sSpec := false ;
11916: LD_ADDR_EXP 41
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// sLevel := false ;
11924: LD_ADDR_EXP 45
11928: PUSH
11929: LD_INT 0
11931: ST_TO_ADDR
// sArmoury := false ;
11932: LD_ADDR_EXP 46
11936: PUSH
11937: LD_INT 0
11939: ST_TO_ADDR
// sRadar := false ;
11940: LD_ADDR_EXP 47
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// sBunker := false ;
11948: LD_ADDR_EXP 48
11952: PUSH
11953: LD_INT 0
11955: ST_TO_ADDR
// sHack := false ;
11956: LD_ADDR_EXP 49
11960: PUSH
11961: LD_INT 0
11963: ST_TO_ADDR
// sFire := false ;
11964: LD_ADDR_EXP 50
11968: PUSH
11969: LD_INT 0
11971: ST_TO_ADDR
// sRefresh := false ;
11972: LD_ADDR_EXP 51
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// sExp := false ;
11980: LD_ADDR_EXP 52
11984: PUSH
11985: LD_INT 0
11987: ST_TO_ADDR
// sDepot := false ;
11988: LD_ADDR_EXP 53
11992: PUSH
11993: LD_INT 0
11995: ST_TO_ADDR
// sFlag := false ;
11996: LD_ADDR_EXP 54
12000: PUSH
12001: LD_INT 0
12003: ST_TO_ADDR
// sKamikadze := false ;
12004: LD_ADDR_EXP 62
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// sTroll := false ;
12012: LD_ADDR_EXP 63
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// sSlow := false ;
12020: LD_ADDR_EXP 64
12024: PUSH
12025: LD_INT 0
12027: ST_TO_ADDR
// sLack := false ;
12028: LD_ADDR_EXP 65
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// sTank := false ;
12036: LD_ADDR_EXP 67
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// sRemote := false ;
12044: LD_ADDR_EXP 68
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// sPowell := false ;
12052: LD_ADDR_EXP 69
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// sTeleport := false ;
12060: LD_ADDR_EXP 72
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// sOilTower := false ;
12068: LD_ADDR_EXP 74
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// sShovel := false ;
12076: LD_ADDR_EXP 75
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// sSheik := false ;
12084: LD_ADDR_EXP 76
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// sEarthquake := false ;
12092: LD_ADDR_EXP 78
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// sAI := false ;
12100: LD_ADDR_EXP 79
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// sCargo := false ;
12108: LD_ADDR_EXP 82
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// sDLaser := false ;
12116: LD_ADDR_EXP 83
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sExchange := false ;
12124: LD_ADDR_EXP 84
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sFac := false ;
12132: LD_ADDR_EXP 85
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sPower := false ;
12140: LD_ADDR_EXP 86
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sRandom := false ;
12148: LD_ADDR_EXP 87
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sShield := false ;
12156: LD_ADDR_EXP 88
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sTime := false ;
12164: LD_ADDR_EXP 89
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sTools := false ;
12172: LD_ADDR_EXP 90
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sSold := false ;
12180: LD_ADDR_EXP 55
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sDiff := false ;
12188: LD_ADDR_EXP 56
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sFog := false ;
12196: LD_ADDR_EXP 59
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sReset := false ;
12204: LD_ADDR_EXP 60
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sSun := false ;
12212: LD_ADDR_EXP 61
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sTiger := false ;
12220: LD_ADDR_EXP 57
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sBomb := false ;
12228: LD_ADDR_EXP 58
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sWound := false ;
12236: LD_ADDR_EXP 66
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sBetray := false ;
12244: LD_ADDR_EXP 70
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sContamin := false ;
12252: LD_ADDR_EXP 71
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sOil := false ;
12260: LD_ADDR_EXP 73
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sStu := false ;
12268: LD_ADDR_EXP 77
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sBazooka := false ;
12276: LD_ADDR_EXP 80
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// sMortar := false ;
12284: LD_ADDR_EXP 81
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// sRanger := false ;
12292: LD_ADDR_EXP 91
12296: PUSH
12297: LD_INT 0
12299: ST_TO_ADDR
// end ;
12300: LD_VAR 0 1
12304: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
// result := [ ] ;
12312: LD_ADDR_VAR 0 1
12316: PUSH
12317: EMPTY
12318: ST_TO_ADDR
// if campaign_id = 1 then
12319: LD_OWVAR 69
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 15265
// begin case mission_number of 1 :
12329: LD_OWVAR 70
12333: PUSH
12334: LD_INT 1
12336: DOUBLE
12337: EQUAL
12338: IFTRUE 12342
12340: GO 12406
12342: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12343: LD_ADDR_VAR 0 1
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: LD_INT 4
12353: PUSH
12354: LD_INT 11
12356: PUSH
12357: LD_INT 12
12359: PUSH
12360: LD_INT 15
12362: PUSH
12363: LD_INT 16
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_INT 23
12371: PUSH
12372: LD_INT 26
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 101
12388: PUSH
12389: LD_INT 102
12391: PUSH
12392: LD_INT 106
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: ST_TO_ADDR
12404: GO 15263
12406: LD_INT 2
12408: DOUBLE
12409: EQUAL
12410: IFTRUE 12414
12412: GO 12486
12414: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12415: LD_ADDR_VAR 0 1
12419: PUSH
12420: LD_INT 2
12422: PUSH
12423: LD_INT 4
12425: PUSH
12426: LD_INT 11
12428: PUSH
12429: LD_INT 12
12431: PUSH
12432: LD_INT 15
12434: PUSH
12435: LD_INT 16
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_INT 23
12443: PUSH
12444: LD_INT 26
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 101
12460: PUSH
12461: LD_INT 102
12463: PUSH
12464: LD_INT 105
12466: PUSH
12467: LD_INT 106
12469: PUSH
12470: LD_INT 108
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: ST_TO_ADDR
12484: GO 15263
12486: LD_INT 3
12488: DOUBLE
12489: EQUAL
12490: IFTRUE 12494
12492: GO 12570
12494: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12495: LD_ADDR_VAR 0 1
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 4
12505: PUSH
12506: LD_INT 5
12508: PUSH
12509: LD_INT 11
12511: PUSH
12512: LD_INT 12
12514: PUSH
12515: LD_INT 15
12517: PUSH
12518: LD_INT 16
12520: PUSH
12521: LD_INT 22
12523: PUSH
12524: LD_INT 26
12526: PUSH
12527: LD_INT 36
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 101
12544: PUSH
12545: LD_INT 102
12547: PUSH
12548: LD_INT 105
12550: PUSH
12551: LD_INT 106
12553: PUSH
12554: LD_INT 108
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: ST_TO_ADDR
12568: GO 15263
12570: LD_INT 4
12572: DOUBLE
12573: EQUAL
12574: IFTRUE 12578
12576: GO 12662
12578: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12579: LD_ADDR_VAR 0 1
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: LD_INT 4
12589: PUSH
12590: LD_INT 5
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 11
12598: PUSH
12599: LD_INT 12
12601: PUSH
12602: LD_INT 15
12604: PUSH
12605: LD_INT 16
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 23
12613: PUSH
12614: LD_INT 26
12616: PUSH
12617: LD_INT 36
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 101
12636: PUSH
12637: LD_INT 102
12639: PUSH
12640: LD_INT 105
12642: PUSH
12643: LD_INT 106
12645: PUSH
12646: LD_INT 108
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: ST_TO_ADDR
12660: GO 15263
12662: LD_INT 5
12664: DOUBLE
12665: EQUAL
12666: IFTRUE 12670
12668: GO 12770
12670: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_INT 2
12678: PUSH
12679: LD_INT 4
12681: PUSH
12682: LD_INT 5
12684: PUSH
12685: LD_INT 6
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: LD_INT 11
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 15
12699: PUSH
12700: LD_INT 16
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 23
12708: PUSH
12709: LD_INT 25
12711: PUSH
12712: LD_INT 26
12714: PUSH
12715: LD_INT 36
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 101
12736: PUSH
12737: LD_INT 102
12739: PUSH
12740: LD_INT 105
12742: PUSH
12743: LD_INT 106
12745: PUSH
12746: LD_INT 108
12748: PUSH
12749: LD_INT 109
12751: PUSH
12752: LD_INT 112
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: ST_TO_ADDR
12768: GO 15263
12770: LD_INT 6
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12898
12778: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 4
12789: PUSH
12790: LD_INT 5
12792: PUSH
12793: LD_INT 6
12795: PUSH
12796: LD_INT 8
12798: PUSH
12799: LD_INT 11
12801: PUSH
12802: LD_INT 12
12804: PUSH
12805: LD_INT 15
12807: PUSH
12808: LD_INT 16
12810: PUSH
12811: LD_INT 20
12813: PUSH
12814: LD_INT 21
12816: PUSH
12817: LD_INT 22
12819: PUSH
12820: LD_INT 23
12822: PUSH
12823: LD_INT 25
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: LD_INT 30
12831: PUSH
12832: LD_INT 31
12834: PUSH
12835: LD_INT 32
12837: PUSH
12838: LD_INT 36
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 101
12864: PUSH
12865: LD_INT 102
12867: PUSH
12868: LD_INT 105
12870: PUSH
12871: LD_INT 106
12873: PUSH
12874: LD_INT 108
12876: PUSH
12877: LD_INT 109
12879: PUSH
12880: LD_INT 112
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: ST_TO_ADDR
12896: GO 15263
12898: LD_INT 7
12900: DOUBLE
12901: EQUAL
12902: IFTRUE 12906
12904: GO 13006
12906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12907: LD_ADDR_VAR 0 1
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 4
12917: PUSH
12918: LD_INT 5
12920: PUSH
12921: LD_INT 7
12923: PUSH
12924: LD_INT 11
12926: PUSH
12927: LD_INT 12
12929: PUSH
12930: LD_INT 15
12932: PUSH
12933: LD_INT 16
12935: PUSH
12936: LD_INT 20
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_INT 23
12947: PUSH
12948: LD_INT 25
12950: PUSH
12951: LD_INT 26
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 101
12972: PUSH
12973: LD_INT 102
12975: PUSH
12976: LD_INT 103
12978: PUSH
12979: LD_INT 105
12981: PUSH
12982: LD_INT 106
12984: PUSH
12985: LD_INT 108
12987: PUSH
12988: LD_INT 112
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: ST_TO_ADDR
13004: GO 15263
13006: LD_INT 8
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13142
13014: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_INT 2
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: LD_INT 5
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: LD_INT 7
13034: PUSH
13035: LD_INT 8
13037: PUSH
13038: LD_INT 11
13040: PUSH
13041: LD_INT 12
13043: PUSH
13044: LD_INT 15
13046: PUSH
13047: LD_INT 16
13049: PUSH
13050: LD_INT 20
13052: PUSH
13053: LD_INT 21
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_INT 23
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 31
13073: PUSH
13074: LD_INT 32
13076: PUSH
13077: LD_INT 36
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 101
13104: PUSH
13105: LD_INT 102
13107: PUSH
13108: LD_INT 103
13110: PUSH
13111: LD_INT 105
13113: PUSH
13114: LD_INT 106
13116: PUSH
13117: LD_INT 108
13119: PUSH
13120: LD_INT 109
13122: PUSH
13123: LD_INT 112
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 15263
13142: LD_INT 9
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13286
13150: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 6
13167: PUSH
13168: LD_INT 7
13170: PUSH
13171: LD_INT 8
13173: PUSH
13174: LD_INT 11
13176: PUSH
13177: LD_INT 12
13179: PUSH
13180: LD_INT 15
13182: PUSH
13183: LD_INT 16
13185: PUSH
13186: LD_INT 20
13188: PUSH
13189: LD_INT 21
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_INT 23
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 26
13203: PUSH
13204: LD_INT 28
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: LD_INT 32
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 101
13244: PUSH
13245: LD_INT 102
13247: PUSH
13248: LD_INT 103
13250: PUSH
13251: LD_INT 105
13253: PUSH
13254: LD_INT 106
13256: PUSH
13257: LD_INT 108
13259: PUSH
13260: LD_INT 109
13262: PUSH
13263: LD_INT 112
13265: PUSH
13266: LD_INT 114
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: ST_TO_ADDR
13284: GO 15263
13286: LD_INT 10
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13478
13294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: LD_INT 6
13311: PUSH
13312: LD_INT 7
13314: PUSH
13315: LD_INT 8
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: LD_INT 10
13323: PUSH
13324: LD_INT 11
13326: PUSH
13327: LD_INT 12
13329: PUSH
13330: LD_INT 13
13332: PUSH
13333: LD_INT 14
13335: PUSH
13336: LD_INT 15
13338: PUSH
13339: LD_INT 16
13341: PUSH
13342: LD_INT 17
13344: PUSH
13345: LD_INT 18
13347: PUSH
13348: LD_INT 19
13350: PUSH
13351: LD_INT 20
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 23
13362: PUSH
13363: LD_INT 24
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 26
13371: PUSH
13372: LD_INT 28
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 31
13380: PUSH
13381: LD_INT 32
13383: PUSH
13384: LD_INT 36
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 101
13420: PUSH
13421: LD_INT 102
13423: PUSH
13424: LD_INT 103
13426: PUSH
13427: LD_INT 104
13429: PUSH
13430: LD_INT 105
13432: PUSH
13433: LD_INT 106
13435: PUSH
13436: LD_INT 107
13438: PUSH
13439: LD_INT 108
13441: PUSH
13442: LD_INT 109
13444: PUSH
13445: LD_INT 110
13447: PUSH
13448: LD_INT 111
13450: PUSH
13451: LD_INT 112
13453: PUSH
13454: LD_INT 114
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: ST_TO_ADDR
13476: GO 15263
13478: LD_INT 11
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13678
13486: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13487: LD_ADDR_VAR 0 1
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: LD_INT 6
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: LD_INT 8
13512: PUSH
13513: LD_INT 9
13515: PUSH
13516: LD_INT 10
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: LD_INT 12
13524: PUSH
13525: LD_INT 13
13527: PUSH
13528: LD_INT 14
13530: PUSH
13531: LD_INT 15
13533: PUSH
13534: LD_INT 16
13536: PUSH
13537: LD_INT 17
13539: PUSH
13540: LD_INT 18
13542: PUSH
13543: LD_INT 19
13545: PUSH
13546: LD_INT 20
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 22
13554: PUSH
13555: LD_INT 23
13557: PUSH
13558: LD_INT 24
13560: PUSH
13561: LD_INT 25
13563: PUSH
13564: LD_INT 26
13566: PUSH
13567: LD_INT 28
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: LD_INT 31
13575: PUSH
13576: LD_INT 32
13578: PUSH
13579: LD_INT 34
13581: PUSH
13582: LD_INT 36
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 101
13620: PUSH
13621: LD_INT 102
13623: PUSH
13624: LD_INT 103
13626: PUSH
13627: LD_INT 104
13629: PUSH
13630: LD_INT 105
13632: PUSH
13633: LD_INT 106
13635: PUSH
13636: LD_INT 107
13638: PUSH
13639: LD_INT 108
13641: PUSH
13642: LD_INT 109
13644: PUSH
13645: LD_INT 110
13647: PUSH
13648: LD_INT 111
13650: PUSH
13651: LD_INT 112
13653: PUSH
13654: LD_INT 114
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: ST_TO_ADDR
13676: GO 15263
13678: LD_INT 12
13680: DOUBLE
13681: EQUAL
13682: IFTRUE 13686
13684: GO 13894
13686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 3
13700: PUSH
13701: LD_INT 4
13703: PUSH
13704: LD_INT 5
13706: PUSH
13707: LD_INT 6
13709: PUSH
13710: LD_INT 7
13712: PUSH
13713: LD_INT 8
13715: PUSH
13716: LD_INT 9
13718: PUSH
13719: LD_INT 10
13721: PUSH
13722: LD_INT 11
13724: PUSH
13725: LD_INT 12
13727: PUSH
13728: LD_INT 13
13730: PUSH
13731: LD_INT 14
13733: PUSH
13734: LD_INT 15
13736: PUSH
13737: LD_INT 16
13739: PUSH
13740: LD_INT 17
13742: PUSH
13743: LD_INT 18
13745: PUSH
13746: LD_INT 19
13748: PUSH
13749: LD_INT 20
13751: PUSH
13752: LD_INT 21
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 23
13760: PUSH
13761: LD_INT 24
13763: PUSH
13764: LD_INT 25
13766: PUSH
13767: LD_INT 26
13769: PUSH
13770: LD_INT 27
13772: PUSH
13773: LD_INT 28
13775: PUSH
13776: LD_INT 30
13778: PUSH
13779: LD_INT 31
13781: PUSH
13782: LD_INT 32
13784: PUSH
13785: LD_INT 33
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: LD_INT 36
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 101
13832: PUSH
13833: LD_INT 102
13835: PUSH
13836: LD_INT 103
13838: PUSH
13839: LD_INT 104
13841: PUSH
13842: LD_INT 105
13844: PUSH
13845: LD_INT 106
13847: PUSH
13848: LD_INT 107
13850: PUSH
13851: LD_INT 108
13853: PUSH
13854: LD_INT 109
13856: PUSH
13857: LD_INT 110
13859: PUSH
13860: LD_INT 111
13862: PUSH
13863: LD_INT 112
13865: PUSH
13866: LD_INT 113
13868: PUSH
13869: LD_INT 114
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 15263
13894: LD_INT 13
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 14098
13902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13903: LD_ADDR_VAR 0 1
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: LD_INT 8
13925: PUSH
13926: LD_INT 9
13928: PUSH
13929: LD_INT 10
13931: PUSH
13932: LD_INT 11
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: LD_INT 14
13940: PUSH
13941: LD_INT 15
13943: PUSH
13944: LD_INT 16
13946: PUSH
13947: LD_INT 17
13949: PUSH
13950: LD_INT 18
13952: PUSH
13953: LD_INT 19
13955: PUSH
13956: LD_INT 20
13958: PUSH
13959: LD_INT 21
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_INT 23
13967: PUSH
13968: LD_INT 24
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 26
13976: PUSH
13977: LD_INT 27
13979: PUSH
13980: LD_INT 28
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 31
13988: PUSH
13989: LD_INT 32
13991: PUSH
13992: LD_INT 33
13994: PUSH
13995: LD_INT 34
13997: PUSH
13998: LD_INT 36
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 101
14036: PUSH
14037: LD_INT 102
14039: PUSH
14040: LD_INT 103
14042: PUSH
14043: LD_INT 104
14045: PUSH
14046: LD_INT 105
14048: PUSH
14049: LD_INT 106
14051: PUSH
14052: LD_INT 107
14054: PUSH
14055: LD_INT 108
14057: PUSH
14058: LD_INT 109
14060: PUSH
14061: LD_INT 110
14063: PUSH
14064: LD_INT 111
14066: PUSH
14067: LD_INT 112
14069: PUSH
14070: LD_INT 113
14072: PUSH
14073: LD_INT 114
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: ST_TO_ADDR
14096: GO 15263
14098: LD_INT 14
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14318
14106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: LD_INT 1
14114: PUSH
14115: LD_INT 2
14117: PUSH
14118: LD_INT 3
14120: PUSH
14121: LD_INT 4
14123: PUSH
14124: LD_INT 5
14126: PUSH
14127: LD_INT 6
14129: PUSH
14130: LD_INT 7
14132: PUSH
14133: LD_INT 8
14135: PUSH
14136: LD_INT 9
14138: PUSH
14139: LD_INT 10
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 13
14150: PUSH
14151: LD_INT 14
14153: PUSH
14154: LD_INT 15
14156: PUSH
14157: LD_INT 16
14159: PUSH
14160: LD_INT 17
14162: PUSH
14163: LD_INT 18
14165: PUSH
14166: LD_INT 19
14168: PUSH
14169: LD_INT 20
14171: PUSH
14172: LD_INT 21
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_INT 23
14180: PUSH
14181: LD_INT 24
14183: PUSH
14184: LD_INT 25
14186: PUSH
14187: LD_INT 26
14189: PUSH
14190: LD_INT 27
14192: PUSH
14193: LD_INT 28
14195: PUSH
14196: LD_INT 29
14198: PUSH
14199: LD_INT 30
14201: PUSH
14202: LD_INT 31
14204: PUSH
14205: LD_INT 32
14207: PUSH
14208: LD_INT 33
14210: PUSH
14211: LD_INT 34
14213: PUSH
14214: LD_INT 36
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 101
14256: PUSH
14257: LD_INT 102
14259: PUSH
14260: LD_INT 103
14262: PUSH
14263: LD_INT 104
14265: PUSH
14266: LD_INT 105
14268: PUSH
14269: LD_INT 106
14271: PUSH
14272: LD_INT 107
14274: PUSH
14275: LD_INT 108
14277: PUSH
14278: LD_INT 109
14280: PUSH
14281: LD_INT 110
14283: PUSH
14284: LD_INT 111
14286: PUSH
14287: LD_INT 112
14289: PUSH
14290: LD_INT 113
14292: PUSH
14293: LD_INT 114
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
14316: GO 15263
14318: LD_INT 15
14320: DOUBLE
14321: EQUAL
14322: IFTRUE 14326
14324: GO 14538
14326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14327: LD_ADDR_VAR 0 1
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: LD_INT 4
14343: PUSH
14344: LD_INT 5
14346: PUSH
14347: LD_INT 6
14349: PUSH
14350: LD_INT 7
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: LD_INT 9
14358: PUSH
14359: LD_INT 10
14361: PUSH
14362: LD_INT 11
14364: PUSH
14365: LD_INT 12
14367: PUSH
14368: LD_INT 13
14370: PUSH
14371: LD_INT 14
14373: PUSH
14374: LD_INT 15
14376: PUSH
14377: LD_INT 16
14379: PUSH
14380: LD_INT 17
14382: PUSH
14383: LD_INT 18
14385: PUSH
14386: LD_INT 19
14388: PUSH
14389: LD_INT 20
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_INT 23
14400: PUSH
14401: LD_INT 24
14403: PUSH
14404: LD_INT 25
14406: PUSH
14407: LD_INT 26
14409: PUSH
14410: LD_INT 27
14412: PUSH
14413: LD_INT 28
14415: PUSH
14416: LD_INT 29
14418: PUSH
14419: LD_INT 30
14421: PUSH
14422: LD_INT 31
14424: PUSH
14425: LD_INT 32
14427: PUSH
14428: LD_INT 33
14430: PUSH
14431: LD_INT 34
14433: PUSH
14434: LD_INT 36
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 101
14476: PUSH
14477: LD_INT 102
14479: PUSH
14480: LD_INT 103
14482: PUSH
14483: LD_INT 104
14485: PUSH
14486: LD_INT 105
14488: PUSH
14489: LD_INT 106
14491: PUSH
14492: LD_INT 107
14494: PUSH
14495: LD_INT 108
14497: PUSH
14498: LD_INT 109
14500: PUSH
14501: LD_INT 110
14503: PUSH
14504: LD_INT 111
14506: PUSH
14507: LD_INT 112
14509: PUSH
14510: LD_INT 113
14512: PUSH
14513: LD_INT 114
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: ST_TO_ADDR
14536: GO 15263
14538: LD_INT 16
14540: DOUBLE
14541: EQUAL
14542: IFTRUE 14546
14544: GO 14670
14546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14547: LD_ADDR_VAR 0 1
14551: PUSH
14552: LD_INT 2
14554: PUSH
14555: LD_INT 4
14557: PUSH
14558: LD_INT 5
14560: PUSH
14561: LD_INT 7
14563: PUSH
14564: LD_INT 11
14566: PUSH
14567: LD_INT 12
14569: PUSH
14570: LD_INT 15
14572: PUSH
14573: LD_INT 16
14575: PUSH
14576: LD_INT 20
14578: PUSH
14579: LD_INT 21
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_INT 23
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 26
14593: PUSH
14594: LD_INT 30
14596: PUSH
14597: LD_INT 31
14599: PUSH
14600: LD_INT 32
14602: PUSH
14603: LD_INT 33
14605: PUSH
14606: LD_INT 34
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 101
14632: PUSH
14633: LD_INT 102
14635: PUSH
14636: LD_INT 103
14638: PUSH
14639: LD_INT 106
14641: PUSH
14642: LD_INT 108
14644: PUSH
14645: LD_INT 112
14647: PUSH
14648: LD_INT 113
14650: PUSH
14651: LD_INT 114
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: ST_TO_ADDR
14668: GO 15263
14670: LD_INT 17
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14890
14678: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 3
14692: PUSH
14693: LD_INT 4
14695: PUSH
14696: LD_INT 5
14698: PUSH
14699: LD_INT 6
14701: PUSH
14702: LD_INT 7
14704: PUSH
14705: LD_INT 8
14707: PUSH
14708: LD_INT 9
14710: PUSH
14711: LD_INT 10
14713: PUSH
14714: LD_INT 11
14716: PUSH
14717: LD_INT 12
14719: PUSH
14720: LD_INT 13
14722: PUSH
14723: LD_INT 14
14725: PUSH
14726: LD_INT 15
14728: PUSH
14729: LD_INT 16
14731: PUSH
14732: LD_INT 17
14734: PUSH
14735: LD_INT 18
14737: PUSH
14738: LD_INT 19
14740: PUSH
14741: LD_INT 20
14743: PUSH
14744: LD_INT 21
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_INT 23
14752: PUSH
14753: LD_INT 24
14755: PUSH
14756: LD_INT 25
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_INT 27
14764: PUSH
14765: LD_INT 28
14767: PUSH
14768: LD_INT 29
14770: PUSH
14771: LD_INT 30
14773: PUSH
14774: LD_INT 31
14776: PUSH
14777: LD_INT 32
14779: PUSH
14780: LD_INT 33
14782: PUSH
14783: LD_INT 34
14785: PUSH
14786: LD_INT 36
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 101
14828: PUSH
14829: LD_INT 102
14831: PUSH
14832: LD_INT 103
14834: PUSH
14835: LD_INT 104
14837: PUSH
14838: LD_INT 105
14840: PUSH
14841: LD_INT 106
14843: PUSH
14844: LD_INT 107
14846: PUSH
14847: LD_INT 108
14849: PUSH
14850: LD_INT 109
14852: PUSH
14853: LD_INT 110
14855: PUSH
14856: LD_INT 111
14858: PUSH
14859: LD_INT 112
14861: PUSH
14862: LD_INT 113
14864: PUSH
14865: LD_INT 114
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15263
14890: LD_INT 18
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 15034
14898: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14899: LD_ADDR_VAR 0 1
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: LD_INT 7
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 20
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 23
14939: PUSH
14940: LD_INT 25
14942: PUSH
14943: LD_INT 26
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 31
14951: PUSH
14952: LD_INT 32
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 34
14960: PUSH
14961: LD_INT 35
14963: PUSH
14964: LD_INT 36
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 101
14992: PUSH
14993: LD_INT 102
14995: PUSH
14996: LD_INT 103
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 108
15004: PUSH
15005: LD_INT 112
15007: PUSH
15008: LD_INT 113
15010: PUSH
15011: LD_INT 114
15013: PUSH
15014: LD_INT 115
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: ST_TO_ADDR
15032: GO 15263
15034: LD_INT 19
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15262
15042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: LD_INT 4
15059: PUSH
15060: LD_INT 5
15062: PUSH
15063: LD_INT 6
15065: PUSH
15066: LD_INT 7
15068: PUSH
15069: LD_INT 8
15071: PUSH
15072: LD_INT 9
15074: PUSH
15075: LD_INT 10
15077: PUSH
15078: LD_INT 11
15080: PUSH
15081: LD_INT 12
15083: PUSH
15084: LD_INT 13
15086: PUSH
15087: LD_INT 14
15089: PUSH
15090: LD_INT 15
15092: PUSH
15093: LD_INT 16
15095: PUSH
15096: LD_INT 17
15098: PUSH
15099: LD_INT 18
15101: PUSH
15102: LD_INT 19
15104: PUSH
15105: LD_INT 20
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 24
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 26
15125: PUSH
15126: LD_INT 27
15128: PUSH
15129: LD_INT 28
15131: PUSH
15132: LD_INT 29
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: LD_INT 31
15140: PUSH
15141: LD_INT 32
15143: PUSH
15144: LD_INT 33
15146: PUSH
15147: LD_INT 34
15149: PUSH
15150: LD_INT 35
15152: PUSH
15153: LD_INT 36
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 101
15196: PUSH
15197: LD_INT 102
15199: PUSH
15200: LD_INT 103
15202: PUSH
15203: LD_INT 104
15205: PUSH
15206: LD_INT 105
15208: PUSH
15209: LD_INT 106
15211: PUSH
15212: LD_INT 107
15214: PUSH
15215: LD_INT 108
15217: PUSH
15218: LD_INT 109
15220: PUSH
15221: LD_INT 110
15223: PUSH
15224: LD_INT 111
15226: PUSH
15227: LD_INT 112
15229: PUSH
15230: LD_INT 113
15232: PUSH
15233: LD_INT 114
15235: PUSH
15236: LD_INT 115
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: ST_TO_ADDR
15260: GO 15263
15262: POP
// end else
15263: GO 15482
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15265: LD_ADDR_VAR 0 1
15269: PUSH
15270: LD_INT 1
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: LD_INT 4
15281: PUSH
15282: LD_INT 5
15284: PUSH
15285: LD_INT 6
15287: PUSH
15288: LD_INT 7
15290: PUSH
15291: LD_INT 8
15293: PUSH
15294: LD_INT 9
15296: PUSH
15297: LD_INT 10
15299: PUSH
15300: LD_INT 11
15302: PUSH
15303: LD_INT 12
15305: PUSH
15306: LD_INT 13
15308: PUSH
15309: LD_INT 14
15311: PUSH
15312: LD_INT 15
15314: PUSH
15315: LD_INT 16
15317: PUSH
15318: LD_INT 17
15320: PUSH
15321: LD_INT 18
15323: PUSH
15324: LD_INT 19
15326: PUSH
15327: LD_INT 20
15329: PUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 22
15335: PUSH
15336: LD_INT 23
15338: PUSH
15339: LD_INT 24
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 26
15347: PUSH
15348: LD_INT 27
15350: PUSH
15351: LD_INT 28
15353: PUSH
15354: LD_INT 29
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 31
15362: PUSH
15363: LD_INT 32
15365: PUSH
15366: LD_INT 33
15368: PUSH
15369: LD_INT 34
15371: PUSH
15372: LD_INT 35
15374: PUSH
15375: LD_INT 36
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 101
15418: PUSH
15419: LD_INT 102
15421: PUSH
15422: LD_INT 103
15424: PUSH
15425: LD_INT 104
15427: PUSH
15428: LD_INT 105
15430: PUSH
15431: LD_INT 106
15433: PUSH
15434: LD_INT 107
15436: PUSH
15437: LD_INT 108
15439: PUSH
15440: LD_INT 109
15442: PUSH
15443: LD_INT 110
15445: PUSH
15446: LD_INT 111
15448: PUSH
15449: LD_INT 112
15451: PUSH
15452: LD_INT 113
15454: PUSH
15455: LD_INT 114
15457: PUSH
15458: LD_INT 115
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: ST_TO_ADDR
// if result then
15482: LD_VAR 0 1
15486: IFFALSE 15775
// begin normal :=  ;
15488: LD_ADDR_VAR 0 3
15492: PUSH
15493: LD_STRING 
15495: ST_TO_ADDR
// hardcore :=  ;
15496: LD_ADDR_VAR 0 4
15500: PUSH
15501: LD_STRING 
15503: ST_TO_ADDR
// for i = 1 to normalCounter do
15504: LD_ADDR_VAR 0 5
15508: PUSH
15509: DOUBLE
15510: LD_INT 1
15512: DEC
15513: ST_TO_ADDR
15514: LD_EXP 39
15518: PUSH
15519: FOR_TO
15520: IFFALSE 15621
// begin tmp := 0 ;
15522: LD_ADDR_VAR 0 2
15526: PUSH
15527: LD_STRING 0
15529: ST_TO_ADDR
// if result [ 1 ] then
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: IFFALSE 15603
// if result [ 1 ] [ 1 ] = i then
15540: LD_VAR 0 1
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: PUSH
15549: LD_INT 1
15551: ARRAY
15552: PUSH
15553: LD_VAR 0 5
15557: EQUAL
15558: IFFALSE 15603
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15560: LD_ADDR_VAR 0 1
15564: PUSH
15565: LD_VAR 0 1
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_VAR 0 1
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PPUSH
15582: LD_INT 1
15584: PPUSH
15585: CALL_OW 3
15589: PPUSH
15590: CALL_OW 1
15594: ST_TO_ADDR
// tmp := 1 ;
15595: LD_ADDR_VAR 0 2
15599: PUSH
15600: LD_STRING 1
15602: ST_TO_ADDR
// end ; normal := normal & tmp ;
15603: LD_ADDR_VAR 0 3
15607: PUSH
15608: LD_VAR 0 3
15612: PUSH
15613: LD_VAR 0 2
15617: STR
15618: ST_TO_ADDR
// end ;
15619: GO 15519
15621: POP
15622: POP
// for i = 1 to hardcoreCounter do
15623: LD_ADDR_VAR 0 5
15627: PUSH
15628: DOUBLE
15629: LD_INT 1
15631: DEC
15632: ST_TO_ADDR
15633: LD_EXP 40
15637: PUSH
15638: FOR_TO
15639: IFFALSE 15744
// begin tmp := 0 ;
15641: LD_ADDR_VAR 0 2
15645: PUSH
15646: LD_STRING 0
15648: ST_TO_ADDR
// if result [ 2 ] then
15649: LD_VAR 0 1
15653: PUSH
15654: LD_INT 2
15656: ARRAY
15657: IFFALSE 15726
// if result [ 2 ] [ 1 ] = 100 + i then
15659: LD_VAR 0 1
15663: PUSH
15664: LD_INT 2
15666: ARRAY
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PUSH
15672: LD_INT 100
15674: PUSH
15675: LD_VAR 0 5
15679: PLUS
15680: EQUAL
15681: IFFALSE 15726
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15683: LD_ADDR_VAR 0 1
15687: PUSH
15688: LD_VAR 0 1
15692: PPUSH
15693: LD_INT 2
15695: PPUSH
15696: LD_VAR 0 1
15700: PUSH
15701: LD_INT 2
15703: ARRAY
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 3
15712: PPUSH
15713: CALL_OW 1
15717: ST_TO_ADDR
// tmp := 1 ;
15718: LD_ADDR_VAR 0 2
15722: PUSH
15723: LD_STRING 1
15725: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: LD_VAR 0 4
15735: PUSH
15736: LD_VAR 0 2
15740: STR
15741: ST_TO_ADDR
// end ;
15742: GO 15638
15744: POP
15745: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15746: LD_STRING getStreamItemsFromMission("
15748: PUSH
15749: LD_VAR 0 3
15753: STR
15754: PUSH
15755: LD_STRING ","
15757: STR
15758: PUSH
15759: LD_VAR 0 4
15763: STR
15764: PUSH
15765: LD_STRING ")
15767: STR
15768: PPUSH
15769: CALL_OW 559
// end else
15773: GO 15782
// ToLua ( getStreamItemsFromMission("","") ) ;
15775: LD_STRING getStreamItemsFromMission("","")
15777: PPUSH
15778: CALL_OW 559
// end ;
15782: LD_VAR 0 1
15786: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15787: LD_EXP 38
15791: PUSH
15792: LD_EXP 43
15796: AND
15797: IFFALSE 15921
15799: GO 15801
15801: DISABLE
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
// begin enable ;
15806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15807: LD_ADDR_VAR 0 2
15811: PUSH
15812: LD_INT 22
15814: PUSH
15815: LD_OWVAR 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: LD_INT 34
15829: PUSH
15830: LD_INT 7
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 34
15839: PUSH
15840: LD_INT 45
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 34
15849: PUSH
15850: LD_INT 28
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 34
15859: PUSH
15860: LD_INT 47
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: ST_TO_ADDR
// if not tmp then
15883: LD_VAR 0 2
15887: NOT
15888: IFFALSE 15892
// exit ;
15890: GO 15921
// for i in tmp do
15892: LD_ADDR_VAR 0 1
15896: PUSH
15897: LD_VAR 0 2
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15919
// begin SetLives ( i , 0 ) ;
15905: LD_VAR 0 1
15909: PPUSH
15910: LD_INT 0
15912: PPUSH
15913: CALL_OW 234
// end ;
15917: GO 15902
15919: POP
15920: POP
// end ;
15921: PPOPN 2
15923: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15924: LD_EXP 38
15928: PUSH
15929: LD_EXP 44
15933: AND
15934: IFFALSE 16018
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
15942: PPUSH
// begin enable ;
15943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15944: LD_ADDR_VAR 0 2
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_OWVAR 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 32
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 69
15979: ST_TO_ADDR
// if not tmp then
15980: LD_VAR 0 2
15984: NOT
15985: IFFALSE 15989
// exit ;
15987: GO 16018
// for i in tmp do
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_VAR 0 2
15998: PUSH
15999: FOR_IN
16000: IFFALSE 16016
// begin SetLives ( i , 0 ) ;
16002: LD_VAR 0 1
16006: PPUSH
16007: LD_INT 0
16009: PPUSH
16010: CALL_OW 234
// end ;
16014: GO 15999
16016: POP
16017: POP
// end ;
16018: PPOPN 2
16020: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16021: LD_EXP 38
16025: PUSH
16026: LD_EXP 41
16030: AND
16031: IFFALSE 16124
16033: GO 16035
16035: DISABLE
16036: LD_INT 0
16038: PPUSH
// begin enable ;
16039: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16040: LD_ADDR_VAR 0 1
16044: PUSH
16045: LD_INT 22
16047: PUSH
16048: LD_OWVAR 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: LD_INT 25
16062: PUSH
16063: LD_INT 5
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 25
16072: PUSH
16073: LD_INT 9
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 25
16082: PUSH
16083: LD_INT 8
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16122
// begin SetClass ( i , 1 ) ;
16108: LD_VAR 0 1
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 336
// end ;
16120: GO 16105
16122: POP
16123: POP
// end ;
16124: PPOPN 1
16126: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16127: LD_EXP 38
16131: PUSH
16132: LD_EXP 42
16136: AND
16137: PUSH
16138: LD_OWVAR 65
16142: PUSH
16143: LD_INT 7
16145: LESS
16146: AND
16147: IFFALSE 16161
16149: GO 16151
16151: DISABLE
// begin enable ;
16152: ENABLE
// game_speed := 7 ;
16153: LD_ADDR_OWVAR 65
16157: PUSH
16158: LD_INT 7
16160: ST_TO_ADDR
// end ;
16161: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16162: LD_EXP 38
16166: PUSH
16167: LD_EXP 45
16171: AND
16172: IFFALSE 16374
16174: GO 16176
16176: DISABLE
16177: LD_INT 0
16179: PPUSH
16180: PPUSH
16181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_INT 81
16189: PUSH
16190: LD_OWVAR 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 21
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: ST_TO_ADDR
// if not tmp then
16218: LD_VAR 0 3
16222: NOT
16223: IFFALSE 16227
// exit ;
16225: GO 16374
// if tmp > 5 then
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 5
16234: GREATER
16235: IFFALSE 16247
// k := 5 else
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 5
16244: ST_TO_ADDR
16245: GO 16257
// k := tmp ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_VAR 0 3
16256: ST_TO_ADDR
// for i := 1 to k do
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: DOUBLE
16263: LD_INT 1
16265: DEC
16266: ST_TO_ADDR
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_TO
16273: IFFALSE 16372
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16275: LD_VAR 0 3
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 4
16293: MOD
16294: PUSH
16295: LD_INT 1
16297: PLUS
16298: PPUSH
16299: CALL_OW 259
16303: PUSH
16304: LD_INT 10
16306: LESS
16307: IFFALSE 16370
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16309: LD_VAR 0 3
16313: PUSH
16314: LD_VAR 0 1
16318: ARRAY
16319: PPUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 4
16327: MOD
16328: PUSH
16329: LD_INT 1
16331: PLUS
16332: PPUSH
16333: LD_VAR 0 3
16337: PUSH
16338: LD_VAR 0 1
16342: ARRAY
16343: PPUSH
16344: LD_VAR 0 1
16348: PUSH
16349: LD_INT 4
16351: MOD
16352: PUSH
16353: LD_INT 1
16355: PLUS
16356: PPUSH
16357: CALL_OW 259
16361: PUSH
16362: LD_INT 1
16364: PLUS
16365: PPUSH
16366: CALL_OW 237
16370: GO 16272
16372: POP
16373: POP
// end ;
16374: PPOPN 3
16376: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16377: LD_EXP 38
16381: PUSH
16382: LD_EXP 46
16386: AND
16387: IFFALSE 16407
16389: GO 16391
16391: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16392: LD_INT 4
16394: PPUSH
16395: LD_OWVAR 2
16399: PPUSH
16400: LD_INT 0
16402: PPUSH
16403: CALL_OW 324
16407: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16408: LD_EXP 38
16412: PUSH
16413: LD_EXP 75
16417: AND
16418: IFFALSE 16438
16420: GO 16422
16422: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16423: LD_INT 19
16425: PPUSH
16426: LD_OWVAR 2
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: CALL_OW 324
16438: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16439: LD_EXP 38
16443: PUSH
16444: LD_EXP 47
16448: AND
16449: IFFALSE 16551
16451: GO 16453
16453: DISABLE
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
// begin enable ;
16458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_INT 22
16466: PUSH
16467: LD_OWVAR 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: LD_INT 34
16481: PUSH
16482: LD_INT 11
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 34
16491: PUSH
16492: LD_INT 30
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16551
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16549
// begin SetLives ( i , 0 ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 234
// end ;
16547: GO 16532
16549: POP
16550: POP
// end ;
16551: PPOPN 2
16553: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16554: LD_EXP 38
16558: PUSH
16559: LD_EXP 48
16563: AND
16564: IFFALSE 16584
16566: GO 16568
16568: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16569: LD_INT 32
16571: PPUSH
16572: LD_OWVAR 2
16576: PPUSH
16577: LD_INT 0
16579: PPUSH
16580: CALL_OW 324
16584: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16585: LD_EXP 38
16589: PUSH
16590: LD_EXP 49
16594: AND
16595: IFFALSE 16776
16597: GO 16599
16599: DISABLE
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 33
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: ST_TO_ADDR
// if not tmp then
16641: LD_VAR 0 2
16645: NOT
16646: IFFALSE 16650
// exit ;
16648: GO 16776
// side := 0 ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// for i := 1 to 8 do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: DOUBLE
16664: LD_INT 1
16666: DEC
16667: ST_TO_ADDR
16668: LD_INT 8
16670: PUSH
16671: FOR_TO
16672: IFFALSE 16720
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16674: LD_OWVAR 2
16678: PUSH
16679: LD_VAR 0 1
16683: NONEQUAL
16684: PUSH
16685: LD_OWVAR 2
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 81
16699: PUSH
16700: LD_INT 2
16702: EQUAL
16703: AND
16704: IFFALSE 16718
// begin side := i ;
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: LD_VAR 0 1
16715: ST_TO_ADDR
// break ;
16716: GO 16720
// end ;
16718: GO 16671
16720: POP
16721: POP
// if not side then
16722: LD_VAR 0 3
16726: NOT
16727: IFFALSE 16731
// exit ;
16729: GO 16776
// for i := 1 to tmp do
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: DOUBLE
16737: LD_INT 1
16739: DEC
16740: ST_TO_ADDR
16741: LD_VAR 0 2
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16774
// if Prob ( 60 ) then
16749: LD_INT 60
16751: PPUSH
16752: CALL_OW 13
16756: IFFALSE 16772
// SetSide ( i , side ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: CALL_OW 235
16772: GO 16746
16774: POP
16775: POP
// end ;
16776: PPOPN 3
16778: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16779: LD_EXP 38
16783: PUSH
16784: LD_EXP 51
16788: AND
16789: IFFALSE 16908
16791: GO 16793
16793: DISABLE
16794: LD_INT 0
16796: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 3
16826: PUSH
16827: LD_INT 23
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16906
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 257
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 4
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: IN
16882: IFFALSE 16904
// SetClass ( un , rand ( 1 , 4 ) ) ;
16884: LD_VAR 0 1
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: LD_INT 4
16894: PPUSH
16895: CALL_OW 12
16899: PPUSH
16900: CALL_OW 336
16904: GO 16851
16906: POP
16907: POP
// end ;
16908: PPOPN 1
16910: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16911: LD_EXP 38
16915: PUSH
16916: LD_EXP 50
16920: AND
16921: IFFALSE 17000
16923: GO 16925
16925: DISABLE
16926: LD_INT 0
16928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16929: LD_ADDR_VAR 0 1
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_OWVAR 2
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 21
16948: PUSH
16949: LD_INT 3
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PPUSH
16960: CALL_OW 69
16964: ST_TO_ADDR
// if not tmp then
16965: LD_VAR 0 1
16969: NOT
16970: IFFALSE 16974
// exit ;
16972: GO 17000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16974: LD_VAR 0 1
16978: PUSH
16979: LD_INT 1
16981: PPUSH
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 12
16991: ARRAY
16992: PPUSH
16993: LD_INT 100
16995: PPUSH
16996: CALL_OW 234
// end ;
17000: PPOPN 1
17002: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17003: LD_EXP 38
17007: PUSH
17008: LD_EXP 52
17012: AND
17013: IFFALSE 17111
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17021: LD_ADDR_VAR 0 1
17025: PUSH
17026: LD_INT 22
17028: PUSH
17029: LD_OWVAR 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 21
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PPUSH
17052: CALL_OW 69
17056: ST_TO_ADDR
// if not tmp then
17057: LD_VAR 0 1
17061: NOT
17062: IFFALSE 17066
// exit ;
17064: GO 17111
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17066: LD_VAR 0 1
17070: PUSH
17071: LD_INT 1
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 12
17083: ARRAY
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: LD_INT 4
17090: PPUSH
17091: CALL_OW 12
17095: PPUSH
17096: LD_INT 3000
17098: PPUSH
17099: LD_INT 9000
17101: PPUSH
17102: CALL_OW 12
17106: PPUSH
17107: CALL_OW 492
// end ;
17111: PPOPN 1
17113: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17114: LD_EXP 38
17118: PUSH
17119: LD_EXP 53
17123: AND
17124: IFFALSE 17144
17126: GO 17128
17128: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17129: LD_INT 1
17131: PPUSH
17132: LD_OWVAR 2
17136: PPUSH
17137: LD_INT 0
17139: PPUSH
17140: CALL_OW 324
17144: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17145: LD_EXP 38
17149: PUSH
17150: LD_EXP 54
17154: AND
17155: IFFALSE 17238
17157: GO 17159
17159: DISABLE
17160: LD_INT 0
17162: PPUSH
17163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17164: LD_ADDR_VAR 0 2
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_OWVAR 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 21
17183: PUSH
17184: LD_INT 3
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: ST_TO_ADDR
// if not tmp then
17200: LD_VAR 0 2
17204: NOT
17205: IFFALSE 17209
// exit ;
17207: GO 17238
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 2
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17236
// SetBLevel ( i , 10 ) ;
17222: LD_VAR 0 1
17226: PPUSH
17227: LD_INT 10
17229: PPUSH
17230: CALL_OW 241
17234: GO 17219
17236: POP
17237: POP
// end ;
17238: PPOPN 2
17240: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17241: LD_EXP 38
17245: PUSH
17246: LD_EXP 55
17250: AND
17251: IFFALSE 17362
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
17260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17261: LD_ADDR_VAR 0 3
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 25
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 3
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17362
// un := tmp [ rand ( 1 , tmp ) ] ;
17306: LD_ADDR_VAR 0 2
17310: PUSH
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_VAR 0 3
17323: PPUSH
17324: CALL_OW 12
17328: ARRAY
17329: ST_TO_ADDR
// if Crawls ( un ) then
17330: LD_VAR 0 2
17334: PPUSH
17335: CALL_OW 318
17339: IFFALSE 17350
// ComWalk ( un ) ;
17341: LD_VAR 0 2
17345: PPUSH
17346: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: LD_INT 5
17357: PPUSH
17358: CALL_OW 336
// end ;
17362: PPOPN 3
17364: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17365: LD_EXP 38
17369: PUSH
17370: LD_EXP 56
17374: AND
17375: PUSH
17376: LD_OWVAR 67
17380: PUSH
17381: LD_INT 3
17383: LESS
17384: AND
17385: IFFALSE 17404
17387: GO 17389
17389: DISABLE
// Difficulty := Difficulty + 1 ;
17390: LD_ADDR_OWVAR 67
17394: PUSH
17395: LD_OWVAR 67
17399: PUSH
17400: LD_INT 1
17402: PLUS
17403: ST_TO_ADDR
17404: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17405: LD_EXP 38
17409: PUSH
17410: LD_EXP 57
17414: AND
17415: IFFALSE 17518
17417: GO 17419
17419: DISABLE
17420: LD_INT 0
17422: PPUSH
// begin for i := 1 to 5 do
17423: LD_ADDR_VAR 0 1
17427: PUSH
17428: DOUBLE
17429: LD_INT 1
17431: DEC
17432: ST_TO_ADDR
17433: LD_INT 5
17435: PUSH
17436: FOR_TO
17437: IFFALSE 17516
// begin uc_nation := nation_nature ;
17439: LD_ADDR_OWVAR 21
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// uc_side := 0 ;
17447: LD_ADDR_OWVAR 20
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17455: LD_ADDR_OWVAR 29
17459: PUSH
17460: LD_INT 12
17462: PUSH
17463: LD_INT 12
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: ST_TO_ADDR
// hc_agressivity := 20 ;
17470: LD_ADDR_OWVAR 35
17474: PUSH
17475: LD_INT 20
17477: ST_TO_ADDR
// hc_class := class_tiger ;
17478: LD_ADDR_OWVAR 28
17482: PUSH
17483: LD_INT 14
17485: ST_TO_ADDR
// hc_gallery :=  ;
17486: LD_ADDR_OWVAR 33
17490: PUSH
17491: LD_STRING 
17493: ST_TO_ADDR
// hc_name :=  ;
17494: LD_ADDR_OWVAR 26
17498: PUSH
17499: LD_STRING 
17501: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17502: CALL_OW 44
17506: PPUSH
17507: LD_INT 0
17509: PPUSH
17510: CALL_OW 51
// end ;
17514: GO 17436
17516: POP
17517: POP
// end ;
17518: PPOPN 1
17520: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17521: LD_EXP 38
17525: PUSH
17526: LD_EXP 58
17530: AND
17531: IFFALSE 17540
17533: GO 17535
17535: DISABLE
// StreamSibBomb ;
17536: CALL 17541 0 0
17540: END
// export function StreamSibBomb ; var i , x , y ; begin
17541: LD_INT 0
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
// result := false ;
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_INT 0
17554: ST_TO_ADDR
// for i := 1 to 16 do
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: DOUBLE
17561: LD_INT 1
17563: DEC
17564: ST_TO_ADDR
17565: LD_INT 16
17567: PUSH
17568: FOR_TO
17569: IFFALSE 17768
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_INT 10
17578: PUSH
17579: LD_INT 20
17581: PUSH
17582: LD_INT 30
17584: PUSH
17585: LD_INT 40
17587: PUSH
17588: LD_INT 50
17590: PUSH
17591: LD_INT 60
17593: PUSH
17594: LD_INT 70
17596: PUSH
17597: LD_INT 80
17599: PUSH
17600: LD_INT 90
17602: PUSH
17603: LD_INT 100
17605: PUSH
17606: LD_INT 110
17608: PUSH
17609: LD_INT 120
17611: PUSH
17612: LD_INT 130
17614: PUSH
17615: LD_INT 140
17617: PUSH
17618: LD_INT 150
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_INT 15
17643: PPUSH
17644: CALL_OW 12
17648: ARRAY
17649: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17650: LD_ADDR_VAR 0 4
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: LD_INT 20
17660: PUSH
17661: LD_INT 30
17663: PUSH
17664: LD_INT 40
17666: PUSH
17667: LD_INT 50
17669: PUSH
17670: LD_INT 60
17672: PUSH
17673: LD_INT 70
17675: PUSH
17676: LD_INT 80
17678: PUSH
17679: LD_INT 90
17681: PUSH
17682: LD_INT 100
17684: PUSH
17685: LD_INT 110
17687: PUSH
17688: LD_INT 120
17690: PUSH
17691: LD_INT 130
17693: PUSH
17694: LD_INT 140
17696: PUSH
17697: LD_INT 150
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: PPUSH
17720: LD_INT 15
17722: PPUSH
17723: CALL_OW 12
17727: ARRAY
17728: ST_TO_ADDR
// if ValidHex ( x , y ) then
17729: LD_VAR 0 3
17733: PPUSH
17734: LD_VAR 0 4
17738: PPUSH
17739: CALL_OW 488
17743: IFFALSE 17766
// begin result := [ x , y ] ;
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: LD_VAR 0 3
17754: PUSH
17755: LD_VAR 0 4
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: ST_TO_ADDR
// break ;
17764: GO 17768
// end ; end ;
17766: GO 17568
17768: POP
17769: POP
// if result then
17770: LD_VAR 0 1
17774: IFFALSE 17834
// begin ToLua ( playSibBomb() ) ;
17776: LD_STRING playSibBomb()
17778: PPUSH
17779: CALL_OW 559
// wait ( 0 0$14 ) ;
17783: LD_INT 490
17785: PPUSH
17786: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17790: LD_VAR 0 1
17794: PUSH
17795: LD_INT 1
17797: ARRAY
17798: PPUSH
17799: LD_VAR 0 1
17803: PUSH
17804: LD_INT 2
17806: ARRAY
17807: PPUSH
17808: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17812: LD_VAR 0 1
17816: PUSH
17817: LD_INT 1
17819: ARRAY
17820: PPUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_INT 2
17828: ARRAY
17829: PPUSH
17830: CALL_OW 429
// end ; end ;
17834: LD_VAR 0 1
17838: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17839: LD_EXP 38
17843: PUSH
17844: LD_EXP 60
17848: AND
17849: IFFALSE 17861
17851: GO 17853
17853: DISABLE
// YouLost (  ) ;
17854: LD_STRING 
17856: PPUSH
17857: CALL_OW 104
17861: END
// every 0 0$1 trigger StreamModeActive and sFog do
17862: LD_EXP 38
17866: PUSH
17867: LD_EXP 59
17871: AND
17872: IFFALSE 17886
17874: GO 17876
17876: DISABLE
// FogOff ( your_side ) ;
17877: LD_OWVAR 2
17881: PPUSH
17882: CALL_OW 344
17886: END
// every 0 0$1 trigger StreamModeActive and sSun do
17887: LD_EXP 38
17891: PUSH
17892: LD_EXP 61
17896: AND
17897: IFFALSE 17925
17899: GO 17901
17901: DISABLE
// begin solar_recharge_percent := 0 ;
17902: LD_ADDR_OWVAR 79
17906: PUSH
17907: LD_INT 0
17909: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17910: LD_INT 10500
17912: PPUSH
17913: CALL_OW 67
// solar_recharge_percent := 100 ;
17917: LD_ADDR_OWVAR 79
17921: PUSH
17922: LD_INT 100
17924: ST_TO_ADDR
// end ;
17925: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17926: LD_EXP 38
17930: PUSH
17931: LD_EXP 62
17935: AND
17936: IFFALSE 18175
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
17944: PPUSH
17945: PPUSH
// begin tmp := [ ] ;
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: EMPTY
17952: ST_TO_ADDR
// for i := 1 to 6 do
17953: LD_ADDR_VAR 0 1
17957: PUSH
17958: DOUBLE
17959: LD_INT 1
17961: DEC
17962: ST_TO_ADDR
17963: LD_INT 6
17965: PUSH
17966: FOR_TO
17967: IFFALSE 18072
// begin uc_nation := nation_nature ;
17969: LD_ADDR_OWVAR 21
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// uc_side := 0 ;
17977: LD_ADDR_OWVAR 20
17981: PUSH
17982: LD_INT 0
17984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17985: LD_ADDR_OWVAR 29
17989: PUSH
17990: LD_INT 12
17992: PUSH
17993: LD_INT 12
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: ST_TO_ADDR
// hc_agressivity := 20 ;
18000: LD_ADDR_OWVAR 35
18004: PUSH
18005: LD_INT 20
18007: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18008: LD_ADDR_OWVAR 28
18012: PUSH
18013: LD_INT 17
18015: ST_TO_ADDR
// hc_gallery :=  ;
18016: LD_ADDR_OWVAR 33
18020: PUSH
18021: LD_STRING 
18023: ST_TO_ADDR
// hc_name :=  ;
18024: LD_ADDR_OWVAR 26
18028: PUSH
18029: LD_STRING 
18031: ST_TO_ADDR
// un := CreateHuman ;
18032: LD_ADDR_VAR 0 2
18036: PUSH
18037: CALL_OW 44
18041: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18042: LD_VAR 0 2
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 51
// tmp := tmp ^ un ;
18054: LD_ADDR_VAR 0 3
18058: PUSH
18059: LD_VAR 0 3
18063: PUSH
18064: LD_VAR 0 2
18068: ADD
18069: ST_TO_ADDR
// end ;
18070: GO 17966
18072: POP
18073: POP
// repeat wait ( 0 0$1 ) ;
18074: LD_INT 35
18076: PPUSH
18077: CALL_OW 67
// for un in tmp do
18081: LD_ADDR_VAR 0 2
18085: PUSH
18086: LD_VAR 0 3
18090: PUSH
18091: FOR_IN
18092: IFFALSE 18166
// begin if IsDead ( un ) then
18094: LD_VAR 0 2
18098: PPUSH
18099: CALL_OW 301
18103: IFFALSE 18123
// begin tmp := tmp diff un ;
18105: LD_ADDR_VAR 0 3
18109: PUSH
18110: LD_VAR 0 3
18114: PUSH
18115: LD_VAR 0 2
18119: DIFF
18120: ST_TO_ADDR
// continue ;
18121: GO 18091
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18123: LD_VAR 0 2
18127: PPUSH
18128: LD_INT 3
18130: PUSH
18131: LD_INT 22
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 2
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end ;
18164: GO 18091
18166: POP
18167: POP
// until not tmp ;
18168: LD_VAR 0 3
18172: NOT
18173: IFFALSE 18074
// end ;
18175: PPOPN 3
18177: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18178: LD_EXP 38
18182: PUSH
18183: LD_EXP 63
18187: AND
18188: IFFALSE 18242
18190: GO 18192
18192: DISABLE
// begin ToLua ( displayTroll(); ) ;
18193: LD_STRING displayTroll();
18195: PPUSH
18196: CALL_OW 559
// wait ( 3 3$00 ) ;
18200: LD_INT 6300
18202: PPUSH
18203: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18207: LD_STRING hideTroll();
18209: PPUSH
18210: CALL_OW 559
// wait ( 1 1$00 ) ;
18214: LD_INT 2100
18216: PPUSH
18217: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18221: LD_STRING displayTroll();
18223: PPUSH
18224: CALL_OW 559
// wait ( 1 1$00 ) ;
18228: LD_INT 2100
18230: PPUSH
18231: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18235: LD_STRING hideTroll();
18237: PPUSH
18238: CALL_OW 559
// end ;
18242: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18243: LD_EXP 38
18247: PUSH
18248: LD_EXP 64
18252: AND
18253: IFFALSE 18316
18255: GO 18257
18257: DISABLE
18258: LD_INT 0
18260: PPUSH
// begin p := 0 ;
18261: LD_ADDR_VAR 0 1
18265: PUSH
18266: LD_INT 0
18268: ST_TO_ADDR
// repeat game_speed := 1 ;
18269: LD_ADDR_OWVAR 65
18273: PUSH
18274: LD_INT 1
18276: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18277: LD_INT 35
18279: PPUSH
18280: CALL_OW 67
// p := p + 1 ;
18284: LD_ADDR_VAR 0 1
18288: PUSH
18289: LD_VAR 0 1
18293: PUSH
18294: LD_INT 1
18296: PLUS
18297: ST_TO_ADDR
// until p >= 60 ;
18298: LD_VAR 0 1
18302: PUSH
18303: LD_INT 60
18305: GREATEREQUAL
18306: IFFALSE 18269
// game_speed := 4 ;
18308: LD_ADDR_OWVAR 65
18312: PUSH
18313: LD_INT 4
18315: ST_TO_ADDR
// end ;
18316: PPOPN 1
18318: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18319: LD_EXP 38
18323: PUSH
18324: LD_EXP 65
18328: AND
18329: IFFALSE 18475
18331: GO 18333
18333: DISABLE
18334: LD_INT 0
18336: PPUSH
18337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: LD_INT 22
18345: PUSH
18346: LD_OWVAR 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 30
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 30
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: ST_TO_ADDR
// if not depot then
18392: LD_VAR 0 1
18396: NOT
18397: IFFALSE 18401
// exit ;
18399: GO 18475
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18401: LD_ADDR_VAR 0 2
18405: PUSH
18406: LD_VAR 0 1
18410: PUSH
18411: LD_INT 1
18413: PPUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 12
18423: ARRAY
18424: PPUSH
18425: CALL_OW 274
18429: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_INT 1
18437: PPUSH
18438: LD_INT 0
18440: PPUSH
18441: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18445: LD_VAR 0 2
18449: PPUSH
18450: LD_INT 2
18452: PPUSH
18453: LD_INT 0
18455: PPUSH
18456: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: LD_INT 0
18470: PPUSH
18471: CALL_OW 277
// end ;
18475: PPOPN 2
18477: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18478: LD_EXP 38
18482: PUSH
18483: LD_EXP 66
18487: AND
18488: IFFALSE 18585
18490: GO 18492
18492: DISABLE
18493: LD_INT 0
18495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18496: LD_ADDR_VAR 0 1
18500: PUSH
18501: LD_INT 22
18503: PUSH
18504: LD_OWVAR 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 21
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 3
18525: PUSH
18526: LD_INT 23
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: PPUSH
18545: CALL_OW 69
18549: ST_TO_ADDR
// if not tmp then
18550: LD_VAR 0 1
18554: NOT
18555: IFFALSE 18559
// exit ;
18557: GO 18585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18559: LD_VAR 0 1
18563: PUSH
18564: LD_INT 1
18566: PPUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 12
18576: ARRAY
18577: PPUSH
18578: LD_INT 200
18580: PPUSH
18581: CALL_OW 234
// end ;
18585: PPOPN 1
18587: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18588: LD_EXP 38
18592: PUSH
18593: LD_EXP 67
18597: AND
18598: IFFALSE 18677
18600: GO 18602
18602: DISABLE
18603: LD_INT 0
18605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_OWVAR 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 21
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: ST_TO_ADDR
// if not tmp then
18642: LD_VAR 0 1
18646: NOT
18647: IFFALSE 18651
// exit ;
18649: GO 18677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: PPUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 12
18668: ARRAY
18669: PPUSH
18670: LD_INT 60
18672: PPUSH
18673: CALL_OW 234
// end ;
18677: PPOPN 1
18679: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18680: LD_EXP 38
18684: PUSH
18685: LD_EXP 68
18689: AND
18690: IFFALSE 18789
18692: GO 18694
18694: DISABLE
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
// begin enable ;
18699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: LD_INT 22
18707: PUSH
18708: LD_OWVAR 2
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 61
18719: PUSH
18720: EMPTY
18721: LIST
18722: PUSH
18723: LD_INT 33
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
// if not tmp then
18743: LD_VAR 0 1
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18789
// for i in tmp do
18752: LD_ADDR_VAR 0 2
18756: PUSH
18757: LD_VAR 0 1
18761: PUSH
18762: FOR_IN
18763: IFFALSE 18787
// if IsControledBy ( i ) then
18765: LD_VAR 0 2
18769: PPUSH
18770: CALL_OW 312
18774: IFFALSE 18785
// ComUnlink ( i ) ;
18776: LD_VAR 0 2
18780: PPUSH
18781: CALL_OW 136
18785: GO 18762
18787: POP
18788: POP
// end ;
18789: PPOPN 2
18791: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18792: LD_EXP 38
18796: PUSH
18797: LD_EXP 69
18801: AND
18802: IFFALSE 18942
18804: GO 18806
18806: DISABLE
18807: LD_INT 0
18809: PPUSH
18810: PPUSH
// begin ToLua ( displayPowell(); ) ;
18811: LD_STRING displayPowell();
18813: PPUSH
18814: CALL_OW 559
// uc_side := 0 ;
18818: LD_ADDR_OWVAR 20
18822: PUSH
18823: LD_INT 0
18825: ST_TO_ADDR
// uc_nation := 2 ;
18826: LD_ADDR_OWVAR 21
18830: PUSH
18831: LD_INT 2
18833: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18834: LD_ADDR_OWVAR 37
18838: PUSH
18839: LD_INT 14
18841: ST_TO_ADDR
// vc_engine := engine_siberite ;
18842: LD_ADDR_OWVAR 39
18846: PUSH
18847: LD_INT 3
18849: ST_TO_ADDR
// vc_control := control_apeman ;
18850: LD_ADDR_OWVAR 38
18854: PUSH
18855: LD_INT 5
18857: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18858: LD_ADDR_OWVAR 40
18862: PUSH
18863: LD_INT 29
18865: ST_TO_ADDR
// un := CreateVehicle ;
18866: LD_ADDR_VAR 0 2
18870: PUSH
18871: CALL_OW 45
18875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18876: LD_VAR 0 2
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18888: LD_INT 35
18890: PPUSH
18891: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PPUSH
18912: CALL_OW 69
18916: PPUSH
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 74
18926: PPUSH
18927: CALL_OW 115
// until IsDead ( un ) ;
18931: LD_VAR 0 2
18935: PPUSH
18936: CALL_OW 301
18940: IFFALSE 18888
// end ;
18942: PPOPN 2
18944: END
// every 0 0$1 trigger StreamModeActive and sStu do
18945: LD_EXP 38
18949: PUSH
18950: LD_EXP 77
18954: AND
18955: IFFALSE 18971
18957: GO 18959
18959: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18960: LD_STRING displayStucuk();
18962: PPUSH
18963: CALL_OW 559
// ResetFog ;
18967: CALL_OW 335
// end ;
18971: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18972: LD_EXP 38
18976: PUSH
18977: LD_EXP 70
18981: AND
18982: IFFALSE 19123
18984: GO 18986
18986: DISABLE
18987: LD_INT 0
18989: PPUSH
18990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18991: LD_ADDR_VAR 0 2
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_OWVAR 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 21
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: ST_TO_ADDR
// if not tmp then
19027: LD_VAR 0 2
19031: NOT
19032: IFFALSE 19036
// exit ;
19034: GO 19123
// un := tmp [ rand ( 1 , tmp ) ] ;
19036: LD_ADDR_VAR 0 1
19040: PUSH
19041: LD_VAR 0 2
19045: PUSH
19046: LD_INT 1
19048: PPUSH
19049: LD_VAR 0 2
19053: PPUSH
19054: CALL_OW 12
19058: ARRAY
19059: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19072: LD_VAR 0 1
19076: PPUSH
19077: LD_OWVAR 3
19081: PUSH
19082: LD_VAR 0 1
19086: DIFF
19087: PPUSH
19088: LD_VAR 0 1
19092: PPUSH
19093: CALL_OW 74
19097: PPUSH
19098: CALL_OW 115
// wait ( 0 0$20 ) ;
19102: LD_INT 700
19104: PPUSH
19105: CALL_OW 67
// SetSide ( un , your_side ) ;
19109: LD_VAR 0 1
19113: PPUSH
19114: LD_OWVAR 2
19118: PPUSH
19119: CALL_OW 235
// end ;
19123: PPOPN 2
19125: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19126: LD_EXP 38
19130: PUSH
19131: LD_EXP 71
19135: AND
19136: IFFALSE 19242
19138: GO 19140
19140: DISABLE
19141: LD_INT 0
19143: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19144: LD_ADDR_VAR 0 1
19148: PUSH
19149: LD_INT 22
19151: PUSH
19152: LD_OWVAR 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: LD_INT 30
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 30
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 69
19197: ST_TO_ADDR
// if not depot then
19198: LD_VAR 0 1
19202: NOT
19203: IFFALSE 19207
// exit ;
19205: GO 19242
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19207: LD_VAR 0 1
19211: PUSH
19212: LD_INT 1
19214: ARRAY
19215: PPUSH
19216: CALL_OW 250
19220: PPUSH
19221: LD_VAR 0 1
19225: PUSH
19226: LD_INT 1
19228: ARRAY
19229: PPUSH
19230: CALL_OW 251
19234: PPUSH
19235: LD_INT 70
19237: PPUSH
19238: CALL_OW 495
// end ;
19242: PPOPN 1
19244: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19245: LD_EXP 38
19249: PUSH
19250: LD_EXP 72
19254: AND
19255: IFFALSE 19466
19257: GO 19259
19259: DISABLE
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
19265: PPUSH
19266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19267: LD_ADDR_VAR 0 5
19271: PUSH
19272: LD_INT 22
19274: PUSH
19275: LD_OWVAR 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 21
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PPUSH
19298: CALL_OW 69
19302: ST_TO_ADDR
// if not tmp then
19303: LD_VAR 0 5
19307: NOT
19308: IFFALSE 19312
// exit ;
19310: GO 19466
// for i in tmp do
19312: LD_ADDR_VAR 0 1
19316: PUSH
19317: LD_VAR 0 5
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19464
// begin d := rand ( 0 , 5 ) ;
19325: LD_ADDR_VAR 0 4
19329: PUSH
19330: LD_INT 0
19332: PPUSH
19333: LD_INT 5
19335: PPUSH
19336: CALL_OW 12
19340: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19341: LD_ADDR_VAR 0 2
19345: PUSH
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 250
19355: PPUSH
19356: LD_VAR 0 4
19360: PPUSH
19361: LD_INT 3
19363: PPUSH
19364: LD_INT 12
19366: PPUSH
19367: CALL_OW 12
19371: PPUSH
19372: CALL_OW 272
19376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 251
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: LD_INT 3
19399: PPUSH
19400: LD_INT 12
19402: PPUSH
19403: CALL_OW 12
19407: PPUSH
19408: CALL_OW 273
19412: ST_TO_ADDR
// if ValidHex ( x , y ) then
19413: LD_VAR 0 2
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: CALL_OW 488
19427: IFFALSE 19462
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19429: LD_VAR 0 1
19433: PPUSH
19434: LD_VAR 0 2
19438: PPUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: LD_INT 3
19446: PPUSH
19447: LD_INT 6
19449: PPUSH
19450: CALL_OW 12
19454: PPUSH
19455: LD_INT 1
19457: PPUSH
19458: CALL_OW 483
// end ;
19462: GO 19322
19464: POP
19465: POP
// end ;
19466: PPOPN 5
19468: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19469: LD_EXP 38
19473: PUSH
19474: LD_EXP 73
19478: AND
19479: IFFALSE 19573
19481: GO 19483
19483: DISABLE
19484: LD_INT 0
19486: PPUSH
19487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19488: LD_ADDR_VAR 0 2
19492: PUSH
19493: LD_INT 22
19495: PUSH
19496: LD_OWVAR 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 32
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: ST_TO_ADDR
// if not tmp then
19535: LD_VAR 0 2
19539: NOT
19540: IFFALSE 19544
// exit ;
19542: GO 19573
// for i in tmp do
19544: LD_ADDR_VAR 0 1
19548: PUSH
19549: LD_VAR 0 2
19553: PUSH
19554: FOR_IN
19555: IFFALSE 19571
// SetFuel ( i , 0 ) ;
19557: LD_VAR 0 1
19561: PPUSH
19562: LD_INT 0
19564: PPUSH
19565: CALL_OW 240
19569: GO 19554
19571: POP
19572: POP
// end ;
19573: PPOPN 2
19575: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19576: LD_EXP 38
19580: PUSH
19581: LD_EXP 74
19585: AND
19586: IFFALSE 19652
19588: GO 19590
19590: DISABLE
19591: LD_INT 0
19593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19594: LD_ADDR_VAR 0 1
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_OWVAR 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 30
19613: PUSH
19614: LD_INT 29
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 69
19629: ST_TO_ADDR
// if not tmp then
19630: LD_VAR 0 1
19634: NOT
19635: IFFALSE 19639
// exit ;
19637: GO 19652
// DestroyUnit ( tmp [ 1 ] ) ;
19639: LD_VAR 0 1
19643: PUSH
19644: LD_INT 1
19646: ARRAY
19647: PPUSH
19648: CALL_OW 65
// end ;
19652: PPOPN 1
19654: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19655: LD_EXP 38
19659: PUSH
19660: LD_EXP 76
19664: AND
19665: IFFALSE 19794
19667: GO 19669
19669: DISABLE
19670: LD_INT 0
19672: PPUSH
// begin uc_side := 0 ;
19673: LD_ADDR_OWVAR 20
19677: PUSH
19678: LD_INT 0
19680: ST_TO_ADDR
// uc_nation := nation_arabian ;
19681: LD_ADDR_OWVAR 21
19685: PUSH
19686: LD_INT 2
19688: ST_TO_ADDR
// hc_gallery :=  ;
19689: LD_ADDR_OWVAR 33
19693: PUSH
19694: LD_STRING 
19696: ST_TO_ADDR
// hc_name :=  ;
19697: LD_ADDR_OWVAR 26
19701: PUSH
19702: LD_STRING 
19704: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19705: LD_INT 1
19707: PPUSH
19708: LD_INT 11
19710: PPUSH
19711: LD_INT 10
19713: PPUSH
19714: CALL_OW 380
// un := CreateHuman ;
19718: LD_ADDR_VAR 0 1
19722: PUSH
19723: CALL_OW 44
19727: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19728: LD_VAR 0 1
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19740: LD_INT 35
19742: PPUSH
19743: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 22
19754: PUSH
19755: LD_OWVAR 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: PPUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 74
19778: PPUSH
19779: CALL_OW 115
// until IsDead ( un ) ;
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 301
19792: IFFALSE 19740
// end ;
19794: PPOPN 1
19796: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19797: LD_EXP 38
19801: PUSH
19802: LD_EXP 78
19806: AND
19807: IFFALSE 19819
19809: GO 19811
19811: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19812: LD_STRING earthquake(getX(game), 0, 32)
19814: PPUSH
19815: CALL_OW 559
19819: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19820: LD_EXP 38
19824: PUSH
19825: LD_EXP 79
19829: AND
19830: IFFALSE 19921
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
// begin enable ;
19838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19839: LD_ADDR_VAR 0 1
19843: PUSH
19844: LD_INT 22
19846: PUSH
19847: LD_OWVAR 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 21
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 33
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 69
19885: ST_TO_ADDR
// if not tmp then
19886: LD_VAR 0 1
19890: NOT
19891: IFFALSE 19895
// exit ;
19893: GO 19921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19895: LD_VAR 0 1
19899: PUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 12
19912: ARRAY
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 234
// end ;
19921: PPOPN 1
19923: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19924: LD_EXP 38
19928: PUSH
19929: LD_EXP 80
19933: AND
19934: IFFALSE 20075
19936: GO 19938
19938: DISABLE
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_OWVAR 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 25
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PPUSH
19975: CALL_OW 69
19979: ST_TO_ADDR
// if not tmp then
19980: LD_VAR 0 3
19984: NOT
19985: IFFALSE 19989
// exit ;
19987: GO 20075
// un := tmp [ rand ( 1 , tmp ) ] ;
19989: LD_ADDR_VAR 0 2
19993: PUSH
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 1
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: CALL_OW 12
20011: ARRAY
20012: ST_TO_ADDR
// if Crawls ( un ) then
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL_OW 318
20022: IFFALSE 20033
// ComWalk ( un ) ;
20024: LD_VAR 0 2
20028: PPUSH
20029: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20033: LD_VAR 0 2
20037: PPUSH
20038: LD_INT 9
20040: PPUSH
20041: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20045: LD_INT 28
20047: PPUSH
20048: LD_OWVAR 2
20052: PPUSH
20053: LD_INT 2
20055: PPUSH
20056: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20060: LD_INT 29
20062: PPUSH
20063: LD_OWVAR 2
20067: PPUSH
20068: LD_INT 2
20070: PPUSH
20071: CALL_OW 322
// end ;
20075: PPOPN 3
20077: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20078: LD_EXP 38
20082: PUSH
20083: LD_EXP 81
20087: AND
20088: IFFALSE 20199
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
20097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20098: LD_ADDR_VAR 0 3
20102: PUSH
20103: LD_INT 22
20105: PUSH
20106: LD_OWVAR 2
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 25
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PPUSH
20129: CALL_OW 69
20133: ST_TO_ADDR
// if not tmp then
20134: LD_VAR 0 3
20138: NOT
20139: IFFALSE 20143
// exit ;
20141: GO 20199
// un := tmp [ rand ( 1 , tmp ) ] ;
20143: LD_ADDR_VAR 0 2
20147: PUSH
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 1
20155: PPUSH
20156: LD_VAR 0 3
20160: PPUSH
20161: CALL_OW 12
20165: ARRAY
20166: ST_TO_ADDR
// if Crawls ( un ) then
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 318
20176: IFFALSE 20187
// ComWalk ( un ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20187: LD_VAR 0 2
20191: PPUSH
20192: LD_INT 8
20194: PPUSH
20195: CALL_OW 336
// end ;
20199: PPOPN 3
20201: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20202: LD_EXP 38
20206: PUSH
20207: LD_EXP 82
20211: AND
20212: IFFALSE 20356
20214: GO 20216
20216: DISABLE
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 34
20253: PUSH
20254: LD_INT 12
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 34
20263: PUSH
20264: LD_INT 51
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 34
20273: PUSH
20274: LD_INT 32
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 69
20296: ST_TO_ADDR
// if not tmp then
20297: LD_VAR 0 2
20301: NOT
20302: IFFALSE 20306
// exit ;
20304: GO 20356
// for i in tmp do
20306: LD_ADDR_VAR 0 1
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20354
// if GetCargo ( i , mat_artifact ) = 0 then
20319: LD_VAR 0 1
20323: PPUSH
20324: LD_INT 4
20326: PPUSH
20327: CALL_OW 289
20331: PUSH
20332: LD_INT 0
20334: EQUAL
20335: IFFALSE 20352
// SetCargo ( i , mat_siberit , 100 ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 3
20344: PPUSH
20345: LD_INT 100
20347: PPUSH
20348: CALL_OW 290
20352: GO 20316
20354: POP
20355: POP
// end ;
20356: PPOPN 2
20358: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20359: LD_EXP 38
20363: PUSH
20364: LD_EXP 83
20368: AND
20369: IFFALSE 20552
20371: GO 20373
20373: DISABLE
20374: LD_INT 0
20376: PPUSH
20377: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_OWVAR 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PPUSH
20395: CALL_OW 69
20399: ST_TO_ADDR
// if not tmp then
20400: LD_VAR 0 2
20404: NOT
20405: IFFALSE 20409
// exit ;
20407: GO 20552
// for i := 1 to 2 do
20409: LD_ADDR_VAR 0 1
20413: PUSH
20414: DOUBLE
20415: LD_INT 1
20417: DEC
20418: ST_TO_ADDR
20419: LD_INT 2
20421: PUSH
20422: FOR_TO
20423: IFFALSE 20550
// begin uc_side := your_side ;
20425: LD_ADDR_OWVAR 20
20429: PUSH
20430: LD_OWVAR 2
20434: ST_TO_ADDR
// uc_nation := nation_american ;
20435: LD_ADDR_OWVAR 21
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// vc_chassis := us_morphling ;
20443: LD_ADDR_OWVAR 37
20447: PUSH
20448: LD_INT 5
20450: ST_TO_ADDR
// vc_engine := engine_siberite ;
20451: LD_ADDR_OWVAR 39
20455: PUSH
20456: LD_INT 3
20458: ST_TO_ADDR
// vc_control := control_computer ;
20459: LD_ADDR_OWVAR 38
20463: PUSH
20464: LD_INT 3
20466: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20467: LD_ADDR_OWVAR 40
20471: PUSH
20472: LD_INT 10
20474: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20475: LD_VAR 0 2
20479: PUSH
20480: LD_INT 1
20482: ARRAY
20483: PPUSH
20484: CALL_OW 310
20488: NOT
20489: IFFALSE 20536
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20491: CALL_OW 45
20495: PPUSH
20496: LD_VAR 0 2
20500: PUSH
20501: LD_INT 1
20503: ARRAY
20504: PPUSH
20505: CALL_OW 250
20509: PPUSH
20510: LD_VAR 0 2
20514: PUSH
20515: LD_INT 1
20517: ARRAY
20518: PPUSH
20519: CALL_OW 251
20523: PPUSH
20524: LD_INT 12
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: CALL_OW 50
20534: GO 20548
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20536: CALL_OW 45
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: CALL_OW 51
// end ;
20548: GO 20422
20550: POP
20551: POP
// end ;
20552: PPOPN 2
20554: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20555: LD_EXP 38
20559: PUSH
20560: LD_EXP 84
20564: AND
20565: IFFALSE 20787
20567: GO 20569
20569: DISABLE
20570: LD_INT 0
20572: PPUSH
20573: PPUSH
20574: PPUSH
20575: PPUSH
20576: PPUSH
20577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20578: LD_ADDR_VAR 0 6
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 21
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 3
20607: PUSH
20608: LD_INT 23
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: LIST
20626: PPUSH
20627: CALL_OW 69
20631: ST_TO_ADDR
// if not tmp then
20632: LD_VAR 0 6
20636: NOT
20637: IFFALSE 20641
// exit ;
20639: GO 20787
// s1 := rand ( 1 , 4 ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 1
20648: PPUSH
20649: LD_INT 4
20651: PPUSH
20652: CALL_OW 12
20656: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20657: LD_ADDR_VAR 0 4
20661: PUSH
20662: LD_VAR 0 6
20666: PUSH
20667: LD_INT 1
20669: ARRAY
20670: PPUSH
20671: LD_VAR 0 2
20675: PPUSH
20676: CALL_OW 259
20680: ST_TO_ADDR
// if s1 = 1 then
20681: LD_VAR 0 2
20685: PUSH
20686: LD_INT 1
20688: EQUAL
20689: IFFALSE 20709
// s2 := rand ( 2 , 4 ) else
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_INT 2
20698: PPUSH
20699: LD_INT 4
20701: PPUSH
20702: CALL_OW 12
20706: ST_TO_ADDR
20707: GO 20717
// s2 := 1 ;
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20717: LD_ADDR_VAR 0 5
20721: PUSH
20722: LD_VAR 0 6
20726: PUSH
20727: LD_INT 1
20729: ARRAY
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 259
20740: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20741: LD_VAR 0 6
20745: PUSH
20746: LD_INT 1
20748: ARRAY
20749: PPUSH
20750: LD_VAR 0 2
20754: PPUSH
20755: LD_VAR 0 5
20759: PPUSH
20760: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20764: LD_VAR 0 6
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: LD_VAR 0 4
20782: PPUSH
20783: CALL_OW 237
// end ;
20787: PPOPN 6
20789: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20790: LD_EXP 38
20794: PUSH
20795: LD_EXP 85
20799: AND
20800: IFFALSE 20879
20802: GO 20804
20804: DISABLE
20805: LD_INT 0
20807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20808: LD_ADDR_VAR 0 1
20812: PUSH
20813: LD_INT 22
20815: PUSH
20816: LD_OWVAR 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 30
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: ST_TO_ADDR
// if not tmp then
20844: LD_VAR 0 1
20848: NOT
20849: IFFALSE 20853
// exit ;
20851: GO 20879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20853: LD_VAR 0 1
20857: PUSH
20858: LD_INT 1
20860: PPUSH
20861: LD_VAR 0 1
20865: PPUSH
20866: CALL_OW 12
20870: ARRAY
20871: PPUSH
20872: LD_INT 1
20874: PPUSH
20875: CALL_OW 234
// end ;
20879: PPOPN 1
20881: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20882: LD_EXP 38
20886: PUSH
20887: LD_EXP 86
20891: AND
20892: IFFALSE 21004
20894: GO 20896
20896: DISABLE
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_INT 22
20908: PUSH
20909: LD_OWVAR 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 30
20923: PUSH
20924: LD_INT 27
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 30
20933: PUSH
20934: LD_INT 26
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 30
20943: PUSH
20944: LD_INT 28
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 69
20965: ST_TO_ADDR
// if not tmp then
20966: LD_VAR 0 2
20970: NOT
20971: IFFALSE 20975
// exit ;
20973: GO 21004
// for i in tmp do
20975: LD_ADDR_VAR 0 1
20979: PUSH
20980: LD_VAR 0 2
20984: PUSH
20985: FOR_IN
20986: IFFALSE 21002
// SetLives ( i , 1 ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: CALL_OW 234
21000: GO 20985
21002: POP
21003: POP
// end ;
21004: PPOPN 2
21006: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21007: LD_EXP 38
21011: PUSH
21012: LD_EXP 87
21016: AND
21017: IFFALSE 21291
21019: GO 21021
21021: DISABLE
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
21026: PPUSH
// begin i := rand ( 1 , 7 ) ;
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_INT 1
21034: PPUSH
21035: LD_INT 7
21037: PPUSH
21038: CALL_OW 12
21042: ST_TO_ADDR
// case i of 1 :
21043: LD_VAR 0 1
21047: PUSH
21048: LD_INT 1
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21066
21056: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21057: LD_STRING earthquake(getX(game), 0, 32)
21059: PPUSH
21060: CALL_OW 559
21064: GO 21291
21066: LD_INT 2
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21088
21074: POP
// begin ToLua ( displayStucuk(); ) ;
21075: LD_STRING displayStucuk();
21077: PPUSH
21078: CALL_OW 559
// ResetFog ;
21082: CALL_OW 335
// end ; 3 :
21086: GO 21291
21088: LD_INT 3
21090: DOUBLE
21091: EQUAL
21092: IFTRUE 21096
21094: GO 21200
21096: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21097: LD_ADDR_VAR 0 2
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_OWVAR 2
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 25
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 69
21132: ST_TO_ADDR
// if not tmp then
21133: LD_VAR 0 2
21137: NOT
21138: IFFALSE 21142
// exit ;
21140: GO 21291
// un := tmp [ rand ( 1 , tmp ) ] ;
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: LD_VAR 0 2
21151: PUSH
21152: LD_INT 1
21154: PPUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: CALL_OW 12
21164: ARRAY
21165: ST_TO_ADDR
// if Crawls ( un ) then
21166: LD_VAR 0 3
21170: PPUSH
21171: CALL_OW 318
21175: IFFALSE 21186
// ComWalk ( un ) ;
21177: LD_VAR 0 3
21181: PPUSH
21182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21186: LD_VAR 0 3
21190: PPUSH
21191: LD_INT 8
21193: PPUSH
21194: CALL_OW 336
// end ; 4 :
21198: GO 21291
21200: LD_INT 4
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21269
21208: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21209: LD_ADDR_VAR 0 2
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_OWVAR 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 30
21228: PUSH
21229: LD_INT 29
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: ST_TO_ADDR
// if not tmp then
21245: LD_VAR 0 2
21249: NOT
21250: IFFALSE 21254
// exit ;
21252: GO 21291
// DestroyUnit ( tmp [ 1 ] ) ;
21254: LD_VAR 0 2
21258: PUSH
21259: LD_INT 1
21261: ARRAY
21262: PPUSH
21263: CALL_OW 65
// end ; 5 .. 7 :
21267: GO 21291
21269: LD_INT 5
21271: DOUBLE
21272: GREATEREQUAL
21273: IFFALSE 21281
21275: LD_INT 7
21277: DOUBLE
21278: LESSEQUAL
21279: IFTRUE 21283
21281: GO 21290
21283: POP
// StreamSibBomb ; end ;
21284: CALL 17541 0 0
21288: GO 21291
21290: POP
// end ;
21291: PPOPN 3
21293: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21294: LD_EXP 38
21298: PUSH
21299: LD_EXP 88
21303: AND
21304: IFFALSE 21460
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
21313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21314: LD_ADDR_VAR 0 2
21318: PUSH
21319: LD_INT 81
21321: PUSH
21322: LD_OWVAR 2
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 21
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PPUSH
21363: CALL_OW 69
21367: ST_TO_ADDR
// if not tmp then
21368: LD_VAR 0 2
21372: NOT
21373: IFFALSE 21377
// exit ;
21375: GO 21460
// p := 0 ;
21377: LD_ADDR_VAR 0 3
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21385: LD_INT 35
21387: PPUSH
21388: CALL_OW 67
// p := p + 1 ;
21392: LD_ADDR_VAR 0 3
21396: PUSH
21397: LD_VAR 0 3
21401: PUSH
21402: LD_INT 1
21404: PLUS
21405: ST_TO_ADDR
// for i in tmp do
21406: LD_ADDR_VAR 0 1
21410: PUSH
21411: LD_VAR 0 2
21415: PUSH
21416: FOR_IN
21417: IFFALSE 21448
// if GetLives ( i ) < 1000 then
21419: LD_VAR 0 1
21423: PPUSH
21424: CALL_OW 256
21428: PUSH
21429: LD_INT 1000
21431: LESS
21432: IFFALSE 21446
// SetLives ( i , 1000 ) ;
21434: LD_VAR 0 1
21438: PPUSH
21439: LD_INT 1000
21441: PPUSH
21442: CALL_OW 234
21446: GO 21416
21448: POP
21449: POP
// until p > 20 ;
21450: LD_VAR 0 3
21454: PUSH
21455: LD_INT 20
21457: GREATER
21458: IFFALSE 21385
// end ;
21460: PPOPN 3
21462: END
// every 0 0$1 trigger StreamModeActive and sTime do
21463: LD_EXP 38
21467: PUSH
21468: LD_EXP 89
21472: AND
21473: IFFALSE 21508
21475: GO 21477
21477: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21478: LD_INT 28
21480: PPUSH
21481: LD_OWVAR 2
21485: PPUSH
21486: LD_INT 2
21488: PPUSH
21489: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21493: LD_INT 30
21495: PPUSH
21496: LD_OWVAR 2
21500: PPUSH
21501: LD_INT 2
21503: PPUSH
21504: CALL_OW 322
// end ;
21508: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21509: LD_EXP 38
21513: PUSH
21514: LD_EXP 90
21518: AND
21519: IFFALSE 21640
21521: GO 21523
21523: DISABLE
21524: LD_INT 0
21526: PPUSH
21527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21528: LD_ADDR_VAR 0 2
21532: PUSH
21533: LD_INT 22
21535: PUSH
21536: LD_OWVAR 2
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 21
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 3
21557: PUSH
21558: LD_INT 23
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: PPUSH
21577: CALL_OW 69
21581: ST_TO_ADDR
// if not tmp then
21582: LD_VAR 0 2
21586: NOT
21587: IFFALSE 21591
// exit ;
21589: GO 21640
// for i in tmp do
21591: LD_ADDR_VAR 0 1
21595: PUSH
21596: LD_VAR 0 2
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21638
// begin if Crawls ( i ) then
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 318
21613: IFFALSE 21624
// ComWalk ( i ) ;
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 138
// SetClass ( i , 2 ) ;
21624: LD_VAR 0 1
21628: PPUSH
21629: LD_INT 2
21631: PPUSH
21632: CALL_OW 336
// end ;
21636: GO 21601
21638: POP
21639: POP
// end ;
21640: PPOPN 2
21642: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21643: LD_EXP 38
21647: PUSH
21648: LD_EXP 91
21652: AND
21653: IFFALSE 21934
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
21662: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21663: LD_OWVAR 2
21667: PPUSH
21668: LD_INT 9
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: LD_INT 1
21676: PPUSH
21677: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21681: LD_INT 9
21683: PPUSH
21684: LD_OWVAR 2
21688: PPUSH
21689: CALL_OW 343
// uc_side := 9 ;
21693: LD_ADDR_OWVAR 20
21697: PUSH
21698: LD_INT 9
21700: ST_TO_ADDR
// uc_nation := 2 ;
21701: LD_ADDR_OWVAR 21
21705: PUSH
21706: LD_INT 2
21708: ST_TO_ADDR
// hc_name := Dark Warrior ;
21709: LD_ADDR_OWVAR 26
21713: PUSH
21714: LD_STRING Dark Warrior
21716: ST_TO_ADDR
// hc_gallery :=  ;
21717: LD_ADDR_OWVAR 33
21721: PUSH
21722: LD_STRING 
21724: ST_TO_ADDR
// hc_noskilllimit := true ;
21725: LD_ADDR_OWVAR 76
21729: PUSH
21730: LD_INT 1
21732: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21733: LD_ADDR_OWVAR 31
21737: PUSH
21738: LD_INT 30
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: LD_INT 30
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
// un := CreateHuman ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: CALL_OW 44
21765: ST_TO_ADDR
// hc_noskilllimit := false ;
21766: LD_ADDR_OWVAR 76
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21774: LD_VAR 0 3
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 51
// p := 0 ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21794: LD_INT 35
21796: PPUSH
21797: CALL_OW 67
// p := p + 1 ;
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_VAR 0 2
21810: PUSH
21811: LD_INT 1
21813: PLUS
21814: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21815: LD_VAR 0 3
21819: PPUSH
21820: CALL_OW 256
21824: PUSH
21825: LD_INT 1000
21827: LESS
21828: IFFALSE 21842
// SetLives ( un , 1000 ) ;
21830: LD_VAR 0 3
21834: PPUSH
21835: LD_INT 1000
21837: PPUSH
21838: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21842: LD_VAR 0 3
21846: PPUSH
21847: LD_INT 81
21849: PUSH
21850: LD_OWVAR 2
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 91
21861: PUSH
21862: LD_VAR 0 3
21866: PUSH
21867: LD_INT 30
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: CALL_OW 69
21883: PPUSH
21884: LD_VAR 0 3
21888: PPUSH
21889: CALL_OW 74
21893: PPUSH
21894: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21898: LD_VAR 0 2
21902: PUSH
21903: LD_INT 60
21905: GREATER
21906: PUSH
21907: LD_VAR 0 3
21911: PPUSH
21912: CALL_OW 301
21916: OR
21917: IFFALSE 21794
// if un then
21919: LD_VAR 0 3
21923: IFFALSE 21934
// RemoveUnit ( un ) ;
21925: LD_VAR 0 3
21929: PPUSH
21930: CALL_OW 64
// end ;
21934: PPOPN 3
21936: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21937: LD_INT 0
21939: PPUSH
// case cmd of 301 :
21940: LD_VAR 0 1
21944: PUSH
21945: LD_INT 301
21947: DOUBLE
21948: EQUAL
21949: IFTRUE 21953
21951: GO 21985
21953: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21954: LD_VAR 0 6
21958: PPUSH
21959: LD_VAR 0 7
21963: PPUSH
21964: LD_VAR 0 8
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL 23186 0 5
21983: GO 22106
21985: LD_INT 302
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22030
21993: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21994: LD_VAR 0 6
21998: PPUSH
21999: LD_VAR 0 7
22003: PPUSH
22004: LD_VAR 0 8
22008: PPUSH
22009: LD_VAR 0 9
22013: PPUSH
22014: LD_VAR 0 4
22018: PPUSH
22019: LD_VAR 0 5
22023: PPUSH
22024: CALL 23277 0 6
22028: GO 22106
22030: LD_INT 303
22032: DOUBLE
22033: EQUAL
22034: IFTRUE 22038
22036: GO 22075
22038: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22039: LD_VAR 0 6
22043: PPUSH
22044: LD_VAR 0 7
22048: PPUSH
22049: LD_VAR 0 8
22053: PPUSH
22054: LD_VAR 0 9
22058: PPUSH
22059: LD_VAR 0 4
22063: PPUSH
22064: LD_VAR 0 5
22068: PPUSH
22069: CALL 22111 0 6
22073: GO 22106
22075: LD_INT 304
22077: DOUBLE
22078: EQUAL
22079: IFTRUE 22083
22081: GO 22105
22083: POP
// hHackTeleport ( unit , x , y ) ; end ;
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_VAR 0 4
22093: PPUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: CALL 23870 0 3
22103: GO 22106
22105: POP
// end ;
22106: LD_VAR 0 12
22110: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22111: LD_INT 0
22113: PPUSH
22114: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22115: LD_VAR 0 1
22119: PUSH
22120: LD_INT 1
22122: LESS
22123: PUSH
22124: LD_VAR 0 1
22128: PUSH
22129: LD_INT 3
22131: GREATER
22132: OR
22133: PUSH
22134: LD_VAR 0 5
22138: PPUSH
22139: LD_VAR 0 6
22143: PPUSH
22144: CALL_OW 428
22148: OR
22149: IFFALSE 22153
// exit ;
22151: GO 22873
// uc_side := your_side ;
22153: LD_ADDR_OWVAR 20
22157: PUSH
22158: LD_OWVAR 2
22162: ST_TO_ADDR
// uc_nation := nation ;
22163: LD_ADDR_OWVAR 21
22167: PUSH
22168: LD_VAR 0 1
22172: ST_TO_ADDR
// bc_level = 1 ;
22173: LD_ADDR_OWVAR 43
22177: PUSH
22178: LD_INT 1
22180: ST_TO_ADDR
// case btype of 1 :
22181: LD_VAR 0 2
22185: PUSH
22186: LD_INT 1
22188: DOUBLE
22189: EQUAL
22190: IFTRUE 22194
22192: GO 22205
22194: POP
// bc_type := b_depot ; 2 :
22195: LD_ADDR_OWVAR 42
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
22203: GO 22817
22205: LD_INT 2
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22224
22213: POP
// bc_type := b_warehouse ; 3 :
22214: LD_ADDR_OWVAR 42
22218: PUSH
22219: LD_INT 1
22221: ST_TO_ADDR
22222: GO 22817
22224: LD_INT 3
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22243
22232: POP
// bc_type := b_lab ; 4 .. 9 :
22233: LD_ADDR_OWVAR 42
22237: PUSH
22238: LD_INT 6
22240: ST_TO_ADDR
22241: GO 22817
22243: LD_INT 4
22245: DOUBLE
22246: GREATEREQUAL
22247: IFFALSE 22255
22249: LD_INT 9
22251: DOUBLE
22252: LESSEQUAL
22253: IFTRUE 22257
22255: GO 22309
22257: POP
// begin bc_type := b_lab_half ;
22258: LD_ADDR_OWVAR 42
22262: PUSH
22263: LD_INT 7
22265: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22266: LD_ADDR_OWVAR 44
22270: PUSH
22271: LD_INT 10
22273: PUSH
22274: LD_INT 11
22276: PUSH
22277: LD_INT 12
22279: PUSH
22280: LD_INT 15
22282: PUSH
22283: LD_INT 14
22285: PUSH
22286: LD_INT 13
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: LD_VAR 0 2
22301: PUSH
22302: LD_INT 3
22304: MINUS
22305: ARRAY
22306: ST_TO_ADDR
// end ; 10 .. 13 :
22307: GO 22817
22309: LD_INT 10
22311: DOUBLE
22312: GREATEREQUAL
22313: IFFALSE 22321
22315: LD_INT 13
22317: DOUBLE
22318: LESSEQUAL
22319: IFTRUE 22323
22321: GO 22400
22323: POP
// begin bc_type := b_lab_full ;
22324: LD_ADDR_OWVAR 42
22328: PUSH
22329: LD_INT 8
22331: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22332: LD_ADDR_OWVAR 44
22336: PUSH
22337: LD_INT 10
22339: PUSH
22340: LD_INT 12
22342: PUSH
22343: LD_INT 14
22345: PUSH
22346: LD_INT 13
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: LD_VAR 0 2
22359: PUSH
22360: LD_INT 9
22362: MINUS
22363: ARRAY
22364: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22365: LD_ADDR_OWVAR 45
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 15
22375: PUSH
22376: LD_INT 12
22378: PUSH
22379: LD_INT 15
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: LD_VAR 0 2
22392: PUSH
22393: LD_INT 9
22395: MINUS
22396: ARRAY
22397: ST_TO_ADDR
// end ; 14 :
22398: GO 22817
22400: LD_INT 14
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22419
22408: POP
// bc_type := b_workshop ; 15 :
22409: LD_ADDR_OWVAR 42
22413: PUSH
22414: LD_INT 2
22416: ST_TO_ADDR
22417: GO 22817
22419: LD_INT 15
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22438
22427: POP
// bc_type := b_factory ; 16 :
22428: LD_ADDR_OWVAR 42
22432: PUSH
22433: LD_INT 3
22435: ST_TO_ADDR
22436: GO 22817
22438: LD_INT 16
22440: DOUBLE
22441: EQUAL
22442: IFTRUE 22446
22444: GO 22457
22446: POP
// bc_type := b_ext_gun ; 17 :
22447: LD_ADDR_OWVAR 42
22451: PUSH
22452: LD_INT 17
22454: ST_TO_ADDR
22455: GO 22817
22457: LD_INT 17
22459: DOUBLE
22460: EQUAL
22461: IFTRUE 22465
22463: GO 22493
22465: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22466: LD_ADDR_OWVAR 42
22470: PUSH
22471: LD_INT 19
22473: PUSH
22474: LD_INT 23
22476: PUSH
22477: LD_INT 19
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: LD_VAR 0 1
22489: ARRAY
22490: ST_TO_ADDR
22491: GO 22817
22493: LD_INT 18
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22512
22501: POP
// bc_type := b_ext_radar ; 19 :
22502: LD_ADDR_OWVAR 42
22506: PUSH
22507: LD_INT 20
22509: ST_TO_ADDR
22510: GO 22817
22512: LD_INT 19
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22531
22520: POP
// bc_type := b_ext_radio ; 20 :
22521: LD_ADDR_OWVAR 42
22525: PUSH
22526: LD_INT 22
22528: ST_TO_ADDR
22529: GO 22817
22531: LD_INT 20
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22550
22539: POP
// bc_type := b_ext_siberium ; 21 :
22540: LD_ADDR_OWVAR 42
22544: PUSH
22545: LD_INT 21
22547: ST_TO_ADDR
22548: GO 22817
22550: LD_INT 21
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22569
22558: POP
// bc_type := b_ext_computer ; 22 :
22559: LD_ADDR_OWVAR 42
22563: PUSH
22564: LD_INT 24
22566: ST_TO_ADDR
22567: GO 22817
22569: LD_INT 22
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22588
22577: POP
// bc_type := b_ext_track ; 23 :
22578: LD_ADDR_OWVAR 42
22582: PUSH
22583: LD_INT 16
22585: ST_TO_ADDR
22586: GO 22817
22588: LD_INT 23
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22607
22596: POP
// bc_type := b_ext_laser ; 24 :
22597: LD_ADDR_OWVAR 42
22601: PUSH
22602: LD_INT 25
22604: ST_TO_ADDR
22605: GO 22817
22607: LD_INT 24
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22626
22615: POP
// bc_type := b_control_tower ; 25 :
22616: LD_ADDR_OWVAR 42
22620: PUSH
22621: LD_INT 36
22623: ST_TO_ADDR
22624: GO 22817
22626: LD_INT 25
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 22645
22634: POP
// bc_type := b_breastwork ; 26 :
22635: LD_ADDR_OWVAR 42
22639: PUSH
22640: LD_INT 31
22642: ST_TO_ADDR
22643: GO 22817
22645: LD_INT 26
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22664
22653: POP
// bc_type := b_bunker ; 27 :
22654: LD_ADDR_OWVAR 42
22658: PUSH
22659: LD_INT 32
22661: ST_TO_ADDR
22662: GO 22817
22664: LD_INT 27
22666: DOUBLE
22667: EQUAL
22668: IFTRUE 22672
22670: GO 22683
22672: POP
// bc_type := b_turret ; 28 :
22673: LD_ADDR_OWVAR 42
22677: PUSH
22678: LD_INT 33
22680: ST_TO_ADDR
22681: GO 22817
22683: LD_INT 28
22685: DOUBLE
22686: EQUAL
22687: IFTRUE 22691
22689: GO 22702
22691: POP
// bc_type := b_armoury ; 29 :
22692: LD_ADDR_OWVAR 42
22696: PUSH
22697: LD_INT 4
22699: ST_TO_ADDR
22700: GO 22817
22702: LD_INT 29
22704: DOUBLE
22705: EQUAL
22706: IFTRUE 22710
22708: GO 22721
22710: POP
// bc_type := b_barracks ; 30 :
22711: LD_ADDR_OWVAR 42
22715: PUSH
22716: LD_INT 5
22718: ST_TO_ADDR
22719: GO 22817
22721: LD_INT 30
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22740
22729: POP
// bc_type := b_solar_power ; 31 :
22730: LD_ADDR_OWVAR 42
22734: PUSH
22735: LD_INT 27
22737: ST_TO_ADDR
22738: GO 22817
22740: LD_INT 31
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22759
22748: POP
// bc_type := b_oil_power ; 32 :
22749: LD_ADDR_OWVAR 42
22753: PUSH
22754: LD_INT 26
22756: ST_TO_ADDR
22757: GO 22817
22759: LD_INT 32
22761: DOUBLE
22762: EQUAL
22763: IFTRUE 22767
22765: GO 22778
22767: POP
// bc_type := b_siberite_power ; 33 :
22768: LD_ADDR_OWVAR 42
22772: PUSH
22773: LD_INT 28
22775: ST_TO_ADDR
22776: GO 22817
22778: LD_INT 33
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22797
22786: POP
// bc_type := b_oil_mine ; 34 :
22787: LD_ADDR_OWVAR 42
22791: PUSH
22792: LD_INT 29
22794: ST_TO_ADDR
22795: GO 22817
22797: LD_INT 34
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 22816
22805: POP
// bc_type := b_siberite_mine ; end ;
22806: LD_ADDR_OWVAR 42
22810: PUSH
22811: LD_INT 30
22813: ST_TO_ADDR
22814: GO 22817
22816: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22817: LD_ADDR_VAR 0 8
22821: PUSH
22822: LD_VAR 0 5
22826: PPUSH
22827: LD_VAR 0 6
22831: PPUSH
22832: LD_VAR 0 3
22836: PPUSH
22837: CALL_OW 47
22841: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22842: LD_OWVAR 42
22846: PUSH
22847: LD_INT 32
22849: PUSH
22850: LD_INT 33
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: IN
22857: IFFALSE 22873
// PlaceWeaponTurret ( b , weapon ) ;
22859: LD_VAR 0 8
22863: PPUSH
22864: LD_VAR 0 4
22868: PPUSH
22869: CALL_OW 431
// end ;
22873: LD_VAR 0 7
22877: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22878: LD_INT 0
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22884: LD_ADDR_VAR 0 4
22888: PUSH
22889: LD_INT 22
22891: PUSH
22892: LD_OWVAR 2
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 30
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 30
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PPUSH
22933: CALL_OW 69
22937: ST_TO_ADDR
// if not tmp then
22938: LD_VAR 0 4
22942: NOT
22943: IFFALSE 22947
// exit ;
22945: GO 23006
// for i in tmp do
22947: LD_ADDR_VAR 0 2
22951: PUSH
22952: LD_VAR 0 4
22956: PUSH
22957: FOR_IN
22958: IFFALSE 23004
// for j = 1 to 3 do
22960: LD_ADDR_VAR 0 3
22964: PUSH
22965: DOUBLE
22966: LD_INT 1
22968: DEC
22969: ST_TO_ADDR
22970: LD_INT 3
22972: PUSH
22973: FOR_TO
22974: IFFALSE 23000
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22976: LD_VAR 0 2
22980: PPUSH
22981: CALL_OW 274
22985: PPUSH
22986: LD_VAR 0 3
22990: PPUSH
22991: LD_INT 99999
22993: PPUSH
22994: CALL_OW 277
22998: GO 22973
23000: POP
23001: POP
23002: GO 22957
23004: POP
23005: POP
// end ;
23006: LD_VAR 0 1
23010: RET
// export function hHackSetLevel10 ; var i , j ; begin
23011: LD_INT 0
23013: PPUSH
23014: PPUSH
23015: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_INT 21
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PPUSH
23031: CALL_OW 69
23035: PUSH
23036: FOR_IN
23037: IFFALSE 23089
// if IsSelected ( i ) then
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 306
23048: IFFALSE 23087
// begin for j := 1 to 4 do
23050: LD_ADDR_VAR 0 3
23054: PUSH
23055: DOUBLE
23056: LD_INT 1
23058: DEC
23059: ST_TO_ADDR
23060: LD_INT 4
23062: PUSH
23063: FOR_TO
23064: IFFALSE 23085
// SetSkill ( i , j , 10 ) ;
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 3
23075: PPUSH
23076: LD_INT 10
23078: PPUSH
23079: CALL_OW 237
23083: GO 23063
23085: POP
23086: POP
// end ;
23087: GO 23036
23089: POP
23090: POP
// end ;
23091: LD_VAR 0 1
23095: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23096: LD_INT 0
23098: PPUSH
23099: PPUSH
23100: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23101: LD_ADDR_VAR 0 2
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_OWVAR 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 21
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PPUSH
23132: CALL_OW 69
23136: PUSH
23137: FOR_IN
23138: IFFALSE 23179
// begin for j := 1 to 4 do
23140: LD_ADDR_VAR 0 3
23144: PUSH
23145: DOUBLE
23146: LD_INT 1
23148: DEC
23149: ST_TO_ADDR
23150: LD_INT 4
23152: PUSH
23153: FOR_TO
23154: IFFALSE 23175
// SetSkill ( i , j , 10 ) ;
23156: LD_VAR 0 2
23160: PPUSH
23161: LD_VAR 0 3
23165: PPUSH
23166: LD_INT 10
23168: PPUSH
23169: CALL_OW 237
23173: GO 23153
23175: POP
23176: POP
// end ;
23177: GO 23137
23179: POP
23180: POP
// end ;
23181: LD_VAR 0 1
23185: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23186: LD_INT 0
23188: PPUSH
// uc_side := your_side ;
23189: LD_ADDR_OWVAR 20
23193: PUSH
23194: LD_OWVAR 2
23198: ST_TO_ADDR
// uc_nation := nation ;
23199: LD_ADDR_OWVAR 21
23203: PUSH
23204: LD_VAR 0 1
23208: ST_TO_ADDR
// InitHc ;
23209: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23213: LD_INT 0
23215: PPUSH
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_VAR 0 3
23225: PPUSH
23226: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23230: LD_VAR 0 4
23234: PPUSH
23235: LD_VAR 0 5
23239: PPUSH
23240: CALL_OW 428
23244: PUSH
23245: LD_INT 0
23247: EQUAL
23248: IFFALSE 23272
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23250: CALL_OW 44
23254: PPUSH
23255: LD_VAR 0 4
23259: PPUSH
23260: LD_VAR 0 5
23264: PPUSH
23265: LD_INT 1
23267: PPUSH
23268: CALL_OW 48
// end ;
23272: LD_VAR 0 6
23276: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23277: LD_INT 0
23279: PPUSH
23280: PPUSH
// uc_side := your_side ;
23281: LD_ADDR_OWVAR 20
23285: PUSH
23286: LD_OWVAR 2
23290: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23291: LD_VAR 0 1
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 4
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: IN
23318: IFFALSE 23330
// uc_nation := nation_american else
23320: LD_ADDR_OWVAR 21
23324: PUSH
23325: LD_INT 1
23327: ST_TO_ADDR
23328: GO 23373
// if chassis in [ 11 , 12 , 13 , 14 ] then
23330: LD_VAR 0 1
23334: PUSH
23335: LD_INT 11
23337: PUSH
23338: LD_INT 12
23340: PUSH
23341: LD_INT 13
23343: PUSH
23344: LD_INT 14
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: IN
23353: IFFALSE 23365
// uc_nation := nation_arabian else
23355: LD_ADDR_OWVAR 21
23359: PUSH
23360: LD_INT 2
23362: ST_TO_ADDR
23363: GO 23373
// uc_nation := nation_russian ;
23365: LD_ADDR_OWVAR 21
23369: PUSH
23370: LD_INT 3
23372: ST_TO_ADDR
// vc_chassis := chassis ;
23373: LD_ADDR_OWVAR 37
23377: PUSH
23378: LD_VAR 0 1
23382: ST_TO_ADDR
// vc_engine := engine ;
23383: LD_ADDR_OWVAR 39
23387: PUSH
23388: LD_VAR 0 2
23392: ST_TO_ADDR
// vc_control := control ;
23393: LD_ADDR_OWVAR 38
23397: PUSH
23398: LD_VAR 0 3
23402: ST_TO_ADDR
// vc_weapon := weapon ;
23403: LD_ADDR_OWVAR 40
23407: PUSH
23408: LD_VAR 0 4
23412: ST_TO_ADDR
// un := CreateVehicle ;
23413: LD_ADDR_VAR 0 8
23417: PUSH
23418: CALL_OW 45
23422: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23423: LD_VAR 0 8
23427: PPUSH
23428: LD_INT 0
23430: PPUSH
23431: LD_INT 5
23433: PPUSH
23434: CALL_OW 12
23438: PPUSH
23439: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23443: LD_VAR 0 8
23447: PPUSH
23448: LD_VAR 0 5
23452: PPUSH
23453: LD_VAR 0 6
23457: PPUSH
23458: LD_INT 1
23460: PPUSH
23461: CALL_OW 48
// end ;
23465: LD_VAR 0 7
23469: RET
// export hInvincible ; every 1 do
23470: GO 23472
23472: DISABLE
// hInvincible := [ ] ;
23473: LD_ADDR_EXP 92
23477: PUSH
23478: EMPTY
23479: ST_TO_ADDR
23480: END
// every 10 do var i ;
23481: GO 23483
23483: DISABLE
23484: LD_INT 0
23486: PPUSH
// begin enable ;
23487: ENABLE
// if not hInvincible then
23488: LD_EXP 92
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23541
// for i in hInvincible do
23497: LD_ADDR_VAR 0 1
23501: PUSH
23502: LD_EXP 92
23506: PUSH
23507: FOR_IN
23508: IFFALSE 23539
// if GetLives ( i ) < 1000 then
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL_OW 256
23519: PUSH
23520: LD_INT 1000
23522: LESS
23523: IFFALSE 23537
// SetLives ( i , 1000 ) ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_INT 1000
23532: PPUSH
23533: CALL_OW 234
23537: GO 23507
23539: POP
23540: POP
// end ;
23541: PPOPN 1
23543: END
// export function hHackInvincible ; var i ; begin
23544: LD_INT 0
23546: PPUSH
23547: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 21
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: PUSH
23586: FOR_IN
23587: IFFALSE 23648
// if IsSelected ( i ) then
23589: LD_VAR 0 2
23593: PPUSH
23594: CALL_OW 306
23598: IFFALSE 23646
// begin if i in hInvincible then
23600: LD_VAR 0 2
23604: PUSH
23605: LD_EXP 92
23609: IN
23610: IFFALSE 23630
// hInvincible := hInvincible diff i else
23612: LD_ADDR_EXP 92
23616: PUSH
23617: LD_EXP 92
23621: PUSH
23622: LD_VAR 0 2
23626: DIFF
23627: ST_TO_ADDR
23628: GO 23646
// hInvincible := hInvincible union i ;
23630: LD_ADDR_EXP 92
23634: PUSH
23635: LD_EXP 92
23639: PUSH
23640: LD_VAR 0 2
23644: UNION
23645: ST_TO_ADDR
// end ;
23646: GO 23586
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 1
23654: RET
// export function hHackInvisible ; var i , j ; begin
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23660: LD_ADDR_VAR 0 2
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PPUSH
23675: CALL_OW 69
23679: PUSH
23680: FOR_IN
23681: IFFALSE 23705
// if IsSelected ( i ) then
23683: LD_VAR 0 2
23687: PPUSH
23688: CALL_OW 306
23692: IFFALSE 23703
// ComForceInvisible ( i ) ;
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 496
23703: GO 23680
23705: POP
23706: POP
// end ;
23707: LD_VAR 0 1
23711: RET
// export function hHackChangeYourSide ; begin
23712: LD_INT 0
23714: PPUSH
// if your_side = 8 then
23715: LD_OWVAR 2
23719: PUSH
23720: LD_INT 8
23722: EQUAL
23723: IFFALSE 23735
// your_side := 0 else
23725: LD_ADDR_OWVAR 2
23729: PUSH
23730: LD_INT 0
23732: ST_TO_ADDR
23733: GO 23749
// your_side := your_side + 1 ;
23735: LD_ADDR_OWVAR 2
23739: PUSH
23740: LD_OWVAR 2
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: ST_TO_ADDR
// end ;
23749: LD_VAR 0 1
23753: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23754: LD_INT 0
23756: PPUSH
23757: PPUSH
23758: PPUSH
// for i in all_units do
23759: LD_ADDR_VAR 0 2
23763: PUSH
23764: LD_OWVAR 3
23768: PUSH
23769: FOR_IN
23770: IFFALSE 23848
// if IsSelected ( i ) then
23772: LD_VAR 0 2
23776: PPUSH
23777: CALL_OW 306
23781: IFFALSE 23846
// begin j := GetSide ( i ) ;
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_VAR 0 2
23792: PPUSH
23793: CALL_OW 255
23797: ST_TO_ADDR
// if j = 8 then
23798: LD_VAR 0 3
23802: PUSH
23803: LD_INT 8
23805: EQUAL
23806: IFFALSE 23818
// j := 0 else
23808: LD_ADDR_VAR 0 3
23812: PUSH
23813: LD_INT 0
23815: ST_TO_ADDR
23816: GO 23832
// j := j + 1 ;
23818: LD_ADDR_VAR 0 3
23822: PUSH
23823: LD_VAR 0 3
23827: PUSH
23828: LD_INT 1
23830: PLUS
23831: ST_TO_ADDR
// SetSide ( i , j ) ;
23832: LD_VAR 0 2
23836: PPUSH
23837: LD_VAR 0 3
23841: PPUSH
23842: CALL_OW 235
// end ;
23846: GO 23769
23848: POP
23849: POP
// end ;
23850: LD_VAR 0 1
23854: RET
// export function hHackFog ; begin
23855: LD_INT 0
23857: PPUSH
// FogOff ( true ) ;
23858: LD_INT 1
23860: PPUSH
23861: CALL_OW 344
// end ;
23865: LD_VAR 0 1
23869: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23870: LD_INT 0
23872: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23873: LD_VAR 0 1
23877: PPUSH
23878: LD_VAR 0 2
23882: PPUSH
23883: LD_VAR 0 3
23887: PPUSH
23888: LD_INT 1
23890: PPUSH
23891: LD_INT 1
23893: PPUSH
23894: CALL_OW 483
// CenterOnXY ( x , y ) ;
23898: LD_VAR 0 2
23902: PPUSH
23903: LD_VAR 0 3
23907: PPUSH
23908: CALL_OW 84
// end ; end_of_file
23912: LD_VAR 0 4
23916: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23917: LD_INT 0
23919: PPUSH
23920: PPUSH
23921: PPUSH
23922: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 264
23932: PUSH
23933: LD_EXP 23
23937: EQUAL
23938: IFFALSE 24010
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23940: LD_INT 68
23942: PPUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 255
23952: PPUSH
23953: CALL_OW 321
23957: PUSH
23958: LD_INT 2
23960: EQUAL
23961: IFFALSE 23973
// eff := 70 else
23963: LD_ADDR_VAR 0 4
23967: PUSH
23968: LD_INT 70
23970: ST_TO_ADDR
23971: GO 23981
// eff := 30 ;
23973: LD_ADDR_VAR 0 4
23977: PUSH
23978: LD_INT 30
23980: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: CALL_OW 250
23990: PPUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL_OW 251
24000: PPUSH
24001: LD_VAR 0 4
24005: PPUSH
24006: CALL_OW 495
// end ; end ;
24010: LD_VAR 0 2
24014: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24015: LD_INT 0
24017: PPUSH
// end ;
24018: LD_VAR 0 4
24022: RET
// export function SOS_Command ( cmd ) ; begin
24023: LD_INT 0
24025: PPUSH
// end ;
24026: LD_VAR 0 2
24030: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24031: LD_INT 0
24033: PPUSH
// if cmd = 121 then
24034: LD_VAR 0 1
24038: PUSH
24039: LD_INT 121
24041: EQUAL
24042: IFFALSE 24044
// end ;
24044: LD_VAR 0 6
24048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24049: LD_INT 0
24051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24052: LD_VAR 0 1
24056: PUSH
24057: LD_INT 250
24059: EQUAL
24060: PUSH
24061: LD_VAR 0 2
24065: PPUSH
24066: CALL_OW 264
24070: PUSH
24071: LD_EXP 26
24075: EQUAL
24076: AND
24077: IFFALSE 24098
// MinerPlaceMine ( unit , x , y ) ;
24079: LD_VAR 0 2
24083: PPUSH
24084: LD_VAR 0 4
24088: PPUSH
24089: LD_VAR 0 5
24093: PPUSH
24094: CALL 26447 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24098: LD_VAR 0 1
24102: PUSH
24103: LD_INT 251
24105: EQUAL
24106: PUSH
24107: LD_VAR 0 2
24111: PPUSH
24112: CALL_OW 264
24116: PUSH
24117: LD_EXP 26
24121: EQUAL
24122: AND
24123: IFFALSE 24144
// MinerDetonateMine ( unit , x , y ) ;
24125: LD_VAR 0 2
24129: PPUSH
24130: LD_VAR 0 4
24134: PPUSH
24135: LD_VAR 0 5
24139: PPUSH
24140: CALL 26724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24144: LD_VAR 0 1
24148: PUSH
24149: LD_INT 252
24151: EQUAL
24152: PUSH
24153: LD_VAR 0 2
24157: PPUSH
24158: CALL_OW 264
24162: PUSH
24163: LD_EXP 26
24167: EQUAL
24168: AND
24169: IFFALSE 24190
// MinerCreateMinefield ( unit , x , y ) ;
24171: LD_VAR 0 2
24175: PPUSH
24176: LD_VAR 0 4
24180: PPUSH
24181: LD_VAR 0 5
24185: PPUSH
24186: CALL 27141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24190: LD_VAR 0 1
24194: PUSH
24195: LD_INT 253
24197: EQUAL
24198: PUSH
24199: LD_VAR 0 2
24203: PPUSH
24204: CALL_OW 257
24208: PUSH
24209: LD_INT 5
24211: EQUAL
24212: AND
24213: IFFALSE 24234
// ComBinocular ( unit , x , y ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_VAR 0 4
24224: PPUSH
24225: LD_VAR 0 5
24229: PPUSH
24230: CALL 27512 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24234: LD_VAR 0 1
24238: PUSH
24239: LD_INT 254
24241: EQUAL
24242: PUSH
24243: LD_VAR 0 2
24247: PPUSH
24248: CALL_OW 264
24252: PUSH
24253: LD_EXP 21
24257: EQUAL
24258: AND
24259: PUSH
24260: LD_VAR 0 3
24264: PPUSH
24265: CALL_OW 263
24269: PUSH
24270: LD_INT 3
24272: EQUAL
24273: AND
24274: IFFALSE 24290
// HackDestroyVehicle ( unit , selectedUnit ) ;
24276: LD_VAR 0 2
24280: PPUSH
24281: LD_VAR 0 3
24285: PPUSH
24286: CALL 25807 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24290: LD_VAR 0 1
24294: PUSH
24295: LD_INT 255
24297: EQUAL
24298: PUSH
24299: LD_VAR 0 2
24303: PPUSH
24304: CALL_OW 264
24308: PUSH
24309: LD_INT 14
24311: PUSH
24312: LD_INT 53
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: IN
24319: AND
24320: PUSH
24321: LD_VAR 0 4
24325: PPUSH
24326: LD_VAR 0 5
24330: PPUSH
24331: CALL_OW 488
24335: AND
24336: IFFALSE 24360
// CutTreeXYR ( unit , x , y , 12 ) ;
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 4
24347: PPUSH
24348: LD_VAR 0 5
24352: PPUSH
24353: LD_INT 12
24355: PPUSH
24356: CALL 24373 0 4
// end ;
24360: LD_VAR 0 6
24364: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24365: LD_INT 0
24367: PPUSH
// end ;
24368: LD_VAR 0 4
24372: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24373: LD_INT 0
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24384: LD_VAR 0 1
24388: NOT
24389: PUSH
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: CALL_OW 488
24404: NOT
24405: OR
24406: PUSH
24407: LD_VAR 0 4
24411: NOT
24412: OR
24413: IFFALSE 24417
// exit ;
24415: GO 24757
// list := [ ] ;
24417: LD_ADDR_VAR 0 13
24421: PUSH
24422: EMPTY
24423: ST_TO_ADDR
// if x - r < 0 then
24424: LD_VAR 0 2
24428: PUSH
24429: LD_VAR 0 4
24433: MINUS
24434: PUSH
24435: LD_INT 0
24437: LESS
24438: IFFALSE 24450
// min_x := 0 else
24440: LD_ADDR_VAR 0 7
24444: PUSH
24445: LD_INT 0
24447: ST_TO_ADDR
24448: GO 24466
// min_x := x - r ;
24450: LD_ADDR_VAR 0 7
24454: PUSH
24455: LD_VAR 0 2
24459: PUSH
24460: LD_VAR 0 4
24464: MINUS
24465: ST_TO_ADDR
// if y - r < 0 then
24466: LD_VAR 0 3
24470: PUSH
24471: LD_VAR 0 4
24475: MINUS
24476: PUSH
24477: LD_INT 0
24479: LESS
24480: IFFALSE 24492
// min_y := 0 else
24482: LD_ADDR_VAR 0 8
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
24490: GO 24508
// min_y := y - r ;
24492: LD_ADDR_VAR 0 8
24496: PUSH
24497: LD_VAR 0 3
24501: PUSH
24502: LD_VAR 0 4
24506: MINUS
24507: ST_TO_ADDR
// max_x := x + r ;
24508: LD_ADDR_VAR 0 9
24512: PUSH
24513: LD_VAR 0 2
24517: PUSH
24518: LD_VAR 0 4
24522: PLUS
24523: ST_TO_ADDR
// max_y := y + r ;
24524: LD_ADDR_VAR 0 10
24528: PUSH
24529: LD_VAR 0 3
24533: PUSH
24534: LD_VAR 0 4
24538: PLUS
24539: ST_TO_ADDR
// for _x = min_x to max_x do
24540: LD_ADDR_VAR 0 11
24544: PUSH
24545: DOUBLE
24546: LD_VAR 0 7
24550: DEC
24551: ST_TO_ADDR
24552: LD_VAR 0 9
24556: PUSH
24557: FOR_TO
24558: IFFALSE 24675
// for _y = min_y to max_y do
24560: LD_ADDR_VAR 0 12
24564: PUSH
24565: DOUBLE
24566: LD_VAR 0 8
24570: DEC
24571: ST_TO_ADDR
24572: LD_VAR 0 10
24576: PUSH
24577: FOR_TO
24578: IFFALSE 24671
// begin if not ValidHex ( _x , _y ) then
24580: LD_VAR 0 11
24584: PPUSH
24585: LD_VAR 0 12
24589: PPUSH
24590: CALL_OW 488
24594: NOT
24595: IFFALSE 24599
// continue ;
24597: GO 24577
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24599: LD_VAR 0 11
24603: PPUSH
24604: LD_VAR 0 12
24608: PPUSH
24609: CALL_OW 351
24613: PUSH
24614: LD_VAR 0 11
24618: PPUSH
24619: LD_VAR 0 12
24623: PPUSH
24624: CALL_OW 554
24628: AND
24629: IFFALSE 24669
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24631: LD_ADDR_VAR 0 13
24635: PUSH
24636: LD_VAR 0 13
24640: PPUSH
24641: LD_VAR 0 13
24645: PUSH
24646: LD_INT 1
24648: PLUS
24649: PPUSH
24650: LD_VAR 0 11
24654: PUSH
24655: LD_VAR 0 12
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 2
24668: ST_TO_ADDR
// end ;
24669: GO 24577
24671: POP
24672: POP
24673: GO 24557
24675: POP
24676: POP
// if not list then
24677: LD_VAR 0 13
24681: NOT
24682: IFFALSE 24686
// exit ;
24684: GO 24757
// for i in list do
24686: LD_ADDR_VAR 0 6
24690: PUSH
24691: LD_VAR 0 13
24695: PUSH
24696: FOR_IN
24697: IFFALSE 24755
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24699: LD_VAR 0 1
24703: PPUSH
24704: LD_STRING M
24706: PUSH
24707: LD_VAR 0 6
24711: PUSH
24712: LD_INT 1
24714: ARRAY
24715: PUSH
24716: LD_VAR 0 6
24720: PUSH
24721: LD_INT 2
24723: ARRAY
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: PPUSH
24749: CALL_OW 447
24753: GO 24696
24755: POP
24756: POP
// end ;
24757: LD_VAR 0 5
24761: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24762: LD_EXP 95
24766: NOT
24767: IFFALSE 24817
24769: GO 24771
24771: DISABLE
// begin initHack := true ;
24772: LD_ADDR_EXP 95
24776: PUSH
24777: LD_INT 1
24779: ST_TO_ADDR
// hackTanks := [ ] ;
24780: LD_ADDR_EXP 96
24784: PUSH
24785: EMPTY
24786: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24787: LD_ADDR_EXP 97
24791: PUSH
24792: EMPTY
24793: ST_TO_ADDR
// hackLimit := 3 ;
24794: LD_ADDR_EXP 98
24798: PUSH
24799: LD_INT 3
24801: ST_TO_ADDR
// hackDist := 12 ;
24802: LD_ADDR_EXP 99
24806: PUSH
24807: LD_INT 12
24809: ST_TO_ADDR
// hackCounter := [ ] ;
24810: LD_ADDR_EXP 100
24814: PUSH
24815: EMPTY
24816: ST_TO_ADDR
// end ;
24817: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24818: LD_EXP 95
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: LD_EXP 21
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: AND
24840: IFFALSE 25095
24842: GO 24844
24844: DISABLE
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
// begin enable ;
24849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24850: LD_ADDR_VAR 0 1
24854: PUSH
24855: LD_INT 34
24857: PUSH
24858: LD_EXP 21
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PPUSH
24867: CALL_OW 69
24871: PUSH
24872: FOR_IN
24873: IFFALSE 25093
// begin if not i in hackTanks then
24875: LD_VAR 0 1
24879: PUSH
24880: LD_EXP 96
24884: IN
24885: NOT
24886: IFFALSE 24969
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24888: LD_ADDR_EXP 96
24892: PUSH
24893: LD_EXP 96
24897: PPUSH
24898: LD_EXP 96
24902: PUSH
24903: LD_INT 1
24905: PLUS
24906: PPUSH
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 1
24916: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24917: LD_ADDR_EXP 97
24921: PUSH
24922: LD_EXP 97
24926: PPUSH
24927: LD_EXP 97
24931: PUSH
24932: LD_INT 1
24934: PLUS
24935: PPUSH
24936: EMPTY
24937: PPUSH
24938: CALL_OW 1
24942: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24943: LD_ADDR_EXP 100
24947: PUSH
24948: LD_EXP 100
24952: PPUSH
24953: LD_EXP 100
24957: PUSH
24958: LD_INT 1
24960: PLUS
24961: PPUSH
24962: EMPTY
24963: PPUSH
24964: CALL_OW 1
24968: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL_OW 302
24978: NOT
24979: IFFALSE 24992
// begin HackUnlinkAll ( i ) ;
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL 25098 0 1
// continue ;
24990: GO 24872
// end ; HackCheckCapturedStatus ( i ) ;
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL 25541 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: LD_INT 81
25008: PUSH
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 255
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 33
25025: PUSH
25026: LD_INT 3
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 91
25035: PUSH
25036: LD_VAR 0 1
25040: PUSH
25041: LD_EXP 99
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 50
25053: PUSH
25054: EMPTY
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: ST_TO_ADDR
// if not tmp then
25068: LD_VAR 0 2
25072: NOT
25073: IFFALSE 25077
// continue ;
25075: GO 24872
// HackLink ( i , tmp ) ;
25077: LD_VAR 0 1
25081: PPUSH
25082: LD_VAR 0 2
25086: PPUSH
25087: CALL 25234 0 2
// end ;
25091: GO 24872
25093: POP
25094: POP
// end ;
25095: PPOPN 2
25097: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25098: LD_INT 0
25100: PPUSH
25101: PPUSH
25102: PPUSH
// if not hack in hackTanks then
25103: LD_VAR 0 1
25107: PUSH
25108: LD_EXP 96
25112: IN
25113: NOT
25114: IFFALSE 25118
// exit ;
25116: GO 25229
// index := GetElementIndex ( hackTanks , hack ) ;
25118: LD_ADDR_VAR 0 4
25122: PUSH
25123: LD_EXP 96
25127: PPUSH
25128: LD_VAR 0 1
25132: PPUSH
25133: CALL 32663 0 2
25137: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25138: LD_EXP 97
25142: PUSH
25143: LD_VAR 0 4
25147: ARRAY
25148: IFFALSE 25229
// begin for i in hackTanksCaptured [ index ] do
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: LD_EXP 97
25159: PUSH
25160: LD_VAR 0 4
25164: ARRAY
25165: PUSH
25166: FOR_IN
25167: IFFALSE 25193
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25169: LD_VAR 0 3
25173: PUSH
25174: LD_INT 1
25176: ARRAY
25177: PPUSH
25178: LD_VAR 0 3
25182: PUSH
25183: LD_INT 2
25185: ARRAY
25186: PPUSH
25187: CALL_OW 235
25191: GO 25166
25193: POP
25194: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25195: LD_ADDR_EXP 97
25199: PUSH
25200: LD_EXP 97
25204: PPUSH
25205: LD_VAR 0 4
25209: PPUSH
25210: EMPTY
25211: PPUSH
25212: CALL_OW 1
25216: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25217: LD_VAR 0 1
25221: PPUSH
25222: LD_INT 0
25224: PPUSH
25225: CALL_OW 505
// end ; end ;
25229: LD_VAR 0 2
25233: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
// if not hack in hackTanks or not vehicles then
25239: LD_VAR 0 1
25243: PUSH
25244: LD_EXP 96
25248: IN
25249: NOT
25250: PUSH
25251: LD_VAR 0 2
25255: NOT
25256: OR
25257: IFFALSE 25261
// exit ;
25259: GO 25536
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: LD_VAR 0 1
25270: PPUSH
25271: LD_VAR 0 2
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: LD_INT 1
25281: PPUSH
25282: CALL 33313 0 4
25286: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25287: LD_ADDR_VAR 0 5
25291: PUSH
25292: LD_EXP 96
25296: PPUSH
25297: LD_VAR 0 1
25301: PPUSH
25302: CALL 32663 0 2
25306: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25307: LD_EXP 97
25311: PUSH
25312: LD_VAR 0 5
25316: ARRAY
25317: PUSH
25318: LD_EXP 98
25322: LESS
25323: IFFALSE 25512
// begin for i := 1 to vehicles do
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: DOUBLE
25331: LD_INT 1
25333: DEC
25334: ST_TO_ADDR
25335: LD_VAR 0 2
25339: PUSH
25340: FOR_TO
25341: IFFALSE 25510
// begin if hackTanksCaptured [ index ] = hackLimit then
25343: LD_EXP 97
25347: PUSH
25348: LD_VAR 0 5
25352: ARRAY
25353: PUSH
25354: LD_EXP 98
25358: EQUAL
25359: IFFALSE 25363
// break ;
25361: GO 25510
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25363: LD_ADDR_EXP 100
25367: PUSH
25368: LD_EXP 100
25372: PPUSH
25373: LD_VAR 0 5
25377: PPUSH
25378: LD_EXP 100
25382: PUSH
25383: LD_VAR 0 5
25387: ARRAY
25388: PUSH
25389: LD_INT 1
25391: PLUS
25392: PPUSH
25393: CALL_OW 1
25397: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25398: LD_ADDR_EXP 97
25402: PUSH
25403: LD_EXP 97
25407: PPUSH
25408: LD_VAR 0 5
25412: PUSH
25413: LD_EXP 97
25417: PUSH
25418: LD_VAR 0 5
25422: ARRAY
25423: PUSH
25424: LD_INT 1
25426: PLUS
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PPUSH
25432: LD_VAR 0 2
25436: PUSH
25437: LD_VAR 0 4
25441: ARRAY
25442: PUSH
25443: LD_VAR 0 2
25447: PUSH
25448: LD_VAR 0 4
25452: ARRAY
25453: PPUSH
25454: CALL_OW 255
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PPUSH
25463: CALL 32878 0 3
25467: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25468: LD_VAR 0 2
25472: PUSH
25473: LD_VAR 0 4
25477: ARRAY
25478: PPUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 255
25488: PPUSH
25489: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25493: LD_VAR 0 2
25497: PUSH
25498: LD_VAR 0 4
25502: ARRAY
25503: PPUSH
25504: CALL_OW 141
// end ;
25508: GO 25340
25510: POP
25511: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_EXP 97
25521: PUSH
25522: LD_VAR 0 5
25526: ARRAY
25527: PUSH
25528: LD_INT 0
25530: PLUS
25531: PPUSH
25532: CALL_OW 505
// end ;
25536: LD_VAR 0 3
25540: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25541: LD_INT 0
25543: PPUSH
25544: PPUSH
25545: PPUSH
25546: PPUSH
// if not hack in hackTanks then
25547: LD_VAR 0 1
25551: PUSH
25552: LD_EXP 96
25556: IN
25557: NOT
25558: IFFALSE 25562
// exit ;
25560: GO 25802
// index := GetElementIndex ( hackTanks , hack ) ;
25562: LD_ADDR_VAR 0 4
25566: PUSH
25567: LD_EXP 96
25571: PPUSH
25572: LD_VAR 0 1
25576: PPUSH
25577: CALL 32663 0 2
25581: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: DOUBLE
25588: LD_EXP 97
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: INC
25599: ST_TO_ADDR
25600: LD_INT 1
25602: PUSH
25603: FOR_DOWNTO
25604: IFFALSE 25776
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25606: LD_ADDR_VAR 0 5
25610: PUSH
25611: LD_EXP 97
25615: PUSH
25616: LD_VAR 0 4
25620: ARRAY
25621: PUSH
25622: LD_VAR 0 3
25626: ARRAY
25627: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25628: LD_VAR 0 5
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PPUSH
25637: CALL_OW 302
25641: NOT
25642: PUSH
25643: LD_VAR 0 5
25647: PUSH
25648: LD_INT 1
25650: ARRAY
25651: PPUSH
25652: CALL_OW 255
25656: PUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: CALL_OW 255
25666: NONEQUAL
25667: OR
25668: IFFALSE 25774
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25670: LD_VAR 0 5
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: PPUSH
25679: CALL_OW 305
25683: PUSH
25684: LD_VAR 0 5
25688: PUSH
25689: LD_INT 1
25691: ARRAY
25692: PPUSH
25693: CALL_OW 255
25697: PUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 255
25707: EQUAL
25708: AND
25709: IFFALSE 25733
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25711: LD_VAR 0 5
25715: PUSH
25716: LD_INT 1
25718: ARRAY
25719: PPUSH
25720: LD_VAR 0 5
25724: PUSH
25725: LD_INT 2
25727: ARRAY
25728: PPUSH
25729: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25733: LD_ADDR_EXP 97
25737: PUSH
25738: LD_EXP 97
25742: PPUSH
25743: LD_VAR 0 4
25747: PPUSH
25748: LD_EXP 97
25752: PUSH
25753: LD_VAR 0 4
25757: ARRAY
25758: PPUSH
25759: LD_VAR 0 3
25763: PPUSH
25764: CALL_OW 3
25768: PPUSH
25769: CALL_OW 1
25773: ST_TO_ADDR
// end ; end ;
25774: GO 25603
25776: POP
25777: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25778: LD_VAR 0 1
25782: PPUSH
25783: LD_EXP 97
25787: PUSH
25788: LD_VAR 0 4
25792: ARRAY
25793: PUSH
25794: LD_INT 0
25796: PLUS
25797: PPUSH
25798: CALL_OW 505
// end ;
25802: LD_VAR 0 2
25806: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
// if not hack in hackTanks then
25813: LD_VAR 0 1
25817: PUSH
25818: LD_EXP 96
25822: IN
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 25913
// index := GetElementIndex ( hackTanks , hack ) ;
25828: LD_ADDR_VAR 0 5
25832: PUSH
25833: LD_EXP 96
25837: PPUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL 32663 0 2
25847: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25848: LD_ADDR_VAR 0 4
25852: PUSH
25853: DOUBLE
25854: LD_INT 1
25856: DEC
25857: ST_TO_ADDR
25858: LD_EXP 97
25862: PUSH
25863: LD_VAR 0 5
25867: ARRAY
25868: PUSH
25869: FOR_TO
25870: IFFALSE 25911
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25872: LD_EXP 97
25876: PUSH
25877: LD_VAR 0 5
25881: ARRAY
25882: PUSH
25883: LD_VAR 0 4
25887: ARRAY
25888: PUSH
25889: LD_INT 1
25891: ARRAY
25892: PUSH
25893: LD_VAR 0 2
25897: EQUAL
25898: IFFALSE 25909
// KillUnit ( vehicle ) ;
25900: LD_VAR 0 2
25904: PPUSH
25905: CALL_OW 66
25909: GO 25869
25911: POP
25912: POP
// end ;
25913: LD_VAR 0 3
25917: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25918: LD_EXP 101
25922: NOT
25923: IFFALSE 25958
25925: GO 25927
25927: DISABLE
// begin initMiner := true ;
25928: LD_ADDR_EXP 101
25932: PUSH
25933: LD_INT 1
25935: ST_TO_ADDR
// minersList := [ ] ;
25936: LD_ADDR_EXP 102
25940: PUSH
25941: EMPTY
25942: ST_TO_ADDR
// minerMinesList := [ ] ;
25943: LD_ADDR_EXP 103
25947: PUSH
25948: EMPTY
25949: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25950: LD_ADDR_EXP 104
25954: PUSH
25955: LD_INT 5
25957: ST_TO_ADDR
// end ;
25958: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25959: LD_EXP 101
25963: PUSH
25964: LD_INT 34
25966: PUSH
25967: LD_EXP 26
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: AND
25981: IFFALSE 26444
25983: GO 25985
25985: DISABLE
25986: LD_INT 0
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
// begin enable ;
25992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_INT 34
26000: PUSH
26001: LD_EXP 26
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PPUSH
26010: CALL_OW 69
26014: PUSH
26015: FOR_IN
26016: IFFALSE 26088
// begin if not i in minersList then
26018: LD_VAR 0 1
26022: PUSH
26023: LD_EXP 102
26027: IN
26028: NOT
26029: IFFALSE 26086
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26031: LD_ADDR_EXP 102
26035: PUSH
26036: LD_EXP 102
26040: PPUSH
26041: LD_EXP 102
26045: PUSH
26046: LD_INT 1
26048: PLUS
26049: PPUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: CALL_OW 1
26059: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26060: LD_ADDR_EXP 103
26064: PUSH
26065: LD_EXP 103
26069: PPUSH
26070: LD_EXP 103
26074: PUSH
26075: LD_INT 1
26077: PLUS
26078: PPUSH
26079: EMPTY
26080: PPUSH
26081: CALL_OW 1
26085: ST_TO_ADDR
// end end ;
26086: GO 26015
26088: POP
26089: POP
// for i := minerMinesList downto 1 do
26090: LD_ADDR_VAR 0 1
26094: PUSH
26095: DOUBLE
26096: LD_EXP 103
26100: INC
26101: ST_TO_ADDR
26102: LD_INT 1
26104: PUSH
26105: FOR_DOWNTO
26106: IFFALSE 26442
// begin if IsLive ( minersList [ i ] ) then
26108: LD_EXP 102
26112: PUSH
26113: LD_VAR 0 1
26117: ARRAY
26118: PPUSH
26119: CALL_OW 300
26123: IFFALSE 26151
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26125: LD_EXP 102
26129: PUSH
26130: LD_VAR 0 1
26134: ARRAY
26135: PPUSH
26136: LD_EXP 103
26140: PUSH
26141: LD_VAR 0 1
26145: ARRAY
26146: PPUSH
26147: CALL_OW 505
// if not minerMinesList [ i ] then
26151: LD_EXP 103
26155: PUSH
26156: LD_VAR 0 1
26160: ARRAY
26161: NOT
26162: IFFALSE 26166
// continue ;
26164: GO 26105
// for j := minerMinesList [ i ] downto 1 do
26166: LD_ADDR_VAR 0 2
26170: PUSH
26171: DOUBLE
26172: LD_EXP 103
26176: PUSH
26177: LD_VAR 0 1
26181: ARRAY
26182: INC
26183: ST_TO_ADDR
26184: LD_INT 1
26186: PUSH
26187: FOR_DOWNTO
26188: IFFALSE 26438
// begin side := GetSide ( minersList [ i ] ) ;
26190: LD_ADDR_VAR 0 3
26194: PUSH
26195: LD_EXP 102
26199: PUSH
26200: LD_VAR 0 1
26204: ARRAY
26205: PPUSH
26206: CALL_OW 255
26210: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26211: LD_ADDR_VAR 0 4
26215: PUSH
26216: LD_EXP 103
26220: PUSH
26221: LD_VAR 0 1
26225: ARRAY
26226: PUSH
26227: LD_VAR 0 2
26231: ARRAY
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PPUSH
26237: LD_EXP 103
26241: PUSH
26242: LD_VAR 0 1
26246: ARRAY
26247: PUSH
26248: LD_VAR 0 2
26252: ARRAY
26253: PUSH
26254: LD_INT 2
26256: ARRAY
26257: PPUSH
26258: CALL_OW 428
26262: ST_TO_ADDR
// if not tmp then
26263: LD_VAR 0 4
26267: NOT
26268: IFFALSE 26272
// continue ;
26270: GO 26187
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26272: LD_VAR 0 4
26276: PUSH
26277: LD_INT 81
26279: PUSH
26280: LD_VAR 0 3
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PPUSH
26289: CALL_OW 69
26293: IN
26294: PUSH
26295: LD_EXP 103
26299: PUSH
26300: LD_VAR 0 1
26304: ARRAY
26305: PUSH
26306: LD_VAR 0 2
26310: ARRAY
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: PPUSH
26316: LD_EXP 103
26320: PUSH
26321: LD_VAR 0 1
26325: ARRAY
26326: PUSH
26327: LD_VAR 0 2
26331: ARRAY
26332: PUSH
26333: LD_INT 2
26335: ARRAY
26336: PPUSH
26337: CALL_OW 458
26341: AND
26342: IFFALSE 26436
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26344: LD_EXP 103
26348: PUSH
26349: LD_VAR 0 1
26353: ARRAY
26354: PUSH
26355: LD_VAR 0 2
26359: ARRAY
26360: PUSH
26361: LD_INT 1
26363: ARRAY
26364: PPUSH
26365: LD_EXP 103
26369: PUSH
26370: LD_VAR 0 1
26374: ARRAY
26375: PUSH
26376: LD_VAR 0 2
26380: ARRAY
26381: PUSH
26382: LD_INT 2
26384: ARRAY
26385: PPUSH
26386: LD_VAR 0 3
26390: PPUSH
26391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26395: LD_ADDR_EXP 103
26399: PUSH
26400: LD_EXP 103
26404: PPUSH
26405: LD_VAR 0 1
26409: PPUSH
26410: LD_EXP 103
26414: PUSH
26415: LD_VAR 0 1
26419: ARRAY
26420: PPUSH
26421: LD_VAR 0 2
26425: PPUSH
26426: CALL_OW 3
26430: PPUSH
26431: CALL_OW 1
26435: ST_TO_ADDR
// end ; end ;
26436: GO 26187
26438: POP
26439: POP
// end ;
26440: GO 26105
26442: POP
26443: POP
// end ;
26444: PPOPN 4
26446: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26447: LD_INT 0
26449: PPUSH
26450: PPUSH
// result := false ;
26451: LD_ADDR_VAR 0 4
26455: PUSH
26456: LD_INT 0
26458: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 264
26468: PUSH
26469: LD_EXP 26
26473: EQUAL
26474: NOT
26475: IFFALSE 26479
// exit ;
26477: GO 26719
// index := GetElementIndex ( minersList , unit ) ;
26479: LD_ADDR_VAR 0 5
26483: PUSH
26484: LD_EXP 102
26488: PPUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL 32663 0 2
26498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26499: LD_EXP 103
26503: PUSH
26504: LD_VAR 0 5
26508: ARRAY
26509: PUSH
26510: LD_EXP 104
26514: GREATEREQUAL
26515: IFFALSE 26519
// exit ;
26517: GO 26719
// ComMoveXY ( unit , x , y ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_VAR 0 2
26528: PPUSH
26529: LD_VAR 0 3
26533: PPUSH
26534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26538: LD_INT 35
26540: PPUSH
26541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26545: LD_VAR 0 1
26549: PPUSH
26550: LD_VAR 0 2
26554: PPUSH
26555: LD_VAR 0 3
26559: PPUSH
26560: CALL 63030 0 3
26564: NOT
26565: PUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 314
26575: AND
26576: IFFALSE 26580
// exit ;
26578: GO 26719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: CALL_OW 428
26594: PUSH
26595: LD_VAR 0 1
26599: EQUAL
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 314
26610: NOT
26611: AND
26612: IFFALSE 26538
// PlaySoundXY ( x , y , PlantMine ) ;
26614: LD_VAR 0 2
26618: PPUSH
26619: LD_VAR 0 3
26623: PPUSH
26624: LD_STRING PlantMine
26626: PPUSH
26627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 3
26640: PPUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 255
26650: PPUSH
26651: LD_INT 0
26653: PPUSH
26654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26658: LD_ADDR_EXP 103
26662: PUSH
26663: LD_EXP 103
26667: PPUSH
26668: LD_VAR 0 5
26672: PUSH
26673: LD_EXP 103
26677: PUSH
26678: LD_VAR 0 5
26682: ARRAY
26683: PUSH
26684: LD_INT 1
26686: PLUS
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PPUSH
26692: LD_VAR 0 2
26696: PUSH
26697: LD_VAR 0 3
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PPUSH
26706: CALL 32878 0 3
26710: ST_TO_ADDR
// result := true ;
26711: LD_ADDR_VAR 0 4
26715: PUSH
26716: LD_INT 1
26718: ST_TO_ADDR
// end ;
26719: LD_VAR 0 4
26723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
26728: PPUSH
// if not unit in minersList then
26729: LD_VAR 0 1
26733: PUSH
26734: LD_EXP 102
26738: IN
26739: NOT
26740: IFFALSE 26744
// exit ;
26742: GO 27136
// index := GetElementIndex ( minersList , unit ) ;
26744: LD_ADDR_VAR 0 6
26748: PUSH
26749: LD_EXP 102
26753: PPUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL 32663 0 2
26763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26764: LD_ADDR_VAR 0 5
26768: PUSH
26769: DOUBLE
26770: LD_EXP 103
26774: PUSH
26775: LD_VAR 0 6
26779: ARRAY
26780: INC
26781: ST_TO_ADDR
26782: LD_INT 1
26784: PUSH
26785: FOR_DOWNTO
26786: IFFALSE 26947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26788: LD_EXP 103
26792: PUSH
26793: LD_VAR 0 6
26797: ARRAY
26798: PUSH
26799: LD_VAR 0 5
26803: ARRAY
26804: PUSH
26805: LD_INT 1
26807: ARRAY
26808: PUSH
26809: LD_VAR 0 2
26813: EQUAL
26814: PUSH
26815: LD_EXP 103
26819: PUSH
26820: LD_VAR 0 6
26824: ARRAY
26825: PUSH
26826: LD_VAR 0 5
26830: ARRAY
26831: PUSH
26832: LD_INT 2
26834: ARRAY
26835: PUSH
26836: LD_VAR 0 3
26840: EQUAL
26841: AND
26842: IFFALSE 26945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26844: LD_EXP 103
26848: PUSH
26849: LD_VAR 0 6
26853: ARRAY
26854: PUSH
26855: LD_VAR 0 5
26859: ARRAY
26860: PUSH
26861: LD_INT 1
26863: ARRAY
26864: PPUSH
26865: LD_EXP 103
26869: PUSH
26870: LD_VAR 0 6
26874: ARRAY
26875: PUSH
26876: LD_VAR 0 5
26880: ARRAY
26881: PUSH
26882: LD_INT 2
26884: ARRAY
26885: PPUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: CALL_OW 255
26895: PPUSH
26896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26900: LD_ADDR_EXP 103
26904: PUSH
26905: LD_EXP 103
26909: PPUSH
26910: LD_VAR 0 6
26914: PPUSH
26915: LD_EXP 103
26919: PUSH
26920: LD_VAR 0 6
26924: ARRAY
26925: PPUSH
26926: LD_VAR 0 5
26930: PPUSH
26931: CALL_OW 3
26935: PPUSH
26936: CALL_OW 1
26940: ST_TO_ADDR
// exit ;
26941: POP
26942: POP
26943: GO 27136
// end ; end ;
26945: GO 26785
26947: POP
26948: POP
// for i := minerMinesList [ index ] downto 1 do
26949: LD_ADDR_VAR 0 5
26953: PUSH
26954: DOUBLE
26955: LD_EXP 103
26959: PUSH
26960: LD_VAR 0 6
26964: ARRAY
26965: INC
26966: ST_TO_ADDR
26967: LD_INT 1
26969: PUSH
26970: FOR_DOWNTO
26971: IFFALSE 27134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26973: LD_EXP 103
26977: PUSH
26978: LD_VAR 0 6
26982: ARRAY
26983: PUSH
26984: LD_VAR 0 5
26988: ARRAY
26989: PUSH
26990: LD_INT 1
26992: ARRAY
26993: PPUSH
26994: LD_EXP 103
26998: PUSH
26999: LD_VAR 0 6
27003: ARRAY
27004: PUSH
27005: LD_VAR 0 5
27009: ARRAY
27010: PUSH
27011: LD_INT 2
27013: ARRAY
27014: PPUSH
27015: LD_VAR 0 2
27019: PPUSH
27020: LD_VAR 0 3
27024: PPUSH
27025: CALL_OW 298
27029: PUSH
27030: LD_INT 6
27032: LESS
27033: IFFALSE 27132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27035: LD_EXP 103
27039: PUSH
27040: LD_VAR 0 6
27044: ARRAY
27045: PUSH
27046: LD_VAR 0 5
27050: ARRAY
27051: PUSH
27052: LD_INT 1
27054: ARRAY
27055: PPUSH
27056: LD_EXP 103
27060: PUSH
27061: LD_VAR 0 6
27065: ARRAY
27066: PUSH
27067: LD_VAR 0 5
27071: ARRAY
27072: PUSH
27073: LD_INT 2
27075: ARRAY
27076: PPUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 255
27086: PPUSH
27087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27091: LD_ADDR_EXP 103
27095: PUSH
27096: LD_EXP 103
27100: PPUSH
27101: LD_VAR 0 6
27105: PPUSH
27106: LD_EXP 103
27110: PUSH
27111: LD_VAR 0 6
27115: ARRAY
27116: PPUSH
27117: LD_VAR 0 5
27121: PPUSH
27122: CALL_OW 3
27126: PPUSH
27127: CALL_OW 1
27131: ST_TO_ADDR
// end ; end ;
27132: GO 26970
27134: POP
27135: POP
// end ;
27136: LD_VAR 0 4
27140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27152: LD_VAR 0 1
27156: PPUSH
27157: CALL_OW 264
27161: PUSH
27162: LD_EXP 26
27166: EQUAL
27167: NOT
27168: PUSH
27169: LD_VAR 0 1
27173: PUSH
27174: LD_EXP 102
27178: IN
27179: NOT
27180: OR
27181: IFFALSE 27185
// exit ;
27183: GO 27507
// index := GetElementIndex ( minersList , unit ) ;
27185: LD_ADDR_VAR 0 6
27189: PUSH
27190: LD_EXP 102
27194: PPUSH
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL 32663 0 2
27204: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27205: LD_ADDR_VAR 0 8
27209: PUSH
27210: LD_EXP 104
27214: PUSH
27215: LD_EXP 103
27219: PUSH
27220: LD_VAR 0 6
27224: ARRAY
27225: MINUS
27226: ST_TO_ADDR
// if not minesFreeAmount then
27227: LD_VAR 0 8
27231: NOT
27232: IFFALSE 27236
// exit ;
27234: GO 27507
// tmp := [ ] ;
27236: LD_ADDR_VAR 0 7
27240: PUSH
27241: EMPTY
27242: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27243: LD_ADDR_VAR 0 5
27247: PUSH
27248: DOUBLE
27249: LD_INT 1
27251: DEC
27252: ST_TO_ADDR
27253: LD_VAR 0 8
27257: PUSH
27258: FOR_TO
27259: IFFALSE 27454
// begin _d := rand ( 0 , 5 ) ;
27261: LD_ADDR_VAR 0 11
27265: PUSH
27266: LD_INT 0
27268: PPUSH
27269: LD_INT 5
27271: PPUSH
27272: CALL_OW 12
27276: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27277: LD_ADDR_VAR 0 12
27281: PUSH
27282: LD_INT 2
27284: PPUSH
27285: LD_INT 6
27287: PPUSH
27288: CALL_OW 12
27292: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27293: LD_ADDR_VAR 0 9
27297: PUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 11
27307: PPUSH
27308: LD_VAR 0 12
27312: PPUSH
27313: CALL_OW 272
27317: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27318: LD_ADDR_VAR 0 10
27322: PUSH
27323: LD_VAR 0 3
27327: PPUSH
27328: LD_VAR 0 11
27332: PPUSH
27333: LD_VAR 0 12
27337: PPUSH
27338: CALL_OW 273
27342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27343: LD_VAR 0 9
27347: PPUSH
27348: LD_VAR 0 10
27352: PPUSH
27353: CALL_OW 488
27357: PUSH
27358: LD_VAR 0 9
27362: PUSH
27363: LD_VAR 0 10
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_VAR 0 7
27376: IN
27377: NOT
27378: AND
27379: PUSH
27380: LD_VAR 0 9
27384: PPUSH
27385: LD_VAR 0 10
27389: PPUSH
27390: CALL_OW 458
27394: NOT
27395: AND
27396: IFFALSE 27438
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27398: LD_ADDR_VAR 0 7
27402: PUSH
27403: LD_VAR 0 7
27407: PPUSH
27408: LD_VAR 0 7
27412: PUSH
27413: LD_INT 1
27415: PLUS
27416: PPUSH
27417: LD_VAR 0 9
27421: PUSH
27422: LD_VAR 0 10
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PPUSH
27431: CALL_OW 1
27435: ST_TO_ADDR
27436: GO 27452
// i := i - 1 ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_VAR 0 5
27447: PUSH
27448: LD_INT 1
27450: MINUS
27451: ST_TO_ADDR
// end ;
27452: GO 27258
27454: POP
27455: POP
// for i in tmp do
27456: LD_ADDR_VAR 0 5
27460: PUSH
27461: LD_VAR 0 7
27465: PUSH
27466: FOR_IN
27467: IFFALSE 27505
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27469: LD_VAR 0 1
27473: PPUSH
27474: LD_VAR 0 5
27478: PUSH
27479: LD_INT 1
27481: ARRAY
27482: PPUSH
27483: LD_VAR 0 5
27487: PUSH
27488: LD_INT 2
27490: ARRAY
27491: PPUSH
27492: CALL 26447 0 3
27496: NOT
27497: IFFALSE 27503
// exit ;
27499: POP
27500: POP
27501: GO 27507
27503: GO 27466
27505: POP
27506: POP
// end ;
27507: LD_VAR 0 4
27511: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27512: LD_INT 0
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
// if not GetClass ( unit ) = class_sniper then
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 257
27530: PUSH
27531: LD_INT 5
27533: EQUAL
27534: NOT
27535: IFFALSE 27539
// exit ;
27537: GO 27927
// dist := 8 ;
27539: LD_ADDR_VAR 0 5
27543: PUSH
27544: LD_INT 8
27546: ST_TO_ADDR
// viewRange := 12 ;
27547: LD_ADDR_VAR 0 7
27551: PUSH
27552: LD_INT 12
27554: ST_TO_ADDR
// side := GetSide ( unit ) ;
27555: LD_ADDR_VAR 0 6
27559: PUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 255
27569: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27570: LD_INT 61
27572: PPUSH
27573: LD_VAR 0 6
27577: PPUSH
27578: CALL_OW 321
27582: PUSH
27583: LD_INT 2
27585: EQUAL
27586: IFFALSE 27596
// viewRange := 16 ;
27588: LD_ADDR_VAR 0 7
27592: PUSH
27593: LD_INT 16
27595: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27596: LD_VAR 0 1
27600: PPUSH
27601: LD_VAR 0 2
27605: PPUSH
27606: LD_VAR 0 3
27610: PPUSH
27611: CALL_OW 297
27615: PUSH
27616: LD_VAR 0 5
27620: GREATER
27621: IFFALSE 27700
// begin ComMoveXY ( unit , x , y ) ;
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_VAR 0 2
27632: PPUSH
27633: LD_VAR 0 3
27637: PPUSH
27638: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27642: LD_INT 35
27644: PPUSH
27645: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27649: LD_VAR 0 1
27653: PPUSH
27654: LD_VAR 0 2
27658: PPUSH
27659: LD_VAR 0 3
27663: PPUSH
27664: CALL 63030 0 3
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 27927
// until GetDistUnitXY ( unit , x , y ) < dist ;
27673: LD_VAR 0 1
27677: PPUSH
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_VAR 0 3
27687: PPUSH
27688: CALL_OW 297
27692: PUSH
27693: LD_VAR 0 5
27697: LESS
27698: IFFALSE 27642
// end ; ComTurnXY ( unit , x , y ) ;
27700: LD_VAR 0 1
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 3
27714: PPUSH
27715: CALL_OW 118
// wait ( 5 ) ;
27719: LD_INT 5
27721: PPUSH
27722: CALL_OW 67
// _d := GetDir ( unit ) ;
27726: LD_ADDR_VAR 0 10
27730: PUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: CALL_OW 254
27740: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27741: LD_ADDR_VAR 0 8
27745: PUSH
27746: LD_VAR 0 1
27750: PPUSH
27751: CALL_OW 250
27755: PPUSH
27756: LD_VAR 0 10
27760: PPUSH
27761: LD_VAR 0 5
27765: PPUSH
27766: CALL_OW 272
27770: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27771: LD_ADDR_VAR 0 9
27775: PUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 251
27785: PPUSH
27786: LD_VAR 0 10
27790: PPUSH
27791: LD_VAR 0 5
27795: PPUSH
27796: CALL_OW 273
27800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27801: LD_VAR 0 8
27805: PPUSH
27806: LD_VAR 0 9
27810: PPUSH
27811: CALL_OW 488
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 27927
// ComAnimCustom ( unit , 1 ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: LD_INT 1
27827: PPUSH
27828: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27832: LD_VAR 0 8
27836: PPUSH
27837: LD_VAR 0 9
27841: PPUSH
27842: LD_VAR 0 6
27846: PPUSH
27847: LD_VAR 0 7
27851: PPUSH
27852: CALL_OW 330
// repeat wait ( 1 ) ;
27856: LD_INT 1
27858: PPUSH
27859: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL_OW 316
27872: PUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 314
27882: OR
27883: PUSH
27884: LD_VAR 0 1
27888: PPUSH
27889: CALL_OW 302
27893: NOT
27894: OR
27895: PUSH
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 301
27905: OR
27906: IFFALSE 27856
// RemoveSeeing ( _x , _y , side ) ;
27908: LD_VAR 0 8
27912: PPUSH
27913: LD_VAR 0 9
27917: PPUSH
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 331
// end ; end_of_file
27927: LD_VAR 0 4
27931: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27932: LD_INT 0
27934: PPUSH
27935: PPUSH
// if exist_mode then
27936: LD_VAR 0 2
27940: IFFALSE 27965
// unit := CreateCharacter ( prefix & ident ) else
27942: LD_ADDR_VAR 0 5
27946: PUSH
27947: LD_VAR 0 3
27951: PUSH
27952: LD_VAR 0 1
27956: STR
27957: PPUSH
27958: CALL_OW 34
27962: ST_TO_ADDR
27963: GO 27980
// unit := NewCharacter ( ident ) ;
27965: LD_ADDR_VAR 0 5
27969: PUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 25
27979: ST_TO_ADDR
// result := unit ;
27980: LD_ADDR_VAR 0 4
27984: PUSH
27985: LD_VAR 0 5
27989: ST_TO_ADDR
// end ;
27990: LD_VAR 0 4
27994: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
// if not side or not nation then
27999: LD_VAR 0 1
28003: NOT
28004: PUSH
28005: LD_VAR 0 2
28009: NOT
28010: OR
28011: IFFALSE 28015
// exit ;
28013: GO 28779
// case nation of nation_american :
28015: LD_VAR 0 2
28019: PUSH
28020: LD_INT 1
28022: DOUBLE
28023: EQUAL
28024: IFTRUE 28028
28026: GO 28242
28028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28029: LD_ADDR_VAR 0 4
28033: PUSH
28034: LD_INT 35
28036: PUSH
28037: LD_INT 45
28039: PUSH
28040: LD_INT 46
28042: PUSH
28043: LD_INT 47
28045: PUSH
28046: LD_INT 82
28048: PUSH
28049: LD_INT 83
28051: PUSH
28052: LD_INT 84
28054: PUSH
28055: LD_INT 85
28057: PUSH
28058: LD_INT 86
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: LD_INT 15
28072: PUSH
28073: LD_INT 16
28075: PUSH
28076: LD_INT 7
28078: PUSH
28079: LD_INT 12
28081: PUSH
28082: LD_INT 13
28084: PUSH
28085: LD_INT 10
28087: PUSH
28088: LD_INT 14
28090: PUSH
28091: LD_INT 20
28093: PUSH
28094: LD_INT 21
28096: PUSH
28097: LD_INT 22
28099: PUSH
28100: LD_INT 25
28102: PUSH
28103: LD_INT 32
28105: PUSH
28106: LD_INT 27
28108: PUSH
28109: LD_INT 36
28111: PUSH
28112: LD_INT 69
28114: PUSH
28115: LD_INT 39
28117: PUSH
28118: LD_INT 34
28120: PUSH
28121: LD_INT 40
28123: PUSH
28124: LD_INT 48
28126: PUSH
28127: LD_INT 49
28129: PUSH
28130: LD_INT 50
28132: PUSH
28133: LD_INT 51
28135: PUSH
28136: LD_INT 52
28138: PUSH
28139: LD_INT 53
28141: PUSH
28142: LD_INT 54
28144: PUSH
28145: LD_INT 55
28147: PUSH
28148: LD_INT 56
28150: PUSH
28151: LD_INT 57
28153: PUSH
28154: LD_INT 58
28156: PUSH
28157: LD_INT 59
28159: PUSH
28160: LD_INT 60
28162: PUSH
28163: LD_INT 61
28165: PUSH
28166: LD_INT 62
28168: PUSH
28169: LD_INT 80
28171: PUSH
28172: LD_INT 82
28174: PUSH
28175: LD_INT 83
28177: PUSH
28178: LD_INT 84
28180: PUSH
28181: LD_INT 85
28183: PUSH
28184: LD_INT 86
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
28240: GO 28703
28242: LD_INT 2
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28472
28250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28251: LD_ADDR_VAR 0 4
28255: PUSH
28256: LD_INT 35
28258: PUSH
28259: LD_INT 45
28261: PUSH
28262: LD_INT 46
28264: PUSH
28265: LD_INT 47
28267: PUSH
28268: LD_INT 82
28270: PUSH
28271: LD_INT 83
28273: PUSH
28274: LD_INT 84
28276: PUSH
28277: LD_INT 85
28279: PUSH
28280: LD_INT 87
28282: PUSH
28283: LD_INT 70
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 11
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: LD_INT 4
28297: PUSH
28298: LD_INT 5
28300: PUSH
28301: LD_INT 6
28303: PUSH
28304: LD_INT 15
28306: PUSH
28307: LD_INT 18
28309: PUSH
28310: LD_INT 7
28312: PUSH
28313: LD_INT 17
28315: PUSH
28316: LD_INT 8
28318: PUSH
28319: LD_INT 20
28321: PUSH
28322: LD_INT 21
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_INT 72
28330: PUSH
28331: LD_INT 26
28333: PUSH
28334: LD_INT 69
28336: PUSH
28337: LD_INT 39
28339: PUSH
28340: LD_INT 40
28342: PUSH
28343: LD_INT 41
28345: PUSH
28346: LD_INT 42
28348: PUSH
28349: LD_INT 43
28351: PUSH
28352: LD_INT 48
28354: PUSH
28355: LD_INT 49
28357: PUSH
28358: LD_INT 50
28360: PUSH
28361: LD_INT 51
28363: PUSH
28364: LD_INT 52
28366: PUSH
28367: LD_INT 53
28369: PUSH
28370: LD_INT 54
28372: PUSH
28373: LD_INT 55
28375: PUSH
28376: LD_INT 56
28378: PUSH
28379: LD_INT 60
28381: PUSH
28382: LD_INT 61
28384: PUSH
28385: LD_INT 62
28387: PUSH
28388: LD_INT 66
28390: PUSH
28391: LD_INT 67
28393: PUSH
28394: LD_INT 68
28396: PUSH
28397: LD_INT 81
28399: PUSH
28400: LD_INT 82
28402: PUSH
28403: LD_INT 83
28405: PUSH
28406: LD_INT 84
28408: PUSH
28409: LD_INT 85
28411: PUSH
28412: LD_INT 87
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
28470: GO 28703
28472: LD_INT 3
28474: DOUBLE
28475: EQUAL
28476: IFTRUE 28480
28478: GO 28702
28480: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28481: LD_ADDR_VAR 0 4
28485: PUSH
28486: LD_INT 46
28488: PUSH
28489: LD_INT 47
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 2
28497: PUSH
28498: LD_INT 82
28500: PUSH
28501: LD_INT 83
28503: PUSH
28504: LD_INT 84
28506: PUSH
28507: LD_INT 85
28509: PUSH
28510: LD_INT 86
28512: PUSH
28513: LD_INT 11
28515: PUSH
28516: LD_INT 9
28518: PUSH
28519: LD_INT 20
28521: PUSH
28522: LD_INT 19
28524: PUSH
28525: LD_INT 21
28527: PUSH
28528: LD_INT 24
28530: PUSH
28531: LD_INT 22
28533: PUSH
28534: LD_INT 25
28536: PUSH
28537: LD_INT 28
28539: PUSH
28540: LD_INT 29
28542: PUSH
28543: LD_INT 30
28545: PUSH
28546: LD_INT 31
28548: PUSH
28549: LD_INT 37
28551: PUSH
28552: LD_INT 38
28554: PUSH
28555: LD_INT 32
28557: PUSH
28558: LD_INT 27
28560: PUSH
28561: LD_INT 33
28563: PUSH
28564: LD_INT 69
28566: PUSH
28567: LD_INT 39
28569: PUSH
28570: LD_INT 34
28572: PUSH
28573: LD_INT 40
28575: PUSH
28576: LD_INT 71
28578: PUSH
28579: LD_INT 23
28581: PUSH
28582: LD_INT 44
28584: PUSH
28585: LD_INT 48
28587: PUSH
28588: LD_INT 49
28590: PUSH
28591: LD_INT 50
28593: PUSH
28594: LD_INT 51
28596: PUSH
28597: LD_INT 52
28599: PUSH
28600: LD_INT 53
28602: PUSH
28603: LD_INT 54
28605: PUSH
28606: LD_INT 55
28608: PUSH
28609: LD_INT 56
28611: PUSH
28612: LD_INT 57
28614: PUSH
28615: LD_INT 58
28617: PUSH
28618: LD_INT 59
28620: PUSH
28621: LD_INT 63
28623: PUSH
28624: LD_INT 64
28626: PUSH
28627: LD_INT 65
28629: PUSH
28630: LD_INT 82
28632: PUSH
28633: LD_INT 83
28635: PUSH
28636: LD_INT 84
28638: PUSH
28639: LD_INT 85
28641: PUSH
28642: LD_INT 86
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
28700: GO 28703
28702: POP
// if state > - 1 and state < 3 then
28703: LD_VAR 0 3
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: GREATER
28712: PUSH
28713: LD_VAR 0 3
28717: PUSH
28718: LD_INT 3
28720: LESS
28721: AND
28722: IFFALSE 28779
// for i in result do
28724: LD_ADDR_VAR 0 5
28728: PUSH
28729: LD_VAR 0 4
28733: PUSH
28734: FOR_IN
28735: IFFALSE 28777
// if GetTech ( i , side ) <> state then
28737: LD_VAR 0 5
28741: PPUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 321
28751: PUSH
28752: LD_VAR 0 3
28756: NONEQUAL
28757: IFFALSE 28775
// result := result diff i ;
28759: LD_ADDR_VAR 0 4
28763: PUSH
28764: LD_VAR 0 4
28768: PUSH
28769: LD_VAR 0 5
28773: DIFF
28774: ST_TO_ADDR
28775: GO 28734
28777: POP
28778: POP
// end ;
28779: LD_VAR 0 4
28783: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
28788: PPUSH
// result := true ;
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_INT 1
28796: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28797: LD_ADDR_VAR 0 5
28801: PUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: CALL_OW 480
28811: ST_TO_ADDR
// if not tmp then
28812: LD_VAR 0 5
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 28870
// for i in tmp do
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: LD_VAR 0 5
28830: PUSH
28831: FOR_IN
28832: IFFALSE 28868
// if GetTech ( i , side ) <> state_researched then
28834: LD_VAR 0 4
28838: PPUSH
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 321
28848: PUSH
28849: LD_INT 2
28851: NONEQUAL
28852: IFFALSE 28866
// begin result := false ;
28854: LD_ADDR_VAR 0 3
28858: PUSH
28859: LD_INT 0
28861: ST_TO_ADDR
// exit ;
28862: POP
28863: POP
28864: GO 28870
// end ;
28866: GO 28831
28868: POP
28869: POP
// end ;
28870: LD_VAR 0 3
28874: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28875: LD_INT 0
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
28888: PPUSH
28889: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28890: LD_VAR 0 1
28894: NOT
28895: PUSH
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 257
28905: PUSH
28906: LD_INT 9
28908: NONEQUAL
28909: OR
28910: IFFALSE 28914
// exit ;
28912: GO 29487
// side := GetSide ( unit ) ;
28914: LD_ADDR_VAR 0 9
28918: PUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 255
28928: ST_TO_ADDR
// tech_space := tech_spacanom ;
28929: LD_ADDR_VAR 0 12
28933: PUSH
28934: LD_INT 29
28936: ST_TO_ADDR
// tech_time := tech_taurad ;
28937: LD_ADDR_VAR 0 13
28941: PUSH
28942: LD_INT 28
28944: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28945: LD_ADDR_VAR 0 11
28949: PUSH
28950: LD_VAR 0 1
28954: PPUSH
28955: CALL_OW 310
28959: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28960: LD_VAR 0 11
28964: PPUSH
28965: CALL_OW 247
28969: PUSH
28970: LD_INT 2
28972: EQUAL
28973: IFFALSE 28977
// exit ;
28975: GO 29487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28977: LD_ADDR_VAR 0 8
28981: PUSH
28982: LD_INT 81
28984: PUSH
28985: LD_VAR 0 9
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 3
28996: PUSH
28997: LD_INT 21
28999: PUSH
29000: LD_INT 3
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: ST_TO_ADDR
// if not tmp then
29020: LD_VAR 0 8
29024: NOT
29025: IFFALSE 29029
// exit ;
29027: GO 29487
// if in_unit then
29029: LD_VAR 0 11
29033: IFFALSE 29057
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 8
29044: PPUSH
29045: LD_VAR 0 11
29049: PPUSH
29050: CALL_OW 74
29054: ST_TO_ADDR
29055: GO 29077
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29057: LD_ADDR_VAR 0 10
29061: PUSH
29062: LD_VAR 0 8
29066: PPUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: CALL_OW 74
29076: ST_TO_ADDR
// if not enemy then
29077: LD_VAR 0 10
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29487
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29086: LD_VAR 0 11
29090: PUSH
29091: LD_VAR 0 11
29095: PPUSH
29096: LD_VAR 0 10
29100: PPUSH
29101: CALL_OW 296
29105: PUSH
29106: LD_INT 13
29108: GREATER
29109: AND
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: LD_VAR 0 10
29120: PPUSH
29121: CALL_OW 296
29125: PUSH
29126: LD_INT 12
29128: GREATER
29129: OR
29130: IFFALSE 29134
// exit ;
29132: GO 29487
// missile := [ 1 ] ;
29134: LD_ADDR_VAR 0 14
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29145: LD_VAR 0 9
29149: PPUSH
29150: LD_VAR 0 12
29154: PPUSH
29155: CALL_OW 325
29159: IFFALSE 29188
// missile := Insert ( missile , missile + 1 , 2 ) ;
29161: LD_ADDR_VAR 0 14
29165: PUSH
29166: LD_VAR 0 14
29170: PPUSH
29171: LD_VAR 0 14
29175: PUSH
29176: LD_INT 1
29178: PLUS
29179: PPUSH
29180: LD_INT 2
29182: PPUSH
29183: CALL_OW 2
29187: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29188: LD_VAR 0 9
29192: PPUSH
29193: LD_VAR 0 13
29197: PPUSH
29198: CALL_OW 325
29202: PUSH
29203: LD_VAR 0 10
29207: PPUSH
29208: CALL_OW 255
29212: PPUSH
29213: LD_VAR 0 13
29217: PPUSH
29218: CALL_OW 325
29222: NOT
29223: AND
29224: IFFALSE 29253
// missile := Insert ( missile , missile + 1 , 3 ) ;
29226: LD_ADDR_VAR 0 14
29230: PUSH
29231: LD_VAR 0 14
29235: PPUSH
29236: LD_VAR 0 14
29240: PUSH
29241: LD_INT 1
29243: PLUS
29244: PPUSH
29245: LD_INT 3
29247: PPUSH
29248: CALL_OW 2
29252: ST_TO_ADDR
// if missile < 2 then
29253: LD_VAR 0 14
29257: PUSH
29258: LD_INT 2
29260: LESS
29261: IFFALSE 29265
// exit ;
29263: GO 29487
// x := GetX ( enemy ) ;
29265: LD_ADDR_VAR 0 4
29269: PUSH
29270: LD_VAR 0 10
29274: PPUSH
29275: CALL_OW 250
29279: ST_TO_ADDR
// y := GetY ( enemy ) ;
29280: LD_ADDR_VAR 0 5
29284: PUSH
29285: LD_VAR 0 10
29289: PPUSH
29290: CALL_OW 251
29294: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29295: LD_ADDR_VAR 0 6
29299: PUSH
29300: LD_VAR 0 4
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PPUSH
29309: LD_INT 1
29311: PPUSH
29312: CALL_OW 12
29316: PLUS
29317: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29318: LD_ADDR_VAR 0 7
29322: PUSH
29323: LD_VAR 0 5
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PPUSH
29332: LD_INT 1
29334: PPUSH
29335: CALL_OW 12
29339: PLUS
29340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29341: LD_VAR 0 6
29345: PPUSH
29346: LD_VAR 0 7
29350: PPUSH
29351: CALL_OW 488
29355: NOT
29356: IFFALSE 29378
// begin _x := x ;
29358: LD_ADDR_VAR 0 6
29362: PUSH
29363: LD_VAR 0 4
29367: ST_TO_ADDR
// _y := y ;
29368: LD_ADDR_VAR 0 7
29372: PUSH
29373: LD_VAR 0 5
29377: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 1
29385: PPUSH
29386: LD_VAR 0 14
29390: PPUSH
29391: CALL_OW 12
29395: ST_TO_ADDR
// case i of 1 :
29396: LD_VAR 0 3
29400: PUSH
29401: LD_INT 1
29403: DOUBLE
29404: EQUAL
29405: IFTRUE 29409
29407: GO 29426
29409: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29410: LD_VAR 0 1
29414: PPUSH
29415: LD_VAR 0 10
29419: PPUSH
29420: CALL_OW 115
29424: GO 29487
29426: LD_INT 2
29428: DOUBLE
29429: EQUAL
29430: IFTRUE 29434
29432: GO 29456
29434: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29435: LD_VAR 0 1
29439: PPUSH
29440: LD_VAR 0 6
29444: PPUSH
29445: LD_VAR 0 7
29449: PPUSH
29450: CALL_OW 153
29454: GO 29487
29456: LD_INT 3
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29464
29462: GO 29486
29464: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29465: LD_VAR 0 1
29469: PPUSH
29470: LD_VAR 0 6
29474: PPUSH
29475: LD_VAR 0 7
29479: PPUSH
29480: CALL_OW 154
29484: GO 29487
29486: POP
// end ;
29487: LD_VAR 0 2
29491: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29492: LD_INT 0
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
// if not unit or not building then
29500: LD_VAR 0 1
29504: NOT
29505: PUSH
29506: LD_VAR 0 2
29510: NOT
29511: OR
29512: IFFALSE 29516
// exit ;
29514: GO 29674
// x := GetX ( building ) ;
29516: LD_ADDR_VAR 0 5
29520: PUSH
29521: LD_VAR 0 2
29525: PPUSH
29526: CALL_OW 250
29530: ST_TO_ADDR
// y := GetY ( building ) ;
29531: LD_ADDR_VAR 0 6
29535: PUSH
29536: LD_VAR 0 2
29540: PPUSH
29541: CALL_OW 251
29545: ST_TO_ADDR
// for i = 0 to 5 do
29546: LD_ADDR_VAR 0 4
29550: PUSH
29551: DOUBLE
29552: LD_INT 0
29554: DEC
29555: ST_TO_ADDR
29556: LD_INT 5
29558: PUSH
29559: FOR_TO
29560: IFFALSE 29672
// begin _x := ShiftX ( x , i , 3 ) ;
29562: LD_ADDR_VAR 0 7
29566: PUSH
29567: LD_VAR 0 5
29571: PPUSH
29572: LD_VAR 0 4
29576: PPUSH
29577: LD_INT 3
29579: PPUSH
29580: CALL_OW 272
29584: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29585: LD_ADDR_VAR 0 8
29589: PUSH
29590: LD_VAR 0 6
29594: PPUSH
29595: LD_VAR 0 4
29599: PPUSH
29600: LD_INT 3
29602: PPUSH
29603: CALL_OW 273
29607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29608: LD_VAR 0 7
29612: PPUSH
29613: LD_VAR 0 8
29617: PPUSH
29618: CALL_OW 488
29622: NOT
29623: IFFALSE 29627
// continue ;
29625: GO 29559
// if HexInfo ( _x , _y ) = 0 then
29627: LD_VAR 0 7
29631: PPUSH
29632: LD_VAR 0 8
29636: PPUSH
29637: CALL_OW 428
29641: PUSH
29642: LD_INT 0
29644: EQUAL
29645: IFFALSE 29670
// begin ComMoveXY ( unit , _x , _y ) ;
29647: LD_VAR 0 1
29651: PPUSH
29652: LD_VAR 0 7
29656: PPUSH
29657: LD_VAR 0 8
29661: PPUSH
29662: CALL_OW 111
// exit ;
29666: POP
29667: POP
29668: GO 29674
// end ; end ;
29670: GO 29559
29672: POP
29673: POP
// end ;
29674: LD_VAR 0 3
29678: RET
// export function ScanBase ( side , base_area ) ; begin
29679: LD_INT 0
29681: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29682: LD_ADDR_VAR 0 3
29686: PUSH
29687: LD_VAR 0 2
29691: PPUSH
29692: LD_INT 81
29694: PUSH
29695: LD_VAR 0 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 70
29708: ST_TO_ADDR
// end ;
29709: LD_VAR 0 3
29713: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
// result := false ;
29720: LD_ADDR_VAR 0 2
29724: PUSH
29725: LD_INT 0
29727: ST_TO_ADDR
// side := GetSide ( unit ) ;
29728: LD_ADDR_VAR 0 3
29732: PUSH
29733: LD_VAR 0 1
29737: PPUSH
29738: CALL_OW 255
29742: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29743: LD_ADDR_VAR 0 4
29747: PUSH
29748: LD_VAR 0 1
29752: PPUSH
29753: CALL_OW 248
29757: ST_TO_ADDR
// case nat of 1 :
29758: LD_VAR 0 4
29762: PUSH
29763: LD_INT 1
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29782
29771: POP
// tech := tech_lassight ; 2 :
29772: LD_ADDR_VAR 0 5
29776: PUSH
29777: LD_INT 12
29779: ST_TO_ADDR
29780: GO 29821
29782: LD_INT 2
29784: DOUBLE
29785: EQUAL
29786: IFTRUE 29790
29788: GO 29801
29790: POP
// tech := tech_mortar ; 3 :
29791: LD_ADDR_VAR 0 5
29795: PUSH
29796: LD_INT 41
29798: ST_TO_ADDR
29799: GO 29821
29801: LD_INT 3
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29820
29809: POP
// tech := tech_bazooka ; end ;
29810: LD_ADDR_VAR 0 5
29814: PUSH
29815: LD_INT 44
29817: ST_TO_ADDR
29818: GO 29821
29820: POP
// if Researched ( side , tech ) then
29821: LD_VAR 0 3
29825: PPUSH
29826: LD_VAR 0 5
29830: PPUSH
29831: CALL_OW 325
29835: IFFALSE 29862
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29837: LD_ADDR_VAR 0 2
29841: PUSH
29842: LD_INT 5
29844: PUSH
29845: LD_INT 8
29847: PUSH
29848: LD_INT 9
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: PUSH
29856: LD_VAR 0 4
29860: ARRAY
29861: ST_TO_ADDR
// end ;
29862: LD_VAR 0 2
29866: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29867: LD_INT 0
29869: PPUSH
29870: PPUSH
29871: PPUSH
// if not mines then
29872: LD_VAR 0 2
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 30025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29881: LD_ADDR_VAR 0 5
29885: PUSH
29886: LD_INT 81
29888: PUSH
29889: LD_VAR 0 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 21
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// for i in mines do
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: LD_VAR 0 2
29933: PUSH
29934: FOR_IN
29935: IFFALSE 30023
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29937: LD_VAR 0 4
29941: PUSH
29942: LD_INT 1
29944: ARRAY
29945: PPUSH
29946: LD_VAR 0 4
29950: PUSH
29951: LD_INT 2
29953: ARRAY
29954: PPUSH
29955: CALL_OW 458
29959: NOT
29960: IFFALSE 29964
// continue ;
29962: GO 29934
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29964: LD_VAR 0 4
29968: PUSH
29969: LD_INT 1
29971: ARRAY
29972: PPUSH
29973: LD_VAR 0 4
29977: PUSH
29978: LD_INT 2
29980: ARRAY
29981: PPUSH
29982: CALL_OW 428
29986: PUSH
29987: LD_VAR 0 5
29991: IN
29992: IFFALSE 30021
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29994: LD_VAR 0 4
29998: PUSH
29999: LD_INT 1
30001: ARRAY
30002: PPUSH
30003: LD_VAR 0 4
30007: PUSH
30008: LD_INT 2
30010: ARRAY
30011: PPUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 456
// end ;
30021: GO 29934
30023: POP
30024: POP
// end ;
30025: LD_VAR 0 3
30029: RET
// export function Count ( array ) ; var i ; begin
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
// result := 0 ;
30034: LD_ADDR_VAR 0 2
30038: PUSH
30039: LD_INT 0
30041: ST_TO_ADDR
// for i in array do
30042: LD_ADDR_VAR 0 3
30046: PUSH
30047: LD_VAR 0 1
30051: PUSH
30052: FOR_IN
30053: IFFALSE 30077
// if i then
30055: LD_VAR 0 3
30059: IFFALSE 30075
// result := result + 1 ;
30061: LD_ADDR_VAR 0 2
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_INT 1
30073: PLUS
30074: ST_TO_ADDR
30075: GO 30052
30077: POP
30078: POP
// end ;
30079: LD_VAR 0 2
30083: RET
// export function IsEmpty ( building ) ; begin
30084: LD_INT 0
30086: PPUSH
// if not building then
30087: LD_VAR 0 1
30091: NOT
30092: IFFALSE 30096
// exit ;
30094: GO 30139
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30096: LD_ADDR_VAR 0 2
30100: PUSH
30101: LD_VAR 0 1
30105: PUSH
30106: LD_INT 22
30108: PUSH
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 255
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 58
30125: PUSH
30126: EMPTY
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 69
30137: IN
30138: ST_TO_ADDR
// end ;
30139: LD_VAR 0 2
30143: RET
// export function IsNotFull ( building ) ; begin
30144: LD_INT 0
30146: PPUSH
// if not building then
30147: LD_VAR 0 1
30151: NOT
30152: IFFALSE 30156
// exit ;
30154: GO 30175
// result := UnitsInside ( building ) < 6 ;
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_VAR 0 1
30165: PPUSH
30166: CALL_OW 313
30170: PUSH
30171: LD_INT 6
30173: LESS
30174: ST_TO_ADDR
// end ;
30175: LD_VAR 0 2
30179: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30180: LD_INT 0
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
// tmp := [ ] ;
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: EMPTY
30192: ST_TO_ADDR
// list := [ ] ;
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: EMPTY
30199: ST_TO_ADDR
// for i = 16 to 25 do
30200: LD_ADDR_VAR 0 4
30204: PUSH
30205: DOUBLE
30206: LD_INT 16
30208: DEC
30209: ST_TO_ADDR
30210: LD_INT 25
30212: PUSH
30213: FOR_TO
30214: IFFALSE 30287
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30216: LD_ADDR_VAR 0 3
30220: PUSH
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 22
30228: PUSH
30229: LD_VAR 0 1
30233: PPUSH
30234: CALL_OW 255
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 91
30245: PUSH
30246: LD_VAR 0 1
30250: PUSH
30251: LD_INT 6
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 30
30261: PUSH
30262: LD_VAR 0 4
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: PPUSH
30279: CALL_OW 69
30283: ADD
30284: ST_TO_ADDR
30285: GO 30213
30287: POP
30288: POP
// for i = 1 to tmp do
30289: LD_ADDR_VAR 0 4
30293: PUSH
30294: DOUBLE
30295: LD_INT 1
30297: DEC
30298: ST_TO_ADDR
30299: LD_VAR 0 3
30303: PUSH
30304: FOR_TO
30305: IFFALSE 30393
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30307: LD_ADDR_VAR 0 5
30311: PUSH
30312: LD_VAR 0 5
30316: PUSH
30317: LD_VAR 0 3
30321: PUSH
30322: LD_VAR 0 4
30326: ARRAY
30327: PPUSH
30328: CALL_OW 266
30332: PUSH
30333: LD_VAR 0 3
30337: PUSH
30338: LD_VAR 0 4
30342: ARRAY
30343: PPUSH
30344: CALL_OW 250
30348: PUSH
30349: LD_VAR 0 3
30353: PUSH
30354: LD_VAR 0 4
30358: ARRAY
30359: PPUSH
30360: CALL_OW 251
30364: PUSH
30365: LD_VAR 0 3
30369: PUSH
30370: LD_VAR 0 4
30374: ARRAY
30375: PPUSH
30376: CALL_OW 254
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: ADD
30390: ST_TO_ADDR
30391: GO 30304
30393: POP
30394: POP
// result := list ;
30395: LD_ADDR_VAR 0 2
30399: PUSH
30400: LD_VAR 0 5
30404: ST_TO_ADDR
// end ;
30405: LD_VAR 0 2
30409: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30410: LD_INT 0
30412: PPUSH
30413: PPUSH
30414: PPUSH
30415: PPUSH
30416: PPUSH
30417: PPUSH
30418: PPUSH
// if not factory then
30419: LD_VAR 0 1
30423: NOT
30424: IFFALSE 30428
// exit ;
30426: GO 31021
// if control = control_apeman then
30428: LD_VAR 0 4
30432: PUSH
30433: LD_INT 5
30435: EQUAL
30436: IFFALSE 30545
// begin tmp := UnitsInside ( factory ) ;
30438: LD_ADDR_VAR 0 8
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 313
30452: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30453: LD_VAR 0 8
30457: PPUSH
30458: LD_INT 25
30460: PUSH
30461: LD_INT 12
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PPUSH
30468: CALL_OW 72
30472: NOT
30473: IFFALSE 30483
// control := control_manual ;
30475: LD_ADDR_VAR 0 4
30479: PUSH
30480: LD_INT 1
30482: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30483: LD_ADDR_VAR 0 8
30487: PUSH
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL 30180 0 1
30497: ST_TO_ADDR
// if tmp then
30498: LD_VAR 0 8
30502: IFFALSE 30545
// begin for i in tmp do
30504: LD_ADDR_VAR 0 7
30508: PUSH
30509: LD_VAR 0 8
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30543
// if i [ 1 ] = b_ext_radio then
30517: LD_VAR 0 7
30521: PUSH
30522: LD_INT 1
30524: ARRAY
30525: PUSH
30526: LD_INT 22
30528: EQUAL
30529: IFFALSE 30541
// begin control := control_remote ;
30531: LD_ADDR_VAR 0 4
30535: PUSH
30536: LD_INT 2
30538: ST_TO_ADDR
// break ;
30539: GO 30543
// end ;
30541: GO 30514
30543: POP
30544: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30545: LD_VAR 0 1
30549: PPUSH
30550: LD_VAR 0 2
30554: PPUSH
30555: LD_VAR 0 3
30559: PPUSH
30560: LD_VAR 0 4
30564: PPUSH
30565: LD_VAR 0 5
30569: PPUSH
30570: CALL_OW 448
30574: IFFALSE 30609
// begin result := [ chassis , engine , control , weapon ] ;
30576: LD_ADDR_VAR 0 6
30580: PUSH
30581: LD_VAR 0 2
30585: PUSH
30586: LD_VAR 0 3
30590: PUSH
30591: LD_VAR 0 4
30595: PUSH
30596: LD_VAR 0 5
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
// exit ;
30607: GO 31021
// end ; _chassis := AvailableChassisList ( factory ) ;
30609: LD_ADDR_VAR 0 9
30613: PUSH
30614: LD_VAR 0 1
30618: PPUSH
30619: CALL_OW 475
30623: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30624: LD_ADDR_VAR 0 11
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 476
30638: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30639: LD_ADDR_VAR 0 12
30643: PUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 477
30653: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30654: LD_ADDR_VAR 0 10
30658: PUSH
30659: LD_VAR 0 1
30663: PPUSH
30664: CALL_OW 478
30668: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30669: LD_VAR 0 9
30673: NOT
30674: PUSH
30675: LD_VAR 0 11
30679: NOT
30680: OR
30681: PUSH
30682: LD_VAR 0 12
30686: NOT
30687: OR
30688: PUSH
30689: LD_VAR 0 10
30693: NOT
30694: OR
30695: IFFALSE 30730
// begin result := [ chassis , engine , control , weapon ] ;
30697: LD_ADDR_VAR 0 6
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_VAR 0 3
30711: PUSH
30712: LD_VAR 0 4
30716: PUSH
30717: LD_VAR 0 5
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// exit ;
30728: GO 31021
// end ; if not chassis in _chassis then
30730: LD_VAR 0 2
30734: PUSH
30735: LD_VAR 0 9
30739: IN
30740: NOT
30741: IFFALSE 30767
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30743: LD_ADDR_VAR 0 2
30747: PUSH
30748: LD_VAR 0 9
30752: PUSH
30753: LD_INT 1
30755: PPUSH
30756: LD_VAR 0 9
30760: PPUSH
30761: CALL_OW 12
30765: ARRAY
30766: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30767: LD_VAR 0 2
30771: PPUSH
30772: LD_VAR 0 3
30776: PPUSH
30777: CALL 31026 0 2
30781: NOT
30782: IFFALSE 30841
// repeat engine := _engine [ 1 ] ;
30784: LD_ADDR_VAR 0 3
30788: PUSH
30789: LD_VAR 0 11
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30798: LD_ADDR_VAR 0 11
30802: PUSH
30803: LD_VAR 0 11
30807: PPUSH
30808: LD_INT 1
30810: PPUSH
30811: CALL_OW 3
30815: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30816: LD_VAR 0 2
30820: PPUSH
30821: LD_VAR 0 3
30825: PPUSH
30826: CALL 31026 0 2
30830: PUSH
30831: LD_VAR 0 11
30835: PUSH
30836: EMPTY
30837: EQUAL
30838: OR
30839: IFFALSE 30784
// if not control in _control then
30841: LD_VAR 0 4
30845: PUSH
30846: LD_VAR 0 12
30850: IN
30851: NOT
30852: IFFALSE 30878
// control := _control [ rand ( 1 , _control ) ] ;
30854: LD_ADDR_VAR 0 4
30858: PUSH
30859: LD_VAR 0 12
30863: PUSH
30864: LD_INT 1
30866: PPUSH
30867: LD_VAR 0 12
30871: PPUSH
30872: CALL_OW 12
30876: ARRAY
30877: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30878: LD_VAR 0 2
30882: PPUSH
30883: LD_VAR 0 5
30887: PPUSH
30888: CALL 31246 0 2
30892: NOT
30893: IFFALSE 30952
// repeat weapon := _weapon [ 1 ] ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_VAR 0 10
30904: PUSH
30905: LD_INT 1
30907: ARRAY
30908: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30909: LD_ADDR_VAR 0 10
30913: PUSH
30914: LD_VAR 0 10
30918: PPUSH
30919: LD_INT 1
30921: PPUSH
30922: CALL_OW 3
30926: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30927: LD_VAR 0 2
30931: PPUSH
30932: LD_VAR 0 5
30936: PPUSH
30937: CALL 31246 0 2
30941: PUSH
30942: LD_VAR 0 10
30946: PUSH
30947: EMPTY
30948: EQUAL
30949: OR
30950: IFFALSE 30895
// result := [ ] ;
30952: LD_ADDR_VAR 0 6
30956: PUSH
30957: EMPTY
30958: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30959: LD_VAR 0 1
30963: PPUSH
30964: LD_VAR 0 2
30968: PPUSH
30969: LD_VAR 0 3
30973: PPUSH
30974: LD_VAR 0 4
30978: PPUSH
30979: LD_VAR 0 5
30983: PPUSH
30984: CALL_OW 448
30988: IFFALSE 31021
// result := [ chassis , engine , control , weapon ] ;
30990: LD_ADDR_VAR 0 6
30994: PUSH
30995: LD_VAR 0 2
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: LD_VAR 0 4
31009: PUSH
31010: LD_VAR 0 5
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: ST_TO_ADDR
// end ;
31021: LD_VAR 0 6
31025: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31026: LD_INT 0
31028: PPUSH
// if not chassis or not engine then
31029: LD_VAR 0 1
31033: NOT
31034: PUSH
31035: LD_VAR 0 2
31039: NOT
31040: OR
31041: IFFALSE 31045
// exit ;
31043: GO 31241
// case engine of engine_solar :
31045: LD_VAR 0 2
31049: PUSH
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31096
31058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 11
31066: PUSH
31067: LD_INT 12
31069: PUSH
31070: LD_INT 13
31072: PUSH
31073: LD_INT 14
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
31094: GO 31225
31096: LD_INT 1
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 31166
31104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31105: LD_ADDR_VAR 0 3
31109: PUSH
31110: LD_INT 11
31112: PUSH
31113: LD_INT 12
31115: PUSH
31116: LD_INT 13
31118: PUSH
31119: LD_INT 14
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 4
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: LD_INT 21
31139: PUSH
31140: LD_INT 23
31142: PUSH
31143: LD_INT 22
31145: PUSH
31146: LD_INT 24
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31225
31166: LD_INT 3
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31224
31174: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 13
31182: PUSH
31183: LD_INT 14
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 3
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 21
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_INT 23
31206: PUSH
31207: LD_INT 24
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
31222: GO 31225
31224: POP
// result := ( chassis in result ) ;
31225: LD_ADDR_VAR 0 3
31229: PUSH
31230: LD_VAR 0 1
31234: PUSH
31235: LD_VAR 0 3
31239: IN
31240: ST_TO_ADDR
// end ;
31241: LD_VAR 0 3
31245: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31246: LD_INT 0
31248: PPUSH
// if not chassis or not weapon then
31249: LD_VAR 0 1
31253: NOT
31254: PUSH
31255: LD_VAR 0 2
31259: NOT
31260: OR
31261: IFFALSE 31265
// exit ;
31263: GO 32291
// case weapon of us_machine_gun :
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 2
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31308
31278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31279: LD_ADDR_VAR 0 3
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 4
31295: PUSH
31296: LD_INT 5
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
31306: GO 32275
31308: LD_INT 3
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31346
31316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 32275
31346: LD_INT 11
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31384
31354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: LD_INT 3
31368: PUSH
31369: LD_INT 4
31371: PUSH
31372: LD_INT 5
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
31382: GO 32275
31384: LD_INT 4
31386: DOUBLE
31387: EQUAL
31388: IFTRUE 31392
31390: GO 31418
31392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 4
31406: PUSH
31407: LD_INT 5
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
31416: GO 32275
31418: LD_INT 5
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31452
31426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31427: LD_ADDR_VAR 0 3
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 32275
31452: LD_INT 9
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31486
31460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
31484: GO 32275
31486: LD_INT 7
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31520
31494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 4
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
31518: GO 32275
31520: LD_INT 12
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31554
31528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 4
31542: PUSH
31543: LD_INT 5
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
31552: GO 32275
31554: LD_INT 13
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31588
31562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
31586: GO 32275
31588: LD_INT 14
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31614
31596: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31597: LD_ADDR_VAR 0 3
31601: PUSH
31602: LD_INT 4
31604: PUSH
31605: LD_INT 5
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: ST_TO_ADDR
31612: GO 32275
31614: LD_INT 6
31616: DOUBLE
31617: EQUAL
31618: IFTRUE 31622
31620: GO 31640
31622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31623: LD_ADDR_VAR 0 3
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 5
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: ST_TO_ADDR
31638: GO 32275
31640: LD_INT 10
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31666
31648: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31649: LD_ADDR_VAR 0 3
31653: PUSH
31654: LD_INT 4
31656: PUSH
31657: LD_INT 5
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: ST_TO_ADDR
31664: GO 32275
31666: LD_INT 22
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31700
31674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_INT 11
31682: PUSH
31683: LD_INT 12
31685: PUSH
31686: LD_INT 13
31688: PUSH
31689: LD_INT 14
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: ST_TO_ADDR
31698: GO 32275
31700: LD_INT 23
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31734
31708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_INT 11
31716: PUSH
31717: LD_INT 12
31719: PUSH
31720: LD_INT 13
31722: PUSH
31723: LD_INT 14
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 32275
31734: LD_INT 24
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31768
31742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_INT 11
31750: PUSH
31751: LD_INT 12
31753: PUSH
31754: LD_INT 13
31756: PUSH
31757: LD_INT 14
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
31766: GO 32275
31768: LD_INT 30
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31802
31776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 11
31784: PUSH
31785: LD_INT 12
31787: PUSH
31788: LD_INT 13
31790: PUSH
31791: LD_INT 14
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 32275
31802: LD_INT 25
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31828
31810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_INT 13
31818: PUSH
31819: LD_INT 14
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: ST_TO_ADDR
31826: GO 32275
31828: LD_INT 27
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31854
31836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: LD_INT 13
31844: PUSH
31845: LD_INT 14
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: ST_TO_ADDR
31852: GO 32275
31854: LD_INT 28
31856: DOUBLE
31857: EQUAL
31858: IFTRUE 31862
31860: GO 31880
31862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31863: LD_ADDR_VAR 0 3
31867: PUSH
31868: LD_INT 13
31870: PUSH
31871: LD_INT 14
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: ST_TO_ADDR
31878: GO 32275
31880: LD_INT 29
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31906
31888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31889: LD_ADDR_VAR 0 3
31893: PUSH
31894: LD_INT 13
31896: PUSH
31897: LD_INT 14
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: ST_TO_ADDR
31904: GO 32275
31906: LD_INT 31
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31932
31914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 13
31922: PUSH
31923: LD_INT 14
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32275
31932: LD_INT 26
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31958
31940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 13
31948: PUSH
31949: LD_INT 14
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: ST_TO_ADDR
31956: GO 32275
31958: LD_INT 42
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31992
31966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31967: LD_ADDR_VAR 0 3
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 22
31977: PUSH
31978: LD_INT 23
31980: PUSH
31981: LD_INT 24
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
31990: GO 32275
31992: LD_INT 43
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 32026
32000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32001: LD_ADDR_VAR 0 3
32005: PUSH
32006: LD_INT 21
32008: PUSH
32009: LD_INT 22
32011: PUSH
32012: LD_INT 23
32014: PUSH
32015: LD_INT 24
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: ST_TO_ADDR
32024: GO 32275
32026: LD_INT 44
32028: DOUBLE
32029: EQUAL
32030: IFTRUE 32034
32032: GO 32060
32034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32035: LD_ADDR_VAR 0 3
32039: PUSH
32040: LD_INT 21
32042: PUSH
32043: LD_INT 22
32045: PUSH
32046: LD_INT 23
32048: PUSH
32049: LD_INT 24
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: ST_TO_ADDR
32058: GO 32275
32060: LD_INT 45
32062: DOUBLE
32063: EQUAL
32064: IFTRUE 32068
32066: GO 32094
32068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_INT 21
32076: PUSH
32077: LD_INT 22
32079: PUSH
32080: LD_INT 23
32082: PUSH
32083: LD_INT 24
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 32275
32094: LD_INT 49
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32128
32102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 21
32110: PUSH
32111: LD_INT 22
32113: PUSH
32114: LD_INT 23
32116: PUSH
32117: LD_INT 24
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: ST_TO_ADDR
32126: GO 32275
32128: LD_INT 51
32130: DOUBLE
32131: EQUAL
32132: IFTRUE 32136
32134: GO 32162
32136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32137: LD_ADDR_VAR 0 3
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 22
32147: PUSH
32148: LD_INT 23
32150: PUSH
32151: LD_INT 24
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
32160: GO 32275
32162: LD_INT 52
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32196
32170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32171: LD_ADDR_VAR 0 3
32175: PUSH
32176: LD_INT 21
32178: PUSH
32179: LD_INT 22
32181: PUSH
32182: LD_INT 23
32184: PUSH
32185: LD_INT 24
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
32194: GO 32275
32196: LD_INT 53
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32222
32204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_INT 23
32212: PUSH
32213: LD_INT 24
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: ST_TO_ADDR
32220: GO 32275
32222: LD_INT 46
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32230
32228: GO 32248
32230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 23
32238: PUSH
32239: LD_INT 24
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: ST_TO_ADDR
32246: GO 32275
32248: LD_INT 47
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32274
32256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32257: LD_ADDR_VAR 0 3
32261: PUSH
32262: LD_INT 23
32264: PUSH
32265: LD_INT 24
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: ST_TO_ADDR
32272: GO 32275
32274: POP
// result := ( chassis in result ) ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_VAR 0 1
32284: PUSH
32285: LD_VAR 0 3
32289: IN
32290: ST_TO_ADDR
// end ;
32291: LD_VAR 0 3
32295: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32296: LD_INT 0
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
// result := array ;
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_VAR 0 1
32314: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32315: LD_VAR 0 1
32319: NOT
32320: PUSH
32321: LD_VAR 0 2
32325: NOT
32326: OR
32327: PUSH
32328: LD_VAR 0 3
32332: NOT
32333: OR
32334: PUSH
32335: LD_VAR 0 2
32339: PUSH
32340: LD_VAR 0 1
32344: GREATER
32345: OR
32346: PUSH
32347: LD_VAR 0 3
32351: PUSH
32352: LD_VAR 0 1
32356: GREATER
32357: OR
32358: IFFALSE 32362
// exit ;
32360: GO 32658
// if direction then
32362: LD_VAR 0 4
32366: IFFALSE 32430
// begin d := 1 ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_INT 1
32375: ST_TO_ADDR
// if i_from > i_to then
32376: LD_VAR 0 2
32380: PUSH
32381: LD_VAR 0 3
32385: GREATER
32386: IFFALSE 32412
// length := ( array - i_from ) + i_to else
32388: LD_ADDR_VAR 0 11
32392: PUSH
32393: LD_VAR 0 1
32397: PUSH
32398: LD_VAR 0 2
32402: MINUS
32403: PUSH
32404: LD_VAR 0 3
32408: PLUS
32409: ST_TO_ADDR
32410: GO 32428
// length := i_to - i_from ;
32412: LD_ADDR_VAR 0 11
32416: PUSH
32417: LD_VAR 0 3
32421: PUSH
32422: LD_VAR 0 2
32426: MINUS
32427: ST_TO_ADDR
// end else
32428: GO 32491
// begin d := - 1 ;
32430: LD_ADDR_VAR 0 9
32434: PUSH
32435: LD_INT 1
32437: NEG
32438: ST_TO_ADDR
// if i_from > i_to then
32439: LD_VAR 0 2
32443: PUSH
32444: LD_VAR 0 3
32448: GREATER
32449: IFFALSE 32469
// length := i_from - i_to else
32451: LD_ADDR_VAR 0 11
32455: PUSH
32456: LD_VAR 0 2
32460: PUSH
32461: LD_VAR 0 3
32465: MINUS
32466: ST_TO_ADDR
32467: GO 32491
// length := ( array - i_to ) + i_from ;
32469: LD_ADDR_VAR 0 11
32473: PUSH
32474: LD_VAR 0 1
32478: PUSH
32479: LD_VAR 0 3
32483: MINUS
32484: PUSH
32485: LD_VAR 0 2
32489: PLUS
32490: ST_TO_ADDR
// end ; if not length then
32491: LD_VAR 0 11
32495: NOT
32496: IFFALSE 32500
// exit ;
32498: GO 32658
// tmp := array ;
32500: LD_ADDR_VAR 0 10
32504: PUSH
32505: LD_VAR 0 1
32509: ST_TO_ADDR
// for i = 1 to length do
32510: LD_ADDR_VAR 0 6
32514: PUSH
32515: DOUBLE
32516: LD_INT 1
32518: DEC
32519: ST_TO_ADDR
32520: LD_VAR 0 11
32524: PUSH
32525: FOR_TO
32526: IFFALSE 32646
// begin for j = 1 to array do
32528: LD_ADDR_VAR 0 7
32532: PUSH
32533: DOUBLE
32534: LD_INT 1
32536: DEC
32537: ST_TO_ADDR
32538: LD_VAR 0 1
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32632
// begin k := j + d ;
32546: LD_ADDR_VAR 0 8
32550: PUSH
32551: LD_VAR 0 7
32555: PUSH
32556: LD_VAR 0 9
32560: PLUS
32561: ST_TO_ADDR
// if k > array then
32562: LD_VAR 0 8
32566: PUSH
32567: LD_VAR 0 1
32571: GREATER
32572: IFFALSE 32582
// k := 1 ;
32574: LD_ADDR_VAR 0 8
32578: PUSH
32579: LD_INT 1
32581: ST_TO_ADDR
// if not k then
32582: LD_VAR 0 8
32586: NOT
32587: IFFALSE 32599
// k := array ;
32589: LD_ADDR_VAR 0 8
32593: PUSH
32594: LD_VAR 0 1
32598: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32599: LD_ADDR_VAR 0 10
32603: PUSH
32604: LD_VAR 0 10
32608: PPUSH
32609: LD_VAR 0 8
32613: PPUSH
32614: LD_VAR 0 1
32618: PUSH
32619: LD_VAR 0 7
32623: ARRAY
32624: PPUSH
32625: CALL_OW 1
32629: ST_TO_ADDR
// end ;
32630: GO 32543
32632: POP
32633: POP
// array := tmp ;
32634: LD_ADDR_VAR 0 1
32638: PUSH
32639: LD_VAR 0 10
32643: ST_TO_ADDR
// end ;
32644: GO 32525
32646: POP
32647: POP
// result := array ;
32648: LD_ADDR_VAR 0 5
32652: PUSH
32653: LD_VAR 0 1
32657: ST_TO_ADDR
// end ;
32658: LD_VAR 0 5
32662: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32663: LD_INT 0
32665: PPUSH
32666: PPUSH
// result := 0 ;
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 0
32674: ST_TO_ADDR
// if not array or not value in array then
32675: LD_VAR 0 1
32679: NOT
32680: PUSH
32681: LD_VAR 0 2
32685: PUSH
32686: LD_VAR 0 1
32690: IN
32691: NOT
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 32751
// for i = 1 to array do
32697: LD_ADDR_VAR 0 4
32701: PUSH
32702: DOUBLE
32703: LD_INT 1
32705: DEC
32706: ST_TO_ADDR
32707: LD_VAR 0 1
32711: PUSH
32712: FOR_TO
32713: IFFALSE 32749
// if value = array [ i ] then
32715: LD_VAR 0 2
32719: PUSH
32720: LD_VAR 0 1
32724: PUSH
32725: LD_VAR 0 4
32729: ARRAY
32730: EQUAL
32731: IFFALSE 32747
// begin result := i ;
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_VAR 0 4
32742: ST_TO_ADDR
// exit ;
32743: POP
32744: POP
32745: GO 32751
// end ;
32747: GO 32712
32749: POP
32750: POP
// end ;
32751: LD_VAR 0 3
32755: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32756: LD_INT 0
32758: PPUSH
// vc_chassis := chassis ;
32759: LD_ADDR_OWVAR 37
32763: PUSH
32764: LD_VAR 0 1
32768: ST_TO_ADDR
// vc_engine := engine ;
32769: LD_ADDR_OWVAR 39
32773: PUSH
32774: LD_VAR 0 2
32778: ST_TO_ADDR
// vc_control := control ;
32779: LD_ADDR_OWVAR 38
32783: PUSH
32784: LD_VAR 0 3
32788: ST_TO_ADDR
// vc_weapon := weapon ;
32789: LD_ADDR_OWVAR 40
32793: PUSH
32794: LD_VAR 0 4
32798: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32799: LD_ADDR_OWVAR 41
32803: PUSH
32804: LD_VAR 0 5
32808: ST_TO_ADDR
// end ;
32809: LD_VAR 0 6
32813: RET
// export function WantPlant ( unit ) ; var task ; begin
32814: LD_INT 0
32816: PPUSH
32817: PPUSH
// result := false ;
32818: LD_ADDR_VAR 0 2
32822: PUSH
32823: LD_INT 0
32825: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_VAR 0 1
32835: PPUSH
32836: CALL_OW 437
32840: ST_TO_ADDR
// if task then
32841: LD_VAR 0 3
32845: IFFALSE 32873
// if task [ 1 ] [ 1 ] = p then
32847: LD_VAR 0 3
32851: PUSH
32852: LD_INT 1
32854: ARRAY
32855: PUSH
32856: LD_INT 1
32858: ARRAY
32859: PUSH
32860: LD_STRING p
32862: EQUAL
32863: IFFALSE 32873
// result := true ;
32865: LD_ADDR_VAR 0 2
32869: PUSH
32870: LD_INT 1
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 2
32877: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32878: LD_INT 0
32880: PPUSH
32881: PPUSH
32882: PPUSH
32883: PPUSH
// if pos < 1 then
32884: LD_VAR 0 2
32888: PUSH
32889: LD_INT 1
32891: LESS
32892: IFFALSE 32896
// exit ;
32894: GO 33199
// if pos = 1 then
32896: LD_VAR 0 2
32900: PUSH
32901: LD_INT 1
32903: EQUAL
32904: IFFALSE 32937
// result := Replace ( arr , pos [ 1 ] , value ) else
32906: LD_ADDR_VAR 0 4
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: LD_VAR 0 2
32920: PUSH
32921: LD_INT 1
32923: ARRAY
32924: PPUSH
32925: LD_VAR 0 3
32929: PPUSH
32930: CALL_OW 1
32934: ST_TO_ADDR
32935: GO 33199
// begin tmp := arr ;
32937: LD_ADDR_VAR 0 6
32941: PUSH
32942: LD_VAR 0 1
32946: ST_TO_ADDR
// s_arr := [ tmp ] ;
32947: LD_ADDR_VAR 0 7
32951: PUSH
32952: LD_VAR 0 6
32956: PUSH
32957: EMPTY
32958: LIST
32959: ST_TO_ADDR
// for i = 1 to pos - 1 do
32960: LD_ADDR_VAR 0 5
32964: PUSH
32965: DOUBLE
32966: LD_INT 1
32968: DEC
32969: ST_TO_ADDR
32970: LD_VAR 0 2
32974: PUSH
32975: LD_INT 1
32977: MINUS
32978: PUSH
32979: FOR_TO
32980: IFFALSE 33025
// begin tmp := tmp [ pos [ i ] ] ;
32982: LD_ADDR_VAR 0 6
32986: PUSH
32987: LD_VAR 0 6
32991: PUSH
32992: LD_VAR 0 2
32996: PUSH
32997: LD_VAR 0 5
33001: ARRAY
33002: ARRAY
33003: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_VAR 0 7
33013: PUSH
33014: LD_VAR 0 6
33018: PUSH
33019: EMPTY
33020: LIST
33021: ADD
33022: ST_TO_ADDR
// end ;
33023: GO 32979
33025: POP
33026: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33027: LD_ADDR_VAR 0 6
33031: PUSH
33032: LD_VAR 0 6
33036: PPUSH
33037: LD_VAR 0 2
33041: PUSH
33042: LD_VAR 0 2
33046: ARRAY
33047: PPUSH
33048: LD_VAR 0 3
33052: PPUSH
33053: CALL_OW 1
33057: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33058: LD_ADDR_VAR 0 7
33062: PUSH
33063: LD_VAR 0 7
33067: PPUSH
33068: LD_VAR 0 7
33072: PPUSH
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 1
33082: ST_TO_ADDR
// for i = s_arr downto 2 do
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: DOUBLE
33089: LD_VAR 0 7
33093: INC
33094: ST_TO_ADDR
33095: LD_INT 2
33097: PUSH
33098: FOR_DOWNTO
33099: IFFALSE 33183
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33101: LD_ADDR_VAR 0 6
33105: PUSH
33106: LD_VAR 0 7
33110: PUSH
33111: LD_VAR 0 5
33115: PUSH
33116: LD_INT 1
33118: MINUS
33119: ARRAY
33120: PPUSH
33121: LD_VAR 0 2
33125: PUSH
33126: LD_VAR 0 5
33130: PUSH
33131: LD_INT 1
33133: MINUS
33134: ARRAY
33135: PPUSH
33136: LD_VAR 0 7
33140: PUSH
33141: LD_VAR 0 5
33145: ARRAY
33146: PPUSH
33147: CALL_OW 1
33151: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33152: LD_ADDR_VAR 0 7
33156: PUSH
33157: LD_VAR 0 7
33161: PPUSH
33162: LD_VAR 0 5
33166: PUSH
33167: LD_INT 1
33169: MINUS
33170: PPUSH
33171: LD_VAR 0 6
33175: PPUSH
33176: CALL_OW 1
33180: ST_TO_ADDR
// end ;
33181: GO 33098
33183: POP
33184: POP
// result := s_arr [ 1 ] ;
33185: LD_ADDR_VAR 0 4
33189: PUSH
33190: LD_VAR 0 7
33194: PUSH
33195: LD_INT 1
33197: ARRAY
33198: ST_TO_ADDR
// end ; end ;
33199: LD_VAR 0 4
33203: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
// if not list then
33208: LD_VAR 0 1
33212: NOT
33213: IFFALSE 33217
// exit ;
33215: GO 33308
// i := list [ pos1 ] ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_VAR 0 1
33226: PUSH
33227: LD_VAR 0 2
33231: ARRAY
33232: ST_TO_ADDR
// if not i then
33233: LD_VAR 0 5
33237: NOT
33238: IFFALSE 33242
// exit ;
33240: GO 33308
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33242: LD_ADDR_VAR 0 1
33246: PUSH
33247: LD_VAR 0 1
33251: PPUSH
33252: LD_VAR 0 2
33256: PPUSH
33257: LD_VAR 0 1
33261: PUSH
33262: LD_VAR 0 3
33266: ARRAY
33267: PPUSH
33268: CALL_OW 1
33272: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33273: LD_ADDR_VAR 0 1
33277: PUSH
33278: LD_VAR 0 1
33282: PPUSH
33283: LD_VAR 0 3
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: CALL_OW 1
33297: ST_TO_ADDR
// result := list ;
33298: LD_ADDR_VAR 0 4
33302: PUSH
33303: LD_VAR 0 1
33307: ST_TO_ADDR
// end ;
33308: LD_VAR 0 4
33312: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33313: LD_INT 0
33315: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33316: LD_ADDR_VAR 0 5
33320: PUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL_OW 250
33330: PPUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 251
33340: PPUSH
33341: LD_VAR 0 2
33345: PPUSH
33346: LD_VAR 0 3
33350: PPUSH
33351: LD_VAR 0 4
33355: PPUSH
33356: CALL 33366 0 5
33360: ST_TO_ADDR
// end ;
33361: LD_VAR 0 5
33365: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
// if not list then
33372: LD_VAR 0 3
33376: NOT
33377: IFFALSE 33381
// exit ;
33379: GO 33769
// result := [ ] ;
33381: LD_ADDR_VAR 0 6
33385: PUSH
33386: EMPTY
33387: ST_TO_ADDR
// for i in list do
33388: LD_ADDR_VAR 0 7
33392: PUSH
33393: LD_VAR 0 3
33397: PUSH
33398: FOR_IN
33399: IFFALSE 33601
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33401: LD_ADDR_VAR 0 9
33405: PUSH
33406: LD_VAR 0 7
33410: PPUSH
33411: LD_VAR 0 1
33415: PPUSH
33416: LD_VAR 0 2
33420: PPUSH
33421: CALL_OW 297
33425: ST_TO_ADDR
// if not result then
33426: LD_VAR 0 6
33430: NOT
33431: IFFALSE 33457
// result := [ [ i , tmp ] ] else
33433: LD_ADDR_VAR 0 6
33437: PUSH
33438: LD_VAR 0 7
33442: PUSH
33443: LD_VAR 0 9
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: ST_TO_ADDR
33455: GO 33599
// begin if result [ result ] [ 2 ] < tmp then
33457: LD_VAR 0 6
33461: PUSH
33462: LD_VAR 0 6
33466: ARRAY
33467: PUSH
33468: LD_INT 2
33470: ARRAY
33471: PUSH
33472: LD_VAR 0 9
33476: LESS
33477: IFFALSE 33519
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33479: LD_ADDR_VAR 0 6
33483: PUSH
33484: LD_VAR 0 6
33488: PPUSH
33489: LD_VAR 0 6
33493: PUSH
33494: LD_INT 1
33496: PLUS
33497: PPUSH
33498: LD_VAR 0 7
33502: PUSH
33503: LD_VAR 0 9
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PPUSH
33512: CALL_OW 2
33516: ST_TO_ADDR
33517: GO 33599
// for j = 1 to result do
33519: LD_ADDR_VAR 0 8
33523: PUSH
33524: DOUBLE
33525: LD_INT 1
33527: DEC
33528: ST_TO_ADDR
33529: LD_VAR 0 6
33533: PUSH
33534: FOR_TO
33535: IFFALSE 33597
// begin if tmp < result [ j ] [ 2 ] then
33537: LD_VAR 0 9
33541: PUSH
33542: LD_VAR 0 6
33546: PUSH
33547: LD_VAR 0 8
33551: ARRAY
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: LESS
33557: IFFALSE 33595
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33559: LD_ADDR_VAR 0 6
33563: PUSH
33564: LD_VAR 0 6
33568: PPUSH
33569: LD_VAR 0 8
33573: PPUSH
33574: LD_VAR 0 7
33578: PUSH
33579: LD_VAR 0 9
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PPUSH
33588: CALL_OW 2
33592: ST_TO_ADDR
// break ;
33593: GO 33597
// end ; end ;
33595: GO 33534
33597: POP
33598: POP
// end ; end ;
33599: GO 33398
33601: POP
33602: POP
// if result and not asc then
33603: LD_VAR 0 6
33607: PUSH
33608: LD_VAR 0 4
33612: NOT
33613: AND
33614: IFFALSE 33689
// begin tmp := result ;
33616: LD_ADDR_VAR 0 9
33620: PUSH
33621: LD_VAR 0 6
33625: ST_TO_ADDR
// for i = tmp downto 1 do
33626: LD_ADDR_VAR 0 7
33630: PUSH
33631: DOUBLE
33632: LD_VAR 0 9
33636: INC
33637: ST_TO_ADDR
33638: LD_INT 1
33640: PUSH
33641: FOR_DOWNTO
33642: IFFALSE 33687
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33644: LD_ADDR_VAR 0 6
33648: PUSH
33649: LD_VAR 0 6
33653: PPUSH
33654: LD_VAR 0 9
33658: PUSH
33659: LD_VAR 0 7
33663: MINUS
33664: PUSH
33665: LD_INT 1
33667: PLUS
33668: PPUSH
33669: LD_VAR 0 9
33673: PUSH
33674: LD_VAR 0 7
33678: ARRAY
33679: PPUSH
33680: CALL_OW 1
33684: ST_TO_ADDR
33685: GO 33641
33687: POP
33688: POP
// end ; tmp := [ ] ;
33689: LD_ADDR_VAR 0 9
33693: PUSH
33694: EMPTY
33695: ST_TO_ADDR
// if mode then
33696: LD_VAR 0 5
33700: IFFALSE 33769
// begin for i = 1 to result do
33702: LD_ADDR_VAR 0 7
33706: PUSH
33707: DOUBLE
33708: LD_INT 1
33710: DEC
33711: ST_TO_ADDR
33712: LD_VAR 0 6
33716: PUSH
33717: FOR_TO
33718: IFFALSE 33757
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33720: LD_ADDR_VAR 0 9
33724: PUSH
33725: LD_VAR 0 9
33729: PPUSH
33730: LD_VAR 0 7
33734: PPUSH
33735: LD_VAR 0 6
33739: PUSH
33740: LD_VAR 0 7
33744: ARRAY
33745: PUSH
33746: LD_INT 1
33748: ARRAY
33749: PPUSH
33750: CALL_OW 1
33754: ST_TO_ADDR
33755: GO 33717
33757: POP
33758: POP
// result := tmp ;
33759: LD_ADDR_VAR 0 6
33763: PUSH
33764: LD_VAR 0 9
33768: ST_TO_ADDR
// end ; end ;
33769: LD_VAR 0 6
33773: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
// if not x or not y then
33804: LD_VAR 0 2
33808: NOT
33809: PUSH
33810: LD_VAR 0 3
33814: NOT
33815: OR
33816: IFFALSE 33820
// exit ;
33818: GO 35466
// if not range then
33820: LD_VAR 0 4
33824: NOT
33825: IFFALSE 33835
// range := 10 ;
33827: LD_ADDR_VAR 0 4
33831: PUSH
33832: LD_INT 10
33834: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33835: LD_ADDR_VAR 0 8
33839: PUSH
33840: LD_INT 81
33842: PUSH
33843: LD_VAR 0 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 92
33854: PUSH
33855: LD_VAR 0 2
33859: PUSH
33860: LD_VAR 0 3
33864: PUSH
33865: LD_VAR 0 4
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: LD_INT 21
33881: PUSH
33882: LD_INT 3
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: PPUSH
33898: CALL_OW 69
33902: ST_TO_ADDR
// if not tmp then
33903: LD_VAR 0 8
33907: NOT
33908: IFFALSE 33912
// exit ;
33910: GO 35466
// for i in tmp do
33912: LD_ADDR_VAR 0 6
33916: PUSH
33917: LD_VAR 0 8
33921: PUSH
33922: FOR_IN
33923: IFFALSE 35441
// begin points := [ 0 , 0 , 0 ] ;
33925: LD_ADDR_VAR 0 9
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// bpoints := 1 ;
33944: LD_ADDR_VAR 0 10
33948: PUSH
33949: LD_INT 1
33951: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33952: LD_VAR 0 6
33956: PPUSH
33957: CALL_OW 247
33961: PUSH
33962: LD_INT 1
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 34548
33970: POP
// begin if GetClass ( i ) = 1 then
33971: LD_VAR 0 6
33975: PPUSH
33976: CALL_OW 257
33980: PUSH
33981: LD_INT 1
33983: EQUAL
33984: IFFALSE 34005
// points := [ 10 , 5 , 3 ] ;
33986: LD_ADDR_VAR 0 9
33990: PUSH
33991: LD_INT 10
33993: PUSH
33994: LD_INT 5
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34005: LD_VAR 0 6
34009: PPUSH
34010: CALL_OW 257
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 4
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: IN
34029: IFFALSE 34050
// points := [ 3 , 2 , 1 ] ;
34031: LD_ADDR_VAR 0 9
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34050: LD_VAR 0 6
34054: PPUSH
34055: CALL_OW 257
34059: PUSH
34060: LD_INT 5
34062: EQUAL
34063: IFFALSE 34084
// points := [ 130 , 5 , 2 ] ;
34065: LD_ADDR_VAR 0 9
34069: PUSH
34070: LD_INT 130
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34084: LD_VAR 0 6
34088: PPUSH
34089: CALL_OW 257
34093: PUSH
34094: LD_INT 8
34096: EQUAL
34097: IFFALSE 34118
// points := [ 35 , 35 , 30 ] ;
34099: LD_ADDR_VAR 0 9
34103: PUSH
34104: LD_INT 35
34106: PUSH
34107: LD_INT 35
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34118: LD_VAR 0 6
34122: PPUSH
34123: CALL_OW 257
34127: PUSH
34128: LD_INT 9
34130: EQUAL
34131: IFFALSE 34152
// points := [ 20 , 55 , 40 ] ;
34133: LD_ADDR_VAR 0 9
34137: PUSH
34138: LD_INT 20
34140: PUSH
34141: LD_INT 55
34143: PUSH
34144: LD_INT 40
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34152: LD_VAR 0 6
34156: PPUSH
34157: CALL_OW 257
34161: PUSH
34162: LD_INT 12
34164: PUSH
34165: LD_INT 16
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: IN
34172: IFFALSE 34193
// points := [ 5 , 3 , 2 ] ;
34174: LD_ADDR_VAR 0 9
34178: PUSH
34179: LD_INT 5
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34193: LD_VAR 0 6
34197: PPUSH
34198: CALL_OW 257
34202: PUSH
34203: LD_INT 17
34205: EQUAL
34206: IFFALSE 34227
// points := [ 100 , 50 , 75 ] ;
34208: LD_ADDR_VAR 0 9
34212: PUSH
34213: LD_INT 100
34215: PUSH
34216: LD_INT 50
34218: PUSH
34219: LD_INT 75
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34227: LD_VAR 0 6
34231: PPUSH
34232: CALL_OW 257
34236: PUSH
34237: LD_INT 15
34239: EQUAL
34240: IFFALSE 34261
// points := [ 10 , 5 , 3 ] ;
34242: LD_ADDR_VAR 0 9
34246: PUSH
34247: LD_INT 10
34249: PUSH
34250: LD_INT 5
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34261: LD_VAR 0 6
34265: PPUSH
34266: CALL_OW 257
34270: PUSH
34271: LD_INT 14
34273: EQUAL
34274: IFFALSE 34295
// points := [ 10 , 0 , 0 ] ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: LD_INT 10
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 257
34304: PUSH
34305: LD_INT 11
34307: EQUAL
34308: IFFALSE 34329
// points := [ 30 , 10 , 5 ] ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_INT 30
34317: PUSH
34318: LD_INT 10
34320: PUSH
34321: LD_INT 5
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34329: LD_VAR 0 1
34333: PPUSH
34334: LD_INT 5
34336: PPUSH
34337: CALL_OW 321
34341: PUSH
34342: LD_INT 2
34344: EQUAL
34345: IFFALSE 34362
// bpoints := bpoints * 1.8 ;
34347: LD_ADDR_VAR 0 10
34351: PUSH
34352: LD_VAR 0 10
34356: PUSH
34357: LD_REAL  1.80000000000000E+0000
34360: MUL
34361: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34362: LD_VAR 0 6
34366: PPUSH
34367: CALL_OW 257
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 4
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: IN
34390: PUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: LD_INT 51
34398: PPUSH
34399: CALL_OW 321
34403: PUSH
34404: LD_INT 2
34406: EQUAL
34407: AND
34408: IFFALSE 34425
// bpoints := bpoints * 1.2 ;
34410: LD_ADDR_VAR 0 10
34414: PUSH
34415: LD_VAR 0 10
34419: PUSH
34420: LD_REAL  1.20000000000000E+0000
34423: MUL
34424: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 257
34434: PUSH
34435: LD_INT 5
34437: PUSH
34438: LD_INT 7
34440: PUSH
34441: LD_INT 9
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: IN
34449: PUSH
34450: LD_VAR 0 1
34454: PPUSH
34455: LD_INT 52
34457: PPUSH
34458: CALL_OW 321
34462: PUSH
34463: LD_INT 2
34465: EQUAL
34466: AND
34467: IFFALSE 34484
// bpoints := bpoints * 1.5 ;
34469: LD_ADDR_VAR 0 10
34473: PUSH
34474: LD_VAR 0 10
34478: PUSH
34479: LD_REAL  1.50000000000000E+0000
34482: MUL
34483: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34484: LD_VAR 0 1
34488: PPUSH
34489: LD_INT 66
34491: PPUSH
34492: CALL_OW 321
34496: PUSH
34497: LD_INT 2
34499: EQUAL
34500: IFFALSE 34517
// bpoints := bpoints * 1.1 ;
34502: LD_ADDR_VAR 0 10
34506: PUSH
34507: LD_VAR 0 10
34511: PUSH
34512: LD_REAL  1.10000000000000E+0000
34515: MUL
34516: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34517: LD_ADDR_VAR 0 10
34521: PUSH
34522: LD_VAR 0 10
34526: PUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: LD_INT 1
34534: PPUSH
34535: CALL_OW 259
34539: PUSH
34540: LD_REAL  1.15000000000000E+0000
34543: MUL
34544: MUL
34545: ST_TO_ADDR
// end ; unit_vehicle :
34546: GO 35370
34548: LD_INT 2
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 35358
34556: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 264
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 42
34572: PUSH
34573: LD_INT 24
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: IN
34581: IFFALSE 34602
// points := [ 25 , 5 , 3 ] ;
34583: LD_ADDR_VAR 0 9
34587: PUSH
34588: LD_INT 25
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34602: LD_VAR 0 6
34606: PPUSH
34607: CALL_OW 264
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 43
34617: PUSH
34618: LD_INT 25
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: IN
34626: IFFALSE 34647
// points := [ 40 , 15 , 5 ] ;
34628: LD_ADDR_VAR 0 9
34632: PUSH
34633: LD_INT 40
34635: PUSH
34636: LD_INT 15
34638: PUSH
34639: LD_INT 5
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34647: LD_VAR 0 6
34651: PPUSH
34652: CALL_OW 264
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: LD_INT 23
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: IN
34667: IFFALSE 34688
// points := [ 7 , 25 , 8 ] ;
34669: LD_ADDR_VAR 0 9
34673: PUSH
34674: LD_INT 7
34676: PUSH
34677: LD_INT 25
34679: PUSH
34680: LD_INT 8
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34688: LD_VAR 0 6
34692: PPUSH
34693: CALL_OW 264
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 27
34703: PUSH
34704: LD_INT 44
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: IN
34712: IFFALSE 34733
// points := [ 14 , 50 , 16 ] ;
34714: LD_ADDR_VAR 0 9
34718: PUSH
34719: LD_INT 14
34721: PUSH
34722: LD_INT 50
34724: PUSH
34725: LD_INT 16
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34733: LD_VAR 0 6
34737: PPUSH
34738: CALL_OW 264
34742: PUSH
34743: LD_INT 6
34745: PUSH
34746: LD_INT 46
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: IN
34753: IFFALSE 34774
// points := [ 32 , 120 , 70 ] ;
34755: LD_ADDR_VAR 0 9
34759: PUSH
34760: LD_INT 32
34762: PUSH
34763: LD_INT 120
34765: PUSH
34766: LD_INT 70
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34774: LD_VAR 0 6
34778: PPUSH
34779: CALL_OW 264
34783: PUSH
34784: LD_INT 7
34786: PUSH
34787: LD_INT 28
34789: PUSH
34790: LD_INT 45
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: IN
34798: IFFALSE 34819
// points := [ 35 , 20 , 45 ] ;
34800: LD_ADDR_VAR 0 9
34804: PUSH
34805: LD_INT 35
34807: PUSH
34808: LD_INT 20
34810: PUSH
34811: LD_INT 45
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34819: LD_VAR 0 6
34823: PPUSH
34824: CALL_OW 264
34828: PUSH
34829: LD_INT 47
34831: PUSH
34832: EMPTY
34833: LIST
34834: IN
34835: IFFALSE 34856
// points := [ 67 , 45 , 75 ] ;
34837: LD_ADDR_VAR 0 9
34841: PUSH
34842: LD_INT 67
34844: PUSH
34845: LD_INT 45
34847: PUSH
34848: LD_INT 75
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34856: LD_VAR 0 6
34860: PPUSH
34861: CALL_OW 264
34865: PUSH
34866: LD_INT 26
34868: PUSH
34869: EMPTY
34870: LIST
34871: IN
34872: IFFALSE 34893
// points := [ 120 , 30 , 80 ] ;
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_INT 120
34881: PUSH
34882: LD_INT 30
34884: PUSH
34885: LD_INT 80
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34893: LD_VAR 0 6
34897: PPUSH
34898: CALL_OW 264
34902: PUSH
34903: LD_INT 22
34905: PUSH
34906: EMPTY
34907: LIST
34908: IN
34909: IFFALSE 34930
// points := [ 40 , 1 , 1 ] ;
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: LD_INT 40
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34930: LD_VAR 0 6
34934: PPUSH
34935: CALL_OW 264
34939: PUSH
34940: LD_INT 29
34942: PUSH
34943: EMPTY
34944: LIST
34945: IN
34946: IFFALSE 34967
// points := [ 70 , 200 , 400 ] ;
34948: LD_ADDR_VAR 0 9
34952: PUSH
34953: LD_INT 70
34955: PUSH
34956: LD_INT 200
34958: PUSH
34959: LD_INT 400
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34967: LD_VAR 0 6
34971: PPUSH
34972: CALL_OW 264
34976: PUSH
34977: LD_INT 14
34979: PUSH
34980: LD_INT 53
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: IN
34987: IFFALSE 35008
// points := [ 40 , 10 , 20 ] ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_INT 40
34996: PUSH
34997: LD_INT 10
34999: PUSH
35000: LD_INT 20
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 264
35017: PUSH
35018: LD_INT 9
35020: PUSH
35021: EMPTY
35022: LIST
35023: IN
35024: IFFALSE 35045
// points := [ 5 , 70 , 20 ] ;
35026: LD_ADDR_VAR 0 9
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 70
35036: PUSH
35037: LD_INT 20
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 264
35054: PUSH
35055: LD_INT 10
35057: PUSH
35058: EMPTY
35059: LIST
35060: IN
35061: IFFALSE 35082
// points := [ 35 , 110 , 70 ] ;
35063: LD_ADDR_VAR 0 9
35067: PUSH
35068: LD_INT 35
35070: PUSH
35071: LD_INT 110
35073: PUSH
35074: LD_INT 70
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35082: LD_VAR 0 6
35086: PPUSH
35087: CALL_OW 265
35091: PUSH
35092: LD_INT 25
35094: EQUAL
35095: IFFALSE 35116
// points := [ 80 , 65 , 100 ] ;
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_INT 80
35104: PUSH
35105: LD_INT 65
35107: PUSH
35108: LD_INT 100
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 263
35125: PUSH
35126: LD_INT 1
35128: EQUAL
35129: IFFALSE 35164
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35131: LD_ADDR_VAR 0 10
35135: PUSH
35136: LD_VAR 0 10
35140: PUSH
35141: LD_VAR 0 6
35145: PPUSH
35146: CALL_OW 311
35150: PPUSH
35151: LD_INT 3
35153: PPUSH
35154: CALL_OW 259
35158: PUSH
35159: LD_INT 4
35161: MUL
35162: MUL
35163: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35164: LD_VAR 0 6
35168: PPUSH
35169: CALL_OW 263
35173: PUSH
35174: LD_INT 2
35176: EQUAL
35177: IFFALSE 35228
// begin j := IsControledBy ( i ) ;
35179: LD_ADDR_VAR 0 7
35183: PUSH
35184: LD_VAR 0 6
35188: PPUSH
35189: CALL_OW 312
35193: ST_TO_ADDR
// if j then
35194: LD_VAR 0 7
35198: IFFALSE 35228
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35200: LD_ADDR_VAR 0 10
35204: PUSH
35205: LD_VAR 0 10
35209: PUSH
35210: LD_VAR 0 7
35214: PPUSH
35215: LD_INT 3
35217: PPUSH
35218: CALL_OW 259
35222: PUSH
35223: LD_INT 3
35225: MUL
35226: MUL
35227: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35228: LD_VAR 0 6
35232: PPUSH
35233: CALL_OW 264
35237: PUSH
35238: LD_INT 5
35240: PUSH
35241: LD_INT 6
35243: PUSH
35244: LD_INT 46
35246: PUSH
35247: LD_INT 44
35249: PUSH
35250: LD_INT 47
35252: PUSH
35253: LD_INT 45
35255: PUSH
35256: LD_INT 28
35258: PUSH
35259: LD_INT 7
35261: PUSH
35262: LD_INT 27
35264: PUSH
35265: LD_INT 29
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: IN
35280: PUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: LD_INT 52
35288: PPUSH
35289: CALL_OW 321
35293: PUSH
35294: LD_INT 2
35296: EQUAL
35297: AND
35298: IFFALSE 35315
// bpoints := bpoints * 1.2 ;
35300: LD_ADDR_VAR 0 10
35304: PUSH
35305: LD_VAR 0 10
35309: PUSH
35310: LD_REAL  1.20000000000000E+0000
35313: MUL
35314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35315: LD_VAR 0 6
35319: PPUSH
35320: CALL_OW 264
35324: PUSH
35325: LD_INT 6
35327: PUSH
35328: LD_INT 46
35330: PUSH
35331: LD_INT 47
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: IN
35339: IFFALSE 35356
// bpoints := bpoints * 1.2 ;
35341: LD_ADDR_VAR 0 10
35345: PUSH
35346: LD_VAR 0 10
35350: PUSH
35351: LD_REAL  1.20000000000000E+0000
35354: MUL
35355: ST_TO_ADDR
// end ; unit_building :
35356: GO 35370
35358: LD_INT 3
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35366
35364: GO 35369
35366: POP
// ; end ;
35367: GO 35370
35369: POP
// for j = 1 to 3 do
35370: LD_ADDR_VAR 0 7
35374: PUSH
35375: DOUBLE
35376: LD_INT 1
35378: DEC
35379: ST_TO_ADDR
35380: LD_INT 3
35382: PUSH
35383: FOR_TO
35384: IFFALSE 35437
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35386: LD_ADDR_VAR 0 5
35390: PUSH
35391: LD_VAR 0 5
35395: PPUSH
35396: LD_VAR 0 7
35400: PPUSH
35401: LD_VAR 0 5
35405: PUSH
35406: LD_VAR 0 7
35410: ARRAY
35411: PUSH
35412: LD_VAR 0 9
35416: PUSH
35417: LD_VAR 0 7
35421: ARRAY
35422: PUSH
35423: LD_VAR 0 10
35427: MUL
35428: PLUS
35429: PPUSH
35430: CALL_OW 1
35434: ST_TO_ADDR
35435: GO 35383
35437: POP
35438: POP
// end ;
35439: GO 33922
35441: POP
35442: POP
// result := Replace ( result , 4 , tmp ) ;
35443: LD_ADDR_VAR 0 5
35447: PUSH
35448: LD_VAR 0 5
35452: PPUSH
35453: LD_INT 4
35455: PPUSH
35456: LD_VAR 0 8
35460: PPUSH
35461: CALL_OW 1
35465: ST_TO_ADDR
// end ;
35466: LD_VAR 0 5
35470: RET
// export function DangerAtRange ( unit , range ) ; begin
35471: LD_INT 0
35473: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35474: LD_ADDR_VAR 0 3
35478: PUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 255
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 250
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 251
35508: PPUSH
35509: LD_VAR 0 2
35513: PPUSH
35514: CALL 33774 0 4
35518: ST_TO_ADDR
// end ;
35519: LD_VAR 0 3
35523: RET
// export function DangerInArea ( side , area ) ; begin
35524: LD_INT 0
35526: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: LD_INT 81
35539: PUSH
35540: LD_VAR 0 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PPUSH
35549: CALL_OW 70
35553: ST_TO_ADDR
// end ;
35554: LD_VAR 0 3
35558: RET
// export function IsExtension ( b ) ; begin
35559: LD_INT 0
35561: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35562: LD_ADDR_VAR 0 2
35566: PUSH
35567: LD_VAR 0 1
35571: PUSH
35572: LD_INT 23
35574: PUSH
35575: LD_INT 20
35577: PUSH
35578: LD_INT 22
35580: PUSH
35581: LD_INT 17
35583: PUSH
35584: LD_INT 24
35586: PUSH
35587: LD_INT 21
35589: PUSH
35590: LD_INT 19
35592: PUSH
35593: LD_INT 16
35595: PUSH
35596: LD_INT 25
35598: PUSH
35599: LD_INT 18
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: IN
35614: ST_TO_ADDR
// end ;
35615: LD_VAR 0 2
35619: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
35624: PPUSH
// result := [ ] ;
35625: LD_ADDR_VAR 0 4
35629: PUSH
35630: EMPTY
35631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35632: LD_ADDR_VAR 0 5
35636: PUSH
35637: LD_VAR 0 2
35641: PPUSH
35642: LD_INT 21
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PPUSH
35652: CALL_OW 70
35656: ST_TO_ADDR
// if not tmp then
35657: LD_VAR 0 5
35661: NOT
35662: IFFALSE 35666
// exit ;
35664: GO 35730
// if checkLink then
35666: LD_VAR 0 3
35670: IFFALSE 35720
// begin for i in tmp do
35672: LD_ADDR_VAR 0 6
35676: PUSH
35677: LD_VAR 0 5
35681: PUSH
35682: FOR_IN
35683: IFFALSE 35718
// if GetBase ( i ) <> base then
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 274
35694: PUSH
35695: LD_VAR 0 1
35699: NONEQUAL
35700: IFFALSE 35716
// ComLinkToBase ( base , i ) ;
35702: LD_VAR 0 1
35706: PPUSH
35707: LD_VAR 0 6
35711: PPUSH
35712: CALL_OW 169
35716: GO 35682
35718: POP
35719: POP
// end ; result := tmp ;
35720: LD_ADDR_VAR 0 4
35724: PUSH
35725: LD_VAR 0 5
35729: ST_TO_ADDR
// end ;
35730: LD_VAR 0 4
35734: RET
// export function ComComplete ( units , b ) ; var i ; begin
35735: LD_INT 0
35737: PPUSH
35738: PPUSH
// if not units then
35739: LD_VAR 0 1
35743: NOT
35744: IFFALSE 35748
// exit ;
35746: GO 35838
// for i in units do
35748: LD_ADDR_VAR 0 4
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: FOR_IN
35759: IFFALSE 35836
// if BuildingStatus ( b ) = bs_build then
35761: LD_VAR 0 2
35765: PPUSH
35766: CALL_OW 461
35770: PUSH
35771: LD_INT 1
35773: EQUAL
35774: IFFALSE 35834
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35776: LD_VAR 0 4
35780: PPUSH
35781: LD_STRING h
35783: PUSH
35784: LD_VAR 0 2
35788: PPUSH
35789: CALL_OW 250
35793: PUSH
35794: LD_VAR 0 2
35798: PPUSH
35799: CALL_OW 251
35803: PUSH
35804: LD_VAR 0 2
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: PPUSH
35830: CALL_OW 446
35834: GO 35758
35836: POP
35837: POP
// end ;
35838: LD_VAR 0 3
35842: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35851: LD_VAR 0 1
35855: NOT
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 263
35866: PUSH
35867: LD_INT 2
35869: EQUAL
35870: NOT
35871: OR
35872: IFFALSE 35876
// exit ;
35874: GO 36192
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35876: LD_ADDR_VAR 0 6
35880: PUSH
35881: LD_INT 22
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 255
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 30
35903: PUSH
35904: LD_INT 36
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 34
35913: PUSH
35914: LD_INT 31
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PPUSH
35930: CALL_OW 69
35934: ST_TO_ADDR
// if not tmp then
35935: LD_VAR 0 6
35939: NOT
35940: IFFALSE 35944
// exit ;
35942: GO 36192
// result := [ ] ;
35944: LD_ADDR_VAR 0 2
35948: PUSH
35949: EMPTY
35950: ST_TO_ADDR
// for i in tmp do
35951: LD_ADDR_VAR 0 3
35955: PUSH
35956: LD_VAR 0 6
35960: PUSH
35961: FOR_IN
35962: IFFALSE 36033
// begin t := UnitsInside ( i ) ;
35964: LD_ADDR_VAR 0 4
35968: PUSH
35969: LD_VAR 0 3
35973: PPUSH
35974: CALL_OW 313
35978: ST_TO_ADDR
// if t then
35979: LD_VAR 0 4
35983: IFFALSE 36031
// for j in t do
35985: LD_ADDR_VAR 0 7
35989: PUSH
35990: LD_VAR 0 4
35994: PUSH
35995: FOR_IN
35996: IFFALSE 36029
// result := Insert ( result , result + 1 , j ) ;
35998: LD_ADDR_VAR 0 2
36002: PUSH
36003: LD_VAR 0 2
36007: PPUSH
36008: LD_VAR 0 2
36012: PUSH
36013: LD_INT 1
36015: PLUS
36016: PPUSH
36017: LD_VAR 0 7
36021: PPUSH
36022: CALL_OW 2
36026: ST_TO_ADDR
36027: GO 35995
36029: POP
36030: POP
// end ;
36031: GO 35961
36033: POP
36034: POP
// if not result then
36035: LD_VAR 0 2
36039: NOT
36040: IFFALSE 36044
// exit ;
36042: GO 36192
// mech := result [ 1 ] ;
36044: LD_ADDR_VAR 0 5
36048: PUSH
36049: LD_VAR 0 2
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: ST_TO_ADDR
// if result > 1 then
36058: LD_VAR 0 2
36062: PUSH
36063: LD_INT 1
36065: GREATER
36066: IFFALSE 36178
// for i = 2 to result do
36068: LD_ADDR_VAR 0 3
36072: PUSH
36073: DOUBLE
36074: LD_INT 2
36076: DEC
36077: ST_TO_ADDR
36078: LD_VAR 0 2
36082: PUSH
36083: FOR_TO
36084: IFFALSE 36176
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36086: LD_ADDR_VAR 0 4
36090: PUSH
36091: LD_VAR 0 2
36095: PUSH
36096: LD_VAR 0 3
36100: ARRAY
36101: PPUSH
36102: LD_INT 3
36104: PPUSH
36105: CALL_OW 259
36109: PUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_VAR 0 3
36119: ARRAY
36120: PPUSH
36121: CALL_OW 432
36125: MINUS
36126: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36127: LD_VAR 0 4
36131: PUSH
36132: LD_VAR 0 5
36136: PPUSH
36137: LD_INT 3
36139: PPUSH
36140: CALL_OW 259
36144: PUSH
36145: LD_VAR 0 5
36149: PPUSH
36150: CALL_OW 432
36154: MINUS
36155: GREATEREQUAL
36156: IFFALSE 36174
// mech := result [ i ] ;
36158: LD_ADDR_VAR 0 5
36162: PUSH
36163: LD_VAR 0 2
36167: PUSH
36168: LD_VAR 0 3
36172: ARRAY
36173: ST_TO_ADDR
// end ;
36174: GO 36083
36176: POP
36177: POP
// ComLinkTo ( vehicle , mech ) ;
36178: LD_VAR 0 1
36182: PPUSH
36183: LD_VAR 0 5
36187: PPUSH
36188: CALL_OW 135
// end ;
36192: LD_VAR 0 2
36196: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36197: LD_INT 0
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
// result := [ ] ;
36212: LD_ADDR_VAR 0 7
36216: PUSH
36217: EMPTY
36218: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL_OW 266
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: IN
36239: NOT
36240: IFFALSE 36244
// exit ;
36242: GO 37878
// if name then
36244: LD_VAR 0 3
36248: IFFALSE 36264
// SetBName ( base_dep , name ) ;
36250: LD_VAR 0 1
36254: PPUSH
36255: LD_VAR 0 3
36259: PPUSH
36260: CALL_OW 500
// base := GetBase ( base_dep ) ;
36264: LD_ADDR_VAR 0 15
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 274
36278: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36279: LD_ADDR_VAR 0 16
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 255
36293: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36294: LD_ADDR_VAR 0 17
36298: PUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 248
36308: ST_TO_ADDR
// if sources then
36309: LD_VAR 0 5
36313: IFFALSE 36360
// for i = 1 to 3 do
36315: LD_ADDR_VAR 0 8
36319: PUSH
36320: DOUBLE
36321: LD_INT 1
36323: DEC
36324: ST_TO_ADDR
36325: LD_INT 3
36327: PUSH
36328: FOR_TO
36329: IFFALSE 36358
// AddResourceType ( base , i , sources [ i ] ) ;
36331: LD_VAR 0 15
36335: PPUSH
36336: LD_VAR 0 8
36340: PPUSH
36341: LD_VAR 0 5
36345: PUSH
36346: LD_VAR 0 8
36350: ARRAY
36351: PPUSH
36352: CALL_OW 276
36356: GO 36328
36358: POP
36359: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36360: LD_ADDR_VAR 0 18
36364: PUSH
36365: LD_VAR 0 15
36369: PPUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_INT 1
36377: PPUSH
36378: CALL 35620 0 3
36382: ST_TO_ADDR
// InitHc ;
36383: CALL_OW 19
// InitUc ;
36387: CALL_OW 18
// uc_side := side ;
36391: LD_ADDR_OWVAR 20
36395: PUSH
36396: LD_VAR 0 16
36400: ST_TO_ADDR
// uc_nation := nation ;
36401: LD_ADDR_OWVAR 21
36405: PUSH
36406: LD_VAR 0 17
36410: ST_TO_ADDR
// if buildings then
36411: LD_VAR 0 18
36415: IFFALSE 37737
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36417: LD_ADDR_VAR 0 19
36421: PUSH
36422: LD_VAR 0 18
36426: PPUSH
36427: LD_INT 2
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: LD_INT 29
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 30
36442: PUSH
36443: LD_INT 30
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: PPUSH
36455: CALL_OW 72
36459: ST_TO_ADDR
// if tmp then
36460: LD_VAR 0 19
36464: IFFALSE 36512
// for i in tmp do
36466: LD_ADDR_VAR 0 8
36470: PUSH
36471: LD_VAR 0 19
36475: PUSH
36476: FOR_IN
36477: IFFALSE 36510
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36479: LD_VAR 0 8
36483: PPUSH
36484: CALL_OW 250
36488: PPUSH
36489: LD_VAR 0 8
36493: PPUSH
36494: CALL_OW 251
36498: PPUSH
36499: LD_VAR 0 16
36503: PPUSH
36504: CALL_OW 441
36508: GO 36476
36510: POP
36511: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36512: LD_VAR 0 18
36516: PPUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 30
36522: PUSH
36523: LD_INT 32
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 33
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: PPUSH
36545: CALL_OW 72
36549: IFFALSE 36637
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36551: LD_ADDR_VAR 0 8
36555: PUSH
36556: LD_VAR 0 18
36560: PPUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 30
36566: PUSH
36567: LD_INT 32
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 30
36576: PUSH
36577: LD_INT 33
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 72
36593: PUSH
36594: FOR_IN
36595: IFFALSE 36635
// begin if not GetBWeapon ( i ) then
36597: LD_VAR 0 8
36601: PPUSH
36602: CALL_OW 269
36606: NOT
36607: IFFALSE 36633
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36609: LD_VAR 0 8
36613: PPUSH
36614: LD_VAR 0 8
36618: PPUSH
36619: LD_VAR 0 2
36623: PPUSH
36624: CALL 37883 0 2
36628: PPUSH
36629: CALL_OW 431
// end ;
36633: GO 36594
36635: POP
36636: POP
// end ; for i = 1 to personel do
36637: LD_ADDR_VAR 0 8
36641: PUSH
36642: DOUBLE
36643: LD_INT 1
36645: DEC
36646: ST_TO_ADDR
36647: LD_VAR 0 6
36651: PUSH
36652: FOR_TO
36653: IFFALSE 37717
// begin if i > 4 then
36655: LD_VAR 0 8
36659: PUSH
36660: LD_INT 4
36662: GREATER
36663: IFFALSE 36667
// break ;
36665: GO 37717
// case i of 1 :
36667: LD_VAR 0 8
36671: PUSH
36672: LD_INT 1
36674: DOUBLE
36675: EQUAL
36676: IFTRUE 36680
36678: GO 36760
36680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36681: LD_ADDR_VAR 0 12
36685: PUSH
36686: LD_VAR 0 18
36690: PPUSH
36691: LD_INT 22
36693: PUSH
36694: LD_VAR 0 16
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 58
36705: PUSH
36706: EMPTY
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 30
36714: PUSH
36715: LD_INT 32
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 30
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 30
36734: PUSH
36735: LD_INT 5
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: PPUSH
36753: CALL_OW 72
36757: ST_TO_ADDR
36758: GO 36982
36760: LD_INT 2
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36768
36766: GO 36830
36768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: LD_VAR 0 18
36778: PPUSH
36779: LD_INT 22
36781: PUSH
36782: LD_VAR 0 16
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 30
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 30
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PPUSH
36823: CALL_OW 72
36827: ST_TO_ADDR
36828: GO 36982
36830: LD_INT 3
36832: DOUBLE
36833: EQUAL
36834: IFTRUE 36838
36836: GO 36900
36838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36839: LD_ADDR_VAR 0 12
36843: PUSH
36844: LD_VAR 0 18
36848: PPUSH
36849: LD_INT 22
36851: PUSH
36852: LD_VAR 0 16
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 30
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 30
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 72
36897: ST_TO_ADDR
36898: GO 36982
36900: LD_INT 4
36902: DOUBLE
36903: EQUAL
36904: IFTRUE 36908
36906: GO 36981
36908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36909: LD_ADDR_VAR 0 12
36913: PUSH
36914: LD_VAR 0 18
36918: PPUSH
36919: LD_INT 22
36921: PUSH
36922: LD_VAR 0 16
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: LD_INT 30
36936: PUSH
36937: LD_INT 6
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 30
36946: PUSH
36947: LD_INT 7
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 30
36956: PUSH
36957: LD_INT 8
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PPUSH
36974: CALL_OW 72
36978: ST_TO_ADDR
36979: GO 36982
36981: POP
// if i = 1 then
36982: LD_VAR 0 8
36986: PUSH
36987: LD_INT 1
36989: EQUAL
36990: IFFALSE 37101
// begin tmp := [ ] ;
36992: LD_ADDR_VAR 0 19
36996: PUSH
36997: EMPTY
36998: ST_TO_ADDR
// for j in f do
36999: LD_ADDR_VAR 0 9
37003: PUSH
37004: LD_VAR 0 12
37008: PUSH
37009: FOR_IN
37010: IFFALSE 37083
// if GetBType ( j ) = b_bunker then
37012: LD_VAR 0 9
37016: PPUSH
37017: CALL_OW 266
37021: PUSH
37022: LD_INT 32
37024: EQUAL
37025: IFFALSE 37052
// tmp := Insert ( tmp , 1 , j ) else
37027: LD_ADDR_VAR 0 19
37031: PUSH
37032: LD_VAR 0 19
37036: PPUSH
37037: LD_INT 1
37039: PPUSH
37040: LD_VAR 0 9
37044: PPUSH
37045: CALL_OW 2
37049: ST_TO_ADDR
37050: GO 37081
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37052: LD_ADDR_VAR 0 19
37056: PUSH
37057: LD_VAR 0 19
37061: PPUSH
37062: LD_VAR 0 19
37066: PUSH
37067: LD_INT 1
37069: PLUS
37070: PPUSH
37071: LD_VAR 0 9
37075: PPUSH
37076: CALL_OW 2
37080: ST_TO_ADDR
37081: GO 37009
37083: POP
37084: POP
// if tmp then
37085: LD_VAR 0 19
37089: IFFALSE 37101
// f := tmp ;
37091: LD_ADDR_VAR 0 12
37095: PUSH
37096: LD_VAR 0 19
37100: ST_TO_ADDR
// end ; x := personel [ i ] ;
37101: LD_ADDR_VAR 0 13
37105: PUSH
37106: LD_VAR 0 6
37110: PUSH
37111: LD_VAR 0 8
37115: ARRAY
37116: ST_TO_ADDR
// if x = - 1 then
37117: LD_VAR 0 13
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: EQUAL
37126: IFFALSE 37335
// begin for j in f do
37128: LD_ADDR_VAR 0 9
37132: PUSH
37133: LD_VAR 0 12
37137: PUSH
37138: FOR_IN
37139: IFFALSE 37331
// repeat InitHc ;
37141: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37145: LD_VAR 0 9
37149: PPUSH
37150: CALL_OW 266
37154: PUSH
37155: LD_INT 5
37157: EQUAL
37158: IFFALSE 37228
// begin if UnitsInside ( j ) < 3 then
37160: LD_VAR 0 9
37164: PPUSH
37165: CALL_OW 313
37169: PUSH
37170: LD_INT 3
37172: LESS
37173: IFFALSE 37209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37175: LD_INT 0
37177: PPUSH
37178: LD_INT 5
37180: PUSH
37181: LD_INT 8
37183: PUSH
37184: LD_INT 9
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: LD_VAR 0 17
37196: ARRAY
37197: PPUSH
37198: LD_VAR 0 4
37202: PPUSH
37203: CALL_OW 380
37207: GO 37226
// PrepareHuman ( false , i , skill ) ;
37209: LD_INT 0
37211: PPUSH
37212: LD_VAR 0 8
37216: PPUSH
37217: LD_VAR 0 4
37221: PPUSH
37222: CALL_OW 380
// end else
37226: GO 37245
// PrepareHuman ( false , i , skill ) ;
37228: LD_INT 0
37230: PPUSH
37231: LD_VAR 0 8
37235: PPUSH
37236: LD_VAR 0 4
37240: PPUSH
37241: CALL_OW 380
// un := CreateHuman ;
37245: LD_ADDR_VAR 0 14
37249: PUSH
37250: CALL_OW 44
37254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37255: LD_ADDR_VAR 0 7
37259: PUSH
37260: LD_VAR 0 7
37264: PPUSH
37265: LD_INT 1
37267: PPUSH
37268: LD_VAR 0 14
37272: PPUSH
37273: CALL_OW 2
37277: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37278: LD_VAR 0 14
37282: PPUSH
37283: LD_VAR 0 9
37287: PPUSH
37288: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37292: LD_VAR 0 9
37296: PPUSH
37297: CALL_OW 313
37301: PUSH
37302: LD_INT 6
37304: EQUAL
37305: PUSH
37306: LD_VAR 0 9
37310: PPUSH
37311: CALL_OW 266
37315: PUSH
37316: LD_INT 32
37318: PUSH
37319: LD_INT 31
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: IN
37326: OR
37327: IFFALSE 37141
37329: GO 37138
37331: POP
37332: POP
// end else
37333: GO 37715
// for j = 1 to x do
37335: LD_ADDR_VAR 0 9
37339: PUSH
37340: DOUBLE
37341: LD_INT 1
37343: DEC
37344: ST_TO_ADDR
37345: LD_VAR 0 13
37349: PUSH
37350: FOR_TO
37351: IFFALSE 37713
// begin InitHc ;
37353: CALL_OW 19
// if not f then
37357: LD_VAR 0 12
37361: NOT
37362: IFFALSE 37451
// begin PrepareHuman ( false , i , skill ) ;
37364: LD_INT 0
37366: PPUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_VAR 0 4
37376: PPUSH
37377: CALL_OW 380
// un := CreateHuman ;
37381: LD_ADDR_VAR 0 14
37385: PUSH
37386: CALL_OW 44
37390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37391: LD_ADDR_VAR 0 7
37395: PUSH
37396: LD_VAR 0 7
37400: PPUSH
37401: LD_INT 1
37403: PPUSH
37404: LD_VAR 0 14
37408: PPUSH
37409: CALL_OW 2
37413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37414: LD_VAR 0 14
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL_OW 250
37428: PPUSH
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 251
37438: PPUSH
37439: LD_INT 10
37441: PPUSH
37442: LD_INT 0
37444: PPUSH
37445: CALL_OW 50
// continue ;
37449: GO 37350
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37451: LD_VAR 0 12
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: CALL_OW 313
37464: PUSH
37465: LD_VAR 0 12
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PPUSH
37474: CALL_OW 266
37478: PUSH
37479: LD_INT 32
37481: PUSH
37482: LD_INT 31
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: IN
37489: AND
37490: PUSH
37491: LD_VAR 0 12
37495: PUSH
37496: LD_INT 1
37498: ARRAY
37499: PPUSH
37500: CALL_OW 313
37504: PUSH
37505: LD_INT 6
37507: EQUAL
37508: OR
37509: IFFALSE 37529
// f := Delete ( f , 1 ) ;
37511: LD_ADDR_VAR 0 12
37515: PUSH
37516: LD_VAR 0 12
37520: PPUSH
37521: LD_INT 1
37523: PPUSH
37524: CALL_OW 3
37528: ST_TO_ADDR
// if not f then
37529: LD_VAR 0 12
37533: NOT
37534: IFFALSE 37552
// begin x := x + 2 ;
37536: LD_ADDR_VAR 0 13
37540: PUSH
37541: LD_VAR 0 13
37545: PUSH
37546: LD_INT 2
37548: PLUS
37549: ST_TO_ADDR
// continue ;
37550: GO 37350
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37552: LD_VAR 0 12
37556: PUSH
37557: LD_INT 1
37559: ARRAY
37560: PPUSH
37561: CALL_OW 266
37565: PUSH
37566: LD_INT 5
37568: EQUAL
37569: IFFALSE 37643
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37571: LD_VAR 0 12
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PPUSH
37580: CALL_OW 313
37584: PUSH
37585: LD_INT 3
37587: LESS
37588: IFFALSE 37624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37590: LD_INT 0
37592: PPUSH
37593: LD_INT 5
37595: PUSH
37596: LD_INT 8
37598: PUSH
37599: LD_INT 9
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: PUSH
37607: LD_VAR 0 17
37611: ARRAY
37612: PPUSH
37613: LD_VAR 0 4
37617: PPUSH
37618: CALL_OW 380
37622: GO 37641
// PrepareHuman ( false , i , skill ) ;
37624: LD_INT 0
37626: PPUSH
37627: LD_VAR 0 8
37631: PPUSH
37632: LD_VAR 0 4
37636: PPUSH
37637: CALL_OW 380
// end else
37641: GO 37660
// PrepareHuman ( false , i , skill ) ;
37643: LD_INT 0
37645: PPUSH
37646: LD_VAR 0 8
37650: PPUSH
37651: LD_VAR 0 4
37655: PPUSH
37656: CALL_OW 380
// un := CreateHuman ;
37660: LD_ADDR_VAR 0 14
37664: PUSH
37665: CALL_OW 44
37669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37670: LD_ADDR_VAR 0 7
37674: PUSH
37675: LD_VAR 0 7
37679: PPUSH
37680: LD_INT 1
37682: PPUSH
37683: LD_VAR 0 14
37687: PPUSH
37688: CALL_OW 2
37692: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37693: LD_VAR 0 14
37697: PPUSH
37698: LD_VAR 0 12
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PPUSH
37707: CALL_OW 52
// end ;
37711: GO 37350
37713: POP
37714: POP
// end ;
37715: GO 36652
37717: POP
37718: POP
// result := result ^ buildings ;
37719: LD_ADDR_VAR 0 7
37723: PUSH
37724: LD_VAR 0 7
37728: PUSH
37729: LD_VAR 0 18
37733: ADD
37734: ST_TO_ADDR
// end else
37735: GO 37878
// begin for i = 1 to personel do
37737: LD_ADDR_VAR 0 8
37741: PUSH
37742: DOUBLE
37743: LD_INT 1
37745: DEC
37746: ST_TO_ADDR
37747: LD_VAR 0 6
37751: PUSH
37752: FOR_TO
37753: IFFALSE 37876
// begin if i > 4 then
37755: LD_VAR 0 8
37759: PUSH
37760: LD_INT 4
37762: GREATER
37763: IFFALSE 37767
// break ;
37765: GO 37876
// x := personel [ i ] ;
37767: LD_ADDR_VAR 0 13
37771: PUSH
37772: LD_VAR 0 6
37776: PUSH
37777: LD_VAR 0 8
37781: ARRAY
37782: ST_TO_ADDR
// if x = - 1 then
37783: LD_VAR 0 13
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: EQUAL
37792: IFFALSE 37796
// continue ;
37794: GO 37752
// PrepareHuman ( false , i , skill ) ;
37796: LD_INT 0
37798: PPUSH
37799: LD_VAR 0 8
37803: PPUSH
37804: LD_VAR 0 4
37808: PPUSH
37809: CALL_OW 380
// un := CreateHuman ;
37813: LD_ADDR_VAR 0 14
37817: PUSH
37818: CALL_OW 44
37822: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37823: LD_VAR 0 14
37827: PPUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 250
37837: PPUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 251
37847: PPUSH
37848: LD_INT 10
37850: PPUSH
37851: LD_INT 0
37853: PPUSH
37854: CALL_OW 50
// result := result ^ un ;
37858: LD_ADDR_VAR 0 7
37862: PUSH
37863: LD_VAR 0 7
37867: PUSH
37868: LD_VAR 0 14
37872: ADD
37873: ST_TO_ADDR
// end ;
37874: GO 37752
37876: POP
37877: POP
// end ; end ;
37878: LD_VAR 0 7
37882: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37883: LD_INT 0
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
// result := false ;
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: LD_INT 0
37908: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37909: LD_VAR 0 1
37913: NOT
37914: PUSH
37915: LD_VAR 0 1
37919: PPUSH
37920: CALL_OW 266
37924: PUSH
37925: LD_INT 32
37927: PUSH
37928: LD_INT 33
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: IN
37935: NOT
37936: OR
37937: IFFALSE 37941
// exit ;
37939: GO 39050
// nat := GetNation ( tower ) ;
37941: LD_ADDR_VAR 0 12
37945: PUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 248
37955: ST_TO_ADDR
// side := GetSide ( tower ) ;
37956: LD_ADDR_VAR 0 16
37960: PUSH
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 255
37970: ST_TO_ADDR
// x := GetX ( tower ) ;
37971: LD_ADDR_VAR 0 10
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 250
37985: ST_TO_ADDR
// y := GetY ( tower ) ;
37986: LD_ADDR_VAR 0 11
37990: PUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 251
38000: ST_TO_ADDR
// if not x or not y then
38001: LD_VAR 0 10
38005: NOT
38006: PUSH
38007: LD_VAR 0 11
38011: NOT
38012: OR
38013: IFFALSE 38017
// exit ;
38015: GO 39050
// weapon := 0 ;
38017: LD_ADDR_VAR 0 18
38021: PUSH
38022: LD_INT 0
38024: ST_TO_ADDR
// fac_list := [ ] ;
38025: LD_ADDR_VAR 0 17
38029: PUSH
38030: EMPTY
38031: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38032: LD_ADDR_VAR 0 6
38036: PUSH
38037: LD_VAR 0 1
38041: PPUSH
38042: CALL_OW 274
38046: PPUSH
38047: LD_VAR 0 2
38051: PPUSH
38052: LD_INT 0
38054: PPUSH
38055: CALL 35620 0 3
38059: PPUSH
38060: LD_INT 30
38062: PUSH
38063: LD_INT 3
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PPUSH
38070: CALL_OW 72
38074: ST_TO_ADDR
// if not factories then
38075: LD_VAR 0 6
38079: NOT
38080: IFFALSE 38084
// exit ;
38082: GO 39050
// for i in factories do
38084: LD_ADDR_VAR 0 8
38088: PUSH
38089: LD_VAR 0 6
38093: PUSH
38094: FOR_IN
38095: IFFALSE 38120
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38097: LD_ADDR_VAR 0 17
38101: PUSH
38102: LD_VAR 0 17
38106: PUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: CALL_OW 478
38116: UNION
38117: ST_TO_ADDR
38118: GO 38094
38120: POP
38121: POP
// if not fac_list then
38122: LD_VAR 0 17
38126: NOT
38127: IFFALSE 38131
// exit ;
38129: GO 39050
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38131: LD_ADDR_VAR 0 5
38135: PUSH
38136: LD_INT 4
38138: PUSH
38139: LD_INT 5
38141: PUSH
38142: LD_INT 9
38144: PUSH
38145: LD_INT 10
38147: PUSH
38148: LD_INT 6
38150: PUSH
38151: LD_INT 7
38153: PUSH
38154: LD_INT 11
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 27
38168: PUSH
38169: LD_INT 28
38171: PUSH
38172: LD_INT 26
38174: PUSH
38175: LD_INT 30
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 43
38186: PUSH
38187: LD_INT 44
38189: PUSH
38190: LD_INT 46
38192: PUSH
38193: LD_INT 45
38195: PUSH
38196: LD_INT 47
38198: PUSH
38199: LD_INT 49
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_VAR 0 12
38219: ARRAY
38220: ST_TO_ADDR
// list := list isect fac_list ;
38221: LD_ADDR_VAR 0 5
38225: PUSH
38226: LD_VAR 0 5
38230: PUSH
38231: LD_VAR 0 17
38235: ISECT
38236: ST_TO_ADDR
// if not list then
38237: LD_VAR 0 5
38241: NOT
38242: IFFALSE 38246
// exit ;
38244: GO 39050
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38246: LD_VAR 0 12
38250: PUSH
38251: LD_INT 3
38253: EQUAL
38254: PUSH
38255: LD_INT 49
38257: PUSH
38258: LD_VAR 0 5
38262: IN
38263: AND
38264: PUSH
38265: LD_INT 31
38267: PPUSH
38268: LD_VAR 0 16
38272: PPUSH
38273: CALL_OW 321
38277: PUSH
38278: LD_INT 2
38280: EQUAL
38281: AND
38282: IFFALSE 38342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38284: LD_INT 22
38286: PUSH
38287: LD_VAR 0 16
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 35
38298: PUSH
38299: LD_INT 49
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 91
38308: PUSH
38309: LD_VAR 0 1
38313: PUSH
38314: LD_INT 10
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 69
38331: NOT
38332: IFFALSE 38342
// weapon := ru_time_lapser ;
38334: LD_ADDR_VAR 0 18
38338: PUSH
38339: LD_INT 49
38341: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38342: LD_VAR 0 12
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: IN
38357: PUSH
38358: LD_INT 11
38360: PUSH
38361: LD_VAR 0 5
38365: IN
38366: PUSH
38367: LD_INT 30
38369: PUSH
38370: LD_VAR 0 5
38374: IN
38375: OR
38376: AND
38377: PUSH
38378: LD_INT 6
38380: PPUSH
38381: LD_VAR 0 16
38385: PPUSH
38386: CALL_OW 321
38390: PUSH
38391: LD_INT 2
38393: EQUAL
38394: AND
38395: IFFALSE 38560
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38397: LD_INT 22
38399: PUSH
38400: LD_VAR 0 16
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 35
38414: PUSH
38415: LD_INT 11
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 35
38424: PUSH
38425: LD_INT 30
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 91
38439: PUSH
38440: LD_VAR 0 1
38444: PUSH
38445: LD_INT 18
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: PPUSH
38458: CALL_OW 69
38462: NOT
38463: PUSH
38464: LD_INT 22
38466: PUSH
38467: LD_VAR 0 16
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: LD_INT 30
38481: PUSH
38482: LD_INT 32
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 30
38491: PUSH
38492: LD_INT 33
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 91
38506: PUSH
38507: LD_VAR 0 1
38511: PUSH
38512: LD_INT 12
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: PUSH
38525: EMPTY
38526: LIST
38527: PPUSH
38528: CALL_OW 69
38532: PUSH
38533: LD_INT 2
38535: GREATER
38536: AND
38537: IFFALSE 38560
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38539: LD_ADDR_VAR 0 18
38543: PUSH
38544: LD_INT 11
38546: PUSH
38547: LD_INT 30
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_VAR 0 12
38558: ARRAY
38559: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38560: LD_VAR 0 18
38564: NOT
38565: PUSH
38566: LD_INT 40
38568: PPUSH
38569: LD_VAR 0 16
38573: PPUSH
38574: CALL_OW 321
38578: PUSH
38579: LD_INT 2
38581: EQUAL
38582: AND
38583: PUSH
38584: LD_INT 7
38586: PUSH
38587: LD_VAR 0 5
38591: IN
38592: PUSH
38593: LD_INT 28
38595: PUSH
38596: LD_VAR 0 5
38600: IN
38601: OR
38602: PUSH
38603: LD_INT 45
38605: PUSH
38606: LD_VAR 0 5
38610: IN
38611: OR
38612: AND
38613: IFFALSE 38867
// begin hex := GetHexInfo ( x , y ) ;
38615: LD_ADDR_VAR 0 4
38619: PUSH
38620: LD_VAR 0 10
38624: PPUSH
38625: LD_VAR 0 11
38629: PPUSH
38630: CALL_OW 546
38634: ST_TO_ADDR
// if hex [ 1 ] then
38635: LD_VAR 0 4
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: IFFALSE 38647
// exit ;
38645: GO 39050
// height := hex [ 2 ] ;
38647: LD_ADDR_VAR 0 15
38651: PUSH
38652: LD_VAR 0 4
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38661: LD_ADDR_VAR 0 14
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: LD_INT 5
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// for i in tmp do
38684: LD_ADDR_VAR 0 8
38688: PUSH
38689: LD_VAR 0 14
38693: PUSH
38694: FOR_IN
38695: IFFALSE 38865
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_VAR 0 10
38706: PPUSH
38707: LD_VAR 0 8
38711: PPUSH
38712: LD_INT 5
38714: PPUSH
38715: CALL_OW 272
38719: PUSH
38720: LD_VAR 0 11
38724: PPUSH
38725: LD_VAR 0 8
38729: PPUSH
38730: LD_INT 5
38732: PPUSH
38733: CALL_OW 273
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38742: LD_VAR 0 9
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 9
38755: PUSH
38756: LD_INT 2
38758: ARRAY
38759: PPUSH
38760: CALL_OW 488
38764: IFFALSE 38863
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: LD_VAR 0 9
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PPUSH
38780: LD_VAR 0 9
38784: PUSH
38785: LD_INT 2
38787: ARRAY
38788: PPUSH
38789: CALL_OW 546
38793: ST_TO_ADDR
// if hex [ 1 ] then
38794: LD_VAR 0 4
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: IFFALSE 38806
// continue ;
38804: GO 38694
// h := hex [ 2 ] ;
38806: LD_ADDR_VAR 0 13
38810: PUSH
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: ST_TO_ADDR
// if h + 7 < height then
38820: LD_VAR 0 13
38824: PUSH
38825: LD_INT 7
38827: PLUS
38828: PUSH
38829: LD_VAR 0 15
38833: LESS
38834: IFFALSE 38863
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38836: LD_ADDR_VAR 0 18
38840: PUSH
38841: LD_INT 7
38843: PUSH
38844: LD_INT 28
38846: PUSH
38847: LD_INT 45
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PUSH
38855: LD_VAR 0 12
38859: ARRAY
38860: ST_TO_ADDR
// break ;
38861: GO 38865
// end ; end ; end ;
38863: GO 38694
38865: POP
38866: POP
// end ; if not weapon then
38867: LD_VAR 0 18
38871: NOT
38872: IFFALSE 38932
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38874: LD_ADDR_VAR 0 5
38878: PUSH
38879: LD_VAR 0 5
38883: PUSH
38884: LD_INT 11
38886: PUSH
38887: LD_INT 30
38889: PUSH
38890: LD_INT 49
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: DIFF
38898: ST_TO_ADDR
// if not list then
38899: LD_VAR 0 5
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 39050
// weapon := list [ rand ( 1 , list ) ] ;
38908: LD_ADDR_VAR 0 18
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: PPUSH
38921: LD_VAR 0 5
38925: PPUSH
38926: CALL_OW 12
38930: ARRAY
38931: ST_TO_ADDR
// end ; if weapon then
38932: LD_VAR 0 18
38936: IFFALSE 39050
// begin tmp := CostOfWeapon ( weapon ) ;
38938: LD_ADDR_VAR 0 14
38942: PUSH
38943: LD_VAR 0 18
38947: PPUSH
38948: CALL_OW 451
38952: ST_TO_ADDR
// j := GetBase ( tower ) ;
38953: LD_ADDR_VAR 0 9
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 274
38967: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38968: LD_VAR 0 9
38972: PPUSH
38973: LD_INT 1
38975: PPUSH
38976: CALL_OW 275
38980: PUSH
38981: LD_VAR 0 14
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: GREATEREQUAL
38990: PUSH
38991: LD_VAR 0 9
38995: PPUSH
38996: LD_INT 2
38998: PPUSH
38999: CALL_OW 275
39003: PUSH
39004: LD_VAR 0 14
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: GREATEREQUAL
39013: AND
39014: PUSH
39015: LD_VAR 0 9
39019: PPUSH
39020: LD_INT 3
39022: PPUSH
39023: CALL_OW 275
39027: PUSH
39028: LD_VAR 0 14
39032: PUSH
39033: LD_INT 3
39035: ARRAY
39036: GREATEREQUAL
39037: AND
39038: IFFALSE 39050
// result := weapon ;
39040: LD_ADDR_VAR 0 3
39044: PUSH
39045: LD_VAR 0 18
39049: ST_TO_ADDR
// end ; end ;
39050: LD_VAR 0 3
39054: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39055: LD_INT 0
39057: PPUSH
39058: PPUSH
// result := true ;
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_INT 1
39066: ST_TO_ADDR
// if array1 = array2 then
39067: LD_VAR 0 1
39071: PUSH
39072: LD_VAR 0 2
39076: EQUAL
39077: IFFALSE 39137
// begin for i = 1 to array1 do
39079: LD_ADDR_VAR 0 4
39083: PUSH
39084: DOUBLE
39085: LD_INT 1
39087: DEC
39088: ST_TO_ADDR
39089: LD_VAR 0 1
39093: PUSH
39094: FOR_TO
39095: IFFALSE 39133
// if array1 [ i ] <> array2 [ i ] then
39097: LD_VAR 0 1
39101: PUSH
39102: LD_VAR 0 4
39106: ARRAY
39107: PUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_VAR 0 4
39117: ARRAY
39118: NONEQUAL
39119: IFFALSE 39131
// begin result := false ;
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_INT 0
39128: ST_TO_ADDR
// break ;
39129: GO 39133
// end ;
39131: GO 39094
39133: POP
39134: POP
// end else
39135: GO 39145
// result := false ;
39137: LD_ADDR_VAR 0 3
39141: PUSH
39142: LD_INT 0
39144: ST_TO_ADDR
// end ;
39145: LD_VAR 0 3
39149: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
// if not array1 or not array2 then
39154: LD_VAR 0 1
39158: NOT
39159: PUSH
39160: LD_VAR 0 2
39164: NOT
39165: OR
39166: IFFALSE 39170
// exit ;
39168: GO 39234
// result := true ;
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_INT 1
39177: ST_TO_ADDR
// for i = 1 to array1 do
39178: LD_ADDR_VAR 0 4
39182: PUSH
39183: DOUBLE
39184: LD_INT 1
39186: DEC
39187: ST_TO_ADDR
39188: LD_VAR 0 1
39192: PUSH
39193: FOR_TO
39194: IFFALSE 39232
// if array1 [ i ] <> array2 [ i ] then
39196: LD_VAR 0 1
39200: PUSH
39201: LD_VAR 0 4
39205: ARRAY
39206: PUSH
39207: LD_VAR 0 2
39211: PUSH
39212: LD_VAR 0 4
39216: ARRAY
39217: NONEQUAL
39218: IFFALSE 39230
// begin result := false ;
39220: LD_ADDR_VAR 0 3
39224: PUSH
39225: LD_INT 0
39227: ST_TO_ADDR
// break ;
39228: GO 39232
// end ;
39230: GO 39193
39232: POP
39233: POP
// end ;
39234: LD_VAR 0 3
39238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39239: LD_INT 0
39241: PPUSH
39242: PPUSH
39243: PPUSH
// pom := GetBase ( fac ) ;
39244: LD_ADDR_VAR 0 5
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: CALL_OW 274
39258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39259: LD_ADDR_VAR 0 4
39263: PUSH
39264: LD_VAR 0 2
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: PPUSH
39273: LD_VAR 0 2
39277: PUSH
39278: LD_INT 2
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 2
39286: PUSH
39287: LD_INT 3
39289: ARRAY
39290: PPUSH
39291: LD_VAR 0 2
39295: PUSH
39296: LD_INT 4
39298: ARRAY
39299: PPUSH
39300: CALL_OW 449
39304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39305: LD_ADDR_VAR 0 3
39309: PUSH
39310: LD_VAR 0 5
39314: PPUSH
39315: LD_INT 1
39317: PPUSH
39318: CALL_OW 275
39322: PUSH
39323: LD_VAR 0 4
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: GREATEREQUAL
39332: PUSH
39333: LD_VAR 0 5
39337: PPUSH
39338: LD_INT 2
39340: PPUSH
39341: CALL_OW 275
39345: PUSH
39346: LD_VAR 0 4
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: GREATEREQUAL
39355: AND
39356: PUSH
39357: LD_VAR 0 5
39361: PPUSH
39362: LD_INT 3
39364: PPUSH
39365: CALL_OW 275
39369: PUSH
39370: LD_VAR 0 4
39374: PUSH
39375: LD_INT 3
39377: ARRAY
39378: GREATEREQUAL
39379: AND
39380: ST_TO_ADDR
// end ;
39381: LD_VAR 0 3
39385: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39386: LD_INT 0
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
// pom := GetBase ( building ) ;
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_VAR 0 1
39401: PPUSH
39402: CALL_OW 274
39406: ST_TO_ADDR
// if not pom then
39407: LD_VAR 0 3
39411: NOT
39412: IFFALSE 39416
// exit ;
39414: GO 39586
// btype := GetBType ( building ) ;
39416: LD_ADDR_VAR 0 5
39420: PUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 266
39430: ST_TO_ADDR
// if btype = b_armoury then
39431: LD_VAR 0 5
39435: PUSH
39436: LD_INT 4
39438: EQUAL
39439: IFFALSE 39449
// btype := b_barracks ;
39441: LD_ADDR_VAR 0 5
39445: PUSH
39446: LD_INT 5
39448: ST_TO_ADDR
// if btype = b_depot then
39449: LD_VAR 0 5
39453: PUSH
39454: LD_INT 0
39456: EQUAL
39457: IFFALSE 39467
// btype := b_warehouse ;
39459: LD_ADDR_VAR 0 5
39463: PUSH
39464: LD_INT 1
39466: ST_TO_ADDR
// if btype = b_workshop then
39467: LD_VAR 0 5
39471: PUSH
39472: LD_INT 2
39474: EQUAL
39475: IFFALSE 39485
// btype := b_factory ;
39477: LD_ADDR_VAR 0 5
39481: PUSH
39482: LD_INT 3
39484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39485: LD_ADDR_VAR 0 4
39489: PUSH
39490: LD_VAR 0 5
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 248
39504: PPUSH
39505: CALL_OW 450
39509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39510: LD_ADDR_VAR 0 2
39514: PUSH
39515: LD_VAR 0 3
39519: PPUSH
39520: LD_INT 1
39522: PPUSH
39523: CALL_OW 275
39527: PUSH
39528: LD_VAR 0 4
39532: PUSH
39533: LD_INT 1
39535: ARRAY
39536: GREATEREQUAL
39537: PUSH
39538: LD_VAR 0 3
39542: PPUSH
39543: LD_INT 2
39545: PPUSH
39546: CALL_OW 275
39550: PUSH
39551: LD_VAR 0 4
39555: PUSH
39556: LD_INT 2
39558: ARRAY
39559: GREATEREQUAL
39560: AND
39561: PUSH
39562: LD_VAR 0 3
39566: PPUSH
39567: LD_INT 3
39569: PPUSH
39570: CALL_OW 275
39574: PUSH
39575: LD_VAR 0 4
39579: PUSH
39580: LD_INT 3
39582: ARRAY
39583: GREATEREQUAL
39584: AND
39585: ST_TO_ADDR
// end ;
39586: LD_VAR 0 2
39590: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39591: LD_INT 0
39593: PPUSH
39594: PPUSH
39595: PPUSH
// pom := GetBase ( building ) ;
39596: LD_ADDR_VAR 0 4
39600: PUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: CALL_OW 274
39610: ST_TO_ADDR
// if not pom then
39611: LD_VAR 0 4
39615: NOT
39616: IFFALSE 39620
// exit ;
39618: GO 39721
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 2
39629: PPUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 248
39639: PPUSH
39640: CALL_OW 450
39644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_VAR 0 4
39654: PPUSH
39655: LD_INT 1
39657: PPUSH
39658: CALL_OW 275
39662: PUSH
39663: LD_VAR 0 5
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: GREATEREQUAL
39672: PUSH
39673: LD_VAR 0 4
39677: PPUSH
39678: LD_INT 2
39680: PPUSH
39681: CALL_OW 275
39685: PUSH
39686: LD_VAR 0 5
39690: PUSH
39691: LD_INT 2
39693: ARRAY
39694: GREATEREQUAL
39695: AND
39696: PUSH
39697: LD_VAR 0 4
39701: PPUSH
39702: LD_INT 3
39704: PPUSH
39705: CALL_OW 275
39709: PUSH
39710: LD_VAR 0 5
39714: PUSH
39715: LD_INT 3
39717: ARRAY
39718: GREATEREQUAL
39719: AND
39720: ST_TO_ADDR
// end ;
39721: LD_VAR 0 3
39725: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39726: LD_INT 0
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
// result := false ;
39739: LD_ADDR_VAR 0 8
39743: PUSH
39744: LD_INT 0
39746: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39747: LD_VAR 0 5
39751: NOT
39752: PUSH
39753: LD_VAR 0 1
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 2
39764: NOT
39765: OR
39766: PUSH
39767: LD_VAR 0 3
39771: NOT
39772: OR
39773: IFFALSE 39777
// exit ;
39775: GO 40591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39777: LD_ADDR_VAR 0 14
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_VAR 0 2
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: LD_VAR 0 4
39801: PPUSH
39802: LD_VAR 0 5
39806: PUSH
39807: LD_INT 1
39809: ARRAY
39810: PPUSH
39811: CALL_OW 248
39815: PPUSH
39816: LD_INT 0
39818: PPUSH
39819: CALL 41428 0 6
39823: ST_TO_ADDR
// if not hexes then
39824: LD_VAR 0 14
39828: NOT
39829: IFFALSE 39833
// exit ;
39831: GO 40591
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39833: LD_ADDR_VAR 0 17
39837: PUSH
39838: LD_VAR 0 5
39842: PPUSH
39843: LD_INT 22
39845: PUSH
39846: LD_VAR 0 13
39850: PPUSH
39851: CALL_OW 255
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 30
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 30
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PPUSH
39892: CALL_OW 72
39896: ST_TO_ADDR
// for i = 1 to hexes do
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: DOUBLE
39903: LD_INT 1
39905: DEC
39906: ST_TO_ADDR
39907: LD_VAR 0 14
39911: PUSH
39912: FOR_TO
39913: IFFALSE 40589
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39915: LD_ADDR_VAR 0 13
39919: PUSH
39920: LD_VAR 0 14
39924: PUSH
39925: LD_VAR 0 9
39929: ARRAY
39930: PUSH
39931: LD_INT 1
39933: ARRAY
39934: PPUSH
39935: LD_VAR 0 14
39939: PUSH
39940: LD_VAR 0 9
39944: ARRAY
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: PPUSH
39950: CALL_OW 428
39954: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39955: LD_VAR 0 14
39959: PUSH
39960: LD_VAR 0 9
39964: ARRAY
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PPUSH
39970: LD_VAR 0 14
39974: PUSH
39975: LD_VAR 0 9
39979: ARRAY
39980: PUSH
39981: LD_INT 2
39983: ARRAY
39984: PPUSH
39985: CALL_OW 351
39989: PUSH
39990: LD_VAR 0 14
39994: PUSH
39995: LD_VAR 0 9
39999: ARRAY
40000: PUSH
40001: LD_INT 1
40003: ARRAY
40004: PPUSH
40005: LD_VAR 0 14
40009: PUSH
40010: LD_VAR 0 9
40014: ARRAY
40015: PUSH
40016: LD_INT 2
40018: ARRAY
40019: PPUSH
40020: CALL_OW 488
40024: NOT
40025: OR
40026: PUSH
40027: LD_VAR 0 13
40031: PPUSH
40032: CALL_OW 247
40036: PUSH
40037: LD_INT 3
40039: EQUAL
40040: OR
40041: IFFALSE 40047
// exit ;
40043: POP
40044: POP
40045: GO 40591
// if not tmp then
40047: LD_VAR 0 13
40051: NOT
40052: IFFALSE 40056
// continue ;
40054: GO 39912
// result := true ;
40056: LD_ADDR_VAR 0 8
40060: PUSH
40061: LD_INT 1
40063: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40064: LD_VAR 0 6
40068: PUSH
40069: LD_VAR 0 13
40073: PPUSH
40074: CALL_OW 247
40078: PUSH
40079: LD_INT 2
40081: EQUAL
40082: AND
40083: PUSH
40084: LD_VAR 0 13
40088: PPUSH
40089: CALL_OW 263
40093: PUSH
40094: LD_INT 1
40096: EQUAL
40097: AND
40098: IFFALSE 40262
// begin if IsDrivenBy ( tmp ) then
40100: LD_VAR 0 13
40104: PPUSH
40105: CALL_OW 311
40109: IFFALSE 40113
// continue ;
40111: GO 39912
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40113: LD_VAR 0 6
40117: PPUSH
40118: LD_INT 3
40120: PUSH
40121: LD_INT 60
40123: PUSH
40124: EMPTY
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: LD_INT 55
40136: PUSH
40137: EMPTY
40138: LIST
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PPUSH
40148: CALL_OW 72
40152: IFFALSE 40260
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40154: LD_ADDR_VAR 0 18
40158: PUSH
40159: LD_VAR 0 6
40163: PPUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 60
40169: PUSH
40170: EMPTY
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 55
40182: PUSH
40183: EMPTY
40184: LIST
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PPUSH
40194: CALL_OW 72
40198: PUSH
40199: LD_INT 1
40201: ARRAY
40202: ST_TO_ADDR
// if IsInUnit ( driver ) then
40203: LD_VAR 0 18
40207: PPUSH
40208: CALL_OW 310
40212: IFFALSE 40223
// ComExit ( driver ) ;
40214: LD_VAR 0 18
40218: PPUSH
40219: CALL 64612 0 1
// AddComEnterUnit ( driver , tmp ) ;
40223: LD_VAR 0 18
40227: PPUSH
40228: LD_VAR 0 13
40232: PPUSH
40233: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40237: LD_VAR 0 18
40241: PPUSH
40242: LD_VAR 0 7
40246: PPUSH
40247: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40251: LD_VAR 0 18
40255: PPUSH
40256: CALL_OW 181
// end ; continue ;
40260: GO 39912
// end ; if not cleaners or not tmp in cleaners then
40262: LD_VAR 0 6
40266: NOT
40267: PUSH
40268: LD_VAR 0 13
40272: PUSH
40273: LD_VAR 0 6
40277: IN
40278: NOT
40279: OR
40280: IFFALSE 40587
// begin if dep then
40282: LD_VAR 0 17
40286: IFFALSE 40422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40288: LD_ADDR_VAR 0 16
40292: PUSH
40293: LD_VAR 0 17
40297: PUSH
40298: LD_INT 1
40300: ARRAY
40301: PPUSH
40302: CALL_OW 250
40306: PPUSH
40307: LD_VAR 0 17
40311: PUSH
40312: LD_INT 1
40314: ARRAY
40315: PPUSH
40316: CALL_OW 254
40320: PPUSH
40321: LD_INT 5
40323: PPUSH
40324: CALL_OW 272
40328: PUSH
40329: LD_VAR 0 17
40333: PUSH
40334: LD_INT 1
40336: ARRAY
40337: PPUSH
40338: CALL_OW 251
40342: PPUSH
40343: LD_VAR 0 17
40347: PUSH
40348: LD_INT 1
40350: ARRAY
40351: PPUSH
40352: CALL_OW 254
40356: PPUSH
40357: LD_INT 5
40359: PPUSH
40360: CALL_OW 273
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40369: LD_VAR 0 16
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PPUSH
40378: LD_VAR 0 16
40382: PUSH
40383: LD_INT 2
40385: ARRAY
40386: PPUSH
40387: CALL_OW 488
40391: IFFALSE 40422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40393: LD_VAR 0 13
40397: PPUSH
40398: LD_VAR 0 16
40402: PUSH
40403: LD_INT 1
40405: ARRAY
40406: PPUSH
40407: LD_VAR 0 16
40411: PUSH
40412: LD_INT 2
40414: ARRAY
40415: PPUSH
40416: CALL_OW 111
// continue ;
40420: GO 39912
// end ; end ; r := GetDir ( tmp ) ;
40422: LD_ADDR_VAR 0 15
40426: PUSH
40427: LD_VAR 0 13
40431: PPUSH
40432: CALL_OW 254
40436: ST_TO_ADDR
// if r = 5 then
40437: LD_VAR 0 15
40441: PUSH
40442: LD_INT 5
40444: EQUAL
40445: IFFALSE 40455
// r := 0 ;
40447: LD_ADDR_VAR 0 15
40451: PUSH
40452: LD_INT 0
40454: ST_TO_ADDR
// for j = r to 5 do
40455: LD_ADDR_VAR 0 10
40459: PUSH
40460: DOUBLE
40461: LD_VAR 0 15
40465: DEC
40466: ST_TO_ADDR
40467: LD_INT 5
40469: PUSH
40470: FOR_TO
40471: IFFALSE 40585
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40473: LD_ADDR_VAR 0 11
40477: PUSH
40478: LD_VAR 0 13
40482: PPUSH
40483: CALL_OW 250
40487: PPUSH
40488: LD_VAR 0 10
40492: PPUSH
40493: LD_INT 2
40495: PPUSH
40496: CALL_OW 272
40500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40501: LD_ADDR_VAR 0 12
40505: PUSH
40506: LD_VAR 0 13
40510: PPUSH
40511: CALL_OW 251
40515: PPUSH
40516: LD_VAR 0 10
40520: PPUSH
40521: LD_INT 2
40523: PPUSH
40524: CALL_OW 273
40528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40529: LD_VAR 0 11
40533: PPUSH
40534: LD_VAR 0 12
40538: PPUSH
40539: CALL_OW 488
40543: PUSH
40544: LD_VAR 0 11
40548: PPUSH
40549: LD_VAR 0 12
40553: PPUSH
40554: CALL_OW 428
40558: NOT
40559: AND
40560: IFFALSE 40583
// begin ComMoveXY ( tmp , _x , _y ) ;
40562: LD_VAR 0 13
40566: PPUSH
40567: LD_VAR 0 11
40571: PPUSH
40572: LD_VAR 0 12
40576: PPUSH
40577: CALL_OW 111
// break ;
40581: GO 40585
// end ; end ;
40583: GO 40470
40585: POP
40586: POP
// end ; end ;
40587: GO 39912
40589: POP
40590: POP
// end ;
40591: LD_VAR 0 8
40595: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40596: LD_INT 0
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
// result := false ;
40608: LD_ADDR_VAR 0 6
40612: PUSH
40613: LD_INT 0
40615: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40616: LD_VAR 0 1
40620: NOT
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 266
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: IN
40642: NOT
40643: OR
40644: PUSH
40645: LD_VAR 0 2
40649: NOT
40650: OR
40651: PUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 3
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: LD_INT 5
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: IN
40683: NOT
40684: OR
40685: PUSH
40686: LD_VAR 0 3
40690: PPUSH
40691: LD_VAR 0 4
40695: PPUSH
40696: CALL_OW 488
40700: NOT
40701: OR
40702: IFFALSE 40706
// exit ;
40704: GO 41423
// pom := GetBase ( depot ) ;
40706: LD_ADDR_VAR 0 10
40710: PUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 274
40720: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40721: LD_ADDR_VAR 0 11
40725: PUSH
40726: LD_VAR 0 2
40730: PPUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 248
40740: PPUSH
40741: CALL_OW 450
40745: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40746: LD_VAR 0 10
40750: PPUSH
40751: LD_INT 1
40753: PPUSH
40754: CALL_OW 275
40758: PUSH
40759: LD_VAR 0 11
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: GREATEREQUAL
40768: PUSH
40769: LD_VAR 0 10
40773: PPUSH
40774: LD_INT 2
40776: PPUSH
40777: CALL_OW 275
40781: PUSH
40782: LD_VAR 0 11
40786: PUSH
40787: LD_INT 2
40789: ARRAY
40790: GREATEREQUAL
40791: AND
40792: PUSH
40793: LD_VAR 0 10
40797: PPUSH
40798: LD_INT 3
40800: PPUSH
40801: CALL_OW 275
40805: PUSH
40806: LD_VAR 0 11
40810: PUSH
40811: LD_INT 3
40813: ARRAY
40814: GREATEREQUAL
40815: AND
40816: NOT
40817: IFFALSE 40821
// exit ;
40819: GO 41423
// if GetBType ( depot ) = b_depot then
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 266
40830: PUSH
40831: LD_INT 0
40833: EQUAL
40834: IFFALSE 40846
// dist := 28 else
40836: LD_ADDR_VAR 0 14
40840: PUSH
40841: LD_INT 28
40843: ST_TO_ADDR
40844: GO 40854
// dist := 36 ;
40846: LD_ADDR_VAR 0 14
40850: PUSH
40851: LD_INT 36
40853: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40854: LD_VAR 0 1
40858: PPUSH
40859: LD_VAR 0 3
40863: PPUSH
40864: LD_VAR 0 4
40868: PPUSH
40869: CALL_OW 297
40873: PUSH
40874: LD_VAR 0 14
40878: GREATER
40879: IFFALSE 40883
// exit ;
40881: GO 41423
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40883: LD_ADDR_VAR 0 12
40887: PUSH
40888: LD_VAR 0 2
40892: PPUSH
40893: LD_VAR 0 3
40897: PPUSH
40898: LD_VAR 0 4
40902: PPUSH
40903: LD_VAR 0 5
40907: PPUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 248
40917: PPUSH
40918: LD_INT 0
40920: PPUSH
40921: CALL 41428 0 6
40925: ST_TO_ADDR
// if not hexes then
40926: LD_VAR 0 12
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 41423
// hex := GetHexInfo ( x , y ) ;
40935: LD_ADDR_VAR 0 15
40939: PUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: LD_VAR 0 4
40949: PPUSH
40950: CALL_OW 546
40954: ST_TO_ADDR
// if hex [ 1 ] then
40955: LD_VAR 0 15
40959: PUSH
40960: LD_INT 1
40962: ARRAY
40963: IFFALSE 40967
// exit ;
40965: GO 41423
// height := hex [ 2 ] ;
40967: LD_ADDR_VAR 0 13
40971: PUSH
40972: LD_VAR 0 15
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: ST_TO_ADDR
// for i = 1 to hexes do
40981: LD_ADDR_VAR 0 7
40985: PUSH
40986: DOUBLE
40987: LD_INT 1
40989: DEC
40990: ST_TO_ADDR
40991: LD_VAR 0 12
40995: PUSH
40996: FOR_TO
40997: IFFALSE 41327
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40999: LD_VAR 0 12
41003: PUSH
41004: LD_VAR 0 7
41008: ARRAY
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: LD_VAR 0 12
41018: PUSH
41019: LD_VAR 0 7
41023: ARRAY
41024: PUSH
41025: LD_INT 2
41027: ARRAY
41028: PPUSH
41029: CALL_OW 488
41033: NOT
41034: PUSH
41035: LD_VAR 0 12
41039: PUSH
41040: LD_VAR 0 7
41044: ARRAY
41045: PUSH
41046: LD_INT 1
41048: ARRAY
41049: PPUSH
41050: LD_VAR 0 12
41054: PUSH
41055: LD_VAR 0 7
41059: ARRAY
41060: PUSH
41061: LD_INT 2
41063: ARRAY
41064: PPUSH
41065: CALL_OW 428
41069: PUSH
41070: LD_INT 0
41072: GREATER
41073: OR
41074: PUSH
41075: LD_VAR 0 12
41079: PUSH
41080: LD_VAR 0 7
41084: ARRAY
41085: PUSH
41086: LD_INT 1
41088: ARRAY
41089: PPUSH
41090: LD_VAR 0 12
41094: PUSH
41095: LD_VAR 0 7
41099: ARRAY
41100: PUSH
41101: LD_INT 2
41103: ARRAY
41104: PPUSH
41105: CALL_OW 351
41109: OR
41110: IFFALSE 41116
// exit ;
41112: POP
41113: POP
41114: GO 41423
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41116: LD_ADDR_VAR 0 8
41120: PUSH
41121: LD_VAR 0 12
41125: PUSH
41126: LD_VAR 0 7
41130: ARRAY
41131: PUSH
41132: LD_INT 1
41134: ARRAY
41135: PPUSH
41136: LD_VAR 0 12
41140: PUSH
41141: LD_VAR 0 7
41145: ARRAY
41146: PUSH
41147: LD_INT 2
41149: ARRAY
41150: PPUSH
41151: CALL_OW 546
41155: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41156: LD_VAR 0 8
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PUSH
41165: LD_VAR 0 8
41169: PUSH
41170: LD_INT 2
41172: ARRAY
41173: PUSH
41174: LD_VAR 0 13
41178: PUSH
41179: LD_INT 2
41181: PLUS
41182: GREATER
41183: OR
41184: PUSH
41185: LD_VAR 0 8
41189: PUSH
41190: LD_INT 2
41192: ARRAY
41193: PUSH
41194: LD_VAR 0 13
41198: PUSH
41199: LD_INT 2
41201: MINUS
41202: LESS
41203: OR
41204: PUSH
41205: LD_VAR 0 8
41209: PUSH
41210: LD_INT 3
41212: ARRAY
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 8
41219: PUSH
41220: LD_INT 9
41222: PUSH
41223: LD_INT 10
41225: PUSH
41226: LD_INT 11
41228: PUSH
41229: LD_INT 12
41231: PUSH
41232: LD_INT 13
41234: PUSH
41235: LD_INT 16
41237: PUSH
41238: LD_INT 17
41240: PUSH
41241: LD_INT 18
41243: PUSH
41244: LD_INT 19
41246: PUSH
41247: LD_INT 20
41249: PUSH
41250: LD_INT 21
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: IN
41268: NOT
41269: OR
41270: PUSH
41271: LD_VAR 0 8
41275: PUSH
41276: LD_INT 5
41278: ARRAY
41279: NOT
41280: OR
41281: PUSH
41282: LD_VAR 0 8
41286: PUSH
41287: LD_INT 6
41289: ARRAY
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: LD_INT 7
41299: PUSH
41300: LD_INT 9
41302: PUSH
41303: LD_INT 10
41305: PUSH
41306: LD_INT 11
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: IN
41317: NOT
41318: OR
41319: IFFALSE 41325
// exit ;
41321: POP
41322: POP
41323: GO 41423
// end ;
41325: GO 40996
41327: POP
41328: POP
// side := GetSide ( depot ) ;
41329: LD_ADDR_VAR 0 9
41333: PUSH
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 255
41343: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41344: LD_VAR 0 9
41348: PPUSH
41349: LD_VAR 0 3
41353: PPUSH
41354: LD_VAR 0 4
41358: PPUSH
41359: LD_INT 20
41361: PPUSH
41362: CALL 33774 0 4
41366: PUSH
41367: LD_INT 4
41369: ARRAY
41370: IFFALSE 41374
// exit ;
41372: GO 41423
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41374: LD_VAR 0 2
41378: PUSH
41379: LD_INT 29
41381: PUSH
41382: LD_INT 30
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: IN
41389: PUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: LD_VAR 0 4
41399: PPUSH
41400: LD_VAR 0 9
41404: PPUSH
41405: CALL_OW 440
41409: NOT
41410: AND
41411: IFFALSE 41415
// exit ;
41413: GO 41423
// result := true ;
41415: LD_ADDR_VAR 0 6
41419: PUSH
41420: LD_INT 1
41422: ST_TO_ADDR
// end ;
41423: LD_VAR 0 6
41427: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41428: LD_INT 0
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
// result = [ ] ;
41488: LD_ADDR_VAR 0 7
41492: PUSH
41493: EMPTY
41494: ST_TO_ADDR
// temp_list = [ ] ;
41495: LD_ADDR_VAR 0 9
41499: PUSH
41500: EMPTY
41501: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41502: LD_VAR 0 4
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 3
41518: PUSH
41519: LD_INT 4
41521: PUSH
41522: LD_INT 5
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: IN
41533: NOT
41534: PUSH
41535: LD_VAR 0 1
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: IN
41550: PUSH
41551: LD_VAR 0 5
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: IN
41570: NOT
41571: AND
41572: OR
41573: IFFALSE 41577
// exit ;
41575: GO 59968
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41577: LD_VAR 0 1
41581: PUSH
41582: LD_INT 6
41584: PUSH
41585: LD_INT 7
41587: PUSH
41588: LD_INT 8
41590: PUSH
41591: LD_INT 13
41593: PUSH
41594: LD_INT 12
41596: PUSH
41597: LD_INT 15
41599: PUSH
41600: LD_INT 11
41602: PUSH
41603: LD_INT 14
41605: PUSH
41606: LD_INT 10
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: IN
41620: IFFALSE 41630
// btype = b_lab ;
41622: LD_ADDR_VAR 0 1
41626: PUSH
41627: LD_INT 6
41629: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41630: LD_VAR 0 6
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: IN
41649: NOT
41650: PUSH
41651: LD_VAR 0 1
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 6
41670: PUSH
41671: LD_INT 36
41673: PUSH
41674: LD_INT 4
41676: PUSH
41677: LD_INT 5
41679: PUSH
41680: LD_INT 31
41682: PUSH
41683: LD_INT 32
41685: PUSH
41686: LD_INT 33
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: IN
41702: NOT
41703: PUSH
41704: LD_VAR 0 6
41708: PUSH
41709: LD_INT 1
41711: EQUAL
41712: AND
41713: OR
41714: PUSH
41715: LD_VAR 0 1
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: IN
41730: NOT
41731: PUSH
41732: LD_VAR 0 6
41736: PUSH
41737: LD_INT 2
41739: EQUAL
41740: AND
41741: OR
41742: IFFALSE 41752
// mode = 0 ;
41744: LD_ADDR_VAR 0 6
41748: PUSH
41749: LD_INT 0
41751: ST_TO_ADDR
// case mode of 0 :
41752: LD_VAR 0 6
41756: PUSH
41757: LD_INT 0
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 53218
41765: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41766: LD_ADDR_VAR 0 11
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41959: LD_ADDR_VAR 0 12
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42155: LD_ADDR_VAR 0 13
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 3
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42354: LD_ADDR_VAR 0 14
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 3
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42550: LD_ADDR_VAR 0 15
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 3
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42743: LD_ADDR_VAR 0 16
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 3
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42936: LD_ADDR_VAR 0 17
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43166: LD_ADDR_VAR 0 18
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43396: LD_ADDR_VAR 0 19
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43626: LD_ADDR_VAR 0 20
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43856: LD_ADDR_VAR 0 21
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44086: LD_ADDR_VAR 0 22
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44316: LD_ADDR_VAR 0 23
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 3
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44596: LD_ADDR_VAR 0 24
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44872: LD_ADDR_VAR 0 25
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45146: LD_ADDR_VAR 0 26
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45422: LD_ADDR_VAR 0 27
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45702: LD_ADDR_VAR 0 28
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45984: LD_ADDR_VAR 0 29
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46263: LD_ADDR_VAR 0 30
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46541: LD_ADDR_VAR 0 31
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46819: LD_ADDR_VAR 0 32
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47097: LD_ADDR_VAR 0 33
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47376: LD_ADDR_VAR 0 34
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47656: LD_ADDR_VAR 0 35
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47768: LD_ADDR_VAR 0 36
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47880: LD_ADDR_VAR 0 37
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47992: LD_ADDR_VAR 0 38
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48104: LD_ADDR_VAR 0 39
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48216: LD_ADDR_VAR 0 40
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48328: LD_ADDR_VAR 0 41
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48678: LD_ADDR_VAR 0 42
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: NEG
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49028: LD_ADDR_VAR 0 43
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49376: LD_ADDR_VAR 0 44
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 3
49673: NEG
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49726: LD_ADDR_VAR 0 45
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50076: LD_ADDR_VAR 0 46
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50424: LD_ADDR_VAR 0 47
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50575: LD_ADDR_VAR 0 48
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50722: LD_ADDR_VAR 0 49
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50866: LD_ADDR_VAR 0 50
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51010: LD_ADDR_VAR 0 51
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51157: LD_ADDR_VAR 0 52
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51308: LD_ADDR_VAR 0 53
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51538: LD_ADDR_VAR 0 54
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51768: LD_ADDR_VAR 0 55
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51998: LD_ADDR_VAR 0 56
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52228: LD_ADDR_VAR 0 57
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52458: LD_ADDR_VAR 0 58
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52688: LD_ADDR_VAR 0 59
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52776: LD_ADDR_VAR 0 60
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52864: LD_ADDR_VAR 0 61
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52952: LD_ADDR_VAR 0 62
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53040: LD_ADDR_VAR 0 63
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53128: LD_ADDR_VAR 0 64
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// end ; 1 :
53216: GO 59113
53218: LD_INT 1
53220: DOUBLE
53221: EQUAL
53222: IFTRUE 53226
53224: GO 55849
53226: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53227: LD_ADDR_VAR 0 11
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53271: LD_ADDR_VAR 0 12
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53312: LD_ADDR_VAR 0 13
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53352: LD_ADDR_VAR 0 14
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53393: LD_ADDR_VAR 0 15
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53437: LD_ADDR_VAR 0 16
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53483: LD_ADDR_VAR 0 17
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53527: LD_ADDR_VAR 0 18
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53568: LD_ADDR_VAR 0 19
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53608: LD_ADDR_VAR 0 20
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53649: LD_ADDR_VAR 0 21
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53693: LD_ADDR_VAR 0 22
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53739: LD_ADDR_VAR 0 23
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 4
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53783: LD_ADDR_VAR 0 24
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53824: LD_ADDR_VAR 0 25
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 4
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: LD_INT 4
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53864: LD_ADDR_VAR 0 26
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 4
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53905: LD_ADDR_VAR 0 27
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 4
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53949: LD_ADDR_VAR 0 28
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: LD_INT 4
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 4
53980: NEG
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53995: LD_ADDR_VAR 0 29
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 4
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 5
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 6
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 6
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 5
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54150: LD_ADDR_VAR 0 30
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 4
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 4
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 5
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 5
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 5
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 6
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 6
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54293: LD_ADDR_VAR 0 31
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 4
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: LD_INT 5
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: LD_INT 5
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 6
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 6
54400: PUSH
54401: LD_INT 6
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 5
54410: PUSH
54411: LD_INT 6
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54432: LD_ADDR_VAR 0 32
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 4
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 5
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 6
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 6
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 5
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54575: LD_ADDR_VAR 0 33
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 4
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 5
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 5
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 5
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 6
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 6
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54730: LD_ADDR_VAR 0 34
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: NEG
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: LD_INT 4
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 4
54797: NEG
54798: PUSH
54799: LD_INT 4
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 4
54809: NEG
54810: PUSH
54811: LD_INT 5
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 5
54821: NEG
54822: PUSH
54823: LD_INT 4
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 5
54833: NEG
54834: PUSH
54835: LD_INT 5
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 5
54845: NEG
54846: PUSH
54847: LD_INT 6
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 6
54857: NEG
54858: PUSH
54859: LD_INT 5
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 6
54869: NEG
54870: PUSH
54871: LD_INT 6
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54893: LD_ADDR_VAR 0 41
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54937: LD_ADDR_VAR 0 42
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54978: LD_ADDR_VAR 0 43
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: LIST
55017: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55018: LD_ADDR_VAR 0 44
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55059: LD_ADDR_VAR 0 45
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55103: LD_ADDR_VAR 0 46
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55149: LD_ADDR_VAR 0 47
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55182: LD_ADDR_VAR 0 48
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55213: LD_ADDR_VAR 0 49
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55242: LD_ADDR_VAR 0 50
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55271: LD_ADDR_VAR 0 51
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55302: LD_ADDR_VAR 0 52
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 53
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55379: LD_ADDR_VAR 0 54
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55420: LD_ADDR_VAR 0 55
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55460: LD_ADDR_VAR 0 56
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55501: LD_ADDR_VAR 0 57
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55545: LD_ADDR_VAR 0 58
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 59
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55635: LD_ADDR_VAR 0 60
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55676: LD_ADDR_VAR 0 61
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55716: LD_ADDR_VAR 0 62
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55757: LD_ADDR_VAR 0 63
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55801: LD_ADDR_VAR 0 64
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// end ; 2 :
55847: GO 59113
55849: LD_INT 2
55851: DOUBLE
55852: EQUAL
55853: IFTRUE 55857
55855: GO 59112
55857: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55858: LD_ADDR_VAR 0 29
55862: PUSH
55863: LD_INT 4
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 4
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 5
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 5
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 4
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 4
55988: PUSH
55989: LD_INT 4
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 4
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 4
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 4
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 5
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 5
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: LD_INT 5
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 4
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: NEG
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: NEG
56316: PUSH
56317: LD_INT 5
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: LD_INT 5
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56396: LD_ADDR_VAR 0 30
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 4
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 5
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: LD_INT 5
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: LD_INT 5
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: LD_INT 5
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 4
56586: NEG
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 5
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 5
56665: NEG
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 4
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 4
56760: NEG
56761: PUSH
56762: LD_INT 4
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 4
56784: NEG
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 4
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 4
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 5
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56943: LD_ADDR_VAR 0 31
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 5
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 5
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: LD_INT 5
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 4
57099: NEG
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 5
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 4
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: LD_INT 4
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: LD_INT 5
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 5
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 4
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 5
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 5
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57493: LD_ADDR_VAR 0 32
57497: PUSH
57498: LD_INT 4
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 4
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 5
57556: NEG
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 5
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 5
57579: NEG
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 4
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 4
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 5
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 4
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 5
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 4
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 5
57935: PUSH
57936: LD_INT 5
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 4
57945: PUSH
57946: LD_INT 5
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: LD_INT 4
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: LD_INT 5
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58040: LD_ADDR_VAR 0 33
58044: PUSH
58045: LD_INT 4
58047: NEG
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 4
58059: NEG
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: LD_INT 4
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 5
58107: NEG
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 5
58119: NEG
58120: PUSH
58121: LD_INT 5
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: LD_INT 5
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 5
58143: NEG
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 4
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 5
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: LD_INT 4
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: LD_INT 4
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 4
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 4
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 5
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 5
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 5
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58578: LD_ADDR_VAR 0 34
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 5
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 4
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 5
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 5
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 4
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 4
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 5
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 5
58810: PUSH
58811: LD_INT 5
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: LD_INT 5
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: LD_INT 5
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 4
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 4
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 5
59019: NEG
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 5
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// end ; end ;
59110: GO 59113
59112: POP
// case btype of b_depot , b_warehouse :
59113: LD_VAR 0 1
59117: PUSH
59118: LD_INT 0
59120: DOUBLE
59121: EQUAL
59122: IFTRUE 59132
59124: LD_INT 1
59126: DOUBLE
59127: EQUAL
59128: IFTRUE 59132
59130: GO 59333
59132: POP
// case nation of nation_american :
59133: LD_VAR 0 5
59137: PUSH
59138: LD_INT 1
59140: DOUBLE
59141: EQUAL
59142: IFTRUE 59146
59144: GO 59202
59146: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59147: LD_ADDR_VAR 0 9
59151: PUSH
59152: LD_VAR 0 11
59156: PUSH
59157: LD_VAR 0 12
59161: PUSH
59162: LD_VAR 0 13
59166: PUSH
59167: LD_VAR 0 14
59171: PUSH
59172: LD_VAR 0 15
59176: PUSH
59177: LD_VAR 0 16
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: PUSH
59190: LD_VAR 0 4
59194: PUSH
59195: LD_INT 1
59197: PLUS
59198: ARRAY
59199: ST_TO_ADDR
59200: GO 59331
59202: LD_INT 2
59204: DOUBLE
59205: EQUAL
59206: IFTRUE 59210
59208: GO 59266
59210: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59211: LD_ADDR_VAR 0 9
59215: PUSH
59216: LD_VAR 0 17
59220: PUSH
59221: LD_VAR 0 18
59225: PUSH
59226: LD_VAR 0 19
59230: PUSH
59231: LD_VAR 0 20
59235: PUSH
59236: LD_VAR 0 21
59240: PUSH
59241: LD_VAR 0 22
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: PUSH
59254: LD_VAR 0 4
59258: PUSH
59259: LD_INT 1
59261: PLUS
59262: ARRAY
59263: ST_TO_ADDR
59264: GO 59331
59266: LD_INT 3
59268: DOUBLE
59269: EQUAL
59270: IFTRUE 59274
59272: GO 59330
59274: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59275: LD_ADDR_VAR 0 9
59279: PUSH
59280: LD_VAR 0 23
59284: PUSH
59285: LD_VAR 0 24
59289: PUSH
59290: LD_VAR 0 25
59294: PUSH
59295: LD_VAR 0 26
59299: PUSH
59300: LD_VAR 0 27
59304: PUSH
59305: LD_VAR 0 28
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: LD_VAR 0 4
59322: PUSH
59323: LD_INT 1
59325: PLUS
59326: ARRAY
59327: ST_TO_ADDR
59328: GO 59331
59330: POP
59331: GO 59886
59333: LD_INT 2
59335: DOUBLE
59336: EQUAL
59337: IFTRUE 59347
59339: LD_INT 3
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59347
59345: GO 59403
59347: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59348: LD_ADDR_VAR 0 9
59352: PUSH
59353: LD_VAR 0 29
59357: PUSH
59358: LD_VAR 0 30
59362: PUSH
59363: LD_VAR 0 31
59367: PUSH
59368: LD_VAR 0 32
59372: PUSH
59373: LD_VAR 0 33
59377: PUSH
59378: LD_VAR 0 34
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: LD_VAR 0 4
59395: PUSH
59396: LD_INT 1
59398: PLUS
59399: ARRAY
59400: ST_TO_ADDR
59401: GO 59886
59403: LD_INT 16
59405: DOUBLE
59406: EQUAL
59407: IFTRUE 59465
59409: LD_INT 17
59411: DOUBLE
59412: EQUAL
59413: IFTRUE 59465
59415: LD_INT 18
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59465
59421: LD_INT 19
59423: DOUBLE
59424: EQUAL
59425: IFTRUE 59465
59427: LD_INT 22
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59465
59433: LD_INT 20
59435: DOUBLE
59436: EQUAL
59437: IFTRUE 59465
59439: LD_INT 21
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59465
59445: LD_INT 23
59447: DOUBLE
59448: EQUAL
59449: IFTRUE 59465
59451: LD_INT 24
59453: DOUBLE
59454: EQUAL
59455: IFTRUE 59465
59457: LD_INT 25
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59465
59463: GO 59521
59465: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59466: LD_ADDR_VAR 0 9
59470: PUSH
59471: LD_VAR 0 35
59475: PUSH
59476: LD_VAR 0 36
59480: PUSH
59481: LD_VAR 0 37
59485: PUSH
59486: LD_VAR 0 38
59490: PUSH
59491: LD_VAR 0 39
59495: PUSH
59496: LD_VAR 0 40
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: LD_VAR 0 4
59513: PUSH
59514: LD_INT 1
59516: PLUS
59517: ARRAY
59518: ST_TO_ADDR
59519: GO 59886
59521: LD_INT 6
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59577
59527: LD_INT 7
59529: DOUBLE
59530: EQUAL
59531: IFTRUE 59577
59533: LD_INT 8
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59577
59539: LD_INT 13
59541: DOUBLE
59542: EQUAL
59543: IFTRUE 59577
59545: LD_INT 12
59547: DOUBLE
59548: EQUAL
59549: IFTRUE 59577
59551: LD_INT 15
59553: DOUBLE
59554: EQUAL
59555: IFTRUE 59577
59557: LD_INT 11
59559: DOUBLE
59560: EQUAL
59561: IFTRUE 59577
59563: LD_INT 14
59565: DOUBLE
59566: EQUAL
59567: IFTRUE 59577
59569: LD_INT 10
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59577
59575: GO 59633
59577: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59578: LD_ADDR_VAR 0 9
59582: PUSH
59583: LD_VAR 0 41
59587: PUSH
59588: LD_VAR 0 42
59592: PUSH
59593: LD_VAR 0 43
59597: PUSH
59598: LD_VAR 0 44
59602: PUSH
59603: LD_VAR 0 45
59607: PUSH
59608: LD_VAR 0 46
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: PUSH
59621: LD_VAR 0 4
59625: PUSH
59626: LD_INT 1
59628: PLUS
59629: ARRAY
59630: ST_TO_ADDR
59631: GO 59886
59633: LD_INT 36
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59641
59639: GO 59697
59641: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59642: LD_ADDR_VAR 0 9
59646: PUSH
59647: LD_VAR 0 47
59651: PUSH
59652: LD_VAR 0 48
59656: PUSH
59657: LD_VAR 0 49
59661: PUSH
59662: LD_VAR 0 50
59666: PUSH
59667: LD_VAR 0 51
59671: PUSH
59672: LD_VAR 0 52
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: PUSH
59685: LD_VAR 0 4
59689: PUSH
59690: LD_INT 1
59692: PLUS
59693: ARRAY
59694: ST_TO_ADDR
59695: GO 59886
59697: LD_INT 4
59699: DOUBLE
59700: EQUAL
59701: IFTRUE 59723
59703: LD_INT 5
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59723
59709: LD_INT 34
59711: DOUBLE
59712: EQUAL
59713: IFTRUE 59723
59715: LD_INT 37
59717: DOUBLE
59718: EQUAL
59719: IFTRUE 59723
59721: GO 59779
59723: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59724: LD_ADDR_VAR 0 9
59728: PUSH
59729: LD_VAR 0 53
59733: PUSH
59734: LD_VAR 0 54
59738: PUSH
59739: LD_VAR 0 55
59743: PUSH
59744: LD_VAR 0 56
59748: PUSH
59749: LD_VAR 0 57
59753: PUSH
59754: LD_VAR 0 58
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: PUSH
59767: LD_VAR 0 4
59771: PUSH
59772: LD_INT 1
59774: PLUS
59775: ARRAY
59776: ST_TO_ADDR
59777: GO 59886
59779: LD_INT 31
59781: DOUBLE
59782: EQUAL
59783: IFTRUE 59829
59785: LD_INT 32
59787: DOUBLE
59788: EQUAL
59789: IFTRUE 59829
59791: LD_INT 33
59793: DOUBLE
59794: EQUAL
59795: IFTRUE 59829
59797: LD_INT 27
59799: DOUBLE
59800: EQUAL
59801: IFTRUE 59829
59803: LD_INT 26
59805: DOUBLE
59806: EQUAL
59807: IFTRUE 59829
59809: LD_INT 28
59811: DOUBLE
59812: EQUAL
59813: IFTRUE 59829
59815: LD_INT 29
59817: DOUBLE
59818: EQUAL
59819: IFTRUE 59829
59821: LD_INT 30
59823: DOUBLE
59824: EQUAL
59825: IFTRUE 59829
59827: GO 59885
59829: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59830: LD_ADDR_VAR 0 9
59834: PUSH
59835: LD_VAR 0 59
59839: PUSH
59840: LD_VAR 0 60
59844: PUSH
59845: LD_VAR 0 61
59849: PUSH
59850: LD_VAR 0 62
59854: PUSH
59855: LD_VAR 0 63
59859: PUSH
59860: LD_VAR 0 64
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: PUSH
59873: LD_VAR 0 4
59877: PUSH
59878: LD_INT 1
59880: PLUS
59881: ARRAY
59882: ST_TO_ADDR
59883: GO 59886
59885: POP
// temp_list2 = [ ] ;
59886: LD_ADDR_VAR 0 10
59890: PUSH
59891: EMPTY
59892: ST_TO_ADDR
// for i in temp_list do
59893: LD_ADDR_VAR 0 8
59897: PUSH
59898: LD_VAR 0 9
59902: PUSH
59903: FOR_IN
59904: IFFALSE 59956
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59906: LD_ADDR_VAR 0 10
59910: PUSH
59911: LD_VAR 0 10
59915: PUSH
59916: LD_VAR 0 8
59920: PUSH
59921: LD_INT 1
59923: ARRAY
59924: PUSH
59925: LD_VAR 0 2
59929: PLUS
59930: PUSH
59931: LD_VAR 0 8
59935: PUSH
59936: LD_INT 2
59938: ARRAY
59939: PUSH
59940: LD_VAR 0 3
59944: PLUS
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: ADD
59953: ST_TO_ADDR
59954: GO 59903
59956: POP
59957: POP
// result = temp_list2 ;
59958: LD_ADDR_VAR 0 7
59962: PUSH
59963: LD_VAR 0 10
59967: ST_TO_ADDR
// end ;
59968: LD_VAR 0 7
59972: RET
// export function EnemyInRange ( unit , dist ) ; begin
59973: LD_INT 0
59975: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59976: LD_ADDR_VAR 0 3
59980: PUSH
59981: LD_VAR 0 1
59985: PPUSH
59986: CALL_OW 255
59990: PPUSH
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 250
60000: PPUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 251
60010: PPUSH
60011: LD_VAR 0 2
60015: PPUSH
60016: CALL 33774 0 4
60020: PUSH
60021: LD_INT 4
60023: ARRAY
60024: ST_TO_ADDR
// end ;
60025: LD_VAR 0 3
60029: RET
// export function PlayerSeeMe ( unit ) ; begin
60030: LD_INT 0
60032: PPUSH
// result := See ( your_side , unit ) ;
60033: LD_ADDR_VAR 0 2
60037: PUSH
60038: LD_OWVAR 2
60042: PPUSH
60043: LD_VAR 0 1
60047: PPUSH
60048: CALL_OW 292
60052: ST_TO_ADDR
// end ;
60053: LD_VAR 0 2
60057: RET
// export function ReverseDir ( unit ) ; begin
60058: LD_INT 0
60060: PPUSH
// if not unit then
60061: LD_VAR 0 1
60065: NOT
60066: IFFALSE 60070
// exit ;
60068: GO 60093
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60070: LD_ADDR_VAR 0 2
60074: PUSH
60075: LD_VAR 0 1
60079: PPUSH
60080: CALL_OW 254
60084: PUSH
60085: LD_INT 3
60087: PLUS
60088: PUSH
60089: LD_INT 6
60091: MOD
60092: ST_TO_ADDR
// end ;
60093: LD_VAR 0 2
60097: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60098: LD_INT 0
60100: PPUSH
60101: PPUSH
60102: PPUSH
60103: PPUSH
60104: PPUSH
// if not hexes then
60105: LD_VAR 0 2
60109: NOT
60110: IFFALSE 60114
// exit ;
60112: GO 60262
// dist := 9999 ;
60114: LD_ADDR_VAR 0 5
60118: PUSH
60119: LD_INT 9999
60121: ST_TO_ADDR
// for i = 1 to hexes do
60122: LD_ADDR_VAR 0 4
60126: PUSH
60127: DOUBLE
60128: LD_INT 1
60130: DEC
60131: ST_TO_ADDR
60132: LD_VAR 0 2
60136: PUSH
60137: FOR_TO
60138: IFFALSE 60250
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60140: LD_VAR 0 1
60144: PPUSH
60145: LD_VAR 0 2
60149: PUSH
60150: LD_VAR 0 4
60154: ARRAY
60155: PUSH
60156: LD_INT 1
60158: ARRAY
60159: PPUSH
60160: LD_VAR 0 2
60164: PUSH
60165: LD_VAR 0 4
60169: ARRAY
60170: PUSH
60171: LD_INT 2
60173: ARRAY
60174: PPUSH
60175: CALL_OW 297
60179: PUSH
60180: LD_VAR 0 5
60184: LESS
60185: IFFALSE 60248
// begin hex := hexes [ i ] ;
60187: LD_ADDR_VAR 0 7
60191: PUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_VAR 0 4
60201: ARRAY
60202: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60203: LD_ADDR_VAR 0 5
60207: PUSH
60208: LD_VAR 0 1
60212: PPUSH
60213: LD_VAR 0 2
60217: PUSH
60218: LD_VAR 0 4
60222: ARRAY
60223: PUSH
60224: LD_INT 1
60226: ARRAY
60227: PPUSH
60228: LD_VAR 0 2
60232: PUSH
60233: LD_VAR 0 4
60237: ARRAY
60238: PUSH
60239: LD_INT 2
60241: ARRAY
60242: PPUSH
60243: CALL_OW 297
60247: ST_TO_ADDR
// end ; end ;
60248: GO 60137
60250: POP
60251: POP
// result := hex ;
60252: LD_ADDR_VAR 0 3
60256: PUSH
60257: LD_VAR 0 7
60261: ST_TO_ADDR
// end ;
60262: LD_VAR 0 3
60266: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60267: LD_INT 0
60269: PPUSH
60270: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60271: LD_VAR 0 1
60275: NOT
60276: PUSH
60277: LD_VAR 0 1
60281: PUSH
60282: LD_INT 21
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 23
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PPUSH
60306: CALL_OW 69
60310: IN
60311: NOT
60312: OR
60313: IFFALSE 60317
// exit ;
60315: GO 60364
// for i = 1 to 3 do
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: DOUBLE
60323: LD_INT 1
60325: DEC
60326: ST_TO_ADDR
60327: LD_INT 3
60329: PUSH
60330: FOR_TO
60331: IFFALSE 60362
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60333: LD_VAR 0 1
60337: PPUSH
60338: CALL_OW 250
60342: PPUSH
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 251
60352: PPUSH
60353: LD_INT 1
60355: PPUSH
60356: CALL_OW 453
60360: GO 60330
60362: POP
60363: POP
// end ;
60364: LD_VAR 0 2
60368: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60369: LD_INT 0
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
60376: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60377: LD_VAR 0 1
60381: NOT
60382: PUSH
60383: LD_VAR 0 2
60387: NOT
60388: OR
60389: PUSH
60390: LD_VAR 0 1
60394: PPUSH
60395: CALL_OW 314
60399: OR
60400: IFFALSE 60404
// exit ;
60402: GO 60845
// x := GetX ( enemy_unit ) ;
60404: LD_ADDR_VAR 0 7
60408: PUSH
60409: LD_VAR 0 2
60413: PPUSH
60414: CALL_OW 250
60418: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60419: LD_ADDR_VAR 0 8
60423: PUSH
60424: LD_VAR 0 2
60428: PPUSH
60429: CALL_OW 251
60433: ST_TO_ADDR
// if not x or not y then
60434: LD_VAR 0 7
60438: NOT
60439: PUSH
60440: LD_VAR 0 8
60444: NOT
60445: OR
60446: IFFALSE 60450
// exit ;
60448: GO 60845
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60450: LD_ADDR_VAR 0 6
60454: PUSH
60455: LD_VAR 0 7
60459: PPUSH
60460: LD_INT 0
60462: PPUSH
60463: LD_INT 4
60465: PPUSH
60466: CALL_OW 272
60470: PUSH
60471: LD_VAR 0 8
60475: PPUSH
60476: LD_INT 0
60478: PPUSH
60479: LD_INT 4
60481: PPUSH
60482: CALL_OW 273
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_VAR 0 7
60495: PPUSH
60496: LD_INT 1
60498: PPUSH
60499: LD_INT 4
60501: PPUSH
60502: CALL_OW 272
60506: PUSH
60507: LD_VAR 0 8
60511: PPUSH
60512: LD_INT 1
60514: PPUSH
60515: LD_INT 4
60517: PPUSH
60518: CALL_OW 273
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_VAR 0 7
60531: PPUSH
60532: LD_INT 2
60534: PPUSH
60535: LD_INT 4
60537: PPUSH
60538: CALL_OW 272
60542: PUSH
60543: LD_VAR 0 8
60547: PPUSH
60548: LD_INT 2
60550: PPUSH
60551: LD_INT 4
60553: PPUSH
60554: CALL_OW 273
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_VAR 0 7
60567: PPUSH
60568: LD_INT 3
60570: PPUSH
60571: LD_INT 4
60573: PPUSH
60574: CALL_OW 272
60578: PUSH
60579: LD_VAR 0 8
60583: PPUSH
60584: LD_INT 3
60586: PPUSH
60587: LD_INT 4
60589: PPUSH
60590: CALL_OW 273
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_VAR 0 7
60603: PPUSH
60604: LD_INT 4
60606: PPUSH
60607: LD_INT 4
60609: PPUSH
60610: CALL_OW 272
60614: PUSH
60615: LD_VAR 0 8
60619: PPUSH
60620: LD_INT 4
60622: PPUSH
60623: LD_INT 4
60625: PPUSH
60626: CALL_OW 273
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_VAR 0 7
60639: PPUSH
60640: LD_INT 5
60642: PPUSH
60643: LD_INT 4
60645: PPUSH
60646: CALL_OW 272
60650: PUSH
60651: LD_VAR 0 8
60655: PPUSH
60656: LD_INT 5
60658: PPUSH
60659: LD_INT 4
60661: PPUSH
60662: CALL_OW 273
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: ST_TO_ADDR
// for i = tmp downto 1 do
60679: LD_ADDR_VAR 0 4
60683: PUSH
60684: DOUBLE
60685: LD_VAR 0 6
60689: INC
60690: ST_TO_ADDR
60691: LD_INT 1
60693: PUSH
60694: FOR_DOWNTO
60695: IFFALSE 60796
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60697: LD_VAR 0 6
60701: PUSH
60702: LD_VAR 0 4
60706: ARRAY
60707: PUSH
60708: LD_INT 1
60710: ARRAY
60711: PPUSH
60712: LD_VAR 0 6
60716: PUSH
60717: LD_VAR 0 4
60721: ARRAY
60722: PUSH
60723: LD_INT 2
60725: ARRAY
60726: PPUSH
60727: CALL_OW 488
60731: NOT
60732: PUSH
60733: LD_VAR 0 6
60737: PUSH
60738: LD_VAR 0 4
60742: ARRAY
60743: PUSH
60744: LD_INT 1
60746: ARRAY
60747: PPUSH
60748: LD_VAR 0 6
60752: PUSH
60753: LD_VAR 0 4
60757: ARRAY
60758: PUSH
60759: LD_INT 2
60761: ARRAY
60762: PPUSH
60763: CALL_OW 428
60767: PUSH
60768: LD_INT 0
60770: NONEQUAL
60771: OR
60772: IFFALSE 60794
// tmp := Delete ( tmp , i ) ;
60774: LD_ADDR_VAR 0 6
60778: PUSH
60779: LD_VAR 0 6
60783: PPUSH
60784: LD_VAR 0 4
60788: PPUSH
60789: CALL_OW 3
60793: ST_TO_ADDR
60794: GO 60694
60796: POP
60797: POP
// j := GetClosestHex ( unit , tmp ) ;
60798: LD_ADDR_VAR 0 5
60802: PUSH
60803: LD_VAR 0 1
60807: PPUSH
60808: LD_VAR 0 6
60812: PPUSH
60813: CALL 60098 0 2
60817: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60818: LD_VAR 0 1
60822: PPUSH
60823: LD_VAR 0 5
60827: PUSH
60828: LD_INT 1
60830: ARRAY
60831: PPUSH
60832: LD_VAR 0 5
60836: PUSH
60837: LD_INT 2
60839: ARRAY
60840: PPUSH
60841: CALL_OW 111
// end ;
60845: LD_VAR 0 3
60849: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60850: LD_INT 0
60852: PPUSH
60853: PPUSH
60854: PPUSH
// uc_side = 0 ;
60855: LD_ADDR_OWVAR 20
60859: PUSH
60860: LD_INT 0
60862: ST_TO_ADDR
// uc_nation = 0 ;
60863: LD_ADDR_OWVAR 21
60867: PUSH
60868: LD_INT 0
60870: ST_TO_ADDR
// InitHc_All ( ) ;
60871: CALL_OW 584
// InitVc ;
60875: CALL_OW 20
// if mastodonts then
60879: LD_VAR 0 6
60883: IFFALSE 60950
// for i = 1 to mastodonts do
60885: LD_ADDR_VAR 0 11
60889: PUSH
60890: DOUBLE
60891: LD_INT 1
60893: DEC
60894: ST_TO_ADDR
60895: LD_VAR 0 6
60899: PUSH
60900: FOR_TO
60901: IFFALSE 60948
// begin vc_chassis := 31 ;
60903: LD_ADDR_OWVAR 37
60907: PUSH
60908: LD_INT 31
60910: ST_TO_ADDR
// vc_control := control_rider ;
60911: LD_ADDR_OWVAR 38
60915: PUSH
60916: LD_INT 4
60918: ST_TO_ADDR
// animal := CreateVehicle ;
60919: LD_ADDR_VAR 0 12
60923: PUSH
60924: CALL_OW 45
60928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60929: LD_VAR 0 12
60933: PPUSH
60934: LD_VAR 0 8
60938: PPUSH
60939: LD_INT 0
60941: PPUSH
60942: CALL 63138 0 3
// end ;
60946: GO 60900
60948: POP
60949: POP
// if horses then
60950: LD_VAR 0 5
60954: IFFALSE 61021
// for i = 1 to horses do
60956: LD_ADDR_VAR 0 11
60960: PUSH
60961: DOUBLE
60962: LD_INT 1
60964: DEC
60965: ST_TO_ADDR
60966: LD_VAR 0 5
60970: PUSH
60971: FOR_TO
60972: IFFALSE 61019
// begin hc_class := 21 ;
60974: LD_ADDR_OWVAR 28
60978: PUSH
60979: LD_INT 21
60981: ST_TO_ADDR
// hc_gallery :=  ;
60982: LD_ADDR_OWVAR 33
60986: PUSH
60987: LD_STRING 
60989: ST_TO_ADDR
// animal := CreateHuman ;
60990: LD_ADDR_VAR 0 12
60994: PUSH
60995: CALL_OW 44
60999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61000: LD_VAR 0 12
61004: PPUSH
61005: LD_VAR 0 8
61009: PPUSH
61010: LD_INT 0
61012: PPUSH
61013: CALL 63138 0 3
// end ;
61017: GO 60971
61019: POP
61020: POP
// if birds then
61021: LD_VAR 0 1
61025: IFFALSE 61092
// for i = 1 to birds do
61027: LD_ADDR_VAR 0 11
61031: PUSH
61032: DOUBLE
61033: LD_INT 1
61035: DEC
61036: ST_TO_ADDR
61037: LD_VAR 0 1
61041: PUSH
61042: FOR_TO
61043: IFFALSE 61090
// begin hc_class = 18 ;
61045: LD_ADDR_OWVAR 28
61049: PUSH
61050: LD_INT 18
61052: ST_TO_ADDR
// hc_gallery =  ;
61053: LD_ADDR_OWVAR 33
61057: PUSH
61058: LD_STRING 
61060: ST_TO_ADDR
// animal := CreateHuman ;
61061: LD_ADDR_VAR 0 12
61065: PUSH
61066: CALL_OW 44
61070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61071: LD_VAR 0 12
61075: PPUSH
61076: LD_VAR 0 8
61080: PPUSH
61081: LD_INT 0
61083: PPUSH
61084: CALL 63138 0 3
// end ;
61088: GO 61042
61090: POP
61091: POP
// if tigers then
61092: LD_VAR 0 2
61096: IFFALSE 61180
// for i = 1 to tigers do
61098: LD_ADDR_VAR 0 11
61102: PUSH
61103: DOUBLE
61104: LD_INT 1
61106: DEC
61107: ST_TO_ADDR
61108: LD_VAR 0 2
61112: PUSH
61113: FOR_TO
61114: IFFALSE 61178
// begin hc_class = class_tiger ;
61116: LD_ADDR_OWVAR 28
61120: PUSH
61121: LD_INT 14
61123: ST_TO_ADDR
// hc_gallery =  ;
61124: LD_ADDR_OWVAR 33
61128: PUSH
61129: LD_STRING 
61131: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61132: LD_ADDR_OWVAR 35
61136: PUSH
61137: LD_INT 7
61139: NEG
61140: PPUSH
61141: LD_INT 7
61143: PPUSH
61144: CALL_OW 12
61148: ST_TO_ADDR
// animal := CreateHuman ;
61149: LD_ADDR_VAR 0 12
61153: PUSH
61154: CALL_OW 44
61158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61159: LD_VAR 0 12
61163: PPUSH
61164: LD_VAR 0 8
61168: PPUSH
61169: LD_INT 0
61171: PPUSH
61172: CALL 63138 0 3
// end ;
61176: GO 61113
61178: POP
61179: POP
// if apemans then
61180: LD_VAR 0 3
61184: IFFALSE 61307
// for i = 1 to apemans do
61186: LD_ADDR_VAR 0 11
61190: PUSH
61191: DOUBLE
61192: LD_INT 1
61194: DEC
61195: ST_TO_ADDR
61196: LD_VAR 0 3
61200: PUSH
61201: FOR_TO
61202: IFFALSE 61305
// begin hc_class = class_apeman ;
61204: LD_ADDR_OWVAR 28
61208: PUSH
61209: LD_INT 12
61211: ST_TO_ADDR
// hc_gallery =  ;
61212: LD_ADDR_OWVAR 33
61216: PUSH
61217: LD_STRING 
61219: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61220: LD_ADDR_OWVAR 35
61224: PUSH
61225: LD_INT 5
61227: NEG
61228: PPUSH
61229: LD_INT 5
61231: PPUSH
61232: CALL_OW 12
61236: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61237: LD_ADDR_OWVAR 31
61241: PUSH
61242: LD_INT 1
61244: PPUSH
61245: LD_INT 3
61247: PPUSH
61248: CALL_OW 12
61252: PUSH
61253: LD_INT 1
61255: PPUSH
61256: LD_INT 3
61258: PPUSH
61259: CALL_OW 12
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: ST_TO_ADDR
// animal := CreateHuman ;
61276: LD_ADDR_VAR 0 12
61280: PUSH
61281: CALL_OW 44
61285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61286: LD_VAR 0 12
61290: PPUSH
61291: LD_VAR 0 8
61295: PPUSH
61296: LD_INT 0
61298: PPUSH
61299: CALL 63138 0 3
// end ;
61303: GO 61201
61305: POP
61306: POP
// if enchidnas then
61307: LD_VAR 0 4
61311: IFFALSE 61378
// for i = 1 to enchidnas do
61313: LD_ADDR_VAR 0 11
61317: PUSH
61318: DOUBLE
61319: LD_INT 1
61321: DEC
61322: ST_TO_ADDR
61323: LD_VAR 0 4
61327: PUSH
61328: FOR_TO
61329: IFFALSE 61376
// begin hc_class = 13 ;
61331: LD_ADDR_OWVAR 28
61335: PUSH
61336: LD_INT 13
61338: ST_TO_ADDR
// hc_gallery =  ;
61339: LD_ADDR_OWVAR 33
61343: PUSH
61344: LD_STRING 
61346: ST_TO_ADDR
// animal := CreateHuman ;
61347: LD_ADDR_VAR 0 12
61351: PUSH
61352: CALL_OW 44
61356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61357: LD_VAR 0 12
61361: PPUSH
61362: LD_VAR 0 8
61366: PPUSH
61367: LD_INT 0
61369: PPUSH
61370: CALL 63138 0 3
// end ;
61374: GO 61328
61376: POP
61377: POP
// if fishes then
61378: LD_VAR 0 7
61382: IFFALSE 61449
// for i = 1 to fishes do
61384: LD_ADDR_VAR 0 11
61388: PUSH
61389: DOUBLE
61390: LD_INT 1
61392: DEC
61393: ST_TO_ADDR
61394: LD_VAR 0 7
61398: PUSH
61399: FOR_TO
61400: IFFALSE 61447
// begin hc_class = 20 ;
61402: LD_ADDR_OWVAR 28
61406: PUSH
61407: LD_INT 20
61409: ST_TO_ADDR
// hc_gallery =  ;
61410: LD_ADDR_OWVAR 33
61414: PUSH
61415: LD_STRING 
61417: ST_TO_ADDR
// animal := CreateHuman ;
61418: LD_ADDR_VAR 0 12
61422: PUSH
61423: CALL_OW 44
61427: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61428: LD_VAR 0 12
61432: PPUSH
61433: LD_VAR 0 9
61437: PPUSH
61438: LD_INT 0
61440: PPUSH
61441: CALL 63138 0 3
// end ;
61445: GO 61399
61447: POP
61448: POP
// end ;
61449: LD_VAR 0 10
61453: RET
// export function WantHeal ( sci , unit ) ; begin
61454: LD_INT 0
61456: PPUSH
// if GetTaskList ( sci ) > 0 then
61457: LD_VAR 0 1
61461: PPUSH
61462: CALL_OW 437
61466: PUSH
61467: LD_INT 0
61469: GREATER
61470: IFFALSE 61540
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61472: LD_VAR 0 1
61476: PPUSH
61477: CALL_OW 437
61481: PUSH
61482: LD_INT 1
61484: ARRAY
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: LD_STRING l
61492: EQUAL
61493: PUSH
61494: LD_VAR 0 1
61498: PPUSH
61499: CALL_OW 437
61503: PUSH
61504: LD_INT 1
61506: ARRAY
61507: PUSH
61508: LD_INT 4
61510: ARRAY
61511: PUSH
61512: LD_VAR 0 2
61516: EQUAL
61517: AND
61518: IFFALSE 61530
// result := true else
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_INT 1
61527: ST_TO_ADDR
61528: GO 61538
// result := false ;
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: LD_INT 0
61537: ST_TO_ADDR
// end else
61538: GO 61548
// result := false ;
61540: LD_ADDR_VAR 0 3
61544: PUSH
61545: LD_INT 0
61547: ST_TO_ADDR
// end ;
61548: LD_VAR 0 3
61552: RET
// export function HealTarget ( sci ) ; begin
61553: LD_INT 0
61555: PPUSH
// if not sci then
61556: LD_VAR 0 1
61560: NOT
61561: IFFALSE 61565
// exit ;
61563: GO 61630
// result := 0 ;
61565: LD_ADDR_VAR 0 2
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// if GetTaskList ( sci ) then
61573: LD_VAR 0 1
61577: PPUSH
61578: CALL_OW 437
61582: IFFALSE 61630
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61584: LD_VAR 0 1
61588: PPUSH
61589: CALL_OW 437
61593: PUSH
61594: LD_INT 1
61596: ARRAY
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PUSH
61602: LD_STRING l
61604: EQUAL
61605: IFFALSE 61630
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61607: LD_ADDR_VAR 0 2
61611: PUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: CALL_OW 437
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: LD_INT 4
61628: ARRAY
61629: ST_TO_ADDR
// end ;
61630: LD_VAR 0 2
61634: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61635: LD_INT 0
61637: PPUSH
61638: PPUSH
61639: PPUSH
61640: PPUSH
// if not base_units then
61641: LD_VAR 0 1
61645: NOT
61646: IFFALSE 61650
// exit ;
61648: GO 61737
// result := false ;
61650: LD_ADDR_VAR 0 2
61654: PUSH
61655: LD_INT 0
61657: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61658: LD_ADDR_VAR 0 5
61662: PUSH
61663: LD_VAR 0 1
61667: PPUSH
61668: LD_INT 21
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PPUSH
61678: CALL_OW 72
61682: ST_TO_ADDR
// if not tmp then
61683: LD_VAR 0 5
61687: NOT
61688: IFFALSE 61692
// exit ;
61690: GO 61737
// for i in tmp do
61692: LD_ADDR_VAR 0 3
61696: PUSH
61697: LD_VAR 0 5
61701: PUSH
61702: FOR_IN
61703: IFFALSE 61735
// begin result := EnemyInRange ( i , 22 ) ;
61705: LD_ADDR_VAR 0 2
61709: PUSH
61710: LD_VAR 0 3
61714: PPUSH
61715: LD_INT 22
61717: PPUSH
61718: CALL 59973 0 2
61722: ST_TO_ADDR
// if result then
61723: LD_VAR 0 2
61727: IFFALSE 61733
// exit ;
61729: POP
61730: POP
61731: GO 61737
// end ;
61733: GO 61702
61735: POP
61736: POP
// end ;
61737: LD_VAR 0 2
61741: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61742: LD_INT 0
61744: PPUSH
61745: PPUSH
// if not units then
61746: LD_VAR 0 1
61750: NOT
61751: IFFALSE 61755
// exit ;
61753: GO 61825
// result := [ ] ;
61755: LD_ADDR_VAR 0 3
61759: PUSH
61760: EMPTY
61761: ST_TO_ADDR
// for i in units do
61762: LD_ADDR_VAR 0 4
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: FOR_IN
61773: IFFALSE 61823
// if GetTag ( i ) = tag then
61775: LD_VAR 0 4
61779: PPUSH
61780: CALL_OW 110
61784: PUSH
61785: LD_VAR 0 2
61789: EQUAL
61790: IFFALSE 61821
// result := Insert ( result , result + 1 , i ) ;
61792: LD_ADDR_VAR 0 3
61796: PUSH
61797: LD_VAR 0 3
61801: PPUSH
61802: LD_VAR 0 3
61806: PUSH
61807: LD_INT 1
61809: PLUS
61810: PPUSH
61811: LD_VAR 0 4
61815: PPUSH
61816: CALL_OW 2
61820: ST_TO_ADDR
61821: GO 61772
61823: POP
61824: POP
// end ;
61825: LD_VAR 0 3
61829: RET
// export function IsDriver ( un ) ; begin
61830: LD_INT 0
61832: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61833: LD_ADDR_VAR 0 2
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: LD_INT 55
61845: PUSH
61846: EMPTY
61847: LIST
61848: PPUSH
61849: CALL_OW 69
61853: IN
61854: ST_TO_ADDR
// end ;
61855: LD_VAR 0 2
61859: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61860: LD_INT 0
61862: PPUSH
61863: PPUSH
// list := [ ] ;
61864: LD_ADDR_VAR 0 5
61868: PUSH
61869: EMPTY
61870: ST_TO_ADDR
// case d of 0 :
61871: LD_VAR 0 3
61875: PUSH
61876: LD_INT 0
61878: DOUBLE
61879: EQUAL
61880: IFTRUE 61884
61882: GO 62017
61884: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61885: LD_ADDR_VAR 0 5
61889: PUSH
61890: LD_VAR 0 1
61894: PUSH
61895: LD_INT 4
61897: MINUS
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_INT 4
61906: MINUS
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 1
61920: PUSH
61921: LD_INT 3
61923: MINUS
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 1
61942: PUSH
61943: LD_INT 4
61945: PLUS
61946: PUSH
61947: LD_VAR 0 2
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: LIST
61959: PUSH
61960: LD_VAR 0 1
61964: PUSH
61965: LD_INT 3
61967: PLUS
61968: PUSH
61969: LD_VAR 0 2
61973: PUSH
61974: LD_INT 3
61976: PLUS
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: LIST
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_VAR 0 2
61995: PUSH
61996: LD_INT 4
61998: PLUS
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: ST_TO_ADDR
// end ; 1 :
62015: GO 62715
62017: LD_INT 1
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62025
62023: GO 62158
62025: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62026: LD_ADDR_VAR 0 5
62030: PUSH
62031: LD_VAR 0 1
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_INT 4
62043: MINUS
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: PUSH
62053: LD_VAR 0 1
62057: PUSH
62058: LD_INT 3
62060: MINUS
62061: PUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 3
62069: MINUS
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_INT 4
62086: MINUS
62087: PUSH
62088: LD_VAR 0 2
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: LIST
62100: PUSH
62101: LD_VAR 0 1
62105: PUSH
62106: LD_VAR 0 2
62110: PUSH
62111: LD_INT 3
62113: PLUS
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: PUSH
62123: LD_VAR 0 1
62127: PUSH
62128: LD_INT 4
62130: PLUS
62131: PUSH
62132: LD_VAR 0 2
62136: PUSH
62137: LD_INT 4
62139: PLUS
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// end ; 2 :
62156: GO 62715
62158: LD_INT 2
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62166
62164: GO 62295
62166: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62167: LD_ADDR_VAR 0 5
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_VAR 0 2
62181: PUSH
62182: LD_INT 3
62184: MINUS
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: LD_INT 4
62201: PLUS
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: PUSH
62216: LD_VAR 0 1
62220: PUSH
62221: LD_VAR 0 2
62225: PUSH
62226: LD_INT 4
62228: PLUS
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: PUSH
62238: LD_VAR 0 1
62242: PUSH
62243: LD_INT 3
62245: MINUS
62246: PUSH
62247: LD_VAR 0 2
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: PUSH
62260: LD_VAR 0 1
62264: PUSH
62265: LD_INT 4
62267: MINUS
62268: PUSH
62269: LD_VAR 0 2
62273: PUSH
62274: LD_INT 4
62276: MINUS
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: ST_TO_ADDR
// end ; 3 :
62293: GO 62715
62295: LD_INT 3
62297: DOUBLE
62298: EQUAL
62299: IFTRUE 62303
62301: GO 62436
62303: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62304: LD_ADDR_VAR 0 5
62308: PUSH
62309: LD_VAR 0 1
62313: PUSH
62314: LD_INT 3
62316: PLUS
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_INT 4
62338: PLUS
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 4
62347: PLUS
62348: PUSH
62349: LD_INT 5
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PUSH
62357: LD_VAR 0 1
62361: PUSH
62362: LD_INT 4
62364: MINUS
62365: PUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: LD_VAR 0 1
62383: PUSH
62384: LD_VAR 0 2
62388: PUSH
62389: LD_INT 4
62391: MINUS
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: PUSH
62401: LD_VAR 0 1
62405: PUSH
62406: LD_INT 3
62408: MINUS
62409: PUSH
62410: LD_VAR 0 2
62414: PUSH
62415: LD_INT 3
62417: MINUS
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: ST_TO_ADDR
// end ; 4 :
62434: GO 62715
62436: LD_INT 4
62438: DOUBLE
62439: EQUAL
62440: IFTRUE 62444
62442: GO 62577
62444: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62445: LD_ADDR_VAR 0 5
62449: PUSH
62450: LD_VAR 0 1
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_INT 4
62462: PLUS
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: LD_VAR 0 1
62476: PUSH
62477: LD_INT 3
62479: PLUS
62480: PUSH
62481: LD_VAR 0 2
62485: PUSH
62486: LD_INT 3
62488: PLUS
62489: PUSH
62490: LD_INT 5
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: LD_VAR 0 1
62502: PUSH
62503: LD_INT 4
62505: PLUS
62506: PUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: LD_VAR 0 2
62529: PUSH
62530: LD_INT 3
62532: MINUS
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: PUSH
62542: LD_VAR 0 1
62546: PUSH
62547: LD_INT 4
62549: MINUS
62550: PUSH
62551: LD_VAR 0 2
62555: PUSH
62556: LD_INT 4
62558: MINUS
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// end ; 5 :
62575: GO 62715
62577: LD_INT 5
62579: DOUBLE
62580: EQUAL
62581: IFTRUE 62585
62583: GO 62714
62585: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62586: LD_ADDR_VAR 0 5
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_INT 4
62598: MINUS
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: PUSH
62613: LD_VAR 0 1
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 4
62625: MINUS
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: PUSH
62635: LD_VAR 0 1
62639: PUSH
62640: LD_INT 4
62642: PLUS
62643: PUSH
62644: LD_VAR 0 2
62648: PUSH
62649: LD_INT 4
62651: PLUS
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: LIST
62660: PUSH
62661: LD_VAR 0 1
62665: PUSH
62666: LD_INT 3
62668: PLUS
62669: PUSH
62670: LD_VAR 0 2
62674: PUSH
62675: LD_INT 4
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: LD_VAR 0 1
62687: PUSH
62688: LD_VAR 0 2
62692: PUSH
62693: LD_INT 3
62695: PLUS
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// end ; end ;
62712: GO 62715
62714: POP
// result := list ;
62715: LD_ADDR_VAR 0 4
62719: PUSH
62720: LD_VAR 0 5
62724: ST_TO_ADDR
// end ;
62725: LD_VAR 0 4
62729: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62730: LD_INT 0
62732: PPUSH
62733: PPUSH
62734: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62735: LD_VAR 0 1
62739: NOT
62740: PUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: LD_INT 4
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: IN
62764: NOT
62765: OR
62766: IFFALSE 62770
// exit ;
62768: GO 62862
// tmp := [ ] ;
62770: LD_ADDR_VAR 0 5
62774: PUSH
62775: EMPTY
62776: ST_TO_ADDR
// for i in units do
62777: LD_ADDR_VAR 0 4
62781: PUSH
62782: LD_VAR 0 1
62786: PUSH
62787: FOR_IN
62788: IFFALSE 62831
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62790: LD_ADDR_VAR 0 5
62794: PUSH
62795: LD_VAR 0 5
62799: PPUSH
62800: LD_VAR 0 5
62804: PUSH
62805: LD_INT 1
62807: PLUS
62808: PPUSH
62809: LD_VAR 0 4
62813: PPUSH
62814: LD_VAR 0 2
62818: PPUSH
62819: CALL_OW 259
62823: PPUSH
62824: CALL_OW 2
62828: ST_TO_ADDR
62829: GO 62787
62831: POP
62832: POP
// if not tmp then
62833: LD_VAR 0 5
62837: NOT
62838: IFFALSE 62842
// exit ;
62840: GO 62862
// result := SortListByListDesc ( units , tmp ) ;
62842: LD_ADDR_VAR 0 3
62846: PUSH
62847: LD_VAR 0 1
62851: PPUSH
62852: LD_VAR 0 5
62856: PPUSH
62857: CALL_OW 77
62861: ST_TO_ADDR
// end ;
62862: LD_VAR 0 3
62866: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62867: LD_INT 0
62869: PPUSH
62870: PPUSH
62871: PPUSH
// result := false ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_INT 0
62879: ST_TO_ADDR
// x := GetX ( building ) ;
62880: LD_ADDR_VAR 0 4
62884: PUSH
62885: LD_VAR 0 2
62889: PPUSH
62890: CALL_OW 250
62894: ST_TO_ADDR
// y := GetY ( building ) ;
62895: LD_ADDR_VAR 0 5
62899: PUSH
62900: LD_VAR 0 2
62904: PPUSH
62905: CALL_OW 251
62909: ST_TO_ADDR
// if not building or not x or not y then
62910: LD_VAR 0 2
62914: NOT
62915: PUSH
62916: LD_VAR 0 4
62920: NOT
62921: OR
62922: PUSH
62923: LD_VAR 0 5
62927: NOT
62928: OR
62929: IFFALSE 62933
// exit ;
62931: GO 63025
// if GetTaskList ( unit ) then
62933: LD_VAR 0 1
62937: PPUSH
62938: CALL_OW 437
62942: IFFALSE 63025
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62944: LD_STRING e
62946: PUSH
62947: LD_VAR 0 1
62951: PPUSH
62952: CALL_OW 437
62956: PUSH
62957: LD_INT 1
62959: ARRAY
62960: PUSH
62961: LD_INT 1
62963: ARRAY
62964: EQUAL
62965: PUSH
62966: LD_VAR 0 4
62970: PUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: CALL_OW 437
62980: PUSH
62981: LD_INT 1
62983: ARRAY
62984: PUSH
62985: LD_INT 2
62987: ARRAY
62988: EQUAL
62989: AND
62990: PUSH
62991: LD_VAR 0 5
62995: PUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: CALL_OW 437
63005: PUSH
63006: LD_INT 1
63008: ARRAY
63009: PUSH
63010: LD_INT 3
63012: ARRAY
63013: EQUAL
63014: AND
63015: IFFALSE 63025
// result := true end ;
63017: LD_ADDR_VAR 0 3
63021: PUSH
63022: LD_INT 1
63024: ST_TO_ADDR
// end ;
63025: LD_VAR 0 3
63029: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63030: LD_INT 0
63032: PPUSH
// result := false ;
63033: LD_ADDR_VAR 0 4
63037: PUSH
63038: LD_INT 0
63040: ST_TO_ADDR
// if GetTaskList ( unit ) then
63041: LD_VAR 0 1
63045: PPUSH
63046: CALL_OW 437
63050: IFFALSE 63133
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63052: LD_STRING M
63054: PUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: CALL_OW 437
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PUSH
63069: LD_INT 1
63071: ARRAY
63072: EQUAL
63073: PUSH
63074: LD_VAR 0 2
63078: PUSH
63079: LD_VAR 0 1
63083: PPUSH
63084: CALL_OW 437
63088: PUSH
63089: LD_INT 1
63091: ARRAY
63092: PUSH
63093: LD_INT 2
63095: ARRAY
63096: EQUAL
63097: AND
63098: PUSH
63099: LD_VAR 0 3
63103: PUSH
63104: LD_VAR 0 1
63108: PPUSH
63109: CALL_OW 437
63113: PUSH
63114: LD_INT 1
63116: ARRAY
63117: PUSH
63118: LD_INT 3
63120: ARRAY
63121: EQUAL
63122: AND
63123: IFFALSE 63133
// result := true ;
63125: LD_ADDR_VAR 0 4
63129: PUSH
63130: LD_INT 1
63132: ST_TO_ADDR
// end ; end ;
63133: LD_VAR 0 4
63137: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
// if not unit or not area then
63144: LD_VAR 0 1
63148: NOT
63149: PUSH
63150: LD_VAR 0 2
63154: NOT
63155: OR
63156: IFFALSE 63160
// exit ;
63158: GO 63324
// tmp := AreaToList ( area , i ) ;
63160: LD_ADDR_VAR 0 6
63164: PUSH
63165: LD_VAR 0 2
63169: PPUSH
63170: LD_VAR 0 5
63174: PPUSH
63175: CALL_OW 517
63179: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63180: LD_ADDR_VAR 0 5
63184: PUSH
63185: DOUBLE
63186: LD_INT 1
63188: DEC
63189: ST_TO_ADDR
63190: LD_VAR 0 6
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PUSH
63199: FOR_TO
63200: IFFALSE 63322
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63202: LD_ADDR_VAR 0 7
63206: PUSH
63207: LD_VAR 0 6
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PUSH
63216: LD_VAR 0 5
63220: ARRAY
63221: PUSH
63222: LD_VAR 0 6
63226: PUSH
63227: LD_INT 2
63229: ARRAY
63230: PUSH
63231: LD_VAR 0 5
63235: ARRAY
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63241: LD_VAR 0 7
63245: PUSH
63246: LD_INT 1
63248: ARRAY
63249: PPUSH
63250: LD_VAR 0 7
63254: PUSH
63255: LD_INT 2
63257: ARRAY
63258: PPUSH
63259: CALL_OW 428
63263: PUSH
63264: LD_INT 0
63266: EQUAL
63267: IFFALSE 63320
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63269: LD_VAR 0 1
63273: PPUSH
63274: LD_VAR 0 7
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PPUSH
63283: LD_VAR 0 7
63287: PUSH
63288: LD_INT 2
63290: ARRAY
63291: PPUSH
63292: LD_VAR 0 3
63296: PPUSH
63297: CALL_OW 48
// result := IsPlaced ( unit ) ;
63301: LD_ADDR_VAR 0 4
63305: PUSH
63306: LD_VAR 0 1
63310: PPUSH
63311: CALL_OW 305
63315: ST_TO_ADDR
// exit ;
63316: POP
63317: POP
63318: GO 63324
// end ; end ;
63320: GO 63199
63322: POP
63323: POP
// end ;
63324: LD_VAR 0 4
63328: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63329: LD_INT 0
63331: PPUSH
63332: PPUSH
63333: PPUSH
// if not side or side > 8 then
63334: LD_VAR 0 1
63338: NOT
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_INT 8
63347: GREATER
63348: OR
63349: IFFALSE 63353
// exit ;
63351: GO 63540
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_INT 22
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 21
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PPUSH
63384: CALL_OW 69
63388: ST_TO_ADDR
// if not tmp then
63389: LD_VAR 0 4
63393: NOT
63394: IFFALSE 63398
// exit ;
63396: GO 63540
// enable_addtolog := true ;
63398: LD_ADDR_OWVAR 81
63402: PUSH
63403: LD_INT 1
63405: ST_TO_ADDR
// AddToLog ( [ ) ;
63406: LD_STRING [
63408: PPUSH
63409: CALL_OW 561
// for i in tmp do
63413: LD_ADDR_VAR 0 3
63417: PUSH
63418: LD_VAR 0 4
63422: PUSH
63423: FOR_IN
63424: IFFALSE 63531
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63426: LD_STRING [
63428: PUSH
63429: LD_VAR 0 3
63433: PPUSH
63434: CALL_OW 266
63438: STR
63439: PUSH
63440: LD_STRING , 
63442: STR
63443: PUSH
63444: LD_VAR 0 3
63448: PPUSH
63449: CALL_OW 250
63453: STR
63454: PUSH
63455: LD_STRING , 
63457: STR
63458: PUSH
63459: LD_VAR 0 3
63463: PPUSH
63464: CALL_OW 251
63468: STR
63469: PUSH
63470: LD_STRING , 
63472: STR
63473: PUSH
63474: LD_VAR 0 3
63478: PPUSH
63479: CALL_OW 254
63483: STR
63484: PUSH
63485: LD_STRING , 
63487: STR
63488: PUSH
63489: LD_VAR 0 3
63493: PPUSH
63494: LD_INT 1
63496: PPUSH
63497: CALL_OW 268
63501: STR
63502: PUSH
63503: LD_STRING , 
63505: STR
63506: PUSH
63507: LD_VAR 0 3
63511: PPUSH
63512: LD_INT 2
63514: PPUSH
63515: CALL_OW 268
63519: STR
63520: PUSH
63521: LD_STRING ],
63523: STR
63524: PPUSH
63525: CALL_OW 561
// end ;
63529: GO 63423
63531: POP
63532: POP
// AddToLog ( ]; ) ;
63533: LD_STRING ];
63535: PPUSH
63536: CALL_OW 561
// end ;
63540: LD_VAR 0 2
63544: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63545: LD_INT 0
63547: PPUSH
63548: PPUSH
63549: PPUSH
63550: PPUSH
63551: PPUSH
// if not area or not rate or not max then
63552: LD_VAR 0 1
63556: NOT
63557: PUSH
63558: LD_VAR 0 2
63562: NOT
63563: OR
63564: PUSH
63565: LD_VAR 0 4
63569: NOT
63570: OR
63571: IFFALSE 63575
// exit ;
63573: GO 63767
// while 1 do
63575: LD_INT 1
63577: IFFALSE 63767
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63579: LD_ADDR_VAR 0 9
63583: PUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: LD_INT 1
63591: PPUSH
63592: CALL_OW 287
63596: PUSH
63597: LD_INT 10
63599: MUL
63600: ST_TO_ADDR
// r := rate / 10 ;
63601: LD_ADDR_VAR 0 7
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_INT 10
63613: DIVREAL
63614: ST_TO_ADDR
// time := 1 1$00 ;
63615: LD_ADDR_VAR 0 8
63619: PUSH
63620: LD_INT 2100
63622: ST_TO_ADDR
// if amount < min then
63623: LD_VAR 0 9
63627: PUSH
63628: LD_VAR 0 3
63632: LESS
63633: IFFALSE 63651
// r := r * 2 else
63635: LD_ADDR_VAR 0 7
63639: PUSH
63640: LD_VAR 0 7
63644: PUSH
63645: LD_INT 2
63647: MUL
63648: ST_TO_ADDR
63649: GO 63677
// if amount > max then
63651: LD_VAR 0 9
63655: PUSH
63656: LD_VAR 0 4
63660: GREATER
63661: IFFALSE 63677
// r := r / 2 ;
63663: LD_ADDR_VAR 0 7
63667: PUSH
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 2
63675: DIVREAL
63676: ST_TO_ADDR
// time := time / r ;
63677: LD_ADDR_VAR 0 8
63681: PUSH
63682: LD_VAR 0 8
63686: PUSH
63687: LD_VAR 0 7
63691: DIVREAL
63692: ST_TO_ADDR
// if time < 0 then
63693: LD_VAR 0 8
63697: PUSH
63698: LD_INT 0
63700: LESS
63701: IFFALSE 63718
// time := time * - 1 ;
63703: LD_ADDR_VAR 0 8
63707: PUSH
63708: LD_VAR 0 8
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: MUL
63717: ST_TO_ADDR
// wait ( time ) ;
63718: LD_VAR 0 8
63722: PPUSH
63723: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63727: LD_INT 35
63729: PPUSH
63730: LD_INT 875
63732: PPUSH
63733: CALL_OW 12
63737: PPUSH
63738: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63742: LD_INT 1
63744: PPUSH
63745: LD_INT 5
63747: PPUSH
63748: CALL_OW 12
63752: PPUSH
63753: LD_VAR 0 1
63757: PPUSH
63758: LD_INT 1
63760: PPUSH
63761: CALL_OW 55
// end ;
63765: GO 63575
// end ;
63767: LD_VAR 0 5
63771: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63772: LD_INT 0
63774: PPUSH
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
63779: PPUSH
63780: PPUSH
63781: PPUSH
// if not turrets or not factories then
63782: LD_VAR 0 1
63786: NOT
63787: PUSH
63788: LD_VAR 0 2
63792: NOT
63793: OR
63794: IFFALSE 63798
// exit ;
63796: GO 64105
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63798: LD_ADDR_VAR 0 10
63802: PUSH
63803: LD_INT 5
63805: PUSH
63806: LD_INT 6
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: LD_INT 4
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: LD_INT 5
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 24
63840: PUSH
63841: LD_INT 25
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 23
63850: PUSH
63851: LD_INT 27
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 42
63864: PUSH
63865: LD_INT 43
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 44
63874: PUSH
63875: LD_INT 46
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 45
63884: PUSH
63885: LD_INT 47
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// result := [ ] ;
63902: LD_ADDR_VAR 0 3
63906: PUSH
63907: EMPTY
63908: ST_TO_ADDR
// for i in turrets do
63909: LD_ADDR_VAR 0 4
63913: PUSH
63914: LD_VAR 0 1
63918: PUSH
63919: FOR_IN
63920: IFFALSE 64103
// begin nat := GetNation ( i ) ;
63922: LD_ADDR_VAR 0 7
63926: PUSH
63927: LD_VAR 0 4
63931: PPUSH
63932: CALL_OW 248
63936: ST_TO_ADDR
// weapon := 0 ;
63937: LD_ADDR_VAR 0 8
63941: PUSH
63942: LD_INT 0
63944: ST_TO_ADDR
// if not nat then
63945: LD_VAR 0 7
63949: NOT
63950: IFFALSE 63954
// continue ;
63952: GO 63919
// for j in list [ nat ] do
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 10
63963: PUSH
63964: LD_VAR 0 7
63968: ARRAY
63969: PUSH
63970: FOR_IN
63971: IFFALSE 64012
// if GetBWeapon ( i ) = j [ 1 ] then
63973: LD_VAR 0 4
63977: PPUSH
63978: CALL_OW 269
63982: PUSH
63983: LD_VAR 0 5
63987: PUSH
63988: LD_INT 1
63990: ARRAY
63991: EQUAL
63992: IFFALSE 64010
// begin weapon := j [ 2 ] ;
63994: LD_ADDR_VAR 0 8
63998: PUSH
63999: LD_VAR 0 5
64003: PUSH
64004: LD_INT 2
64006: ARRAY
64007: ST_TO_ADDR
// break ;
64008: GO 64012
// end ;
64010: GO 63970
64012: POP
64013: POP
// if not weapon then
64014: LD_VAR 0 8
64018: NOT
64019: IFFALSE 64023
// continue ;
64021: GO 63919
// for k in factories do
64023: LD_ADDR_VAR 0 6
64027: PUSH
64028: LD_VAR 0 2
64032: PUSH
64033: FOR_IN
64034: IFFALSE 64099
// begin weapons := AvailableWeaponList ( k ) ;
64036: LD_ADDR_VAR 0 9
64040: PUSH
64041: LD_VAR 0 6
64045: PPUSH
64046: CALL_OW 478
64050: ST_TO_ADDR
// if not weapons then
64051: LD_VAR 0 9
64055: NOT
64056: IFFALSE 64060
// continue ;
64058: GO 64033
// if weapon in weapons then
64060: LD_VAR 0 8
64064: PUSH
64065: LD_VAR 0 9
64069: IN
64070: IFFALSE 64097
// begin result := [ i , weapon ] ;
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: LD_VAR 0 4
64081: PUSH
64082: LD_VAR 0 8
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// exit ;
64091: POP
64092: POP
64093: POP
64094: POP
64095: GO 64105
// end ; end ;
64097: GO 64033
64099: POP
64100: POP
// end ;
64101: GO 63919
64103: POP
64104: POP
// end ;
64105: LD_VAR 0 3
64109: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64110: LD_INT 0
64112: PPUSH
// if not side or side > 8 then
64113: LD_VAR 0 3
64117: NOT
64118: PUSH
64119: LD_VAR 0 3
64123: PUSH
64124: LD_INT 8
64126: GREATER
64127: OR
64128: IFFALSE 64132
// exit ;
64130: GO 64191
// if not range then
64132: LD_VAR 0 4
64136: NOT
64137: IFFALSE 64148
// range := - 12 ;
64139: LD_ADDR_VAR 0 4
64143: PUSH
64144: LD_INT 12
64146: NEG
64147: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64148: LD_VAR 0 1
64152: PPUSH
64153: LD_VAR 0 2
64157: PPUSH
64158: LD_VAR 0 3
64162: PPUSH
64163: LD_VAR 0 4
64167: PPUSH
64168: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64172: LD_VAR 0 1
64176: PPUSH
64177: LD_VAR 0 2
64181: PPUSH
64182: LD_VAR 0 3
64186: PPUSH
64187: CALL_OW 331
// end ;
64191: LD_VAR 0 5
64195: RET
// export function Video ( mode ) ; begin
64196: LD_INT 0
64198: PPUSH
// ingame_video = mode ;
64199: LD_ADDR_OWVAR 52
64203: PUSH
64204: LD_VAR 0 1
64208: ST_TO_ADDR
// interface_hidden = mode ;
64209: LD_ADDR_OWVAR 54
64213: PUSH
64214: LD_VAR 0 1
64218: ST_TO_ADDR
// end ;
64219: LD_VAR 0 2
64223: RET
// export function Join ( array , element ) ; begin
64224: LD_INT 0
64226: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64227: LD_ADDR_VAR 0 3
64231: PUSH
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_INT 1
64244: PLUS
64245: PPUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: CALL_OW 1
64255: ST_TO_ADDR
// end ;
64256: LD_VAR 0 3
64260: RET
// export function JoinUnion ( array , element ) ; begin
64261: LD_INT 0
64263: PPUSH
// result := array union element ;
64264: LD_ADDR_VAR 0 3
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_VAR 0 2
64278: UNION
64279: ST_TO_ADDR
// end ;
64280: LD_VAR 0 3
64284: RET
// export function GetBehemoths ( side ) ; begin
64285: LD_INT 0
64287: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64288: LD_ADDR_VAR 0 2
64292: PUSH
64293: LD_INT 22
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 31
64307: PUSH
64308: LD_INT 25
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PPUSH
64319: CALL_OW 69
64323: ST_TO_ADDR
// end ;
64324: LD_VAR 0 2
64328: RET
// export function Shuffle ( array ) ; var i , index ; begin
64329: LD_INT 0
64331: PPUSH
64332: PPUSH
64333: PPUSH
// result := [ ] ;
64334: LD_ADDR_VAR 0 2
64338: PUSH
64339: EMPTY
64340: ST_TO_ADDR
// if not array then
64341: LD_VAR 0 1
64345: NOT
64346: IFFALSE 64350
// exit ;
64348: GO 64449
// Randomize ;
64350: CALL_OW 10
// for i = array downto 1 do
64354: LD_ADDR_VAR 0 3
64358: PUSH
64359: DOUBLE
64360: LD_VAR 0 1
64364: INC
64365: ST_TO_ADDR
64366: LD_INT 1
64368: PUSH
64369: FOR_DOWNTO
64370: IFFALSE 64447
// begin index := rand ( 1 , array ) ;
64372: LD_ADDR_VAR 0 4
64376: PUSH
64377: LD_INT 1
64379: PPUSH
64380: LD_VAR 0 1
64384: PPUSH
64385: CALL_OW 12
64389: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64390: LD_ADDR_VAR 0 2
64394: PUSH
64395: LD_VAR 0 2
64399: PPUSH
64400: LD_VAR 0 2
64404: PUSH
64405: LD_INT 1
64407: PLUS
64408: PPUSH
64409: LD_VAR 0 1
64413: PUSH
64414: LD_VAR 0 4
64418: ARRAY
64419: PPUSH
64420: CALL_OW 2
64424: ST_TO_ADDR
// array := Delete ( array , index ) ;
64425: LD_ADDR_VAR 0 1
64429: PUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: LD_VAR 0 4
64439: PPUSH
64440: CALL_OW 3
64444: ST_TO_ADDR
// end ;
64445: GO 64369
64447: POP
64448: POP
// end ;
64449: LD_VAR 0 2
64453: RET
// export function GetBaseMaterials ( base ) ; begin
64454: LD_INT 0
64456: PPUSH
// result := [ 0 , 0 , 0 ] ;
64457: LD_ADDR_VAR 0 2
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: ST_TO_ADDR
// if not base then
64476: LD_VAR 0 1
64480: NOT
64481: IFFALSE 64485
// exit ;
64483: GO 64534
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64485: LD_ADDR_VAR 0 2
64489: PUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: LD_INT 1
64497: PPUSH
64498: CALL_OW 275
64502: PUSH
64503: LD_VAR 0 1
64507: PPUSH
64508: LD_INT 2
64510: PPUSH
64511: CALL_OW 275
64515: PUSH
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_INT 3
64523: PPUSH
64524: CALL_OW 275
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// end ;
64534: LD_VAR 0 2
64538: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64539: LD_INT 0
64541: PPUSH
64542: PPUSH
// result := array ;
64543: LD_ADDR_VAR 0 3
64547: PUSH
64548: LD_VAR 0 1
64552: ST_TO_ADDR
// if size > 0 then
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 0
64560: GREATER
64561: IFFALSE 64607
// for i := array downto size do
64563: LD_ADDR_VAR 0 4
64567: PUSH
64568: DOUBLE
64569: LD_VAR 0 1
64573: INC
64574: ST_TO_ADDR
64575: LD_VAR 0 2
64579: PUSH
64580: FOR_DOWNTO
64581: IFFALSE 64605
// result := Delete ( result , result ) ;
64583: LD_ADDR_VAR 0 3
64587: PUSH
64588: LD_VAR 0 3
64592: PPUSH
64593: LD_VAR 0 3
64597: PPUSH
64598: CALL_OW 3
64602: ST_TO_ADDR
64603: GO 64580
64605: POP
64606: POP
// end ;
64607: LD_VAR 0 3
64611: RET
// export function ComExit ( unit ) ; var tmp ; begin
64612: LD_INT 0
64614: PPUSH
64615: PPUSH
// if not IsInUnit ( unit ) then
64616: LD_VAR 0 1
64620: PPUSH
64621: CALL_OW 310
64625: NOT
64626: IFFALSE 64630
// exit ;
64628: GO 64690
// tmp := IsInUnit ( unit ) ;
64630: LD_ADDR_VAR 0 3
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 310
64644: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64645: LD_VAR 0 3
64649: PPUSH
64650: CALL_OW 247
64654: PUSH
64655: LD_INT 2
64657: EQUAL
64658: IFFALSE 64671
// ComExitVehicle ( unit ) else
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 121
64669: GO 64680
// ComExitBuilding ( unit ) ;
64671: LD_VAR 0 1
64675: PPUSH
64676: CALL_OW 122
// result := tmp ;
64680: LD_ADDR_VAR 0 2
64684: PUSH
64685: LD_VAR 0 3
64689: ST_TO_ADDR
// end ;
64690: LD_VAR 0 2
64694: RET
// export function ComExitAll ( units ) ; var i ; begin
64695: LD_INT 0
64697: PPUSH
64698: PPUSH
// if not units then
64699: LD_VAR 0 1
64703: NOT
64704: IFFALSE 64708
// exit ;
64706: GO 64734
// for i in units do
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: LD_VAR 0 1
64717: PUSH
64718: FOR_IN
64719: IFFALSE 64732
// ComExit ( i ) ;
64721: LD_VAR 0 3
64725: PPUSH
64726: CALL 64612 0 1
64730: GO 64718
64732: POP
64733: POP
// end ;
64734: LD_VAR 0 2
64738: RET
// export function ResetHc ; begin
64739: LD_INT 0
64741: PPUSH
// InitHc ;
64742: CALL_OW 19
// hc_importance := 0 ;
64746: LD_ADDR_OWVAR 32
64750: PUSH
64751: LD_INT 0
64753: ST_TO_ADDR
// end ;
64754: LD_VAR 0 1
64758: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64759: LD_INT 0
64761: PPUSH
64762: PPUSH
64763: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64764: LD_ADDR_VAR 0 6
64768: PUSH
64769: LD_VAR 0 1
64773: PUSH
64774: LD_VAR 0 3
64778: PLUS
64779: PUSH
64780: LD_INT 2
64782: DIV
64783: ST_TO_ADDR
// if _x < 0 then
64784: LD_VAR 0 6
64788: PUSH
64789: LD_INT 0
64791: LESS
64792: IFFALSE 64809
// _x := _x * - 1 ;
64794: LD_ADDR_VAR 0 6
64798: PUSH
64799: LD_VAR 0 6
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: MUL
64808: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64809: LD_ADDR_VAR 0 7
64813: PUSH
64814: LD_VAR 0 2
64818: PUSH
64819: LD_VAR 0 4
64823: PLUS
64824: PUSH
64825: LD_INT 2
64827: DIV
64828: ST_TO_ADDR
// if _y < 0 then
64829: LD_VAR 0 7
64833: PUSH
64834: LD_INT 0
64836: LESS
64837: IFFALSE 64854
// _y := _y * - 1 ;
64839: LD_ADDR_VAR 0 7
64843: PUSH
64844: LD_VAR 0 7
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: MUL
64853: ST_TO_ADDR
// result := [ _x , _y ] ;
64854: LD_ADDR_VAR 0 5
64858: PUSH
64859: LD_VAR 0 6
64863: PUSH
64864: LD_VAR 0 7
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: ST_TO_ADDR
// end ;
64873: LD_VAR 0 5
64877: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64878: LD_INT 0
64880: PPUSH
64881: PPUSH
64882: PPUSH
64883: PPUSH
// task := GetTaskList ( unit ) ;
64884: LD_ADDR_VAR 0 7
64888: PUSH
64889: LD_VAR 0 1
64893: PPUSH
64894: CALL_OW 437
64898: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64899: LD_VAR 0 7
64903: NOT
64904: PUSH
64905: LD_VAR 0 1
64909: PPUSH
64910: LD_VAR 0 2
64914: PPUSH
64915: CALL_OW 308
64919: NOT
64920: AND
64921: IFFALSE 64925
// exit ;
64923: GO 65043
// if IsInArea ( unit , area ) then
64925: LD_VAR 0 1
64929: PPUSH
64930: LD_VAR 0 2
64934: PPUSH
64935: CALL_OW 308
64939: IFFALSE 64957
// begin ComMoveToArea ( unit , goAway ) ;
64941: LD_VAR 0 1
64945: PPUSH
64946: LD_VAR 0 3
64950: PPUSH
64951: CALL_OW 113
// exit ;
64955: GO 65043
// end ; if task [ 1 ] [ 1 ] <> M then
64957: LD_VAR 0 7
64961: PUSH
64962: LD_INT 1
64964: ARRAY
64965: PUSH
64966: LD_INT 1
64968: ARRAY
64969: PUSH
64970: LD_STRING M
64972: NONEQUAL
64973: IFFALSE 64977
// exit ;
64975: GO 65043
// x := task [ 1 ] [ 2 ] ;
64977: LD_ADDR_VAR 0 5
64981: PUSH
64982: LD_VAR 0 7
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: PUSH
64991: LD_INT 2
64993: ARRAY
64994: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64995: LD_ADDR_VAR 0 6
64999: PUSH
65000: LD_VAR 0 7
65004: PUSH
65005: LD_INT 1
65007: ARRAY
65008: PUSH
65009: LD_INT 3
65011: ARRAY
65012: ST_TO_ADDR
// if InArea ( x , y , area ) then
65013: LD_VAR 0 5
65017: PPUSH
65018: LD_VAR 0 6
65022: PPUSH
65023: LD_VAR 0 2
65027: PPUSH
65028: CALL_OW 309
65032: IFFALSE 65043
// ComStop ( unit ) ;
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 141
// end ;
65043: LD_VAR 0 4
65047: RET
// export function Abs ( value ) ; begin
65048: LD_INT 0
65050: PPUSH
// result := value ;
65051: LD_ADDR_VAR 0 2
65055: PUSH
65056: LD_VAR 0 1
65060: ST_TO_ADDR
// if value < 0 then
65061: LD_VAR 0 1
65065: PUSH
65066: LD_INT 0
65068: LESS
65069: IFFALSE 65086
// result := value * - 1 ;
65071: LD_ADDR_VAR 0 2
65075: PUSH
65076: LD_VAR 0 1
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: MUL
65085: ST_TO_ADDR
// end ;
65086: LD_VAR 0 2
65090: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65091: LD_INT 0
65093: PPUSH
65094: PPUSH
65095: PPUSH
65096: PPUSH
65097: PPUSH
65098: PPUSH
65099: PPUSH
65100: PPUSH
// if not unit or not building then
65101: LD_VAR 0 1
65105: NOT
65106: PUSH
65107: LD_VAR 0 2
65111: NOT
65112: OR
65113: IFFALSE 65117
// exit ;
65115: GO 65343
// x := GetX ( building ) ;
65117: LD_ADDR_VAR 0 4
65121: PUSH
65122: LD_VAR 0 2
65126: PPUSH
65127: CALL_OW 250
65131: ST_TO_ADDR
// y := GetY ( building ) ;
65132: LD_ADDR_VAR 0 6
65136: PUSH
65137: LD_VAR 0 2
65141: PPUSH
65142: CALL_OW 251
65146: ST_TO_ADDR
// d := GetDir ( building ) ;
65147: LD_ADDR_VAR 0 8
65151: PUSH
65152: LD_VAR 0 2
65156: PPUSH
65157: CALL_OW 254
65161: ST_TO_ADDR
// r := 4 ;
65162: LD_ADDR_VAR 0 9
65166: PUSH
65167: LD_INT 4
65169: ST_TO_ADDR
// for i := 1 to 5 do
65170: LD_ADDR_VAR 0 10
65174: PUSH
65175: DOUBLE
65176: LD_INT 1
65178: DEC
65179: ST_TO_ADDR
65180: LD_INT 5
65182: PUSH
65183: FOR_TO
65184: IFFALSE 65341
// begin _x := ShiftX ( x , d , r + i ) ;
65186: LD_ADDR_VAR 0 5
65190: PUSH
65191: LD_VAR 0 4
65195: PPUSH
65196: LD_VAR 0 8
65200: PPUSH
65201: LD_VAR 0 9
65205: PUSH
65206: LD_VAR 0 10
65210: PLUS
65211: PPUSH
65212: CALL_OW 272
65216: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65217: LD_ADDR_VAR 0 7
65221: PUSH
65222: LD_VAR 0 6
65226: PPUSH
65227: LD_VAR 0 8
65231: PPUSH
65232: LD_VAR 0 9
65236: PUSH
65237: LD_VAR 0 10
65241: PLUS
65242: PPUSH
65243: CALL_OW 273
65247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65248: LD_VAR 0 5
65252: PPUSH
65253: LD_VAR 0 7
65257: PPUSH
65258: CALL_OW 488
65262: PUSH
65263: LD_VAR 0 5
65267: PPUSH
65268: LD_VAR 0 7
65272: PPUSH
65273: CALL_OW 428
65277: PPUSH
65278: CALL_OW 247
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: IN
65293: NOT
65294: AND
65295: IFFALSE 65339
// begin ComMoveXY ( unit , _x , _y ) ;
65297: LD_VAR 0 1
65301: PPUSH
65302: LD_VAR 0 5
65306: PPUSH
65307: LD_VAR 0 7
65311: PPUSH
65312: CALL_OW 111
// result := [ _x , _y ] ;
65316: LD_ADDR_VAR 0 3
65320: PUSH
65321: LD_VAR 0 5
65325: PUSH
65326: LD_VAR 0 7
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// exit ;
65335: POP
65336: POP
65337: GO 65343
// end ; end ;
65339: GO 65183
65341: POP
65342: POP
// end ;
65343: LD_VAR 0 3
65347: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
65352: PPUSH
// result := 0 ;
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: LD_INT 0
65360: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65361: LD_VAR 0 1
65365: PUSH
65366: LD_INT 0
65368: LESS
65369: PUSH
65370: LD_VAR 0 1
65374: PUSH
65375: LD_INT 8
65377: GREATER
65378: OR
65379: PUSH
65380: LD_VAR 0 2
65384: PUSH
65385: LD_INT 0
65387: LESS
65388: OR
65389: PUSH
65390: LD_VAR 0 2
65394: PUSH
65395: LD_INT 8
65397: GREATER
65398: OR
65399: IFFALSE 65403
// exit ;
65401: GO 65478
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65403: LD_ADDR_VAR 0 4
65407: PUSH
65408: LD_INT 22
65410: PUSH
65411: LD_VAR 0 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PPUSH
65420: CALL_OW 69
65424: PUSH
65425: FOR_IN
65426: IFFALSE 65476
// begin un := UnitShoot ( i ) ;
65428: LD_ADDR_VAR 0 5
65432: PUSH
65433: LD_VAR 0 4
65437: PPUSH
65438: CALL_OW 504
65442: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65443: LD_VAR 0 5
65447: PPUSH
65448: CALL_OW 255
65452: PUSH
65453: LD_VAR 0 1
65457: EQUAL
65458: IFFALSE 65474
// begin result := un ;
65460: LD_ADDR_VAR 0 3
65464: PUSH
65465: LD_VAR 0 5
65469: ST_TO_ADDR
// exit ;
65470: POP
65471: POP
65472: GO 65478
// end ; end ;
65474: GO 65425
65476: POP
65477: POP
// end ;
65478: LD_VAR 0 3
65482: RET
// export function GetCargoBay ( units ) ; begin
65483: LD_INT 0
65485: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65486: LD_ADDR_VAR 0 2
65490: PUSH
65491: LD_VAR 0 1
65495: PPUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 34
65501: PUSH
65502: LD_INT 12
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 34
65511: PUSH
65512: LD_INT 51
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 34
65521: PUSH
65522: LD_INT 32
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 34
65531: PUSH
65532: LD_EXP 20
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: PPUSH
65548: CALL_OW 72
65552: ST_TO_ADDR
// end ; end_of_file
65553: LD_VAR 0 2
65557: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65558: LD_VAR 0 1
65562: PUSH
65563: LD_INT 200
65565: DOUBLE
65566: GREATEREQUAL
65567: IFFALSE 65575
65569: LD_INT 299
65571: DOUBLE
65572: LESSEQUAL
65573: IFTRUE 65577
65575: GO 65609
65577: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: LD_VAR 0 4
65597: PPUSH
65598: LD_VAR 0 5
65602: PPUSH
65603: CALL 24049 0 5
65607: GO 65686
65609: LD_INT 300
65611: DOUBLE
65612: GREATEREQUAL
65613: IFFALSE 65621
65615: LD_INT 399
65617: DOUBLE
65618: LESSEQUAL
65619: IFTRUE 65623
65621: GO 65685
65623: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65624: LD_VAR 0 1
65628: PPUSH
65629: LD_VAR 0 2
65633: PPUSH
65634: LD_VAR 0 3
65638: PPUSH
65639: LD_VAR 0 4
65643: PPUSH
65644: LD_VAR 0 5
65648: PPUSH
65649: LD_VAR 0 6
65653: PPUSH
65654: LD_VAR 0 7
65658: PPUSH
65659: LD_VAR 0 8
65663: PPUSH
65664: LD_VAR 0 9
65668: PPUSH
65669: LD_VAR 0 10
65673: PPUSH
65674: LD_VAR 0 11
65678: PPUSH
65679: CALL 21937 0 11
65683: GO 65686
65685: POP
// end ;
65686: PPOPN 11
65688: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_VAR 0 2
65698: PPUSH
65699: LD_VAR 0 3
65703: PPUSH
65704: LD_VAR 0 4
65708: PPUSH
65709: LD_VAR 0 5
65713: PPUSH
65714: CALL 24031 0 5
// end ; end_of_file
65718: PPOPN 5
65720: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65721: LD_VAR 0 1
65725: PPUSH
65726: LD_VAR 0 2
65730: PPUSH
65731: LD_VAR 0 3
65735: PPUSH
65736: LD_VAR 0 4
65740: PPUSH
65741: LD_VAR 0 5
65745: PPUSH
65746: LD_VAR 0 6
65750: PPUSH
65751: CALL 10745 0 6
// end ;
65755: PPOPN 6
65757: END
