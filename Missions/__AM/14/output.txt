// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1272 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Coonie , false ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Coonie
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1162 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1155
// SaveCharacters ( i , ident ) ;
1139: LD_VAR 0 4
1143: PPUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 38
1153: GO 1136
1155: POP
1156: POP
// end ;
1157: LD_VAR 0 3
1161: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// for i = 1 to count do
1168: LD_ADDR_VAR 0 8
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_VAR 0 6
1182: PUSH
1183: FOR_TO
1184: IFFALSE 1265
// begin uc_side = side ;
1186: LD_ADDR_OWVAR 20
1190: PUSH
1191: LD_VAR 0 1
1195: ST_TO_ADDR
// uc_nation = nation ;
1196: LD_ADDR_OWVAR 21
1200: PUSH
1201: LD_VAR 0 2
1205: ST_TO_ADDR
// hc_gallery =  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name =  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 380
// un = CreateHuman ;
1239: LD_ADDR_VAR 0 10
1243: PUSH
1244: CALL_OW 44
1248: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1249: LD_VAR 0 10
1253: PPUSH
1254: LD_VAR 0 3
1258: PPUSH
1259: CALL_OW 52
// end ;
1263: GO 1183
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 7
1271: RET
// export function PrepareDifficulty ; begin
1272: LD_INT 0
1274: PPUSH
// if difficulty = 1 then
1275: LD_OWVAR 67
1279: PUSH
1280: LD_INT 1
1282: EQUAL
1283: IFFALSE 1363
// begin SetTech ( 57 , 3 , state_disabled ) ;
1285: LD_INT 57
1287: PPUSH
1288: LD_INT 3
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1298: LD_INT 58
1300: PPUSH
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1311: LD_INT 59
1313: PPUSH
1314: LD_INT 3
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1324: LD_INT 51
1326: PPUSH
1327: LD_INT 3
1329: PPUSH
1330: LD_INT 0
1332: PPUSH
1333: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1337: LD_INT 52
1339: PPUSH
1340: LD_INT 3
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1350: LD_INT 53
1352: PPUSH
1353: LD_INT 3
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: CALL_OW 322
// end ; if difficulty = 2 then
1363: LD_OWVAR 67
1367: PUSH
1368: LD_INT 2
1370: EQUAL
1371: IFFALSE 1451
// begin SetTech ( 57 , 3 , state_enabled ) ;
1373: LD_INT 57
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1386: LD_INT 58
1388: PPUSH
1389: LD_INT 3
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1399: LD_INT 59
1401: PPUSH
1402: LD_INT 3
1404: PPUSH
1405: LD_INT 0
1407: PPUSH
1408: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1412: LD_INT 51
1414: PPUSH
1415: LD_INT 3
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1425: LD_INT 52
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1438: LD_INT 53
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// end ; if difficulty = 3 then
1451: LD_OWVAR 67
1455: PUSH
1456: LD_INT 3
1458: EQUAL
1459: IFFALSE 1539
// begin SetTech ( 57 , 3 , state_enabled ) ;
1461: LD_INT 57
1463: PPUSH
1464: LD_INT 3
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1474: LD_INT 58
1476: PPUSH
1477: LD_INT 3
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1487: LD_INT 59
1489: PPUSH
1490: LD_INT 3
1492: PPUSH
1493: LD_INT 1
1495: PPUSH
1496: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1500: LD_INT 51
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: LD_INT 1
1508: PPUSH
1509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1513: LD_INT 52
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1526: LD_INT 53
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 322
// end ; end ;
1539: LD_VAR 0 1
1543: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1544: LD_INT 0
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1551: LD_ADDR_VAR 0 8
1555: PUSH
1556: LD_INT 48
1558: PUSH
1559: LD_INT 49
1561: PUSH
1562: LD_INT 50
1564: PUSH
1565: LD_INT 20
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 69
1573: PUSH
1574: LD_INT 39
1576: PUSH
1577: LD_INT 34
1579: PUSH
1580: LD_INT 40
1582: PUSH
1583: LD_INT 71
1585: PUSH
1586: LD_INT 57
1588: PUSH
1589: LD_INT 58
1591: PUSH
1592: LD_INT 44
1594: PUSH
1595: LD_INT 32
1597: PUSH
1598: LD_INT 27
1600: PUSH
1601: LD_INT 23
1603: PUSH
1604: LD_INT 33
1606: PUSH
1607: LD_INT 54
1609: PUSH
1610: LD_INT 55
1612: PUSH
1613: LD_INT 56
1615: PUSH
1616: LD_INT 63
1618: PUSH
1619: LD_INT 64
1621: PUSH
1622: LD_INT 65
1624: PUSH
1625: LD_INT 30
1627: PUSH
1628: LD_INT 31
1630: PUSH
1631: LD_INT 21
1633: PUSH
1634: LD_INT 22
1636: PUSH
1637: LD_INT 25
1639: PUSH
1640: LD_INT 51
1642: PUSH
1643: LD_INT 52
1645: PUSH
1646: LD_INT 59
1648: PUSH
1649: LD_INT 53
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: DOUBLE
1692: LD_INT 1
1694: DEC
1695: ST_TO_ADDR
1696: LD_VAR 0 8
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1778
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1704: LD_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: ARRAY
1714: PPUSH
1715: LD_VAR 0 1
1719: PPUSH
1720: CALL_OW 321
1724: PUSH
1725: LD_INT 1
1727: EQUAL
1728: PUSH
1729: LD_VAR 0 8
1733: PUSH
1734: LD_VAR 0 5
1738: ARRAY
1739: PPUSH
1740: LD_VAR 0 3
1744: PPUSH
1745: CALL_OW 482
1749: PUSH
1750: LD_INT 1
1752: EQUAL
1753: AND
1754: IFFALSE 1776
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1756: LD_VAR 0 2
1760: PPUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_VAR 0 5
1770: ARRAY
1771: PPUSH
1772: CALL_OW 184
1776: GO 1701
1778: POP
1779: POP
// end ;
1780: LD_VAR 0 4
1784: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1785: LD_INT 0
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1793: LD_ADDR_VAR 0 8
1797: PUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 313
1807: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1808: LD_ADDR_VAR 0 9
1812: PUSH
1813: LD_VAR 0 3
1817: PPUSH
1818: LD_INT 22
1820: PUSH
1821: LD_VAR 0 1
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 25
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 750
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 54
1855: PUSH
1856: EMPTY
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PPUSH
1869: CALL_OW 70
1873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1874: LD_ADDR_VAR 0 6
1878: PUSH
1879: LD_VAR 0 3
1883: PPUSH
1884: LD_INT 22
1886: PUSH
1887: LD_VAR 0 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 1000
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: PPUSH
1931: CALL_OW 70
1935: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1936: LD_VAR 0 6
1940: NOT
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_VAR 0 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 25
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 24
1966: PUSH
1967: LD_INT 250
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PPUSH
1979: CALL_OW 69
1983: NOT
1984: AND
1985: IFFALSE 1989
// exit ;
1987: GO 2171
// if buildings_list > 0 and engineerOkInside then
1989: LD_VAR 0 6
1993: PUSH
1994: LD_INT 0
1996: GREATER
1997: PUSH
1998: LD_VAR 0 8
2002: AND
2003: IFFALSE 2014
// ComExitBuilding ( engineerOkInside ) ;
2005: LD_VAR 0 8
2009: PPUSH
2010: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2014: LD_VAR 0 6
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: PUSH
2023: LD_VAR 0 9
2027: PUSH
2028: LD_INT 0
2030: GREATER
2031: AND
2032: IFFALSE 2052
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2034: LD_VAR 0 9
2038: PPUSH
2039: LD_VAR 0 6
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2052: LD_VAR 0 6
2056: PUSH
2057: LD_INT 0
2059: EQUAL
2060: PUSH
2061: LD_VAR 0 4
2065: PUSH
2066: LD_INT 0
2068: EQUAL
2069: AND
2070: PUSH
2071: LD_VAR 0 9
2075: PUSH
2076: LD_INT 0
2078: GREATER
2079: AND
2080: IFFALSE 2096
// ComEnterUnit ( engineerOkOutside , building ) ;
2082: LD_VAR 0 9
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2096: LD_VAR 0 9
2100: PUSH
2101: LD_INT 0
2103: GREATER
2104: PUSH
2105: LD_VAR 0 6
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_INT 0
2122: GREATER
2123: AND
2124: IFFALSE 2171
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2126: LD_VAR 0 9
2130: PPUSH
2131: LD_VAR 0 4
2135: PUSH
2136: LD_INT 1
2138: ARRAY
2139: PPUSH
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 2
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 4
2153: PUSH
2154: LD_INT 3
2156: ARRAY
2157: PPUSH
2158: LD_VAR 0 4
2162: PUSH
2163: LD_INT 4
2165: ARRAY
2166: PPUSH
2167: CALL_OW 145
// end ;
2171: LD_VAR 0 5
2175: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2176: LD_INT 0
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
2186: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2187: LD_ADDR_VAR 0 6
2191: PUSH
2192: LD_INT 22
2194: PUSH
2195: LD_VAR 0 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 4
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 23
2216: PUSH
2217: LD_INT 2
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 24
2226: PUSH
2227: LD_INT 251
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_VAR 0 3
2254: PPUSH
2255: LD_INT 22
2257: PUSH
2258: LD_VAR 0 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 23
2269: PUSH
2270: LD_INT 2
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 25
2279: PUSH
2280: LD_INT 4
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 50
2289: PUSH
2290: EMPTY
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 70
2303: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2304: LD_ADDR_VAR 0 10
2308: PUSH
2309: LD_VAR 0 3
2313: PPUSH
2314: LD_INT 22
2316: PUSH
2317: LD_VAR 0 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 21
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 25
2341: PUSH
2342: LD_INT 3
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 3
2355: PUSH
2356: LD_INT 24
2358: PUSH
2359: LD_INT 750
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 70
2380: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2381: LD_ADDR_VAR 0 11
2385: PUSH
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_INT 22
2393: PUSH
2394: LD_VAR 0 1
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 21
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 25
2418: PUSH
2419: LD_INT 3
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 3
2432: PUSH
2433: LD_INT 24
2435: PUSH
2436: LD_INT 1000
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 70
2457: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2458: LD_VAR 0 10
2462: NOT
2463: PUSH
2464: LD_VAR 0 11
2468: NOT
2469: AND
2470: PUSH
2471: LD_VAR 0 6
2475: NOT
2476: AND
2477: IFFALSE 2481
// exit ;
2479: GO 2715
// if damageUnits > 0 and sci_list > 0 then
2481: LD_VAR 0 10
2485: PUSH
2486: LD_INT 0
2488: GREATER
2489: PUSH
2490: LD_VAR 0 6
2494: PUSH
2495: LD_INT 0
2497: GREATER
2498: AND
2499: IFFALSE 2515
// ComMoveToArea ( damageUnits , healArea ) ;
2501: LD_VAR 0 10
2505: PPUSH
2506: LD_VAR 0 2
2510: PPUSH
2511: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2515: LD_VAR 0 11
2519: PUSH
2520: LD_INT 0
2522: GREATER
2523: PUSH
2524: LD_VAR 0 6
2528: PUSH
2529: LD_INT 0
2531: GREATER
2532: AND
2533: IFFALSE 2544
// ComExitBuilding ( sci_list ) ;
2535: LD_VAR 0 6
2539: PPUSH
2540: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 0
2551: GREATER
2552: PUSH
2553: LD_VAR 0 7
2557: PUSH
2558: LD_INT 0
2560: GREATER
2561: AND
2562: IFFALSE 2582
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2564: LD_VAR 0 7
2568: PPUSH
2569: LD_VAR 0 11
2573: PUSH
2574: LD_INT 1
2576: ARRAY
2577: PPUSH
2578: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2582: LD_VAR 0 10
2586: PUSH
2587: LD_INT 0
2589: EQUAL
2590: PUSH
2591: LD_VAR 0 11
2595: PUSH
2596: LD_INT 0
2598: EQUAL
2599: AND
2600: PUSH
2601: LD_VAR 0 7
2605: PUSH
2606: LD_INT 0
2608: GREATER
2609: AND
2610: IFFALSE 2715
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2612: LD_ADDR_VAR 0 12
2616: PUSH
2617: LD_INT 22
2619: PUSH
2620: LD_VAR 0 1
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 21
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 30
2641: PUSH
2642: LD_INT 8
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PPUSH
2654: CALL_OW 69
2658: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2659: LD_ADDR_VAR 0 13
2663: PUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_VAR 0 12
2671: PPUSH
2672: CALL_OW 12
2676: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2677: LD_VAR 0 7
2681: PPUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 60
2687: PUSH
2688: EMPTY
2689: LIST
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 72
2699: PPUSH
2700: LD_VAR 0 12
2704: PUSH
2705: LD_VAR 0 13
2709: ARRAY
2710: PPUSH
2711: CALL_OW 120
// end ; end ;
2715: LD_VAR 0 5
2719: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
// tmpTab = [ ] ;
2726: LD_ADDR_VAR 0 6
2730: PUSH
2731: EMPTY
2732: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2733: LD_INT 22
2735: PUSH
2736: LD_VAR 0 1
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: LD_INT 30
2747: PUSH
2748: LD_INT 32
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PPUSH
2759: CALL_OW 69
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: IFFALSE 2850
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2769: LD_ADDR_VAR 0 4
2773: PUSH
2774: LD_INT 22
2776: PUSH
2777: LD_VAR 0 1
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 30
2788: PUSH
2789: LD_INT 32
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: PUSH
2805: FOR_IN
2806: IFFALSE 2848
// begin for j in UnitsInside ( i ) do
2808: LD_ADDR_VAR 0 5
2812: PUSH
2813: LD_VAR 0 4
2817: PPUSH
2818: CALL_OW 313
2822: PUSH
2823: FOR_IN
2824: IFFALSE 2844
// tmpTab = tmpTab ^ j ;
2826: LD_ADDR_VAR 0 6
2830: PUSH
2831: LD_VAR 0 6
2835: PUSH
2836: LD_VAR 0 5
2840: ADD
2841: ST_TO_ADDR
2842: GO 2823
2844: POP
2845: POP
// end ;
2846: GO 2805
2848: POP
2849: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2850: LD_VAR 0 6
2854: PPUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL_OW 250
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 251
2874: PPUSH
2875: CALL_OW 114
// end ;
2879: LD_VAR 0 3
2883: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// enable ;
2890: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
2891: LD_ADDR_VAR 0 7
2895: PUSH
2896: LD_VAR 0 3
2900: PPUSH
2901: CALL_OW 435
2905: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2906: LD_ADDR_VAR 0 6
2910: PUSH
2911: LD_INT 22
2913: PUSH
2914: LD_VAR 0 1
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 34
2925: PUSH
2926: LD_VAR 0 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
2944: LD_VAR 0 6
2948: PUSH
2949: LD_INT 0
2951: GREATER
2952: PUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 435
2962: AND
2963: PUSH
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 0
2971: GREATER
2972: AND
2973: IFFALSE 3022
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2975: LD_VAR 0 6
2979: PUSH
2980: LD_INT 1
2982: ARRAY
2983: PPUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 7
2997: PUSH
2998: LD_INT 2
3000: ARRAY
3001: PPUSH
3002: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3006: LD_VAR 0 6
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 100
3017: PPUSH
3018: CALL_OW 240
// end ; end ;
3022: LD_VAR 0 4
3026: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3027: LD_INT 0
3029: PPUSH
3030: PPUSH
3031: PPUSH
3032: PPUSH
3033: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3034: LD_ADDR_VAR 0 6
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_VAR 0 1
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 30
3056: PUSH
3057: LD_INT 31
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 32
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 30
3076: PUSH
3077: LD_INT 33
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 30
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 30
3096: PUSH
3097: LD_INT 5
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3121: LD_ADDR_VAR 0 7
3125: PUSH
3126: LD_INT 22
3128: PUSH
3129: LD_VAR 0 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: LD_INT 21
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 58
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 69
3163: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3164: LD_VAR 0 6
3168: PUSH
3169: LD_INT 0
3171: GREATER
3172: PUSH
3173: LD_VAR 0 7
3177: PUSH
3178: LD_INT 0
3180: GREATER
3181: AND
3182: IFFALSE 3252
// begin for i in turretsList do
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_VAR 0 6
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3250
// begin for j in enemyBuildings do
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 7
3206: PUSH
3207: FOR_IN
3208: IFFALSE 3246
// begin if GetDistUnits ( i , j ) < 20 then
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: CALL_OW 296
3224: PUSH
3225: LD_INT 20
3227: LESS
3228: IFFALSE 3244
// begin ComAttackUnit ( i , j ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_VAR 0 5
3239: PPUSH
3240: CALL_OW 115
// end ; end ;
3244: GO 3207
3246: POP
3247: POP
// end ;
3248: GO 3194
3250: POP
3251: POP
// end ; end ;
3252: LD_VAR 0 3
3256: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3257: LD_INT 0
3259: PPUSH
3260: PPUSH
// for i = 1 to vehCount do
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 3
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3324
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: LD_VAR 0 5
3293: PPUSH
3294: LD_VAR 0 6
3298: PPUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_INT 1
3306: PPUSH
3307: LD_VAR 0 4
3311: PPUSH
3312: CALL_OW 12
3316: ARRAY
3317: PPUSH
3318: CALL_OW 185
3322: GO 3276
3324: POP
3325: POP
// end ;
3326: LD_VAR 0 8
3330: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3340: LD_EXP 11
3344: PUSH
3345: LD_INT 2
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 4
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_OWVAR 67
3363: ARRAY
3364: GREATEREQUAL
3365: PUSH
3366: LD_EXP 12
3370: PUSH
3371: LD_INT 1
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_OWVAR 67
3389: ARRAY
3390: GREATEREQUAL
3391: AND
3392: IFFALSE 3701
// begin repeat wait ( 0 0$1 ) ;
3394: LD_INT 35
3396: PPUSH
3397: CALL_OW 67
// for j in russianTanks do
3401: LD_ADDR_VAR 0 4
3405: PUSH
3406: LD_EXP 11
3410: PUSH
3411: FOR_IN
3412: IFFALSE 3689
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3414: LD_ADDR_VAR 0 5
3418: PUSH
3419: LD_EXP 12
3423: PPUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 60
3429: PUSH
3430: EMPTY
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PPUSH
3437: CALL_OW 72
3441: ST_TO_ADDR
// if tmp then
3442: LD_VAR 0 5
3446: IFFALSE 3462
// ComMoveUnit ( tmp , j ) ;
3448: LD_VAR 0 5
3452: PPUSH
3453: LD_VAR 0 4
3457: PPUSH
3458: CALL_OW 112
// if GetSide ( j ) <> side then
3462: LD_VAR 0 4
3466: PPUSH
3467: CALL_OW 255
3471: PUSH
3472: LD_VAR 0 1
3476: NONEQUAL
3477: IFFALSE 3490
// begin ComStop ( j ) ;
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL_OW 141
// continue ;
3488: GO 3411
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3490: LD_ADDR_VAR 0 7
3494: PUSH
3495: LD_INT 81
3497: PUSH
3498: LD_VAR 0 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 101
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: PPUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: CALL_OW 74
3535: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3536: LD_ADDR_VAR 0 8
3540: PUSH
3541: LD_INT 81
3543: PUSH
3544: LD_VAR 0 1
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 101
3555: PUSH
3556: LD_INT 1
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 2
3565: PUSH
3566: LD_INT 59
3568: PUSH
3569: EMPTY
3570: LIST
3571: PUSH
3572: LD_INT 21
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 21
3584: PUSH
3585: LD_INT 2
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: EMPTY
3604: LIST
3605: PPUSH
3606: CALL_OW 69
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: CALL_OW 74
3620: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3621: LD_VAR 0 4
3625: PPUSH
3626: LD_VAR 0 7
3630: PPUSH
3631: CALL_OW 296
3635: PUSH
3636: LD_INT 8
3638: PLUS
3639: PUSH
3640: LD_VAR 0 4
3644: PPUSH
3645: LD_VAR 0 8
3649: PPUSH
3650: CALL_OW 296
3654: LESS
3655: IFFALSE 3673
// ComAttackUnit ( j , target1 ) else
3657: LD_VAR 0 4
3661: PPUSH
3662: LD_VAR 0 7
3666: PPUSH
3667: CALL_OW 115
3671: GO 3687
// ComAttackUnit ( j , target2 ) ;
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 8
3682: PPUSH
3683: CALL_OW 115
// end ;
3687: GO 3411
3689: POP
3690: POP
// until russianTanks = 0 ;
3691: LD_EXP 11
3695: PUSH
3696: LD_INT 0
3698: EQUAL
3699: IFFALSE 3394
// end ; end ;
3701: LD_VAR 0 2
3705: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3706: LD_INT 0
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3714: LD_ADDR_VAR 0 6
3718: PUSH
3719: LD_INT 22
3721: PUSH
3722: LD_VAR 0 1
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 25
3733: PUSH
3734: LD_INT 9
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3750: LD_ADDR_VAR 0 7
3754: PUSH
3755: LD_INT 81
3757: PUSH
3758: LD_VAR 0 1
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: LD_INT 21
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3793: LD_ADDR_VAR 0 4
3797: PUSH
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 3
3803: PPUSH
3804: CALL_OW 12
3808: ST_TO_ADDR
// for i = 1 to list do
3809: LD_ADDR_VAR 0 5
3813: PUSH
3814: DOUBLE
3815: LD_INT 1
3817: DEC
3818: ST_TO_ADDR
3819: LD_VAR 0 6
3823: PUSH
3824: FOR_TO
3825: IFFALSE 4027
// for ta in filter do
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: LD_VAR 0 7
3836: PUSH
3837: FOR_IN
3838: IFFALSE 4023
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3840: LD_VAR 0 6
3844: PUSH
3845: LD_VAR 0 5
3849: ARRAY
3850: PPUSH
3851: LD_VAR 0 3
3855: PPUSH
3856: CALL_OW 296
3860: PUSH
3861: LD_INT 15
3863: LESSEQUAL
3864: IFFALSE 4021
// begin case c of 1 :
3866: LD_VAR 0 4
3870: PUSH
3871: LD_INT 1
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3917
3879: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3880: LD_VAR 0 6
3884: PUSH
3885: LD_VAR 0 5
3889: ARRAY
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 250
3900: PPUSH
3901: LD_VAR 0 3
3905: PPUSH
3906: CALL_OW 251
3910: PPUSH
3911: CALL_OW 154
3915: GO 4021
3917: LD_INT 2
3919: DOUBLE
3920: EQUAL
3921: IFTRUE 3925
3923: GO 3989
3925: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3926: LD_VAR 0 6
3930: PUSH
3931: LD_VAR 0 5
3935: ARRAY
3936: PPUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 250
3946: PUSH
3947: LD_INT 1
3949: NEG
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL_OW 12
3958: PLUS
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 251
3969: PUSH
3970: LD_INT 1
3972: NEG
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 12
3981: PLUS
3982: PPUSH
3983: CALL_OW 153
3987: GO 4021
3989: LD_INT 3
3991: DOUBLE
3992: EQUAL
3993: IFTRUE 3997
3995: GO 4020
3997: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3998: LD_VAR 0 6
4002: PUSH
4003: LD_VAR 0 5
4007: ARRAY
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: CALL_OW 115
4018: GO 4021
4020: POP
// end ; end ;
4021: GO 3837
4023: POP
4024: POP
4025: GO 3824
4027: POP
4028: POP
// end ;
4029: LD_VAR 0 2
4033: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4042: LD_ADDR_VAR 0 7
4046: PUSH
4047: LD_VAR 0 2
4051: PPUSH
4052: LD_INT 22
4054: PUSH
4055: LD_VAR 0 1
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 21
4066: PUSH
4067: LD_INT 2
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 34
4076: PUSH
4077: LD_INT 52
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 70
4093: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4094: LD_ADDR_VAR 0 8
4098: PUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_INT 22
4106: PUSH
4107: LD_VAR 0 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 3
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 24
4131: PUSH
4132: LD_INT 1000
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: PPUSH
4151: CALL_OW 70
4155: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4156: LD_VAR 0 8
4160: PUSH
4161: LD_INT 0
4163: GREATER
4164: PUSH
4165: LD_VAR 0 7
4169: PPUSH
4170: LD_INT 24
4172: PUSH
4173: LD_INT 750
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PUSH
4185: LD_INT 0
4187: GREATER
4188: AND
4189: IFFALSE 4209
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4191: LD_VAR 0 7
4195: PPUSH
4196: LD_VAR 0 8
4200: PUSH
4201: LD_INT 1
4203: ARRAY
4204: PPUSH
4205: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4209: LD_VAR 0 7
4213: PUSH
4214: LD_INT 0
4216: GREATER
4217: PUSH
4218: LD_VAR 0 8
4222: PUSH
4223: LD_INT 0
4225: EQUAL
4226: AND
4227: PUSH
4228: LD_EXP 10
4232: PUSH
4233: LD_INT 0
4235: GREATER
4236: AND
4237: IFFALSE 4284
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: LD_EXP 10
4248: PUSH
4249: LD_INT 1
4251: ARRAY
4252: PPUSH
4253: LD_EXP 10
4257: PUSH
4258: LD_INT 2
4260: ARRAY
4261: PPUSH
4262: LD_EXP 10
4266: PUSH
4267: LD_INT 3
4269: ARRAY
4270: PPUSH
4271: LD_EXP 10
4275: PUSH
4276: LD_INT 4
4278: ARRAY
4279: PPUSH
4280: CALL_OW 567
// end ; end_of_file
4284: LD_VAR 0 3
4288: RET
// every 0 0$1 do
4289: GO 4291
4291: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 14
4297: PPUSH
4298: LD_INT 3
4300: PPUSH
4301: CALL 1544 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4305: LD_INT 3
4307: PPUSH
4308: LD_INT 15
4310: PPUSH
4311: LD_INT 3
4313: PPUSH
4314: CALL 1544 0 3
// end ;
4318: END
// every 0 0$1 trigger russianAI = 1 do
4319: LD_EXP 13
4323: PUSH
4324: LD_INT 1
4326: EQUAL
4327: IFFALSE 4433
4329: GO 4331
4331: DISABLE
// begin enable ;
4332: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4333: LD_INT 3
4335: PPUSH
4336: LD_INT 22
4338: PPUSH
4339: LD_INT 7
4341: PPUSH
4342: LD_EXP 10
4346: PPUSH
4347: CALL 1785 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4351: LD_INT 3
4353: PPUSH
4354: LD_INT 8
4356: PPUSH
4357: LD_INT 7
4359: PPUSH
4360: LD_INT 14
4362: PUSH
4363: LD_INT 15
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 2
4375: PPUSH
4376: CALL_OW 12
4380: ARRAY
4381: PPUSH
4382: CALL 2176 0 4
// AttackVehicles ( 3 ) ;
4386: LD_INT 3
4388: PPUSH
4389: CALL 3331 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4393: LD_INT 3
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL 3027 0 2
// IntBazooka ( 3 ) ;
4403: LD_INT 3
4405: PPUSH
4406: CALL 3706 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4410: LD_INT 3
4412: PPUSH
4413: LD_INT 51
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL 2884 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4423: LD_INT 3
4425: PPUSH
4426: LD_INT 7
4428: PPUSH
4429: CALL 4034 0 2
// end ;
4433: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4434: LD_INT 22
4436: PPUSH
4437: CALL_OW 303
4441: PUSH
4442: LD_INT 22
4444: PPUSH
4445: CALL_OW 255
4449: PUSH
4450: LD_INT 1
4452: EQUAL
4453: OR
4454: IFFALSE 4469
4456: GO 4458
4458: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4459: LD_INT 3
4461: PPUSH
4462: LD_INT 22
4464: PPUSH
4465: CALL 2720 0 2
4469: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4470: LD_EXP 13
4474: PUSH
4475: LD_INT 1
4477: EQUAL
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 3
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 21
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 50
4501: PUSH
4502: EMPTY
4503: LIST
4504: PUSH
4505: LD_INT 33
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 34
4520: PUSH
4521: LD_INT 46
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 34
4530: PUSH
4531: LD_INT 45
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 34
4540: PUSH
4541: LD_INT 44
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 34
4550: PUSH
4551: LD_INT 49
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 34
4560: PUSH
4561: LD_INT 47
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: EQUAL
4591: AND
4592: IFFALSE 4779
4594: GO 4596
4596: DISABLE
// begin enable ;
4597: ENABLE
// if russianRocketsAvalaible = 1 then
4598: LD_EXP 14
4602: PUSH
4603: LD_INT 1
4605: EQUAL
4606: IFFALSE 4663
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4608: LD_INT 3
4610: PPUSH
4611: LD_INT 1
4613: PPUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_OWVAR 67
4632: ARRAY
4633: PPUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 45
4639: PUSH
4640: LD_INT 44
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 3
4653: PPUSH
4654: LD_INT 24
4656: PPUSH
4657: CALL 3257 0 7
4661: GO 4720
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4663: LD_INT 3
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: LD_INT 4
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_OWVAR 67
4687: ARRAY
4688: PPUSH
4689: LD_INT 46
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 44
4697: PUSH
4698: LD_INT 47
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: LD_INT 3
4712: PPUSH
4713: LD_INT 24
4715: PPUSH
4716: CALL 3257 0 7
// if russianTimeLapsers = 0 then
4720: LD_EXP 12
4724: PUSH
4725: LD_INT 0
4727: EQUAL
4728: IFFALSE 4779
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4730: LD_INT 3
4732: PPUSH
4733: LD_INT 40
4735: PPUSH
4736: LD_INT 1
4738: PUSH
4739: LD_INT 2
4741: PUSH
4742: LD_INT 2
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: PUSH
4750: LD_OWVAR 67
4754: ARRAY
4755: PPUSH
4756: LD_INT 49
4758: PUSH
4759: LD_INT 49
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: LD_INT 3
4768: PPUSH
4769: LD_INT 3
4771: PPUSH
4772: LD_INT 24
4774: PPUSH
4775: CALL 3257 0 7
// end ; end_of_file
4779: END
// every 1 do var dec1 , dec2 ;
4780: GO 4782
4782: DISABLE
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
// begin InGameOn ;
4787: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
4791: LD_INT 48
4793: PPUSH
4794: LD_STRING deltakappa
4796: PPUSH
4797: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4801: LD_INT 95
4803: PPUSH
4804: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4808: LD_INT 95
4810: PPUSH
4811: LD_INT 30
4813: PPUSH
4814: LD_INT 11
4816: PPUSH
4817: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4821: LD_INT 30
4823: PPUSH
4824: LD_INT 11
4826: PPUSH
4827: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4831: LD_EXP 5
4835: PPUSH
4836: LD_STRING D1-Pow-1
4838: PPUSH
4839: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4843: LD_EXP 1
4847: PPUSH
4848: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4852: LD_EXP 1
4856: PPUSH
4857: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4861: LD_EXP 1
4865: PPUSH
4866: LD_STRING D1-JMM-1
4868: PPUSH
4869: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4873: LD_EXP 5
4877: PPUSH
4878: LD_STRING D1-Pow-2
4880: PPUSH
4881: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4885: LD_EXP 1
4889: PPUSH
4890: LD_STRING D1-JMM-2
4892: PPUSH
4893: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4897: LD_EXP 1
4901: PPUSH
4902: LD_INT 95
4904: PPUSH
4905: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4909: LD_STRING M1
4911: PPUSH
4912: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4916: LD_INT 35
4918: PPUSH
4919: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4923: LD_EXP 1
4927: PPUSH
4928: LD_INT 95
4930: PPUSH
4931: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4935: LD_INT 95
4937: PPUSH
4938: LD_INT 51
4940: PPUSH
4941: LD_INT 21
4943: PPUSH
4944: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4948: LD_INT 95
4950: PPUSH
4951: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4955: LD_INT 95
4957: PPUSH
4958: LD_INT 5
4960: PPUSH
4961: CALL_OW 308
4965: IFFALSE 4916
// if JMMGirl = 1 then
4967: LD_EXP 7
4971: PUSH
4972: LD_INT 1
4974: EQUAL
4975: IFFALSE 5288
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4977: LD_EXP 2
4981: PPUSH
4982: LD_STRING D2J-Joan-1
4984: PPUSH
4985: CALL_OW 94
// dec1 = query ( Q1 ) ;
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_STRING Q1
4996: PPUSH
4997: CALL_OW 97
5001: ST_TO_ADDR
// if dec1 = 1 then
5002: LD_VAR 0 1
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5264
// begin ComExitVehicle ( JMM ) ;
5012: LD_EXP 1
5016: PPUSH
5017: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5021: LD_EXP 1
5025: PPUSH
5026: LD_STRING D2J-JMM-1
5028: PPUSH
5029: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5033: LD_EXP 2
5037: PPUSH
5038: LD_STRING D2J-Joan-2
5040: PPUSH
5041: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5045: LD_EXP 1
5049: PPUSH
5050: LD_STRING D2J-JMM-2
5052: PPUSH
5053: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5057: LD_EXP 2
5061: PPUSH
5062: LD_STRING D2J-Joan-3
5064: PPUSH
5065: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5069: LD_EXP 5
5073: PPUSH
5074: LD_STRING DPowell-Pow-1
5076: PPUSH
5077: CALL_OW 94
// dec2 = query ( Q2J ) ;
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: LD_STRING Q2J
5088: PPUSH
5089: CALL_OW 97
5093: ST_TO_ADDR
// if dec2 = 1 then
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 1
5101: EQUAL
5102: IFFALSE 5144
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D2Ja-JMM-1
5111: PPUSH
5112: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5116: LD_EXP 2
5120: PPUSH
5121: LD_STRING D2Ja-Joan-1
5123: PPUSH
5124: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5128: LD_EXP 1
5132: PPUSH
5133: LD_STRING D2Ja-JMM-2
5135: PPUSH
5136: CALL_OW 88
// InGameOff ;
5140: CALL_OW 9
// end ; if dec2 = 2 then
5144: LD_VAR 0 2
5148: PUSH
5149: LD_INT 2
5151: EQUAL
5152: IFFALSE 5228
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D2Jb-JMM-1
5161: PPUSH
5162: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5166: LD_EXP 2
5170: PPUSH
5171: LD_STRING D2Jb-Joan-1
5173: PPUSH
5174: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5178: LD_EXP 1
5182: PPUSH
5183: LD_STRING D2Jb-JMM-2
5185: PPUSH
5186: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5190: LD_EXP 2
5194: PPUSH
5195: LD_STRING D2Jb-Joan-2
5197: PPUSH
5198: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5202: LD_EXP 1
5206: PPUSH
5207: LD_STRING D2Jb-JMM-3
5209: PPUSH
5210: CALL_OW 88
// fastEnd = 1 ;
5214: LD_ADDR_EXP 15
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// FinishMission ;
5222: CALL 9141 0 0
// exit ;
5226: GO 5858
// end ; if dec2 = 3 then
5228: LD_VAR 0 2
5232: PUSH
5233: LD_INT 3
5235: EQUAL
5236: IFFALSE 5264
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5238: LD_EXP 2
5242: PPUSH
5243: LD_STRING D2Jc-Joan-1
5245: PPUSH
5246: CALL_OW 94
// fastEnd = 1 ;
5250: LD_ADDR_EXP 15
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// FinishMission ;
5258: CALL 9141 0 0
// exit ;
5262: GO 5858
// end ; end ; if dec1 = 2 then
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 2
5271: EQUAL
5272: IFFALSE 5288
// begin fastEnd = 1 ;
5274: LD_ADDR_EXP 15
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// FinishMission ;
5282: CALL 9141 0 0
// exit ;
5286: GO 5858
// end ; end ; if JMMGirl = 2 then
5288: LD_EXP 7
5292: PUSH
5293: LD_INT 2
5295: EQUAL
5296: IFFALSE 5621
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5298: LD_EXP 3
5302: PPUSH
5303: LD_STRING D2L-Lisa-1
5305: PPUSH
5306: CALL_OW 94
// dec1 = query ( Q1 ) ;
5310: LD_ADDR_VAR 0 1
5314: PUSH
5315: LD_STRING Q1
5317: PPUSH
5318: CALL_OW 97
5322: ST_TO_ADDR
// if dec1 = 1 then
5323: LD_VAR 0 1
5327: PUSH
5328: LD_INT 1
5330: EQUAL
5331: IFFALSE 5597
// begin ComExitVehicle ( JMM ) ;
5333: LD_EXP 1
5337: PPUSH
5338: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D2L-JMM-1
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5354: LD_EXP 3
5358: PPUSH
5359: LD_STRING D2L-Lisa-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D2L-JMM-2
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5378: LD_EXP 3
5382: PPUSH
5383: LD_STRING D2L-Lisa-3
5385: PPUSH
5386: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5390: LD_EXP 5
5394: PPUSH
5395: LD_STRING DPowell-Pow-1
5397: PPUSH
5398: CALL_OW 94
// dec2 = query ( Q2L ) ;
5402: LD_ADDR_VAR 0 2
5406: PUSH
5407: LD_STRING Q2L
5409: PPUSH
5410: CALL_OW 97
5414: ST_TO_ADDR
// if dec2 = 1 then
5415: LD_VAR 0 2
5419: PUSH
5420: LD_INT 1
5422: EQUAL
5423: IFFALSE 5489
// begin Say ( JMM , D2La-JMM-1 ) ;
5425: LD_EXP 1
5429: PPUSH
5430: LD_STRING D2La-JMM-1
5432: PPUSH
5433: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5437: LD_EXP 3
5441: PPUSH
5442: LD_STRING D2La-Lisa-1
5444: PPUSH
5445: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5449: LD_EXP 1
5453: PPUSH
5454: LD_STRING D2La-JMM-2
5456: PPUSH
5457: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5461: LD_EXP 3
5465: PPUSH
5466: LD_STRING D2La-Lisa-2
5468: PPUSH
5469: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5473: LD_EXP 1
5477: PPUSH
5478: LD_STRING D2La-JMM-3
5480: PPUSH
5481: CALL_OW 88
// InGameOff ;
5485: CALL_OW 9
// end ; if dec2 = 2 then
5489: LD_VAR 0 2
5493: PUSH
5494: LD_INT 2
5496: EQUAL
5497: IFFALSE 5561
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5499: LD_EXP 1
5503: PPUSH
5504: LD_STRING D2Lb-JMM-1
5506: PPUSH
5507: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5511: LD_EXP 3
5515: PPUSH
5516: LD_STRING D2Lb-Lisa-1
5518: PPUSH
5519: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5523: LD_EXP 1
5527: PPUSH
5528: LD_STRING D2Lb-JMM-2
5530: PPUSH
5531: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5535: LD_EXP 3
5539: PPUSH
5540: LD_STRING D2Lb-Lisa-2
5542: PPUSH
5543: CALL_OW 94
// fastEnd = 1 ;
5547: LD_ADDR_EXP 15
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// FinishMission ;
5555: CALL 9141 0 0
// exit ;
5559: GO 5858
// end ; if dec2 = 3 then
5561: LD_VAR 0 2
5565: PUSH
5566: LD_INT 3
5568: EQUAL
5569: IFFALSE 5597
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5571: LD_EXP 3
5575: PPUSH
5576: LD_STRING D2Lc-Lisa-1
5578: PPUSH
5579: CALL_OW 94
// fastEnd = 1 ;
5583: LD_ADDR_EXP 15
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// FinishMission ;
5591: CALL 9141 0 0
// exit ;
5595: GO 5858
// end ; end ; if dec1 = 2 then
5597: LD_VAR 0 1
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5621
// begin fastEnd = 1 ;
5607: LD_ADDR_EXP 15
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// FinishMission ;
5615: CALL 9141 0 0
// exit ;
5619: GO 5858
// end ; end ; if JMMGirl = 3 then
5621: LD_EXP 7
5625: PUSH
5626: LD_INT 3
5628: EQUAL
5629: IFFALSE 5858
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5631: LD_EXP 4
5635: PPUSH
5636: LD_STRING D2X-Con-1
5638: PPUSH
5639: CALL_OW 94
// dec1 = query ( Q1 ) ;
5643: LD_ADDR_VAR 0 1
5647: PUSH
5648: LD_STRING Q1
5650: PPUSH
5651: CALL_OW 97
5655: ST_TO_ADDR
// if dec1 = 1 then
5656: LD_VAR 0 1
5660: PUSH
5661: LD_INT 1
5663: EQUAL
5664: IFFALSE 5834
// begin ComExitVehicle ( JMM ) ;
5666: LD_EXP 1
5670: PPUSH
5671: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D2X-JMM-1
5682: PPUSH
5683: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5687: LD_EXP 4
5691: PPUSH
5692: LD_STRING D2X-Con-2
5694: PPUSH
5695: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5699: LD_EXP 5
5703: PPUSH
5704: LD_STRING DPowell-Pow-1
5706: PPUSH
5707: CALL_OW 94
// dec2 = query ( Q2X ) ;
5711: LD_ADDR_VAR 0 2
5715: PUSH
5716: LD_STRING Q2X
5718: PPUSH
5719: CALL_OW 97
5723: ST_TO_ADDR
// if dec2 = 1 then
5724: LD_VAR 0 2
5728: PUSH
5729: LD_INT 1
5731: EQUAL
5732: IFFALSE 5750
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5734: LD_EXP 1
5738: PPUSH
5739: LD_STRING D2Xa-JMM-1
5741: PPUSH
5742: CALL_OW 88
// InGameOff ;
5746: CALL_OW 9
// end ; if dec2 = 2 then
5750: LD_VAR 0 2
5754: PUSH
5755: LD_INT 2
5757: EQUAL
5758: IFFALSE 5798
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5760: LD_EXP 1
5764: PPUSH
5765: LD_STRING D2Xb-JMM-1
5767: PPUSH
5768: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5772: LD_EXP 4
5776: PPUSH
5777: LD_STRING D2Xb-Con-1
5779: PPUSH
5780: CALL_OW 94
// fastEnd = 1 ;
5784: LD_ADDR_EXP 15
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// FinishMission ;
5792: CALL 9141 0 0
// exit ;
5796: GO 5858
// end ; if dec2 = 3 then
5798: LD_VAR 0 2
5802: PUSH
5803: LD_INT 3
5805: EQUAL
5806: IFFALSE 5834
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5808: LD_EXP 4
5812: PPUSH
5813: LD_STRING D2Xc-Con-1
5815: PPUSH
5816: CALL_OW 94
// fastEnd = 1 ;
5820: LD_ADDR_EXP 15
5824: PUSH
5825: LD_INT 1
5827: ST_TO_ADDR
// FinishMission ;
5828: CALL 9141 0 0
// exit ;
5832: GO 5858
// end ; end ; if dec1 = 2 then
5834: LD_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: EQUAL
5842: IFFALSE 5858
// begin fastEnd = 1 ;
5844: LD_ADDR_EXP 15
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// FinishMission ;
5852: CALL 9141 0 0
// exit ;
5856: GO 5858
// end ; end ; end ;
5858: PPOPN 2
5860: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5861: LD_EXP 1
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: CALL_OW 308
5873: IFFALSE 6639
5875: GO 5877
5877: DISABLE
// begin InGameOn ;
5878: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5889: LD_EXP 1
5893: PPUSH
5894: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5898: LD_EXP 1
5902: PPUSH
5903: LD_INT 62
5905: PPUSH
5906: LD_INT 104
5908: PPUSH
5909: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5913: LD_EXP 1
5917: PPUSH
5918: LD_EXP 2
5922: PPUSH
5923: CALL_OW 296
5927: PUSH
5928: LD_INT 4
5930: LESS
5931: PUSH
5932: LD_EXP 1
5936: PPUSH
5937: LD_EXP 3
5941: PPUSH
5942: CALL_OW 296
5946: PUSH
5947: LD_INT 4
5949: LESS
5950: OR
5951: PUSH
5952: LD_EXP 1
5956: PPUSH
5957: LD_EXP 4
5961: PPUSH
5962: CALL_OW 296
5966: PUSH
5967: LD_INT 4
5969: LESS
5970: OR
5971: IFFALSE 5882
// case JMMGirl of 1 :
5973: LD_EXP 7
5977: PUSH
5978: LD_INT 1
5980: DOUBLE
5981: EQUAL
5982: IFTRUE 5986
5984: GO 6198
5986: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5987: LD_INT 22
5989: PUSH
5990: LD_INT 4
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: PPUSH
6002: LD_INT 1
6004: PPUSH
6005: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6009: LD_EXP 2
6013: PPUSH
6014: LD_EXP 1
6018: PPUSH
6019: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6023: LD_EXP 1
6027: PPUSH
6028: LD_EXP 2
6032: PPUSH
6033: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6037: LD_EXP 2
6041: PUSH
6042: LD_EXP 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PPUSH
6051: CALL_OW 87
// wait ( 0 0$1 ) ;
6055: LD_INT 35
6057: PPUSH
6058: CALL_OW 67
// DialogueOn ;
6062: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6066: LD_EXP 2
6070: PPUSH
6071: LD_STRING D3J-Joan-1
6073: PPUSH
6074: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6078: LD_EXP 1
6082: PPUSH
6083: LD_STRING D3J-JMM-1
6085: PPUSH
6086: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6090: LD_EXP 2
6094: PPUSH
6095: LD_STRING D3J-Joan-2
6097: PPUSH
6098: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6102: LD_EXP 1
6106: PPUSH
6107: LD_STRING D3J-JMM-2
6109: PPUSH
6110: CALL_OW 88
// wait ( 0 0$1 ) ;
6114: LD_INT 35
6116: PPUSH
6117: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6121: LD_EXP 1
6125: PPUSH
6126: LD_STRING D4-JMM-1
6128: PPUSH
6129: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6133: LD_EXP 2
6137: PPUSH
6138: LD_STRING D4-Joan-1
6140: PPUSH
6141: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6145: LD_EXP 1
6149: PPUSH
6150: LD_STRING D4-JMM-2
6152: PPUSH
6153: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6157: LD_EXP 2
6161: PPUSH
6162: LD_STRING D4-Joan-2
6164: PPUSH
6165: CALL_OW 88
// DialogueOff ;
6169: CALL_OW 7
// InGameOff ;
6173: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6177: LD_STRING M2J
6179: PPUSH
6180: CALL_OW 337
// SaveForQuickRestart ;
6184: CALL_OW 22
// russianAI = 1 ;
6188: LD_ADDR_EXP 13
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// end ; 2 :
6196: GO 6639
6198: LD_INT 2
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6418
6206: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6207: LD_INT 22
6209: PUSH
6210: LD_INT 4
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PPUSH
6217: CALL_OW 69
6221: PPUSH
6222: LD_INT 1
6224: PPUSH
6225: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6229: LD_EXP 3
6233: PPUSH
6234: LD_EXP 1
6238: PPUSH
6239: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6243: LD_EXP 1
6247: PPUSH
6248: LD_EXP 3
6252: PPUSH
6253: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6257: LD_EXP 3
6261: PUSH
6262: LD_EXP 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PPUSH
6271: CALL_OW 87
// wait ( 0 0$1 ) ;
6275: LD_INT 35
6277: PPUSH
6278: CALL_OW 67
// DialogueOn ;
6282: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6286: LD_EXP 3
6290: PPUSH
6291: LD_STRING D3L-Lisa-1
6293: PPUSH
6294: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6298: LD_EXP 1
6302: PPUSH
6303: LD_STRING D3L-JMM-1
6305: PPUSH
6306: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6310: LD_EXP 3
6314: PPUSH
6315: LD_STRING D3L-Lisa-2
6317: PPUSH
6318: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D3L-JMM-2
6329: PPUSH
6330: CALL_OW 88
// wait ( 0 0$1 ) ;
6334: LD_INT 35
6336: PPUSH
6337: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D4-JMM-1
6348: PPUSH
6349: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6353: LD_EXP 3
6357: PPUSH
6358: LD_STRING D4-Lisa-1
6360: PPUSH
6361: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6365: LD_EXP 1
6369: PPUSH
6370: LD_STRING D4-JMM-1
6372: PPUSH
6373: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6377: LD_EXP 3
6381: PPUSH
6382: LD_STRING D4-Lisa-2
6384: PPUSH
6385: CALL_OW 88
// DialogueOff ;
6389: CALL_OW 7
// InGameOff ;
6393: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6397: LD_STRING M2L
6399: PPUSH
6400: CALL_OW 337
// SaveForQuickRestart ;
6404: CALL_OW 22
// russianAI = 1 ;
6408: LD_ADDR_EXP 13
6412: PUSH
6413: LD_INT 1
6415: ST_TO_ADDR
// end ; 3 :
6416: GO 6639
6418: LD_INT 3
6420: DOUBLE
6421: EQUAL
6422: IFTRUE 6426
6424: GO 6638
6426: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6427: LD_INT 22
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6449: LD_EXP 4
6453: PPUSH
6454: LD_EXP 1
6458: PPUSH
6459: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6463: LD_EXP 1
6467: PPUSH
6468: LD_EXP 4
6472: PPUSH
6473: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6477: LD_EXP 2
6481: PUSH
6482: LD_EXP 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 87
// wait ( 0 0$1 ) ;
6495: LD_INT 35
6497: PPUSH
6498: CALL_OW 67
// DialogueOn ;
6502: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6506: LD_EXP 4
6510: PPUSH
6511: LD_STRING D3X-Con-1
6513: PPUSH
6514: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D3J-JMM-1
6525: PPUSH
6526: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6530: LD_EXP 4
6534: PPUSH
6535: LD_STRING D3J-Joan-2
6537: PPUSH
6538: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D3J-JMM-2
6549: PPUSH
6550: CALL_OW 88
// wait ( 0 0$1 ) ;
6554: LD_INT 35
6556: PPUSH
6557: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6561: LD_EXP 1
6565: PPUSH
6566: LD_STRING D4-JMM-1
6568: PPUSH
6569: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6573: LD_EXP 4
6577: PPUSH
6578: LD_STRING D4-Con-1
6580: PPUSH
6581: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6585: LD_EXP 1
6589: PPUSH
6590: LD_STRING D4-JMM-2
6592: PPUSH
6593: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6597: LD_EXP 4
6601: PPUSH
6602: LD_STRING D4-Con-2
6604: PPUSH
6605: CALL_OW 88
// DialogueOff ;
6609: CALL_OW 7
// InGameOff ;
6613: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6617: LD_STRING M2X
6619: PPUSH
6620: CALL_OW 337
// SaveForQuickRestart ;
6624: CALL_OW 22
// russianAI = 1 ;
6628: LD_ADDR_EXP 13
6632: PUSH
6633: LD_INT 1
6635: ST_TO_ADDR
// end ; end ;
6636: GO 6639
6638: POP
// end ;
6639: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6640: LD_INT 32
6642: PPUSH
6643: CALL_OW 306
6647: IFFALSE 6980
6649: GO 6651
6651: DISABLE
// begin case JMMGirl of 1 :
6652: LD_EXP 7
6656: PUSH
6657: LD_INT 1
6659: DOUBLE
6660: EQUAL
6661: IFTRUE 6665
6663: GO 6787
6665: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6666: LD_EXP 1
6670: PPUSH
6671: LD_STRING D6J-JMM-1
6673: PPUSH
6674: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6678: LD_STRING 13f_Denis
6680: PPUSH
6681: CALL_OW 28
6685: PUSH
6686: LD_INT 1
6688: EQUAL
6689: PUSH
6690: LD_STRING 13s_Denis
6692: PPUSH
6693: CALL_OW 28
6697: PUSH
6698: LD_INT 1
6700: EQUAL
6701: OR
6702: IFFALSE 6742
// begin Say ( Joan , D6J-Joan-1 ) ;
6704: LD_EXP 2
6708: PPUSH
6709: LD_STRING D6J-Joan-1
6711: PPUSH
6712: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6716: LD_EXP 1
6720: PPUSH
6721: LD_STRING D6J-JMM-2
6723: PPUSH
6724: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING D6J-Joan-2
6735: PPUSH
6736: CALL_OW 88
// end else
6740: GO 6754
// begin Say ( Joan , D6J-Joan-2a ) ;
6742: LD_EXP 2
6746: PPUSH
6747: LD_STRING D6J-Joan-2a
6749: PPUSH
6750: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6754: LD_EXP 1
6758: PPUSH
6759: LD_STRING D6J-JMM-3
6761: PPUSH
6762: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6766: LD_EXP 2
6770: PPUSH
6771: LD_STRING D6J-Joan-3
6773: PPUSH
6774: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6778: LD_STRING M3
6780: PPUSH
6781: CALL_OW 337
// end ; 2 :
6785: GO 6980
6787: LD_INT 2
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 6853
6795: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6796: LD_EXP 1
6800: PPUSH
6801: LD_STRING D6L-JMM-1
6803: PPUSH
6804: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6808: LD_EXP 3
6812: PPUSH
6813: LD_STRING D6L-Lisa-1
6815: PPUSH
6816: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6820: LD_EXP 1
6824: PPUSH
6825: LD_STRING D6L-JMM-2
6827: PPUSH
6828: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6832: LD_EXP 3
6836: PPUSH
6837: LD_STRING D6L-Lisa-2
6839: PPUSH
6840: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6844: LD_STRING M3
6846: PPUSH
6847: CALL_OW 337
// end ; 3 :
6851: GO 6980
6853: LD_INT 3
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6979
6861: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6862: LD_EXP 1
6866: PPUSH
6867: LD_STRING D6X-JMM-1
6869: PPUSH
6870: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6874: LD_EXP 4
6878: PPUSH
6879: LD_STRING D6X-Con-1
6881: PPUSH
6882: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6886: LD_EXP 1
6890: PPUSH
6891: LD_STRING D6X-JMM-2
6893: PPUSH
6894: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6898: LD_EXP 4
6902: PPUSH
6903: LD_STRING D6X-Con-2
6905: PPUSH
6906: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6910: LD_EXP 1
6914: PPUSH
6915: LD_STRING D6X-JMM-3
6917: PPUSH
6918: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6922: LD_EXP 4
6926: PPUSH
6927: LD_STRING D6X-Con-3
6929: PPUSH
6930: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING D6X-JMM-4
6941: PPUSH
6942: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6946: LD_EXP 4
6950: PPUSH
6951: LD_STRING D6X-Con-4
6953: PPUSH
6954: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6958: LD_EXP 1
6962: PPUSH
6963: LD_STRING D6X-JMM-5
6965: PPUSH
6966: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6970: LD_STRING M3
6972: PPUSH
6973: CALL_OW 337
// end ; end ;
6977: GO 6980
6979: POP
// end ;
6980: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6981: LD_INT 22
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 33
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 69
7009: PPUSH
7010: CALL_OW 306
7014: IFFALSE 7160
7016: GO 7018
7018: DISABLE
// begin case JMMGirl of 1 :
7019: LD_EXP 7
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7069
7032: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7033: LD_EXP 1
7037: PPUSH
7038: LD_STRING D5-JMM-1
7040: PPUSH
7041: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7045: LD_INT 77
7047: PPUSH
7048: LD_INT 87
7050: PPUSH
7051: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7055: LD_EXP 2
7059: PPUSH
7060: LD_STRING D5-Joan-1
7062: PPUSH
7063: CALL_OW 88
// end ; 2 :
7067: GO 7160
7069: LD_INT 2
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7114
7077: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7078: LD_EXP 1
7082: PPUSH
7083: LD_STRING D5-JMM-1
7085: PPUSH
7086: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7090: LD_INT 77
7092: PPUSH
7093: LD_INT 87
7095: PPUSH
7096: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7100: LD_EXP 3
7104: PPUSH
7105: LD_STRING D5-Lisa-1
7107: PPUSH
7108: CALL_OW 88
// end ; 3 :
7112: GO 7160
7114: LD_INT 3
7116: DOUBLE
7117: EQUAL
7118: IFTRUE 7122
7120: GO 7159
7122: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7123: LD_EXP 1
7127: PPUSH
7128: LD_STRING D5-JMM-1
7130: PPUSH
7131: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7135: LD_INT 77
7137: PPUSH
7138: LD_INT 87
7140: PPUSH
7141: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7145: LD_EXP 4
7149: PPUSH
7150: LD_STRING D5-Con-1
7152: PPUSH
7153: CALL_OW 88
// end ; end ;
7157: GO 7160
7159: POP
// end ;
7160: END
// every 15 15$0 do
7161: GO 7163
7163: DISABLE
// begin DialogueOn ;
7164: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7168: LD_EXP 5
7172: PPUSH
7173: LD_STRING D7-Pow-1
7175: PPUSH
7176: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D7-JMM-1
7187: PPUSH
7188: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7192: LD_EXP 5
7196: PPUSH
7197: LD_STRING D7-Pow-2
7199: PPUSH
7200: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7204: LD_EXP 1
7208: PPUSH
7209: LD_STRING D7-JMM-2
7211: PPUSH
7212: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7216: LD_EXP 5
7220: PPUSH
7221: LD_STRING D7-Pow-3
7223: PPUSH
7224: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7228: LD_EXP 1
7232: PPUSH
7233: LD_STRING D7-JMM-3
7235: PPUSH
7236: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7240: LD_EXP 5
7244: PPUSH
7245: LD_STRING D7-Pow-4
7247: PPUSH
7248: CALL_OW 94
// DialogueOff ;
7252: CALL_OW 7
// end ; end_of_file
7256: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7257: LD_VAR 0 1
7261: PPUSH
7262: CALL_OW 255
7266: PUSH
7267: LD_INT 3
7269: EQUAL
7270: IFFALSE 7344
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7272: LD_ADDR_EXP 10
7276: PUSH
7277: LD_EXP 10
7281: PPUSH
7282: LD_INT 1
7284: PPUSH
7285: CALL_OW 3
7289: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7290: LD_ADDR_EXP 10
7294: PUSH
7295: LD_EXP 10
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 3
7307: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7308: LD_ADDR_EXP 10
7312: PUSH
7313: LD_EXP 10
7317: PPUSH
7318: LD_INT 1
7320: PPUSH
7321: CALL_OW 3
7325: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7326: LD_ADDR_EXP 10
7330: PUSH
7331: LD_EXP 10
7335: PPUSH
7336: LD_INT 1
7338: PPUSH
7339: CALL_OW 3
7343: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL_OW 255
7353: PUSH
7354: LD_INT 3
7356: EQUAL
7357: PUSH
7358: LD_VAR 0 1
7362: PPUSH
7363: CALL_OW 266
7367: PUSH
7368: LD_INT 0
7370: EQUAL
7371: PUSH
7372: LD_VAR 0 1
7376: PPUSH
7377: CALL_OW 266
7381: PUSH
7382: LD_INT 2
7384: EQUAL
7385: OR
7386: PUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 266
7396: PUSH
7397: LD_INT 4
7399: EQUAL
7400: OR
7401: PUSH
7402: EMPTY
7403: LIST
7404: AND
7405: IFFALSE 7416
// ComUpgrade ( building ) ;
7407: LD_VAR 0 1
7411: PPUSH
7412: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: PUSH
7426: LD_INT 3
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 266
7439: PUSH
7440: LD_INT 32
7442: EQUAL
7443: AND
7444: IFFALSE 7485
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 42
7453: PUSH
7454: LD_INT 43
7456: PUSH
7457: LD_INT 44
7459: PUSH
7460: LD_INT 46
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 1
7471: PPUSH
7472: LD_INT 4
7474: PPUSH
7475: CALL_OW 12
7479: ARRAY
7480: PPUSH
7481: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7485: LD_VAR 0 1
7489: PPUSH
7490: CALL_OW 255
7494: PUSH
7495: LD_INT 3
7497: EQUAL
7498: PUSH
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL_OW 266
7508: PUSH
7509: LD_INT 33
7511: EQUAL
7512: AND
7513: IFFALSE 7554
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7515: LD_VAR 0 1
7519: PPUSH
7520: LD_INT 42
7522: PUSH
7523: LD_INT 43
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: LD_INT 46
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 1
7540: PPUSH
7541: LD_INT 4
7543: PPUSH
7544: CALL_OW 12
7548: ARRAY
7549: PPUSH
7550: CALL_OW 208
// end ;
7554: PPOPN 1
7556: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 255
7566: PUSH
7567: LD_INT 3
7569: EQUAL
7570: PUSH
7571: LD_VAR 0 1
7575: PPUSH
7576: CALL_OW 247
7580: PUSH
7581: LD_INT 3
7583: EQUAL
7584: AND
7585: IFFALSE 8277
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7587: LD_VAR 0 1
7591: PPUSH
7592: CALL_OW 266
7596: PUSH
7597: LD_INT 31
7599: EQUAL
7600: PUSH
7601: LD_VAR 0 1
7605: PPUSH
7606: CALL_OW 266
7610: PUSH
7611: LD_INT 32
7613: EQUAL
7614: OR
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 266
7625: PUSH
7626: LD_INT 36
7628: EQUAL
7629: OR
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 266
7640: PUSH
7641: LD_INT 0
7643: EQUAL
7644: OR
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 266
7655: PUSH
7656: LD_INT 24
7658: EQUAL
7659: OR
7660: PUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 266
7670: PUSH
7671: LD_INT 17
7673: EQUAL
7674: OR
7675: PUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 266
7685: PUSH
7686: LD_INT 25
7688: EQUAL
7689: OR
7690: PUSH
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 266
7700: PUSH
7701: LD_INT 19
7703: EQUAL
7704: OR
7705: PUSH
7706: LD_VAR 0 1
7710: PPUSH
7711: CALL_OW 266
7715: PUSH
7716: LD_INT 20
7718: EQUAL
7719: OR
7720: PUSH
7721: LD_VAR 0 1
7725: PPUSH
7726: CALL_OW 266
7730: PUSH
7731: LD_INT 18
7733: EQUAL
7734: OR
7735: PUSH
7736: LD_VAR 0 1
7740: PPUSH
7741: CALL_OW 266
7745: PUSH
7746: LD_INT 21
7748: EQUAL
7749: OR
7750: PUSH
7751: LD_VAR 0 1
7755: PPUSH
7756: CALL_OW 266
7760: PUSH
7761: LD_INT 23
7763: EQUAL
7764: OR
7765: PUSH
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 266
7775: PUSH
7776: LD_INT 16
7778: EQUAL
7779: OR
7780: PUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 266
7790: PUSH
7791: LD_INT 6
7793: EQUAL
7794: OR
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 266
7805: PUSH
7806: LD_INT 29
7808: EQUAL
7809: OR
7810: PUSH
7811: LD_VAR 0 1
7815: PPUSH
7816: CALL_OW 266
7820: PUSH
7821: LD_INT 26
7823: EQUAL
7824: OR
7825: PUSH
7826: LD_VAR 0 1
7830: PPUSH
7831: CALL_OW 266
7835: PUSH
7836: LD_INT 30
7838: EQUAL
7839: OR
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 266
7850: PUSH
7851: LD_INT 28
7853: EQUAL
7854: OR
7855: PUSH
7856: LD_VAR 0 1
7860: PPUSH
7861: CALL_OW 266
7865: PUSH
7866: LD_INT 27
7868: EQUAL
7869: OR
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 266
7880: PUSH
7881: LD_INT 33
7883: EQUAL
7884: OR
7885: PUSH
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 266
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: OR
7900: PUSH
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 266
7910: PUSH
7911: LD_INT 4
7913: EQUAL
7914: OR
7915: IFFALSE 8001
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7917: LD_ADDR_EXP 10
7921: PUSH
7922: LD_EXP 10
7926: PUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 266
7936: ADD
7937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7938: LD_ADDR_EXP 10
7942: PUSH
7943: LD_EXP 10
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 250
7957: ADD
7958: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7959: LD_ADDR_EXP 10
7963: PUSH
7964: LD_EXP 10
7968: PUSH
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 251
7978: ADD
7979: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7980: LD_ADDR_EXP 10
7984: PUSH
7985: LD_EXP 10
7989: PUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 254
7999: ADD
8000: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 266
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: IFFALSE 8093
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8016: LD_ADDR_EXP 10
8020: PUSH
8021: LD_EXP 10
8025: PUSH
8026: LD_INT 0
8028: ADD
8029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8030: LD_ADDR_EXP 10
8034: PUSH
8035: LD_EXP 10
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 250
8049: ADD
8050: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8051: LD_ADDR_EXP 10
8055: PUSH
8056: LD_EXP 10
8060: PUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 251
8070: ADD
8071: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8072: LD_ADDR_EXP 10
8076: PUSH
8077: LD_EXP 10
8081: PUSH
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 254
8091: ADD
8092: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 266
8102: PUSH
8103: LD_INT 3
8105: EQUAL
8106: IFFALSE 8185
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8108: LD_ADDR_EXP 10
8112: PUSH
8113: LD_EXP 10
8117: PUSH
8118: LD_INT 2
8120: ADD
8121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8122: LD_ADDR_EXP 10
8126: PUSH
8127: LD_EXP 10
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: CALL_OW 250
8141: ADD
8142: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8143: LD_ADDR_EXP 10
8147: PUSH
8148: LD_EXP 10
8152: PUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 251
8162: ADD
8163: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8164: LD_ADDR_EXP 10
8168: PUSH
8169: LD_EXP 10
8173: PUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 254
8183: ADD
8184: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 266
8194: PUSH
8195: LD_INT 5
8197: EQUAL
8198: IFFALSE 8277
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8200: LD_ADDR_EXP 10
8204: PUSH
8205: LD_EXP 10
8209: PUSH
8210: LD_INT 4
8212: ADD
8213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8214: LD_ADDR_EXP 10
8218: PUSH
8219: LD_EXP 10
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 250
8233: ADD
8234: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8235: LD_ADDR_EXP 10
8239: PUSH
8240: LD_EXP 10
8244: PUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 251
8254: ADD
8255: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8256: LD_ADDR_EXP 10
8260: PUSH
8261: LD_EXP 10
8265: PUSH
8266: LD_VAR 0 1
8270: PPUSH
8271: CALL_OW 254
8275: ADD
8276: ST_TO_ADDR
// end ; end ; end ;
8277: PPOPN 1
8279: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8280: LD_VAR 0 2
8284: PUSH
8285: LD_INT 1
8287: EQUAL
8288: PUSH
8289: LD_VAR 0 2
8293: PUSH
8294: LD_INT 40
8296: EQUAL
8297: OR
8298: IFFALSE 8422
// if GetSide ( vehicle ) = 3 then
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 255
8309: PUSH
8310: LD_INT 3
8312: EQUAL
8313: IFFALSE 8422
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8315: LD_VAR 0 1
8319: PPUSH
8320: CALL_OW 264
8324: PUSH
8325: LD_INT 47
8327: EQUAL
8328: PUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 264
8338: PUSH
8339: LD_INT 46
8341: EQUAL
8342: OR
8343: PUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 264
8353: PUSH
8354: LD_INT 45
8356: EQUAL
8357: OR
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 264
8368: PUSH
8369: LD_INT 44
8371: EQUAL
8372: OR
8373: IFFALSE 8391
// russianTanks = russianTanks ^ vehicle ;
8375: LD_ADDR_EXP 11
8379: PUSH
8380: LD_EXP 11
8384: PUSH
8385: LD_VAR 0 1
8389: ADD
8390: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8391: LD_VAR 0 1
8395: PPUSH
8396: CALL_OW 264
8400: PUSH
8401: LD_INT 49
8403: EQUAL
8404: IFFALSE 8422
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8406: LD_ADDR_EXP 12
8410: PUSH
8411: LD_EXP 12
8415: PUSH
8416: LD_VAR 0 1
8420: ADD
8421: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8422: LD_VAR 0 1
8426: PPUSH
8427: CALL_OW 255
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: PUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 264
8445: PUSH
8446: LD_INT 10
8448: EQUAL
8449: AND
8450: IFFALSE 8466
// amLaserCounter = amLaserCounter + 1 ;
8452: LD_ADDR_EXP 9
8456: PUSH
8457: LD_EXP 9
8461: PUSH
8462: LD_INT 1
8464: PLUS
8465: ST_TO_ADDR
// end ;
8466: PPOPN 2
8468: END
// on UnitGoesToRed ( unit ) do var i ;
8469: LD_INT 0
8471: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 255
8481: PUSH
8482: LD_INT 3
8484: EQUAL
8485: PUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 247
8495: PUSH
8496: LD_INT 2
8498: EQUAL
8499: AND
8500: IFFALSE 8612
// begin if russianTanks > 0 then
8502: LD_EXP 11
8506: PUSH
8507: LD_INT 0
8509: GREATER
8510: IFFALSE 8557
// for i in russianTanks do
8512: LD_ADDR_VAR 0 2
8516: PUSH
8517: LD_EXP 11
8521: PUSH
8522: FOR_IN
8523: IFFALSE 8555
// if i = unit then
8525: LD_VAR 0 2
8529: PUSH
8530: LD_VAR 0 1
8534: EQUAL
8535: IFFALSE 8553
// russianTanks = russianTanks diff unit ;
8537: LD_ADDR_EXP 11
8541: PUSH
8542: LD_EXP 11
8546: PUSH
8547: LD_VAR 0 1
8551: DIFF
8552: ST_TO_ADDR
8553: GO 8522
8555: POP
8556: POP
// if russianTimeLapsers > 0 then
8557: LD_EXP 12
8561: PUSH
8562: LD_INT 0
8564: GREATER
8565: IFFALSE 8612
// for i in russianTimeLapsers do
8567: LD_ADDR_VAR 0 2
8571: PUSH
8572: LD_EXP 12
8576: PUSH
8577: FOR_IN
8578: IFFALSE 8610
// if i = unit then
8580: LD_VAR 0 2
8584: PUSH
8585: LD_VAR 0 1
8589: EQUAL
8590: IFFALSE 8608
// russianTimeLapsers = russianTimeLapsers diff unit ;
8592: LD_ADDR_EXP 12
8596: PUSH
8597: LD_EXP 12
8601: PUSH
8602: LD_VAR 0 1
8606: DIFF
8607: ST_TO_ADDR
8608: GO 8577
8610: POP
8611: POP
// end ; end ;
8612: PPOPN 2
8614: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL 10412 0 1
// end ; end_of_file
8624: PPOPN 1
8626: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8627: LD_EXP 1
8631: PPUSH
8632: CALL_OW 310
8636: PPUSH
8637: LD_INT 12
8639: PPUSH
8640: CALL_OW 308
8644: PUSH
8645: LD_EXP 15
8649: PUSH
8650: LD_INT 0
8652: EQUAL
8653: AND
8654: IFFALSE 9000
8656: GO 8658
8658: DISABLE
8659: LD_INT 0
8661: PPUSH
8662: PPUSH
// begin enable ;
8663: ENABLE
// if JMMGirl = 1 then
8664: LD_EXP 7
8668: PUSH
8669: LD_INT 1
8671: EQUAL
8672: IFFALSE 8689
// JMMGirlVeh = IsInUnit ( Joan ) ;
8674: LD_ADDR_VAR 0 1
8678: PUSH
8679: LD_EXP 2
8683: PPUSH
8684: CALL_OW 310
8688: ST_TO_ADDR
// if JMMGirl = 2 then
8689: LD_EXP 7
8693: PUSH
8694: LD_INT 2
8696: EQUAL
8697: IFFALSE 8714
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8699: LD_ADDR_VAR 0 1
8703: PUSH
8704: LD_EXP 3
8708: PPUSH
8709: CALL_OW 310
8713: ST_TO_ADDR
// if JMMGirl = 3 then
8714: LD_EXP 7
8718: PUSH
8719: LD_INT 3
8721: EQUAL
8722: IFFALSE 8739
// JMMGirlVeh = IsInUnit ( Connie ) ;
8724: LD_ADDR_VAR 0 1
8728: PUSH
8729: LD_EXP 4
8733: PPUSH
8734: CALL_OW 310
8738: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8739: LD_EXP 1
8743: PPUSH
8744: CALL_OW 310
8748: PPUSH
8749: LD_EXP 2
8753: PPUSH
8754: CALL_OW 310
8758: PPUSH
8759: CALL_OW 296
8763: PUSH
8764: LD_INT 10
8766: LESS
8767: PUSH
8768: LD_EXP 1
8772: PPUSH
8773: CALL_OW 310
8777: PPUSH
8778: LD_EXP 3
8782: PPUSH
8783: CALL_OW 310
8787: PPUSH
8788: CALL_OW 296
8792: PUSH
8793: LD_INT 10
8795: LESS
8796: OR
8797: PUSH
8798: LD_EXP 1
8802: PPUSH
8803: CALL_OW 310
8807: PPUSH
8808: LD_EXP 4
8812: PPUSH
8813: CALL_OW 310
8817: PPUSH
8818: CALL_OW 296
8822: PUSH
8823: LD_INT 10
8825: LESS
8826: OR
8827: IFFALSE 8921
// begin case Query ( Q3b ) of 1 :
8829: LD_STRING Q3b
8831: PPUSH
8832: CALL_OW 97
8836: PUSH
8837: LD_INT 1
8839: DOUBLE
8840: EQUAL
8841: IFTRUE 8845
8843: GO 8918
8845: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 265
8855: PUSH
8856: EMPTY
8857: LIST
8858: PUSH
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 262
8868: PUSH
8869: EMPTY
8870: LIST
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 263
8881: PUSH
8882: EMPTY
8883: LIST
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 264
8894: PUSH
8895: EMPTY
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: LD_STRING 14_JMMGirlVeh_1
8906: PPUSH
8907: CALL_OW 39
// FinishMission ;
8911: CALL 9141 0 0
// disable ;
8915: DISABLE
// end ; end ;
8916: GO 8919
8918: POP
// end else
8919: GO 9000
// begin if JMMGirl = 1 then
8921: LD_EXP 7
8925: PUSH
8926: LD_INT 1
8928: EQUAL
8929: IFFALSE 8946
// dec := Query ( Q3bJ ) else
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_STRING Q3bJ
8938: PPUSH
8939: CALL_OW 97
8943: ST_TO_ADDR
8944: GO 8984
// if JMMGirl = 2 then
8946: LD_EXP 7
8950: PUSH
8951: LD_INT 2
8953: EQUAL
8954: IFFALSE 8971
// dec := Query ( Q3bL ) else
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: LD_STRING Q3bL
8963: PPUSH
8964: CALL_OW 97
8968: ST_TO_ADDR
8969: GO 8984
// dec := Query ( Q3bX ) ;
8971: LD_ADDR_VAR 0 2
8975: PUSH
8976: LD_STRING Q3bX
8978: PPUSH
8979: CALL_OW 97
8983: ST_TO_ADDR
// if dec = 1 then
8984: LD_VAR 0 2
8988: PUSH
8989: LD_INT 1
8991: EQUAL
8992: IFFALSE 9000
// begin FinishMission ;
8994: CALL 9141 0 0
// exit ;
8998: GO 9000
// end ; end ; end ;
9000: PPOPN 2
9002: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9003: LD_INT 22
9005: PUSH
9006: LD_INT 3
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PPUSH
9027: CALL_OW 69
9031: PUSH
9032: LD_INT 0
9034: EQUAL
9035: PUSH
9036: LD_EXP 15
9040: PUSH
9041: LD_INT 0
9043: EQUAL
9044: AND
9045: IFFALSE 9140
9047: GO 9049
9049: DISABLE
// begin DialogueOn ;
9050: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9054: LD_EXP 1
9058: PPUSH
9059: LD_STRING DEnd-JMM-1
9061: PPUSH
9062: CALL_OW 88
// if JMMGirl = 1 then
9066: LD_EXP 7
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: IFFALSE 9088
// Say ( Joan , DEnd-Joan-1 ) ;
9076: LD_EXP 2
9080: PPUSH
9081: LD_STRING DEnd-Joan-1
9083: PPUSH
9084: CALL_OW 88
// if JMMGirl = 2 then
9088: LD_EXP 7
9092: PUSH
9093: LD_INT 2
9095: EQUAL
9096: IFFALSE 9110
// Say ( Lisa , DEnd-Lisa-1 ) ;
9098: LD_EXP 3
9102: PPUSH
9103: LD_STRING DEnd-Lisa-1
9105: PPUSH
9106: CALL_OW 88
// if JMMGirl = 3 then
9110: LD_EXP 7
9114: PUSH
9115: LD_INT 3
9117: EQUAL
9118: IFFALSE 9132
// Say ( Connie , DEnd-Con-1 ) ;
9120: LD_EXP 4
9124: PPUSH
9125: LD_STRING DEnd-Con-1
9127: PPUSH
9128: CALL_OW 88
// DialogueOff ;
9132: CALL_OW 7
// FinishMission ;
9136: CALL 9141 0 0
// end ;
9140: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9141: LD_INT 0
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
9147: PPUSH
// m1 := false ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// m2 := false ;
9156: LD_ADDR_VAR 0 4
9160: PUSH
9161: LD_INT 0
9163: ST_TO_ADDR
// m3 := false ;
9164: LD_ADDR_VAR 0 5
9168: PUSH
9169: LD_INT 0
9171: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9172: LD_EXP 1
9176: PPUSH
9177: LD_STRING 14_JMM
9179: PPUSH
9180: CALL_OW 38
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9184: LD_EXP 1
9188: PPUSH
9189: CALL_OW 310
9193: PUSH
9194: LD_EXP 1
9198: PPUSH
9199: CALL_OW 310
9203: PPUSH
9204: CALL_OW 247
9208: PUSH
9209: LD_INT 2
9211: EQUAL
9212: AND
9213: IFFALSE 9295
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9215: LD_ADDR_VAR 0 2
9219: PUSH
9220: LD_EXP 1
9224: PPUSH
9225: CALL_OW 310
9229: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9230: LD_VAR 0 2
9234: PPUSH
9235: CALL_OW 265
9239: PUSH
9240: EMPTY
9241: LIST
9242: PUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: CALL_OW 262
9252: PUSH
9253: EMPTY
9254: LIST
9255: PUSH
9256: LD_VAR 0 2
9260: PPUSH
9261: CALL_OW 263
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: LD_VAR 0 2
9273: PPUSH
9274: CALL_OW 264
9278: PUSH
9279: EMPTY
9280: LIST
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: PPUSH
9288: LD_STRING 14_JMMVeh_1
9290: PPUSH
9291: CALL_OW 39
// end ; if fastEnd = 1 then
9295: LD_EXP 15
9299: PUSH
9300: LD_INT 1
9302: EQUAL
9303: IFFALSE 9392
// begin AddMedal ( fastend , - 1 ) ;
9305: LD_STRING fastend
9307: PPUSH
9308: LD_INT 1
9310: NEG
9311: PPUSH
9312: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9316: LD_STRING fastend
9318: PPUSH
9319: LD_INT 1
9321: NEG
9322: PPUSH
9323: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9327: LD_STRING fastend
9329: PPUSH
9330: LD_INT 1
9332: NEG
9333: PPUSH
9334: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9338: LD_EXP 7
9342: PPUSH
9343: LD_STRING 14_JMMGirl_1
9345: PPUSH
9346: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9350: LD_INT 0
9352: PPUSH
9353: LD_STRING 14_JMMGirlStatus_1
9355: PPUSH
9356: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9360: LD_INT 0
9362: PPUSH
9363: LD_STRING 14_KappaStatus_1
9365: PPUSH
9366: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9370: LD_STRING Eliminate
9372: PPUSH
9373: CALL_OW 102
// RewardPeople ( JMM ) ;
9377: LD_EXP 1
9381: PPUSH
9382: CALL_OW 43
// YouWin ;
9386: CALL_OW 103
// exit ;
9390: GO 10217
// end ; if fastEnd = 0 then
9392: LD_EXP 15
9396: PUSH
9397: LD_INT 0
9399: EQUAL
9400: IFFALSE 10168
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9402: LD_INT 22
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: LD_INT 25
9417: PUSH
9418: LD_INT 12
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 3
9431: PUSH
9432: LD_INT 25
9434: PUSH
9435: LD_INT 16
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 69
9455: PPUSH
9456: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9460: LD_EXP 7
9464: PPUSH
9465: LD_STRING 14_JMMGirl_1
9467: PPUSH
9468: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9472: LD_INT 22
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 21
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PPUSH
9496: CALL_OW 69
9500: PUSH
9501: LD_INT 0
9503: EQUAL
9504: PUSH
9505: LD_INT 48
9507: PPUSH
9508: CALL_OW 255
9512: PUSH
9513: LD_INT 1
9515: EQUAL
9516: AND
9517: IFFALSE 9531
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9519: LD_INT 1
9521: PPUSH
9522: LD_STRING 14_KappaStatus_1
9524: PPUSH
9525: CALL_OW 39
9529: GO 9541
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9531: LD_INT 0
9533: PPUSH
9534: LD_STRING 14_KappaStatus_1
9536: PPUSH
9537: CALL_OW 39
// case JMMGirl of 1 :
9541: LD_EXP 7
9545: PUSH
9546: LD_INT 1
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9710
9554: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9555: LD_EXP 2
9559: PPUSH
9560: CALL_OW 302
9564: PUSH
9565: LD_EXP 2
9569: PPUSH
9570: CALL_OW 255
9574: PUSH
9575: LD_INT 1
9577: EQUAL
9578: AND
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 21
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 69
9608: PUSH
9609: LD_INT 0
9611: EQUAL
9612: PUSH
9613: LD_EXP 1
9617: PPUSH
9618: CALL_OW 310
9622: PPUSH
9623: LD_EXP 2
9627: PPUSH
9628: CALL_OW 310
9632: PPUSH
9633: CALL_OW 296
9637: PUSH
9638: LD_INT 10
9640: LESS
9641: OR
9642: AND
9643: IFFALSE 9687
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9645: LD_INT 1
9647: PPUSH
9648: LD_STRING 14_JMMGirlStatus_1
9650: PPUSH
9651: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9655: LD_EXP 2
9659: PPUSH
9660: LD_STRING 14_Joan
9662: PPUSH
9663: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9667: LD_STRING protect
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: CALL_OW 101
// m1 := true ;
9677: LD_ADDR_VAR 0 3
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// end else
9685: GO 9708
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9687: LD_INT 0
9689: PPUSH
9690: LD_STRING 14_JMMGirlStatus_1
9692: PPUSH
9693: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9697: LD_STRING protect
9699: PPUSH
9700: LD_INT 1
9702: NEG
9703: PPUSH
9704: CALL_OW 101
// end ; end ; 2 :
9708: GO 10039
9710: LD_INT 2
9712: DOUBLE
9713: EQUAL
9714: IFTRUE 9718
9716: GO 9874
9718: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9719: LD_EXP 3
9723: PPUSH
9724: CALL_OW 302
9728: PUSH
9729: LD_EXP 3
9733: PPUSH
9734: CALL_OW 255
9738: PUSH
9739: LD_INT 1
9741: EQUAL
9742: AND
9743: PUSH
9744: LD_INT 22
9746: PUSH
9747: LD_INT 3
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 21
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: PUSH
9773: LD_INT 0
9775: EQUAL
9776: PUSH
9777: LD_EXP 1
9781: PPUSH
9782: CALL_OW 310
9786: PPUSH
9787: LD_EXP 3
9791: PPUSH
9792: CALL_OW 310
9796: PPUSH
9797: CALL_OW 296
9801: PUSH
9802: LD_INT 10
9804: LESS
9805: OR
9806: AND
9807: IFFALSE 9851
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9809: LD_INT 1
9811: PPUSH
9812: LD_STRING 14_JMMGirlStatus_1
9814: PPUSH
9815: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9819: LD_EXP 3
9823: PPUSH
9824: LD_STRING 14_Lisa
9826: PPUSH
9827: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9831: LD_STRING protect
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 101
// m1 := true ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: LD_INT 1
9848: ST_TO_ADDR
// end else
9849: GO 9872
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9851: LD_INT 0
9853: PPUSH
9854: LD_STRING 14_JMMGirlStatus_1
9856: PPUSH
9857: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9861: LD_STRING protect
9863: PPUSH
9864: LD_INT 2
9866: NEG
9867: PPUSH
9868: CALL_OW 101
// end ; end ; 3 :
9872: GO 10039
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 10038
9882: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9883: LD_EXP 4
9887: PPUSH
9888: CALL_OW 302
9892: PUSH
9893: LD_EXP 4
9897: PPUSH
9898: CALL_OW 255
9902: PUSH
9903: LD_INT 1
9905: EQUAL
9906: AND
9907: PUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 21
9920: PUSH
9921: LD_INT 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: PUSH
9937: LD_INT 0
9939: EQUAL
9940: PUSH
9941: LD_EXP 1
9945: PPUSH
9946: CALL_OW 310
9950: PPUSH
9951: LD_EXP 4
9955: PPUSH
9956: CALL_OW 310
9960: PPUSH
9961: CALL_OW 296
9965: PUSH
9966: LD_INT 10
9968: LESS
9969: OR
9970: AND
9971: IFFALSE 10015
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9973: LD_INT 1
9975: PPUSH
9976: LD_STRING 14_JMMGirlStatus_1
9978: PPUSH
9979: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9983: LD_EXP 4
9987: PPUSH
9988: LD_STRING 14_Connie
9990: PPUSH
9991: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9995: LD_STRING protect
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 101
// m1 := true ;
10005: LD_ADDR_VAR 0 3
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// end else
10013: GO 10036
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10015: LD_INT 0
10017: PPUSH
10018: LD_STRING 14_JMMGirlStatus_1
10020: PPUSH
10021: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10025: LD_STRING protect
10027: PPUSH
10028: LD_INT 3
10030: NEG
10031: PPUSH
10032: CALL_OW 101
// end ; end ; end ;
10036: GO 10039
10038: POP
// if amLaserCounter >= 2 then
10039: LD_EXP 9
10043: PUSH
10044: LD_INT 2
10046: GREATEREQUAL
10047: IFFALSE 10069
// begin AddMedal ( double , 1 ) ;
10049: LD_STRING double
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 101
// m2 := true ;
10059: LD_ADDR_VAR 0 4
10063: PUSH
10064: LD_INT 1
10066: ST_TO_ADDR
// end else
10067: GO 10103
// begin if amLaserCounter = 1 then
10069: LD_EXP 9
10073: PUSH
10074: LD_INT 1
10076: EQUAL
10077: IFFALSE 10092
// AddMedal ( double , - 2 ) else
10079: LD_STRING double
10081: PPUSH
10082: LD_INT 2
10084: NEG
10085: PPUSH
10086: CALL_OW 101
10090: GO 10103
// AddMedal ( double , - 1 ) ;
10092: LD_STRING double
10094: PPUSH
10095: LD_INT 1
10097: NEG
10098: PPUSH
10099: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10103: LD_INT 22
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PPUSH
10127: CALL_OW 69
10131: PUSH
10132: LD_INT 0
10134: EQUAL
10135: IFFALSE 10157
// begin AddMedal ( base , 1 ) ;
10137: LD_STRING base
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: CALL_OW 101
// m3 := true ;
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: LD_INT 1
10154: ST_TO_ADDR
// end else
10155: GO 10168
// AddMedal ( base , - 1 ) ;
10157: LD_STRING base
10159: PPUSH
10160: LD_INT 1
10162: NEG
10163: PPUSH
10164: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10168: LD_VAR 0 3
10172: PUSH
10173: LD_VAR 0 4
10177: AND
10178: PUSH
10179: LD_VAR 0 5
10183: AND
10184: PUSH
10185: LD_OWVAR 67
10189: PUSH
10190: LD_INT 3
10192: EQUAL
10193: AND
10194: IFFALSE 10206
// SetAchievementEX ( ACH_AMER , 14 ) ;
10196: LD_STRING ACH_AMER
10198: PPUSH
10199: LD_INT 14
10201: PPUSH
10202: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10206: LD_STRING Eliminate
10208: PPUSH
10209: CALL_OW 102
// YouWin ;
10213: CALL_OW 103
// end ; end_of_file
10217: LD_VAR 0 1
10221: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10222: LD_EXP 1
10226: PPUSH
10227: CALL_OW 301
10231: IFFALSE 10243
10233: GO 10235
10235: DISABLE
// YouLost ( JMM ) ; end_of_file
10236: LD_STRING JMM
10238: PPUSH
10239: CALL_OW 104
10243: END
// every 1 1$0 do
10244: GO 10246
10246: DISABLE
// begin enable ;
10247: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10248: LD_INT 3
10250: PPUSH
10251: LD_INT 5
10253: PPUSH
10254: CALL_OW 12
10258: PPUSH
10259: LD_INT 13
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: CALL_OW 55
// end ; end_of_file
10269: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10270: GO 10272
10272: DISABLE
// begin ru_radar := 98 ;
10273: LD_ADDR_EXP 17
10277: PUSH
10278: LD_INT 98
10280: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10281: LD_ADDR_EXP 18
10285: PUSH
10286: LD_INT 89
10288: ST_TO_ADDR
// us_hack := 99 ;
10289: LD_ADDR_EXP 19
10293: PUSH
10294: LD_INT 99
10296: ST_TO_ADDR
// us_artillery := 97 ;
10297: LD_ADDR_EXP 20
10301: PUSH
10302: LD_INT 97
10304: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10305: LD_ADDR_EXP 21
10309: PUSH
10310: LD_INT 91
10312: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
10313: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 264
10329: PUSH
10330: LD_EXP 21
10334: EQUAL
10335: IFFALSE 10407
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10337: LD_INT 68
10339: PPUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 255
10349: PPUSH
10350: CALL_OW 321
10354: PUSH
10355: LD_INT 2
10357: EQUAL
10358: IFFALSE 10370
// eff := 70 else
10360: LD_ADDR_VAR 0 6
10364: PUSH
10365: LD_INT 70
10367: ST_TO_ADDR
10368: GO 10378
// eff := 30 ;
10370: LD_ADDR_VAR 0 6
10374: PUSH
10375: LD_INT 30
10377: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10378: LD_VAR 0 1
10382: PPUSH
10383: CALL_OW 250
10387: PPUSH
10388: LD_VAR 0 1
10392: PPUSH
10393: CALL_OW 251
10397: PPUSH
10398: LD_VAR 0 6
10402: PPUSH
10403: CALL_OW 495
// end ; end ;
10407: LD_VAR 0 4
10411: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
10412: LD_INT 0
10414: PPUSH
10415: PPUSH
10416: PPUSH
10417: PPUSH
10418: PPUSH
10419: PPUSH
// if cmd = 124 then
10420: LD_VAR 0 1
10424: PUSH
10425: LD_INT 124
10427: EQUAL
10428: IFFALSE 10634
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
10430: LD_ADDR_VAR 0 5
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 34
10440: PUSH
10441: LD_INT 53
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 34
10450: PUSH
10451: LD_INT 14
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 69
10467: ST_TO_ADDR
// if not tmp then
10468: LD_VAR 0 5
10472: NOT
10473: IFFALSE 10477
// exit ;
10475: GO 10634
// for i in tmp do
10477: LD_ADDR_VAR 0 3
10481: PUSH
10482: LD_VAR 0 5
10486: PUSH
10487: FOR_IN
10488: IFFALSE 10632
// begin taskList := GetTaskList ( i ) ;
10490: LD_ADDR_VAR 0 6
10494: PUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: CALL_OW 437
10504: ST_TO_ADDR
// if not taskList then
10505: LD_VAR 0 6
10509: NOT
10510: IFFALSE 10514
// continue ;
10512: GO 10487
// for j = 1 to taskList do
10514: LD_ADDR_VAR 0 4
10518: PUSH
10519: DOUBLE
10520: LD_INT 1
10522: DEC
10523: ST_TO_ADDR
10524: LD_VAR 0 6
10528: PUSH
10529: FOR_TO
10530: IFFALSE 10628
// if taskList [ j ] [ 1 ] = | then
10532: LD_VAR 0 6
10536: PUSH
10537: LD_VAR 0 4
10541: ARRAY
10542: PUSH
10543: LD_INT 1
10545: ARRAY
10546: PUSH
10547: LD_STRING |
10549: EQUAL
10550: IFFALSE 10626
// begin _taskList := Delete ( taskList , 1 ) ;
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 3
10569: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_VAR 0 7
10579: PPUSH
10580: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_VAR 0 6
10593: PUSH
10594: LD_VAR 0 4
10598: ARRAY
10599: PUSH
10600: LD_INT 2
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 6
10608: PUSH
10609: LD_VAR 0 4
10613: ARRAY
10614: PUSH
10615: LD_INT 3
10617: ARRAY
10618: PPUSH
10619: LD_INT 8
10621: PPUSH
10622: CALL 10639 0 4
// end ;
10626: GO 10529
10628: POP
10629: POP
// end ;
10630: GO 10487
10632: POP
10633: POP
// end ; end ;
10634: LD_VAR 0 2
10638: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10639: LD_INT 0
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10650: LD_VAR 0 1
10654: NOT
10655: PUSH
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_VAR 0 3
10665: PPUSH
10666: CALL_OW 488
10670: NOT
10671: OR
10672: PUSH
10673: LD_VAR 0 4
10677: NOT
10678: OR
10679: IFFALSE 10683
// exit ;
10681: GO 11023
// list := [ ] ;
10683: LD_ADDR_VAR 0 13
10687: PUSH
10688: EMPTY
10689: ST_TO_ADDR
// if x - r < 0 then
10690: LD_VAR 0 2
10694: PUSH
10695: LD_VAR 0 4
10699: MINUS
10700: PUSH
10701: LD_INT 0
10703: LESS
10704: IFFALSE 10716
// min_x := 0 else
10706: LD_ADDR_VAR 0 7
10710: PUSH
10711: LD_INT 0
10713: ST_TO_ADDR
10714: GO 10732
// min_x := x - r ;
10716: LD_ADDR_VAR 0 7
10720: PUSH
10721: LD_VAR 0 2
10725: PUSH
10726: LD_VAR 0 4
10730: MINUS
10731: ST_TO_ADDR
// if y - r < 0 then
10732: LD_VAR 0 3
10736: PUSH
10737: LD_VAR 0 4
10741: MINUS
10742: PUSH
10743: LD_INT 0
10745: LESS
10746: IFFALSE 10758
// min_y := 0 else
10748: LD_ADDR_VAR 0 8
10752: PUSH
10753: LD_INT 0
10755: ST_TO_ADDR
10756: GO 10774
// min_y := y - r ;
10758: LD_ADDR_VAR 0 8
10762: PUSH
10763: LD_VAR 0 3
10767: PUSH
10768: LD_VAR 0 4
10772: MINUS
10773: ST_TO_ADDR
// max_x := x + r ;
10774: LD_ADDR_VAR 0 9
10778: PUSH
10779: LD_VAR 0 2
10783: PUSH
10784: LD_VAR 0 4
10788: PLUS
10789: ST_TO_ADDR
// max_y := y + r ;
10790: LD_ADDR_VAR 0 10
10794: PUSH
10795: LD_VAR 0 3
10799: PUSH
10800: LD_VAR 0 4
10804: PLUS
10805: ST_TO_ADDR
// for _x = min_x to max_x do
10806: LD_ADDR_VAR 0 11
10810: PUSH
10811: DOUBLE
10812: LD_VAR 0 7
10816: DEC
10817: ST_TO_ADDR
10818: LD_VAR 0 9
10822: PUSH
10823: FOR_TO
10824: IFFALSE 10941
// for _y = min_y to max_y do
10826: LD_ADDR_VAR 0 12
10830: PUSH
10831: DOUBLE
10832: LD_VAR 0 8
10836: DEC
10837: ST_TO_ADDR
10838: LD_VAR 0 10
10842: PUSH
10843: FOR_TO
10844: IFFALSE 10937
// begin if not ValidHex ( _x , _y ) then
10846: LD_VAR 0 11
10850: PPUSH
10851: LD_VAR 0 12
10855: PPUSH
10856: CALL_OW 488
10860: NOT
10861: IFFALSE 10865
// continue ;
10863: GO 10843
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10865: LD_VAR 0 11
10869: PPUSH
10870: LD_VAR 0 12
10874: PPUSH
10875: CALL_OW 351
10879: PUSH
10880: LD_VAR 0 11
10884: PPUSH
10885: LD_VAR 0 12
10889: PPUSH
10890: CALL_OW 554
10894: AND
10895: IFFALSE 10935
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10897: LD_ADDR_VAR 0 13
10901: PUSH
10902: LD_VAR 0 13
10906: PPUSH
10907: LD_VAR 0 13
10911: PUSH
10912: LD_INT 1
10914: PLUS
10915: PPUSH
10916: LD_VAR 0 11
10920: PUSH
10921: LD_VAR 0 12
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 2
10934: ST_TO_ADDR
// end ;
10935: GO 10843
10937: POP
10938: POP
10939: GO 10823
10941: POP
10942: POP
// if not list then
10943: LD_VAR 0 13
10947: NOT
10948: IFFALSE 10952
// exit ;
10950: GO 11023
// for i in list do
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_VAR 0 13
10961: PUSH
10962: FOR_IN
10963: IFFALSE 11021
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_STRING M
10972: PUSH
10973: LD_VAR 0 6
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PUSH
10982: LD_VAR 0 6
10986: PUSH
10987: LD_INT 2
10989: ARRAY
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: LD_INT 0
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: PPUSH
11015: CALL_OW 447
11019: GO 10962
11021: POP
11022: POP
// end ;
11023: LD_VAR 0 5
11027: RET
